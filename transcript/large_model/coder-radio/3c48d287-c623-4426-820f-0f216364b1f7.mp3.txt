This is KOTOR Radio for November 22nd, 2021.
Hello friends and welcome into Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and the business, software development, and the world of technology.
As always, we'd like to thank a cloud group for sponsoring this show.
For Black Friday, the cloud learning pros at A Cloud Guru have an offering of 40% off
their personal annual plans.
That's right, 40%.
Build your cloud skills with hundreds of courses, thousands of labs, and real sandbox environments.
Visit acloudguru.com today to save big on the best cloud learning.
My name is Chris and joining us with his podcast pants on and hopefully feeling a bit better,
it's our host, Mr. Dominic.
Hello Mike.
Hello Mr. Fisher.
Yes, I'm feeling tons better.
Oh, you must have done like the regime or something that you're like, you sound totally
normal again.
I have a whole hippie approved regime of echinacea, vitamin C, vitamin D, make your jokes in the
comments.
And what's the other one I take?
Elderberry?
Oh, yeah, sure.
You got to get the elderberry.
But I actually take it as a fluid, like just liquefied and that tastes like butts.
Right, you just got to what you got to do is chase it with a little gin or vodka, you
know?
No, you can't.
Or because I negates the whole point is clean, eaten and good sleep is a big part of it,
too.
That's it.
So I know that like some sort of like weird fever state, you ended up installing Windows
11 and gave it a go.
I mean, we shocked and appalled, but I'm here to support you.
Shocked and appalled.
Really?
Yeah.
So I do have a gaming laptop.
It's a Lenovo Legion.
It came at Windows 10.
So I upped it to Windows 11.
And I had some thoughts.
So I blogged it up my takeaway from your blog post, which will have a link to in the notes
was overall mostly positive, but there's still an element to the Windows experience that
I find very grating.
And you honed in on it.
You said the constant boardwalk pitches of like antivirus and aftermarket OEM services,
it just makes the desktop feel cheap.
You get hammered by all these OEM messages.
And like when you come from Mac OS or Linux, that's a huge difference on Windows.
And it just you know what, when you wrote that, Mike, you know what I pictured is like,
have you ever been walking down Vegas and had all of the guys like slapping the pamphlets
for lady dancers and stuff like that, just shoving pamphlets in your face?
Many many times and I was very young, I was like 12.
One of my first times in Vegas, I was walking down the strip and there were so many pamphlets
all over the place because these guys are shoving in people's faces and you know, naked
half naked women are on them that a little seven year old child that we were walking
in our group with slipped and fell on the curb on one of these pamphlets and he landed
in a pile of half naked ladies, essentially, because they were pushing this stuff so hard.
And that's what Windows kind of feels like, but without the naked ladies.
Yeah, I mean, so, you know, I posted to Reddit got some feedback, mostly positive, a couple
people did point out, you know, you can uninstall of that.
And of course, I'm aware that you can uninstall programs on Windows, right?
My point being, you get the box and you spend like, if you want to get rid of all this crap,
you have to do this whole process of well, getting rid of all this crap.
Yeah.
So you're giving me a job to do on my high end, expensive gaming laptop.
But I just want to assure folks, I am very aware of add remove programs.
There you go.
Yeah.
But it sounds like you're able to get Python and fast API up in pretty much no time.
So I did I did something different this time, because, you know, a couple of times a year,
I like switch OS is for a little bit.
I actually used PowerShell instead of WSL to do everything.
Oh, really?
So you're going like the native, completely native Windows route completely negative.
There's one caveat to that, but I think we'll do the Python stuff first.
It was pretty good.
I started in PowerShell 5, which is the default install.
And then, you know, in PowerShell, it's like, hey, dog, you can upgrade to PowerShell 7
and you should.
So I did.
There was no material difference for me in what I was doing.
But setting up Python, setting up a virtual environment for Python, pretty, pretty easy.
Setting up Postgres, super easy.
The only thing I didn't like is I kept forgetting to use the Windows terminal terminal instead
of PowerShell.
But once I had that set up, I think I put some images in the blog post like Windows
terminal is get ready to throw your tomatoes.
The best terminal I have used, granted, I use stock Mac OS terminal right now.
So I don't believe you.
I actually do believe you.
I saw your screenshots in the article.
It's a nice looking terminal.
You got a background in there, branded the company stuff in the terminal like TMB stuff.
That was pretty custom transparency.
It was really nice.
Yeah, that stuff is nice.
You didn't have to use WSL for any of that, but it does sound like at one point you did
kind of end up having to use WSL to get some work done.
Yeah.
So I was a little careful about this.
It's possible to do Ruby development in a purely Windows environment.
But it's not a good idea.
It's kind of hard to set up.
It really like Ruby was not meant with Windows in mind, right?
So particularly when I say Ruby, I mean Rails.
So I did just to see like how it would all run.
I didn't end up installing WSL.
I didn't put this in the post because I thought maybe it's a future post, but I did do the
WSL to Ruby mine bridge stuff.
It was a little finicky, but it worked.
Having said that, if you just use Visual Studio from WSL with Ruby, it works exactly as you
would expect on like pop or Ubuntu or whatever.
I mean, it's fine.
Like if I was going to run Windows as a daily driver, I would almost certainly be running
Penguin, which is my WSL destroy of choice.
And I should add that Penguin and maybe I should do a post on this.
Penguin has quick starts for like Ruby and Node and Python and a bunch of other crap.
You noted on something else in there that I feel like I used to struggle with with Google,
but they have improved it greatly.
And that is a big issue you encountered.
Windows just simply does not understand that you can have multiple Microsoft accounts that
do different things in different contexts.
Yeah, it did not get that.
Like I have the, you know, Michael at the Mad Botter account, which is where my Visual
Studio and all my fun Microsoft dev licenses are.
And like my personal email, which is my Xbox account.
And the thing that made me go down this path was Age of Empires four.
Oh, my God.
I really, really wanted to play like I needed that Xbox app working at one point.
And then I accidentally signed up for a second trial of Xbox Live or whatever they call it
Game Pass.
And I had to like cancel that and just get it to like, no, I understand that there's
two different accounts on here.
And that was just a bad process.
I had to actually go into the browser to sign in and just convince it that like I am who
I say I am.
Download the game.
I tried to sign up for the like xCloud streaming service that I guess is in beta, but they're
not clear if once you sign up to xCloud streaming, if you can get access to the web based streaming
version or not.
So I wanted to do a little three way shootout between GeForce Now streaming, Stadia and
the Microsoft xCloud thing.
So I go over there and I sign up for the xCloud gaming service.
And I tell you what, man, it is so obtuse and unclear.
And it doesn't even, it wasn't even clear if I had to have an Xbox to use it, which
I do not.
And it seems the xCloud streaming in the web browser is still unavailable and I had to
try to cancel.
I mean, it was the most convoluted signup process I have ever been through to sign up
for any kind of service, especially from Microsoft.
That's just a little side tangent.
Their account stuff is in a really weird place now because they've increased and expanded
all of the things they use it for.
Even like playing Minecraft now, you have to have a Microsoft account, but they haven't
caught up like Google has where I can easily switch between four or five different Google
accounts in a day.
They got to get there.
Yeah.
Well, and Google is like aware that you have multiple accounts and it's a simple dropdown
of like, okay, you want your personal because you're like listening to YouTube, but you
want your business because you're reading Gmail.
Right.
Kind of felt like though your big takeaway from Windows 11 is sort of what you and I
have been getting at more and more is all of the major desktops have really stepped
up their developer support and game and Windows 11 seem, I mean, from, I have not tried it
much.
I have used it a little bit, but not much.
But what I've been, the feedback I've been getting is a lot of people like it.
It does the job and it's a good tool for getting their work done.
Seems like if you had to, for like a client or something like that, you'd, you'd get by
if you stayed in Windows 11.
Yeah.
I mean, I wouldn't even say get by.
I would say it would be just fine.
I mean, it's, it's come a long way.
And I know a lot of this was in like later versions of Windows 10 too, but it's come
a long way since like the Windows eight, seven days, if you are a non-Microsoft developer
to the point where it's really kind of good.
There's a funny, like almost uncanny valley that Windows sits in right now because almost
always if you were to adopt Windows 10 and bring it totally current with all patches,
in a lot of ways that may actually be a better workstation OS than Windows 11 is right now.
Yeah.
But it won't always remain that way.
Windows 11 is like, they've made some choices that are other choices that could have been
made, I guess.
But you're not sticking with it.
It sounds like you're, you're not daily driving.
Well, it's my, it's my gaming rig, right?
And it's my gaming and visual studio rig.
Cause I, I got tired of fighting with VMs.
Hey, I wanted to say, as we get into the feedback, huge thank you to Drew last week who just
really did a hero's amount of work to save the show.
Our editor went above and beyond last week because let me just give you the high level.
During the recording of last week's episode, there was a massive storm in the Pacific Northwest.
We lost power twice and we've recently been eliminating the UPSs out of the studio because
of buzz and we really rarely have power outages.
And then go figure the power went out twice while we were recording.
Then after we finished recording, the power went out again and I was hours late getting
the files up to our next cloud instance for editing.
So of course there was data loss in the recorder because the power went out twice.
So Drew had to go to like double backups to recover some of this stuff.
Like he was in the project folder of the recording, pulling out stuff and Mike had device issues.
I think he switched to AirPods, his, his input switched to AirPods on one of the reconnects
and disconnects and Drew had to try to make that sound consistent.
It was a total show and not to mention there was a little bit of extra editing on the beeping
side too, which I just thought was hilarious, but he really went above and beyond last week.
So a big thank you to Drew for making this show actually listenable, despite all of the
crap it went through, he is the hero.
And I don't think we heard from a single person who disagreed with your take on web three.
It was, it was one of the show classics to tell you the truth.
Yeah.
I found that kind of interesting.
I thought for sure we'd get a lot of like, usually when we go hard on anything we get,
we get pretty strong pushback.
You know, I, I thought this was kind of like my unique insight, but in conversations that
I had subsequent to the show, like DMS and stuff, I guess I'm kind of not alone on this,
that it feels like a lot of like would be startup people or like, you know, personalities
are like looking for the next big thing and God damn, they're trying to make this web
three thing.
Yeah.
Yeah.
I don't know.
I think that's like an industry wide problem outside of web three, right?
I mean, I think Facebook changing their name to Metta for obvious reasons, but also like
they need to be the leader in some other revolution because mobile is like locked with Google
and Apple.
So they're going to try Metaverse, whatever the hell that means.
Are you just struck by the fact that we appear to exist now in a mostly grifter economy?
When you look at the political class, when you look at the crap that the tech giants
are selling us that they never fully deliver on, when you look at things like web three
and all the different initiatives online or my God, look at YouTube, look at all those
YouTubers, tell me, are we not predominantly now existing in a grifter economy?
And I feel like we're a couple of guys sitting here making an honest product.
I make a media product, you make a software product and we're surrounded by grifters.
And I think that's what triggers me the most about the web three stuff is it seems like
people who made some money and want to either double down on and make their next big bet
or they want to become famous because they're such narcissists and they don't even realize
they're grifters probably until it's too late.
Like it's just normal now for there to be a thing such as an influencer who just post
doctored pictures on Instagram.
And yet somehow we give these people credibility when they're really just grifters and it's
this everywhere now.
And boy, oh boy, I really, I worry about that kind of thing.
And I think when you look at how they talk, they wrap it in all of these massive ideals
about freeing society from corporate overlords and control and about centralizing your information
that you have direct control over and making it cryptographically verifiable and trusted
peer to peer payments that underline all of this with, you know, smart contracts backed
up by Ethereum.
Yeah, that stuff would be fantastic, but that is not reality.
We live in a world where trillion dollar companies have influence over the way and direction
the web and technology are going to go and they're never going to push it in a direction
like that regardless of what they say.
So it just seems like what you have is a bunch of people grifting in the middle, selling
a promise that can never be delivered on because of the fundamental structure of the market.
And it just is sad that they managed to convince so many people and it continues to propagate
what they do.
I don't know.
It's hard because there's definitely a way to go overboard on this, but like I look at
our businesses, it is very hard, but also kind of not that sexy to provide a product
that provides value or, you know, in your case, content, right, which I guess is a product
and just like do the work of actually generating more revenue than you spend.
But it's super sexy to never make money and then, quote, start a revolution.
What's it?
Is it Thanos?
Is that what it is?
I think.
Am I getting that right?
That I mean, you think of the Theranos case is going on right now, right?
You know, I am certainly I got a lot of criticism because I was like calling bull on that a long
time ago.
Yep.
Like every article in the Theranos case was about the person of Elizabeth Holmes, not
like, hey, can I see an article from like a doctor, not, you know, some possibly politically
inspired journalist who happens to cover tech or science?
I really want to see like the medical journal or at least like quote the medical journal
in your fluff piece.
You're touching on our cult of personality culture now and grifters take advantage of
that.
That's what's happening is the personality leads the headline, not the actual hard work
or the details, but it's the story they can sell around a personality.
If you even see this happening in the Linux world where the founder of Rocky Linux, the
narrative now is that he founded Centos and now he's gone on to found Rocky Linux.
But that's not really true.
He was involved in finding something, founding something called Chaos Linux, which was abandoned
in effort of Centos and you know, like the whole thing is very nuanced, but there is
a narrative around a person that is, it's the way the media works.
They need to write, they need to, they need to fill airtime.
And if they can tell a story about Elizabeth Holmes, they're going to go that direction
every time because they don't have to be an expert on the product.
They don't have to be an expert on the market.
They just have to know how to tell a story.
And then what happens is people like Elizabeth can grift on that.
They can, they've been given this exposure.
They roll with the media and you know, they can get really far without actually producing
much.
You see it happen in Linux and you see it happen in the political sphere and you see
it happen in the technology space.
And I think that's part of why crypto gets such a bad name because it's so common over
there, even though it's totally nothing related to the actual core technology.
But it's weird because like the crazy VC back stuff is just taken on faith.
Like I just did a, got interviewed a few times, which hopefully the pieces come out good.
And the first step in every process was, Hey man, you got to like prove to me this isn't
just bull.
Right.
And like serious, almost antagonistic kind of like show me like vetting.
I mean, I think that's good, but I think it should be that way for everybody.
But again, a VC is like a brand.
It's like a name.
It's a personality.
So if such and such VC backs you now, like their cult of personality rubs off on your
company and you're just taken as legitimate.
That's all it takes.
We are so obsessed with personalities and celebrities and we've made tech celebrities
now.
And it's the same thing, you know, Shem wrote in kind of speaking to this and wanted to
know if we had a take on solid.
Now solid is that effort started by sir Tim Berners-Lee that promises in his version of
a decentralized internet.
And he released this whole implementation in spec.
I got to be honest.
I actually was pretty familiar with it when solid was first announced, but it's completely
faded from my memory.
I can barely remember it now.
This is not going to be a thing.
Now, I don't know if this is necessarily a grift as much as it is someone's dream of
taking things to the next step.
No, I think it's legitimate.
It's just not going to catch on with the, with the general public.
Right.
Right.
Well, there's, there's so much momentum around the way things are now, you know what this
reminds me of?
And I'm going to get some heat here.
Matrix.
Oh yeah.
Or how about, what was, what was the one I used to be on that all the Linux folks were
on for a while?
Mattermost?
It wasn't matter.
It was Mastodon.
Oh, Mastodon.
Maybe it was.
Maybe it was Mastodon.
Mastodon still exists, but yeah, it's a niche.
It still exists.
Yeah.
It's definitely a niche, right?
Linode.com slash coder.
Go there to get $100 in 60 day credit on a new account and you go there to support the
show.
Linode is fast, reliable cloud hosting.
You've got to try it out for yourself.
Maybe try it out for your next project.
It's what I use for everything we've deployed in the last couple of years, especially now
that Linode has been rolling out MVME upgrades to their rigs.
It's a great time to try them out.
I mean, the radical speed up available using MVME is a game changer for certain types of
applications.
In particular, a transactional service like a database or maybe an e-commerce site, it
can operate a lot faster when you use an MVME storage.
I mean, you'll really notice it.
Really anything that does massive parallelism, that's going to be a lot faster with MVME
storage because it's great at density.
It's really good at IOPS per gigabyte.
And even compared to traditional SSDs, you're going to see a big upgrade with MVME storage
on your server.
So if you're a performance hound like me, or your application truly needs that storage
throughput, Linode's team can help you sort through your options with MVME storage and
arrive at the optimum storage configuration for your environment.
I think you're going to find their pricing is great, 30 to 50% less than the major hypervisor
duopolies out there.
And they've got 11 data centers around the world that you can choose from.
So you're going to find something close to you or your customers.
Linode knows how to do this.
They've been doing it for 18 years, and they just keep getting better and better.
They're truly passionate about the technology.
Go try it for real and see for yourself, linode.com slash coder.
What an opportunity.
You get $100 in 60-day credit on a new account, and you get to support the show and really
try this out, linode.com slash coder, $100 in 60-day credit on a new account, linode.com
slash coder.
Well, listener Chris just wrote in with a short email.
He says, I totally agree with your take on Apple and the Mac in the last episode, and
he feels like Mac OS has been withering on the vine for years.
But he says there's a 900-pound gorilla in the room that we aren't addressing when we
talk about the M1 and the M1 Macs and Intel responding with their chips.
He says, yeah, short term, the pandemic-induced binge buying.
But beyond that, there's really no money long term for the major players.
He thinks the desktop market's dead.
I'm wondering if you agree.
Do you think long term that the surge we're seeing with these desktops, and I'd say laptops,
is just a temporary thing while people build up for work from home and then the desktop
begins to fade again?
Yeah, I wouldn't say dead, but obviously this is just like people are moving and buying
larger houses in the burbs or even more rurally because they're working from home, and it's
nice to have a home office that has a door.
I think it's the same thing.
Is it dead?
I don't know, right?
I think news of the desktop's demise have been greatly exaggerated.
I agree.
Certainly, particularly for Apple, the insane numbers they're putting up, or probably will
put up for the rest of the year, and I would say like the first quarter next year on the
Mac are going to go down.
But part of that is like the market, the people who buy Macs and use Pro Macs are super hungry
for like a good Pro Mac.
If my adventures in Windows and back in Linux and everything fail over the next few months,
I will be looking, do I get another Air, right?
Because they haven't released, and in particular the pros, they haven't released a laptop machine
this good in a while.
Their pricing's insane, but it's Apple.
It's a confluence of remote working and they have legitimately released good products.
Put it this way, no one is getting fired for buying Apple right now.
I'd say too, they've created pent up demand for decent machines.
By releasing crappy ones with keyboards that don't work, they have created an excellent
device.
Maybe they're geniuses.
I mean, maybe, because it seems like if you get them hooked on your platform, you can
kind of stretch things out like that.
But you can't have the escape key.
I wouldn't be surprised if things end up back that way again, but they still have a bit
longer to go.
They have more professional machines to replace.
There's still more pent up demand out there, so this cycle is not over yet.
You know what?
To the audience, nobody sent in like a productivity hack tip or hardware or anything like that,
which is fine.
Maybe nobody cares.
That's fine.
But nobody sent anything in last week and I was trying to collect a few more, so I'm
going to extend it for one more week just in case you got lazy and you thought, ah,
somebody will send one in.
No, I needed you to do it.
So go to coder.show slash contact and we're going to just punt it for one week because
honestly, there's a lot going on this week.
Some of it's happening today and we want to spend the show talking about that, but we'll
try to get back to it next week with productivity tips to make you work faster and better.
Python, please stop screwing over Linux distros is the headline that caught my attention.
This is a real screamer from Drew DeVault, who seems to really know how to say things
to get people talking.
The man knows how to write a headline.
Yeah, he sure does.
For better or for worse, I might add, because I would say for worse.
Yeah, but he writes the Python community is obsessed with reinventing the wheel over and
over and over and over again, and I thought, all right, this is something our audience
is going to see.
This is probably something we should discuss.
He goes on to write.
Python is a mess.
I really want to like Python.
I've used it for many years in many projects, including Source Hut, which was predominantly
developed in Python.
But I simply can't handle it anymore, and I have been hard at work removing Python from
my stack.
He says I manage Python in the only way I think is sane, installing them from my Linux
distributions package manager.
He also maintains a few packages for Alpine, but he says he is sick and tired of dealing
with this half hazard approach.
Every one of these package managers, he says, is designed for a reckless world in which
programmers chuck packages into home pip, set up virtual environments and pin their
dependencies to 10 versions and six vulnerabilities ago, and then they ship their computers directly
into production in Docker containers, which aim to do the minimum amount necessary to
make their users' private data as insecure as possible.
None of these newfangled solutions address the needs of any of the distros, despite our
repeated pleas.
They all break backwards compatibility with our use case and send our complaints to Dev
Null.
I have seen representatives from every Linux distro making repeated separate pleas to
Python to address their concerns, from Debian to Arch to Alpine to NixOS, plus non-Linux
distros like FreeBSD and Olumos.
Everyone is frustrated.
We've all been struggling to deal with Python right now, and Python is not listening to
us.
He says he calls on the PSF to sit down for serious, sober engineering work to fix this
problem, drop a list of use cases you need to support, pick the most promising initiative,
and put hours in to make it work properly, today and tomorrow.
Find something you can stick with and make stable for the next 30 years.
So you've been working with Python for a bit.
Has it been this dramatic for you to manage from a developer's end?
I have a very nuanced answer, no.
Is this guy like maintaining a distro?
Is that what he's doing?
Well, he's doing, he's maintaining packages for a couple of distros.
He maintains a few dozen Python packages for Alpine.
All right, but that's not like the use case.
Yeah.
I mean, Alpine's pretty much like the go-to base for a container, which is probably why
he's, what he's complaining about is people are just kind of being lazy and pinning their
dependencies to, you know, 10 releases back that have tons of vulnerabilities and shipping
it inside a Docker container.
But has he heard of C++ and Clang?
It's worse.
Trust me.
I mean, again, like my use, so the use case I have, right, since you made the comparison,
because I'm an end developer, but I have lots of Python environments on all of my machines
now.
And I even have some that are like experimental environments, like upping to 3.10, right?
Or for instance, before I upped to SQL Alchemy 1.4, or 1.4.1, I don't know, the 1.4 series,
I tried it out just to see.
And if it didn't work, I would have just blown away the venv and created a new one and it
would have been cool.
I mean, I, from an end developer's point of view, the thing I care about is building my
software or doing client work.
I'm perfectly happy with pip and end and virtual end and all that.
I have been tempted by poetry a few times, but that's mostly because I like the name.
He says part of the problem has been for the past few years, everyone and their cousin
has decided to solve different packaging problems in Python, but they've all created incompatible
messes.
All the solutions end up enjoying varying levels of success in the community, but none
of them are blessed as the official answer and none of them go away since they have users.
And it just becomes a growing and growing horizontal problem.
Yeah.
I mean, the part that I kind of agree with Drew on is the security vulnerabilities, right?
It is super easy to pin your packages and your rex.txt to something old and just never
think about it again.
That's bad.
You shouldn't be doing this.
You shouldn't be doing that.
And yeah, you could get like a version of, I don't know why I'm picking on SQLAlchemy,
but it's the most common ORM folks in the Python world use, myself included.
You could get an outdated version of SQLAlchemy that has some sort of vulnerability in itself
or one of its dependencies, and that would suck.
I would also argue that that problem exists in literally every programming language in
the world.
Right.
Exactly.
I'm not a package manager at all, like the problems that are described here also exist
in Bundler for Ruby.
They exist in, oh my God, Maven.
I haven't done Java in a long time.
I think it's Maven.
I think his point is there's too many options for Python, so it's a broader problem, but
I completely agree.
The fundamental issue is the same.
Sure, but there's too many options.
But if you look at the, I forgot, I think it was the stack overflow stats we looked
at.
We're using the default, the de facto default, which is pip, right, pipenv.
So I don't know, I mean, yeah, if you're super new and you make the mistake of not creating
a virtual environment in your project directory and you do like pip install, I don't know,
whatever, right, fast API, yeah, you have installed it to your home directory and that's
not good.
I mean, that's bad.
You don't want to be working like that.
But that's something, that's almost like saying back in the Objective-C days, it's like Objective-C
is a terrible language because all these people who are new to it don't know how to handle
memory.
Well, they just need to learn how to handle manual memory management.
And this for younger folks who don't remember those days or didn't do Objective-C, before
Arc, it was literally like C where you had to manage your own memory, but the Alec retain
release, all that good stuff.
I mean, I feel for him and his frustration, it sounds like he's certainly agitated.
I've also seen other of his posts where he complains about other package managers that
aren't the default.
So I think what Python has done, tying it back to my Windows post, Python has become,
or frankly is, maybe has been for some time, a very native working and native feeling development
of, I know it's not native code, but like you don't feel like you're doing something
foreign to that dev system you're on.
It just works, to quote Apple, on Mac, Windows, and Linux.
So as a developer, I'm go snakey, snakey, kill, kill, kill.
It strikes me too, that we have been discussing this core problem for a really long time.
The one of shipping out of date libraries inside a container or statically linked to
an application.
This problem just, it won't shut the fuck up.
It just keeps coming up all the time.
And I gotta feel like there's maybe another solution here.
Something that's like mandatory access controls or something that solves this at least from
another angle.
Because it almost seems like this is a fundamental compromise in making software that remains
consistent and ships for long periods of time.
I guess, but at some point, hard problems are just hard.
True.
Maintaining distros is hard.
Maintaining repos for distros.
I mean, it's just...
Let's say you had a self-hosted version of Alice that everybody has or something like
this.
Or it's like a version, or maybe you just have a dozen instances up in the cloud that
you manage for them.
So you've described the actual situation, okay, keep going.
What happens if one Python library in the container or a couple need to be updated every
couple of weeks, just when you look at all of them that are in use?
Do you really want to be in that situation where you're constantly having to ship new
versions of the container just because the underlying parts have to be updated once a
week?
That's kind of a straw man, a little bit, right?
Yeah, you're right.
But you could end up in a situation like that if you really wanted to keep all the software
current.
Well, let's take a real situation, right?
The open SSL vulnerability.
Because I, at the time, was doing mostly Rails.
You could get away with not updating open SSL, but that was a very, very stupid idea.
Poor choice.
It was a poor choice.
But updating the underlying open SSL lib required you to update a bunch of your gems.
I don't remember the ones off the top of my head, but it was core to Rails itself.
So it was a thing.
That's the kind of thing where it is, yes, rip your hair out, the sky is falling, do
the update.
But like minor point releases for features, I don't know.
I tend to look at things like once a quarter-ish, with the exception of security issues that
I'm, like, I do jump on those.
But it's, I mean, it's Unix, man.
Just write a script.
I'm sorry.
Well, and the other reality is build for the world as it is and create something that you
can tear down and stand back up with relative ease, because you're going to have to tear
it down and stand it back up.
Well, it's not just that.
OK, so if you're saying you don't want to manage packages, the alternative is that you
have to write my new HTTP library, TCIP, ORM.
It just isn't that big of a price to pay relative to what the alternative cost would be.
It is interesting, though, like how many different takes there are on this, even just on Linux,
for example.
Like for the desktop application side, you've got Flatpak and AppImage, which are trying
to solve some of these problems.
You've got Snap.
You've also got containers.
I mean, you've got Charrutes even.
You've got all of these.
You've got 47 different ways to do it.
You really do, because it's clearly been a longtime problem.
And we've come up with a lot of solutions for it.
Wayland, I just have to say it.
I think the solution is just to spam DLLs all over the hard drive.
That'll solve it.
Listen, there is nothing that cannot be solved by dynamically linking.
Shortcut.com slash coder.
Have you ever really been happy with your project management tool?
I mean, most are either too simple for a growing engineering team to manage or so complex that
you have to have basically a dedicated person to poke people and prod it to use the tool.
That's where Shortcut comes in, formerly known as Clubhouse.
It's different.
I mean, it's better in just about every way.
It's a project management tool built specifically for software teams.
It's fast.
It's intuitive.
It's flexible.
It's powerful.
And all the other kind of things you're going to like.
Like, let's look at some of the highlights here.
It has a team-based workflow.
Individual teams can use Shortcut's default workflows or customize them so they match
the way you work.
And it has organizational-wide goals and roadmaps.
The work in these workflows is automatically tied into a larger company goal.
It just takes one click to move from a roadmap to a team's work to an individual update and
vice versa.
You really get fantastic visibility.
And it has tight VCS integrations.
If you use GitHub, GitLab, Bitbucket, whatever, Shortcut ties directly into them so you can
update your progress from the command line.
And I love to tell you guys about this because you know I'm a big fan of this.
They have a very keyboard-friendly interface.
You could rock it with your keyboard.
In fact, they have a power bar, which is a keyboard-friendly interface for the entire
thing.
You can do virtually anything without touching your mouse.
How great is that?
Go throw that thing in the trash.
They also have iterations planning.
I think this is fantastic because you can set weekly priorities and then let Shortcut
run the schedule for you with accompanying burn-down charts and all the other reporting
you need.
Go give it a try today and support the show.
Shortcut.com slash coder.
Shortcut, formerly known as Clubhouse.
Because you shouldn't have to project manage your project management.
Shortcut.com slash coder.
All right, so breaking today as we record the program, the entire Rust development moderation
team has resigned, effective immediately.
Holy crap.
The resignation has been done in protest of the core team placing themselves unaccountable
to anyone but themselves, they write.
Now, they have not shared details.
We're recording this on Monday, November 22nd, so we don't actually know anything yet.
However, if you go through all the threads, read different takes, it appears that a situation
that may violate the code of conduct came up and the consensus from the core team was
perhaps, or maybe not a consensus, but an individual member, we don't know, believes
that the core team cannot have rules enforced on them by a subcommittee, which would be
the moderation team.
However, when you read the formation docs of all of this, it actually to me very much
reads like the core team is held accountable to the moderation team.
And that may be the core of the conflict here.
We do not know at this point, but whatever it is, it was significant enough that the
entire moderation team in unison resigned this morning and they leave a note saying
that they suggest the Rust team members come to a consensus on a process for oversight
of the core team.
Currently, they're answerable only to themselves, which is a property unique to them in contrast
to all other Rust teams.
In the interest of not perpetuating unaccountability, we recommend the replacement for the mod team
be made by the Rust team members, not on the core team.
Things are not so good in Rust town.
Okay, so I have to make a confession.
Bless me, Fisher, for I have sinned.
I was actually coding all day today and did not see this.
I know, isn't this something?
Well, it just broke up like a couple hours ago.
So when we say moderation, we mean like what I think moderation means.
Like somebody did something, I guess, allegedly inappropriate.
Correct.
Okay.
But this person was like a core developer on Rust.
Allegedly.
We really have very few details, but it seems to be that person was a core team member.
They attempted to moderate the situation.
Was his name Boppy Kotick?
I don't know.
Because I feel like just like remove the whole Linux, the open source part of the story.
And I think we've described Activision.
Oh, man, I tell you, it's this kind of stuff.
You know, it always looks it's such a bad look, too, because it is it's bad for I mean,
this is terrible.
If this is true.
I mean, you know, those Facebook posts when somebody says, Oh, I'm so sad.
And then they don't say anything else.
And they want you to ask why they're sad.
Right.
It has that vibe to it.
I immediately on in front of those people.
So no, I don't.
But I do know of them.
It's so frustrating.
It's annoying.
And it has that vibe to it.
But they said the reason why we didn't say anything more is because we chose not to name
names or divulge specifics that could implicate anyone.
Even so, we felt we should state our reasons for resigning to avoid people making up their
own drama.
Which sort of implies this whole thing is drama, because instead of making up our own
drama, we just have their drama now that they've led the drama.
What does that even mean?
All right.
So I'm sorry.
I'm hippies.
I owe you an apology.
I need to be more into open source.
I'm getting back there.
Don't worry.
My Pangolin arrives tomorrow or Wednesday.
Calm down.
I'm going to do the Linux challenge again.
There was no mod team, right?
Like it was you started the project.
You're the dictator until you decide that you're done.
Right.
And in most cases, your little project just dies.
Like my empty network because it was like people used it.
Nobody contributed back except for one dude.
Right.
That's probably 98 percent of open source, which is fine.
And then like, you know, ASI HTTP came out and you didn't need it anyway.
So fine.
Yeah.
But every now and then something goes big.
Right.
So look, is the mod team like a board of directors of sort where they can, like, hold the I guess
the executives, for lack of a better term, accountable?
Or are they just like they're to police like the forums and I guess GitHub in this?
Now the mod team is the is the team I have the least knowledge about.
But my understanding is sort of the rust governance structure is the court.
If you look at it like an org chart, essentially, the court team is at the top of the org chart.
And then you have a bunch of different sub teams, well, at least a few different sub
teams.
And the moderation team was one of them.
And yeah, their role was to maintain a certain, you know, the code of conduct, community standard
and essentially the hall monitors, if you will.
But, you know, as chosen by, I believe, the core team, a lot of large projects that have
a lot of people interacting with the project, find that to be a necessary function.
But almost in all of these cases, it always ends up coming back around on somebody in
the court team, ironically, or not, I guess.
I'm sorry, my head is spinning.
So okay, so basically, the problem is my team allegedly found out that somebody did somebody
did something that is against their code of conduct, they believe.
They went to the core team because this person was a member of said core team and said, I'm
going to make up a name here.
Yo, dog, Steve Jobs over here did something bad.
You need to like throw him out or like chastise him in some way.
And the core team was like, um, no, go back to your little cave.
I mean, so is this like when like the cops arrest somebody and the DA is just like, no,
I'm not prosecuting it.
I don't care.
That's what it sounds like to me.
I think and you know, the rust team has really always played kind of politics on this stuff.
Earlier this year, there was a lot of hoopla around Amazon's influence over the Rust Foundation.
And an individual named Steve came forward and outlined his concerns.
And it just got buried.
And there was never really any information released by the foundation.
The Rust Foundation has since chosen an executive director.
And you know, there doesn't seem to be any influence by Amazon, but that whole thing
just got quietly put away and just, I don't know, like, there's been a couple other things
I've seen here where I just wish they were a little more transparent about this stuff.
And the problem is, is the moderation team shot first publicly now.
And so it's like, what is the court team even going to say?
What can they even say?
Nothing.
Just keep on trucking.
Maybe.
Since they didn't name the person, you don't have to worry about the Twitter rage, right?
I would just say nothing.
I don't know.
You know, we may see someone step down.
And that may be another indicator of what happened here.
But it's a little unsettling if you're if you're thinking rust is going to be the future
and you see politics being played like this, don't you think?
Well, they seem to keep having these kind of problems, not necessarily moderation, but
like weird stuff going on behind the scenes where it just I don't know, it seems like
a lot of energy spending on stuff, you know, other than developing rust as a technology.
Maybe that's unfair.
Maybe that's like, I don't understand how modern open source works, which if I don't,
I apologize.
But and I think, too, we're still figuring out how to implement some of these code of
conducts as well.
You know, and I think there is a bit of that, like, who's held accountable to it?
In what ways is it enforceable?
Like, there's still kind of ironing that out.
And I wouldn't be surprised if they're holding information behind there's probably some personal
nature to the story as well, right?
I'd like to know more, because it feels like rust is becoming more and more important.
We're talking about, you know, building drivers for the Linux kernel in rust, system 76 is
talking about building a desktop environment in rust, you're seeing rust using so many
different applications and industries now.
Like how much would this matter to any like any big organizations using rust?
Because I can't imagine like, someone being like, Oh, no, you know, the moderators are
mad.
Well, now we're not going to use rust, right?
No, especially when Bezos is sending, you know, penis pics to people.
I mean, I just can't see it.
I think what it does is it reduces confidence in the organization.
And that's why it's concerning.
But you're right, it's not this kind of stuff isn't going to impact anybody who's out there
working in rust, really.
But it's a big deal for an entire team.
That's what makes me think there's something, you know, to this, there's some fire to the
smoke.
Listen, I'm sure Reddit or Hacker News, the detectives are on the case.
Suss it out.
Yeah.
So true.
They totally are, right?
I'm sure it just comes down to a good old fashioned human power struggle, like it always
does of some form, I suppose.
Wow.
Well, I want to say thank you to our members, you guys make this show possible.
Not only that, but you know what else?
Hold on.
I got something special for us.
Here you go.
You do this for us, right?
Help us pay for Drew's fine, fine skills.
Yep.
You help us pay for Drew's fine, fine skills right there.
Plus, you get access to the code of the report and you get a limited ad feed, which may have
some tweaks coming up in the near term, but you're going to want to get it on now.
You can get it all at CoderQA.co.
Go over there and support the show.
You can find Mr. Dominic on Twitter at Dumanuco.
Is there anywhere else you want to send people?
As always, alice.dev.
As always, go check it out.
His company is at the Mad Botter Inc.
I'm at Chris LAS and the whole podcast network at Jupiter Signal and this here show, yeah,
this here show, it's up there, at Coder Radio Show.
Links to what we talked about today are at coder.show slash 441.
They'll also find our contact form there.
That's a big part of our show.
Send us your thoughts, your feedback, your concerns, your joys, and your questions.
Also your productivity tips and then consider joining us live on a Monday if you ever have
some time.
We'll have you hang out in our chat room.
It makes it a lot of fun.
It's jblive.tv, noon Pacific, 3 p.m. Eastern.
Thanks so much for joining us on this week's episode of the Coder Radio program and we'll
see you right back here next week.

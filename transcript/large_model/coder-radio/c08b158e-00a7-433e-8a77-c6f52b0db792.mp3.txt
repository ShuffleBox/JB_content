This is Kota Radio, episode 403 for March 1st, 2021.
Hello there and welcome in to Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and the business of software development in the world of technology.
This episode is brought to you by a Cloud Guru.
A Cloud Guru now includes Cloud Playground.
You can get Azure, AWS, or Google Sandboxes on ACG's credit card, not yours.
Get certified, get hired, get learning, acloudguru.com.
My name is Chris, and joining us like the podcasting pioneer that he is for 403 episodes,
it's our host, Mr. Dominic.
Hello, Mike.
Oh, I'm chilly, Chris.
Really?
In Florida?
In Florida, it's ice cold.
We have Mr. Freeze is here just blasting us with his ice gun.
Uh-huh.
It's like 60 degrees Fahrenheit.
What is it?
It's like 70, but I have a solution to my plight.
Okay, good.
A way to both warm up my body, my soul, my general spirits, and improve my objective
C coding.
I am, of course, talking about, for $65, that low, low price, the coder.
It's too late.
You're too late.
You've come over too late.
It's done.
The sale is over.
Talk about it.
I bought three of them today.
Yeah.
I turned it off a little bit ago.
I was a little late because I was, you know-
What?
I thought, you know, let a couple people sneak a few orders in, but we have to cut it off
because eventually we have to put the orders in for printing and all that, or actually
it's embroidering.
So I just thought of that whole little shtick, and there's no coder robe.
I mean, it's technically sold out.
Folks, the robe was a lie.
You never know, though.
It could come back.
Dun, dun, dun.
The thing is, is life is better in a robe, so I don't want to deprive the people of that.
Now what we have to do is discover how brutalized we've been by international shipping because
I've never done anything like this before ever, and I couldn't get an estimate of how
much international shipping would be before we had all the orders in place.
They refused to give it to me.
And so I'm just kind of guessing.
So at first I put like $10 on there for international shipping, and then I realized that was probably
$35 too cheap.
So we'll see what happens.
We'll see.
That's a big lesson learned.
What we learn from that, I'll probably internalize that, and then we'll have other stuff.
We got a request for coasters, too, which I would like another batch of coasters myself.
I have two vintage Coderadio coasters on my desk here.
But robe aside, which you'll soon be wrapped in its glory, I am kind of getting whiplash.
You're giving me a little bit of anxiety with this switching here.
First you're on Windows, then you're on the Mac, and then you're tweeting about being
on the Limor again, and it's like three weeks, three different platforms.
My head's spinning.
Well, you know, I've been on Tinder for operating systems, and I've just been swiping right.
I think this is fun to just chronicle, just to see you jump around a little bit, because
I can kind of get a sense of what you're working on, like, okay, so he's taking a break on
whatever it was on the Windows platform for, and he's picked up something that he's using
Linux for again.
And that's what I grok from afar.
That's what you grok, right?
So yes, each platform other than Mac, which is kind of like just doing its own thing,
there is a native specific piece of software being written, which I will say that I have
thoughts on my brief experience in Windows.
So many thoughts.
That's, I feel like a whole episode almost in there.
Yeah, I think we need to wait until I have all my notes together, but I have thoughts.
Okay.
Well, I did a thing.
You know, I started to talk about it last week, but we were all over the place.
I didn't mention it, but I decided to pull the trigger on a 165 Hertz refresh rate monitor.
Nice.
Quick recap for those of you who are not familiar, I never considered a high refresh rate monitor
because I like to play some video games, but I'm not a big, big gamer.
But then I ended up reviewing a laptop with a high refresh rate screen in it, and I realized
the entire computer UI feels more responsive.
Everything feels faster.
It's not just for games.
It turns out obvious statement now that I'm making it, but I had never really connected
the dots until I tried one.
After I tried one, I was broken and I've been on a quest to optimize my machine performance
at every step that I can without actually replacing the machine because it's just a
horrible time to build a PC right now.
So I've gone through the route of replacing the kernel with something a little faster,
a different fork of it, if you will.
I've gone through the process of optimizing the user space a little bit, and now I have
added a 165 Hertz gigabyte M27Q 27 inch 1440p monitor.
It's technically a gaming monitor, but Newegg had a fantastic deal on this thing.
I decided I'd pull the trigger because of that great deal, and I plugged it in a couple
of days ago, and it really feels like everything's coming together.
The optimizations I've done to Firefox, the optimizations I did to plasma, the optimizations
I did to the Linux kernel, and now with this 170 Hertz, but it's at 165 on my machine,
but fine.
It's fantastic, plus I haven't got a new monitor in years, many, many years, and so this is
like a brilliant, beautiful display, an IPS display, and the freaking UI looks better.
Like Firefox looks better, the themes look crisper, the colors are more differentiated.
I didn't realize how the gray and blues were all kind of just all mushed together on my
old screen, and with this new one, it's like pop, and it looks fantastic, so it's a nice
gear upgrade, and I feel like I'm the happiest I have been with my machine performance since
I've owned that thing, and I think it's like a 2017 rig maybe, 2018 maybe at the latest.
So what did this beauty cost you?
It was $300.
Well, that's not bad.
No, for a 1440p, 170 Hertz, 27-inch monitor with a bunch of different input and an integrated
KVM.
Yeah.
That was a great deal.
So I plugged it right in, and God bless Plasma.
It is supporting multiple refresh rates, so my two side monitors, which I did not replace,
are running at 60 Hertz, and the center monitor is running at 165 Hertz, working great.
It's fancy, Mike.
I really recommend it.
That's my performance pro tip is if you're going to really try to get a fast system,
don't even bother unless you're upgrading the screen too.
It really made a difference for me.
Speaking of pro tips, James writes in with a Zoom pro tip.
He says, hey guys, you were talking about Zoom fatigue last week.
It's real.
I find a way to counter it is to put a window over my face, cover your face on the screen.
For some reason, when we can see ourselves, I've noticed that we subconsciously obsess
over the minutia of how we look.
It's kind of like a baby laughing at themselves in a mirror, and it gets tiring.
In normal conversations, we cannot see ourselves, so we don't really think about how we're looking
the entire time.
But spending an hour trying to make yourself appear normal is actually exhausting.
So give it a go.
It actually helps.
Cover your face.
I was having a conversation with my neighbor over the weekend, and they both, the husband
and wife, were complaining about Zoom fatigue.
They brought it up, and in fact, it was in the context of this guy was thinking about
he wants to pitch his boss an idea, and he thinks he's just going to wait until they're
back in person again to pitch him on it because everybody's just tired of Zoom, and he feels
like it's actually going to hurt the sale in a sense.
I mean, this Zoom fatigue thing, what is the alternative if you're not going to be in the
office?
Audio calls.
Oh, yeah.
No, that's my preference.
I mean, like just jump, you know, jump on whatever chat app you use and just use this
audio feature and don't turn the camera on.
Why is that so hard?
I think a lot of people want to have the camera because they want to try to replicate that,
you know?
Well, and a lot of corporate workplaces have a camera on policy.
I have seen that.
I have seen it where it's like just a reminder like after the meeting or like during the
meeting, like in a side chat, just a reminder that we do have a camera on policy.
It's for team morale, you know?
I always felt like it's because the meeting is too big, and most of the time, no individual
is really doing anything, so they want to make sure you're not like walking around your
kitchen, you know, making your kid lunch or whatever.
Well, someone you and I may know, mutually know, friend of the show, and I may have conspired
on an idea to create a video loop that we could then feed in as a virtual camera to
Zoom of just basically sitting there and nodding, and there was someone who experimented.
He created pre-canned responses with transitions that he could hit a button on his keyboard
and it would be like just a standard meeting response.
Copy that.
Yeah, that's a great idea.
Yeah, we can circle back on that, you know, just those kinds of pre-canned stuff, and
he got away with it for a week.
He made a whole video about it on YouTube.
Circle back, circle back.
Sorry.
It's so bad, though.
It really is.
It really is pretty awful, so a good pro tip is cover yourself up.
I thought maybe it was just me.
I thought maybe because I was vain or because, like, what I get fixated on is the camera
shot and the background, and I want there to be depth, and I want there to be color,
and I try to frame it properly, and I don't really actually want to be in the center,
but I like being off the center, but like all these stupid things that just don't work
well in a Zoom call, and that's me.
I'm that guy.
I'm that guy.
I've never understood, but I know it's a thing, the hatred of like just traditional
conference calls.
Like even if you're doing them on Zoom, right, whatever.
And then, I'm going to say it.
This is my spicy take for the show, I guess, but it is apparently completely socially acceptable
to comment on men's appearance in a Zoom call because during the pandemic, I didn't get
my hair cut.
I didn't feel like it was worth going to—for a while, you couldn't here in Washington,
and then even once you could—
You couldn't get your hair cut?
Yeah.
Huh?
Oh, Florida's the land of the free.
Just keep going.
Well, now you can.
I am now getting my hair cut, but I went for about a year-ish, almost a year without getting
my hair cut.
And it got pretty long, you know, down well past my shoulders even.
And every Zoom call I would get on would start with people commenting on my hair growing
out.
You know, after the first week or two, you're like, huh, yeah, yeah, yeah, my hair is getting
long.
But then after like six months of it, you start thinking, can we just stop commenting
on how I appear?
Like I don't really like that to be the topic of conversation is my appearance.
And I wasn't like particularly confident about the look.
I felt kind of awkward about it myself.
And it was apparently totally fine because it happened by all genders and all types would
just decide to comment about my hair.
And I would never start a conversation like that, you know, and you don't generally start
in-person conversations like that either.
And that was an aspect of the Zoom meetings that I found to be tiring, you know, in a
sense.
I mean, I've been sexual harassing you for eight years.
So yeah, but that's, you know, that's not really different because it's not really harassment
when I'm asking for it.
Oh, my God.
Yeah.
Remember how you were worried about YouTube?
Paul writes in with a with a question that I can connect with.
He says, Valhalla guys, a longtime C and C sharp guy, I've recently started digging into
Valhalla and some slight tooling issues aside, I'm thoroughly enjoying the language so far.
It feels like if C sharp had been dropped on C's door as a baby.
But where do you see these more niche languages taking part in, say, paid work?
I'm not so much concerned about it while I'm an active maintainer, but more so down the
road should the relationship dissolve for context, you know, take a look at something
like an L.O.B. application, so a line of business application, so something that he would have
to hand off potentially.
What are your thoughts on using something like Valhalla, which is, as he puts it, one
of the more niche languages in something where somebody is actually cutting you a big old
check for some line of business application?
In Valhalla?
Yeah.
Or, you know, insert the name of any niche, not widely used, but loved language.
I mean, if you manage to sell someone Valhalla, which that's not me taking a shot at Valhalla,
great.
The question is, is it, I don't know about moral, but is it the wrong thing to do to
leave somebody with something that's hard to support after the fact?
I mean, everything is hard to support after the fact.
Yeah.
I mean, Valhalla is not a particularly esoteric language.
I know it's not that popular, but if you know a little bit of C sharp or Java, you're probably
going to get it.
I think it's the default language that the elementary OS guys use for their application
development.
Oh yeah.
I don't know.
I think it's a fine choice.
I mean, people write stuff in all kinds of stupid languages like Go and PHP.
I'll tell you though, I have back in my bad old days of contracting, I have rocked up
to an organization, walked in like, Mr. I'm going to fix it and log into their system
and discover it's like some crazy old Red Hat box or BSD box that some esoteric setup
this guy has done that is a complete like dream setup that he had, but something that's
almost completely unmaintainable by me.
And so often those kinds of situations leave the end user with no other option than paying
somebody like me to come in and just replace it.
I just don't see the problem with if it solves, if whatever solution you have solves their
problem.
Right.
But if you're knowing that you're using this thing called Vala, then that's fine.
How do you even disclose something like that?
Like, Hey, yeah, I got this idea.
It's going to do everything you want, but it is used.
Just so you know, it's using a niche programming language.
Yeah.
I think that's what scare them away.
Don't you?
Well, that's the risk you take, right?
I mean, that's, yeah.
I mean, personally, I would pitch objective, see every opportunity I got.
Actually, I think your point though is it's the client's risk to accept and if they accept
the risk, then go for it.
Right.
Like if you didn't tell them that this was a risk, then that, then, I mean, I don't know,
I'm not a lawyer.
Maybe that's still okay, but it seems sort of jerky, but I mean, I don't know whenever
I bid a contract out, we actually just have a piece of paper that lists the technologies
we intend to use.
And West makes a great point too.
It's going to depend on what other technologies they have in place.
Are they already using multiple languages?
Do they have an engineer in house who has a preference?
Also something else you could do is look to see if there's someone who could replace you.
No, no, I wouldn't do that.
Yeah.
Mark in the chat room is mentioning visual Fox pro.
I have a project where I'm migrating things out of visual Fox pro right now and it needs
to die.
See, that's what I'm thinking is it could be that situation with something like this.
Yeah.
It's a, it's a goddamn nightmare, but.
So I think really the answer is though, is it's the client's decision to make and then
it's the challenges is you've got to explain to them how to mitigate the risk and why it's
worth that risk.
And you know, I give, if you can't articulate that reason, maybe it's not the right tool
for the job to begin with.
Right.
And in your particular case of Vala, Vala is not like, I don't know, closure.
Sorry.
I was that, you know, normal developers can't comprehend.
You have to come down from the mountain.
I love it.
Okay.
Unnecessary.
Maybe I'm still starting from that seven week challenge.
All right.
Well, Link wrote in and wanted to get your take on a hot take that, uh, Drew DeVault,
not the Drew that edits this show, but Drew DeVault, a, a, a developer of, uh, I think
sway, um, and a bunch of, a bunch of open source projects.
And he writes in that the rust is, well, it has issues.
I guess he breaks it down into kind of three major areas and I'll give you the highlights
here.
The first is rust breaks a lot of stuff and in ways that are difficult to fix the rust
cargo cult needs to pause and reevaluate switching to rust breaks things for anyone who steps
even a toe out of the norm of Linux Mac windows on x86 64 or arm 64, even on supported platforms.
It comes with a substantial burden of build requirements calling for 10 times to a hundred
times of more Ram CPU time and power usage.
Other benefits choosing rust is ultimately choosing to lock a large group of people out
of your project and dooming many more to struggle with frustration.
These are real trade-offs that you need to consider rewrite in rust has become a moral
imperative.
Well, here's another moral argument, throwing away serviceable components every couple of
years to upgrade is a privilege that not all of your users have, and it contributes to
climate change and it fills up landfills.
Lurking your code in rust is always going to introduce new bugs, including security
bugs that wouldn't be there if you just maintain the C code.
Maybe there's an undiscovered bug lurking in your C code base, but as your code base
ages under continuous maintenance, that number will only shrink.
A working C tool chain can be written in a couple tens of thousands of lines of code.
The only working rust tool chain is tens of millions of lines of C++ and rust code.
Rust is kind of cool, but it's not a panacea.
There are legitimate reasons to prefer C, both technical and moral, and rust still needs
a lot of work before it's ready for primetime and systems which prioritize stability, reliability,
simplicity, and accessibility.
To the Rust team, it's time to calm down, slow down the language, write a specification,
focus on improving your tier 2 and tier 3 targets, expand to more platforms, and work
on performance, stability, and accessibility.
That's a lot in there.
He does make a quick mention of Power9 and RISC-V.
So there's a bit of irony here.
One of our topics for today is why me and my team chose C++ over Rust just this week,
which has a lot to do with some of these complaints.
I think Drew has a point.
Maybe he's being a little unfair to the Rust team.
I don't think they're claiming it's a panacea.
I don't think they're claiming make a cargo package and you've solved all your technical
problems for the remainder of your life.
I tweeted out that I was looking at just doing something in C++ instead, and there's quite
a bit of like, that will be insecure, you should do it in Rust to avoid insert memory
issue here, which I guess is kind of true.
I don't think the benefits of Rust are as overstated as the writer seems to think.
And if I'm misreading you, Drew, that's my fault.
But I definitely can see that it is, I mean, comparing it to C or C++, they've been around
forever.
They have decent compilers and compatibility with insert your crazy architecture here.
You mentioned RISC-V, not that crazy, but fair enough.
C++ works just fine on it, and of course, C that you mentioned.
I don't know that I would want to discourage people from learning Rust.
Even as a teaching tool, Rust actually does enforce some pretty good, I don't know if
I want to say concepts or patterns, but pretty good ways of thinking about handling memory
and how you should think about your code.
I sort of wouldn't want to discourage people from looking at it.
Does that make sense?
Yeah, it does.
And I think I agree with your take that a lot of what he points to as challenges with
Rust when it comes to platform support is inherently because it is still so young.
And with time, so will come that support.
I think it's also very likely that that's where the puck is skating.
It's obvious that over time, Rust will probably stitch up its RISC-V support and its power
support.
I don't think that's going to be an issue long term if there ends up being a large deployment
of those platforms.
It is in that stage right now, especially something like RISC-V. There's really only
one developer board in like a Raspberry Pi style SBC that you can get your hands on right
now.
That's going to change, but it's still early days.
There's really only one or two workstations that have power chips in them that you can
get your hands on these days, and they're very expensive.
OS News just posted a really interesting review of one that is kind of like just a desktop
tower.
It looks very accessible with AMD graphics in it, and it's a PowerPC processor in that
one.
That's awesome.
That looks really interesting to me.
And I absolutely would expect that as I got more and more outside the mainstream platforms,
there would be less and less support, especially in something as new as Rust.
But it was kind of refreshing to see another take, a little real talk around Rust.
Yeah.
I mean, I would say a more boring, practical code or radio criticism of Rust would be,
you may not be Microsoft or Amazon.
You may need to hire developers that you can actually get.
Not that you're hiring bad developers, but you're hiring developers who did not go to
MIT.
And Rust, your average 22-year-old coming out of college with a Comp Sci degree will
probably be eaten alive by Rust.
Yeah.
And the interest and the momentum sure is there.
Yeah.
I hope I'm wrong.
Please, if you're 22 and in the Tampa area and love your Rust, it should be an email.
Linode.com slash coder.
Go there to receive a $100 60-day credit towards your new account.
Linode's where we host everything for JB 3.0.
Well, they're also the largest independent cloud out there for developers.
Simplify your cloud infrastructure.
Take a look at Linode with that $100 credit.
Get an idea of what it can do and get an idea of why we've chosen Linode.
They've got 11 data centers around the world, so there's a lot of locations to work with,
something near you or your customers and clients.
40-gigabit connections coming into the machines.
Of course, super-fast native SSDs on all of the hypervisors.
And they have a really great, really great dashboard with lots of nice documentation,
alerts, monitoring.
I mean, you name it.
I talk about it from time to time, but they also have a great selection of one-click deployments.
If you want to get a base system with container support going or a fast WordPress setup, they
have a lot of really nice, just get your website up and going, get that part figured out fast.
Or you can do like what we do and just build stuff out over time.
Get something that's really powerful and then run all of your applications on just a couple
of really powerful machines.
And then for the backend storage, what we use is their object storage.
They have an S3-compatible object storage that's just fantastic because you don't have
to slice off large sections of disk, which you totally can.
You can go the traditional block storage route and just slice off some disk.
But with object storage, I just use what I need, and then I can get URLs for everything
and there's ways to plug it in with the file system.
It just works fantastic.
And all of this, it's at your fingertips to try.
You can try it right now by going to linode.com slash coder and build yourself something,
something simple or something you can really dig into.
And then you can rest easy knowing that you have great support backing all of it up.
Linode has top-notch support, like nobody does it like Linode.
And that's comforting when you're running your business infrastructure on there.
And you can also rest assured knowing that they started in 2003 as one of the first companies
in cloud computing.
And they have focused in on a handful of things that they do.
And they do those things very well.
They're not like some sort of crazy VC funded startup.
They're just going to go nuts trying to get market share and do every little thing.
They've really figured out what works.
And they're independently owned and they're founded on a love for Linux and the technology
that made all of this cloud computing possible.
And now they're the largest cloud offering dedicated virtualization with CPU systems,
GPU systems, shared systems at like $5 a month and much more.
There's something that's going to work for everybody.
So support the show and get that $100 credit when you go to linode.com slash coder.
That's linode.com slash coder.
The privacy wars rage on.
The hoopla is filled with, I guess, the next phase of where all of this is going.
Facebook, this is according to inc.com, has just admitted that it has lost the privacy
war with Apple.
This all goes back to those privacy nutrition labels that you kind of changed my mind on
a few weeks ago and how Google and Facebook have been really struggling with this.
Google just today updated Gmail for the first time since these privacy labels have gone
into effect.
And Facebook has tried to take its fight public, trying to go after Apple in the public space.
Have you seen all this?
Yeah.
So how would that work?
So they're doing a couple of things.
They're trying to frame this as Apple harming small business and they've released an ad
and I'll just give you a taste of like one of their strategies.
For every idea out there that gets the love it should, there are five more that don't
succeed and so are lost for good and some of them are pretty flawed and some of them
are slightly odd.
But many are small businesses that simply lack the tool to find excited people who will
stop and say, that's cool.
And these two, they like this idea and those three like that one and that's because personalized
ads find good ideas for everyone.
So the idea is that Apple is preventing small business users from reaching potential new
customers by limiting how Facebook can track you.
That was Orwellian.
Isn't that something?
That was really bad.
Let's just be frank, like what Facebook is worried about and is pushing back against
is if the end user is given a choice, if they want to be tracked or not, they know the end
user is going to say, don't track me.
And small businesses don't need to know your specific location, your gender, your age.
Really if you think about it from a small business marketing standpoint, just pick a
Facebook group that matches what your product serves and advertise to that Facebook group.
You don't even need to know any of that crap.
Just figure it out by the groups they hang out in.
So I guess I don't understand how Facebook could think this would work.
I'm trying to see like the galaxy brain 3D chess move now because Apple's got him because
it's not Apple is it's not Apple's fault that telling people how these apps are tracking
them damages Facebook's business model.
That is the flaw of Facebook's business model.
It seems a lot like the cigarette companies being pissed at the government want to put
labels on cigarettes, right?
We saw Google, you know, Google resisting it to just finally updating Gmail today.
After what?
Like two, three months?
Yeah.
So in general, I think we have a problem of too many, like behemoths in the world, you
know, striding across and crushing the little guys.
I sort of just want Apple to win here.
Yeah, it's weird because it does put Apple in the well, because like the problem is Facebook's
business model is like not awesome for society, right?
I think we have a problem with tracking in general, and this is the beginning of that
conversation.
But I don't know.
We used to rant and rave about paying for stuff, right?
Like for years and years and years beyond here, like people need to pay for software,
but that battle's kind of been lost.
Well, all right.
I don't think either.
I mean, all of us are just, I just, it's almost just worth noting at this point, I think just
so we have it here in the record of the show, but I don't really know if we have much more
to say about it.
I want to switch instead to your Stadia, your Stadia version of Terraria.
Now this whole thing, this whole thing is spooky because this developer got all pissed
and rage quit his port to Stadia after Google suspended his account and then just basically
ghosted him and did not respond to any of his series of tweets or emails that he sent
in trying to get access to his account.
His business was impacted by this.
His Google apps account was impacted by this.
And then afterwards he was so frustrated, he said, that's it.
I give up.
I'm not going to develop for Stadia anymore.
While a Google spokesperson has confirmed to the verge that the Terraria port is back
in development.
So I did some digging and I could not find what the hell actually happened here.
Yeah.
Then he just got shut down.
Like, but no reason why, right?
Right.
And he's not saying, I mean, I'm sure they told him why, but at some point before bringing
him back.
So this is kind of where you were going with the Facebook thing is like, we have these
weird centralizations now of control that we knew were coming all along.
We're not surprised that it's here, but it is legitimately backfiring in the ways that
we were concerned about.
Like before the, you and I started recording today, I was telling you that this is a huge
concern of mine because I would be shut out of my business.
Certain aspects of my business would be shut down.
And I hear so many of these stories where you just can't get Google's attention.
This guy got lucky.
I guess, you know, it percolated up enough that a human saw it and took action.
But you know, if you don't have an audience, if you don't have a reach, you're screwed.
You know, I feel like we've done eight years of talking about big tech monopolies, app
stores and data tracking.
I hate to say this, but it's kind of getting dystopian.
It doesn't seem like it's gone well.
I find myself more and more wishing for the dream of the nineties web where it'd be like,
you know, Mike would have Mike.com Chris would have Chris.com and like we would just sell
our crap in our own domains and like, yes, we'd have to write all of our payment processing
and customer management stuff ourselves or by God forbid license, you know, some independent
platform to do that for us instead of being on these gigantic centralized app stores that
just not even because they're evil, but because of their massive scale can't help but screwing
over the little guy.
Not even with malice, but with just like inefficiency at scale like that, right?
If there's a giant Colossus stroming in Athens, he's going to step on Socrates every once
in a while.
I've been thinking about this recently too, because I heard, um, I heard somebody talking
about how, uh, they could only launch, you know, they were going to launch this business
idea, but they were only going to launch once the app, once the app was ready to go.
And then somebody said, so are you going to, why don't you launch on the web?
Oh no, no, that's later if we do that.
And then I started thinking about Instagram and what a impact it's had culturally.
And you know, the sale of course to Facebook and, and how Instagram has become this phenomenon
that every social media influencer has to be on Instagram.
And it's all an app, you know, it has a web version, but it really, really, really sucks.
It doesn't do much.
There was an intern for like a day and a half.
Yes.
Yeah.
And that entire phenomenon is an app in these app stores.
And it really struck me that the scale at which these app stores have now, I don't know
if this is true or not, but I saw a statistic from what was supposedly a Facebook financial
call that something like only 4% of their traffic comes from web.
And the rest is all app based, which just seems outrageous.
That's just outrageous.
You look at everything that's happening with these apps or policies and how these businesses
are struggling like Epic, and you wonder why we didn't just invest more in the web.
And I've often heard it blamed on Apple because Apple wants to have the app store be successful,
but mobile Safari was one of the most, if not the most competitive mobile web browser
to begin with.
And it's continued to remain very competitive and adding features.
And it doesn't seem like Apple is crippling the capabilities of its web browser.
Some people have written in and said, arguably Apple could do some things to improve it.
And maybe they will.
I don't buy that.
I don't think iPhone Safari is nerfed enough to really.
I think it all could have been on the web.
You know, I've been thinking about if I got more into video again, I'd really like to
publish it on JupiterTube, which is a PeerTube instance that we're running off of Linode.
And there's no algorithm.
There's no YouTube clickbait system you have to do to get views.
There's no having to ask people to like and subscribe.
Hit the bell button.
None of that.
It's just our own video platform.
And the only thing that's on there is Jupiter broadcasting videos.
We're live streaming on there right now on Monday night.
And it will always just be a silo because it doesn't have that network effect because
it isn't YouTube.
You know, things get 80 views maybe, and there is a real notable reduction in traffic.
Okay, so this is Mike's crazy conspiracy theory.
I think what happened is the Web 2.0 stuff, you know, when like people were really doing
interactive websites like in the, I don't know, the early aughts, I guess, didn't get
enough time to get off its feet until the iPhone came out.
And I mean, yeah, like the I think about the businesses that started as like iOS development
shops would have probably been web development shops, similar kind of mix of people, right?
Designers and developers.
Do you think it's at all notable that like Clubhouse, which is the social media network
with the most buzz at the moment, is iOS only?
Well, I think, right.
That's what I'm getting.
I think there's multiple bad trends that happened to one just like we've spent years talking
about this, the lessening of people's willingness to pay both by volume and by just actual sticker
price on platforms that aren't iOS or Mac is pretty significant.
And even then, on those platforms, people aren't willing to pay now very much.
Sure.
My issue with this conversation is I don't know how we could get back.
Right.
I don't think we can.
Datadog.com slash Coder Radio.
Solve some problems.
Analyze code level performance across your environment and troubleshoot issues faster
with Datadog.
Datadog.com slash Coder Radio.
Datadog's continuous profiler automatically collects profiles from your production servers
all the time so you can analyze any of your data quickly, kapow, with minimal overhead.
Get a unified picture of your environment by correlating code performance with metrics
from other aspects of your system with real-time dashboards all brought into one place.
With tightly integrated APM tracing, log management, and continuous profile all in one platform,
Datadog enables you to pinpoint the root cause of issues faster than ever.
See across your entire infrastructure in one snapshot.
And if you try Datadog's products for free by going to Datadog.com slash Coder Radio,
you sign up and for a limited time after you create a dashboard, you'll get a free Datadog
t-shirt.
So it's a way to support the show and get some free swag.
Get analytics and metrics across your entire system, your application stack, and your site,
and bring it all into one location and visualize it with Datadog.
Datadog.com slash Coder Radio.
All right, so you teased this a little bit in the show, and I'm hoping this is going
to pick us up, you know, because now we got kind of grumpy.
We got into old man radio.
And I feel like if you are making a bold statement, like going with C++ in 2021, there's going
to be some real meat to this one.
There's going to be some spice.
So you're on the spot.
You cannot disappoint.
All right.
So there was a journey here.
So my goal is to launch a product at least every year now.
So this year we're doing something new, more to come on that, ding, ding.
But it requires some low level Linuxy goodness, which one means system 76 will probably somehow
get more money because that's just what happens.
And it also means that I couldn't just Python my way to glory.
So there's a progression here, right?
So speccing out this project, it needs to hit multiple processor architectures, technically
multiple OSs, but really the meat and potatoes here is Linux.
And I would tell you which flavor of Linux, but I don't want to trigger you.
I think I already know.
I'll give you one guess.
Yeah, I don't.
I know.
I don't want to say its name out loud because then I get Twitter trolls.
But we have new listeners in the chat room.
We should tell them.
You should spread the good news.
The good news of Suze, although they will correct me.
The Germans will email me, it's Suza.
And do not get that wrong.
Get the hell out of here.
So for the new listeners, I am in the arduous process of building a data center in Plant
City that exclusively runs Suza.
You okay, Kristinita?
I mean, I'm breathing.
I'm practicing my breathing.
I'm trying.
I heard there was some lizard talk on Linux Unplugged, by the way.
It happens from time to time.
We slip into it.
Everybody does accidentally.
You just need a green panic button, and I can just show up and be like, what's going
on, guys?
I did have a Suza bell at one point, but it didn't ding real well, so we got rid of it.
If you haven't tried Suza for your servers, you are missing out.
That's all I'm going to say.
And I'll leave it there.
All right.
So we looked at Python and Cython, I guess it's CXC Python, I don't know.
CY, you know what I'm talking about, if you know anything about Python.
Yeah.
And it was like, ugh, okay, kind of slow.
I mean, and we're basically now a Python shop.
We love Python, but it's like, ugh, really?
Some of these are going to be smaller, more, I hate the term IoT, but-
Low end.
I guess IoT is fair.
Yeah, low end devices, and the hardware cost is something I need to track.
Are they ARM?
Oh, yes, they are.
Yeah, okay.
But it also has to run on AMD 64, right, and X86.
All right.
Then we've been doing.NET for a couple of clients right now.
More on that in a couple of weeks, at least on my new adventures in WSL.
And it was like, well,.NET is open source now, and it runs everywhere, but it's.NET.
So I did kind of a quick POC fooling around with C Sharp.
It worked.
Yeah.
But then you had to like cross compile to Linux, which worked.
There's a lot of like extra setup that would have had to be done.
And one of the inconvenient things, and I actually have a blog post about this in the
show notes where I kind of detail some of this stuff out.
We are basically a Linux shop now, but running mostly POP with like a few straggling, like
we have Macs for when we have to test iOS stuff.
I got to be careful how I say this because people will jump down my throat.
The.NET development experience on Linux in particular is not as good as it is on Windows.
I don't think that's a controversial statement, right?
Seems like it makes sense.
Yeah.
And it's better than it's ever been, but like it's nothing near as smooth as let's say our
Python development workflows, right?
Oh, sure.
Yeah, sure.
Yeah.
Right.
So it's like, eh, this feels kind of icky.
And also there's the whole like we have to run things in the CLR and it's like, eh, this
is really how we want to architect this.
So then there were two other languages in content or three, there was Go, but Go got
dismissed because nobody on the team has done any Go.
And it's like, there's not even like one granddad who can come in and like guide us all to glory.
So that's that, you know, that makes a big difference.
You need team, especially at least one person on the team that you think could at least
train everybody else, right?
But if nobody's got it right and help it like crazy tool chain problems, right?
So yeah.
So then we were left at Rust and C++ and the battle began.
And the irony is our emailer Drew hates both Rust and C, or doesn't hate Rust, but he definitely
hates C++.
Yeah.
Doo, doo, doo, doo, doo, doo, doo.
So it was a battle of the languages.
Battle of the languages.
There were a couple reasons.
So there's a few things here.
I personally was buying into the Rust Kool Aid on the whole safety thing and security
thing.
And I think that's mostly, mostly fair, right?
I don't think that's really, I don't think that's too hyped up, but there was the realities
of other than me, no one on the team has done any Rust in any significant amount.
I have done some, but I don't day-to-day work in Rust.
We have all done C++ at various points in our lives.
Some of us more recently than others, I got down this rabbit hole of people blogging and
doing content on quote modern C++.
Have you heard of these guys?
This kind of rings a, it's like a way like to do C++ safely.
It's so since C++ 14 and we're on 20 now, 23 is going to be the next version.
Whoa.
Okay.
Yeah.
They're added a bunch of features that basically, I mean, a lot of them are like aping other
languages, but that basically smooth over some of the rough, rough aspects of C++.
One in particular as a group, they're called smart pointers and there's, I'm not going
to dig into this too much, but they are very reminiscent to me of before Ark, how you could
do Objective-C had some, they're not, I can't remember what the right name for this is,
but they're not macros, but like you could tell it what kind of pointer you wanted and
there were different rules based on that.
And then granted Objective-C had auto release pools, which C++ kind of doesn't and it does
things a little differently.
But it was familiar enough to me that I was like, one, is it, could this be my new Objective-C
because that makes me very happy.
And two, it really makes me a little more confident in doing this job in C++ because
this is an internal project, which means we're going to have to not use all the senior people
on it all the time.
Then I got digging even further.
I downloaded C line.
I installed my Dracula theme and I wrote what I can only describe as a flashback program.
I know it's not Objective-C. I know the programming paradigm is somewhat different.
It felt like when you come home to like your town you grew up in and you haven't been there
in like 15 years, it's different, but there's a little bit of nostalgia there.
Just typing to release memory was a joy.
Just having the star, the pointer symbol there was magical.
We're going to need a drink for this.
As memories flowed over me, the song by Big Red holding back the years started playing
in my head.
I quickly popped open another window to create a subdirectory with its own CMake.list.
And all the while, Sea Lion before my eyes and Pop OS before my eyes are turning into
Xcode and Snow Leopard respectively.
I'm going back.
My skin is getting smoother and lighter.
My eyes are like more blue.
I mean it's amazing.
Like the good old days.
I think I may have found.
Now of course Objective-C was my first love, my high school sweetheart.
We were together a long time.
We made many apps together.
It'll always have a place in my heart.
But it's time to move on.
It's time to find a new programming language that also has pointers and scary memory leaks
so I can torture people in job interviews.
And I think it could be.
Now I'm not trying to be too forward.
I'm only texting C++ when it texts back because I'm not, you know what I mean?
You don't want that buildup.
Yeah.
Yeah.
Yeah.
And you don't want to come across too strong.
Too like whatever.
I installed C Lion, I even installed Clang to really just see like, hey, you know, I'm
open to stuff.
And yeah, I think we're going to make a go of it with C++.
I find this point that you're kind of touching on there in there a little bit is kind of
being back in like the golden era of tools again a little bit.
Like there is a, in like we were kind of in, we were kind of an old cranky man territory
there for a bit.
But I agree in all of this noise and mess, some of this stuff is better than it ever
has been.
I'm just going to say CMake and CTest are still great.
Kind of making me feel like the good old days in some way.
So it's not all, it's not all bad.
You know what that said, I'm popping open Emacs.
That's it.
We're going to, we're going to.
So how's the rest of the team coping with your discoveries?
I mean, are they on board?
Is there some skill sets there?
There definitely was an age discrepancy in the response.
The fellow, and actually one of them is significantly older than me, we're very excited.
Thank God I don't have to use this crap with these NPM packages anymore and the stupid
pip and all.
So yeah, there was a lot of, there was some of that.
There was a little bit of, I don't know if I remember how to do manual memory management,
but that's okay.
Because you know what?
Florida's employee at will.
Was that?
No, I mean, no, I just think that, you know, it's, I mean, it's, it's a little
direct.
He's a jackass.
But you know, it is business.
Business?
Yeah, it is business.
No, I'm joking.
Of course.
Sort of.
Not really.
It's seriously, it is something about working in a language that doesn't want me to tinsel
together 47 packages off of some random GitHub repo.
It's, it's refreshing.
It's like how programming used to be before we all went insane.
Oh, and one of the big improvements before somebody writes into the show with a C plus
plus, I think it came in.
Someone will correct us in the feedback.
I think it came in at 17 or 14, um, or strings that make sense because that was one of the
big like issues.
All right.
So I want, I want the audience's diagnosis.
What do you think of Mike's revelation coder dot show slash contact, share your opinions
with us over there and uh, you know, we'll read a future emails and follow ups on the
air like we love to do.
It's part of the show.
We're doing a blog series documenting the newer features of quote modern C plus plus
and comparing them to a certain language who I get a little upset when I, when I say its
name.
You know, I definitely, it's definitely still hung up a little bit.
Um, but objective C.
Hmm.
Hmm.
Hmm.
I don't believe you.
Oh, look, yeah.
That youthful bastard.
He didn't know what MPM was because it didn't exist yet.
He didn't know what was coming for him.
He sounds, he really does sound so, so young and so hopeful just in that one little, I
don't believe you.
Yeah.
Oof.
That's another time.
It's a whole nother era.
We're going back, Morty.
Well, I also want to say thank you to our coder QA team.
Uh, you can get the coderly report of course, but you also support the show and get access
to the limited ad feed at coder QA dot co thank everybody who signs up and becomes part
of our coder QA team.
And also you can find our sponsor, a cloud guru on pretty much all the social platforms,
YouTube, Twitter, Facebook, everywhere.
It's just slash a cloud guru.
It's real easy to find ACG on social media.
You can find Mike there too.
He's at Dumanuku.
His company is at the mad botter ink.
We'll have a link to his blog post at coder dot show slash four Oh three.
I'm at Chris LAS.
The podcast network is at Jupiter signal and the show is at Coder radio show, but why not
join us live?
I didn't mention the life thing.
That's the most fun.
We do it over at JB life dot TV.
Now here's the details Mondays, 5 p.m. Pacific, 8 p.m. Eastern, you come hang out, you put
us up on the TV, you listen to us talk to each other, you enjoy yourself a snack, maybe
a beverage.
You hang out during the Coder radio happy hour.
It's easy.
JB live dot TV, Monday evenings.
We'll see you over there and you know what, if you got something going on, I'll tell you
what I'll do.
I'll put an RSS feed for you too.
You can get that.
You can get that feed.
Coder dot show slash subscribe.
Thanks for joining us.
We'll be right back here next week.

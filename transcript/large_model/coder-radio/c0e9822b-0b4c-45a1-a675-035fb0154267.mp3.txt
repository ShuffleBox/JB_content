This is Coder Radio, episode 343 for February 4th, 2019.
Hello, and welcome to Coder Radio, Jupiter Broadcasting's weekly talk show that's digging
in, taking a pragmatic look at the art and business of software development.
My name is Wes, and I'm joined once again by our favorite, Mr. Michael Dominic.
Good afternoon, Wes.
How are you?
I am doing good.
Sounds like maybe just a little bit better than you.
Although over here in the Pacific Northwest, we've had something of a snow day.
I know.
We're up there in the Arctic.
Now, I do have a quick question.
Oh, yeah.
Go on.
Were there any rail accidents near you or Chris?
I don't think so.
No.
I mean, as far as I know, trains are running on time.
I see.
I'm on the hunt for Bruce Willis.
Let's hear more.
How's your hunt going?
What are you armed with?
I am armed with bones that shatter easily.
I am armed with a wheelchair and a comic book art gallery that somehow stays in business
with no actual marketable products.
Oh, Mr. Glass.
That's right.
We should have known, Wes, because of the children.
All right.
Well, let me trade a question right back at you, Mr. Dominic.
Well, what I observed since last time we spoke, there's been a lot of hubbub, a lot of people
enjoying your enjoyment of Rust.
How's it going over there?
You know, Rust is kind of like what I imagined joining the Jedi Order would be like.
It's magical.
It's scary.
It sometimes doesn't make sense.
So does that mean they – when I saw you bought the Rust book, does that mean they
send you like a nice Jedi robe that you get to wear while you're studying?
So for every hundred lines of Rust you write that actually is quote-unquote correct, safe
and compiles, you – yeah, you get one more inch in your robe.
It's almost like a lab coat.
If you're familiar with the Clone Wars, you're like one of those Jedi who doesn't
talk, kind of just silently judges –
Yeah.
Yeah.
Silently judges the other Jedi.
Well, have you made any little test programs that you're particularly proud of or looked
at any community projects?
I have looked at some community projects.
Some of the Rust embedded stuff has been pretty interesting.
Now is it a community project if it's meant to more efficiently deliver Jar Jar Binks
clips to Chris?
Oh yeah, of course.
That's an important thing and I'm pretty sure his feed is not yet entirely saturated.
I think there's like – there's room for more Jar Jar.
I just, you know, throwing it out there.
Always room for more Jar Jar.
So if I can do that and use less memory and therefore get more Jar Jar in it, that seems
right.
Yeah.
I did notice someone started playing with implementing Python in Rust and that seems
like kind of a fun project.
Yes.
I always find that, you know, writing interpreters or compilers or other things, it's different
than – you know, a lot of the day-to-day programming you might do is kind of just,
at least these days, tying different APIs together.
You install a couple libraries, you connect up to some external services or write to disk
or start a database and when you're writing – you know, when you're playing with implementing
languages, you kind of flex different parts of the language.
Yeah.
I was taking a look at that project on GitHub.
I did not understand like why I would want that.
But it seems like just somebody is kind of, you know, for their education, kind of write
edification.
It definitely goes to show the power of Rust though, that you can write a pretty performant
Python interpreter in Rust and it's not the craziest thing in the world, to be honest
with you.
Actually, it's not a terrible Python interpreter.
Yeah.
That's another nice thing is it can be helpful when you're learning a language to, you know,
find projects that are at the right scale.
It can be pretty intimidating if you're just learning the idioms to dive into a big code
base.
But if you can find something, you know, someone's just started with, they're still fleshing
out parts, but it's big enough to have some like real code in it.
Yeah.
Definitely.
I mean, I certainly wouldn't recommend if anybody is coming on this Rust journey with
me that they write a Python interpreter, right, as their learning project.
It's definitely a good example of, I won't say ease, but the relative, compared to like
a C, and maybe I will say ease, the relative ease compared to like an old C language.
Ease versus power, I guess, if that makes sense, Wes.
I feel like I'm a little at C here, but.
No, no, of course.
But yeah, it is that ease versus power is, I think, the perfect way to describe it.
Yeah, it's fine.
I mean, it's gonna, I am in the beginning of this journey, right?
So it's gonna take me certainly some time before I'm anywhere near a proficient developer
in Rust.
How much, I mean, what have your, has the compiler been, are you having a good relationship
with the compiler or a little bit testy?
So I have restricted myself to try to do things the quote unquote good Rust way, meaning thou
shall not use that unsafe keyword.
Yes, right, exactly.
Leave that to the masters.
Yeah, it's, if I have a good relationship, it reminds me of Catholic school.
My knuckles are very much sore from being smacked with the, you know, ruler of the compiler
being like, nope, can't do it, nope.
But it's forcing me to think in ways I don't normally think about code, which I am hoping
will, even if I don't end up using a ton of Rust in production, will make me a better
developer overall in, for example, Ruby or, you know, C sharp.
Sure.
I saw some commentary on Hacker News earlier this week of someone posting a Swift program
that had some threading and value types involved and there was some confusion over like how
when mutation was happening, well, what exactly was happening and someone rigged up like a
basically conceptually the same version in Rust and then showed the compiler output from
Rust saying like, this represents potential unsoundness in your code and indeed it did,
right?
That was the whole point.
So it's nice that you can actually get, you know, if you go through the steps in the work,
there's some real huge benefits.
Yeah, Rust makes you do the work, right?
There's, I mean, sure you could throw the unsafe keyboard, but let's just pretend you're
not going to do that.
This sounds so kind of jerky, but Rust makes you actually think about what you're developing
before you develop it, I guess is what I would say.
I love that.
You know, a popular saying is hammock time, you know, and for a lot of programs, not all.
Sometimes you just need to like get in there, kind of hack some stuff together and figure
it out.
But the design phase is important.
You want to make sure you're actually doing something that makes sense and that you've
thought through how the data flows through your program.
Wait, wait, wait, wait.
Sure.
Come on now.
Let's not be silly.
Oh, wait.
This is Coder Radio.
Are we going to write documentation to you next?
I mean...
We'll see.
Maybe next year, Mike.
We should all have something to strive for.
We'll celebrate Coder Radio 400 with one page of documentation.
Okay.
So speaking of development best practices or worst practices, I don't do much development
over in the land of Apple, iOS, the App Store, but I know you do and boy, howdy, there was
some big drama last week.
Well, do you have my bell?
Oh, I wish.
I wish.
No, I don't do that.
You wish.
Well, I'm going to do it.
Ding, ding.
For years, I was right.
But we won't even get to it.
I think we have to walk our Linuxy friends down the Apple path here for a moment.
Yes, I think so, right?
Because there's a lot going on.
There's a special type of certificate.
There's kind of a long history from these other companies using the certificate.
So could you...
Can you break it down for us?
Yeah.
So long-time listeners will know that I have been complaining about code signing since
the T-Rex ruled Washington state.
Now in Florida, he still does.
We call him out on the alligator if he's still in charge.
Oh, yeah.
Right.
The code signing I was talking about was for the App Store or for development deployments.
We are going to talk about code signing in a completely different context today.
We're going to talk about sideloading apps, which I know shouldn't be allowed, but kind
of is, via internal enterprise apps.
In Android, there's a little switch you can flick that says, okay, I'm willing to damage
my system maybe, and I'm allowing myself to install third-party APKs.
But you don't...
Or if you're running Android, you've already damaged your system.
Yes.
I'm willing to further damage my system.
But on iOS, right?
There is...
Sure, there's some stuff like test flight.
There's other methods that you can beta test or get a little bit of code for personal use
to run, but not for larger deployments.
Other than the App Store, there's about three other ways to do this.
One is test flight, which you're allowed to do 1,000 devices, which for a lot of people
is just all they need to ever do.
The third is what used to be test flight, but like now is people use hockey app.
The problem with that is you can sideload apps in an ad hoc way, but you only get 100
of each device type, which sounds like a lot, but actually really, really is not.
So it's hard to live in that world anymore.
The third is what's called an enterprise ad hoc certificate, the enterprise certificate
for short.
That is basically what you're describing, Wes.
The difference is instead of on Android where you say allow untrusted sources, you actually
do it per organization.
So for instance, you could do Jupyter Broadcasting or Linux Academy.
I am sure has an enterprise certificate running around somewhere if they have iPad apps that
they care about.
To be clear, when we say iPad apps, we mean internal iPad apps, right?
So these are things that probably are not going to be on the App Store, or they could
be alpha or beta versions.
I know nothing about the Linux Academy iPad app, but I'm just going to make something
up.
Let's say it's at version 2.2.
It wouldn't be insane for them to give me and Wes version 2.3 on our iPads because we're
hosts of shows here, right?
Just to test and see if everything's fine.
I see, right?
It kind of reminds me of some enterprises have their own TLS certificates or root certificates
that they have pre-installed the machine so that you have trust on the local domain.
So kind of the same thing.
Well, that's exactly what they are.
They're root certificates for iOS.
Got it.
And then so whatever for your device will trust those and it's meant to be used, right?
And I think it's stipulated in their policies that it's meant to be used for internal applications
that aren't for wider deployment.
Yeah, it is.
The two acceptable uses are you are QAing a 2B public version of an existing app.
Again, that's my version 2.3 example of a theoretical Linux Academy app.
Or you are indeed, just using this internally, a great example.
We could have a Jar Jar Binks Send Chris a meme app.
That's a dumb example.
Facebook employees evidently don't know how to order burritos and they had a custom app
for that that they used internally.
Right.
Yeah.
I know like some other uses that people were talking about as like internal like navigation
and map apps or getting hailing rides from between different campus locations.
Another great example, Google Chelsea years ago when I was up there, they had a bunch
of custom iOS apps if you like or in a rush and really, really want coffee, like stuff
like that because the support staff, you could be taking care of via a number of different
apps.
You could book all kinds of things, right?
It's not super important, but like laundry or whatever.
Well, because Facebook is evil, I don't even know what to say.
I mean, there's a whole rabbit hole there of privacy implications, weird incentives
and the whole thing.
They decided to pay teenagers and other folks, but mostly teenagers, $20 to install their
root enterprise certificate on their phone.
These teenagers were not employees of Facebook, so that in itself is a gross violation of
the developer agreement.
Quote, unquote, Facebook research, it was the name of the app.
Yeah, boy.
Yeah, but it's a lot more complicated than that, right?
So it used to be called something with an O that they bought from an Israeli firm.
It was rejected from the app store.
It was actually booted from the app store.
Oh, right.
This is like, it'll set up a VPN that sends all their stuff through Facebook's data centers
and lets them do research.
That's the whole thing though.
It's like root access to the phone.
So text messages, the whole kit and kaboom.
Wow.
So Facebook thought they would be cute by changing the info up, P-list data for the
app, giving it a different name, and then basically paying people to install the enterprise.
I love that, the P-list.
Right?
You pull up that little editor, tweak a couple of config values, save it back out there.
That's all it did.
Change the name, change the logo.
Amazing.
So Apple evidently was informed by a tech journalist that, hey, did you not notice this?
And Uncle Tim said, I did not notice that, but I'm pretty unhappy about it.
So Apple, with the click of a button or the stroke of a keyboard, one assumes it was a
magic keyboard, that's what I did there, revoked Facebook's root enterprise certificate.
Now that might not sound terrible.
It's pretty terrible.
So what that does is anytime a non-app store app published by Facebook tries to authenticate
with Apple's signing servers, it can't, and therefore all those apps immediately stop
functioning.
Wow.
Right.
So this is where it sort of starts to get very interesting, because there is like, obviously,
as we talked about, Facebook is kind of evil.
No one liked what they were doing with this app.
They had clearly violated the policies of Apple.
On the flip side, I've seen a lot of people making points that like, you know, if you
abuse or don't follow the terms of APIs that you request from Google or Facebook and get
keys for, they will happily turn those off for you, no problem.
So in some sense, Apple's doing that same thing, and the reaction makes sense in that
light.
But it kind of also reveals something about the entire ecosystem.
Well, there's so many different ways you could take this, right?
One is like what Facebook was doing is kind of gross and icky, and like, you know, for
example, their method of getting parental consent was a check bot that says, do you
have parental consent?
Are you kidding me?
Wow.
No, I'm deadly serious.
That's insane.
So that's like, that's, there's no better word than icky here.
Having said that, my pet pony for years now has been, you know, I mean, if you listen
to the show from a long time ago, hey guys, Apple has a tremendous ability to pick winners
and losers on their platform.
And when they turned off Facebook's certificate, not only this, I would consider a malware
app because frankly, it's, Facebook has really tried to say it's people knew what they were
doing, but it's malware, right?
This is malware.
It crippled Facebook for a day, like, you want a burrito?
Better be on Android.
You want to, you want to hail a shuttle?
Better be on Android.
That was kind of the funniest part of the fallout here, right?
Is that they had this totally for some other reason and then it impacted the day-to-day
operations of these campuses.
They really had come to rely on these.
Are you a developer on one of the Facebook apps that wants to test a subsequent version
or even a non-release, but perhaps alternative version, right?
Maybe you're doing A-B testing.
Sorry.
Wow.
The root certificates revoked.
So this is crippling.
By the way, Google had a similar program going on.
They were doing a little bit of screen scraping in their version of the app.
The interesting thing though is Google immediately apologized and then Apple hit them, but brought
them back.
Facebook kind of tried to defend themselves in a way that was, again, icky.
So I don't know, Wes.
I mean, this is kind of like Godzilla and Mothra fighting and I feel like the only people
really losing is downtown Tokyo.
Yeah.
There is a lot of fallout and there's some kind of questions I had around, I mean, I
was looking at some of the requirements to get one of these enterprise certificates and
actually they're not crazy unreasonable.
There's a bunch of like, you have to be a legal entity associated with this business
and blah, blah, blah.
You need a DMV number.
You need EIN number.
But it doesn't seem like it's shut out people.
Like if you had a business that had a reasonable use case for that, it seems like maybe they
would consider giving you one.
One of these certificates.
Okay.
Right.
So that was one aspect I was kind of concerned of because if it is only like, are you a serious
big enterprise?
No, you don't need to be.
You just need to be a business that exists and by the way, business can be a sole proprietorship.
Right.
Yeah.
Oh yeah.
Sure.
It could be a dude.
Yeah.
That makes sense.
So the other part, right, that is scary is it's not even the fact that they immediately
stopped working.
It could be one thing of like, okay, you can't install any new apps that they released using
this certificate.
Okay.
That makes a lot of sense.
Yeah.
But that you would like in time alter the state of my device.
It's kind of like with the Tesla stuff, right?
Changing the range, adjusting battery settings on the fly remotely.
It's kind of scary.
So this is the band hammer.
It is my understanding of this and I have tried to dig into the documentation to see
exactly how this works.
For years, I have thought that it was kind of an ET phone home system where your custom
enterprise app would call the Apple server just to make sure it was okay.
That might happen on install, but what it looks like Apple actually did was push and
say from the Apple servers to all these devices, this certificate is revoked.
Therefore, the apps cannot run.
Which is like, I don't know.
I know that's kind of a pedantic difference whether the apps phone home ask for permission
or the server actually pushing into the devices, but I kind of don't think it is.
If you slow down and think about it, say Apple from Cupertino just like push some whatever,
some JSON or however the hell they do this to all these iOS devices.
You know it's JSON or worse, it's XML.
It's probably a P list.
The P list of death and just nuked a bunch of apps.
So they theoretically, and like it's not theoretical, they in fact have this power over everybody
and they just like never chosen to use it before.
I was a little taken aback by that.
Yeah, right.
That is true.
They have had this power the whole time and it's one of those – it's kind of like a
lot of stuff in the privacy world where a lot of people kind of more in the know who
are already concerned about privacy sat back and said, everyone else, yeah, you see what
we've been complaining about and talking about all the time.
It's not just theoretical.
Yeah, I mean in a lot of ways, I wish it had happened to somebody who wasn't quite so
icky as Facebook because I think we'd be having a better conversation about, well,
even the manufacturer and platform vendor of my device and mobile operating system can
simply decide that they don't like the software I'm running on it and like break that, right?
They can break that.
Is that good?
Like in this case, they have a lot of like moral indignation because like what Facebook
was doing was like unbelievably gross.
But let's just like – I hate to sound like a Facebook apologist because I actually think
like this is a company who can't go out of business fast enough.
Sorry, guys.
They used to try to recruit me all the time.
Yeah, I mean they make some interesting technology and they certainly seem to pay well but I
don't know if you could support what they're doing.
I don't know.
They're like skinning kittens, right?
Like –
Yeah, right.
It doesn't matter if you write that cool new block device driver that's super interesting
technically if at the end you're supporting that.
Like somebody at Facebook thought this was a good idea, right?
Like you know, I have ranted and raved about being annoyed with like App Store rulings
and stuff like that but I have never thought to like massively sideload any of my apps
to steal people's data or because I was unhappy with an App Store ruling.
Like I have been unhappy with feedback from the App Store.
I have felt at times that they were like capricious or like worse than that arbitrary.
Like one time they bitched about something because they felt the logo or the color was
not too close to something that Apple made.
Oh, wow.
Yeah.
But like you know, I may have like raged and we didn't even have Slack at the time for
JB but raged in IRC or Telegram or whatever but like then I you know, woke up the next
morning and was an adult and you know, just comply –
Moved on with your business, yeah.
Right.
I didn't like try to make this crazy end run around the developer agreement which I
know I don't like that Apple has this power but I'm a little scared that if they didn't,
what would folks like Facebook be doing unchecked?
Right.
So that was going to be my next question here is it seems like part of iOS and the App Store
success has been that tight control.
I mean there's the one side of it with like a really well-defined SDK and visual design
targets and that whole thing but the other side of it is like they police the App Store,
they try to enforce privacy respect and restrictions.
There is a hard hand and I guess like the upside of that is instead of an open platform
you have something that you can kind of expect works and is of a certain quality.
And maybe that's not true but that's what a lot of – that's what a lot of happy iPhone
users who are also let's say, desktop Linux users on their workstation say, you know,
they have a device that simply just works.
Are we talking about Chris again?
I'm not going to – I don't want to name names, let's just say there's certain prominent
members of the community.
Let's just say a guy who is a fisher of men perhaps?
Perhaps.
Okay.
So dirty little secret, let's open the kimono here.
There are a lot of unscrupulous iOS developers who are doing things very similar to this
with enterprise certificates.
This is not that uncommon.
I am not one of them because I – just like it's too much work.
You know, the risk doesn't – the reward doesn't warrant the risk kind of thing.
But there is an entire marketplace of I guess we would call them like gray market iOS software
that are using these enterprise certificates inappropriately.
The reason you haven't heard about like a crazy banhammer is because Apple, while it's
against their policy, you know, is not going to like swing the banhammer on some kid who
decided to write a Mario emulator.
Right.
In some ways it has to be like public enough or in their interest enough for them to actually
go use their magic powers.
Right.
And like let's not – you know, it's not St. Uncle Tim here.
He's been dunking on Mark Zuckerberg's Facebook for months now.
Right.
And there's been all kinds of –
For a reason.
Right.
Yeah.
Their fight there.
I mean, their longstanding fight with Flash.
Their longstanding fight – I mean, they don't seem to like progressive web apps.
There's all kinds of stuff they don't like.
Two major newspapers.
Right.
Yes.
So I don't know.
I mean, you're a girl.
What do you think?
I mean, I know you don't work on these restricted platforms like I do, but you know, I kind
of feel like it's – I don't know what I think to be honest with you about this.
Like I don't know if I'm happy.
I don't know if I'm sad.
I'm a little tired because they're acting like children.
How do you feel?
I know you're a freedom penguin.
Yeah.
I'm a little torn.
I first started off – boy, like years ago I was doing like Windows and Mac.
Macs have been a part – actually, I think a Mac was one of my – besides a Joss PC,
doing Crystal Quest on a Mac was one of my first major computing experiences.
Learned to type on a Mac.
So it's been a long time using Apple stuff and I started off in the mobile phone world
on an iPhone.
Back then, jailbreaking was still a bit easier and kind of still a thing.
So it was a different experience.
More went out for Geohop.
Yeah, right?
Woo!
So I've also – and I've also just seen on – after switching to Android, Android's
mostly fine for what I need to do.
There are times where the camera app is like laggy and I kind of question what I'm doing
with my life.
But the other times, it works pretty reliably and I'm reasonably satisfied with it.
But I already have the apps I need and the Play Store is just a mess by any metric that
you want to choose.
You have no guarantees of quality.
The reviews don't mean anything.
I mean, there are some of those things on the App Store too, but there's a certain
amount of – I don't love their policies.
It's always been a weird walled garden and that just bothers me philosophically.
But at this point, I'm – I was also someone who used to root his phone all the time and
I was still like – I like the idea that I have the right to do that if I want to.
But I don't, right?
Like I don't right now.
So there is that other aspect of like, well, I want to have even a switch to like use my
own certificate as a – without having to apply, like to be able to get a personal use
only certificate kind of like TestFlight but with less arbitrary server side restrictions.
That would set my mind at ease, but I wouldn't – the thing is I don't think I would actually
do it.
Maybe if I was like testing out a new VPN or like really developing software maybe,
but right now as a phone user, it just actually – I don't think it would affect my day-to-day
life.
Yeah.
I mean, I used to – by the way, the thing about having your own personal certificate,
you can do that.
Oh, can you?
You can just plug your phone in a text code.
Oh, right.
Right.
Of course.
So I used to – this is where Mike admits to violating the terms of service.
I used to like root my phone and install Cydia – I don't know if you're familiar with
it.
I'm sure you're familiar with Cydia, right?
Oh, yeah.
Yeah.
I can either confirm nor deny if I've played Pokemon Red, Blue, and Yellow on an iPhone.
I have done the same thing.
Yes.
That's one of the reasons I did it, right?
I want Pokemon on the go.
So – but at some point, it's like too much of a hassle because every time they rev iOS,
all that crap breaks.
So I don't do it anymore.
Yeah.
I think I guess I agree with you with like the one caveat of – you know, Apple is awfully
paternalistic for my taste about how they handle like their – quote, unquote, their
users.
But I don't know, man.
There really are foxes in this henhouse, right?
Like Facebook is, in this case, just a bad actor and it is a good thing that someone
was there to, you know, fight off the wolves.
I'm mixing my animal metaphors.
But you get what I'm saying, right?
Yeah.
Sure do.
Like there was a shepherd to fight off the wolves.
Right.
We have seen these like otherwise big supposedly at least one-time reputable companies willing
to install apps that record you all the time.
There's not a lot of limits.
And while let's say Android has gotten a little bit better about permissions and be
able to set those things, it's still pretty difficult for your average home user to understand
each individual app permissions and what they've just agreed to.
So how do you –
Yeah.
Yeah.
So can I tinfoil ahead?
Can I borrow Chris' tinfoil?
Oh, yeah.
You got to crinkle it up real good though to maximize the reflection of those dangerous
frameworks.
I guess reflect the gamma rays.
Oh, yeah.
If this is what they were doing on iOS where there was a guardian at the gate so to speak,
I'm horrified to find out what they're actually doing on Android.
I think someone should get a proxy like Charles Proxy or one of those Wireshark where you
just watch the traffic.
Right.
Man in the middle of your phone and go like watch whatever is happening.
Man in the middle of your phone and see because I have a – this is – the opinions of
Mike do not necessarily reflect the opinions of Jupiter Broadcasting or Linux Academy.
But I have a suspicion that those apps are pretty chatty.
I'm just – there is one for Android and they have lots of apps on Android.
I know from experience that if I have a native Android app, I can do all kinds of crazy shit
with that person's phone.
No one can stop me.
Yeah.
That is well said.
The other part that was funny about this whole event is just how much of a weird sort of
mind game, psychological mind game it ended up being because they revoked the certificates
but just for a little bit.
They weren't saying like, nope, you're done with these things.
They still – they were like, well, I guess maybe – I'm curious one hand what you think
of like the pressures on Apple to not revoke those permanently or at least for a longer
time and the fact that like in a couple of days or one day or whatever the timeframe
was back in business and like, yes, they've been checked, Google as you mentioned apologized.
But do you think that would work?
Like if they – if you violated it, they ran the ban hammer against you, would you
get it back so quick?
So there have been cases like that where a small dev shop has violated this policy and
not only do they revoke your certificates, they actually delete your dev account.
So the irony here is everybody – yeah, everybody is saying how hard Apple has been on Facebook
and Google.
This was a very light punishment relative to what they would have done to a smaller
player.
Yeah, like the fact that I had some internal blowback, okay, that was a little bit extra
but otherwise, it's kind of a slap on the wrist for them knowingly violating some policies.
So if Apple finds that you're doing something they don't like and there's a prominent
developer who makes an app called Dash who we were going to have on the show but then
he got in trouble with Apple and didn't want to go anywhere, they revoked his account.
And the answer to that problem is open a new corporation and reapply and change your name
and – they don't – how can I say this without being incendiary?
Just be incendiary.
You got this.
I'll just be incendiary, right?
They're not afraid to crush ants, right?
So let's take the case.
Let's just say I did what Facebook did.
I am not asserting that I did, I'm just hypothetically.
Not only would they revoke all my certificates immediately, they would actually throw me
out of the developer program and delete my account and I would have to open a new company
to get a new account.
Wow.
Yeah.
Right?
Yeah.
It wouldn't just be restored automatically, it wouldn't just kind of come back because
as you said –
No.
They wouldn't even talk to you.
What they do is they send you a form letter.
See, it's weird how lenient they were because this – and of course, you understand why
because deleting a dev account would also remove Facebook from iOS, right?
Which is crazy that they can't do that and I'm sure Facebook would sue for antitrust
or whatever or anti-competitive stuff but yeah, hypothetically, Westpain Technologies
would no longer be an iOS development company if you did the same thing and you were an
iOS developer.
The other elephant in this room here is that it's not like we have 10 different platforms
that people run mobile apps on, I mean, unless you're still using Blackberry.
Right?
Windows Phone for Life.
Windows Phone for Life.
Hey, there's plenty to love there.
But it means because so many people, especially sort of like relatively affluent or people
in big C-level people, there's just a lot of people choose to use that platform so they
have this inherent control just based on that choice.
And people who own like five homebots.
Yeah.
Mm-hmm.
Mm-hmm.
Okay.
Well, that's a lot of –
Apple sadness.
That's a lot of Apple sadness and unfortunately, I mean, I don't think anything's going to
change so it's kind of an interesting moment to take a beat and reflect on like what are
the realities of the market that we're all kind of playing in here and it's kind of
not what we think but I don't – personally, I don't expect anything to change anytime
soon.
I don't think it's going to change.
I think it's interesting how accepting as a community developers have become of these
closed – like closed and aggressively managed ecosystems but that's just, again, my hobby
horse.
Well, you guys can all let us know.
Head on over to coder.show, coder.show slash 343 for this episode specifically.
That also reminds me, maybe you're an Apple developer, maybe you have a Mac.
Well, some of our new shows, especially Choose Linux, that show we talked about and have
been talking about because it's just so darn good, well, they've been trending over
on iTunes so if you lovely viewers and listeners out there happen to have an iTunes account,
please go, you know, leave a star rating or a view, go subscribe to it there.
I know you probably get things otherwise.
Not that many of us actually use iTunes for that purpose but it really does help people
find that.
That's where we get our new users, you know, so how do we attract more people?
That's a small step you can take and if you haven't already listened, go check out Choose
Linux, chooselinux.show, check out the latest User Error also starring Mr. Joe Ressington
of JB fame and abroad and go check out the latest Linux Action News.
All of those are good things to listen to after you finish this episode of Coder Radio.
Now Mike, I wanted to get a little more technical today since we've kind of spent things up
in high level at the start of the show.
I've been hearing a lot of buzz and I'm really curious what you think because I'm kind of
an outsider here but I've been hearing a lot of buzz about C Sharp 8.0 and some of the
stuff around nullable reference types and I kind of needed – I would like you to explain
what's going on there.
You know what?
I wish I understood.
There is a lot of buzz slash rage slash don't go on Reddit about C Sharp 8.
Well, that's just good advice.
Right.
Go on 4chan.
It's much better.
So C Sharp 8 and we mentioned this a few weeks ago is adding nullable types, right?
Nullable reference types, which is loosely like Swift Optionals.
I'm not going to dig into the exact details of how it works but basically, yay, right?
You have nullables.
That's great.
Now that I'm doing a little bit of Rust and I'm kind of – I was doing a little Swift
before that.
I am starting to see the value of quote-unquote safety via things like nullables and optionals
and all that good stuff.
You're kind of – you're diving off just a little bit taking a sample of the functional
programming deep end.
Exactly.
Exactly.
C Sharp has always been a little different in that there is just like so much existing
legacy code.
Yeah.
How long has it been around now?
Like there's a huge amount of legacy in that language.
This is a gross generalization but it is also the case that is widely used for line of business
applications that have been running forever.
So turning on the – so there's an option – let me just slow down.
There's an option in the C Sharp A compiler to – not require but to mark not handling
nullable cases as a warning.
Not an error but a warning.
Well, the issue with that is many corporations and many organizations, development organizations
in the.NET world, in their linters treat warnings like errors, right?
So you actually can't like commit or do anything.
Oh, yeah.
That will break your CI.
You won't be able to merge.
Right.
And the problem is like if you have C Sharp code from really anything that's not Greenfield,
you're going to have like a million of these warnings.
There is some philosophical argument about if nullables are a good or bad thing.
Well, I do think they make your code slop – like look more like spaghetti-ish and –
You end up with a lot more like just sort of check-in stuff, right?
You end up counting from these nullables which is good because that's kind of what they're
trying to help you prevent, right?
It's missing the case when something can be null.
But there's probably lots of also cases where it didn't really matter and now you have just
extra stuff.
Yeah.
I mean when I first saw this in Swift, I was kind of like, okay, do I really need to do
all this work?
But you know what, I'm coming around to it only because code bases always get larger.
They always get more complex and while it's a little more of a hassle upfront, I see the
wisdom in making sure checking all these cases.
Again, that's what nullables are for.
So I mean unless you can think of a good counter argument, I don't know that we want to dive
into the should you care about coding this way because I think the answer is yes, right?
In fact, other languages are starting to adopt this and I think in two years, everybody is
going to be doing something like again, what Swift calls optionals or nullables here.
Yeah.
I think there's a couple issues going on.
One is the case of like real optionality like missing data versus an empty key versus like
do we have this or do we know nothing about it and how do you handle extensibility and
sort of naturally extending and growing stuff?
And then there's the other case, like null seems like a special case, right?
The billion dollar mistake.
And I think there are styles of programming.
Basically, I think one way or another, you really do need to think about it.
And we talked about a little bit, one strategy is nil punning where you kind of assign stuff
so that nil makes sense.
So instead of getting like a null pointer exception when you try to take the head of
some list that's actually nil, well, you get some reasonable value, probably nil again,
but you get some reasonable value back.
So that's one less static style.
There's also sort of stuff where you have like lots of upfront verification and then
pass stuff through or just having, you know, like not having nulls at all and figuring
out how to make that work.
But I think what we don't want to see is big, complicated programs like you're talking about
that have maybe evolved over five, 10 years and you don't really know, right?
There is no help.
There's no annotations.
There's nothing to tell you like what are the possible values?
And when nil is, I think a huge part of the problem is that nil isn't really a value.
It doesn't play in any of the interfaces that you might want it to, even if that could be
implemented and make sense.
So you end up with this value that just sort of like shows up and you can't work with and
ends up biting you at runtime.
So you're right.
Like I think this is especially a good case to be like, can we account for this?
Is it easy enough to just say like, sometimes this is nil, compiler, help me not to forget
that.
There are a couple of places where this could be nil and make sure I handle it reasonably.
Where I think you have to be careful and you're kind of hitting on is there are probably types
of programs or certain code bases where maybe that's overkill or there's another style that
could do the same without the verbosity.
Like I think we kind of get confused sometimes when we talk about programming.
Not everything is an enterprise C sharp app.
Some are and like you should do it that way.
And there are other programs that maybe they're a script or like a small 200 line program
and you don't need it.
Or just like a Xamarin consumer app that you know if it crashes, it crashes, right?
I would add one thing though like I'm a little sympathetic to the naysayers here if only
for one reason.
The last three revisions, so let's say starting at C sharp six have really changed C sharp
I feel.
And they've done it in an additive way.
So like you could be boring and not use any of the new quote unquote cool stuff.
But I think it was six, maybe it was five for the addition of lambdas.
Things more of this F sharp-y functional you know, say my name, say my name, my name is
Haskell kind of stuff is creeping in.
And I could definitely see how you know what, I'm sympathetic because I remember when like
Swift came in against Objective-C and like somebody's moving your cheese, right?
You don't really like it.
It's hard especially in a day-to-day productive language, right?
Where you're like, oh my gosh, what are all these new abstractions I suddenly have to
learn?
Well, and I would say this nullable stuff is even like more in your face because like
if you chose not to use like lambdas for instance, you would just not do that, right?
Like totally works to do it the old way.
If your boss or some hotshot on your team turns this flag on, you are going to see these
warnings and you are going to have to address them.
So I get it.
I keep wondering like how much more stuff can Microsoft Voltron onto C sharp.
Yes, right.
And the answer is they see a feature in their language and they basically just go for it.
So you were talking about a little bit there and you kind of alluded to it, but there's
been pushback in the community, right?
Like there's not everyone's happy about it.
Yeah, there's been a lot of pushback.
I have spent a lot of time this week or last week rather trying to read some of the account
arguments.
I was really trying to find one that I thought was like good, like a good blog post.
I didn't find any that I found particularly compelling.
I think some of them were just like, I'm mad because I don't like change, right?
Like that's bad.
You're always going to have that.
Yeah.
Right.
I think that's a stupid argument.
One I did find that was interesting was like C sharp was meant to be a better Java, a OO
language and now we're bolting on all this functional programming stuff to it.
I actually think that that's still not a great argument, but I see where it comes from.
It comes from like an idea of like, you know what, Haskell is a functional programming
language and Haskell is what it is, right?
So if you wanted a pure OO language, you could just use Ruby.
You sure could.
You sure could.
I'm just telling you.
Everything is an object.
It's great.
I don't even know how to say this, but emotionally I get it.
I understand that argument, but intellectually from an engineering perspective, I actually
still think it's stupid and stupid in the nicest way possible, right?
Like it's C sharp is one of these languages that I think in our entire industry, C sharp
actually has a unique place.
Oh yeah.
Go into that a little bit more because what keeps coming into my mind and they're both
very different, but like obviously the closest thing is Java, which has also evolved with
Lambdas and streams and all that and then at the same time, another language that keeps
evolving and growing things is JavaScript.
So where does C sharp fall in all this?
So in my mind, C sharp is being asked if we just like, let's just think about it for a
minute.
High quality desktop applications for professionals, games, right?
Via Unity, mono game, all that fun stuff.
You know, enterprise software, web applications via ASP.net and.NET Core and all that, an
entire like pantheon of Microsoft web technologies, embedded via.NET, embedded via Microsoft
or what is it now called, Azure IoT, Windows embedded, Windows C, like there is a million
domains.
Like you can really program an Arduino board in C sharp and you can also write like a little,
you know, flashlight app for iOS.
So again, mobile would be another universal.
Absolutely.
And what I think is happening is that you know what?
If I had to be stranded on a desert island and only know one programming language, it
would not be crazy for that language to be C sharp because you can basically do everything
if you know the APIs and the frameworks.
But you're asking a lot of one language.
I see what you're saying.
There's sort of a, there's a trade off here of like, okay, well C sharp has been great
and lots of good software and bad, but lots of good software has been developed with it.
Is the legacy of having that worth trying to graph this stuff versus like everyone just
moved to F sharp or Swift or whatever, you know, new language that kind of takes that
place that's learned from all these things.
What's funny is like our industry hasn't actually been around that long.
You know, if you think about like whenever the fifties and we, so we've only been through
a couple of these cycles.
I don't think we really know what it means.
Like Java, maybe in one universe someone would have expected to have faded away, but no,
it's continued and it's changed and it's grafted.
So by and large still runs the old stuff.
Yeah.
I mean, it's, I mean, Java is another weird case.
I think, I think Java actually should have been where C sharp is, but because of weird
Oracle stuff.
Right.
Yeah.
Oh boy.
Right.
So we just ignore that.
Like I think about Ruby a little bit here, right?
Where it is theoretically possible for me to program an IOT board in Ruby, right?
Like there are libraries that will let me do that.
I can certainly, and I have written my, my, some of my utility scripts for like just like
day-to-day stuff are in Ruby.
Same.
That's not the optimal use for Ruby, right?
And no one's claiming that Ruby should be this, you know, one size fits all programming
language for a million different things, right?
For mobile apps to, you know, AAA games where C sharp, Microsoft is actually trying to do
that, right?
This is the one language to rule them all.
Yeah, you're right.
I mean, cause it does kind of like, it plays, especially with some of the, like the link
stuff, you can kind of write like high level data pipeline processing, but at the same
time,.NET is a surprisingly static runtime environment.
So you can have, you know, like a pretty lean low latency GC that you're running with.
You can run in small environments.
Well, and there's all kinds of adapters for lower level stuff, right?
I mean, if you really want to get really into the dark side, you can call into the old windows
com.
Oh, is that?
Oh man.
Wow.
Yeah.
I mean, the way you would do that is several showers after I'm pretty sure you just cry
yourself asleep.
It's fine.
Right.
The tears, they're cleansing, cleansing.
I don't know how we got to the com API thing.
I think we hit a wall.
I think so.
Yeah.
I mean, I'm glad to hear that you're for it.
I mean, it's kind of also reminds me of some of the transitions shops went through with
like deploying Scala, um, in like Java shops where you could kind of use it as like a,
you know, just a better, a better Java with some fancy stuff.
But then you have some people maybe on your team that really go off the deep end and explore
cats or other, you know, other super functional libraries doing lenses and getting super Haskell
about it.
And it does seem like in a team environment where both of those languages shine, you have
to be, you have to be really aware of, you know, what are, what are the standards other
people are going to reasonably be able to use and learn and where's the, where's the
curve change on the value to safety sort of thing, right?
Cause you do want safe apps, you want safe code, but especially in a business environment
at the end of the day, like it's got to be safe enough to work reasonably well.
Perfect ends up never shipping.
Yeah.
It'll be interesting to follow this is in rust and it automatically ships.
Right.
Yeah, exactly.
Once it compiles, you just, you just ship it and it's, it's done.
You know, it's perfect.
If it compile, listen, if it compiles, it's perfect.
Isn't that the rust model?
I believe so.
Haskell, Haskell as well.
Yeah.
Right.
And if it compiles, the compiler has got your back so you don't have to worry about it.
That's right.
Uh, well this'll be fascinating.
And I like, I mean, it seems like the, the industry can't help but continue to be pulled
in this direction, both from the dynamic and the static side.
We're exploring more of this stuff and where does it end?
Where does it stop?
I guess I'll just have to keep listening to Coder radio to find out.
It's easy to do though, because you just head on over to coder.show, go to slash three 43
if you want to find this episode.
Otherwise you can find our entire backlog, head on over to Jupiter broadcasting.com to
check out all the stuff that we've got.
You can find ways to contact us there.
You can also check out the calendar to find out when we're live and go find all the wonderful
other Jupiter broadcasting shows like Linux action news and choose Linux.
If you want more of me, well you can find that on the tech snap program.
We've just got our second episode with the new co-host Jim.
So go check that out if you want to get some clarification about what's happening over
in the world of open ZFS and Linux and you can find me on Twitter.
I'm at Westpane.
Mike, I believe you're there too.
Yep, at Jim Monoco on Twitter.
Beautiful.
Thank you everyone for joining us and we'll see you next week.

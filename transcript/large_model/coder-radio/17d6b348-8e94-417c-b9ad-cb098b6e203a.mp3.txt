This is Koda Radio, episode 357, for May 13th, 2019.
Hello, and welcome to Koda Radio,
Jupiter Broadcasting's weekly talk show that takes a pragmatic look
at the art and business of software development and related technologies.
My name is Wes, and I'm joined once again by Mr. Michael Dominic.
Welcome to the show, Mike.
It sounds like you're having a bit of a storm out there, but, well, that didn't stop you.
Yes, Wes, we are on location here in Atlantis, otherwise known as Florida,
and things are going great. We are not drowning.
Well, here to help live with us in the studio is the man who puts I in iOS, Mr. Chris Fisher.
Or the home in HomePod.
Oh, that's right.
Hello, gentlemen. Good to be back.
I brought Levi, the studio dog, with me, too.
That's really why you invited me.
He keeps us safe, so we can focus on all the good content in this here, Koda Radio.
Okay, Chris and I are just back from Red Hat Summit in Boston.
Boston.
And while we left, it seemed like everything else in the world exploded.
Holy smokes.
Between Google I.O. and Microsoft Build right here.
We just flew, left Seattle, the Redmond area, abandoned it for Red Hat.
Also, a Python conference was going on, too.
So much.
All the things were happening last week. It was crazy.
So, we have a lot to catch up on here on the show.
Before we get into any of that, though, we've had some excellent feedback this week.
Let's start with our friend, Louis, who writes to us.
Love the show. It's probably my favorite piece of J.B. content since the untimely departure of Unfilter.
Yes.
And thank you for your perfect email.
Isn't that the end?
Yes, that's perfect.
End conclusion.
No, he's got a little more substance than that, Mike.
He writes, I was listening to episode 356 with glee as you were discussing testing and junior DevOps positions.
I've just accepted a position as DevOps assistant at a small dev shop with the intent to work on my coding and development skills
and make my way into a more useful member of the team.
I was very excited about the position initially.
It's taken some time to get the interview process behind me,
and I was beginning to become concerned I had accepted a position as the office doormat, bottom of the totem pole, as it were.
After listening to the show and hearing Michael talk about the importance of QA to a dev shop,
I'm thinking it may be a great role for me.
The following question you had regarding QA as a career path really hit my concerns on the nose
and made me feel a lot better about my career decision.
I thought I was going to be in a big rush to get out of the basement and up to a full developer position.
But after listening, I really feel like my contribution to this team is going to be important and necessary from the get go.
Thanks for the great show, Louis.
Yeah, so that's some good stuff, Louis.
QA is super important.
I keep saying this and people keep not believing me, especially for a dev shop.
If QA fails, oftentimes dev shops either lose margin on a project or get fired.
And when the shop gets fired, usually people get fired.
So that's super bad, right?
QA, please test your stuff.
The only thing that really determines if you're adding value and are a good contributing member to the team
or your role is viewed that way is the culture of the people you're working with, right?
If they view your contributions, if the system is set up so that your position isn't just mindless tasks that should be automated
but you're actually interacting with and concerned and an integral part of the process,
then even if people outside of that industry don't understand your value, it's still totally valid.
It's a bit of an ego check at the door.
You can also flip this around for other industries.
Like when I look at tech support and my previous roles as a sys admin,
the absolute best admins had spent time doing tech support.
They'd spent time answering the phone and answering end users' questions.
And even just to bring it to something a little more locally here, just recently, Wes is our lead podcaster on the network.
He's like the top podcaster.
But just over the last couple of weeks before we hired another editor,
we had Wes editing this here show just to give him hands-on experience with what that end of the production crew has to work on.
Wes wasn't hired to edit podcasts, but it was good to give him those insights so that way,
A, he knows what kind of deliverables to give another team member,
but B, you gained a lot of insights into the actual production application as well.
So now you've taken that information forward and enhanced other aspects of our production,
which was just an ancillary benefit of having you go do something that, to be frank, was below you, below your job title.
But you check the ego at the door, and you're like, this is just good work.
This is just something for me to learn.
Yeah, it makes me a better team member, and I can put out a better product as a result.
Exactly. I think that was really useful.
And it's a matter of just getting over yourself a little bit.
And, you know, we do need to – I'm glad we're talking about – and, Mike, I'm glad you shared your views,
because we do need to recognize that role in the industry and not be so obsessed with the totem pole
and just recognize that we're all a team trying to make a product or whatever you're doing together.
How can you make the team stronger?
Exactly.
Okay, well, totally different sort of feedback.
There's been a request over in our subreddit.
Yes, we do have a subreddit, coderadio.reddit.com.
Anyone know any Linux or programming subs that aren't full of mindless circle jerking?
Most seem to be afflicted with mindless circle jerking, free software extremism, and other indiscretions.
Now, Mike, you've already gave a little bit of feedback.
This is a hard question to answer.
Is there anywhere you turn?
You know, I kind of have a weird view on this.
I mean, I would argue, well, what are you looking to get out of a Linux community?
Are you talking about desktop Linux?
Are you talking about, like, Linux the kernel, Linux on the server?
And also, it used to be much, much worse.
So I would almost say, I don't know where you're going, but I would avoid R slash Linux as much as possible
and go to things like the Ubuntu forums aren't bad.
I would also say the Jupyter broadcasting Telegram channel.
I always log in there and people are like, oh, I'm running KDE because apparently I don't have a job
and I don't want to tweak settings.
That took a turn.
Ouch.
And, you know, I need help.
And people help them who also allegedly don't have jobs.
So, you know, go there.
Yeah.
I mean, that's true free labor, right?
That's always useful.
You could tell Mike's a businessman.
Telegram is a good option.
It's a little bit different than, you know, than Reddit, but it has a lot of the same feelings.
I think it depends on, not to interrupt you, I'm sorry, but I just think it depends on the niche.
So it depends on how niche-y down you go.
If you go down to a group that's just enthusiastic about developing software, then they get less religious, right?
But if you go to a group that's all about GTK or free software, all about Qt, then they're going to be pretty passionate.
Yeah.
Understand your niche.
And you're right.
I think it's particularly hard, too, because Linux is just a big tent, right?
You have sys admin types, you have free software types, or you might have just people who want to write Python
and happen to run it all on Linux.
So just avoid the word GNU if you can, and you will be okay.
Now you're talking like the Red Hat Summit.
Mike, we were down there, and I swear, they did not use the word free software once the entire week.
It's all open source.
Kidding aside, they're definitely, at least from my kind of outside-in perspective, there's definitely a schism
between this is GNU, and all these proprietary companies are evil, and you can't just use Linux.
You have to be Linux.
And those of us who are trying to, again, don't want to hit this too hard, get a job done.
So yeah, anybody, for instance, if you see someone raging on YouTube
about so-and-so company contributed X millions or billions of dollars to the Linux Foundation, that's evil.
Well, that sentence itself is logically wrong, so ignore those people.
Some pragmatic advice from Mr. Dominic.
All right, moving right along, we've got one more piece of feedback today.
In our previous episode, a listener had asked about how to document a large system,
like databases, microservices, and more.
And, well, we had some answers, but probably didn't do a good enough job.
Someone else has written in, and one idea is a mind map tool, like Freeplane.
This can provide a freeform way to show at a high level how all the parts link together
and attach as much details as needed, like credentials or screenshots or generated API documentation.
And you know, I think that's a great idea, because anytime you can get something
that can capture some of the spirit of maybe like a whiteboard drawing that you have in a meeting
as you're diagramming a system architecture, if you can capture that in a way that is kept up to date,
that's the hard part, but that can be a huge boon, especially to, say, new developers on the team
who are really trying to understand the larger architecture.
Do you use anything like that, Mike?
Yeah, I use a program on the Mac called OmniGraffle,
and in Chrome, I use draw.io when I'm on Linux.
So I looked at the screenshots here.
It's very similar.
You can basically do charts, but I have not used this app in particular,
so I'm not sure where the differences would be.
This is a nice visual way to do this, and I consider myself to be a visual learner
and a visual processor of information.
Never really got into the mind maps, though.
Draw.io, I think I'm going to give that a go.
Really well done.
You end up fighting with the tooling, and then you're like, is this even worth it?
I already know what I'm doing.
You just need those barriers to be low
if you're going to get everyone involved to work on it.
My way of tackling this particular problem would be a simple markdown document
where I outline all of the areas that need documentation,
and then I just continue to expand in on that
and then break it out into individual files,
which then could be later translated to a Wiki
or some other documentation database.
Those tools can convert that to other formats,
and I've seen some neat little ASCII art to SVG graphic tools out there.
No way.
Yeah, so if you draw them in the right way,
that's great.
you can then get richer graphics out of it in the end.
I love that.
I'll dig up one of those and throw it in the show notes, yeah.
Lead podcaster indeed.
That's the kind of stuff, Mike.
That's the kind of stuff right there.
It's fire.
Okay, so while we're on this vein of documentation,
there's an interesting little new preference from our friends at Google.
Obviously, Google I.O. went on last week,
and there was all kinds of interesting news,
but if you're an Android developer,
well, you may have noticed that, well, Android development,
it's basically Kotlin first now.
Mike totally called this like almost two years on the nose.
Called it because Java has Oracle,
and if you are from Google, who do you not like?
In the announcement, Google writes,
increasingly Kotlin first,
end quote, right there from Google.
You know what, Chris and Wes, can you guys do me a favor?
Yeah, sure.
Just a small favor now.
Whip out that iron skillet for me.
Get me some unfiltered bacon.
This is the first of two times
I'm going to be frying some bacon today.
Are you ready?
Yeah, fry it up.
Well, we'll see.
I don't know if we have it loaded in there.
So this bacon is out of Eastern Europe.
Oh, yeah?
Yeah, is it tasty?
Oh, it's got a kind of a long history, long memory,
sort of not loving Russia feel to it.
Because if you remember JetBrains,
which I have been corrected by JetBrains,
a number of time, it's not actually in Russia.
Sorry.
So JetBrains is a company that makes Kotlins.
They also make the IntelliJ IDE,
which Android Studio is based on.
When does Google just say,
thank you, welcome to Google?
It's going to happen, right?
Yeah, you think so?
You think so, huh?
Absolutely.
Unless they're making so much money
that Google doesn't want to spend it,
but why wouldn't they just buy them?
Let's fry this up then.
Let's fry it up.
Go ahead, go ahead, Mike.
We're frying it up right now.
So within 180 days,
they're, oh, that's tasty.
I like the aromas.
I like it.
I know.
So I'm sorry, I didn't mean 180 days.
I mean, a year and a half,
Google buys JetBrains.
Oh.
I mean, you nailed this part of the prediction
so far two years ago,
so this is part two now, really.
Why wouldn't they?
Why wouldn't they buy
one of the better toolings?
I mean, they're a small,
little independent shop, right?
That's kind of ripe to be snatched up
by a giant behemoth.
And they don't have the money
to support a language of this caliber,
especially if it becomes,
which it is becoming,
of course, yes, just do the math.
Once Google's pushing this,
it's in their best interest
to own the entire tooling.
And I mean, not only that,
but Google itself writes
a ton of Java, right?
I mean, that's kind of the backend
for most of their stuff,
and it's also the premier Java IDE.
Yeah, and doesn't Oracle sue Google
like every two weeks?
So I mean,
they must also just like it themselves.
They write here, too.
If you're starting a new project,
you should write it in Kotlin.
Code written in Kotlin
often means much less code for you,
less code to type, test, and maintain.
So that's just a language win on its own.
Yeah, kidding aside,
I've done some Kotlin in Java projects,
and given the choice,
I would do Kotlin every time.
Like, no questions asked, yeah.
There's Kotlin.js,
and there's even one targeted
at like native applications.
So it's only going to be something
we see more of, I think.
We also had a bit of a upplay
of Chrome OS and a downplay
of Fuchsia at Google I.O.
Seems like at least
for the next several years,
the path forward for Google
is an Android and Chrome OS story,
and Fuchsia is going to continue
just to be an experiment.
Some parties suspected all along
that Fuchsia was a research project,
maybe something to allow
some of their top engineers
something to work on
that was academically interested.
And it surely will spin out results.
It might provide models
that get upstreamed later
into the Linux kernel, for instance.
It also works as a great leverage
to get lazy kernel developers
to create a new LTS kernel
that meets your needs,
and it continues to work
as great negotiating leverage
if we want to, and we're getting
it in that shape.
I think that's really
what's happening here, is this is
a negotiating piece with the OEMs
and with the kernel development,
with upstream development,
because it benefits
the kernel development team a lot
to have Google spending a lot
of their development money
and resources on the Linux kernel.
And if Google were to abandon
that development, it would be
a good portion of money
that would go elsewhere
into their own proprietary,
like, why are containers
so popular on Linux?
One big factor in that
was Google pioneering them
for their problems.
Say it again, Wes.
Say it again.
We have containers
because of Google.
Yeah, a lot of the memory
management stuff on ARM devices,
a lot of the power management
stuff.
Power support.
Yeah, boy.
Right.
I mean, you start to think
about all of the developers
that have come to the table
because of the Android ecosystem,
not even Google itself,
but then, like, your Qualicoms,
your Samsungs that have all come
to the table.
I don't think Linus and GregKH
are ignorant to that fact.
No.
And so if you don't,
you never need to ship
a single Fuchsia product,
or you could ship a couple
of them even better.
Yeah, tiny little embedded
things, throw a few out there.
Yeah, ship a couple of them
so we can really ship this thing
if we want to.
I don't know.
And then, you know,
if they decide to play ball,
then they don't need to use it.
And I think it's better
if everybody wins, right?
Because not only is Fuchsia OS
but their primary products
in the market right now
for operating systems,
Android and Chrome OS,
are all based on Linux.
It's always good to have
some diversity anyway, right?
So it seems like Fuchsia
will bring some things.
It did seem that Google
was furthering down
on some of their Linux kernel bets,
though, especially regarding
Chrome OS, which is every day
seemingly becoming more and more
like a regular Linux desktop
just with Google's branding on it.
As a way to...
They're bringing Flutter over.
You're going to have additional...
I say something like,
every Chrome OS machine
that's built in 2019
will support running Linux
applications or something like that.
Right out of the box.
During the keynote.
Yeah, like a lot of things
are moving into place here.
And right now,
on a current Chromebook,
you can go into like
the search app launcher thing,
type in terminal,
and in the background,
the dang thing sets up
a Debian 9 instance for you,
a container and launches it.
This is cross-UI,
cross-platform toolkit,
I think powered by Dart
under the hood.
And the idea is,
as we all want,
something that you can write
once and run everywhere.
Flutter is targeting that,
and one of their targeted
or the supported platforms
is Chrome OS.
So you can basically develop
native Chrome OS.
I mean, it's still all using
Android, I think, under the hood.
Another target, though,
it's just a shim
in their code for the moment,
I think that'll be the one
they target first,
or cute platforms,
but desktop Linux, right?
So you could be able to code
something in Flutter,
run it as a web UI,
or use Flutter to target
the Linux desktop.
I don't know how it's going to
go, but that could be
very powerful because one thing
we've kind of missed
in the Linux world is we don't
just have one thing
to point people at
to develop apps.
You can do it with Electron
or, okay, pick one
of the major toolkits
and hope that you make
the right choice
without really understanding
all the implications
of that.
Mike, I'm curious
what your take.
Have you played with Flutter?
I mean, you seem to already
be using some similar
or competing products.
Yeah, I haven't really played
with Flutter more
than just doing a couple
sample Skunkworks things.
I'm less optimistic
than you guys, I think.
I think Flutter is going to be
for people who are so deep
into the Google Firebase
ecosystem where that's
kind of what they know,
which is fine.
I really think
it's a serious
production tool at the moment.
I think it's a fair hot take
and really can't argue with it.
I think it is early days still.
Can I just change tracks
for a second?
You know how there's
always that joke
that it's the year
of the Linux desktop,
which would be easy to make
right now when you've got
all of these different vendors
shipping these Linux shims.
But something else
that you and I noticed
at Red Hat Summit
at the Flutter blog post,
all of these big summits
that just happened,
Google IO,
PyCon,
Red Hat Summit, and Build,
all very, very prominently
featured VS Code.
All of them.
Google showed VS Code
up on stage.
This Flutter blog post
has VS Code in the blog post.
Red Hat talked about
VS Code up on stage,
had slides talking about
VS Code up on stage.
Build obviously talked
extensively about VS Code
and a lot of its new features.
We talked about VS Code
remote last episode.
That was one of the things
they talked about at Build.
Just this is the year
of VS Code, holy shit.
It's a flat pack that's like
super easy to install on Fedora.
It's snapped up
officially by Microsoft,
which is just insane.
And it was, again,
I just got to say this,
on a Red Hat slide,
VS Code,
Microsoft Visual Studio Code
on a Red Hat slide.
I think that might just further
prove Mike's prediction right.
It's been very successful
for Microsoft
and has huge momentum.
I bet that scares Google
a little bit,
and that may be another reason
that JetBrains looks
appealing to them.
That's right.
That's right.
So if you want to jump into
the Microsoft loves Linux thing,
I'm going to need some bacon
out of the Pacific Northwest.
I love it.
It's a double bacon episode.
Here we go.
The burner's still hot.
Hints of maple.
I should have been wearing
a shirt for this.
Oh, my.
Ah!
Some sort of Redwood
kind of hint there.
So I'm going to make an argument
that is going to inflame
the subreddit and YouTube,
but too bad.
If you are a Linux fan,
but not a GNU Linux fan,
come, let's say, October,
which I think it's really going
to be like August,
but let's say October,
the best distro of Linux,
bar none, is going to be
Windows 10.
Because what is a Linux distro
if not a kernel with a bunch
of desktop and user experience
features built on top of it?
I mean, that's a big claim there.
Yeah, I mean, at first I was
going to call you crazy,
and then you added that second
part where you said,
what is a Linux desktop
if not for something built
on top of a Linux kernel?
And then I was kind of starting
to think maybe you have a point.
Well, think about it.
So think about a guy like me
who has to support
Windows software.
Oh, you're going to make me
throw up a little bit.
But just hear me out.
Okay, okay.
But deploys backends
almost exclusively to Linux,
actually right now
exclusively to Linux,
and isn't particularly happy
with macOS hardware.
And anyway, Bootcamp,
let's just say Bootcamp
hasn't been getting the love
it should be on the Apple side.
So if I need a good Linux
command line,
and if you haven't seen
the new terminal that Microsoft
is coming out with in the summer,
you need to take a look at that.
And I also need Windows desktop
application support.
I can think of no distro better
than Ciatia Nadella Edition
Windows 10.
All right.
I mean, at the end of the day,
you still have to deal
with the hot mess
that is Windows.
And I think you can't discount
how frustrating that can be
for people that have been
dealing with Windows
for a long time.
Although I think there's a set
of quote-unquote power users
that you might argue
it's because they haven't
been exposed to the perhaps
better paradigms available
in the free software desktop,
but they are good at Windows,
and they might like Linux,
but don't feel like
they need to change.
I was listening
to the excellent coverage
of just this very topic
in Linux Action News 105
earlier today,
and I kept going back and forth
about how I feel about this,
because on one hand,
it's kind of a huge win
for Linux, right?
Because Microsoft basically
couldn't compete on the server
or with the large
enterprise developer mindset.
Or even the userland command line.
Yeah, not even the command line.
And so they were basically
forced to ship
the full GPL Linux, right?
I mean, you do have to
optionally add it or whatever,
but it's there
packaged by Microsoft.
And they've always had
all these power,
and why it's threatening
is because they have more,
they just have more resources
to devote to the desktop, right?
That's a lot of what they're doing.
They have huge teams of people
to develop on this,
so now they just have
a more pragmatic mindset.
They can actually leverage
open source just as effectively
as the pure open source communities,
and they have
the commercial advantage.
Yeah.
I'll tell you what.
What the issue is
is fundamentally,
at the end of the day,
it's a great initiative,
but it's still Microsoft,
and so they're doing it
exactly backwards.
It starts with the name,
the Windows subsystem for Linux.
Seriously, I'm not even joking.
It starts at the name.
They're doing a backwards approach.
They are reverse engineering
their way into relevancy,
and it's a typical
top-down approach from Microsoft.
It's the same issue they had
with mobile where they try to take
a full-fledged desktop operating system
and distill it down for mobile
instead of starting
from a clean slate
and building from the ground up
for mobile.
They're doing the same thing here
trying to make...
They're still a legacy company
in many ways.
Right, they're trying to make
a relevant developer workstation
from a top-down approach
making something that has
everything turned on by default,
everything that's installed
by default,
a massive behemoth
that is 15 years worth
of desktop legacy,
and they're bootstrapping into it
a Linux kernel that runs
in a really tight, tiny,
well-designed VM.
At the end of the day, though,
it doesn't solve the problem
that is Windows.
Just like putting Windows
on a mobile device
doesn't make it
a mobile operating system,
they're not making this
a developer workstation.
They're making it
more accommodating,
and they're making it
an easier stopgap
for people that haven't
taken the plunge
to a different platform.
But I don't actually think
it solves the core issue,
which is, fundamentally,
they have a software-hardware
ecosystem issue.
You know, you can crack jokes
about the quality
of Mac hardware,
but at least you know
what you're going to get,
and it's easy to spec it out,
it's easy to request it,
it's conceivable,
it's manageable.
You go to Dell's website
or you go to Lenovo's website,
and it's a goddamn hot mess.
You can't tell
what you're getting,
and you're getting upsells
in every different direction
for software packages
that are total shit shows
that make your machine run slow.
None of those problems
have been solved yet.
You can go get yourself
a service book
if you want to be
in the same exact situation
you are with Apple,
where only one vendor
is making the hardware.
So they're really not solving
any of the overall
ecosystem problems
that make it extremely annoying
to use the Windows platform.
It's better,
and it makes it easier to use,
but it doesn't solve
the fundamentals.
That's my opinion, though.
I mean, if I was
a lifelong Windows user,
I'd be thrilled
at this news.
So you're looking at it
almost exactly backwards, actually.
So you're doing exactly
what you think
Microsoft is doing.
Windows is a feature
in a lot of industries
because Windows
is a certified platform
that someone on high
said this application
must ship on.
So even if you're
a bash-loving developer,
it is a pain in the ass, frankly,
to have to carry
two laptops, right?
And honestly,
the problem with Windows
in my opinion,
I know this,
I'm much more forgiving
than I think most of our audience,
is that the C prompt
is basically an abortion
in terms of a command line.
It's a joke.
Oh, it's so bad.
So bad.
I mean, the new terminal
does legitimately look good.
It does fix it.
Frankly, even without WSL2,
I mean, the hot take here
is now that it is a Linux kernel,
you could make
a sideways sort of weak,
but definitely interesting argument
that Windows 10
really is a Linux distro.
But even without that,
I would bet you
any amount of money
that there are a lot of developers
in our audience,
and not the ragey ones
who write into Reddit
every couple of weeks,
but people doing their job
who are working on Linux
and popping up on Windows VM
because there's some
multi-million dollar application
that's WPF, C sharp,
and it's their job
to keep running,
whether it's duct tape
or wood glue or whatever
they need to do.
Fair enough.
What came to my mind in this
is, is it partially a play
to just keep some
Windows licensees happy?
Oh, for sure. Absolutely.
Because how many shops,
you know, if you're lucky,
you have IT administrators
who are comfortable, you know,
adding Linux machines
to an active directory domain.
But by and large, no, right?
They have their infrastructure set up
probably for Windows laptops.
So before, there might have been
enough developer pressure
to either get Macbooks
or, oh, you know,
we really need a Linux laptop
that you have to custom support
for this.
That argument kind of falls flat
with WS.
Yeah, absolutely.
The whole thing is also,
I think, you're only having part
of the conversation, I should say,
unless we bring up Azure
because there's a big
Azure development component
to this.
And in the overall,
like, year 2025,
where you have the perfect,
ideal Microsoft world,
and I imagine it to be this,
you have your on-premises
Windows 10, Windows 7 workstations
that are connected
to an active directory
on-premises.
And you have a lot of
current applications
that you've invested
a lot of years into development
running on those systems.
But your future applications
are being developed.
Again, this is Microsoft's
ideal world.
Your future applications
are being developed
on Azure boxes,
running on Azure,
connected back to your
active directory,
which is likely running
on top of a Linux stack.
And so for them,
if they can push down
a Linux development environment
to your Windows 10 machine
for all of these
on-premises Windows 10 boxes,
they've just enabled you
to do local development
for Azure systems.
And I wouldn't discount the fact
that Canonical is coming out
and saying,
we are going to actually support
the Ubuntu U install on WSL2
because it's using
the same virtualizer
that we're supporting on Azure.
That's massive scale.
It's even sexier,
and I think it's going to be
very seductive,
particularly to junior developers.
You're forgetting the other,
I would say,
the other piece of the Holy Trinity,
and that's GitHub.
So let's say you pull down
your Azure environment.
Everything looks great locally.
You push the GitHub.
Now there's a little prompt.
Why not just in Visual Studio
that says,
deploy to Azure instance
such and such GWT ID?
Done.
No YAML files,
no bullshit with,
oh, you got to run my migrations
and my local versus
my production database
are in a different state,
so I just took everything down.
Yes, I'm dunking on Rails.
I don't know.
I think like old guys,
like us, frankly,
are going to,
because we know
how to do this deployments,
DevOps stuff already,
might not appreciate.
Think back to when you guys
were just starting.
Imagine an IDE, if you will.
Picture it,
Sicily 1930.
You have an IDE
that it says,
testing on local host.
Would you like to test
on virtualized Azure?
Huh, well it pulls down
your entire configuration
from Azure.
Great.
Would you like to push to GitHub?
Sure.
Push successful.
Your continuous integration
via App Center completed.
I think now they call it
Microsoft mobile app,
whatever they call it.
Would you like to deploy
your backend to Azure?
Click here.
Done.
And they've already run the test.
They've already run a help check.
They've guaranteed
you're not going to be scrambling
for the rest of the day
with basically,
I broke my database via,
I'm going to use the word migrations,
but I know other ecosystems
have different words.
I don't know.
Even me who knows how to do
all this stuff with scripts
might be like,
I really,
it's not valuable for me
to be fighting with
configuration files.
No, I mean as much as you can
have taken care of for you,
especially if you have
more than enough work
just trying to finish
the feature you're working on,
that is a very appealing proposition.
I mean I think Chris
will buy four more HomePods
and then a new Alienware
Windows 10 PC
and he'll go on the
Linux action news
and say,
this is the best distro,
but he'll wait a year
and he won't give me credit for it.
That's going to be the other.
That's my plan, yeah.
It's a long-term plan.
But it's great
that I can run these games.
Exactly.
He's like,
I don't know.
All I play is
Magic the Gathering Arena
so I have no idea
what real games
are like anymore.
Don't you know
that the plan is
I'm just going to buy
really expensive Macs
with no GPUs
and then just buy external eGPUs
for the rest of my life?
Oh, you have to go here, don't you?
You've been keeping us
in the dark, Mike.
We all want to know
more details
about what's going on over there.
I mean you've inspired me.
I've been experimenting
a little bit with an eGPU
with my ThinkPad laptop
and it's been kind of hit and miss.
It's been an NVIDIA eGPU though
so I don't know
if that makes a difference
and I'm curious how
your adventures have gone
and if it's actually
worth the money.
So yeah, my eGPU
is an OWC case
with a AMD Sapphire 560X.
You can Google that if you want.
That'd be a similar setup
I might go with.
Yeah, and because I have to have it
work on Mac OS,
NVIDIA was out of the question,
although maybe not pretty soon.
This eGPU can plug into my Mac Mini,
my Darter, and my HP Spectre
which runs Windows.
Wow.
So that's three operating systems,
one eGPU.
Okay, so you've tried it
on all three then?
I'd be curious
how they all variously fail.
I have used it on all three.
So again, you say,
what was that?
Three OSes, one GPU?
I was hoping you wouldn't get that.
Yes, yes.
I won't even say the reference.
So it works instantaneously
on Mac OS.
No problem.
Because obviously Mac
is the one true operating system.
Aren't they even selling little kits now
that are pseudo-endorsed by Apple?
Well, that's a $1,500 eGPU.
But it's at least a notion
that they are aware of.
Yeah, so I think this is where
Apple is going to answer
the I can't open up my Mac
and expand it question.
And it works instantly.
It's great.
Thunderbolt 3, everybody loves it.
Windows?
Have you ever been to AMD's
Windows driver website?
You know, thankfully no.
And I'm not intending to
any time soon.
If you've seen the movie Hellraiser,
you'll kind of get the theme,
very black and red,
very confusing.
But it does work.
It takes maybe like 45 minutes
to get it working.
Why did it take so long?
What was the challenge?
Well, you have to run a Windows update
until you get a certain version
of Windows 10.
And you have to kind of keep update.
You know how Windows is.
You have to pick if it's actually
going to give you the update.
You have to kind of wait until it decides
that you have an update.
Update, then wait,
and then see if your update's there again,
and then do the next round of that.
And then restart a few times.
And then install the AMD thing
and restart.
And then while it loads,
it has to do something else
while it restarts.
It's fun.
Now, you, Wes, put in a handy-dandy script here
for getting this set up on Ubuntu
that I did not see.
That's right.
I did it by hand.
It's a pain in the ass.
You have to fiddle around with the Misa utils,
Jar Jar Binks' favorite PPA.
But once you have it running,
and you do have to restart,
which, you know, I know Linux people,
you say that never happens.
But you do.
It does work fine.
I will say that this right now,
I would say the order is Mac, Windows, Linux
in terms of support.
But the testing I did was on 18.10, not 19.4.
So I'm wondering if the new update
with the new kernel might be a little better.
And, yeah, I mean, this kind of has changed
how I think about workstations.
So when you say it's changed
the way you think about workstations,
do you mean in the fact that
you're going to kind of, in the future,
buy a machine and not worry about it
having a baked-in GPU of any sort?
Yeah, I think so.
Because I'm bound to basically buying machines,
it's very hard to replace the GPU.
I could see myself having a Mac and a Linux laptop
or a Windows and a Linux laptop
and just, when I need that kind of power,
hooking them up to the GPU.
But most of the time, when I don't,
particularly because I travel a lot,
I would just run them on the Intel integrated,
whatever the hell, right?
Yeah, I'm a little curious.
Have you done multiple workloads?
I'm wondering if there's a difference
between having to configure it just to support
GPU offloading for training ML models or something
versus trying to get a fully accelerated desktop going.
So on Windows in particular,
there is a very obnoxious AMD app
that wants you to tweak it for what you're doing.
I did not do that because my Windows,
I really just tested it running some games on the HP Spectre.
It was a little weird playing Tomb Raider on a Ultrabook
and having it look nice on an external monitor.
Yeah, I have experienced that too with my ThinkPad.
You're not joking.
It really is something to have this tiny machine
that has no GPU and you're playing a full-fledged video game.
And on Mac, it does it for you.
In fact, I don't think there's an interface even.
I looked it up to actually tweak it too much on Mac OS.
Having said that, Chris, can we spill the bacon here
or the beans that go with the bacon?
Ooh, you know, we do have so much bacon.
We might as well have the beans too.
One last little, here, we'll do the bacon ends here.
This is frying up the bacon ends, Mike.
It's good, it's tasty.
Ooh, I can smell it.
Yeah, all right, go ahead.
So Chris shared with me today in Slack,
presumably to get me excited, that a Mac Pro was coming out.
Oh, the leaked image of the cheese grater 2.0 style
is the rumor.
With PCI slots, eight Thunderbolt ports.
Did you say eight?
Yeah.
Wow, that's a beast.
So are they actually recognizing that Macs could be good
if they put a tiny amount of effort?
Damn, Wes, damn.
It's a rumored leak, so don't get your hopes up.
It's a rumored product image,
and the image is from November 2018.
So it's just a clever troll who realizes
that's what everyone wants.
It was Chris taking his HomePod and Photoshopping it.
Just stretching it up.
Yeah, no, but the real hot take here is NVIDIA support.
Yeah, which currently you can't even do on the Mac
with an eGPU.
Not unless it's the same architecture
as the old, old 2006, yeah.
So that, if true, could be big
for a lot of these machine learning jobs
and the CUDA workloads and whatnot.
It also means it's likely a fake leak.
I'm just not buying it.
Yeah, why do you do these things to me?
I don't know.
For me, the issue with the eGPU
legitimately sounds like a compelling product,
and having some experience, I bought myself,
I talked about this in Linux Unplugged,
they have a ThinkPad dock that has an NVIDIA 1060 built in.
Right, just built, integrated right in.
So you get a Thunderbolt 3 dock
with all the traditional Thunderbolt 3 dock ports
with a GPU, and I thought, man, isn't that a great idea?
So I tried it out to some success,
to also some issues, and I was very, very impressed.
But I have to tell you,
every time I've wanted to use that eGPU dock
has not been when I'm at my desk.
It's been when I'm traveling,
and I've got like three hours in a hotel room to kill.
And I'm like, man, I wish I would have packed my eGPU dock.
Have you experienced that?
Because that's where I'd want to actually have it,
is when I got a couple hours to kill
and I want to play a video game.
Yeah, so again, I know you're a much bigger gamer than I am.
My game of choice is MTG Arena, which by the way,
if you're using desktop Linux, runs awesome on Nutris,
so you don't actually need a Windows install.
Yeah, and Jason from Choose Linux plays,
and one day I will beat him.
We've never played yet, because we're on different time zones.
But actually, I have a few pain points
very different than that, though.
Like, the enclosure is bigger than my Mac Mini.
That's not a storm behind him, that's the eGPU.
Yeah.
It's just the eGPU.
Right, so also, am I the only one in the world
who didn't know that Thunderbolt fails above a certain length?
Well, it's a complicated protocol pushing a lot of data.
Yeah, it depends what you're doing.
So what you're doing with that really, really high bandwidth
is like active Thunderbolt 3,
and it has to be a certain length cable, yeah.
I guess that means the GPU has to be,
the eGPU has to be fairly close to your face hole.
Well, so the cable that comes with the OWC eGPU case that I have
is literally three and a half inches long.
Yeah.
It's actually taught when I'm putting the Mac Mini
on top of the eGPU case and plugging it in.
It's pathetic.
And a six-foot cable costs, I don't know, an arm and a leg.
Well, a six-foot cable of the right caliber to do this
costs a fortune, I found out, so I didn't do it.
I don't know.
And the other thing is, if Chris is just pulling my leg
and I can't run NVIDIA,
well, then really, for the only ML library that works well with AMD
is CoreML, because it's from Apple,
who up till now hates NVIDIA.
Everything else is just better on NVIDIA.
But you can swap cards in and out of that enclosure, right?
So you could have, in theory, an NVIDIA card that you swapped in
for certain workloads in an AMD card,
and you're still kind of saving money,
because you only have to buy one of each.
I know that sounds crazy, but...
Well, so the positive case that I would make
for someone like me who travels a lot,
and maybe even someone like you,
maybe even Wes, actually,
you could buy a new little Linux laptop every year or two,
in my case, every three weeks,
and just plug it into your eGPU
and not spend money on an integrated graphics card.
That's what I'm thinking.
And it also means you'll likely get a smaller, lighter machine
that's better on airplanes.
Right. Oh, that's a good point.
Well, in the battery life,
those of us who do a lot of coding in airplane terminals,
nothing's worse than not being able to get an outlet
and having to patch something.
And it's nice when you aren't using that,
then you can just be, as you said, Mike,
using the Intel graphics, which aren't great,
but work beautiful when you're on an open-source desktop.
Yeah.
Especially when you just need like a terminal and a text editor.
I mean, it's perfect.
Some electron apps, because you have to.
Excuse me, Flutter desktop apps?
Yeah.
Oh, here we go.
Yeah, of course, of course.
Yeah, well, it all really depends on how energy efficient
the Windows subsystem for Linux is, apparently.
That's what it's all about, baby.
Listen, I'm showing up to Linux Unplugged one day,
saying, hey, guys, check out my new desktop.
Look at the design.
I have a background here of a square with four sub-squares.
It's blue.
And yeah, oh, look at this.
Look at this, I'm running games.
Have you guys heard of Steam?
I hate you right now.
All right, but I mean, all kidding aside,
it kind of feels like you've transitioned to a new way.
Like there's no going back for you on the GPU thing.
Challenges aside, no.
Will you be building a big desktop
any time in the future, then?
So this is the irony.
Assuming Chris isn't screwing with me,
they finally come out with the Mac I want,
or they're allegedly coming out this summer or this fall,
and now I no longer give a crap about desktops.
It's only been, what, five, six years?
Nice.
Go figure, right?
Go figure.
Because think about it, 500 bucks a year,
I could get the new best spanking high-end GPU I want,
and not have to update to crazy Thaleo number four,
or crazy Mac Pro, or whatever Dell sells.
Right, and not to be like old man Chris here,
but kids, it's gotten to the point where I couldn't tell you
if I'm on a fourth-generation i7,
or a sixth-generation i7, or even a second-generation.
It doesn't seem to matter.
They're just so fast.
At a certain point when you've got MB&E drives,
you've got i7 processors,
and you've got interchangeable GPUs,
the base unit, the core machine, is pretty damn fast.
And then it really just comes down to graphics and storage.
And I've got network storage, too.
Network storage adds a ton of additional storage to my machine.
Well, and don't forget Thunderbolt 3,
if you buy a high-end enough NVME Thunderbolt 3 NAS system,
that's nearly onboard performance.
Oh, yeah.
I mean, we have a gigabit LAN here in the studio,
so it flies copy and files over to the free NAS, no problem.
I mean, everything fails because of the old thermal throttling,
but I'm ignoring that problem right now.
Well, you externalize the GPU with decent cooling,
and that makes your machine run cooler, too,
although it does heat up running that Thunderbolt bus as hard as it does.
I just do all my development from the walk-in, so it's fine.
I have to say, of all the three machines,
I will give the Galago one thing.
It might always spin its fans up,
but it doesn't seem to suffer the way the HP does with the eGPU.
The Spectre is very thin,
so I can imagine they're really throttling that thing.
It must be a tiny fan, and I got to say,
it sounds like one of those quadruped drones taking off.
It's bad.
So you're just embracing the tri-operating system lifestyle.
You're not dual-booting anymore.
You're tri-booting, and then with an eGPU in the mix now.
Like, this is getting complicated.
Wow.
So I have a relatively crappy old Dell display.
In fact, on Twitter, I'm asking people to recommend the new 27-inch matte.
I only want matte display that has DisplayPort.
And then I have one of those Amazon laptop stands.
So here's the deal.
Everything has Thunderbolt.
You plug it in.
If I need to work on Mac OS, I plug in the Air.
If I need to work, or the Mac Mini, which is sitting here.
But that's really supposed to be a server.
If I need to work on Windows, I plug in the HP.
If I need to work on Linux, I plug in the Darter, and we're good to go.
Same keyboard, which is a DOS keyboard.
Same mouse, which is my old Naga mouse that we had from before we started the show originally.
Basically, I have built my own ghetto, or I think pretty fancy docking system.
Right, so you just have a little Thunderbolt cable dangling out there.
You just plug in whatever you want.
I like that.
That's nice.
Yeah, and a Thunderbolt hub for all the USB crap, right?
So the keyboard.
Yeah.
So the only kind of cognitive gymnastics you have to do is if you swap in a Mac,
you've got to swap the command and control keys stuff.
Yeah, I sometimes get confused between POP and Mac all the time.
Oh, Gnome Shell, how Mac OS you've...
Or actually, more like Mac OS has become more like Gnome Shell, I think, really.
I'm just like, why doesn't my command work?
I don't understand this, what's going on?
Yeah, but that's really the problem.
I mean, the only thing I've noticed that's mildly annoying is the monitor I have does not have an in...
What do you call that? In built-in microphone.
Oh, sure.
So taking conference calls doesn't work the way I would like it to.
You just got to get yourself like a Logitech webcam or something.
If you can recommend one, shoot it to me in Slack.
C930E.
I could just Google that, okay.
Or C930 or C920.
But C930 would be the...
We'll throw a link in the show notes.
How about that?
We will.
That's the one I use right there.
It's got a nice wide-angle flat lens.
And it's a mic as well or no?
Yeah, it has a good dual-array stereo mic.
So it does a decent job.
I mean, Mike, you're using a microphone right now.
You do have a microphone, by the way.
I thought this was like a club I was supposed to hit invading barbarians with.
It's for podcasting only.
Actually, fair point.
I did not.
I literally never thought of that.
You know what would be kind of fun is if people have kind of cool interesting setups that they'd like to share with us.
They should do it.
Oh, yeah, absolutely.
Pictures too would be kind of cool.
Yeah.
Just go to coder.show slash contact.
You can contact us that way.
Or, hey, it turns out we're all on Twitter.
I'm at Westpane.
Mike, you're...
At Tumenuco.
And I'm at Chris LAS.
You can find the whole network there too at Jupiter Signal.
We do this show live every Monday right about noon Pacific.
You can go to jupiterbroadcasting.com slash calendar to get that converted to a time zone near you.
That'll be it for today's show.
Thanks for joining us.
We'll see you next time.
Bye-bye.

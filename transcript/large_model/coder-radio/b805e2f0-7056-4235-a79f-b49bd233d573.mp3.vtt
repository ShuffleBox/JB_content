WEBVTT

00:00.000 --> 00:07.000
This is Kota Radio, episode 369, for August 5th, 2019.

00:31.000 --> 00:34.000
Hello, and welcome to Kota Radio.

00:34.000 --> 00:40.000
Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business,

00:40.000 --> 00:46.000
software development and related technologies, and probably a few other things this week,

00:46.000 --> 00:52.000
because while I'm normally joined by Mr. Michael Dominic, today he's out sick.

00:52.000 --> 00:55.000
You gotta heal. You gotta take your health seriously.

00:55.000 --> 01:00.000
As my perhaps reluctant co-host knows very, very well.

01:00.000 --> 01:01.000
Welcome to the show again, Chris.

01:01.000 --> 01:07.000
Hello, Mr. Payne. My plans of slowly poisoning Mr. Dominic while he travels

01:07.000 --> 01:12.000
so I can regain my place here on this show have come to fruition.

01:12.000 --> 01:15.000
I assumed he was just in danger living in Florida anyway, right?

01:15.000 --> 01:16.000
That's not safe down there.

01:16.000 --> 01:19.000
And whenever you got a kid, you're just gonna get sick.

01:19.000 --> 01:20.000
You're like a target, man.

01:20.000 --> 01:22.000
You're like a target. But I'm glad I could be here.

01:22.000 --> 01:25.000
And really, I kind of miss doing the show, so it's nice to have an opportunity to come on,

01:25.000 --> 01:27.000
although it's not the same without Mike.

01:27.000 --> 01:29.000
It certainly isn't.

01:29.000 --> 01:32.000
And actually, it's kind of good you're here today, because let's start with some feedback.

01:32.000 --> 01:35.000
There's some feedback you might be able to help me with.

01:35.000 --> 01:41.000
All right, so over on kotoradio.reddit.com, that's right, we do have a subreddit,

01:41.000 --> 01:46.000
user Borkdude, who I will note is a prolific member of the Clojure community.

01:46.000 --> 01:48.000
You'll see him making all kinds of neat utilities,

01:48.000 --> 01:53.000
writing excellent blog posts and helping users out on the Clojure subreddit all the gosh darn time.

01:53.000 --> 01:56.000
He writes, I'm looking for a good mic for voice recording,

01:56.000 --> 01:58.000
since I'll be a guest on a podcast soon.

01:58.000 --> 02:01.000
Since you sound good in your shows, thank you.

02:01.000 --> 02:03.000
Can you share what mics you're using?

02:03.000 --> 02:07.000
And, you know, I know a thing or two about this too.

02:07.000 --> 02:10.000
You've been doing this a long time, and it can be especially tricky.

02:10.000 --> 02:13.000
It's one thing to do it when you got, you know, production budget,

02:13.000 --> 02:16.000
and it's another when, you know, you just need to sound good enough.

02:16.000 --> 02:22.000
Yeah, and first of all, it's really kind of him to consider that on the behalf of the podcast.

02:22.000 --> 02:23.000
Oh my gosh, so much so.

02:23.000 --> 02:25.000
Right, thank you for just thinking of that.

02:25.000 --> 02:29.000
Plus, it's kind of nice, even if you're not like going to be a guest on a podcast

02:29.000 --> 02:31.000
or you're not planning to record an audio book anytime soon,

02:31.000 --> 02:38.000
it's kind of nice to have a decent microphone for meetings, jumping on a, you know, a call,

02:38.000 --> 02:41.000
maybe you want to do a call from your PC to your desktop.

02:41.000 --> 02:43.000
It's just nice to have a good microphone in general,

02:43.000 --> 02:44.000
but you don't need to spend hundreds of dollars.

02:44.000 --> 02:45.000
Right.

02:45.000 --> 02:48.000
So there are a couple that I do recommend.

02:48.000 --> 02:51.000
I was trying to remember before the show, and I figured it out.

02:51.000 --> 02:52.000
I'll put a link in the show notes.

02:52.000 --> 02:55.000
If you just want to get started with something that hooks up over USB,

02:55.000 --> 03:00.000
the one thing I'm going to ask of you is make sure you buy a microphone that has a headphone jack

03:00.000 --> 03:02.000
so you can do what's called local monitoring.

03:02.000 --> 03:03.000
That is so important.

03:03.000 --> 03:05.000
Right, and also if you're using Linux or something like that,

03:05.000 --> 03:09.000
it just makes things a little bit easier because it just shows up as an output device and whatnot.

03:09.000 --> 03:12.000
But I really like for the entry level that still sounds pretty great,

03:12.000 --> 03:21.000
like you could start a podcast with this, the Audio Technica ATR2500 USB Condenser Microphone.

03:21.000 --> 03:24.000
It's $70, primeable.

03:24.000 --> 03:25.000
That's hard to beat.

03:25.000 --> 03:28.000
Yeah, and it'll be your audio in and your audio out.

03:28.000 --> 03:33.000
It's all you need, so you don't have to buy an audio interface or anything like that.

03:33.000 --> 03:34.000
It's really nice and straightforward.

03:34.000 --> 03:39.000
Another solid microphone that I've used for years that's a little more expensive, similar thing,

03:39.000 --> 03:42.000
the Rode Podcaster, pretty good microphone.

03:42.000 --> 03:48.000
And then if you want to step things up from there, there's things like the Heil PR40 or the –

03:48.000 --> 03:52.000
what's the Rogan mic that people love that doesn't work for my voice?

03:52.000 --> 03:53.000
Oh, the SM7B?

03:53.000 --> 03:56.000
Yes, so there's tons of good mics when you want to start going up.

03:56.000 --> 03:58.000
And just one thing to keep in mind is like I just said there,

03:58.000 --> 04:00.000
like not every mic works for everybody.

04:00.000 --> 04:03.000
I bought this nice microphone thinking, oh, I'm going to sound great now,

04:03.000 --> 04:05.000
works great on the Joe Rogan podcast.

04:05.000 --> 04:07.000
I put it on and I hated the way it sounded.

04:07.000 --> 04:10.000
Yeah, you're like, no, this is not for me.

04:10.000 --> 04:11.000
So you will probably have to experiment,

04:11.000 --> 04:13.000
and there are probably a couple different price levels, right?

04:13.000 --> 04:16.000
You have nice USB ones, and if it's just sort of like I'm an occasional guest

04:16.000 --> 04:18.000
and for conference calls, that's the level.

04:18.000 --> 04:22.000
If you're doing something more serious, then maybe you want to look into XLR-based mics

04:22.000 --> 04:23.000
and getting a real interface.

04:23.000 --> 04:27.000
But then you're probably going to be out, what, 300, 400 bucks by the end of it?

04:27.000 --> 04:32.000
Yeah, as you well know, there's – well, there's a price for everybody, really.

04:32.000 --> 04:36.000
But yeah, 300-something bucks, you could probably get something pretty usable.

04:36.000 --> 04:38.000
If you're thinking about starting a podcast,

04:38.000 --> 04:41.000
maybe your business wants to do a podcast or you personally want to start one,

04:41.000 --> 04:46.000
I have to recommend Friend of the Show Dan Benjamin's podcast method.

04:46.000 --> 04:47.000
Just go Google that.

04:47.000 --> 04:52.000
It's on the 5x5 network, and rumor has it, rumor has it,

04:52.000 --> 04:54.000
a little birdie tells me that it's about to start back up.

04:54.000 --> 04:59.000
It's been on hiatus since 2017, but rumor has it it's about to start very soon.

04:59.000 --> 05:02.000
And the podcast method, 26 episodes deep,

05:02.000 --> 05:04.000
so it wouldn't take you that long to go through it.

05:04.000 --> 05:08.000
In 26 episodes, you'd basically know how to run a network.

05:08.000 --> 05:10.000
I mean, it's really – it's an in-depth thing.

05:10.000 --> 05:14.000
And he covers everything from gear to technique.

05:14.000 --> 05:15.000
So that's the podcast method.

05:15.000 --> 05:18.000
Yeah, we'll have some mics there in the show notes.

05:18.000 --> 05:22.000
Again, it was the Audio Technica ATR2500 USB.

05:22.000 --> 05:24.000
And I really recommend you get the USB edition

05:24.000 --> 05:28.000
because you're going to need to get yourself a USB audio interface

05:28.000 --> 05:31.000
if you go with anything that's XLR or analog,

05:31.000 --> 05:35.000
like a headset that comes in over like a microphone plug,

05:35.000 --> 05:39.000
like a little tiny one that needs to go into something besides your machine

05:39.000 --> 05:42.000
that has a built-in port if you want it to sound decent.

05:42.000 --> 05:44.000
Yeah, you need to know how you sound.

05:44.000 --> 05:45.000
Yeah, you've got to be able to hear it.

05:45.000 --> 05:46.000
Excellent.

05:46.000 --> 05:47.000
Well, that's a great question.

05:47.000 --> 05:48.000
Good luck.

05:48.000 --> 05:51.000
And I guess we look forward to listening to you on that podcast soon.

05:51.000 --> 05:54.000
And you say he's busy, he's active, I should say, in the Clojure community?

05:54.000 --> 05:55.000
Oh, yes, very much so.

05:55.000 --> 05:58.000
Put a link in the subreddit on the podcast.

05:58.000 --> 05:59.000
Submit to the subreddit.

05:59.000 --> 06:03.000
Yeah, once it's out, let us know and we'll recommend it here for sure.

06:03.000 --> 06:04.000
That's really neat.

06:04.000 --> 06:06.000
You've got people in the Clojure community listening to the show now, don't you?

06:06.000 --> 06:08.000
I love it.

06:08.000 --> 06:10.000
Well done, sir.

06:10.000 --> 06:16.000
So I wonder how the old Clojure community felt about Mike's take.

06:16.000 --> 06:17.000
That's a good question.

06:17.000 --> 06:21.000
We got some good feedback on Twitter about it, too.

06:21.000 --> 06:22.000
I'll wait for him to come back.

06:22.000 --> 06:25.000
Yeah, there's some other feedback, some people were being helpful.

06:25.000 --> 06:27.000
So we'll definitely talk more about that.

06:27.000 --> 06:28.000
Helpful?

06:28.000 --> 06:30.000
I mean, sometimes, sometimes it's helpful.

06:30.000 --> 06:31.000
Yeah, all right.

06:31.000 --> 06:32.000
You're so jaded.

06:32.000 --> 06:34.000
No, you know, you know, I guess.

06:34.000 --> 06:39.000
Well, Mr. Payne, since Mr. Dominic isn't here, is it okay if I bring a couple of stories to the class?

06:39.000 --> 06:40.000
Yeah, of course.

06:40.000 --> 06:44.000
There's one that you found, which is the exact opposite of a story I found.

06:44.000 --> 06:45.000
Oh, boy.

06:45.000 --> 06:47.000
So I thought that'd be kind of interesting to talk about this week.

06:47.000 --> 06:53.000
And it's about the plight of browser extension developers.

06:53.000 --> 06:55.000
So the first one is a link that you found.

06:55.000 --> 07:00.000
Google and Mozilla are failing to support browser extension developers.

07:00.000 --> 07:01.000
And it's a good case.

07:01.000 --> 07:04.000
It was just recently published, and you'll have a link in the show notes.

07:04.000 --> 07:06.000
But I grabbed a couple of things from it.

07:06.000 --> 07:11.000
And I thought this would be good, like, you know, fodder for conversation.

07:11.000 --> 07:18.000
So the author writes, it's a regular occurrence to hear open source developers are selling their browser extensions,

07:18.000 --> 07:22.000
only for their users to then be exploited later on by new owners.

07:22.000 --> 07:23.000
Yeah, right.

07:23.000 --> 07:24.000
We've seen a ton of these lately.

07:24.000 --> 07:29.000
You build up, you know, a handful of users, you monetize them, you sell them off.

07:29.000 --> 07:35.000
He writes, we are, or she writes, we are witnessing the failure of browser vendors to recognize the value of our labor

07:35.000 --> 07:39.000
and the important role it plays in a healthy browser ecosystem.

07:39.000 --> 07:43.000
They go on to say Mozilla has deprioritized the placement of donation buttons,

07:43.000 --> 07:50.000
and the Chrome Web Store and the Microsoft Store do not offer features for supporting extension developers at all.

07:50.000 --> 07:54.000
How important are extensions to why you use a web browser?

07:54.000 --> 07:57.000
They are, they play a small role.

07:57.000 --> 07:58.000
Really?

07:58.000 --> 08:06.000
I mean, I can think of a few that we use pretty regularly, and they're not, it's not essential, but it would be a factor, right?

08:06.000 --> 08:13.000
Like if you, once you have started using extensions, unless there is a direct equivalent or the extension is available in both places,

08:13.000 --> 08:16.000
it's at least a small disincentive to shift.

08:16.000 --> 08:22.000
I mean, for me, it's pretty strong because a big part of my day job is collecting information from the web

08:22.000 --> 08:26.000
that I'm going to use for, you know, consideration in a show later.

08:26.000 --> 08:33.000
So I want to do research or reading or I want to mark it up or I want to save a link, and a lot of that workflow uses extensions.

08:33.000 --> 08:39.000
And for me, it's sometimes been like the thing that keeps me on Chrome, for example, or what kept me on Firefox for so long.

08:39.000 --> 08:46.000
In fact, there's even forks of Firefox to support the old Netscape plugin API.

08:46.000 --> 08:47.000
Oh, boy.

08:47.000 --> 08:49.000
So it's obviously super important to some people.

08:49.000 --> 08:55.000
And this author is making the case that there's really no support from the browser manufacturers.

08:55.000 --> 08:58.000
Yeah, I think the analogs to, you know, some other things.

08:58.000 --> 09:04.000
We've seen more platforms that have extensibility, things like Alexa skills or, you know, good thinking.

09:04.000 --> 09:05.000
Just in case.

09:05.000 --> 09:11.000
But it does seem like some platforms expect there to be this sort of user provided content.

09:11.000 --> 09:16.000
Thinking about how that gets monetized, if you want it to exist, seems like it makes sense.

09:16.000 --> 09:23.000
Anything of certain complexity, port requirements, needs a form of monetization just to be sustainable, I suppose.

09:23.000 --> 09:26.000
And that's really where the issue kind of comes up.

09:26.000 --> 09:28.000
Now, so that's the story you found.

09:28.000 --> 09:40.000
The story I found, which is like an exact contrast and maybe explains the entire problem, is half of Google Chrome extensions have fewer than 16 installs.

09:40.000 --> 09:42.000
Wait, 16?

09:42.000 --> 09:43.000
Yeah.

09:43.000 --> 09:54.000
In all, about 50 percent of all Chrome extensions have fewer than 16 installs, meaning that half of the Chrome extension ecosystem is basically a ghost town.

09:54.000 --> 09:59.000
According to a recent scan of the entire Chrome Web Store conducted by extension monitor.

09:59.000 --> 10:00.000
Interesting.

10:00.000 --> 10:04.000
Now, I do wonder, I'd like to see some more detailed statistics because it's kind of hard to say.

10:04.000 --> 10:06.000
And it does, I mean, it does make sense, right?

10:06.000 --> 10:08.000
How many extensions do you use to install?

10:08.000 --> 10:09.000
A handful?

10:09.000 --> 10:10.000
More than I should.

10:10.000 --> 10:15.000
And probably most of them or the, you know, the most essential ones are the popular ones, right?

10:15.000 --> 10:21.000
Like there's a couple of nice ones that you get like, you know, HTTPS Everywhere maybe or there's a certain ad blocker that you use.

10:21.000 --> 10:23.000
But it's a rapid decline of like...

10:23.000 --> 10:25.000
I've got 15 that I can count.

10:25.000 --> 10:26.000
Oh, wow.

10:26.000 --> 10:29.000
Just in my toolbar.

10:29.000 --> 10:31.000
Okay, so you have a few more than I do.

10:31.000 --> 10:43.000
It's a markdown link generator, LastPass, the template extension, which is just a remarkable piece of engineering because you can make your own extensions out of it.

10:43.000 --> 10:53.000
And it's how I can copy entire sections of an article and then it will go get the URL and the title of the document and then I can just paste that whole thing.

10:53.000 --> 10:54.000
That is nice.

10:54.000 --> 10:57.000
It's a really nice extension and there's a good community around it.

10:57.000 --> 10:59.000
The other one I have is Imgur Reupload.

10:59.000 --> 11:01.000
This is one I use to share like an image with the team a lot.

11:01.000 --> 11:04.000
I'll capture something and I'll use this just to repost on Imgur.

11:04.000 --> 11:09.000
So you capture this and then it just gives you a little selection window and then just repost it up on Imgur.

11:09.000 --> 11:11.000
That's the URL in your clipboard.

11:11.000 --> 11:16.000
Right, skip all the part where you like take a screenshot and save it and then open an Imgur tab and then upload it.

11:16.000 --> 11:17.000
Right.

11:17.000 --> 11:21.000
I now have switched to using a pinboard extension.

11:21.000 --> 11:29.000
I used to use a JavaScript bookmark or whatever you call them, but now ad blockers and Chrome's built-in protection, they block all that.

11:29.000 --> 11:31.000
So I have an extension for that.

11:31.000 --> 11:36.000
I have the Reddit Enhancement Suite because I use Reddit enough to just make it a little bit better.

11:36.000 --> 11:39.000
I'm also using uBlock Origin because...

11:39.000 --> 11:41.000
I don't think you need to justify that one.

11:41.000 --> 11:42.000
It makes it more readable, right?

11:42.000 --> 11:43.000
Yeah.

11:43.000 --> 11:48.000
And then a tool that we use internally, Digo, D-I-I-G-O, which is a highlighting tool.

11:48.000 --> 11:56.000
And then I have WebCache Viewer Clear so I can either clear my web cache or I can view the web cache version of a document.

11:56.000 --> 12:00.000
Then I have some buttons to subscribe in Feedly.

12:00.000 --> 12:11.000
I have an Evernote extension, Dark Reader, and some YouTube plugins as well as Seven Geese, which is our OKR software, and Grammarly.

12:11.000 --> 12:12.000
Nice.

12:12.000 --> 12:13.000
Okay.

12:13.000 --> 12:14.000
Well, that's fairly reasonable.

12:14.000 --> 12:20.000
And a lot of those, right, there's a couple ones that are like open source and have communities.

12:20.000 --> 12:24.000
There's several probably that are proprietary or at least supported by a company.

12:24.000 --> 12:25.000
And you know how bad I hate Grammarly.

12:25.000 --> 12:26.000
You know that.

12:26.000 --> 12:27.000
Yes, I do.

12:27.000 --> 12:28.000
I need a band.

12:28.000 --> 12:29.000
Yeah.

12:29.000 --> 12:32.000
So I kind of I am an edge case.

12:32.000 --> 12:33.000
I'm gathering from this article.

12:33.000 --> 12:34.000
I think you are.

12:34.000 --> 12:36.000
I probably have like six or so on that order.

12:36.000 --> 12:37.000
Yeah.

12:37.000 --> 12:39.000
And when you do you sync them?

12:39.000 --> 12:40.000
Do you sync them to a Google account?

12:40.000 --> 12:44.000
So when you open up like or Firefox accounts, when you open up your browser, they resync?

12:44.000 --> 12:45.000
Yes.

12:45.000 --> 12:46.000
Okay.

12:46.000 --> 12:47.000
That's what I used to do.

12:47.000 --> 12:48.000
Good and bad, actually.

12:48.000 --> 12:49.000
It is good and bad.

12:49.000 --> 12:56.000
So the article goes on to say further 19,379 extensions, which is just over 10 percent,

12:56.000 --> 13:04.000
of literally zero installs and further 25,000 extensions, 13 percent have just one user.

13:04.000 --> 13:09.000
And the scan found that there are very few Chrome extensions that really have managed

13:09.000 --> 13:12.000
to establish any really large dedicated user base at all.

13:12.000 --> 13:17.000
And according to extension monitor, around 87 percent of all extensions have fewer than

13:17.000 --> 13:19.000
a thousand installs.

13:19.000 --> 13:24.000
Now, you contrast to the other story that says the browser manufacturers aren't properly

13:24.000 --> 13:25.000
supporting them.

13:25.000 --> 13:27.000
Why would they?

13:27.000 --> 13:30.000
There doesn't seem to be user demand, unfortunately.

13:30.000 --> 13:32.000
Well, it is a kind of a funny thing, right?

13:32.000 --> 13:35.000
Because most of the people that use browsers aren't super into technology.

13:35.000 --> 13:37.000
A browser is like a key component of a computer.

13:37.000 --> 13:40.000
So you do not need to be an expert or even interested in doing anything but going to

13:40.000 --> 13:42.000
Facebook to use a browser, right?

13:42.000 --> 13:44.000
So you may not know extensions are a thing.

13:44.000 --> 13:49.000
And I think perhaps rightfully so in the push to security, extensions have been downplayed

13:49.000 --> 13:50.000
a lot, right?

13:50.000 --> 13:54.000
I mean, unless you already know they exist, maybe they get suggested to you, maybe.

13:54.000 --> 13:56.000
Yeah, I think you just nailed it in two different ways there.

13:56.000 --> 13:59.000
So the number one thing that you said is the user base.

13:59.000 --> 14:03.000
There's so many users that the power users that would be using extensions would be a

14:03.000 --> 14:07.000
minority because they're just a small fraction.

14:07.000 --> 14:09.000
And then to your other point, you're right.

14:09.000 --> 14:11.000
They have been sort of reduced in functionality.

14:11.000 --> 14:16.000
They're not quite as powerful as extensions were in the first iteration of browser extensions.

14:16.000 --> 14:19.000
They don't fundamentally change the game necessarily.

14:19.000 --> 14:23.000
And a lot of these are really more about tying into web services.

14:23.000 --> 14:30.000
When I like LastPass, Grammarly, Deego, Evernote, these are really about tying into web services

14:30.000 --> 14:32.000
more than anything else, Imgur.

14:32.000 --> 14:33.000
Yeah, right.

14:33.000 --> 14:36.000
So unless you're already running a web service then and then that falls into the category

14:36.000 --> 14:37.000
that we already talked about.

14:37.000 --> 14:41.000
And if I wasn't a user of any one of these individual services, I wouldn't bother with

14:41.000 --> 14:42.000
this extension.

14:42.000 --> 14:45.000
So again, I'm going to be a minority slice of the overall browser market.

14:45.000 --> 14:46.000
Right.

14:46.000 --> 14:49.000
Because it's not really a generic browser functionality versus your, you know, your

14:49.000 --> 14:51.000
templates tool, for instance, which is right.

14:51.000 --> 14:54.000
That's just kind of extending and making your browser more useful.

14:54.000 --> 14:57.000
And you can also see where the incentive is for the browser manufacturers.

14:57.000 --> 15:02.000
It makes sense to incentivize your LastPasses and your Evernotes and your Grammarly's to

15:02.000 --> 15:04.000
create browser extensions.

15:04.000 --> 15:10.000
But, you know, Joe Adblock creator who gets a thousand users just not worth Google's time.

15:10.000 --> 15:12.000
From the developer perspective, too.

15:12.000 --> 15:16.000
I mean, it just seems like I might write an extension if one doesn't exist and I just

15:16.000 --> 15:20.000
like really need it, need to do this functionality and I can, you know, slam together some JavaScript

15:20.000 --> 15:21.000
or something.

15:21.000 --> 15:25.000
But I don't think you would do it, you know, when extensions kind of were first coming

15:25.000 --> 15:26.000
onto the scene.

15:26.000 --> 15:29.000
I'm thinking like early Firefox, you know, as they're getting developed.

15:29.000 --> 15:30.000
They were exciting.

15:30.000 --> 15:32.000
But now we live like in an open source world.

15:32.000 --> 15:33.000
They're old news.

15:33.000 --> 15:34.000
Yeah, they're old news, right?

15:34.000 --> 15:35.000
I mean, no one thinks about it.

15:35.000 --> 15:39.000
You're familiar with like popular open source projects, but you don't get the same kind

15:39.000 --> 15:40.000
of control, right?

15:40.000 --> 15:43.000
You're forever dodging around and playing ball with whatever the browsers want to do.

15:43.000 --> 15:46.000
And you're always going to be sort of, you know, second name.

15:46.000 --> 15:49.000
You're like, sure, you make this cool project that you spend a lot of time on, but it's

15:49.000 --> 15:52.000
just an extension that maybe works in one browser.

15:52.000 --> 15:55.000
I guess it's in a way the market works these things out.

15:55.000 --> 15:56.000
I think so.

15:56.000 --> 15:59.000
But you have people on either ends that are, some people are suffering and some people

15:59.000 --> 16:00.000
are prospering.

16:00.000 --> 16:05.000
And it's interesting to see both percolate in one week in the different links that we

16:05.000 --> 16:06.000
collect.

16:06.000 --> 16:09.000
And it does seem, yeah, it's like it makes sense it's not working.

16:09.000 --> 16:11.000
If people want it to work, then there are probably things we could do.

16:11.000 --> 16:14.000
And it doesn't seem like there are people that care that much.

16:14.000 --> 16:20.000
You also found a link in here about a medium post that was, I think the title was all of

16:20.000 --> 16:23.000
the best engineering advice that I stole from non-technical people.

16:23.000 --> 16:29.000
And it reminded me about one of my favorite bosses back in the day when I worked in IT.

16:29.000 --> 16:33.000
She was not necessarily inherently technical.

16:33.000 --> 16:35.000
She joined the company.

16:35.000 --> 16:36.000
It was a cooking company.

16:36.000 --> 16:40.000
They made food and well, they're out of business.

16:40.000 --> 16:45.000
So the company was called Dream Dinners and the idea was you'd go on their website.

16:45.000 --> 16:48.000
This was when web applications were very new.

16:48.000 --> 16:50.000
You'd go on their website and they'd have a monthly menu.

16:50.000 --> 16:52.000
You'd put together an order.

16:52.000 --> 16:54.000
You submit it to the system, you pay for it.

16:54.000 --> 16:58.000
And then you'd go to one of their franchise locations and actually assemble them.

16:58.000 --> 16:59.000
Whoa.

16:59.000 --> 17:02.000
And then you put it in a bag and take it home and you got like the month's dinners.

17:02.000 --> 17:04.000
The downside was you had to go do the work.

17:04.000 --> 17:07.000
They later started doing the work for you trying to be competitive.

17:07.000 --> 17:12.000
But the other side was like you just spent two hours and you had a month's worth of food.

17:12.000 --> 17:13.000
All the ingredients were there for you, right?

17:13.000 --> 17:14.000
You kind of just put them together.

17:14.000 --> 17:17.000
You added your own garlic if you liked – there was no limit.

17:17.000 --> 17:21.000
So if you wanted four scoops of garlic, you could make an extra garlic.

17:21.000 --> 17:23.000
Or if you don't like garlic, you leave it all out.

17:23.000 --> 17:25.000
So that was the benefit.

17:25.000 --> 17:31.000
And you could be kind of menu selective and get something that was sort of tailored to your needs.

17:31.000 --> 17:35.000
I'll tell you the one time that we really found it very useful because I got an employee discount

17:35.000 --> 17:39.000
was right after Angela gave birth to our first son.

17:39.000 --> 17:42.000
And it was like we just wanted to not have to worry about food for a month.

17:42.000 --> 17:47.000
And we just stacked – before the due date, we just stacked the freezer full of dinners.

17:47.000 --> 17:48.000
That's great.

17:48.000 --> 17:52.000
And so there was a pretty significant technology backend that I was responsible for

17:52.000 --> 17:55.000
that made it all possible because the franchise was doing well for a while.

17:55.000 --> 17:57.000
That's a different story.

17:57.000 --> 18:01.000
Anyways, one of the things is the gal that ended up being the IT director

18:01.000 --> 18:04.000
started more in the food side of the operation.

18:04.000 --> 18:05.000
Oh, yeah, sure.

18:05.000 --> 18:08.000
But she was a very clever, intelligent individual.

18:08.000 --> 18:11.000
And she worked her way up into the IT position because she was always –

18:11.000 --> 18:14.000
Elaine was the one that everybody went to to go fix their computers.

18:14.000 --> 18:15.000
That person?

18:15.000 --> 18:16.000
Yep, they're competent.

18:16.000 --> 18:17.000
They figured it out.

18:17.000 --> 18:20.000
And as that position evolved and as that company grew over time,

18:20.000 --> 18:25.000
she retained the IT management position and got a team under her.

18:25.000 --> 18:29.000
And as the server side grew out, I became the Linux server admin.

18:29.000 --> 18:37.000
And she was probably one of the best bosses I've ever had.

18:37.000 --> 18:39.000
She had a really good sense.

18:39.000 --> 18:43.000
She had a good intuition of knowing when to trust what the team was saying

18:43.000 --> 18:48.000
and when to ask further questions and derive – she just listened.

18:48.000 --> 18:52.000
She listened and was able to derive what our intention was

18:52.000 --> 18:57.000
and ask some details, get the right things kind of out of us.

18:57.000 --> 19:02.000
And it was a really good combination while it lasted.

19:02.000 --> 19:03.000
It didn't last forever.

19:03.000 --> 19:04.000
Again, that's another story.

19:04.000 --> 19:05.000
So this article you linked,

19:05.000 --> 19:09.000
all of the best engineering advice I stole from non-technical people.

19:09.000 --> 19:16.000
Number one, people like us make our money in the seams of things.

19:16.000 --> 19:20.000
And the whole thing goes on about how they brainstorm,

19:20.000 --> 19:24.000
how they do their work, and it reminded me a lot about listening,

19:24.000 --> 19:27.000
asking the right questions.

19:27.000 --> 19:29.000
Even if you're not a technical person,

19:29.000 --> 19:33.000
you can actually still be a really solid contributor in that environment.

19:33.000 --> 19:38.000
And I mean, there's so many things of business and just life are like process.

19:38.000 --> 19:40.000
And everyone has to do those things.

19:40.000 --> 19:42.000
Building a house or building a server.

19:42.000 --> 19:43.000
Yeah.

19:43.000 --> 19:45.000
And there are some people I think that are receptive or intuitive

19:45.000 --> 19:48.000
or open to learning, accepting when they don't know things,

19:48.000 --> 19:50.000
and listening like you say.

19:50.000 --> 19:52.000
And that means you can thrive in those environments

19:52.000 --> 19:54.000
and you can figure out who to trust and who the experts are

19:54.000 --> 19:56.000
and know who to listen to.

19:56.000 --> 19:59.000
You can perhaps effectively, you know, bridge information.

19:59.000 --> 20:00.000
Right.

20:00.000 --> 20:01.000
Yeah.

20:01.000 --> 20:03.000
Yeah, you get a sense of who is authoritative on what topics

20:03.000 --> 20:06.000
and a sense of their track record over time.

20:06.000 --> 20:10.000
I think something that we get kind of wrong in our industry,

20:10.000 --> 20:16.000
in our community is, oh, you weren't around in the days of small hard drives?

20:16.000 --> 20:20.000
You know, I used to only have 640 kilobytes of RAM,

20:20.000 --> 20:23.000
my onboard storage was only 2 megabytes.

20:23.000 --> 20:24.000
Yikes.

20:24.000 --> 20:28.000
And we get kind of caught up in, you didn't earn your way.

20:28.000 --> 20:30.000
How dare you come in here with your cloud?

20:30.000 --> 20:32.000
Right, right.

20:32.000 --> 20:36.000
We've suffered and somehow that means we require that from everyone else.

20:36.000 --> 20:37.000
Huh.

20:37.000 --> 20:40.000
That is what it is, isn't it?

20:40.000 --> 20:42.000
I mean, it happens all over the place, right?

20:42.000 --> 20:43.000
That's horrible.

20:43.000 --> 20:46.000
And there is a certain aspect of like you do need to put in your time

20:46.000 --> 20:48.000
to learn things and get experience.

20:48.000 --> 20:52.000
Wisdom or whatever that just take time to get.

20:52.000 --> 20:56.000
But at the same time, people, you know, there are different paths all the time.

20:56.000 --> 20:58.000
And I don't know about you, but I frequently am impressed.

20:58.000 --> 21:02.000
I mean, I'm thinking specifically in like software,

21:02.000 --> 21:04.000
but really in other fields too.

21:04.000 --> 21:06.000
Sometimes the people who are the best at it, you know,

21:06.000 --> 21:09.000
didn't have the traditional path, they didn't get the right degree or whatever,

21:09.000 --> 21:11.000
you know, but they've migrated later into the field

21:11.000 --> 21:15.000
and could be some of the best, most interesting perspective people.

21:15.000 --> 21:17.000
Does that still work now?

21:17.000 --> 21:19.000
That's one of the things I've been wondering.

21:19.000 --> 21:21.000
Like if I was to hit the reset button,

21:21.000 --> 21:25.000
would I have to go through a certain educational route to even make a break now?

21:25.000 --> 21:28.000
Because I just went right from high school into work.

21:28.000 --> 21:34.000
And then I did college sort of as part of additional training that work paid for.

21:34.000 --> 21:35.000
That's nice.

21:35.000 --> 21:37.000
It was like, you know, not something I didn't go high.

21:37.000 --> 21:39.000
I didn't go middle school, high school, college.

21:39.000 --> 21:41.000
I went middle school, high school work.

21:41.000 --> 21:47.000
And then over a period of six, seven, eight years attended different college courses.

21:47.000 --> 21:51.000
And that was the trajectory that worked perfectly for me.

21:51.000 --> 21:55.000
But I don't know if starting today, if you could even pull that off.

21:55.000 --> 21:57.000
You know, I think that's definitely been true.

21:57.000 --> 22:01.000
And like a bachelor's degree does sort of feel like a little stamp you have to get

22:01.000 --> 22:03.000
just to get your resume looked at sometimes.

22:03.000 --> 22:06.000
I think that has changed for the better somewhat.

22:06.000 --> 22:09.000
And audience, if you agree, disagree, let us know.

22:09.000 --> 22:12.000
Coder.show.com.

22:12.000 --> 22:16.000
I think the tech industry in particular, at least in some of the larger companies

22:16.000 --> 22:19.000
even has more of a, you know, a reflection of that.

22:19.000 --> 22:23.000
And if you can get away maybe from the more traditional companies

22:23.000 --> 22:27.000
and get to a more modern tech company, I think there's a more fresh perspective

22:27.000 --> 22:30.000
because it's almost like you can code or you can't, right?

22:30.000 --> 22:34.000
So especially with this culture of, you know, like intense interviews that do maybe

22:34.000 --> 22:36.000
not the right relevant challenge.

22:36.000 --> 22:38.000
And that's another topic for another show.

22:38.000 --> 22:39.000
Of course.

22:39.000 --> 22:41.000
But you can just prove yourself.

22:41.000 --> 22:43.000
Or in the world of open source too, right?

22:43.000 --> 22:46.000
You can be like, well, look, yeah, I don't have a CS degree.

22:46.000 --> 22:49.000
I maybe don't have a degree at all, but I've contributed to these six projects

22:49.000 --> 22:51.000
and everyone likes me and here's my PRs.

22:51.000 --> 22:52.000
So this is where I was going.

22:52.000 --> 22:54.000
Or is that the other route?

22:54.000 --> 22:58.000
Because I look at some of the things that are really making money

22:58.000 --> 23:00.000
at the infrastructure level.

23:00.000 --> 23:02.000
Disclaimer.

23:02.000 --> 23:04.000
And there is no five years.

23:04.000 --> 23:07.000
There is no five years to be had in some of these technologies.

23:07.000 --> 23:12.000
There is no like long experience because they're so new.

23:12.000 --> 23:18.000
And I hate to say this as somebody who's been doing this for a long time,

23:18.000 --> 23:26.000
but like in some ways too much experience is almost a deficit.

23:26.000 --> 23:28.000
You have to be willing to throw out, right?

23:28.000 --> 23:31.000
Like you can't stick to things the way you do in other fields.

23:31.000 --> 23:35.000
Because if somebody like a company were to hire me right now to like move

23:35.000 --> 23:39.000
their IT infrastructure to the cloud, I would just essentially recreate

23:39.000 --> 23:42.000
their on-premises setup in the cloud.

23:42.000 --> 23:46.000
Like I do some virtual machines and yeah, and that would be my approach.

23:46.000 --> 23:48.000
Okay, everything's in the cloud now.

23:48.000 --> 23:50.000
It's like I'm almost –

23:50.000 --> 23:52.000
You almost need somebody who doesn't have too much experience.

23:52.000 --> 23:53.000
Does that make sense?

23:53.000 --> 23:54.000
Right.

23:54.000 --> 23:55.000
Well, because they would be open.

23:55.000 --> 23:57.000
They would be like, well, what does the cloud say?

23:57.000 --> 24:00.000
I'll go look at the documentation for whatever provider and they're probably

24:00.000 --> 24:03.000
going to point to like, yeah, you could bring your database over

24:03.000 --> 24:05.000
or well, we'll sell you a database.

24:05.000 --> 24:06.000
No problem.

24:06.000 --> 24:07.000
We have it managed.

24:07.000 --> 24:08.000
It has backups.

24:08.000 --> 24:09.000
Here's how it works.

24:09.000 --> 24:10.000
Here's the availability of it.

24:10.000 --> 24:12.000
I don't think it's impossible for the old dog to learn new tricks.

24:12.000 --> 24:17.000
It's just a matter of time and energy that you have to spend on trying

24:17.000 --> 24:21.000
out new things when what you've been doing for so long works.

24:21.000 --> 24:27.000
So for an example, this is just a small one, but we had a system here

24:27.000 --> 24:30.000
that was a very traditional storage approach to –

24:30.000 --> 24:33.000
it's a box that runs free NAS.

24:33.000 --> 24:34.000
It's an appliance.

24:34.000 --> 24:36.000
We put storage on it and we don't touch it.

24:36.000 --> 24:39.000
And it was sort of an old school way of thinking that we had another box

24:39.000 --> 24:43.000
that connected to that over network storage that ran the virtualization.

24:43.000 --> 24:49.000
And it was two really loud hot boxes running here in the studio

24:49.000 --> 24:50.000
that we just didn't need.

24:50.000 --> 24:54.000
And then we decided, well, let's revamp this approach and let's take a look

24:54.000 --> 24:57.000
at how we can do all of this on one machine and utilize containers

24:57.000 --> 25:02.000
for the applications, which if we're not using VMs means we could stack

25:02.000 --> 25:05.000
all of this on one machine.

25:05.000 --> 25:08.000
And it sort of shifted the way I look at building out infrastructure

25:08.000 --> 25:12.000
and the way I look at application portability.

25:12.000 --> 25:15.000
And it wasn't so much that I wasn't willing to try it.

25:15.000 --> 25:19.000
It was more that I hadn't really had an opportunity to try something

25:19.000 --> 25:21.000
different from what had been working for so long.

25:21.000 --> 25:22.000
Right.

25:22.000 --> 25:27.000
And there is still some wisdom to the don't fix it if it isn't broken.

25:27.000 --> 25:28.000
But that only depends, right?

25:28.000 --> 25:30.000
Everything's a trade-off, a cost-benefit.

25:30.000 --> 25:31.000
So there is a cost, right?

25:31.000 --> 25:32.000
Like we had to redo a bunch of things.

25:32.000 --> 25:36.000
But the benefit has definitely outweighed it, I think.

25:36.000 --> 25:40.000
I mean, I don't think it's an exaggeration to say it's like we're getting

25:40.000 --> 25:42.000
10x the use out of the machine now.

25:42.000 --> 25:47.000
So if we're going to run that, so we've consolidated down to one machine,

25:47.000 --> 25:51.000
so we're using less power and we're getting 10 times the use.

25:51.000 --> 25:53.000
I also just feel better about it too.

25:53.000 --> 25:56.000
Like if we needed to go rebuild it again, it wouldn't be a big deal.

25:56.000 --> 25:58.000
I mean, we'd have to replace the hardware or whatever,

25:58.000 --> 26:00.000
but the software part would be easy.

26:00.000 --> 26:04.000
I think the part for me was I had like a, oh, I get it moment.

26:04.000 --> 26:09.000
And I think that might be what's important about taking somebody who's used

26:09.000 --> 26:13.000
to doing it one way, like you and I, we both know an individual who he'll

26:13.000 --> 26:17.000
only do something one way for the rest of his life until like some really

26:17.000 --> 26:19.000
earth-shattering reason came up.

26:19.000 --> 26:24.000
And if it's personal life stuff, if it's IT stuff, and that's not an

26:24.000 --> 26:27.000
uncommon way of looking at things.

26:27.000 --> 26:31.000
And for me, I just didn't quite see the utility.

26:31.000 --> 26:33.000
It wasn't like I wasn't going to do it.

26:33.000 --> 26:36.000
I just didn't quite see the utility until I had like the, oh, I get it moment.

26:36.000 --> 26:39.000
And for me, that was working with Docker Compose.

26:39.000 --> 26:46.000
And having that experience of ripping down a dozen applications running

26:46.000 --> 26:50.000
on a server that were in the middle of doing something even in one case.

26:50.000 --> 26:53.000
One time we did it, they were in the middle of processing something.

26:53.000 --> 26:57.000
We ripped them all down and then used Docker Compose to just pull down

26:57.000 --> 27:01.000
the latest versions of those images and stand everything back up again.

27:01.000 --> 27:03.000
And everything just picked right back up.

27:03.000 --> 27:08.000
Like in three minutes, we had new versions of all of the software.

27:08.000 --> 27:10.000
We had the latest versions of all of the software.

27:10.000 --> 27:15.000
We had proven to me that the data and the config were both separate

27:15.000 --> 27:19.000
and safe and that the application was ephemeral.

27:19.000 --> 27:24.000
And it was one line on the command line because everything's in this

27:24.000 --> 27:28.000
super easy to read YAML file that I literally can just…

27:28.000 --> 27:29.000
It's clear, right?

27:29.000 --> 27:31.000
It just kind of tells you if you know anything about Docker at all,

27:31.000 --> 27:32.000
it's all laid out.

27:32.000 --> 27:33.000
It's all there.

27:33.000 --> 27:35.000
You don't even need to know anything about Docker.

27:35.000 --> 27:37.000
You just need to know things about the fundamentals,

27:37.000 --> 27:39.000
like the basic fundamentals.

27:39.000 --> 27:40.000
And it's all clear to you.

27:40.000 --> 27:42.000
It's like, oh, this is how it works.

27:42.000 --> 27:44.000
Oh, God, that's so simple.

27:44.000 --> 27:48.000
And so when I was able to tear it all down, update it, and stand it all up

27:48.000 --> 27:51.000
and have it just pick right back up in the processing,

27:51.000 --> 27:56.000
it resumed – this particular job was resumable.

27:56.000 --> 27:57.000
It changed everything.

27:57.000 --> 28:01.000
It kind of makes me think too of like a little bit of like when I first

28:01.000 --> 28:05.000
discovered like the Unix command line and I had all these different tools

28:05.000 --> 28:08.000
and I could put them together.

28:08.000 --> 28:09.000
They would work together.

28:09.000 --> 28:12.000
And that's true with Docker too, but Docker Compose just takes it

28:12.000 --> 28:13.000
to the next level.

28:13.000 --> 28:15.000
I mean, it's right there in the name, of course.

28:15.000 --> 28:17.000
It lets you compose them together and you can feel like, oh, yeah,

28:17.000 --> 28:20.000
here's all my little pieces that I need for my distributed system,

28:20.000 --> 28:22.000
which is what we are all building these days,

28:22.000 --> 28:25.000
and then it helps you cleanly latch them together.

28:25.000 --> 28:29.000
My bad, really, for not coming up with a reason to try it sooner

28:29.000 --> 28:35.000
because I thought I had done a good enough job reading and conversing

28:35.000 --> 28:37.000
about it that I understood it.

28:37.000 --> 28:39.000
Yeah, I mean, you only have a few related shows.

28:39.000 --> 28:41.000
Yeah, and I got the concepts.

28:41.000 --> 28:43.000
Oh, you know, you tear down the software, stand it back up.

28:43.000 --> 28:44.000
Okay, I get it.

28:44.000 --> 28:46.000
I get it.

28:46.000 --> 28:51.000
But when it was software that in the past I would spend a week configuring,

28:51.000 --> 28:53.000
I would spend like five days in the evening.

28:53.000 --> 28:56.000
Tweaking, tuning, getting it just right.

28:56.000 --> 29:01.000
That I had personally spent my time over the years managing, right?

29:01.000 --> 29:04.000
And then to see this difference where it's like 30 seconds

29:04.000 --> 29:07.000
and everything was right back up and running,

29:07.000 --> 29:10.000
that's when it really became practical to me.

29:10.000 --> 29:11.000
That's when it shifted.

29:11.000 --> 29:15.000
I'm like, okay, so I'm never doing it the old way ever again.

29:15.000 --> 29:16.000
Never going back.

29:16.000 --> 29:19.000
And there's just, you know, we were talking about this on Linux Unplugged,

29:19.000 --> 29:22.000
but I think it took time for these things to work

29:22.000 --> 29:24.000
for the kind of tasks you're doing

29:24.000 --> 29:27.000
because they're techniques born out of scale

29:27.000 --> 29:29.000
where if you do it the traditional way at some point,

29:29.000 --> 29:30.000
it's just not going to work.

29:30.000 --> 29:31.000
There's too many moving factors.

29:31.000 --> 29:35.000
There's too much moving state everywhere.

29:35.000 --> 29:38.000
And I think it just took some time for the tooling to get to a place

29:38.000 --> 29:41.000
where even if you're doing this all in one box

29:41.000 --> 29:44.000
and you just want to go real quick and you don't need to spend hours

29:44.000 --> 29:47.000
customizing every little thing, you don't have to.

29:47.000 --> 29:50.000
And it's not just for web applications.

29:50.000 --> 29:55.000
We're kind of thinking about using Docker for even some recording uses.

29:55.000 --> 29:57.000
I don't think we talked about this.

29:57.000 --> 29:58.000
No, that's true.

29:58.000 --> 30:02.000
We are creating for the purposes of recording, I should say.

30:02.000 --> 30:03.000
It's really for production purposes.

30:03.000 --> 30:05.000
It may be consumable by others,

30:05.000 --> 30:07.000
but it's really for our own production purposes.

30:07.000 --> 30:10.000
And we're going to nickname it the Jack in the Box

30:10.000 --> 30:13.000
because it's a jack audio system,

30:13.000 --> 30:16.000
a rather sophisticated jack audio system,

30:16.000 --> 30:17.000
but not too sophisticated.

30:17.000 --> 30:22.000
It is in a Docker layer that our hosts can install on their system,

30:22.000 --> 30:24.000
connect their in and outs to,

30:24.000 --> 30:27.000
and essentially have a Jupyter broadcasting

30:27.000 --> 30:30.000
contained recording environment.

30:30.000 --> 30:33.000
I mean, really, it's kind of living up in the name of Docker, right?

30:33.000 --> 30:34.000
And that's the whole thing.

30:34.000 --> 30:36.000
It's like you just, all right, we have some hardware.

30:36.000 --> 30:37.000
We need that.

30:37.000 --> 30:38.000
You take the container.

30:38.000 --> 30:40.000
You've got to set up the right sort of actual docking interfaces, right?

30:40.000 --> 30:42.000
Get all the right supply lines,

30:42.000 --> 30:45.000
access to the sound devices in this case, for instance,

30:45.000 --> 30:47.000
but then the software part is unchanged.

30:47.000 --> 30:48.000
It's the same.

30:48.000 --> 30:52.000
Now, it probably won't be so easy because Linux audio never is,

30:52.000 --> 30:55.000
but it's super useful that we could just do that

30:55.000 --> 30:57.000
and have it reliable and not have to do,

30:57.000 --> 30:59.000
especially when you might be running some software that, you know,

30:59.000 --> 31:02.000
either it's proprietary or you have to custom compile it

31:02.000 --> 31:05.000
or you need a lot of install dependencies that may or may vary,

31:05.000 --> 31:08.000
you know, may or may not vary between distributions.

31:08.000 --> 31:10.000
It gives us a few tools, though.

31:10.000 --> 31:13.000
The first, using Jack, which is an audio subsystem for Linux,

31:13.000 --> 31:18.000
it allows us to do equalizing and compression.

31:18.000 --> 31:20.000
It allows us to sort of guarantee a certain sound

31:20.000 --> 31:22.000
that gets sent out to the live stream

31:22.000 --> 31:26.000
while also recording a certain dry audio for post-processing.

31:26.000 --> 31:27.000
So that's pretty fancy right there.

31:27.000 --> 31:29.000
There's certain things we can do with it down the road.

31:29.000 --> 31:34.000
But there's other things we can do that are kind of down the road

31:34.000 --> 31:37.000
that we're maybe going to use, maybe we never would.

31:37.000 --> 31:40.000
But if it's a Docker image that's actually up on the Docker Hub,

31:40.000 --> 31:45.000
in theory, West could tweak something,

31:45.000 --> 31:48.000
send it up, and then tell the host, okay, go update your Docker images.

31:48.000 --> 31:51.000
They go update their images, and now they've got the latest tweaks

31:51.000 --> 31:53.000
that West has applied to our recording layer

31:53.000 --> 31:55.000
that they can run on their OS.

31:55.000 --> 31:56.000
And that's pretty powerful, too,

31:56.000 --> 32:00.000
because it allows us to sort of neutralize the distribution

32:00.000 --> 32:02.000
because different hosts run different distributions.

32:02.000 --> 32:03.000
Yes, they do.

32:03.000 --> 32:04.000
Hey, Mr. Fedora.

32:04.000 --> 32:07.000
Hey.

32:07.000 --> 32:10.000
It lets us sort of normalize that out.

32:10.000 --> 32:14.000
And it's pretty far from any kind of normal use of Docker that I've seen.

32:14.000 --> 32:15.000
Oh, yeah.

32:15.000 --> 32:17.000
No, I mean, a lot of those mounts that I'm doing there,

32:17.000 --> 32:19.000
you wouldn't want to do that in production.

32:19.000 --> 32:20.000
Like I said, it's not a web application.

32:20.000 --> 32:22.000
It's not something you're going to host.

32:22.000 --> 32:26.000
But it's something that maybe you'd set up on a ThinkPad to do recording.

32:26.000 --> 32:28.000
Okay, so related.

32:28.000 --> 32:30.000
I've been playing a little bit with Podman,

32:30.000 --> 32:33.000
and I think technologies you should try that, you know,

32:33.000 --> 32:36.000
maybe are a little outside what you're comfortable with now.

32:36.000 --> 32:38.000
You should check out the Red Hat container stack.

32:38.000 --> 32:39.000
Really?

32:39.000 --> 32:40.000
I think you might like it.

32:40.000 --> 32:42.000
Okay.

32:42.000 --> 32:44.000
We should probably explain what Podman is

32:44.000 --> 32:46.000
for people that aren't familiar with it

32:46.000 --> 32:50.000
because it's not that different.

32:50.000 --> 32:51.000
It's still container-based.

32:51.000 --> 32:53.000
It's still the standard containers as you know it,

32:53.000 --> 32:57.000
but it sort of replaces the Docker compose tools in that layer, right?

32:57.000 --> 32:59.000
We can get to the compose part.

32:59.000 --> 33:01.000
But really it replaces Docker.

33:01.000 --> 33:02.000
So no Docker daemon?

33:02.000 --> 33:03.000
No.

33:03.000 --> 33:04.000
So that's one of the big things.

33:04.000 --> 33:08.000
Podman is a daemonless container engine

33:08.000 --> 33:11.000
for developing, managing, and running OCI containers.

33:11.000 --> 33:12.000
Don't say Docker containers.

33:12.000 --> 33:15.000
They're OCI containers on your Linux system.

33:15.000 --> 33:16.000
There's a couple of really neat things.

33:16.000 --> 33:20.000
So first of all, the daemonless stuff.

33:20.000 --> 33:22.000
That's nice just from security, from many aspects.

33:22.000 --> 33:24.000
Podman has been designed, it's newer, right?

33:24.000 --> 33:25.000
So it's a little more modern.

33:25.000 --> 33:28.000
It takes really nice advantage of all the user namespaces,

33:28.000 --> 33:30.000
all that stuff right out of the box.

33:30.000 --> 33:32.000
And they've done some neat stuff

33:32.000 --> 33:36.000
where you can run Podman without being root.

33:36.000 --> 33:38.000
Now you can run it as root and it still supports

33:38.000 --> 33:40.000
all the nice sandboxing and user namespaces,

33:40.000 --> 33:42.000
but you can also run it not as root.

33:42.000 --> 33:44.000
Now you probably wouldn't necessarily want to do this

33:44.000 --> 33:46.000
in all production scenarios,

33:46.000 --> 33:48.000
but they've put in a bunch of work

33:48.000 --> 33:50.000
to make that work behind the scenes.

33:50.000 --> 33:52.000
So one example is like network namespaces

33:52.000 --> 33:54.000
are used all the time in containers, right?

33:54.000 --> 33:57.000
Now you can create one as an unprivileged user.

33:57.000 --> 34:00.000
But you can't make the virtual Ethernet pairs

34:00.000 --> 34:03.000
that actually are used to bridge the network namespaces

34:03.000 --> 34:04.000
unless you're root.

34:04.000 --> 34:07.000
So they have implemented basically a user space

34:07.000 --> 34:10.000
TCP IP stack to provide the same connection.

34:10.000 --> 34:11.000
And so there's a couple things like that.

34:11.000 --> 34:12.000
There's like a fuse file system

34:12.000 --> 34:14.000
that gets used for another feature.

34:14.000 --> 34:16.000
What runs that?

34:16.000 --> 34:19.000
What runs that user level application if there's no daemon?

34:19.000 --> 34:22.000
I don't know quite how the process hierarchy works out,

34:22.000 --> 34:25.000
but that's all it is because that's all containers are.

34:25.000 --> 34:27.000
They're processes in the right namespace

34:27.000 --> 34:29.000
and under the right cgroups.

34:29.000 --> 34:30.000
I should look more into that.

34:30.000 --> 34:31.000
Curious how that sounds.

34:31.000 --> 34:33.000
That does sound very appealing.

34:33.000 --> 34:36.000
Well, what's nice then too is like so you can just run it

34:36.000 --> 34:39.000
and then just install Podman.

34:39.000 --> 34:41.000
You can then start pulling down its supports

34:41.000 --> 34:43.000
depending on which distribution you installed.

34:43.000 --> 34:45.000
And you might have to go configure like the Docker registry,

34:45.000 --> 34:46.000
but it's one of the default ones.

34:46.000 --> 34:48.000
You basically just go tell it which registries

34:48.000 --> 34:49.000
you want to talk to,

34:49.000 --> 34:51.000
and then you can use it exactly like Docker.

34:51.000 --> 34:52.000
It has the same commands.

34:52.000 --> 34:56.000
Even some of their docs tell you to alias Podman for Docker

34:56.000 --> 34:58.000
so that you just use it all the same.

34:58.000 --> 35:03.000
So that was my question was like one of the things

35:03.000 --> 35:07.000
that makes Docker great is the command syntax is simple.

35:07.000 --> 35:09.000
And it's just because it's so popular,

35:09.000 --> 35:11.000
it's kind of become the de facto.

35:11.000 --> 35:13.000
So they're just like halfsies.

35:13.000 --> 35:14.000
Yep, that's ours now.

35:14.000 --> 35:15.000
Well, that's kind of nice.

35:15.000 --> 35:17.000
So yeah, you can just install it, start playing with it,

35:17.000 --> 35:20.000
run it, and it's nice.

35:20.000 --> 35:21.000
Were you doing this on Ubuntu?

35:21.000 --> 35:24.000
Yeah, they have a PPA you can install, no problem.

35:24.000 --> 35:27.000
I noticed I think it's on Fedora 30.

35:27.000 --> 35:29.000
I think it's already on Fedora 30

35:29.000 --> 35:31.000
because when we were messing around with our new setup.

35:31.000 --> 35:33.000
Oh yeah, it definitely is.

35:33.000 --> 35:35.000
And they've got some other tools there too.

35:35.000 --> 35:38.000
So there's a building tool that's specific.

35:38.000 --> 35:41.000
Podman can build too, but they have Builda.

35:41.000 --> 35:44.000
Now it supports building from Docker files, which is great.

35:44.000 --> 35:47.000
But they also have their own support

35:47.000 --> 35:49.000
so you can do really easy stuff like starting from scratch

35:49.000 --> 35:52.000
or super minimal images.

35:52.000 --> 35:53.000
And they're using that for integration.

35:53.000 --> 35:55.000
So there's Ansible container,

35:55.000 --> 35:58.000
which is a way to use Ansible to build containers.

35:58.000 --> 36:01.000
That was kind of hacky the way you had to do it through Docker.

36:01.000 --> 36:03.000
And this, it's basically just sort of commands.

36:03.000 --> 36:05.000
So you say builda, run this command in this container

36:05.000 --> 36:06.000
that we're working on right now,

36:06.000 --> 36:08.000
and then you can commit those changes back to it.

36:08.000 --> 36:10.000
So then you can use some sort of interactive script

36:10.000 --> 36:12.000
if you have some more dynamic scenario.

36:12.000 --> 36:14.000
Oh, that's really nice.

36:14.000 --> 36:15.000
Or if you have existing Docker files,

36:15.000 --> 36:17.000
you can just build them that way too.

36:17.000 --> 36:20.000
Okay, so it seems like super obvious if I'm using Ansible,

36:20.000 --> 36:23.000
this is a lot cleaner.

36:23.000 --> 36:25.000
I'm not still 100% clear.

36:25.000 --> 36:32.000
Like if I'm me throwing up some images on a Droplet

36:32.000 --> 36:34.000
or a Linode VPS,

36:34.000 --> 36:37.000
I'm still not super clear why I would use Podman over Docker,

36:37.000 --> 36:40.000
especially because the Docker Hub is reactive.

36:40.000 --> 36:43.000
Well, so you can still interrupt with Docker Hub, no problem.

36:43.000 --> 36:44.000
Oh, really?

36:43.000 --> 36:44.000
Oh, yeah, totally.

36:44.000 --> 36:45.000
It just natively supports that.

36:45.000 --> 36:49.000
It even also makes it easy if you already have images over.

36:49.000 --> 36:52.000
So you should first know too,

36:52.000 --> 36:55.000
because it's more OCI-inspired and compliant,

36:55.000 --> 36:57.000
the containers are under a different path.

36:57.000 --> 36:58.000
So when you first install Podman,

36:58.000 --> 37:00.000
you'll try to see if you have anything

37:00.000 --> 37:02.000
if you've been using Docker and you won't.

37:02.000 --> 37:04.000
But you can tell it to look at the Docker stuff,

37:04.000 --> 37:05.000
and it makes it easy to transfer.

37:05.000 --> 37:07.000
So you can pull from Docker Hub,

37:07.000 --> 37:09.000
you can pull from the Docker daemon on your local system

37:09.000 --> 37:10.000
and move images back and forth between them.

37:10.000 --> 37:11.000
Oh, really?

37:11.000 --> 37:12.000
So it's easy to move over?

37:12.000 --> 37:13.000
Oh, yeah.

37:12.000 --> 37:13.000
Oh, that's nice.

37:13.000 --> 37:14.000
Okay.

37:14.000 --> 37:19.000
I mean, so I think it's just kind of a cleaner design really.

37:19.000 --> 37:21.000
So it's a little bit more minimal.

37:21.000 --> 37:24.000
You don't have this root daemon running all the time.

37:24.000 --> 37:26.000
But for you, it's probably not.

37:26.000 --> 37:29.000
So I think it's still in the play with and evaluate.

37:29.000 --> 37:30.000
It does have some stuff.

37:30.000 --> 37:32.000
So it's got Pods, right?

37:32.000 --> 37:35.000
Pods is right in the name because Podman is built in,

37:35.000 --> 37:37.000
you know, it comes from Red Hat

37:37.000 --> 37:39.000
and Red Hat's Kubernetes player, right?

37:39.000 --> 37:41.000
I mean, OpenShift.

37:41.000 --> 37:44.000
So it's very much, you know, built in the Kubernetes era.

37:44.000 --> 37:46.000
So it also supports Pods,

37:46.000 --> 37:48.000
which are much like the analog in Kubernetes

37:48.000 --> 37:51.000
where you have these containers sort of joined together.

37:51.000 --> 37:54.000
So it can be used somewhat similar to Docker and Compose,

37:54.000 --> 37:57.000
but I don't think the level of tooling for that specific use case

37:57.000 --> 37:59.000
is quite as nice as Docker Compose.

37:59.000 --> 38:02.000
So maybe not quite there, but there's a lot of neat tech.

38:02.000 --> 38:06.000
And if you, you know, need to do something a little more complicated

38:06.000 --> 38:07.000
and you maybe need to customize,

38:07.000 --> 38:09.000
you really care about how your containers are running

38:09.000 --> 38:11.000
or you're concerned about security,

38:11.000 --> 38:13.000
these tools are pretty neat.

38:13.000 --> 38:16.000
Yeah, the security aspect of it is very appealing.

38:16.000 --> 38:18.000
Also, I tend to agree with your assessment

38:18.000 --> 38:21.000
that a lot of the tools that I see come out of Red Hat,

38:21.000 --> 38:23.000
I have two feelings about them.

38:23.000 --> 38:25.000
One, God, I wish we had that a year ago.

38:25.000 --> 38:29.000
And two, that's a really nice, tight, clean design.

38:29.000 --> 38:32.000
Like it's really clean, easy to understand, sensible.

38:32.000 --> 38:34.000
Not for everything,

38:34.000 --> 38:36.000
but for a lot of the tools on the command line,

38:36.000 --> 38:38.000
that has generally been my impression.

38:38.000 --> 38:44.000
So it seems like it is something that might be worth giving a little bit of a go.

38:44.000 --> 38:48.000
With my workflow of like having these compose files that I go to,

38:48.000 --> 38:51.000
that this is like, this is this stack of applications

38:51.000 --> 38:54.000
and I have another compose file for that's another stack of applications.

38:54.000 --> 38:56.000
That's the part I think that would be missing for you.

38:56.000 --> 39:00.000
You know, because Docker Compose adds its own layer of orchestrating.

39:00.000 --> 39:04.000
So if you were using Ansible or some other things, right,

39:04.000 --> 39:06.000
and it sort of takes it apart.

39:06.000 --> 39:09.000
So instead of like, oh, I want this container running all the time,

39:09.000 --> 39:12.000
you know, in order to check on fail or restart.

39:12.000 --> 39:14.000
In the Red Hat model, the Podman model, they're like,

39:14.000 --> 39:16.000
well, you already have systemd, right?

39:16.000 --> 39:18.000
Like, that's already a thing. Just do that.

39:18.000 --> 39:20.000
Systemd is great at it and it does that for your other services.

39:20.000 --> 39:22.000
And that's what I'd prefer.

39:22.000 --> 39:25.000
Yeah, right. So it plays really nicely maybe if you already are using systemd a bunch

39:25.000 --> 39:28.000
or other configuration management tooling.

39:28.000 --> 39:32.000
Or alternatively, if you want to run systemd inside a container,

39:32.000 --> 39:34.000
which can be a little bit difficult and hacky sometimes with Docker,

39:34.000 --> 39:36.000
Podman supports it right out of the gate.

39:36.000 --> 39:38.000
You know, it makes me really think that it's worth spending more time

39:38.000 --> 39:40.000
getting into Ansible too.

39:40.000 --> 39:42.000
Like, maybe it's worth even for our small infrastructure.

39:42.000 --> 39:45.000
Oh, yeah. No, I mean, I think it is.

39:45.000 --> 39:50.000
There is certainly overhead in learning new tools and, you know, having to apply them.

39:50.000 --> 39:53.000
And there is a certain, you know, you have to assess what can be tricky.

39:53.000 --> 39:56.000
And I think as Docker Compose is nice, it's working well for us.

39:56.000 --> 39:59.000
But if we do a little bit more than Ansible makes sense.

39:59.000 --> 40:00.000
Yeah.

40:00.000 --> 40:02.000
It's just that like, right, when you, if you don't need to customize,

40:02.000 --> 40:05.000
then you want a tool that kind of hides a lot of the stuff from you.

40:05.000 --> 40:08.000
But the second you have semi-complicated customization needs,

40:08.000 --> 40:11.000
you want a tool that's a little more flexible and ready to go.

40:11.000 --> 40:13.000
I mean, the most we have is weird mounts, right?

40:13.000 --> 40:14.000
Yeah, so far.

40:14.000 --> 40:16.000
Now, where Ansible then gets really nice is right now,

40:16.000 --> 40:21.000
we would reimagine machine and then install a few things,

40:21.000 --> 40:23.000
make a few manual tweaks maybe.

40:23.000 --> 40:25.000
And then from the point of starting our Docker Compose,

40:25.000 --> 40:28.000
that all would be totally the same.

40:28.000 --> 40:30.000
Ansible would just bridge that gap, right?

40:30.000 --> 40:33.000
So that we could have the whole system up and running.

40:33.000 --> 40:35.000
And you can see it's one of those things where it's like,

40:35.000 --> 40:38.000
if you're doing one system, it's still better, but it's less better.

40:38.000 --> 40:40.000
And if you're doing 10 systems, it really matters.

40:40.000 --> 40:43.000
And if you're doing 1,000 systems, then there's no other way to do it.

40:43.000 --> 40:46.000
So what about a scenario where I'm developing locally

40:46.000 --> 40:48.000
and then I want to deploy on a remote system?

40:48.000 --> 40:52.000
Is there a particular advantage to using Podman, do you think?

40:52.000 --> 40:56.000
You can, you know, you can have it just do less, I guess, right?

40:56.000 --> 40:57.000
Like you can just install it.

40:57.000 --> 40:58.000
You don't have this daemon running.

40:58.000 --> 41:01.000
And the rootless aspect would be nice.

41:01.000 --> 41:04.000
I assume it must be like you add your user to a group, then you can use it.

41:04.000 --> 41:05.000
You don't even have to do that.

41:05.000 --> 41:06.000
Oh.

41:06.000 --> 41:07.000
Yeah, that's what's nice, right?

41:07.000 --> 41:10.000
And so you don't have to worry that like you're having all these people

41:10.000 --> 41:13.000
that you've added to the Docker group are now, you know, $2.

41:13.000 --> 41:14.000
Yeah.

41:14.000 --> 41:18.000
And there's a good talk that Red Hat has out,

41:18.000 --> 41:20.000
and I'll try to find it and add a link to the show notes,

41:20.000 --> 41:22.000
kind of talking about some of these downfalls.

41:22.000 --> 41:26.000
The Docker socket is really just a security nightmare in so many things.

41:26.000 --> 41:29.000
Because Docker is so hooked into all these low-level kernel primitives.

41:29.000 --> 41:31.000
And it's going to be an ongoing soft spot too.

41:31.000 --> 41:34.000
Yeah, you can do stuff where you like change users or get, you know,

41:34.000 --> 41:38.000
new permissions that under normal circumstances get logged or audited

41:38.000 --> 41:39.000
or the kernel is aware of.

41:39.000 --> 41:42.000
But because you take a totally different route concocted by Docker,

41:42.000 --> 41:45.000
it's mostly invisible unless you're actively looking for it.

41:45.000 --> 41:51.000
Yeah, again, going back to my general totally outrageous assertment about

41:51.000 --> 41:54.000
Red Hat's tools is that is the great thing, is that they're going to be

41:54.000 --> 41:57.000
integrated with the logging, with the rest of the system.

41:57.000 --> 41:58.000
Cockpit rolls out.

41:58.000 --> 41:59.000
It's got support for it.

41:59.000 --> 42:00.000
You can see it in the logs.

42:00.000 --> 42:03.000
It is really nice from that standpoint.

42:03.000 --> 42:05.000
And it works with the wider tool set.

42:05.000 --> 42:07.000
I'm convinced, actually.

42:07.000 --> 42:09.000
I think I'm going to give it a go right here on the old laptop,

42:09.000 --> 42:11.000
because I've got a couple of ideas that I want to try.

42:11.000 --> 42:12.000
Yeah.

42:12.000 --> 42:14.000
And the nice part too is you can still play together too.

42:14.000 --> 42:18.000
So you can use Builder and Podman locally to build your images,

42:18.000 --> 42:20.000
to test them, to run them on your machine,

42:20.000 --> 42:23.000
and then just push the exact same image up to your server

42:23.000 --> 42:24.000
when you want to run it with Docker Compose.

42:24.000 --> 42:25.000
That's totally fine.

42:25.000 --> 42:26.000
Aww.

42:26.000 --> 42:28.000
Yeah, it's pretty nice.

42:28.000 --> 42:32.000
So how many containers have you seen running on a host?

42:32.000 --> 42:37.000
I saw this article about taking a system from 30 to 230 Docker containers.

42:37.000 --> 42:38.000
Oh, boy.

42:38.000 --> 42:39.000
What are they doing?

42:39.000 --> 42:40.000
I don't know.

42:40.000 --> 42:46.000
But I do kind of wonder, because I'm kind of new to this in actual production

42:46.000 --> 42:50.000
and not just screwing around, what our limit is.

42:50.000 --> 42:51.000
Like, I don't know.

42:51.000 --> 42:58.000
I have a better sense, because in the VM world, I carve out 4 gigabytes of RAM.

42:58.000 --> 43:01.000
I carve out 100 gigabytes of disk storage.

43:01.000 --> 43:04.000
I allocate this much to that system, and now it's gone.

43:04.000 --> 43:06.000
And that math is simple in a way.

43:06.000 --> 43:07.000
It is.

43:07.000 --> 43:09.000
And it's a cleaner separation of concerns, right?

43:09.000 --> 43:10.000
Because you're basically like, all right,

43:10.000 --> 43:12.000
well, here's this whole other operating system over here.

43:12.000 --> 43:14.000
I will deal with it by itself,

43:14.000 --> 43:16.000
and then only if I need to go back up to the hypervisor

43:16.000 --> 43:17.000
will I even think about that.

43:17.000 --> 43:24.000
And maybe the application in that VM consumes all of the resources in that VM, maybe.

43:24.000 --> 43:30.000
But right now, in our setup, an application is just another process on the box.

43:30.000 --> 43:32.000
And that, for me, is a weird mental shift,

43:32.000 --> 43:35.000
because I'm used to it being isolated off into its own machine.

43:35.000 --> 43:38.000
And to me, it seems like I know you can put constraints on it,

43:38.000 --> 43:42.000
but it seems possible that just one of those containers could go crazy.

43:42.000 --> 43:43.000
Oh, yeah, sure, right?

43:43.000 --> 43:47.000
It could fill up all of its volume space, it could eat a bunch of CPU.

43:47.000 --> 43:53.000
Yeah, that, to me, that's where I can't say, well, we'll put X amount of containers.

43:53.000 --> 43:57.000
Because I don't feel like I can predict like I could with a VM.

43:57.000 --> 44:03.000
Right, and I think that's maybe partly a result of the different philosophies behind this.

44:03.000 --> 44:08.000
Because I think if you were, you'd probably have already instrumented your system, right?

44:08.000 --> 44:09.000
You'd have a bunch of stuff.

44:09.000 --> 44:12.000
So you'd build a box, and then you would go test how many containers you want.

44:12.000 --> 44:16.000
And you'd probably then be able to run more containers than you could VMs.

44:16.000 --> 44:19.000
But you're right, you don't have the same sort of heuristics and understandings that you do.

44:19.000 --> 44:24.000
But I wouldn't be able to say, well, if I can run four VMs, I can run 10 containers.

44:24.000 --> 44:26.000
There's just not that math, you can't do that.

44:26.000 --> 44:29.000
Yeah, and as this article points out,

44:29.000 --> 44:33.000
because it's nice that you don't have multiple kernels in some senses.

44:33.000 --> 44:36.000
But it means that you might need to do more tuning,

44:36.000 --> 44:38.000
because you have a more deeply nested system,

44:38.000 --> 44:42.000
or the kernel is doing more nested things than in the VM model.

44:42.000 --> 44:45.000
So like they're running into stuff where, you know,

44:45.000 --> 44:50.000
the regular Docker networking setup involves a whole bunch of NAT.

44:50.000 --> 44:53.000
And then that's going to involve the contract table and IP table,

44:53.000 --> 44:55.000
so you can keep track of all the connections that are going, right,

44:55.000 --> 44:59.000
as you map onto the Docker subnet and all that.

44:59.000 --> 45:02.000
So at some point, that'll just start dropping packets if you have too many.

45:02.000 --> 45:03.000
And it's like, how do you know, right?

45:03.000 --> 45:05.000
I mean, there's tunables, you can go play with it.

45:05.000 --> 45:08.000
If you're already doing a lot of Linux kernel, you know, optimization,

45:08.000 --> 45:10.000
maybe you know, but probably you don't.

45:10.000 --> 45:12.000
Probably you just ran a bunch of containers that you have to go.

45:12.000 --> 45:14.000
You have to be instrumenting and monitoring your system

45:14.000 --> 45:16.000
if you're going to even see those problems.

45:16.000 --> 45:20.000
That's one of those, it's a combination of the driver, of the hardware,

45:20.000 --> 45:23.000
of your specific kernel version, of the software that's talking to the kernel.

45:23.000 --> 45:29.000
Like it's such a unique blend that the only way you'll get real data

45:29.000 --> 45:32.000
and any kind of predictability is to just do it in production.

45:32.000 --> 45:36.000
That to me seems crazy because what you're proposing is just throw it up there

45:36.000 --> 45:38.000
and see how it performs.

45:38.000 --> 45:42.000
And ideally, you over-provision so you know it's going to perform well

45:42.000 --> 45:46.000
and maybe you can add, but sometimes things don't go ideally.

45:46.000 --> 45:49.000
And all of a sudden, you've thrown a box up there that isn't fast enough.

45:49.000 --> 45:52.000
We've had something similar happen to us where we put it in production.

45:52.000 --> 45:54.000
It's like, that's not quite fast enough.

45:54.000 --> 45:57.000
We kind of expected it to be a little better, and now what do we do?

45:57.000 --> 46:01.000
And it's just like we don't really have like a super solid answer now.

46:01.000 --> 46:03.000
Yeah, that's true. That's true. We need more.

46:03.000 --> 46:05.000
I mean, somewhat we just need more resources.

46:05.000 --> 46:06.000
More hardware.

46:06.000 --> 46:07.000
Yeah.

46:07.000 --> 46:10.000
But because we kind of, I mean, I don't know.

46:10.000 --> 46:14.000
It seemed like on paper it was going to be plenty of horsepower.

46:14.000 --> 46:19.000
And then in actual production, and maybe the cloud provider

46:19.000 --> 46:22.000
isn't really giving us quite what the specs says they were.

46:22.000 --> 46:25.000
Because I feel like if we ran that same workload on physical hardware,

46:25.000 --> 46:26.000
it would be faster.

46:26.000 --> 46:27.000
It's a good question.

46:27.000 --> 46:28.000
The same specs, right?

46:28.000 --> 46:30.000
The same specs on physical hardware.

46:30.000 --> 46:34.000
So there's that variability too when you're on someone else's computers.

46:34.000 --> 46:35.000
Yeah.

46:35.000 --> 46:37.000
One other thing I thought was funny from this is

46:37.000 --> 46:41.000
they also started running into issues when they ran out of PIDs on the system.

46:41.000 --> 46:42.000
Sure.

46:42.000 --> 46:43.000
It's eventually going to happen.

46:43.000 --> 46:44.000
It's eventually going to happen, yeah.

46:44.000 --> 46:45.000
So it's another one.

46:45.000 --> 46:47.000
This is just a fun, good article to check out

46:47.000 --> 46:50.000
if you are going to run any large number of containers.

46:50.000 --> 46:52.000
And it points you to some nice little kernel values

46:52.000 --> 46:54.000
you can tweak and tune that you might need.

46:54.000 --> 46:56.000
Where do people find that, Wes?

46:56.000 --> 46:59.000
Where would I find links for this week's episode?

46:59.000 --> 47:00.000
Like that microphone we talked about.

47:00.000 --> 47:01.000
Like that microphone.

47:01.000 --> 47:04.000
Well, you can go on over to coder.show,

47:04.000 --> 47:09.000
specifically coder.show slash 369 for this week's episode.

47:09.000 --> 47:11.000
But you'll also find ways to get in touch.

47:11.000 --> 47:12.000
You just hit the contact button.

47:12.000 --> 47:16.000
And the easiest way to make sure you always get fresh Coder Radio

47:16.000 --> 47:18.000
is, of course, just subscribe.

47:18.000 --> 47:19.000
We're on all the apps.

47:19.000 --> 47:20.000
We're pretty much everywhere.

47:20.000 --> 47:21.000
That's true.

47:21.000 --> 47:23.000
Really, that's where the show notes are, really, is in the app too.

47:23.000 --> 47:24.000
Yeah.

47:24.000 --> 47:25.000
It's in the apps.

47:25.000 --> 47:26.000
We've got chapters and stuff too.

47:26.000 --> 47:28.000
So you can skip right to your favorite part of the show

47:28.000 --> 47:29.000
if you only have a little bit of time.

47:29.000 --> 47:30.000
Those are pretty sweet.

47:30.000 --> 47:31.000
Yeah, they are.

47:31.000 --> 47:32.000
A lot.

47:32.000 --> 47:34.000
Especially like when I'm going back to like,

47:34.000 --> 47:36.000
what stupid thing did I say like a year ago?

47:36.000 --> 47:37.000
Yeah.

47:37.000 --> 47:39.000
It's super great for just trying to reference like,

47:39.000 --> 47:40.000
oh yeah, which mic did Chris say?

47:40.000 --> 47:41.000
Yeah, there you go.

47:41.000 --> 47:42.000
Pop right over there.

47:42.000 --> 47:43.000
Huh.

47:43.000 --> 47:44.000
Yeah.

47:44.000 --> 47:46.000
Now, of course, you can also just go to JupiterBroadcasting.com

47:46.000 --> 47:49.000
where we've got a whole other selection of fine programs.

47:49.000 --> 47:50.000
Can people find you on the Twitter?

47:50.000 --> 47:51.000
Yeah, they can.

47:51.000 --> 47:52.000
At Wes Payne.

47:52.000 --> 47:53.000
And I think you're there too.

47:53.000 --> 47:54.000
I am.

47:54.000 --> 47:57.000
At Chris LAS, Linux Action Show.

47:57.000 --> 47:59.000
How retro is that?

47:59.000 --> 48:02.000
Tweet me your ideas for a new end of handle.

48:02.000 --> 48:03.000
Right.

48:03.000 --> 48:04.000
We'll spruce the whole thing up.

48:04.000 --> 48:05.000
Yeah.

48:05.000 --> 48:06.000
Fresh it up for the new year.

48:06.000 --> 48:07.000
I think Joe probably votes Chris LAS.

48:07.000 --> 48:09.000
We'll see what Mr. Dominic says when he comes back.

48:09.000 --> 48:10.000
Yeah, we'll see.

48:10.000 --> 48:11.000
So do stay tuned.

48:11.000 --> 48:13.000
Well, you know, we did this show live this week.

48:13.000 --> 48:15.000
It was a little late maybe, but don't worry.

48:15.000 --> 48:17.000
Go to JupiterBroadcasting.com slash calendar.

48:17.000 --> 48:19.000
You can find out when we are here live.

48:19.000 --> 48:21.000
We'd love to have you join.

48:21.000 --> 48:24.000
Until then, we'll see you next episode.

48:24.000 --> 48:29.000
We'll see you next time.

48:54.000 --> 49:01.000
Bye-bye.


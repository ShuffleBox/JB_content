This is Koda Radio, episode 360, for June 3rd, 2019.
Hello and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business of software development and related technologies.
My name is Wes, and I'm pleased to be joined on this day of WWDC by the one, the only, Mr. Michael Dominic, who I know is all riled up. Welcome, Mike.
Thank you, Wes. I am. And how are you on this holiest of days in the year?
You know, actually, I'm doing great. WWDC has been a lot of fun to watch. I mean, it's still going on right now as we're live.
That's right.
So we're missing a bit of it. But as I was preparing for today's show, I got to tune in. And while I do not currently own any Apple devices whatsoever, it's still just kind of fascinating.
It shows a lot about like the state of the industry and then where they're going. Plus, they've had some big announcements today.
Oh, yeah. Big as in huge.
But before we get there, I mean, there's some other stuff to cover. We don't want that to eat the whole darn show today. Of course not.
And before any of that news came out, I noticed from some of your tweets, I've inferred that you've kind of been struggling with the machine of yours that we're all a little disappointed you've had to fight so much with.
Yeah, so sadness. If you check out DominicM.com, and I'll throw it in the doc, you'll see that I have been battling my System76 Thalios, fairly aggressive fan noise.
And when I say aggressive, you know, I got to the point of downloading a decibel monitor and actually like putting my hand next to the machine or like putting it on top and measuring it in all different ways.
I was hitting the high 40s to low 50s in decibels at idle, meaning nothing running, just like sitting there on, you know, your gnome desktop.
Oh, that is that is loud.
Right. So all the measurements I'm going to bring out here except for one are idle.
So not spinning up Chrome, not like doing the show, not compiling code, right? Idle.
And it's really a shame because I like the Thalio. It's such a beautiful tower, in my opinion. I know the word is a little controversial, but I like it.
That it was just untenable for me to use it to do the show. And basically like conference calls, which I have four or five times a week.
Yeah, that's kind of important when you're talking to your clients and possibly employees.
Right. So especially now that we're fully remote, it's kind of just not OK for me not to be able to get a clear call through.
So I ended up on Reddit and a bunch of forums basically digging through this problem.
And it turns out because my first thought is, of course, you know, I had this problem a while ago and I just ignored it because I was using the Thalio for other stuff.
And I thought, well, maybe mine is defective. Right. Like maybe there's something weird.
This one needs to be tweaked, whatever. That's not the case.
Right. No, that's not the case. There's a whole pile of people complaining.
But even positive reviews of it mentioned the fan noise. Even my original review mentioned fan noise.
Obviously, I think some people might be able to tolerate it a little better than I can.
Part of it is because, you know, as you know, we're working on sound quality for all the shows.
Right. So having a giant fan behind you is not great.
Right. And this wasn't just the level you were provided behind the scenes.
You'd provide some samples that we were all taking a look at.
Yeah, we were all working on it in Slack.
And it was it was pretty remarkably like you had to do a lot even to get it to the sort of acceptable phase, honestly.
Yeah. So I ended up having to open the case and rewire the. So there's two fans.
Technically, there's three because there's a GPU fan, but I didn't mess with that one.
There's an intake fan at the bottom. There's the GPU fans.
But the two fans we care about are that intake one at the bottom of the case and the CPU fan, which is like if you're looking at it, it's like at the top back.
Right. And it's it's it's a CPU fan that you would expect to see.
Right. So I'm very easy to open up. They did that really well.
The hand screws work great. I did not have any problems.
I ended up figuring out that for whatever reason, with the daughter board, that custom FOSS board that they use,
it wasn't exactly honoring my changes in the BIOS for the fan curve, the fan speed curve, which is set fairly aggressively.
So you could go twiddle and tweak settings in the BIOS. No observable effect.
Which as a Mac guy, I can tell you how happy I am to be tweaking the BIOS and opening a case.
Yeah, that's what users should have to do. Right. I'm already in a dark place.
Right. So, you know, I figure out from reading Reddit and just like tweaking and seeing other people complaining that it looks like it's all this daughter board.
So if I wire it to the motherboard, it being the CPU fan, I bet it will honor the BIOS settings.
Oh, so you just sort of you just routed around. You said the daughter board, it's not working. It's driving the fan too hard.
Let's try the actual BIOS control.
Well, it was either that or, you know, Drew and I were going back and forth and slack talking about different fans I could buy.
But that that's like crazy train. Right. That's.
Yeah, that's that's even farther down the path of madness.
Right. That's like just go buy a Mac Pro. Right.
So I did that, which was a fairly non-involved installation.
I mean, I don't have the there's Thaleo and Thaleo Major and I think there's one above it.
I have the smallest case and a relatively large GPU.
So I did have to like remove the GPU to be able to get my, you know, my hands in there and do everything.
But you know what? Gotta love the industrial design, a lot of good cable management, the actual like hardware side of this.
Though I don't think I should have had to do it was very easy.
OK, so that's not it's not all bad. And if you were making some other hardware swap or upgrade, that'd be a success story.
But you would have preferred not to have to open that thing up at all.
Right. Like after I got it open, I noticed if I wanted to throw another SSD in here, man, would that be dirt simple.
Like that would be the five, ten minute job. Super simple.
But this is, you know, OK, so I wire it there, go into the BIOS and I start screen with the settings.
And it turns out I was able to get it down to about 36 decibels, which is OK.
It's barely acceptable, I think, for a desktop.
The big caveat here was I did not rewire the intake fan because I was concerned about too much heat.
Right. I only rewired the CPU fan.
You were a little concerned. I mean, this is an expensive machine and you don't want to have it, you know, just melt down itself.
Right. And the other thing is just like the way the cables run, the intake fan was just a lot harder to get to.
That was going to be a much more in-depth operation there.
So it was OK for a day or two.
Then my wife, unbeknownst to me this morning, was cold.
So she turned the air conditioner, because I remember Florida, so it's always like 90 degrees, right?
So we always run central air.
So you have AC cranked just 100 percent of the time.
But she turned it down, meaning temperature higher, to 75 today.
Remember, I did not touch the intake fan.
Well, the intake fan felt the increase in temperature today and was right back up to about 45 by itself,
even if the CPU fan didn't come on or barely came on with my new settings.
Wow.
So I ended up making the decision that it wasn't worth it for us to keep, us meaning you, me and Drew,
to keep going back and forth with sample recordings, so I just disconnected the failure.
Having said that, my fan hack does work,
provided you are not already in a relatively hot ambient environment.
And also, there is nothing that would stop you from rewiring the intake fan too.
To their credit, a developer named Michael at System76 did reach out on Twitter.
They are very aware of this issue.
The GitHub issue is linked in the Twitter thread, and we can throw it in the show notes too.
You know, they've known about the issue for a while.
It is hard-coded in the Thaleo firmware.
Oh, man, Ralph.
There's no, like, gooey way or even, like, change a config file way to fix this.
So would you have to, like, reflash that board or something?
Well, they have to patch it, right?
That's going to be the solution.
There's also some question about, like, what is the acceptable number?
I would openly admit that most people aren't doing podcasting and tons of conference calls on Thaleo,
so I imagine maybe a lot of people are more tolerant than I would be.
Yeah, if you just have it in the corner and you're trying to churn through some renders
or, you know, compile a big code base, maybe you don't care.
Or, like, under your desk, right?
Like, if you don't have a carpeted floor, you could put it on the floor,
and then you probably, you know, it's fine.
It'll block some of the noise, at least.
So, I don't know, right?
Like, it is, you know, as I wrote in my post, it's a premium-priced product.
I mean, that's not great.
I hope they fix it.
Right, that PR you linked to did look like they were actively investigating
and even prepared something that might have worked for your issue.
It's just, you know, it's not in the pipeline yet,
and who knows when you'd actually be able to go get that applied to your machine.
I don't even, I mean, I don't know what the, did they have,
like, a firmware updater, so maybe it just rolls out that way?
Yeah, I think it just rolls out.
I think, ideally, it would roll out through the firmware updater.
I think that's how, actually, they do it for them, all of them.
Because there was an issue with the Galagos about a year ago
where that's how they did it, just the firmware updater.
Right, yeah.
So, if they can actually get there, that'll be good,
but it seems like it's taken a long time
for this much information to really be available.
And now that it's out and you can see sort of the open review process on GitHub,
that speaks a lot to kind of the point of this board, right?
They wanted to have this open firmware custom board
so that instead of having to get, you know, secret code
from the motherboard manufacturers to control the fan stuff,
they could do it all in open source
and with their own custom stuff that could be modified.
It seems like we're just a little early in that process
where it doesn't work great for the end user.
Now, maybe down the line, that can change, and it is out in the open,
so there's probably some room there.
Still early days.
Yeah, still early days.
I mean, this is their first, you know, self-100% manufactured piece of hardware.
I don't think, as problems go, this is the worst problem you could have,
and I will be shocked if it's not tweakable via firmware update,
since, you know, the fan curve is, again, currently hard-coded in the daughterboard.
So, really just make a little known utility that I can change that,
and life is great.
So, ask me what solution I ended up going with
that I'm talking to you on right now.
I was going to say your fan noise doesn't sound bad at all today.
Hmm, I'm a little suspicious that it might have something to do with Apple.
Wrong.
What are you using?
I am using the Galago Pro with an eGPU.
Is that right? Okay.
Yeah.
What GPU do you have in your eGPU setup?
Oh, geez, we did an episode on it a few weeks ago.
It is the Radeon Sapphire MX, or, yeah, 560, I think.
Yeah, that's right.
Yeah, in the OWC case,
it's the Apple-recommended one that connects via Thunderbolt.
I am, very ironically for something we're going to talk about later today, Wes,
I think I'm bought in on the eGPU lifestyle now.
Yeah, I'm getting really tempted,
and part of me wants to build a big new honkin' Linux desktop.
Another part of me wants to get something a little smaller
and just go the eGPU route because I have this other, you know,
I have a ThinkPad that I could use with it too.
It just seems like an affordable choice that's working decently enough
if you're all right with tinkering.
Yeah, and it's not that much tinkering, really.
Even on Linux, there's just like a little,
I think you linked it a couple of weeks ago that I ended up using,
a little bash script that just sets it up.
The only big bug that I see on,
I'm running a pop in 1904, so I've been to 1904,
is you cannot like hot unplug your Thunderbolt eGPU.
Yeah, I imagine your graphics card disappearing
is probably an upsetting event to everything depending on that.
Well, Mac actually handles it, and so does Windows.
Well, where do you think you are, Mike? Come on.
Yeah, I know, Jesus.
You want stuff to work or do you want an open source operating system?
In the words of Leonard Pottering,
you're getting this free, stop complaining. Yeah, I got it.
Yeah, that's great.
All right, well, it's nice that that system is working
and that the fan noise is an acceptable level.
For my recording stuff, I've just had to move all my equipment out of the room,
but that's not an ideal choice.
That would have been much too simple.
That would be much too simple.
You got to fight. You want to make it a fight.
That's right. I want the glory of battle.
So I'm curious what you think about,
let's just dive into WWDC
and start with what is maybe the most exciting thing and the most relevant.
The Thaleo not working out too great.
You might be able to find something more to your liking
in an Apple's new Mac Pro.
You know, I really wish Chris was here so I could ask him for,
what is it, $6,000?
Yeah, that is the starting price of this new machine.
Yes, that's right.
You know, it's for show research. We need it.
Yes, exactly.
Xenics Academy will gladly pay for it.
You know, honestly, it would probably make an excellent studio machine.
No, actually, you know, while we were getting ready,
I was kind of looking into the verge right up in the specs.
Many developers are not going to need this machine.
This does sound like kind of a audio production,
particularly video production unit.
Yeah, they're like,
we heard you're disappointed we haven't made a media workstation,
so we are going hard at making a media workstation.
Like, super hard.
Like, I like it.
I mean, Wes, I got to be honest.
If I did not, on a whim, start the eGPU Kool-Aid,
I would probably be saving up for the next 10 years to buy one of these.
Yeah, that's a big investment.
Plus, you still need to buy their new fancy new screen at the same time.
I'm sure you can reuse the screen you have,
but that's just not the Apple way.
It's just not the Apple way.
Was there anything about the Mac Pro that stood out to you?
I mean, first of all, it's not like some stupid shape, right?
We should say that.
It is a tower, effectively.
It looks like, I mean, just a fancy high-end machine.
Yeah, you could recognize that.
Oh, that's a computer.
Yeah, okay.
It's like something you would buy on like Newegg, right?
Like if you buy it for a custom case.
It looks nice.
It looks very much like the old cheese grater Mac Pro,
which is what people want.
Yeah, I like that callback.
It's nice, yeah.
It is massive overkill for all but the highest end of developers, I would say.
Yes, this is not, you know, I mean,
I think many people are willing, maybe not pleased,
but willing to spend somewhere between, you know, $1,500 and $3,000
on a nice workstation for something that just should last a couple of years
and, you know, has decent graphics and nice peripherals and all that.
This is not in that box at all.
It really is like you're a serious professional.
This is coming out of some business line budget somewhere
because it's going to be, you know, it's going to be your main production tool.
And if that's true, it seems awesome.
Like I've known a few shops that have played around with buying, you know,
like custom rigs designed for machine learning data science applications,
which is boxes rigged with GPUs so that you can, you know, train and test,
evaluate models faster right there on your desktop
and not have to push it off to some cluster.
For that space, this seems very competitive, right?
And I'm sure other people working on stuff like ARKit, et cetera,
these will be great machines for that internally too.
Kind of. So you don't even need that much for ARKit.
I mean, like the MacBook Pro that I have, the i9 with the Radeon
or, hell, a Mac Mini with the eGPU I have will do you just fine on ARKit.
But there's a little dirty, can I give you some inside baseball?
Yeah, please do.
If you are an independent Apple developer and you have a business account,
you should not buy this.
You can actually just lease them and they're much more affordable.
You do like a three-year lease.
Oh, yeah. What does that look like?
You end up paying less as long as you're always going to be locked into Apple.
That's kind of their...
Right. As long as you're committed to like continually having
one of these machines around.
And you cannot lease the lowest end version.
Ah, yeah.
But they're doing that pretty aggressively with the iMac Pro,
which if I wanted an iMac Pro, I would just lease it through my business.
And it would actually be a much less significant purchase, end quotes.
Especially the way I go through...
I mean, there's a whole thing.
I don't want to go on my eGPU tangent, but if this works out for me,
really, I'm just going to buy a new laptop every year to like upgrade
memory and processor and RAM because I only have 16 gigs.
Yeah, then you've separated stuff. You can have two different upgrade cadences
for your GPU system.
Two cadences. Right.
Yeah, that's really nice.
One disappointing thing is no NVIDIA.
Right? I was kind of surprised by that.
They were playing up the expandability, right?
It's so funny to think, but it's like, we brought PCI back to the Mac,
which is ridiculous in some perspectives and nice in another perspective, right?
I have never been so excited about PCI, though.
I mean, it seems like they're doing it right, too.
And Thunderbolt just sort of wired throughout the entire thing.
It's definitely an IO monster.
Yeah, it's an impressive machine.
Yeah, I don't know.
I can't imagine a day where I get to really play with one up close,
and that's kind of the disappointing part.
I don't need to edit or render a bunch of like native ProRes 8K.
I'm sure if you do, that's pretty exciting.
It's weird, though, because it seems like this is...
When I was listening to it, honestly, I was excited.
I did kind of grow up on Macs, and so I liked them.
And for a long time, they were this, right?
They were the sort of media professional designers or print or whatever industry.
A Mac was like a creative person's workstation and a computer designed for them.
It felt like they were trying to hearken back to that and embrace it.
But at that price point, now that I think about it, it feels like maybe...
It's exciting because it's new and it's great,
and they're clearly committed to doing it right,
but it's just not for us.
So I had the same experience growing up.
Macs were particularly the...
It wasn't the cheese grater.
It was like the G5 tower, whatever, the G4.
It was like an aspirational thing for me.
Back on the PowerPC days.
Right, back in the PowerPC days.
But I could never afford a Mac back then.
I think they're aspirational devices and things you will sell to Pixar.
So I could see a JB having one right to just do some super high-end renders
every once in a while or just crank through some video assets
when you guys are on the road.
The sort of frustration, I guess, maybe captured a lot of this
because I'm curious, I'm Apple curious.
Actually, my very first smartphone was an iPhone,
so that was my introduction to that world in the first place.
So I spent many years on iOS.
I'm not there now,
but I keep looking on thinking about how do these devices fit?
Do they make sense in my life?
Some of the news around, let's say, like the Apple Watch
becoming more of a standalone device.
That's interesting because I don't have an iPhone.
Maybe I will, but I just got a Pixel 3,
so I'm not going to switch this generation at least.
If I could use it on its own, though,
it's clearly the only device in its class out there, right?
So there's not a lot of choices.
So it's frustrating that when Apple does something,
if you can shape the ways that you want to interact with that device
into the ways that they're designing for,
they do it right and at such a level of design and thoughtfulness
that no one else can touch.
So it's frustrating to someone as an outsider who wants to use it.
It doesn't quite feel like it's in the shape
where it plays with the way I use computers yet,
but it's getting close.
And another way it's getting close is iPad OS,
the new sort of grown-up version of iOS
that has more iPad-focused features
and regular old computer stuff like files and folders
and SMB support.
Yeah, this is probably the most exciting thing
in this dub-dub for me.
I really, really, really think most people working in factories
and, like, offices and in sales and lots of places
do not need computers anymore.
They need, like, powerful tablets with, you know,
so basically LTE chips, right, LTE SIM cards.
Yeah, always on, just, you know, have all of your communication apps
because that's 90% of what we're doing, right?
It's sending emails, checking Slack, doing some web browsing,
maybe a little bit of creative work on the side.
Or, like, whatever, you're, you know, you're an inspector.
You can already see this, actually.
A lot of people do this already.
But just, like, more powerful applications,
I kind of think they're all going to be HTML5
a la WebAssembly pretty soon.
But you do need the OS to actually support, you know,
the tablet as a real computing device
and not, you know, a content consumption device.
Right, and they have branched off, right?
Tablets are doing a lot more or at least exploring different spaces
than what you can do on the limited size and shape of a phone.
That's another area.
Like, there's not another tablet that I would,
that I'm really interested in.
And I've used iPads for a long time.
I'm familiar with them.
And they're, I mean, they're pretty great at it.
You have had to accept that Apple basically wanted to reinvent the OS
and start off with their, you know, their, like, user faces stuff
and then add in redone and reworked primitives,
things like the, you know, ways that you interact with files
or USB drive support that you would expect on a traditional machine
but hadn't been implemented in this new world of iOS.
But it's getting closer, and you can see the day.
And, you know, it'll be some straggling curve,
but more and more of general purpose computing
is being eaten by these devices.
Yeah, I mean, and Apple can kind of take their time
because, you know, Ubuntu Touch was never a real competitor.
Android on tablets was always kind of crappy.
Yeah, there is no competitor.
Yeah, Windows is maybe the nearest thing,
but they're a distant second.
Mm-hmm, and I don't think they can yet compete with the,
for all the pains it causes power users,
the rethought interaction models and, like, ways of how computing works
that I think is really appealing.
All right, so a little bit personal.
My father's a bit of a Luddite.
He's not a computer-forward person.
He can use them as a tool
but isn't really interested in them other than that.
Being disappointed in some of his local news available,
the family got him an iPad this Christmas as a sort of like,
oh, here, you know, we've got, like, the New York Times
or whatever other subscriptions you want to put on there.
You can have it right there.
It was the first, like, new machine he'd used in a few years,
and I don't know that many other, you know, a Surface or a Windows tablet,
it just wouldn't have provided the same sort of ease
and clarity of the interaction models
that I think let him actually be successful at using the device.
I came back and visited just recently,
and he was sitting there on his tablet,
and he was telling me about some hacking story reported in the New York Times.
I was like, what? Are you the same person?
Nice.
And it's just because, like, that device is simplified and safe
and lets him feel comfortable using it in a way
that a more powerful machine probably wouldn't.
Yeah, I think that makes a ton of sense.
I mean, and also they're, you know,
they're fairly easy to replace and service, right?
That's a good point. You can just get a new one.
You know where to take it.
And if you're using all the iCloud stuff,
then you know most of your data is going to be safe, too.
You have a guaranteed configuration that you're developing to,
or at least a small set of guaranteed configurations, right?
So you don't have, like, a million different devices
with, you know, a million different potential pieces of hardware
or settings, blah, blah, blah.
So I think the last thing, or the last two things,
would be Project Catalyst,
which was the artist formerly known as Marzipan.
I don't have a lot here, Wes.
It's okay, so you can bring your iPad apps to Mac.
Right, that's the goal here, is you can take apps
that have already been designed, is that right?
So you have an app that's already running on iOS,
and then through, I guess, Project Catalyst,
you can get it up and running on the Mac.
Yeah, I mean, I think in reality,
the good Catalyst apps are going to be designed from the ground up.
Right, that's the issue so far,
is everyone seems to have a complaint that, like,
yeah, okay, it does run, but it feels like a weird ported iOS app
that doesn't fit desktop paradoxes.
It doesn't fit with the platform, but, you know,
the second thing they announced, Swift UI,
which is a very React component-y way to build UI.
Did you notice that?
Yeah, I don't know quite how declarative
or along that spectrum it will be.
I haven't got enough chance to play with it, obviously,
but it did, just from the few samples and interactions
that they were showing, it did feel that way,
which might make it kind of cool.
I mean, that's always been my complaint
with some of the more, you know, just old-fashioned UI sort of policies.
I think that was why React took off so well,
is you could just sort of say, like, here's what I want the page to be,
here's how it should work, and you figure it out, library.
Yeah, I mean, the.NET world has this.
In fact, Xamarin used to be very common to do your UI
in declarative C-sharp, basically,
which looks an awful lot like what they're doing in Swift here.
So this is, I think, Apple.
It's pretty clear to me that Swift UI is,
you know, let's say one or two reps from here
are going to be the UI framework.
Does that mean Objective-C is over with?
I mean, are we really entering the era of Swift only?
We're not there yet, but I would say in a refer to pour out your 40s
and pour one out for Objective-C.
Now, it's still, still, it could be possible that your logic
could be written in Objective-C,
because they still support C++, right?
Ah, yes.
I'm writing UX in Objective-C. Yeah, the end is nigh.
You might have some, yeah, backend libraries that you're using,
but the main thing that you're going to use to design
the whole application will be Swift.
It's going to be Swift, yeah.
I mean, right now, Swift UI is not mandatory,
or it wasn't clear in the keynote if it's mandatory.
It doesn't seem like it is.
But I think at this point, it's definitely something,
if you're building a new, particularly iPad OS,
or I keep wanting to say Marzipan Catalyst app,
I would be hard-pressed to not look at that.
Just from the demos they showed, it looks very powerful,
and I imagine there's some performance gains
in not having to load and unload nib files.
Just my two cents, but, yeah.
So speaking of things that are hyper-performant, Wes, I hate you.
Yeah, you're a little mad at me,
and I think in a good way, though, knowing you.
It's good hate. It's good hate.
So Wes turned me on to Elixir
as part of our 7 Weeks 7 Languages.
Yes, I did. Maybe you could tell us a little bit about Elixir.
I know we've mentioned it on the show,
but I think this is the deepest dive we've dared to do.
Yeah, yeah. I failed to complete my GitHub assignment, of course,
but I will post something after the show.
I ended up digging deep into Elixir videos and Elixir tutorials.
In particular, two comparisons to Ruby
and some performance statistics.
Ah, and one of the things I'm curious to see out of this
is what you think, as an experienced Rubyist,
if those comparisons really make sense
or if it's just sort of surface level.
Yeah, well, obviously, I'm not a big fan of benchmarks,
but there's definitely...
In fact, I linked to a blog post in the show notes
comparing Elixir and Phoenix,
which is their MVC-ish web development framework,
an API development framework,
and Ruby and Rails, which everybody knows what Rails is.
And yeah, I mean, there's some significant performance increases,
and the author makes just a tremendous argument
that by virtue of being functional,
but also just less magical than Ruby,
Elixir is not only more performant,
but you have less of the issues of a gem is no longer maintained
or blows up or is incompatible with some new version of some other gem
it depends on and you have a problem.
Now, to be fair to Ruby and Rails, the disadvantage is obvious.
Ruby and Rails are particularly designed for developer productivity
and getting things done as quickly as you can.
But damn, I mean, to me, it's not really an either-or.
I know that's a click-baity way to do this.
Right, yeah, of course. You have to choose the tool for the job.
But maybe this is a new useful tool to you.
Well, I think for crunching through data,
for things like multi-channel messaging, i.e. bots,
having Elixir components might make a lot of sense.
Saving server costs, getting things done quickly,
and just the guaranteed safety of being purely functional
I think is pretty interesting.
And its syntax is very Ruby-esque, so it was weird.
As I was playing with it, it didn't feel that foreign to me.
Right, and so in comparison, Elixir is based on Erlang,
and they both run on the Beam VM.
Erlang was developed out of Prolog, so the syntax is,
if you haven't done Prolog, it's pretty darn wacky.
So you're saying you felt pretty comfortable as a new developer coming in,
not familiar really with the platform, and just sort of getting to work.
Yeah, I did. I felt like it was pretty solid, pretty well-maintained.
I mean, the documentation is some of the best documentation I've seen in a while.
Yeah, you can tell the project really cares about that,
which is great for bringing on new people into the project.
Yeah, I would say the only somewhat downside I found is that it doesn't,
and you can correct me if I'm wrong,
it doesn't seem like it's a very popular language right now.
No, I mean, the Beam's always been a bit of a niche,
and Elixir is pretty darn new.
Maybe not really that new, but on the scale of languages,
it's still new and growing.
It does seem like the community's pretty active.
I think it might also fall in one of the sort of secret weapon camp where,
you know, you might not use it at your big enterprise
where you already have a Java application,
but perhaps for someone with a small consultancy who has a little more choice,
you know, like famously WhatsApp has been based on Erlang for a long time.
And so you can see how in certain applications,
as long as you're willing to put up with, you know,
having to do a little extra work training on new people
to get them familiar with the language, it might make your code easier.
Like, I'm curious what you thought about the, you know,
the sort of agent-based systems, message passing,
having actors that you can use.
Yeah, see, in a weird way, it all felt very old,
but also very new to me.
And to be honest, I actually bought a book on it.
I'm going to be digging into it more.
Really? That's fantastic.
Because I may actually have a practical use for this.
So I don't want to talk out of my butt too much.
Do we need to extend this so that you can have another week in the challenge?
Well, I think we don't,
just because I might do something a little bigger.
But I think I'm sold on Elixir, right?
If the goal was to convince me that Elixir is something worth looking into,
I, you know, just for example,
I was reading the basically of this whole getting started basically book,
right, on their website.
And I read through the whole damn thing.
And they very wisely assumed that the people
who would be attracted to Elixir are Rubyists.
So they kept comparing things to Ruby,
which makes it very easy to kind of, okay,
so this is, I forgot what the thing was,
but this is like a Ruby, I think it was like a,
some kind of, the way they do pattern matching differently, right?
Where Ruby kind of does and doesn't, but that's the whole thing.
No, you're right.
I mean, pattern matching is kind of ubiquitous in the Elixir world.
Right.
So it's like, if you would have done this in Ruby,
this is our much less code, simple, more functional way to do it,
which is kind of, I got to say,
I really am surprised that I haven't heard more about it.
Although I could definitely see that building anything non-trivial in this,
there's got to be some kind of learning curve here.
Like I just reading through it, it was like, okay,
so these are some pure functional techniques here, right?
This is not functional, like F sharp is functional.
This is really functional.
Yeah.
I mean, there is, you know,
the VM has a lot of immutability sort of baked into it.
So where, whereas say with the JVM,
you can layer that on top in a more functional language,
you don't really have the option.
You have less escape routes, I think, on the beam.
It is interesting though,
I'm curious if when you get to try some more of the concurrency,
because that seems like in particular,
an area where Ruby really struggles and Elixir really shines.
Yeah.
And like, so does Node, right?
So if you think about my use case of like chat bots
for something like an Alice,
that's an area where I would love more help.
Yeah.
And the nice, the advantage too, right,
is that you have different concurrency models.
So with Node, you know, you have this single core.
Now I know, I realize there's multiple core aspects you can do
with IO and other aspects of it,
but your main code runs on a single core.
Beam is kind of unique, not really unique,
but somewhat unique in that it has preemptive multitasking as well.
So you have some nice guarantees in terms of, you know,
latencies and responses because one messed up really long task
can't eat into the system
in the way a cooperative multitasking system can have happened.
I couldn't have said it better myself.
So what did you think of, I think,
the much easier assignment I gave you?
Yeah, so you assigned me to TypeScript.
It's honestly, it's been interesting.
I've been having a lot of fun playing with it, so thank you.
It was a good choice.
It's a language I've been watching,
but I hadn't directly interacted with.
So my first stop was over to the playground they have,
and that's just like a little web app
where you type in some TypeScript
and then it'll show you the output JavaScript
and then you can run it there as well.
And that was sort of in lieu of a REPL.
It's always funny, like, playing with more static languages
because I'm used to trying things out
and just sort of opening up a REPL and playing around
and, you know, kind of trying out basic evaluations
and learning a little bit of the syntax.
And that's just not the way.
I mean, there is TS Node,
which is a little TypeScript REPL on top of Node,
so I got that installed and played there too.
But it was kind of fun as someone who'd used
other transpiled languages just to go look
and see how some of the basic constructs, like,
I think it's kind of educational even for people to look at
just, like, the basic class stuff, right?
So, like, TypeScript adds types to JavaScript,
but it also incorporates a lot of the newer standards
and proposals and changes to JavaScript,
so it just feels kind of like a better,
more polished JavaScript.
But I found it interesting seeing how some of those constructs
turn into JavaScript, and you can learn a little bit.
You know, if you're not familiar with the weird
prototypical inheritance structures
and the way JavaScript works
and how you can sort of model objects and that sort of stuff,
looking at, like, a basic class and its compiled code,
it honestly explains a lot, which is kind of neat.
And you can see stuff like what structures
are purely at compile time.
Like, interfaces, for example, in TypeScript,
they don't, you know, there's no generated output.
It's all just stuff that the compiler uses
to better check for you.
So you can tell they spent a lot of time
thinking and designing this really well.
I also went on my own TypeScript journey about a year ago.
Would you write TypeScript over JavaScript?
I know you like ClojureScript, so I guess it's assuming
you were, like, verboten for writing ClojureScript, right?
Right, yeah, yeah, sure, yeah.
So I think the problem you have with JavaScript
is you sort of got to pick things.
You got to pick which JavaScript and which tools.
And you'll still have some of that with TypeScript.
It's not like it totally solves all of those problems.
But I think it sort of is a nice standard,
because worst case, right, it is just a superset of JavaScript.
So you kind of get, you know, the compiler doing a bunch
of the nice stuff, so you get all the modern standard stuff.
And you can have, you know, not only will it do
a pretty decent job of inferring types automatically for you,
so you get a little bit of extra safety almost for free,
and you can turn off all the, like, harsh flags
if you really don't want that stuff to, you know,
to prevent you from actually emitting JavaScript.
Like, yeah, yeah, yeah, I know, my algorithm is unsound,
but I just, in practice, never hit the edge cases.
Then just spit this out for me, TypeScript.
I think it is probably a pretty good choice for, you know,
if you don't have a reason to stick to standard JavaScript.
It's well-supported, there's types for lots of libraries,
and it, you know, as they say, it's JavaScript that scales.
I can see that being true.
You know, it does provide a lot of the niceties
of a statically typed environment that can help
sort of formalize things if you've got a diverse team
with different backgrounds and different skill sets
working all on the same large code base together.
It seems like that would be an area
where it particularly shines.
It would also work, I think, for anyone who's sort of
interested in this stuff but doesn't, you know,
isn't comfortable going a little more off the beaten path
with something like ClosureScript or PeerScript
or, you know, any of the more functional
or just extreme variants of languages
that transpile the JavaScript.
You get all these extra layers of type stuff,
and I think a big plus and a big negative for me personally
is that the rest of it is the same, right?
So, like, all the basic constructs, it's just JavaScript.
So, it's not a huge paradigm shift
except for all the extra stuff you can do
with the fancier compiler.
Now, that's not really, I prefer some, you know,
like, functional methods of thinking.
So, I did do a little bit of playing around
with some of the libraries available for TypeScript,
like, I think it's like just FPTS,
and there's one called Peerify.
I don't know what is the current state of the art
or which is the best, but you can tell that those things,
you know, people are interested in that stuff
and have ported some of the ideas from Haskell
and other more serious statically typed languages.
I feel roughly the same way.
It almost doesn't go far enough
for me to not just use JavaScript.
Although, interesting, so given, if we throw ClosureScript
back into my question from about two minutes ago,
you would just go ClosureScript every day, right?
Yes, I think I still would.
I enjoyed using TypeScript.
I was legitimately impressed with, you know,
I just kind of got the standard VS Code
sort of dev environment set up,
and it's really nice,
and I like how flexible the type system is.
It's nice not to just have, like, the nominal sort of typing
that you get with C Sharp or Java
so that you can really, it feels closer
to really modeling the data and the structures of stuff
so that you can easily have interoperability
and you don't have to get obsessed
with making individual types for all these little things.
You can kind of play along that spectrum as you need
when you have, you know, when you're in the prototyping stage
and stuff's a little more flexible,
and then maybe you further refine those ideas
of what types you're playing with as your system solidifies
later down the path to production.
So for a type system, I thought it did a really good job
of just not getting in the way,
but I don't particularly enjoy many of the standard
object-oriented approaches to modeling problems,
so that's a little bit of a barrier,
and it felt like I was kind of shoehorning
some of those functional stuff on top.
So I would probably try to play with ClosureScript more often
or just stay in that camp, and I think it's interesting
because some of the problems that these are solving,
they've taken very different routes
because, you know, TypeScript's going the,
all right, well, you're going to have big files,
you have huge projects that are hard to keep in your head.
We're going to help you by adding this nice rigid structure
of typing to help you have a more well-founded program,
validate things, check your back for you.
I think the ClosureScript approach is basically to say,
I mean, there is lots of stuff,
and we can get into that in a different episode,
but the basic approach is just like,
let's have less of this, you know?
Like, let's focus on simplicity and have a small program
that you can understand,
and you can then avoid those same mistakes.
Yeah, no, I think it would be great one week
to do a deep ClosureScript dive.
You could teach us all the glory of ClosureScript,
and I'm not even kidding.
It's probably, you know,
I am slowly coming to your functional way of thinking.
More and more, I'm just tired of managing state, basically.
Yeah, I mean, of course you have state.
I think the key is just to sort of refine
your interactions with it and reduce the ways
that you can have error and sort of centralize that state.
Actually, I'll provide in the show notes,
there's a great little video from a recent Closure conference.
All about solving problems the Closure way.
And it's not, the whole talk is in JavaScript,
so I think it's pretty approachable,
and it talks to some of those things of, you know,
like why some of these simple and functional techniques
might help you reason about your code better.
Couldn't have said it better myself.
Okay, so we had Elixir and TypeScript.
So we had one very functional language so far, right?
And one language that really, really wants you
to embrace the OO side of life.
Is that fair?
Yeah, mm-hmm.
So what are we thinking for next week?
Do you want to go first, or do you want me to go first?
Hmm, let's have you go first.
Well, I'm very tempted to do Opsi, just as a funeral.
But I won't, because it's dumb and wasteful.
I mean, I'll try to venture down any path you lay forth.
It's not worth it, and it's just not worth it,
because it's, yeah.
I'm actually going to say Kotlin,
because I'm honestly curious what you,
as a very functional-oriented guy,
are going to think about Kotlin,
which is obviously not functional,
but I think you might find some things you like.
Hmm, okay, yeah.
No, that sounds great, actually.
I'm looking forward to that.
Now for you, Mr. Dominic.
Hmm, I've been wrestling with a few ideas,
and I think I'm going to keep you on a little,
the little corner of the world you're in at the moment.
But now it's your turn to get to play in the JavaScript space.
So I say let's have you try ReasonML.
ReasonML?
Oh, I am Googling it.
I actually don't know this ReasonML.
Okay, okay, so what is this like that I would know?
Is this a JavaScript alternative now?
Yes, it is.
It's a new syntax basically on top of OCaml
that compiles to JavaScript.
So where it has gotten a lot of adoption,
it's kind of come out of Facebook.
A lot of the people behind React originally
have been working on this.
So there's even a version of React that runs on Reason.
Oh my God, it works with NPM?
Yeah.
And they have a weird version of Mario written in it?
Okay, okay.
There's a lot to like about ReasonML,
and there's many similarities to ClojureScript.
So I'm kind of using you as a guinea pig here
to tell me what you think about it.
Now this looks like it runs in the browser.
Yeah, it does.
And I'm sure you could run it on Node as well.
I've not tried that.
Yeah, I see it.
I see they're running it in a Node app here.
That's a quick start.
All right, well, it looks,
and this time I'm going to finish my assignment,
and I'll give you a hint at what it's going to be.
Ooh.
Are you ready?
I'm dying to know.
This is pod racing.
Wait, what?
Tell me more.
Okay, pod racing.
You had me at pod racing.
What are you making here?
I don't know yet, but it's going to be amazing.
And if you beat the pod racing,
you're going to see the most important character
in all of the Star Wars universe.
Oh, I think I know.
I think I know who that might be.
It's C-3PO.
Ah, that's right.
Of course it is.
That beautiful, shiny bastard.
Or I might try to do one of those Advent of Code things.
Yeah, we'll figure that out.
Yeah, maybe we can both do a couple
in a few of these languages,
and they can serve as just a simple little translation of stuff
and see how different techniques exist.
Really, actually, if we're smart,
you know what we should do.
We should do the same thing every week.
Yeah, you're right. We probably should.
Just pick the same stuff,
and we'll implement it in all the languages we try.
All the languages.
So I'll just pick something from the Advent.
You pick something from the Advent,
and we'll just keep it consistent.
Okay, that sounds great.
Ooh, I'm getting excited already.
I guess that means we should probably wrap it up.
We both have new languages to install.
That's right.
That's going to be it for today's episode of Coda Radio.
If you'd like links to everything we talked about,
well, just go to the show notes.
That's coder.show slash 360.
Over at coder.show slash contact,
you can find all the ways to get in touch.
We love your feedback.
You can send us an email that way.
You can head on over to our subreddit,
or you can find us both on Twitter.
I'm at Westpane, and Mr. Dominic, you're at Dumanuco.
The whole network is there too, at Jupyter Signal.
If you follow them, that's a great way to stay in touch
with all the new shows that we release
and find out when we're live.
Another method for that is jupyterbroadcasting.com slash calendar.
We're here almost every single week, right around noon Pacific,
and the app will convert it to you
in whatever time zone you happen to prefer.
Thank you all for joining us.
We'll see you right here next week.
and we'll see you next week.
and we'll see you next week.
.

This is KOTOR Radio, episode 381 for September 28th, 2020.
Hello, friends, and welcome into Jupiter Broadcasting's weekly talk show,
taking a pragmatic look at the art and business of software development and the world of technology.
This episode is brought to you by a Cloud Guru.
The Cloud Guru now includes Cloud Playground, Azure AWS, or GCP Sandboxes on ACG's credit card, not yours.
Get certified, get hired, get learning, a CloudGuru.com.
My name is Chris, and stationed on the very peak of the East Coast is Mr. Dominic.
Hello, Mike.
The very peak? It's weird because I'm actually at the southernmost part of the country.
Well, here's my logic. It's a globe, so I can technically get away with that.
I could say you're on the western peak, technically, right?
See, I thought you were more going for like a Barrac Dora thing, right?
The highest peak and the lowest dungeon, sort of.
Ooh, that is inspired. I should go that route because it is Florida, after all.
Listen, what would you people do without our, well, frankly, police blotters for your comedy shows?
Florida Man. Our very own Florida Man, Mr. Mike Dominic.
My son is turning into Florida Man.
It's inevitable when you raise him down there.
You see some crazy stuff.
I'll keep my eye out on the local news.
So we got a lot of feedback from last week's episode.
Yeah, we had to piss off the lizards.
I guess I kind of knew what I was stepping into.
I wasn't sure, since this isn't like specifically a Linux show, what kind of feedback I would get.
And we got a lot of it.
So I thought maybe we should just jump into some of the feedback because last week I kind of made the case where I expressed my feelings that
Seuss really has yet to gain significant relevance in the market and has been relegated to niches for years now.
And I kind of argued that maybe they were a little late to the game and that their purchase of Rancher Labs was kind of a make good to try to get back into the game.
Well, Dobie writes in and he says, or she says, Dorbry says, before all, I must say that I really enjoy listening to the shows and I'm glad to hear that Coder Radio is back.
That said, I disagree with what you said in episode 380.
You said Seuss is late to the play with their acquisition of Rancher Labs.
Rancher is one of the first ever Kubernetes management platforms to exist.
And as of today, it's one of the very few offering multi-cloud Kubernetes deployment and management.
In addition to Rancher's K3s in a small but fully certified Kubernetes distribution with some big potential for edge deployments.
All of this to say, I don't think that Seuss is late to the party.
In fact, I believe that their acquisition of Rancher Labs was a great move and it could allow them to become a more prominent player on the growing cloud-based image containers market.
Best, Dobry.
Also, by the way, I've been running Tumbleweed for a few months now after switching from Mangero and it's been absolutely rock solid.
Now, I think my view on it is that Seuss kind of came in late to the play and then for containers and all of that and then just made a hard pivot to try to make up for that and is really proud of what they've come up with.
But Kevin wrote back and he was the one that actually got this whole flame war rolling.
And I thought I'd kind of condense it down to these two because they kind of cover everything.
And Kevin says, I didn't mean to actually start a Seuss rant.
I don't know if that's true because he said hashtag flame war on in his email.
And I believe I believe he referred to you as a non-selective individual for your sexual partners in that email too, if I recall.
So I think maybe he was setting us up for a flame war.
Well, he didn't want to start it, but he sure as hell wanted to finish it.
So he writes back.
I didn't mean for my Seuss rant to offend anyone here.
It sounds like it came across too aggressive.
My apologies.
I really was looking for a balanced coverage in it.
And he goes on to say, I'm trying to paraphrase here a little bit.
He says, I'm OK with the jokes about Seuss being different.
But when you say no one uses it, that's not fair.
And that is true. But that was our joke.
And he says, and by being number two behind Red Hat, I mean they're number two in revenue.
Ubuntu might lead in market share by a mile.
But this is, I think, maybe Kevin's core point.
He says, I know that Ubuntu leads in market share by a mile they have for a long time now.
But consider this, Shuttleworth had to cut team significantly to make Ubuntu more sustainable a while back.
And I think they're somewhere under 500 staff, at least as of 2018, he says.
Well, I'm watching my Ubuntu TV right now.
Oh, sorry. Oh, oh, oh, oh.
Oh, that's where it all started to go sideways.
Assuming that a canonical is now profitable.
Well, what does it say that Seuss was able to get profitable with fifteen hundred?
To me, it says they're doing something right.
A couple other people made this point that Seuss says, you know, they're profitable, that they're doing better than ever.
And here's what I will say to this point.
I'm not going to lie. If I could wave a magic wand, I think one of my wishes, if I had many, would be less Linux distributions.
And if I had to make a few hard choices, I don't know.
I don't know about Seuss. I really don't know what would happen there.
If it was my call, like if I could just wave a magic wand and say, we're going to have these six distributions, Seuss would probably be in the top six.
But if it had to be a top three, I don't know if Seuss would make it.
But I have learned that when you get a lot of feedback like this from the audience, there's usually some smoke to this fire, too.
Like there's there's obviously a growing movement around Seuss that perhaps it has found an answer to a market question here and it's getting adoption.
That, I think, is how I'm from the feedback we've got.
That's how I'm going to adjust my perception a little bit.
There's so much here. One, Kevin, I know, Kevin, he's a great guy.
So flame on, Kevin. I love it. Keep it up.
Yeah, no, no problem there.
OK, so trimming down the distributions, you know, I think you're right, right?
The community is duplicating effort too much. It's waste.
And this is why we should all just you snap.
I was right there. Yeah, I just you know, you teed it up.
But isn't it the same argument? It is in a way.
So I've had a lot of Seuss a contact.
I had a Seuss manager, Johan, from somewhere in Germany because Seuss from Seuss manager team on the M.
Dominic show, you decided to start a war with the lizards.
So the last week or two has been very reptilian.
Seuss a heavy right.
One with apologies to the United States, because apparently there are at least a dozen Seuss users here and all 12 of them reached out.
I can't help myself. I'm sorry.
Well, you know, they probably immigrated from Germany.
What are you talking about? Hans is a perfectly usual name.
I'm kidding. You know what Seuss is? We are.
I can't say that I like Seuss because I'm currently working in it and it's making me sad, but it's fine.
I mean, and I will say I maybe I'll go a step further than Chris.
Part of my. Yeah, this was Seuss is unfamiliarity, right?
We're in familiarity. I don't know which is the right form.
Like I am very used to REL, right? I'm very used to CentOS when people don't want to pay money.
And more recently, you know, especially for our internal stuff, it's all going to because it's good and free.
Right. I'm sure if I had, you know, 100 scripts that assumed that they had whatever.
I won't say mind bending, but different package manager that Seuss uses, I would be fine.
Right. I'm just used to apps. I'm used to doing devs. I'm used to, you know, deep package, all that good stuff.
But yeah. So please, guys, if we can get it to a baker's dozen, keep writing in.
I recognize that Seuss has a good engineering team behind it.
And they've they've made some really interesting and unique decisions that I think we're ahead of other other distributions.
So with that logic in place, I could see it appealing to people.
It should be appealing to people. And maybe it's time to reevaluate its adoption in the market.
I don't know. I mean, I'm keeping myself open to it.
It's sort of like many of the other distributions. I see there's a place for them in this world.
I also I don't use Alpine Linux. It's very much a relevant distribution with with a good use case.
I don't have one for it. And I'm also not a big rel user.
I'll use CentOS, but I'm not I don't really have a use case for rel anymore when I just am here doing this stuff.
And so it's not really distribution for me. But I recognize, you know, it's also got a lot of great users that need it and use it and trust it and blah, blah, blah.
Like it's just another tool I don't use.
So from our our dozen reptilian friends, apparently a huge use case is contracting or doing work in regulated industries where it is required that you have a vendor maintenance agreement for every system.
Yeah. So that that really I mean, I know Ubuntu now has Ubuntu. What is it, Ubuntu one or Ubuntu Advantage?
I can't remember Advantage. It sounds right.
I think it's Advantage. Someone can correct us in the chat room. And Rel obviously has whatever they're doing now that they're with IBM.
You know, Red Hat's always had that kind of deal. Yeah. The subscription.
SUSE is the other choice. And it's you know, it's actually been around a long time.
And yeah. Also, if you're running SAP, which thankfully is not a topic for this show, good chance you're using SUSE.
There's also the legacy aspect of shops that have had on premises data centers for a really long time. You know, companies that have been around for more than a decade.
They probably have some on premises servers and companies that have been around or institutions like in my case, it was an institution that have been around 20, 30 years.
Well, some of them had NetWare and ran IPX networks back in the day. And NetWare eventually ended up with SUSE. And so it became the path that you would go from a NetWare server to something that was running SUSE with NetWare under emulation, then eventually just a full SUSE environment.
And so a lot of on premises installs that went that route, that fork of technology and history, transitioned from NetWare to SUSE.
And that brought a lot of on premises installs along to their legacy installs. There's that background as well that contributed to some of the momentum, I think.
But then the cloud came along and our scales are our idea of what what equates to a large deployment just completely changed.
Now, when somebody comes to me and they say, I used to personally be responsible for 125 servers in a data center, and that was that was a lot. That was a lot of servers. And now I say 125 and it sounds quaint.
You know, it's a quaint number. And now talk to me when you're in the thousands. And then I'm getting interested again.
The scale of things has changed as well. And kind of talking about that, Russell wrote in about going indie in 2020.
He says, My question is, in today's times, 2020, with all of that implies and entails, is it still viable for someone to go out and start their own indie development company like a freelancer?
I hate the term, but I guess that's kind of what it would be, he says. And if so, is there something maybe I should focus on?
Is there something that would give me a better shot than something else? That's Russell.
And he's wondering if we have any advice for going indie in 2020, including maybe don't do it, if that's it, if that's our advice.
If you want to do it, do it right. I mean, you know what? And I'm sure you could speak to this having re-indified to see what I did there.
There's never like a good time to go indie. Right. Yeah. So it's always bad. 2020 weirdly presents extra problems.
But also, I'd argue, extra opportunities. You don't have to pay for fancy conference tickets to go do things.
So that's good. The bad side is you're going to get less of that, like Kezmet, you know, you bump into somebody in the hallway at a conference and they become a customer or a client, whatever.
Yeah. So the networking factor is reduced, at least.
Well, I think it's almost gone. Right. You have to like know, depending on where you are geographically, maybe things are more open by you.
I don't know. But yeah, I mean, things are open wide in Florida, but it's Florida.
Oh, yeah. Oh, right. Right. Oh, boy. So anyway, moving right off of that train wreck.
One piece of advice I would give, and this is a huge mistake that I made, just specialize on something.
Even if you will do other stuff in your presentation, the way you present yourself, present your business, specialize in something.
You didn't mention what you were thinking of particularly, but I don't know, like, you know, flash development could be a thing, right?
IOS development could be a thing. Home pod repair, if you are near a crisp, could be a thing.
I think that'd be very viable. Specifically make it easy to understand something that is obvious when you explain it to somebody.
I'll give you an example. Just in my terms, my context is when I advertise my podcast consulting services,
what I'm essentially saying is I have one phone call with me and I'll share 15 years of experience with you and help you make fewer mistakes early on and just hit the ground running.
That's the core value I can provide as a podcast consultant. And that's a very specific focus, right?
I could also tell you how to get sponsors. I could also tell you what website backend technologies to use.
I could tell you what CDN is probably the best to distribute podcasts. But that's not what I pitch.
I pitch something very focused, kind of narrow in on a bigger problem that I think a lot of people face is I want to start a podcast.
I'm worried I don't sound good. I'm worried I don't have a good topic. I'm worried X, X, X, Y, Z, Z, you know, like, just have all these concerns.
Well, let me talk to somebody who makes a living doing that and has been doing it for 15 years.
You got to think of your pitch like that. What problem can I solve for the customer and do it in a way where it's cliche to say it, but you could do it in an elevator pitch.
And that will work. And you also have to be tapping into something that is a need. It has to be something customers actually have a need for.
Yeah. And that's someone you're talking to is almost certainly not going to be technical. So you got to put it in those kind of terms.
That's a great point. And the other thing to consider here is as an indie,
you may have an advantage because you can operate at a lot lower cost and say a firm that has several people to multiple to many people on staff.
They have a much higher run rate than you do, Russell.
So if you can come in at a rate that still works for you, but undercuts them quite a bit,
you could actually be kind of leveraging the market conditions in 2020 to land that contract because they may have to charge 280 an hour and you can come in at 85 an hour
and you're still plenty happy making $85 an hour.
And you just way undercut them. But on top of that, if you're good at communication,
you can really nail that one on one relationship in a way that they just don't simply have the organizational structure for.
There are aspects that you could have to your advantage in this economy.
Pro tip that I also learned when it was too late to be useful to me when given the option in buying things for your business.
Do not even like software, even like tooling ideas, whatever you need to buy.
Do not just like go to the nice little stripe form and give them your credit card if they have an option to speak to a sales rep.
Because often if you're a brand new business, most of these companies will do some either they have like publicized programs or they will do some kind of like sweetheart deal.
You know, oh, well, you know, JetBrains does something like this.
Qt, believe it or not, does something like this. And let's just say they're not shy about collecting money.
So, you know, Chris, I've really been bad on Qt for like two years.
It's all right. Now it's kind of your thing.
Business. Right. It's just, you know, but Microsoft does this.
If you're doing anything with Microsoft and you are a small business.
If it's hardware, call the store rep. Good luck with that.
They'll answer and they'll never leave you alone.
But if it's software, do not pay what Azure says it costs ever.
All right. You're going to get Xamarin University for basically free.
This is obviously Microsoft stuff. You can get Visual Studio like Enterprise for like pennies on the dollar.
Just call like they have this little program for startups.
You'll have to prove that you're a new business and you'll have to prove I think is one hundred thousand in revenue.
You have to be below, which if you open a business on Tuesday, you will. Because by definition, get some free stuff.
I have someone who works with me that used to be a consultant that still has a Visual Studio enterprise license.
Hmm. Not even in business anymore.
That's been my experience with Microsoft, too, is there's the consumer facing price.
And then there's all of these special scenarios from business use cases to education where they'll give you a discount.
And that can be useful.
Your buddy Yusef writes in with the question about illegal VMs.
Dear Coder Radio, my team is starting to get into mobile app development for an NLP project.
I was looking into the iOS side of things and was wondering if it's necessary to own a Mac to do iOS development from a legal standpoint.
In other words, is virtualization on a PC running Linux considered OK?
I assume he means running Mac OS on a PC running Linux.
I did a bit of searching, but I couldn't find a very clear answer somewhere, so I thought I would write to ask. Thanks, Yusef.
I actually do know the answer to this, but big preface, neither Chris nor I are lawyers and we do not like them.
It is a violation of the Mac OS license to run it virtualized on anything that is not Apple hardware.
Now, but does that mean you can't submit something?
Like, how would they know if you ran Mac OS under KVM and there are like there's even a snap to do this? Speaking of snaps, so sue me is a snap that you can.
The name of the snap is so sue me. Right.
Which is a callback to a classic Mac sound effect, which is a callback to Apple daring somebody to sue them.
So it's pretty great. It's a deep breath. That's incredible.
Yeah, you know the little there's if you look in the Mac before before Big Sur, there's a so sue me sound effect that's like just a hard cord or so.
I can't I can't I can't really describe it. But yeah, anyways, you can install that snap, which then is essentially a set of scripts to get a KVM Mac OS virtualized instance with varying degrees of success.
But how would they ever know? Like if you built it?
And then copied it over to this VM and used Xcode to compile and submit, I don't think they would know.
I mean, one, they're not going to enforce that license term like practically like if Microsoft did it, they would be all over it.
Right. You know, but one guy I will say, though, having virtualized Mac on Ubuntu or pop OS crap, it's crap.
If you're if like any non like super just tooling around part of your business requires Xcode, just like buy a MacBook and keep it somewhere.
Or like a Mac Mini and VNC into it. Actually, you could get used Minis pretty cheap.
Yeah. So that would be our advice. Now, that said, if you really are savvy with Linux virtualization, then you may already know how to do hardware pass through and you may know how to do GPU pass through.
That is the scenario in which I have used Mac OS virtualized that is usable is if you give it a physical GPU.
But boy, howdy. Is that a project versus just getting a Mac Mini that your team could share?
Here's the other thing. Well, I think you could technically get away with it.
Anything that relies on Apple not figuring it out or is an edge case read of the rules or is a loophole of the rules is almost guaranteed to eventually run afoul of Apple.
And so you wouldn't really want to build anything that is anywhere close to revenue generating for you with something that is skirting the rules.
Because as history has shown us, that almost always bites apps in the butt eventually with Apple. They eventually tighten those loopholes.
Or there will be some part of the tooling that doesn't work right because you virtualize.
Actually, if so, I don't know. He didn't say how he's doing this development.
If you are, in fact, going to be writing Swift, I have an iMac Pro and Swift is slow in Xcode on an iMac Pro.
Oh, no. It's the stupid Swift UI thing. It's terrible.
You're probably going to be very unhappy with virtualization.
Now, if you're like working in Windows and Visual Studio and doing Xamarin or whatever, sure, you just need to compile.
But just word of caution, like that is the reason I stopped virtualizing Mac OS.
Actually, Chris, it's kind of pathetic how bad it is.
Yeah, it's clear that Mac OS runs and has been built with the intention of always having dedicated hardware.
And they leverage GPU acceleration completely throughout the Mac UI.
And if you don't have something that supports Metal, then it is a very clunky experience.
You would think it would only be in UI, but it just is. It represents itself everywhere in the OS.
Application load time even seems to be worse. It's a hot mess.
And I've gotten close with a dedicated GPU, but honestly, after I was all said and done with it,
it was so much effort and work and it seems so touchy that I just didn't really trust it.
And there's also Colo Mac Minis. I don't know if that's the route to go, but...
Mac Stadium's still around. That's a decent solution.
But honestly, get a Mac Mini, put it on your network, like Chris said.
But the problem is, boy, we're talking about a crappy time to buy a Mac right now.
I have a brand new MacBook sitting on my bed.
You're kidding me.
I'll send a picture on Twitter after, yeah.
So you weren't worried about the fact that in a month they could announce an ARM version of that very device?
It's a MacBook Pro.
See, this is why I don't feel like Yusuf is going to want to...
Maybe this is why he wants to virtualize, is he wants to just sort of bide his time until the whole ARM transition settles.
I mean, we could have a whole thing about the ARM transition.
I don't think that's going to be a Big Bang transition.
I think it's going to be like five years.
Yeah, so you're saying you're going to get five years out of that x86 is what you're thinking.
Well, I have a very old piece of Mac OS software that I wrote for someone.
And these classic Unix utilities will work forever.
And they don't work on ARM.
And they don't work on a Big Sur beta.
So I needed a spare one to put Big Sur on.
Because, of course, I recently sold most of my Mac hardware, but for the iMac Pro.
As one does.
Because I didn't think I needed it.
I've learned a valuable lesson on how Gazelle and my stupidity have teamed up on me.
Gazelle, the third party selling service?
Yes, I have literally lost money on all these transactions, which, by the way, were a pain in the butt to do.
Because, of course, you got to clean them and you got to take pictures.
And I should have just kept my other MacBook.
You know, not to just kvetch and kvetch on the show, but I got to tell you, I hate calling into places like cancel service.
But I had this really expensive Verizon 18 gigabyte a month plan that was $120.
Oh, wow.
I know.
And once I went into it, I'm like, there's just no way I can afford to do that anymore.
So I took the time.
I called up Verizon, at least a solid 45 minutes, canceled the line.
I was really kind of proud of myself, actually, because I fricking hate calling into cancel.
And it's the one thing you can't do through the Verizon website is cancel your service.
Shocking.
But little did I know that my fate was sealed.
Because at the time I had the line suspended.
So when I'm not traveling, I call in and you can suspend the line and they only charge you like a small fee.
And I had the line suspended at the time when I canceled it.
Little did I know that that suspension meant that when the suspension expires, they would automatically renew my $120 a month data plan and reactivate it and start billing me with no notice, no signature on a contract, no email, no text message.
Just oh, by the way, you owe us $140 or what it is after taxes, because screw them.
It's almost like they're too big and don't have to respond to their customers.
I know, I know.
So let me tell you about our sponsor, Linode.
Go to linode.com slash coder and get a $100 60 day credit towards your new account and talk about a company that responds to their customer base.
Linode is the largest independent cloud provider.
And they've been around since basically user mode Linux was a thing.
They can simplify your cloud infrastructure.
I use them for the Jupiter broadcasting systems and my own.
You know, it was a couple of years ago I started using Linode.
I wanted to keep my personal stuff and the work stuff separate.
So the work stuff was on a different cloud provider who you may be familiar with.
And I wanted all of my new things to go on Linode because I thought very separate.
Keep it clean.
As I started using it more and more, I just didn't really want to deploy on the old provider.
I really liked the way Linode works.
They've got 11 data centers, three regions.
So you've got something you can pick from.
They have super fast systems.
But baked into the company and their community and their culture is the things that I love about open source, the best aspects of it.
They have like these open stack scripts that you can use either from community created ones or just take them and modify them yourself.
They're super easy to read scripts that just use natural language to deploy systems, choose your distribution.
And they have all the distributions you could want.
I happen to use Ubuntu often on the server, but they have essentially everything.
You deploy that and you can just put in there in plain English the things you want that system to do.
And it sets it all up for you and it makes it really easy to reproduce systems.
That comes in really handy when we say we're doing a segment and we need to reproduce results.
I can spin those things up in seconds.
They also have an API that has lots of tools you can use with it.
But I like the command line tool because I use that to upload files to object storage and then generate public links for them.
Now, if you're wondering how object storage might up your game, Linode recently posted on their blog various ways you can integrate object storage into your application.
Perfect use case for us is Nextcloud.
We use the S3 compatible object storage backend as a ever growing storage pool for Nextcloud.
Now that means that the onus is on us to take care of it.
But it also means our team doesn't have to worry about filling up a disk when they're working on a project.
There's a lot of great uses for object storage with your application.
So check out Linode's blog for that.
But get started by going to linode.com slash coder.
Get that $100 60 day credit for your new account and give it a go.
They also have a total cost of ownership calculator, the cloud pricing calculator, which you can find when you go to linode.com slash coder.
And then that'll give you an option to get an idea of costs for migrating from on premises systems or other cloud providers,
which I think you'll be really impressed because Linode costs 30 to 50 percent less than major cloud providers like AWS or Google or Azure.
Yeah, 30 to 50 percent. I know.
And they're an independent cloud provider that has tons of control and options for you to use.
It's just it's great.
And it's a great fit for the Coder radio audience.
I can highly recommend them.
I use them for my personal systems.
And now I use them for all the Jupiter broadcasting systems to anything new we've deployed or migrated to.
It's all on the node.
So go to Linode.com slash Coder and get a $100 60 day credit and a big thank you to Linode for sponsoring the Coder radio program.
Hey, Chris, you know what this show Linode supports?
What's that? Take a guess.
Oh, I think they also support Arch, though.
So they're crazy over there. They're crazy.
So Bennett, a.k.a. Grapefruit OS on Twitter, writes in about crazy open source languages.
First of all, I'm glad the podcast is back, even though I'm working to learn how to program.
It's always interesting to hear your take on programming as a business, too.
I'm writing today because I recently came across a guy trying to start his own FOSS company for an open source company.
On his blog, he publishes a post basically saying, if you know X about programming language, stay away from us.
But if you know X about programming language or X, Y, Z about programming language, you could work here.
But unfortunately, the list of languages he doesn't want is like standard languages like C and C++ or Python or JavaScript or Bash or CSS or even Rust.
But the languages that he does want are things like V or Lisp, Dart, Crystal or Elixir.
It seems weird that he's putting so much emphasis on the less popular, well-known languages.
I think and I'm a little worried that this stance is going to hurt his project, especially when it comes to finding developers.
What are your thoughts on this situation? And thanks, guys. Keep up the good work. P.S. Someone needs to give Mike a coding challenge.
You know, it's funny because I'm pretty sure the guy he's talking to must be Wes.
Yeah, I can see it.
It's a very Wes list here.
Yeah, really. He needs to put closure in there and he's really got it.
Yeah, he's got it. I mean, so I'm not sure what a FOSS business would be. I guess I'm a little confused.
Yeah, I would like a little more detail there, too. I'm I'm thinking it must be maybe a service with support kind of deal.
OK, so like classic like old school Sigwin or not. I can't even say the name Cygnus, right?
Yeah, you know, the good whatever the company that tried to. Yeah, you know, sorry if I mispronounce it.
Well, there's I think there's a lot of models you could point to where we make the product.
I mean, like it's the Red Hat. Well, it was the Red Hat model.
Red Hat. Red Hat's an easier choice. Yeah. Yeah. OK, so if your core product is FOSS, right.
Then you're concerned that if you pick an esoteric language, people won't be able to participate with that.
Would that be it? Mm hmm. Yeah. And I could see that.
But it could also be maybe I mean, a lot of time people start these projects to scratch their own itch.
And the creator of the project may have just decided I want to do this and something unique and I'm not interested in in more traditional languages or standard languages.
As Grapefruit OS puts it. But I look at this and I think to myself, he's right.
But it's not really a problem he has to solve unless he's very passionate about the project.
But you're not going to get into this and convince this guy to use something else. I think to myself, that's impossible.
I mean, most of this list or at least how about half the last three, Dart, Crystal and Elixir are languages West had me do on the coding challenges.
So I know them a little bit. So so Crystal, if you know Ruby, you'll be fine, basically.
Like there's it's a lower, you know, there's some concepts you need to learn. I don't think darts that esoteric these days.
Right. You got Flutter and everything. Yeah, I agree. Yeah, I don't think Dart is it's not as common as some of what you're something like Python, obviously.
But, you know, Elixir, somebody is going to have to correct this. But I think Elixir is actually seeing a lot of adoption.
I think I think it's thought who picked it up and like we need to sell something shinier than rails now.
I feel your pain, but that was not a tick. I feel your pain.
So I don't know. I mean, my question would be this is a pretty varied list of languages you've got here.
It's going to hurt in terms of like adoption, like participation, the FOSS project.
I'll tell you the part I don't like. I don't like it when a project comes out and says, if you use X, Y, Z, don't even bother talking to us.
You know that it's sort of it's almost a form of gatekeeping in a way. And I don't like that.
And so I connect with that point of the email. But, you know, we also see projects out there that just kind of have a workflow.
Like elementary OS is an example of a Linux distribution that when you're creating native apps for their desktop, they want you using Vala.
Vala and their toolkit. Yeah. And I'd argue Vala is less common than Dart.
So, you know, it's more so it's just a it's a question of what the project wants to use and it's it's their project.
All right. Here's our last one. This is great. Coder dot show slash contact.
We love the feedback. It's really great, too, as we come back as we restart the show to hear from you guys again.
It helps energize us. So please do keep going to Coder dot show and send your feedback.
Richard writes in with our last one. After listening to you discuss the summer of Rust, I wonder if the ascendance of Rust is at the expense of Go.
From a high level, they appear to try to solve the same problem to be the replacement language to C++ for system level performance programming.
You guys agree with this? And also the big question for the future, which one should a developer learn if they wanted to only choose one?
Oh, my God. I get to say my favorite answer that I haven't gotten to on the reboot. Ready? You ready? Yes. Yes.
You have to pick the right tool for the job. There it is classically trained.
So, Chris, would you like to say anything derogatory about Go so you could have lizards and gophers attacking you?
No. In fact, I see a lot of large deployments of Go. I just recorded an interview with some folks behind traffic for the self-hosted podcast, which is a huge Go app.
And I don't do Go, but my understanding was the Go community is not like shrinking.
No, I see a lot of like, you know, if you do hashtag coding on Twitter and say something bad about Go, you will hear about it.
I think where Richard may have a point, if this is even a real thing, is in the mindshare.
I think there's a lot more hype and discussion about Rust than there is Go. Go has kind of become standard, I guess, normal.
I'm going to fry some alligator bacon here. Oh, that sounds pretty tasty. It's Florida. That's all we have.
Although it's very fatty. Surprisingly so, yes. I sort of think a lot of people talk about Rust who are not, in fact, doing Rust as sort of an alpha nerd flex.
Well, you know, going back to a theory that we have not touched on since the reboot, the dark matter developers out there, right?
VBasic forever. Sorry.
Right. Well, the ones that we used to classify as VBasic developers, they're probably now.NET developers or, you know, something of that ascendance.
We used to talk about that's really when you look at what people are actually writing in is the languages that get used in corporate environments.
That's where maybe the vast majority of developers are getting their work and their daily jobs.
And there's almost zero doubt in my mind that C-Sharp is much more pronounced than, say, something like Rust or maybe even Go.
Although if I were going to wager, like if you and I were going to have bet a Florida steak on it, that would be alligator, dude.
OK, if we're going to bet an alligator steak on it. I bet you there's more internal corporate Go development than Rust development.
Oh, I'll take that action. Really? You think so? You think there's more people doing Rust internally, just little tools they're building out or something?
So are we saying only internal dev? Not like... Yeah, dark matter developers. OK, so no sleazy consultants. Got it.
No, I'll still take that action. Yeah. Really? OK. I'll bet you a steak dinner. Yeah.
I don't know how we'd ever know, but if anybody has any insights, coder.show slash contact.
I got to feel like it's something in the Microsoft ecosystem that is the most common dark matter development environment
because so many people have Windows file servers and active directory. Oh, dude, Java, man.
Yeah, yeah, yeah, yeah. I could definitely see that, too. Or actually, you know what the right answer is, but it's kind of a cop out.
It's JavaScript. Yeah, I was just going to say that. Yeah, you think about it in terms of server side applications and internal corporate websites,
and it's going to far and above be JavaScript and a Java server on the back end or some crap.
You know, it's very likely. So I don't know if I agree with the premise, Richard.
Only other than in the discourse, I think Rust gets a lot more conversation, maybe at the expense of Go possibly.
Although I would weirdly recommend Rust to answer the second part of his question only because Rust forces you to do a lot of memory management stuff.
And it's just sometimes if you already have done that in the past, like C++, it's still good to, you know, flex those muscles every once in a while.
And if you've never done that, let's say you're working in COD help us mission critical JavaScript code,
then you need to learn some things and Rust will be a cruel tutor.
Ah, good point. It may make you a better developer, kid.
Welcome to the Marines. We code in Rust. Semper Rust. Sorry.
They probably do now. All right. So I snuck this one into the hoopla.
I didn't even tell you about it, but it picks up from what we've been covering for weeks now, and that is Google has announced today that we're recording that they are going to start enforcing their 30 percent cut on in-app purchases in the Play Store starting next year.
That means developers who have customers pay them directly with a credit card using like Stripe or their own implementation are going to run afoul of Google Play rules.
And Google will require a 30 percent fee from those payments. However, you're going to do it.
They are, quote unquote, clarifying an existing policy. And in Orwellian speak, how Google puts it is listening to developer feedback to improve Google Play is how they announced this on their blog.
I think Lando had a similar experience with Darth Vader at some point.
Yeah, I mean, it really feels like that. Developers are our partners. So give us a cut.
So here's what I think happened. More bacon. This will be lizard. No, no, not lizard bacon.
You got that down there? We do have lizards, actually. Lots of lizards.
Yeah, oh, I know. But do anybody actually? I suppose somebody is cooking them up.
This will be cottonmouth bacon, which never, ever go near a cottonmouth. They will kill you.
I see Uncle Tim calling Sundar being like my man. So we did a quick analysis of your app store over there. You mean the Play Store, my friend? Yeah, yeah, yeah, sure.
You know how much money you left on the table last year? What do you mean?
Learn from us. We're sending Federici over. He's got great hair and he's going to get your enforcement.
Yeah, I think this is very savvy. I mean, it sucks.
It's also savage, but.
I'm going to go into strategic mode here. These are Chris's strategic opinions, not his actual opinions.
But strategically, man, this is savvy. So they're letting Apple take the spear of the blowback on all of these issues.
Letting Apple kind of eat that and then they sit back and they see how it plays out.
Think about how widgets have been massively successful in iOS 14 and David underscore Smith's Widget Smith app has been the number one app since iOS 14 came out.
And all it does is let you customize widgets, something that Android has had forever.
But on iOS, it creates a massively successful app.
David Smith is set. You know what's crazy about David Smith, too, and that Widget Smith app?
The rate he releases apps. Well, geez, the man must be caffeinated to an nth degree.
He must be a Cylon. I'm pretty sure he is a Cylon. You know, this is like his 50th something app he's ever done.
Yeah, it's crazy. Like every other month, the guy's got an app out. And this is the one, though, that really took off.
This is his home run. Yeah. Yeah. After like 56 apps, this is the one that is a home run.
And now he's an overnight success after after a decade of hard work.
He's an overnight success. But it's funny how it works like that. Google looks at the app store.
They watch Apple do these draconian policies that end up working out great for them.
And Apple takes the brunt of the antitrust heat on it. And then Google, Google can sit back, watch the reaction,
watch the results and then make some of the same implementations. And we see them do this over and over and over again.
And now they've done it with a 30 percent fee, which in the long run strengthens Apple's position, too.
So the two are now supporting each other with this. Google's looking at us going, we got to get this on lockdown if we want this to stick.
Now, this could be very good for both of them, because now it sets that both of them in the market are doing this.
But it also could get duopoly charges thrown at them at some point. We will see.
I think this is clearly Google following Apple's lead in a way that is clever and benefits them greatly and essentially just brings them in line
with the app store that is clearly a profitable app store for a lot of developers.
Well, so this leads right into our next story. The Coalition for App Fairness, or as I call it, impotent NATO.
It's not going to work, guys, like impotent NATO. Spotify, because, you know, they can't help themselves.
Spotify, Epic Games Shocker and a bunch of other like app companies have joined forces to take down the Thanos that is Apple.
Yeah, it positions itself as a nonprofit organization that represents a bunch of developers interests.
Now, I wish that they could win. I really do. I'm going to go into Chris strategic mode, too.
I really wish they could win. Like, my heart is with them.
Tim Sweeney, not so much kind of crazy guy, but, you know, my heart is with the idea.
But Chris, have you ever seen the Harlem Globetrotters? Oh, yeah.
OK, so imagine if we took a peewee basketball team from Kansas, Florida, because they might God knows what they'll do, but from like Wisconsin.
Sure. These kids are like eight. And we say, all right, kids, you're going to play a basketball match.
Yay. Against the Harlem Globetrotters. It's not going well for those young guys.
Yeah, for young girls could be a girls team. But just connecting it back to the Google story.
I think Google's doing this because the writing is on the wall. Apple's going to win. Right.
It's not even a contest. And there may be even just strength in Apple's case.
And you look at this coalition for app fairness and your biggest members is going to be Epic Games and Spotify.
And then, you know, base camps in there. No surprise there. Blockchain dot com Proton Mail jump out at me.
But this group, you're right. It's like the idea that an armed group in the US could take on the US military with its drones and its missile strikes.
Right. Like it's just it's a totally different scale of a warfare that Apple is capable of waging.
However, if this group were to leverage their financial resources to turn up the heat to create noise, to create campaigns, to create conversations,
to run ads, to just blast the messaging against Apple, to get everybody grousing about Apple.
If they were manipulative with their money and used it to undermine Apple's credibility in the community,
they could maybe get some success. But going after them directly is a legal fight.
Well, it's just going to go nowhere. At the end of the day, it's Apple store and it's their terms of service.
It's just going to be the way it is, unfortunately. Yeah. I mean, the only possible thing that could happen.
And again, I want to be super clear because I can already feel the emails and tweets coming.
I do not like Apple's policies. I think I've spent eight years the show not liking Apple's policies.
But you have to look at the situation with a little bit of a sober mind and say, you're just not going to win.
I mean, maybe I'm wrong. Maybe there will be some government action. Right.
But I have less faith in that than I do. You know, you know, the Denellon, New Jersey Little League team or whatever it was, the Del New Jersey.
Yeah. Peewee basketball team, Wisconsin, Wisconsin. I don't know any towns, Wisconsin.
I'm sorry. But yeah, you know, I think their best case scenario is to give the government researchers and panels ammunition to go after these companies.
But putting your faith in that seems like such a frickin long shot.
Honestly, if this is a if this is an area that really concerns you, I'd like to introduce you to my friend, the Web.
And I just say have a go at it that way. Yeah. OK, but there are things that you can't do.
Because Apple doesn't let you see what I did there. Yeah, I mean, that's always been the case, though.
It feels like that legitimately seems like if you go back to the 80s, there's things computers couldn't do either.
But people still managed to figure out a product they could. So the thing I don't like is these apps rule.
I said, but let's be honest, a thing I don't like that these new ways of monetizing your apps force you like, you know what?
I am making an app. I make the automation tool is the love of God going to be done soon.
If not, I'm going to have to call underscore David because I don't understand.
How do you ship? He's like, you just let go of the code.
We're being forced into this world where we have to think of our programs.
I know I said a word from the 90s as like ongoing milking the cow services instead of like, you know, you bought my program for 10 bucks.
Which I realized 10 bucks is a handsome fee these days. But I think that's creating crappier software, like in a fundamental way.
Right. People in an effort to monetize their work are having to either, you know, you've seen this, you know,
they gimp the app so that they can have like an in-app purchase to upgrade because you don't want to go in as a paid app.
But you want for the for the search results and for the store ranking.
But you also like don't want to give the full solution for free. So you get all these apps that are like look like they're free.
And then if you actually want to have the app useful, it's like two bucks, five bucks, whatever.
Mm hmm. That's a crappy experience. I'd rather just give you the five bucks and not have that rigmarole.
And that's a very modest version of what I'm thinking of. Right. Like, let's talk about a smurf berries.
Delicious. Not if your kid gets your credit card. Oh, yeah.
Yeah, I actually one time. Yeah, I had a fifteen dollar a month Roku app subscription that my daughter accidentally put on my account.
Fifteen dollars for a Wi-Fi Roku remote. Give me a break. That's insane. Yeah. There's all kinds of scams.
All right. So other things I'm depressed about. Ruby three point. Oh, preview one is released.
Why? Why? Wait, wait. Why is it got you down? I think we have hundreds of hours of recorded evidence that I don't like change.
OK, no, I'm actually pretty excited about it. It's looking good. I like some of the static typing stuff we talked about a few weeks ago.
I do worry how clean of a transition this is going to be. I think it's going to be I'm a little worried about a Python two Python three situation here for Ruby,
although the community has said pretty loudly that they do not want that to happen there.
So we'll see. But there's a lot of stuff in Ruby three that wasn't in Ruby two and like even for the, you know, several dozen rails apps I have running around.
I'm definitely concerned about what is the transition path for legacy?
Who was the group that we were talking about recently on the show, Mike, that talks about the way to do Ruby is to just do it fast and hard.
And, you know, get up. Was it GitHub? Get up. OK, that'll be a thing to watch is what sites and services actually jump on that three auto train and how fast they implement.
And how long into the release cycle do they wait?
And all of that will be what I consider fascinating to observe.
Yeah, it should be. I'd like to see particularly what the rails rails maintainers do to make this not awful.
Yes. Not awful. The goal. I just get to sit back and watch the show.
But I do appreciate that there's people in the audience that this has a real world impact.
You know what? I'll just rewrite it and rust. It'll be fun.
I thought what you were going to bring up was the big Swift news this week.
You know, I caught my radar because it was a Linux release. So, yeah.
So I think we had this on our slack and someone else sent it to me.
So Swift system is open source has and adds Linux support. I guess I shouldn't have been surprised, but I got to be honest, I'm pretty surprised.
Yeah, I am still trying to understand the details of how that Linux support works.
So I think this will be kind of an evolving story. And more importantly, who is going to be using it?
But Apple and we should say the Swift community, right? Because it's open source project are not backing down on the idea that you will use Swift as a server side language on Linux.
And it will be a first class citizen, which I know I said the other week that I didn't think that was going to happen.
Me and me and Wes had a chat in our slack kind of, you know, debating what the viability that would be.
I would love to be wrong. You know what? I think Swift is OK. I can't say that phrase, you know.
It's a Swift. No, it's my life. OK, I mean, it's just was that was what was that?
I can't take it. I'm going to I'm going to lay my butt back in the hospital. I can't do it. So. All right.
All right. Well, you know, I mean, this is not bad. See? Yeah. Yeah.
You know, Mike, it's just not the tool for you. Remember, we got to take our Sousa diplomatic approach here. It's just not the tool for you.
Objective C is the best language ever. This is on the heels of September 22nd when they announced Swift on Windows, too.
They brought their ported Swift to Windows and made kind of a big, big to do out of it.
And for Swift system on Linux, they say our vision is to eventually act as the single home for low level system interfaces for all supported Swift platforms.
So that would be Mac OS, Windows and Linux at this point. Also, if you are using Swift on Windows, I really want to talk to you and perhaps get you a psych about.
You know what? Let us know. Maybe there's somebody out there. They sent us in a thing that could that could be a thing.
Well, what do you say we wrap up today on this doozy here that landed on Robin?
Is it clean, you think? Robin, Robin Kleene, I don't know. K-L-E-E-N-E.
The Era of Visual Studio Code is the title and it grabbed both of our attention because you and I have just recently on the show talked about loving Visual Studio Code.
And I think it's, you know, even probably one of the most used text editors on the Linux desktop, a Microsoft text editor.
And Robin writes, I believe a new era of text editors is emerging and quickly becoming popular has ended, which I'd say over the years of the show.
We definitely have watched a lot of different text editors come and go, but it does kind of feel like it's sort of ended with Visual Studio Code.
Or he go, they go on to say VS Code has reached an unprecedented level of popularity and refinement, laying a foundation that could mean decades of market dominance.
If like me, one of your priorities for your tools is longevity, well, then that means VS Code might be a great text editor to invest in learning today.
The case for VS Code's longevity comes from several points. Popularity, the text editor as a platform, paradigm transcendence, which is a transcendent paradigm as a desktop app by becoming a hosted web app as well, and company management.
Its management is a powerful tech company and it is being developed aggressively.
I think this might be true. I do kind of feel like the era of a new text editor every other week has come to an end.
We could have done text editor weekly for a couple of years.
Yeah, remember when TextMate 2 kind of failed to launch basically?
Yeah.
Yeah, there was an explosion. And Panic just released a text editor for Mac called Nova.
Which does look pretty feature rich. Have you given it a go?
I have. And I spent an hour trying to figure out how to run a debugger.
And then I said, hey guys, I know I'm dumb, but can someone, I tweeted at them, can someone explain to me how to get a debugging console up?
And they're like, you can when we add that feature.
It's like, oh, OK, well, let me know.
So it's very pretty. If you remember, what the hell was it, Coda? Was that the rolled editor?
Mm hmm.
It has a lot of the concepts out of Coda, which was never my dev workflow of choice.
There was a brief time when I was a emacs user that I don't talk about.
Oh, that was beaten out of me.
So, you know, I don't think about my workflow the way they do.
Also, it's not on Linux.
So like so one thing I will give you as code and like a reason it has dominated my workflow is it is exactly the same on Mac as it is on Linux.
So if I need to switch back and forth or whatever machine I have, you know, I have the same plug ins.
Rubocop behaves the same way.
But it's not just that, is it? Because you could make that same argument for Sublime or even Vim or Emacs.
I'm sorry, you can't make any argument for Emacs.
That's true. But I do think I mean, Universal being the same application with everything being the same across platforms is critical.
But I think it's also VSCode sort of represents the perfect combination of extension integration and all and the command like all of the things that different text editors kind of took a crack at where Adam got really, really close.
VSCode kind of brought it to its its final form. And I think it's in part because it's the same on every OS, but it's also all that other stuff that they got right.
Sure. I mean, I think VSCode is great. Right. I am super loving pilots, which is like just a quick detour.
Microsoft's devotion to Python and like pilot like VSCode is the best Python editor I have.
And I have like proprietary big fancy ones.
So I have nothing bad to say. I do maybe want to caution that there was a point in time where everybody who was a Mac user at least thought that there was no discussion on text editors.
It was either Vim or TextMate or BB Edit.
Yeah. Or BB Edit if you were, you know, a Mac OS nine user.
Then every all the Rails hipsters were like, no, be a man, use Vim.
Actually, Rails hipsters would never say be a man. They would like be whatever you are.
Be your best you, but do not use Vim.
And then like, OK, everybody had to learn to Vim. Right. People were selling courses just on Vim, which fine.
And then now everybody and then at one point, like it was kind of this explosion of editors when we were doing the show before.
Everybody had an editor. Now it's kind of crunching down to VSCode.
I'm just trying to think how you'd beat it now, you know, because it's so many things.
The more I think about it, it's a big part of it is the fact that they've open sourced it. So that that box is checked.
The JSON config is super nice and portable. So they've checked that box.
You know, the theming is is really nice and integrates nicely with my different desktop environment.
So they've checked that box and it just kind of goes on and on.
I even have VSCode self-hosted inside my Home Assistant instance and I can live edit the YAML configs of my server inside the Home Assistant UI using VSCode's editor.
And it's just it's it's just like, how do you beat this now, especially when you've got a multi-billion dollar corporation behind it?
Who also, by the way, owns GitHub. Yeah, about that.
So somebody asked, remember Adam? Yeah, they own that, too. That's like their.
So, well, how do you beat it? You beat it the way you beat anything else, right?
It gets too big and too dominant and collapses in some way.
And you specialize maybe like I could see if Nova could build an editor that.
You know, quote unquote, felt more Mac native than VSCode.
I could see that just being a draw for some people, especially if they could kind of figure in some of the minimum viable features of VSCode and build that in.
I could see a space for something like Nova or there's a few editors that are, you know, even hardly mentioned anymore, but it's a web based one.
But I love Code EMD. It's not a it's not a like an IDE or a code editor, but it's a markdown editor and it's fantastic.
It's web hosted. Nobody talks about Code EMD.
I still thought like cloud nine was good, but I know people don't like it. Oh, yeah.
My son and daughter have some sort of Google hosted block, drag the blocks, build a program.
Oh, my God. That thing is so hard. My kid brother had that for school.
Yeah. And he and he called me. He's like, can you help me with my computer homework?
I'm like, sure. Great. What is it? Cubase? No, it's this Google thing.
I couldn't figure it out. I was like, what? What are they teaching them? This is nonsense.
Why can't I just read it? Just give me a terminal. We'll be fine.
Yeah, I know. I know. You know, but you know what they've done now, which works for my kids, is they've Minecraft theme it.
So what you end up doing is you're you're moving the guy in Minecraft.
Yes. And so instead of like system dot Lang, it's system dot Minecraft school.
Yeah, but there's actually no code. Right. It's like if folks have never seen this, they look almost like puzzle pieces.
Right. And you've got to like snap them together.
And the evil genius who sold this to schools. Nice work.
Yeah. Yeah. You could so just the sales pitch almost writes itself, doesn't it?
Yeah. It's a it's you don't have to worry about syntax.
You're learning the concepts, which I guess is true. But my inner old man is like, I just want a for loop.
I honestly feel like learning Cubase was one of the best things I ever did in school.
I still think they should teach Cubase. I loved it. I loved it.
And, you know, the thing about it is it taught you how to read that, I think, carried forward to Bash and Pearl and PHP and Python.
And even even the languages that I have less experience with, I still have at least, you know, the basic understanding of how to read through them and try to kind of grok what they do.
Well, and how limited the language was, right, was a feature because you had all these little quote unquote tools in the language that you could use.
But there weren't many of them. So you had to find clever ways to like, you know, basically hack stuff together.
Yes. In my case, straw little rocket ships on the screen using ASCII.
Nice. Well, I want to say thank you to our Coder QA crew, our quality assurance engineers who are keeping the show going to support the show.
They get a limited ad feed and they're also going to get the Coder quarterly report that's coming out very soon at Coder QA dot co.
That's our membership program to support the production of the show and also get yourself a few extra perks.
Mr. Dominic, is there anything you want to plug like the Python position or the Twitter account before we get out of here?
I would say follow me at Twitter at Dubonucco and the Python position may be filled.
I actually have to check back in. Very good.
Well, thank you very much to our sponsors of Cloud Guru and Linode, Linode dot com slash Coder for that hundred dollar credit for a new account.
And thank you to our Coder QA crew for keeping us going. Check your feed soon for the report.
And thank you to our livestream who joined us over at JBLive.TV on a Monday at noon Pacific, 3 p.m.
Eastern. We'll see you right back here. Links at Coder dot show slash three eight one. See you next week.

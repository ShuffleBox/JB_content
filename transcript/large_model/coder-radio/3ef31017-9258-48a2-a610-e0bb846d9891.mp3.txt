This is Koto Radio, episode 335 for December 10th, 2018.
Hi everyone, and welcome to Koto Radio, Jupiter Broadcasting's weekly talk show, taking a pragmatic look at the art and the business of software development and its related technologies.
This is our 335th episode, I am back in the beautiful Pacific Northwest, and I am joined every single week by my co-host, the one, the only, the dodging the illness, Mr. Dominic.
Hello Mike!
Dammit Captain, I'm a JavaScript programmer, not a software developer.
Burn, nice, coming in strong this week. I like it. Get everybody fired up. How are you doing? Are you good? Have you avoided any travel plagues or kid plagues?
Because when you've got kids and a lot of travel, it's like you're Neo in the Matrix dodging bullets right now.
So, the kid cancelled my trip to Denver.
What?
I really think this is a conspiracy, actually.
No!
I think my wife is trying to keep us apart.
You know, I think it's what it is, because I was planning to wine and dine you while you were in Denver, you know?
I was going to take you out, feed you good, and drag you back to your hotel room.
Wait, what now?
I mean, four or five, nothing.
Anyways, let's restart. So, how are you doing? You good? You sick? We'll just cut all that. We'll just delete all that.
Yeah, I'm sure we will.
I'm a little under the weather. My son is okay.
But, of course, he is not traveling to the family event with the missus, and therefore, I got childcare.
And you know how childcare can be. They cancelled.
Yeah.
Yeah, and because I'm living in a swamp, I have no one to call but the friendly neighborhood alligator.
So, yeah, I will be staying home while you get to drink Linux and open source beers off of the stomach of, I can only imagine, Carl Rochelle from System76.
Yeah, that or I'm going to glitter the town pink with Emma.
I'll tell you though, we're going to have a party. We'll just have to reschedule. Eventually, one day will happen.
But you know...
You know what? WWDC. We could do it live, and I could, like, light myself on fire right on stage.
Are you going to go to WWDC this year?
As much as I'm fond of spending money, $1,600 and then, like, $1,000 for a hotel room is not going to happen.
Yeah, I didn't think so. Yeah, I didn't think so.
No, we'll figure it out. Although, you know, now we know that the show won't get weird. Like, for all we know, had we met...
See, here's the thing, though, is what I'm worried is if we go too long, then it's going to have negative consequences on our relationship.
You know what I'm saying?
Like, because what we have going on between you and me is special, and we've never met in person.
So, if we meet in person, we might not like each other anymore.
It could happen.
You never know. So, I mean, probably not, but it could have happened, and now...
See, the dirty secret about me is I'm a lot less crazy in person.
Huh. I wonder if that's true for me.
It depends on the day you get me and the people I'm around.
I can be one low-key mother-effer, or sometimes I can be, like, the most, like, fired up, like, intense person.
Although, in Denver, you never know. You pick up the wrong cookie, and you're flying, so...
I'll show them a thing or two. Let me tell you what.
All right.
So, you know who else is flying?
Who?
Right off the edge of glory.
Oh, my goodness. Yeah. Is this unbelievable or what?
You know what? Five years ago, I would have bet you any amount of money this would never have happened.
Five years ago? Five minutes ago?
I mean, just because this was a fundamental 20-plus-year investment by Microsoft,
and now for Microsoft to be moving edge to Chromium is one of the biggest platform shifts I think we've ever seen.
And because think of the size of Microsoft, and think what this means for Electron. Think about that.
Think about what this means for Electron.
And you know where this is going, don't you?
This is going...
Tell me where it's going.
This is... I'll tell you why Microsoft's doing this.
Because what they're going for is more valuable than Edge or Triton or whatever you want to call the rendering engine.
What they're going for is creating, I think, or recreating a lot of their apps in Electron.
We've got Skype in Electron now. We've got Visual Studio Code in Electron.
Microsoft is... I guess, so I don't have any public things to point to,
but I have reason to believe that Microsoft is working on projects behind the scenes
that are applications that haven't been publicly released yet that are also Electron based.
Are we still in the alternate universe from last week, the dark universe here?
I guess. I guess maybe we never got out.
Maybe we never... It's like those Holodeck episodes where you leave the Holodeck, but you really just are still on the...
It's like a new simulation.
Yeah, that's what's happening.
So, of things I might want for Christmas this year, because you know, we're in the holiday season, Chris.
More Electron was not on the list.
Well, what if instead of running a dozen different Electron engines or Chrome engines to power these Electron apps,
what if your operating system had one super efficient engine built in that these Electron apps could just run off of?
Could we call it the Windows subsystem for Electron?
Yeah, or we would call it the Edge engine or something.
So, one Edge engine, so you could have Slack and all your other applications that maybe it's Visual Studio Code,
maybe it's a yet unreleased but very large Microsoft product that is rewritten in Electron.
I think about this, too.
Think about as all roads eventually lead to Azure, and as things like Office 365 become one of their premier services platforms,
it just makes a lot of sense to start building some of those things that connect back to those roads in Electron,
because otherwise they're writing the applications twice in the case of Office 365.
So, my understanding of the architecture of Electron, though, is that would also require significant changes in how Electron itself works.
Yeah, and it's going to require significant changes to Chromium.
Although, who owns Electron?
And, you're catching on.
You're catching on here, yeah.
And, who has the power to become probably the second largest contributor to the Chromium code base?
And, who has an app store that doesn't have any apps?
There you go.
Was that too mean?
No, you're on point there, too.
So, this is, I think, why they're willing to kill a 20-year legacy.
So, you just blown my mind.
I took this – see, I think I'm fighting the battles of the early 2000s.
I'm thinking about web standards and how it is truly the case that Chromium is now the IE6 of our time.
But, maybe you're right.
Maybe we should just welcome our new Chromium overlords.
Well, I think there's just no getting out of it just because of the sheer market size of Android.
And, iOS is also WebKit, which is pretty damn close to Chromium.
Damn near just cousins.
Yeah.
Kissing cousins sometimes.
Yeah.
You got to factor that in.
And, there's just – there is no territory to win anymore.
And, I feel bad for Mozilla.
I feel really bad for Mozilla.
I always feel bad for Mozilla.
But, this might be the better way to influence something this large now.
Is, instead of pretending like it doesn't exist and siloing all your innovations into your own engine that 1% of the web uses –
I'm being mean there, but you get my point.
Instead, use your incredible weight now as one of the world's largest open source contributors to affect the Chromium project
and push it in a direction that is complementary to your platform.
And, that's what they're going to do.
They're going to make – I bet Windows will be the best platform to run Chrome on, which it almost already is anyways.
But, we did have this – or something similar to what you were describing before, right?
The Windows – and I'm going back to WinRT again, people.
Yeah, buddy.
Win.js, right, where it was native hooks via JavaScript into the WinRT, I believe, APIs.
Did you see – yeah, I agree.
And, ARM is part of this.
ARM is definitely part of this.
They are already – have already been contributing upstream to the Chromium project specifically to improve it on future to be released ARM devices.
How is this not just like IE6 2.0 though?
Well, at least it's an open source project.
I mean, it doesn't sound as horrible as I thought it was going to be, but, you know, like, you still have – I'm trying to think, trying to play this out.
Like, okay, you're an app developer.
You want to run a desktop app.
Yeah, I guess it works.
I mean, the only thing that's going to happen is on Linux and Mac, but particularly Mac,
your app is going to be like a hundred times shittier than it is on Windows.
Because my assumption is – well, that's interesting though.
Is Microsoft going to embrace and modify Electron?
I didn't say extend.
See, there's so many things they could do, right?
They could – yeah, so we're getting way too off the rails, but they could make it like –
No, I don't think we're off the rails at all.
I think if you look at why they bought GitHub, I think Electron was part of that.
Well, I could see Electron – I think somebody in the chat minutes ago said something about
Electron being like a new.NET.
I would say less.NET, but like a new UWP targeting platform where maybe you can target
with the.NET languages, right?
Or like you can target Electron as your platform and write using C Sharp, perhaps.
Or maybe you just – maybe you can't, but things get weird if you make Electron a OS
level available framework instead of being –
No, you're not making Electron.
You're not making Electron.
I don't think so.
I think it's a little – it's a Chrome runtime that is system level.
So it's going to be an Electron-like thing that gets –
I think Electron gets updated to recognize when it's running on Windows, instead of running
its own rendering instance, it uses the built-in system rendering.
Oh, so it's like ActiveX.
Kind of, yeah.
You know what?
They're going to bake it into the OS like they baked IE in is what they're going to do.
So it's going to be this weird situation where, for instance, like a giant Electron app that
I use is VS Code, right, and I use it on Linux, Mac, and Windows in that order because Windows
I tend to be in proper Visual Studio.
But theoretically, VS Code in the world you just laid out would perform astronomically
better on Win 10 than –
All of these apps that are being built out there would.
And the word on the street is there's other application vendors creating applications
in Electron Adobe that we haven't seen yet either.
And there's going to be larger and larger incentives to have a first-class Electron platform.
I don't know if I believe it.
This is just what people tell me.
And I, you know, I ingest, think about it, and relay it, really.
I don't know if I believe it's going to happen.
But I could definitely see that's what Microsoft's getting ready to do.
And then they can keep pushing multi-platform applications.
I mean, there's a lot of benefits to them.
Keep pushing Visual Studio, right, because like, yeah, especially if it's Electron because
you just have like a wizard you run through in Visual Studio proper that like builds it
into an IPA or a DMG.
And then let's just say, you know, a new kind of like light version of Photoshop,
like the rebuild of Photoshop one day, launches.
And it's an Electron application.
Well, guess where you're going to have the best Photoshop performance?
On a Windows desktop.
So that's a great selling reason for their hardware partners like Dell to say,
come buy a first-class Photoshop system with our, you know, Dell whatever tower.
So it just could be a huge investment in the future for them.
Jesus, it's just such a savage move.
It's savage, you know?
Savage.
Isn't it?
You know, we haven't covered all of it, but they've done a lot with this GitHub acquisition
that has been, and then the speed of it has just been really like fast.
Yeah.
Yeah, it's like, I think what surprises me the most is the shit sandwich they had
to eat as a team to decide to do this.
Like the conversation that has to start internally to say, hey, you know that thing
that is maybe one of the most associated things with our brand and that we have,
we were almost destroyed by the federal government and shattered into many different pieces over.
If people have been through that, the magnitude of what has happened is mind-bending.
Microsoft was almost destroyed as a corporation over this web browser that they have now just decided,
job done, we'll ship that stuff.
It's astronomical that they as a company had the capacity for that level of self-analysis,
that humble attitude towards their own product from a detached perspective and they must have had
a come to Jesus moment about the market reality and just decided this is the next step that we have to take.
And it's just, that's why I say it's savage.
It's just, it's cutthroat.
It's ruthless.
It's impressive.
It's impressive.
And that's not all they're doing.
No, no, no.
I mean, I think they're going to just wrap it up there.
No, yeah, no.
Visual Studio 2019 turning some heads.
It has some interesting stuff.
They're pushing the live share, which is their collaborative coding thing again.
Going to skip over that for now because I haven't tried it.
It's one of those things though, if you're working in a remote team like I am, that might be what you want.
Probably a little bandwidth dependent.
It's probably not much worse than Google Docs.
It's probably like, you know, a tech stream.
Yeah, well, see, I've never used it.
That I have to admit.
The one that really turned my head, well, actually, I'm jumping ahead, Chris.
An image button class in Xamarin Forms.
Oh, yeah.
It's only taken like five years.
Yeah.
So for those who haven't done Xamarin Forms, the idea of having a button that is an image,
which is simple on both Android and iOS, was stupidly hard in Xamarin Forms.
You had to usually import like third party stuff.
There was like a Xamarin Essentials pack.
Way back in the day, there was something called Xamarin Labs that you had to import and it was kind of janky and bad.
This is, for me, the most important announcement of Microsoft Connect because it took five years to get an image button.
Oh, I thought you meant the release of the new Visual Studio preview.
I just want my image button.
I thought you were going to talk about the Azure integration with this one. It is very strong.
It's like one click up. Now you're working with Azure storage.
Microsoft account. OK, you're good to go.
How about the AI IntelliSense? Did you see that?
I did. I am reserving judgment.
It sounds very trendy.
But the demo looks good, man.
I mean, of course it's a demo.
Microsoft knows to be careful, though, with IntelliSense.
IntelliSense is one of their things they're well known for.
And I think if they're going to roll out a new version of IntelliSense and slap AI on there, they're going to be, I would bet, it's in good shape.
But I do wonder, though, my understanding is it's Azure powered.
So is it like constantly phoning home or is it like is there some local capabilities there?
That wasn't I don't know if you saw that wasn't super clear to me.
No, yeah, it's not clear. Yeah, I haven't seen it.
I didn't see it in the blog.
Okay, that's where I was reading about it was on their blog.
But, you know, you could see if there was a way to anonymize that stuff.
Like people are often correcting IntelliSense.
I'm sure they are. Right. Yeah.
And then if you could pull metrics on how many times people are trying to fix something that IntelliSense gets wrong, then you could adjust it.
Now, the question is, are they just storing that?
And then how do they refresh it?
Local, you know what, after the show, I'll try to look into that because that is fascinating the more I think about it.
The other thing I was trying to figure out, is this something where works best in Visual Studio proper?
What about Visual Studio Mac?
Yeah, well, this is for Visual Studio 2019 proper.
Right. I think all of these things we've been discussing, except for my image button, which is on everything because it's amazing.
Sorry.
Is basically Visual Studio proper, which, you know what, I have to be honest.
Speaking of like things one might, you know, right cross platform, I was sort of hoping for VS proper or at least VS for Mac Linux version.
Because it is just mono develop under the hood.
Yeah, that's called me for a little bit.
Yeah, like why not just, you know, oh, and by the way, Xamarin now works with GTK sharp, has for a while.
Come on, I was just do it.
I was going to mention to just before we go too far off of the IntelliSense code, that new AI assisted IntelliSense code capability is available as an extension to Visual Studio code, the current version 2017.
So you could.
Yeah, I think.
Or at least.
No, no, no, no, no, it's visual.
No, I'm wrong.
It's Visual Studio 2017.
So if you're on Visual Studio 2017.
Right, Visual Studio proper, you could install this new AI assisted IntelliSense code.
I wish didn't call all three of these products the same name.
That's why I got it mixed up.
Yeah, yeah.
So we find ourselves covering Microsoft a lot in the show now.
Yeah.
What the hell's what's up with that?
You know, I was just looking over the year in total because we're going to do like a year wrap end of year.
Yeah.
Yeah.
For like Linux action news and for Linux unplugged for the new cycle.
And you look at Microsoft and there's just there's so many things they've done this year.
But just a couple of the big ones that are pretty noteworthy is they joined that open innovation network.
And, you know, that Linux definition and said, OK, no more patent suits over that stuff in this Linux definition.
That was pretty big.
Of course, we know about their continued releases in dot net core and.
PowerShell core and all that stuff, but also the GitHub acquisition was in June.
That was back in June.
They made they announced the GitHub acquisition.
That was a huge fundamental deal.
Huge deal.
Huge deal.
And there's been other things.
There has been there has been significant improvements to the subsystem for Linux this year.
There have been multiple distros that entered the Windows Store this year, including one that's actually 20 bucks.
It's actually for pay.
Sphere OS, which is going to be a big deal next year.
The Sphere OS, which the devices they not only did they announce them, but they actually shipped when they said they would ship and they run Linux.
And this year, Microsoft announced that Azure runs more than half Linux and that sometimes it's well into the high 60 percentage.
Almost 70 percent systems are running Linux on Azure.
That is just the highlights.
That's not even getting down to the nitty gritty releases and individual project things and stuff like that, like their contributions to Chromium and the kernel.
Like it's just it's unbelievable.
When I go through that list, I was just looking like going, holy shit, Microsoft, like, what the hell?
Savage. Is that the word of the day? I don't know.
Probably I probably shouldn't say it's probably I don't know.
You know, I should be careful those kinds of things.
But I just look at that and I go, they are really on fire.
They've they've gotten into a gear and you look at the moves they've made like that GitHub acquisitions.
Just so so on point like that was such a good move for them.
And now this move to the Chromium base again, just the whole thing is surprising.
What's weird is like GitHub has been made better, in my opinion, so far with this Microsoft exhibition.
Any specifics or just a feeling?
I do have a couple of specifics.
Some of the continuous integration stuff for the what they used to call the Mobile App Dev Center, which was a terrible name.
And I think now they then they called Microsoft development something. And now I think they just call like Azure apps.
The naming thing has not gotten better.
But basically, it's the continuous integration service for Xamarin, iOS native and Android native and like Cordova apps.
So mobile apps, Microsoft App Center, I think is the right name now, maybe.
And that's like a pretty quick process.
And if you're using GitHub, it's very easy just to link your GitHub repo.
And without having to write a bunch of scripts, trigger everything when you want it to.
I wonder and also like deployments to Azure, even if you're not a Visual Studio developer.
Of course. Right out of GitHub, baby.
Yes, of course. Of course. Not a problem.
You know what I would say, too, is I'd ask the audience Coder dot show slash contact.
What does Microsoft need to do now in twenty nineteen to close the gap to be?
To convince you if you're not convinced yet or what what is still the big outstanding thing that we're not talking about?
Like, you know, there's like the elephant in the room, for example, some of their core desktop applications not available for desktop Linux probably never would be.
But what a ton of legacy. Yeah. But what what could they do to close that gap?
If there's if you still haven't been convinced Coder dot show slash contact, let us know.
But we want to take a moment and chat with Peter Kratzmann, who's coming on to talk about the hashtag.
No estimates movement, which Mike and I have both been on part of at one time and now have learned.
But we'll save that for a moment. Peter's coming on to talk about no estimates.
And this is a man who has thought a lot about it.
He's from the Seattle area and he took a moment while traveling to join us today.
Peter, welcome to Coder Radio. Thank you very much.
Glad to be here. I got to say, Mike, I was kind of surprised when you invited Peter on because some of this stuff goes against what you and I have discussed on the show for ages.
Some of some of what we've come around to more recently.
But we have said some things that we are guilty of in Peter's post here in several years ago.
Peter had some issues. Yes. Yeah. Yeah. So, Peter, we kind of wanted to start with maybe all position.
I'll paraphrase our previous position, which we have changed on is we used to try to make the case for starting work with no complete estimates on this show from a somewhat experience based.
Continuous disappointment of estimates, never really properly setting expectations, never really preventing scope creep.
But one of the things you touch on is a lot of times the arguments are more anecdotal.
And so we're ours. Our arguments were anecdotal. You also say it's often jives at evil management.
A lot of ours were. Is this is this an area where we all make a very common mistake?
Because it feels like we we we made these very mistakes. Well, it stands.
I hesitate to call it a mistake, although I clearly think in in general, no estimates is is a very big mistake.
But it's a natural thing for people to drift into who have encountered bad use of estimates or not been able to make their estimates jive and been frustrated by that.
And I recognize and acknowledge that very strongly. That said, I still think that there are reasons why people need to talk about why estimates are useful and how we can help actually make them more useful.
One of the things I did want to say, because you mentioned anecdotes, my take on this is that almost base almost every stance we have regarding software development, essentially on anecdotes.
We've seen what we've done and it's very difficult to have certainly parallel studies that explore two different ways of going about the identical task because you can't step in the same river twice.
So, you know, that said, I still think that there are arguments and logic that need to prevail as people grapple with these ideas and different stances.
I think I completely see where you're at now and now with a bit of more experience behind us. And part of it was learning to do it right.
And you said something there that I'd like to pick your brain more about doing these estimates better, doing them right. What are some what are some tips you have for that?
Well, in some ways, recognizing the fact that it's not black and white and estimates aren't guesses, which is kind of what the no estimates movement will very quickly try to lead you into saying that estimates are guesses.
And all that means really is that they're not 100 percent guaranteed. Well, that's why they're called estimates.
And when you when you insist that something be 100 percent accurate, you're really not recognizing the reality of most of the things we do in life, let alone software development, where we have to make the best call we can based on imperfect information.
And with the mindset of, oh, how can we make this useful? How can we make it so that it is helpful to us and not harmful to us? How can we clearly delineate the difference between an estimate and a target and a commitment or a schedule?
I mean, and those things are not equivalent. None of those is equivalent to the other.
And often you will hear people, oh, estimates turn into commitments. Well, that's bad when they do directly.
However, I also point out that commitments are always based on some kind of estimate.
You can't possibly say I'm going to do X, Y or Z by a given time unless you are form of.
And so you have to understand that you need to bake the estimates that you come up with, which are in my mind best rather than being time driven, being estimates of effort.
And you kind of accumulate all those together and you determine what the appropriate schedule is.
Yeah, that makes a lot of sense. And now with some experience, I totally follow what you're saying, Peter.
But I noticed something you said there that I'd like to expand on a little bit. You suggested there could be ways to improve estimates,
do them a little bit better so that way they're not being called guesses, essentially.
What is your advice or thoughts around improving estimates?
A lot of it is going into it with the appropriate mindset that estimates can be useful and that they are not 100 percent guarantees.
They're not a schedule. They're not a commitment.
And people tend to who get pulled into the no estimates viewpoint,
they tend to start equating those things because they've seen it happen.
They've seen estimates turn into commitments. And, you know, that's by nature a bad thing when it happens directly.
I would point out that with commitments, commitments are a desirable thing in business.
You actually need to have them between teams, between vendors, between partners in a business engagement.
And if you're going to make commitments, you're going to need to base those in some form on some kind of estimate.
And so, yes, the fact that commitments are based on estimates should be a given
and that you have to do the best you can to come up with the best information and modify as appropriate.
But understand that you don't make commitments without estimates of some form and they don't turn directly into that schedule.
You compose a schedule after coming up with the estimates and you have a bunch of buffer
and you figure out what the appropriate mix is of the things you have to do
and you figure if you're on board with the scope overall or whether you need to reduce it.
And you commit, in essence, not just to what you're going to produce,
but you commit to reevaluating that constantly at every juncture to see if you're on track and you do risk mitigation.
If you're not going to be on track, what is your approach?
What's your plan B? What are you going to drop? What are you going to maybe extend in time frame?
There's no one single answer, but it's sort of a maturity outlook in my mind.
That sounds offensive, but it is a kind of maturity that you need to adopt.
One interesting thing I've seen, Peter, you and I got hooked up because I was asking on Twitter
some of the no-estimates folks to explain to me how that worked.
As someone who runs a consulting shop, it was pretty quick to find out that many –
and not to put words in their mouth, we should one day have some of them on –
many of them are thinking of internal development, not necessarily where you're an outside consultant or indeed running a dev shop.
Just the idea, the reason I was originally asking of saying, oh, we don't have an estimate is insane.
I can't bid on an RFP without an estimate.
I do have some sympathy to the case of – it sounds like there has to be, I'll use your word, maturity on both sides.
You can't have the end customer or let's just say the client kind of say, oh, well, I thought that should have been included.
Do you get what I'm saying? You need to be in – like how would this work in let's say a fixed bid world?
Well, I'm not the one to talk to that because I don't think it does work in a fixed bid world.
Neither do I, so that's perfect.
But let me address what you said about internal because most of what I do these days is actually –
oh, it's probably 70, 30 or more in terms of internal development, internal systems,
companies that are putting major software, internal software endeavors together,
major modifications to some kind of internal platform, et cetera.
And there, the notion of internal commitment is just as important.
You have a relatively large company, you have a marketing department, you have a sales department,
you have a customer care department, and they are all depending on a particular schedule being met.
And if it's not going to be met, there are going to be repercussions down the line of people needing to adjust other things,
failing to meet other commitments on the part of the company,
lack of confidence by the end-to-end customers in the company's product overall, and so on.
So I don't see it as a dichotomy between internal and external.
I think that estimates need to be a factor in both.
In almost, not every, but in almost situation, estimates are present whether they are spoken directly or not.
Sometimes they are kind of under the surface.
People don't really talk about them, but they are still really there.
Yeah, that's very true.
So I guess it seems like the challenge is probably for some people in our audience
and people getting started in the industry is estimates are hard to do right when you are new.
And part of what you touched on there was a feedback cycle where you look at what you got right,
look at what you got wrong, and you iterate on your ability to estimate.
But when you are brand new, you don't really have much to draw on,
and it seems like it's particularly tricky at that early stage.
What are your thoughts about that?
Oh, yeah.
Well, I mean, the common view that's expressed about estimates is that it's just somebody kind of stopped in the hallway saying,
oh, Joe, how long is this going to take?
And Joe says, oh, three weeks.
And the next thing you know, Joe's manager is going, Joe, you said it would be three weeks, and here we are, and you're not done yet.
That's sort of the nightmare scenario.
That's not the way that one does estimates.
Ideally, you don't do it with a hallway conversation.
You don't do it with a one-off flip judgment.
You do it with some kind of process that people essentially collaborate on where you go back and forth
and what the necessary requirements are going to be, what the implications are of the scope, what things are hard,
what things are easy, what the timeframe really needs to be.
And you bake all that into a reasonable schedule, and you have some rigor to the process.
And by the way, you use data where appropriate.
You use data on throughput of the team and likely, you know, past efforts along these lines
and how well they've done in terms of throughput.
And you don't say, well, we'll do this one in a month where the last one took us six months.
Or if you do, you have a really darn good reason for that kind of optimism, which is almost always misplaced.
So that sounds a lot like one of my hobby horses, which is always have a documentation
and for lack of a better term, discovery process for any new work.
Is that something you would agree with in terms of –
Yeah, absolutely.
I mean, there should never be just sort of a – from some, you know, undefined process
where suddenly everybody decides we're going to be done by the end of March.
Well, we want to see what the assumptions were behind that.
You want to be able to point out when those assumptions go awry when it's January or February.
And you want to be able to re-estimate as appropriate when that kind of thing happens.
And unless you have things written down, if you're just going by gut and you're just going by just,
oh, today we're just going to work on what seems like the most important thing, that doesn't happen.
It just gets lost in the ozone.
And what turns out is that it's a disservice to the development team
because basically there's no defense against somebody saying, oh, we're going to say you'll be done by March 31st.
And, you know, without some kind of process that has examined what that really means
and what the assumptions are behind that and collaborative understanding and buy-in to that date,
it's meaningless and there's no defense against it.
Estimates are one of development's best defense against target dates being set from on high with no facts behind them.
Oh, sure, such as a trade show or – there's lots of examples of that, yeah.
Yeah, or even not, right?
I mean, often – and this is what people – you know, people say, oh, trade show, I understand trade show deadlines.
I understand the Christmas holiday season, sure, but, you know, every other date, every other deadline is arbitrary.
Well, actually, no, no, it isn't.
Arbitrary kind of means chosen at random, and they're usually not chosen at random.
They're usually chosen with an idea of, okay, we're going to set this line in the sand
so that we can do some meaningful coordination of efforts here and we can plan for further work downstream.
And so deadlines do matter even if they don't have a looming absolute trade show deadline behind them.
So what would you say to the developer who's, you know, fairly frustrated, let's say on Reddit, on Twitter,
you know, screaming hashtag no estimates from the rooftops because, I don't know, they've just been burned, right?
They just got a tongue lashing from their manager and they can't take it anymore.
What would you say to him or her?
What's, I guess, the first step?
Well, try to understand what is driving the need for estimates rather than simply say they're arbitrary, they're useless,
they don't do me any good whatsoever.
Try to understand the bigger picture.
And that often, you know, understanding the bigger picture is something that, you know,
the more we emerge into adulthood, you know, the more we acquire that, right?
In terms of, you know, I have a seven-year-old at home and a lot of working with him is, you know,
getting to understand what things are, you know, sort of out of his control
or what's the bigger picture on why he can or can't do something.
And, you know, not to equate developers with seven-year-olds by any means, but it is the same kind.
It is the same kind of thing in the sense of we have to recognize, you know,
that reasons for things that are outside of an individual's particular span of view.
And that's often what developers – and I speak from experience here.
I grew up through the ranks and I was, you know, along the same lines when I was in my 20s as a young developer
of not understanding the bigger picture behind what the company was trying to achieve,
what the larger aspects were, some of the gating factors, etc.
Right. So we all want to be respectful of your time, of course.
What tools could a, let's say, relatively junior to intermediate developer use
to kind of get better – I hate to use this, but like the craft of estimating?
Well, I mean, the first thing is to really read up on – and it isn't like this hasn't been covered.
And so the book that I always recommend, and I'm just a huge fan of this individual in general,
but particularly of this book, is Steve McConnell's software estimation,
The Black Art, I think he calls it.
And he does that with a little bit of humor behind it because, yeah,
there's no absolute, you know, recipe type of thing of how you do estimates.
But there are a lot of factors entailed.
And he goes carefully through why estimates are asked for, what uses they serve,
you know, what's the best way to go about them so that you mitigate some of the anchoring effect, for example,
or the hippo opinion that just declares that and offers, better than I can summarize here,
a whole bunch of strategies for dealing with those from every aspect,
from the developer aspect, from the middle manager aspect, and so on.
And a lot of it is just cross-education.
And that just doesn't mean education of the developer.
It often means education of the manager, like, you know, what is driving this?
I need to understand this.
I need to understand what's going to happen to this estimate and, you know, exactly why you need it.
All of those are fair questions to ask in a non-combative way,
in the spirit of looking for the collaboration that needs to occur.
Yeah. And it seems like that could lead to actual success on all sides
because then you have understanding and expectations are set correctly for what the estimate is
and what it's trying to accomplish and why everybody wants it.
Peter, I can tell you've thought a lot about this.
And I want to suggest people check out your website, PeterKratzman.com.
We will have a link in the show notes.
Are you a Seattle native, Peter?
No, not native, although I think of myself now as one.
I've lived here for 30 years.
Oh, I think that counts. That counts.
That's pretty native to me.
Well, that's pretty great.
I'm just about 40 minutes up by five.
That's where we have our studio at.
Oh, got it.
Yeah. Peter, it was great chatting with you.
I'm going to follow you on Twitter, keep tabs on what's going on.
Maybe we can chat again in the future.
I think this has been super informative, and I really appreciate you taking the time.
I'm always interested in dialogue.
People can reach me on Twitter at Peter Kratzman.
And it's really interesting to me to engage on these ideas when people can do it with kind of a calm attitude,
avoid the name calling that seems to enter into the dialogue way too often,
and just throw around the different ideas and approaches.
Yeah, absolutely. Absolutely.
And Peter mentioned a book, but he's got a whole bunch of other recommendations on his website.
Again, that was PeterKratzman.com, and he's got a recommended reading link on there.
If you want to grab some other books, Peter, thanks again.
I appreciate it.
Thank you, Peter.
That's going to give me a lot to think about.
So thanks again to Peter for joining us.
Before we get out of here this week, though, I wanted to mention Linux Fest Northwest.
I'm trying to get it out there early before we're even close to it.
Well, close-ish, so maybe you'll consider coming out and seeing us.
It's not only going to be a huge one for Jupyter Broadcasting.
It's been a big year for us, and we've got a bigger team than we've ever had, and we have big plans.
There's talk about maybe even getting a dedicated room and holding talks all day
from some of our hosts and other people associated with Linux Academy
and just sort of having like a Jupyter Broadcasting room if we can get all our crap together.
But at the minimum, we're going to have a live booth with swag.
We'll be having an after-party with barbecue.
I'll have Lady Jups parked out in the parking lot.
I'll be cooking up food for everybody.
And Bellingham is one of the prettiest places in the Northwest.
So if you can make it out, go to linuxfestnorthwest.org for details.
It is April 26 through the 28th at the Bellingham Technical College.
If you're in the States, you may check to see if you can just fly into Bellingham.
They do have an airport, and oh boy, that's like a 15-minute drive or so to Linux Fest.
But you can also fly into SeaTac, and they have shuttles to get you up north.
There's people organizing rides.
We'll have some vehicles, all of that.
And we'll be having a hell of a party.
We'd love to have you there.
We have some big stuff to share.
Linux Fest has some big stuff to share.
And they're doing a theme for the whole thing, past, present, and future.
All right, I've said my bit.
Maybe that's where I'll finally meet you, Mike.
You should come out.
We already talked about it.
You're not going to make it to Linux Fest.
Not a chance.
Mike won't be there.
I'm not allowed in the state of Washington anymore.
After that time, I dressed up as the BSD devil at Linux Fest.
I'm turning my efforts on Joe this year.
I'm going to get Joe out so we can do a live Linux action news thing.
Nice.
Yeah, I think that would be fun.
From DVK, all right.
Yeah, well, so now where should we send people for you?
Peter, we should plug you.
Where do you want people to go?
Follow at Dumanuco on Twitter, and go to themadbotter.com.
And also, if you need something developed, and you want it to be crazy and possibly fly,
check it out.
We can do that for the new year.
That's pretty neat.
Boy, that's interesting.
I'll just say this.
Follow me on Twitter, at chrisles.
The network is at jupitersignal.
And everything we talked about today is linked on our website, coder.show slash 335.
It's really simple.
You can also go to coder.show slash subscribe for all the ways to get new episodes,
and coder.show slash contact to give us your feedback.
And last but not least, we also have a subreddit, coderradio.reddit.com.
There you go.
Check that before every show.
It's a great way to slip in a little feedback, get in front of our face,
also to submit a few stories you want us to talk about, vote them up, things like that.
Coderradio.reddit.com.
Thank you for joining us.
Come back next week live.
We'll be recording a double for the holidays, so it'll be an extended livestream next week.
jblive.tv jupitersignal.com slash calendar for the lifetime.
Thanks for being here.
See you next week.

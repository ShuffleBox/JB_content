This is Coder Radio, episode 428 for August 23rd, 2021.
Hello, friend, and welcome into Jupiter Broadcasting's weekly talk show,
taking a pragmatic look at the art and the business
and the whole world of technology around software development.
This episode, it's brought to you by Cloud Guru.
You know, Cloud Guru has the cloud playground.
That means Azure, AWS, and Google Cloud
sandboxes on ACG's credit card, not yours.
So go get certified, get hired, get learning at a cloudguru.com.
My name is Chris, and joining me, like the podcast pro that he is,
it's our host, Mr. Dominic. Hello, Mike.
Hello, Mr. Fischer.
What's up?
Podcast time. Yes, here we are.
I am excited to be in Colorado Springs.
We went eight days off grid, no hookups, running off solar,
and so now it feels luxurious to be at a campground parked and plugged into power
and have air conditioning and stuff.
It's like I'm fancy all of a sudden.
However, it's like a downtown city here.
This campground is so fricking crazy busy.
So apologies if I've got weird sounds in the background
because there's a whole party going on around here.
Are you fired up about the podcast, though?
You ready to go?
I've been looking forward to this.
I've been waiting for this one a long time.
Yeah, well, I mean, I kind of have been the opposite.
I've kind of been dreading it because the inbox this week, the inbox, Mike,
it was so bad.
We got so many emails, but good.
It was a good problem to have,
and so we thought we should definitely try to get to some of these.
And listener Chris, not me, but listener Chris was fired up about Crystal.
He says, Hey, guys, I'm a little bit behind,
but I just listened to the Ruby and the Rough episode,
and I have to plug Crystal at crystal-lang.org.
They released version one not that long ago.
It's written like Ruby, but compiled down and fast like C.
I've started to rewrite some of my Ruby in Crystal,
and it's been a huge success.
Thanks for what you do.
And sorry I haven't chilled Crystal before.
I'm just now catching up.
OK, so I really I really didn't know what else to say other than I guess.
Thanks, listen to Chris for firing, firing an email about Crystal.
It was totally off topic, but felt like we should include it at least.
Well, it's actually not that off topic.
If you remember the dark days of the coding challenges,
it was one of the languages that was and I used to torture each other.
Oh, yes, right.
If I had done my homework, I would have been able to find the episode.
But unfortunately, or fortunately, there's just a lot of code
or radio out there in the universe, and I could not find it.
But it's there somewhere.
We need some sort of system that goes through and indexes all of the speech,
you know, like a does a transcription and then generates keywords.
Why is there not like a Google search of podcast content?
They were playing around with it for a while,
and then they just sort of dropped it.
Really?
Yeah.
Because, you know, there's I wanted to reference something
for today's show from ATP, something John Siracusa said.
And after like an hour and a half of trying to figure out where he said it
and which episode and thank God they use chapter markers,
I still could not find it because it turns out I was a year off in my luck.
And I was like, I tell with this, I'm not I'm not doing this.
Yeah, I there probably are a few other services out there.
There's there's companies out there that are doing it to monitor when brands
are mentioned because it's a smaller problem scope, right?
They can just monitor for Netflix.
Sure. Makes sense.
So there's businesses around that. So I think it'll expand from there.
All right. Well, Jim wants to know more about C++ deets from you.
He says, you know, last week, Mike tossed out one of his classic throwaway
saying that he's running C++ on his back end.
And well, are we just supposed to ignore this?
Please share as much as you're able.
What mode of running? What libraries?
What inner motivation led you to make this choice?
Are you running C++ and CGI and WebSockets?
Dark Matter C++ developers are slowly steering their organizations away
from cute native apps. And I want to know what you're doing.
Yeah. So so definitely not cute. Right. This is a server size stuff.
I mean, very simple, very kind of pure ANSI C++ here.
Just CMake the ID.
Some of us are using C line.
I'm using VS code because I've just drank that Kool-Aid like it was going out of style.
The way we're using it is maybe less web servery than either I made it sound
or that you got the impression of. It's more we have Python.
So the stack is like, OK, we have an application.
Most of it, the interaction, you know, the Webby stuff isn't flask for the most part.
And anything performance in C++, it was going to be rust, interestingly enough.
But finding external help for rust is way too hard and way too expensive right now.
So we kind of fell back to C++.
I have to say we are we have taken a I think a little bit of a weird approach.
So one, because we control everything, this is our own thing.
It's the newest standard C++ 20.
So we're using all the fun little new bits, right?
The smart pointers, all that good stuff.
We're also not using boost, which I think is important to mention.
We're kind of doing things just as they are.
Standard library, everything else is kind of written ourselves.
I know that smacks of not invented here,
but there are reasons that I think probably over the next six months we'll talk about.
But why for something like this where we want to control it full stack
and it really is full stack, meaning from server to hardware,
to not to not have that level of dependency.
So that kind of segues into your other point.
Dependency management.
Other than like the standard stuff you would have in CMake,
we really don't have many dependencies.
That may not be true forever.
And, you know, I know I know there's options,
but this is kind of where we need performance.
And don't get me wrong where we can.
We're doing everything in Python, but sometimes that's not applicable.
I know there's ways to compile Python down.
I look at them. I get it.
It's just a little too Voodoo for me.
Easier to write a Linux C++ binary and has a call into it.
Right. Sure. Well, thank you for sharing that.
Our next email is asking for us to consider Intel for a moment.
I didn't bring my tissues.
I know. Yeah. And your beard to pour one out.
I need a 40. Yeah.
Jacob writes, Can you guys talk about Intel for a few minutes?
I'm with Chris that Canoma is deploying solutions that widen the chasm with their audience.
But if it was a contest, I would think Intel would be able to take the cake.
I've never seen a company deploy more promises than actual products.
While they will likely always stay relevant for a large audience.
How do you see their future unfolding?
Do you think Apple's upcoming M1X or M2 processors will encourage a double digit shift from the x86 architecture?
Our thoughts on Intel, Mr. Dominic, what do you think about Intel's future and their products?
Like I was thinking about our friends over at System 76.
They tell me they're working on a laptop that they want to have out in a couple of years.
Right. And I thought to myself, God, it could be really awesome.
You know, metal chassis.
Maybe it's milled from a block of aluminum runs.
Linux has replaceable parts.
And then I thought, oh, but it's probably going to be an Intel chip or at least an x86 chip.
And that may be a deal breaker for me because it kind of feels like buying a gas guzzler in an era of electric cars.
I mean, what's the time frame here?
Is it like now or is it five to 10 years?
I mean, I think starting now, but the way Jacob defined it, it sounds like with the M1X or the M2,
assuming there's some good performance gains there.
I think it's and I know we get a lot of heat for this, but there's no way to, I think, you know,
objectively look at the situation and not say that the M1 class of processors from Apple isn't a leap forward,
which, you know, necessarily means Intel needs to catch up.
I know my broader thoughts are Intel made a bet like five, 10 years ago that didn't pan out.
Right. And they got kind of hosed. They're not going to go away.
They're a big company. They'll be fine. Can they catch up?
Sure. Right. They could have the next good idea for processor technology.
Is it going to happen within the next, let's say, two, three years?
I don't think so. But keep in mind, Apple is not going to like license their processors out.
Now, you might be thinking, OK, a risk architecture like, you know, those type of processors and maybe IOT.
That's true. That's a market that I don't think Intel competes in very well.
Right. You're with your IOT devices, your kind of automation factory kind of stuff.
You're probably running ARM. And I know Syfy, the company Chris Ladner went to from Tesla.
Chris Ladner, for those who don't know, is the guy who made Swift at Apple.
That's what they do. Right. They do like bespoke RISC-V processors for IOT devices.
That's also a competitor. I mean, on the desktop, I sort of feel like that's the market we all all us nerds care about quite a bit,
but kind of doesn't matter. I don't know. Also, those Ryzen chips are looking pretty good.
And that's the wild card here, right? Is maybe AMD pulls it out.
Maybe Intel with their ARC GPU and just really gets off their ass and actually manages to produce something.
But I suspect with Intel, it's a corporate structural issue.
I think the rod is from within and they just they got complacent again and their management structure changed.
And now they cannot fix their problems. At least that's what I worry about.
And I have to say, I'm not sure yet, Jacob.
You really I think I'm on board with what Mike says is I need to see where Ryzen plays out.
I need to see what some of these with these AMD laptops with AMD GPUs in them, what they look like,
because we've seen a few on the market, but we haven't seen it at the scale that we've seen the Intel stuff yet.
I did note when I was talking to the System76 crew, my thought was, oh, but it it's still going to be Intel.
Right. So it's almost like doesn't matter. And I hadn't conclusively reached that.
But it it started to it's starting to feel that way.
And I'd be curious to know if the audience out there feels similarly like it's one thing I think, too,
when you're thinking about it from like a theoretical standpoint, like, oh, yeah, if I'm going to go blow two grand on a laptop,
you can just sit there and you can throw around what you may or may not do all the time.
It's easy. But when you when it actually comes down to I can only buy a laptop like every four or five plus years,
like it's not something I do all the time. This is like my one chance to get it right.
I want something with a good screen. I want something with a good build quality.
I want something with a good keyboard. I want something with good battery life.
And I want something that has high performance. And it's my actual money now that I'm spending.
I find it getting harder and harder to buy an X86 based system.
Thankfully, I'm just in a wait and see mode right now. C Sharpator writes in though.
He says, Anyways, I can't help but take those stack overflow surveys that you guys cover as just a chance to rag on C Sharp.
Even though it's not my favorite language, Objective C is a bit overheated, in my opinion.
C Sharp, on the other hand, is an evil virus from hell forced upon the human species.
I've never encountered a language that was far more removed from what it claims to be.
In the case of C Sharp, it's, quote, easy to read and easy to use.
But that phrase couldn't be a better description for everything C Sharp is not.
The nastiest and most unpredictably dysfunctional code I've ever seen in my life has always been written in C Sharp.
It's ugly. It's easily breakable. And you could never rely on most people to write anything maintainable.
The best C Sharp can do is work in a clunky way.
I was shocked when I found out that C Sharp was 60 percent loved.
But the more I thought about it, I thought about is probably a blessing.
Really, that many programmers seem to either not remember how terrible C Sharp is or because they've long abandoned it for the browser.
I never forget the nightmare that is C Sharp, especially back before stuff like VS code existed.
And I had to use the old Visual Studio institutionally forced upon me.
There may be worse languages objectively, but C Sharp will always have a special place in my heart.
Like as much as I hate JavaScript for spawning electron, at least electrons cross platform and is actually easy to use.
In fact, many of its problems stem from being so easy to use that a lot of people can build apps that just work well enough and never had to learn good programming habits.
C Sharp is the worst. I mean, I don't know about that.
I think there's some people out there that would strongly disagree.
I know some people who desperately are in love with C Sharp and trying to figure out how to balance their real relationship with the relationship with C Sharp.
Yeah, I mean, so I feel for the writer here, right, because he's got like my level of love for object to see a language that I would say the vast majority of people hate.
He hates the language the vast majority of people love.
The funny thing that he mentioned there that he was forced to use Visual Studio. I'd care to wager one of the main reasons lots of people like C Sharp is because of Visual Studio.
I don't know, man. I mean, it's not really my bag, right? I tend to run Mac or pop.
But if you want an IDE that does lots of stuff for you and helps you out, granted, I know it adds complexity with all this weird config files.
But I find any argument this is a Visual Studio does not succeed in its primary mission of being a great IDE for development a little.
Nonsense, and I know that's not the argument he's necessarily making, but see, a lot of this stuff is about like taste and preferences, right?
Like, why do I like Objective C? Because I'll turn this into a positive argument, not to bash on C Sharp, because I actually I actually kind of like C Sharp.
Objective C, until like the very end, and I know end is like in quotes, because it's not dead yet, I will assert that forever, just didn't have that many features.
Like, I'm doing a bunch of Python now, and there's like a million magical ways to do things in Python, right?
You know, because of like, you know, different libraries, whatever.
The Objective C is like, you can send a message to any object.
We have built in these very few features. Then you can import Coco fine, you get some stuff there.
But it's a simple language with simple concepts.
Until you crack open the C part of it, and then you you know, you can it's still simple, but you can go cry because you have to do a lot of memory stuff.
I have a feeling that some people like C Sharp because it's a big language with lots of features and just a ridiculous amount of abstraction, right?
Objective C is like, hey, man, you want to do that? No problem.
You can cobble together traditional C blocks and like whatever weird NS auto release pools and objects sending things we've got going on here and do some dynamic stuff in the runtime.
C Sharp is like, oh, dude, we have a class for that.
Yeah, just throwing away and just throw an async away and we'll figure it out. Don't worry about it like that.
I don't know. It's kind of like easy mode, right? Yeah. And that's not a bad thing. It should be easy mode.
Like, OK, can I bitch a little bit? Do it. Doing tons of Python.
Loving it, except for both PyCharm pro and VS code, for whatever reason, cannot do IntelliSense on the SQL Alchemy like classes, right?
So if you have a model that inherits from things like DB dot model, and I think we should just take a step back.
SQL Alchemy is effectively active record or entity framework from, you know, it's an ORM.
As a guy who has a serious typo problem, as Chris can tell you, that has been killing me.
Because I just not being able to hit like dot escape or I think I think I might I think I have a hot to like that tab and seeing the options of methods and properties is.
I spent like three hours this weekend trying to figure out why why it's not working.
And there's just a bunch of like annoyed people on Stack Overflow. I don't understand why this doesn't work.
Right. That's the kind of like quality of life thing that's annoying.
And if you are a Python Easter of of more of a beard than me and you can explain to me why VS code cannot figure when I do like my model dot query dot, you know, whatever.
Why the dot doesn't bring anything up. I will be very happy.
I think they prefer to be called Python hounds. I thought they were like snake charmers.
Yeah, that's right. That's right. Another topic that we cover on the show that got some feedback and we're still we're still the door still open on this one.
Is transitioning into a manager from a developer to a developer manager.
Jacob wrote in and said, there's one thing that I really recommend is sit down with each person and do a one on one session and ask them this question.
Tell me about a mentor that impacted your life. He said, you'd be surprised at the kind of answers you get and insights you get into what motivates people.
And then Peter wrote in with two book recommendations, the Unicorn Project and the effective manager will have those linked in the show notes.
He says they give you actual advice and not just theory and that the Unicorn Project gives you a good idea of like how to run a DevOps shop, but in story form.
So that's the Unicorn Project and the effective manager will have those linked in the show notes.
If you got some all some of your own snakes that you have to charm, you know, those are very useful.
We have more we have more feedback to get to. But if anything we've talked about on the show strikes an interest of yours and you want to talk about it more or expand on something or you have thoughts or insights, go to Coder dot show slash contact and share those with us.
I'm in the Colorado Springs, like I mentioned, we just did our Denver meetup a couple of days ago and there was an incident that I got to talk to you about because there's been some demands.
That have been made that I need to relay to you and we got to come to some sort of decision.
So there was a bit of a Coder upset at the Denver meetup. I swear to God, if you say closure, nope, nope.
A Coder quorum was assembled. They came up with a list of demands and then they claimed one of the bars as their territory.
So that got a little weird. And then they wouldn't let any of us Linux nerds enter the bar land until they had your blessing.
And they refused to listen. And I told them you weren't coming because we assumed you were going to be moving and they just weren't having it.
So now they're holding several MacBooks from the participants hostage, threatening to spill water on them unless, you know, you show up at a future meetup.
I don't know how long it's going to go on. I think they're even threatening a hunger strike. It's pretty bad.
The one in Denver is the one I should have gone to with. And by the way, just for Carl, I've gained 400 pounds.
So don't mind the really big jacket coming into the system. Seventy six factory. Just it's cool.
You know, I've been eating Twinkies. Oh, man.
Can I just say the hardest thing about this meetup is the fact that I gained a bunch of weight during the lockdown stuff.
And so now I have to go around like I don't fit into my clothes like it's just the whole thing's embarrassing.
It's just, you know, I have a bunch of the J.B. shirts that I no longer fit into, like the old Coder ones.
I'm like, those are my aspirational shirts now. Yes. Yes. The Coder like 100 shirt is like I look at it sadly all the time.
Oh, man, I know. I know. And, you know, you know what?
Honestly, where it really kicked off for me was a year ago, we were just going independent.
Like this week is the week we went independent. Like tomorrow was the day we announced it.
Happy anniversary. Thank you.
And the the months, many months that led up to that, the negotiation process was extremely stressful.
And it was right at the beginning of the lockdown and all of that.
And I just put on a ton of weight and I realized, oh, stress really does make a difference on that kind of thing.
And like I have to I'm going to have to just take steps in the future when I'm under a lot of stress to kind of like preventative care kind of thing.
But man, oh, man, was that a process? And now here we are.
Here we are doing the meetup and all that kind of stuff. It's been great.
So almost one year to the day as we record. By the time this episode comes out, it'll have been the year anniversary. It's pretty great.
So for folks who might want to plan to go to a future meetup, wink, wink, is there somewhere that these are posted or?
I think we're going to come up with a meetup dot com replacement right now.
We're still using meetup dot com. OK, but I feel like it's time to find something else.
Meetup is is designed around the idea that you're holding meetups in your area.
It's not designed around the idea that you're holding meetup somewhere far away from you.
Oh, by the way, Optimus Gray points out in the chat room that you can go to notes dot Jupiter broadcasting dot com slash Coder radio
or just go to notes dot Jupiter broadcasting dot com and you could search there for our coverage of Crystal.
There is a really nice index of all of our previous shows with a special search front end.
In fact, the Coder audience might find actually pretty clever.
So that's notes dot Jupiter broadcasting. It's like it's quite the fancy search.
Lino dot com slash Coder. Go there to get one hundred dollars on a new account and you go there to support the show.
The year of independent Coder radios has been made possible by Linode and we enthusiastically endorse them.
They started in 2003 as one of the very first companies in cloud computing.
18 years later, they've just that entire time focused on that mission. They haven't gone crazy.
They didn't get like some weirdo VC funder in there that wanted them to get into like some crazy aspect of technology.
They just hunkered down and built something incredible.
And as the different things in the market evolved, Linode has consistently responded and over delivered.
And that's the part that I have been fortunate to witness over the last couple of years.
Like I'll tell you something they've added kind of more recently that when I first started using the note, I never thought they'd have.
And it's bare metal boxes. I just never thought that was going to be their game.
But they looked at it. They said, you know, it's something customers want and it's something we can do right.
On top of that, though, they just have an easy to use, powerful cloud dashboard.
They have 11 data centers around the world you can deploy to.
So if you need your application to be performant, if you need it accessible, they've got you covered there.
They've got DDoS protection. They've got this beautiful, beautiful, beautifully fast network because they are their own ISP.
And the reason why I want to mention this is I have set up applications that I have deployed in different data centers that come back to their New Jersey data center for object storage.
Or something like that. And I was worried that maybe that wouldn't be fast enough, but it has been exceptionally well performant.
The entire time we were on this trip as the crew is recording clips, both video and audio, which, man, man, were people just like Brent was working his tail off.
We would get together in the evening at the Airbnb and we would upload all of our various footage to Linode's object storage.
So we have one centralized place.
We don't need to bother with any crazy front-end software. You just upload it to their object storage.
Anything that can talk S3 can talk to Linode's object storage.
They have also entire one-click application deployments of the entire stack, if that's what you like.
Or you can do it yourself. And their pricing is 30 to 50% cheaper than other major cloud providers.
But with that $100 credit you're going to get when you go to linode.com slash coder, you can really kick the tires.
You could try out one of their high-end AMD epic dedicated CPU systems that just kicks the butt of everybody out there.
Or you could go for their $5 a month box and see how far you can push it.
You'd be really surprised by that. And Linode made our Jupiter Colony reunion road trip possible.
They were there at the Denver meetup giving away prizes and some pretty special events and memories were created because of their support.
And now you can get $100 to go try it out for yourself.
Just go to linode.com slash coder, get $100 on your account and support the show.
Linode.com slash coder.
I was a little fired up last week and that's what got the most feedback into the show.
I was having a real strugs with NSURLSessionD on the Mac.
So quick recap, because I'm a glutton for pain, I thought to myself, I don't really have a great computer for this road trip.
I kind of went all in on my X1 Carbon at the beginning of the year.
And frankly, I'm just not very happy with the overall performance and battery life.
Other aspects of the machine I am quite happy with. I love the build quality.
I think the keyboard is great. It runs Linux because I got the Fedora edition like a freaking champ.
Like if you needed a mobile workstation to do some web development, to get terminal access, to check your email, to browse the web.
This thing is checking the boxes all day long.
However, if you are trying to do a crazy remote live stream broadcast with a dozen different applications,
including a full digital audio workstation, including OBS for broadcasting, including soundboard software,
Edge browser, Chrome browser, Firefox browser, all running simultaneously,
Jack and Pipewire running the background routing options, doing real time effects processing.
And then, of course, recording each individual device and track to a FLAC file in real time to the hard drive.
Like that's the baseline before I'm even like browsing the web, reading the news stories, responding to the chat room or launching Slack.
Like that's the baseline is a lot of work for a machine.
And I just opted. I just said, I got to bring the MacBook Pros because that's the fastest machine I've got.
OK, so far, I'm with you. OK, so I tried it and I thought, how bad could it be?
And I really I really got nailed by something called NS URL session Damon last time.
And at the time, because I didn't really know what it was, it was I was in problem solving mode.
It was consuming all of my available bandwidth. It was just really going to town.
First, it consumed all my downstream and then it consumed all my upstream.
And it happened for a period of like three days. It was really getting to like by the time I've done Coder,
I was three days into this being a problem.
What I learned after the show is that NS URL session Damon is actually kind of a good idea in principle.
I think it's actually the implementation that is the problem.
It's a Mac OS system process that is used for downloading and uploading data for any application.
Initially, I thought it was like just an iCloud thing or something just for Mac OS.
But now I understand it's actually a class that is made available for any application.
And any application can delegate transfers to that Damon.
And the nice thing is that it will continue even after you quit the application.
So you can be like Telegram and say, hey, I need to download this thing.
NS URL session will do it for you. The main telegram process is left free.
You can quit it. The download continues.
And through my investigation, basically by throwing LSOF and looking at everything it's doing because activity monitor gave me information.
But by using traditional Unix tools, I was able to determine like edge uses this telegram uses this.
Of course, all the iCloud stuff uses this like tons of applications are using this damn NS URL session in the background on my Mac.
And that is why it was just constantly doing shit because I had limited connectivity.
And so things just sort of queued up and it was just dutifully going through the list and executing its list of things to download, consuming all of my bandwidth.
And we got a lot of emails in that people said, yeah, this drives me crazy.
Hans wrote and said he switched to plasma.
He switched to KD neon because he was just sick and tired of all the stuff that the Mac does in the background.
I'm just curious to see if you agree.
Like, I don't think you've really suffered from this because you probably are somewhere either with high bandwidth or something like you've never been plagued by this problem.
I don't think I've never had this problem could happen to anyone.
It could happen to any Mac user.
You just kind of need to be like in a low bandwidth situation for an extended period of time.
And there were a lot of options that were that came in.
Nobody really wrote in with like a way to use launch control to just disable this thing, which is what I actually expected because that was the route Wes and I took was like, well, let's use the system application launcher to just shut this thing down.
But no, no.
What people suggested I do is use a hammer.
And I ended up doing just that.
So I checked out two applications that were written into the show.
One is called Lulu by a company called Objective C S E.
Yes, I know you like that.
And this will have a link in the show notes is a really neat open source firewall.
It it watches for outbound connections and then prompts the user if they want to allow or block that connection.
And you can say temporarily block it or block it forever.
And it runs at the network level using the newer APIs in Mac OS to to make sure that only the software you allow goes out.
And the UI is fine.
It's not phenomenal, but it's fine.
And it absolutely gets the job done.
It's at objective dash S E E dot com.
And it's Lulu.
The only problem I had with Lulu is a couple of applications didn't work like transmit and by word and a few other applications just weren't working.
And I knew about Little Snitch, which is like the OG firewall.
I legitimately may have used Little Snitch back in the like the Mac OS nine day or eight day.
Like, I mean, a really long time ago, I'd use Little Snitch.
So I thought, let's go see how they've done.
Now that company's name is Objective Development.
So you've got Objective C S E E and Objective Development.
It's like company names both.
I know. I know. And Little Snitch is some big, but like the good kind.
Wow. I know. I know. It's it's phenomenal.
I mean, just as far as like as far as like an application design, it gives you like a real time NORAD missile map of like where all your connections are going.
A beautiful way to see which ones you've allowed or disapproved.
It gives you prompts that it's aware of certain third party applications.
So like if you are another independent software developer and you deny that application's connection to the Internet for some of them, like say Bartender, it'll come up with a little disclaimer says, hey, bro, just so you know, you know, these are good guys.
This is just the auto update. You could just go into the preferences and turn that off and still allow this thing access to the network if you want.
They've vetted certain independent third party Mac apps and give you additional context when you go to deny them access, which is kind of nice.
They've also made it really simple to understand what stuff is iCloud stuff and what stuff is Mac OS stuff.
And I just use this thing like full stop to just shut down as much possible on the Mac while I'm recording.
And at this point in time, I've nearly blocked 60 different processes from connecting to the Internet.
It is. Mind boggling how much crap on the Mac connects to Apple.
I mean, you click the safari URL bar, four different background processes connect to Apple, you launch Spotlight, three different processes connect to Apple constantly all the time.
I mean, the list is like I said, it's 60 different processes long now that come up when I like either launch an application or boot Mac OS that all phone in to Apple.
And it reminds me when the Linux community crapped their pants over the canonical dash search and how it sent a ping to canonical when you would search for Amazon items,
because literally every move I make on Mac OS, some process is connecting to Apple or some just automated sync process is connecting.
And it's it is really eye opening to see how much this Mac is talking to the mothership whenever you're doing anything.
And so I've just blocked all that crap while I'm recording. I've just I've created a profile that's like a hardcore profile that tons of stuff is shut down hard.
And now it's working great. I don't know if it's going to cause any long term damage to my Mac, but in the meantime, I can at least use my Internet.
It's not your Internet or your computer. You need to accept that.
Apparently it feels like half assed on Apple's part here because they've created this NS URL session, Damon, that kind of seems like a good idea.
But wouldn't the next obvious step be to meter that in some way to not abuse a connection?
You know, like it's not just like the next obvious thing. So it's server based software and it's Apple.
True. I mean, when you look at all the stuff that just connects to the Internet anyways, it's clear they give zero craps about the amount of network activity and network connectivity they use.
They don't give a shit. They have no concept of like I'm using this on a tethered connection.
Now granted, there is an API now to tell that you're on a tethered connection and responsible developers could like, you know.
Act accordingly, right? So we were able to ascertain like what exactly they're doing or it's just telemetry, right?
In most cases, it looks like it's it's checking to see if something is on a denialist to checking to see if something is signed or it's checking to see if something needs to sync or like with Spotlight.
It's pulling in market information for stock searches and all this crap that I just don't need.
It's it's preemptively caching a lot of that stuff in the background.
Or there's a lot of assistant services and Siri things that just try to like connect and be preemptively ready when you click a URL bar.
All that stuff, though, generates metadata. Even if it's not intentional tracking, it is metadata that gets triggered.
And if even if it's not Apple that logs it, your ISP could be logging it. So I just turned all that crap off.
Yeah, that's not good. I don't even know. You know, it's just not good.
And it's kind of a garbage experience going through it because for like the first two days, you just live with tons of prompts about approving or denying software connectivity.
And you just have to wait because you can't really proactively go through and do it.
You kind of just wait until something prompts and then you tell it no. And so for like two days now, I'm just sitting here saying allow or deny. And I think I've caught most of it at this point.
But it takes a while to get it set right. And this whole thing could just be avoided if I could just go under like the Wi-Fi menu and say low bandwidth mode.
And then, you know, problem solved because they've already done the hard work of consolidating a lot of the background process and downloads in this URL session.
So it's like, just give me the damn option to just throttle that thing. It could just be a little checkbox in the Wi-Fi dropdown that says limited connectivity or something, for goodness sake.
There'll be no checkboxes and dropdown menus on Mac.
No, you can't have that. Maybe at best I could get something if I held down the option key.
Anyways, I really like Little Snitch. I paid the 47 bucks, even though after this road trip, I don't know if I'm going to ever need it again.
But I figured, you know what? Great software, really well designed. It's been around forever.
And now I actually feel like this Mac is under my control and it shifts my feeling about Mac OS.
Like I'm I'm happier with it again. It's doing the job for me once again.
And as long as I just use these tools to brute force it to behave the way I want, it's fine.
Oh, man, at least it's really cheap hardware and doesn't have a lot of ongoing costs.
So, you know. Datadog.com slash Coder Radio. Go there and sign up and get a free trial.
And if you create one dashboard, you'll also get a free T-shirt.
Yes, this episode of Coder Radio is sponsored by Datadog.
You know, they are the monitoring and security platform for developers, security and ops teams in the cloud age.
You can truly unify your metrics, your traces and your logs all in one place.
That means you can troubleshoot issues faster and break down silos between teams.
I was just visiting with a shop here in Denver recently that uses Datadog and they had very positive things to say.
You can create real time dashboards for over four hundred and fifty different business technologies in just minutes.
You can easily pivot from like a high level overview of your environment and zoom in, you know, zoom and enhance down,
get granular and visualize the metrics of specific events.
Datadog offers infrastructure monitoring, security monitoring, user monitoring, and it all brings it into one place
and makes it easy for you to communicate, display and just review.
So go get started with a free trial today at Datadog.com slash Coder Radio.
Go see why thousands of companies trust Datadog as their monitoring solution.
Go see why so many Coder Radio listeners are using Datadog.
It's Datadog.com slash Coder Radio.
If you start the trial and create one dashboard, Datadog is going to send you a free T-shirt.
Who doesn't love free swag?
Datadog.com slash Coder Radio.
So there's a meta topic you and I have been discussing for a while, and it's platform control.
And we've come at this in several different ways.
We've talked about it in terms of app stores before.
I think you could even say the CSAM scanning is an attempt to establish a bit of preemptive control.
But what we got insights into since, I don't know, the last episode or so,
it really shows us that every like worst case scenario we've spun in our heads about this is absolutely true and vindicated.
Because if this epic lawsuit does nothing else,
we are getting some great emails that are truly revealing the actual nature of these companies.
Yeah, I just want to take a lap here and say, so when I was talking about this crap in like 2013, 2014,
even all the way back to 2012, people said I was crazy or whatever.
I was right the whole damn time. Thank you.
It might have even been worse than you were saying.
It's actually worse than I thought it was.
Yeah, that's the thing.
So the emails that are coming out and there are some great summaries we'll have linked in the show notes
basically show that Google had a secret initiative originally called Project Hug
that offered certain very special high profile software developers very special treatment,
including maybe not having even kicked back a 30 percent fee.
Google's Larry Page told Steve Jobs in 2010 that, quote,
there will always be places we compete and there will always be places we cooperate.
After another meeting between Apple and Google and senior executives,
they had notes that showed that the executives all agreed, quote,
our vision is that we work as if we are one company.
That's some duopoly right there, Mike. And that's just the tip of the iceberg.
Like there was just emails that said we're not going to feature our competitors in the App Store.
There is all kinds of nastiness in there.
A lot of them are buried in PDFs, too.
My impression of this and the argument I even made back in like 2014 was that this is not necessarily evil
or wouldn't be evil if Apple didn't go so far and I'm going to pick on Apple a little bit to say that they didn't do this.
Right. Because if you look at all this stuff, it's actually businesses operating as businesses do and saying, OK,
there's this potential developer or partner or whatever that has a big enough audience that we need them.
And therefore we can't extract as much revenue out of them. So we have to make a deal.
That's just like how normal business goes.
I remember software, et cetera, which might not some people might not be old enough listening,
but like they used to make these kind of deals all the time. Right.
They'd get a better cross promotion with a publisher of a game or with a software suite.
You know, retail stores do this kind of crap all the time, too.
The difference is Apple, for whatever reason, wanted to have this. I don't know.
It's like wrap themselves in the in the flag of small business and like a quality for the little guy.
Well, it's obviously the best possible message they can derive out of that app store, right?
Yeah, but not if it's found to be just like completely false.
And it these emails revealed not only is it false, but it was never, in fact, true.
Right. It's always been the app store of big business.
Right. It's always been. Well, if you're Netflix or Microsoft, you know, but even OK, like I have a surprising.
Well, I think you'll find it surprising. But why don't we cherry pick some cases here?
And like just for folks who maybe didn't stay up all night and read all the emails.
Now, are you thinking like the big fish circumstance, like which one are you thinking of?
I was I was thinking, yeah, the I think I titled it sucks to be big fish games.
Yeah. Someone from app review is writing to their their upper management being like, I don't have a reason to reject them.
Are we just going to tell them nothing? It's amazing.
It ties into the other thing. There's an email and I think we link in the show notes where the app review executive is writing to the higher ups and saying,
if we're going to have an unwritten rule that you cannot compete with us to be in the app store.
Then we should just say that. Right. Because that ultimately a lot of big fish games, a lot of these come down to you can't be competitive with Apple.
Yeah. Or they're going to take there's going to be some sort of there's going to be some sort of down low, quiet, punitive action that they won't maybe even tell you about.
And then you as a developer just keep slamming your head against the wall.
Well, they have multiple ways of doing this. Right. In the case of big fish games, they just like two years of trying to get on the app.
So they let them on the app store. And I think a more interesting case is actually like Spotify or before they bought Shazam,
when Shazam launched a new app to replace and the quote replace iOS music player, piss them off, piss Apple off.
Eddie Q writes and he forwards the their announcement and this and he says and then Matt Fisher writes,
the team is asking whether we should promote this today. The iPhone guys have also called us asking if we're going to promote it today.
And of course, then Eddie replies to that email and says, no promotion.
We are not going to promote something that puts its goal as replacing our music player unless it's significantly better than our player.
And this is not. Now, there is the unless it's better than our music player, which makes it sound like if it was, they would consider it.
But something tells me something tells me, especially now that music is part of their services revenue, they would never consider doing that.
But there's also a tidbit in there that's a little inside baseball. But back when I was doing a lot of startup app development for folks,
let me tell you something. Being in the iPhone versus not being in the iPhone was a huge deal.
Forget about the money itself, about access and cooperation from Apple.
I think we talked about this a couple of years ago where I would have one customer who was like in the iPhone.
They were a startup. They could literally call up a rep and get help with whatever was going on versus like a regular business would just be like, it's a black box.
You submit it, but you get whatever back.
I'm reading through the Netflix stuff, too, where they where they're negotiating lowering Netflix's in-app purchase price
and talk about what Netflix think would happen regarding, you know, subscription cancellations and how they could possibly leverage that.
But they say they feel like, you know, for Netflix, they're going to have to give them a deal here because, you know, they're a special customer there.
It's it's it's really something to see these emails. This one's from Peter Stem to Phil Schiller.
And they got it right here. Epic got it. They got him.
It's good to be Apple, right? Like they got they became a platform king just at the right moment.
Right. They really nailed that app store thing. They almost blew it.
And they really turned that around and got themselves to essentially be the gatekeeper for so, so, so many users.
I have some bacon. Oh, really? Tell me a little bit about this bacon. Is it smoked?
Yes, this is smoked. This is gamified bacon. I think there's one thing that I don't know that's gotten enough attention during this epic hearing.
The disclosures basically would not basically outright proved that the games on iOS are subsidizing the rest of the app store.
Yeah. If we look at these kind of like bigger rejections, like the one where Microsoft tried to like get on their heels and fight Apple a little bit.
It's all about cloud gaming. And I have been dunking on cloud gaming for several years on the show, but I think we're getting to it now.
And that is a big, big market and a lot of that sweet, sweet revenue, that monthly recurring revenue.
And that's what it's all about. And how how Apple handles that will be interesting.
And what are they going to do when all these guys switch to a Web app? Also be interesting.
What are your thoughts on Google? I mean, how about this name? How about this name, Project Hug? How about that?
It's almost like the poor imitation of Apple's tactics in a lot of ways.
It's just even more ham fisted. It's like they they they came up with a cute, sick, twisted name for their cutting deals with special interest to, like, you know, pay their 30 percent commission or something like they got a name for it.
Project Hug. It's gross. Like that's just it's not Apple's not the only bad actor here.
No, not at all. I mean, there's stuff from from this hearing from this case that we've seen about Microsoft and Sony, too.
They're all doing this. Like if you are a big enough name that they need, they'll just make different deals with you.
I sort of find the Apple case more egregious because they're the ones who got on the soapbox.
You know, they always have those crappy like human interest stories at the beginning of WWDC.
Right. And no offense to the individual developers or the idea that, you know, we should promote less known developers.
I would love to be promoted, too. But it's that's just not the reality of the situation.
Yeah. Having said that, I think this is all good news. In what way?
Because once you get caught, you can't get away with it.
So, like, I'm thinking back to some of the hate mail that I in particular used to get from the show when people would say, oh, it's just whatever.
You know, you know, second place sweeps. I don't know what kind of kind of bull that Apple wouldn't do that.
It's a fair market, blah, blah, blah. They denied it. They said they didn't. Well, now they just got caught.
And I think the most common thing we got was like Apple's doing this for safety of the consumer.
Apple has to do this for the device security. Right. And it's bullshit. If you read the emails, it's revenue.
Right. It's it's it always has been from like the very early days from the day one.
Right. So the the thing is, once you get caught, especially in I mean, I don't think Congress is actually going to be effective because.
Yeah, but I think Apple is going to think twice and all these vendors are going to have to think twice about how how just how hard they laid the boot down on the neck of the indie developer.
I wonder, you know, we've covered over the years these developers who have had a big enough clout to actually generate some sort of press coverage about their mistreatment.
And there's been dozens of them now. And you wonder if they hadn't just screwed those up, if they had if they had just done right and just changed a few things like as time went on, they dropped the commission down.
And if they cut a special deal with somebody like Netflix, maybe they they institutionalize it and they make it a system that anybody can apply for.
And they had just done things like that over time. None of this. None of this would be happening.
They can't write their publicly traded companies. The chart has to go up into the right. You can't just make less money than you could make.
That's a good point. And especially when you have a lot of pressure to always be making more money, it really does get you to the point where eventually you have to start making some kind of compromise.
And if you can't sell, you know, if you can only you can only sell so many devices, there's only so many people in the market.
And then you got to start you got to start milking that existing market for revenue growth.
It's the only choice they have. Let's not forget, right in their little services pie, which is not that little, very big.
The largest part of it is, in fact, App Store commissions. Yeah, yeah, that's true.
I wonder how stuck they are, though, because some of these documents seem to suggest that Apple and I would assume Google struck deals with some of the carriers that if the app is purchased while on LTE or, you know, on their on their on the carriers network.
That they're getting like 20 percent of that 30 percent, like the carriers are getting a ginormous portion of that transaction.
And I don't know if that's still the case, and I don't know which carriers.
Well, granddad Monopoly's got to get in there, too, right?
But that makes me wonder, then, well, how much room does Apple have to move?
You know, if if they're if they're paying out 15 to 20 percent of their 30 percent cut to Verizon or whatever, they may not have a lot of room to move down.
They may be kind of stuck by their agreements that they stuck with these carriers to get them to allow people to download 200 megabyte apps on the carriers networks.
You know, because when the iPhone first came out, remember, they really limited that.
That was a big deal. And then and the network struggled. They struggled to keep up with the data use of iPhone users.
I still believe that the bigger problem is actually the control and the review of the applications and how restrictive they are when you are not them.
Right. Again, going back to Spotify for a long time.
And I think still presently, there are just things that Apple Music, which I am an Apple Music subscriber.
I use it every day. It's fine. But, you know, if it didn't come with like everything else I have.
Spotify is definitely the superior music service, right? Podcast player, but good music service.
But just that, you know, I can talk to my car easily and have a play.
Apple Music is, I don't know, the home pods that somebody convinced me to get that I love now.
Apple Music is easier, right? I don't know. I feel like we were at one point on this way to a glorious future of the open Internet and like Web applications.
And it was the 90s. It was going to be great. And then somehow Facebook and the App Store became the Internet.
And now we're all just a little sad.
I say it's the consumer's fault because the consumer couldn't figure out how to find without these curators.
You know, discovery has been a problem for all types of media and apps.
And these app stores and these platforms like Facebook came along and they offered news feeds and they offered curated apps and they said, go here.
You no longer have to think about it. And the consumer said, oh, yes, please. Yes, thank you. Thank you.
And now we're in this position.
Yeah, but I feel like, you know, great granddaddy was making the same argument about those new fangled magazines when they came out.
Probably true. Mr. Dominic, is there anywhere you want to send people this week before we get out of here?
Yeah. Follow me at Dumanuco on Twitter. And I am still hiring for a QA person and a Pythonista.
So and what is the best way for them to find you?
Because we had because I think we had mentioned they could like they could go find the job posting online.
But then somebody e-mailed is like, I don't know how to e-mail Mike.
I don't know how to get it. Yeah, it's a zip recruiter slash the Matabotter Inc. Actually, if you just Google the Matabotter jobs, it comes right up.
There you go. And we'd love to have you join us live.
We do this show Monday at noon Pacific, 3 p.m. Eastern over at JBLive.TV.
Links to everything we talked about today at coder.show slash 428, including those incriminating PDFs.
You'll find our contact form there. We'd love to get your feedback.
It was a huge part of this week's episode and we'd like to make it a big part of next week's episode, too.
Go subscribe, maybe share the show with a friend who might enjoy it. Word of mouth is the best way to spread these here podcasts.
But that does do it for this week's episode of the Coder Radio program. See you right back here next week.

This is Kota Radio, episode 363, for June 24th, 2019.
Hello, and welcome to Kota Radio,
Jupiter Broadcasting's weekly talk show that takes a pragmatic look,
well, at least most of the time, at the art and business of software development and related technologies.
My name is Wes, and I'm joined by our very best co-host, Mr. Michael Dominic.
Welcome back, Mike.
Hello, hello.
Now, we're lucky enough to be joined by one other troublesome fellow today, Mr. Chris Fisher. Hi, Chris.
Here comes trouble.
That's right.
That's what they always said. Every IT job I ever went to, and I'd walk up with another guy.
If it's just me, they wouldn't say that, but two of you, here comes trouble.
Well, you know, you got a buddy, a schemer, someone to help.
Somebody, I know somebody else has had that problem out in IT. Shout out at Chris Elias.
Yeah, well, when I heard you guys were talking about the art and business again,
at least one of your topics was the art and business of software development.
Those are always my favorite.
Yeah, I mean, it's deep because I love all the tech stuff. I really do.
And we're going to start with a little of that today.
But, you know, you got to do this for a living, and it gets wrapped up in how you live your life,
and that kind of, that kind of matters a lot. You only got one.
A lot of things Mike and I talk about off air is more like the how do you keep at it kind of aspect,
and that's something we've brought into the show over the years.
And, yeah, I wanted to contribute to that conversation because it's something that,
even as things have changed here for us as we've become part of Linux Academy,
my roles have changed, my work has changed, and that's had strange and different and unexpected impacts on me.
And I'm just kind of getting to the other side of it, and I've learned some things
and some lessons that I thought I already knew, but you got to learn them again sometimes.
Anyway, so when we get there, I'm excited to talk about it.
But I know we have a lot of things to talk about today, not just that.
Thanks for letting me be here.
Oh, yeah, of course. How are you doing today, Mike?
I'm good, I'm good. I'm looking forward to our menage a trois once again.
Did you load the new Mac OS Catalina beta?
No, because I'm not insane.
No, I got no intentions, no intentions of doing that.
This is going to be the most interesting in terms of impact just because of the 64-bit transition
and the read-only system stuff.
So I am fascinated from an observer standpoint.
It's interesting to watch them develop that operating system now that, you know,
we were kind of questioning for a while how much work are they putting in on that side of the fence,
but we're kind of seeing more now, even if half of it is Project Catalyst.
Yeah, I think they're actually, it seems like, it seems like they're about to actually make the Mac
a competitive workstation platform again.
Another rumor out today, 16-inch MacBook Pro with a new keyboard shipping in September, which we'll see.
Now, how are we, I've been promised a new keyboard before, so when we say new.
Well, you know, there was an interesting omission in a recent interview on a podcast
with one of the lead engineers of the Mac Pro, and he said that the current generation of MacBooks
were designed and built before their new Pro Services team that they worked with to design the iMac Pro
and the Mac Pro, and that the MacBook Pro would have the same treatment,
the entire line would have the same treatment is what the statement was.
Interesting.
Can you get the cheese grater form in that form factor?
Well, I think what they're going to do is they're going to come up with a super MacBook Pro,
like a big 16-inch that justifies a completely different keyboard.
So they'll keep maybe the keyboard on the current MacBook Pro that they just updated.
But they'll have a super expensive workstation model for, you know, all the complainers out there.
So it's a $5,000 laptop is what that means.
Yeah, we should all start a little savings jar somewhere.
Yeah, exactly. I don't think so.
I think, actually, I'm pretty happy. I've come to a new thing, so I'm pretty happy.
I know you guys have got a lot to talk about, though.
That's not what we're here to talk about today.
Yeah, yeah, you know what I would probably be running on that?
Well, we'll see. We'll get into that.
It might be Kotlin because that's my programming language challenge.
Not quite of the week, but, you know, the one we're doing right now.
Are you doing them weekly now, really?
I thought you kind of changed a little bit.
Like, you're giving a little more room if it needs to really go deep, right?
Yeah, we're alternating.
So, Mike, you're looking at Go now, so we'll talk about that at the next episode,
which I'm really looking forward to.
And you were looking at Kotlin.
Yeah, I've had a little time to sit and play with Kotlin.
Yeah, if you're not familiar, it's developed by JetBrains and managed by, well,
of course, the Kotlin Foundation because everyone's got to have a foundation these days.
It's interesting because one version of the story for Kotlin could have been that it was this,
like, niche little language, right?
Lots of people try to make languages.
Google made Dart, for instance, which seems somewhat comparable and comes to mind.
Most languages don't go anywhere.
Now, JetBrains has some advantages in that they make some of the best software development tools
in the business.
So they clearly know a lot about, you know, you have to get in your hooks into these languages
if you're going to make a nice IDE.
So you learn a lot about how that all works and maybe how to put one together.
It's just, it's been very impressive that Kotlin has become so popular so fast,
and, like, in particular with Google adopting it as, you know, language du jour on Android.
For me, I came from a lot more dynamic languages before,
and I'd done a little bit of some of the statically typed languages like ML
way in the past when I was, you know, learning computer science,
and I hadn't dabbled that much in Java.
I came to Java late in life, and I'll be honest, it was kind of painful.
Mike, I'm sure you can sympathize with that.
Oh, yeah. Oof.
So how did you work your way through it?
I mean, mostly I just sort of avoided it and used it where I could.
But it is useful, right?
I mean, the JVM is a fantastic platform to run on top of,
and there's world-class libraries out there for Java,
so you need or at least will want to sort of use those things.
But things seemed like they really changed kind of recently
when the situation between Oracle and Google heated up.
Yeah, that's a complicating factor, that's for sure.
Oracle, yeah. Oh, boy, Oracle.
Yeah. It seems like that head-to-head battle sort of started.
You saw more and more Android developers start to look at Kotlin,
and Google itself would start to talk about Kotlin more.
And if I understand, and I really don't,
but the little bit that I do seem to understand
is that Kotlin has a pretty similar syntax and concept
from a lot of popular languages.
So it's not a huge transition.
No, that's what's nice, is to me, it's been a breath of fresh air.
So it's not going to be like my go-to language.
I still really like some of the more functional things.
Not that we can talk more.
You can do functional programming in Kotlin.
It's just not, you know, super aimed towards it,
like something like Haskell or Clojure is.
But I didn't, you know, I never really enjoyed Java.
You can make Java work really well.
You can do whatever you want.
It's a very powerful language.
I just find it not a lot of fun to write
and it doesn't really inspire me to want to use it.
But you often need to use it places,
either for performance or just as bindings to hook into stuff,
libraries that you want to use,
or you're interrupting with people who use Java.
And Kotlin seems incredible there.
Now, you could use something like Scala maybe or Clojure,
but Kotlin's interoperability with Java is really just first class.
And when you're not doing interop, it's just like Java plus plus.
So if you're creating a Kotlin app or whatever,
is it running in a Kotlin runtime or the JVM?
Is it a binary app?
Yeah, so it just compiles down to JVM bytecode.
It can actually, you can actually do both.
So there is a thing called Kotlin Native
where you can straight up compile down to native code.
Oh, OK.
But 99% it's the JVM.
Yeah, so that's the main use case that you see
or for stuff like running on Android,
which is similar but slightly different.
And there is a weird, there is a weird JavaScript transpiling thing.
I have never done that.
But, you know, everything has to transpile to JavaScript now.
So why not Kotlin?
Yeah, that does seem to be the theme so far of these challenges.
So the thing about JavaScript is that you can't avoid it, right,
unless you only do back-end work for some service
that connects other back-end services.
OK, maybe you're in that narrow field that you've escaped it.
But if you do anything on the web,
you just have to use JavaScript, right?
And JavaScript, it's getting better,
but it's still painful and inconsistent.
Now, I don't, having just come from TypeScript,
I didn't play a ton with the JS side of Kotlin,
although I did get it up and running
and sort of poked around a little bit.
I don't know that I would necessarily choose that over TypeScript
just because TypeScript seems to be so popular
in the JavaScript community.
And you get a lot of the same benefits there
if you enable those options.
Now you get them in Kotlin by default.
Like, I love the way Kotlin handles null types,
non-null types, that sort of stuff.
The way you think about it without...
It's just, in some languages, you add it on with a monad,
like maybe or either,
and you see it everywhere in your code.
And that can be nice because it is very explicit, right?
You are thinking about, like, what's the failure case here?
Is this an error?
Kotlin, because they've sort of designed it
and lowered it into the fabric of the language explicitly,
it just feels a little bit more ergonomic,
and you kind of forget about it a little bit more.
We've talked a little bit, they're bringing some of those,
like you say, they're importing these features
from other popular languages,
and then other languages are copying them.
So it's kind of an interesting way to reflect
on language design as well
because JetBrains has been looking around,
studying what's been popular in the industry,
and there's been a lot of attempts at this stuff.
Like, Scala seems like a good example,
where it's a little bit more of a research language, right?
It's designed and developed by a lot of academics,
and it's absolutely a production language.
Right, but where Kotlin seems like it's very much
on the other end of that spectrum.
It's very much inspired by this Java,
sort of just, like, robust, professional, no-nonsense.
We're not going to be that flashy.
Right, our sales pitch isn't that we're
some sort of unique, innovative language.
It's more like, well, it's really pragmatic.
It draws on inspirations from decades of things
that have worked, which I think is part
of what's made it easily adoptable.
I think, Mike, you saw this one coming a mile away.
Yeah, I mean, Kotlin, even before Android adopted it,
or rather Google adopted it for Android,
just, I think at the time when I first saw this come out,
I was working on a very large-scale Java Play application,
and the interoperability that Kotlin provided,
even in its early days, just basically being a cleaner
and, frankly, somewhat less verbose Java
that could still pull in the client's existing JARs,
and, you know, so JARs are Java libraries, right?
And completely, you know, pulling great old dependencies,
just like your straight Java, was really nice.
Now, having said that, things have changed.
That was years ago.
I have to agree with Wes that Kotlin maybe wouldn't
be my first choice anymore.
I'd probably try something a little more functional.
For me, that'd probably look more like an F sharp.
But I have to say, given the choice,
like if I was targeting the JVM again,
I would probably be hard-pressed not to pick Kotlin, right?
I would be pretty enthusiastic about Kotlin over straight Java.
And some of the irony here is the JDK 11
is adopting many of the features of Kotlin.
Right.
Stuff that they had in their compiler
will now be supported in the host,
or at least one of their hosts.
That is interesting.
It does seem like a good choice, too, you know,
if you're not going to go pursue some of the more esoteric
or functional, you know.
If you have a team and everyone wants to go do Scala
and you're excited about Scala Z and some of the neat stuff
in that community, cool.
But if you just sort of want a better Java,
you want some improvements, a little modernization,
really nice IDE support.
Yeah, Kotlin seems like a good choice.
I'm curious what your process like was here.
Did you try standing up a few things?
Did you look at examples?
Like what's your exploratory...
I usually start by following sort of whatever
the most official-looking documentation is
just to try to get a sense of like what's the onboarding path
for some random person coming from the Internet
just curious about the language.
It's good thinking.
Yeah.
And in this case, it had been a while since I'd used IntelliJ,
so I got that going.
I know there's some integrations,
like they have a sublime text,
and I did play around with it just kind of using it minimal style
in the terminal with Vim.
But it seemed proper coming from JetBrains.
I should use it in its sort of home environment.
So that was an interesting part too just because I don't...
I'm not...
I mean, I appreciate all the neat features of IDEs
and I think especially for some of the languages
in the Kotlin and Scala and Java style,
like those IDEs are great.
Yeah, it's just not where you live every day though.
Yeah, exactly.
So that was kind of fun being on that side of the fence.
It was nice.
And it is, I mean, you know,
autocomplete and generating code for you,
and it's an interesting alternative style of development.
But it is in the spirit of, you know, fast feedback cycles
and giving you information and helping you understand.
And instead of a running program, it's a static thing.
But it feels incredibly dynamic because they're doing so much
to interrupt and interrogate with the code.
Get development environment set up,
and then I usually start with just some, like,
simple academic challenges.
I've been doing the advent of code because I like...
They're not purely...
You know, it's not just like a sorting algorithm
or something like that.
It's a little bit of novelty and some, like,
data loading and processing.
So you have to start doing some stuff.
Like, you want to start, you know, looking at IO,
looking at networking.
Sure.
Trying to understand, like,
how's the concurrency working in this language?
Yeah, when you think about the scope of it,
it's a lot of things to touch on.
You might also want to start, you know,
maybe you want to...
Depending on the type of language,
maybe you want to try to get, like,
a web stack up and going.
Of course.
I didn't do that this time.
But, right, that's a good one to start a play with
and see, all right, what's the, you know,
connections to the databases like?
Now, that's easier here because I was just using the JVM,
and that was an environment I was already familiar.
So most of the stuff I was interested in
was some of the compiler type safety,
all the little extras that Kotlin's thrown on top.
It has been fun.
While I was doing some research,
I'll have a link in the doc, of course,
coder.show-363.
There's a Clojure IDE called Cursive,
and it's like a plug-in wrapper sits on top of IntelliJ.
Clojure's a little harder because it is a very dynamic language,
so you can't do...
Or it's more difficult to do a lot of the static analysis
that you can do for languages like Kotlin.
It's also a little bit heavier,
or at least has more runtime, more dynamic nature,
so it can't always or isn't as easy to optimize in certain cases.
Originally, this IDE for Clojure
was written mostly in Clojure,
but the developer has recently changed
a whole bunch of its core to Kotlin
so that he could get better startup times,
and he just thought that the interoperability
with having to, you know, you have to hook into a bunch of Java
because that's what IntelliJ is based on,
thought that was more pleasant.
So it seems like that's exactly the use case I was thinking of.
I wouldn't maybe design my whole data flow pipeline
of architecture of my program and choose Kotlin,
but all the little pieces where I got to touch systems
or a little hot loop instead of Java, why not Kotlin?
I think that's the theme of my review.
Why not Kotlin?
That's pretty good.
That's actually kind of a title right there.
Good one.
Nice.
So now it's go time.
Now it's go time, yeah.
So now it's go time,
but are you ready for your challenge for two weeks from now?
Oh, I am excited already.
All right, all right.
So you've taken the journey,
you've held hands with Javaduke,
and if you get that reference, you're old.
And now you knew this was coming.
Objective C.
Oh.
No way.
You're throwing the gauntlet down, aren't you?
Wow.
Actually, I mean, part of me thought it was going to be
the first one he chose,
so I'm kind of surprised it took this long.
Absolutely.
Okay, I need a little help here then.
Can I get like maybe some suggested first steps?
Like what's the – what would you like to make sure that I –
what shouldn't I miss when I'm trying Objective C
and maybe how do I get started?
Oh, yeah, because there's a lot here for Mike.
So, yeah, there's a lot here, right?
And, you know, to make it easier,
just do a GNU step, the Linux implementation,
so you don't have to like worry about Mac VMs.
Oh, well that's nice of you.
That is nice.
Right?
I mean, if you want to set up a Mac VM, you can,
but by the time you do that, it's a huge pain in the ass.
The next version of Swift will be out.
Yeah.
I would say take a look at GNU step
and try to write any kind of small application.
It could literally do – I don't care.
It could do nothing, right?
But do it using pure message passing as much as possible.
Oh, wow.
Okay.
Yeah.
Right.
So take advantage of the dynamic messaging that Objective C has.
So like you could – you could just write C, right?
Because this is a superset of C.
Of course, right.
You could also write in a very C++-y style.
Try not to do that.
I mean, you'll have to some, but yeah,
try to do a lot of the dynamic messaging
and see what it feels like to not have the compiler protect you.
Just sort of pass messages around and deal with it.
Okay.
Just pass them around.
That's it.
Oh, man.
I cannot wait to hear how this goes.
This is – okay, this will be good.
I'm going to have to get started right away.
And I just linked to GNU step in the chat,
and I tell you, Wes, this project looks like it's well-maintained.
Real.
Mmm.
Oh, it's –
So this might be as much a GNU step report as anything else, huh?
Oh, man.
Look at that.
That takes me back.
Look at that user experience there.
We've got to put this in the show notes so the audience can take a look at this.
This is too good.
And this is, of course, more of a trolly one,
so if it ends up just being a pain, whatever, we can all have a good laugh.
No, this is a great choice, and, you know, it comes up so much.
It's so much a part of the Coder Radio heritage.
I've got to – I need to – this is my journey to explore Objective-C.
You're a brave man, Wes.
Wait a minute, wait a minute.
News about Objective-C 2.0.
This is going to be amazing, Wes.
I'm not entirely sure when the last time this project was maintained is.
Ha, ha, ha, ha.
It may be easier to get a Mac VM going.
I think some of the listeners did.
They were talking about it in the Telegram.
Hmm.
I'm pretty close.
I still haven't cracked it, but I'm really close.
I'm pretty good on that.
Yeah.
I'm really close.
You are.
You know, you have Hackintosh experience.
Yeah.
I do, too.
It's funny.
I got the GPU working.
That wasn't the hard part.
It turns out the hard part has been getting the USB password to work.
So my Mac VM detects my Ethernet cards but never gets an IP.
Hmm.
And my mouse and keyboard aren't working too well because something's not quite right.
But it works fine under Windows, so.
So it's not the underlying scheme.
I don't think so.
Hard to say, though.
Mac OS.
Excuse me.
Excuse me.
It's such a black box.
I mean, it's kind of fun to play with and poke with because you don't know what's going
on, but.
I, as much as I respect what Apple has done with Mac OS, when you do the Hackintosh or
the VM route, you do kind of see under the hood a little bit.
You're like, oh, it's just like every other OS.
There's subsystems that are like thought out, up to date, right?
They put a lot of time and tooling into.
That's the parts I respect the most, especially as a media production person.
Yes.
I can really respect that.
I mean, Apple audio.
Mm-hmm.
Mm-hmm.
And then other parts, you're like, oh, and then you just, you had some twine left over
from the nice thing.
Yeah.
And you used that to wrap up the rest into a pseudo POSIX implementation.
Yeah.
A lot, actually.
It's a lot like that.
But, you know, it works, right?
It does.
On their targeted hardware.
It totally does.
In their problem domain, they've got it figured out, and that's what matters.
They're not solving for me.
Are we ever going to see a server again?
No.
Well, no, actually, I think, yeah, didn't they, well, they just announced like a SKU
of the Mac Pro that's designed for rack mount.
You're right there.
Yeah.
That's pretty close.
Yeah.
Wow.
So it'll have like, I think instead of like handles and wheels, it'll have like rail mounts.
That'd be pretty, that'd actually look pretty slick.
Not bad.
I mean, and, you know, I guess $5,000 for a starting price of a server isn't outrageous.
Right.
Once you put it in that context, it's kind of like, okay.
It's just like my real fancy little weird GPU compute cluster that looks pretty.
I mean, you know, if you have a nice aesthetic, you've shown it off.
I think that case is ugly as hell, but we should move on to real time follow up here.
Apparently, you can apt install GNU step.
Lucky you.
Give that a try there, Wes.
Try it right now.
See what happens.
He's got his ThinkPad right here.
Oh, yeah.
Here we go.
Yeah.
All right.
Hitting yes.
64 megabytes coming on down.
That's all it is, baby.
GNU step and GNU step tack to Val.
Those are the two.
I love it.
I'm excited.
Thank you, Mike.
I hope you like square brackets.
I love all kinds of brackets.
I'm not a, I don't choose between my bracket.
I mean, I think curly is my favorite because it's just really fun, like on a whiteboard
to draw, you know, a really pretty curly brace.
No, it intimidates me to try to draw a curly bracket on a whiteboard.
Yeah, it's nice.
I can't draw a curly brace.
I always feel like an idiot.
So I had kind of a topic that caught my attention that was actually brought up by Mike in our
Slack chat.
Yeah.
So Mike brought it up and then you sort of were sucked into a rabbit hole, I'm pretty
sure.
As I do.
As I do.
Something I noticed when I went independent with Jupiter Broadcasting, I thought to myself
originally I'll convert this into what I called a lifestyle business and I'll just run it
as a small little business that makes enough living for myself and you know, a few employees.
And that was a beautiful dream that was absolutely impossible.
When you look at the hustle as a service culture that we now live in, it was never really going
to be sustainable.
And there is this pride that has developed in Western culture, even worse in the United
States, that Alexis Ohanian, the investor and guy behind Reddit now, really nailed in
an interview that Mike found on Wall Street Journal and I'll just read part of his opening
statement here.
He says, I've spoken out quite a bit about things like hustle porn and the ceremony of
showing off on social media about how hard you're working.
You see, you all see it on Instagram and you certainly see it in the startup community.
It becomes really toxic.
And this became like amazingly poignant just this week when over the weekend there was
this massive kerfuffle about Ubuntu potentially dropping 32-bit or I-386 support in 1910 Ubuntu.
Oh boy, my 32 bits.
That was announced last Tuesday.
It's actually, we have all the links in Linux Action News.
It's actually been in discussion roughly since May 4th, 2018 and I have followed the discussion
since then.
We've covered it in a couple of our shows actually.
But on Tuesday, Will Cook, the desktop manager for Ubuntu, announced that they were officially
going to deprecate support for the I-386 architecture.
That was on Tuesday.
On Friday, a Valve developer noticed, I guess he wasn't following it super close, but kind
of close.
And he immediately tweeted that, hey, you know, gonna have to drop support for Ubuntu.
This just wrecks gaming.
We're out.
Not necessarily a Valve position, but this staffer's position who's responsible and part
of the team.
So he likely has pretty big input or maybe not.
Maybe he even has, who knows.
But it's not an official Valve communication.
But from that tweet, the internet sort of erupted as it does.
Like half a dozen articles went live in a matter of hours.
A change.org petition was created to force.
That's the real sign, right?
Yeah.
Demand that Ubuntu include 32-bit support.
And Canonical responded, you know, considering that this thing broke Saturday morning, their
time.
They responded by Sunday morning, my time, which is Pacific.
So that's a decent turnaround, right?
The internet was not satisfied.
Once the primary thing they were upset about had been solved, they now had to continue
to justify the outrage.
Well, once you're spun up, you're just all in the huff.
And you need to, you know, there has to be rationale.
There has to be rationale.
And so the message changed to, well, you didn't communicate it properly.
This broke on a Friday, US time, and it took you until Sunday to say anything.
Like why aren't you working 24-7?
You're a multinational company with hundreds of employees.
Why don't you have, this is quote, why don't you have decision makers working 24-7?
To handle these things, end quote.
And I saw a variation of that every couple of hours all weekend long, including up until
as we went on air right now.
To handle Twitter rage?
That's no.
Right.
Yes.
That is the expectation.
Why aren't you here answering us?
And it builds so fast, like multiple articles get posted, mobs form on Twitter.
I mean, we watched this as a crew.
We were all kind of, it was really kind of neat.
We were monitoring all these various sources.
And so we were really watching this thing from a complete 360 degrees.
And it was fascinating to watch these mobs form and these different posts would go alive.
And then you would see the, you would just see like a big spike in the social media reaction
and the comments.
Right.
You had different people follow different outlets and they're suddenly, what's happening?
And it was all kind of like, even if say, just for the sake of this entire kerfuffle,
say canonical stuck to their guns and said, nope, dropped.
We're going the route of Catalina in Ubuntu 1910.
We are not going to maintain the I-36 architecture.
We're done.
Now we'll still maintain it for years in 1804 and 1604.
So you could probably just grab it from there or grab a PPA or a snap or a flat.
Like there was always going to be a solution to this problem.
It was never going to be a disaster, but it went to 11.
And then what I thought was fascinating is this demand of an immediate response.
And it really enforces this culture we have now entered where if you have a job that's
on the internet, you work 24 seven.
And we're, we, it happens to us here, um, part because it's, it's both hobby and profession,
but it really is like we have people all over the world.
Joe is essentially shifted to our time zone.
Like it's really, it really is a big problem.
And it, it is a massive contributor to burnout, a significant contributor burnout.
That's where I wanted to get your thoughts, Mike.
Yeah.
I mean, so there's a couple of things here.
Like one, I, maybe I'm just confused, but my understanding is like, this is actually
not that big of a deal.
No, this particular example is not, no, right.
The technical problem here is, is again solved with the PPA, but, and I think the Linux action
use coverage was much deeper and better.
And if you're curious listener go there.
Um, but yeah, I mean, we get this all, I get this all the time, uh, Chris and I have, uh,
Kovacs on many a Slack conversation about just constant, like basically death marching,
right?
Um, and I have to tell you, Chris, these are my experience.
People generally don't appreciate it.
Even if you do pull the all nighter to get that build out or, you know, in the case of
kind of the Twitter rage stuff, I've had people tweet a question to me and I didn't respond
in an hour because I was like, you know, doing my job and get like three, three follow on
tweets, right.
Or like emails.
It's just, the expectations have gotten crazy from, I remember way back when in my time
machine before like social media and Twitter, you would send someone an email and they might
not reply until the next business day.
And that was totally normal.
It's interesting to me, right?
Because it is, I mean, he kind of speaks to it there.
It's all about expectations and we're just so bad at being explicit about that and managing
them.
And once you've got these devices always on with you, you can check all the time.
We're just not good at it.
I think that's a bit of it.
Yeah.
It's definitely like, it's hard to set firm boundaries about like, Hey, uh, 7 p.m. till
morning is my family time.
That's not, that's a hard thing to not, especially as a man, because it seems sort of like not
a common thing to ask for.
Like, and the challenge here is the whole team knows we all have smartphones that your
boss knows.
You got a smartphone.
Like everybody knows you've got an always on device that's getting these notifications.
So if you're not reading it, you're opting not to read it.
And some bosses don't respond very well to that.
There are other situations where that's not, there's cultures where that's not acceptable.
And I think it's really common.
It's interesting though, um, from the Reddit co-founders comments here, particularly about
the, uh, there's one line that I put out in her doc, all of us who decide to start a company
were kind of broken as people, which, wow, a little obsessed might be, yeah, you could,
another way to put it is you're a little obsessed with something.
I mean, I think you know this too, right?
You're driving forward and forward and forward and your competition is not standing still.
Yeah.
There's competition.
There's also, um, just general adapting to the market constantly, especially when you're
dealing with a business that's online.
It's incredible how fast things change now, especially for the podcast market.
Podcasts are just growing like crazy.
Well, there's that new one where you have to subscribe, right?
And they've got like Bethany McClain, like there's some crazy stuff going on in the podcasting
world.
Oh, you're going to get all kinds of things, especially with Spotify and Kimlet and a lot
going on there.
There's going to, there's going to be subscriptions and premium content.
It's going to be just like Netflix.
It's.
Everyone wants a slice.
Oh, that's not happening for us.
We're always going to be free.
The feeds always going to be easy to find.
That's going to be our thing.
But, um, I have not learned my lesson here and this is really hard for me to admit because
this is super serious.
It is literally like something, if I don't figure out, I'm eventually going to kill myself.
And it's really humbling to admit that I'm too dumb to figure it out.
Like I just, I'm just getting over another physical ailment that knocked me on my ass
again.
And it ironically affected me exactly in the way that the recovery of the last one did
where my, my range of motion is limited.
I can't get out of bed.
I can't lift the children.
I can't pick heavy up.
I can't pick, pick up heavy objects.
That's like, that's living your life right there.
Right?
Yeah.
And it was exactly the same thing when I was recovering from the ruptured appendix and
it's something happens and I don't take the warning signs and I just assume it's going
to be okay.
And I just keep pushing forward and even, even when I know, okay, this is your off ramp
right here.
I don't take it.
And I keep going until I'm, until I am physically impaired, until I, until some sort of physical,
I just won't stop.
I will just keep taking it on more stress and more things until some sort of physical
ailment.
You're forced.
I mean, no choice but to stop.
Yeah.
It's the hard wall.
That's how, I mean, you just kind of kill yourself doing that.
And I thought when I ended up in the hospital last September and I spent a hospital bill
of $200,000 and seven days in the hospital, I thought, okay, well I guess I finally learned
my lesson.
I had to learn it the hard way.
And then here I am again and I just, I just can't believe, I can't believe I let myself
do it again.
I wonder if part of, have you been conditioned?
I mean before, right?
You were running and managing this whole business and so it was, I mean, just seeing you at
that time, it was, you were never off, right?
You had stuff to think about and worry and shows to plan and you couldn't stop.
You needed to keep going.
I think it's also, I think it's a symptom of I haven't fully built like a lever I can
pull where I can just be like, hey guys, I'm out for like five days and everything just
continues.
Because there's a few shows that's like, okay, well now we have to kind of scramble to figure
out how to get content for and stuff like that that I'm still producing, like LUP, it's
because it's kind of like the main show I do now.
And if I'm gone, like how do you, what do we do with that?
We don't have a solution.
We still haven't figured that out.
And I, there's other things, there's just other, I have other responsibilities now.
It's a challenge.
It's a real challenge.
And I don't know what I'm going to, I just, I've got to learn this lesson.
So learn from my mistakes, people.
I think too, it's like we're subject to the fact that there's a lot of people who are
sort of posturing online.
They'll posture as this, and Ohanian touches on this too, they'll posture on all these
things that glorify absurd things like, Oh, I'm, you know, I'm, I stay up, I stay awake
at night worrying about this particular problem.
You'll hear government officials say that all the time, or you'll hear about people
that are burning the candle at both ends and they're proud of it.
Like I got this out because I don't sleep, you know, like I don't sleep.
That's such a, you know, a line of pride for so many people.
And the irony is, is like, it's such a short term game and I am learning that so hard now
as I get to my mid to late thirties, I'm learning that like, yeah, it really is true.
Like there is a limited time you can just cash that check against your body.
And it re like that debt really does come due.
And the fact that our culture glorifies this posturing about staying up all night and under
place things like self awareness and self care and nutrition is the real problem here.
And I don't see it changing anytime soon unless somebody gets on the microphone and says,
this is a real thing that as somebody who didn't pay attention to this is now at the
other end of it saying, you better pay attention to this stuff.
Yeah, the same thing.
I mean, you remember Chris, we were doing the show, um, four years ago in 2015 I took
a heart attack from this, right?
And so this is like, I'm currently got some sort of sickness, but like sinus infection
of some weird kind, but still working 14 hours a day cause yeah, it's at some point I think
it's almost like becomes like a crazy addiction of like, you feel like you can't stop because
if you stop, you know, you, first of all, I think it's easy to set up bad expectations
with like customers and in your case, audiences, um, you know, clients, things like that where
it's, you know, sometimes things are just going to be late, right?
Sometimes you don't need to have three status meetings in a week.
Um, I don't know, I, I constantly go back to, uh, bell labs invented Unix and the C
programming language working nine to five with generous martini lunches, right?
And somehow we can't build stupid little mobile apps without killing ourselves.
Right.
And we don't even pay attention to the science, right?
It's the culture and the surface level appearances.
Even when, you know, there's plenty of, plenty of good science and reasoning to suggest that
we should manage ourselves a little better than that and play for the long haul, right?
So you can be more productive, get more done instead of being constantly burnt out and
slow because you haven't slept and can't think straight.
Yeah.
Yeah.
Yeah.
It's funny.
I really think so much better.
I, uh, I was doing some projects over the weekend and, uh, I've, I've probably set up
a mount in FS tab a thousand times, but they, all three kids were in my office and they
were all making different noises.
They weren't even really talking.
They were just making noises and their iPads were making noises.
It took me 15 minutes to like figure out what I was doing wrong.
I had to read this line a dozen times and then they, I finally said, Hey guys, would
you mind playing in the other room for a minute?
And when they left and it got quiet and I closed my eyes and I, and I look at it again.
Oh geez.
Really?
God, this is it.
Tossed down into that folder.
It's one folder up.
So stupid, Chris.
Yeah.
It really, I'm like, I have a totally different brain capacity sometimes and sleep plays a
big part.
Rest.
I was just talking with our buddy Alex, uh, who's often on the Friday stream and makes
it unplugged.
He's an employee at Red Hat and, uh, as part of that, you know, they get a little vacay
and he took it and he just got done doing a road trip, um, through like a Yellowstone
and whatnot.
And he said to me that, uh, about, uh, about three or four days into being there where
they didn't have any connectivity.
And he was just genuinely disconnected from work, um, that he started sleeping better.
Right.
Takes a couple of days.
You gotta really get out of the habit once you realize, well, I can't, there's no point
pulling my phone out cause I can't check anything.
Yeah.
He also said he was more focused and, uh, felt a little more creative when editing photos
because he just sort of, not only was the lack of distractions, but it was like the
accumulative effect of multiple days of lack of distraction and stress.
Sounds like a fun experiment.
But meetup is, uh, meetup, meetup.com slash Jupiter broadcasting is, um, if you haven't
checked it out, is a page where you set up a bunch of different, uh, study group sessions
and one that we have coming up pretty soon is really on point.
Meetup.com slash Jupiter broadcasting.
Understanding burnout.
Yeah.
This is going to be, I'm like looking forward to this.
And so, uh, when is that?
That is tomorrow before a Linux unplugged 1230 PM.
So it could be, if you're getting this on a day this came out, it could be like right
around there.
Meetup.com slash Jupiter broadcasting because we have that and then when we will, and when
we do post the video version of it, we'll update that meetup page.
So even if you can't make it to the meetup, you could stay up to date by following it.
And then down the road, we're going to do a security, um, presentation by, I think it's
a Symantec employee.
Oh yeah.
Explaining some of their threat report internet studies.
And then after that we're doing a five part series, at least that's the plan right now
on AWS.
Oh, there's a lot to cover there.
Mm-hmm.
Yeah.
And we have a really, really, really, really, really sharp individual who's helping us put
it together and we're doing some new stuff, new presentation style.
It's really going to be good.
We just put it all out there for free.
So it might not all go on the channel though, so you'll want to stay tuned for that.
Mixing that up.
Yeah.
But you can get all the past ones over on our regular Jupiter broadcasting channel.
Yes.
I feel like though, the one thing that's a little different about this whole go round
that is, I feel like the silver lining of my most recent like issues is I'm much more
aware of the process and I'm able to keep tabs and I'm like, oh, now I'm at this level
and I'm not freaking out about it.
I'm not strutting, but I'm like, oh yeah, I'm getting, I'm doing this again.
Like I'm, I'm just, um, I'm staying, uh, what's, what would he call it?
Um, you know, I'm just staying observant really.
Yeah.
You're aware of what you're thinking.
Sure.
You're, you know, you're not going to fix everything straight away, but you're at least thinking
about and you're aware that this could happen.
I feel like it's a form of mindfulness that sort of reduces the stress of it a little
bit.
So, and I like, I feel like because I've been through this, I kind of have a plan to off
ramp.
Next week I'm going to go on a road trip from Texas to Washington and I think that'll be
a nice chance to unwind.
I won't do any shows.
I'll just, me and the lady will drive across country.
It'll be a, it'll be a fast, hard drive.
Open road.
Yeah.
Something a little different.
Oh, that sounds great.
I'll just either drive with the windows down, I think it'll be fine.
So I'll be, I'll be all right.
See, I like, I've planned my off ramps, like I know myself now and I think I know how to
correct it before it becomes major bad, but I, uh, I let it go for too long.
It's easy to do.
I mean, there's a lot to do and it's, I mean, I think it's especially hard when you care
about what you do, right?
Because you're, you're extra driven and you can't, can't turn it off.
Yeah.
That's true.
You don't, it doesn't turn off.
It don't turn off.
Do you have any, any tips, Mike?
When you, when you need to find your off ramp or do you do any, um, communicating around,
you know, communication expectations or any of that with people you work with?
Yeah.
I try to like, well, I'm trying now to run a better processes that basically don't have
hard dates that are going to be impossible, particularly when you have dependencies on
either other vendors or, you know, the customer.
That's a big deal.
Right.
Steph, that's kind of out of your control.
Any listeners who are feeling burned out and want to offload some.net or mobile development,
call the mad botter.
Hey, what's the best way for them?
What's the best way for them to reach you?
Uh, go to the mad botter.com.
That could be a great way.
If somebody is struggling with a project, why not hire Mike and his team to do it?
Yeah, let Mike do it.
They know what they're doing.
And if you love F-sharp.
Yeah.
Oh, what now?
All the latest and greatest functional techniques to make sure you get your project quickly
and probably on time.
If you're looking for just a good time, by the way, call one, no, I'm serious.
No, actually, no, check out the Friday stream.
I thought it was one nine.
No, it is now.
Check out the Friday stream.
Friday stream.com.
The one good thing about Mondays is the Friday stream is published.
We stream it live on Fridays, except for this Friday, and then we publish it on Mondays.
And you, you went up against Drew, wasn't it?
Oh, yeah.
Drew and I.
To compete for a game for an audience member.
And I don't want to say who won, but let's just say there's a lot on the line.
There was a lot on the line.
Oh, man.
West had lost a previous one.
Ooh.
I had my honor and self-respect on the line.
Yeah.
And if you're looking for a new gig, maybe where you're working at right now is burning
you out.
Linux Academy is hiring.
You can go to jobs.lever.co slash Linux Academy or just go to linuxacademy.com and they got
a careers link way down on the bottom of the page.
And we'll have it on the show notes, too.
That's true.
We'll have a link in the show notes.
Great pay, benefits.
You get to work remotely.
And you get to hang out with us.
Like we're, at the end of this week, we're going to a big old company event.
Come hang out with West and I.
Yeah, that's right.
And, I mean, you know, you get to work on a pretty cool platform that helps people learn
stuff.
That's true.
There are worse things to do.
Yeah.
And it's a, it's a cool platform, too.
You get to hang out.
That's over in the show notes, as West pointed out.
Oh, yeah.
And, well, if you want more Coder Radio, we've got the whole backlog, coder.show.
You can find this particular episode, number 363, right there, too, and all the rest.
You want a whole bunch of other great shows, some of them, with Chris, well, jupiterbroadcasting.com
has all of that and links to just about everything else, including the calendar page.
That's where you can find out when we're here live.
We do this show every week, just about 12 p.m. Pacific.
And the magic of Google and the internet, well, it'll tell you whatever that is in your
time zone of choice.
If that's still not enough content, well, you can also find us on Twitter.
I'm at Westpane.
Mike, you're?
At Dubinuko.
And Chris?
I'm at ChrisLAS.
Yes, you are.
We've also got a network account at Jupiter Signal.
Thank you all for joining us.
Come join us here live next week.

This is Coder Radio, episode 448 for January 10th, 2022.
Oh, hello and welcome into Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and the business of software development and the world of technology.
My name is Chris and joining us every single week is our professional podcasting host,
Mr. Dominic.
Hello, Mike.
Hello, Chris.
This is my new NPR voice.
Here on the show today, we're going to be very calm.
Very calm.
We haven't made any mistakes.
There will be no mistakes in this episode because we are very professional.
We definitely haven't done the four count like three times.
This is like our third intro now.
Totally not.
When you're rounding almost 450 episodes, you know, it's just instinctual.
So we can't mess up at this point.
Right?
It's impossible.
Even our mess ups are intentional.
When the president does it, it's not illegal.
Yeah.
Nixon became a little Irish at the end there, but I'm working on it.
Nixon's going to be joining us soon.
I think you could do a modern Nixon.
I think I might be a modern Nixon.
Got to get the peace sign going, you know, get your hands above your head, shake your
hands.
I am not a crook.
That's actually pretty good.
That might be better than your Jar Jar.
As you age, the voices in your head change a bit, I'm evolving from the innocence that
is Jar Jar Binks to a more cynical Richard Milhous Nixon.
Which Jar Jar was inevitably going to turn into had they continued to develop his character.
And not made him a very sad street clown, which is literally what they do in canon.
So John wants us to kick off 2022 by going through some of our favorite Mac apps to make
it a little more usable.
He says, I feel like I live in a bizarro world because I'm kind of a kindred spirit to Chris
where I have an M1 Mac and I also have an X1 Carbon running Linux.
So I was wondering, now that you guys have spent some time on the M1 Mac, and I'll be
spending more time with it over 2022, do you have like a top five must have applications
to cut down on some of the Mac's rougher user interface edges?
I know that the free software users out there don't like Mac OS and they don't like you
talking about on the show, but I got work to do.
And he wants to know what we would recommend for getting installed on the Mac for him.
Number one is Parallels.
Number two is Parallels Toolbox.
He says it looked like an attempt to just get a subscription from me, but I found them
actually to be useful.
He likes Warp, that new terminal that you've been using.
He uses Bitwarden for his password management and Visual Studio Code for his text editing,
obviously.
I didn't want to spend a lot of time on this because I don't have like a great list.
I did a deep dive a little over almost two years ago now, and I came up with a bunch
of good apps and a lot of those still hold.
For me to make the Mac usable, I need a few things like iStat Menu, Bartender is a big
one for me.
It hides all of the icons up in the system menu bar that can just load up the Mac menu
bar now like it's a Windows XP box.
So I like Bartender quite a bit, and then Magnet for window management, so that way
I can snap windows to each other and snap them to the edge and use keyboard combinations
to throw them around.
I like that a lot.
That's probably my top list on top of what he's already listed here with Bitwarden and
Parallels.
Do you have any others that I'm missing that you thought makes the Mac a lot better?
Yeah, so I'm right with you on that.
Actually you introduced me to Bartender a month ago, a couple weeks ago, whatever.
Magnet is like a must-have for me.
Dash, which is a source code library management tool, I don't know how you'd call it, but
it's a great indie app that basically you can keyboard shortcut like it just did and
open it up and it has different doc sets for different programming languages and platforms
and you can quickly look things up.
I use it all the time when I'm on Mac.
Warp terminal, by the way guys, thanks for the t-shirt.
Apparently if you tweet at people they might send you a t-shirt.
Has become my go-to terminal.
Yay.
I'll give a plug for Transmit when I'm looking to deal with S3 buckets or SFTP or Samba or
even Dropbox and I don't want to install the client or Nextcloud, I use Transmit from Panic.
Paint code actually, but that's like a way to develop it.
I don't know if you've ever heard of this app.
I think I mentioned it years ago from images that can generate code in Swift, Objective-C,
JavaScript, C-Sharp, I think even for Unity now it does the Unity flavor of C-Sharp, so
that you're basically not dealing with bitmaps.
I also am using Rocket, which is a tiny little app that lets you do the Slack style emoticons
anywhere.
So you have colon and then you type the name like, you know, pepper.
And yeah, you can do it in any app in macOS, which is just a quick way to get to emoticons
if you're that kind of person.
Oh, Fantastical too.
Yeah.
Yeah.
But of all of those, I probably could not give up Magnet.
Yeah.
Magnet is super, super useful.
I think if you've got a Mac with a notch, Bartender is kind of mandatory as well.
I can't see Apple not building that in in the future now that they have a notch.
Yeah.
That's the problem with making Mac utility apps, isn't it?
Oh, for sure.
I mean, Bartender's had a good run, you know?
That's been around a while.
It is time to go, my friends.
Yeah.
Sorry, Bartender.
We love you.
Speaking of Mac, we didn't have this on the show, but I have been doing some Swift UI
development.
Oh, yeah.
We talked about this a little bit off air.
How is that going?
I weirdly like Swift UI.
I'm sorry.
What?
I just fell out of my chair.
You'll have to say that again.
I know.
I actually kind of like it.
Huh.
Now, maybe I'll hit some wall, but it's been pretty good so far.
It does have some of the, I would say, do things our way-ness that is, you know, Debra
Gur for Apple.
But especially to get like just a quick internal app up, it's definitely a good tool.
I want to hit this pretty hard.
This is iOS.
I haven't tried the catalyst or the, you know, that kind of stuff yet.
So you're doing this on the iPad Pro?
Actually, yes.
Wow.
So you're helping bring that future that we fear.
No, that's good.
I was going to ask you to give me an elevator pitch, but I think you just did with the,
it's a great way to prototype in-house apps and things like that.
I could totally see that.
It's interesting too, because you can bring over all the UI kit stuff by just wrapping
it in a class I'm probably going to blog about called the UI representable.
It may not in fact be a class and I think about it, but it's very interesting how they've,
I can't say brought over, but they've made it possible to do things the old way when
it makes sense, when you have something fussy that you want to do, but not make that easy
enough that you wouldn't necessarily want to all the time.
Sounds about right, actually.
I mean, for simple views, like for instance, I've been screening around with sign in for
Apple for a few things and the sign in with Apple button, it's like its own thing, is
a UI kit control, then there is no Swift UI equivalent, so you have to wrap it.
That's really easy, right?
Because it's just like a button and you add a tap gesture and you're done.
But for things that are more complex, you can get into some interesting cases.
I don't know that I wouldn't just jump to Swift UI if I was making a new consumer facing
iOS app.
Right.
If you're starting today, even if I was starting like last week, yeah, I follow you.
That is an interesting moment.
That's like a line that's been crossed now.
I mean, I could definitely see if you're working for some digital agency and they're like their
client is, I don't know, name someone who cares about the brand a lot.
Nike telling them, well, we can do this real quick and Swift UI, it'll be fast and perform
and be done, but you can't have your fussy, you know, whatever your weird, fussy transitions
are, whatever you want.
Although I'm not sure that that's a can't, I just think it's one of those things where
you might want to say no because it's a pain in the butt.
You don't really want to do this.
It's going to be a lot of work.
There is some bad here.
I don't know why, but we may as well do it today, right?
I don't know why Xcode hates my iMac Pro with Xeons, but it definitely does.
And it makes this computer feel, this $5,000 computer feel slow.
And it makes me deeply sad.
It's funny how that happens.
Horrifically sad.
I don't understand what could possibly be happening in the background and why the builds
when you do a clean build of what I consider to be not that big of an application.
So how can we put this?
Tortoise-like.
It does make me miss the raw unbridled power that is Objective-C. But I mean, obviously
I need to spend 10 grand on a MacBook Pro now because I'm not giving up Swift UI.
Well, and you got to have speed.
I mean, you know, I mean, let's be honest.
What are you going to do, buy three iPads?
I really just schedule my tea making around builds.
I'm not joking.
That's what I do.
Yeah.
Yeah.
Oh man.
It happens so quick.
They just get obsolete so quick.
Maybe listener Jacob has nailed it.
He says he bought himself the M114.
Listener Jacob has written into the show before.
I've had an opportunity to meet him a couple of times.
Tried and true open source advocate, Linux user too, but he recognizes the tool when
he sees one.
He says, I got the 14 inch M1 Pro and I have a workflow that almost exclusively uses the
10 neural engine cores.
Dying to know what that is.
But Activity Monitor gives him bubkiss for utilization information.
It's sort of a bummer.
He wondered, do you have any thoughts?
I'll tell you what the workload is here in a minute, but before I get there, do you have
any thoughts on these specialized cores that we see baked in by Apple and by arm makers,
but now Intel as well has announced that they plan to do specialized cores.
This seems like maybe this is their solution to heat and energy consumption, right?
It's just specialized devices.
If you think about it, you're, especially on a notebook, your big problems are 90% of
the time, most users, right?
Even professional users are doing like non hardcore stuff.
They're not throttled.
You know, they're not pushing the throttle to the maximum.
They're not whatever rendering video or compiling two files of Swift and Xcode.
They're like responding to an email or writing an invoice or doing something like that, right?
So those were your efficiency cores come in.
I'm assuming he's doing some AI stuff.
You could probably have like, and this is what the M1s do, you have like special performance
cores, but like some are better for like graphical stuff.
The neural engine cores are good for that kind of thing.
There's raw high power cores for straight up like compiling throughput, that's not bad.
I think everybody's going to have to do this and this is probably going to be the trend
in hardware for the next five issues.
Yeah, I totally agree.
And I would have to imagine that during this transition, or maybe even after it's normal,
there's going to be a lot of, well, this CPU can do this workload and this CPU is best
for this workload and it's going to make comparing and contrasting these devices much, much more
complicated and it really is going to force people to double down on that.
It's a tool and sometimes you buy this tool for this type of job and you buy this tool
for this other type of job.
We're already seeing that with the new M1s, right?
That for the most part, unless you are doing something rendering video or some other kind
of like high intensity graphical work, you probably don't want the max, right?
If you're like even like a high end fancy coffee dev, you know, who's just like likes
pretty things.
I don't know anybody like that.
The pro is going to be more than sufficient for you.
Very much so.
I got the max.
Yeah, but you do media stuff, right?
I do, but I bet I could have got by with the pro.
I really feel that way.
I'm not even shitting you.
I still haven't heard the fans in this thing.
I still haven't.
I'm not easy on it, right?
I mean, I've got a lot going on, not to mention about 20 Chrome instances.
I mean, it's really it's very impressive.
If you want to tax it, just compile.
I'll send you a repo, compile some Swift and open 20 Chrome instances.
And there you go.
I am telling you, I have never in my life experienced a situation where I have bought
a new computer and been basically unable to max it out.
I mean, I'm sure I could if I made an artificial workload.
Oh, yeah, you could like whatever, right?
Like DaVinci yourself to death.
Yeah.
I could do with something.
But in my actual workload, this has never happened to me before.
It's like there's just more machine.
It always has more to give deal with the dumbfounding thing about this whole conversation is I feel
exactly like you feel about my M1 air.
It's basically toe to toe with my other than the big, big, big asterisks of I have no good
way to run Windows x86 because I need Visual Studio.
The reason I didn't buy a pro was I just couldn't justify it with how I mean, the air, the battery.
No, today I was driving around all morning, it was just errands and I had to do some work
in Plant City.
I didn't even think last night if my air was charged because it's the air.
It's always charged and it doesn't matter.
Yeah.
Likewise, when I was stuck in the woods a couple of weeks ago, I didn't plan to do any
shows from out there.
So I had to cobble together kind of like an emergency setup that I have.
And the M1 Mac Mini did the job that I'm not kidding you, three x86 PCs do in the studio.
I did it with one Mac Mini and it did it sipping power.
I think, you know, 25 watts of power.
I can't actually understand it because it's that scale of a change.
And that's the damn mini because I didn't even have my laptop with me because I didn't
plan to be out there working.
So I had to do it all on the mini and it does it fine.
Now that is a situation where I'm near the limits of the machine, but I have not yet
reached the limits of the machine.
But that just kind of shows you the runway.
All right.
So here's what Jacob is doing with those neural cores that sounds really awesome to me.
He is running Topaz in the background and he has it chewing over, see if he can see
it.
It's called Topaz AI Video and it's an enhancement tool that he is bringing in old low res home
movies and then this AI upscaler is converting them from 480i to higher resolution and frame
rates to look better on his new displays and stuff.
Super neat.
Well, OK, then.
Yeah.
And doesn't that seem like the perfect kind of use case for the neural engine?
Definitely.
That actually seems like something they probably designed it for.
If you guys have any M1 workload tips or great Mac apps that we missed or Windows or Linux
apps, always welcome as well.
Coder dot show slash contact.
And our last email today comes in from Jack.
Just a quick one, really.
He wants to know if you've really had any passing thoughts.
At Flutter, if you've given it a try or have any thoughts on it, because he is thinking
about making a move, especially given the recent announcement from Canonical and their
use of Flutter and of course, Flutter's use in Fuchsia.
And as a web developer, he started working on a mobile app and realized, geez, Dart and
Flutter could be a great solution here for us.
So he wanted to know if you had any thoughts on using Flutter.
Yeah, we even discussed it on the show, right?
And on the Mike Dominic show way back when I interviewed somebody from the Flutter team,
I think Chris, I don't recall the last name, I apologize.
It's certainly a good framework if you're familiar with that type of development.
You know, I ended up not using it because when I was really deep into mobile, I was
mostly doing Ionic, which for those who don't know is basically a well, now you could do
more.
It has Angular and some custom components.
Now I think it does view and react as well.
I'll be honest, I have a little bit of Google killed my reader PTSD.
Basically every product I've liked from Google, they've killed.
And when I say every, I mean, except for Gmail.
So I did not choose Flutter.
Having said that, Flutter has been around.
I see a lot of jobs go by like contract jobs that are for Flutter.
I would say it's certainly taken a pretty serious place in the, you know, I want a cross
platform platform business mobile app world, probably on par with Xamarin.
And you know, Xamarin has a good habit of shooting themselves in the face.
What do you think of Google being the big effort behind it, the big energy instead of
somebody like Microsoft or Apple?
You'd have to go back like a hundred episodes or something, but I was kind of not understanding
why Flutter had to use Dart instead of like JavaScript or TypeScript.
It's kind of off doing its own magical little thing.
And this ties into your question.
And that I think the reason for that is Google made it.
That's what I was thinking.
You know, there was this weird time a couple of years ago where like, and I really do think
it was not to get back to Apple, cause I know people hate that, that Apple envy of Apple
released Swift and Google felt a lot of pressure to kind of do its own thing, right?
I mean, especially at that point in time, the narrative around Android using Java was
really at its peak bad because there was several solutions that Google had yet to roll out
to improve the situation.
So this is where things get weird because they adopted Kotlin from JetBrains for Java.
Yes.
And Google also, I believe, invented Angular.
It's like, it's so weird to me that, you know, Ionic is this like relatively small company
that already had Angular running as a really good, if you just want like line of business
applications, cross-platform mobile development solution based on the open web and Angular.
I always thought it was funny that Google didn't like, I don't know, just eat them,
right?
Just like buy them or help them in some way.
Cause their whole business is they have like an enterprise plan and you can pay them to
like co-sign your apps for you and all this kind of stuff.
But I don't know, I guess I would turn the question around and be like, and say, all
right, other than Flutter, where am I going to use Dart?
And you could say the same thing about Swift, right?
Other than iOS.
I was going to argue with you on that last point, but I think you're probably right.
Especially when you consider outside of some of these canonical and Google projects.
Google and canonical.
That's like the Jack the Ripper and Ted Bundy of killing things.
I'm not sure that I would necessarily base any major risk on that.
Sorry.
I mean, how the hell does Google ever solve this problem?
I'm still mad about what the hell was it?
Not Google work.
Google.
Wave.
Wave.
Thank you.
The one I'm always bitching about.
Wave.
That's because we, I think for just a brief minute, I know we did it with some of the
shows.
We probably did it with Coder.
We experimented with using it.
We had a wave.
Yep.
And it was actually really useful for show prep.
It's like what Slack should be.
Oh, right.
It was before Slack.
It was way before Slack.
Right.
Because Slack has yet to like hit 10% of what wave was and Google was like, nah, no, we're
done.
We're done.
We're done.
It's, it's been a year and you know how we are.
We can't take it.
Linode.com slash Coder.
Go there to get $100 in 60 day credit on a new account and you go there to support the
show.
Linode is fast and reliable cloud hosting.
Full stop.
Just use it for your next project and see what I'm talking about.
It's always what I use for my projects.
Everything I've built for the last couple of years, it's been on Linode and easily Linode
just keeps getting better.
I mean, it's not, it's not even a contest when you look at the other folks out there.
Linode is constantly pushing the envelope for performance.
That's one of the reasons I love them.
And they've just rolled out game changing MVME PCIe storage.
They have AMD epic processors.
They are their own ISP.
You see what I'm saying?
It's, it's ridiculous.
So if you're a performance hound, man, the reasons to use Linode are just obvious, but
maybe, maybe you're a little more practical.
Maybe you pick things because they're well priced.
Maybe you pick things because they're well supported.
Well, Linode checks those boxes too.
They've been doing this for 18 years.
So over that time they've had to figure out how to get it right and they've remained the
largest independent cloud provider in the world.
In fact, I would encourage you to consider Linode for a multi-cloud strategy.
Maybe you've already got some infrastructure on some of the big hyperscalers.
Well Linode's 30 to 50% cheaper than those hyperscalers.
Maybe there's a bit of your infrastructure that would be a little better off in a multi-cloud
environment.
A lot of companies are doing that over 2022 and Linode is one of the best out there.
They have a white paper on their site that looks at an analysis of the market when you're
in a multi-cloud setup.
It could help you figure out some of the real numbers behind a move like this.
And I hear from our listeners all the time that when it really matters, Linode's customer
support comes through.
There's no forwarding you to the next tier.
Let me put you on hold while I check with my supervisor.
That's not how they work over there.
You call them, you send a ticket in, however you like to work, they get somebody on it
24-7 and they take care of you.
On top of that, they've got 11 data centers around the world for you to choose from.
They have object storage, cloud firewall, backups, and a lot more.
So go build something, go learn something, try it for yourself, and support the show.
Linode.com slash coder.
Get $100 in 60-day credit and kick the tires for yourself.
Linode.com slash coder.
Well the story that probably got sent to me the most this week is this developer who corrupted
that MPM library that, it's two actually, Colors and Faker.
My homie.
I love this.
This is some gangster ass right here.
That's what's up.
I mean, I feel real bad for people, but okay, here's the highlights.
This first random bleeping computer, they found that two libraries that a specific developer
was responsible for had new commits.
He added the quote, new American flag module to colors.js yesterday or the day before as
we're recording.
Yes.
Then pushed it up to GitHub and MPM.
They were sabotaged and it ended up doing a loop output of strange letters and symbols
that began with texts that reads Liberty, Liberty, Liberty, and then loops over and
over again.
Now to put this in perspective, Faker.js sees nearly 2.5 million weekly downloads on MPM
and Color.js gets about 22.4 million downloads per week.
This is not small stuff.
It's baked into some of the Amazon cloud development kits.
So some of the very first reports came from Amazon cloud developers.
It seems the reason behind the quote mischief as bleeping computer puts it is that the developer
was retaliating against mega corporations and commercial consumers of open source projects
who extensively rely on cost free and community powered software, but do not, according to
that developer, give back to the community.
In November of 2020, the developer warned that he would no longer be supporting the
big corporations with his quote free work and that commercial entities should consider
either forking the projects or compensating the dev with a yearly quote six figure salary.
He says, quote, respectfully, I'm no longer going to support Fortune 500 and other small
sized companies with my free work.
There just isn't much else to say, end quote.
And fast forward about a year and a couple of months and it's American flag module time
and liberty, liberty, liberty and a bunch of looping crazy output that developers had
no idea where it was coming from.
And the internet is split right down the middle on this one.
Some in the open source community are calling him a hero, bringing attention to a desperate
cause and others are calling him essentially a software terrorist that should be banned.
Where do you lie?
So there's more to the story, right?
Before we before we land on all right, yeah, fill in more.
So MPM reverted the change he made and then GitHub suspended his account, right?
He also has like 100 private repos.
Now I am looking at his account right now.
It appears to be up.
It would be great to get some confirmation is when they say this is they suspended his
access, but they left it up so that other people can use this private repos.
That seems super.
Also like where is the line there?
Also it's his.
Right?
Does he not have the right to destroy his own stuff?
Apparently not.
Apparently he has the right to use the service as long as he's being a good boy that's productive
that corporate America could make money off of.
But the moment he starts creating something unproductive, they block him.
Yeah, it's pretty hard to see it any other way.
Now sure, he's doing malicious stuff and they probably want to take actions to ensure the
trust in their own platform.
But man, shutting him down like this and not giving him access to now his own stuff.
It really reminds you why if something really matters to you on the Internet, you need to
host it yourself.
Just like my GitLab instance, you just do it yourself guys.
Yeah.
Interesting.
There's an interesting couple of meta layers to this, I think.
I mean, you do have the people that are saying he's like, you know, a flame out kind of punk.
Essentially software terrorism is what some people are saying on Twitter.
And then you have the other side that says it's getting to be a desperate situation.
He had a plea for help.
Nobody stepped up.
What is he going to do?
And you got to figure like, there's probably a pretty considerable emotional strain for
somebody in this situation.
They are on the verge of burnout constantly.
They're struggling financially.
They probably can't get their life together because they're torn between too many different
priorities.
I mean, you could really kind of see how this person may have been going through a year
and change of health.
And this was sort of a breaking point for them.
And I have a hard time getting angry at them.
Yeah, no, I'm totally like on the side of this dude.
We have come close to this and I know that with all the Mac love and all that stuff,
it's going to be, oh, we're going to get some bad feedback, but the current model of open
source just isn't working right.
This guy, his package underpins so many projects and he doesn't make a dime.
And then he goes and says, hey, and somebody needs to pay me.
And because there is no legal obligation to pay for his labor, he just, it's crickets.
And let's not forget, like one of the more popular ways that this stuff is used is in
the Amazon web development kit, which is something that Amazon puts together to make it easier
for developers to create applications on their platform so they can make money.
So Amazon can make money.
Let's not confuse this at all.
The entire reason a company like Amazon puts together a well done SDK is to make it approachable
by developers.
Well, why do they want to make it approachable by developers?
So they can make money.
I mean, I don't know what to say and I don't know this guy from Adam.
He maybe has some other crazy ideas, who the hell knows, but the argument at hand of should
people be giving multibillion dollar corporations their labor for free.
And I know we're going to get a lot of for this, but wasn't it just like two months ago,
people were yelling at us for being rapacious capitalists, right?
And I'm basically here picking up my hammer and sickle and be like, no, I don't care if
this dude did it in kind of a douchebaggy way.
The man is right.
He needs to be paid.
The lesson I learned from this, or I would suggest, I mean, I already knew this, but
I would suggest that younger folks maybe pick up ideals are great until you have to pay
the rent and your kid needs the doctor, right?
I'm always banging the open core drum, but honestly, it's easier just to be proprietary.
How many times have you read on Reddit or have you covered on your other shows and end
this show?
Oh, there's some open source project, but the developers stressed out.
So he's just, you know, he's looking for money.
He's doing a patron.
Now he's going to chuck deuces and the project is screwed and people are screwed over.
The solution to that is the richer organizations using these projects need to pay him.
And the answer isn't some tip jar.
It isn't a sponsor button on GitHub, which by the way, is a centralized platform owned
by Microsoft guys.
So again, nice.
You guys make a lot of sense.
Yeah, he would have been screwed if that was his funding model right now.
Yeah.
I hope he had a self hosted.
I mean, more and more I'm becoming like a live in the woods with the lady jubes, right?
And just self self host everything because it's getting to the point of what if this
guy, I don't know what this guy does financially, but he says he has 100 private repos.
What if they're like repos for clients?
Is he going to just get his ass suited to oblivion because he not only cannot do the
work for them now, if he doesn't have another local backup, their IP is just lost in this
weird terms of service violation.
And by the way, what possible terms of service could there be that says you cannot alter
code that you own the copyright for, even if the alteration affects other people?
Every open source license I've seen says this code is provided as is with absolutely no
warranty.
If you've ever booted up a Debian or Ubuntu box, that's what it says right there.
I'm struck by those questions.
I'm sure GitHub probably has answers, but I would imagine it comes down to people saw
this as a GitHub issue.
If you look at the trajectory of tickets that came in after this commit was made, it was
Amazon cloud developers asking GitHub what's wrong.
That's that's so I think that may have been like the beginning context from which they
worked from.
I remember GitHub is Microsoft.
It still feels like Microsoft and Amazon want this to shut up and go away.
I have a broader thought on this.
When you look at what what how these tools like we have to acknowledge that this isn't
also the shadow of log4j that we're still dealing with right now.
Listeners of this show are still sorting through log4j.
For sure, for sure.
I look at some of these these lower level tools and libraries as infrastructure code.
As a business, I pay taxes to my local city and that helps pave the roads, make sure that
people can actually get to the business.
It's sort of that basic stuff.
I pay taxes to my city and the city takes care of some of the things that make it possible
for me to have a business.
We need to think about this infrastructure code in sort of a similar thing.
It's not that this developer is due some percentage of Amazon's revenues, but at the same time
he's paving the roads that Amazon's trucks are driving on in the cloud and he should
get something for that.
We've got to think about this in a way that is actually going to solve the problem.
I see one large obstacle that I can't really figure out a way to route around because I
think it's too late and I think it's also this phenomenon, this issue has created a
distorted market for Linux and free software development.
So let me back up one more time and then I'll explain all what I'm talking about.
I would describe free software development as a very organic process.
You can have lots of forks, many different people trying the same thing and over a 20
year time period, the strongest survive, things sort of shake out.
You look back at the last, you know, 15, 20 years of Linux and free software, that's clearly
the case.
It's often an area of in present day, an area of complaint and criticism.
Oh, there's so many desktop environments or we have so many ways of doing X, but then
as time moves on, organically things either come together or the strongest survive.
It's a lot like evolution, free software development.
When the cloud became the obvious money maker in Linux, we started to have a centralization
of resources.
We started to have some development become very, very lucrative and other kinds of development
that, quote, have no money in it.
We started to see this management of the ecosystem.
We started to see a third party declare some projects winners by financing them and others
losers by ignoring them.
And this of course is the Linux Foundation.
The Linux Foundation has added significant centralization to what was a totally organic
ecosystem and they've picked winners and losers.
And because they are human and they have limits, they can't find every little infrastructure
project that's popular on MPM or somewhere else in the ecosystem and slide a foundation
underneath them and help support them.
It's just an impossible task.
But because that's where all the money is centralized and you look at all these large
commercial companies from Dell to Amazon that are all members, all paying members of the
Linux Foundation, that's where their money is going.
It's not going to open collective, it's not going to build out a digital payment system
that rewards developers based on their contributions to a project, none of that.
It's going to the Linux Foundation, they're picking the winners and the losers.
And because their scope can only be so wide, we keep having these log4js or colors.js or
whatever it might be that get screwed and left out because they just weren't in the
purvey of the all carrying Linux Foundation.
And it also has distorted the economics of free software development such that really
the only place to make money is wherever these corporations that are part of the Linux Foundation
are presently interested in, which is often like the cloud right now or something like
that.
And outside of that, nothing pays in Linux and in free software.
You could argue it's good in some ways because at least some people are getting paid and
there's at least a foundation that's orchestrating some of this, but with the good, there always
comes the bad.
And I believe, having watched all of this for a while, that's the bad, is we've kind
of done a go-all-in, one-size-fits-all solution with the Linux Foundation now, which has become
massive, and we've centralized resources.
And I think this kind of thing is the result.
And I don't think we can solve that, to be honest with you.
I think that ship has sailed in Linux land.
The world has changed so much from the founding of, I can't even pronounce it, Gnusys, where
was it?
They were a contemporary of original Red Hat.
Oh, geez.
I don't remember.
I don't remember how they pronounce it.
It's like some play on GNU.
And those few companies that were working in open source and weirdly, it was a community.
They were competitors in some ways, but since they were all working on the core Linux project
or certain core projects, like the C compiler, it was a community of these little companies
that could all work together in individuals.
And it was great.
People had ways to make money.
And in particular, that was setting up like web service hosting.
Now with the cloud, I know people are going to hate this, it is effectively free labor
for these huge companies.
It just is.
Do the results seem to speak for themselves, don't they?
Right.
They get to charge you for the cloud server.
And I've read the feedback, I've read the tweets, I've read the hacker news.
This guy does not need to be the most savory guy on the planet.
In fact, he can kind of be someone that maybe I wouldn't want to get a beer with, right?
To actually be correct in his argument.
Yeah, those two things can be true.
People who maybe are slightly unpleasant can also be correct.
So his method, I don't know if I agree with it.
Some of his kind of other things about like Aaron Schwartz and stuff I've read of his,
I definitely wouldn't go down that track with him.
But this, this problem is real and it's also real for tens of thousands, if not hundreds
of thousands of other developers who have written projects that are day-to-day important
to these multi-billion dollar corporations and get diddly squat for it.
And I acknowledge if we were working on a project and we woke up one morning and Liberty,
Liberty, Liberty was scrolling across the screen in an infinite loop, that'd be very
frustrating.
Oh, I'd be super mad.
But it's not an impossible problem.
You can roll back.
And he had no real recourse either.
I mean, chiding Mike, you know, would be like, well, then maybe you shouldn't have made it
open source.
And then it wouldn't have gotten the adoption and you know, he wouldn't have people talking
about him on podcasts.
Right?
That's true.
It worked.
At some point it needs to turn into cheese for the kids.
That's all I'm saying.
Right?
It's got to turn into money.
And I really hope this doesn't turn into another, well, the culture and the ethos of the software
development community are definitely changing.
They've definitely been changing.
And because this person carries himself apparently in a way that's definitely a little off with
that, that we're going to just once again say, la de la de la, keep on making billions
AWS and, you know, Azure and Linux foundation, all those guys, screw the individual developer.
Oh, well, he should have sold consulting.
Right?
That's like always the answer.
Well, you could be a consultant.
What if you don't like want to be a consultant?
Or if you don't want to go for AWS, what if because of his personality and how it's spoken
he is and perhaps controversial, he couldn't pass the Amazon interview, right?
I could see that.
Yeah.
And it's still clearly valuable work.
Also pin your damn version numbers and your, and your MPM builds and all your dependency
management stuff.
I was thinking that could be a whole angle we take on this is like, what the hell?
Yeah.
I understand you're upset and I would be super angry too, but this is kind of your fault
too.
Yeah.
That's why I figured maybe we shouldn't go too hard.
Cause like they've had a, they've had a bad day already.
So you tell me not to go hard after you excoriate the Linux foundation.
Yeah.
Well, you know, I've been, you just think about it.
It seems like what's going on, you know, you centralize the power and the wealth.
That's what happens.
Comrades.
I will take any apology emails from the other month right now.
If you want to sell them.
Hey, just for a limited time, we're going to have the random swag bags up at Jupiter
garage.
We're going to clear a little bit so that way we can clear out and make room for new
stuff.
But we still have a few of the Jupiter rocket journals left.
If you get a random swag bag, you can get one in there.
We have two colors and it's just kind of random which one you get, but you can also buy the
journal separately.
We still have a few actually probably about, well, I would say just under 15 left.
So there's enough out there for a few of you to, if you're, if you get this after the episodes
come out, you can go grab them before we shut it down for a little bit.
And you know, the fun way to do it is to get the random swag bag, cause then you get like
stuff that we've got that are in the inventory for like stickers or maybe a shirt or maybe
a few things like that.
It works out to be a pretty good value and it's all up at Jupiter garage.com.
The feedback on this is going to be amazing.
This is going to be a rough episode for that poor, for the poor fireside email.
I know.
I decided to bedazzle my soapbox to make it nice and special.
Is it blue bedazzled perhaps blue and green?
Yeah.
Oh, green.
Yeah.
The green ones I got to get rid of.
Yeah.
So the wall street journal wrote a piece this week that is a real, a real stinker.
I just hate this.
It's teens dread the green text bubble and it's all about how it's a form of phone elitism
because they have blue message bubbles.
And then in a really gross way, Google's official Android account on Twitter tweeted the following
after the article was posted, sort of like doubling down on the opportunity quote, I
message should not benefit from bullying.
Texting should bring us together and the solution exists.
Let's fix this as one industry.
And then two heart emojis.
What's wrong with us where we consider blue and green bubbles and text message at a form
of bullying.
Now what is going on?
If you are a teenage listener of this show, please do you need parental permission?
I don't know.
I don't know how that works.
I guess.
Get it.
Email in if you're sitting in a dark room crying because you are sending green bubbles
to people.
Is this serious?
Is this serious?
I know.
And what I mean, you know, it really upsets me about it is that Google has created this
problem.
Google currently runs by my count eight different messaging service and they're all bad.
They're all bad.
And that's not even counting duo and their video.
I'm saying just text messaging.
Do you know what wasn't bad wave?
I know they're pushing RCS now, but RCS is not a global standard.
I think it's here in the States.
I think it's in Australia.
And that might be it.
I don't know.
It might be in Canada.
You can't switch an entire platform to a standard that does not exist.
No, you can do it like twice a year.
They've proven that I cannot believe that Google hasn't gotten this better.
Like Google has too many messaging services has been a meme for four years now and it's
only worse.
You know, they have a chat system inside Google photos.
I sure do.
Did you know that they have a chat system inside Google Pay?
I did not know that.
There's also a chat, different chat system inside Google stadia Jesus.
And when you use Google assistant to send a message, that's a different system.
Did they have one that was just like G chat?
That's gone now.
But Google chat and Hangouts is a different system.
And then you've got text messages and RCS messages.
Did you know on the business side, it is now separate?
They have like their weird slack clone and then there's like the regular chats.
And I kept getting pings.
I'm like, I don't, this guy says this comes up in Chrome.
Like I don't, I don't see anything.
And sure enough, there's like a whole nother window now.
It's just impressive how these get set.
So wall street journal runs this piece.
That's clearly a piece of crap.
Then the official Android account doubles down on it and you know, accuses Apple of
bullying by locking people into iMessage when it's just, they implemented a good system.
You can go into the settings and turn off iMessage.
You don't have to use it, but text messages, SMS sucks.
It sucks.
That's why Signal and Telegram and Facebook Messenger and WhatsApp are so fricking popular
because text messages suck and Apple recognized that and build a solution into their platform.
And then they saw this as a strategic moat.
Of course, of course, Google, on the other hand, boondoggled it.
They screwed the pooch.
They missed not one opportunity, but like eight opportunities.
And now they're out on Twitter calling Apple a bully over it.
They started with a perfectly good chat system that people liked.
The only problem was it was open source and an open protocol and it could be interconnected
with other systems.
And Google-
God forbid I could run it in Addium.
They didn't want that.
They had a system.
Everybody liked it, but they got greedy and they've never figured it out since then.
So I just want to correct you before you get sued.
Google is not accusing Apple of being a bully in this context.
They are accusing Apple of arming the bullies of America to the teeth with these blue bubbles.
Yeah, they're riffing on what the Wall Street Journal basically laid out, but yeah, that's
exactly it.
It's unbelievable.
Yeah.
I mean, first of all, what journalist that works for the Wall Street Journal woke up
and said, you know what?
I think these bubbles on my iPhone and maybe they have a SIM.
I do.
I got it.
Get the bacon.
I've always got the bacon.
I mean, get the bacon.
I've always got the bacon.
This is a plant.
Windows Phone 11 is coming.
This is what this is.
They're going to get Apple and Google to destroy each other and then wait for it.
MSN Messenger conquers all, runs the table on your beautiful Nokia Windows Phone.
Actually, you know what?
If they had universal messaging, I might be okay with it.
I still don't understand why I can't have Addium just like have all my messaging services.
I mean, Addium is like deeply broken now.
I think part of what tripped Google up is I think it was too late into the game.
They realized they'd screwed up, you know, and what we need is a carrier solution like
with RCS, right?
Because you need something that's supported on the carrier side.
But the only way they were ever going to get that to be successful is if they bake that
into the deal a long time ago with Android, right?
And so there's this optimistic, let's get all of these horrible companies that are run
by some of the worst assholes on the planet to accept this new standard around the world.
The League of Evil.
Yes.
Or let's just build something into our own platform recognizing this is an issue that
our users are going to clearly want.
iMessage didn't start like this at the beginning, right?
It was a real basic thing and Apple recognized it was something their users wanted and improved
it over time and just continued to iterate on top of one messaging system, right?
And it's clearly the difference in strategy that ended up winning.
I'm always amazed with how whoever the biz dev person was that did the Verizon Android
deal when Verizon was so clearly desperate for an iPhone competitor.
Droid.
How they failed with so much leverage.
I know.
It's so like, how do you not just walk into that meeting and basically, you know, put
on a black turtleneck, wear your blue jeans.
You got it.
Cause of course you have to dress like Steve Jobs to do this and just like throw your briefcase
on the table.
Okay.
You're Google.
Throw your teenage appropriate book back on the table.
Sorry guys.
And just say here, dog, we want the same deal.
Apple has an agency and if you don't take it, continue hemorrhaging customers and have
fun.
You know what it's gotta be?
Cause if you look back at that original droid launch, which I had, it was terrible.
It was so focused on the star Wars branding, the red theme, the whole phone came in a red
theme.
Yeah.
But come on.
I think they focused on app store and platform theming and didn't even think about the bigger
picture things that clearly needed to get worked on.
Wait, wait, wait, wait.
They screwed up the actual tenants of a longterm deal because a star Wars film had come out
and it just seemed like a great marketing opportunity, right?
Star Wars has droids, Android sounds like droid.
That's great.
Right?
And then you can make the whole phone theme red because Verizon's brand is red.
What an opportunity.
Okay.
So what they needed to do, if they really had their heart set on this very temporary
star Wars deal is contract George Lucas to be a consultant because I got to tell you,
if he had made the deal as poor, poor, sweet Paramount Pictures on the hard way, he would
have got the better side of that deal.
Probably.
There's no way he would have been like, okay, so here's the deal.
But also, can I just, before we wrap up on completely on this, like why not use the same
chat system in all of these apps?
Like take advantage of the ecosystem like Microsoft does and Apple does, right?
Why build messaging silos in each of your major consumer facing apps?
Like what's the logic?
Why wouldn't you have them cross connect?
I actually think I know the answer.
Okay.
Remember the old meme of Microsoft as the Microsoft orgs as basically, you know, it
was like seven guys with all guns pointed to each other's head.
That's exactly what's going on at Google.
There's different managers and different executives for each of these services and everybody wants
to rule the world, right?
That's got to be it.
That's it, right?
Where at Apple, it's a straight up feudal system where it's like, hey, Uncle Tim wants
this today.
That just means there's weak leadership at Google because somebody should be sitting
at the top going, I'm sorry to tell you Google Photos team, but you're never going to be
the world leading messaging service, you know, or sorry, Google Stadia team, you're built
in messaging platform that's private just to Stadia.
That's never going to take off and, you know, take over the world.
So scratch that idea.
Let's just use the same back end chat system.
That the other thing I was thinking of is the argument's got to be, well, people that
are chatting about photos probably don't want to chat with people that are playing video
games, right?
They're two totally different workflows.
You could still interconnect them and have shared usernames across them and whatnot and
ping each other.
That doesn't make sense.
No, that doesn't.
I mean, you would have to restructure, let's just call it Google chat.
Actually they did.
That is what they used to call it and say, all right, Google chat, you guys are a whole
division.
Let's talk.
Nancy, you're the, you're the queen of Google chat, right?
You got it.
You're in.
Your customers are the photos team, the, I mean Stadia, come on, but sure.
The Stadia team, I guess the pay team and whatever ridiculous other services Google
comes up with and then kills in three weeks.
Those are your customers.
You have to give them one protocol, one programming interface, and you build the chat product
and they just, you know, they integrate it as they like it.
Exactly.
And that's it.
And, and the cert, you, you can take feedback, but you're not making bespoke changes for,
let's say photos wants to like do some weird image cropping stuff in chat.
No, unless it's a unified rollout for all of chat, it doesn't happen.
And if there's a dispute, well, that's why we have a hierarchy and we go to a meeting
and it's corporate server, but it's passive aggressive, but eventually someone makes a
decision.
You know what I just described and Microsoft, that's how they do it.
Right?
There's a king of all things office at Microsoft and he does whatever the hell he wants until
there's a conflict with another division.
And then they resolve it up the chain.
Yeah.
Somebody up the chain resolves the fiefdom battle, right?
That's what happens to somebody says, all right, well, I know you both have your ideas,
but we're going to test it and then we're going to make a decision and we're going to
go with one of them.
Then everybody get the hell on board instead.
What you have is at Google, everybody's creating their own little fiefdoms and their own little
technology stack.
Well, of course that becomes unsustainable and it's going to make Google more inclined
to want to shut those projects down because of the overhead.
Well, okay.
Nothing can quench the bloodlust of Google killing products.
Very true.
That's probably just baked in, right?
All right.
Well, we'd love to get your feedback.
It's a new year.
We want to get the feedback going and get some nice hot pipe and emails in there.
So go over to coder.show slash contact to get our contact form and coder.show slash
subscribe to get the RSS feed so that way you can get the show every single week.
Thank you to our members over at coderQA.co.
You help support the show, especially on weeks when we've got limited advertising, you know,
you really make a difference.
You also as a thank you, get an ad free feed and the Coder Coderly, which we actually have
to start thinking about again.
Right?
Right.
Oh my gosh.
All right.
Well, we'll get our heads around that and then members get an access to that.
And if you want to support the entire network, get every show ad free plus Linux action news
is the only way to get that one at free.
You can find that at Jupiter.party.
Is there anywhere you want to send people this week before we wrap up?
You know what?
I'm so into the proletariat today.
I'm not going to be a vicious capitalist.
I would like to send you to get lab.com.
Go check out that open source self hosting guide.
Right.
Very good.
I'll be a bit self serving only to empower the listener.
So go to self hosted dot show.
Get all of our self hosted content.
That's all over there.
You can find that.
Good call.
So thanks to what we talked about today, coder dot show slash four, four, eight.
And last but not least, I'd love to invite you to join us on a Monday.
We do this show at noon Pacific, three p.m. Eastern over at jblive.tv every single Monday.
You get a little bit extra show, get to hear us screw up, have our mistakes, have some
fun and get a little bit entertainment at the same time.
Thanks so much for joining us on this week's episode of the Coder Radio program.
And we will see you right back here next week.

This is KOTORadio episode 300 for March 15, 2018.
Hi everyone, and welcome to KOTORadio, Jupiter Broadcasting's weekly talk show, taking a
pragmatic look at the art and business of software development and its related technologies.
This episode is brought to you by our two fine sponsors, DigitalOcean and Linux Academy.
We'll tell you more about those great sponsors as this here show goes on.
My name is Chris, and joining us for an unbelievable 300 weeks, it's our host, Mr. Michael Dominic.
Hello, Mike.
300 weeks of power!
Jeez, it is, it is, it's kind of amazing when you say that, it sounds so, so unbelievable.
It's really kind of hard to even wrap our head around.
So we got a bunch of really fun stuff we're going to announce to celebrate episode 300.
We thought we were going to do nothing, and then it really turned into a whole team effort,
a bunch of, a bunch of really great work by Angela, Mike and I got some secret plans going
behind the scenes, and it resulted in, well, a hell of a bang for the, for 300.
I'm like, I'm like shocked because we went from like almost nothing when I left for scale
to heck of a show.
But it's good to be back.
We waited till Thursday to do KOTORadio 300 so that way I could be in studio.
So I've returned from the California area and I survived, Mike.
I survived their weird gas pumps.
You have never pumped gas until you pumped gas in California.
Let me tell you.
Wait, the pump, the pump is different?
Yeah, man, they got these low vape nozzle headers that they've retrofitted all of the
pumps with and they've also removed like the little latch where you can lock the handle
down so it just keeps pumping.
What the hell?
Yeah, well, here's the best part.
So Ford's have this really great feature that they added to their cars a few years ago where
there's no gas cap.
It's a capless gas system and it has a little door that opens and closes and it's great.
No more gas cap to touch, no more stinky fingers, but it doesn't play well with California's
low vape nozzle retrofit.
And I'm basing this on the fact that we had two Ford rentals that both experienced this
problem.
And it was one of these things where the thing would pop every five seconds.
It'd take 20 minutes to fill your vehicle.
So I had to get the hell out of there.
Had to come back here, get in studio so that way we could do 300 in studio.
How are you doing?
That's a lot about me.
How have you been doing, Mike?
How are you doing?
You know what?
You know, I was reflecting because, you know, 300 episodes is a lot, right?
Like I was reflecting on what have we learned in 300 episodes?
And you know what I think we've both learned?
We hate California.
Yeah, we're going to, we're going to have to, because we've never gotten that email.
You know, we are going to have to do some reflection later on in the show, but why don't
we start out with an email as we do here on the program.
We like to do that.
I love it.
And this first one comes in from Noah, not Noah Chalaya, a different Noah.
And he has a question about side projects, maybe hurting him more than helping him.
Because guys have been, been a big fan listening for years.
I have a question.
Is there such a thing as a bad side project?
I'm a web dev by day and I work on Django and Angular, those types of things.
But recently I've been really interested in making my own video game just for fun.
My concern is that video games are typically made in one of like the C languages, like
C or C plus plus, maybe even C sharp, which is not something I've ever used and it's not
something I use at work.
Would you guys think that this would be a, would you guys think that this would be bad,
would look bad to my employer if I ever tried to put it on my resume for a potential future
job or if my employer were to ask about a side project?
I fear that I may interpret that, I fear that they would interpret that.
I am not passionate about web development, which I am.
What do you guys think?
Is this no big deal or could it hurt me further down in my career?
It's a tough, I see where he's going because you know, we've talked about this in different
approaches like sometimes when you go down something and you experiment with a different
language than you typically work with, you learn something that makes you better at your
core job.
But what do you think?
I mean, I, first of all, who hasn't been seduced by the desire to think you're going to write
a video game in a few months?
Oh yeah.
Because it's, I don't, you know, as someone who is an employer and does that kind of thing,
right?
Yeah.
I certainly don't see that as a negative.
I might, what I might do is I might ask you, okay, so you made a game on the side.
That's awesome.
Tell me what, what you picked technology wise and methodology wise and why did you pick
it?
Just I'll treat it like any other job, right?
Any other, whether it was a client project that you had as a freelancer or in fact, in
a lot of ways I think it's a good thing because if it's your side project, you're making all
those decisions that really can influence, you know, the work I'm going to have you be
doing right.
So yeah, that's true.
Yeah.
That's a good point.
And also if you couldn't tell me, if you couldn't tell me like reasonable answers to why you
did things and yeah, that would be bad.
You're also exercising a learning muscle that you don't get a lot of use out of once you
become really comfortable with something and it's a good skill to keep fresh and it's a
way to keep something fresh, sort of like just sort of incubating something.
Keep that going while you still focus on your main thing.
I don't think there's anything bad about it because it's really going to come down to
the results and how you balance your focus and your commitments.
And as long as you continue to do that correctly and deliver on your commitments as far as
they're concerned, I don't think you're going to have any problem.
It's a net positive as far as they're concerned, I'm sure.
Now there's a lot there's a lot we could talk about this week, including that calendar app
that was mining cryptocurrency.
It's a new kind of shareware.
But let's take a moment and let's talk about the Coder Radio Super Show, which we are doing
today on the program.
Now here's a little here's a little fact for you.
First episode of Coder Radio was released on June 11th, 2012.
Now to put that in perspective, because it's like, wow, that does seem like a long time
ago.
What was going on that year around that time?
The Mars Curiosity rover landed on Mars, Obama was reelected for a second term, Eric Holder
was held in contempt of Congress, the world was supposed to end on December 21st, stupid
Mayan calendar, and the space shuttle Endeavor had its final flight.
Microsoft also released Windows 8 that year.
And Instagram finally released a version for Android in 2012.
And of course, the big one, Facebook went public that year with initial stock offering
that was $38 per share.
That was what those are some of the things that were going on the year that we launched
kind of puts in perspective how long ago it was Obama getting reelected.
Oh, such simpler times.
And now different times back when we had a space shuttle and Windows 8 Oh, what a train
wreck that was feels like Windows 8 was longer ago.
They really Wow, they pulled out Windows 10.
We watched all of that we watched the train wreck of Windows 8.
The RT stuff because you Metro Yeah, because the whole debacle.
Yeah, that release of Windows 8 really is them trying to do Metro the single sync right
once run across all their platforms.
That was big when we launched the show was really big.
So much has changed.
So after 300 weeks, and many, many, many, many, many, many days, we thought it was time
to upgrade the show.
So we're adding new features to your code radio program at the same great free cost.
Some stuff that you won't even notice, except for maybe a few very eagle eyed listeners.
We've totally reworked the back end for code radio starting with this episode.
So assuming it goes out, the new back end works.
It's way faster.
It's based on industry best practices, which allows us to do really cool things like publish
the code radio program to Spotify now.
And utilizes the cash fly CDN to distribute the downloads crazy fast.
Really as fast as you can slam them on your device.
So if you fire up your podcast app on your mobile, when you're running out the door and
you've only got 30 seconds of Wi Fi before you're pulling out of the driveway, you're
going to get the code radio program.
I'm all about that.
It's really great.
I'm super stoked about that.
We also have a new RSS feed for the program.
This is important.
And you can get it directly.
You can enter it directly into your RSS catcher of choice.
It's coder dot show slash RSS coder dot show slash RSS.
If you want to select from like overcast or pocket cast or look at our different options
as we add them, you can go to coder dot show slash subscribe for all the different ways
to subscribe to the weekly show.
Now with the new RSS feed, and I am forwarding the old feed, but you may want to just resub
to make sure you're getting it directly.
But with the new RSS feed, we're going to address some long standing requests for the
code radio program.
We're going to include links in the RSS feed for all the stuff we talk about, including
on mobile podcast clients.
Because our current infrastructure can only deliver the description and the embed link.
It cannot distribute the HTML link structured properly in a way that isn't devastatingly
ugly.
But the new feed will.
So you will now get links in your mobile apps and on your desktop podcast or wherever you're
grabbing them, and we'll also have a new contact page, which is I'm hoping a little bit easier
to fill out and also flags them specifically in my inbox as coder radio listener feedback.
So now it's like I got these areas that will just bring your emails right up.
So Monday morning or whatever day we're doing the show, I go into this folder and bam, there's
all your feedback.
It's all been pre categorized, pre labeled.
You get that at coder dot show slash contact.
So it's a new contact page.
If you're not guessing, we have a new site coder dot show and all this stuff is linked
there.
And as part of this new transition, I feel like Coder radio deserves a doubling down
on investment from Jupiter broadcasting.
That's why we're redoing the back end.
And the other the other thing that we're going to change is at least for a little while,
I am personally going to take over the editing on the show.
And I have a goal of incremental improvements to our sound.
Hopefully you'll begin to notice it over the next couple of weeks.
Then we're just going to keep iterating.
It's going to be a process.
And as part of my editing, I'm going to start including chapter markers in the MP3 file.
So if you're sick of us talking about hardware or sick of us talking about Apple or apps
or whatever it is, whatever the particular discussion is that always triggers you, you
can now skip over that entire section with one tap to the next topic.
It'll be all bookmarked in the MP3 and you'll just need a podcast catcher that supports
chapter markers.
No more complaints, no more concerns.
We can talk about what we want and you guys can skip right over it and we'll know.
We'll know too.
So we're able to see what people are skipping.
It depends on the podcast catcher, but we actually get some data on that and it'll help
make the show better.
It depends on the like I say the player, but we do get some data on that.
And one of the things we're also going to do is standardize the way you get to all the
show notes.
We're going to make it dead simple with the new site.
So you go to coder.show slash episode number and that's it.
You want links for everything we talked about today?
Coder.show slash 300.
Can be simpler.
Coder.show slash 301.
You know, it's just a slash episode number.
You get the links, you get the download.
You can send time coded links from there.
So if Mike said something crazy about Rust, you can go right to that coder.show slash
300.
You can find the link with time code and you can send people time coded links to the Coder
Radio program now.
So it's coder.show for the new site, coder.show slash RSS to plug directly into your RSS client.
Coder.show slash subscribe for all of the different links just on a web page for subscribing.
And coder.show slash contact for the ways to get in contact.
The secret is just go to coder.show, get the new feed, engage in the new contact form.
It's all going to be totally revamped.
And for those of you that are on mobile listening on Podcast Catchers, which is our number one
demographic now, wasn't when the show necessarily started, I don't even know if that was a thing,
but it is now.
And so it's time for the Coder Radio to sort of modernize a little bit.
So we're going to start doing multi-track audio recording and editing.
We're going to start publishing all of our links in the mobile client.
So that way when you're on your podcast listening device, whatever it might be, for me, it's
overcast.
A lot of you love Pocket Casts, I hear about antenna pod and player.fm and all kinds of
other podcast clients.
Now that's going to be a first class experience.
You're going to get chapter markers, you're going to get links, it's going to blast down
on your device as fast as freaking possible.
I hope it's going to make it just a little bit more competitive.
And then over the next few weeks, we'll keep iterating on our sound to make it even sound
better and better.
And it's all at coder.show.
You can still go to the Jupyter Broadcasting website, it's still going to be published
there as well.
But the primary home is coder.show.
And hopefully that'll be a good resource for people that are new to the show and people
who have been listening to the show for quite a while.
And you'll get to use the new fancy back end just by listening to the show, which I'm really
excited about.
And get some TLC up in this business, Mike, for the 300, you know?
So we're rolling all these new features out as part of episode 300.
It's like a feature release.
How about that?
But wait, there's more.
There is more.
There is more.
You're right.
People would almost think we rehearsed that, but we did not.
We got to do some swag.
If nothing else, Mike and I want it.
And so we're doing sort of an assortment of things.
First of all, we've got a t-shirt.
We've got a t-shirt and a hoodie, teespring.com slash coder 300, links are in the show notes.
You can get yourself a Coder 300 t-shirt, which, by the way, that white Coder Radio
logo with a 300 on it looks really good with the green shirt, just at some of the demos
I've seen.
So it's teespring.com slash coder 300.
We got the shirt and the hoodie, depending on where you live, you can pick whatever is
best for your temperature.
And then we have my favorite swag item, Coder Radio coasters.
We have fricking coasters now for the Coder Radio program.
How amazing is this?
So it could be for water.
It totally could be for water.
It might be for a gin and tonic.
I mean, I'm not saying-
No, I don't know anything about that.
No, I'm not.
What do we know?
We're just saying.
But yeah, check that out.
It's a Zazzle URL, so it's long and complicated, but we'll have a link in the show notes for
that at coder.show slash 300.
The Coder Radio coaster.
I've got some in the studio right now.
Hear me?
Whoa, whoa, whoa, whoa, whoa there.
Whoa there.
I think this is so cool.
And you got some too.
I saw you demoing it, quote unquote, on your-
I'm using one for my tea right now, actually.
Awesome.
$1.50 for a coaster.
So get like a few of them.
And then one of the things that we started doing with Unfilter that I think we should
keep doing for all the shows, it looks so cool, it looks even better in person too,
is we're launching for a limited time a Coder Radio 300 poster.
And what it is, it's a word cloud of all of our different titles forming the 300.
And it's a nice looking glossy poster.
I've got one in the hallway for Unfilter, and I really like it.
I can't quite get it to fit on the frame for the video people, but I'll have to just bail
on that.
It's not going to work.
And it looks so good, Mike.
And it's clever too, because what you get to do is you walk up to it and you see all
the different titles and you think about, oh yeah, I remember that.
Oh yeah, I remember that.
Oh, that was a funny title.
And so away from it, you see the 300, but up close, it's all the different crazy titles
we've used for this.
I'm reading some of them right now.
Clustered Pie, Coder Inquisition, Backend Lock-in.
Freelancer.
Love it.
So that's the poster.
That's also a Zazzle long URL.
We're just doing these as limited things.
We're not going to make a fortune off this.
There might be a slight profit, but check it out at the show notes, coder.show slash
300.
We got the t-shirt and the hoodie.
We got the posters.
And of course, the Coder coasters.
Coder coasters.
All that's over there.
So whole new features, all that stuff.
Why don't we just catch our breath for a moment?
You good with that?
We catch our breath.
Let's talk about Digital Ocean.
Do it.
Because they're giving away something pretty great too.
If you go to do.co slash coder, you can get a limited $100 credit.
Now I believe you will have to put a valid credit card on file, but they're not going
to charge it until after you use that $100 in credit.
Now Digital Ocean is simplicity at scale.
And they traditionally offer a $10 promo.
And you can really get pretty far with their crazy fast infrastructure and scale up pretty
fast to a pretty beefy system with a $10 credit.
So when they come around offering a $100 credit, I would really jump on this if you've ever
been on the fence.
Go to do.co slash coder to take advantage of the limited time offer.
Once you apply, you got 60 days to rock.
You can also go if you've already have an account, but you haven't applied a promo and
you just want to get the $10 credit and support the show, you can do that as well.
It's Coder Digital.
You apply that to your account.
So what is Digital Ocean?
Now if you've never heard us talk about it, it's really our trick to look professional
and have fast infrastructure on demand because they've taken care of all the hard stuff.
Everything's SSD based.
They got eight data centers all over the world.
They're deploying Linux and KVM systems.
It's rockin fast 40 gigabit connections coming into these hypervisors and they've placed
the data centers in key places that have extremely, extremely good bandwidth, generally at critical
connection points on the internet.
So you can get on their boss level infrastructure for just unbelievable prices.
My favorite rig is just three cents, three cents an hour and they're offering $100 credit
here.
When you go to do.co slash coder and they have everything you need to set up a system,
get ready to go.
If you want to just deploy an entire GitLab stack with an Ubuntu LTS and a Docker container
and it's all set up the way you want it, you do it in seconds.
If you want to build a system from the ground up, you can do that too.
And they have an API that's easy to follow, clearly documented and I'm guessing, although
I don't know, but I'm guessing their entire digital ocean dashboard, their whole UI to
manage all of this is an API client because everything's there.
You want to expand a disk, you can do it via the API.
You want to shut down a system, you can do it via the API.
You want to take a snapshot or a backup, you can do it via the API, which means there's
tons of good code already written that you can just grab and use or you can write something
yourself.
You know, we've got, we've got a Ruby bot that does it and it's great.
It's just awesome.
It's so easy to start working with because it's whatever level you want to jump in.
If you're a newbie, you've never even set up a web server before, or if you've been
deploying servers for 13 years, it's going to work for you.
And then whenever you get stuck, they have world-class documentation, world-class.
They really, they have a full-time editorial team that really works to make that stuff
clean and easy to follow, digitalocean.com and get our a hundred dollar limited time
promo at do.co slash coder and a big thank you to DigitalOcean for sponsoring the Coder
Radio Program, longtime supporters of the show and helping us get to 300 episodes, do.co
slash coder.
It's tough out there to make money selling software.
Shareware was a thing.
Remember neg screens?
You can use this for 15 days and then you have to pay.
And then there was in-app purchases.
Well, entrepreneur developers on the Mac platform created an app that's designed to
manage your calendar and it's called Creatively Calendar 2.
One of the things they decided to do to monetize their application was to offer users a few
different options.
Number one was you could activate all of the features permanently for a one-time $17.99
charge.
Number two is you could subscribe at 99 cents a month to get the features of the application,
all of them for 99 cents a month or the default option, choose nothing, pay nothing and the
calendar will quote unobtrusively mine cryptocurrency in the background.
And that's how they're monetizing the application.
And before Apple kicked them out of the Mac App Store, they made $2,000 in three days
by quietly mining cryptocurrency on Mac users and they couldn't have had what, more than
a hundred or so?
They could have had thousands and thousands of users, this is the damn Mac App Store we're
talking about.
So it could have only probably only a few hundred people mining crypto to pay for the
app.
How about that for a monetization strategy, Mr. Dominic?
You like that?
So when I saw this, I didn't think it was real.
I was surprised.
It actually made news when it entered the store before Apple even kicked it out.
I was like, how did Apple let this happen?
Then Apple was like, yeah, no, we're kicking this out.
I kind of think this is one of the few cases Apple's right to kick something out.
Now Apple does have a policy that says your application must be designed to use, I think
the verbiage is to be power efficient as possible, is the guideline.
I'm not sure that like mining cryptocurrency for some app developer is what you want to
be doing.
I agree, but at the same time, if they're clear about it, if they're saying, hey, this
has an $18 value to us.
And if you mine crypto, what about this?
What if they say if you mine cryptocurrency for two weeks, you'll be paid up?
Like if they're super clear about it, it's like a splash screen when you first launch
the application.
They're 100% transparent about it.
You know what?
This might be my old madness coming out.
It just seems bad to me.
Yeah, I'm torn because the open source cryptocurrency enthusiast in me says this could be a new
way for a win-win, for users to get free apps and for developers to monetize in a way that
isn't skeevy, that doesn't require even setting up Stripe and setting up a subscription service.
You just mine the crypto and send it to a wallet and it's all happening in the background
and you could even nice it to a certain level to make sure it doesn't abuse a person's system.
I would really like to know what the audience thinks about this because I also agree with
you, there's going to be a lot of people that have no idea what's going on.
It's going to burn through laptops faster.
If you start to even get more than one or two applications to start doing this, you're
going to have a massive fight for resources on people's computers.
So let us know what you guys think, coder.show slash contact.
I'm torn.
I'm 50 50 torn on this one because it almost seems like what you'd need is like some centralized
crypto mining service that every application could participate in because if they all are
off on their own mining crypto, it's going to be a God knows what on your system.
Yeah.
So Apple kicked them out, but they did generate $2,000, which makes me think if they did that
in three days on the Mac app store.
Oh, yeah, no, they would have had some money here.
Yeah.
Yeah.
Yeah.
Hey, just a quick one.
I don't even think I tossed this one in the doc.
But while we're talking Hoopla, did you see that Google just announced the change of Android
where to wear OS so no more Android where it's now where OS know if you I don't really
have thoughts on that, but Google needed one more OS.
It's Yeah, I wake up every morning thinking it's time.
Yeah, really?
Yeah, really.
I think once they get fuchsia out, and once they get also they need another OS like they
need another messaging platform.
But this is this is to better they say they want to do this because they they're trying
to make it clear that certain aware functions also work on iOS.
And so calling it Android where is our calling it Android where makes it sound like it only
works with Android devices.
So calling it just where OS seems to speaking of iOS devices.
Yeah.
I also went to the Apple Store, Chris.
Who else went to the Apple Store?
You say also who else?
You did you have a HomePod.
Oh, she's still giving me a hard time about that.
Okay.
Yeah, I picked up an Apple Watch.
Oh, you did?
Really?
I am living the wearable lifestyle in the Apple world.
You know what?
It is a significantly better than every Android wear watch I've ever used.
Yeah, I have owned.
I have owned three Android wear devices.
I have owned two pebbles.
And now I've owned two Apple Watches.
Because what I do is I buy them and sometimes return them.
Or what I also have done is I've gifted them to family and friends.
And then they usually know like my dad and my lady and kids, they know like dad wants
or Chris wants some feedback on how that's all working.
And so I still get active feedback, I gave my last Android wear watch to chase from unfilter.
And he still tells me, you know, he tells me about all the things he's trying with it.
And he's an enthusiast, too.
So he really tries to push it.
But I completely agree.
There is wearable devices like Fitbit and Android wear.
And then there's the Apple Watch, which is a different device.
It's closer to a computer on your wrist.
It's smooth, too.
It's smooth.
So why'd you get it?
Why did you drop the money?
I mean, why out of nowhere go get an Apple Watch?
Well, I'm working on a project that does have an Apple Watch integration.
Oh, you sneaky, you sneaky, you sneaky dog.
Sneaky sneaky.
Yeah, that makes sense.
But you know, it's a customer product, but it's interesting because the development experience,
like where the user experience on the Apple Watch is phenomenal.
And I've like done a little bit of Apple Watch integration before, but like never enough
to care.
It has not improved much at all.
Yeah, the apps really suck.
I think if you're buying an Apple Watch to use apps, you're going to be really disappointed.
So even to develop apps, I mean, it's surprising how just like, I know this is a bad analogy
and people are going to not like it, but it reminds me of like those old Java UI frameworks
from the 90s, like very rigid and not very good.
Well, I'll tell you what, I suspect having used the Apple Watch for quite a while is
it's the way Apple fundamentally approached it.
They designed it as a device that is dependent on a master device, the phone, and it's got
to have a Bluetooth or a Wi-Fi connection back to that device.
A lot of the application processing happens on the iPhone device and then it sends the
data over to the watch.
And now these watches have built-in LTE modems, they have Wi-Fi radios, they need to be independent
operators that are not connected to the iPhone at all.
And I think that initial design choice inhibits the applications and it limits what you can
do on the thing.
And the SDK probably reflects, I would imagine.
Yeah, that's exactly right.
That's exactly what the SDK looks like.
Which I don't know why Apple, because originally the issues were battery life for the Apple
Watch because the original version was very weak, didn't last too long.
But it seems silly now when having used Android Wear, which has lots of problems, I'm not
like...
But you can do more interesting things on Android Wear.
The problem is you have no install base and the people who do have them, there are wide
variations between the different watches.
Yes, that has definitely been my experience.
You know what strikes me about this is Google, Amazon, and Apple are all moving into health
and media in a really, really kind of big way.
And Apple and Android Wear, or now Wear OS specifically, are gonna have different shots
at monitoring your heart, your blood pressure, your glucose levels, all these things they're
experimenting with, with these watches right now.
They're about to enter a totally new market.
And you gotta wonder, what is the downsides to that and what are the opportunities for
developers at the same time?
I'm really torn on that because it feels like it could be extremely invasive and it also
feels like it could be very monetizable for people creating different apps for activities
or biohacking or whatever.
It's gonna be a gold mine for some folks.
But looking at this, at first I would have thought, I know Apple's changed the most since
we started this show.
And then I would have thought about it somewhere, I would have said Microsoft.
No, it's really been Microsoft.
They made that pivot to really actually committing to Linux and open source.
But when I think about it, I think it's actually Amazon.
I think Amazon-
Really?
Yeah.
I mean, if you think about the fact that EC2 runs the entire internet now, and Amazon also
is the third most valuable company in the world.
And in 2014, they were totally missing all of their targets.
But this year, last quarter, they made a $60 billion profit.
And they now get 40% of all spending by US customers online.
54% of US households with internet use have Prime, 54% of US households that have internet
have Prime.
The Echo has 30,000 skills, it's way ahead of all of the competition.
They're gonna be selling pharmaceuticals soon, and they're launching deeper and deeper into
online services.
And then I look at Prime now too, they're becoming a media company.
By early 2017, Amazon had an audience of 26 million for all Prime video programming, which
is like the films, the TV show.
That's pretty good.
2017, they had 26 million Prime video program watchers.
They're firing on every single cylinder, they're about to open up a new headquarters, the headquarters
two.
I don't know, I think Amazon might be the sleeper.
Because everything they've been doing has been at the infrastructure level for so long.
And on the stuff that we don't really keep a close eye on, which is the brick and mortar
like domination game, that I think they've sort of just arrived all of a sudden from
our perspective.
But they're such a huge player, especially in IT.
I just think Amazon might be the real company to be watching out of all of these, like out
of the Apples and the Googles and the Microsoft.
I mean, their game is kind of figured out, but Amazon's just kind of getting started
in a way.
You know what I mean?
Like they still have Walmart to kill, they're opening up grocery stores, they just bought
Whole Foods, they bought Twitch, they just bought Ring, and they're going into home security
products now.
They're going to completely own the home.
They're turning your home into a store.
It's interesting.
I really wouldn't have thought of them like that in terms of changing over the time we've
been doing the show.
But I guess you're right.
I mean, they are in a lot of ways becoming, I don't even know and it's to borrow a term
from Steve Jobs in the 90s, your digital hub, right?
I'm thinking about all the things in my house that effectively run on She Who Will Not Be
Named, right?
Or the fact that my first, even for my business, my first thing is, oh, let's see what the
Amazon prices, buying on Amazon, right?
Because it's just easier.
And they've certainly gotten significant leadership in the emerging technologies.
I mean, they embrace stocker and containerization very fast.
Yeah, yeah, and they've been rewarded handsomely for it.
I mean, they are leading the pack in terms of with AWS, Lambda, I can't remember the
name of the technology now.
Yeah.
And, you know, also, one of the things I want to toss in there was there's a term that's
being coined by the industry, by startups.
And it's called being Amazon, which means to have your business crushed because the
company got into your industry.
And fear of being Amazon has become such a defining feature of commerce.
It's easy to forget that, you know, around the start of our show, it was already beginning,
but around, you know, around that time, Amazon was still predominantly a bookstore.
They were a larger, they were bigger than that then.
But that was still what they were predominantly known for is that the discussion was, I think
Amazon is going to put Barnes and Noble out of business.
I don't think there's going to be more book and mortar bookstores, brick and mortar bookstores,
because Amazon is going to put them out of business.
Well, now that's a foregone conclusion.
Now that's obvious.
Of course that was going to happen.
But when the show started, that was the conversation.
Now look at them.
Now they run the Internet.
And Jeff Bezos has multiple deals with the CIA to run private infrastructure.
And he just bought a huge mansion in Washington, D.C.
Bezos is like a serious player now in politics and their company is a massive player on the
Internet.
All right.
But don't they remind you of someone else named Microsoft in the 90s now?
Yeah, a little bit.
I mean, Google does more of that than Amazon.
Amazon feels like something new, you know, because they started as a retailer and now
they've morphed into an infrastructure company and a media company.
And they're soon going to become a pharmaceutical seller and a home security company.
I don't know, man.
I don't know.
You know, we do have some, you know, speaking of looking back, we do have some really, really
good data from Stack Overflow.
So before we get there, let's take a moment and thank Linux Academy for sponsoring the
Coder Radio program, LinuxAcademy.com slash coders.
It's a platform to learn more about Linux and everything around Linux, the stuff that
makes you look great on the resume and the stuff that will really challenge you and push
your career forward.
LinuxAcademy.com slash coders.
I just wanted to leave you in suspense.
There you can support the show and sign up for a free seven day trial.
LinuxAcademy.com slash coders.
They have in-depth video courses on every Linux and cloud topic.
If you're in the DevOps field, they have courseware just for you.
If you want to go get certifications, they got tracks that are built just for that.
And if you're ready to deep dive into single topics, you got 15, 20 minutes tonight, they
got something for you to learn about firewalling or how the file system works.
Finally get permissions nailed.
How do ACLs really work?
How do extended attributes work?
They got courseware just on that.
And then if you ever get stuck, they got full time human beings.
They're there and ready to help.
In fact, they have all full instructor staff that's constantly adding, updating, maintaining
the courseware at Linux Academy and keeping your subscription valuable.
And you can start with a seven day free trial at LinuxAcademy.com slash coders.
That's LinuxAcademy.com slash coders.
And a big thank you to Linux Academy for sponsoring the CoderRadio program for so darn long.
And there's lots of CoderRadio listeners over there too.
So if you join the community, you'll be among friends.
LinuxAcademy.com slash coders.
So Stack Overflow has released their annual survey of developers.
And they have a bunch of different developers that have chimed in self-described back end
developers made up 57.9%, a full stack developer made up 48.2%, and a front end developer 37.8%.
And mobile developers only weighing in at 20% of those surveyed, which I thought was
kind of interesting.
And the numbers of contributing to open source were the exact opposite of what I expected.
All respondents said that no, 56.4% of them do not contribute to open source.
And 43.6% said they do.
I actually thought it'd be reversed.
And when you look at just professional developers, the numbers don't change much.
Coding as a hobby, 80% said yes, 19% said no.
There's a lot of different things in here though that I found to be pretty interesting,
including how long people took to learn and stuff like that.
But of course, the thing that I couldn't help but notice is that Linux was significantly
well represented in this.
In fact, Linux is moving to be one of the number one development platforms that developers
use.
Do you want to start there?
I mean, there's lots to get into, but man, did that totally jump out at me.
So there's actually two things about Linux on here that I would like to start with.
One is target platform, which makes sense if you're doing back end development.
I mean, sure, you could be on Azure IAS, but I hope you're not on IAS, it's a bad place.
Azure's fine.
I like Azure.
You might also be on BSD, but at some point, BSD just hurts more than it's worth.
That was for you, Alan.
It's not just...
Did you see the two data points though?
It's not just that it's the target platform, right?
It's also the dev environment that people are working in for their machine.
What is it?
It's only a few percentage points off from Mac OS.
Yeah, yeah, exactly.
Which is amazing.
I mean, we've been doing these Stack Overflow surveys for the entire length of the show
and that was not the case before.
Yeah.
Visual Studio Code also super well-represented.
Dominating.
Yep.
Mm-hmm.
Yeah.
Windows still doing pretty well.
But boy, we're talking about a decline for Windows and a huge rise for Linux.
That is really something.
The majority have at least two monitors too, which I thought was kind of funny.
I like that.
I mean, there was also the most loved, dreaded, and wanted platforms.
Linux was the most loved at 76.5, but then check this out.
Serverless was the second most loved platform at 75.2, followed by AWS and then the Raspberry
Pi.
Then a couple bit further down was iOS and Apple TV and Apple Watch and Mac OS.
What?
Then Firebase and then Android.
Android way down on the list there.
That's a bad show.
The most dreaded was SharePoint.
Of course.
That may...
I mean, I just shook a little bit.
Keep it going.
Yeah.
Drupal, Salesforce, and developing for mainframes, WordPress, and Windows Phone competing for
shared hate.
And then the most wanted.
The most wanted, I think, to get better.
I don't know what wanted really means.
But number one, Android.
Number two, Raspberry Pi.
Number three, AWS.
Number four, Linux.
And number five, iOS.
Google Cloud Platform makes a few honorable mentions on the list too, but man, does Linux
just make a dominant showing now.
Visual Studio Code is pretty popular.
I was really surprised by that.
Amongst mobile developers, you won't be too shocked to learn that Android Studio dominates
there, and Xcode as well.
That's no shocker.
When you sort of don't really have any other good choices.
Yeah.
It's funny how that works, huh?
Yeah.
Was there any trends or any numbers in here that felt like it was out of sync with what
you personally have experienced?
Nothing shocked me other than really just how popular Linux was.
So the two shocking things for me was actually serverless and Linux.
That was the term I was thinking of a few minutes ago.
I get why AWS Lambda or Azure Functions, which are two prominent serverless technologies,
are convenient, but it seems odd that they would get so much adoption so quickly, given
that most enterprises, most things that are already in production, already have infrastructure
behind them.
Yeah.
I have thoughts on this.
Because we did sort of a rundown on TechSnap, and so I kind of did a deep dive into all
of this.
But there's a lot of trends that you could point to, including infrastructure management,
containerization, Docker, serverless.
They all are really about de-emphasizing the role of the sysadmin and empowering the developer
to go from concept to actually deploying code much faster.
If you think about when we started the show, it was much closer to go deploy a rack system.
You order the hardware.
You've got to figure out how much hardware you want.
You provision that.
Somebody slides into a rack for you.
They set up the base operating system.
They create you a user account that probably doesn't have all the privileges you need.
And then they email you the SSH login info and say, OK, you're good to go.
And then if you don't have the package, then you email the sysadmin back and say, hey,
can you install this Apache module?
I need this as well.
And then he gets to it later that day.
He logs into the box.
The app gets the Apache module, writes you back.
You say it's done.
You log in.
You say, oh, shit.
Turns out that's not the right version.
I need a newer version that's in the Debian repo.
And then he takes two days to get back to you because now he's got to go and install
it and go build it himself.
And he's grumpy about it.
And that's how you deployed software and set up code in the past.
And now, serverless, I believe, is the ultimate version of developers are just totally running
the show now.
They're totally running the infrastructure show.
They've outsourced infrastructure management to the professionals.
They don't ever have to talk to them.
They have this great abstraction layer between them.
They just ship their Go app up to Lambda.
It executes and returns the results.
They save the results.
Good to go.
They never had to order a server.
They never had to email a tech guy.
It's all manageable.
And they don't have to fuss with it.
And what I think we are seeing in 2018 is the complete swing from the sysadmins control
everything to now the developers control everything.
And if you look at Linux as a platform, it was built around the sysadmin.
You want to install some software?
You got to be root.
You want to open up a port?
You got to be root.
You got to have these permissions, these file permissions.
Everything has to be just right.
And it's really about the sysadmin.
The sysadmin sets up the box.
He sets up the software.
And then the users use the system that the sysadmin has provided them.
This is all being flipped on its head.
And containerization and serverless is the ultimate manifestation of the shift of power,
I think.
And it's happened right in front of our faces as we've done these 300 episodes.
Yeah, I know.
I completely agree.
I mean, there was a point when I was debating the virtue of just like getting a rack server,
which now would be completely insane.
It's ridiculous.
The Linux thing, the thing that wasn't surprising for me, though, was like just the dominance
of JavaScript, right?
Just the absolute, you know, it's the number one most used language, according to the survey.
Oh, let me pull up.
I just had that.
It wasn't Rust, although that was the most beloved.
You probably saw that.
No.
Yeah, I did see that.
Scrolling up.
Also, apparently, F sharp makes the most money, as well as Clojure and Perl still ranking
in a handsome salary as well.
But the number, let's see, that's the visual.
What is it?
Do you remember?
I don't know if I remember.
Redis is the most loved wanted database.
Libraries and tools, TensorFlow libraries, the most loved Rust is the dreaded is visual
basic six, and wanted is Python and loved is Rust.
But yeah, platforms.
Long time love.
Go ahead.
What specific answer were you looking for out of there?
Were you looking for anything particular?
No.
It's just a-
JavaScript is 69.8%.
HTML-
Right.
This is what you're looking for.
JavaScript is 69.8%.
HTML is 68.5%.
And then it just kind of trails off from there.
I feel like over the years we've been in the show, we've seen a maturing of JavaScript
from annoying scripting language that I have to do because jQuery, to actual viable mature
programming language that you can write large scale applications in.
I completely agree.
Yeah.
Absolutely.
Side note, friend of the show, Ms. Holmes of Theranos, apparently is going to jail.
Why?
What?
Where did this come from?
The SCC, Ars Technica, this just came up.
Someone sent it to me.
The SCC charges Theranos with massive fraud.
CEO Holmes stripped of control.
Breaking news on the quarter radius program.
Yeah.
Yep.
Huh.
Okay.
Let's transition from the 2018 Stack Overflow results to your observations about the last
10 years of living with an SDK, a particular SDK.
Particular SDK though.
The iOS SDK.
Yeah.
Yeah.
How's that been?
I mean, it feels like a lot's changed and at the same time not a ton has.
But I sit further removed.
So I was thinking about this a lot this morning because I didn't know, should I put this in
the note?
Yeah.
I think the iOS SDK literally changed my life and I think a number of other developers'
lives for the better.
Let's go back in a time machine, let's go to 2008.
If it weren't for this, I would have still been doing websites and Java applets, right?
I'd be working in some big company, which is nothing wrong with being a dark matter
developer, but you know, it's not really what I wanted.
The iOS SDK was so new and the fact that Apple insisted on no flash apps and no really cross
solutions other than HTML5 meant that people had to choose to do Objective-C.
This is not going to be a swift bashing session yet.
What that did for Mike of the past was it let me, who was young and didn't really have
too many responsibilities, take a huge risk, huge, absolutely huge, learn this language
that is completely unmarketable to anywhere but iOS development.
Remember iOS development was not a certain thing the day it launched, right?
But it made me and other people who took the scramble a rare commodity, a rare service
provider which basically just allowed me to build a business from there because at one
point I was one of three iOS dev shops in New Jersey and the big digital agencies didn't
at least local to where I was.
It did not take iOS development seriously and even when they started taking it seriously,
they just outsourced it all to us because you have to remember people say it's a little
different now, there's a lot of similarities between dev shops and agencies and you could
argue they are the same.
But back then digital agencies were doing print ad buying and they were doing design
work and maybe a little bit of WordPress.
They didn't want to take on this crazy Objective-C engineering and remember when the iOS SDK first
came out, it was rough.
This was a true C-like system, right, it's built on Mac or very similar to Mac.
So it created this whole new market where you – and this is maybe a bit of a stretch
but it enabled a lot of people I think to open businesses and compete in a market that
was so immature that the large players didn't care for at the time, that it just opened
the doors.
I'm just going through it, I mean you were there, how crazy, how serious, no one thought
the App Store was going to be serious because things like this, Windows Phone, the old version
of Windows, whatever they call it, had apps kind of, Palm had it, Blackberry, but the
carriers got all the money, it was awful if you were an app developer.
So Apple in the 70s, 30s, it really revolutionized that and I also think that the iPhone and
that development model has actually empowered frankly a generation of developers such as
myself who really would not have been able to do any of this stuff, right?
I mean people whine about making money online today, making money on the internet in 2008-2010
was not too good, right?
Trying to monetize a website then was not super easy either.
Right, or trying to make money living selling a Windows app was nearly impossible because
you didn't have distribution mechanisms, it was hard to reach the audience.
Right, Mac was slightly better but you really had to get like a Jim Dowell or someone like
that to basically promote you.
Yeah, right about it.
And if you didn't, you were screwed because who's going to go to ChrisApps.com and give
you their credit card or PayPal you some money and buy your app back then, no?
Really.
Yeah, I agree.
So thinking back, I think the hint was that there was a hacking community that was developing
around the iPhone to jailbreak it and install their own side apps but we were also being
told all the time, hey, you know what, we got these web apps and they're going to be
a great way to run apps on a phone and there was sort of that battle to be had and that's
also what WebOS came with is, hey, we're going to have web apps, this is a great way to do
it.
Ubuntu phone tried that as well.
So we had to watch that battle play out to see if that would work or would it require
native apps but I think what we learned was when you combine a distribution mechanism,
when you create a point where people know to go to find the application and then you
iterate on the features of the platform so you encourage users to keep upgrading like
faster CPUs, improved GPS, improved camera, improved cell phone modem speed, now of course
all the things are doing like better screens, larger screens, AR, they're trying to continue
that on but early on in the process, there were fundamental improvements.
The first iPhone didn't ship with an app store and it didn't even ship with 3G.
It was an old edge phone.
It just was crazy.
It was crazy.
And then they iterated on that and Android also did very quickly and you got to give
Google some credit.
Like they started out so, so rough.
I forget what it was, was it the Android market before it was called the Play Store and it
was so bad.
And...
Yeah, the Android marketplace.
Yeah.
Yeah.
And they iterated pretty quickly and they launched the Play APIs and they really started
to solve some problems.
I mean, looking back at it, what now looks like a breakneck pace, back then it felt like
we were waiting forever to get these features.
But now you look back at it and go, wow, they really hustled to get up to feature parity.
And so the Android platform very doggedly did that as the iOS platform continued on
and they both offered this new thing which wasn't available really to developers at least
to any wide capacity and that is a centralized app store with a review mechanism, a payment
mechanism so I didn't have to give payments information to each freaking developer for
each app I want to buy.
And they set up these OSs in a way that I, as an end user, not even having to understand
how sandboxing works, somehow know that I can load these phones up with these apps and
it's not gonna trash my system like it would slow down an old Mac or an old Windows box.
So there was a lower level of risk for users to experiment.
I didn't have to give payment information out a thousand times and it was just one tap
to delete it and I could leave them a bad review.
And so the barrier of entry was lower for developers, it was lower for end users, and
it was just like adding fuel to a fire.
And I think that's why it worked, I just think that's why when you say it enabled a new generation
of developers, I think that's one of the reasons it works so well.
And what the hell is gonna come along that replace that?
How do you top that?
I can't imagine.
It's gonna be coming eventually.
Well, yeah, I mean, we argue about this all the time, right?
I think, and this is where these chapter marks are gonna come in handy, I think we have been
a little negative on Apple because looking back, Apple's done a lot of dumb things, right?
Like when they decide they wanna impose their own like social mores and blah, blah, blah
on people and they overreact and like start ripping out Civil War video games or educational
programs because they don't like whatever, that's too much.
But the idea of an open marketplace, because the App Store is relatively open, right?
They do bad things, I've had issues, we had the thing where they took down, they unfutured
Coder Radio and we said something they didn't like, right?
But that is just human nature.
And I remember back to what it was like before the App Store, it was so much worse.
So when you say, where are we going, well, I think the future looks like the past.
I look at Echo apps, not apps, but Echo skills.
And I look at the monetization story there, I look at, if I was in college, if it was
10 years ago and I wanted to just write younger version of me, right?
Mike today, who's in college, just getting out of college, starting a business, what's
going to happen?
Well I don't know how that Mike makes any money.
I mean sure you can do consulting and you can build Echo skills for other people, but
the pool of people who are going to want you to do that is going to be much lower because
there's no way to really monetize it.
I know, I understand that Amazon does send checks to people, but that's a little more
than Jeff, Mr. Bezos' grace, right?
There's no like, like again-
There's no full-time strategy there.
We rightly beat up on Apple, but the norm of you having a backend that you log into
to the platform vendor site and they give you how many sales you have, where they came
from, what the conversion rate was, foreign currency, what your year to date is, what
your monthly is, and when your next wire transfer is coming in, that is, if you did any kind
of like Blackberry development, what I just described is heaven, right?
iTunes Connect, for all its warts, was absolutely revolutionary.
The idea that the individual developer could, and I understand, and again, you can play
tapes of myself criticizing Apple, but more or less be on an open plane, a flat plane
against larger companies or larger developers, is something that did not exist until Apple
made it happen, right?
Your best bet in the past was you do some kind of freeware, shareware version, and you
know, like Diablo 1, you try to monetize it after the fact, but then you have piracy and
you basically made no money.
What I'm worried about is I see all the, like I think Echo skills are amazing.
I think these voice assistants, I think bots, I think all this stuff is going to be huge.
Making money on this stuff is very, very hard.
It looks like the strategy is going to have to be a holistic one of the bot or the skill,
whichever term you prefer.
I tend to think that the skills are actually just a form of bot, but is not your product.
It is another box you have to tick as part of your entire go-to-market strategy, right?
And you have to monetize your service in some other way, whether that be consulting or you
have like a, you know,
Crypto miner.
Yeah.
Perhaps not.
Maybe not the Bitcoin, but you got what I'm saying, right Chris?
Or am I off the rails?
No, I totally follow you.
I like it.
And it's the accumulation of really five years of reflecting on this stuff.
And actually you're not just reflecting on it, you're actually out there working at trying
to make it successful.
And I totally follow like, how would new Mike start today?
I wondered that about Chris too.
How would new Chris start today?
I don't know how to make it work.
So we just got to keep doing what we're doing, I guess.
I guess we just do this for another five years, Mike.
That's the solution.
Here's to another 300.
Yes.
Here's another 300, Mr. Dominic.
Another 2000 days of Coder Radio.
Is there anywhere you'd like to send people throughout the week to get more Dominic in
their face?
Yeah.
Go to themadbotter.com and follow me on Twitter at Dumanuco.
Yeah, you can follow me on Twitter too, at Chris LAS, the whole network at Jupiter Signal
and the Coder Radio program at Coder Radio Show.
And also check out Coder.Show, the new site dedicated just to the Coder Radio program
and let us know what you think.
Your feedback, what you'd like to see for the next 300 episodes and find our live times
at jupiterbroadcasting.com slash calendar.
All right, everybody, thanks so much for tuning this week's episode of the Coder Radio program.
We hope you've enjoyed it.
Oh, and one last plug.
Go to Coder.Show slash subscribe and get all 300 of the next episodes automatically every
single week delivered to your podcast catcher.
It's a beautiful thing.
Thanks for being here.
We'll see you next week.

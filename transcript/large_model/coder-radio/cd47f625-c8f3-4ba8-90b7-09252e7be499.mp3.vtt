WEBVTT

00:00.000 --> 00:07.000
This is Koda Radio, episode 347 for March 4th, 2019.

00:30.000 --> 00:40.000
Hello and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that's taking a pragmatic look at the art and business of software development.

00:40.000 --> 00:44.000
And don't you forget those related technologies.

00:44.000 --> 00:51.000
My name is Wes and I'm joined once again by that funky Floridian, Mr. Michael Dominic. Hello, Mike.

00:51.000 --> 00:53.000
I've got gators in my garage.

00:53.000 --> 00:58.000
I mean, that seems like good motivation to stay inside and get your work done.

00:58.000 --> 01:06.000
Damn, Skippy. I've written more Ruby code in one week than I think you have in your entire life because you're too smart for that.

01:06.000 --> 01:09.000
I've been writing actually a decent amount of Ruby these past couple of years.

01:09.000 --> 01:11.000
I really thought I had you this time.

01:11.000 --> 01:19.000
I know. I mean, it may not have been my first love and it may still not be really my love, but I will say it's very practical.

01:19.000 --> 01:23.000
So this is not even a topic for today, Wes, but in what context are you writing Ruby?

01:23.000 --> 01:31.000
Well, some of the show stuff, some of the automation system ends up being written in Ruby just because the larger system was already Ruby.

01:31.000 --> 01:39.000
Oh yeah, JBot already, but no, some of the new stuff we've been working on, like the system that will post this show once it's done.

01:39.000 --> 01:41.000
I stand corrected.

01:41.000 --> 01:46.000
Yeah. And I mean, I also was, for a while I did a lot of Ruby because I was working with Chef.

01:46.000 --> 01:50.000
So that kind of, I'd done about four, but it was more of a Pythonista myself.

01:50.000 --> 01:55.000
So that just kind of got me familiar enough with Ruby where now I can hack it when I have to.

01:55.000 --> 01:57.000
I don't, I don't know, there's lots I don't like.

01:57.000 --> 02:00.000
I mean, Gem, come on.

02:00.000 --> 02:02.000
There's so much tooling that is kind of unfortunate.

02:02.000 --> 02:07.000
The number of times I've compiled Nokogiri without ever needing to use it whatsoever.

02:07.000 --> 02:10.000
I mean, I actually have used it recently, but most of the times you don't actually.

02:10.000 --> 02:11.000
So you use Rails is what you're telling me.

02:11.000 --> 02:12.000
I have used Rails, yes.

02:12.000 --> 02:16.000
Right. So if you don't mind, we don't even have it on the doc today.

02:16.000 --> 02:18.000
I mean, I think we're talking about it now, buddy.

02:18.000 --> 02:20.000
So I think we are, we're committed now.

02:20.000 --> 02:27.000
So if you had to name like your top three things you dislike about Ruby and that can extend to Rails if you want.

02:27.000 --> 02:28.000
What are they?

02:28.000 --> 02:31.000
Oh, OK. That's a great question.

02:31.000 --> 02:36.000
You know, it's just a little, it's a little loose.

02:36.000 --> 02:38.000
It just doesn't feel very.

02:38.000 --> 02:39.000
I know that's a great thing about it.

02:39.000 --> 02:41.000
Right. It's so message passage.

02:41.000 --> 02:46.000
It's almost it's like a it's like a weird small talk lisp.

02:46.000 --> 02:51.000
I don't know what else other languages you want to throw in there, but it's got a very unique and strange pedigree that I like a lot.

02:51.000 --> 02:53.000
Objective C. Yeah, that totally fits.

02:53.000 --> 02:58.000
I like a lot of the pedigree, but the way it came together, I don't love the do blocks.

02:58.000 --> 03:03.000
The syntax really just rubs me the wrong way, which is totally, totally meaningless consideration, which is again why I end up using it.

03:03.000 --> 03:05.000
Right. Like that doesn't affect it.

03:05.000 --> 03:08.000
It just doesn't feel.

03:08.000 --> 03:10.000
Something about it doesn't strike me as pretty.

03:10.000 --> 03:13.000
I know everyone loves Ruby for that reason, and I just don't get it.

03:13.000 --> 03:14.000
Oh, no, I don't think everyone loves Ruby.

03:14.000 --> 03:19.000
I've been to enough meetups where I can tell you for a fact that not everyone loves Ruby.

03:19.000 --> 03:24.000
All right. So you would call that the loose nature of the message passing system, even though it's not really message passing.

03:24.000 --> 03:27.000
Right. No, but I get the syntax. OK, so that's one.

03:27.000 --> 03:32.000
Yeah. Well, yeah. And then just like, yeah, the I think for a long time there was somewhat culture, which the community's got a lot better.

03:32.000 --> 03:37.000
But overuse of mixins, just all the rails magic that got started.

03:37.000 --> 03:40.000
I will give you mixins. Give me three.

03:40.000 --> 03:46.000
Number three. I don't like the deployment story very much.

03:46.000 --> 03:53.000
Oh, like Python has a number of tools that make it pretty easy if you have to go publish something that runs like Twitter has checks.

03:53.000 --> 04:01.000
There's a ton of them now. And I know there are some things like that for Ruby, but anything that has a bunch of dependencies that I want to go run on another system.

04:01.000 --> 04:08.000
I know how to make it work, but it just doesn't doesn't feel very clean compared to be able to like make a jar or a static binary.

04:08.000 --> 04:20.000
So it's so funny you say deployment. I spent most of my morning fixing a broken Ruby deployment from a right from someone who no longer works with me.

04:20.000 --> 04:24.000
And yeah, it's. You know what?

04:24.000 --> 04:32.000
I'm going to go on and say one of my crazy broad things that people are going to get mad about if you're doing and this is rails, the context I'm talking about is Ruby on rails.

04:32.000 --> 04:40.000
Right. Right. Just use Docker and Doku. Everything else is like its own little beautiful princess that has to be taken care of.

04:40.000 --> 04:52.000
And if like you're missing a key or something weird from, you know, the guy or gal that did it, you know, three years ago, then you're hosed for hours.

04:52.000 --> 04:57.000
It's I will give you the deployment story, particularly then if I don't know how much you want to dive into this.

04:57.000 --> 05:04.000
So stop me when you want to. But the issue we had, what is it? We're running on AWS Linux.

05:04.000 --> 05:09.000
So Amazon's particular flavor of Linux. I'm sure you're familiar with this, right?

05:09.000 --> 05:20.000
And for whatever reason, AWS Linux defaults when you do there's like an auto, you know, there's like a preset Ruby on rails.

05:20.000 --> 05:22.000
Yeah, they've got it all ready to go packaged up for you.

05:22.000 --> 05:34.000
So you don't have to worry about it. If you're if you're using rails five, which is the current stable version, they call bundler two point zero instead of bundler one point.

05:34.000 --> 05:40.000
I think it's like nine three. So our entire application just like broke.

05:40.000 --> 05:49.000
Oh, my gosh, that is the other thing, especially when you combine bundler in the mix and there's so much rewriting happen like the functionality provides is good.

05:49.000 --> 05:55.000
And there's like a whole complicated world of the different ways, in particular languages like Ruby and Python take care of those tasks.

05:55.000 --> 06:02.000
But boy, some tiny weird Ruby path issue. And anytime you end up debugging that, you just kind of want to scrap the whole thing.

06:02.000 --> 06:06.000
Oh, so it the error I got was kind of insane, right?

06:06.000 --> 06:11.000
Because it just said bundler doesn't is not, you know, the binary not found gem system.

06:11.000 --> 06:22.000
E o n t. Right. We don't need to. Oh, yeah. Yeah. The strange Ruby error. But then you go like, you know, gem list and bundlers right there.

06:22.000 --> 06:29.000
It took me a couple of minutes to say, does bundler two point X have breaking changes from bundler one point X?

06:29.000 --> 06:38.000
Right. Right. And I would imagine so. Yeah. Oh, it does indeed. Google the issue with the with the tag on Stack Overflow, AWS, Linux.

06:38.000 --> 06:48.000
And it's a huge problem. People were sharing. I had to write and I think this is really stupid, but it wasn't a lot of work, but.

06:48.000 --> 06:56.000
I just think it's dumb. I had to write a they call them because really, we're using the code deploy thing, which is actually a problem.

06:56.000 --> 07:02.000
Right. They used to call elastic beanstalk, but Amazon rebrands everything every five seconds.

07:02.000 --> 07:09.000
So I had to write an elastic beanstalk. They call them extensions, which basically that's a dark road.

07:09.000 --> 07:14.000
Yeah. Well, they're basically like Docker proc files or Docker pre run scripts, right?

07:14.000 --> 07:21.000
Except they have their own weird proprietary format. And it's just this annoying thing where you're maybe writing 20 or 30 lines of code.

07:21.000 --> 07:28.000
But because it's specific to Amazon, you have to like at least I do because I tend to prefer DigitalOcean and, you know,

07:28.000 --> 07:33.000
generic Ubuntu because, you know, I like things that are standard.

07:33.000 --> 07:39.000
I'm sitting there split screen the Amazon docs to the left for the old elastic beanstalk system.

07:39.000 --> 07:45.000
And my in this case was a Ruby mine in in dev mode.

07:45.000 --> 07:51.000
They have a one screen code mode on the right. And son of a bitch.

07:51.000 --> 07:56.000
I mean, it's it is not what you want to be doing at seven thirty in the morning.

07:56.000 --> 08:01.000
Oh, no, that's that sounds so unfortunate. But I now know how to do it forever.

08:01.000 --> 08:08.000
So the issue, by the way, if somebody has this problem, the issue is from now on, from whatever date going forward,

08:08.000 --> 08:15.000
the Amazon Ruby on Rails install is defaulting to Bundler 2.0.

08:15.000 --> 08:21.000
If you don't explicitly specify in an elastic beanstalk extension that you want the one point X series.

08:21.000 --> 08:29.000
The problem is the rails generator still assume that you're going to do like one point nine point three, I think is the current.

08:29.000 --> 08:32.000
So that's just it's just all that stuff. I think you're right.

08:32.000 --> 08:38.000
Using Docker does help. It feels like it gives a bit more reproducibility insist on what I wanted to install.

08:38.000 --> 08:41.000
Right. Yeah. You get to choose the whole thing and kind of have a different interface to it.

08:41.000 --> 08:45.000
Yeah. Do you have any tips or tricks that you like for deploying?

08:45.000 --> 08:50.000
Do you ever deploy just sort of like command line scripts or utility written in Ruby?

08:50.000 --> 08:55.000
All the time. That's usually a little less painful because you're almost never.

08:55.000 --> 09:00.000
I mean, you can still use Ruby gems, but in that case, you just go for like system installed gems.

09:00.000 --> 09:05.000
What if you just like, you know, you wanted to like it's so handy in some other languages like go, for instance, really does this well.

09:05.000 --> 09:11.000
Right. Where you can just go, especially if you have a GitHub release, you can just go have a generic Linux binary up there that people can download.

09:11.000 --> 09:15.000
Put in, you know, home der slash bin ch ch modded and away they go.

09:15.000 --> 09:26.000
Yeah. So on the binary side, I tend not to use Ruby. I tend to use either C++ or actually it's almost always C++ unless it's Java for whatever reason.

09:26.000 --> 09:35.000
But the way I solve the system install gem problem on Ruby for kind of like just like scripting is I use a Ruby environment, R, B, E and V.

09:35.000 --> 09:40.000
Oh, yeah, totally. And I just have like an environment per what I'm doing.

09:40.000 --> 09:42.000
So each project just gets its own little environment.

09:42.000 --> 09:46.000
It's its own little natural snowflake. Yeah. Right. Yeah.

09:46.000 --> 09:51.000
Similar in many ways to the virtual end of Python fame. Exactly.

09:51.000 --> 09:55.000
Yeah, it's just such a contrast with the binary thing because it's so easy.

09:55.000 --> 10:02.000
The great part about Ruby, right, is like you can sit down, install a few things, pull up a Ruby repl and you can do whatever you want.

10:02.000 --> 10:07.000
And there is a gem for basically whatever you could possibly need. Every API exists in there.

10:07.000 --> 10:15.000
So at one hand, it feels very powerful. There's a lot of leverage. It's easy and fun and generally pretty nice to use.

10:15.000 --> 10:19.000
And on the other hand, it feels like once you get serious, you're like, oh, man, OK, my project works.

10:19.000 --> 10:22.000
Now I've got to go run it in the wider world. It's a huge letdown.

10:22.000 --> 10:25.000
Well, and the other answer to that problem, too, would be Docker, though.

10:25.000 --> 10:31.000
Right. If you just have a prefab container that can be Docker pulled, even if you're using a private repo for that instead of Docker.

10:31.000 --> 10:33.000
That's a good point. Or some other stuff. Right.

10:33.000 --> 10:37.000
Like like a snap package, for instance, would be just fine. A package would work.

10:37.000 --> 10:40.000
Yeah, snap package would work. Yeah. Interesting.

10:40.000 --> 10:43.000
All right. Well, we're getting into the sides of deploying stuff.

10:43.000 --> 10:47.000
And that might just be one thing you think about when you're talking serverless.

10:47.000 --> 10:52.000
I saw and it sounds like you also saw some good feedback over in the CoderRadio subreddit.

10:52.000 --> 10:58.000
So also just a pro tip. We've got a subreddit. Yeah, that's right. R slash CoderRadio.

10:58.000 --> 11:13.000
You really you just can't miss it. Thankfully, user and listener Tom Enum pointed out that one thing we didn't quite get to in our discussion of serverless last episode was that it scales to zero.

11:13.000 --> 11:17.000
Which I got to say, it is totally fair. That's a great use case.

11:17.000 --> 11:19.000
And we just didn't manage to talk about it. But it's certainly true.

11:19.000 --> 11:23.000
Right. If you have some stuff that is just really periodic, you don't need it.

11:23.000 --> 11:31.000
It can be simpler and maybe cleaner in some ways, too. Right. Rather than just be like, yeah, I put it on this other box and it runs as a cron job.

11:31.000 --> 11:35.000
Kind of feels dirty. Yeah, and it can be more cost effective.

11:35.000 --> 11:42.000
Right. If you only have like a big import that you do once a month, just throwing it on Lambda or or Azure functions.

11:42.000 --> 11:46.000
I mean, we did that with Alice with some PDF scanning and emails.

11:46.000 --> 11:49.000
That was we just had a bunch of Azure functions that did that.

11:49.000 --> 11:58.000
And why? Because there was almost no customer. I think we only ever had one who actually had enough PDFs that were big enough that we wanted to offload it.

11:58.000 --> 12:02.000
Yeah. OK. And that was a node application.

12:02.000 --> 12:10.000
Right. And I guess I suppose perhaps why we didn't quite get there is because we were talking at the time, the question that prompted that was going full serverless.

12:10.000 --> 12:21.000
And it could be very different if you're considering full versus like as an addendum, an additional thing that just as a periodic job runner or event responder. Super useful.

12:21.000 --> 12:26.000
I agree. We have to disagree on something, Wes. I mean, this is getting very boring.

12:26.000 --> 12:32.000
Come on. Let me ask you a question, Wes. How do you feel about Germany and Linux together?

12:32.000 --> 12:37.000
Oh, Germany and Linux together. Well, I'm a big I'm a big fan of Germany, so no problem there.

12:37.000 --> 12:43.000
And you might have guessed I'm a big I'm a big fan of Linux, but together, it's kind of a guy.

12:43.000 --> 12:47.000
Well, actually, I spent a long time on Windows and me. Let me tell you about that.

12:47.000 --> 12:52.000
But actually, I can't because I purposely blocked out those memories.

12:52.000 --> 13:01.000
So elephant the room, we're obviously talking about open Zeus and it sounds like you've actually been doing some open Zeus things, which I found a little bit strange.

13:01.000 --> 13:05.000
I've got nothing against it. It's just it's not an ecosystem.

13:05.000 --> 13:09.000
I play it very often and it kind of strikes me and I'm curious about your thoughts about this.

13:09.000 --> 13:18.000
But there's a lot of very interesting tooling and tooling choices and tools available, techniques, powerful file systems and the way it's been configured.

13:18.000 --> 13:25.000
But it seems like you kind of got to know enough to put it together in a way that you might not have to if you're deploying on Ubuntu.

13:25.000 --> 13:35.000
Yeah, that's super true. So I have been working with a new client who is an open Zeus shop.

13:35.000 --> 13:44.000
Now, we should just set this up. For context, we're talking server side open Zeus for the context of what we're going to discuss here.

13:44.000 --> 13:50.000
So we're running open Zeus on servers. That's the operating system you've chosen to run your software on top of.

13:50.000 --> 13:55.000
Right, and actually they're running and they're running Zeus proper, Zeus Enterprise. Oh, good.

13:55.000 --> 14:05.000
But I'm deving to open Zeus and I'm using the Thaleo as I was corrected by Emma to do the actual work.

14:05.000 --> 14:13.000
So I have, and I'm sure you do too, Wes, like a collection of my own bash scripts and like Docker scripts and all this kind of stuff that I use on Ubuntu.

14:13.000 --> 14:19.000
Yeah, the things that if we were, you know, if we worked in a physical trait, those would be on our tool chest, you know?

14:19.000 --> 14:26.000
Right, these are things that I use. Anytime I have a new project, there's like a couple shell scripts that I run on a server, right?

14:26.000 --> 14:29.000
Well, none of them work on open Zeus.

14:29.000 --> 14:33.000
Yeah, gosh, that is very different.

14:33.000 --> 14:37.000
So I did not notice how much of a dependency I had on apt.

14:37.000 --> 14:41.000
Yeah, you kind of just trust that you would be in a debian ecosystem.

14:41.000 --> 14:51.000
You would be in a debian environment. So I did what I do with any new engagement and I say, you know what, AWS is powerful.

14:51.000 --> 15:00.000
I personally have some concerns about how proprietary Amazon has made their version of Linux, particularly with the tooling side,

15:00.000 --> 15:03.000
that it's like not that easy to get off unless you're just using Docker.

15:03.000 --> 15:12.000
That's a big one, right? Especially, I see it a lot in the ML space too. Yeah, we've compiled all the hard and annoying ML libraries, so just use our Linux.

15:12.000 --> 15:15.000
Yeah, but yeah, and that's the topic for a whole other show, right? But let's...

15:15.000 --> 15:18.000
Yes, it is. Stay focused here. Open Zeus, I'm sorry.

15:18.000 --> 15:29.000
So I tend to recommend DO to people, the former sponsor of the show when we, before our Linux overlords bought us.

15:29.000 --> 15:41.000
And I was frankly surprised when I went into my DO dashboard, looked at the hundreds of droplets that I apparently have that I don't pay attention to, but pay for every month.

15:41.000 --> 15:45.000
Yeah, don't think about that. None of us, we're not willing to fight that fight today.

15:45.000 --> 15:52.000
And I went to create a new one. You've used DO, right? It's got the nice little dropdown, you got all the logos for the distros.

15:52.000 --> 15:54.000
Yeah, it's nice and they have a decent distro selection.

15:54.000 --> 16:01.000
Well, I ended up doing a control find for Open Zeus because for the life of me, I couldn't find it.

16:01.000 --> 16:04.000
Yeah, okay. Is there another page? Is it page two? Where is it?

16:04.000 --> 16:11.000
I missed something. So off to the forums I go and sure enough, as soon as I duck, duck, go search it because I've become a hippie,

16:11.000 --> 16:19.000
I find that this is like the number one user voice complaint from the DO community is that there's no Open Zeus.

16:19.000 --> 16:27.000
So I ask around, I make kind of a cheeky tweet saying, you know, Germans or I forgot what the other one was,

16:27.000 --> 16:31.000
but I said basically German people who love Linux, help me. How do I get Open Zeus and DO?

16:31.000 --> 16:39.000
And a maintainer of the Open Zeus project replied and said, it's possible, but if you could write a write up, we'd appreciate it.

16:39.000 --> 16:40.000
Okay.

16:40.000 --> 16:42.000
And so you did just that.

16:42.000 --> 16:43.000
So I did that.

16:43.000 --> 16:44.000
What a guy, Mike, geez.

16:44.000 --> 16:52.000
And you know what? It's really not that hard. And in fact, I think, again, Wes can tell you because I know we all love Wes.

16:52.000 --> 17:01.000
I'm telling you, DO is not a sponsor of the show anymore, but DO makes it very easy to upload custom Linux or BSD images of what you want.

17:01.000 --> 17:12.000
So in my case, what I want is an Open Zeus box with some Rails, let's just say tool chain, right? Rails tool chain configured.

17:12.000 --> 17:16.000
So for the write up, I skipped the Rails tool chain, I just did the box.

17:16.000 --> 17:23.000
But sure enough, it's about a 20, 30 minute process. A lot of that's downloading an ISO and like uploading the ISO.

17:23.000 --> 17:24.000
Yeah, right. You got to be the middleman.

17:24.000 --> 17:33.000
You got to be the middleman. And there's like a whatever process DO does on the back end to process it is, in my experience, not very quick.

17:33.000 --> 17:37.000
Right. They've got to go get it integrated, ready to run in one of their data centers, all that.

17:37.000 --> 17:43.000
And then you have to set up a droplet, right? Then you got to set up like, you know, the IP, the DNS, all that good stuff.

17:43.000 --> 17:47.000
But I'd say within a half hour, I was up and running on Open Zeus.

17:47.000 --> 17:53.000
And then I was learning all about Zipper and Yast, which apparently Yast is the GUI front end to Zipper.

17:53.000 --> 17:56.000
So we can talk about that if you want.

17:56.000 --> 18:00.000
I would love to. Yeah. I mean, had you had you used this operating system before?

18:00.000 --> 18:07.000
Are you familiar with any of the tools? Way, way back in like 2007 when I originally used Linux before I went to Mac.

18:07.000 --> 18:11.000
So, yeah, fun fact, if you're a new listener, I used to use Linux before I used Mac.

18:11.000 --> 18:16.000
Then I went to Mac for a long time. Then I now I'm back on both.

18:16.000 --> 18:25.000
I did play around with Open Zeus. I liked it because I felt it was more put together because you got to remember at the time we were talking like Ubuntu 8.10.

18:25.000 --> 18:27.000
And there were some serious issues.

18:27.000 --> 18:32.000
Oh, yeah. OK, well, those were different days. Yeah, it was a different time.

18:32.000 --> 18:39.000
I so I went and I actually also used Fedora at the time, which I know is Fedora is completely different now because KDE is completely different.

18:39.000 --> 18:46.000
But on the server now, I mean, I've been using I went on the server when I was primarily an iOS dev.

18:46.000 --> 18:52.000
I just used Ubuntu 16.04 or whatever it was, 15.04 actually LTS.

18:52.000 --> 18:57.000
And and a little bit of RHEL, right, because I have customers who love RHEL.

18:57.000 --> 19:00.000
Yeah, of course. I mean, it's hard to avoid.

19:00.000 --> 19:06.000
But Open Zeus, like I have to be honest with you, I sincerely believed it was just for Germans.

19:06.000 --> 19:10.000
Is this even allowed? Are there some sort of customs check that's going to happen?

19:10.000 --> 19:14.000
Do I have to like go surrender to Homeland Security now or something like.

19:14.000 --> 19:19.000
I assume there was like a delicious bratwurst that you ate while you were getting the ISO all rigged up and ready.

19:19.000 --> 19:28.000
It was weird. As soon as the ISO downloaded, a gentleman in Lederhosen brought me like a like a nice like substantial beer, you know, and a couple pretzels.

19:28.000 --> 19:30.000
It was weird.

19:30.000 --> 19:36.000
OK, so are you using are you deploying using your trick from the start of the show and deploying containers here?

19:36.000 --> 19:41.000
Or are you actually having to get nitty gritty and build your software and really run on Zeus?

19:41.000 --> 19:46.000
So that is an open question. For the purposes of dev, I'm just doing Docker containers.

19:46.000 --> 19:53.000
Right. Sure. Because you deploy like five times a day and it's just not worth it to like have to worry about this problem.

19:53.000 --> 19:59.000
I will say that Open Zeus is very, very different.

19:59.000 --> 20:05.000
Like yeah, yes, I keep saying yes, I really mean zipper zipper is.

20:05.000 --> 20:10.000
Well, it functionally does what aptitude gets and West, you can correct me because you're the stronger Linux person here.

20:10.000 --> 20:13.000
I find it very foreign to work.

20:13.000 --> 20:16.000
I mean, there's so there's always going to be some mental overhead, right?

20:16.000 --> 20:23.000
When you switched things, most people have at least done, you know, play a little bit in Debian and then maybe gone over to Fedora and used Yom and DNF.

20:23.000 --> 20:25.000
Somehow that doesn't feel as different. I agree.

20:25.000 --> 20:34.000
Like zipper is its own tool and they almost think about things in a slightly different fashion over in Suse land.

20:34.000 --> 20:36.000
But it's not I mean, it's not bad.

20:36.000 --> 20:43.000
It's strange that it's it feels a little bit more segmented, like they have their own the walls to their community.

20:43.000 --> 20:54.000
Not that they aren't welcoming, but just it's more often its own world than the other larger Linux ecosystems.

20:54.000 --> 20:59.000
I don't know if it's a good thing or a bad thing, but they just have more differentiation, I guess.

20:59.000 --> 21:09.000
Well, more differentiation, and I think it's a case that they just have a I can't I can't even try to think of how to say this correctly.

21:09.000 --> 21:14.000
They are one of the if you're using Suse proper, one of the certified Linux districts, right?

21:14.000 --> 21:19.000
So this is like REL for people who don't want to use REL, I guess.

21:19.000 --> 21:31.000
Or, you know what, to be honest with you, I and I can't speak for other people, but my understanding is that the people using Suse are using it because a business decision was made, you know, and years ago.

21:31.000 --> 21:35.000
Right. I mean, yeah, usually those are long term major decisions.

21:35.000 --> 21:41.000
Frankly, once you've built up the knowledge to actually operate in a Suse environment, why not?

21:41.000 --> 21:50.000
Right. Well, like I'm coming from the opposite side. I'm used to Debian, but if I had been working in Suse forever, I would probably continue to prefer Suse.

21:50.000 --> 21:56.000
Right. Sure. So you really you haven't found any reasons not to. That shouldn't be a problem.

21:56.000 --> 22:02.000
Yeah. I mean, so once I uploaded the ISO to DO and got that all set up, like that's a little more work.

22:02.000 --> 22:06.000
But, you know, mostly mostly a fixed cost, right?

22:06.000 --> 22:20.000
Like you get it all set up at first and integrate literally. So I uploaded the Rails one for my customer and then I just uploaded to my personal account a generic Suse of the current, whatever the long support one version for them is.

22:20.000 --> 22:26.000
Only because if somebody in the future asks me for Suse, well, now I have an image that's ready to go.

22:26.000 --> 22:30.000
Oh, excellent. Yeah. Yeah, right. Now it's just going to be sitting there.

22:30.000 --> 22:33.000
DO is not going to delete the images off my account.

22:33.000 --> 22:36.000
Smart thinking there, Mr. Dominic. I try.

22:36.000 --> 22:41.000
Well, this is this is fascinating. I'm going to be curious to see how this evolves as you as you keep playing with it.

22:41.000 --> 22:45.000
Might we someday see you running Suse on the desktop?

22:45.000 --> 22:48.000
No, I love me some Pop OS. I know.

22:48.000 --> 22:53.000
I was looking at your article here in the Pop OS screenshots. I mean, they do pop.

22:53.000 --> 23:07.000
They pop. I love pop and I love elementary. So I in fact, if I if I could, I might switch the Thaleo to elementary, but I can't right now because it's a customer bought it.

23:07.000 --> 23:09.000
So pop is. Yeah, go ahead.

23:09.000 --> 23:24.000
What I was going to say is, well, what stands out to me is you must like Pop OS so much that even though there's like a new Mac in your life, you've relegated that to an appliance role and kept pop for your little desktop, huh?

23:24.000 --> 23:39.000
Yes, so I'm running Pop as my desktop because I also have the Darter Pro, which I'm going to finally finish the review of this week. I wanted to take into the field for a while, which is if you don't know, a system 76 laptop, again, defaulting to pop, right?

23:39.000 --> 23:41.000
Yes.

23:41.000 --> 23:46.000
I need a good Mac build machine, though, Wes, for iOS dev.

23:46.000 --> 23:52.000
Right. I mean, you can't you can't really get away from that, right? Unless you want to pay someone else to host one for you.

23:52.000 --> 23:54.000
Which I was doing and was back.

23:54.000 --> 23:55.000
Yeah, exactly.

23:55.000 --> 24:07.000
So what I did was I took all of my valley of, let's just call them mistreated Macs, and I sold them to be repaired and resold.

24:07.000 --> 24:10.000
Good. Oh, man, they will find better homes.

24:10.000 --> 24:12.000
They will find better, more stable homes.

24:12.000 --> 24:13.000
Dryer too.

24:13.000 --> 24:25.000
Dryer. Yes. And I purchased a Mac Mini that will go on the router and be a podcast machine to avoid any any fan noise issues.

24:25.000 --> 24:27.000
So that is the plan.

24:27.000 --> 24:32.000
Oh, OK. So you said you said we'll go on the router. What did you mean by that?

24:32.000 --> 24:36.000
Sure. So automated iOS builds, right?

24:36.000 --> 24:44.000
Right now I'm renting Mac build services from Microsoft's, I want to get this right, App Dev Center, I think they call it.

24:44.000 --> 24:48.000
Wait, what? Can you break this down for me?

24:48.000 --> 25:06.000
OK, so in theory, so let's slow down. You can automate any build you want. In GitLab I can automate Rails builds and run my tests and get that feedback in Slack.

25:06.000 --> 25:08.000
Really?

25:08.000 --> 25:11.000
Yeah, that's what I do. That's actually what I do for Rails.

25:11.000 --> 25:18.000
Yeah, totally. You go trigger a build, go find out what happens, either successful or whatever, and then get some fast feedback.

25:18.000 --> 25:23.000
Yeah, and Bitbucket can do the same thing. They call it pipelines on the Bitbucket side.

25:23.000 --> 25:39.000
So a problem I've always had is that no one can do this for iOS, at least none of the big source control vendors like GitHub, Bitbucket or GitLab, because you have to do code signing.

25:39.000 --> 25:48.000
You have to do code signing, right. That is just not something I always think about, because most of the platforms that I end up writing for, well, I don't have to do that.

25:48.000 --> 25:53.000
Right, which means you need a physical Mac or a VM of a Mac, but it has to be on Mac hardware.

25:53.000 --> 25:55.000
It has to be on Mac hardware, really?

25:55.000 --> 25:56.000
Yeah.

25:56.000 --> 25:58.000
Oh, boy.

25:58.000 --> 26:13.000
So it's kind of crazy. In the meantime, I've been using Microsoft Azure, they call it the App Dev Center, which was great, but Azure credits aren't necessarily something I have a lot of.

26:13.000 --> 26:19.000
And it's just a little pricey, given how quickly we like to iterate.

26:19.000 --> 26:24.000
I see. Yeah, so the model doesn't work out for the way that you want to develop.

26:24.000 --> 26:29.000
Right. So a Mac mini can serve multiple purposes. It can be an iOS dev machine.

26:29.000 --> 26:35.000
It can go on the router and effectively be a one-time cost forever free build machine.

26:35.000 --> 26:42.000
And it can be a podcast machine since we obviously want to mitigate, we want the highest sound quality we can get.

26:42.000 --> 26:43.000
Ain't that the truth?

26:43.000 --> 26:47.000
Now, the challenge is there's multiple ways to do this.

26:47.000 --> 26:55.000
Obviously, at Jenkins, Apple used to have something called the robots, which I was asking about in the chat before, which is part of Xcode.

26:55.000 --> 26:59.000
And frankly, there's a ton of other automated build systems.

26:59.000 --> 27:03.000
Yeah, how many of those work well when you're targeting iOS?

27:03.000 --> 27:12.000
Well, there are specific ones, too. There are specific other open source or proprietary CI systems for iOS.

27:12.000 --> 27:16.000
So have you decided which one you're going to deploy? You're still weighing that.

27:16.000 --> 27:20.000
I am going to try to stick to the Xcode solution as much as possible.

27:20.000 --> 27:22.000
My second choice would be something like Jenkins.

27:22.000 --> 27:24.000
Yeah.

27:24.000 --> 27:26.000
So does this work the same way?

27:26.000 --> 27:35.000
I mean, so do you just go point this at some Git repository that it pulls or are you pushing notifications into it and it has the source already?

27:35.000 --> 27:38.000
It can be either way. You can push it in or it can pull off a Git repo.

27:38.000 --> 27:39.000
Nice.

27:39.000 --> 27:41.000
Yeah.

27:41.000 --> 27:46.000
So it's definitely – and the problem I'm solving is two.

27:46.000 --> 27:48.000
One, I want automated builds of iOS stuff.

27:48.000 --> 27:57.000
And two, I want to make sure – and this has been a problem given the number of Macs I've gone through and how kind of finicky code signing is.

27:57.000 --> 28:02.000
I want one machine that can do all of my code signing and not have that horrible thing where you upload a build,

28:02.000 --> 28:08.000
and then you go away and 10 minutes later you get it rejected because some certificate's out of date or –

28:08.000 --> 28:11.000
Kind of reduce variability that you might have.

28:11.000 --> 28:16.000
You always know it's going to break fast, you're going to find out quickly because it's all going through that machine.

28:16.000 --> 28:21.000
Exactly. I want to mitigate the risk of the Apple-specific issues.

28:21.000 --> 28:24.000
Yeah, that makes a lot of sense.

28:24.000 --> 28:35.000
For such a successful ecosystem, the number of things that you have to do just to make it all work in the same way that are just a little bit easier at every step in other ecosystems, it's kind of strange.

28:35.000 --> 28:37.000
As an outsider, it boggles my mind a bit.

28:37.000 --> 28:46.000
Not that there aren't reasons for it. I can understand how it got here. It's just different.

28:46.000 --> 28:56.000
I still think they're going to have to do something about it, but it's becoming too much of a hassle to constantly have to revoke and regenerate certificates

28:56.000 --> 29:01.000
and then worry about does someone have the right provisioning profile on their machine and have to send the awkward email.

29:01.000 --> 29:09.000
Here's your build, here's your invoice, and then the guy comes back and says, oh, well, it doesn't open on my phone because I got this weird error.

29:09.000 --> 29:15.000
So you have to say, okay, go back, delete the provisioning profile. It's just a bad experience.

29:15.000 --> 29:24.000
Yeah, yeah, okay, that's true. What's it – it's funny to think of – you have this little Mac mini. It's almost like a little server.

29:24.000 --> 29:29.000
Is it going to be headless? Are you going to have a monitor attached to it and it's going to be on a desk somewhere?

29:29.000 --> 29:34.000
So it's probably going to be on the desk here because I'm probably going to use it for podcasting too.

29:34.000 --> 29:42.000
Right, right. Yeah, okay, you will sound pretty good. I guess I'm okay with that.

29:42.000 --> 29:47.000
Right, since we had a little rigmarole about background noise before the show.

29:47.000 --> 29:54.000
Yeah, the whole start of the show is me just haranguing you to fix your sound and you saying, wow, there's nothing else I can change.

29:54.000 --> 30:00.000
Yeah, so, okay, will you also move any of your other CI or is this going to be just solely for the iOS stuff?

30:00.000 --> 30:02.000
No, this is going to be solely iOS.

30:02.000 --> 30:10.000
Yeah, right, I guess it really wouldn't make that much sense. The cloud infrastructure is already available or whatever else that you are using and you'd be running it on a different platform.

30:10.000 --> 30:19.000
Yeah, yeah, I mean, everything else we do, it deploys to basically Ubuntu with like the one exception of the openSUSE and there's like one rel thing.

30:19.000 --> 30:27.000
So, I'm pretty happy with, we're doing a GitLab CE instance for all of that and I'm pretty happy with that.

30:27.000 --> 30:34.000
It supports Rails really well, it supports Python, it supports Node, it basically supports everything that we do.

30:34.000 --> 30:37.000
What do you mean by really well?

30:37.000 --> 30:48.000
So, you merge into a branch or you push depending on how we have the project set up and it intelligently runs the tests and it does a bunch of stuff to just basically.

30:48.000 --> 30:50.000
Hmm, just like plenty of built-in understanding.

30:50.000 --> 30:53.000
Yeah, built-in understanding that you don't have to configure.

30:53.000 --> 30:59.000
Love it. That does fit with the whole Rails ecosystem too, so that makes plenty of sense.

30:59.000 --> 31:02.000
Magic.

31:02.000 --> 31:06.000
I can't, Rails is useful, I'm not trying to bash Rails, okay?

31:06.000 --> 31:09.000
Hey, would you like my magic gems?

31:09.000 --> 31:13.000
Maybe, I mean, yeah, how do they, what's the catch here? There's got to be a catch.

31:13.000 --> 31:18.000
The catch is you don't know what's in them. That's the catch.

31:18.000 --> 31:19.000
I love it.

31:19.000 --> 31:22.000
It's the same thing with pip, let's not even go there.

31:22.000 --> 31:32.000
Oh my gosh, yes. It is the same thing with pip. Why is packaging so painful all of the time?

31:32.000 --> 31:34.000
It just is.

31:34.000 --> 31:43.000
I mean, so you're just talking about Node, one of the both more vigorous and alive and just filled to the brim with stuff packaging worlds,

31:43.000 --> 31:51.000
and one of the most problematic of late and seemingly all the time is obviously JavaScript, right?

31:51.000 --> 31:53.000
NPM makes me cry.

31:53.000 --> 32:00.000
NPM makes me cry, yeah, right? I mean, I think it makes a lot of people cry, probably also the people who have to deal with it.

32:00.000 --> 32:04.000
But it did, I mean, it did kind of solve an interesting problem.

32:04.000 --> 32:11.000
It's funny to think about JavaScript as it was such a neglected language for so long and then suddenly revitalized.

32:11.000 --> 32:14.000
So I can see that you might make some mistakes.

32:14.000 --> 32:21.000
And now, of course, it's gotten even more complicated because suddenly we have different types of packages,

32:21.000 --> 32:28.000
CommonJS and then the native packages that now exist, and there's been so many workarounds and different ways to do things.

32:28.000 --> 32:37.000
It's pretty confusing in 2019 how it all can work together and support the maximal set of possible client configurations.

32:37.000 --> 32:40.000
And I'm sure that must be something that you have to run into, right?

32:40.000 --> 32:49.000
Like part of those CI systems probably involves some sort of transpilers, build things, packers, Webpack, maybe Babel.

32:49.000 --> 32:55.000
What's all happening in those dirty JavaScript configurations of yours, Mr. Dominic?

32:55.000 --> 32:59.000
So, honestly, all of the above, and I haven't even picked one.

32:59.000 --> 33:01.000
It's a shit show.

33:01.000 --> 33:09.000
I mean, the JavaScript ecosystem, for all of the progress ECMAScript has made, it just...

33:09.000 --> 33:11.000
Oh, we're going full names here. Listen to that.

33:11.000 --> 33:12.000
Yeah, we're going full names.

33:12.000 --> 33:14.000
That's how you know you're in trouble, buddy.

33:14.000 --> 33:15.000
ECMAScript.

33:15.000 --> 33:20.000
See, ECMAScript is a good language until you pull in some dependencies.

33:20.000 --> 33:23.000
Then it's JavaScript, and it sucks.

33:23.000 --> 33:26.000
Yeah, I mean, well, that's why I think you found for us this week, right?

33:26.000 --> 33:35.000
Pika package.com, which basically only allows you to find packages that adhere to the newest standards.

33:35.000 --> 33:36.000
Yeah, it's...

33:36.000 --> 33:41.000
Okay, full disclosure, I have not tried it, but I saw it floating around various people talking about it.

33:41.000 --> 33:50.000
Pika's mission is to make modern JavaScript more accessible by making it easier to find, publish, install, and use modern packages on NPM.

33:50.000 --> 34:01.000
Yeah, so you're saying, Mike, firstly, you can go to pika package.com, and then they've got a search bar there that will just help you find fast, modern, native packages that match your keywords.

34:01.000 --> 34:09.000
Basically, they've built up this repository and found all the ones that are already being built in a modern way that makes it easy for you to consume them in a modern way.

34:09.000 --> 34:24.000
But they've also got a whole bunch of tooling to support this so that, in theory, try to simplify what you're doing and enable you to support native modules and all the latest JavaScript stuff.

34:24.000 --> 34:32.000
I don't know what I think, because obviously the first question, besides the cute branding, which is kind of cute, yet another tool?

34:32.000 --> 34:35.000
Isn't that always something we have to be a little bit skeptical of?

34:35.000 --> 34:42.000
Yeah, I mean, in your opening to this, you mentioned Webpack, Babel, and I think two other things, right?

34:42.000 --> 34:48.000
The JavaScript ecosystem, particularly anything run by Node, it's just a lot of magic.

34:48.000 --> 34:54.000
I mean, we were talking about Rails before. There's so much more magic here.

34:54.000 --> 34:58.000
I don't know how I feel about this.

34:58.000 --> 35:05.000
I don't like it when I do a large amount of JavaScript and then I pull in some old package and I have to accommodate all the old terribleness.

35:05.000 --> 35:10.000
Yeah, so this does seem like it, in theory, can try to help do that.

35:10.000 --> 35:13.000
It wouldn't allow you to pull in that package, right?

35:13.000 --> 35:16.000
So that package would not surface on Pica, is my understanding.

35:16.000 --> 35:22.000
Yeah, but it does look like they've got a whole bunch of plugins and various interfaces to help you.

35:22.000 --> 35:29.000
You can package to support those things, but it looks like you could also maybe help import some other packages and modernize them.

35:29.000 --> 35:36.000
But they've got a whole bunch of stuff. They even support, interestingly, they even support BuckleScript and ReasonML.

35:36.000 --> 35:41.000
They've got a TypeScript thing, of course. It's interesting.

35:41.000 --> 35:45.000
So let me take this on a curveball for you, Wes.

35:45.000 --> 35:51.000
You like ClosureScript, right? You're kind of more of a functional, mathy kind of programmer than I am.

35:51.000 --> 35:54.000
Indeed.

35:54.000 --> 36:00.000
How does this not all just seem like an abomination to you in the JavaScript world?

36:00.000 --> 36:09.000
I mean, parts of it does. I mean, ClosureScript obviously exists because of the fact that transpiling is so well supported.

36:09.000 --> 36:17.000
It would be hard to exist as the only language that worked that way, probably, just in terms of development tooling.

36:17.000 --> 36:26.000
Chrome ships stuff so that if you have source maps for ClosureScript, it shows up and gets syntax highlighting all that right in Chrome.

36:26.000 --> 36:30.000
So that's really nice.

36:30.000 --> 36:36.000
JavaScript, ECMAScript, you're right. It's getting a lot better. It's come a long way.

36:36.000 --> 36:40.000
The part that feels like a mess. I think it's honestly really reasonable.

36:40.000 --> 36:47.000
And if you can find the right documentation, learn just the modern stuff, it's actually pretty reasonable, right?

36:47.000 --> 36:55.000
It feels like almost a sane language. But having watched it happen, I don't know if it's ever going to really –

36:55.000 --> 37:00.000
I think practically it'll be fine for as long as it hangs around, which is going to be just forever.

37:00.000 --> 37:02.000
Forever, right.

37:02.000 --> 37:07.000
But I don't think it'll ever escape the cruft of its weird history.

37:07.000 --> 37:11.000
So does JavaScript need to – so this is where I want to take this.

37:11.000 --> 37:15.000
And credit to the Pika team. I think this is actually a great tool. I will probably try this out.

37:15.000 --> 37:17.000
Yeah, I'm definitely going to try it, dude.

37:17.000 --> 37:25.000
Because I hate when I import old libraries and I get trapped into nightmare land, as I call it.

37:25.000 --> 37:30.000
Maybe the answer isn't that JavaScript the language escapes. Maybe it's that WebAssembly just wins.

37:30.000 --> 37:34.000
And I know DHH, and we covered it a few weeks ago, doesn't like this idea.

37:34.000 --> 37:41.000
But you know what, Wes? If you like to write in Swift, which I know – or Ruby.

37:41.000 --> 37:44.000
I know you're a Professor Ruby lover today.

37:44.000 --> 37:51.000
And I like to write in Objective-C. Maybe not Objective-C. Nobody loves Objective-C anymore, except for me.

37:51.000 --> 37:53.000
But let's say Ruby.

37:53.000 --> 37:56.000
What about your dream? What if you could write in C sharp?

37:56.000 --> 37:59.000
Oh, my dream. Or F sharp, even, if I remember.

37:59.000 --> 38:01.000
Oh, yeah.

38:01.000 --> 38:09.000
Both compile to WebAssembly. It seems that you could pull in my little library as a binary, right?

38:09.000 --> 38:13.000
Just pull it in as a statically compiled WebAssembly library.

38:13.000 --> 38:15.000
Or I could pull in yours and we're happy.

38:15.000 --> 38:19.000
And everybody gets to work in the tool chain that they're most comfortable with.

38:19.000 --> 38:24.000
If you're a Windows guy and you want to work in C sharp, God bless you. Just compile to WebAssembly.

38:24.000 --> 38:36.000
I mean, we talked about Project Uno that does this, Avalonia does this, in terms of re-implementing XAML and the.NET UWP stack into WebAssembly for web development.

38:36.000 --> 38:44.000
Maybe my whole point – which I realize I'm meandering – my whole point is, maybe it's less, is JavaScript going to evolve out of its legacy?

38:44.000 --> 38:49.000
Because we're talking – we're back in the 90s here, so I kind of don't think it's going to happen.

38:49.000 --> 38:55.000
Maybe the answer is that you code the way you want to code, and we just target WebAssembly.

38:55.000 --> 38:58.000
So if you're a.NET shop, you code in C sharp and F sharp.

38:58.000 --> 39:06.000
If you're a Ruby shop, you code in Ruby and horrible CoffeeScript, and we all end up in WebAssembly on the front end.

39:06.000 --> 39:10.000
I mean, that doesn't seem unreasonable to me just because it's kind of what we're doing now, right?

39:10.000 --> 39:11.000
I mean, we've just done that with JavaScript.

39:11.000 --> 39:13.000
It seems like what's starting to happen, yeah.

39:13.000 --> 39:20.000
It's just that we've been limited somewhat by the types of languages that could run with any sort of advantage being transpiled to JavaScript,

39:20.000 --> 39:23.000
whereas WebAssembly, we're rethinking that a little bit and saying –

39:23.000 --> 39:25.000
We're not transpiling anymore, right?

39:25.000 --> 39:26.000
That's the big difference.

39:26.000 --> 39:29.000
Well, but I mean, sure, we're just compiling in one sense, right?

39:29.000 --> 39:38.000
We're just changing from running as JavaScript to having a different execution engine, notably one without a GC.

39:38.000 --> 39:41.000
Right, so this is how – this is the big thing about WebAssembly, though, right?

39:41.000 --> 39:50.000
If you're an optimist like me, you believe that WebAssembly is basically going to become, for all intents and purposes, real assembly.

39:50.000 --> 39:55.000
It's like whether you compile C++ or Objective-C into assembly in native code, you're good to go.

39:55.000 --> 39:58.000
Right now, I know that's not technically true.

39:58.000 --> 40:10.000
I think that's – in fact, on the show, I could do a better job of putting it in the show notes that we should be covering not what API changed in JavaScript,

40:10.000 --> 40:19.000
but how close is WebAssembly and how differently the different browser and engines support it that it's coming to that ideal –

40:19.000 --> 40:29.000
again, this is opinion, what I believe is the ideal – of it effectively, if not in actual practice, being literal native assembly.

40:29.000 --> 40:32.000
So does that not bring back some problems?

40:32.000 --> 40:34.000
At least when we're all doing JavaScript, there's some –

40:34.000 --> 40:35.000
It's ActiveX.

40:35.000 --> 40:42.000
Yeah, well, yeah, so there's that. There's the, like, oh, gosh, now it's even more obscured binary things running from some stranger on the internet.

40:42.000 --> 40:47.000
But it also makes me think, like, at least when you're running as JavaScript, the base is JavaScript, and that's a pretty high base,

40:47.000 --> 40:49.000
which is obviously bad for many things, right?

40:49.000 --> 40:55.000
That's why we don't have – you can do all these cool, exciting stuff with game engines in the browser and in WebAssembly,

40:55.000 --> 40:57.000
but it means, like, sharing data.

40:57.000 --> 41:02.000
You don't have to, like, make up weird binary calling conventions or go through all that, right?

41:02.000 --> 41:06.000
In the WebAssembly world, you could have things that maybe can't interrupt,

41:06.000 --> 41:12.000
or interrupt is harder because you have some crazy functional high-level thing trying to interact with something from a totally different world.

41:12.000 --> 41:13.000
But we already have that.

41:13.000 --> 41:14.000
Yeah, do we want that again?

41:14.000 --> 41:15.000
Sure, we already have –

41:15.000 --> 41:19.000
Because right now, like you said, I could pull in your JavaScript thing, and even if it's super weird,

41:19.000 --> 41:24.000
since it is using JavaScript data structures at the end of the day, I can use them.

41:24.000 --> 41:28.000
Right, it'll just make your code maybe be non-standard for your style in terms of –

41:28.000 --> 41:29.000
Right.

41:29.000 --> 41:33.000
Right, the whole problem with JavaScript is, you know, I don't remember what year this was,

41:33.000 --> 41:38.000
and I know you know those books, I'm sure we've both read it, JavaScript the Good Parts versus JavaScript, right?

41:38.000 --> 41:39.000
Yes, right.

41:39.000 --> 41:45.000
One was real small, one was real big, and that's the problem.

41:45.000 --> 41:50.000
But, I mean, to your point about higher languages and lower languages and different paradigms,

41:50.000 --> 41:53.000
I mean, I literally call Rust from Ruby now.

41:53.000 --> 41:57.000
I call C++ and C from Ruby all the time.

41:57.000 --> 42:05.000
You know, people are doing that same thing in Python, that same thing in Java, right?

42:05.000 --> 42:06.000
Certainly, yeah.

42:06.000 --> 42:10.000
No, I mean, it's useful, it's needed, but it's kind of always a pain.

42:10.000 --> 42:15.000
Yeah, but FFI exists, and I know we're going deep into the nerdy stuff here, but like –

42:15.000 --> 42:17.000
Foreign Function Interface.

42:17.000 --> 42:20.000
Exactly. Why can't there be an FFI for WebAssembly?

42:20.000 --> 42:22.000
And I believe there already are.

42:22.000 --> 42:24.000
Oh, is there really? See, I didn't even know.

42:24.000 --> 42:27.000
We're working on this, so it's certainly going to be a soft problem.

42:27.000 --> 42:30.000
It just makes me think like we are – it's not a bad thing.

42:30.000 --> 42:36.000
It's just questions to ask as we go down this road of further reinventing the whole world in the web browser.

42:36.000 --> 42:41.000
So I think the scarier part is, what if one browser vendor ends up being able to take control of this?

42:41.000 --> 42:42.000
Yes, right.

42:42.000 --> 42:46.000
And we've already seen that happen in spaces like – particularly with Chrome.

42:46.000 --> 42:47.000
Right.

42:47.000 --> 42:53.000
I basically code to – well, actually, I say I code to WebKit, I really code to Firefox, which is not WebKit.

42:53.000 --> 42:56.000
But most of – yeah, I actually think that most –

42:56.000 --> 42:57.000
You are – I love it.

42:57.000 --> 42:59.000
You know what? I think Mozilla is the best tech to learn this vision.

42:59.000 --> 43:01.000
Resist from the inside.

43:01.000 --> 43:05.000
Resistance is futile, but I'm going down hard, like my good friend, Jean-Luc.

43:05.000 --> 43:07.000
Nothing bad happened to Jean-Luc, right?

43:07.000 --> 43:09.000
No, no, never.

43:09.000 --> 43:11.000
The cutest? Nothing? Okay.

43:11.000 --> 43:14.000
I think he learned a lot from that experience.

43:14.000 --> 43:18.000
You know what? I'm sure he did.

43:18.000 --> 43:21.000
Maybe not things you want to learn.

43:21.000 --> 43:32.000
But I do worry about the Chrome – what's the right word? Like hegemony, right?

43:32.000 --> 43:34.000
Let's put our old man hats on, Wes.

43:34.000 --> 43:35.000
Do you remember –

43:35.000 --> 43:36.000
Mine's already on. Don't worry.

43:36.000 --> 43:39.000
Okay. It's always on.

43:39.000 --> 43:44.000
Getting specs that say must run target platform IE6.

43:44.000 --> 43:47.000
Oh, yes. Why are you reminding me of this?

43:47.000 --> 43:52.000
Well, I know, and then I might start to cry, so we're going to do this real fast.

43:52.000 --> 43:55.000
I'm getting the same things for Chrome now.

43:55.000 --> 43:57.000
Yeah, yeah, absolutely.

43:57.000 --> 44:03.000
I mean, part of that is you just don't move, and it's nice to have one supported platform from the end user's perspective anyway.

44:03.000 --> 44:06.000
Yeah, I think everybody shoots Firefox and DuckDuckGo, to be honest with you.

44:06.000 --> 44:10.000
But that's a whole different argument.

44:10.000 --> 44:15.000
Right. So to bring it back a little bit, your worry is that Chrome in particular,

44:15.000 --> 44:19.000
but any browser steps away from it and becomes – you have enough non-standard features.

44:19.000 --> 44:27.000
However, it goes down that they become the runtime, and it's not a glorious WebAssembly future where it really is portable and you can run wherever.

44:27.000 --> 44:30.000
Instead, it's just this one platform.

44:30.000 --> 44:40.000
So my whole dream of WebAssembly is the lie that I was told in the 90s about Java being run everywhere might actually now be true.

44:40.000 --> 44:41.000
Yeah.

44:41.000 --> 44:44.000
Or it has the potential to become true within the next five to ten years.

44:44.000 --> 44:48.000
Yeah, we've already seen tools to write little WebAssembly things to run on the command line.

44:48.000 --> 44:52.000
Yeah, exactly.

44:52.000 --> 44:55.000
Wow, people really don't like it when you mention IE.

44:55.000 --> 44:57.000
Yay, chat room.

44:57.000 --> 44:58.000
So that's all I've got, Wes.

44:58.000 --> 45:02.000
That was my Mozilla sermon for the day.

45:02.000 --> 45:03.000
No, I like it.

45:03.000 --> 45:09.000
I mean, as a fellow frequent Firefox user, I'm glad they're saying relevant.

45:09.000 --> 45:15.000
Actually, they've got some of the best write-ups on WebAssembly, I think, out of anyone out there, and they've done a lot of good work, right?

45:15.000 --> 45:18.000
They've done ASM.js stuff for a long time.

45:18.000 --> 45:19.000
Oh, sure, yeah.

45:19.000 --> 45:20.000
To have their hands deep in the stuff.

45:20.000 --> 45:21.000
Rust?

45:21.000 --> 45:23.000
Yeah, yeah, exactly.

45:23.000 --> 45:32.000
In fact, we didn't cover it today, but you shared in our Slack Mozilla's article about writing browser components in Rust.

45:32.000 --> 45:33.000
That is the underlying theme.

45:33.000 --> 45:34.000
We haven't mentioned it, right?

45:34.000 --> 45:44.000
The other part, too, is I saw an interesting case study for Rust of the NPM people rewriting parts of it in Rust, using FFI to make NPM faster where JavaScript was too slow.

45:44.000 --> 45:45.000
You know what?

45:45.000 --> 45:46.000
I am a Rust convert.

45:46.000 --> 45:58.000
I have been quietly the last few weeks, whatever I mentioned the first time, it's probably been over a month now, doing really annoying functional data things in Rust, and it has made my life better.

45:58.000 --> 46:03.000
Okay, we're going to have to talk about that in an upcoming episode, because now that we're just wrapping up for the day,

46:03.000 --> 46:07.000
you've piqued my interest, functional Rust data, what's happening, Mike?

46:07.000 --> 46:09.000
And why didn't you tell me this at the top of the show?

46:09.000 --> 46:13.000
Yeah, well, because we're going to do a Rust show, if not next week, then the following week.

46:13.000 --> 46:17.000
We have to wait for Chris to be here so we can all hear him snoring.

46:17.000 --> 46:20.000
I think I'll take snoring over burping.

46:20.000 --> 46:23.000
In any case, let's get out of here and start working on next week's episode.

46:23.000 --> 46:24.000
Let's plan it.

46:24.000 --> 46:26.000
Thank you all for joining us.

46:26.000 --> 46:29.000
If you'd like more Coder Radio, just go to coder.show.

46:29.000 --> 46:35.000
Or check out all the other fine Jupiter Broadcasting programs at JupiterBroadcasting.com.

46:35.000 --> 46:40.000
We've got some pretty exciting study groups coming up, so if you want to learn more about Kubernetes or Ansible,

46:40.000 --> 46:47.000
and I think you might, go to Jupiter Broadcasting's meetup page, meetup.com slash Jupiter Broadcasting.

46:47.000 --> 46:53.000
You'll also find all the local events and conferences that we're going to go to, and there might just be one near you.

46:53.000 --> 46:55.000
You can also find us on Twitter.

46:55.000 --> 46:57.000
The whole network is at Jupiter Signal.

46:57.000 --> 47:01.000
I'm at Wes Payne, and Mike's at Dimenuco.

47:01.000 --> 47:28.000
Thank you all for joining us. We'll see you next week.


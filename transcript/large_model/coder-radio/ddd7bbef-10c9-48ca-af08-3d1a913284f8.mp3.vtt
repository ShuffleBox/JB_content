WEBVTT

00:00.000 --> 00:07.000
This is Koda Radio, episode 341 for January 22, 2019.

00:30.000 --> 00:37.080
Hello, and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes

00:37.080 --> 00:44.280
a pragmatic, or so we like to think, look at the art and business of software development.

00:44.280 --> 00:48.480
Chris is away again this week, but don't worry, I'm back, and I'm of course lucky

00:48.480 --> 00:54.880
to be joined with the incredible, the mad botter himself, Mr. Michael Dominic.

00:54.880 --> 00:55.880
Welcome Mike.

00:55.880 --> 01:00.160
Hello, Mr. Payne, you know, if we keep this up, people will start talking.

01:00.160 --> 01:03.520
Oh, they might already be.

01:03.520 --> 01:04.520
Fake names, yeah.

01:04.520 --> 01:05.800
Oh, you're not, you're not doing that?

01:05.800 --> 01:07.360
That's just for safety's sake, Mike.

01:07.360 --> 01:11.400
Oh, that's a, well, hey, did you see the NSA charger at SchmooCon?

01:11.400 --> 01:12.960
Yes, what is happening?

01:12.960 --> 01:15.840
I wonder how many people actually used that.

01:15.840 --> 01:19.800
Actually, the biggest troll would be if it really wasn't like a rootkit, if it was just

01:19.800 --> 01:20.800
like actually a charger.

01:20.800 --> 01:24.360
Yeah, they're like, man, we all, we all got phones, people gotta charge, we're trying

01:24.360 --> 01:26.240
to help a brother out.

01:26.240 --> 01:28.480
It's like, guys, we're recruiting, why would we screw with you?

01:28.480 --> 01:32.600
Yeah, we want the smart people, which, you know, is true, as long as you can pass those

01:32.600 --> 01:33.600
government drug tests.

01:33.600 --> 01:35.680
Automatic disqualification if you plug in your phone.

01:35.680 --> 01:38.720
Right, yeah, no, please, please don't talk to us ever again.

01:38.720 --> 01:39.720
Get out of here.

01:39.720 --> 01:40.720
Yeah.

01:40.720 --> 01:44.160
And we know everything already because, you know, you just plugged in your whole life.

01:44.160 --> 01:49.560
Oh, yes, and I guess really speaking about plugging in your whole life, last time I was

01:49.560 --> 01:55.840
here and chatting with you, Mr. Mike, we talked a bit about the painfulness of USB-C and that's

01:55.840 --> 01:58.920
kind of been a common topic on the show.

01:58.920 --> 02:01.240
Sounds like you got some feedback about it.

02:01.240 --> 02:09.720
Yeah, so the USB-C I'm talking about in particular is the 2018 iPad Pro, obviously has USB-C

02:09.720 --> 02:15.480
port and it is theoretically possible that you could basically treat it like any other

02:15.480 --> 02:18.680
port, right?

02:18.680 --> 02:20.440
And I actually did my job this time, Wes.

02:20.440 --> 02:25.600
I tried to get confirmation from Apple's developer line and believe it or not, I actually got

02:25.600 --> 02:26.600
someone on the phone.

02:26.600 --> 02:29.440
Wait, no, you talked to a human freaking being over there?

02:29.440 --> 02:31.480
Well, I can't prove they weren't a Cylon.

02:31.480 --> 02:35.080
Well, no, sure, I mean, I don't expect you to be able to, but they approximated it.

02:35.080 --> 02:37.200
They passed your test.

02:37.200 --> 02:45.320
Yes, and the answer was, of course, not helpful, is what I did there for a second.

02:45.320 --> 02:46.320
What are you doing to me, man?

02:46.320 --> 02:47.320
What are you doing?

02:47.320 --> 02:48.960
I was so excited.

02:48.960 --> 02:53.480
Well, it's interesting, though, you certainly can use the USB port and these are the so

02:53.480 --> 02:55.920
far things that we've thought.

02:55.920 --> 03:00.060
You know, and people, if you've never done an iOS development, it is theoretically possible

03:00.060 --> 03:03.800
to email or call Apple, but they will never like pre-approve something.

03:03.800 --> 03:09.080
Like, so the case I gave them is I want to use an iPad, plug it into a Raspberry Pi and

03:09.080 --> 03:11.040
flash the Raspberry Pi from the iPad.

03:11.040 --> 03:12.960
I want to make like a little graphical app to do that, right?

03:12.960 --> 03:14.440
Oh, that would be, that's a great idea.

03:14.440 --> 03:18.640
Yeah, so anybody wants to steal that, you'll get it done faster than me.

03:18.640 --> 03:24.200
And I told the rep that and it was kind of, eh, maybe, try, sounds cool, but you know,

03:24.200 --> 03:25.200
can't promise anything.

03:25.200 --> 03:29.680
So, they're not saying outright, no, absolutely not, they're saying, well, you're just going

03:29.680 --> 03:30.680
to have to see.

03:30.680 --> 03:31.680
Wow, that's useless.

03:31.680 --> 03:37.120
Yeah, and I've called them a few times over the course of the show and it's kind of like,

03:37.120 --> 03:44.440
I think they only actually said no once because it was, oh, it was something, long-term listeners

03:44.440 --> 03:50.080
will know, there's something I wanted to do with the in-app subscription thing that wasn't

03:50.080 --> 03:54.000
at the time allowed, but ironically now is allowed.

03:54.000 --> 03:59.280
So it was, I wanted to do in-app purchases and make them be a subscription before there

03:59.280 --> 04:00.280
were subscriptions.

04:00.280 --> 04:04.840
So like, basically every month, just like trigger something to ask you to do an in-app

04:04.840 --> 04:05.840
purchase.

04:05.840 --> 04:09.520
Oh, I see, so that was just going to be like, hey, yeah, please support us again.

04:09.520 --> 04:11.760
That, you can't do that.

04:11.760 --> 04:14.840
Now you can because obviously they have subscriptions, but so, I don't know.

04:14.840 --> 04:22.320
I mean, I got a lot of feedback, half of the people saying, well, there was really thirds,

04:22.320 --> 04:27.640
one third saying, put down the Mac before you break it, which I mean, fair criticism.

04:27.640 --> 04:32.120
That is a great point and please be careful, we just, I fear for anything, any device that

04:32.120 --> 04:33.520
enters into your home.

04:33.520 --> 04:42.440
Well, I'm now using my old Dell Optiplex because it's a desktop and my Thaleo is, oh, don't

04:42.440 --> 04:43.440
say that.

04:43.440 --> 04:44.440
Don't say that.

04:44.440 --> 04:45.440
Please don't say that.

04:45.440 --> 04:51.960
My Thaleo is on its way, but I am putting the Thaleo in carbonite like Han Solo, just

04:51.960 --> 04:53.440
nice shielding.

04:53.440 --> 04:55.440
That way you can't appreciate its beautiful design.

04:55.440 --> 04:58.080
Yeah, I know, but I would destroy it.

04:58.080 --> 05:01.920
Yeah, it's better for the beautiful wood veneer that you just keep it as far away as possible.

05:01.920 --> 05:05.080
Maybe if you could put it sort of behind the wall just with the cables coming out, that

05:05.080 --> 05:06.080
might be the best.

05:06.080 --> 05:09.960
Well, actually, if my desk, and this is way inside baseball, is one of those two level

05:09.960 --> 05:13.320
desks, it's like an old antique style, so I'm just going to put it on the higher level.

05:13.320 --> 05:17.480
So if I do spill something, I only destroy my mouse and keyboard.

05:17.480 --> 05:18.480
Good idea.

05:18.480 --> 05:19.480
Yeah.

05:19.480 --> 05:26.680
So the USB-C thing is kind of, we don't really have an answer here.

05:26.680 --> 05:32.680
There are certain documented things in the docs I shared about three weeks ago, maybe,

05:32.680 --> 05:35.480
maybe three weeks ago, that you certainly can do, right?

05:35.480 --> 05:42.080
Integrate with the photos app on the device, and there's a bunch of stuff, music, movies,

05:42.080 --> 05:47.200
whatever, as well as the onboard file system, but not the real file system, the little files

05:47.200 --> 05:49.800
app.

05:49.800 --> 05:52.560
So I can't say yes or no.

05:52.560 --> 06:00.040
People writing and asking, give it a shot, but don't invest your life savings, because

06:00.040 --> 06:03.760
you could get rejected, right?

06:03.760 --> 06:10.200
My suspicion, Wes, is that in the next major bump of iOS, so like 13, there is going to

06:10.200 --> 06:14.640
be expanded functionality as the other devices get USB-C, because the other challenge you

06:14.640 --> 06:18.440
would have if you did something like what I'm describing, which I just thought of and

06:18.440 --> 06:22.560
probably the reason the guy didn't give me a straight answer, your app can't just run

06:22.560 --> 06:25.320
on one version of the iPad.

06:25.320 --> 06:31.580
So you would have to have another mechanism for this to work on non-USB-C iPads, and to

06:31.580 --> 06:34.920
integrate with the Lightning port, you have to actually pay a licensing fee.

06:34.920 --> 06:37.360
Right, yeah, there's a whole kit and caboodle that goes around that.

06:37.360 --> 06:38.360
Wow.

06:38.360 --> 06:39.360
So never mind this.

06:39.360 --> 06:40.360
It's just a bad idea.

06:40.360 --> 06:41.360
Yeah.

06:41.360 --> 06:45.720
Or the time will come, and of course, in typical Apple fashion, you don't get access to everything

06:45.720 --> 06:46.720
out the gate.

06:46.720 --> 06:49.920
You just piecemeal it, slowly add as there's enough demand, and they add it the way they

06:49.920 --> 06:54.680
want to have it, seen it done, and conforms to their standards.

06:54.680 --> 06:57.400
And really, I guess they just get away with it, right, because they're the place to be.

06:57.400 --> 07:00.400
They've got the market, they've got the users, so you've got to play ball.

07:00.400 --> 07:02.520
Well, and they have the best tablet on the market right now.

07:02.520 --> 07:06.040
And they have the only tablet worth buying.

07:06.040 --> 07:09.440
Till System76 launches a tablet.

07:09.440 --> 07:10.440
Fake rumors started here.

07:10.440 --> 07:13.000
Oh, stop doing this to me.

07:13.000 --> 07:17.640
This whole episode so far has been you making up, teasing things that I assume won't happen

07:17.640 --> 07:19.720
in any reasonable time frame.

07:19.720 --> 07:21.760
Speaking of teasing, I'm getting tired, Wes.

07:21.760 --> 07:24.840
I can't do all these deployments and builds manually.

07:24.840 --> 07:26.680
Do you have a way I could automate that?

07:26.680 --> 07:31.060
Well, actually, there's been a lot of talk around some of the community about some tools

07:31.060 --> 07:32.060
to do just that.

07:32.060 --> 07:34.520
And one of them is Jenkins.

07:34.520 --> 07:37.960
And it kind of brought up a topic for me in general, too, that I'm sort of curious about

07:37.960 --> 07:38.960
what happens in your world.

07:38.960 --> 07:40.920
You were just talking about, there's a lot of things to do.

07:40.920 --> 07:44.920
There's deployments, there's testing to be run, there's all sorts of integrations to

07:44.920 --> 07:46.560
do and other sorts of configuration.

07:46.560 --> 07:50.320
And just, you know, there's cron jobs, there's services to be run.

07:50.320 --> 07:52.000
Jenkins can do all of that, right?

07:52.000 --> 07:55.880
That's one thing that's pretty nice about it, but it doesn't have to do all of that.

07:55.880 --> 07:59.080
I'm wondering, like, what do you use for your own work?

07:59.080 --> 08:02.280
Are you someone who runs their own CI system and their own deployment stuff?

08:02.280 --> 08:07.120
Do you just rely on the tools provided by whatever integrating and partners you have?

08:07.120 --> 08:09.120
I don't do a lot of CI.

08:09.120 --> 08:11.840
I tend to, I used to use Jenkins when I used to do JotSpring.

08:11.840 --> 08:15.040
You don't have to be bashful about it.

08:15.040 --> 08:17.640
You can come out and be you, Mike.

08:17.640 --> 08:19.680
I'm going to come out of the closet.

08:19.680 --> 08:21.680
I am not huge into the automation.

08:21.680 --> 08:30.840
The thing I do do is, do do, Docker and DoKu with some very light webhooks into GitLab.

08:30.840 --> 08:34.680
Beyond that, it's one of the things I just don't do too much.

08:34.680 --> 08:35.680
I'm pretty manual.

08:35.680 --> 08:39.800
If something needs to be deployed, I also don't do a lot of automated testing is why

08:39.800 --> 08:40.800
I don't do a lot of CI.

08:40.800 --> 08:41.800
Oh, yeah.

08:41.800 --> 08:42.800
Right.

08:42.800 --> 08:43.800
You don't have to test it.

08:43.800 --> 08:44.800
I heard it.

08:44.800 --> 08:47.000
I felt the judgment.

08:47.000 --> 08:52.040
But you've lived another life where you have used this gremlin of ours, Mr. Jenkins, right?

08:52.040 --> 08:55.160
Yeah, I was once required to.

08:55.160 --> 08:58.040
It actually, but I hear it's a whole different world now.

08:58.040 --> 09:01.600
We're going back probably four and a half years, the last time I used it.

09:01.600 --> 09:02.600
Yeah.

09:02.600 --> 09:05.900
We're going back at 2011.

09:05.900 --> 09:07.200
That's when the name change happened.

09:07.200 --> 09:12.560
That's when there was all this drama about Oracle's fork and Hudson became Jenkins.

09:12.560 --> 09:13.720
It feels like a long time ago.

09:13.720 --> 09:18.640
I mean, it's not really, I suppose, eight years now, and it's surprising both what's

09:18.640 --> 09:22.440
changed and really, really what's stayed the same.

09:22.440 --> 09:23.440
I think you'd be surprised.

09:23.440 --> 09:24.560
So, yes, there are.

09:24.560 --> 09:25.620
There's some new things.

09:25.620 --> 09:27.080
There's Jenkins X.

09:27.080 --> 09:30.880
They've also got this blue ocean interface.

09:30.880 --> 09:31.880
Those are relevant.

09:31.880 --> 09:32.880
We'll talk about them.

09:32.880 --> 09:37.300
But overall, I think if you logged into a newly stood up Jenkins server, sure, it might

09:37.300 --> 09:44.040
be running on Kubernetes today, but I think it would look probably identical.

09:44.040 --> 09:45.160
So what's the big change then?

09:45.160 --> 09:47.840
I mean, it's been about four years.

09:47.840 --> 09:49.960
What would be new to me coming to it?

09:49.960 --> 09:51.000
Well, okay.

09:51.000 --> 09:52.760
Probably what would be new to you.

09:52.760 --> 09:53.760
There would be small things.

09:53.760 --> 09:57.520
There'd be lots of different plugins, different plugin updates, things like that.

09:57.520 --> 10:00.600
And I think one of the things that's caused a lot of pain for people is not that it's

10:00.600 --> 10:01.600
useful.

10:01.600 --> 10:05.280
It's just that things keep changing and it doesn't feel finished.

10:05.280 --> 10:09.080
So one of the things people really like about CI systems is building pipelines.

10:09.080 --> 10:10.080
Yeah.

10:10.080 --> 10:11.080
Yeah.

10:11.080 --> 10:12.080
Also, it's called Jenkins now.

10:12.080 --> 10:13.080
So there you go.

10:13.080 --> 10:16.280
But people like to build pipelines so that you can, you know, you have things usually

10:16.280 --> 10:19.080
driven by automation, but it doesn't have to necessarily be, it could be a human kicking

10:19.080 --> 10:20.080
it off.

10:20.080 --> 10:24.720
You start something, it pulls some code from Git, does some build steps, maybe does tests,

10:24.720 --> 10:28.280
maybe does a test deployment and spins up some test infrastructure to go run further

10:28.280 --> 10:32.160
tests or to leave it there for downstream applications to test against.

10:32.160 --> 10:34.080
You have all these options and you don't want to have to do it.

10:34.080 --> 10:35.080
Sure.

10:35.080 --> 10:36.080
You can write a bash script.

10:36.080 --> 10:40.120
That's, that's one way to do it, but that's pretty painful.

10:40.120 --> 10:44.040
And so there's been these promise of various different pipeline syntax.

10:44.040 --> 10:48.220
One version of it, it's basically just sort of groovy, like a groovy DSL with some handy

10:48.220 --> 10:49.920
functions already implemented for you.

10:49.920 --> 10:54.080
So you can sort of define how stuff runs and on which agents or is it, you know, is it,

10:54.080 --> 10:55.380
is it thread safe or not?

10:55.380 --> 10:58.080
All those little nitty gritty details that you don't want to think about, but sometimes

10:58.080 --> 11:03.500
you have to, if you have complicated stateful testing to do, but even that hasn't really

11:03.500 --> 11:04.660
stayed the same.

11:04.660 --> 11:07.620
It keeps kind of changing and they'll have, you'll have one sort of really declarative

11:07.620 --> 11:12.200
style of syntax, or you'll have another one that is more imperative and kind of, you have

11:12.200 --> 11:16.040
to walk through exactly every single step that you want to do.

11:16.040 --> 11:19.360
And it's kind of become at least, at least in the organizations I've seen, it's something

11:19.360 --> 11:23.300
of a black art where you've got maybe a couple of experienced DevOps people.

11:23.300 --> 11:27.480
You've got the, or the senior developer who's written enough Jenkins files over the years

11:27.480 --> 11:31.540
that they just can do it on, you know, sit down and bang one out because the documentation

11:31.540 --> 11:34.700
is missing in a lot of cases or it's just outdated.

11:34.700 --> 11:36.640
So you don't really know, is this the right syntax?

11:36.640 --> 11:40.840
And once you've got this, you know, you've probably got it defined in, in Git somewhere,

11:40.840 --> 11:41.840
which is nice, right?

11:41.840 --> 11:46.020
So the basic promise of having a Jenkins file that sits there and you can keep all of your

11:46.020 --> 11:50.600
sort of CI and testing stuff right there in your same code repository, that is really

11:50.600 --> 11:51.600
nice to have.

11:51.600 --> 11:56.180
But it also like you get in this kind of painful process of, oh no, that wasn't quite the syntax

11:56.180 --> 11:57.180
it wanted.

11:57.180 --> 12:00.320
So I go over here, make a change to the Jenkins file, push it up, wait for Jenkins to go get

12:00.320 --> 12:04.860
the push or do a pull against the repo to see the change, pull it down again.

12:04.860 --> 12:06.760
Does it run this time?

12:06.760 --> 12:10.400
And when you can't be sure which exact version it's going to be or which the, what the syntax

12:10.400 --> 12:14.620
is or what's the best way to do this because there's a blog from four years ago that does

12:14.620 --> 12:18.800
it this way, but then a blog last year does it this way, but that gave me an error.

12:18.800 --> 12:21.000
I'm sure you've been in situations like that.

12:21.000 --> 12:22.000
Yeah.

12:22.000 --> 12:28.600
Yeah, this reminds me of any kind of automated deployment I've ever tried to do.

12:28.600 --> 12:34.800
So is it, now my understanding is, and this is again going back, it was a very graphical

12:34.800 --> 12:38.000
tool, right?

12:38.000 --> 12:39.900
Like there was a backend you could log into.

12:39.900 --> 12:40.900
So that's the other part.

12:40.900 --> 12:46.800
That's the other thing about Jenkins that can sometimes be pretty painful is it's all

12:46.800 --> 12:48.520
about automation, right?

12:48.520 --> 12:50.240
Or at least helping to automate things.

12:50.240 --> 12:52.220
That's what it ends up being used for.

12:52.220 --> 12:55.680
But the process of setting it up is frequently not.

12:55.680 --> 12:58.320
There are some pretty decent tools these days.

12:58.320 --> 13:02.840
There's some Ansible configurations, the Chef recipe for setting it up, I think has actually

13:02.840 --> 13:06.520
come a long way from when I first used it and is actually decent.

13:06.520 --> 13:11.120
And in particular, I think the Helm chart to run it on Kubernetes is nice.

13:11.120 --> 13:14.120
And if you do run it on Kubernetes, you get nice integrations too because you can obviously

13:14.120 --> 13:17.880
use Kubernetes as a place to go trigger run clean tests and stuff.

13:17.880 --> 13:20.120
So that's nice.

13:20.120 --> 13:24.200
But to get it actually to deploy automatically and have all of your state that you want to

13:24.200 --> 13:27.400
keep or the configuration you need, that is hard.

13:27.400 --> 13:32.960
Enter a whole world of Java application, getting familiar with the JVM if you're not already

13:32.960 --> 13:36.240
and all the XML that goes along with it.

13:36.240 --> 13:37.240
Yes.

13:37.240 --> 13:42.440
If you don't like XML, you're not going to like Java and Jenkins is Java.

13:42.440 --> 13:46.800
But it was Java before, I mean, you can write like a really clean Java application with

13:46.800 --> 13:49.120
a nice restful API and very modern.

13:49.120 --> 13:51.320
Oh no, you definitely can.

13:51.320 --> 13:56.040
This has been around long enough that those ideas hadn't quite become popular.

13:56.040 --> 14:01.600
I think it's actually older than Gradle, I'm not sure if that's correct, but somebody can

14:01.600 --> 14:02.600
check it in the chat room.

14:02.600 --> 14:07.760
I'm pretty sure Jenkins or its precursor, its old name is actually older than the original

14:07.760 --> 14:12.400
version of Gradle, which is scary to me.

14:12.400 --> 14:14.320
Yes, that is actually...

14:14.320 --> 14:19.240
So what is the advantage of going all in on Jenkins compared to, say, what my current

14:19.240 --> 14:26.080
workflow is, which is Docker on an open two server with running doku as well, and then

14:26.080 --> 14:28.200
in that container, I have all my...

14:28.200 --> 14:31.880
Let's just use Java or let's use Rails as an example, this is literally what I have

14:31.880 --> 14:32.880
in production.

14:32.880 --> 14:33.880
Excellent.

14:33.880 --> 14:36.840
Ruby on Rails, I have a Postgres container.

14:36.840 --> 14:40.360
In some cases, we have a Redis thing running, but let's ignore that because that complicates

14:40.360 --> 14:42.320
things.

14:42.320 --> 14:47.600
You do your coding, you push to your topic branch, we branch by person at the mad boner,

14:47.600 --> 14:50.080
and then you merge it into either dev stage or master branch.

14:50.080 --> 14:54.800
Each of those has obviously a Docker target where they're going to deploy to.

14:54.800 --> 15:01.680
So there's three digital ocean droplets, three servers per project.

15:01.680 --> 15:05.000
And obviously the automation in GitLab is once a pull request is merged into one of

15:05.000 --> 15:11.180
those relevant branches, we're using the GitLab pipelines, I believe is what GitLab calls

15:11.180 --> 15:13.760
them, or that might be what Bitbucket used to call them.

15:13.760 --> 15:17.160
But what I just realized, I am doing automated testing, I just forgot.

15:17.160 --> 15:18.160
Look at you.

15:18.160 --> 15:21.320
I'm just not the one who writes them, because that's what the pipelines are actually testing.

15:21.320 --> 15:23.120
You get to be the boss.

15:23.120 --> 15:24.120
Right.

15:24.120 --> 15:29.240
So if that passes, because GitLab will actually throw a flag and not allow the merge, but

15:29.240 --> 15:35.640
assuming it passes, assuming the merge goes through, it will push through a webhook automatically

15:35.640 --> 15:41.480
to the relevant DO droplet and do the doku deployment, which if you don't know doku for

15:41.480 --> 15:47.800
the audience, doku is basically a tool for Docker to make it work like Heroku, if you're

15:47.800 --> 15:50.640
familiar with Heroku, where you could just Git push to deploy.

15:50.640 --> 15:55.240
A Docker-powered platform as a service that helps you build and manage the life cycle

15:55.240 --> 15:56.840
of applications is their little banner.

15:56.840 --> 15:58.400
Yeah, and we can throw that in the notes too.

15:58.400 --> 16:03.680
So how is that different from what you can do with Jenkins, or is it just a different

16:03.680 --> 16:06.880
tool for a different, just for the same problem?

16:06.880 --> 16:08.720
It's a more modern tool.

16:08.720 --> 16:13.800
I think the thing about Jenkins is there's been a lot of development in how development

16:13.800 --> 16:16.480
happens in the time that Jenkins has been around.

16:16.480 --> 16:20.680
And one of the first things, right, was kind of the rise of TDD, of having rigorous testing

16:20.680 --> 16:25.120
of people being like, well, if we're going to ship this, it should have some tests.

16:25.120 --> 16:28.200
And especially unit tests, but just all sorts of testing.

16:28.200 --> 16:30.000
I think it started with unit tests in this case.

16:30.000 --> 16:31.520
But you needed somewhere to run them.

16:31.520 --> 16:34.120
I'm sure you could run them on your local machine, but then you get into the thing of,

16:34.120 --> 16:37.040
all right, you've got to teach everyone, and they've got to have enough, especially in

16:37.040 --> 16:40.840
the age before popularization of containers for development workflows.

16:40.840 --> 16:43.360
You've got to be able to set up everything on your local box.

16:43.360 --> 16:46.840
Maybe that's difficult, especially if people don't have ops experience.

16:46.840 --> 16:49.680
And then they've got to go wait for the test runner to happen on their machine before maybe

16:49.680 --> 16:55.520
they're allowed to go push it to the master branch, or whatever the CVS workflow is.

16:55.520 --> 16:56.520
That's pretty painful.

16:56.520 --> 16:59.720
So Jenkins exists as a place to go allow that to happen.

16:59.720 --> 17:02.760
So if you've got your near future branch, or your personal branch you want to go run

17:02.760 --> 17:07.000
tests on, you can push a change, it'll detect it, start triggering your tests, run all that,

17:07.000 --> 17:09.160
and you can go do something else as a developer.

17:09.160 --> 17:13.800
And that was at a time where there were other, there's been other projects to do that.

17:13.800 --> 17:21.640
But I think the rise both in enterprise Java development, and Jenkins filling that need,

17:21.640 --> 17:26.440
and being something friendly for people who are already doing and deploying Java applications.

17:26.440 --> 17:32.360
You already have the JVM production, you can copy that image and use it for tests too.

17:32.360 --> 17:34.800
So a lot of places just kind of got there, right?

17:34.800 --> 17:37.080
So they had Jenkins to do all their testing.

17:37.080 --> 17:40.960
Maybe they still had, you know, you built a final jar and handed it over the wall to

17:40.960 --> 17:45.280
the ops team, and then they would actually go push it to production.

17:45.280 --> 17:48.520
Over the years we've sort of, you know, we've pursued quote unquote DevOps, we've sort of

17:48.520 --> 17:51.820
merged these things, we've wanted more automation in that department, we're doing continuous

17:51.820 --> 17:53.820
deployment possibly.

17:53.820 --> 17:58.040
Because that advanced, Jenkins just kept growing features.

17:58.040 --> 18:00.440
And that's the thing, I think that's the thing that still stands out about it.

18:00.440 --> 18:05.560
I was looking at an article from an organization talking about like, in 2018, why on earth

18:05.560 --> 18:08.000
would we choose Jenkins?

18:08.000 --> 18:11.640
And you know, honestly, their arguments weren't necessarily persuasive to me, but it did lay

18:11.640 --> 18:15.880
out that like Jenkins has pretty much all the features that you want.

18:15.880 --> 18:21.040
So if you have people who are familiar, if you're already using it for something, there's

18:21.040 --> 18:23.800
a low barrier to entry to keep using it.

18:23.800 --> 18:29.800
I think what it doesn't answer is the question, if you don't have to, would you choose Jenkins

18:29.800 --> 18:30.800
today?

18:30.800 --> 18:33.040
Personally, I don't, I'm not sure that I would.

18:33.040 --> 18:36.600
Now, it is sort of the ultimate flexible tool.

18:36.600 --> 18:40.040
I mean, at least one step removed from, from just, you know, peer scripts or arbitrary

18:40.040 --> 18:41.880
applications and binaries.

18:41.880 --> 18:45.760
But it can be made to do just about whatever you want, especially with the wide array of

18:45.760 --> 18:47.360
plugins that exist.

18:47.360 --> 18:51.000
The flip side of that, well, now you're maintaining stateful plugins that have updates and changes

18:51.000 --> 18:52.000
to their stuff.

18:52.000 --> 18:54.800
So that's just a whole nother layer of, you know, dependency and version management to

18:54.800 --> 18:59.000
control and you're, you know, managing and running and running Jenkins.

18:59.000 --> 19:03.980
So you have this world where the enterprise has a lot of Jenkins servers out there.

19:03.980 --> 19:06.360
You have developers who are like, don't really want to change, they're just there to write

19:06.360 --> 19:10.760
new features that get shipped because sales told everyone that that's what needed to happen.

19:10.760 --> 19:12.840
They don't want to go learn a new CI system.

19:12.840 --> 19:17.040
And the flip side too, is I think Jenkins makes it pretty easy to get really hacky if

19:17.040 --> 19:21.400
you need to, if I, if I can use that language because you know, you do have a lot of ways

19:21.400 --> 19:22.400
out.

19:22.400 --> 19:23.400
You have, it's really easy to go do things.

19:23.400 --> 19:27.920
Maybe you shouldn't or aren't quite declarative, especially compared to some of the more modern

19:27.920 --> 19:31.240
CI systems that I think are started in the right way, but have, you know, maybe like

19:31.240 --> 19:33.680
it just a, a YAML syntax for you.

19:33.680 --> 19:37.480
Basically you can describe operations that they've defined as primitives and that's all

19:37.480 --> 19:40.280
you get.

19:40.280 --> 19:45.640
So I'm looking at the Jenkins site and there's two new things that I find pretty interesting.

19:45.640 --> 19:49.600
One I'm looking at Evergreen, which I'll throw in the show notes, which is an automatically

19:49.600 --> 19:53.000
rolling distribution for Jenkins.

19:53.000 --> 19:57.240
So is it no longer the practice to do like a big forklift upgrade when you have to upgrade

19:57.240 --> 20:01.880
Jenkins or is this something, is this where it's going, I guess, is it going towards being

20:01.880 --> 20:03.480
an Evergreen solution?

20:03.480 --> 20:05.920
Well, so I will, I will say this.

20:05.920 --> 20:09.720
I think there was a long time where Jenkins didn't get a ton of love.

20:09.720 --> 20:12.460
Now that's not, that's not no love.

20:12.460 --> 20:18.000
That's not no love, but in the past couple of years, probably starting in, I don't know,

20:18.000 --> 20:23.920
maybe 2006, as, as more and more things moved to the cloud, as, as CICD practices became

20:23.920 --> 20:27.000
more of the standard, they've sort of, they sort of caught onto that.

20:27.000 --> 20:30.360
So you did see, you've seen some approaches to maybe work on a new UI.

20:30.360 --> 20:32.400
It's not there yet.

20:32.400 --> 20:37.480
You've seen some more stuff like Jenkins X, which is kind of meant to be a cloud first

20:37.480 --> 20:43.120
containerized orchestrated world first tool and you see stuff like Evergreen where they're

20:43.120 --> 20:48.580
like, well, people probably want to have more ways to update this and at least have more

20:48.580 --> 20:53.680
up-to-date things, things that keep getting, you know, that update in clean automatic ways.

20:53.680 --> 20:57.900
I don't know if I would want to do it continuously or all the time, but it would probably be

20:57.900 --> 21:03.260
nice to have smaller updates more frequently as compared to the one big horrible every

21:03.260 --> 21:07.640
two year upgrade where no one really knows what's happening and testing is broken for

21:07.640 --> 21:08.640
a week.

21:08.640 --> 21:09.640
Yeah.

21:09.640 --> 21:10.640
I've used iOS long enough.

21:10.640 --> 21:11.640
I don't like updating.

21:11.640 --> 21:13.560
It scarred me for all other systems.

21:13.560 --> 21:15.000
So this is, this, that was a joke.

21:15.000 --> 21:18.500
This is all pretty, pretty interesting.

21:18.500 --> 21:22.640
How well has, see when I used it, it was pure Java spring, right?

21:22.640 --> 21:27.820
So it was like the most vanilla use case you could possibly think of other than Java EE.

21:27.820 --> 21:35.160
Has Jenkins managed to penetrate into other like types of developers?

21:35.160 --> 21:37.280
What do you mean by types of developers?

21:37.280 --> 21:38.560
So for instance, right?

21:38.560 --> 21:44.600
If you are a Ruby hipster, you probably are using actually like probably using like Capistrano,

21:44.600 --> 21:45.600
right?

21:45.600 --> 21:50.600
Cause that's a very Ruby that is just because I'm using Docker, I'm sure there are a lot

21:50.600 --> 21:54.480
of Ruby guys using Docker too, because I also write other languages and Docker basically

21:54.480 --> 21:57.440
works with everything.

21:57.440 --> 22:01.800
Is Jenkins more like a Docker where it's kind of platform agnostic and I say platform, I

22:01.800 --> 22:05.320
mean dev environment, not, you know, not like, right, right, right.

22:05.320 --> 22:06.320
Not, not OS, but yeah.

22:06.320 --> 22:07.320
Like yeah.

22:07.320 --> 22:08.320
Right.

22:08.320 --> 22:14.560
Or is it more like a Capistrano where, you know what, this is the, this is a Java solution.

22:14.560 --> 22:17.880
I guess it, I guess it is a Java solution cause you, you still have to.

22:17.880 --> 22:20.440
So let me take a step back.

22:20.440 --> 22:25.040
My experience with Jenkins is you have to like spin up a JVM, set up a server and actually

22:25.040 --> 22:30.560
do all of the, I'm running a Java web application on my server work.

22:30.560 --> 22:33.560
Have they managed to containerize that where I can just do like Docker pool?

22:33.560 --> 22:35.080
Yes, you can.

22:35.080 --> 22:38.000
And honestly that's probably the way I would recommend running it.

22:38.000 --> 22:44.520
I mean where it gets painful always is some of the more deep configurations, but in like

22:44.520 --> 22:48.400
the helm chart or the Docker image, they've got a lot of that sort of pulled out and extracted

22:48.400 --> 22:52.720
and honestly you'd probably end up end of the day, I would suggest maybe a workflow

22:52.720 --> 22:56.400
where like if you make changes in the UI, you've got a system in place to export all

22:56.400 --> 23:00.880
of the changed file systems on disk and then commit that immediately back to merchant control

23:00.880 --> 23:03.760
as the source of truth so that all, you know, all future deployments happen.

23:03.760 --> 23:05.800
A good tip.

23:05.800 --> 23:09.360
Cause otherwise it just gets to be a mess and having stuff like Docker can help you

23:09.360 --> 23:12.800
do that cause it makes you a little bit more aware of where you have state, right?

23:12.800 --> 23:15.320
It's not a VM with a real file system.

23:15.320 --> 23:18.060
It's a container with some attached storage that either lives somewhere that's easily

23:18.060 --> 23:23.200
backed up or is ephemeral.

23:23.200 --> 23:26.340
And so yeah, I would definitely say that's easy.

23:26.340 --> 23:30.360
So you don't have to, there's also stuff like I was saying, like Ansible or Chef Scripts

23:30.360 --> 23:33.760
to get it stood up if you are using more traditional infrastructure.

23:33.760 --> 23:37.520
And if you don't have to do anything complicated, like trying to get SSL installed in the Java

23:37.520 --> 23:41.240
key store itself, which is just always the world's most painful process, probably just

23:41.240 --> 23:46.600
use a NGINX proxy or something, you'll probably be fine and it works well enough.

23:46.600 --> 23:50.160
But as you were talking about earlier, you will have to keep going back to that UI, especially

23:50.160 --> 23:51.520
if you're a new user.

23:51.520 --> 23:54.360
And that's where it's still kind of unpleasant.

23:54.360 --> 23:58.680
So and this is a unsolicited plug, but if you did want to learn Jenkins and when you

23:58.680 --> 24:03.040
wanted to like take a Jenkins certification course, I think there's an academy that can

24:03.040 --> 24:04.040
help you.

24:04.040 --> 24:05.040
Yeah.

24:05.040 --> 24:06.040
Yeah.

24:06.040 --> 24:07.040
Linux Academy.

24:07.040 --> 24:09.200
Certified Jenkins in Jarrett 2018 by Michael McLaren.

24:09.200 --> 24:10.200
Boom.

24:10.200 --> 24:11.200
There you go.

24:11.200 --> 24:12.200
That's a great place.

24:12.200 --> 24:14.640
And so that's, that's another reason that you might want to use Jenkins.

24:14.640 --> 24:16.400
There are a lot of resources.

24:16.400 --> 24:17.400
But if you can get it installed.

24:17.400 --> 24:18.400
It sounds like there's a ton of demand too.

24:18.400 --> 24:19.400
Yeah, right.

24:19.400 --> 24:20.400
So it exists everywhere.

24:20.400 --> 24:21.400
People are using it.

24:21.400 --> 24:24.720
If you're hired onto a new company, you don't get to choose what CI system is in place.

24:24.720 --> 24:26.320
It's probably already Jenkins.

24:26.320 --> 24:30.880
Wait, Wes, you can't walk in as a junior developer to this big organization and say, you know

24:30.880 --> 24:33.760
what guys, I know you've been using Jenkins for 10 years.

24:33.760 --> 24:36.200
Hey, I mean, don't think I haven't tried.

24:36.200 --> 24:39.240
It just doesn't always work.

24:39.240 --> 24:46.120
I'm converting people from.NET to Ruby or.NET Core, but usually to Ruby all the time.

24:46.120 --> 24:51.040
So the other thing I think is you've got this, it's, there's so many low hanging fruit.

24:51.040 --> 24:53.640
You know, like once you're already invested somewhere, it just keeps happening.

24:53.640 --> 24:58.560
So because Jenkins makes it really easy to tie in to things like Git repositories or

24:58.560 --> 25:02.120
GitLab or GitHub or push, you know, you can have push, you can have pull, whatever you

25:02.120 --> 25:03.120
want.

25:03.120 --> 25:06.980
It also has support for stuff like cron-like jobs where you can have a job on a schedule.

25:06.980 --> 25:09.680
If you're a developer and maybe you're not great at like systems, you don't want to go

25:09.680 --> 25:13.700
spin up a box that you have to manage and do updates on to, you know, try to do a cron

25:13.700 --> 25:17.440
job that pings your service for updates to make sure the database or the cache is fresh

25:17.440 --> 25:21.720
or whatever weird hacky thing you're trying to do, you probably already have access to

25:21.720 --> 25:24.760
Jenkins and it can do the same thing.

25:24.760 --> 25:28.960
So even if you just need a place that isn't your local developer workstation to trigger

25:28.960 --> 25:32.920
the Capistrano deployment, that's a lot of the times where Jenkins, someone writes a

25:32.920 --> 25:36.920
little deploy script and loads it up in Jenkins and then, you know, every time there's a push

25:36.920 --> 25:41.520
to the master branch, Jenkins will detect it, run that job, spin up the, spin up the

25:41.520 --> 25:45.840
job, use Capistrano to deploy it to the production machine.

25:45.840 --> 25:50.240
There were so many cool buzzwords that anyone not in tech would not understand in that entire

25:50.240 --> 25:51.240
spiel.

25:51.240 --> 25:52.240
Yes, it's all right.

25:52.240 --> 25:55.120
So it's just, no, it's great actually.

25:55.120 --> 25:59.040
So let's dial in on that a little bit.

25:59.040 --> 26:02.840
So I pushed the master, right, and I'm going to walk through this like I'm five because

26:02.840 --> 26:03.840
you know what?

26:03.840 --> 26:04.840
I was playing with blocks this morning.

26:04.840 --> 26:08.760
I have a little kid.

26:08.760 --> 26:09.760
No excuse needed.

26:09.760 --> 26:11.180
Blocks are great for any age.

26:11.180 --> 26:12.180
Blocks are fun.

26:12.180 --> 26:13.180
You know what?

26:13.180 --> 26:16.000
They actually make blocks to teach your kids coding now and it's like if statements and

26:16.000 --> 26:17.560
they all fit together the right way.

26:17.560 --> 26:18.560
It's crazy.

26:18.560 --> 26:19.560
Oh, fun.

26:19.560 --> 26:20.560
That actually, that's fun.

26:20.560 --> 26:21.560
Wow.

26:21.560 --> 26:26.560
So I pushed the master, that triggers Jenkins, right?

26:26.560 --> 26:31.000
Jenkins then has a job to run whatever the Capistrano or Chef tasks are, is that what's

26:31.000 --> 26:32.000
going on?

26:32.000 --> 26:33.000
Yeah.

26:33.000 --> 26:34.000
And you know, there's plugins for various things.

26:34.000 --> 26:36.320
Like there's, you know, a plugin to run Ansible scripts.

26:36.320 --> 26:38.840
If you're using Ansible for stuff, right, you can have that go like, oh yeah, here you

26:38.840 --> 26:39.840
go.

26:39.840 --> 26:41.400
Here's where you pull and yeah, exactly.

26:41.400 --> 26:43.640
So you can basically trigger, you can do arbitrary jobs.

26:43.640 --> 26:47.680
It can be an actual script running on the Jenkins machine, an API request somewhere

26:47.680 --> 26:50.360
or running something a little more complicated.

26:50.360 --> 26:51.360
Okay.

26:51.360 --> 26:57.000
So theoretically, if you are an experienced engineer who has used Jenkins for some time,

26:57.000 --> 27:01.020
you can actually take your Jenkins knowledge and directly apply it to some of these other

27:01.020 --> 27:04.960
kinds of let's say CI deployment technologies.

27:04.960 --> 27:10.040
If you wanted to have Jenkins be the thing that manages everything.

27:10.040 --> 27:11.040
Yes.

27:11.040 --> 27:12.040
Oh yeah, absolutely.

27:12.040 --> 27:17.320
And that's where it is sort of a mongrel job runner system.

27:17.320 --> 27:21.880
You know, you can use, it sort of spits, like Rundeck is a better example of something that

27:21.880 --> 27:23.560
should do jobs like that.

27:23.560 --> 27:27.200
But again, Jenkins has enough functionality that like, unless you want to spin up and

27:27.200 --> 27:31.060
learn to run a new system and have someone who's willing to support it or you're willing

27:31.060 --> 27:35.800
to support it or your team's willing to support it, well your organization already has a Jenkins

27:35.800 --> 27:36.800
server sitting there.

27:36.800 --> 27:37.800
Sure.

27:37.800 --> 27:39.720
It might be on some developer's workstation hiding under a desk.

27:39.720 --> 27:41.140
We hope not.

27:41.140 --> 27:44.720
But either way, it's already there and it's online and it tends to be one of those things

27:44.720 --> 27:49.720
like you know, when jobs fail or the test servers down, developers notice right away.

27:49.720 --> 27:53.680
Hey Wes, why is the server closet on fire?

27:53.680 --> 27:55.560
Oh, that wasn't me.

27:55.560 --> 27:57.560
I've been at lunch.

27:57.560 --> 28:00.240
Did somebody install Windows Server on one of my servers?

28:00.240 --> 28:02.640
That way there's smoke coming out of the closet.

28:02.640 --> 28:06.460
I just always walk around with a little USB drive set up to wipe whatever it finds and

28:06.460 --> 28:09.080
install Windows Server on it.

28:09.080 --> 28:10.880
I'm actually been inspired by the NSA.

28:10.880 --> 28:15.680
I'm going to put free charging stations and parking lots all around Tampa and you know,

28:15.680 --> 28:18.160
let's see what happens when people plug in their phones.

28:18.160 --> 28:22.800
That was not an actual promise to the commit a crime, dear feds.

28:22.800 --> 28:24.720
Actually, what about Windows though?

28:24.720 --> 28:25.720
What about a Windows server?

28:25.720 --> 28:30.120
Can my Jenkins run on Windows or are we purely in the Linux side of life?

28:30.120 --> 28:36.320
I think you see it deployed mostly on Linux just because, you know, Linux VMs are cheap

28:36.320 --> 28:37.320
and ubiquitous.

28:37.320 --> 28:38.520
But no, I mean, it's Java.

28:38.520 --> 28:40.760
It'll run anywhere Java runs, which is nice.

28:40.760 --> 28:44.940
And they do have, you know, they do have Windows plugins and stuff like that.

28:44.940 --> 28:48.760
It's not the most vibrant part of the ecosystem, I would say, but it's not like it's missing.

28:48.760 --> 28:50.520
There's PowerShell integrations.

28:50.520 --> 28:54.000
And then especially now that there's, you know, more.NET Core, PowerShell Core, I think

28:54.000 --> 28:56.000
that would all work great.

28:56.000 --> 29:00.560
Yeah, that's actually true and.NET Core you would run on Linux anyway.

29:00.560 --> 29:04.960
It would be very strange to have.NET Core and the JVM on the same machine, but also

29:04.960 --> 29:05.960
kind of exciting.

29:05.960 --> 29:06.960
Yeah, it would be kind of exciting.

29:06.960 --> 29:07.960
I love it.

29:07.960 --> 29:11.640
Now, I don't know about, that would still work for some of the DevOpsy stuff.

29:11.640 --> 29:12.640
I don't know.

29:12.640 --> 29:18.320
I don't see them getting used nearly as much for like, you know, visual studio centric

29:18.320 --> 29:19.320
development.

29:19.320 --> 29:21.740
That probably depends on the shop and what tools they're familiar with.

29:21.740 --> 29:24.640
But you can't, you couldn't in theory get it running.

29:24.640 --> 29:26.960
I just don't see it done.

29:26.960 --> 29:33.120
Yeah, it sounds like it's incredibly unlikely that someone would want to really do that.

29:33.120 --> 29:34.680
Yeah, exactly.

29:34.680 --> 29:41.640
But so for example, I think really it's what we are entering into is a world of, we already

29:41.640 --> 29:44.240
have so much, so many things offered as a service.

29:44.240 --> 29:47.760
So if you're doing everything and you know, you pay for like a private GitHub repository,

29:47.760 --> 29:51.800
I guess you don't even have to anymore, you know, you're using some sort of private thing

29:51.800 --> 29:52.800
for your...

29:52.800 --> 29:53.800
I know, I'm so happy.

29:53.800 --> 29:56.920
But I thought you were using GitLab, Mike.

29:56.920 --> 29:59.800
So this is a little behind the curtain thing, I use both.

29:59.800 --> 30:04.000
So we host our own GitLab, the community edition on DO.

30:04.000 --> 30:06.720
That is where 90% of our repos are.

30:06.720 --> 30:11.640
But if we have to contract with an outs, like if we're partnering with another firm on a

30:11.640 --> 30:18.440
project and they want us to host, we don't let them into our like private DO droplets.

30:18.440 --> 30:22.040
We use GitHub for that.

30:22.040 --> 30:24.400
So if we're co-developing with another shop, we use GitLab.

30:24.400 --> 30:25.400
Ah, yeah, yeah.

30:25.400 --> 30:26.400
Okay.

30:26.400 --> 30:27.400
That makes sense.

30:27.400 --> 30:28.400
And that's sort of their thing, right?

30:28.400 --> 30:29.400
Everyone's on it.

30:29.400 --> 30:34.120
Well, especially if it's Windows, like if it's a Windows project, you would be shocked

30:34.120 --> 30:40.240
at how many developers I have talked to and met that when I say, yeah, we use GitLab,

30:40.240 --> 30:41.880
they're like, oh, but we use Git.

30:41.880 --> 30:46.620
And when they say Git, they literally mean GitHub.

30:46.620 --> 30:52.640
Like the GitHub, see, I'm getting it confused, the GitHub GUI application for Windows is

30:52.640 --> 30:53.640
what they perceive Git as.

30:53.640 --> 30:54.640
Oh, wow.

30:54.640 --> 30:55.640
It is?

30:55.640 --> 30:56.640
Wow.

30:56.640 --> 30:57.640
Yeah.

30:57.640 --> 31:00.000
I mean, no, that is like, that is a thing though.

31:00.000 --> 31:01.000
Git is not a tool.

31:01.000 --> 31:05.640
I've helped, oh man, I have helped some like technical writers and other people in that

31:05.640 --> 31:09.320
sort of field get set up because they had to interact with a Git repository and version

31:09.320 --> 31:13.800
control because they were editing the documentation that went along with deployments for the customer,

31:13.800 --> 31:14.800
right?

31:14.800 --> 31:15.800
Wow.

31:15.800 --> 31:20.360
And they ended up to use it on Windows and actually use Git and like not break anything

31:20.360 --> 31:25.280
or they never, they never hurt the repository, but like they hurt themselves in the process.

31:25.280 --> 31:29.480
So I can see how, if you're just someone who has to collaborate on GitHub, the easy GUI

31:29.480 --> 31:31.240
is going to be what you know.

31:31.240 --> 31:32.240
Yeah.

31:32.240 --> 31:37.120
Any sentence to like a, let's say, you know, very traditional.NET developer that starts

31:37.120 --> 31:41.760
out, okay, now launch Git Bash, as soon as they hear bash, you're, you're, you're in

31:41.760 --> 31:42.760
trouble.

31:42.760 --> 31:43.760
Yeah, right.

31:43.760 --> 31:44.760
Yeah, exactly.

31:44.760 --> 31:50.440
I'm going to, I'm going to need you to write this complicated script for me, Mr. Dominic.

31:50.440 --> 31:51.440
Are you back there?

31:51.440 --> 31:52.440
I'm back.

31:52.440 --> 31:53.440
I don't know what happened though.

31:53.440 --> 31:56.480
I said, I said, I said Git and Windows in the same set and the whole thing just spent,

31:56.480 --> 31:58.360
oh, cause I'm on Windows today.

31:58.360 --> 32:00.040
That's why it's insulted.

32:00.040 --> 32:01.880
Redmond hurt you, my friend.

32:01.880 --> 32:02.880
Watch out.

32:02.880 --> 32:03.920
Well, they also on GitHub.

32:03.920 --> 32:05.680
So I mean, what do they care?

32:05.680 --> 32:08.240
And apparently they don't care what OS you're on, right?

32:08.240 --> 32:09.240
So.

32:09.240 --> 32:13.080
No, not, not in the new world.

32:13.080 --> 32:16.600
So thinking about it, I don't think you would ever, I, I, I'm hopeful and let me, let me

32:16.600 --> 32:22.120
just say, I'm going to hope for you and here's my 2019 wish is that, and beyond is that you

32:22.120 --> 32:23.300
don't have to run Jenkins.

32:23.300 --> 32:28.240
Not that it's bad, but that since like, if you live in a world where you can, you know,

32:28.240 --> 32:33.400
you have a declarative build and CI and deployment system with like well-defined primitives and

32:33.400 --> 32:38.000
rules and a declarative syntax that you can use that, that pretty much does everything

32:38.000 --> 32:44.280
that you need and you can architect your applications or at least the building and sort of maintaining

32:44.280 --> 32:47.300
of your applications around that process.

32:47.300 --> 32:48.300
Just do that.

32:48.300 --> 32:52.000
Just, just do that because you can, it'll just be easier, especially if you're already

32:52.000 --> 32:53.360
switching to something like GitLab.

32:53.360 --> 32:58.480
And I think that is actually one of the things that has been a huge boon to GitLab is having

32:58.480 --> 33:01.920
that built in because you didn't, you don't have to set up a separate tool and your ops

33:01.920 --> 33:04.300
teams already running GitLab or you're just paying for it.

33:04.300 --> 33:05.300
And then it just works.

33:05.300 --> 33:09.160
Oh, can I, can I do some GitLab?

33:09.160 --> 33:13.100
I last month found a new feature that I did not know existed.

33:13.100 --> 33:17.040
So my process traditionally, cause I, I'm everything on bash, I'm everything on my terminal

33:17.040 --> 33:20.220
cause I'm usually working on other popular elementary.

33:20.220 --> 33:23.240
So I'm like, you know, make deer rails and I have like a rails template to generate a

33:23.240 --> 33:24.240
project.

33:24.240 --> 33:25.240
Right.

33:25.240 --> 33:28.960
And I, you know, once for bots and, but let's just, again, rails is the simplest case cause

33:28.960 --> 33:33.680
it's when I have most, uh, and everyone knows rails.

33:33.680 --> 33:38.080
Lots of people like to code rails in parks on gold Mac books while meditating in wooden

33:38.080 --> 33:39.080
sandals.

33:39.080 --> 33:40.080
We don't talk about them.

33:40.080 --> 33:41.080
Their name's Dave.

33:41.080 --> 33:45.180
Um, this is how I see if my employees actually listen to the show.

33:45.180 --> 33:47.600
You can go into the GitLab UI.

33:47.600 --> 33:52.840
If you go into the web UI, they have prefabbed templates for rails.

33:52.840 --> 33:57.880
And I think like PHP and Java that actually set you, set up the CI for you correctly.

33:57.880 --> 34:00.020
You don't have to do it.

34:00.020 --> 34:03.640
So it creates the repo, does all the settings for your application.

34:03.640 --> 34:07.160
And then instead of like generating it on your local host, you just, you know, get clone

34:07.160 --> 34:11.920
it down and from the jump, no fiddling with pipelines.

34:11.920 --> 34:14.480
You are set up and good to go.

34:14.480 --> 34:17.120
I can't tell you how much of a killer feature that is.

34:17.120 --> 34:18.120
Yes.

34:18.120 --> 34:19.120
Right.

34:19.120 --> 34:23.680
And then, and it sort of sets that modern expectation of here it is.

34:23.680 --> 34:24.680
It's ready.

34:24.680 --> 34:25.840
Like, you know, you have these features that are built right in.

34:25.840 --> 34:28.600
You're, you're working on code, you're building an application.

34:28.600 --> 34:30.760
Well, of course you need those things.

34:30.760 --> 34:33.960
It's not just a dumb place to go dump your Git repository.

34:33.960 --> 34:35.840
Not that that's, that's not necessarily a bad thing.

34:35.840 --> 34:40.160
There's plenty of simpler, you know, non GitLab or GitHub Git repositories that have nice

34:40.160 --> 34:50.120
web UIs and are totally useful, but having it right there at hand is very seductive.

34:50.120 --> 34:54.920
How long have you been using GitLab?

34:54.920 --> 35:03.040
For since before we had the GitLab CEO on, we must've been, I honestly don't know, almost

35:03.040 --> 35:07.840
at least over a year.

35:07.840 --> 35:11.880
The vast majority of our projects are in GitLab, not GitHub.

35:11.880 --> 35:17.160
I think we have like six repos in GitHub and God knows how many in GitLab.

35:17.160 --> 35:18.360
Like I'll put it to you this way.

35:18.360 --> 35:21.520
I had to upgrade the DO server.

35:21.520 --> 35:22.520
There you go.

35:22.520 --> 35:23.520
Yeah.

35:23.520 --> 35:24.520
Right.

35:24.520 --> 35:29.800
So I'm, I'm curious for, for, for you, how has it been to run it and manage it?

35:29.800 --> 35:33.720
So if you're running it, you're running it on a, on a droplet, it sounds like, um, yeah.

35:33.720 --> 35:34.720
Has that been a pain?

35:34.720 --> 35:38.320
Is that something that your team has to spend significant time worrying about or touching

35:38.320 --> 35:40.480
on or getting alerts from?

35:40.480 --> 35:47.340
I mean, maybe once, so far I think we've had one incident where it just like ran out of

35:47.340 --> 35:50.960
storage because all the tickets had like videos and images on them.

35:50.960 --> 35:55.880
So we had to, you know, turn off the droplet and DO, for those of you who don't use DO,

35:55.880 --> 35:59.960
you can actually turn off the, uh, when I said droplets, just a VPS, right?

35:59.960 --> 36:02.800
Turn it off and then change the settings to get more storage.

36:02.800 --> 36:06.640
Also keep in mind, like Jenkins is a Java app, GitLab is a Rails app.

36:06.640 --> 36:12.000
So for us, administrating, deploying, upgrading a Rails app is like we do it all the time.

36:12.000 --> 36:14.160
And I personally am the one who does that.

36:14.160 --> 36:20.120
So it's a, I think from zero, like starting the droplet to, you know, changing the DNS

36:20.120 --> 36:28.600
or the domain for it took maybe an hour to get up and running and good to go with everything

36:28.600 --> 36:29.600
set up.

36:29.600 --> 36:30.600
Wow.

36:30.600 --> 36:31.600
Yeah.

36:31.600 --> 36:32.600
Oh, you know, that's a good point too.

36:32.600 --> 36:37.760
Uh, there is that, that power once you're familiar with the horrors of Bundle and everything

36:37.760 --> 36:41.520
else that goes around with a complicated Rails project and then you're like, okay, I guess

36:41.520 --> 36:44.080
I'm, uh, I'm ready to manage this thing.

36:44.080 --> 36:48.560
So I think we could both agree, Wes, if, uh, some of our listeners want to try GitLab on

36:48.560 --> 36:52.840
their own droplet and they are not familiar with Rails, the answer is always more RAM

36:52.840 --> 36:53.840
than you think you need.

36:53.840 --> 36:54.840
Oh my God.

36:54.840 --> 36:55.840
What is it?

36:55.840 --> 36:56.840
Yeah, Ruby is just like.

36:56.840 --> 36:57.840
What is it?

36:57.840 --> 37:02.080
And you know, I mean, there's a lot of things not in its, not in its favor, the like, you

37:02.080 --> 37:04.620
know, object oriented dynamic sort of thing.

37:04.620 --> 37:09.600
And it's, it's most common VM implementation, but there's also just something about complicated

37:09.600 --> 37:14.400
Rails apps and you have a bunch of workers running in the background and nothing ever

37:14.400 --> 37:16.080
really dies when it should.

37:16.080 --> 37:21.240
Wait till you have to like start implementing what should just be simple cron jobs in Rails

37:21.240 --> 37:26.360
and you just watch if there's any sort of issue, just watch the memory, like that chart

37:26.360 --> 37:28.560
just up and to the right.

37:28.560 --> 37:34.400
I am in a past life, I inherited an internal service that I sort of became responsible

37:34.400 --> 37:39.760
for when the previous person left and it was fine, it was pretty minimal, but of course

37:39.760 --> 37:42.920
it was written in Rails and not especially great Rails.

37:42.920 --> 37:47.840
Thankfully we were doing a data center migration, so instead of having to fix the problem, because

37:47.840 --> 37:50.920
it was going to be sunset at some time, I sort of just had to wait it out.

37:50.920 --> 37:56.040
I just stole one of the old servers that had like 128 gigs of RAM in it and it ran fine

37:56.040 --> 37:58.040
for as long as I needed it to.

37:58.040 --> 37:59.680
That's a small Rails app, 128 gigs of RAM?

37:59.680 --> 38:00.680
That's nothing.

38:00.680 --> 38:01.680
I know, right?

38:01.680 --> 38:04.960
It was actually kind of reasonably well done, if only because it was a small application.

38:04.960 --> 38:09.680
Well, the trade off, you know, that everybody makes Rails, it's like we would like to not

38:09.680 --> 38:13.960
spend a fortune on developers and we want to keep moving on this app really quickly.

38:13.960 --> 38:17.280
Although we're being a little mean, Rails 5 is certainly a lot faster than let's say

38:17.280 --> 38:18.280
Rails 3.

38:18.280 --> 38:19.280
Yeah, right.

38:19.280 --> 38:20.280
It's a lot more performant.

38:20.280 --> 38:27.800
Yeah, and you can really use Rails to build a modern API driven sort of service and it'll

38:27.800 --> 38:29.240
be just fine.

38:29.240 --> 38:32.280
And if you wanted to do that, there's some people in Florida who could help you.

38:32.280 --> 38:36.320
Oh, oh, now what might their name be?

38:36.320 --> 38:37.320
The Mad Botter.

38:37.320 --> 38:38.320
The Mad Botter.

38:38.320 --> 38:42.400
You know, it also kind of looked like even people who aren't interested in Rails or don't

38:42.400 --> 38:47.280
care about the backend technology at all, well, they've been talking about you too.

38:47.280 --> 38:52.040
I happen to notice, Mr. Dominic, that you got some local coverage recently.

38:52.040 --> 38:53.960
Yeah, yeah.

38:53.960 --> 39:01.120
The Florida Business Observer came to my office in Plant City a couple, maybe a month ago,

39:01.120 --> 39:06.080
did a little interview talking about, you know, how we're using Linux and open source

39:06.080 --> 39:09.960
for the aerospace and military aviation industries.

39:09.960 --> 39:11.840
So that was interesting.

39:11.840 --> 39:19.600
First thing I had to do was quote, put crazy tech stuff on the whiteboard, which the photographer

39:19.600 --> 39:20.840
gave me a good laugh.

39:20.840 --> 39:22.400
But if you have, there's a link in the show notes.

39:22.400 --> 39:29.000
If you want to check it out, I look like a deranged professor who has crazy tech stuff

39:29.000 --> 39:31.340
and of course one of them is Linux and Ubuntu.

39:31.340 --> 39:34.560
You've got these joysticks in your hand, so it sort of makes me think you're in some sort

39:34.560 --> 39:36.640
of like floating or flying classroom.

39:36.640 --> 39:40.340
You've got a whiteboard behind you, joysticks in your hand, so you're just ready to teach

39:40.340 --> 39:42.280
us all something, whether we like it or not.

39:42.280 --> 39:47.480
Yeah, so those are actually replicas of what the Air Force uses in, so they're for training,

39:47.480 --> 39:48.480
right?

39:48.480 --> 39:51.660
The replicas of what you have in like most modern cockpits, depending on the service

39:51.660 --> 39:54.000
and the type of plane.

39:54.000 --> 39:58.800
This nice little Dell I have here was previously running a flight simulator that I was using

39:58.800 --> 40:03.000
those on for testing our radar product, Gryphon.

40:03.000 --> 40:04.800
Oh, interesting.

40:04.800 --> 40:09.400
One thing that I kind of wanted to know, looking through this article, do you get much pushback

40:09.400 --> 40:11.040
about the technologies that you choose?

40:11.040 --> 40:15.880
I mean, if you are using a lot of open source tools these days, does that concern some of

40:15.880 --> 40:22.080
your more, let's say, defensive clients?

40:22.080 --> 40:24.200
You know, not really.

40:24.200 --> 40:28.820
One of the more interesting things is kind of the largest opportunity for what we're

40:28.820 --> 40:38.320
doing is people who have very old ASP applications that need to be either redone or rewritten

40:38.320 --> 40:39.480
for very good reasons, right?

40:39.480 --> 40:45.880
Like an ASP app after 10 years or whatever is going to be rough, especially with all

40:45.880 --> 40:48.920
the changes Microsoft has made in the subsequent time.

40:48.920 --> 40:56.240
I would say the one area where we do get a lot of pushback is anything like in cockpit.

40:56.240 --> 41:02.400
There's definitely a Windows bias there, and obviously most of the end users are running

41:02.400 --> 41:06.880
Windows as their, you know, their end PC, right?

41:06.880 --> 41:07.880
Yeah.

41:07.880 --> 41:08.880
Well, and I imagine too-

41:08.880 --> 41:10.440
The Surface Pro is hyper popular.

41:10.440 --> 41:11.440
Just, yeah.

41:11.440 --> 41:12.440
Oh, really?

41:12.440 --> 41:13.440
Mm-hmm.

41:13.440 --> 41:14.440
Yeah.

41:14.440 --> 41:17.160
So that's, like, we usually what it is is we'll write some, like, backend service on

41:17.160 --> 41:24.480
Linux and Rails, but the front end will be, like, a WPF app for the Surface Pro for something

41:24.480 --> 41:25.480
of that nature.

41:25.480 --> 41:26.480
Yeah.

41:26.480 --> 41:27.480
That makes sense.

41:27.480 --> 41:29.400
And I suppose, you know, in the field, you've got to use the technology you're comfortable

41:29.400 --> 41:32.120
with and that you've already trained all your people on.

41:32.120 --> 41:33.120
Yeah.

41:33.120 --> 41:37.360
And I think there's just a, you know, some of these companies have, like, security concerns,

41:37.360 --> 41:40.880
so there's, like, weird things they put on their Windows machines that lock them up.

41:40.880 --> 41:41.880
Right.

41:41.880 --> 41:42.880
Yeah.

41:42.880 --> 41:43.880
Exactly.

41:43.880 --> 41:44.880
We've already certified this platform.

41:44.880 --> 41:45.880
We know we can-

41:45.880 --> 41:46.880
Yeah.

41:46.880 --> 41:47.880
Windows 7 is alive and well.

41:47.880 --> 41:48.880
I'll put it that way.

41:48.880 --> 41:49.880
Oh, that's so sad and so painful.

41:49.880 --> 41:51.720
I mean, not that I hate Windows 7 or anything.

41:51.720 --> 41:57.400
It was a fine Windows, but it's pretty old now.

41:57.400 --> 41:59.400
I just, you know, poor WinRT never made it.

41:59.400 --> 42:06.380
You know, okay, so another thing I just wanted to highlight in this article is a military-grade

42:06.380 --> 42:11.640
rear warning radar system that runs on an iPhone.

42:11.640 --> 42:14.640
Those are words I would never have put in the same sentence.

42:14.640 --> 42:15.640
Yeah.

42:15.640 --> 42:17.400
That was a fun project.

42:17.400 --> 42:21.400
We actually have grown it up into something called Gryphon radar, which you can go to

42:21.400 --> 42:27.960
GryphonRadar.com that does the rear warning radar and a tactical display and a forward

42:27.960 --> 42:30.920
radar, you just call radar.

42:30.920 --> 42:33.480
And that, believe it or not, runs on Linux as well.

42:33.480 --> 42:34.480
Wow.

42:34.480 --> 42:35.480
I'm impressed.

42:35.480 --> 42:40.320
I mean, that sounds like a lot of fancy and interesting math and, you know, complicated

42:40.320 --> 42:42.880
heuristic algorithms to get that sort of thing right.

42:42.880 --> 42:45.680
Yes, and I did not personally do the math.

42:45.680 --> 42:46.680
I did some of it.

42:46.680 --> 42:53.520
But yeah, it's actually one of the bigger challenges with the iPhone was just like not

42:53.520 --> 42:56.520
having the iPhone, you know, run out of memory.

42:56.520 --> 42:57.520
Right?

42:57.520 --> 42:58.520
It's like...

42:58.520 --> 43:00.080
You're in almost an embedded type environment.

43:00.080 --> 43:03.160
I mean, a really plush embedded environment, but still.

43:03.160 --> 43:04.160
Yeah.

43:04.160 --> 43:05.800
And the upside is you don't care about the app store.

43:05.800 --> 43:06.800
Right?

43:06.800 --> 43:07.800
So there are no more rules.

43:07.800 --> 43:08.800
You can do literally anything.

43:08.800 --> 43:09.800
So it becomes...

43:09.800 --> 43:10.800
Oh, it's just a pure platform.

43:10.800 --> 43:13.520
You can run it on this fancy little ARM device.

43:13.520 --> 43:14.520
Exactly.

43:14.520 --> 43:18.400
It's basically a BSD device with obviously iOS on top of it.

43:18.400 --> 43:24.240
But if you need to get a little more efficient, you can, and we did, just drop down to the

43:24.240 --> 43:28.640
old BSD core, right, because iOS is based on macOS.

43:28.640 --> 43:33.320
But underneath it all, it's actually like a very bastardized form of BSD.

43:33.320 --> 43:34.320
You're right.

43:34.320 --> 43:41.480
You got the old XNU and mock stuff and the BSD user land, and it's an interesting little

43:41.480 --> 43:43.520
hodgepodge of an operating system.

43:43.520 --> 43:44.520
Yeah.

43:44.520 --> 43:45.520
It's...

43:45.520 --> 43:47.520
I pity whoever wrote iOS.

43:47.520 --> 43:50.280
That must have been like a painful process.

43:50.280 --> 43:55.440
He just know Apple has enough money to hire the really, really talented operating devs

43:55.440 --> 43:58.400
and make them do something that they probably hate.

43:58.400 --> 43:59.400
And a few therapists.

43:59.400 --> 44:00.400
Oh, yeah.

44:00.400 --> 44:03.760
That's part of the expensive benefits package, I'm sure.

44:03.760 --> 44:07.840
Well, I'm glad you got a little coverage out there.

44:07.840 --> 44:10.560
You're doing some really neat stuff.

44:10.560 --> 44:14.840
And now that I know all about the fancy math, I'm going to be following a little more closely.

44:14.840 --> 44:16.840
Oh, follow a little more closely.

44:16.840 --> 44:18.320
It's not just all Swift all day.

44:18.320 --> 44:19.880
No, not Swift all day.

44:19.880 --> 44:22.840
I mean, although I'm sure still plenty of Swift.

44:22.840 --> 44:26.040
Actually, a lot less Swift than I thought.

44:26.040 --> 44:27.040
A lot less Swift.

44:27.040 --> 44:28.040
Hmm.

44:28.040 --> 44:36.040
I might, and I don't want to ring the spell, I might have to actually look at Rust.

44:36.040 --> 44:37.040
But don't hold me to that.

44:37.040 --> 44:38.040
Okay.

44:38.040 --> 44:39.040
I may have to.

44:39.040 --> 44:40.040
Let's talk about that really quick.

44:40.040 --> 44:41.040
Sure.

44:41.040 --> 44:43.680
Because I feel like they don't fit quite the same.

44:43.680 --> 44:49.840
But Swift has this nice, really static and compiled and can make quick and lean little

44:49.840 --> 44:52.760
things with a pretty minimal runtime overhead.

44:52.760 --> 44:57.600
Now, that doesn't compare to Rust's lower level nature.

44:57.600 --> 45:01.800
But it seems like there's some things copacetic between the two.

45:01.800 --> 45:05.480
And I'm wondering what's the differentiator and what makes you curious about Rust?

45:05.480 --> 45:08.800
Of course, besides all the 2019 Rust hype.

45:08.800 --> 45:11.600
Actually, I came from it from a different perspective.

45:11.600 --> 45:14.400
I definitely see what you're saying with the similarities with Swift.

45:14.400 --> 45:18.420
I was going to do a project in Azure Spheres.

45:18.420 --> 45:21.880
But for reasons that have very little to do with me and to do with business guys who actually

45:21.880 --> 45:23.880
make decisions about money and stuff.

45:23.880 --> 45:29.000
And real quick, Azure Spheres is Microsoft's Linux based IoT platform.

45:29.000 --> 45:30.000
Right.

45:30.000 --> 45:31.740
But it's like a full platform, right?

45:31.740 --> 45:34.840
So we had an episode on it.

45:34.840 --> 45:38.000
Azure Spheres is you're also going to be paying for Azure services, which-

45:38.000 --> 45:41.920
Right, you get updates and firmware and the whole kit and caboodle.

45:41.920 --> 45:45.880
It's cool, but it assumes a connected environment.

45:45.880 --> 45:49.880
For reasons that aren't super relevant to the show, that was something that maybe we

45:49.880 --> 45:50.880
couldn't assume.

45:50.880 --> 45:55.120
There are ways around that, but it was getting to the point if you're going to pay, Azure

45:55.120 --> 45:57.000
Spheres is not a cheap option, right?

45:57.000 --> 45:58.000
Let's just put it out there.

45:58.000 --> 46:00.060
It just wasn't the best fit for that project.

46:00.060 --> 46:01.180
It wasn't the best fit.

46:01.180 --> 46:07.080
So we're going with just a more pure, probably like Arduino or something like that.

46:07.080 --> 46:08.080
Pure embedded Linux.

46:08.080 --> 46:10.280
Pure embedded, sort of more classic environment.

46:10.280 --> 46:11.280
Yeah.

46:11.280 --> 46:12.840
Might even be like embedded Ubuntu.

46:12.840 --> 46:17.280
And we want to be as cheap as possible on these chips.

46:17.280 --> 46:20.680
Using chips the wrong way, but you know what I mean.

46:20.680 --> 46:22.400
So we need performance, right?

46:22.400 --> 46:25.960
Like you start getting down the list, what are your choices?

46:25.960 --> 46:29.240
Well there is a.NET embedded, but that's like one of the more expensive things you

46:29.240 --> 46:30.600
could possibly do.

46:30.600 --> 46:34.080
I looked at Kotlin Native, in fact, if people pay attention to the subreddit will know a

46:34.080 --> 46:38.320
couple weeks ago I asked if anyone did any Kotlin Native, because I was hoping to get

46:38.320 --> 46:40.920
some performance stats.

46:40.920 --> 46:43.640
I did not, but I did a little testing on my own.

46:43.640 --> 46:47.040
It wasn't bad, but it's definitely not ready for prime time in my opinion.

46:47.040 --> 46:48.160
It's neat that they're doing it.

46:48.160 --> 46:53.120
I'm definitely following that with interest, but yeah, it's still being fleshed out fully.

46:53.120 --> 46:57.600
And again, for resource restrictions, throwing a JVM on this thing is not going to work.

46:57.600 --> 47:02.920
So now we're down to, there is a Go kind of embedded thing, but again, if I feel the same

47:02.920 --> 47:10.280
way I feel about Kotlin Native, we're down to basically C++ and Rust.

47:10.280 --> 47:13.080
And I don't know, you listeners got to me.

47:13.080 --> 47:19.560
I mean, C++ is kind of the devil I know, but that devil's taken my soul many times.

47:19.560 --> 47:21.920
So you're not one of the C++ defenders.

47:21.920 --> 47:26.700
I mean, it does seem like I'm willing to believe, I'm not an expert, it's been probably a decade

47:26.700 --> 47:31.000
since I did any serious C++, but it seems like in a modern world with a modern tool

47:31.000 --> 47:34.600
chain, which is usually not what you get in the embedded world, of course you can write

47:34.600 --> 47:40.200
decent, clean C++.

47:40.200 --> 47:41.200
Is that your experience?

47:41.200 --> 47:46.280
Yeah, I'm not a C++ hater.

47:46.280 --> 47:49.520
There have been, every year there's like four or five projects where I have to write like

47:49.520 --> 47:54.200
a C++ or a C library because something's not fast enough in Ruby, shocker.

47:54.200 --> 47:55.740
Native extensions, here we go.

47:55.740 --> 48:01.280
Native extensions are something that if Ruby didn't have, it would have a problem.

48:01.280 --> 48:06.200
But again, if I don't need to torture myself, I'm not sure that I want to.

48:06.200 --> 48:12.960
And an embedded environment is not the same as let's say Visual C++ 2019 in Microsoft

48:12.960 --> 48:18.080
Visual Studio or the newest version of Qt running the latest C++.

48:18.080 --> 48:20.680
I think it would be more challenging than that.

48:20.680 --> 48:24.840
And just the hype and frankly the community around Rust who seems to be very eager to

48:24.840 --> 48:29.720
get people to like try it might actually be a benefit to this.

48:29.720 --> 48:31.120
Yeah, that's a big point.

48:31.120 --> 48:35.040
I think one of the things they've gotten just really right is exactly that.

48:35.040 --> 48:37.160
They've got a great new user thing.

48:37.160 --> 48:39.920
Sure, there's still a lot of stuff happening behind the scenes.

48:39.920 --> 48:41.720
There's a lot of new developments.

48:41.720 --> 48:46.060
There's still the new version of their book in the works, all those things, but they clearly

48:46.060 --> 48:47.600
care about new users.

48:47.600 --> 48:52.640
And compared to the world of C++, like the library ecosystem, the tool chains involved,

48:52.640 --> 48:54.280
it's a whole other world, right?

48:54.280 --> 48:55.280
You get cargo.

48:55.280 --> 49:00.840
You get to actually just go with a nice way better than some of the more popular package

49:00.840 --> 49:04.560
managers for libraries and for programming languages.

49:04.560 --> 49:10.600
You get one that's kind of at the top of its form and you get all the nice modern typeful

49:10.600 --> 49:16.720
benefits and static analysis and the neat approach to borrowing and memory management

49:16.720 --> 49:17.720
that come with Rust.

49:17.720 --> 49:18.720
Yeah.

49:18.720 --> 49:20.320
And there's a selfish reason, right?

49:20.320 --> 49:26.760
I tend to work a lot in Ruby and more older C Sharp, stuff like that.

49:26.760 --> 49:29.880
It would be nice to actually try something that's actually the new hotness, to be one

49:29.880 --> 49:30.880
of the cool kids.

49:30.880 --> 49:31.880
Oh, yeah.

49:31.880 --> 49:32.880
Well...

49:32.880 --> 49:36.480
And then if I don't like it, lots of show content.

49:36.480 --> 49:38.720
I think either way, lots of show content.

49:38.720 --> 49:41.480
Now, I mean, yeah, you're right, a little bit less if it's just you kind of gushing

49:41.480 --> 49:47.120
about how great Rust was, but I think it'll be very interesting to see what you think

49:47.120 --> 49:48.120
of it.

49:48.120 --> 49:52.680
I'm also curious because I know that whole ecosystem is developing, so I'm sure the support

49:52.680 --> 49:58.760
for various boards and playing in the embedded space, that's developing too.

49:58.760 --> 50:02.080
That was one of the other big factors, looking because I also have to pick out the actual

50:02.080 --> 50:03.080
hardware for this.

50:03.080 --> 50:04.080
Right.

50:04.080 --> 50:05.080
Yeah.

50:05.080 --> 50:06.080
Obviously, we're looking at all the big ones, right?

50:06.080 --> 50:07.120
The TI has a bunch of boards.

50:07.120 --> 50:12.160
There's actually a company up in Gainesville, Florida that somehow this company in Florida

50:12.160 --> 50:18.880
is manufacturing all these boards, so like the System76 of weird circuit board companies.

50:18.880 --> 50:23.840
And all of them basically have documentation on how to get their board and they're...

50:23.840 --> 50:27.720
I would prefer like straight Ubuntu embedded or straight Debian embedded, but some of them

50:27.720 --> 50:31.720
have like their weird, you know, like kernel extensions or whatever.

50:31.720 --> 50:33.880
They all have support for Rust.

50:33.880 --> 50:38.120
Everyone I've talked to, if you mentioned Rust, it's a positive conversation.

50:38.120 --> 50:43.600
So if you do need engineering support from your hardware vendor, and from my, I don't,

50:43.600 --> 50:45.020
I mean, Wes, I would love to hear your experience.

50:45.020 --> 50:48.800
My experience is if you can get support from your hardware vendor, get it.

50:48.800 --> 50:49.800
Yeah.

50:49.800 --> 50:50.800
Right.

50:50.800 --> 50:53.160
Especially, I mean, if you're running a small shop and you don't already employ a bunch

50:53.160 --> 50:57.320
of experts in that space, yeah, you're probably going to want a few helping hands here and

50:57.320 --> 50:58.320
there.

50:58.320 --> 50:59.320
Yeah.

50:59.320 --> 51:00.680
Well, that is fascinating.

51:00.680 --> 51:03.240
I had no idea you were such a hipster.

51:03.240 --> 51:06.600
No, I'm just kidding, but we should make sure like that's going to be something we follow

51:06.600 --> 51:11.240
up on because I think that will be a very interesting story to watch.

51:11.240 --> 51:13.240
All right.

51:13.240 --> 51:14.720
Sounds good.

51:14.720 --> 51:17.040
Well, Wes, where can they find you?

51:17.040 --> 51:20.400
Oh, Mr. Dominic, they can find me all over the place.

51:20.400 --> 51:24.000
On the new TechStamp program, we've got a brand new co-host, Mr. Jim Salter.

51:24.000 --> 51:25.000
That's lots of fun.

51:25.000 --> 51:27.720
Our first episode is out, so go make sure you check that out.

51:27.720 --> 51:33.020
You can also find me on Linux Unplugged, all kinds of great content, and you'll find some

51:33.020 --> 51:36.280
more of that Mr. Chris Fisher over there, too.

51:36.280 --> 51:40.080
And you can find all the Jupiter Broadcasting shows, JupiterBroadcasting.com.

51:40.080 --> 51:44.560
And of course, if you want more Mr. Michael Dominic, the first place to look is coder.show

51:44.560 --> 51:49.080
where you can get this episode at 3.41 and the whole backlog.

51:49.080 --> 51:51.920
But I know there's even more places, Mike.

51:51.920 --> 51:52.920
Yeah.

51:52.920 --> 51:58.160
You can go to Twitter or I'm in the subreddit about once or twice a week.

51:58.160 --> 51:59.160
Excellent.

51:59.160 --> 52:04.000
Well, thank you so much for joining me and thank you, dear audience, for joining us.

52:04.000 --> 52:19.240
We'll see you next time.


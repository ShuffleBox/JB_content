This is Koda Radio, episode 365 for July 8th, 2019.
Hello, and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes
a pragmatic look at the art and business of software development and related technologies.
My name is Wes, and I'm very pleased to be joined by that fire-cracking Florvidian who's
had one too many fireworks this time around, Mr. Michael Dominic.
Hi, Mike.
Get off my lawn!
I know.
I transitioned from being a, you know, like a fun-loving lad in my youth who liked blowing
things up, frankly.
Yeah.
And now I'm a dog owner, so it's just about the worst thing in the world.
I think we've got one other person who snuck in in the nick of time.
Mr. Chris Vischer.
Hello, Chris.
Hey, guys.
Thanks for having me back.
Oh, we wouldn't be without you.
I kind of am a little relieved that I'm not the only one.
I had the same transition.
Like this year, I was like, oh, can we just not?
Yep.
It's just, yeah, it's kind of a futz.
Honestly, I prefer just the professional shows.
You know, you can go there if you want to see it.
It's usually away from most of the housing.
I could even go with another compromise.
How about we just all agree from like 8 p.m. to midnight, you have that on the 4th of July,
and we'll just all prepare for that.
It's like the day before, and today we're recording on the 8th, and my neighbors are
still setting off fireworks.
Still going strong.
I'm kind of like, okay, how about we just compromise, meet somewhere in the middle here?
That's all.
I'm such an old man.
I looked up how to do some CSS fireworks, so that's another tech-powered solution.
Just don't blow anything up.
Use the computer.
I just wanted to go out to the neighborhood kids and say, this is the blink tag.
Knock yourselves out.
You know what?
It is the real-life version of the blink tag, isn't it?
It really is, right?
Good call.
I think that's exactly it.
Okay, now, I feel a little fronted here, because every time I come on the show, you guys put
Mac news stories in the doc, and I didn't do any of this.
I will back you up on this.
It just happens, and we've talked about it enough.
It was Joe.
We want to follow up on stories that we cover, right?
It just makes sense.
It's our instinct.
I think Alan, Jude, and Joe are conspiring against me to get the audience to think that
I'm the Mac guy on the show, is what it is.
You guys are just complicit.
Despite overseeing the Linux-ification, that's hard to say, but regardless, you made that
happen here in the studio, right?
And there's hardly a Mac to be seen.
I prefer the term freeing the studio, Wes.
Oh, freeing the studio.
Oh.
Oh, God.
It was more about philosophy than functionality.
Burn!
Nice!
Wow, I am really impressed how you turned that around on me.
Dang it.
Okay, well, yeah, so I think the big hoopla story that kind of leads into this thing that
I was sort of implying is, A, it's now, as you guys talked about, on the record, that
Johnny Ive is officially on the way out.
See ya!
B, we've had that Wall Street Journal article that said that Cook wasn't involved, and then
we had Tim Cook make this super strong response.
Oh, yeah, that was a little awkward.
And now, there is what seems to me, at least having followed this for a while, so this
is where I get this kind of feeling, is a very intentionally leaked story.
Because now we have multiple sources that are claiming that the new MacBook Pro later
this year will have a totally new keyboard mechanism.
And when you start seeing these kinds of leaks, and I'm curious to know Mike's take on this,
it kind of feels like an intentional leak by Apple to set a narrative after this Ive
announcement.
Wait, wait, are you suggesting that they would conveniently try to imply that the crappy
keyboard that was way too thin to be useful was the responsibility of a very controversial
and famous designer, who that now he's leaving, we can have a good keyboard?
Is that what you're trying to say?
I mean, it kind of seems that way, Mike.
It kind of seems that way.
It wasn't it interesting how Tim Cook, very Clark Kent-esque, flew around the media saying,
I make all these decisions.
And now we have a good keyboard.
Yeah, I mean, you know, this is some Floridian Gator Bacon.
I don't think Johnny Ive cares.
I think he's a knight and rich.
Yeah, it's true.
I mean, he comes out of this fine in every situation.
But if anybody's ever shipped a product, particularly physical products, there's just no way this
just happened, right?
Oh, yeah, right.
I mean, it's got to be in the works for a long time.
Oh, no doubt about it.
No doubt.
I think it's been, I think the Ive transition has been in the works since Apple Park wrapped
up.
That's my estimation.
If you look back at some of the way they've been communicating about Ive's role and the
promotion that he got around then and all of that, it kind of all equals to the beginning
of a transition.
And I would say there was no winning here for Apple, because if Tim Cook was hyper-involved
and trying to be involved in every single design decision, something tells me Johnny
Ive wouldn't like that either.
So it's either he's not involved enough, or he's too involved, and I don't think there
was ever going to be a happy medium because it's just my sense of the personality types
at work here.
And Apple's trying to combat the narrative that I perhaps way too hard hit last week
that Tim Cook really is effectively an operations guy, right?
Because I don't know why, we've all three of us talked about this for a long time on
different shows in this show, but for some reason the big tech companies love the idea
of the CEO as like the god king coming down and –
Right.
The tyrant.
Yeah.
Yes.
I think it's silly.
I would actually be more impressed if they came down and said, my name is Tim Cook.
I am one of the best operations people in the world.
So I just hired the best programmers and designers to do that for me.
But they can't say that.
I don't know.
That's what I would say.
It seems like a pretty reasonable approach.
And how other industries do it, right?
I mean, you're there to operate the business.
The ones that aren't media darling industries.
Although, I mean, Apple does things a little differently, right?
And their history has been kind of written by these big design changes.
It was not business as usual.
I think we also have to be fair, they're sort of the architect of the celebrity CEO for
the tech industry.
Yeah.
He's not the first celebrity CEO.
I mean, hello, Edison.
Hello, Mark Shuttleworth.
Yeah.
But, you know, for that Silicon Valley area, he sort of is the architect – architect,
whatever I'm trying to say.
We're talking about Ken Metcalf, right?
No, of course not.
I'm talking about Wozniak.
It seems only kind of fair that people still view them in that light.
But it's not the reality of a company of their scale.
When you look at the people on the team, like Craig Federighi and Phil Schiller, and I would
have probably cited Ive before, they seem like exceptionally talented individuals who
have been at the company for a very long time.
And recently, they've been featured more and more on podcasts.
I've actually gotten a chance to hear them in a less structured, less promotional setting.
And they're very intelligent individuals.
I don't know if you've had that same assessment, Mike, but it seems like, for example, Craig
Federighi really knows his shit.
Of course, right?
I mean, for all our trolling on this show, which, by the way, is supposed to be entertainment
too, right?
You don't become a director of insert department here at Apple without being a very smart,
very capable person.
Yeah.
That was too nice.
Yeah, I just expected some further vitriol there.
No, no.
All right.
So to the topic on point here that really matters to the audience is, depending on who
you follow, some people would argue that the MacBook Pro is one of the premier developer
systems, especially if you're in Xcode.
It's one of your only options, really, if you want to be a mobile developer.
Or if you want to do HomePod development.
Still now, if you go work for some big tech company, more than likely, you're getting
a MacBook, right, on your first day.
So the potential ramifications here are a new MacBook Pro with a larger screen that
is, let's just say, in theory, for the sake of this conversation, designed by that new
or help design led by that new Pro team, the same team that had influence on the iMac Pro,
the new Mac Mini, and the Mac Pro.
Let's say they've also been involved in a Mac Pro for professionals, like the King Mac
Pro.
They're going to have to call it...
They can't call it Mac Pro Plus or whatever.
Maybe they will.
Is it like a Mac Pro Pro?
Wait.
Maybe they'll call it...
What do they call the...
Is it X...
What do they call the larger iPhone?
Is it just plus and still?
XL.
It's XL.
Maybe that's...
Maybe they'll call it the MacBook XL.
I mean, I don't know.
I could see it.
Yeah.
Or they'll just call it the MacBook 16-inch.
And it'll just be implied that the 16-inch version is more powerful.
Of course.
Right.
And the rumor here is that it switches to...
Actually the rumor is they're going to start with a MacBook Air.
But I just like for the purposes of conversation, let's say they launch a MacBook Pro larger
screen.
This one even has an SD card reader.
It's got a new keyboard.
It's still all USB-C, but it's got lots of USB-C. They're all Thunderbolt 3 ports.
It's got this bigger screen.
It's got a great keyboard.
Let's just for the sake of argument say it's like the T480's keyboard.
It's quite nice.
Okay.
Have they solved the problem?
Is the criticism...
Is all the criticism done?
Is the conversation dead at that point?
Or is there more?
Is there like a software layer?
Right?
I mean, you've got Peru there.
You're probably developing for Linux, at least if you're doing the enterprise side
of things.
It depends on what you mean, right?
Are you defining the problem as like the 20-something percent failure rate?
Because yeah, if you fix that, you fix that, right?
Well also it's just that they're extremely uncomfortable to type on, especially when
you're typing a lot.
At least for me, maybe because I'm an old typist.
I mean, I've been typing for...
Yeah, they hurt.
Oh, they hurt.
Oh no, it hurts.
Yeah.
Yeah.
But if they could make it a competitive product like that again, they may solve the criticism.
Now ironically, this particular rumor that we have linked in the show notes is about
the MacBook Air.
The 16-inch won't even get the keyboard this year is what it suggests.
The 16-inch that hasn't even been announced yet.
I mean, my issue as a buyer of these devices has always been that this is your most expensive
laptop and it is also your most unreliable.
Unreliable?
What do you mean?
Well, no, it's not...
This is not me asserting this, right?
This is...
People have...
Not Consumer Reports.
There's a...
Is it Anandtech?
Who does the...
What they think the return rates and defect rates are on all the Apple products?
Oh, the people that try to...
Yeah.
Yeah, it is 20-something percent.
And for a laptop that is minimum gonna be $2,000 unless you're buying a base model and
probably for someone who has heavier needs, 3,000.
I don't know.
Even if it's just 21%, right?
That's not an acceptable failure rate in my opinion.
Boy, that would be...
No, no, that would be...
If that's true, if that number is true, that would be...
I mean, there's no way it could be that high.
Well, I mean, the Wall Street Journal did an entire piece on it, right?
It's not...
This isn't...
I mean, I know they're bad.
I agree with you there.
And they should be a lot better.
I feel like I am that guy who always says, oh, the solution to Android's shortcomings
is just to flash it with lineage.
I'm gonna be that guy for a moment, but...
Lay it on us.
Apple seems to be moving in the direction of supporting macOS more and more under virtualization
to the extent that they're even adding Vert.io drivers to...
Isn't that interesting?
Not even just to Catalina, but they're bringing those Vert.io drivers to the...
What's the current version of macOS?
Mojave?
Yes, they're bringing them to Mojave even, in the latest releases of Mojave.
Wow.
Now, these Vert.io drivers are what allow an operating system to have drivers that are
aware it's being virtualized.
It's optimized for virtualization.
Yeah, it communicates intelligently with the hypervisor.
And that's not an accident.
Those don't just accidentally...
Whoopsie, Vert.io.
Mm-hmm.
And Windows 10 also works really great under virtualization.
And when you use an AMD card with PCI pass-through, you can have full GPU acceleration for both
of these...
You can't do it at the same time, but you can load a VM and have full GPU pass-through
for either OS on any hardware you want that supports virtualization.
Which is a lot these days.
And I think it's time...
We were just having a pre-show conversation.
We have here at the studio and also on our VPSs, we have divorced, as many of you probably
have, the applications from the operating system.
Well, now we can divorce the operating system from the hardware.
It's all available to us.
It just takes a little extra setup, but you do it once, right?
Well, you do it once, and then you've got it all configured and ready to go, right?
If you are someone like me who mostly is now developing server-side software, and frankly,
some Windows desktop, mostly server-side running on Ubuntu, Linux, or SUSE, why would I not
just VM, Mac OS, Catalina for when I need it, and literally buy the nicest laptop with
the best eGPU that I could possibly afford?
Would you spend most of your time there?
Would you be switching around?
Because you still got your question of where are you spending...
It's not super portable.
That's the biggest downside I find.
However, there are ways to do...
And this is an area I don't really know much about, but on modern, like our laptops, your
laptop right there, supports virtualizing the GPU.
So you can actually carve out your Intel GPU as a dedicated GPU to the VMs all in that
laptop.
You just only have Intel graphics.
There's a bunch of caveats with that, I thought.
Isn't it like dependent on which...
It doesn't matter really, but which one you have and which kind of virtualization.
Yeah.
I mean, all of this stuff is pretty hardware-specific, and you've got to know which flags to look
through and match up the CPU and the motherboard and how all that works.
Like I say, it takes a little bit of work, but then you have sort of the stability and
reliability of virtualization under those operating systems, too.
So then you gain things like snapshots before an update, before all those kinds of things.
So you actually bring a level of stability to your development environment that you don't
have when it's running on native hardware.
Like I said, at the top of this, I'm going to be the guy that says, solve all your Android
problems by running lineage.
It's not really an option for everybody, but I think maybe it's more of an option than
people realize.
Because I'm on a laptop, I didn't think it was possible.
And it's game changer.
Especially if like, yeah, like your mic, right?
Maybe you just need to run it as a build server for Xcode or something.
You just need to get stuff signed and through there, and otherwise you can develop wherever
you want.
I guess what it really comes down to is, is the Macintosh hardware and the Mac OS operating
system, is it important to you that you are in that ecosystem?
And maybe, is it a statement?
Is it a status symbol product?
Or is the Mac OS and its applications simply a tool in which you use to get your job done?
And maybe, depending on what answer you have for that, maybe that tells you what route
to take.
Now, can I run the ball forward about five years, though?
Well, let's do it.
This all makes sense, and this all works because Windows, Mac OS, and Linux are all effectively
Windows, I'm sorry, Intel systems, right?
They're x86, x64.
Yeah, we're all running on the same chips.
What happens when Uncle Tim throws down the gauntlet and says, and ARM?
That's what I mean.
That comes a lot harder, right?
The virtualization, the overhead.
I think everything changes, unless there's ARM hardware out there that can, yeah, I think
everything changes.
But at that point, too, you got to figure a lot of your application workflow would change,
too.
And you may actually want an x86 version of Mac OS around for compatibility reasons for
a really long time.
And again, virtualization would really be a good use case there.
That would be a fascinating transition.
Yeah, it will be.
It's going to be painful, I think, for a lot of people.
And maybe it's another reason not to invest in multi-thousand-dollar Mac products when
they could be at the end of a line.
You mean a $47,000 Mac Pro.
Right, I mean, look at that, right?
I mean, even if you could come up with another screen that is still high resolution that
can connect to that thing, and there are not a lot of options there, you're still looking
at probably a base $6,000 out the door for the machine once you get it configured, even
adequately.
Or you could put all of that money into a custom-built PC or a machine you buy that
could get you a lot more.
And then you virtualize, and that could get you stability in a way you hadn't really considered
before.
And the trend line for Mac OS has been to support virtualization more and more.
It started like five years ago with licensing changes, and the support for it has just accelerated
since then.
Not to troll, but what if you could have a user land with like a high software compatibility
and a desktop environment used by millions, and a kernel from a different OS that you
can work natively in?
You kind of trolled last week.
I am curious, though, because you mentioned you were doing VS code and having that nice
integration.
I mean, how serious are you?
Are you actually liking it that much?
Is it working for your needs?
Do you feel like you're effectively targeting Linux this way?
I have deployed software.
I have built binaries, a few of them that I've needed.
Now, we're mostly talking about server-side software I'm developing, so it's been perfectly
fine.
But for me, and this is dumb, is that like the WSL stuff is very being worked on.
I'm also using that new fancy terminal.
Oh, I have not tried that yet.
Which thanks to the listener Sean McBride gave me some pointers on how to set that up
because the documentation is not great yet.
I mean, as far as doing Ruby and doing some.NET Core, it's just fine.
I am interested to see what happens.
Like I have a cute project that I just need to pull down and take a look at something
for somebody.
What happens if I try to run that in WSL?
I think the answer is it's just going to fail.
I have to say, if you are a web developer who also needs to touch...
You know, it's almost the old Microsoft argument, right?
I'm sorry, the old MacBook argument.
If you are a web developer who occasionally needs like Xcode for like signing a Cordova
or a PhoneGap app, this is great, right?
I do have Windows applications in the field, in the market.
The vast majority of the software I write is being deployed, like I said, to SUSE and
Ubuntu servers.
So that's...
Yeah, don't even get me started.
I know.
I know.
We don't want to disparage.
Legitimately though, real talk, what about the paper cuts of running Windows?
You know, like the fact that the start menu has got all over it, the fact that the Windows
updates process takes a decade, the fact that it's a mishmash of UI, all those things.
Okay.
So I'm waiting on writing the review of this with the experiences.
I did intentionally...
I am intentionally using hardware that is 100% Linux compatible, just in case I want
to slap Pop!
OS or elementary or something on this.
Nice.
Yeah, okay.
It is amazing to me how unpleasant the Windows kind of just setting up your machine experience
still is these days.
Yeah.
Like I had to delete Candy Crush.
That's ridiculous to me.
Yeah, or how fiddly you have to get with the power saving settings and the update settings.
It's not hard.
It's just it's lots of fiddly settings that you spend a lot of time overall changing.
It's like using plasma.
No, I can't.
It's kind of fair in a way, actually.
I mean, it's all going to be about trade-offs, right?
Like I know plenty of people who I've tried to evangelize desktop Linux to who are Mac
people and they're like, are you kidding me?
Right?
Like I would never do that, you know.
I would say that if you're a comfortable desktop Linux user, are you probably going to switch
to Windows 10?
Not unless you already needed Windows, right?
Am I a hundred percent on Windows 10?
I am for now.
Do I think it will last?
Well, it used to be the case and this is Mike's old man hat.
The last time I seriously, seriously ran Windows other than for like a four month job was I
think it was Windows, God, I don't even know the word, eight, eight, Windows eight.
It has been my experience that Windows machines tend to slow down after a while.
Oh yeah.
The Windows slow down creep.
We all know that.
Yeah.
So if that starts to happen, I will probably get frustrated.
You know how I get like, you know, pour a beer into it or something.
But I want to be careful how I phrase this.
I don't think the Linux community should view WSL as a threat.
I really actually think it's an opportunity, right?
It is a sign that Linux is one.
Now maybe it's bad if you happen to be a Dome developer, right?
Or the elementary OS team or pop OS team.
Yeah.
You know what, Mike, is you're talking about this.
You know what I realized is this is, um, it is a sign of success, just like wine was a
sign of success for Windows.
People want it, right?
That's why Microsoft's investing real time and energy and dev hours into it.
Okay.
Can I come at this from another angle then?
So what deficiency is Windows 10 as a desktop addressing that you have found say in a day
to day pop OS or modern Ubuntu install?
Well, that's an unfair question, right, because I have four Windows applications currently
in the field.
So the deficiency is,
I mean, aside from that, like I'm wondering, is it, is it app, is the, is application compatibility
truly a differentiator for you at this point?
Is there things that Windows 10 is doing better that make you think, gosh, even when I'm not
managing Windows applications that I'm shipping, there's reasons to stay here.
Actually that is a great question.
It turns out that my software application compatibility, other than working on these
native Windows apps, is better on Windows and Linux than it is on Mac.
Because anything I wanted to use, whether it be entertainment or work, there is either
a Linux equivalency, right, or indeed it's a Linux tool that I couldn't use on Windows
before, or that I had to install via homebrew for Mac.
Or if it's a game, it can run near natively with Lutris on Linux.
On Mac, I actually have, like for instance, I am addicted to Magic the Gathering Arena.
Great game.
For those who don't know, it's, in fact, a former host here, Jason, used to play it all
the time, right?
That ran flawlessly on Pop OS.
Doesn't run at all on Mac without some pretty deep wine hackery.
Oh.
Same thing with my MMO of choice, Star Trek Online.
I play it.
Oh, dude, yes.
I play it on Linux.
In fact, I don't play it at all under Windows, and you can't even get it to run on Mac OS.
Even with that crossover and wine and all of those things, it's just not happening on
Mac OS.
So, I mean, for me, and I know this is kind of a sideways way to answer your question,
this experience has shown me, when I eventually settle down again, I'm probably going to distro
hop a little on Linux or stick with Windows 10.
We're probably dual boot, but Mac, you know what, at this point in 2019, I really don't
think it's, I don't think you should need to compromise with your operating system,
which I know sounds like, you know, not nice, but Pop OS is really nice.
Elementary is really nice.
Right?
Ubuntu is nice.
Now, I follow you.
This is the end result of Linux essentially becoming, in a way, a runtime.
And then, like I just said earlier, divorcing the applications from the operating system
or making it possible to run Windows applications on Linux and Linux application on Windows,
all of a sudden, the desktop, assuming you're not subscribed to any particular philosophy,
is a lot more fluid and it matters, in some ways, a lot less even.
Right.
I mean, like, Mac added all that, you know, Exive stuff just to partially to help facilitate
running Docker containers in a VM there.
I run Docker on Mac OS and it runs just fine.
It's got a, there's a nice GUI for it and everything.
It's the craziest thing.
Where do you get that GUI on Linux?
Yeah, right?
It's crazy.
It comes with Docker Compose right there.
Yeah.
Yeah.
I know.
So, I guess my point is that it's just becoming less and less relevant.
Less and less.
And then, when you containerize the applications up in flat packs or snaps, it's at a whole
other level.
Well, let me ask you.
I know we're harping on this, but you guys are, I mean, would it be wrong for me to call
you freedom terrorists?
No.
I would think, yes.
Sort of like, I mean, more like, it's more like a love and peace kind of vibe going on.
Less of like a Greenpeace, you know, bomb something going on.
Okay.
Can I state department spend that then?
Yeah.
Freedom fighters.
Warriors.
Sure.
Revolutionaries.
See, it's less aggressive though, but we're on the path to righteousness.
We're freedom recommenders.
Have you heard about freedom?
Do you have a moment?
Are you free?
Wait.
Are you freedom Jehovah's Witnesses?
Is that what?
I mean, don't you guys feel that you, like, honestly, JB should just be taking a victory
lap here, right?
You won.
We may have bet on the right horse, I suppose.
So, what JB originally sought out to be was really a podcast network about the desktop
of Linux, which-
Oh, well, never mind.
Yeah.
But, you know, things change and evolve, and the network is changing and evolving.
We still cover that probably disproportionately to the actual market size, but it's what we're
all into.
And we are very lucky that more and more of the workloads have come to Linux.
So, that has been very fortunate because people want to know what's going on with it now.
Yeah.
There's a certain spirit of it, I think, that's distilled in the desktop.
I mean, in some ways it is separate, but many of the communities that make both software
co-mingle.
Well, I would say there's honor in fighting a losing battle.
And speaking of losing battles, Wes, how's that Objective-C?
Oh, Mike, I knew you were going to ask about this.
I love these challenges so much.
Oh, yeah.
Okay.
So, you set me on a very different path to the world of Objective-C. And, okay, so I'll
be honest, I didn't go down the complicated route of setting up a Mac OS VM.
Now, that might be something worth trying in the future, but you encouraged me to explore
what other options existed.
And it's been really interesting.
I mean, you know I'm interested in programming languages and Objective-C kind of has some,
I mean, it's been around for a long time.
So, it's got some interesting origins, especially the connection to Smalltalk.
But because I was using the GNU step environment, it kind of felt like a history lesson.
It felt like I was studying a dead language in some ways.
The GNU step?
So, I looked into...
If you want to get a modern GNU step live environment, I believe it was last updated
in 2017.
So, yeah.
I looked into that.
Yeah, but it's packaged up like the, you know, the compiler and the runtimes and stuff, packaged
up in Debian, no problem.
So, I was able to pull those down.
Got a couple of things compiling.
You know, I did Hello World, and as Mike asked, I was playing around with some of the message
passing and stuff, which is, I mean, honestly, I can see why Mike loves Objective-C.
Now, for me, it was kind of a low level, going back to a little lower level of software in
a little bit.
Well, it is, what, 30 years old, isn't it?
Yeah.
But comparing it to C++, as was kind of done at the time, it's remarkably simple.
So, you know, even for needing to have a bunch of sort of inherent complexity, because it
is lower level, you know, it is targeting sort of complicated environments and doing
so in an older style, and running closer to the metal, it's still, I mean, it's still
surprisingly civilized, I would say.
And would you agree with me, Mike?
Is that kind of what you feel about it?
I'm sorry, I'm tearing up because it warms my heart that it's 2019, and I somehow got
someone to do Objective-C.
You know, I find it kind of ironic even that it became popular because of the iPhone, which
is such a modern device.
It's so weird.
It's such a, it's that whole story, and the fact that Java on Android, it's such a...
Those are not, it's not how I would have predicted it going.
Right, you wouldn't think so.
At all.
So it's interesting because one, I actually, I didn't say anything to you while you were
doing it.
I did not expect you to go the GNU step route, because that's actually the harder path.
You could have been helping me this whole time, Mr. Dominic.
Well, no, it's, well, the option was also set up a Mac VM, which I don't know how hard
or easy that would be, right?
So...
Honestly, I do kind of want to, I need one of those anyway, not need, but it would be
fun to have.
I've hackintoshed in the past.
So that's in my book.
Well, I get mine finalized.
Oh, yeah.
Yeah.
I agree with everything you said, and I would even wonder if you could expound more on the,
it felt like going back in time.
Because I actually think Objective-C is a language that is unabashedly from the early
90s.
And I know it was older than that, but really, that's when, yes, you know, there were updates
later on when the iPhone came out, but it's core, it's concepts, the way it thinks about
programming, right?
It's direct ancestor is Smalltalk, right?
It's like Smalltalk and C++, kind of.
But basically, it says that we are object-oriented, but we are a small language, right?
I mean, how did you feel about just the size of the language?
Yeah, it doesn't, you know, it's not super weighed down by a ton of stuff.
And obviously, you know, you get more of that if you're targeting, you know, the Mac ecosystem
and using a bunch of their libraries on top.
But yeah, you know, C was, I think, the first programming language that, like, you could
really count if we don't count Visual Basic Sex, which I don't think we should.
What about Real Basic?
Half counts, half counts.
So it did, you know, it was kind of nice.
All of my more recent, you know, low-level experiments have been playing around with
Rust or I have done some C++ a few years ago, and I don't have a strong desire to go back.
Interesting.
I think I could handle Objective-C. I mean, these days, you know, it probably be, it would
probably be Swift, but it was an interesting contrast because using the message-passing
system it's, and you know, and some of the inheritance from Smalltalk, even for being
a low-level compiled language, it's surprisingly dynamic.
And I think you miss out on a lot of that, for better and for worse.
I mean, there are lots of good things about the extra, you know, static-ness and safety
of Swift, but it's an interesting throwback or, you know, it has such a unique place in
the landscape of programming language design, and I think it's interesting how popular it
got from kind of obscure origins.
I have a couple of questions for you.
So the second question I'll do first, how cool is it that you can go like back in time
with some of this stuff and not, like GnuStep is fairly well-preserved, but not everything
is.
Like, we need to do better at preserving these things and having ways to stand these up.
Well, yeah, I mean, I know like with Smalltalk there's similar things where you can get some
of the images and get them to run, and there's even, I forget the name of it, but there's
some like modern distributions of it.
It is interesting though, because you have different eras of computing, and you can contrast
that with, say, looking back at Android versions, which is like impossible, because so much
of it is online that you just can't really preserve that environment, so it's nice when
you have some of these older languages because they weren't, they just weren't connected
systems, right?
It's all standalone.
As long as you have the source material, and because it was added as part of the GNU project,
you know, that's free, so it's preserved.
It would be so cool if there was like some archive.org style project that would create
like maybe a Linux environment VM snapshot of something in time and then make it available,
and you could just start up the entire environment from that time or something.
Maybe like a little interactive thing you could go through and maybe explore what made
that language unique or explore that environment.
Okay, so my first question was, as somebody who's got no experience at this, object-oriented
seems like it would get very complex after a while, like is that, can you, am I wrong?
Seems like, it seems like for something simple, no problem, you can keep the whole thing in
your head, but you start to get to something that's fairly, even somewhat complicated,
it seems like it would just become a massive thing to keep track of that you wouldn't be
able to keep it all in your head.
That's why FP exists.
What is FP?
Yeah, it sounds like, it sounds like you should stay tuned for the next episode of Coderradio,
Chris, because we're going to have a little conversation about functional programming
and object-oriented programming and how they fit together and maybe how to combine the
paradigms a bit.
I like that.
Hey guys, good idea.
Well played.
Well played.
Interestingly, I think Objective-C is kind of neat because like, again, comparing it
to C++, the message passing style is just, it just feels a little simpler.
So I can see that aiding, and then there's just lots of, you know, you get design patterns
and paradigms that one applies for certain abstractions to try to, you know, detangle
some of that mess.
So do you think for a junior developer, there would be any value in saying, you know what,
just for like a weekend, stand up a good new step environment on your arch distro, because
that's what you all seem to run and, you know, go back in time?
I mean, I got Debian 10 on here.
I'm on Debian.
Oh, Debian.
You know what, you're on the cutting edge, man, Debian.
Debian 10 just came out this weekend.
I know.
See?
Damn it, they got me again.
That's amazing.
Hey, I'm running Windows.
Come on.
You know, I would say if they're interested in doing iOS development, yeah, maybe.
Like it could be interesting from that perspective as a way to get the toe in the water.
If you're just interested from like the historical language stuff, maybe it's better to just
play with Smalltalk directly.
Interesting.
Okay.
But I mean, it's easy enough.
No, I don't think I wouldn't dissuade someone from doing it.
I certainly enjoyed it.
And it might be worthwhile.
I mean, I guess even with Swift, it's good to know a little objectivity, right?
Just enough to read it, let's say.
Oh, I think that's definitely the case.
Yeah.
That's not going away anytime soon.
You're working on a project that's been around for a little bit.
Arm six, arm transition.
You know, I was also pretty impressed with, I mean, one, it was a stark reminder of the
weird history Apple's had with the open source community and some of the license battles
and the transition away from GPL software as they distribute it and LLVM and its rise
to fame.
Like all of that happens in the Objective-C history as well, right?
It's part and parcel of that.
Yep.
It's tied to Apple's history.
So it's fun to look at that way, too.
It's the same reason you can't have a good version of Bash on Mac.
All right, well, do we know what Mike's challenge is going to be?
Oh, no.
Oh, yes, we do.
Now just a little public service announcement.
Next week's episode, because of travel, will be prerecorded.
So the challenge will be taking a week off.
That's right.
So there'll be a break there because-
Yeah, Mike's going to get a little extra time.
Yeah, we're about to record next week's episode in just a little bit.
Oh, I won't be here, but they are.
Yeah, it'll be.
Actually I think it's going to fit in just fine.
As you'll see, this is perhaps overdue, but Mike, you got me with Objective-C. So I'm
going to give you something close to my own heart, Clojure is your choice this week.
Fair enough.
I did this to myself.
Okay.
Yeah.
Yeah.
So do you want me to give you some starting resources or should I leave you to fend in
the fields of Google?
You know what?
Leave me in the woods because I want to see someone who doesn't know Clojure, where do
they go?
Okay.
Yeah, actually I'm going to be interested to see what you find.
You might come across to Westpain Talk if you look hard enough.
Oh, now I'll be looking for it.
I love it.
You both held on to these particular choices much longer than I expected, kept your powder
dry for a while.
It's all about the slow play.
This is the peak now.
Now you're just going to be throwing random things at each other.
Now we're going to go for the most annoying language as possible after this, I think.
How about the old-scat language?
Oh yeah, I mean brain could be included as well.
That's a classic.
Wonderful.
Hey guys, I always appreciate letting me hang out for a bit.
It's always nice.
Oh, it's fun.
Thank you for joining us.
Oh no, you quit it.
Did you know that we have a great website where people can get all kinds of resources?
I think it's coder.show.
Coder.show, you can find our RSS feed, you can find ways to contact us, and you can find
the whole back catalog of Coder Radio episodes, and I mean, there's a whole bunch of them,
so go start listening.
You know, we should take a moment too, Mike, if you've got things going on, anything you
want to mention or send the listeners, take a moment because we've got a space right here
just for you to let them know about it.
Oh, beautiful.
Check out at Team Unico on Twitter and check out themadbotter.com.
We're going to have some cool stuff in about, well I guess since we're doing a time delay,
four weeks.
Oh.
It's better just to follow and see what happens over there.
Then you know, yeah.
But you can always bookmark it, just check back in a couple of weeks.
Easily done.
I'll plug, see what do I want, I'll plug at Chris Elias, and also, I'm going to plug
user air.
Such a good show.
That is like, such a good show.
Go check out the most recent episode, and then if you like it, go check out the back
catalog.
But oh man, such a good show.
So we don't give it enough attention.
It's great, yeah.
And it's a fun diversion, it's a little different than a lot of the other shows on the network,
so if you're tired of hearing about tech news, go get some real life news.
Error.show.
I'm on Twitter too, I'm at WestPain.
What?
Really?
I'm going to go plug your show, Linux Action News.
I really enjoyed this week's episode, especially your well-reasoned breakdown of this whole
DNS over HTTPS debacle.
Oh, Mozilla's an evil Mozilla.
Some told me we're going to talk more about this topic.
Yeah, yeah.
Yeah, Internet the Mozilla villain is really all kind of just way out there, and so it
really all comes down to something that you wouldn't expect, and I think people are like
now realizing there's something kind of big coming down the pipe too.
Yeah, that was a fascinating episode.
Thank you, LinuxActionNews.com.
Hey, you can find all the other shows over at jupiterpodcasting.com.
Thank you all for joining us, and we'll see you next week.

This is KOTORadio, episode 329, for October 8th, 2018.
Hi, everyone, and welcome to KOTORadio, Jupiter Broadcasting's weekly talk show, taking a pragmatic look at the art and the business of software development and its related technologies.
Recorded here live in the beautiful Pacific Northwest, my name is Chris, and joining us every single week is the man on a mission.
That wizard crawling in and out of airplanes, sometimes not so successfully, it's our host, Mr. Dominic.
Hello, Mike.
Hello, Chris, and let me tell you a story about ladders into fighter plane cockpits.
Doesn't sound like it's your thing, from what I hear.
So, I've done it many times.
You have? That's strange.
Yes, it's not that strange. Come on, man, griffinradar.com, buddy, come on.
Yeah, no, I know. It's just, it's unusual for most people.
But when someone calls your name and you have a tablet in one hand, you should wave with the hand you have the tablet in, not the hand you're holding on to the ladder with.
Oh, yeah, that's a good, that's a good pro tip.
That's a pro tip. That's a, yeah, so.
So you fell out, you fell out of an airplane cockpit before the show, is what you're telling me?
That's exactly what happened, actually.
And then on the way home, after.
I got stuck in traffic. My back is killing me, literally right now. My friend Samuel Adams is helping me out, but my back.
I might have a brief trip to the hospital after the show.
You know, I can tell you something. It only gets worse as you get older.
I've learned, you know, because right now, like, I'm healing pretty good because I'm in my 30s.
And you're like, yeah, you're really lucky you're in your 30s.
I'm like, yeah, OK, what else do I need to get out of my 30s too?
So it only gets worse from here, they tell me.
So this is so when we started the show, I was a men's medium. I just want to say this, right?
Yeah, now I'm in Excel. Yeah.
And I feel like my ability we've been doing the show since 2012 in the last six years to take physical damage has like diminished greatly.
Right. Yeah. Like a seven foot fall, granted landing flat on your back would not have hurt as much as maybe I'm wrong.
Like, you know, you have rose colored glasses and everything about how it used to be.
But now you're you're heavier. So you you you fall faster. I don't know.
Well, and your back is already torqued because like I carry carrying more.
I'm like 18 months pregnant. Right. Like the beer belly of Satan over here.
You know, I I was I was on I was on track.
I was down like twenty five pounds when this is not what today's topic is about.
We have a great show lined up, but just what it should be.
This is what I feel like this is a problem. It is.
Many of our listeners have you know what it is, is my ability to maintain a healthy weight and eating style really is greatly diminished when I'm stressed out.
And I know this is like the most obvious statement that people hear all the time.
But it took me a while to realize that I I really saw the difference as I took on a lot more stress over the last few years.
I saw I just saw a huge increase in my weight again and I finally worked it down to a good healthy level.
And it really is stress. It changes the chemical makeup of your brain and your body and it just packs on the weight.
And it's it's one of those things where you really you can try to have self-control, but that's almost a little diminished when you're under a lot of pressure and stress.
And you're already oh sure you're already using your self-control for other things. And so it's just yeah.
Well, you know, then the problem is, I mean, I don't know if I mentioned this last week or rather Friday on the show.
Next, not next week, the following week, I'm I'm in one week flying to California, then to Texas, back home for a few days to do the show.
And then I'm flying to New Jersey again. So when you're traveling like this, I mean, you know this better than anybody, Chris.
When you're traveling, you're not sitting down alone at like a nice restaurant getting like a kale salad.
Right. What are you eating, hamburgers, hot dogs? Anything you can, especially depending on time.
That's cheap, especially if you know. Yeah. Yeah. Yeah. Yeah. Oh, yeah, for sure. Yeah. Because that can be such a massive expense because when you're at home during that same time period,
you're grocery shopping and you're getting a lot more for your dollar. Generally, when you're traveling, you're everything's eating out.
All my and my wife still grocery shopping for her herself. Right.
My son. So it's not like that bill went away. It's this is all in addition to. Yeah. So, yeah, I think, you know what? I blame Southwest Airlines for this.
It's even worse if you travel by road because you're really eating what's at gas stations in the RV.
We can make. Oh, yeah. But yeah. Yeah. Gas station. Yeah. So that's not what we're here to talk about.
Us being old men who are slowly killing ourselves. Right. Right. No, we are your canary in the coal mines out there for if you're going in this direction. Stop now.
All right. So we've got a couple of bits of feedback and then we'll get into the events of the week.
But J.K. eighty nine wrote and he said regarding Macbook, Mike's MacBook Pro mishap. That's pretty clever, actually.
That's a good that's a good alliteration. I got to give it up to that. That's not that. Yeah, that's yeah.
This is why I make sure to do regular backups, one via time machine and one via carbon copy cloner.
If something goes awry, I can get back up and running with the desired configuration relatively quickly.
So J.K. is the one thing the carbon copy cloner tip is a great one.
If you are on a Mac workflow, you got to you got to spend the money and get carbon copy cloner because it will take an exact duplicate copy of your Mac hard drive.
And it can save it to an image or an external hard drive. In the case of an external hard drive, I suppose, depending on the Mac, I haven't I don't have any recent experience with this.
But in the case in the past with an external hard drive, you could actually then boot the Mac from that external hard drive and continue to work right from when you last took that snapshot.
And that is when you think about I'm under a deadline, even if it's a little bit slower to, say, run off a USB three drive.
The fact that you have all of the applications completely exactly the way they were on the failed drive.
It's totally worth eating a little bit of performance until you can get things back up and running.
It's essentially like DD on Linux or Clonzilla on the Linux side.
But carbon copy cloner, I actually believe works at the file system level and it's super useful.
I think it's only like 40 bucks. It's totally worth it. It's totally worth it for that job.
So if you keep up with the Mac workflow, I'd say get yourself an external drive and a copy of carbon copy cloner.
Then you can at least boot off that from any other Mac, too. That's the other thing, at least in the past.
No, yeah, that works. I mean, real time update. Mac and cloud has been fabulous.
Really? Really? Yeah. You know what? I am in Windows or elementary OS and Windows.
I'm running one mission critical application, Chris.
Visual Studio. Nope. Magic the gathering arena dot.
Of course. Of course. Right. Of course. Yeah. No, but seriously, this just having one little Mac server in the cloud.
Now, this solution is that the writer's suggestion is probably better.
But now that I've already set everything up in the cloud, it's actually great.
Like, I can take my Gallego on a trip if I don't manage to pour beer into it.
What is the remote log in mechanism? Is it a Web page? Is it an app?
It is a Web page, but it's one of those you can tell.
It's like they must have written some gooey on top of basically remote host or whatever Mac OS calls that.
Yeah. Although one scary thing is Mac Apple is now canceling Mac OS server.
Right. Essentially. Yeah. So, yeah, like, I don't know how long this is going to last.
No, they'll leave the remote VNC stuff in there. Not only is it a pretty good thing.
So, yeah, not only is it a decent implementation, but they're still going to make their classroom suite management tools, which rely heavily on that.
That's what I thought. Right. The education stuff. But this is actually working just fine.
I mean, I have been working mostly in elementary or pop, depending on where I am and doing my Magic the Gathering needs on Windows.
That's fascinating. Now, do they have bandwidth limits and stuff like that? Could you suck down a ton of data or?
So, they have a specialty plan for folks using a Visual Studio App Center that they charge you a flat fee.
But the only things you can do are those things that you would need to do for FIIA's App Center.
But all I need to do is code signing. Right. So, it's not like I'm like wanting to run Mac OS as a remote remote host.
Yeah. I just want to code sign builds and send them to people.
Yeah. It doesn't really specify looking at the it doesn't really specify looking at the specs.
It just says you can get a hundred megabit port speed upgradable to one gigabit.
But doesn't say anything about the total like transfer amount or anything like that.
Curious. Curious. Well, there you go. It's cool. I'm glad that's working out for you.
That's pretty nice. That's got to make travel a little simpler if it continues to work. That's good.
All right. So, one more bit of feedback. This one comes in from Wasabi Burger and this one's for me.
He says Chris last there is a Firefox extension called text contrast for dark themes that fixes the issue of having black fonts with dark backgrounds in dark themes.
Thank you, Wasabi Burger. I didn't even really think anybody would ever catch the fact that I complained about that.
It's an issue in Firefox. If you're using dark theme mode and when you go to use a text field box, it's too dark and the text is like gray on black.
You can use this text contrast theme and it will fix that issue for you. It's just one of those small little niggly things I didn't expect anybody to have a solution for.
And then Wasabi Burger wrote in and nailed it. I'll have a link to that if you want that for Firefox at coder.show slash 329.
All right. Now, moving forward with sort of the follow up and perhaps starting a new thread in the show for a little bit.
You were tweeting about the Azure Sphere dev kit, which I did a little deep dive over the weekend on.
And you say you're thinking about evaluating it for a project, trying to get a sense of what the actual developer experience is and how dependent it is on Azure right now.
So all really good questions. Really quick recap here.
The Azure Sphere devices are the hardware devices that Microsoft announced back in March.
I believe it was around March that are devices that run their own custom Linux OS.
That's the Azure Sphere OS devices. And the reason why it's called Azure Sphere is because it's one part hardware.
Which they call the secured MCU, one part OS, which is the Azure Sphere OS, the Linux OS and the one part cloud security.
So they are very much tied in with a cloud management infrastructure design in mind.
And that's really the fundamental way of how you deploy and develop these machines.
You write your applications and its logic in C using APIs that are provided by the Azure Sphere SDK.
This is compiled into an application binary using GCC.
And as part of the build process, tools that are part of Azure Sphere SDK are used to generate a signed image or a dot image package.
They will then be deployed to the development board either through Azure Sphere or there is a way to do it over USB.
But I think for now it's not very clear in their documentation.
You have to deploy through Azure Sphere security service over the air, deployment service.
So I got some clarification on that bit already actually.
Okay, good.
So my friendly Microsoft rep down here in Tampa, it is completely possible right now to deploy via USB.
Yeah, right. But I couldn't see anything in their docs talk about Azure Sphere.
So I did it on a TI board, which is not officially supported.
But because I have a closet full of TI boards for something else that we won't talk about, it's a tremendous pain in the ass.
So first of all, when I hear C and I hear GCC.
Yeah, what?
And then someone tells me Windows 10 Visual Studio.
I told the bartender to stop serving me.
Well, that's the – you're bearing the lead right there is the fact that this thing is dependent on a Visual Studio and Windows 10 is a bit of a downer right now.
I don't know if that's technically true.
I think you could probably use this thing on any OS if you really were.
So they did.
But through the grapevine, unofficially, I've heard it is not a technical limitation.
It's a they needed to ship limitation.
And I think there's a driver for Windows 10 involved and all of that.
Because if you think about the tool chain here, NCC, GCC and, you know, boards that run Linux.
Well, Mac for all of our, you know, fancy coffee drinking Mac users and all of our Linux hippies.
There's no reason you can't do that.
Right. And here's something else they put in the in the like getting to understand Azure Sphere OS dev kit boards towards the bottom of the docks.
They say, while the process of connecting an Azure Sphere device to the Azure IoT hub is simple.
You could also connect to other Web services running online or on premises using a library such as curl.
So you could just, you know, you could have this thing of just curl URLs and pull things down if you really want to.
So that's you could at least build something with with that.
So this is a weird situation.
And, you know, when I've been talking to my rep.
It is both very, very open and very, very pro Microsoft.
And it seems like the strategy they've taken is the path of least resistance or the path of least work is you just go all in on Azure services from Microsoft.
But you can totally do your own service hosted on DO or AWS or whatever the hell you want.
You just have to implement these libraries and it works.
So this is I don't even you know, Chris, you remember the open core phase of life a couple of years ago.
Oh, yeah. Yeah. I mean, there's still some there's still some of that going around, but it's it's definitely not in vogue anymore.
Right. That's this is not even open cord. This is like kind of open source.
But if you want an easy way out, use our proprietary Azure technology and it just works well.
And I have to say, go ahead. No, I want to hear what you have to say.
I've done it both ways. I mean, I have one of these dev kits. I'm thinking of buying a few more, a few hundred more.
And it's it's easier if you just use their tooling. I don't even know what to say.
But there is, you know, from writing some code for this, you know, the C code you're writing, Chris, is just I mean, this is ANSI C, right?
This is there's no that I can see so far. Proprietary extensions, the GCC you're running is ANSI GCC.
There is no it's, you know, it's not like the MSC plus plus compiler. That's what I'm getting at.
Yep. I follow you. I don't know why the S code on Linux or Mac can't do this.
Yeah. And I could. You totally could. In fact, they will say you could text editor.
Right. I wrote most of the code for my little demo on this code on elementary.
I'm so sorry, Pop OS. And I mean, it was fine. But when I wanted to flash it to the board, I had to, you know, reboot into Windows, open VS 2017 and, you know, deploy, deploy.
That may be a failing on my part where I just haven't taken the time to say, well, how does this actually work? Because I am positive somebody is going to be able to write a little app or a script that can do it from Linux.
But. I don't know what to think about this, because in a lot of ways. This seems pretty pro Linux.
I mean, I yeah, you have to use VS code for I'm sorry, Visual Studio proper for the easy way out today.
But we're talking NCC, the GCC compiler, Linux kernel on the device. In fact, I would have preferred dot net core to be honest with you.
And there's a good chance that these Azure services that are the cloud aspect of this are also running on Linux.
So this is I like to go back in time if we could for a second.
The hell out of here. If we go to last week's episode or last last episode, I was I was getting pretty hyped about how Microsoft could really run away with the whole.
Boy, I need a good term for it, like the like the new Microsoft development ecosystem where it's you think about think about the development process for a shop that decides they want to use the Azure sphere SDK.
So they start with a project that they probably are potentially creating in Visual Studio or Visual Studio code.
They then host that project on GitHub, which is owned by Microsoft.
They then integrate with the Azure studios, perhaps the App Center and other things.
Which then integrates with Azure sphere, which then starts deploying to these hardware devices.
So from the first line of code to the publishing.
The checking the QA issue tracking deployment to the cloud deployment to the edge device, it all happens in the Microsoft ecosystem.
And you have to imagine that if this is the first preview board, this is a developer preview board, which they announced in March and are shipping now in October.
That's a pretty short time window for a company the size of Microsoft launching a new product category like this.
It's almost unbelievable. Actually, it's a hardware and software combination that is across multiple projects.
There's obviously the Azure end of it. There's the Visual Studio end of it. There's a product marketing end of it.
There's the hardware shipping end of it. There's the working with the third party shipment fulfillment centers that are the traditional outlets for devices like this that is outside their typical domain.
There's a lot happening here with this very fast for them. And this is the beginning. This is the preview board.
So you could see a future where they have multiple boards to choose from for different kinds of use cases.
And they have almost a Amazon skill like interface to be able to click and drag and build the functionality. You need these things to do right.
Well, you know what? I hate to say this word because I just I just don't want to read the email.
But theoretically, if C is the language for Azure spheres, there is no reason you could you couldn't have.
Chris, should I say it? I don't want to give it to them. No, I don't know the monsters. You got to do it.
There's absolutely no reason that you couldn't write this crap in Rust.
I almost I almost didn't want to talk about this today because I feel like, oh, jeez, my Microsoft rep listens to the show.
He's not going to like this. But I remember Microsoft from the late 90s, as I'm sure you do.
I can't believe this is just this open, right?
This Linux see this. It seems I don't know. I feel I'm waiting for the trap to be sprung, I guess.
I think a lot of people from from the good old days feel that way.
I you know, I really had it. I had a deep hatred for Microsoft in the 90s.
I know it was the injustice of my young time when I was when I was younger.
You know, high school and, you know, five, 10 years after that, I don't know, for a while until until about five years ago.
Now I started to fade. But I was I was in a position several times where I watched Microsoft abuse their position of power.
And it enraged me. And so I got I was I was the kind of guy where like if somebody was somewhat savvy,
like a sophisticated consumer and they were choosing to buy Windows, I would judge them.
Like, how could you? You should know better. Get a Mac, get Linux.
And I was I was a proponent of BOS. I was a proponent of Linux.
I anything that wasn't Windows, because I had watched them come in and play hardball in a school district and try to.
And I've told the story before on the show. Try to threaten them with a massive financial burden if they didn't remove all the Linux systems from the network.
They wanted every Linux box off the network immediately or a bunch of software that they had donated and future licensing,
which was a huge point of pride for the school district and access to the NT certification program where the certifications were paid for the students by Microsoft.
So the students could go in and take the NT certification exams for free.
So our school was producing certified NT administrators out of high school.
And one of the youngest employees ever hired by Microsoft was a student out of my class.
And so this was a huge point of pride for the school district.
And when Microsoft discovered that we were using Linux to solve some network routing issues,
they lost it and they began to threaten us with bills that quickly exceeded three hundred thousand dollars.
And for a school district that was trash cap, cash strapped, that was devastating.
And I watched them abuse their position of monopoly to force OEMs not to deploy Linux when the hype was super strong.
And I hated them for that. I hated them.
Well, you know, NT server was awful. So, I mean, they deserve that.
And what do you think Windows 10 is based off, my friend?
You know what? It runs Magic the Gathering just fine.
And you know what? Diablo 2 actually runs in wine just fine.
It's so nice when you just want all the Blizzard games to run.
Anyways, my point is I was deeply angry at them for a very long time and it sort of became one of my causes.
Like, this was the cause of my time. This is what I picked up arms for and fought against.
And now I stand on the mic more frequently than I would like and probably than the audience would like.
And I praise and I'm impressed by what Microsoft is doing.
And the thing is, I have conversations with people inside the company that I'm not allowed to share because they're friends and family.
And it's a legitimate shift. It's not just talk. Like, it's really happening.
And I've been inside Microsoft and interviewed people on the record and then seen it firsthand.
And it's just, it is incredible to see it. And it's here that you see it the best, the most.
Like, the arm of Microsoft that's launching a game streaming service called Project X or the arm that's responsible for Office 365.
I don't have, they're fine. Not as big of a fan of it.
But to watch the work they're doing in the development community and in the open source community in particular has really shifted me.
And now I'm impressed.
Yeah. So if I can take this in a different direction or the same direction really.
A lot of tech in the chat asked me why I've become more of an, basically an open source.
I won't say hippie because I don't think I'm at the hippie level, but.
You seem to take it from a practical pragmatist. Like this is, I've arrived here, I've tried other things.
Yeah, there's a non practical perspective. I have a young son, as you long time listeners will know.
Chris certainly knows.
And, you know, I am slightly younger than you.
But one thing that was very helpful to me in learning how to work computers was, you know, reading the old Java guys, right?
Or rather the C++ guys. Reading the old, you know, remember Shareware?
I mean, I was a teenager when that came out.
Being able to tinker with the operating system.
Tinker.
Even old Macs.
Or even the game. Even a video game. I remember tinkering with the old Shareware.
Sure.
Right?
Figuring out how to get it to do certain things or making multiple copies of it even.
I mean, if you remember, my degree for folks who have been listening a long time.
I do have a bachelor's degree, but it's in medieval literature.
So if you need someone to write a poem for your wife, I'm your man.
But, like, I learned computer programming by hacking Diablo.
Right? And hacking in the old way, not the new, you know, go to jail way.
Like, you know, changing the colors, doing whatever.
I learned by breaking my operating system and then trying to fix it before my parents got me in trouble for breaking the computer.
Oh, I opened up one of my mother's computers because I wanted RAM.
So I harvest it.
I'm not saying this in case she actually listens one day.
I have a slight recollection of doing the same and thinking they'll never notice.
They'll never know.
Anything from their 64K, right?
It was it was it was it was an accessibility in a different kind of way.
Like modern devices are easier to use and accessible to way more people and have ubiquitous connectivity for the most part.
But yet at the same time, you can't learn by tinkering.
You can learn by navigating. You can become an expert of the systems and the UI, but you can't become an expert like at a deeper level.
So as I smashed my headphones into the microphone, which I'm sure our wonderful producer will take out,
I look to my left and I have a board on my desk that is a controller for sunlight panels for solar panels.
I tech. This is straight out of the 1980s.
Seriously, this is. You're laughing, I know.
No, I picture it. It's just some it's some basic stuff.
It's just a blue board, right? I have interviewed three kids this week.
And I asked them a simple question. Are you ready for my question, Chris?
Can you guess my question? What is the one basic software development question I might have asked?
You mean besides like like a test, like you're having them look at this board?
No, it's not FizzBuzz. Yeah, I had them take a look at not this board.
I didn't take a look at a TI board that we're using for one of our upcoming products.
Inappropriate. Hmm. I see. And you having them look at this board was the first thing you asked them.
I would ask them, how do you connect this to the computer? That would be my first question.
Bing, Bing, Bing. You got it in one. Please tell me the right guy.
Please tell me. Please tell me. They say, how about what?
I could tell you what this said, but you're going to be very sad. OK, OK, all right.
Well, then I'll OK, I'll change my answer and I'll say you take a guess.
You connect to it over Bluetooth. Oh, it's even worse. They said Wi-Fi.
Really? Although I think Wi-Fi is worse.
Yeah, like the idea of just like, you know, TCP ports, right?
Just like having simple ports and like, you know, yeah, it's all set up ready to go.
It's just got a whole OS on there already connected to the Wi-Fi network listening for your connection.
Yeah, it was it was like pulling teeth.
But yeah, I feel like and you know, I know I often complain about young kids I interview.
I don't think it's their fault. I think it's because, you know, when I buy a laptop, when I used to buy stuff,
I never bought Apple when I was young, but I was poor.
We used to buy like, you know, the gateways. We used to go to Best Buy at six in the morning and stand in line to get the gateway computer for me.
But you could open that thing up and change the parts, right? That was a completely open system.
Yeah, same with Compaq, same with HP at the time.
Now you buy a computer, everything's glued on.
How are how are young folks supposed and this is not the topic for today, but I just screwed up Chris's show.
How are folks supposed to learn how this stuff actually works?
You know, and I was trained as a Java developer, but I have to tell you, knowing how flip flops work and, you know,
just basic like concurrency and memory management is super frankly mandatory.
And if you don't I don't know if you've never like opened up a computer like I will give Dell some credit here and we have no sponsors anymore.
So I can say whatever the hell I want. Right, Chris? Boom.
Within reason, I have a Dell Optiplex tower here that is running a flight simulator.
Granted, because I bought AMD, not Nvidia, it's not running it very well.
It frankly, it cries. But you know what?
I could pop that baby open, slapping Nvidia in there tomorrow, right?
If I'm willing to send the money. Totally.
You buy an Apple, you buy an HP laptop, you can't replace anything.
I mean, I don't I guess I don't understand how we expect, you know,
you and I are grumpy old men and we expect these young people to learn everything.
How can we expect that of them when they don't have the opportunity that we had to just pop open the box?
And hey, I mean, I replaced the processor once. It was a pain in the ass.
I love doing it. I loved building machines back in the day. I'll tell you what I think.
Right. But back in the day, right? Back in the day.
I don't. Well, first of all, I don't mean to I don't mean to disparage because I know there's this isn't true for every every young person.
But these young kids aren't as interested in the technology.
I have told the story again, but 10 years ago, way more than 10 years now, way more.
But I worked at a school district and we had three computer labs that were full of people learning about computers.
When I was in high school, we had three computer labs.
Ten years later, I came back to that same school district as a contract employee to do some work with their I.T.
department and they didn't have any computer labs left.
They had a department where there was a T.A.
set up for about seven kids who were interested in computers and they just worked with the I.T.
guy as a as a T.A.
arrangement. There has been a massive decline in interest in how the technology works.
But almost all of those kids had a device that we had to add to the Wi-Fi network, you know, like a iPod touch or an Android or iPhone.
So they all had access to technology.
So in a way, we've traded innate curiosity for building technology with massive access to completely built technology.
And so they're sort of starting at a different ground level now.
They're starting at a much higher abstraction in both software and hardware.
And they have things that are massively more accessible to them.
Like we've lamented before on the show, like droplets, they can create servers.
We can, too. We have access to the same tools.
We can all now create servers within seconds.
And we can submit apps up to an app store that immediately get published around a huge CDN and get placement in a store that has all the payment processing set up for them.
Still not the case with Apple. You used to have to build all that stuff.
Like all of these things you used to have to build are all built now and commercialized.
And it's just a matter of deciding who you want to pay or how much you can pay or what you want to build versus use.
And it's a totally different level of access.
It's ubiquitous now, whereas before it kind of had to build your way there.
And I will grant you. It means you learned of stronger fundamentals about the technology.
But it seems like we get along because this same pattern is repeated throughout all of history.
Look at the radio. When my when my dad was a kid, it was common for people to build radios as a hobby.
And you knew how to take things apart and build a radio. Nobody builds radios anymore for the most part.
Just same thing with cars. I look under my hood of my GTI and it basically looks like a MacBook in there.
And I get a push notification when I have a low air tire thing.
Like it's it's a totally different level versus an old truck out in the field where are actually even my RV.
I open up the engine compartment to my RV and it's huge and I can kind of just figure out what everything does.
I've never changed oil on anything in my life until I got an RV and they went, oh, that's where the oil goes.
That's where the oil drains. This is where I put the bucket. And that's the oil filter.
Oh, well, I can do this. This is easy because it's all out and big and accessible.
And we go through these changes in technology cycles and we the next generations stand on the shoulders of the previous giants.
And so while it's a little disappointing and it makes it seem like they don't understand the fundamentals, I think it's just part of the process.
So I agree with everything you've said, but let me ask you one question.
When push comes to shove, don't you think a software engineer who understands, you know, let's not go down to the right.
You know what I'm going at, right? Yeah, let's just talk a memory man. Let's forget about flip flops.
Let's forget about electrical engineering. Let's just say basic computer science, memory management, compilers, things like that.
Don't you think he or she has an advantage over someone who, you know, frankly, doesn't.
I at least think they have a better innate, intuitive understanding of how things work and maybe why things don't work right or don't perform right.
I don't know, though, if it gives them a massive advantage.
If if everybody's using the same abstracted tool, you know, if you're dragging blocks in a cloud provider.
So this is where I'm going to push back. When we started the show, one of my big cash cows was rewriting Objective C code.
Remember, this is pre arc. This is 2012, right?
Rewriting Objective C code for companies that had hired Java developers that claim to know Objective C, but never work in an environment without a garbage collector.
Like that was a gold mine for me. Now, then arc came out and things were different.
But at the time, if we go back to 2012, you know, an environment that doesn't have a GC was an absolute gold mine for me because I understood under the hood how, you know,
basic things like Malik, I mean, in Objective C, they abstracted to retain release.
But, you know, basically your normal, you know, what they call reference counting garbage collection.
I don't know, I think there's still value right as we go to these Azure spheres, as we go to do these embedded systems.
I think some of that maybe you don't need to know about flip flops, maybe you don't need to know about transistors.
But, God, I think you do need to know about how like memory is managed on a system.
I think you need to know how, you know, instructions are encoded by the compiler into binary.
Maybe I'm just being cranky or whatever.
No, I completely agree with you.
But, you know, I got to imagine this is the same issue that mechanics face and a lot of other trades that deal with a level of expertise that the better you understand that the fundamentals of how an engine operates.
And I think it's a similar thing.
And it's, I don't know, it's, you know, what it feels like is it makes me feel like everything is just getting worse, like entropy is real and the universe is just slowly getting more and more chaotic and more abstract.
Exactly.
So, I prefer not to go there, instead think, well, we've carried on for so long, you know, we still have radios in our cars that work.
And so far, every time I've gone out with cars.
Or as the Black Knight might say, it's just a flesh wound.
Yeah.
Hey, you know, before we go too far, there was a little back and forth this week between you and the audience about the confusion around JDK 11 and really just sort of Oracle's nonsense communication.
So you were dispelling some Java FUD, hashtag Java FUD on Twitter, and I haven't really followed this very closely, so I can't speak very intelligently on this, but my understanding is, as I think, sometime, somewhat recently, was there a license change or something that made it confusing?
What's going on here, Mr. Dominic?
Yeah, Oracle...
Fill me in.
Oracle did something moderately annoying, but then their communications was straight up evil.
That's weird.
That doesn't sound like Oracle at all.
Hmm.
So...
Really?
So, like, I want to start off by saying the answer to this problem is just use OpenJDK.
You can use it on Android now.
I know that migration can be hard if you have older enterprise applications, but, you know, just use OpenJDK.
Like, if you can somehow con your manager into doing it, you should do it.
So, Oracle decided they wanted to make money, but I am not an attorney, so I'm not going to go into the details.
Okay.
But they released a very complicated statement that basically says, in some cases, you can continue using Oracle JDK 11 as you have used 10, so on and so forth.
And in some, you can't.
So, my small business answer to that problem is move to the OpenJDK.
Yeah.
Right?
Like, that's the simplest solution to the problem.
The reality is Oracle is basically trying to monetize Java.
And if you work for Oracle and you want to dispute this, please do.
But I have spent a lot of time in the last few weeks reading the documentation you all put out and talking to very, very, very concerned developers in your community who don't know what the hell you're doing, frankly.
This is weird.
This is one of those situations that, even if it's all benign, the way it was put out there doesn't feel good.
This is always the fear when Oracle buys an important property like this.
This is always the fear of what's going to happen.
It took them a lot longer than I expected, I got to say.
They showed real restraint here.
So, the rule of thumb here is, if you can, jump over to OpenJDK as fast as possible.
That's really the answer.
That is the answer.
I mean, it's weird.
To be fair to Oracle, which just doesn't feel right, they are not overtly charging for JDK 11.
But they're potentially assessing you for liability later.
This reminds me of one of the – like Q, not to bring this up again because I said I wouldn't, but you know.
Here we go.
This is one of those situations where it's like, we might decide that you're violating our license and therefore have to pay us, which, yeah.
I just want to tell you guys,.NET Core or OpenJDK, they're both great.
You'll be fine.
This has all been getting weird since the lawsuit with Google.
This has all been getting weird.
Well, this is all about Google, right?
I mean, at the end of the day, this is all about, you know, Sun didn't know how to make money.
Oracle is frankly obsessed with money, so.
Yeah.
Well, one more for the hoopla before we get out of here.
Those APIs.
You know how Google Plus was never really famous for having a very great developer API?
Well, it turns out the APIs they did have –
Wait, you mean Facebook?
Yeah, I'm talking Google Plus.
Turns out the limited APIs they did have caused them some problems, and today Google is announcing that it is sunsetting Google Plus.
The consumer version of Google Plus currently has low usage, they write on their blog, and the engagement –
90% of the engagement on Google Plus is less than five seconds.
So there's this Project Strobe.
This is how Google handles a data leak, is they wrap it all up with some really strong branding and marketing.
So Google has launched Project Strobe, and Project Strobe is protecting your data and improving their third-party APIs.
You see, old Google was doing the responsible thing, and they were reviewing their APIs, and they realized, heck, we have a bug here.
We got ourselves a bug, it's existed since 2015.
It's amazing.
Yeah.
You see, the data, though, that was leaked was limited to static, optional Google Plus profile fields, including names, email, address, occupation, gender, and age.
It does not include any other data you may have posted or connected to Google Plus, or any other Google service like messages, account data, phone numbers, or G Suite content.
They say they discovered and immediately patched the bug on March of 2018.
They believe – get ready for this – it occurred after a launch as a result of the API's interaction with subsequent Google Plus code changes.
Speaking of testing, yikes.
They say the review did highlight the significant challenges in creating and maintaining a successful Google Plus that meets consumers' expectations.
Given these challenges and the very low usage of the consumer version of Google Plus, we've decided to sunset the consumer version of Google Plus.
We will implement this wind-down over a 10-month period slated for completion by the end of next August.
Google Plus is dead, and it had a bug that could potentially have leaked data.
They don't know if anybody took advantage of it.
But Project Strobe is here, and Google Plus is going away.
And it's, I don't know, about four years too late, I guess.
I just thought at this point they were just going to keep it limping along forever.
I really did.
I was like, geez, if they haven't killed it yet.
What do you think of this?
Google has discovered their own data leak related to a code change that then impacted the way an API behaved.
Oops.
Are you muted over there?
Where are you?
Come back.
Yeah, it's problematic.
I mean, the question comes down to what was compromised during the time period before, then, and now.
Right.
So many services and so many APIs that they just have hanging out there.
It's good that they're doing this audit.
Well, Google Plus could also mean Gmail, right?
Your Google account is your Google account.
They claim that was not the case, that it only affected information that you plugged into the profile.
It might not have been public information, but it was only that information.
Yikes, though.
I wonder what it means for applications that have integrated with Google Plus for sign-in or things like that.
It means you wasted your money.
Boom, boom.
Hey, just one last story before we go.
Microsoft has open sourced their infrared.net, which is AI code that is just in time for your weekend.
Actually, this story came out on Friday, so that headline no longer applies.
But a team at Microsoft's Research Center in Cambridge, yes, that's in the UK, kicked off development of the framework in 2004,
and it was released for academic use in 2008.
Since then, it's been getting refined, and now it's available up on GitHub.
It takes a model-based approach to machine learning.
The developer gives the framework a model, and then the framework then develops machine learning algorithms directly from the model provided.
You can try it out if you want.
It's cross-platform, it supports.NET Framework and.NET Core 2.0, Mono 5.0 as well.
You can use Visual Studio on Windows or on Mac or Linux.
You could really just use any text editor you want.
Models for infrared.net are set up using a probabilistic, easy for me to say, probabilistic, I could almost say it, program.
These frameworks compile into what the team itself describes as something critically called the deterministic approximate Bayesian inference.
This is highly scalable with Microsoft using a system that slips up knowledge from billions of web pages.
The Bayesian inference is the interesting aspect to this, and the fact that you feed it a model, and then it figures things out instead of creating the model.
Microsoft is pretty proud of this, and they've been making a big stink over last Friday and over the weekend.
And we'll have a link to the story if you want to know more.
Microsoft, once again, just open sourcing that S.
Code is up on GitHub too, so you can just go download it and give it a go.
Let's see, what is the license?
What did they license it as?
Oh, surprise, surprise.
It's the MIT license.
What a shocker.
They seem to be putting a lot into that.
They like that MIT license there over at Microsoft.
MIT's the best, baby.
Be a student at MIT.
Oh, I don't know.
It's negative in the freedom dimension.
Oh, there he is, my old enemy.
Anything else we want to touch on this week, Mr. Dominic?
I don't think so.
I mean, can I just say open JDK, open JDK, open JDK?
On elementary OS, apparently.
You know what?
Even Windows.
Just don't use Oracle's JDK.
You radical.
All right, well, I'll send people over to the Twitter, at chrisles, for me, at Jupiter signal, for the network.
You can find Mr. Dominic at Dumanuco.
Anywhere else you want to send people on the internet for you, Mr. Dominic?
Anywhere?
No?
No.
He's gone.
He's left me.
He's off to go get another Sam Adams.
Goodbye.
Goodbye.
I'm getting a Sam Adams.
Oh, you bastard.
Here I am with my water.
All right, we'll check the calendar for when we're live next week.
Jupiterbroadcasting.com slash calendar.
You can find the show post over on that site or coder.show where we'll have links to everything.
This episode, in particular, coder.show slash 329.
That's also where our contact page is.
And you can give us your feedback, your opinions, on our subreddit, coderradio.reddit.com,
which is, I think, all of the feedback for this episode came from the subreddit.
So thanks, you guys.
You rock.
Thanks for joining us also, and we'll see you back here next week.

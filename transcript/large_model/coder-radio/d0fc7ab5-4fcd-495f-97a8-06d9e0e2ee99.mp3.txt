This is KOTORadio, episode 477 for August 1st, 2022.
Hey, good buddy, welcome back to Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and the business of software development and the world of technology.
My name is Chris, and joining us every single week with his laser pointer, it's our host,
Mr. Dominic.
Hello, Mike.
Salutations, hear ye, hear ye, from ye olde Renfer edition of KOTORadio.
I'm going to admit something to you, didn't actually know it was August until that exact
moment when I read the date.
I looked down at the date, and I just realized it was August.
As always, folks, we're at our normal peak performance.
Programs are operational, but barely just so.
Oh, man, it's just every day, right?
It's just, what does it matter?
Every day's a workday, so it doesn't really matter, I suppose.
Seven days a week, all air day, all day.
I got something kind of special for you.
So we've been doing the video stream of the shows now over at Jupiter.Tube, and we've
been kind of coming up with music to kick the shows off with as the stream opens up.
DeckBot wrote in a suggestion, and it was a good suggestion, but I wanted to take it
a bit further.
I wanted to make it even better.
I wanted to make it something special to the show.
So I'm going to play a hit, and I want you to tell me if you can identify when and where
this hit comes from.
I grabbed this for you.
That's your one and only hint, is I went out and I got this for you based on DeckBot's
email.
All right, ring any bells?
It weirdly does.
It's for me.
It's for you.
How does it make you feel when you hear it?
I kind of like it.
I'm kind of into it.
Yeah?
It reminds you of better times?
Is it the 90s?
Is it?
Hmm.
I feel like I'm walking into a trap.
My Admiral Ackbar sensors are blaring right now.
I don't know.
What is it?
It is the opening video to Snow Leopard after a fresh install.
Damn it.
I knew it.
Oh, I knew it was something.
I was like, I sound so familiar and I feel so happy.
I just thought maybe it was like a Jar Jar thing, like there was some Jar Jar skit I
didn't know about.
Yeah, that's the back.
That's the little music they'd play.
You know, when that video come up in all the different languages and they'd welcome you
to the desktop.
That's right.
It's terrible now.
I just had to pay them back today, but yeah, yeah, no, today they don't care.
Now they're like, yeah, whatever.
They don't care about it.
You don't need a fancy video.
Screw you.
But back then, you know, that was a big deal.
In fact, you could even, a machine could even play video was a big deal back then.
What does your machine have?
Video.
What?
Yeah, I can do it.
All right, Jacob wrote into the show.
In a recent episode, you guys were talking about WSL, I work for a very large retailer
with a large IT department and a mature set of practices, especially about what machines
and operating systems they use.
Linux machines are not on the list.
Macs and PCs.
That's it.
For the Mac based people, having access to a good terminal is no problem.
I've introduced them to warp, thanks Mike.
For the PC folks, well, things are a bit more challenging.
We've had a scenario where two of our engineers were unable to run the scripts they needed
to because they didn't have some of the tools native to Linux or Mac.
So they installed WSL and after a quick restart and a quick app to get, they were up and running.
This was super efficient.
We didn't have to request a Linux box from IT and get to wait for the ticket to be solved.
We didn't have to wait for a Linux VM to get spun up for us.
WSL's technique of enabling a Linux within our enterprise solution that just fits allowed
us to quickly meet our needs without triggering any of the security configs on the machine.
From my experience, WSL has the space and makes our workflow a lot more efficient.
The whole IT angle, right, of needing to provision a machine or even provision a VM.
And with WSL, you could just check a box.
Now you've got to have certain privileges to get that installed, but assuming you have
those, yeah, that's the secret success right there is that WSL will end up having more
dark matter developers using it than all of the Linux desktop users combined.
Just that one category of user.
And the question is, and this is the flamework question, are they Linux users?
I'm going to go ahead and say kind of.
I mean, I kind of feel like you have to say yes if you agree that by using the Linux kernel
to do this, which they are with WSL, then they're Linux users.
But then that also means Android users are Linux users by that same definition.
Do you agree that all Android users are Linux users?
No.
I mean, so it's funny, right?
Because the WSL guys are literally going to be pulling from either, you know, Debian packages
or if they're using, what was it, the one I use, Penguin, right?
Which is, I think, although they have flavors now, they have a fedora flavor, but it's Debian
based.
And their day-to-day workflow right in Windows terminal, which is effectively going to be
a bass or Z shell, is a lot closer to a desktop Linux users than a desktop Windows user.
If they're doing like web dev and I can feel the hatred flowing, I just got like a wave
of anger in the universe at me.
So you think it's like part technology stack, but also part of what you're doing?
Like are you using the system?
Yeah.
See, this one, I don't even know how valuable of a question this is, right?
Yeah, yeah.
But this becomes a weird question because of somebody who, let's take our good friend
Alan Jude, right?
If somebody who, not to pick on Alan, but you know, lives in a Windows 7 machine, but
basically works on Unix C servers all day, every day in terminal, or even someone like
me who, okay, spends a lot of time working on a Mac machine, but uses the Mac machine
to SSH into Linux boxes almost all day and write code for Linux machines.
And you know, is that not like working in Linux?
I don't know.
Right.
And Alan is producing code for FreeBSD.
For FreeBSD.
Yep.
Yep.
Because the devil.
Yes.
But I don't know.
I mean, maybe you would say they're not like gooey Linux users, but you know, we've been
talking about this a long time.
The value of Linux is really the kernel.
Yeah.
I'd say it's the platform to run things on.
Like it's a general compute platform, and you can move that to your Windows platform,
I suppose.
All right.
Well, let's switch over to the other side.
Travis writes in, and this is an interesting one.
Hey guys, question.
I want to do an Apple research project, which is an expansion of a current small scale official
IRB certified research on the secondary traumatic stress disorder for healthcare workers.
So it's sort of like PTSD, but for healthcare workers.
And Travis wants to do a study using the Apple research kit, which uses a bunch of metrics
from the watch to monitor things like heart rate and blood oxygen level and steps and
all of that kind of stuff.
Travis already has this ongoing.
He says, when I go to the Apple website and I dig around with the email correspondence
I have so far, it seems like they want me to bring my own app dev team to the table
to create this project.
Currently I'm heading up one of the larger studies on STSD that I know of at least, involving
three different departments of one level, one trauma center in Virginia.
I am to use this study to get funding for and head up a larger study using the Apple
research kit to make this the largest study on STSD in the world to date.
My angle is that with Apple research, I can incorporate not only survey results, but data
from iPhones and metrics from Apple watches to create what I believe could be a pivotal
study that includes heart rate, O2 steps, and other measurable data from phones and
watches to give a complete picture.
Now, I am an emergency nurse by trade and I know very little about coding or who I should
talk to, but I know that this is a huge unspoken issue in the healthcare system.
I'm looking for ideas from you guys in the know on who can code such an idea into reality.
If my grant funding is enough, I think I could hire alice.dev to do this project.
Or maybe I could do the research project myself.
I have so many questions.
I'd love to know your initial thoughts.
Thanks for your time on the matter.
P.S. long time listener since last, and I just think sincerely, Travis, what a fascinating
idea.
And for those of you curious, I put a link to some of the research kit information in
the show notes, including the open source research kit project that Apple released a
while ago, which is a framework introduced by Apple to let researchers and developers
create apps for medical research.
And it's called surprisingly research kit.
What do you think, Mr. Dominic?
I mean, that's a that's a that's a juicy email, right?
Well, you know, I haven't looked at research kit quite a lot, but it's very interesting
how Apple has been able to kind of leverage.
There are just let's be honest, gargantuan smog, the dragon like horde of medical data
to empower, frankly, researchers.
I would say, man, if you can start this on your own and kind of bootstrap it, that's
the way to go.
See where you get it.
Really having looked at the frameworks before the show today, I can say this is kind of
I know we like to beat up on Apple sometimes, but given these kind of, you know, libraries
and frameworks away is a huge deal.
And, you know, go for it.
You probably know a lot more about this than I do.
So I completely agree.
And Apple is always adding more sensors to that watch.
You know what I mean?
Like, it's just going to get better.
This is just going to get more powerful.
And so far, it seems like the privacy works like the way they've built this.
It seems like everybody's OK with it.
There hasn't been a catastrophe yet.
But Travis, it's a great idea.
And one of the things that I thought was interesting about your email, Travis, is I hadn't really
thought about this, but of course, to somebody that's completely outside this field, you
would almost think that Apple supplies the developers, right?
Because it's their watch, their research kit, and they are the richest company in the world.
Like, you would almost kind of just assume that Apple has developers ready to go, that
you contact Apple, and then they assign a handful of developers to your project.
But that's, nope, nope.
You do all the work.
You do all the things to make the watch super valuable.
And then Apple takes 30%.
That's how that works, Travis.
Yeah.
In this case, I think you can defend that a little better.
Because just the idea, for instance, that I can monitor my heart rate, am I going AFib
or anything like that, on my wrist for, what did this watch cost me, like $400 to $500?
That's pretty significant, right?
Just the amount of engineering that had to go into this.
And the fact that it doesn't look like a potato helps, means I'll actually wear it.
It also means a lot of people are getting a free Apple Watch, because a big part of
these studies, because of course, you can't just limit it to Apple customers, a big part
of these studies is giving out the base watch, but I mean, it's free Apple Watch for a lot
of people.
Yay.
Apple Watch party.
Yeah.
Get your free Apple Watch.
We're just going to monitor everything.
All right.
Matthew's got our last email of the day.
Now, we did get a couple more emails that will be in the next episode, don't worry.
And please do keep sending in your questions, coder.show slash contact.
I would like to build up a bit of a backlog, just so that we have a pool to pull from.
So Matthew's got our last one of the day here.
He says, hey y'all, I've been looking at GitOps and other newer DevOps techniques and tooling.
Curious what your thoughts are and approaches are on DevOps and or GitOps specifically.
It's not as exciting as other aspects of development, but I feel it impacts developer happiness
and productivity quite a lot.
Thanks.
And for those of you who don't know, GitOps is essentially a framework that takes DevOps
best practices, which could be used for application development, such as version control, collaboration,
compliance, tooling, all of that, and applies it to infrastructure automation.
So taking some of the best of development practices and applying it to infrastructure
management.
Now, I know you have a moderate, a modest infrastructure at the Mad Botter, but I'm
sure you probably thought a little bit about deploying things and keeping things manageable.
What are your thoughts in this area?
It's an active conversation, because as things have changed, the self-hosting model is starting
to make less sense for us.
Oh, tell me more.
Well, it's coming down to a former sponsor keeps raising their hosting prices on me.
And a certain Microsoft-owned platform called GitHub, I don't know if you've ever heard
of them, they're a little indie rail shop, keeps lowering their prices.
It just so happens that many of the tools and places we want to deploy to have these
really neat like pre-configured GitHub actions that you could just bam, now we can deploy
for the technologies that we primarily use, which would be Python and to a lesser degree
Rails.
So that is becoming more attractive because I did the math, actually last week, we would
cut our hosting bill in half because of just the implied backups that GitHub themselves
do that we're now manually doing all the time, right?
Interesting.
Yeah.
So the question becomes, okay, our GitLab pipelines, what does moving them to GitHub
look like?
And for the things we care about that we currently do continuous deployment, continuous integration
on, is that level of effort worth it?
And I'm pretty sure the answer is just yes.
So you know what?
The logic here is we're small.
The more we spend on hosting, the kind of the worse off we are.
And also it's a big responsibility to host your own GitLab server.
It's not hard, but over time, you know, there's more updates.
There's just more stuff to do when GitHub is just so damn cheap now.
And however you think of Microsoft, because I know some people have some feelings around
this, GitHub has effectively become the de facto standard for most pieces of, you know,
every ID, every deployment, every platform as a service or infrastructure as a service
has a little GitHub button to just connect to.
And basically does like, let's say 60% of the deployment work, which now this is good
for us.
We lower our costs.
It's also good for our customers because, you know, they're not paying us for a time
that we don't need to be doing hand deployments in those cases.
So I'd say ongoing conversation is the right way to put it here too.
First of all, we're rebuilding our website and the entire website workflow, we are moving
to essentially GitHub and GitHub actions.
So when you want to update a page at jupyterbroadcasting.net, which is our current development site, you
go modify a page on GitHub, you check it in and, you know, you make all your changes and
then a GitHub action runs and actually renders that static website and redeploys it.
We're kind of thinking about that too from a Nix OS standpoint, because as time goes
on, we've built out more and more infrastructure as we've leaned more and more into self hosting.
And now we kind of have a mix of CentOS.
We have Ubuntu, of course.
We have several different versions of Ubuntu.
We have some SUSE in there.
Wait, wait, wait.
What was that last one?
Some Lizard OS.
I've never heard of it before.
Lizard people arise.
Yeah.
F Atlantis.
And it's like, OK, this is getting a little bit ridiculous because some systems we have
a we have a standard.
So like all the SSH keys are on there and all the accounts are created.
Everybody has the right UIDs and all that kind of stuff and other systems we have nothing
like that.
And it's just like, oh, this is the box where we don't have any of those standards.
Can anybody help me get logged into this box?
It's got to wait 15 minutes so that the one person who does have a log in can get you
in.
And that kind of like no more of that.
Right.
You know, Jimbo's on the toilet so nobody can get their stuff because the only guy who
is SSH key is actually on the box.
Or you can have a situation where it's like the one day a year where I am completely AFK
or Wes is completely AFK and it's like, oh, well, now this thing doesn't work like.
It's like, OK, we can't do that anymore.
And the nice thing I like about Nix is that it's all defined in a configuration file.
It's really powerful that way.
And that configuration file, of course, you can check in to get.
And so you can actually track your changes via get to your OS level configuration and
deployments.
And that seems super powerful to me.
Yeah.
You should also explain, right?
Nix is basically a CI tool.
Yeah.
For OS.
It's applied to an OS and that is fantastic.
I love that.
Right.
I mean, the big thing about get ops in general, even away from GitHub or GitLab is kind of
pushes it super hard to the only your source of truth.
Right.
The thing you trust is that remote Git repo.
So origin.
Right.
So your your main branch or whatever it is, very much like an extension of I don't know
if this is a popular thing people blog about anymore.
But get flow.
Are you familiar with that, Chris?
Get flow.
Get flow.
It rings a bell.
Yeah.
It's like a methodology for naming and branching and tagging releases where basic I mean, there's
all everybody has their own little snowflake version of it.
But basically, like your main branch is usually production, then you'll have like, you know,
staging, customer facing staging, internal dev, where literally the code flows up.
And it's always you always have a way to go back, right?
And people get fancy.
They like to depends on what kind of thing you're doing, right?
If you're doing binaries, you can actually like tag versions that are like the build
binary.
And again, if you're on GitHub, you can literally just put the binary on your page if it's something
you're giving away for free and be like, here, just download the binary.
Don't bother me.
Oh, and then CodePilot can use your code to suggest insane things.
Just quick CodePilot diversion.
I got it to do something crazy today.
Tell me about it.
So I'm mixing C++ and Rust in a Python project.
It's called Alice.
I don't know if you've ever heard of it.
And apparently because I wanted to just try something and I did like the inline consume
this as C++ thing, I saw the little, you know, in VS code, like you see the little dude with
his goggles on the bottom, right?
I think his head spun.
He was like, what the heck is this madness?
So then it started suggesting really weird, what I think is game dev C++ to me.
Oh, you're getting the game dev stuff now?
I don't know what happened.
It was like, it is not a game, right?
It was just, I wanted to speed something up that's taking too long and it just, yeah.
Watch out, you might get a little Carmack in there.
And I paid for it for a year.
Well then, I look forward to future updates.
I'll tell you what.
It's like my hilarious companion that I turn off because it keeps suggesting stupid things
to me.
All right.
Speaking of things that aren't stupid, the London meetup is nigh.
It is just a few days away as this episode will come out.
It is Friday, August 5th in London.
Details at meetup.com slash Jupiter broadcasting.
And of course, over there, we also have the West Coast meetups posted.
All that is coming up soon.
And my last thing I'll just say about this, so we don't go on and on, is that if you are
on the West Coast, we could use some location experts for our meetups.
And we have a matrix room dedicated to just the West Coast, and that is at bit.ly slash
West Coast crew.
Linode dot com slash coder, go there to get $100 in 60 day credit on a new account, and
you go there to support the show.
It's a great way to support the show.
What is Linode?
Fast, reliable, cloud hosting.
You just got to go try it.
That's why you're going to get a hundred bucks and you're going to go kick the tires yourself.
Linode is always improving the infrastructure, they've got 11 data centers around the world,
and they've always been reinvesting in that infrastructure, staying ahead of all of the
other cloud providers.
And you can measure it.
You can benchmark the systems and you can see it.
I have tried the various different hyperscalers out there and Linode competitors, and Linode
is always above the rest.
They own their own internet links.
They're constantly upgrading their hardware.
They've been refining this for nearly 19 years to build the best experience to run applications
on Linux in the cloud.
You got to go try it for your next project.
I mean it.
You really have to see what they can do.
And of course, Linode is about investing in the community.
They were just at scale.
I heard from a lot of you out there that got to see Linode and got some cool Linode swag
at scale, and they're making our West Coast road trip possible this year.
So we can do meetups all up and down the West Coast and get down to JPL and have that tour.
Linode invests in the community because they're part of the Linux community.
They've been around forever.
That's how I found them originally, was at a Linux fest.
And now I use them for everything we deploy that our staff needs to use, our team, but
also our community, anything customer facing.
It's on Linode.
They have better pricing than the major hyperscalers out there.
They have a better interface, better documentation, and leagues better support.
Whole different category.
Nobody else touches Linode on the support.
And when that matters, it really matters.
So go try it.
Go see what you can do.
Go build something.
Go learn something.
Go do a one click deployment.
Just go get that hundred bucks and support the show.
Linode.com slash coder.
That's where you go to sign up.
Try it out.
Join the show and get a hundred bucks.
Linode.com slash coder.
All right.
Let's get a little spicy with Clojure here because apparently Clojure has a hole and
it's a rails shaped hole.
There's a hole in the Clojure tonight.
Yeah.
There's a compiler error of fear and sorrow.
Clojure developers are just staring down a foggy railway, just lost.
They're in a 90s Soul Asylum video, like wandering children down a runaway train.
With that weird filter on it.
Is that black and white or is it just muted colors?
I can't quite tell.
It was VH1.
Thank you very much.
Everything had a filter.
Or no, that was MTV, wasn't it?
Yeah.
So Clojure.
I don't know if you've ever heard of this language.
I have some weirdos like it.
Wes was so dog.
Yeah.
Some people I know.
Some guy.
Whatever.
He's always challenging me with weird languages.
That was a lot of fun.
You should listen back if you never had the, what was it like seven months for Wes tortured
me with weird programming languages that weren't Objective C.
It turns out if you try hard enough, you can.
There he is.
So yeah, Clojure has a problem according to the author of this post, Janet Carr.
And I tend to agree with her.
You know, Ruby was kind of obscure until Rails came out.
Thank you DHH.
Clojure does not have a Rails and it has a weird succession of potential web development
frameworks and suitors for this kind of application.
But no one has come out on top, which I will never repeat this in front of Wes, is a damn
shame because Clojure has got some really interesting ideas in it.
Yeah.
Now is the idea maybe with Clojure that you're not supposed to need something like Rails,
that they're going to solve this stuff lower level, you build what you need on top of that.
And you know, you don't need a Rails with Clojure.
There's two ways to look at it.
Like what do we mean when we say a Rails for Clojure?
The way you read that is exactly correct.
It's you know, something super abstract, high level that's easy and quick for development
and you know, people can get into the language a lot easier.
Or you could say, no, it's not the style of Rails.
It's just like a de facto standard, which for a long time Rails was and in my opinion
still is for Ruby.
Because when you have a standard, right, when there's a de facto standard framework, what
happens is all, many, not all, but most of the library developers keep that framework
in mind, compatibility and convenience for that framework in mind when they develop their
library such that again, just like the Ruby ecosystem, the ecosystem ends up coagulating
around that framework and it's usually pretty easy to pull in any gem and make it work with
your Rails app.
Yeah, there's no denying that.
And you've seen the ecosystem around that.
You know, I think if you were to get Wes drunk, maybe one late night and you got him going
about closure, I think he'd probably talk about luminous, I think is how you say it,
which kind of promises to be the missing Rails.
But how could anything be Rails at this point?
Nothing.
Like when you say Rails, what are you really saying?
Are you just trying to like invoke like an idea or are you actually trying to say you're
going to compete with everything that Rails does now?
Yeah, I would also argue, right, like with TurboLinks and some of, in fact, we should
probably revisit Rails, it's been a long time, but with some of the TurboLinks stuff, I mean,
if you look at the Hey app, it's crazy.
Rails is so different from what Rails used to be.
If you're using some of the newer hotness, like it would be very interesting to take
like a Rails 3 and a Rails 7 kind of the best practices and development methodologies, particularly
for a full stack website and say, yeah, this is kind of different and all hell active record
still better than SQL Alchemy.
Well, I'll drop a couple of links in the show notes.
I feel like, you know, one of these days, what we've got to do is track down that Wes
Payne and get him on here and get him to explain himself how he could still defend something
like this.
I'm going to challenge Wes Payne.
Wes, if you're listening, you pick a language and I'll pick a language and we'll do a challenge.
But this challenge, we have to build a tiny, tiny app that pulls some Jupyter broadcasting
public GitHub page, maybe for the website and just like looks at the commits or something.
We'll think about it.
I like it.
Yes, it is hammer time.
I think that soundboard clip is consent, right?
I think that's implied consent right there.
So you've been hanging out with Dick Cheney again, huh?
Or that's a little more Harvey Weinstein, let's be honest.
Yeah, right.
No, when I go duck hunting, I'll let you know.
I know that you had a little bit of a skirmish this weekend.
And I'm it's kind of I feel like you're out there doing some field testing for the show.
And now you can report back on the great migration.
I got a little bit of let's say sass, but a little, you know, Apple guy saying, why
do you pay for machines all the time?
You know, you get a new machine.
You don't need to do that.
Use migration system is flawless.
So do you normally when you get a new laptop, it's like, OK, so walk me through.
So you spill your drink, you get rid of your laptop, you buy a brand new machine just coincidentally
as a new hardware lands.
And then do you start from a fresh install?
Well, if we're going to start from the beginning, first, I dance around Buffalo Bill style.
OK, good, good.
I'm glad we know that now.
Good.
Then I inevitably drop the laptop in a pit with a small poodle of some sort.
Oops.
Oops.
But I have never actually used migration assistant before.
So my usual process is I get pull my damn bash RC that I always forget is seashell now.
So I have to edit it every single time and I still haven't pushed it up for some reason.
And yeah, that's just Mike being lazy.
And I you know, you know the drill, right?
You got to install Xcode, the command line tools.
Then you realize you don't have the headers for Postgres or something.
It's both tedious, but at the same time, it's like you're only building back what you need
and you're going with the freshest versions of everything.
And maybe this is the build where you try a different video player or something.
Right.
So the disadvantage is to not just copying whole hog.
But the disadvantage is really that Xcode step because it's just awful.
It's just slow and terrible.
So you know, I was getting some flack about this that it's flawless and it even works
across ARM and Intel.
That's pretty impressive.
Cross architectures.
Damn.
Yes.
Lies are often impressive.
Yes.
I feel like I have a couple of bridges to sell you.
So it did appear to work and it did take like an hour and a half.
But it very foolishly and I don't understand why they don't do this because they could
certainly add this to the program because you have to actually launch like a little
migration assistant application where it's like, hey, buddy, that's a different CPU architecture.
So no.
Or we're not going to copy over your homebrew stuff or your command line stuff and leave
you leave your system in this insane state where you couldn't totally like chill and
so forth.
Like if you just like chill in the gooey, you're probably fine.
The minute you open terminal, it's just going to scream in agony.
Yeah.
So it sounds like it would move some things, but not other things.
And it would just be a total hodgepodge.
Well, it's not just that it does move them and it moves most of them, but it doesn't
check what architecture your stuff is compiled for.
And like really common stuff like homebrew homebrew, fun fact, saves in a different location
on ARM CPU machines.
It saves it's like slash ops homebrew where I might get this wrong, but it's like slash
library slash something on Intel.
It's user local bin.
So you're telling me the migration tool that Apple ships in the most recent versions of
Mac OS, which support both Intel and ARM, doesn't differentiate on that stuff.
What is ARM code?
Even though you can get info and it's in the metadata of the application, it's in the metadata
right there available to the system.
Right.
And I'm not suggesting it should do like program by program.
I'm suggesting.
Oh, I am.
Don't you think, dude?
Oh, don't you think?
I feel like once you plug a machine of the other architecture into the, you know, other
architecture, it should be like, hey, man, just there should be like a warning, right?
Hey, man, this is going to be wild.
Or like, hey, would you like to do just the universal applications?
Which by the way, that means you don't get these three app for applications and these,
you know, whatever.
Or, you know, like would you like to bring over the Intel stuff because like you're crapping
up basically a brand new Mac with a ton of stuff that's going to have to run under Rosetta.
Well, this is not a brand new Mac, but yeah, but you get my point, right?
Somebody bought a new M2 or whatever, sits down.
Yeah.
So you get screwed both ways.
If you go Intel to ARM, you unnecessarily run everything in Rosetta, which is dumb.
But if you go, what I did is I went ARM to Intel and it just copies ARM binaries over
and they're just busted.
I can't even believe this.
Like, I mean, this sounds like something out of a beta tool, like an alpha tool that just
hasn't been like updated by the community for the new architecture support.
Not from like the manufacturer of the OS and the hardware.
It was pretty bad.
I spent about an hour trying to hammer out like these insane terminal errors.
And then I'm like, you know what?
System preferences, erase all settings and content.
And I just did it, I paved it by hand and I did the, you know, my normal set up process.
Oh, man.
It's so funny, right?
Because we're in this state where the M1 and the M2 hardware, it's just some of the best
hardware out there.
It really is in terms of power and performance.
I just had my first experience with some really advanced, very expensive audio repair plugins.
And they've always been single threaded on x86 machines and on Intel Macs, you know,
but on like Linux under wine, just anywhere we've used it.
And it just takes forever, like an hour long track just would take at least an hour to
render and process.
When you're trying to edit, that's just brutal.
And this weekend I was helping out a friend and I was like, well, I'll try this.
I've got this on this Mac, I'll try it here on this, on the, you know, the MacBook Pro
with the Ultra M1 Ultra in it.
And when it lit up all the cores and it did an hour long audio in, I don't know, 20 seconds,
it was the first time I saw that, that like huge leap in something that I have used for
a decade that's always taken like basically it's a one to one ratio.
Whatever the length of the file I was rendering out was, you know, that was just how long
I was going to wait.
You know, for the first time ever, I saw it.
And the great thing about it was, is this was in a pinch on the go.
And you know, I only had like 20% battery left because I hadn't had the machine plugged
in for like a week.
And it used like 2% battery to do all of that.
And that was a that was like, wow, that's great.
That is really great.
But I have to say, I remain unenthused with Mac OS, like the amount of tweaking here and
there and little tool that does like this one or two things that cost me at least five
or 10 bucks and all that little stuff you got to do to make Mac OS a fully functional
workstation.
If you're honest with yourself, it's more work than setting up the plasma desktop or
the GNOME desktop.
So on the OS side, or just like this kind of stuff, the migration stuff, that isn't
a premium experience.
You're buying a premium machine, supposedly has a custom OS built by the hardware vendor,
yet the migration assistant seems to be clueless about the architecture of the applications.
That's actually hilarious.
That's that's a worse experience than you get on the free desktop.
Like that kind of stuff.
That drives me crazy.
But another area that I find sort of user hostile is Apple remains still completely
insufficient in the tools that they give their end users to manage their file system and
their data.
And when you have photos and you have your Xcode projects on there or your media library
projects, that stuff is priceless.
And APFS has capabilities and tools that are not exposed to the end user in any meaningful
way at all.
And I just find it completely just unacceptable because Apple of the past went out of their
way to integrate this ridiculous time machine effect where you could go to any folder on
your Mac and you get a stupid button and you go into a stupid space effect and then you
could fly through time.
But it visually made sense to restore data.
And now Apple has built in snapshot capabilities into the file system and they don't expose
any of that stuff to the user time machine remains barely adequate at best.
And Mac OS requires tons of little utilities and fixes to make it actually usable.
So it's like the hardware has just completely outstretched the software.
I don't know if you saw this, but the latest Linux kernel was just released this weekend
right on time.
And Linus announced that this was the first Linux kernel that's ever been released from
an ARM Mac.
He's running Asahi Linux now on his ARM Mac.
And that's Linus's setup now to run Linux.
I don't know if it's a MacBook Air, probably.
That seems to be his favorite machine or what.
But Linus Torvalds is using Apple hardware and he just released 5.19 from an ARM 64 machine
and he felt like it was worth noting in the release announcement.
I mean, that's beautiful.
I think that's, yeah, Reddit must be aflame.
Tailscale.com slash coder.
Go there to get a free personal account for up to 20 devices.
And of course, you support the show when you go to tailscale.com slash coder.
Come here, traveler.
Let me give you a secret weapon that will help you on your travels because Tailscale
is that zero config VPN you have been looking for.
It installs on any device in minutes.
It manages firewall rules.
It handles that double net situation.
If you're in that situation, you can quickly and easily create a flat network protected
by WireGuard's noise protocol.
That whatever desktop OS you're on, you can get tools to manage that super simply.
Plus it has a great command line that also makes it really easy to bring things up and
down.
If you've got five devices, you can probably get everything online in five minutes.
It's that easy.
I've got it on my Raspberry Pis.
I've got it on my mobile devices.
I've got it on my x86 boxes.
I've got it on my family's computers.
I've got it on my virtual machines.
I've got it on my VPS's.
It brings everything together into one flat network and then I get static IPs.
So now I've got a static IP for the devices I use the most often for those web dashboards
I need to get access to or those machines I need to SSH into or that box I got a remote
desktop to.
It's all one flat network now and it's changed everything for me and it literally made the
show possible while I was traveling a few months ago.
And one of the best parts about it is that it handles that mobile NAT that you get when
you're on like a cell phone connection which can really screw things up for certain types
of applications just intelligently handles that.
It also just brilliantly handles the routing so your data doesn't get sent to the wrong
area like you know some VPN's might route everything through the VPN connection.
Tailscale don't do that.
They're always always intelligent about the way they handle the traffic.
Just love that.
And why?
Why I love it?
Because I can leave it on.
That means I can always leave tailscale connected.
So that means that mesh wire guard protected network is always available to me.
And they can sign in through your existing identity provider.
So if you're a small business or something you know if you got or maybe it's like maybe
you just like to do things through a single sign on you want to have some two factor authentication.
I don't know what you do.
Tailscale will support that too.
So go try it out.
Go get the always on VPN that really works with GUI's for the platforms you use.
Super DNS friendly and dead simple to set up.
Those are just some of the reasons I use tailscale every single day.
So try it now for yourself for free up to 20 devices at tailscale.com slash coder.
That's tailscale.com slash coder.
All right.
Apparently we have the secrets to become a successful software engineer.
Are you we are we sure we want to just give it away for free.
I mean maybe we should like have some sort of online course they have to sign up for
us.
Manning Press isn't giving it away for free ever.
It's against the rules.
Oh no.
So you know we always get the hey I'm starting out emails you know what should I look into
any books any courses.
And because I'm an old man I love books.
I don't particularly care for video courses.
So I used to and still do recommend Mike underlies coder to developer but that it's a great book.
I think you should read it.
It's also super dated.
There's some stuff in there that that will seem somewhat comical given the way one the
world has changed but remote work and to just the types of technologies that the vast majority
of you are probably interested in but still full of good advice.
However however many press unashamed goes for the mantle with Fernando D'Alio.
I hope I said that right.
I don't know if he's Italian but I gave it the Italian G.L. thing anyway.
So hopefully I said that right.
Fernando published skills of a successful software engineer which weirdly had another
title at some point too.
It is like coder to developer but written after you know within the last five years.
OK.
Super good.
A lot of good advice doesn't focus on any particular technologies or languages but it
covers things like TV a lot about how to successfully work remotely particularly 100 percent remote
which I think a lot of people should probably read and kind of the basics of like you know
don't be a jackass but it's targeted very much for beginning junior developers and I
kind of goes through the different concerns that might be hard for you to see at that
level the other your managers or the more senior people in your team might have tips
for how to continually improve your skills and literally do continuous improvement.
So again we were just talking about get offs right stuff like that.
I can't say I agree with 100 percent of everything in the book but it's worth reading.
It's five stars for me.
It's a must must buy.
All right.
Well of course we'll have a link at coder dot show slash four seven seven.
And then we got one more here code to developer tools and strategies for delivering your software.
And this one they got a Kindle version.
And now it is time for the boost.
Let's do it.
A Chiron I'm going to say came in with a row of duckeroos duck D.U.K.
duck loaded with talent two thousand two hundred and twenty two stats been listening since
episode one.
And here's my first boost.
I'd be interested to hear your thoughts on things like solid pods and the semantic web
as a means of building a truly decentralized Internet.
What's up Richard Hendricks.
Yeah I feel like I totally would love to see a truly decentralized Internet but I don't
know if I've seen anything that's going to compels me to say there's going to be traction.
And we do have an announcement to make in regards to the show and the boosts swigs writes
in with our last cheap boost for the show three hundred stats.
After today we're going to set the limit to two thousand stats to get into the show just
to keep it tight because we got to keep you know we want to make it nice and tight here
on the show don't take too long.
But swigs you get the last one because I hadn't made the announcement yet and I think it's
perfect.
I'm glad actually because swigs writes I've been listening to Jupiter broadcasting for
the better part of a year now.
I finally broke down and installed the fountain app and it's actually really nice to be able
to contribute to the podcast of my choice in such an easy manner because it just puts
the button right there while you're listening.
Side note I run sailfish OS on a Sony Xperia 10 man the people who have experience love
him.
He says the fountain app works great as expected.
Thanks for the content and keep up the podcasting 2.0 fight.
Thank you sir.
Thank you very much.
Appreciate you.
All right.
Optimus Gray who's also watching live right now boosted in with a big set of grandpa ducks
twenty two thousand two hundred and twenty two stats.
Thank you very much.
And here's something for your trouble.
All right.
I feel like this is where we're going to get in trouble in this episode Mike.
But here we go.
He says I know you guys are not the lawyers this is not lawyer radio but I have been tasked
with coming up with the open source alternatives and tools for dependencies we currently use.
Where is a good source on what types of licenses can be used in the corporate world.
You know as simple BSD or versus open core.
What are all the differences and where should I go.
So there's a question right there like do you have anywhere you send people.
I've got a link that I'm going to put in the show notes that is like a look from a legal
level and they have a visual matrix breakdown of the different licenses but I'm curious
what you would do like if you were going to go research if this is legal.
Is this risky.
You know like there's got to be somewhere you start right.
I mean I have a pretty super conservative thing if it's not Apache BSD or MIT I don't
use it.
Yeah that's kind of the safe way to do it I suppose.
Yeah.
So I'm sure I'll definitely take a look at your chart.
Yeah and let us know what you think out there audience because I think that is a question
that we've never 100 percent answered on the show.
But I do have a link in the show notes and maybe we can start there.
I love this.
This next username wine bat boosted in with 5000 sats boost after the last couple of episodes
it may be in it may be time to start the flutter challenge.
Maybe bring West and maybe I mean that's so time consuming that's what the thing about
the challenges.
Yeah the challenges are tough especially like if it's going to be a gooey thing that's even
harder and we should keep it on the back we should do something.
I don't you know flutter we hear a lot about flutter but I'm not sure if that's the flutter
folks and right and if you are you know are there a lot of them listening or are we just
hearing from the are they super vocal.
Right.
Yeah you know but that's what we said about rust early on too.
And it's all Jeremy Soller.
All right Trump to have boosted.
Hello Trump.
Good to see you again.
2048 sats coming in hot with the blues.
He's followed up to a question I asked last week when he said that you know Microsoft
is trying to extinguish Linux I said do you really think they're trying to extinguish
it.
And I guess what I mean by extinguish is make Linux as irrelevant as possible.
OK not long ago working primarily with FOSS was not easy to convince people to do.
I agree.
He goes on to say Microsoft sees the competitive nature of free software today.
They'll keep fluffing us up buying our platforms buying our talent and taking over as much
as they need to keep the Linux desktop from being competitive.
The cloud maybe at the end of the day they need to convince managers and bean counters
that their solution is better.
Yeah that might be it.
I don't know.
Yeah I don't know.
See I think nobody thinks about desktop Linux more than desktop Linux people.
I'm sorry.
And I love my devil one and my my pop OS and all that but I think Microsoft is just happy
to make a ton of money on Azure using Linux and they're cool with that right.
I know that using word is doing a lot of work in that sense but I agree.
And if you want to if you want to use the GNOME desktop and you want to write all of
your code in GNOME text and then you know upload it.
No one no one wants to write all of their but they don't care right as long as you're
running on Azure services or maybe you're using VS code they don't care.
I don't even think they really care about VS code it's all just to get you up to Azure
like that's it's we did we predict this like three years ago or four years ago.
It's just it's all about Azure.
All roads lead to Azure.
The only thing that the only influence desktop Linux has had not only but the biggest one
is Katie is naming conventions every time I go to a store and see a giant K I'm like
is that a Linux product or the GNOME stuff that you know the G at it like it's not kibble
it's K kibble I don't even know why my poor dog.
And here's why here's why I'm pretty confident in this assessment is because in this assessment
Microsoft makes money with Linux is successful or Windows is successful.
They don't need Linux to fail to make money in this area.
I'm pretty sure they make more money on Azure now too.
All right.
Noob Steve comes in with a big grandpa roll of tux twenty two thousand two hundred and
twenty two sacks.
Thank you very much.
And here's something for your trouble.
Long time listener first time boost first written in before but I'm the dude who retired
from the Navy and is hoping to move into dev work.
I've got two questions.
Oh great.
Noob Steve says first I hear this and other podcasts how much everyone just seems to love
rust how awesome it is.
If that's the case why are there no jobs for it.
I'd love to learn it but it definitely needs to focus on what's going to get me a job at
least in the next two years.
That's a fair assessment right there.
Yeah.
So everybody loves rust because rust is technically very good.
Lawyers don't hire for a lot of rust because rust is technically very good and very hard
to develop in if you don't want to spend lots of money on very senior developers.
That's a great observation right there.
And you know what it is is a lot of senior developers who've been in these positions
forever are just rewriting their tools and rust.
They've already got the jobs.
And a lot of like the more vocal rust people are people who've been doing C plus plus for
a long time and are just tired of getting bitten.
But right.
It's I mean maybe again if you're a new person who's like diving into rust as your first
language I got protect you.
God bless you.
Good luck.
But I don't know.
Like if you're looking for quantity of jobs anything Webby Python can do basically anything
because we've all decided that we'll just we're Google.
Every problem can be solved with a Python script.
And unfortunately especially with your Navy background well not unfortunately but it depends
on how much of a Linux zealot you are got that baby especially with that military background.
As long as you got a nice honorable discharge there are tons of contractors who will totally
hire you to do C sharp.
I agree with everything.
Plus one to all of that and don't feel bad about it either noob Steve because you know
say you go down the dot net path you go you know heavy with the web development stuff
it could be you know three four years five years.
It doesn't mean you don't pick something up.
In the meantime you don't start a side hobby you don't start learning something else you
don't transition to something else you just got to get that ball rolling.
Also being a veteran or soon to be a soon to be veteran that puts you for that particular
and maybe you don't want to do the military contract knows that puts you in a basically
automatically ahead of anybody else.
Even if you go work for a smaller and contractor there's tons of them around they're always
hiring dot net.
Yeah that's a great point.
That's probably the easiest path.
Keep us posted noob Steve and he actually rounds it out we're just about done he rounds
it out with a double boost with a double grandpa's another grandpa's.
All right my other question is maybe a little controversial.
I'm not looking to start a flame war but I just actually want to understand why the hell
would anyone want to use Vim or Emacs when there's tools like VS code and JetBrains.
I have a student license so I get JetBrains cheap but I couldn't imagine using anything
but JetBrains and VS code.
What am I missing?
Is there some kind of amazing functionality I'm overlooking?
Me trying to quit Vim is the best way to seed your encryption by the way.
Part of me agrees with noob Steve I'd like to hear the audience's answer though I'd like
people to let us know boost in and let us know what you think.
And Steve I'm just going to double down on my dot net.
Check out Visual Studio you will you will love it or JetBrains project writer or just
be sharper in Visual Studio you'll be very happy.
I don't know people are purists right?
I mean I use Vim for some stuff but I have been seduced by the ways of VS code.
I'm eager to try JetBrains not Blains brains it's not some sort of strange plane.
What is it fleet?
Project fleet?
I've been playing around with Zed I don't know I mean why do people like Emacs and Vim?
Because one it's a nice alpha nerd flex and two a lot of the first of all Emacs a lot
of the Emacs guys are just like BSD greybeards.
There must be some core functionality though there must be right?
Well I've seen especially Emacs Emacs setups where you could just like like their email
client is an Emacs right they just live in Emacs.
So that yeah I don't know work with whatever makes you happy except TextMate 2 is better.
Magenta Eagle comes in with our last boost and it's a hot one.
Coming in hot with the boost.
We might go to admit that the best language is C and not C sharp and not that other dead
language I think I think he's talking about objective C.
What?
Dead.
Death is only the beginning.
Coming in with the opinions also coming in with a 420 sat follow-up MIT is greater than
GPL.
You redeemed yourself sir.
I thought you'd like that.
No again like we used to cover dotnet a lot when I was I was doing a lot of the you know
the exam Xamarin Samarian whatever the hell you call it stuff C sharp is really good right
I would say it's Java but better although Java's copied a lot of their features too
so it's really good objective C is better but it lost because.
Apple decided.
War crimes.
Apple yes Apple does the king he doth decree that the brackets will be dropped.
Although about several times a year I doth get a call they need my ancient wisdom my
pre-arch ancient wisdom go to the hills someone one of the ancient ones hey do you know this
Michael Dominic Mike Dominic it's not a name I've heard to obi-wan right no not a name
I've heard in many years I was was a friend of your father's until he died I just talked
to my dad last night he became a swift developer he's dead inside.
Yes no C sharp is great and I think you should call Noob Steve and you guys should both download
Visual Studio boom all right we got a few thank you boosts coming into 50 sats from
user 48 30 100 sats from Ibuki who's his thanks for 96 from our and then my goodness how about
this another 2048 sats from Noob Steve because he just loves us which makes him the baller
of the episode he's on it go try out fountain FM if you want to send us a boost I have my
referral link in the show notes I don't get money from it but I think it ties you to my
account because I will post clips from time to time from the JB shows and that's part
of what makes fountain neat is they have a whole clip discovery system so you can find
new podcasts all the time so I'll put a link to that in the show notes or go to new podcast
apps calm if you'd like to get a new podcast app that is podcasting tune it up compatible
or you can grab breeze be our easy dot technology and of course you can always send us in your
emails over at coder dot show slash contact we got the contact form over there and we
love hearing from you it is a big part of this show so write it in however you'd like
to mr. Dominic is there anywhere you want to send the good people go to Alice dot Dev
and add to Manuka on Twitter that's what I would do that's the pro move what did you
say coder completionist right that's the that's right that's the coder completionist so is
the membership thank you to our members our QA crowd over at coder QA dot go the new coder
Lee is out I've been getting really good feedback on that coder Lee so big thank you to to Alex
giga Texel who helped us with that been getting a lot of feedback on that people have loved
that coder Lee so if you remember you can find it in your downloads area or it's also
in your ad free feed we make an ad free feed for this show available to our members at
coder QA dot co and when the coder Lee comes out we publish in that feed and then it's
also if you go to your memorable dashboard it's available as a standalone download as
an mp3 you can listen wherever you like okay well we'll wrap it up there I want to mention
that you can always join us live we do the show on the Mondays which is incredible really
if you think about it who has time on a Monday somehow we do we do it at noon Pacific 3 p.m.
Eastern over at Jupiter dot tube you can watch the video version of the show if you're in
so inclined like you can also catch it when we doubt when we make it real for download
like other podcasts there's this thing called RSS and you can go get it it's a coder dot
show slash subscribe and the last but not least links to what we talked about today
are over at coder dot show slash four seven to seven all right everybody thanks so much
for joining us on this week's episode of the coder radio program and we'll see you right
back here next week.

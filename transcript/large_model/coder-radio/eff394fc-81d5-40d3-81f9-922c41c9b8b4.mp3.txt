This is KOTORadio, episode 425 for August 2nd, 2021.
Hey friend, welcome in to Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and the business of software development and the world of technology.
This episode is brought to you by a cloud guru.
You know cloud guru has them cloud playgrounds, Azure AWS, and Google's cloud in their sandboxes
on their credit card, not yours.
Get certified, get hired, get learning at a cloud guru.com.
My name is Chris and joining us from actually, I'm not quite sure where, but he is joining
us.
It's our host, Mr. Dominic.
Hello, Mike.
Well, hello, Chris.
Oh, hello.
What happened?
Well, like all developers, I have a date, I have a deadline, you know, a project plan,
and it slips dramatically.
Deadline, suggestion, you know, one in the same.
Delusional expectation setting, maybe.
But I mean, you had flights and stuff you had to make.
And thank God for travel insurance.
So I am Florida man for now.
Wow.
And was it a work thing or a personal thing?
It was a complicated issue regarding plumbing at the place I was supposed to be going to.
Oh, okay.
Okay.
All right.
Okay.
So destination plumbing was not in a good state.
So you couldn't get there and take like a poo or something.
That is exactly the scenario.
I just wasn't going to, you know, turn this into bathroom hygiene radio.
But yes.
So, you know, I figure keep it classy right at the top of the show.
The classy, right.
So I was like, I don't know if this is the best move right now, given you can't poop.
I am sorry to hear that.
That's super frustrating.
It's a mild exaggeration, but there were definitely some issues.
That's always rough because you got everything all set up.
You know, it's when you're moving to, it's one of those things where everybody's asking
you, okay, when you're doing this, what's happening?
So you've been telling everybody, everybody's got expectations, and it just gets a whole
life of its own.
And then, of course, things don't go through.
So I got to ask, you know, I got to do the typical follow up question that's always super
annoying.
Do you have any idea when you're going to get in there?
I think definitely not until after the school year at this point because school starts now
next week.
Oh, so it's going to be prolonged Florida, man.
It's prolonged Florida, man.
Wow.
Wow.
Wow.
Okay.
All right.
Well, you know, you might as well stay through the winter and get the nice weather.
That's right.
This is the only email we have on on this particular topic.
But spicy Chris wrote and I know you saw this.
He says, after your effing gnome bashing, I thought I'd write you about an alternative
I've been using for years.
You've been gnome bashing, apparently.
Not me, obviously.
Of course, not me.
Everybody knows that I've I've never said anything negative about gnome.
So they're clearly just talking about it was all me.
But spicy Chris says, just use the terminal, bro.
The command line is thorough.
It's got all kinds of combinations of text applications, and you can use things like
Tmux and Vim and, you know, even got file managers if you want them.
It's highly modular, highly customizable, integrates with scripts in the command line.
Great.
It's easy to write your own shell scripts when you need to.
You never have to worry about the mouse.
It reduces RSI injuries, and the UI never changes unless you want it to.
And no one ever pulls the rug out from underneath you.
You still will need to come up with a way to do a web browser, though.
So just use the damn terminal if you want to use Linux.
No, I don't know.
I mean, sure.
Terminal is great.
I use terminal all the time.
You know what he is?
He's a Mac user.
He doesn't want to admit it.
Because this is what guys say.
It's like, why do you even need to use the GUI on Linux?
Just SSH into a Linux server.
This is something we got into the show.
It's like, just if you want to use Linux, use it on the server, SSH into it, and do
it through a Mac.
Or now Windows, too, I suppose people might say, but we haven't gotten that.
I don't buy this.
This sounds like this email from spicy Chris here.
It sounds like something a younger version of me would say, like a little bit ignorant
of people's history.
I was born in the fires of graphical interfaces, literally born in the fires of building UIs.
And I slogged it out.
Every bad computer interface, every bad cell phone interface, every bad car infotainment
interface.
You see, son, I've lived through it all.
And I haven't lived this long slogging through every bad UI design that could come up since
UIs were a thing.
And I haven't done all of it just to toss it all aside and use the command line.
What has all of this sacrifice of time and patience and essentially beta testing for
the next generation been if not to enjoy the fruits of my labor?
So spicy Chris, you're wrong.
While the terminal is awesome and it's completely worth learning, it should not be your only
interface to your computer.
This is not 1979.
Just my take.
Just my take.
But I'm not also on the side of the camp that says you should never use the terminal on
Linux.
I think in an attempt to make the Linux more appealing, we try to pretend like the command
line isn't necessary.
And I think it gives people false impression of the situation.
Little command line is good.
I mean, I don't particularly like the writer's sentiment.
I agree with you that it's kind of, I don't know, dismissive of people's concerns.
The real answer is like, if you don't like GNOME, then like, you know, KDE exists, right?
As people keep telling me.
I mean, forget about, forget about GNOME for a second.
What do you think about this idea that you should be able to use the computer without
ever having to touch the command line?
I think it's a bull**** goalpost because you can't even do that on the Mac.
There's some things that if you want to change preferences, you have to write some com file
from the command line.
Well, and one of the big selling points of the Mac is, even though Apple doesn't push
it as hard now, but certainly was back in the day, that it's Unix with a good UI.
Well, that's whatever.
Yeah.
Everybody that ever writes in that says, if I want a GUI that's good, I use the Mac because
it's got Bash.
ZShell now, but yeah.
But it's not a good Unix use.
It's not a great user land, though.
The Unix environment.
It kind of stinks.
Yeah.
You load up homebrew and you're fine.
I mean.
Ish.
Yeah.
Yeah, it makes it better.
It does make it better.
Yeah.
Liam, our carrier spy writes in and says, Mike is right.
Congratulations.
5G is basically, it's basically a lie.
Um, you see what Liam says is ever since 4G LTE was deployed, the G's that you see like
4G or 5G are really no longer relevant.
LTE stands for longterm evolution, meaning its core is supposed to last for a long time.
The 3GPP released LTE in 2008, and they create new incremental cellular releases roughly
every one to two years.
Since LTE, there have been some improvements for consumers, but most of the improvements
are targeted towards industrial features such as IoT or vehicle to vehicle or vehicle to
base station, right?
Makes sense.
Or like making it better indoors for people.
4G slash 5G is perfectly capable of supporting people's day to day mobile broadband needs.
The real challenge is convincing telecoms to meaningfully deploy it everywhere.
Yeah.
Yeah, really.
You mean to like spend money on towers?
What?
Yeah.
My bet is actually on LTE.
I'm hoping that the, cause they are deploying some new towers and there are some new frequencies
with 5G.
So my hope is, is that they sell everybody on 5G.
Apple's going to help and Google's going to help with the pixel six.
They're all pushing 5G.
So all of the rubes will get on 5G and then the LTE network will open up for guys like
me.
They'll just sell it to me for cheap.
That's what they've done with the edge network and the 3G network as they've moved on is
they've kind of opened those networks up to just flat rate pay, you know, one flat fee
kind of plans.
All the data you could want, that kind of stuff.
So I'm all about that.
I hope 5G takes off in that way just so the LTE network opens up.
But 5GE, that is just LTE.
That's good info Liam.
Thank you.
If you've got any other insights into the cellular industry, please do let us know.
If you've got an area of biz that you're in that you think we would love an interesting
insight into that most people aren't aware of, let us know.
That's the kind of thing we love to get into the show.
Coder dot show slash contact is where you go for that and we also love your responses
to the show.
Anything like that.
And we should also mention, I don't know, did we say it in the show?
I know we said it on the stream, but we're at a new live time now on Mondays.
Both Mike and I are adjusting to it because A, he didn't move and B, I haven't slept for
not just one night, I haven't slept for two nights.
Two different reasons.
So I actually fell asleep at 7am, but then we had the new show time.
So ironically, if the show was at the old time this week, I could have slept more, but
I had to get up to do the show at the new earlier time.
It's the worst.
But anyways.
It's amazing.
I know.
But it's okay.
I'll get my sleep.
It's fine.
I'll catch up.
I'll probably take an afternoon nap.
But yeah, so we have the new live time.
It's at 10am Pacific, 1pm Eastern at jblive.tv on Mondays.
And the next one that we'll do, I'll be on the road.
I'll be on the way to Salt Lake City for our Salt Lake City meetup.
And then from Salt Lake City, I head off to Denver.
So we have a meetup on the 7th of August in Salt Lake City.
And then we have a meetup on the 20th in Denver.
And we will have that at meetup.com slash Jupiter broadcasting.
Linode will be at the Denver one.
We're going to the pin-dustry, which is an awesome, awesome basically adult fun zone.
I mean not like that kind of adult.
I mean like a fun zone built for adults.
I don't know how else to phrase that.
I didn't know we were taking this direction.
Hey, I figured let's branch out, right?
It's Jupiter at night.
No, it's obviously got pinball, but it's got bowling, and it's a huge facility in the Denver
area.
So that's where we're going to have our meetup.
Linode's going to be giving away raspberry pies.
We're going to create some exclusive content from the road trip and releasing that in the
extras feed towards the middle of end of September, whenever the hell I get back.
That's all coming.
So do join us next week because somehow I'll be pulling off some sort of technical miracle
to live stream the show live from the road because it's going to be tight.
We're going to have a full RV full of kids and humans.
So it's going to be a feat on multiple levels, like trying to keep the business going while
still going down the road, while also trying to take the kids on a family trip, while also
trying to create content for the release once we get back.
And doing the meetups.
And the meetups.
Oh my God.
So let's see how all that goes.
It's too much.
Damn.
I overdid it, didn't I?
I'm realizing that now just before it all starts.
We'll see.
Maybe it'll turn out just fine.
Maybe it'll be fine.
Maybe.
We'll see.
Meetup.com slash Jupiter Broadcasting.
Linode dot com slash Coder.
Go there to get $100 in 60 day credit on a new account and you go there to support the
show.
This here Coder radio program is made possible because you go take advantage of our sponsor
offers.
That's a huge part of what keeps this show on the road itself.
And Linode is one of those sponsors that we can enthusiastically endorse.
Linode's been around since 2003 is one of the very first companies in cloud computing.
I don't even know.
I don't even think it was called cloud computing back then, but now 18 years later, it sure
is.
And they're still in the game.
They're the largest independent open cloud provider in the world.
They have 11 data centers around the world that you can choose from millions of customers
and businesses, and they are still focused on making cloud computing simple, affordable
and accessible to all.
What I love about Linode is their infrastructure is bulletproof, rock solid fast.
And if you want to just get an application up on the web and start working on a project,
they have avenues you can take to do that super quick.
Or if you want to deploy a couple of core infrastructure servers and build up applications
on those servers and do it yourself, Linode makes that possible as well.
They've really refined that dashboard of theirs to make this kind of gradient of usability
super, super accessible.
And then on top of that, they've layered in really great features like DDoS protection,
cloud firewalls, VLAN support, a powerful DNS manager, an easy way to manage block storage.
So if you need a little extra disk on a server, they could totally accommodate that.
Or you can go the route that I often go is I take advantage of Linode's S3 compatible
object storage.
That stuff rocks.
Not only is it super crazy fast, not only can you possibly generate a HTTP URL for every
file in the object storage if you want with great permissions management, but it allows
you to kind of grow, expand, and, I guess, contract your storage as you need it.
And that is just one less thing to manage.
How embarrassing is it when your system goes down because, like I had this happen with
Nextcloud, I added a bunch of files and then I deleted a bunch of files thinking they'd
be removed, but of course they were just being stored in the deleted recycle area of the
server.
So then when we added the next batch of files, we ran out of storage and the whole server
went down.
And you know, like who has time for that in the middle of the workday?
Nobody.
And so that's why I transitioned that system over, I'd say like I did it, of course we
as a team did it, we transitioned it over to S3 object storage.
And it's really accessible and approachable to something like Nextcloud because they have
that kind of stuff built right in.
Of course Linode also has more advanced features if that's your jam.
Maybe you want to make it part of your multi-cloud setup.
They've got Kubernetes support, Terraform support, and they just make all of it very,
very straightforward.
And then it's all sitting on top of super fast networking, super fast hardware that
they keep up to date.
They have their high-end CPU systems, their AMD EPYC processors, and then they wrap it
all up with just the best support in the business, the best customer support there is by phone
or ticket.
And that's just a nice little insurance policy to have.
So go grab our $100 and try it out.
You could learn something, deploy something, or maybe you just want to just compare it.
That $100 lets you kick the tires.
So go to linode.com slash coder, get $100 and 60 day credit on a new account.
And of course you support the show.
That's linode.com slash coder.
So I feel like talking a little ice cream.
We have a new open source compiler.
And if the developer from Stripe is to be believed, this new Sorbet compiler is 22 to
even 170% faster than Ruby's default implementation.
I like speed.
Just maybe a quick background.
Ruby is an interpreted language.
It's like Python if Python were written by sane people.
Unfortunately, it's not very popular because the entire Ruby community more or less was
subsumed by Rails.
Rails fell out of favor.
Ruby is just so elegant.
We could keep moving on.
But it's an interpreted language is the point, right?
But speed is a problem in interpreted languages.
Sorbet is actually like Chris said, from the folks at Stripe.
It is like a static, it was only, not only, but it's basically like a static analyzer
that like adds some type checking and stuff like that to Ruby.
Ruby is a dynamic language.
And this is now a compiler based on that or kind of in parallel to that.
It's powered by LLVM, which anyone who's done any development recently probably knows what
LLVM is.
We don't need to talk about it.
If you don't know, it's a compiler.
I mean, it's, it's a compiler, well, there's a great episode of ATV with Kurt Lassener.
He explains the details.
But think about it like Clang LLVM, if you've ever done any iOS development, you've used
it.
And actually I think, is this still, is this true on stock Ubuntu now that the default
C++ compiler is based on the LLVM or is it still GCC?
That I don't know.
I know it is easy to get it on Ubuntu.
They have it packaged up, but I don't think it's by default.
Don't think so.
At least not in 2004.
Because at the Matabotter, we use LLVM and LLDB just to keep everything unified, right?
So I'm not sure if that's like something I set up on our image of our stock Pop OS or
if that's just how it is.
I don't remember.
And it is in the repo.
So it's like one apt install away.
What this does is exactly what it says on the tin, right?
It is a compiler for Ruby that makes it damn fast.
That is pretty cool.
They are saying that they're using it in production.
But they admonish you not to.
So take that.
Don't do as we do.
Yes.
He goes on with a pretty good conversation about why not do a JIT compiler, why not just
improve the Ruby VM.
And I think the reasons make a ton of sense.
I wonder if this is really going to get too much adoption.
I feel like the majority of people that I talk to that are using Ruby are using them
for fairly, I mean, I'm going to say simple, but fairly run of the mill Ruby on Rails applications
where this kind of thing certainly fast is good, but wouldn't necessarily be super helpful
for the day to day problems they have.
Also when you read their motivations as to why they decided to open source Sorbet, I
mean, a lot of times people get into this stuff to scratch their own itch, but it doesn't
sound like the core things that generally lead to a lot of community adoption.
So the number one reason at the top of their list that they are open sourcing this now
is that they had already shared it with a couple of people, a handful as they put it,
and it was toilsome to manage who they shared it with and who they hadn't.
So this just makes that easier.
And then they have other things in here.
Sometimes you get some improvements, just really just not super enthused about the community
aspect of open sourcing.
And it's much more a utility of, you know, it was just getting hard to track this, and
we figured we put it out there.
I mean, you know, it kind of depends on our internal data structures anyway, so we got
all that figured out.
We had a lot of it already done, so it was just sort of the last piece.
It's just very blasé.
Yeah, and then there's a Ruby community aspect of this of, you know, this is not going to
shake the Ruby community to its core, I don't think, unless my perception of what's going
on is very, very wrong, which I don't think it is.
Do you think it could inspire some changes?
Well, it's interesting because their model for type checking in Ruby, right, was not
adopted by the Ruby core team.
You can use one or the other.
I think you can even kind of use them both together.
But Ruby 3, spoilers for this, is going way deep.
We covered this about six months ago, I think.
Added type checking, Sorbet has had type checking, and they're kind of on parallel tracks.
First of all, you have to need this, right?
If you're just writing like a line of business Rails app, you don't need this, and this is
just adding extra weirdness to your project.
There's so much going on in the let's add type checking and performance improvements
to an interpreted language space now that I'm kind of skeptical with some of this.
Python has something like this too, right?
They've added type checking to a point, or types to a point.
To me, at some point, if you're taking an interpreter languages and writing a compiler
for it, basically your problem is you probably shouldn't have been doing this stuff in the
interpreted language.
So that is exactly what I was going to say, yeah.
Right.
Well, it was fast to get a proof of concept, a V1 up in Ruby, because Ruby is a great language
for developer efficiency, and they admit freely, if you read their blog, which is a really
great blog, the Stripe developer blog, that they do lots of their projects in Go and I
think Java.
Java.
Because they're fast.
Yep.
Yep.
Yep.
Which makes sense.
At Stripe, their problem is performance and scalability, right?
They're literally operating at, we process tons of payments in the world.
Not only is that critical for them, but it's so, so critical for all the businesses that
depend on Stripe.
Like, that's mission critical stuff, payments, right?
So they've got to get it right.
And so when you read the post, and you kind of read into what they're saying, to me it
looks like, well, exactly what you just said.
They created a lot of this because it was quick to get going.
But now they've got to keep it running because of the business critical nature, and the teams
that are maintaining the existing Ruby stuff just desperately, urgently need things to
run faster.
And then they have, as they put it, a handful of teams that are using Java and Go in new
areas that they've rebuilt.
They say that Stripe's existing Ruby code base is many millions of lines of code and
implement Stripe's most business critical workloads, i.e. the most core value stuff
is written in Ruby.
So that's why they're spending the time to make this better, even if they rewrite it
one day.
Yeah.
You know, that's like the magical rewrite.
You know, the refactor that's always, you know, one year away.
Yeah, I don't know about that.
I mean, I have the same problem.
Well, actually, I literally had this problem in Ruby about a year and a half ago.
I solved it by writing the component I needed in Rust and run another project C++.
Right now I'm doing the same thing in Python.
I have a thing that needs to be more performant, so I wrote one little stupid module in C++.
Little stupid module that does, like, mission critical stuff that involves, like, processing
a bunch of data.
And it's just a native binary that the Python application will call into.
I could see this being useful for some people in the audience.
Oh, yeah.
I think it is useful.
So, yeah, we'll have a link in the show notes for that, and you could check out some of
the...
I mean, 170% faster?
I don't care who you are.
That gets your attention.
If it's real, that gets your attention.
We're gonna have to struggle with things that may or may not be real, but I can confirm
that Linux Action News just hit 200 episodes.
We have a sticker out for that, and also, I was just gonna mention, Self-Hosted just
hit episode 50.
Like, these young kids, Mike, we're sitting here at 425, and Self-Hosted just hit 50 episodes,
Linux Action News just hit 200.
Aww, they're so cute.
I know.
We have new stickers for both Self-Hosted and Linux Action News that are taken from
the MP3 album art, which seems fitting for, like, milestone releases, and those are up
at JupiterGarage.com, along with some new swag up there at JupiterGarage.com.
I just want to recommend the Chris the Badger shirt.
I can say that I am ordering several, because having your face on my chest has always been
a dream of mine.
Absolutely, and you know how I prefer that left boob of yours, so I think that's right
where my head will be.
Well, it does flop at a very unique angle.
I've always thought it was a bit of a unique snowflake.
So that's JupiterGarage.com.
That's our swag store, and we're gonna get some more, you know, eventually, if we ever
do another run on the coder robe, that's where it will go.
Don't mention the coder robe.
Irvine, Irving, he just wrote in, he said he loves his coder.
He says it's his great, he works in it every day.
The only thing he says we should do now is we should get an optional lint roller with
it because since he started working in his coder, his cat's all over him, and now he
needs to get the cat hair off it.
Well, you know, the coder, I write 50% fewer bucks.
I just want to say.
Really?
Yeah.
It must be the arm support.
You know, it's cut so that way it doesn't get in the way of typing.
Okay, so this next story, it seems so freaking far out.
I had to like go make sure you weren't trolling me when you linked this story up.
Nice.
This is Doctor Who level like Star Trek, like an actual thing in Star Trek, like this is
nuts, a research team with dozens of scientists working in partnership with Google's quantum
computing lab may have created the world's first time crystal.
We're not kidding you, they've created a time crystal.
Like a perpetual motion machine, a time crystal forever cycles between states without consuming
energy.
Scientists claim to have built this new phase of matter inside a quantum computer.
If it is true, it is literally the magical breakthrough quantum computers have needed.
So I know this sounds wild, and I know it sounds impossible, and there's white papers
I will have linked in the show notes.
It seems the Google team may have figured out what was once theoretical and actually
created this thing in a quantum computer, and they called it a new phase of matter.
It would be like having a snowflake that consistently cycled back and forth between two different
configurations of its crystalline shape.
It's a seven point lattice one moment and then say a 10 point lattice the next moment
or whatever.
Like if you could imagine a snowflake that does that, that's sort of how a time crystal
is.
What Google has done is potentially prove that humans can manufacture time crystals.
In the words of the researchers themselves, quote, these results establish a scalable
approach to studying non-equilibrium phases of matter on current quantum processors.
OK, I'm really not following what any of that means, but it sounds like a really huge deal.
Like people are freaking out in the scientific community about this.
It means the doctor is back and the Daleks are coming.
It's so hard to understand.
I can barely even say the words to even wrap my head around it, right?
It is super complicated, but it could mean that we have kind of a solution.
If this is my understanding of it, we could have kind of a solution that we've needed
to kind of take quantum computers into actual daily use.
Well, I'm actually excited about this.
Obviously people are writing about how this could be like the very, very baby steps, like
a theoretical warp drive, which is nuts, but maybe not nuts, right?
You'll be laughing at me.
But really, will this finally enable us to automatically change our desktop background
in GNOME?
I can't believe you.
I cannot believe you.
First you dismiss all of their response and then you troll them again.
It's amazing.
That is savage.
Kidding aside, this is a huge deal, right?
It's so, it's so like, well, one, all right, this hasn't been peer reviewed, right?
So this could be a fluke that would be very depressing, could be some kind of, you know,
it needs to be a repeatable result to actually be accepted.
But assuming like, I don't think Google would make this up and Princeton University certainly
would.
Right.
Yeah.
So this is like the beginning.
We all might be dead listening to this when this actually matters, but this is the beginning
of a whole new wave of computing, right?
Thinking about quantum computing, the whole big deal is like multivalent states, right?
It's not just ones and zeros anymore.
So that, that's just like, literally everybody listening to the show will effectively be
a dinosaur once this becomes big enough.
Even if we're still around because this is a whole new way of computing.
Yeah.
Yeah.
That sucks for us, but hey, if I get a flying car.
Yeah, that's true.
I mean, Google definitely thinks this is real.
They've with Cornell University are publishing a white paper that we'll have linked in the
show notes and in here they basically promised the moon in the, they say they'll demonstrate
it and yeah, I mean, wild, but you're right.
Even if, even if it was something they could start working on in the next 10 years, the
industry wouldn't transition forever.
So it's not going to, you're right.
It's not going to really impact us.
Maybe, maybe governments, you know, in large institution and research computers.
So maybe it could have an, it could have an impact on our lives in the way that supercomputers
do now where they're helping in research and spying on us.
Yeah, exactly.
Exactly.
Datadog.com slash Coder Radio.
Go there to get a 14 day free trial, support the show and get a free shirt after you create
one dashboard.
Datadog lets you analyze code level performance across your environment and troubleshoot issues
faster than ever using Datadog's tools, like their continuous profiler that automatically
collects profiles from your production servers all the time.
So you can analyze your data quickly with minimal overhead, get your answers quickly
and communicate that with your team.
You get a unified picture of your environment by correlating code performance metrics with
your other monitoring data from your entire stack, all in beautiful real time dashboards.
And it gets even easier with over 450 integrations for tracing, log management and other enterprise
applications you're probably already using that connect in with that continuous profiler.
It's all in one product, all in one platform.
Datadog enables you to pinpoint the root cause of issues faster than ever.
So go try it out for free for 14 days by visiting datadog.com slash Coder Radio.
For a limited time, if you start a free trial and you create one dashboard, you'll get a
free Datadog t-shirt and I love free swag and I could definitely use a t-shirt right
now.
So go to datadog.com slash Coder Radio.
There's one last article I wanted to talk to you about.
It was emailed in to us a couple of times as a suggestion to get our take on it and
it ran over at techcrunch.com.
It's from Sean O'Mara and it's titled the end of open source question mark and the inflammatory
title almost made me want to dismiss it immediately.
But the root of what Sean writes about here is actually something that crossed my mind.
So several weeks ago, well actually April, so it's been more than weeks, there was a
ban by the Linux kernel team of the University of Minnesota for committing hypocrite commits
that was commits to the Linux kernel that were intentionally buggy to create a problem.
Now that code never shipped in production and when the kernel team found out they were
doing this, which it was, they found out earlier in the year, they didn't find out in April,
but there was another series of commits in April that they suspected might be part of
that research renewed.
The timing also worked out fantastically for the kernel team because by creating a huge
issue in April about these hypocrite commits, even though they had occurred earlier in the
year, they were able to get the talk that was scheduled at a security symposium canceled
that was about these hypocrite commits to the Linux kernel.
And essentially what happened is a trusted source at the University of Minnesota used
a basic kind of crappy static analyzer to find obvious low-hanging fruit in the Linux
kernel.
And then it seems unclear but three to five times that we made it through the first pass
of maintainers submitted patches that ostensibly seemed to fix that bug but were so complex
and gross actually intentionally introduced other vulnerabilities when stacked with other
elements in the code.
Now that made it past the first level maintainer but never made it to Linus's tree.
But the research is actually kind of valid.
The research idea was can we exploit our position of trust to get vulnerabilities into a project
like the Linux kernel even with its structured process of maintainers and all of that.
And the answer is yes they could.
They did it successfully.
Now the big upset and the ban which dominated the headlines essentially killed the messenger
of that research.
And so the actual results were kind of put aside and instead the focus was put on how
dare they violate the kernel team's trust and time with these hypocrite commits.
And the discussion never really came back to was it valid research or not.
And what Sean is saying over at TechCrunch is that when you look at the complexity of
this particular problem abusing a trusted source to submit hypocrite commits that is
a problem that is going to impact the entire open source ecosystem.
Every free software project out there needs to be thinking about this.
And the Linux kernel is probably the best suited to defend against something like this
in terms of resources and structure and it was compromised.
So what do you think is going to happen to something like NGINX or GREP or something
lower in the stack that does maybe have only one maintainer.
And so what Sean is saying is this is a huge problem and essentially open source is dead
in the water security wise until they come up with a way to solve this problem.
And he argues that the net result is projects that are large in scale are even worse off
they are just utter unprepared to deal with this game changing hyperscale threat model
he writes.
He says the researchers were able to target and get their patches in in code that was
reviewed by a maintainer.
Maybe they didn't maybe they didn't review it fully who knows but essentially by abusing
their insider position in the community the maintainer probably just took a quick glance
at it and said well it's garbage but it'll fix the issue I suppose.
So is this what do you think is open source essentially screwed unless they come up with
a way to secure this end of the development chain.
I saw the story in like early May and I kind of ignored it because one I'm sure this happens
all the time with or without intent right.
And I can personal experience right I have a lot of dependencies but a lot of PIP dependencies
and people make mistakes when they update their thing or they don't realize they're
breaking backwards compatibility with some other package you're relying on right.
Great I mean there are tons of examples but like there was a intentional and I don't remember
the part of the Heartbleed stuff where the gem for SSL on Ruby they just like killed
a bunch of versions of it because it was exploited but that really screwed up a bunch of Rails
projects for me and caused a lot of heartache it forced me to update faster than I wanted
to.
Also going to the proprietary side and I'm going to get to the point in a minute don't
governments around the world either hoard zero days or in fact demand backdoors.
Well and look what we just saw with the NSO group and the iPhones and Androids that were
getting exploited.
Yeah I mean isn't that just an intentional exploit.
Yeah they're sitting on some exploit to take advantage of that in order to get past Blast
or on iMessage which is the sandbox for iMessage they have to be using some exploit that Apple
doesn't know about.
Yeah I don't I kind of don't buy this I think this is a fun story because it yes the weird
part it was university researchers who you might expect better from.
Yeah.
But this is like saying hey if I have the key to your liquor store I can rob you.
Okay so you any contributor to any project could do this and this has been going on for
decades literally right via you know government entities.
That's my take and or just people that are dicks that are just you know doing stupid
stuff to be a jerk.
The thing is is we have more tooling now than ever to track changes and revert changes and
revoke permissions or honest mistakes.
Yeah absolutely.
Heartbleed was not on purpose.
Right I mean it feels like there's definitely a technological solution to this.
We could have more tools that are checking patches and smarter and smarter like again
I go back to Copilot wouldn't it be interesting if this was a problem Copilot was solving.
But maybe there is some project governance here.
It's so tricky when you have a project like the scale of the Linux kernel.
There's no model to follow there.
They're inventing how you manage a project of that scale every day.
So it's hard to criticize how they manage it.
But this is the thing right unless you're going to go full TNO you're trusting lots
of people whenever you're building modern software.
Even if even if you were pure like Microsoft stack only well one there it's open source
now so it's really in the same league and two even when it wasn't I would argue is less
secure because if you're just getting some proprietary you know binary library or binary
blob or whatever the hell you're doing you don't know right no one else no one outside
of the organization who's probably NDA'd out the butt has looked at that code.
And yes I agree when you go to get hub and you pull down somebody's jam or somebody's
pip project you should assume that everybody's a Russian spy.
Naturally.
Naturally.
I mean what do you what do you what's the alternative.
Are we going to all write everything in assembler ourselves.
You're going to write the entire stack every time.
You know Chris for the next three years I'm just working on my own custom file system.
I call it butter F.S.
Oh you know but this problem is it is the conundrum that is coming across in every aspect
of technology right now.
So like self hosting do you self host everything do you use Google for some things do you use
iCloud when you have an iPhone or do you run next cloud and do you run that entire stuff
yourself.
You don't use Google App Engine that's for sure.
Well that's just it isn't it it's actually a series of balances and compromises and picking
and choosing what you put all the work into what you essentially are you could almost
consider contracting out in a way outsourcing.
It's a big balance now and so it is it is in just about all elements now.
It's kind of a wild thing we're really creating a pretty significant interweb of dependency.
What could go wrong.
Well also I would be a little more afraid of proprietary systems.
In fact it is probably my one big thing against you know Mac and iOS is Apple is a company
that has proven super willing to bow to the Chinese government for all kinds of crazy
right.
Like sure why not some backdoor to iMessage or into iCloud for iCloud right.
At least with the Linux kernel you know there's some crazy dude from somewhere in Libsyn or
I'll some European Munich or something who's like no freedom ha.
Yeah there's going to be there's going to be somebody that's checking it just to cover
their own ass too right.
There's so many different motivations for using that technology that somebody's just
paranoid and when they discover something they'll make a blog post and become famous.
Right exactly like there I am confident that there is some freedom bearded wizard in Europe
somewhere who doesn't give a crap what the US or Chinese governments have to say and
is going to look at all these patches.
Yeah there is that there is that element of at the end of the day there's no one particular
corporate interest that's twisting it and and making it into something and that is in
a way it's a different kind of security right it's a different kind of trust like you can
you can have confidence in the security of Windows 11 or iOS like you can have some confidence
there but you know in the back of your mind like those kind of corporate vulnerabilities
even if the code is pristine those kind of corporate vulnerabilities exist and it's just
the nature of being in business at that size that's just the reality.
It's just how it is and that's a different kind of trust where open source you can trust
that that thing doesn't exist maybe there's flaws maybe somebody is submitting hypocrite
commits but you can trust that it doesn't have those corporate flaws.
Right and also like let's just take the crazier case which you I think you'll remember for
sure because we covered it but a couple years ago there was a story where Facebook and Google
and a bunch of the big tech companies here had to admit that they kind of got hammered
they had a bunch of like Chinese spies working there yep yeah they're targets they're targets
and so but in the open source world let's just say like you know Chris is a Chinese
spy you can sound for that and he's like trying to infiltrate the podcasting world right he's
gonna hack fireside or something well if it's open source somebody's gonna notice what the
hell is this why is all the traffic going to like a Shenzhen that doesn't seem right
proprietary you'd never know yeah right even Facebook didn't know that they had a handful
of Chinese spooks there Google didn't know they had to get rid of them right the government
had to help that Facebook thing are you aware that the first time you probably heard of
the NSO group was actually a couple of years ago when a story came out that Facebook attempted
to buy the Pegasus software so that way they could monitor iOS users outside of what the
sandbox rules allow them to do I did not remember that but Pegasus yeah the very Pegasus software
that is at the center of this whole NSO group controversy right now about hacking phones
using zero-day exploits Facebook tried to get up to become a contractor and they turned
them down they were turned down and this the reason we know this is it's an illegal deposition
it's in court documents that it came out that's how we found out about this so it seems pretty
legit and that's that's you cannot trust them you just cannot trust these companies that
are living off of data they were willing to use spy malware to track users outside of
what the iOS what iOS naturally allows for Wow I did not really I forgot about that that's
whoo yeah that's really something and in the deposition to they're complaining you know
the iPhone is just a lot harder to track the users and the Android phones are so we need
to buy something for the iPhone so that way we can kind of get more data and Facebook
is suing the NSO group I think it was some sort of anyways I'll put the link in the show
notes I don't remember the details because like two years ago but never remember when
police is just like sell software for money yeah those were the days oh here it is I just
found the details so the spyware would have been inserted into the VPN software that Facebook
bought a novel which was a VPN app that got pulled off of the App Store back in 2008 by
Apple for violating data collection policies and in the NSO group the NSO group in their
deposition in court said quote the Facebook representative stated that Facebook was concerned
that its method for gathering user data through a novel project was less effective on Apple
devices than on Android devices and they continued to say quote the Facebook representatives
also stated that Facebook wanted to use purported capabilities of Pegasus to monitor users on
Apple devices and were willing to pay for the ability to monitor a novo protect users
a nova protect used to spy on you I love that Arwellian twisting too that's so great Facebook's
just great so yeah yeah there is something to open source beyond just the kind of more
flashier things that people talk about is that there's just at least nobody that's trying
to hack your VPN to spy on you and if they if they are they get caught right there's
another sinister side of the ANOVA story where Facebook ended up having to admit to they
use the VPN traffic on people's phones to see what the new and up-and-coming apps were
to either buy them or kill them right that's how they bought whatsapp yeah they just well
there's a lot of traffic going on this thing let's get rid of it yeah hmm yep yep yep
so they're creepy it's all really super creepy and so no I say it's not the end of open source
I agree with you in fact it's probably just going to transition into a new phase because
this kind of what do you call it lack of trust trust debt whatever we might have in large
companies and institutions is going to drive market for the adoption of open source and
companies are going to continue to be able to say you know this is our service XYZ brand
new service super scalable service is backed by open source but I want to just throw a
little monkey wrench in all that that's nice independent thinking did you see the story
about the super militaristic raid on the Bitcoin boys up and I think it was a New Hampshire
oh no really why why were they using too much power they refused to get a license to transmit
money and the federal government's response to that was tactical assaults on their home
the one lady they picked up was just like sleeping in her underwear and t-shirt they
like told her if she moved they'd shoot her wow so you're saying I should probably store
my crypto somewhere outside the studio I would definitely have a VPN that's for sure yeah
oh boy hey coder qa members out there coder qa.co if you want to become a member and support
the show you get a limited ad feed and you get the coder Lee report and we repost it
over the weekend because only about half the members like got the auto-generated RSS feed
so if you missed it check your feed again the coders the quotas no the quarters quota
you understand what I'm saying there's a new coder QA out there for you members out there
so go get it for the team I don't know the words are completely gone now it's like I
haven't slept for two nights and I can't even get through yeah you think I'd never done
it before well I do remember this to start wrapping us up I do know there's something
else we should say like maybe you want to send anywhere anybody any place like a website
or I don't know a damn Twitter page I don't know follow me at Dumanuco on Twitter you're
giving away computers yeah I'm oh yes I forgot about that I always forget things yeah yeah
we're giving away Thalios I have to write up the actual terms but it's another student
contest I'll have it ready for next week that's nice yeah we know you're busy these days but
that's pretty great if you're a student out there and you know what student couldn't use
a Thalio keep an eye out for that I'm on the Twitter stu at Chris LES the network is at
Jupiter signal and the whole show is at Coder radio show and that's like good for announcements
news updates time changes at Coder radio show and the at Jupiter signal accounts good for
that too we're live on Mondays now at 10 a.m. Pacific 1 p.m. Eastern over at JB live TV we'd
love to have you hang out with us in the chat room we chat before and after the show follow
the chat room during the show and we love getting your title suggestions too but of
course we always appreciate you downloading subscribing and sharing the show with a friend
thanks so much for tuning in this week's episode of the Coder radio program and we'll see you
right back here next week

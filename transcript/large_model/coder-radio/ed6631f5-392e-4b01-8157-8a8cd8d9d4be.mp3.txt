This is Koto Radio, episode 374 for September 9th, 2019.
Hello, and welcome to Koto Radio, Jupiter Broadcasting's weekly talk show,
taking a pragmatic look at the art and business of software development and related technologies.
Sometimes it's just all about the related technologies, but you know what? Those are important.
So important, well, I'm going to need some help.
I'm Wes, of course, and I'm joined by our favorite rampaging Rubyist, Mr. Michael Dominick.
Welcome back to the show, Mike.
Hello, Wes. How are you?
Oh, wonderful. Nice to be connected with you.
There's a lot going on out in the software development ecosystem that we find ourselves in,
so we better get on with our show today.
I'd like to start things off with like a little correction, because you know what?
We're here every week live spewing out our opinions, and oftentimes we get something wrong,
either just totally by mistake or the wrong word comes out.
So last week, we may have implied that the new macOS shell was going to be Phish,
and I think we both wish that was true.
I know I do, but no.
Some very wise people gave us some feedback over at coderradio.reddit.com,
and of course, as we've previously talked about and should well have known, that shell is ZSH.
Yes, it is a Z shell. That's my bad.
I just love Phish shells so much, I thought my dreams were coming true.
Well, we can hope.
And of course, if you'd like Phish on macOS, well, that's easily done.
How do you usually install it?
Is that from brew or elsewhere?
Yeah, just brew.
Easy.
All right, well, let's hit a few more feedback items while we're here.
Just a quick one from Juni.
What if Perl 6?
Last episode, you guys got on talking about shell scripting,
interpreted languages, REPLs, and command line interfaces,
and it really just made me think more about Perl 6.
It's Lispier, it's got more metaprogramming and more of a focus on a REPL,
and much more modern than Perl 5.
After three to four years, it hasn't seen the light of day, though.
Would you find it useful?
Like a Python alternative for shorter but maybe more complicated scripts?
Thanks for your opinion.
So what about you, Mike?
You know, I don't think we've talked much about Perl at all,
besides, you know, maybe the odd joke or two that always ends up sneaking in.
I don't think we have either, and we've been doing the show a long time.
I mean, yeah, Perl is a language that has been around for a long time
that I can tell you I have never used.
What about you, Wes?
Oh, no, I've used Perl 5 far more than I'd care to.
There's a lot to like about it, honestly.
There's a lot of really neat things, a lot of good Lisp influence.
I think it's an interesting language.
It just fell into a kind of strange niche where it was used in very clever ways,
and there's so many different ways to say things, at least in Perl 5.
It can be pretty hard, whereas it's easy to see a Python script
and pick your way through that.
A lot more complicated if you're not well acquainted with Perl.
Perl 6, though, is kind of an interesting case.
I've not actually played with it, and I think that's unfortunately true
of many people who'd previously used some Perl 5,
because it's just a very different language with the same name.
Now, obviously, it's a big version change, but I don't know.
I mean, you know my proclivities for name changes,
but it seems like there's enough novelty in there.
There's interesting stuff.
It deserves consideration probably, at least as much as any random language does,
and hasn't really seen that just because it's not exciting.
It doesn't seem different enough maybe, or people just aren't interested
because it's still got that Perl nomiker.
And it's tough today, too, because I feel like we're coming out
with like five languages a week now.
Yes, and many of them have big corporate back-end, right?
So this is kind of more of an old-school, open-source style language.
And as we've seen less and less sort of, you know, like sysadmin stuff,
people writing these quick little shell scripts,
not in like a bigger language.
Well, it's a different time.
That it is.
Here's something for you, Mike.
Actually, something for me, too, of course.
And that's some feedback from our friend Nuclear Nick,
who's writing to us about Pry.
In a previous episode, I was amazed to hear that Mike had never used Pry before.
It's one of the first things I show off to people when introducing them to Ruby.
And then you guys can go find it in the show notes.
He's got a great little example of how you can use things like CD and LS
and all the little affordances that are available in Pry,
just to make it a little bit easier as you're exploring
and trying to learn a new language.
So what do you think, Mike?
Are you willing to give it a try?
I mean, just to gem and stall away.
Yeah, I actually have to give that a shot.
He's absolutely correct.
I have not used it.
I still have not used it, but you know what?
I'll make it my homework for this week to give Pry a look.
And if not, I'm sure more people will write in
and we'll just have to keep shaming you right here on the show.
Listen, just like Game of Thrones, just go shame, shame.
You'll get there eventually.
All right, well, here's something that I'm curious about your input on.
That's our last little feedback item today from Justin,
and he writes to us about learning web development.
Hey, guys.
I'm currently a senior at Purdue studying cybersecurity and web development.
I'm in a weird place, though, because with web development,
I didn't start in this major.
I've just sort of jumped in now as a senior,
and I don't have the past three years of classes and background.
Instead, I learned all about IT and systems administration.
Want a new Bantu box set up as a Kubernetes master with 20 nodes
and your services configured, load balanced, and automatically backed up?
Say no more.
I got that.
But want a three-page responsive website about your dog built with Bootstrap?
That I can't do.
I feel woefully unready, and I was wondering if either of you
had suggestions for structured content around web dev design,
things I could use to augment my learning.
Thanks a bunch.
Yeah, that's a really interesting question,
and every once in a while we get a form of this question.
I have to say, if you have this IT background, this IT administration,
this kind of DevOps-y background, that's great, right?
Everybody's looking for that guy who can do web dev plus DevOps.
In terms of structured courses, there's obviously the Linux Academy stuff.
It is a little more on that IT administration pathway.
I think that's a fair characterization.
At least most of the content.
Yeah.
I used to recommend, when we got this question years ago, Code School.
They had a, particularly for front-end web development,
they had a really good, I think they called it like Pathways of JavaScript.
Unfortunately, when they got purchased by Pluralsight,
they actually kind of shut down most of that style of content,
which was interesting.
I don't know of a structured class or format that I would recommend now.
There's obviously Code Academy.
There's boot camps, but then you have to pay,
and you're just getting out of school.
I would maybe look at Code Academy.
In fact, if you do, I would encourage you to write back in,
unless Wes has the silver bullet.
No, unfortunately I don't.
It can be one of those frustrating things,
especially in web development where it moves so fast.
There's plenty of outdated CSS and JavaScript tutorials out there,
but that's probably not what you want.
It's especially difficult when you're new and don't know how to filter
what's good or old or outdated information just to find the best sources.
So unfortunately, no, I don't have a super solid answer,
but maybe our community can help.
If you have any favorite web development courses,
well, please do let us know and we'll pass it along,
coder.show slash contact.
I do like your point there, Mike, though.
Having that IT background, that is going to be a huge plus,
and you're probably just going to have to struggle through some things,
keep playing with the web tech,
and eventually you'll have enough of it under your belt
that the rest will start to come easier.
Your point, too, this front-end,
particularly the front-end JavaScript-y framework stuff,
is so aggressive with how quickly they're moving.
I would rather be starting from his position of knowing IT administration
and DevOps, at least to a point,
if someone who studied it in school,
because you're going to be relearning web technology.
It's like our story coming up about TypeScript, right?
Yes, exactly. That's key.
You're going to have to relearn.
It sounds like you've already got some good skills about learning to learn,
being able to learn, so pick some stuff.
If you can find some good tutorials,
I would worry maybe a little bit less just right now
about if it's exactly the best stack or tech,
and once you've kind of got all the fundamentals done,
you've done it once, it makes it a lot easier to jump ship.
Speaking of TypeScript, nothing too deep here,
but I just saw an interesting GitHub issue filed by Google,
and I think this is kind of a fun case study
of two giant organizations collaborating on open source
and working together out in the open.
So this is Google feedback on TypeScript 3.5.
We recently upgraded Google to use TypeScript 3.5,
and here's some feedback.
Now, for background, they write,
recall that Google is a mono repo of billions of lines of code.
We use a single version of TypeScript
and a single set of compiler flags across all teams
and upgrade these simultaneously for everyone.
So, oof.
Nightmareland.
That's a big undertaking already.
Yeah.
So we know and expect every TypeScript upgrade
to involve some work, and, you know, honestly,
improvements to the standard library are expected
and welcomed by us,
even though they often mean removing similar
but incompatible things we have in our own code.
However, TypeScript 3.5 was a lot more work for us
than other recent upgrades.
There were three main changes in 3.5
that made it especially painful,
and we believe most of these changes were intentional
and intended to improve type checking,
but we also believe the TypeScript team understands
that type checking is always just a trade-off
between safety and ergonomics,
which that's just an interesting observation
that doesn't always get made.
So if you're interested, if you're a TypeScript user,
I definitely recommend kind of just checking this out.
It's interesting as an insight into, you know,
how Google used this tech
and just some of the back and forth between people
from both organizations, you know,
operating politely, nicely, productively.
There's just a lot of, like, polite language here
that you wouldn't even have to be necessarily
to phrase it this way,
but, you know, there's a breaking change,
and they write,
historically, when TypeScript has introduced
type system changes like this, they were behind a flag.
Suggestion, using a flag here
would have allowed us to adapt to this change
separately from the other breaking changes in 3.5.
So there's no, you know, it's not like a bunch of blame.
It's not being upset.
It's all just very well articulated.
Yeah, I mean, this is really the full-on
open source dream here, right?
And also, what happened to Dart?
What happened to Dart?
Oh, boy, that's an interesting question.
That jumped right out at me when you put this
one on the dock. I was like, huh.
Must suck to be on the Dart team.
I mean, there's so much going on in that space.
And obviously, Google is
a giant organization with lots of projects
underway. Well, we should give the TypeScript
team credit, right? They have,
of all the, let's say,
pseudo-JavaScript-y languages, CoffeeScript,
Dart, TypeScript, we could keep
going, but why?
I think TypeScript has, I don't want to say
it's become the standard if you're not using
straight JavaScript, but
I think it's, I wonder how you,
what you're seeing, but what I'm seeing when I'm looking at
people who are looking to employ
people, people looking for contractors
to do work, people looking to hire
dev shops, if it's a front-end job,
and if they're not just saying, hey, we need
a web job done,
they're asking for TypeScript specifically.
Yeah, and I mean, I think
it's becoming especially popular
in the cases kind of that it was designed
for, right? And that's big, large organizations,
people like Microsoft and Google,
who have a lot of engineers working on lots of
projects and find that
some of the additional structure and
compile time checking provided by TypeScript
is really helpful. Google's employee
here says, I'd like to emphasize that
we are very happy with TypeScript in
general, and they're just hopeful that the feedback
helps make it better. But you're right, I mean
TypeScript has become, maybe
not quite de facto, but
something pretty close. And
now with RMS talking at Microsoft
and Google and Microsoft
collaborating on GitHub together,
I think we have entered the Kumbaya
hippie age. Well, we can
only hope, you know, hey,
open source benefits everyone. That's right, keep it
free. Unless, of course, you're on the App Store.
Boom. You pointed
at us this week to some
interesting stories actually coming out of multiple outlets
highlighting something you've been talking
about on the show for literally
years, Mike.
And that's how Apple,
what Apple does with competitor apps.
Apple does something what they
call Sherlocking, which has nothing to do with
Benedict Cumberbatch or
21B Baker Street, and has
everything to do with an app that was called Sherlock,
where they simply implemented
its functionality in an old version. I think it was
like Mac OS. Higer?
Right, okay, so Sherlock
was a third party app that you could
use to go find stuff on your file
system, right, or integrate with apps and stuff.
Yeah, like Spotlight if you're a Mac user,
right? Right.
And they've continued to do this.
They've kind of always done this, even back in like the
Mac OS 9 days.
It's one of these topics that
I wanted to put on the show out of
pure spite, because for years
you would get feedback
back in the bad old days when it was just
Chris and I before you
joined us with your radiance.
I interloped, you know. No,
you were like an angel descending.
I want everybody to know that Wes
is angelic.
You have to be divine to
be able to understand Clojure.
I don't know about that, but I
appreciate the compliment. Yeah, so Apple
is like hyper aggressive at basically
and I'm not going to do the whole lecture I used to,
but commoditizing their compliments, right?
Basically, there's a set
amount of value per user that is
available per iPhone. Apple makes sure
they get the most of it. They aggressively
drive down software prices.
And if there is an app
that is effectively a de facto standard
for iOS or
even Mac OS, they will just
eventually implement that as part of the OS.
Now you could argue, well, that's a better user
experience. Maybe it is, maybe it isn't, but they have
not been shy about just
putting people out of business.
And giving that iOS, particularly
for all those years of mobile,
was really the only platform
that made any money for independent
developers. Right, I mean, for a long time
there had been, that had kind of been the success story,
right? Here is the platform you can target
and because in part of some of the things Apple
has done to make it that way,
it was a profitable marketplace, at least for a
time. I think the best case is
not Apple straight up Sherlocking
your app, which does happen, but that has been
happening less and less.
But how about like if you're Spotify and they just
make it, you know, financially
disadvantageous and technically
disadvantageous for users to
use you as their preferred service
over Apple's competitive service.
This is
going to be a huge deal as
we go into more and more automated
voice technologies where you don't
have just like, you know, where it's like
you know, Miss
Miss A, I hope I'm trying
not to trigger people's echoes,
you know, Miss Echo, Echo, do this
or hey,
so and so, do that.
The platform vendor
gets to pick what software is
actually run, right? There's very
important defaults there, right?
And they can make it like they can allow
third parties were like, I think you can do
hey, so and so play something on
Spotify, but
that's garbage, right? That's
that's not nearly as good. There's no way just to set
it to Spotify.
So I think this is an important
story, and I definitely want to get your perspective,
but my only criticism of
kind of the pieces we have here is that they
focus a little bit, particularly the Washington Post
went a little bit too much on straight up Sherlocking,
which is terrible,
but it's something that's happening less and less
and they really should focus more on
the platform vendor giving
its applications an unfair advantage.
And that could be anything from
not charging themselves 30% to
being able to use
private APIs.
Right? That's a big one.
There's a lot to unpack here.
There's another piece we'll have linked in the show notes from
the Times, and they talk a lot more
about some of the search algorithm and what's
going on there, how changes get made
and basically, you know, the impact of the
small team that makes the decisions of
how that algorithm works
and point out some things that have changed.
Way back when in 2018, if you searched
podcast, say, then you'd have
to wade through like 14 Apple apps
before you even found the first
non-Apple app. Now that we should know
that's no longer the case, but it just goes
to show there's a lot
of power there. Yeah, I mean, and the other thing
I think we both kind of forgot. It's not just
search, right? It's also app store
editorial if they decide to feature you.
One running story we had for a long time was
we used to track
ex-Apple employees going independent
and how quickly
they became featured, even if their apps were kind of
you know, didn't do much.
That is like
and I'll dig it out, but from 2015
there was a pretty
clear analysis, I think Marco Arment, but I could
be wrong, so don't hold me to that, did that of when his
app was featured and when it wasn't, and just the
dramatic difference in revenue.
So it is a hugely
controlled
ecosystem
to work in as an independent business
and I
if that
is something that I think just needs to be looked
at, particularly, again, like the
Spotify-like cases. Yeah, and it is
interesting, like you don't, there's not a lot of communication
either, right? So you may be working on some
app that you think will be really successful and fills a hole
in the ecosystem and Apple might come out
a month after you launch it and they have
their better built-in platform version.
Yeah, but again, right, communication is another
great point. Depending on who
you are, and I myself had this experience
where I had clients who were very much favored
because they were bigger companies and Apple wanted their
apps in the store, you could actually get
quite a bit of hand-holding.
And like you were allowed to kind of wink, wink, nudge, nudge
bounce ideas, will this be acceptable, this not.
But if you're just an indie, you're
a lamb amongst wolves, basically.
Right, no feedback, no responses,
and just submit it
and find out, follow the process, Mike.
Exactly, yep. Well, that's
disappointing. I know we've seen lots of other complaints, you know, there's similar
platform problems
like in other industries, for example, Amazon,
right, there's been complaints
of similar behavior where they're able to use
all the access and data and behind-the-scenes
knowledge they have and launch their own
products to compete with whatever is successful on their
existing marketplace. And
more and more we see that, you know, this default,
this platform effect, I think it's just going to be
a continued problem as we shift
ever more of the things that we consume to
various platforms running
online. So, Wes, making
you king for a day, because I'm actually curious
what you think about coming this from more of a, like, Linux
Fosse perspective.
Do you think it should just, like, should
we put on our Elizabeth Warren hat and say, if
you are the platform vendor, right, if you run the
App Store, maybe you're just not allowed
to have your own apps? I guess that's always the
question. Like, where do you put the boundary, though? Because, like, what's an
app and what's part of the base OS?
You're so smart, I was going to trap you.
Would you mandate that, like, there's
something relevant between how you ship that, right, and
there's, doesn't compete in the same way because it wouldn't
show up in the App Store? So, basically, like,
Microsoft saying Internet Explorer is part of Windows
in 1990, whatever, 1999,
yeah. Yeah, right, and there's going to be a bunch of
problems there, too. Well, how about, like, the
mail apps and the built-in apps on the iOS
are never actually deleted
even if you delete them? There
are some questions, but that's a great point, and, like, Siri
is part of the operating system.
So, would this apply to Siri's
skills?
I think is the correct word for the API these days.
And what about something like an Alexa?
Mmm. Mmm.
You know, it is tricky. There's not a lot of
clear answers here, unfortunately.
And I realize I just triggered, like, everybody's
devices. Sorry. Whoopsie.
So, I don't know. I don't know that
what's happening now is what we want,
but it's hard to say exactly
what the best way to change this would be. Maybe
there would be ways to have
some degree of separation, not necessarily, like,
a hard ban, but
ways to make it so that those apps
had to follow more of the same standards.
But I don't know how you would impose
that in a reasonable way, either, and that's a whole
other question. Yeah, so speaking
of things that are going to be painful.
Oh, I don't know about that, Mike.
Really? Because I have a feeling we have
quite a few Python 2 developers in the audience.
We probably do, and
they've probably seen this post
over on python.org.
It's all about sun setting Python
2. News is in.
We have decided that January 1st,
2020, will be the day that
we sunset Python 2.
That means that we will not improve it anymore
after that day, even if
someone finds a security problem.
You should upgrade to Python 3
as soon as you can, Mike. Not a problem.
I'm already on Python 3. Yeah, right.
If you're starting today, just stay away from
Python 2. Just don't, you know, don't touch it.
Stick with Python 3. You'll be way happier.
It's better. It's getting support.
It's getting feature improvements,
and honestly, it's become a pretty nice
language. Yeah, it is actually pretty nice
to work in. I mean, it lacks the elegance and grace
of Ruby, but other than that,
it's fine. You know, it's
not a tool for someone as sophisticated
as you, Mike. It's a tool for us commoners,
the rest of us out there. Well, right. Like, when you write
Python, you don't weep at the beauty of your
code. No, I'm too busy getting stuff done.
Oh, I see
what you did there. No,
I know you're deeper in the Pythonista
land than I am. Is this like, I feel
like Python 2 has been on its last leg
for a very long time. Yeah, well,
OK, so I like the rationale
here. Why are we doing this? We need
to sunset Python 2 so we can help
Python users. All right. I mean,
that's a I like the sounds of that.
We released Python 2 in
2000, the year 2000.
We realized a few years later
that we needed to make big changes
to improve Python. So in 2006,
we started Python 3.
Many people read most
did not upgrade, and we did not
want to hurt them. So for many years
we've kept improving and publishing
both Python 2 and
Python 3. But this makes
it hard to improve Python.
Their improvements Python 2 can't handle
and we have less time to work on making
Python 3 better and
faster. And honestly, yeah,
I think this kind of just needed to happen.
It's been one of those transitions. It's been
going on for so long,
right? I mean, at this point over a decade
and for a long time, it felt like it just wasn't
going to happen. You know, like none of the big
the big tech giants were really using
Python 3. It didn't feel like
if you were a contractor or coming into an org,
you could really go to Python 3 unless you
were willing to personally go
spend the hours to convert their code base.
And there just weren't that many
big success stories. I think a lot
of that's changed though. Okay, so
has it changed
because, and this is me straight up asking,
I actually don't know the answer. Is it changed because
most new platforms
and new organizations are just starting with Python
3 or is it changing because there's been
methodologies around migrating?
I think there's a lot. Yeah, you have seen more
more big players make the good
calls and take on that technical debt and actually
push forward. And so that's meant they've had
hours of their own engineers that they can help if they
do use open source projects. Some
of them have then contributed as well as the communities
move too. So more and more of the big
popular libraries
that people need are either compatible
with both or in some cases only Python
3 now. I think also some of the
you know, the conversion code has gotten a little bit
smoother over the years. So there's a nice
two to three sort of script out there in the library
that you can use to help ease the transition.
And you've just at this point
you have enough
people out there using it, I guess. I don't know when
that tipped or how you judge.
And there's still a lot of holdouts, right?
There's still popular libraries that maybe haven't
haven't made the jump yet.
I'm curious how it plays, you know,
what part it plays in the larger Python
resurgence we've seen as well.
Because, you know, there's a time kind of like it was thought
of along with Ruby. They both had their popular
web frameworks in that space and sure it was
doing lots of lots of math and science
stuff. But those all kind of blocked away in
you know, little research labs or universities
somewhere. But these
days Python's huge.
The Python is now an
anaconda. Yeah, I think it is.
The other thing you've seen a lot of
just at the same time
is more Python type checking,
right? So I think that kind of goes
hand in hand. More big organizations
are realizing people like Dropbox say that
all right, well, we've committed ourselves to
using this library where
we've got a lot of code in it and
we're having problems. So
Dropbox just put out a great sort of
summary of their journey to type checking four
million lines of Python.
They're obviously a big user
and as they say,
the dynamic typing in Python made code
needlessly hard to understand and
started to seriously impact productivity.
So they've started
using MyPy and it's
a fascinating post because it kind of
tells the story from when they just
started using it as sort of a research project
internally. But now they
write like present day type checking and type
hinting is a normal thing for numerous
developers not only within Dropbox
but just in the wider
Python community. So in some senses it almost
strikes me as what's been happening to the
JavaScript community where you had this old language
felt stagnant and you just get
enough developer mass, developer
time, interest, community
building and you
can modernize and change things and get people to
actually adopt it. I think it does help
too that really they're not, Python
3 and 2 aren't like super different, you know?
You get a print function instead
of a print statement and then most of the rest of the other
stuff is just pretty much straight
up improvements. I don't know,
just interesting, I just remember for years reading
comments like, Python 2 to 3 is
an example of a transition done very poorly
that you shouldn't do. Yeah, that was
my impression that like they were effectively
different languages at this point because my Python
experience has been, can't
say entirely in 3 but you know, beyond
just like little scripts that
I inherited on like two projects.
When I'm talking about like writing
full scale applications in Python, it's
only been 3. It's curious
to me how long this took
if that makes sense, right? Like someone in the chat
room mentioned it's because like there's
Oracle dependencies if you're an Oracle
shop. That seems weird though because wouldn't
Oracle just like also want to
upgrade? Or am I missing some key
like technical issue
between 2 and 3? Well, I mean there's always
just technical debt too, right? You gotta be willing to spend
the time and therefore
money to convert it. So it's
the business? Yeah, exactly.
It's the business. The art
is clear, right? You just gotta move right on.
Just do the work, right? Okay.
So speaking of things that
aren't business. Hey, do you want to play
some Final Fantasy 7 using the.NET
runtime? Yeah. Yeah, I do.
Of course I do. You know I like.NET, Mike.
Well then do I have the GitHub for you.
The project
PSX, X as in Xena,
is an experimental C
sharp emulator. You mean
it's a C sharp PlayStation emulator?
That's crazy. That's crazy. Yes, because
emulating C sharp would be weird. Yes.
No, I like that though. Wow.
This actually looks pretty cool.
It's new. It's pure C sharp. So
that's kind of handy if you're interested in kind
of seeing how that might be done. I don't know.
A little bit of F sharp could have gotten in there if you asked me,
but you know. Yeah.
Yeah. Well, you gotta get the core stuff written in C
sharp, right? And then maybe orchestrate it later with
F sharp above. Could be. Could be.
This is a sign that someone had a lot of time on his hands.
Honestly, I love these little projects though,
because there's such a, especially
with like games, you know, you have
the technical, the pure technical side
of having to make the, you know, make the
runtime, implement everything, get it all working.
But hand in hand with that, it's almost
like archeology, you know, because
all these consoles did things differently, sort
of bespoke custom targets
and hardware and architecture choices.
So you also gotta go, you know,
figure out what they did,
work backwards, and then try to implement
something that acts the same way
so that the game actually works. Yeah, and
it's particularly video game emulators
because I didn't get
to dig into this one yet, but I'm definitely going
to just out of morbid curiosity.
There was a story we did a couple
years back about a Game Boy Color emulator, Wes.
And the guys working on the
emulator found the ridiculous
amount of hacks that the Nintendo
programmers had to do just to
get a Game Boy that ran in color.
Like, there is some
crazy stuff going on, particularly in this
you know, in that like
SNES PS1 kind
of generation of video game console.
Because remember, they were not working with
very robust systems. No,
not at all. You know, one of my favorite
blogs is the people behind
the Dolphin GameCube emulator.
Oh yeah, oh yeah. They do such
good work over there, and yeah, it's the same sort of stuff.
You find out the fascinating, crazy
details. Like, I believe the GameCube
didn't have like a floating point
stuff, so a lot of the math was done just as
integers, so that's like a
weird thing that they have to deal with and simulate
and make work all of the time. So don't
do your accounting on your GameCube
emulator. Yeah, maybe not, maybe not.
Yeah, one of my favorite stories, and
this is kind of tangential, but did you
know the Dreamcast was also a Windows
box? Really?
No, it did not. Yeah, I think it was a
Windows CE.
Oh, of course. But
it had two modes. It had like a Windows mode and a
non-Windows mode. As one might
expect, that did not go well for Sega.
Oh, what a time, yeah. But the people
writing the emulators have to now emulate both
environments, which is super
interesting. Of course.
Well, it looks like they've made a good
start here. Don't
go using this expecting to have a great time
playing games, but if you're interested
in learning C Sharp, or
you know, maybe trying your hand at writing
an emulator if you're already experienced in C
Sharp, well, go check it out.
If only there were one in Rust.
Ah, yes. Well, maybe we can
dream, or you can start working
on it, Mike. Yeah, I have all that free
time, yeah. I do have something to
placate you. It's not in Rust, so I
know, I know, I'm sorry, but
it is written in Go, and
it's a pick
from one of our feedback items earlier.
Yeah, that's right. Nuclear
Nick recommends FZF,
which is a fuzzy
finder, right, for your terminal. So
this goes hand in hand with what we talked about last time, which is
just improving your command line experience,
better ways to interact with the
system. So if you haven't heard of
FZF, well, go
check it out. It's a general purpose command line
fuzzy finder. You pull it up,
it has a nice little curses
style interface. You start typing, and
it goes out, it's indexed to your system,
and immediately brings you up options
of, oh yeah, well, that text
is found in this file, and it's got a nice little
interface too, where you can sort of move between
the files, and it's got a preview pane, so I think
it works especially well
for people listening to this show, who might have a lot
of text-based source files
laying around. Yeah, I'm going to have to start
using this. Yeah, I was going to say, do you use any tools
like this? Because I know you spend a decent amount of
time, you know, playing around in the terminal.
Yeah, I spend a lot of time in the terminal. I don't, I mean,
Fish shell
helps a little bit, but
this is definitely going to be a more robust solution, because
Fish shell can do some, you know, more advanced
find and search stuff. But
this is like taking that, and
oh, it's a Vim plugin? Yes!
Now I'm just getting excited.
Oh, don't you love that? You know, that
makes me think, not for today's show, but maybe sometime
soon we should talk a little more about editor
setups, and talk a bit
more about Vim plugins, and what you like to use.
And how I gave up on Emacs again.
And how you, okay, yeah, well, alright, we're just going to
have to slot that in. I think we've
packed this show with enough this time, so let's
get out of here, but please do join
us again for another episode of Coder Radio. We do this
show live pretty much every
week. Now if you want to find out what time that is,
JupiterBroadcasting.com slash calendar
is the easiest way.
It's 12pm Pacific, but I don't know
what time that is for you. You're going to have to go
find out yourself.
If you want to find more information about
us and the show, well, Coder.show
slash 374 if you'd like to find
all the links of the things we talked
about today. And of course, there's
also ways to get in touch. Easy
buttons to subscribe to our RSS feed, or
find us on any of the podcast apps
out there. And last but not
least, stay tuned for a new
show coming to the Jupiter Broadcasting Network,
self-hosted.show.
It launches this week.
You won't want to miss it. If you want
more of Mike and I, well, we're both
on Twitter, of course. I'm
at Wes Payne, and Mike, you're at
Jumanuku. Thank you all for joining us.
We'll see you right here next week.
We'll see you next week.
we'll see you next week.

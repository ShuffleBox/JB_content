This is KOTORadio, episode 321 for August 6th, 2018.
Hi everyone and welcome to KOTORadio, Jupiter Broadcasting's weekly talk show, taking a pragmatic look at the art and the business of software development and its related technologies.
This episode is brought to you by our two great fun sponsors, Linux Academy and DigitalOcean.
I'll tell you more about those great sponsors as this here show goes on.
My name is Chris and joining me every single week is my co-host perched in the podcasting position in the heart of Florida.
Hello, Mike. Hello, Chris. Hello, sir.
I noticed a demotion in 320 episodes as host.
You hit 321. Did I say co-host?
You know why? You know why? I've been watching too much Top Gear. I really have.
And this has gotten in my head and they call them presenters.
And now I'm fighting the urge to say my presenter, our presenter or our co-presenters, which is just damn inappropriate here in the States.
Yeah, I feel like the presenter thing would feel the YouTube comment.
Yeah, it doesn't translate. I know. That's why I'm fighting the urge. And it throws me off.
You're lucky you did that and I decided to harass you a little bit because what I was going to do if we recorded this intro, someone would come back.
Oh, darn. Darn. You missed it. Super sad about that one.
So other than me giving you a hard time, how are you doing?
Good. I mean, I feel a little bad that we didn't communicate as clearly as we could have last week because we got quite a few people that were concerned that we're switching to like a half hour format.
And really what it was is we were doing two episodes. We did two episodes and Mike was sick.
So we figured let's do two 30s. That way we do an hour that week and we spread it out so that we might get some, you know, some some time.
Literal breathing room.
But we didn't actually tell anybody before we did that. So we got a bunch of concerned notes and I'm sorry, but I didn't mean to scare you.
But we are switching to video only. No, I'm kidding.
You almost had me there.
That was fun. Let's do that again.
So we got you know, we get these emails from time to time and a lot of times what we do now is we just respond sort of privately when it's the hey, I'm looking for a new job email because we get a lot of those.
But we got like four this week. And so I just thought Jacob sent one in that just sort of really clicked.
It kind of it kind of summarize them all. Plus, it's a good story. And so I just thought maybe we'd cover one.
I mean, these are kind of ones that we do frequently, but maybe we'll have a new take on this one.
Are you ready to start with the feedback? It's been a little while. Let's do it. OK.
Old format. Yeah. Yeah. Jacob writes and he says, hello, I'm a new listener to the show.
He's also enjoying Linux unplugged, he says. And I have a little background he wanted to share.
I've been in the Marines for 12 years. I'm in the industry.
I'm sorry. I was in the infantry and I'm just coming off three years of recruiting duty.
Zero experience in the IT world, but I was able to complete my CCNA, my CCNA sec, my CCNP, my LCP one.
And I'm working towards our Red Hat certification. I also currently program in Rust and in Pearl on my own projects.
OK, a little slow there, aren't you? Yeah. Yeah. You better you better get a little motivated here, dude.
He says, I'm looking at a transition into the workforce, but my question is, what's the best way to network a land job with no experience and no college degree?
Literally, we got asked that particular question four times this week.
He says, would it be beneficial to put my military record on my resume such as personal?
Yeah, of course it would be. Absolutely. Personal awards, Purple Heart Navy. Yes. Combat distinguishing. Yes. Fitness reports, I guess.
Yeah, I don't know about fitness, but the other stuff to me demonstrates a good work ethic.
I mean, really, what your your military record is being translated to to the business types is a work record.
And it shows a solid commitment and motivation to a long term work commitment.
So that's what that's. Aside from aside from serving and just I think the prestige that comes with that.
And I think that just makes you a good candidate to begin with.
That also just gets translated to, you know, nothing but numbers. It's it's good business.
So I think you do have a strong point there. But this this general theme that seems to be coming up a lot.
Time to switch tracks. What's the best way to land a job? I don't really know anybody in the industry.
I don't really have a degree. What is the best way to get started?
I don't know if anything came immediately to mind for you, but one that I thought of was some contract work here and there that gets you started, gets you rolling.
But and I don't know. I don't know when I say that. I know that sounds easy.
But what I'm talking about is the kind of stuff you could maybe find on Craigslist, the kind of stuff you could find on certain hiring sites.
And don't think of yourself as a contractor directly, like more of a subcontractor.
So you might be working for another contractor or you might be working for a company that has a contract with the client.
So they're managing the client relationship. They're taking care of that stuff.
That is really the hardest stuff, especially if you just want to focus on development and you take a subcontracting position.
It's low key. It's low visibility. And if you're lucky, you can put it on the resume and build contacts.
And it's not going to be a ton of money either. You're going to get paid a little bit less for doing that work.
But there's a lot of those types of jobs out there where a project's working on some project.
I use that term loosely in this case. But let's just say there's a group out there that's working on a new website and or a new app.
And they they just will subcontract out a component of that project.
And that's a great way to pick up some work. What do you think, Mike?
Yeah, I think that's awesome advice. But I would actually say you should kind of lean into the whole military thing.
I'm doing some aerospace work now and not having been in the military is like a huge disadvantage.
There are companies that actually, if you email me again with a direct email on the form, I could put you in touch.
But depending where you are that actively try to hire veterans, because when you're bidding on contracts, it tends to help.
Yes, especially especially like, yeah, particularly like us. Right.
Like if the owners are pure civilians, employing veterans can help you sometimes when bids or even subcontracting to them.
Right. Because there's the way that. Yeah. So I was saying that I had a client that I don't think I'm still allowed to talk about that I had to get security clearance for.
It was a military client had to get security. And they weren't it wasn't the U.S. military itself.
It was just a company that you probably would be familiar with if you thought about the large industries in Washington that would be involved with the military.
They were the they were the customer of the military. I guess they were.
Yeah. The customer. No, they were selling to the military. So they were the seller to the military.
And I was a subcontractor to that large company.
And I was actually a subcontractor to another company that was contracting to them.
And I had to get security clearance. So I would imagine if you have military background, it makes that process much smoother.
Plus, like Mike said, you know, the vernacular, too, which is a big benefit.
So that's it. So, yeah, specifically for you, Jacob, that's really something to consider.
See if you can't even just initially leverage that to get rolling.
And then to the others out there, the thing is, is demonstrating a commitment to stay in the field, to stay working, to stay even informed while you're not actually on a payroll is extremely valuable.
Something that is a good, strong signal to a hiring manager that you are motivated and that you do this stuff out of passion and you're trying to make money off it, not that it's just a job to punch in the clock.
And however you can demonstrate that, that is that is the secret weapon that once that door gets cracked for you, once you find you're in, that's your secret weapon stash that you've had this whole time that then puts you above everybody else.
You know, this is going to sound super kind of self-serving, double-dealing because they're a sponsor, but I have actually heard, you know, there's a lot of these sites that will give you certificates now.
I have actually heard in conversation recruiters and hiring managers actually the AWS serve from Linux Academy.
They're particularly pointing that out as something that they.
Yeah, yeah. The Google, the Google Cloud guys at a recent industry event went up to the Linux Academy booth. They're like, you know, internally we all agree your stuff is better than first party stuff.
It's so good. Like it is. That is really good courseware there.
So I guess we could do the linuxacademy.com slash coders with an S if you want to go there, get a free seven day trial, try it out, see what you think.
There's also a community edition with more and more free stuff going in there all the time. And then the pay side is getting massive refreshes over the last few months, new stuff coming in there, including ways to discover what that new stuff is.
Because now they've added like 300 new bits of training exercises and interactive diagrams and training full courseware and all of that.
But it's hard to expose all the new stuff. So they're working all kinds of UI things as well.
And I have definitely heard from several folks, several, several folks in the more than several in the audience that that does make a difference.
Seeing that and here's the reverse side of reason. The reason why the Linux Academy on your resume for training is particularly good is something we don't talk a lot about in these shows.
But a large percentage of Linux Academy's business actually comes from large enterprises that have staff members that they need to train up so that way they are capable of working on their own internal cloud services.
You know, think about think about these companies like, say, Apple out there that have all of these Linux servers running iCloud.
They have to go somewhere that scales to train those people. And Linux Academy has become the number one outlet for that type of stuff.
Now, imagine that across the entire industry. Imagine how common that is. So the transverse of that is when they see Linux Academy on your resume, it's often the same training outlet they're using already.
So that's also becoming kind of a winning combo because it's recognized and it's trusted. It's something they're paying for themselves.
So if you have the time, if you have the money, I would consider going to Linux Academy dot com slash coders with an S sign up.
You support the show and you kind of get to hit your wagon to their rising brand tide if you get my drift.
And I think it's a good thing. I think when you think like that, when you're you're trying to productize yourself in a way, you're trying to make yourself sellable.
You are selling you. And what does it take to sell a good product? Well, there needs to be associations with other good products.
Right. Like when you get a sound system in a car, it's a Bose sound system or it's a it's a thunder sound system or, you know, whatever, you know, insert name like it's a branded name because that's what is part of what sells the whole car is having these recognizable things that are appealing.
And so if you can make that work, if you can afford the payment or if the community edition has what you need, definitely give it a go. So this is a bit of an advice and as an and a sponsor.
And that's just kind of why they are our sponsor Linux Academy dot com slash coders to just put a button on that.
That's where you go to sign up and support the show and seriously consider it. Now, how about we shift gears to another type of feedback?
I asked for some travel hacks and we got a good one from Mark. Yes, you did. Yes. Yeah.
Also, just to complete the loop this morning before we came down and did the show, I got an email that I was approved for my TSA pre-check.
I am officially and I'm in the system. Get my letters. I'm in the system and I have a traveler ID now, which it's an interesting way.
This works. It's a side note is to really make this happen.
You have to go sign up for mileage plans with the different airlines because the best way to get your traveler ID on your boarding pass.
So that way you can go through pre-check is if you create a mileage plan and then you apply it to your mileage profile, your traveler ID,
which then the airlines will automatically apply your traveler ID to your boarding pass.
So only the federal government collusion with the airlines man to get me to sign up for these membership plans.
I tell you what, it's like, wow, I didn't even know you got to see.
So you can't just you don't just use your driver's license now when you go.
You have to have your traveler's ID that gets issued to you and it has to be printed on your boarding pass.
So the only way to do that right is to have it right to have the airlines. Yeah.
I mean, you know what? It's OK. You know, I should probably just have miles too.
I mean, why not? It makes this whole thing much more economical. So but it's just kind of funny.
All right. So Mark's travel bag hack. I love this. I asked for a few hacks and I'm still accepting them.
If you have good travel hacks, he says here in the U.K. and I think the U.S. is the same and it is.
You have to empty all of your electronics into a separate tray at security from your main bag, which Mark is.
That is the number one thing I'm avoiding with with the TSA pre-check because that causes me a lot of travel anxiety
because of the value of those items and my position to be unable to replace them if anything were to happen.
So like it just causes intense anxiety. He says it's really annoying if you have your charger, external battery,
you know, your USB keys, maybe your car keys and iPad, external hard drive, a dongle for all the things, your headphones.
I'll add your watch. You know, I don't know. I don't know if you put in there.
He didn't actually mention your phone. Yeah. I mean, the list goes on and on, as you can tell.
Not to mention if you've got jewelry and all that crap.
So he says, I use a cable carrying case and he'll have a link. I'll put it in the show notes at coder.show slash 321.
You get it. It has slots for all of your wires, all of your cables.
It has little loops to twist them all up and tidy them away and you put it in the main backpack.
You pull that out. You unzip it. It opens up sort of butterfly style and it lays flat.
Then you simply pick the case up at the end and pop it back into your backpack.
There's no panicking about grabbing all your stuff at the other end.
Good luck with your travels. Mark.
So I put this in the show notes. It's called the Begg Smart Travel Electronics Accessory Thickened Cable Organizer Begg Portable Case.
You could probably just search for Begg Smart Travel Begg or use the link in the show notes.
It is 25 bucks and it does have like individual sections for like batteries, wires and then it's got like an under area where you could stash more stuff in it.
It just looks like a great option. It's about the size of a Kindle in width and length and it's deeper because it's it's a bag.
But it's pretty flat overall. So it would fit in a backpack or something like that.
So thank you, Mark. I think I'm going to pick that sucker up. I think I'm going to do that.
So that's awesome. Any other any other travel hacks? Coder.show slash contact and let us know.
Now, before we move on, Mike found something that is damn handy. It's the Devil's Dictionary for Tech.
This is nice, Mike. This is a good find. I thought it was pretty good.
Yeah, it's actually thanks to the subreddit. Oh, that handy subreddit. Coderradio.reddit.com.
Yeah. So it's got essentially A to well, I would say Zed, but it's A to S definitions.
So, like, for example, a agile, a popular software development methodology that solves the problem of misaligned expectations between the developer and the customer and the customer by pretending they don't exist.
Love it. I mean, is that not the case? So dead on. OK, Amazon Web Services, a cloud computing service which labels relatively simple products with complicated sounding names.
That is so true. And as an enticement for developers to pad their resumes,
as the same developer would never affix file storage to his areas of expertise, but once the file storage has been renamed to S3, suddenly the boast is worth publishing in a professional context.
That is so true. I was using an open source package called Minio, which is basically S3. It's an open source clone of S3.
I think we featured on the show a couple of months ago. And I'm talking to somebody and she's looking at me. She's OK. So, like, you just like save files. I said, oh, it's S3. Oh, well, that's a lot better. S3. Oh, that sounds great.
Yeah. Oh, yeah. I like also they have a good definition for big data because it's always so vague.
Like, what really is big data? And this definition, again, this is a really handy guide. We'll have it linked in the show notes.
There's lots. I won't go through all of them. Big data when Excel crashes.
How about JavaScript? Did you see that one? No. OK, let's do one more. JavaScript. See technical debt.
OK, now we've got to go read. Do they have technical debt in here? No, they don't. But they do have serverless, which I thought was savage.
OK, we'll do that. That will be the last one. And then that's it. We'll stop.
Serverless, the discarding of a generation's worth of technology intended to standardize Web applications in favor of locking yourself into a vendor with unproven proprietary services from Amazon, Microsoft or Google.
I couldn't have said it better myself. That is savage. And it's so, so, so dead on. So dead on.
Speaking of savage, how's that Gallego Pro working out, you maniac? So you've been what, with it for a week now?
It's not on fire yet. So, you know, that's an improvement. Yeah, that is a good improvement. Are you on the Gallego right now or are you on a different machine?
Right now. Oh, yep. It's hooked to a 27 inch Dell. Oh, I got my dual set up here. Is that display port?
I don't know. I'm doing it over HDMI, actually. Oh, OK. A little bit of a, you know, heathen.
Yeah. So a couple of things. We're going to write up a few review of it. But first impressions, my 4K screen days are over.
Oh, really? I must be getting old. A 1080 screen is just more practical for me.
Matt is still better than glossy. And, you know, this is the battery life is significantly better than the first gen.
That's great to hear. Yeah. I mean, it's still not like, you know, MacBook long.
Yeah, it's good enough. I like it a lot. I mean, I'm going to put it through its paces.
What about the fan? What about the fan noise? What about that? The fan hasn't kicked up really.
So I'm wondering if that's not, again, a system.
76 always claimed like it was the firmware.
Then maybe it was. But in this new one, it's I haven't other than cases where it like should.
You know, I'd also I'd also heard it was much more pronounced with the 4K models than the 1080p models.
That could be that, too. Yeah. That there was a particular condition that was triggered by the Intel firmware when the resolution was 4K.
And, you know, I've been on the fence, too. I was just talking with Wes the other day.
Like, I really don't know if my next machine is if it's 4K or 1080p.
I think I'm going 1080p, but I can't tell if I'm doing that because of inadequacies with Linux or if it's just the practical thing to do.
Like if it was a MacBook, this would be a non conversation like you would get retina and it wouldn't matter.
Everything would just be fine. There wouldn't be anything to discuss.
But you would also run it and like some sort of weird. Yeah. Yeah, that's true.
Yeah. So I huh. Yeah, I'm still I'm leaning 1080p as well because it just not that actually I have really not had a lot of problems with 4K on Linux.
It just feels a little bit slower. I don't know. I can't put my finger on it.
I really have problems with it other than it just I don't know. I you know what?
I don't need it, I guess. So are you charging this thing with USB-C at all?
I didn't know that I could. Oh, I don't know either. I'm asking. I know it has USB 3.
I will report back next week. Yeah. All right. Well, I'm glad to hear it's working out for you.
So seems like a good purchase. And you almost have to kind of wonder if maybe if maybe some of those issues that that you had just aren't sort of solved by the later generation Intel chip and chipset, you know, because this thing.
Yes, I would wager that not having the 4K screen and having two generations newer Intel chips is probably.
So you because I think if I recall right from our conversation last week, you got it with the eighth generation I seven eight fifty five zero you which is there.
It runs at one point eight but turbos up to four gigahertz with four cores. That's nice.
So that's good. If that's not if that's not causing thermal issues for you, then I think you got a really good machine on your hands.
This is a nice little travel machine. And who knows? I mean, I'm not super convinced it can be the one machine to roll them all.
But I think I'm going tower. We're going to have our old man tower party. I agree.
Micah sixty eight in the chat room says last he heard the current Galgo does not support USB charging. So maybe we'll find out next week.
Yeah, it also doesn't support the LG Thunderbolt monitor, although I do have to correct myself from last week.
You can use the LG Apple Thunderbolt monitor with certain USB-C. It turns out we have a HP Spectre in the office that can actually power.
Right. Right. Yeah. I don't know how. Yeah. It's got is it and it's a USB-C connection.
Wow. So that that Spectre must have Thunderbolt in it. That's amazing.
The Spectre is pretty neat to have Thunderbolt in it. Yeah. Yeah. Just supposed to have Thunderbolt three. Yeah.
According to Spectre. All right. Well, very good. We have much more to get into, including some cute talk, some top programming languages and more.
So let's take a moment to think DigitalOcean do dot CEO slash coder. No S on that one.
Now that's important because when you go to do dot CEO slash coder, you get a one hundred dollar credit.
You can use that for 60 days to try out DigitalOcean's crazy fast infrastructure with a super easy to use but very powerful dashboard.
A clean, well-documented, well-utilized API with predictable costs and billing, industry leading price to performance.
You can build a project on DigitalOcean in minutes. You can get your system set up in probably less than 55 seconds.
My favorite box is three cents an hour. That gives me four gigs of RAM, two CPUs, 80 gigabytes of enterprise grade SSD storage.
Every rig uses SSDs, three terabytes of transfer on their crazy fast 40 gigabit connection. Great Internet.
Let me tell you, I've been using DigitalOcean for a while. Wow.
It is it is really like if you want if you want to have some fun, go update some packages on a Linux distro after you first spin it up.
It is really something. That's three cents an hour for my favorite rig.
And they have all kinds of now optimized types of droplets and flexible drops where you can mix and match resources.
It's so cool. And they have really, really high performance CPU droplets and ones with massive hundreds of gigs of RAM.
It's just so cool. And all of it has monitoring and alerting built in.
Cloud firewalls to block traffic at the network level so they never touch your rig and data centers all over the world.
And the little bow on top, 99.99 percent uptime. Isn't that cool?
So check them out. DO.CO slash coder. Let me double check that because I want you to get that hundred dollar credit.
DO.CO slash. Yep. Coder. No S. You go there. You sign up with a new account.
You get the one hundred dollar credit and you can really try some stuff out.
You can go from theory testing to full production with DigitalOcean.
And there's a lot of really great open source projects and companies.
The back end of GitLab, DigitalOcean. Back end of Slack, DigitalOcean. It's true. They're really powerful.
And they're super easy to work with. So try them out. DO.CO slash coder.
And a big thank you to DigitalOcean for sponsoring the Coder Radio program. DO.CO slash coder.
So we have ourselves the top programming languages for 2018 as published by the IEEE.org.
On their IEEE Spectrum blog. And the number one. Let's save the number one for last.
Let's save the number one for last. Let's do number ten.
It's not Rust. Did you review this list? Did you see this? This is an interesting list I think.
I have lots of comments. Yes I did review it. I'll tell you there's a big upset on the list.
And I don't know. I don't. I mean. Do they. So let's see here.
So our interactive apps let you choose the metrics. Wait on it.
Okay so they've got an interactive app. I'm trying to figure out how they source this though.
So they talk about. Yeah they do a survey every year. Just like Stack Overflow does.
In 47 different languages. Multiple sources. Yeah. So they do a pretty big survey.
I mean it is the IEEE right? It is the IEEE. So let's start from the bottom.
Number ten. Assembly. Not too surprising there. I mean that seems like a pretty niche thing.
This one surprised me. Number nine. Go. And while we're at it. Number eight. JavaScript.
Like what the hell. Eight and nine in the rankings. I thought JavaScript would be much higher actually.
Yeah. Yeah number eight. JavaScript at number eight.
That seems. That seems really. That seems really far away from number one.
So this is one thing where being IEEE does matter though. IEEE is an engineering.
Originally an electrical engineering association. So their members tend to be.
Dark matter. Dark matter but also like embedded.
Like if we did this on Stack Overflow Assembly would not even. Right.
Right. This is. That's where I was going to take us. Yes exactly.
And I think that's what makes this a fascinating insight.
Because it's like. It's like bizarro survey universe.
Where you survey an entire different category of the industry or categories of the industry.
And you see you get a totally different response. So let's keep going.
Number seven. R. Number six. Just about in the middle. PHP.
Number five. C sharp. Number four. Java.
I bet some of you thought that was going to be closer to number one.
Number four is Java. Number three. C. Number two. C plus plus.
And the number one ranked language according to the IEEE.
Member survey and their spectrum readers and their industry participants.
The number one language is Python.
Amazing. Amazing.
So that's got to be a lot of internal projects and stuff like that right.
Well they actually in their write up they list one of the reasons that was reported to them as Python.
Now is basically being used for embedded programming right alongside like C and C plus.
Yeah they say Python is now listed as an embedded language previously writing for embedded applications.
Tilted heavily towards compiled languages to avoid the overhead of evaluating code on the fly.
On machines with limited processing power and memory.
But while Moore's law may be fading it's not dead yet.
Many modern microcontrollers now have more than enough power to host a Python interpreter.
A nice aspect of using Python is that this way it's very handy in certain types of applications to play with attached hardware via an interactive prompt.
Or dynamically reloading scripts on the fly.
Growing into a new domain can only help boost Python's popularity.
But there's another reason Python's increasing popularity may be seen in R's small decline.
R peaked at number five in 2016.
Dropped to number six last year and now is in seventh place.
R is a language specialized for handling statistics and big data.
As the interest in large data sets has increasingly turned to their applications in machine learning.
The existence of high quality Python libraries for both statistics and machine learning may be making flexible Python a more attractive jumping off point than the more specialized R.
That actually checks out. You know what? That all kind of makes sense.
ActionScript has seen a small eke in the numbers way back in the rankings.
Amazing.
I know.
And Google's Go has interestingly I think declined.
Let's see here.
We see that Google's Go has risen from number seven to number five.
But perhaps the biggest mover is Scala.
I see Google Go at number nine.
So I don't know. What do I know?
But this is a great list.
I'll link it again.
It'll be linked to the show notes.
But man, it is a really yeah.
You're so you still you still nail it with the stack exchange thing or the stack overflow.
Like if you go if you went over there and posted this on one of those Q&A forums, it would be all web languages.
And Swift and Objective C.
Swift would be up there.
Kotlin would be in there.
And Rust for all our listeners who have a deep love of Rust.
You know, where's Rust? Come on.
I just don't get it. All right.
The whole Rust thing.
Like, did you think it was going to take over the world?
Yeah, although Swift Swift not being on this list makes me so happy.
Yeah. Yeah.
Yeah.
No, but I mean, C plus plus.
I mean, number two.
Rocking.
See, number three.
Right. That's a pretty strong.
Yes.
Not totally unexpected, though, when you consider the market.
But yeah. Right. Yeah.
Good to see that Java at number four.
I actually thought it would be two or three. I really did.
Well, you know, I mean, when you hear about the use for Java, wasn't this one of the promises?
What is the embedded?
I just thought that was the promise.
You know, Java Duke has promised us a lot of stuff for a long time.
How about Go, though?
I think Go is kind of the dark horse on this list other than Python.
Yeah. Why so?
Just because I'm thinking about the group of people who would have been surveyed here.
I get C, I get C plus plus.
I'm curious as to what they're doing with Go.
I can only imagine a lot of like.
Server side programs that they would have written C before.
Hmm, I bet you.
Yeah, that's right.
That's the only thing.
Yeah.
Just crunch some data, run some routine kind of stuff.
That would be that's got to be interesting.
Well.
I like this.
I'm glad you found this.
I think we should probably move on.
People probably getting bored with it, but I could I could just dig through this all day.
I really could.
So why don't we talk a little cute, though?
While we're kind of in the mood, we started teasing it last week and I've always kind of felt like it was.
Too complicated, so I'm curious to hear your thoughts on modern cute.
What's it what's it like?
Yeah, so I have been toying with cute for a little bit.
I dip my toes in, dipped out.
I looked at it years ago once before, did something small in it, but it's so different now.
So let's just pretend like it's brand.
Okay.
Cute has a long history.
And.
While cute creator is a decent environment.
You can tell it's one of those tools, right?
It's almost like a visual studio or a IntelliJ.
Like you can tell it needs to accommodate a ton of different stuff.
In fact, it reminds me of Eclipse a lot, although I think it may actually be based on Eclipse.
Somebody could correct that if I'm wrong.
High level, cute is a C++, but you can in theory use other languages.
Software development platform.
There's two different versions of it.
There's cute widgets, which is kind of the older way to do UIs, which is not what I'm doing.
And there's QML.
Yeah, which is so.
Weird.
How do we describe QML?
It's like a cute markup language.
Is that a fair?
I wanted to compare it to like XAML from Xamarin and from.NET.
It stands for cute modeling language.
That's what it is.
Yeah, it's like.
I don't even know what to say, right?
Like in the old Xamarin forms apps, and I think you can still do it in Xamarin.
Someone correct me if I'm wrong.
Before you could do XAML proper on the Mac, you had to do like this weird C Sharp-y markup-y style.
Yeah, so they say it's an interface markup language, a declarative language similar to CSS or JSON for design user interfaces.
Inline JavaScript code handles imperative aspects.
It's associated with Qt Quick, the UI creation kit originally developed by Nokia.
That rings a bell.
That's right.
Oh, yeah.
So this is all Nokia, right?
We're going way, we're going back in time here.
I remember, yeah.
It works surprisingly well, and it works on Linux, Mac OS, Windows.
And with a little bit of work, you can get your application onto mobile.
And almost ever I found out from the Qt folks, almost every car system that has like a touch screen is running a Qt system.
Oh, really? Fascinating.
You think about it, it's part of the promise of applications that work across different types of screens.
It really is.
It delivers on that.
It delivers on that, but it delivers on it in a really interesting way, right?
So I'm going to ignore some of the weird stuff you can do.
I'm going to take the vanilla example of C++ for your application logic and QML for your UI, right?
So let's not like worry about embedding JavaScript in the QML, and you can do some interesting stuff with that.
But it basically says you have this powerful programming language, C++, that is actually kind of cross-platform.
Although there are different implementations, right?
Like for instance, the Qt app I'm writing has to run on Linux and Windows.
And the Windows build system is annoying because it's Windows.
But on Linux and Mac, this is exactly like if you did any kind of even like hobby development in the 90s,
or if you even just like were learning from people who did things in the 80s,
what's in your user's USR slash bin, right?
What's in your slash includes?
Like this is classic, do you know how the Unix system works?
Yeah.
And it's real easy, right?
You just, you know, our setup script for the project, I'd have another developer come in and help me on it internally at the Mad Botter.
I just sort of bash script to set up his environment.
Because that's the world you're in, which is actually kind of awesome, right?
Because if you're using the C++ standard, every vendor, every OS implements the standard.
They may implement it slightly differently, but they all implement it.
Except on Windows, they have their own weird thing.
So you have to make sure when you go over the Windows that you don't like end up with Microsoft Visual C++ or whatever.
It works, it compiles natively.
I have to say, a cute app can blow away any electron app any day of the week.
Yeah, I agree.
Yeah.
Yeah, you know, they've baked in like they've really they've designed it to be really responsive.
Like one of their goals, like for on touch devices is something that can have 60 frames a second animation, you know, be really smooth.
And that makes a huge difference on the user perception of the quality of the application.
And if you don't believe it, just look at iOS popularity, why people claim they love it.
It's fluid, it's responsive.
It's because they're always going for a high frame rate in all of their applications for every scroll.
And that kind of stuff translates.
I have a couple of just small things.
I have used an embedded device that's using this and it is super smooth.
When I was in Texas, it was a weeks ago now, driving around in a Volkswagen Golf, they have this like seven or eight inch touch screen.
There is a high DPI screen that you would you think it could be a tablet screen.
It probably is a tablet screen and it's running their own Volkswagen OS.
But it is the damn fastest, the most responsive.
They they've done things to improve the response time to by putting a touch sensor below the stereo screen.
So as your hand is approaching the screen, the sensor detects the motion and it preactivate some of the UI elements.
So they are immediately hot and ready to go.
There's so there's literally zero lag.
I mean, they've done a few like things.
And so I'm like, I got to look this up.
This is like the best system I have ever seen in a vehicle.
I can't believe it.
And so I'm looking into it and it's it's QML.
They're doing the UI with QML.
And I didn't really grok all of the details of it, but like the some of the stuff I saw about the way some of the some of the ways they're utilizing it.
It just seems super, super, super convenient, really an efficient way to go.
And you got to wonder, like, if you were building a product today that's going to be on mobile, it's going to be on desktop and you know about this and you don't use it.
Like, what's wrong with you? This stuff seems magic to me.
So it's fascinating that you've been kind of discovering the same thing, because I just recently I mean, those two weeks ago, I was looking into that.
Yeah. And so this leads me into my bullet points here.
I think the primary reason people would not use it is C++.
OK, yeah, you're one of the disadvantages of this is you are back in the land of memory management.
Mm hmm. Kind of.
I mean, yes, but not not so.
So C++ is not the bad old language that it used to be.
Right. I mean, it's no Objective C, but really, who is?
I would argue that if you're a pretty, like, skilled C Sharp developer or, you know, Objective C or Swift or any of those C-esque languages, you probably don't need to be super afraid of C++.
And the nice thing is Q implements like, you know, it has its own libraries, like it has its own string class, which you might think, oh, OK, it's a string.
But actually in C++, you definitely want to use their string class because it's a high level implementation.
You don't have, you know, character arrays or that kind of crap.
I do worry, though, and this is why I don't want to full throated recommend this.
There's a couple of things I don't like.
One, the way they're cute is open source, kind of, but there's a real weird licensing thing going on.
And I tried to get in touch with someone from over there to see if we could have them on.
I haven't heard back yet because I you can use it, but they have a bunch of components and a bunch of extra services that don't come without a license fee.
And they charge per seat per month, which seems like a total blast from the past to me for a development platform.
Qt has also been through many, many hands.
Yes. Right. It began with it seems like it's settled, though, right?
It seems like it's settled. I mean, it's its own thing now.
It in a lot of ways, the primary driver for me looking at it was I need this GUI application to actually run on mainstream Linux, Linux disk rows and on Windows.
So once you add Linux into your into your requirements, that knocks out, you know, we have platform UNO on UWP, Xamarin,
Electron was theoretically possible, but I did a prototype and it was just not a good idea for what I'm doing.
And you get down to, OK, well, what runs everywhere? Right.
And not in some weird VM, not in some like.
You know, re-implementing everything, what actually runs natively everywhere?
And you really can't go wrong, so you can't go wrong, but it's something I would urge you to consider.
I'm not going to do a full throated, hey, guys, you should definitely look at Q.
I mean. It is C++.
You can and I know we have a lot of web developers who listen.
You can almost certainly shoot yourself in the foot and you do have to know about pointers.
I think you should all know about pointers, but I know it's just not the case.
So, Chris, I have a question for you.
Is this just me on my old man train again? Have I left the station and am I going back?
I was wondering, you know, but I think you're I think you're on the right track with this one.
I really do. You might I mean, you might be on the old man train regardless.
Sorry, but I think at least it's going in the right direction on this one.
Having having seen some examples of what it can do.
The Ubuntu phone project, it was, you know, they didn't they didn't really fully make it to orbit,
but they did lift off the ground like they did get the phone out to carriers.
The BQ whoever was made a few devices like in some ways, you know,
it's a measurable success to go from concept to actually carriers that are selling it to customers.
And they their whole UI was done this way with QML and Qt.
And the results that they demonstrated were pretty remarkable.
And some of those applications continue to live on.
In fact, I think one of the reasons the Ubiports project, which is continuing Ubuntu phone,
I think one of the reasons they live on is is because of the foundation canonical used to build it because it is solid.
And it was impressive what they managed to get done in such a short period of time.
And those QML applications still live on their terminal application and their file manager.
What they still live on. People like them.
And it's fascinating to use them because you can resize them and watch them relay out their UI.
And if you size it up real small on a desktop, it looks like a phone UI.
But it's still fully functional with the mouse. And there's something to that.
And it's a quest that you've been on for a while.
And I think in the background there has been little chants of Mike, check out Q, Mike, check out Q.
But it's not been like a strong chorus.
But I think those people were on the right track, too.
No, I think they were. And I think this actually kind of ties into our thing, our post from IEEE,
where in what I'm finding is as I'm kind of like digging into the Q community a little more,
this has been used all over the place by all kinds of engineering companies.
Yeah. And I just a real time follow up.
I can confirm from someone in the chat room that Tesla is or was using Q in their cars.
Yeah. That doesn't surprise me at all.
Well, I found out like a lot of folks are just like smart TV interfaces are using this.
LG, another big name.
LG uses it.
Yeah. See, the thing is with both the Volkswagen and the Teslas, they have like actual GPUs in these cars.
And I'm not saying like Q and QML require that.
But the thing is, is it just so beautifully scales up.
Like if you have low resources, if you're constrained, you can make it work like even a watch.
But if you can go up to something that has a full arm CPU with a real GPU as far as these system on chips go, like a Tegra,
you can you can make a beautiful interface with it's got sweeping animations.
It's got full renderings of the car.
When you put the car in reverse, it has a radar scanning animation that's gorgeous and fluid 60 frames a second that comes up
and identifies objects around you, identifies open parking spots and if your car can fit in them
and then represents all of that information on the infotainment screen while you're backing up.
And I buried the lead on you.
Oh, yeah. What's that?
There are Python bindings.
Very good.
Very good.
Yeah, of course.
So, yeah, you did kind of hint that you don't have to use C++.
But you don't have to.
It feels like the focus, though.
That really does feel like the focus.
Yeah. I mean, obviously, I mean, the Python bindings are supposedly official.
I mean, they say they're official, but the main line is still C++.
Yeah.
I wonder if Tesla will continue to use it.
I know, you know, they change those things up.
They also just announced, like JBLive42 is pointing out in the chat room, that they're going to build their own custom GPU chip.
That should go pretty swell.
But, yeah, I actually think the old man train is on time and going in the right direction.
And I fully encourage it.
I've been super impressed.
Also, you know, I'm coming from somebody who uses the Plasma Desktop now.
So, a lot of the widgets I use on the Plasma Desktop are QML and whatnot.
And it's just been super rock solid.
They've been really great.
And they weren't always that way.
You know, this has been a long process.
These things have not always been this great.
Yeah, they legitimately took their time to cook and we're just sort of reaping the benefits of that slog now, I think.
And I think the future is bright.
Isn't it interesting, though, because don't you see kind of a bifurcated world here where there's one, like broadly speaking, there's two camps of thinking on this stuff.
And I'm just going to use Linux desktop environments because, you know, nobody ever gets upset when you talk about them.
Ready for this?
Yeah.
There's one which is more in the, let's call it the, we'll call it the Q camp.
It's really like a native camp.
Right.
And there's no one which is like, let's throw JavaScript in your desktop.
Nothing bad's going to happen.
Yeah.
Yeah.
Fair.
I mean, QML can have some JavaScript in it, too.
Yeah.
Yeah.
I mean, the truth is there's a lot of overlap, too, with WebAssembly.
But I feel like what it is, this is my personal opinion, having watched these markets for 13 years now, pretty closely covering it every single week.
And what happened was is that the reality is the Linux desktops for a very, very, very long time have had a big, huge shit sandwich that they have to eat.
And Plasma ate that sandwich back of the switch to Plasma 5.
When they went from KDE 4 to Plasma 5, they started investing in an architecture and in a way you build things.
And it was more than just a reboot.
In fact, the UI saw very little significant overhaul.
It was remarkable how they managed to reimplement the old 4 version in the 5 version of the desktop.
Like, they've spent a lot of time doing that.
And it was because what their focus was wasn't on revitalizing and revamping the entire UI like Gnome 3 did.
Their focus was on the technological fundamentals and later on and very quickly on integrating technologies like QML.
And they have been iterating on that now for seven or eight years.
I mean, I don't remember the dates exactly, but it's been a long time.
Let's say five years.
They've been iterating and iterating and improving that.
And now they've gotten to the point where they have LTS releases that they support for multiple years.
And they've really developed this, where Gnome has punted that shit sandwich down the road.
And they just now, finally, after a year of writing the post, one of the developers released a post suggesting it is time to remove the ability to theme Gnome.
And there is conversations in the work to discontinue the extensions or fundamentally alter the way they function.
And then, of course, all this is going on while they're trying to figure out how to make Wayland work.
And they have this issue where everything's on a single thread.
Everything's on a single process.
Which on Wayland, and Fedora has noticed this is a big issue.
In fact, the number one causes of crashes on the Fedora 28 desktop right now is an extension failure in Gnome 3, which then takes out the shell.
And since the shell and the compositor and the extensions are all one thread, when it takes out the compositor on Wayland, it takes out your display server.
Wayland is just protocols. It's not a display server.
Gnome is acting as its own display server now on Wayland, and it's all one process because they didn't want to eat the shit sandwich of inter-process communication and security that comes with that.
They didn't, so they punted it down the road, and now what's happening is the number one cause of crashes, Gnome 3 shell extension crashes.
It takes out the shell desktop, which takes out the compositor, which drops them back down to either the command line or a login prompt if they're lucky.
And so this issue has basically caused the conversation of, well, what are we going to do? Do we just get rid of extensions?
Because they're still not willing to fundamentally redesign the technical architecture of the desktop.
And so while GTK is fine, and GTK 3 keeps getting great features, and they're getting really close to just like a stable point for GTK 3,
it is so closely tied to the Gnome shell and the Gnome team and their ambitions and goals that it doesn't really come across as an industry-wide toolkit or option.
It comes across as a great option if you want to make something on the Gnome desktop.
But if you want to make something that could run on a television, that could run on a car screen, that could run on a watch, a phone, and run on desktops and be performant in those areas, that's not GTK 3.
And the Gnome folks, by refusing still to eat that shit sandwich, are not investing in improving the architecture that they need to really kind of bring up the entire ecosystem over there.
And so when you look at these two options and you say Linux is in your target list, you're really only left with Qt, and then you just happen to assume all the benefits that come with that.
Ironically, all the Linux distros, though, have chosen the Gnome camp, and they're all in on GTK.
So if we control for just a minute, we haven't talked about your love affair with Plasma.
Why, and believe me, I believe you, why is it that you think so many distros have chosen Gnome over, basically?
Well, I think it's definitely simpler, it's cleaner, and it is a little less distracting.
So it really is probably, it's Mac OS from a UI standpoint done right, I think.
I think it's a little better than Mac OS.
When you really get it dialed in, when you think about how it really stays out of your way, and it's minimal, but it has a decent launcher, a dock, depending on how you configure it, the idea and the curb appeal is high.
But the problem is, once you start losing work, those things become less attractive and less attractive, and man, did they hold me for a while.
Because I really just need a system that works, and I just want it to be clean, simple, and out of my way.
I don't need to do a whole lot of stuff.
So it took me three goes, but by getting slowly and then failing, and then going back and trying Plasma again and failing, and then going back, each time I got a little bit further, I learned a little bit more, and I kind of relearned how I need to set up the desktop to make it work for me.
And since then, I mean, there's just no going back for me.
Because it's, not only is it super reliable, and use less memory than GNOME, but it feels like, what it feels like is when computers were still awesome.
And they were getting faster every year, and Microsoft and Apple were all in, full bore, trying to make the best competitive desktop with each other.
And that's the only thing they were competing on, was really the desktop, and Linux was like just this up-and-comer that was trying as hard as it could to catch up and even surpass in certain areas, and it was just all about the x86 desktop.
And we were getting new stuff, like people were thinking of new things that you could put in there that were actually useful.
It wasn't to the point now where you had to add voice assistants and all these crazy tie-in features that come with the overhead of being a company that has all these other agendas.
It was just, let's make the desktop great.
And that's what Plasma feels like.
They're not removing features, they're not taking things away, they're carefully improving upon the existing UI, carefully trying to make things a little cleaner, a little simpler,
while at the same time, not completely letting off the gas of new features, and slowly adding in new features, and sometimes while doing that, tidying up the way things are done.
But it always net results in either more stuff I can do now with my desktop, or stuff I just don't even have to pay any attention to.
The worst case is it doesn't even affect me.
And it's been a fantastic experience.
And I tell that to you on a machine right now that has 18 days of uptime, and I'm sitting next to a system that has 65 days of uptime, and a system that has 33 days of uptime.
They're all running the Plasma desktop.
If you go light on the extensions, then you're good. If you can do that, if you can make GNOME 3 usable, I just kind of resent the fact that I do feel like I have to add about 8 extensions,
I have to go in and I have to turn on minimize and maximize, I don't longer get desktop icons, the file manager has reduction in features every release, there's things about it.
I actually like their design, I do think that it's important that a desktop environment makes strong decisions and stick by a set of ideals, and have a clear vision, which they certainly have.
But fundamentally, and this is my last piece and I'll be done, fundamentally, their vision far exceeds their reach.
And thankfully they've recently gotten some good funding, but it appears from all that funding they're only hiring one core developer.
The rest is all admin.
And really, they need more developers, they need more capacity to accomplish what they're trying to do.
Because at the rate they're going, it's so slow, and there's that sandwich that's still sitting on their plate, and it's not getting any fresher.
And they're just not addressing it, and they keep punting it.
In 2018, that is not a professional grade desktop environment, where everything runs on a single thread and if an extension crashes, or your desktop environment crashes, it takes out your entire display server.
I mean, that's worse than classic Mac OS, that's worse than classic Mac.
Yeah, I mean, just a real world example.
So I'm running POP before that, I was running Ubuntu, but they're both Note 3, right?
In fact, POP is really very Ubuntu-like.
It's basically Ubuntu.
And for some reason, I thought I was an idiot, because I couldn't...
You know how on a Mac, or really any desktop environment, you can change, you can have a folder of images and change the wallpaper on your desktop.
Oh yeah, no, can't do that, no.
Can't do it. You've got to install an extension.
So I installed an extension that was recommended, and I'm thinking, why is my machine so goddamn unstable?
And I was really about to rage quit and just go to Mac, but I'll just deal with Mac.
And I found out that the process that was crashing was caused by the extension.
Every once in a while, it would try to flip to a new image, and just something wouldn't click right, but it just locks the entire thing up.
I chased my tail for three days, trying to figure out why my system was pausing every three seconds or so.
So much so that even my mouse cursor would freeze up on my screen.
If anything was happening, it would freeze, and I couldn't figure it out.
Audio would keep playing, but everything on the screen would completely freeze, just totally lock up.
And if I had a background process running on a TTY, that would be fine.
But anything graphical would lock up every three seconds or every five seconds.
And it was really brief, it was like half a second, but if you were moving the mouse at the time or looking at a YouTube video, it was definitely noticeable.
And I started thinking, maybe I'm having graphics issues, maybe it's a driver problem.
Turned out it was a Gnome Shell extension.
I can't remember if it was the temperature one or if it was one that was checking the CPU.
But every time it would check in on the stats that it was collecting, it would freeze up the whole UI as it was checking, because it's all a single thread.
And my whole system would lock for half a second until that field updated, and then it would resume.
When I figured that out, first thing I did was turn off the extension, but then I sat with that for a bit and I'm like, you know what, I think I'm done.
This is amateur.
If I wasn't a big fan of Linux, if Windows behaved like this, I would light up Microsoft for weeks on air.
I just want to mention Unity here, if there was something wrong with Unity, why did we have to kill Unity?
Hey man, all good things, all good things I suppose.
But yeah, it has been an interesting thing to discover about where Qt has snuck its way into that we don't even realize, because here's the funny thing about it.
It's usually so well done that it doesn't stand out.
You know what I mean? You can spot the phonies, like the uncanny valley of applications where you go, oh, this is an Android system, I can tell this touchscreen is an Android.
Those kinds of things, or this is an Electron application, or this iOS app is obviously a cross-platform app with Android.
You could just see that uncanny valley, but that's the thing with Qt and QML applications on embedded devices and stuff, there's really no tell.
It just looks highly native and custom.
I mean, I used that VW interface for a week, and when I first sat down I thought, oh, this must be Android.
But then I'm like, I swear to God, my first thought after that was, you know, this seems way too fast to be Android.
Because everything's moving around, everything's fluid, there's no frames being dropped.
So it must not be Android.
Is this like an iPad, just like shove it in?
Yeah, right? I'm like, no, it can't be that. So I had to look it up.
So is it still a thing, and then I know where I have to go, but is it still a thing?
Like back in the Ubuntu 9, 10 days, you used to be able to do this little trick where you would basically have two desktop environments.
And you would just log in to either Node.
Oh, yeah. You could probably, I mean, you could definitely, you can absolutely log out and switch environments, 100%.
You can do that.
Yeah, that's what I'm saying. That's still a thing.
Yeah, oh, yeah, totally.
In fact, one of the things I really like about how Canonical has implemented their GNOME desktop is all of their modifications aren't implemented as individual extensions.
They're implemented as sort of like a customization to GNOME.
And what that means is you can log out and just log into a stock GNOME session with no extensions, no changing, just stock upstream GNOME.
And then log out, hit that dropdown box, log back into their Canonical session and get the full Canonical customization.
I wonder how much somebody running POP, if you were to, just for the hell of an install, KDE, what would happen?
I don't know. There's a meta package. It's like Kubuntu-Desktop or something like that.
You might look it up for that. And then it'll pull down like a whole bunch of stuff.
I mean, it could break your box up a little bit. I don't know about POP OS.
Usually the worst thing that happens and what always kind of annoys me and why I don't tend to do it is you get doubles of stuff.
So now you're going to have G edit and K write.
You're going to have terminal and console, right? And that's just sort of a mess.
Yeah, I know. I mean, I basically live in VS Code, which I might drop from them again, and QT creator.
You know, I am hating on the Electron. You must be whispering in my ear. You've got it.
Hey, I just spec for Electron now, man, and I live with it. I just spec for Electron.
Double the RAM.
See, what's great about Slack is you can just keep adding Slack channels to one application.
So now I'm in like 10 slacks and, you know, I'm only using one app, so I feel like I'm on the other end of that now.
So now it's like totally fair that it's using all that.
You just accept that Slack is using like two gigs of RAM.
Living with abuse here. I'm living with abuse. All right, Mr. Dominic.
All right.
Well, where should we send people to get more of you throughout the week?
Follow at Duminico on Twitter.
That's clever. That's clever advice. I like that. You can follow me on Twitter too.
I'm at Chris LAS. The whole network is at Jupiter Signal.
Links to everything we talked about today, coder.show slash 321.
And hey, consider joining us live.
Get the live time at jupiterbroadcasting.com slash calendar.
And then that live page, jblive.tv.
Also, don't forget that subreddit, coderradio.reddit.com, and that contact page, coder.show slash contact.
We'd love to hear your questions, your thoughts, and your travel hacks.
Okay, everybody. Thanks so much for tuning this week's episode of the Coder Radio program.
And we'll see you right back here next week.

This is Koda Radio, episode 362 for June 17th, 2019.
Hello and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business of software development and related technologies.
My name is Wes and on the other line, well, it's that fighting Floridian, Mr. Michael Dominic. Welcome to the show, Mike.
Thank you, Wes. And I think we have an often lover with us this week.
Oh, yes. Rejoining us once again in corner number three, Mr. Chris Fisher.
Guys? Oh, yeah, it's Koda Radio time, isn't it?
Oh, it is. We're live.
I mean, I was just in here doing work. I don't know what you guys are doing here.
We got roped in, tied you up to the chair, put a microphone in your face, and now you're with us.
Oh, man. I actually am really glad to be here because there's two topics, at least today, that I have many things to say on, but I feel like I've joined a new cult.
I'm part of a cult member now and I can't wait to tell you guys about it. Life-changing stuff.
You've been raving on it behind the scenes, but you haven't been willing to give us any more details than that.
Save it for the show, you say.
You know how I do.
Yeah, that's pretty smart.
I'm thinking it's HomePod 5 and 6, but that's just my guess.
I can never get away from it.
It's a whole HomePod-powered home theater system.
You know, this HomePod thing is really taking a life of its own because, I kid you not, my wife told me yesterday, she said,
darling, when you die, I'll bury you with one of the HomePods.
HomePod and Levi, right? That's what you need.
You know, Chris, I did join the HomePod club.
Yeah. Okay. Now, be honest with me. Do you like it?
I liked it for the one day I had it, and then my wife heard it and commandeered it.
Oh, that good?
Yeah, they're good.
Yeah, they're good, so I have ordered a second HomePod.
Honestly, if Apple would put Bluetooth in that thing or an aux in, I would graduate this from a joke meme thing to an actual serious recommendation.
Yeah, for me, it's another product of theirs that I admire from afar.
I've heard them. They do sound great. I would probably buy one, but it's useless to me.
The reason why I got it, ultimately, is I took a bet that Apple was going to do more with this thing as time went on.
Like, why would they put, like, an A8 processor in a speaker unless they had some serious intentions?
And now you see with some of the updates that are coming to HomeKit cameras, the HomePods will now be doing on-network analysis of the images.
Really?
Just saying. HomePod gets more useful. Just saying.
Apple is particularly good at that, though, right? I mean, they sort of, the longer-term enablement of features?
Yeah. Yeah, I kind of feel like maybe if they were going to launch it today, though, they'd probably put a screen on there.
Yeah, that's sort of the trend. Sort of the trend of things. But I missed you guys, so it's nice to be back.
It's been a while since we've all been together.
It's lovely to all be here today.
Reunited.
I see you've brought a little toy to the studio.
You want to talk about it?
Yeah, I'm kind of curious.
Well, God, so close to the HomePods. This really makes me look bad.
So I have an iPad. I think the audience knows that. And I think it's actually a pretty great work machine.
I have ISH on there. I have WireGuard for my VPN.
And there is a really great terminal application that I think it's called Tremulus. I can't remember the name.
Tremulus.
Yeah, I just have it on my home screen here.
And this makes SSHing into multiple boxes just totally easy. And then when I found out that I could also add GitHub as just regular files,
like you go in the files app and get access to GitHub repos, it's like, okay, this is actually starting to become a serious little work appliance for me.
And I just happen to like the email and calendaring on iPad better than I do.
Those just work?
Better than they do on Linux. I just don't like going into the web page, and I don't like Thunderbird very much,
and I don't like Evolution very much, and I don't like KML very much.
I don't even consider using it. I just always use the web client. You're right. It's not native.
No, and a lot of times I want to do extra things like I want to take an invoice and I want to export it out to a PDF for expenses,
for expense tracking and whatnot. There's a lot of easy workflows on iOS to do that.
So I added the Bridge keyboard to the iPad, which you may have heard of before. They make keyboards for lots of devices now.
And it's a Bluetooth metal keyboard. The whole thing is a giant battery that charges over USB-C.
So you can actually charge up the iPad a couple of times off your keyboard, which is pretty great.
It's a backlit, full-cordy keyboard that has better key travel and is more comfortable to type on than the MacBook Pro keyboard,
which I grant you is not a high benchmark. So I'm not saying it's the best keyboard ever.
It's not ThinkPad quality, but it's definitely beyond MacBook quality.
But what is really great about it, and I encourage you to go look it up, it's the Bridge keyboard.
It makes the iPad like a full laptop. The screen has an arm that you can tilt at any angle you like.
It is nice and metal, so it feels all really sturdy.
The fit and finish, it looks like Apple could have made it, really.
Oh, for sure. Yeah, absolutely. Take a look at it.
If you've been thinking about just getting a little work appliance that is foolproof,
like sometimes my displays are screwed up on my workstation or sometimes Comcast goes down,
the iPad is kind of like my anxiety pill for that.
I know that the iPad, I can open up this screen, it's always going to turn on, it's got an AT&T card in there,
so it's always going to connect to the internet, even when Comcast goes down.
I wonder, is this part of the advantage of it? I mean, it's getting more and more general purpose, right?
But it was kind of started as a different type of computing, doing things differently with more limitations, but simplified.
So it is tempting, right? You've got these Linux machines, and either they're kind of fussy to use
or they're a machine you're using for sort of playing and testing.
And not only can't you do that on the iPad, but you're not really drawn to.
So you've left it alone as an isolated device just for certain workflows.
Exactly. And kind of going back to something we've talked about a lot on this show,
is it's really hard to get the perfect workstation. You've got to make a compromise somewhere.
And this is sort of like an escape hatch for some of those compromises.
But additionally, like we were talking about with the HomePod,
you kind of can plan on Apple making this a lot better over time.
So it starts, the iPad Pro, this 11-inch when they first shipped it.
The reviews came out, the number one knock is no file storage access.
You know, you can't hook up storage devices.
Well now, in iOS 13, as we all know now, they're not only adding fantastic file external support,
but they're adding local storage support, they're adding SMB support,
but also additionally, they're making Safari a full desktop browser,
which essentially now makes this, to me, just for my use, just as good as a Chromebook.
And when this iPad Pro 11 was announced, it was at the same time the new Pixel was announced,
that is a Chrome OS, really nice machine that I really considered,
because Linux Academy is all in on the Google app side, and that's where we live.
So I thought, well, maybe I should get a Google device.
I bet that that wouldn't be that polished and that this would be limited,
the iPad would be limited, but in a year or so, they would add more to it.
And that's exactly what's happened.
There is something to the approach, and I think we could all internalize this a little bit,
of just solving the problems you can at the time, but the slow and steady pace of improvement,
instead of just trying to launch everything at once.
What it feels like with the iPad and the HomePod is the stuff they're rolling out now,
they already had on the roadmap a year ago, but they just, they kept it in-house an extra year,
they let it bake an extra year before they ship it.
Right, they're not always playing the first to market sort of thing.
They have enough of their own space to play in that they can afford to get it right.
And I think, I think this might be why I'm starting to,
there's certain things I just really like about Fedora, and I think it's some of that same,
there's certain groundwork they lay down that I follow for a while, and then it lands in each release.
Like, I just started playing around with PipeWire.
You know, I've been watching that land now for a while, and it's been a slow, gradual build.
It's an interesting, it's an interesting way to build a product, and there's just lots of different approaches,
and I think that's the kind of approach that works well for me, a continuous, slow, gradual improvement.
I'm wondering how that compares to some of the drama we saw over the approach to features in the GNOME desktop.
Because some of the iPad development reminds me, you know, it's a little bit, it's a little bit slower,
and, you know, there's plenty of drama around removing features or changing the look and feel of things,
but it seems like the underlying philosophy was kind of similar, right?
Get a few things right, minimize stuff, focus there, and eventually, as we've seen,
some of the features we lost, they've come back in different or more refined ways.
I kind of clearly do remember, like, around GNOME 3.12 or something, like, things really took a turn,
and it just became a real steady, and same with Plasma.
That's one of the things I think, why Plasma is so great right now.
Certain product life cycles, it's pretty nice.
So, I noticed you guys have been doing this challenge thing.
This is, how come we never thought of this, Mike?
It sounds kind of fun.
Just a lot of work, though.
Who has time for challenges?
I know, it's a lot of work, and Wes does not make it easy.
No.
Well, I mean, you said you wanted a challenge.
You know what?
I got to say, this last one, you really got me.
So, Reason ML.
Much like Lawrence of Arabia, I went to OCaml.
Now, I have never done anything in the OCaml world.
If you don't know what I'm talking about when I say OCaml,
it's because you are under the age of 50.
Yeah, can you maybe, for the viewers not familiar with this obscure ML variant,
maybe obscure is too strong a word in that I told you to use it,
but can you break it down a little bit?
What's the deal with OCaml, and how does Reason fit?
Yeah, so OCaml is like a, it is a language itself,
but also like a language that other languages interop with and work with.
It's like a whole world that is deeply mature and deeply complicated.
Reason ML, or I often see it written as Reason, so I'm not sure.
It looks like the official name is Reason ML,
but they call it Reason in some of their docs,
is basically a, I'm going to say like dialect almost of OCaml
that can compile to JavaScript.
Because when we need to compile, there's only one thing we're compiling to.
That's right, it's got to be JavaScript.
And they have an entire, which I love by the way,
an entire page that says what and why as the heading for the page.
So I ended up having to actually read up on OCaml
to understand what was going on here, right?
Basically Reason is a JavaScript interoperable language,
and it can also compile to native code
like a more traditional OCaml type application.
It is considered a systems language,
much like let's say a Rust for instance,
to an application development language like a, you know,
a la, I don't know, C sharp, Objective-C, Java,
most of the more common things.
But holy crap is it fast.
Now there's kind of two variants I found, Wes,
and you can correct me where I'm wrong.
There's the native where you're like literally writing native code
that compiles, that just runs super fast.
But then there's also this JavaScript interoperability
using a, it gets better, intermediary layer called BuckleScript.
Of course.
Isn't that a fun name?
So many, so many things here.
You install Reason via NPM.
Of course.
Which, I mean, that does kind of fit though, right?
I mean, that's how you install TypeScript for instance.
Exactly, yeah.
I found the install weirdly challenging.
I ended up having to go into the Reason Discord and ask for help
because I just couldn't get it to work.
How responsive were they when you went into the community?
They were very happy that people were using it.
Oh, good.
But it's not, I don't mean to say it's like a super small community at all.
Actually, Reason is developed by the people who developed React.
In other words, Facebook, right?
And, oh, that is another flavor of Reason, React and React Native.
So it's high level here.
We have Reason running natively just like OCaml.
We have Reason using BuckleScript
running just like a JavaScript replacement, right?
And indeed, just straight interrupt with JavaScript.
We have Reason with React and Reason with React Native.
It is actually a pretty cool, deeply complicated language.
So, like, just getting set up I found hard, but that might just be me.
Rocks, like the type system, right?
So they give you what they feel are like their five top things.
Rock solid type system.
Yeah, so Reason doesn't want you to screw up, basically.
Much like a Rust.
So I found a very helpful comparison to Rust in general.
Basically, it's not going to make it easier for you to do stupid things.
For instance, there's no such thing as null, right?
Anywhere you would think to use a null,
you're going to be using there's an optional type in Reason.
Now, you can put optionals everywhere and not write super tight code,
but from what I was looking at reading all the samples
and kind of playing with it on my own,
it's not like Swift where everything is going to be optional, right?
It's not, you know, Swift, you're slinging question marks all over the place.
Right.
In Reason, it's more like if you need to, you can.
They say it's simple.
I don't agree, but that's fine.
Really?
So what don't you find simple about it?
I found the setup actually weirdly hard.
It almost felt like there was a different setup process,
particularly for the native stuff, right?
The easiest setup was actually the Reason React.
Interesting.
Because there's a super helpful quick start
that basically just gives you a template.
But once I got it running, I mean, wow, it's fast.
Yeah?
Yeah.
So the tooling is another thing I found interesting
because NPM for native development is weird to me,
but I think that's the direction we're just going in.
Right.
And then you have the other camp where not having it on NPM
is a big downer for them, and they don't want to,
it's like, oh, I have to install a separate build tool chain and stuff.
Oh, sure, yeah, sure, sure.
But you're right.
Like, either you hate NPM or love NPM.
Either way, it's kind of a pain.
Yeah, no, it really was interesting.
I mean, there were a few concepts that I pointed out in the doc.
I am not going to go line by line through this,
but in particular, I found the variant,
basically it's a data structure in Reason,
to be actually pretty cool.
Yeah, I love their introduction.
Behold, the crown jewel of Reason data structures.
Most data structures in most languages are about this and that, right?
Like an object with a couple fields,
a variant allows us to express this or that.
Yeah, and then you can do like fancy stuff with default cases.
And the syntax is just super tight.
Like, I could see if you were really worried about performance
or wanted really hardcore safe functional,
I guess, a hardcore safe functional replacement for your JavaScript,
this would make a lot of sense.
Like, there's actually, I put in the show notes,
again, I'm not going to go too deep into it.
But Ken Wheeler did a pretty good talk in 2018,
where he's basically, in pretty blunt terms,
recommending Reason as, you know,
if you're writing large Node or NPM-based JavaScript code bases,
consider using Reason for all the safety you basically get for free.
It's a very similar argument to, I think, that Rust developers make, right?
Like, yes, you have to follow these rules,
and maybe every once in a while it's frustrating,
but there's just like a whole category of error that you cannot actually commit.
Right, and I mean, it might be a big helper, too,
if you have a large team working on the same application
coming from different backgrounds and perspectives,
or you're, you know, coming back a year later to do an update
on a project you may have worked with a client on
and sort of forgot everything that was there.
You've got these nice types laid out for you.
It's true.
It's got built-in pattern matching,
all the standards you've come to find
in, you know, functional ML style languages these days.
I'm curious, Mike, the comparison to F Sharp,
because F Sharp also has a lot of these goodies, you know,
inspired by some of the same predecessors.
And there's Fable, right?
There's also a JavaScript compilation option.
Do you have any insights into why you might choose one or the other,
or if Reason is tempting to you?
I know you're already in love with F Sharp.
Yeah, F Sharp is, so actually,
the whole F Sharp thing, whether I'm in love with it or not,
I feel like Reason takes functional paradigms
a lot more seriously than F Sharp does.
In particular, F Sharp has a lot of escape valves, right?
And a lot of that's a side effect of having to interrupt
with C Sharp and the.NET platform.
I know people are going to be mad.
I don't think Fable's really a serious thing.
Reason, in terms of the buckle script
and the JavaScript interop, seems a lot more mature
and, frankly, a lot more performant right now.
There is some dependency on JavaScript engines,
like everything else in the JavaScript world, but...
Yes, of course, it depends on where you're running
and how fast it is and how good the JIT is, probably.
Right, I could almost see a progression, right?
In fact, I'm working on something that I'm calling
the functional gateway drug, where F Sharp is basically
your core's light, and then, I don't know,
something else is just moving up and up the chain
until you end up at like Haskell, basically.
Where Reason feels a few...
It's almost stricter, right?
I think that's maybe the right word,
but I don't mean it in a negative way.
Where F Sharp is basically, okay,
you don't have to do this if you don't want to.
Reason is, no, you definitely do.
Having said that, it does interrupt with JavaScript, right?
You could, in theory, break all of that.
It took me a week to figure this out,
but you can actually import native OCaml dependencies
into Reason.
Oh, very nice.
You can leverage the existing OCaml ecosystem.
Yeah, they call it ESI, but I think it's actually pronounced easy,
E-S-Y, which is basically their package manager for OCaml.
Excellent.
Yeah.
Sounds like you've had quite a little wild ride
in the OCaml and Reason ecosystem.
I feel like we went on a journey with Mike.
Do you think you would actually use it?
Are you interested?
It's not like you found some of it tedious.
I'm curious.
People obviously love the OCaml compiler
and having nice inferred types and a smart compiler
that can help you do all this stuff
without ideally getting in your way.
Do you think you'd see yourself actually using this language?
Probably not.
Not because I think it's bad,
but because I think it would be hard to sell to a client
this somewhat esoteric language that isn't JavaScript,
which is a thing they know.
But I could see...
I could see a world where Reason goes much more mainstream.
And to be fair, I don't know usage numbers on it, right?
So maybe it's just like I haven't seen it.
Would you consider it if you weren't...
I could see how maybe you wouldn't want to click a client
or something where they would want...
Maybe they would want to switch consultants later down the line.
I'm just wondering if you might use it
if you're building something for yourself
or a service you were running where you maintained complete control
that was just your project.
I could definitely see a case where...
Again, because it does interoperate JavaScript,
so I could see some mission-critical business logic
that just has to be right and can't have errors.
Much like I currently use Rust and Rails applications,
where this is important and it has to be right
and I'm willing to sacrifice some dev time for it.
Yeah, I could definitely see that.
Excellent. Well, look at you being a sport, playing around.
That was fun. So now is it your turn next?
Yeah, next time we'll get my report on Kotlin.
I give him easy languages on purpose now.
That's a lot of setup, though.
Speaking of setup, that could be a lot of setup to get going,
unless you have anything installed already.
You have to install a gigantic Java-based IDE.
Yeah, that has been interesting.
Oh, you already got it installed?
You're not rushing the homework at the last minute, huh?
I'm trying to, you know.
I'm still working. I'm trying to get a little test Android app built to it.
Oh, nice. So you're going the mobile app. Super cool.
Well, I've been playing with just a little bit.
I played with the command line, and they've got a nice little web client.
You can try it right in the browser,
because guess what? Kotlin also goes to JavaScript,
because everything does these days.
But I wanted to specifically try out playing with an app,
because it's been, A, something I haven't done in a while,
and B, I mean, Google's pushing using Kotlin for Android pretty hard.
Because they hate Oracle.
All right, Wes, so in two weeks from now,
what journey down the functional primrose path am I taking?
Do you want to keep going on the functional?
Because you were right.
You're giving me some a little more mainstream languages.
I'm up for anything.
I was kind of thinking, maybe you should use Go.
Go? Okay. I've actually not really done Go.
All right, Go sounds fun. Go.
That's what I thought.
And especially since we started you out on your journey
with Kotler and with Erlang.
It's true.
Go is another language that's big on its concurrency primitives.
And I'm really curious, too.
And you've been playing with Rust, and while not the same, right?
I mean, Go has a garbage collector. It's a little higher level.
It still excels at a lot of those lower level systems sort of stuff,
especially around networking tasks.
So I could see it being pretty useful to you, Mike.
Oh, the Rust versus Go thing, huh?
I love it.
I know.
Here it comes. Here it comes.
It's going to be a good episode.
We're chatting offline about something that I think is kind of a significant
change in the run of the show.
Years ago, you can find episodes of Mike and I talking about how just simply
distributing your software on Linux is this huge blocker for a lot of developers.
They think, oh, maybe I could port my application to the Linux,
and then I could ship it over there.
And they start looking at the options, and it's a nightmare.
This was especially true when we started the show,
because Mike was looking around, and we were having a lot of conversations
like, do I target for Unity specifically?
Do I target for GNOME?
Does it need to be cute?
Ah, Unity.
Yeah, I know.
I know, Unity was a thing back then, remember?
It's been a while.
But in this time, a lot of things have shifted.
You now have AppImage, Flatpak, and my favorite, Snaps.
I kind of have a mix right now of containers and Snaps.
So like a desktop application, I'm using Snaps.
Sure.
And server-side applications, I'm using containers.
And then when I'm running Fedora, I use quite a bit of Flatpaks.
But I find them to be great.
I find them to be the solution that we were looking for all of those years ago.
And now, if we could go back in time, and you could tell, hey,
just wait a little bit, and then you can package it up as a Snap.
It's coming.
Right, it's coming.
It's coming.
And you have different options with Flatpaks.
You could host your own repository.
You can have your own private thing.
The whole world doesn't even need to know about.
And that works for some.
And then with Snaps, you have the more traditional App Store-style model
that developers are familiar with right now.
There's a company you can go to for support.
There's a central store that all of the users know about.
So discovery is much easier.
And messaging is much easier.
And verification can happen on the platform side.
And there's all these advantages to a central store,
along with their own disadvantages.
And then you've got the AppImage model,
which is probably the most analogous to app on Mac.
Especially like the original stuff.
Yeah, where you download a DMG.
And it's very close to other app bundles.
An AppImage is like an app bundle that's self-contained.
And it's kind of nice for certain applications.
Etcher uses that, which is a GUI application to write to USB.
Oh, yeah, great one, too.
And that's a perfect application for AppImage.
So each has their strengths and use cases.
Honestly, it's funny, too.
AppImage is, you know, we don't talk about it that much.
But it is, any time I download one, I'm actually kind of pleased.
Especially for trying something out.
Because even with snaps, it's easy to remove, whatever.
They're still at an installation step.
It feels a little more like I'm doing something.
And with an AppImage, you can just run it.
And if you never want to run it again,
it's one file to delete right off your file system.
AppImage feels like a low commitment, right?
Whereas a snap and a flat pack,
you are now committed to that application.
And you aren't, really.
I get that, right?
I mean, you can remove it just as easily.
But it's a little more complicated.
And it just seems a little closer to, I don't know, some bullshit Unix philosophy.
Or just the parts, I understand how it works a little bit cleaner than a flat pack
and snaps presented a little bit more to learn with the daemon running.
And just, it's a more complicated system.
And then last but not least, I was really pleased to see just recently
that snaps have taken kind of a step towards even easier to install.
Have you seen now that they have distro specific install pages?
Yeah.
This is really neat.
And it makes it easier for the end user.
Nothing really has to change for the developer who's packaging.
But for the end user now, say you're on Linux Mint
and you haven't yet jumped into snaps or you're on Fedora
and you haven't gotten a snap set up yet,
you can now get a specific screen that tells you,
this is what you do on your distro.
Here's the commands you run.
If you want a copy-pasta, you can.
And this will get snaps operating and get your first application up and going.
If you're on a distro like, say, Fedora or Mint or something like that.
And it's just reducing that barrier.
The user goes through this experience.
This screen one time to get this stuff set up.
And then they can just snap install to their heart's content after that.
It seems like a good move on the side of canonical and SnapCraft just to show.
I mean, obviously, they've done a lot of work getting SnapD running
and snaps running on many different distributions.
This just seems to reinforce that.
This isn't just a canonical thing or an Ubuntu thing, right?
We have almost first class support for all these other things
right on our main homepage.
And that is a message I think is important, not just to end users.
But ultimately, the bigger message is being sent to developers.
Like, we're going to make it easier for consumers of your software
to get it on their distro.
This seems like an important moment to me, Mike.
And I'm curious with your experience and reflection on all the things
we've talked about over the years, what your thoughts are right now.
So yeah, when I'm on pop, I'm basically, if it's not in the repo, I'm using snaps.
I have a few things like the bot framework emulator
that is distributed as an app image.
But for instance, I use the JetBrains IDs, like RubyMod and IntelliJ.
And those are all snaps for me.
Nice.
I love it.
Every once in a while, you have to deal with the snap, tac-tac, classic thing.
But I think this is great.
The only weird thing I would say is I don't often use the GUI stores.
Right.
I'm usually going to SnapCraft and just finding out what is the actual package name.
That's okay, though.
I mean, you have both options, so whatever the user prefers.
Right, and we're probably not necessarily the people.
It's not always my instinct to even go try to use a GUI page
because I'm installing packages I do it on the command line.
Yeah.
So using the perspective, though, of past Mike,
when you remember you were considering how do I ship even for the Linux desktop.
Sad developer Mike.
Is this it, do you think?
Is this the solution past Mike was looking for?
Oh, are you trying to get me into a packaging flame war?
We're already there, buddy.
Yeah, I think that already happened.
Well, you know what, I have to say that I don't use anything but snaps if I can avoid it.
So I would, yeah, if I were to distribute a desktop Linux application,
it would be via the snap format.
And I would definitely put it in the GUI stores, right?
I know that alternatives exist, right?
Flat packs, things like that.
But I just have no need for it.
And honestly, I like the idea of snaps.
I like that they're simple.
And I was curious, in your estimation,
is the Snap Store being controlled by Canonical a positive or a negative?
No, I wish Canonical controlled more stuff.
I'm the wrong guy to ask.
Well, no, I don't think so.
Because you're looking at it from a developer who wants to publish their software.
And then you, I'm assuming, I don't want to speak for you,
but I assume it's because then there's a company you can interface with.
There are avenues to support.
That is a thing.
Like, to be honest, and this is such like a trivial thing,
my biggest issue with desktop Linux as I use it today
is that extensions kill GNOME constantly,
which means I can't have nice things like changing browser backgrounds.
I'm sorry, changing desktop backgrounds.
Mm-hmm, which I love doing too.
So I almost wish someone, I mean, I know the GNOME Foundation is huge,
but I don't know, just as a pragmatic user who kind of doesn't have a dock
in the GPL FOSS fight, I would rather stuff work
and there be a vendor who you can call or even just email, right?
It does feel different even on like a more surface level
when you go to any of the documentation or the SnapCraft website.
It feels very polished and you can tell there are people always thinking about it.
And that's, with open source, I mean, that may be true,
but when it's a volunteer basis, when it's community working together,
sometimes there's not that same sort of top-down control
that can provide a very polished, friendly appearance.
I mean, I'm very impressed with the Flathub website
and what that community has done.
I mean, I'm using the hell out of Flatpaks on Fedora,
and I may even, once everything's all set up,
I may even give the edge, the user experience to the Flatpaks.
Really?
Yeah.
How come?
Well, once you're in, if you're willing to use the GUI,
once you're in GNOME software, it's, well, same with Snaps.
Really, it's all kind of abstracted.
You don't really notice, but the one thing I feel about the difference
with Flatpaks is I have had more consistent theme experience
and faster launch times.
I couldn't, I could not tell you, legitimately,
on my computer that I use every single day,
I couldn't tell you which applications are Flatpaks
and which ones are from the repo,
but I can tell you which ones are Snaps.
But I still use them, but I can tell you which ones are the Snaps.
Right, so it's not like it's a deal-breaker,
but it is something you notice.
So, but I think Mike represents bigger picture here.
I think Mike represents what will be, if it's not already become,
the vast, vast majority of Linux users.
There is, there is really no, like, noob user
that's going to understand that Windows is a piece of software
that can be loaded and unloaded from a computer.
Right, they don't even really have the concept of an operating system.
I'm not making fun, like, it's just they don't care.
You're not taught that if you haven't researched it.
Yeah, they think it's part of the hardware.
Right, there might be doctors that are geniuses,
but they just don't care that the operating system
is a changeable piece of software.
And then on top of that, even if they did know you could change it,
they'd have to know what Linux is.
And they'd have to know what a Linux distribution is.
And they'd have to be willing to format their computer
and reload it and re-import their data.
This type of new user I don't believe really exists.
I think the newest user you kind of get is when
someone who already runs Linux switches someone else to Linux.
But people who are voluntarily switching to Linux are Mike,
people like Mike, and system administrators,
people in the IT field, that sector of the industry.
Already interested and somewhat knowledgeable about computers.
Know how to read Reddit, know how to use Google.
Yeah, have some debugging skills.
And be maybe even privileged enough to have multiple computers,
so you can have a burner computer that you can load a new operating system on.
This is the type of user that's switching to Linux.
And I think that is a lot of developers.
There's a lot of developers out there
that are going to become the main user of Linux desktop.
There's also, I think, maybe a third category.
We have over here, people when I hire them,
if they're not doing specifically Mac OS stuff,
I do try to give them something like an S76
or some other Linux computer because it's just a lot cheaper
and I can upgrade them year over year
instead of buying them another $2,000 laptop.
And for support type workers, like customer service, things like that,
having an intuitive way to install little applications,
or dare I say applets, small apps,
just getting an account rep to use aptitude or apt-get,
whatever the current name is,
is completely a non-starter, at least in my mind.
But having them open the elementary store or the pop shop
or the Ubuntu store is super easy.
And even writing a batch script for them that does a couple snap installs,
super easy, right?
I can't disagree with that at all.
And I think what the weird thing that's going to happen is,
that type of user, that user base, likes there to be someone in charge.
I would argue that Mike appreciates that there are employees at Canonical
where their employment status and performance status
is based on how certain things perform like snaps.
There's nobody really doing that in the different communities
for other package managers.
If you think about it, that means there's people
where their job is on the line to make this thing a success.
There's a certain level of investment they can take.
And that is a level of insurance that people in the sort of dev,
sysadmin, you know, regular user category like.
What's ironic is people are leaning far to the free software side.
That's the antithesis of the things they like.
They want anyone to be able to control it.
They don't want centralized control.
Which does have a certain benefit, right?
If Canonical decides that they no longer want to pursue investing in snap program.
And this is why there's a place for flat packs, app images, and snaps.
Because there is a market for each of them to address.
And I think snaps particularly address the mic type market.
And I think that's really exciting because that is the type of market
that is creating software.
That's going to be shipping software on multiple platforms.
And that means more software for all of us.
They have a product to ship.
They just need something easy to do.
They want support.
And it is interesting when you talk about the business relationship.
Yeah, right.
If mic is working hard and putting money on the line,
investing and using the snap technology,
it's good to know that the other party is similarly invested.
So let me ask you a question because you guys are more false faithful than I am
in that I'm not.
I'm going to get a lot of great Reddit comments this week.
Isn't it a good thing, right?
Like isn't this just a sign that desktop –
and I specifically mean desktop Linux.
But like now that I could call Dell literally when we get off the line here
and order a Sputnik XPS.
Or I could call, you know, Emmet System 76 and get –
who knows?
Whatever they make, I'm probably going to buy it anyway
because that's my role.
We love you, Mike.
Pre-installed and within an hour of me just like loading a few applications,
I can have a completely functional development or support workstation
for an employee at an engineering company, right,
with a software engineering company where I would –
and I'm going to go on a limp here.
I would say like six years ago,
my only option was to drive to the Apple store,
buy them a Mac and pay, you know, several hundred dollars more at least,
and probably get a lower spec machine.
I mean, there were Linux machines, but they just –
it wasn't what they are today.
No, not at all.
I mean, it was all compromise.
Right, and not that prepackaged experience, right,
where there's a vendor you can call and say,
hey, you know, I blew something up, right?
Hey, now, System 76 has been around for like 11 years.
I don't – but you know, it's funny because there was that period of time,
looking back at it now, where it was like we kind of had an XP moment
where a lot of corporate desktops were shipping with like one –
or something like that.
Yeah.
And now we've kind of – we've kind of entered a new period
where everybody's using Gnome Shell.
It's not true.
Some people use SUSE.
That's true.
No, I'm saying not everybody,
but like all the enterprise applications and desktops that ship,
which is good.
I think it's going to be a good thing.
Why has no one fixed the if an extension blows up in Gnome Shell,
the whole thing goes down?
It's probably a deep architectural change, right?
Oh, yeah, for sure.
So that's like a flaw deep in the low level.
Part and parcel of the single threaded business.
Yeah.
Do you want to explain that at all?
We've talked about it on Linux Unplugged.
It's essentially – it's all a single thread.
It's all one process.
The mutter, the desktop, the extensions,
the JavaScript engine that renders the Gnome Shell interface,
it's all one process.
And so if any part of it crashes, the desktop restarts.
And what's even more brilliant and scary is in the Wayland future,
it will also be the display server.
So your entire display goes down,
which is why Canonical has opted to continue to ship X in their LTS release
because –
It crashes better.
I mean, just the way it separated.
It crashes better.
That's the way to put it.
The Linux desktop, it crashes better.
I think we have a show title on that one.
It crashes better.
Yeah.
So that's why – not to belabor this,
but I think workflow and tools are pretty important.
That's why I spent about a year on Plasma.
Hey, I'm still there.
Yeah, and it's really good.
Our studio machine over there is still on it.
But I've recently switched to XFCE just simply because I like GTK applications.
I just want as least – I just want the little desktop I need around it.
I need a file manager.
I need some launchers.
I need like a taskbar.
I need a clock.
And that's all I want, and that's what XFCE is.
Super, super minimal.
GTK.
And that is rock solid.
Rock solid.
Like it uses – it sips the RAM and it just runs and runs and runs.
And they've done this crazy thing where different things are different processes.
It's just – it's wild.
How traditional.
So can we continue the derail, just briefly talk about eGPUs?
Oh, yes.
I mean, I see you bouncing in your chair.
Join me.
Oh, I have.
I have.
So I have joined the eGPU cult.
I got – I started – I dipped my toes in the water when I got the Lenovo eGPU dock.
Now, this is something that I thought is kind of a slam dunk because I wanted an NVIDIA
card because it's just what I have the most experience with.
And I wanted it to be compatible with my ThinkPad.
So if a Lenovo makes a GPU dock.
Kind of guaranteed compatible, right?
Should work, right?
So I ordered that sucker, and sure enough, it does work.
And it was pretty remarkable.
I could even get it to accelerate the internal display of the laptop.
Now, is this using that funky extra port thing, or is it just standard Thunderbolt?
Straight up Thunderbolt 3.
Nice.
It's a USB-C style connector.
And it also offers a dock, so it's powering the laptop as well.
Right.
So it's the only cable on my laptop, which is really cool.
That's just fantastic.
Yeah, it's really – it's so good.
And then it has Ethernet, and it has three USB ports.
It has a sound card, and it has a couple of display ports and HDMI.
And then it's got a NVIDIA – like, I think it's really not that great.
It's like a – maybe a 1060 mobile in there.
Right.
It's not super fancy, but a big step up from integrated graphics.
Yeah, integrated graphics built in.
And so that's where I dipped my toes, and it felt liberating.
All of a sudden, to be able to have, like, this laptop that has nine hours of battery life
and all open source graphics, and then I plug in this thing,
and I get remarkable performance on this tiny little machine.
But Linux isn't super great at having a GPU just disappear.
First of all, you have to power cycle.
But second of all, even after you power cycle, sometimes when it powers back up,
the – something in the stack goes crazy looking for the missing components.
It's like, what?
Why don't I have all these NVIDIA things installed if I don't have –
and I know I have this module here.
Like, what's going on?
I've built this module.
What's happening?
And it just sits there and freaks out.
And eventually, after about a couple of hours, one of the cores of the machine will –
and the fan will be kicking up – will be completely pegged as it's searching for the missing NVIDIA card.
So I thought, there's got to be a better way to do this.
It's like a wounded animal.
Once I cracked this problem, the floodgates of eGPU heaven opened up,
and it is changing my life.
And I'm not exaggerating when I say that.
It is changing the way I test software.
It's changing the way I test operating systems.
It's changing everything about my workflow.
I am so happy.
So I've got to share this with you.
This is sounding more and more like a legit cult.
This is really great.
So what I realized is the way you do virtualization PCI pass-through is you essentially –
you find these PCI devices, and you dedicate them to the VM,
and you blacklist them from the host operating system.
Right.
So they're the only one.
They don't fight over it.
Right.
And then you go and you configure your VM, and you say, go grab these PCI devices.
They're all yours.
Have at it.
Once you've done that, it's kind of depending on the device.
There's a couple other things you have to mess around with.
But once you've done that, you essentially have these devices dedicated to a virtual machine.
And I thought, well, you know what would be pretty great?
Why don't I dedicate the entire dock?
So my dock with its USB ports, its sound card, its Ethernet, its GPU –
It's almost like a separate motherboard you're jacking in there.
Exactly.
Exactly.
Wow.
Let me tell you, Wes, game changer.
Because now I'm using a real, physical, mechanical keyboard.
I'm using a full-size gaming mouse.
I've got a 2K screen hooked up to this thing, and it's hooked up to the gigabit Ethernet.
I've got big desktop speakers plugged into it.
It's a full computer.
And what you can do, because they're VMs, is you can clone them.
So I built one, and then I've cloned it multiple times.
So I've got a Win 10 version, and I've got an Ubuntu version.
I've got a testing one that I can blow away for testing.
Oh, yeah, for doing distro reviews or just testing some software.
Wes Payne, I have used virtual machines since the 90s.
I have used a PowerPC Macintosh running virtual PC, emulating an Intel, running Windows 98.
I'm telling you, I have had virtual machines where there was an Intel add-on card that you plug into the machine,
and it uses that to virtualize.
I have built up huge VMware infrastructures that were mirrored across multiple data centers.
I have experienced with virtualization.
I have never experienced performance like this in a VM.
If you sat down, and I just had my laptop tucked off to the side, and you sat down and used that computer,
you would use it all day long and have no idea it's a VM.
You would never, you would never, you would never, you would never know.
That's beautiful.
Yes.
I'm going to try to get the product for you for the show notes, because this is the eGPU to get.
If you are going to build your own eGPU, there's a bunch of pre-built ones out there, but they're really expensive.
Like Razer Core is a good one, but it's very, very expensive.
This is kind of expensive because, you know, you have to buy it in components.
But I got the Mantis Venus eGPU.
Check this thing out.
It has, first of all, an open PCI slot, so I can put a much better video card in there.
Oh, yes.
Long story short, as soon as I started gaming, the docks started overheating and shutting down.
So not really built for that.
I made like this amazing breakthrough and started building up all these systems and started installing games
because I thought, hey, let's make a gaming VM.
Let's load it full of games, and then it starts crashing.
But I wanted to go to AMD Graphics anyways.
Oh, yeah, going on that side of the team.
Yeah, yeah, because then I'm also going to build a Hackintosh VM.
No, I was, okay, obviously that was lurking in the back of my mind.
Oh, yeah, I'm going to do it.
I'm going to have Windows 10, I'm going to have a Linux VM, and I'm going to have a Mac OS VM,
and the host OS is Fedora 30 on my ThinkPad.
That is beautiful.
It is.
I'll do a whole segment on it.
I am so happy with everything you're saying, so I'm going to cry.
It's so good.
This is like Christmas.
Check out this eGPU I got.
First of all, it's got a 550-watt power supply in it, so it will deliver a full like 87 watts to the laptop.
Again, single cable here.
It's got gigabit Ethernet in the back of the thing.
It's got three or two USB ports on the back, two USB ports on the front.
So it is essentially, again, I'm going to be able to dedicate all of these to the VM.
It's a full-fledged box, but here's the best part.
I can't believe they did this, and I don't know any other eGPU enclosure that does this.
Inside, they have a SSD slot, so you can mount an SSD inside the eGPU.
Fantastic.
Then you can put the VMs on that disk, and then I move that box around.
I just have Vert Manager all set up on each host.
I plug this thing in.
I immediately get the graphics, and I've got all of the VM disks right there.
You basically just need to plug in some compute.
Wow.
This is an interesting approach.
I mean, it's kind of like having six machines in one.
And you wouldn't know you're not.
You would not know you're on a VM.
You wouldn't know, because it has full GPU performance.
You're using whatever keyboard you want, whatever mouse you want, whatever screen you want.
This is the Thunderbolt dream come to life.
It's so good.
It's so good.
It's great.
So I'm going to set it up here at the studio.
I'm going to set it up on my laptop.
I can move it between.
Now, I imagine it might kind of mess with those stale, funky OSes like Windows,
but you could then use the Linux VMs when you're not even around the dock, too.
And here is also the best part.
Now I don't have any funky proprietary drivers on the host OS.
So it's all Intel stack.
That's nice.
So no weird graphics driver issues.
Everything sleeps fine.
I have great battery life.
All the proprietary garbage is in the VMs.
That's a great way to do it.
Wow.
It's the best Linux desktop setup I have ever had,
because you have the bulletproof open source stack,
but you still get all the proprietary goodies, man.
Yeah, you can game in there.
Do whatever you need.
I know.
It's so good.
And I really don't like Windows.
That's the only thing I realized is I was setting up Windows, setting it up,
and I'm like, I don't like using this.
And it took me like two days, three days,
because there are so many updates and stuff,
and I was learning how to reuse Windows and set up the VM.
In one evening, I got Ubuntu 19.04 installed with Steam and all the games.
So much easier.
Boom.
Windows is at least better in a VM, because you can snapshot and clone it.
I want to play around with WSL 2,
and I want to play around with a new terminal and stuff.
I don't want to be ignorant about it.
But now I've got a nice safe space.
In fact, this is the best way to use Windows, honestly,
because, again, I'd say it's 95% physical performance.
It's so great.
It's a great way to use Windows, and you've got snapshots.
It doesn't have to touch a real hardware.
I am so in.
So I've watched Mike for a little bit, because Mike got a nice box.
Oh, and here's the other thing about that Mantis.
The Mantis is using the same controller and USB controller as the Razer.
So the Razer products are pretty good,
and this is using the same hardware inside that the Razer boxes are.
With a little more space, a little more power supply,
and, of course, that Gigabit Ethernet, the USB hub,
and that hard drive slot, it's the perfect VM box.
I'll grant you, it's a lot of hardware to carry around
to have a good VM experience.
It's a little ridiculous, because there are ways to do it
with like virtual NVIDIA GPU sharing and whatnot, all in one box.
But to me, with my history of VMs
and the things that I have experienced in the past
to get decent virtualization, this doesn't feel like a compromise.
This feels like a gift.
So I'm happy to carry it around.
I'm going to get like a bag.
I might even travel with it.
I'm so dang happy.
You know, it makes me think we could use this for some studio things, too.
I think you just plug it in.
Maybe it's got a VM for run, all the things here.
You could, couldn't you?
Yeah.
Oh, yeah.
You could put all the stuff that's on our Reaper machine here.
It could be in a VM.
Boy, I was kind of debating building like a big, beefy Linux desktop
and put a nice graphics card in it,
but I think I might just have to go this way.
It's so nice.
It's amazing what you'll get out of that ThinkPad.
It's totally different because you have the same exact machine.
Right.
It's a totally different experience.
It's mind-blowing.
Even if you just use it to accelerate the internal screen,
which then you've got to mess with the drivers and stuff.
So, Mike, how does that sound to you?
I mean, how's things in your setup?
This is my jam now.
This is your fault.
This is all on you.
This is my fault.
I've got to say, Chris, you took it several steps further than I did.
Yeah, I can't imagine, and in a week I'll probably buy a Mac Pro,
but I can't imagine buying another desktop now
because you can always slot out a new card in your eGPU.
And if you have a system like the Mantis here
where it's actually your USB dock, one cable in, that's fantastic.
And what?
I mean, this thing, it's like $300 right now?
Yeah, I mean, you do have to get your own video card too.
Sure, of course.
Which, you know, that's good and bad.
I think long-term it's good.
Yeah, a little more expensive up front, but you have choice, freedom,
and you can change it out when you need to.
Yeah, and there is some pretty decent video cards that are not a lot of money
that are still way better than what the Intel graphics is doing.
So you can, I mean, you don't have to get an $800 video card either.
A $100 video card would be good.
Yeah, totally.
Start with something that's easy, and then you can upgrade from there.
Unless you need to push 4K, then I understand, which I do not.
Well, I'm buying one of those fancy new Apple stands.
Not the monitor, just the stand.
Just the stand, yeah.
That has several K of pixels itself, don't you know?
Oh, I didn't.
No, it's good to know.
I imagine.
All stands must be $1,000 or more to be acceptable.
So now how is running the Mac OS VM on Linux?
I haven't done that yet, but I have seen it is happening more and more.
It's becoming a thing.
You better get it now before they stop running on the x86.
Yeah, although in Catalina they're introducing DriverKit,
and DriverKit is drivers in user space,
which might actually be an enabler for the Hackintosh community.
I don't know, but if there is a developer spec they can follow,
and there's a way to run user space drivers.
You're right.
I mean, that might be certainly more flexible than all the, you know,
hacky K extension hacking that's going on now.
Yeah, well, they're locking that stuff down, too.
Exactly.
They're really locking that down now.
In Catalina, the system partitions read-only.
They do APFS magic, baby.
Whoop.
Slicing it up, making it secure.
They're doing that, interestingly, in a time where there's a few Linux
distributions that are also doing that same approach.
It seems like maybe it's a sound strategy,
maybe something we should play with sometime.
Oh, oh, oh, oh, foreshadowing.
Yeah.
Maybe we could make a little project on make your own read-only system
or something.
Well, Mr. Dominic, thanks for letting me crash the party today.
Oh, I loved it.
It was great.
And thank you for joining the cult, the eGPU cult.
I know.
I'm going to succumb sooner or later.
Now, wasn't it, it was just a few weeks ago that,
I can't remember, but I remember you were running a contest for Earth Day
recently.
Yeah, we were running an Earth Day contest for students to basically pitch
and do a little bit of kind of like pre-development documentation and maybe
a little dev on a false solution to climate change.
We got a lot of submissions, and we finally have a winner.
Kyler Chin out of California is getting a System76 Galago Pro.
Congratulations.
That's awesome.
What was the winning entry?
Basically, AI, TensorFlow-powered AI resource management.
That's amazing.
Wow.
Actually, I could see that.
Yeah, it's actually very practical.
Yeah, even just some intelligent resource management can make a huge difference.
I hadn't really thought about that.
There is a place for FOSS and technology and software
to make a big difference there.
I will say it looked like a pretty sweet machine, too.
You had the specs posted up on your Twitter feed.
Oh, yeah, look at that.
And that's no slouch.
Holy smokes.
Holy smokes.
All right, so of course you got it installed with Pop!
OS.
That's how it rolls.
Naturally.
It's got 3.9 gigahertz.
Wow.
The 3.9 gigahertz with eight threads, 16 gigs of RAM, 240 gigabyte disk.
Nice.
Nice.
Oh, look at you.
Even getting the LCD recycling in there.
Look at you.
I'm a full hippie.
And you went 1904 with Pop!
OS.
And of course, it's the 14-inch 1080p display.
Because matte's the only way to go.
That's one functional laptop right there.
Yeah.
Yeah, that's a nice upgrade on the RAM there.
Very nice.
Very nice.
Congratulations.
Kyler, huh?
Kyler.
Kyler Chen, yeah.
Congratulations, Mike.
I think that was a great thing.
That's really good on you.
Look at that.
Yeah.
Mad Botter is doing their part.
We're doing our part.
You can find links to really, I think, all of that, right, over at coder.show slash 362.
And check out the Mad Botter Inc. on Twitter as well.
You can check the – Mike tweeted the specs over there, right?
Is that where he tweeted it?
That's right.
Yep.
Also, we should mention, if you're looking for work, Linux Academy is hiring.
They are hiring developers as well as other positions.
Some of them – most of them are remote work from home, too.
So –
And it's used in technologies.
You've probably heard of things like Node.js and Ruby on Rails.
Yep.
Yep.
Check it out.
LinuxAcademy.com.
If you scroll around the site, or you can go to LinuxAcademy.com slash careers, it links
you to a lever page where they are all listed.
Go over there.
And in there, when you apply, a little pro tip.
Let them know you heard about it here.
Ooh.
That probably improves your chances, I would imagine, because they're going to be more
motivated to hire people that listen to podcasts like this.
That's a real thing.
I mean, if you've been listening to all of Mike's wisdom for all these years, you know
what you're talking about at this point.
It shows genuine, like, passion.
For Objective-C, yeah.
Oh, man.
Never going to go away.
Never going to live that down.
No Objective-C forever.
Just always gives me flashbacks of that post-WWDC episode we did.
Just every time you do it, it gives me flashbacks.
I don't know what the individual episode numbers are, but I have a feeling that one did pretty
well.
Yeah.
I would imagine by now, people have figured it out and listened.
That was a great example of Chris trying to go with the flow and just try to keep the
show on the rails as much as possible.
Yeah.
Not my finest hour.
Oh.
Not my finest hour either.
Listen back.
I seem so young.
So unexperienced.
Oh, child.
That's what I say every time I hear it.
We were wizened now, though.
Seasoned is what I prefer.
Seasoned indeed, yes.
Like an ice cast iron pan.
Oh, thanks.
Thanks at last.
I think that's a compliment.
I'm not really sure.
Yeah.
You know, the show is live on a Monday, jblive.tv, jupiterbroadcasting.com slash calendar.
There may be some prerecording.
I don't know.
At some point, Wes and I have to travel to Texas.
Get to.
We get to travel to Texas.
Yes, we do adventure to Texas.
Yeah.
We're going to do a Texas adventure at the end of the month, but I don't know.
Is that actually going to impact recording?
I don't know if it actually will or not, but we'll chat offline.
The reason why I bring it up on air is because I want to let you know, we do really love
it when you join live.
Oh, it's lots of fun.
And you can get it in your time zone at jupiterbroadcasting.com slash calendar.
Now, if you, you know, maybe you can't make it or you want a backup method to make sure
you always get your Coder Radio, well, Coder Radio, we have an RSS feed.
We have a way to subscribe.
It's true.
We're on all the apps.
Coder.show slash subscribe.
And that's probably, you know, probably we always lead with the live stream, but the
reality is the vast, vast majority, like 99.9% are getting it on the RSS feed.
And we appreciate that.
So we have a Drew now, new full-time Jupiter Broadcasting member joined a couple of months
ago.
Uh, he, he, uh, brings it through the wash, cleans up, brings in Mike's local audio.
So I think, I hope people have noticed it's been sounding phenomenal lately.
I think Coder Radio has been sounding really great.
And a big part of that is, uh, is thanks to Drew.
He's a wizard.
And of course, thanks to Mike for being willing to record the audio there locally, cause it's
more hoops to jump through.
Way more hoops.
No worries.
But, uh, now we're pro sounding.
We're like, we're like getting up with NPR now.
I mean, I don't want to brag, but I'm really proud of you guys.
Planet Coder coming soon.
If you want more Mr. Michael Dominic, and I know you do because, well, I do.
You can find him on Twitter, Mike.
You're at?
At Dimenuco.
Chris, you're there too.
At Chris LAS.
And I'm at Westpane.
Thank you so much for joining us.
Please come back next week.
Hopefully see you then.

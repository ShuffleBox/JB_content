This is Koda Radio, episode 433, for September 27th?
Hello friends, and welcome into Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and the business of software development and the world of technology.
This here episode is brought to you by Cloud Guru, you know Cloud Guru has those cloud
playgrounds, Azure, AWS, and Google Cloud sandboxes on their credit card, not yours.
So go get certified, get hired, get learning, at acloudguru.com.
So I'm Chris, and of course we are joined every single week by our esteemed host, the
man in Florida himself, Mr. Dominic.
What's up?
Hello.
Hey girl.
Oh hey, how you doing?
I am good.
I have been coding to the bone, Python baby, all day, all night.
Well it seems like you're doing three things, I'll spoil the third one last, but I do know
number one is Python, number two is bitching about Safari on Twitter, I know you're getting
in on that a lot.
Every time I change tabs, it's like a psychedelic adventure, I don't understand why.
Oots, oots, oots.
Yeah, you're at the disco when you're browsing the web now, I think it's brave.
But the third is the most important, and we just gotta get to it at the top of the show,
we can't delay anymore, according to Twitter, you now have a kitty cat.
I do have a kitty cat.
Wow, congratulations.
Thank you, I've had a kitty cat for about a month, but I don't think I've ever shared
that I have a kitty cat.
He is the most savage, savage of QA personnel.
Yeah, you gotta put him on the payroll for tax purposes, I totally understand.
If the code is bad enough, he just takes a quick nap on my launch keyboard and deletes
a file or two.
I just kinda take umbrage with the fact that you've had a kitty for a month and this is
the first time it came up on the show.
I'm sorry, you know what, I just, there's so much going on, I'm God willing, I'm launching
something by or more likely on the 15th of October, but you know, developers and estimates
always fun.
We could blame the audience for yelling at us for last week and just threw us off our
game.
Yeah, you know, I just cried for like a week, really, that's what happened.
Just really super briefly, and I mean this, I mentioned last week that I was really looking
forward to trying out the new focus feature on iOS 15.
As a man who is deeply challenged with his ADHD, I have to say focus mode has been great,
and what really put it over the top is when I combine it with shortcuts and NFC tags.
So I have an NFC tag here on my mixer in the studio, and I have it set to when I put my
phone down, which is, this mixer, oddly enough, has a phone holder, it has a spot for your
phone and so I put the NFC tag in that spot, and when I set my phone down in its little
spot here, it automatically sets it to recording mode, which is so brilliant, and you can do
shortcuts in a way where it doesn't prompt you, it just does it, and then I have it set
to just automatically turn off when I leave, and it's been great.
It has been.
That is choice, and so I'm gonna put a little NFC tag at my desk and a little NFC tag on
my way out to the car, and I'll just tap it as I'm going there or I get to my desk and
set the different modes, and I never even have to touch a button on the phone, I just
put it where I was gonna set the phone down anyways.
It's pretty slick.
That is pretty cool.
I mean, you could do this, I bet you could build this with Android.
If you use Tasker or you built, you know, you strung together several apps, you could
have probably done this on Android like a year ago, two years ago.
Yeah, but really, I mean, do you wanna build it with Android?
No, it was so, I did it in five seconds, really.
I just sit in here experimenting, like, oh, on shortcuts, I'll go to automations, oh,
boop, boop, done.
Oh, wow, that's nice.
So yeah, I thought it was pretty great.
We have more feedback this week regarding fair pay and the struggles with that and Apple
has been in the news in this regard.
That's how we got into this entire conversation to begin with.
Right after the show last week, I think, Tim Cook had like a big workplace meeting, you
know, where everybody was either, I don't know how many of them were actually in person,
but you know, they all get on the Zoom call, or I guess it's WebEx in their case.
And they have the senior vice president of retail there because that's something that
doesn't come up in our conversation a lot, but a big part of this is actually coming
from the retail space in Apple.
That's where a lot of this fair pay pushback is coming from is retail workers.
I'm sure it's true for people that are working at the UFO or that work in development areas
too, but that's actually in terms of the large segment of the Apple population that's pissed
off.
And so they had the senior vice president of retail there and people and they addressed
a range of subjects, even like political subjects, but according to the activist employees that
have been leaking, they told various publications that Tim Cook answered only two out of a number
of questions that they wanted to ask about fair pay.
And then really, they said, just failed to deliver any details on what his answers were.
And then of course, Apple said it was committed to pay equity, but you know, we got an email
into the show and I think it kind of put it in a little more perspective for me.
It seems like people are like exasperated.
And I think that's why the tone of a lot of the feedback was so charged because people
are at a breaking point with this.
Yeah, I think that's fair.
And also, you know, I don't understand what Apple thought they were going to accomplish
with that.
I know.
It seems like they should do better.
Yeah.
Or it seems like they should just like give up, right?
Like stop talking.
Like if they really want to change things and you know, not have these problems, I think
obviously and I forget her name, but I've interacted with her on Twitter, I feel like
such a jerk.
But like the cases where like they take employees phones, and like they make you put your personal
stuff including photos.
And that's like your work device.
And there's a couple cases of this have been documented where it's like, very intimate,
very personal data ends up just like, you know, all your data is mine, copyright Apple
if you work for them, right?
That probably needs to be a practice that doesn't exist.
Yeah, the verge had a great article.
And I thought this was common sense, but apparently it's not.
Even if you're working from home, your employer's laptop is their laptop.
Anything you put on it, they have every right to monitor blah, blah, blah, right?
So buy a laptop.
If we have time today, I grabbed a store you and I are on the same exact page.
If we have time, I grabbed a series of studies about that.
And anyways, I'd love to talk more about that.
Yeah.
That's a whole other thing, isn't it?
You're on your land.
And then you have to the question becomes like, what are they if they own them, if they
own that network interface, well, then are they allowed to capture whatever they want
from it?
You know, there's a lot of there's a lot of questions I have about that.
Yeah, I think that's a much murkier area.
But they can certainly say, Hey, man, you're using your work laptop, and you put whatever
things you didn't want us to see on there too bad, so sad.
That's a common hammer that they can hit you with.
And you got to think about it, especially too, if you're developing your own thing,
like if you have a little side project, you got to make sure you're not using any work
hardware for that.
No work resources.
Well, that was the plot of a season of Silicon Valley, right?
Richard Hendricks accident spoilers for something that came out years ago, like his MacBook
died and was in the Apple Store.
So he used one of who leaves his his, you know, who he issued a laptop.
And I mean, of course, as a dramatization, but that is a thing that happens to people
like never all the time, man.
I know, I know more than a few people that that has happened to.
Like, I take this a lot further.
I think everybody like if you want to have a blog, don't be on medium.
Don't don't be any of these services.
Yeah.
Spin up your own domain.
Have your own thing on only IP down to literally the IP address.
Right.
Like, you know, that is the thing is so many people that wrote in were exasperated because
they feel like they are at the mercy of this employer, and they have no ownership.
They have no say on what go is what going on, what's going on.
And because their livelihood and their whole lifestyle and feeding their family all depends
on it, it is it is extremely stressful for them.
And a lot of these emails, I was reading it, I was starting to think to myself, yes, that's
why I run my own business.
Even though I was employed for a while, I went back to running my own business.
Because it's the only it's the only way you really have control over the situation.
And I don't think it's for everybody.
And I'm not trying to advocate everybody quit their job.
The opposite, actually.
But that that that kind of control and that kind of ownership is, I think, what drives
a lot of people to run their own business.
And there's not an option for everybody.
So I grok that it's a it's a really it's it's a real rock in a hard spot.
And, you know, it's funny, too, with Apple in this particular case.
They could quite literally pay to make this problem go away.
And they could afford it like that's the wild thing here.
And it really kind of shows you the core characteristic of Apple, the way we see it through their
app store policies and their and their grifting on in-app purchases for stuff that they don't
really even add value to that kind of culture also is pervasive in how they pay their staff,
because they are so rich.
They could truly just justify if I mean, be honest with yourself.
If they gave everyone a 25 percent raise tomorrow.
All these leaks go away.
These problems all go away.
And Apple could look at it as an investment in brand.
They're not going to do it because they don't like the idea of increasing their ongoing
costs like that.
They're very, you know, they're very cutthroat when it comes to cost.
And that's just too high of a cost.
But they not only literally could afford to do it, but they could actually I mean, how
often you have the you have the option of your problems go away if you just write a
check.
And that's exactly the position they're in.
And they still refuse to write that check.
And if you're Apple, you know, me or you have a problem that could be solved with the check.
It's, you know, the cost benefits kind of kind of rough.
But for them, it's like, I don't know, aren't they richer than most or almost every country?
Yeah.
So Ben thinks that we kind of missed connecting on the core issues as I work for an enterprise
software company in a multibillion dollar market with fewer than five or major major
players who doesn't want to give us too much information because he thinks he could actually
kind of get fired for even talking to us about this.
But he says the thing that I can't get away from is that my boss can fire me whenever
they like for any reason.
And they conclude with other huge corporations to limit the opportunities if we quit.
But I can't make them bargain collectively.
I can't even take them to court or really do anything other than individual arbitration.
And good luck with that.
I hope you can forgive me, but I'm a little exhausted by being asked to see these things
from the business owner's point of view.
He also joked that he was told by a by a younger dev recently that an iOS code base was so
old because it contained Objective C code.
Well if your younger dev needs a old, wrinkled, experienced hand, you know where to go.
Let's just forget about the core issue you emailed about.
Let's talk about that Objective C project.
Charlie wrote in saying, you know, I actually appreciate the comments recently.
The small business point of view needs to be heard.
And I don't think you guys should be shy or apologize for doing it.
I mean, I appreciate at least that as well.
And like the point you made last week, too, is that you and I are such in a different
world than, you know, these oil companies or these huge tech companies.
It's just a totally different thing.
You and I agonize over the purchase of a laptop.
Well, OK, you agonize over the purchase of a laptop.
I just simply accidentally destroy one and get a new one.
All right, well, let's see if we can't help out a listener.
So David is tempted to make a career jump, but wants to get our take first.
He says, I'm based in Scotland, and it's horrible.
And I've been working as a mixed sysadmin network engineer role in numerous companies
over the past decade.
Where I can, though, I've been moving to automate things as much as possible.
And don't get me wrong, the current company I'm with is totally on board with me doing
that.
And they'll give me the time that they can, but eventually things always keep slipping
back to the old ways of managing the infrastructure.
And it very much is one of those the company views that is pay the bills first and then
do the automation stuff secondly.
However, reflecting on what I want these days and why I wrote this in, it's increasingly
evident to me that I want to write automation and infrastructure to the point of doing it
full time.
I've always been this way, and I guess this sits somewhere between the different roles
that I have now, unfortunately.
Do you think maybe there's just an element of me looking over at the grass and seeing
it greener over there?
Am I just going to enter into a whole other world of pain?
Or maybe it's time to move into a role that ticks these boxes for me.
What do you guys think?
P.S.
I didn't order a robe, and I'm sort of regretting it for the coming winter months.
Cheers, David.
Well, you should regret it.
I just hate to break it to you, David.
The robes is sometimes I just lay on the couch in my robe.
It's glorious.
Thinking about how I could ever have survived without my Coderradio limited edition robe.
You weren't living until you had the robe, I understand.
No, there was no life.
So he has got a couple of questions in there.
Yeah, you are just asking for another world of pain.
No doubt about it.
Doesn't necessarily mean it's bad pain.
I mean, sometimes learning and just grinding through the process of doing things wrong
and then figuring out the right way to do it is slightly painful, but I guess this is
one of those times where no pain, no gain kind of applies.
What do you think about this idea, though, of throwing out the perfectly good pain job
that doesn't quite satisfy you and switching it up, going out into the job market and finding
something in an area that you don't have much experience with?
I would definitely find that new role first, right?
But no, I don't know.
Growth is painful, but growth is ultimately good.
If David, you really feel strong about this and if you felt this way for some time, right,
not like a weekend whim or something, then why don't you just, you know, poke around,
see if you can get something.
Yeah.
Obviously, you need to make it work financially for you.
So yeah, you don't want to take a huge pay cut, I get it.
But who knows?
Maybe you'll make more.
Maybe.
I don't know exactly what, you know, what your situation is, but I would at least do
the research and dip my toe in a little.
And I wonder if David, if you're not miserable, because, you know, sometimes people write
us in and they're really at the point of they've already been burnt out for a really long time
and so they need to take immediate action.
If you are not feeling that way, if you could build yourself an off ramp, you might consider
looking at like a year plan where you end up doing a little bit of this on the side
as a project.
Maybe you donate time to a local business, a local cause, a church, an open source project.
You build something yourself and you get yourself in a position where you actually have a little
bit of skin in that game where, you know, your mistakes actually matter a little bit,
but you're not going to lose your job, obviously, because this is a side thing.
And see if you can't build and cultivate that for a year, because not only will that give
you an opportunity to scratch the edge immediately and let you test to see if you really like
it, but you're also going to network during that time.
And you may end up through that process finding a connection that secures you a job that allows
you to transition cleanly without missing a paycheck.
And that, I think, would be a real nice route to go.
And infrastructure management is one of those things that's hard to get your foot in the
door and say, hey, can I manage your infrastructure?
But man, is it needed out there?
David, it is desperately needed by so many developers who are so tapped out just keeping
up with their project, responding to user requests, let alone managing their infrastructure.
And both Mike and I are big advocates these days of bringing as much as your infrastructure
in-house as you can, own as much of that as you can, because at the end of the day, you
have to control that platform the best you can for the long-term sustainability of your
product.
And that means people need your help.
Deploying infrastructure as code is absolutely the way people should be doing it now.
And there's also a ton of people who need to transition.
And it sounds like your traditional sysadmin background and your interest in automation
means you may have a nice specialty in transitioning folks into new infrastructure as code.
I don't know, setups.
And that's actually a pretty nice specialty, because there's a ton of people interested
in doing that right now.
So I'd say play with the idea.
Build yourself a year roadmap if you can.
And if you can't, ask yourself if you're OK with six months.
See if you can condense it.
Set the time frame that makes sense for you, and perhaps go about it that route.
And you may find that if you do a little side thing, that's enough that you can stay at
the current job.
Or you may find that you absolutely are consumed by it, and it builds into some serious momentum.
Either way, David, let us know what happens.
And if you out there have any questions or you want to get some free consulting or advice
from the show, go to coder.show slash contact and tap Mr. Dominic's years of wisdom right
here on the show and makes content for us.
So you get a little, we get a little, and we like that.
Linode.com slash coder.
That's where I host my infrastructure.
More than ever am I grateful for Linode because I've got one box on premise and it crashed
recently.
I knew it was looking a little shaky.
So I built backup infrastructure on Linode and I just shut the box off and I thought,
well, if it's necessary, I'll power it up, I'll point the DNS and I'll be good to go.
And sure enough, that is exactly what happened while I was traveling.
Go figure.
And I am so grateful that Linode has a powerful DNS manager that makes it really simple for
me to take care of this stuff.
And they have a dashboard that really makes all these kinds of tasks quick and straightforward.
When you pop in, you get to see a list of all your Linodes.
You go in there, you get an overview of its performance, the kind of transfer it's doing.
And also they set up some really sensible alerts to automatically ping you if things
are a little odd.
Like if one of our boxes is just like really busy network wise, sending a lot of traffic
inbound or outbound that goes outside the norm, they'll generate an email alert to me.
And man, I can't tell you how useful that is because that's usually a sign something
is going on.
And it's just a small thing, but it makes all of the difference.
Plus, they have super fast networking.
They have 11 data centers around the world.
So you're going to pick something that's either close to you or close to your customer or
whatever it is you're looking for.
And they have Kubernetes support and Terraform support.
So if you are doing infrastructure by code, you can absolutely make Linode and manage
Linode with part of that.
It's just fantastic.
And then on top of all of that, they're now offering bare metal servers if your application
load requires something like that.
They have S3 compatible object storage, which is so great for back end storage for your
application or like for us, we use it for Nextcloud, which allows our team to not worry
about constantly checking the free space on the server all the time.
It just grows with us.
And then we go through about every six months and say, OK, what needs to stay?
What needs to get archived?
And it is so smooth.
And the performance is fantastic, too.
So really, it's just one of those things where you've got to go try it out for yourself.
Linode is dedicated to offering the best in virtualized cloud computing.
If it runs on Linux, it's going to run great on Linode, but I'd like you to go experience
for yourself.
And Linode is pretty confident you're going to like it.
That's why they're offering a hundred dollars.
One hundies.
So go to linode.com slash coder.
Get that $100 60 day credit on your new Linode account.
And of course, you support the gosh darn show, linode.com slash coder.
So we have been on and off on the show talking about fast API.
I don't know.
Really, I mean, since you and Wes first talked about it a couple of years ago, it seems like
at this point and it looks slick from what I understand.
It's a modern fast, really, I guess, overall, though I have not experienced it personally,
but they say high performance web framework for building APIs using Python, which of course
puts it right up your alley.
Yes, my snake charming continues.
So a couple of points on fast API, right?
So this new project I'm doing is in fast API and I've been writing just so much fast API
code and I love it.
It's got a couple of things going for it.
It is, in fact, very, very fast.
The author, who's Sebastian Tiaglo, I hope I got that right, sorry, is aiming for node
JS and go like performance.
And this has been used by all kinds of people like Microsoft, the Microsoft guy quoted there
and Netflix, Uber, the whole bit.
It automatically built into the box that generates documentation to your method calls or as Rails
people might call them routes with open API.
They're very good looking docs.
If you've ever heard of Swagger, open API is the new name for Swagger.
So that kind of thing.
It is Python 3.6 and up only because it leans heavily on types, right?
Python has optional typing and it became more robust than 3.6.
This is the thing that really gets me.
Out of the box, it is ready for async IO and asynchronous programming.
So it's not like with Flask you can do async, but you kind of have to bolt it on.
With this, it's right out of the box and that has made things just a lot easier to reason
about, a lot simpler.
I am loving it.
Async IO is a great implementation of like the await, async await pattern and asynchronous
programming in general.
FastAPI does a great job.
It's actually built on a framework called Starlet, which is another kind of web framework,
but FastAPI, he describes it as Starlet on steroids.
This data handling is also built on Pydantic, which I haven't done a lot of direct Pydantic
without FastAPI, but it's basically ensuring your types are correct and a bunch of other
more advanced stuff.
I feel like I'm selling it short.
For like quality of life stuff, great Visual Studio Code support via PyLance, great PyCharm
support.
I didn't put this in the doc, but the same author has something someone wrote in a couple
of weeks ago, SQL model, which actually solves my problem of SQL alchemy models, not when
you do the dot, not having the IntelliSense for the options.
That's very nice because it's a kind of like an abstraction over SQL alchemy.
I am not using that in this project because I just didn't want to change too many things
at once, but you can intermingle it so I could see myself transitioning to it in the future.
Also if you're now doing web development or service side development, but need a command
line app, he wrote something called Typer, which is effectively FastAPI for the command
line.
Slick.
Man, this sounds perfect for your kind of work.
This is right up your alley.
This is, yeah, this is really nice.
I have to imagine this must make getting started a lot faster too because it seems like a lot
of the things that you would bolt together are baked in.
Some of it's by virtue of being just focusing on super modern Python features, it really
is giving you a lot of the best practices of a modern Python developer right from the
jump.
So when you start, you immediately have async IO and you don't have to worry about it.
Right, I follow.
Of course you could use it with other frameworks, but having this framework actually built to
use it as a first class way of doing development asynchronous programming is a big difference
than say bolting it on to a different framework.
Yeah, especially when you're building a product on top of this, you're going to build something
that you sell to customers and they're going to have expectations of maintainability, etc.
Absolutely.
And if you've done like a flask, it's very much in the flask kind of philosophy of giving
you enough to get started, but you can kind of design your own project, right?
I would say we're like Django for folks who know Ruby, Django was like the Ruby on Rails
equivalent, very opinionated, very big.
This is more like a Sinatra right on the Ruby side.
So this is a new love, you know, this sounds like you've fallen in love with a new tool.
Well, I've been using it on the DL a lot.
I mean, if you follow me on Twitter, I've actually been tweeting my 100 days of code
because I love annoying hashtags are almost all this fast API projects.
So I did see some of that go by.
That's why I kind of knew you were sniffing around in this stuff.
But it seems like to me, like a unique opportunity for a guy like you to have a tool like this
that this is just so already in the direction your business was going.
And now you've kind of got this to build on top of for the product you're working on now,
but also future products.
You could kind of I guess where I'm going with this is you could kind of pivot a lot
of a lot of your team to stuff like this.
How have you have you thought about what it would be like to have other others or maybe
you've already thought about this?
Have others joined Mad Botter or have people on the team that would start developing with
fast API?
Is this something you've thought about like specializing in?
Is this something you've thought about just you're working on?
I'm curious to know what it looks like functionally from a business standpoint for how you guys
are adopting it.
Yeah, I mean, today, we were all working on the upcoming product and we were all working
in fast API.
So it's actually helped with standardization, right?
Because it is Python.
So we're all using VS code with the same plugins.
We can do the VS code live share, which if anybody has it doesn't know what that is.
It's like a super screen share for coding where you can like you have all your own setup.
It's really nice.
You should check it out.
I would probably say to going forward any kind of client work that would be a new client
or a new project that needs a back end, which is all of it, right?
I would probably push pretty aggressively to have it done in fast API if it's in Python.
Now can you give us a hint of what you're building now using fast API?
Can you say?
Do you want to say?
Yeah, I can give a hint because I tweeted about it.
I am using Slack and sockets with fast API and a lot of async goodness.
Like a little messaging, something gets done, you send a message to Slack kind of thing,
huh?
There is a lot of messaging happening.
Yeah.
Yeah.
Okay.
That's great.
Well, I look forward to hearing more about it.
The mid-October can't come soon enough.
Yeah.
Well, I'm hoping to have it done that Monday before the 15th.
But you know how that goes.
Yeah, I do.
Yeah, I do.
Well, we'll have a link in the show notes.
And then you know what we should do at some point is we should have Wes come back on.
Yes.
And you guys can geek out on fast API since I know he was an advocate of it early on.
And then it's a good excuse to have Wes on too.
Yeah, he's the one who turned me on to it.
So thank you, Wes.
Yeah, I'll twist his.
I see him in the chat room right now, so I got my eye on you, Wes.
Any other notes on that?
No.
I mean, I probably in the coming weeks will dive a little deeper into maybe SQL model.
Let me know in the chat room plus in the feedback if people are interested in that, but yeah.
Well then, this episode right here, yeah, it's brought to you by Datadog.
Go to datadog.com slash coder radio.
Datadog is the monitoring and security platform for developers, yes, security specialists,
operation teams, anyone that's working in the cloud age.
You can unify your metrics, your traces and logs all into one place and troubleshoot issues
faster, and you can break down your silos and communicate better between teams.
You create real time, beautiful dashboards with over 450 different technology integrations
in just minutes.
You can pivot from high level overviews of your environment to granular visualizations
of metrics and events.
I mean, I'd encourage you to go check it out because they nail these dashboards.
They're beautiful.
So go to datadog.com slash coder radio.
Go sign up.
They have a free trial, and if you create one dashboard, you're gonna get a free t-shirt
as well, which is awesome.
And Datadog has infrastructure monitoring, security monitoring, real user monitoring,
and more all in one place.
So go get started, datadog.com slash coder radio, and see what I've been talking about.
They are the ultimate monitoring solution.
Go see why thousands of companies and tons of people in the Coder Radio audience trust
their monitoring to Datadog.
And then, if you do create that free trial and one dashboard, they're gonna send you
that free t-shirt.
Go to datadog.com slash coder radio.
So you found a book this week that is, I mean, it looks great.
It's called Street Coder, and I like it already.
I think it could have been our name.
Could have been.
You know, that could have, we should have thought of this.
We should have thought of this, yeah.
13 years ago.
Yeah.
Dang it.
So, you know, we said we wouldn't answer, like, the basic, like, what should I learn
first?
Where should I study questions anymore?
And I read this book, and I feel like it's time to reopen that.
So I'm gonna butcher this guy's name, but it's Sadat Kapanoglu.
Kapan-glue?
We're gonna go with that.
Sorry.
Apologies.
I can't.
My pronunciations suck.
It is basically a, you know, both Street Coder.
It's like a field guide to the streets of coding, I guess, taking an extremely practical
point of view.
It's definitely a little opinionated, but I'm pretty impressed.
So for long, long, long time listeners, you might remember that I always recommend to
new developers, and still do, Mike Gunderloi's Coder to Developer.
It's a classic.
You can get it on Kindle.
I think it's like 12 bucks.
It's great.
Enjoy.
Like, seriously, if you're new to the industry or in college, whatever, high school even,
you pick it up.
It's a little dated, because it's, god, it's 20 or 30 years old, but no, it's not more
than 20 years old.
Whatever.
It's a good read.
This is more, if I would almost say a more, lack of a better term, aggressive, aggressively
opinionated, and modern take on it.
Now he uses C Sharp and.NET as his, you know, his, like, intro.
But some of it's.NET specific, but more or less it's about how do you approach problems?
What methodology should you be using?
Should you adhere too harshly to methodologies?
The answer's obviously no, right?
You know, finding that right balance between pragmatism and, you know, white tower closure
computer science that one was for US.
I think I'm going to put it as number two on my list.
Your new developer, recoder developer first.
And when you have about maybe six months experience, maybe even a year, because it's a little more
technical than coder to developer.
He makes a very strong argument, I'll just give an example here, for understanding how
like things like the CLR work at the low level.
And obviously if you're like a Java person, you know, the JVM.
I am kind of swayed by his argument.
It's a powerful book.
It'll have you thinking.
I think I'm going to get it after the show.
The description on the web page is quote, an incredible book to learn the craft of software
development through a new perspective.
One that is not fueled by religion or blind following of best practices, but one that
actively challenges best practices and thus requires you to think about their pros and
cons.
That sounds great actually.
I'm going to pick it up.
They got an ebook for $27.99, that's probably money well spent.
And you can get a print book for $34, but I think the ebook is probably fine.
And the code, there's code samples.
And again, the title was called Street Coder, which that's what we should call our members,
the Street Coders.
No, I like our QA team and we'll have a link in the show notes at coder.show slash 433
if you want to grab that.
So there has been several studies that Stanford just did one, Connect Solutions just did
one.
The Wall Street Journal just did one.
And the studies pertain to does monitoring employee systems with like surveillance software
actually make the staff more productive?
Does it impact morale, et cetera, et cetera.
So Stanford study of 16,000 workers over a nine month period showed there was some performance
increase of around 13% when you monitor.
But and this is interesting, it showed, and this I don't think is good for employees at
all.
The biggest boost in productivity was actually with remote workers, a 77% of the improvement
was with remote workers, 30% indicated they do more work and less time when remote, and
then 24% doing more work during their work hours, but overall, we're more productive
while remote.
But the old adage that actually says, if I can't see what you're doing, you're not being
productive, I don't think actually holds up when you look at it.
Going through all these studies, and I have a link in the show notes because there's like
a page that sort of summarized them all, it really, all it does, it seems like employee
productivity monitoring at best will discover some workflow issues.
That's its best case scenario.
But really, it's about, it's generally more about like getting on people for the time
they're actually at work or the time they're working and not putting in a full eight hours
is like, predominantly the way it ends up getting used, and that has horrible impacts
on morale, it makes people view the company negatively, like, it's big impact.
And so I thought I want to ask you what your thoughts were if there is a place for employee
machine monitoring, because we already know employers feel where they, I guess, legally
own the machines, they own all the content on there that gets created.
It feels to me like it is a step too far to do any kind of monitoring on these systems
at all.
And I've always resisted this and a lot of places I've gone into recently have done some
kind of mandatory monitoring.
And I so far was able to avoid it always because my systems are running Linux.
But even as like a client contractor, coming into a land, they'll have like this antivirus
software that they would want me to install on my laptop that gives them full remote access
to installing software in my system.
Seems like a step too far, right?
I think I think it's not only a step too far, I think it's kind of idiotic.
If you are hiring people that you trust so little to actually do their job, you simply
shouldn't hire them.
And if you made the mistake of hiring someone like that, which happens, right, some, you
know, you hire people don't fit, whatever, you should just, you know, let them go as
quickly as possible and as humanely as possible.
No one deserves to be treated like they're a prisoner at work.
That's ridiculous.
I mean, especially if they're working from home.
I don't know, I hate all this stuff.
Even you know, I could kind of see the antivirus thing.
But even then, most of those antivirus programs, as you suggested, are not just antivirus,
right?
Like, I could see a thing that's like, hey, dude, you downloaded this XE that we know
is bad.
Someone from IT is gonna call you and be like, yo, you got to run the scan or something.
But I really, really hate the idea of turning, you know, work into a surveillance state.
I think you should hire people that you trust, that are good fits for your organization.
And it doesn't mean if someone's a bad fit for you, like, lots of people, I think I can
speak for you a little bit here are bad fits for JB and the Mad Botter, because we're super
small.
Yeah.
Right.
And that requires a certain type of personality, a certain type of person.
Very much, you know, you need self motivators.
But they might be great at Microsoft, right?
So it's, it's, I hate this.
I completely agree.
But I'll just play devil's advocate.
What about an employee whose job it is to monitor and adjust the chemicals that are
going into the city water supply, I actually know the guy that does this here.
And like, they had somebody compromise their machine with a PC anywhere, and actually get
access and turn up the chemical solution.
But they caught it quick enough, because the guy actually saw the mouse moving around on
the screen.
And they set everything back.
And or I think about like, somebody who's working without some other hazardous material,
or perhaps a young employee, it's their very first job.
Is there a place for monitoring and tracking in those situations?
So you you laid out like, a couple different scenarios, the easiest one is the young employee.
The answer is no.
Right?
Like, if you're just hiring a young developer, and you know, it's no.
But sure, if you were like working on a nuclear missile silo, then one, those jobs have always
had monitoring, right?
That's a public safety issue, right?
So that, you know, going in that you're giving up certain, I mean, you're going to be monitored
with that kind of thing.
Yeah.
But that's not kind of that's not really what this, what this was all about, right?
This was about employers having anxiety.
I mean, let's be honest, a lot of organizations, a lot of managers have anxiety that people
working from home are just like walking their dogs and playing Uno with their kids, right?
That's what this is about it.
Although reviewing these different studies, it seems to show a pretty decent overall productivity
boost for remote workers.
Well, we've been talking about this for years, right?
I mean, I've been remote for a long time now you've been doing the remote thing.
You know, there's an initial cost to setting it up in terms of like, process and procedures.
And having everybody agree that there will be standard hours that people need to be in
slack or teams or whatever you're using.
30% of respondents say that they did more work in less time when they work from home.
Yeah, of course, because you don't know how easy it is in the middle of the night, if
you work from home, that you were sleeping and like in your dreams, you know, Donald
Knuth came to you and told you how to fix that bug.
You just wake up, grab your MacBook Air, plug plug, or your system 76 Pangolin and you fix
the bug.
You're also cutting out for better for worse, the hallway conversations, the you know, drive
by chats, like, for better or worse, you're cutting those out too and staying focused
more.
Yeah, and all that all that stuff, sure, camaraderie, team building, I kind of get that I think
you are losing that.
You know, how much time is wasted with like, gossip and
Yeah, true.
So back to the monitoring, I believe now that there are employee monitoring solutions for
the Mac that are just as unbelievably invasive as the Windows ones.
And it seems some of them even kind of try to capture information about your network,
like, you know, look at look at the other machines, other IP addresses that your machine
is aware of on the network, and kind of susses out like your overall network setup.
To me, that seems like not only is this trend line going in the wrong direction, especially
when you add in the context of fair pay, but the technology is going to enable just more
and more and more.
In fact, we recently had a story.
I don't know if I can't remember if you and I decided to put in the show or not.
But we recently had a story that was these employers were mandating, in fact, Apple contracts
with one of them or was contracting with one of them until it went public, that the employers
were mandating always on webcams when you're working from home.
Always on webcam, you're always get you always not just in a meeting, you always have the
video camera on, you're all up on a screen, the managers can check your video camera.
And they had to do it because of COVID they said, you know, you have to work from home,
but we have to be able to monitor you.
So because of COVID, we're going to do this.
It's literally their reasoning.
And I find it completely overreaching.
And it seems like when you look at things like I, for example, why not why not take
it to one step further and have a companion app that not only is installed on your desktop,
but the companion app that's on your mobile device that's tracking your steps and your
location?
Why not?
Why not have them have you take a picture to check in in the morning with the front facing
camera on your phone so they can make sure you're in your home office?
Why not?
I mean, where do they draw the line?
Because it just seems like if they're going to do always on webcams, and they're going
to start monitoring, like your ARP cache, like, where do we draw the line on this?
They're just getting they have the argument that they're that they're, they own the machines.
And you need to check in, you know, you got to punch the clock, and we're now using this
new app to punch them on the clock, and you're going to get your picture taken at the same
time.
What's the difference if you're coming in and punching the clock on the wall?
Same thing, they'd say.
And I don't know how we even begin to fight back in this stuff.
And so it helps me connect with the people who are really upset about the fair pay stuff.
Because it just seems like people are completely powerless to stop a trend line that is not
going in their direction.
I guess I agree with you.
But I mean, what is the problem these employers are solving?
I feel like it's a really like, kind of sad insecurity thing.
I'm not saying they're not doing it.
I'm just saying it's bad, right?
I haven't thought about it a lot from why I just assumed it would be a guaranteed accountability.
Right.
But isn't it more output that you should care about?
Well, yeah, clearly, but it doesn't seem to be the way it works, does it?
When we all had the office in New Jersey, it was be a problem.
And it was a problem.
If somebody is like blasting gangster rap, right?
You have neighbors, the language is inappropriate.
People could get offended.
I don't want to get sued, right?
You can see me in or, you know, an employer intervening in that.
But if they're at home, and blasting, I know very little about rap, but blasting like Tupac
makes them a better developer.
Maybe I want to buy them some Tupac albums, right?
I don't know.
Like, you know, I hear you if I can get 5% more output, because we're listening to NWA,
then I'm, I'm probably going to be totally cool with that, because one, they're not disrupting
their co workers.
You know, they're doing it in the privacy of their home.
And if they get a noise complaint, it's their problem.
And that's just a dumb example watching TV, right?
Watching something on an iPad.
Well, actually, no, the very first time I don't remember what job it was, it was so
long ago now.
But the very first time I had the opportunity to work from home, the first thing I did was
blast my effing music, I rocked out while I work.
So that's actually a good example.
Wes in the chat room says, check this out, Mike, he says that he had a buddy run nmap,
you know, the port scanner on his home network.
And then he had it check in with him to ask him if things were okay.
He triggered it back at the corporate office by running nmap on his home network.
Wow.
Whoo.
You know, like, that's, and I just wonder, I think, like, in a way, I think maybe we
should tell people how to avoid this kind of stuff.
Optimus Grace says he sets up a VLAN for his work laptop.
What I advise people do is they put their work laptops on guest Wi Fi.
If your wireless access point supports creating a guest AP, that's that's a good tip.
Yeah.
Or set up a second, you know, access point, you and I are in a weird position, right?
I can't imagine a scenario unless it was like something crazy, like the government, right?
Where I would accept the job where part of the condition is, you get to spy on not just
my, but like my whole family's network and traffic that seems, you know, right?
Just, yeah, that's the thing at home, you know, wow, I hadn't even thought of that stupid
me.
Well, we both have kids, right?
I mean, my, my son's very young, but I could see a world where there's some, you know, teenagers,
right?
Like some uncomfortable conversations with, with ID or HR because of that kind of thing.
So.
And then you have the, you have the employers who actually provide the entire router too,
because that's how their VPN solution works and that's how they have to have it.
And oh man, yeah, it tell you what, I tell you what.
You know, if that's you, then run a, run a VM and in that VM run a VPN, like do what
you can.
They're like, we've got to, I think we've got to push back in a way and, and, and break
it technologically.
Cause otherwise it's just, it's going to keep going and keep going.
Well, and if your employer is going to spy on your internet traffic, shouldn't they pay
for the connection?
So at that point you could just, you buy your own laptop, you call spectrum or whoever your
carrier is or your ISP is rather, and you just say, listen, I have one from my employer,
but I want a second line.
Well, I don't really want them burning my internet connection up with this extra metric
stuff either.
Like, yeah, that's, that's an interesting argument.
Should they have to pay for that?
I mean, yeah, especially when I'm on like mobile internet, like every bite counts literally.
So just don't know about it.
I would, I would probably try to firewall it off and stuff.
I mean, it's all solvable between DNS and IP rules.
You can probably block a lot of it, but you have to be, you have to be familiar with how
to do that kind of stuff.
And most people probably, you have to imagine all the people that got sent to do work from
home, the vast, vast majority of them aren't even thinking about this kind of stuff.
And it, you know, bringing it back to what you said at the beginning of the show, I have
friends who have been bitten by this over and over and over again when they start a
project or some night they decide to work on the work laptop because their home machine
isn't working.
And even if it's just a small part of a project that they spent using company resources to
build, they'll come after you for it.
And now they have more evidence than ever.
Like they have such, they have so many different ways to track activity.
It's just so, so dangerous and so risky.
And so it really, it really is important that if you're going to ever work on a side project
that you ever want to do outside the company and you don't want them to own it, you have,
and I'm not advocating, maybe it's, maybe you're fine with them owning it.
That's, that's great.
That's maybe a good way to get ahead.
But if you want to build something that they don't have any hooks into, you got to do it
on your own time and on your own resources, no company resources.
It's very, it's just critical.
I have so many friends that have been burned by it.
And you know what, the nice boss, one may not be your ultimate boss, but when there's
money on the table, people get different.
It's business, you know, for them.
I want to thank our Coder QA team.
You know, you are our core that keeps the show truly independent, that lets us be picky
about our advertisers.
And as a thank you, you get a limited ad feed, it's the same production, just limited ads.
And you also get the Coderly that comes out every quarter.
So you can always look forward to that around the new quarter, you'll get a new Coderly
report.
You can sign up and support the show at coderqa.co.
Also you can find our friends at a cloud guru on most social media sites that just slash
a cloud guru.
It's like YouTube or Twitter, it's really easy to find them, they're just slash a cloud
guru.
What about you, Mr. Dominic?
Can people find you on the Twitter?
Yeah, at Dumanuco on Twitter, and I'm going to be doing some crazy Python stuff.
So if you're interested, follow.
Nice.
I do love the crazy Python.
You get out there and charm that snake.
You can follow his company at the Mad Botter Inc.
I'm on Twitter at Chris Ellis.
The podcast is at Coder Radio Show.
We also have at Jupiter Signal.
You can follow both of those at Coder Radio Show and at Jupiter Signal to just stay up
to date on network and show news and releases and stuff like that.
Links to what we talked about today are all at coder.show slash 433.
There you're going to also find our contact form, our RSS feeds, all that.
We'd love to get your feedback.
It's a big part of what we do.
The conversation evolves every single week, and your feedback is what directs that evolution.
You can also join us and participate immediately.
We do the show live noon Pacific, 5 p.m. Eastern at jblive.tv.
Thanks so much for joining us on this week's episode of the Coder Radio program.
See you right back here next week.

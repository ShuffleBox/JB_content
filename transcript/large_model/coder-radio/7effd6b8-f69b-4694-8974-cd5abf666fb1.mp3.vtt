WEBVTT

00:00.000 --> 00:07.000
This is Koda Radio, episode 348, from March 11th, 2019.

00:31.000 --> 00:35.360
Hello, and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes

00:35.360 --> 00:42.240
a pragmatic look at the art and business of software development and related technologies.

00:42.240 --> 00:47.880
My name is Wes, and I'm joined by that crazy hacker himself, the one, the only, Mr. Michael

00:47.880 --> 00:48.880
Dominic.

00:48.880 --> 00:54.760
Mwa ha ha! After 340 episodes, I'm free! It's time to conquer scale!

00:54.760 --> 01:00.920
Oh yes, that's right. I just got back from scale. Actually, the whole JB crew was out

01:00.920 --> 01:05.120
there and I gotta tell ya, it was my first scale. It was a ton of fun.

01:05.120 --> 01:08.000
Really? So tell me, what was the highlight of scale?

01:08.000 --> 01:12.800
Okay, well the personal highlight for me was getting to see Brendan Gregg, the incredible

01:12.800 --> 01:17.780
performance engineer at Netflix, give a great talk all about the modern traceability tools

01:17.780 --> 01:22.960
that we have with EBPF on Linux. It's like D-Trace, but actually slightly more powerful.

01:22.960 --> 01:25.560
And you know, you might not care about that, we have some great tech snaps about that if

01:25.560 --> 01:30.800
people want to go find out more, but a cool demo he did, which he prepared like an hour

01:30.800 --> 01:36.960
before, was a live performance debugging of Minecraft, which is not only a complex Java

01:36.960 --> 01:42.760
application, but was also a game Brendan had obviously never played before, because mid-talk

01:42.760 --> 01:46.800
he had to ask the audience how to mine, which if you don't play Minecraft, that's a button

01:46.800 --> 01:48.360
click on your mouse.

01:48.360 --> 01:53.560
You know, there's nothing more horrible than it performed Minecrafter.

01:53.560 --> 01:59.680
Yeah, right? Isn't that the case? Now, there was actually a lot to like. I've been to all

01:59.680 --> 02:04.360
kinds of different conferences, but this was my first bigger Linux convention, right? So

02:04.360 --> 02:08.740
I've been to Linux Fest Northwest, and it's got a small friendly vibe. And you know, there's

02:08.740 --> 02:14.200
things like Defcon or Ozcon or some of the bigger re-invent that are just crazy, but

02:14.200 --> 02:18.320
they feel they are business conferences, right? It's people making business networking and

02:18.320 --> 02:20.200
connections and selling services.

02:20.200 --> 02:21.920
Bring on the suits, baby.

02:21.920 --> 02:25.600
Bring on the suits, yeah. Scale's nothing like that. It's still big enough that like,

02:25.600 --> 02:28.960
you know, I got to go see Brendan Gray talk, which was awesome. And all the people that

02:28.960 --> 02:33.120
you might want to see, experts are there, but everyone's friendly. Everyone's there

02:33.120 --> 02:36.560
because they love Linux, they want to talk about technology, and you can actually have

02:36.560 --> 02:40.840
some space at the end of a talk to go shake hands, say hi, get your picture taken with

02:40.840 --> 02:46.280
people in a way that you just can't at bigger, more businessy conventions.

02:46.280 --> 02:47.280
That sounds great.

02:47.280 --> 02:52.060
Yeah, it was great. Also, at the same time, America's Got Talent was there, and they were

02:52.060 --> 02:57.120
in the building right between the two buildings that Scale was using. It was pretty funny.

02:57.120 --> 03:01.340
Totally different crowds. And I got to see Simon Cowell ever so briefly go from his car

03:01.340 --> 03:03.760
to the venue.

03:03.760 --> 03:06.880
That's probably enough about Scale for now. If you want to hear more about JB's trip to

03:06.880 --> 03:11.400
Scale, go check out the upcoming episode of Linux Unplugged.

03:11.400 --> 03:15.000
Let's get things rolling with some feedback from our friend Tom over in the Coder Radio

03:15.000 --> 03:20.920
subreddit. He's got feedback for us about our last episode, Rusty Ruby's number 347,

03:20.920 --> 03:26.320
where we had some concerns about Google's growing browser dominance. Tom writes,

03:26.320 --> 03:30.440
I don't think people need to worry so much about Google or Chrome's dominance the way

03:30.440 --> 03:37.080
we did about IE6. It's not just that Chrome is cross-platform and open-source, but it

03:37.080 --> 03:42.560
also sticks to standards in a way that IE never did. Amen, Tom.

03:42.560 --> 03:47.340
Practically speaking, we should also keep in mind that iOS exists, and it's always going

03:47.340 --> 03:53.600
to be locked down in a way that means no matter how popular Chrome becomes, an important portion

03:53.600 --> 03:59.160
of mobile users will always be using Apple's browser engine.

03:59.160 --> 04:03.800
Some might also lose big in some areas like web components or web assembly. That's the

04:03.800 --> 04:08.080
beauty of a standards-based platform.

04:08.080 --> 04:10.920
Thank you very much for your feedback, Tom. We really appreciate all the feedback we get,

04:10.920 --> 04:18.840
and you can provide us more over at coderradio.reddit.com or coder.show.com. What's your take, Mike?

04:18.840 --> 04:21.520
Did we hype things a little bit out of proportion last week?

04:21.520 --> 04:25.000
Yeah, I think we may have overhyped it just a little bit, right? Because you know what,

04:25.000 --> 04:29.640
you always care about mobile. I don't know if you followed me on Twitter this weekend

04:29.640 --> 04:33.840
because I know you were busy hanging out with Scale and those America's Got Talents girls,

04:33.840 --> 04:41.080
and God bless you, I wish I was there. But my son whipped out the Marvel coloring app

04:41.080 --> 04:44.960
for iPad, and I have the Apple Pencil, you know, Wes?

04:44.960 --> 04:46.960
Oh, yeah, those are pretty slick.

04:46.960 --> 04:50.920
And I have the new one where it has all the fancy, the Apple Pencil 2, so all the different

04:50.920 --> 04:56.600
— like if you shade it sideways, it shades instead of just coloring. He spent two hours

04:56.600 --> 05:01.520
just coloring Captain Marvel. He's a Marvel Captain Marvel.

05:01.520 --> 05:02.520
That's awesome.

05:02.520 --> 05:08.000
To a level of detail, that's a little scary for a two-year-old, but my faith in the iPad

05:08.000 --> 05:13.080
as a harbinger of the future of computing for the masses is renewed. So yeah, I think

05:13.080 --> 05:20.040
Tom's point is well taken, that mobile superiority is a significant thing, and it's definitely

05:20.040 --> 05:21.760
going to be a check against Chrome.

05:21.760 --> 05:26.160
Yeah, interesting. I was kind of always — I hadn't thought of that, so that's a great

05:26.160 --> 05:29.240
point, Tom, because I kept thinking of Firefox as something of the backstop, and in some

05:29.240 --> 05:34.360
ways it is, but that's a lot of hope in one corner.

05:34.360 --> 05:38.560
So I hear we have a new way to deploy these iPad apps that my boy likes.

05:38.560 --> 05:41.800
Right? I mean, that's something interesting to you because we previously talked about

05:41.800 --> 05:45.880
some of the links you're going to figure out your build system integrating with iOS,

05:45.880 --> 05:50.720
especially since you've been using more Linux these days, and those ecosystems — well,

05:50.720 --> 05:52.200
let's say interop is a challenge.

05:52.200 --> 05:56.440
Yes, I'm on Linux right now.

05:56.440 --> 05:59.720
So maybe you can explain this, because I saw this over in the CoderRadio subreddit, and

05:59.720 --> 06:05.440
it's a post over on GitLab's blog, but titled, How to Publish iOS Apps to the App Store with

06:05.440 --> 06:10.880
GitLab and Fastlane. And I'll admit, Fastlane was not something I knew about, and I also

06:10.880 --> 06:14.680
have only gone the official route for App Store interactions, on a Mac, doing all the

06:14.680 --> 06:16.160
normal stuff.

06:16.160 --> 06:17.160
What is this?

06:17.160 --> 06:19.160
Can you break this down for me, Mike?

06:19.160 --> 06:23.200
Yeah, so I'm not going to go into details, because I know people get all upset when I

06:23.200 --> 06:28.640
go into line-by-line iOS Swift or deployment stuff, but basically GitLab and a company

06:28.640 --> 06:32.300
called Fastlane — Fastlane has been around for a while.

06:32.300 --> 06:39.520
They are basically — geez, you have to be deep into the iOS world, but TestFlight actually

06:39.520 --> 06:41.840
was not part of Apple for a long time.

06:41.840 --> 06:42.840
Really?

06:42.840 --> 06:47.360
Yeah, they were an independent company that offered Android deployment and iOS deployment

06:47.360 --> 06:50.500
and distribution services.

06:50.500 --> 06:55.220
Then Apple bought them, and the Android stuff just kind of went away.

06:55.220 --> 06:59.800
So the beautiful thing about TestFlight is you could write — back in the day, you could

06:59.800 --> 07:05.800
write a bunch of scripts that integrated with it, and basically CI slash automate all your

07:05.800 --> 07:07.800
deployments.

07:07.800 --> 07:13.520
Fastlane is offering a much more modern slash easier version of the same thing, and now

07:13.520 --> 07:21.000
they have integration with GitLab, although I imagine they have one with GitHub, too.

07:21.000 --> 07:28.920
That makes it fairly simple to deploy your iOS testing deployments, so your beta deployments

07:28.920 --> 07:36.240
to your customer or to your internal stakeholders, simply by merging a GitLab branch, for example.

07:36.240 --> 07:39.360
Oh, that sounds pretty slick.

07:39.360 --> 07:45.360
Yeah, I mean, there's still quite a bit of work in it, but it's definitely a —

07:45.360 --> 07:46.360
Like what?

07:46.360 --> 07:47.360
What's an example?

07:47.360 --> 07:51.040
You have to generate the profiles, and you have to have a little file in there for Fastlane

07:51.040 --> 07:52.040
to pull the profiles.

07:52.040 --> 07:53.040
Oh, sure.

07:53.040 --> 07:54.040
You've got to do some integration to get their hooks in.

07:54.040 --> 07:57.840
There's some integration stuff, yeah, but it's the same thing you would be doing if

07:57.840 --> 08:01.880
you went my approach with the physical machine doing, say, Jenkins.

08:01.880 --> 08:02.880
Right.

08:02.880 --> 08:06.840
Because then it just becomes a question of how much do you not want to have to set all

08:06.840 --> 08:09.680
that up, and what's the ongoing price going to be?

08:09.680 --> 08:10.680
Right.

08:10.680 --> 08:12.400
Or do you want a physical machine or not?

08:12.400 --> 08:13.400
That becomes a big deal.

08:13.400 --> 08:14.400
Right.

08:14.400 --> 08:15.400
You want it in the cloud.

08:15.400 --> 08:16.400
Yeah, right.

08:16.400 --> 08:17.400
Exactly.

08:17.400 --> 08:19.440
Do you need this to scale, or are there benefits that you can get, like it seems like you might

08:19.440 --> 08:23.240
be able to do, of just having a physical machine that can wear multiple hats?

08:23.240 --> 08:24.240
Right.

08:24.240 --> 08:30.540
So, right now, you're baiting me, but right now I'm on a Mac Mini that is our build machine,

08:30.540 --> 08:38.000
but also my podcast machine, so for the amount of native iOS development we currently do,

08:38.000 --> 08:45.140
it's easier just to have one build machine and automate that via the local machine.

08:45.140 --> 08:48.760
Certainly in the future, Fastlane could make sense, and I think, in fact, if you don't

08:48.760 --> 08:52.840
have access to a Mac OS mission, although it's going to be hard to generate the profiles

08:52.840 --> 08:59.200
if you don't, but if you can somehow generate the provisioning profiles and the certificates,

08:59.200 --> 09:02.160
then plus the GitLab integration is definitely a great choice, and in general, if you were

09:02.160 --> 09:07.160
a larger team than what we are at Team B, it's a great choice.

09:07.160 --> 09:08.360
That made me think the same thing, right?

09:08.360 --> 09:11.240
Like, if you can have a couple people, one person maybe, who kind of handles all that,

09:11.240 --> 09:14.960
gets it set up, and then the other team members, they might not need to care about it at all.

09:14.960 --> 09:16.000
It's integrated into CI.

09:16.000 --> 09:18.800
They just can push some changes and have it go through the pipeline.

09:18.800 --> 09:19.800
Right.

09:19.800 --> 09:20.800
So, right now, I am the CI.

09:20.800 --> 09:26.880
I pull the few native iOS things we have, and I build them, and bombs are on call.

09:26.880 --> 09:34.520
I have a few scripts I have, but it's all local, so again, at scale, I think this makes

09:34.520 --> 09:35.520
a lot of sense.

09:35.520 --> 09:36.520
Yeah, that really does.

09:36.520 --> 09:37.520
Interesting.

09:37.520 --> 09:42.000
Well, we'll have to see, audience members, dear audience members, if you're using it

09:42.000 --> 09:43.000
or have other solutions.

09:43.000 --> 09:44.720
Well, we'd always love to hear it.

09:44.720 --> 09:48.720
We'd always love to hear about it over at coder.show slash contact.

09:48.720 --> 09:49.720
All right.

09:49.720 --> 09:53.000
I'm going to hijack the show just for a little bit here.

09:53.000 --> 09:54.640
We're going to call this maybe the Clojure Corner.

09:54.640 --> 09:59.360
Really, it's not about Clojure at all, but as you know, I'm a little bit fascinated.

09:59.360 --> 10:03.040
One thing that's recently been happening in the Clojure world is that Alex Miller, the

10:03.040 --> 10:09.960
wonderful developer who works at Cognitecht, mostly on Clojure itself, well, he had some

10:09.960 --> 10:16.400
of his tests posted on Reddit this week, which, as he says, was unexpected.

10:16.400 --> 10:19.980
And I thought that was kind of interesting because tests, well, they're important, obviously,

10:19.980 --> 10:24.240
but there's a lot of different approaches, and too often, I think, we end up in a world

10:24.240 --> 10:30.120
of like tests are good, you need tests, write tests, but then we stop talking about it.

10:30.120 --> 10:35.360
So in this case, the tests in question are checking, among other things, that maps returned

10:35.360 --> 10:40.160
by spec, which is a validation library for Clojure, which we can and should get into

10:40.160 --> 10:41.160
another time.

10:41.160 --> 10:43.860
Basically, it's returning some maps, right?

10:43.860 --> 10:49.160
But the key point here, what I want to talk about today is you might not always care to

10:49.160 --> 10:54.980
validate every attribute, and more importantly, you often don't want tests to fail when you

10:54.980 --> 10:56.240
enhance something, right?

10:56.240 --> 11:01.160
So this is often stuff like reporting information about a data structure, how it conforms, what

11:01.160 --> 11:06.440
the internal structure of it is, and if someone adds additional attributes, more information

11:06.440 --> 11:09.400
to that map, which is generally a non-breaking change, right?

11:09.400 --> 11:12.280
I'm talking about adding a key to a map, so you still have all the other keys, nothing's

11:12.280 --> 11:13.720
been removed.

11:13.720 --> 11:18.520
Having tests break due to just non-breaking, accretive code changes, not only is it a drag

11:18.520 --> 11:22.920
on progress, but if you're like me and Rich Hickey, the creator of Clojure, it just bugs

11:22.920 --> 11:26.120
you on a philosophical level.

11:26.120 --> 11:30.600
In this case, also, there's kind of an interesting little custom function called submap as a

11:30.600 --> 11:35.460
concrete example, which rather than checking for stricter quality in your tests, it just

11:35.460 --> 11:39.480
verifies that whatever you're looking for is a subset of what you get, right?

11:39.480 --> 11:43.080
So you can set up, like, I want to validate that this little chunk of data is always in

11:43.080 --> 11:47.880
the data I get, but if you get extra data, you might not need to break all your tests,

11:47.880 --> 11:51.480
and what it immediately makes me think of is all the tests I've seen so many times where

11:51.480 --> 11:54.360
you basically just end up with two lists of stuff, right?

11:54.360 --> 11:59.260
Like, in your code, you do a bunch of stuff, and then your tests, you just write exactly

11:59.260 --> 12:00.260
the same stuff.

12:00.260 --> 12:04.320
You're not sharing a data structure, so anytime you make a code change, even if it doesn't

12:04.320 --> 12:08.160
really break anything, even if a test didn't catch that it had a downstream conflict, which

12:08.160 --> 12:11.760
is ideally what you're actually trying to test for, you still got to go update things

12:11.760 --> 12:15.880
in both places.

12:15.880 --> 12:17.040
Is this a problem you've encountered?

12:17.040 --> 12:21.520
You know, brittle tests, needless tests, I see it mostly in some unit tests that are

12:21.520 --> 12:26.480
just poorly thought out, and it makes me think, what were you trying to test here?

12:26.480 --> 12:33.040
Yeah, testing has been a long-visited topic of the show.

12:33.040 --> 12:34.640
I'm surprised at your take, actually.

12:34.640 --> 12:38.440
I thought you were going to tell me that the Clojure world had solved this problem.

12:38.440 --> 12:44.240
Well, I think there is a little bit of a different culture there.

12:44.240 --> 12:45.240
TDD can be great.

12:45.240 --> 12:48.640
I'm not a particularly strict adherent.

12:48.640 --> 12:51.320
My personal philosophy is a little bit more like you just got to be thinking about software.

12:51.320 --> 12:54.400
Obviously, tests are a part of the way that you do that, and you need tests, especially

12:54.400 --> 12:55.520
for maintenance mode.

12:55.520 --> 13:00.320
In the Clojure world, because it's so REPL-driven, a lot of time REPL interactions form the basis

13:00.320 --> 13:05.360
of TDD, and then REPL interactions get refactored into tests, and that's just sort of trying

13:05.360 --> 13:10.140
to take the interactivity of development up one level, because it's just faster.

13:10.140 --> 13:11.140
So it's so funny.

13:11.140 --> 13:17.520
One of the criticisms, and I've been doing a ton of Ruby on Rails, as you know, as other

13:17.520 --> 13:23.480
Rails devs have had at me, is that I am not a 100% test coverage seller.

13:23.480 --> 13:27.720
I test things that are like, and people who have been long-time listeners know, I test

13:27.720 --> 13:35.440
things that are like algorithmic or basically code that's complex and quote-unquote mathy.

13:35.440 --> 13:36.640
We're computing some value.

13:36.640 --> 13:41.720
Keep in mind, we mostly work in the aerospace industry, so, you know, things that are-

13:41.720 --> 13:42.720
Right.

13:42.720 --> 13:44.440
You implemented some real algorithms here that you need to validate.

13:44.440 --> 13:45.440
Right.

13:45.440 --> 13:49.360
And you want to make sure that when you deploy something new, they don't blow up on you,

13:49.360 --> 13:50.360
right?

13:50.360 --> 13:52.520
Or even like inventory control systems, same thing.

13:52.520 --> 13:56.920
You want to make sure that you're always making sense.

13:56.920 --> 13:58.840
Let me kind of sharpen that point.

13:58.840 --> 14:03.360
I do not actually believe in UI testing in terms of automated UX testing, and I'll just

14:03.360 --> 14:05.960
stop there and say, what are your thoughts on that?

14:05.960 --> 14:06.960
Hmm.

14:06.960 --> 14:13.240
I mean, I want to test as much as possible, but I think you do need to consider, and speaking

14:13.240 --> 14:17.120
to your 100% test coverage thing, you do have to consider return on investment because everything

14:17.120 --> 14:23.800
costs time, especially in the business world, and it's just going to always be a value tradeoff.

14:23.800 --> 14:27.520
So I do see use in good integration tests.

14:27.520 --> 14:31.320
They're often harder to make and more of a time suck, but if you can validate things

14:31.320 --> 14:36.300
are really working in as close to the real world as you can get, then I like that.

14:36.300 --> 14:42.120
But UI testing can be pretty tricky.

14:42.120 --> 14:44.520
Like emulating clicks and taps and things like that.

14:44.520 --> 14:46.080
That's what I'm talking about by UI testing.

14:46.080 --> 14:47.080
Yes.

14:47.080 --> 14:48.080
Right.

14:48.080 --> 14:51.740
And I think part of that too is just because like UIs are so stateful.

14:51.740 --> 14:56.860
That's kind of why I'm a fan of some of the React style of development and the way Clojure

14:56.860 --> 15:00.560
approaches that too, where it's a little more functional and you've got data and then data

15:00.560 --> 15:05.200
fed to views that just returns whatever you're going to render out to the page so that you

15:05.200 --> 15:08.880
can hopefully have like a little bit less state or like one central state.

15:08.880 --> 15:13.600
I know a fun example of this was for a while, the CircleCI interface was written in Clojure

15:13.600 --> 15:17.320
script and so they just had one big ball of state that was everything.

15:17.320 --> 15:22.200
And so if you got into a funky state in the UI, you could just hit, you can just serialize

15:22.200 --> 15:24.360
that out, save it or do a bug report.

15:24.360 --> 15:28.700
And then when you're going back to go troubleshoot that, all you needed was that one little blob

15:28.700 --> 15:33.000
of state loaded in and then the entire thing is exactly back to where your user had the

15:33.000 --> 15:34.000
problem.

15:34.000 --> 15:35.600
So I think there are some steps you can do to minimize that.

15:35.600 --> 15:40.440
You'll probably need either still like humans looking at stuff to validate that it still

15:40.440 --> 15:43.000
looks good or some weird little thing didn't break it.

15:43.000 --> 15:45.060
And it is also, that's where it gets really complicated, right?

15:45.060 --> 15:47.480
Because there's just so much difference.

15:47.480 --> 15:50.800
This is maybe where Chrome dominance would help on the flip side, but it's probably still

15:50.800 --> 15:52.040
not worth it.

15:52.040 --> 15:55.720
So it's so funny though, you mentioned, you kind of glossed over it as just like a matter

15:55.720 --> 15:57.480
of fact, but statefulness.

15:57.480 --> 15:59.240
I actually think that's a huge deal, right?

15:59.240 --> 16:05.980
Like I've written a bunch of Kotlin, geez, it must be about seven or eight months ago.

16:05.980 --> 16:09.720
And I found just the way I ended up writing Kotlin was much more functional.

16:09.720 --> 16:10.720
Does that make sense?

16:10.720 --> 16:11.720
Like...

16:11.720 --> 16:13.440
Oh yeah, absolutely.

16:13.440 --> 16:19.600
And that, and I wrote, I had 100% test coverage on that only because it was, by being functional,

16:19.600 --> 16:25.120
it was so much easier to conceive of and write those tests in a relatively trivial amount

16:25.120 --> 16:31.040
of time where my normal Rails code, I can test the algorithms, but the UI changes more

16:31.040 --> 16:32.040
than the algorithms, right?

16:32.040 --> 16:33.040
I mean, that's...

16:33.040 --> 16:34.040
Right.

16:34.040 --> 16:35.040
Yes.

16:35.040 --> 16:36.040
Right.

16:36.040 --> 16:37.040
Once you've got that really solid algorithm implementation, well, unless the business

16:37.040 --> 16:41.320
needs change, hopefully that's not changing too much.

16:41.320 --> 16:42.320
But you're right.

16:42.320 --> 16:43.320
That's exactly right.

16:43.320 --> 16:44.320
Yeah.

16:44.320 --> 16:47.160
Adding a little bit more functional stuff, just item potency in general, being able to

16:47.160 --> 16:51.440
understand that functions are pure and they don't have secret hidden away state.

16:51.440 --> 16:52.440
That seems nice.

16:52.440 --> 16:55.600
But if there could be one thing where a central state store in the UI can do, instead of little

16:55.600 --> 17:00.340
tiny blobs of state hidden all over in each of your individual components, that can be

17:00.340 --> 17:03.720
complicated to keep track of.

17:03.720 --> 17:08.040
I will say too, just like Turth is talking in the IRC and stuff, I don't want to come

17:08.040 --> 17:09.440
across as against tests.

17:09.440 --> 17:11.480
And if you'd like to, do it.

17:11.480 --> 17:12.480
Tests are good.

17:12.480 --> 17:13.480
You need them.

17:13.480 --> 17:14.800
They help especially on large teams.

17:14.800 --> 17:17.760
And as always, it's about thinking about what you're programming.

17:17.760 --> 17:18.960
And tests can help you do that.

17:18.960 --> 17:22.880
It's a good way to start exploring APIs before you've implemented them and understanding

17:22.880 --> 17:24.080
what you're going to do.

17:24.080 --> 17:25.800
And it's a good way to check your assumptions.

17:25.800 --> 17:30.160
I just want to push back against the rote copying style of unit tests.

17:30.160 --> 17:34.200
And I don't know, have you ever played with generative testing, Mike?

17:34.200 --> 17:35.200
I haven't.

17:35.200 --> 17:36.200
But go ahead.

17:36.200 --> 17:37.480
And I do have another comment.

17:37.480 --> 17:38.480
But go ahead.

17:38.480 --> 17:39.480
Yeah.

17:39.480 --> 17:41.800
We should probably do a bigger segment on it.

17:41.800 --> 17:44.600
But it's a way to try to enforce invariance.

17:44.600 --> 17:49.120
I think the biggest example people use is Quick Check, which came out of the Haskell

17:49.120 --> 17:50.120
community.

17:50.120 --> 17:55.560
But the idea is, let's say you want to show something that A times B is always the same

17:55.560 --> 18:00.760
as B times A. And you could have a 100 unit test case that you do that.

18:00.760 --> 18:04.600
But another way to do it is to generate, if you can spec out what your input is, like

18:04.600 --> 18:09.600
this function takes two integers or floating points or whatever, and then have the computer

18:09.600 --> 18:13.160
be smart enough to generate you a whole bunch of inputs, throw it at your function, and

18:13.160 --> 18:17.320
then test that the outputs meet your criteria.

18:17.320 --> 18:18.320
That makes a lot of sense to me.

18:18.320 --> 18:22.040
And in fact, we should do that in a few weeks, and I will study up on it and try it out.

18:22.040 --> 18:23.040
Excellent.

18:23.040 --> 18:24.040
All right.

18:24.040 --> 18:25.040
Well, I interrupted.

18:25.040 --> 18:26.040
What was your comment?

18:26.040 --> 18:27.040
Yeah.

18:27.040 --> 18:29.680
The only other comment I had to make is I have employed and seen, just in other people's

18:29.680 --> 18:36.440
code, a weird desire, and I'm speaking specifically about the kind of Rails community here, of

18:36.440 --> 18:39.440
writing 100% test coverage, but really shallow test.

18:39.440 --> 18:41.000
You know what I mean by shallow, Wes?

18:41.000 --> 18:42.560
Yeah, I think so.

18:42.560 --> 18:44.920
It's not really testing anything deep.

18:44.920 --> 18:45.920
It's not poking.

18:45.920 --> 18:46.920
You're right.

18:46.920 --> 18:50.260
It just tests like, yeah, is it of type string, right?

18:50.260 --> 18:51.260
Those kind of tests.

18:51.260 --> 18:52.260
Yeah.

18:52.260 --> 18:53.260
Yeah, exactly.

18:53.260 --> 18:55.280
It's kind of like the classic example of testing reverse, right?

18:55.280 --> 18:58.400
If all you care about is the type, that doesn't tell you anything about what the function's

18:58.400 --> 18:59.400
doing.

18:59.400 --> 19:00.400
Right.

19:00.400 --> 19:02.640
We're implementing static compilation via unit test, basically.

19:02.640 --> 19:03.640
Yes.

19:03.640 --> 19:06.080
That's the perfect way to describe it.

19:06.080 --> 19:07.080
Yeah.

19:07.080 --> 19:08.080
So that's bad, right?

19:08.080 --> 19:10.320
If that's your version of testing, that's not good.

19:10.320 --> 19:15.600
You should be testing the actual business logic or algorithm, Wes, I'm going to look

19:15.600 --> 19:16.800
into this generative test stuff.

19:16.800 --> 19:20.120
I think we should cover it one day and you can educate me on it, because that sounds

19:20.120 --> 19:22.240
like something that could be very useful.

19:22.240 --> 19:23.240
Yeah.

19:23.240 --> 19:27.520
And I've had some people worried too, like, oh, that's like weird randomness in your testing.

19:27.520 --> 19:28.520
And that can be true.

19:28.520 --> 19:31.520
But there's also always ways that you can sort of like, if you have good, you'll probably

19:31.520 --> 19:34.520
still have some specific examples, right, the edge cases you're aware of that you want

19:34.520 --> 19:35.520
to test around.

19:35.520 --> 19:39.720
And you can often, like if they're done well, they all start with the same random seed.

19:39.720 --> 19:43.960
So you could save that seed and then always get the same, quote unquote, randomly generated

19:43.960 --> 19:44.960
test example.

19:44.960 --> 19:47.680
So it is a more robust than I made it sound.

19:47.680 --> 19:48.680
Yeah.

19:48.680 --> 19:49.680
And that's, yeah.

19:49.680 --> 19:53.720
I mean, oh, you know what, Wes, we should have a whole day on testing, I think, in the

19:53.720 --> 19:54.720
next month.

19:54.720 --> 19:55.720
I think that is a great idea.

19:55.720 --> 19:58.640
Can we commit to that on the air with no prior conversation?

19:58.640 --> 19:59.640
Done.

19:59.640 --> 20:00.640
Done.

20:00.640 --> 20:01.640
Done.

20:01.640 --> 20:04.040
So it was written, so it will be done, Ramesses the second.

20:04.040 --> 20:05.440
There you go.

20:05.440 --> 20:09.600
So moving right along, now that we've made that little commitment, while I was at scale,

20:09.600 --> 20:13.760
I did see the wonderful folks from System76.

20:13.760 --> 20:18.160
And that made me, Mike, well, that made me think of you and that new little toy that

20:18.160 --> 20:20.840
I know you have been using.

20:20.840 --> 20:24.200
The Darter Pro.

20:24.200 --> 20:30.600
So I wrote a review of the Darter Pro on DominicM.com.

20:30.600 --> 20:31.600
I like it.

20:31.600 --> 20:37.960
I think I like it more than Thaleo, actually, which they're not going to be pleased to hear.

20:37.960 --> 20:40.200
The fan noise is less offensive.

20:40.200 --> 20:42.360
The battery life is about five to seven hours.

20:42.360 --> 20:44.120
This is obviously a laptop.

20:44.120 --> 20:50.600
It's got a beautiful matte screen at 1080 by 1920, I want to say, off the top of my

20:50.600 --> 20:51.600
head.

20:51.600 --> 20:52.600
I am a sucker for a nice matte screen.

20:52.600 --> 20:53.600
Yeah.

20:53.600 --> 20:54.600
You know what?

20:54.600 --> 20:57.400
I used to not be a matte screen guy, if you listen to the back catalog, but I've kind

20:57.400 --> 20:59.400
of got taken in by the matte screen.

20:59.400 --> 21:02.080
And it depends right on your use case there, like where you're going to use it.

21:02.080 --> 21:05.800
But for something that's real portable and I might, you know, I was on my laptop last

21:05.800 --> 21:08.640
night on the light rail, so it can be pretty handy.

21:08.640 --> 21:14.960
It's got a full keyboard with a number pad, which is a little awkward because it makes

21:14.960 --> 21:19.240
the regular QWERTY keyboard kind of off-center, if you know what I mean.

21:19.240 --> 21:22.440
But other than that, the keyboard's great.

21:22.440 --> 21:25.280
It's much better than a MacBook Pro keyboard.

21:25.280 --> 21:31.720
I have a few complaints, like the microphone input jack has a red light that's constantly

21:31.720 --> 21:35.120
on, which during the day you don't notice, but if you're working late at night, like

21:35.120 --> 21:39.720
there's a giant glowing red Danger Will Robinson light.

21:39.720 --> 21:42.480
Which I guess could be, yeah, that sounds pretty distracting.

21:42.480 --> 21:50.440
The spouse approval goes much lower on that one, especially if you're working in bed.

21:50.440 --> 21:51.600
It's got an RGB keyboard.

21:51.600 --> 21:56.000
I don't care about that, though I've played with it some, but if you like backlit keys

21:56.000 --> 21:59.200
with like funky colors, God bless you.

21:59.200 --> 22:03.200
Does that also mean then that the backlighting is fairly robust, you know?

22:03.200 --> 22:04.200
You can adjust it.

22:04.200 --> 22:07.640
See, that does seem nice, that's one thing my ThinkPad doesn't have that I sometimes

22:07.640 --> 22:08.640
wish for.

22:08.640 --> 22:10.640
I mean, I just turn it off, but you can adjust it.

22:10.640 --> 22:20.600
The only other negative thing I'd really mention is that it comes with two USB 3.0 Gen 1s and

22:20.600 --> 22:26.040
one USB 2.0, which, I don't know, I would have liked to see two USB 3.0 Gen 2s and then

22:26.040 --> 22:28.000
one USB 3.0 Gen 1 ports.

22:28.000 --> 22:33.680
I know that's like a super pedantic, like, bitchy port argument, and to its credit it

22:33.680 --> 22:40.240
does have like an HDMI display port and even has a Thunderbolt-powered USB-C, so it's a

22:40.240 --> 22:41.240
great machine.

22:41.240 --> 22:46.080
I just, you know, I just point out what I point out, right?

22:46.080 --> 22:52.700
Yeah, I will say I am still, I wish I wasn't, but I do still really like having some classic

22:52.700 --> 22:57.600
USB stuff, but you're right that, I don't know, USB-C is just in such a weird place

22:57.600 --> 22:58.600
right now.

22:58.600 --> 22:59.600
Yeah.

22:59.600 --> 23:00.600
Yeah, it is.

23:00.600 --> 23:05.760
I mean, I don't mind that it's USB-A, I would just prefer, like, I don't understand why

23:05.760 --> 23:11.200
we still have USB 2.0 ports instead of all USB 3.0, especially when there's USB 3.0 Gen

23:11.200 --> 23:12.200
1 and Gen 2.

23:12.200 --> 23:13.200
Right?

23:13.200 --> 23:14.680
Mmm, that's a good point.

23:14.680 --> 23:17.880
Having said that, the trackpad is good.

23:17.880 --> 23:18.880
What do you mean by good?

23:18.880 --> 23:21.560
And you're someone who's used the top-of-the-line trackpad.

23:21.560 --> 23:22.560
Yeah.

23:22.560 --> 23:25.440
I would say it is better comparing it to the Galago.

23:25.440 --> 23:29.160
It's about the same if not better than the Galago.

23:29.160 --> 23:32.960
It's definitely better than, like, I have an HP Spectre that we use for demoing.

23:32.960 --> 23:35.020
It's better than the Spectre.

23:35.020 --> 23:39.240
It's maybe slightly worse than a MacBook Pro, if not on par.

23:39.240 --> 23:40.240
Wow, really?

23:40.240 --> 23:41.240
Yeah.

23:41.240 --> 23:42.240
That is pretty good.

23:42.240 --> 23:43.240
It's not bad.

23:43.240 --> 23:46.640
So the only, and in fact, I didn't even put this in the review, the only issues I have

23:46.640 --> 23:51.280
is that, like, YouTube screen tears a little bit on Firefox, but I think that's a Firefox

23:51.280 --> 23:52.840
issue because it happens on Mac too.

23:52.840 --> 23:56.600
Oh, yeah, probably just, like, your hardware acceleration or something about the way that

23:56.600 --> 23:57.600
you're rendering it is not quite right.

23:57.600 --> 23:59.440
There's some weird in code, right?

23:59.440 --> 24:06.840
You know, if you really want a Linux-installed laptop, I would recommend this.

24:06.840 --> 24:13.200
I have not tested the newest generation of XPS 13, but I have tested the most recent

24:13.200 --> 24:20.120
Galago from System76, and I would say if you're in the market for a Galago, if you intolerate

24:20.120 --> 24:29.200
a 15-inch screen, the Darter Pro is significantly better, the battery life alone makes it worth

24:29.200 --> 24:30.200
the bigger screen.

24:30.200 --> 24:33.480
Oh, yeah, that makes sense.

24:33.480 --> 24:34.480
What about the weight?

24:34.480 --> 24:35.480
How portable is this guy?

24:35.480 --> 24:36.480
Oh, you're looking at 3.5 pounds.

24:36.480 --> 24:37.480
Okay, that's not too bad.

24:37.480 --> 24:38.480
It's not bad.

24:38.480 --> 24:39.480
I can handle that, yeah.

24:39.480 --> 24:40.480
Yeah, yeah.

24:40.480 --> 24:48.760
I've only had some pretty beefy machines before, and it was stressing my back, so that's something

24:48.760 --> 24:49.760
I think about these days.

24:49.760 --> 24:50.760
Yeah, no, I like it.

24:50.760 --> 24:53.560
I mean, it's not like an Oryx Pro or anything like that.

24:53.560 --> 24:54.560
Exactly.

24:54.560 --> 24:55.560
Yeah.

24:55.560 --> 24:57.680
We also have one of those at TMB here.

24:57.680 --> 24:59.160
That's a beefy machine.

24:59.160 --> 25:05.600
No, it's a good machine, and mine is spec'd up, so the battery life, quotes I'm giving

25:05.600 --> 25:13.560
in the article, are five to seven hours with an i7 and upgraded to 16 gigs of RAMs and

25:13.560 --> 25:15.080
an NVMe drive.

25:15.080 --> 25:21.040
I would also recommend, if you're going to buy one of these, do not skimp on the NVMe

25:21.040 --> 25:22.040
drive.

25:22.040 --> 25:26.800
It's a huge performance increase, especially if you're a dev and you're doing a lot of

25:26.800 --> 25:28.360
compiling and linking.

25:28.360 --> 25:31.080
NVMe is just such a blessing.

25:31.080 --> 25:32.080
It really is.

25:32.080 --> 25:35.760
We thought SSD was good, and now it's just the whole new world, and it feels expensive.

25:35.760 --> 25:38.480
I've thought about that, too, when looking at laptops, but you're right.

25:38.480 --> 25:43.160
If you at all care about wait time and doing a lot of file stuff, especially building programs

25:43.160 --> 25:45.400
can often be that, don't skimp.

25:45.400 --> 25:46.400
Sure.

25:46.400 --> 25:47.400
Don't skimp on that.

25:47.400 --> 25:50.480
I do have to ask, is this review in Pop!

25:50.480 --> 25:52.680
OS, or have you installed something else on there?

25:52.680 --> 25:53.680
Yeah, it's Pop!

25:53.680 --> 25:54.680
OS 18.10.

25:54.680 --> 25:55.680
Nice.

25:55.680 --> 25:58.840
It seems like you are actually really enjoying Pop!

25:58.840 --> 25:59.840
OS.

25:59.840 --> 26:00.840
I am.

26:00.840 --> 26:01.840
The Thaleo is on Pop!

26:01.840 --> 26:02.840
18.10.

26:02.840 --> 26:06.280
The Darter is on 18.10.

26:06.280 --> 26:07.600
I love elementary.

26:07.600 --> 26:08.600
I love Pop!

26:08.600 --> 26:11.360
I've ended up landing on Pop!

26:11.360 --> 26:12.360
What is it about it?

26:12.360 --> 26:22.600
You know what, I like some of the easy stuff for installing TensorFlow, but more importantly,

26:22.600 --> 26:25.240
I just don't want to deal with drivers.

26:25.240 --> 26:31.080
This is such a stupid reason, but if elementary was an option from System76, I might have

26:31.080 --> 26:38.320
done that, but I really don't want to go and pull drivers and compile AMD drivers or whatever.

26:38.320 --> 26:40.240
I'm thinking of the Thaleo in particular here.

26:40.240 --> 26:45.440
I want it to be pre-installed and pre-configured and done for me.

26:45.440 --> 26:50.800
I am the Mac turned Linux guy, but I want it to be like a Mac, where I open the box

26:50.800 --> 26:55.480
and I don't mind installing my tool chain, but I don't want to have to fiddle with drivers.

26:55.480 --> 26:58.560
You want an operating system that's already built for and well-supported on the hardware

26:58.560 --> 27:01.840
that you're running and not having to futz with things like screen tearing.

27:01.840 --> 27:02.840
Exactly.

27:02.840 --> 27:06.000
That makes a lot of sense.

27:06.000 --> 27:15.760
Do you think, if you had a non-System76 rig, would you be tempted to install POP on that?

27:15.760 --> 27:20.800
We have a flight simulation machine here, which is an Optiplex 7050, which was running

27:20.800 --> 27:25.080
both POP and later elementary.

27:25.080 --> 27:26.080
It was fine.

27:26.080 --> 27:30.640
I just had to pull down the AMD driver and set it up.

27:30.640 --> 27:36.360
I do think, though, I'm going to stick with POP, just for convenience.

27:36.360 --> 27:37.360
Yeah.

27:37.360 --> 27:44.480
Once you find something that works, why change it, especially when you've got code to write?

27:44.480 --> 27:49.960
Speaking of unfortunate changes, we started chatting, getting ready for the show today,

27:49.960 --> 27:56.440
talking through things, and I came to realize that something had gone wrong in your morning.

27:56.440 --> 28:05.480
You were clearly stressed over some things, and it turned out to be our old friend, Googs.

28:05.480 --> 28:09.720
Back in the days when the gods were petty and cruel and Hercules roamed the earth, played

28:09.720 --> 28:13.800
by Kevin Sorbo, a deep reference.

28:13.800 --> 28:14.800
There was a social network.

28:14.800 --> 28:15.880
I don't know, Wes, are you familiar?

28:15.880 --> 28:18.760
There was a social network called Google Plus.

28:18.760 --> 28:21.360
Oh, yeah, right.

28:21.360 --> 28:26.560
It was sort of like Facebook, except no one used it.

28:26.560 --> 28:27.560
I used it.

28:27.560 --> 28:28.560
Geez, man.

28:28.560 --> 28:31.440
No, it did seem like it had a tech following, and that was about it.

28:31.440 --> 28:34.040
It was really popular with the hashtag Linux.

28:34.040 --> 28:35.040
I just want to say that.

28:35.040 --> 28:38.080
It was real popular.

28:38.080 --> 28:44.260
Through that Google Plus, there was an API that allowed authentication, even for internal

28:44.260 --> 28:46.880
Google emails, like Google for Work.

28:46.880 --> 28:47.880
Oh, really?

28:47.880 --> 28:51.680
It went through, somehow it was tied to Google Plus?

28:51.680 --> 28:53.880
Google Plus, yeah.

28:53.880 --> 29:01.760
But then the gods were cruel on March 7th, because at midnight March 7th, the Google

29:01.760 --> 29:05.360
Plus API went to Hades.

29:05.360 --> 29:07.360
Yeah, right.

29:07.360 --> 29:11.840
As they say, legacy Google APIs have been shut down as of March 7th, 2019.

29:11.840 --> 29:14.640
So I did not know this.

29:14.640 --> 29:19.480
I had to find this out the hard way, and they did a staggered shutdown.

29:19.480 --> 29:21.800
So some things wouldn't work, but some things would.

29:21.800 --> 29:23.560
I was scrambling.

29:23.560 --> 29:28.620
Now we predominantly work in Rails right now for this kind of thing.

29:28.620 --> 29:33.240
So it turned out that we're using a gem called OmniAuth.

29:33.240 --> 29:39.080
All we had to do after checking it out for a while was upgrade the version of the OmniAuth

29:39.080 --> 29:45.840
gem, change no code, just to use the non-Google Plus version of the Google Auth API.

29:45.840 --> 29:47.800
So this is kind of a PSA.

29:47.800 --> 29:53.080
If you're having authentication problems, and you are running OmniAuth, and your authentication

29:53.080 --> 29:57.160
problems are with Google, make sure you're running at least version, I think it's like

29:57.160 --> 30:00.420
6 or 0.6, however they do the versioning.

30:00.420 --> 30:04.400
Anything with a 5 or 0.5 is not going to work for you.

30:04.400 --> 30:05.400
Wow.

30:05.400 --> 30:10.640
You know, that is a dependency success story that you don't always think about, because

30:10.640 --> 30:14.560
that could have been a really painful process, requiring you to change dependencies or rewrite

30:14.560 --> 30:15.560
how some of your internal applications.

30:15.560 --> 30:17.440
Rewrite the authentication scheme.

30:17.440 --> 30:18.440
That's not simple.

30:18.440 --> 30:19.440
Yeah.

30:19.440 --> 30:23.360
And then I, you know, I have to say I was the hero of the story.

30:23.360 --> 30:27.480
My guy was crying, I would rewrite the dependency, but I'm like, I don't know about this.

30:27.480 --> 30:28.480
It's Ruby.

30:28.480 --> 30:30.640
Let's go find the gems.

30:30.640 --> 30:32.960
You should believe me.

30:32.960 --> 30:38.800
And sure enough, right there in the build notes for OmniAuth 6 was, oh, no longer dependent

30:38.800 --> 30:43.760
on the Google Plus API, now using Google authentication, and it's a clean upgrade.

30:43.760 --> 30:45.440
So that's a code radio success story.

30:45.440 --> 30:46.440
Give me my bill.

30:46.440 --> 30:47.440
Yes.

30:47.440 --> 30:50.720
Yeah, it is.

30:50.720 --> 30:51.720
I was about to say that.

30:51.720 --> 30:52.720
Like, it's great.

30:52.720 --> 30:54.280
It looks like back in January, they added it.

30:54.280 --> 30:55.560
It's in the change log and everything.

30:55.560 --> 30:58.200
So OmniAuth is a good job.

30:58.200 --> 31:01.140
Yeah, and we'll have links in the show notes for that.

31:01.140 --> 31:04.920
And I'm sure there's similar things if you're doing Django or Java, right, there's similar

31:04.920 --> 31:05.920
dependencies.

31:05.920 --> 31:10.920
I will also say just from having to do a little bit of it in the past, some about the way

31:10.920 --> 31:13.880
there's a lot of stuff Google does pretty well.

31:13.880 --> 31:19.960
But there's some about some of their APIs that I just find really unpleasant.

31:19.960 --> 31:24.760
You know, I always felt it was because originally they were a Java shop, right, like, oh, that

31:24.760 --> 31:25.760
could be it.

31:25.760 --> 31:26.760
Yeah.

31:26.760 --> 31:27.760
They did like super verbose.

31:27.760 --> 31:28.760
Yeah.

31:28.760 --> 31:31.320
And, you know, it's fine.

31:31.320 --> 31:35.840
But it's great that you can have a gem that you can rely on and hopefully abstract that

31:35.840 --> 31:36.840
thing.

31:36.840 --> 31:37.840
Yeah.

31:37.840 --> 31:43.200
I mean, that's one of the challenges of Rails, though, managing your gems.

31:43.200 --> 31:49.080
I mean, I guess it's a challenge even in like.NET and stuff because, you know, obviously

31:49.080 --> 31:54.080
you have new gets and it's always I mean, I'm curious how you approach this.

31:54.080 --> 31:57.440
It's always a balancing act, though, right, between your dependencies and your own code.

31:57.440 --> 31:58.440
Yeah, right.

31:58.440 --> 32:01.920
And these days, it's pretty hard unless you're doing something really low level or brand

32:01.920 --> 32:02.920
new.

32:02.920 --> 32:05.120
You're just going to have a lot of dependencies because half the stuff we do is basically

32:05.120 --> 32:07.560
tying different systems together, right?

32:07.560 --> 32:11.320
Yeah, basically modern internet connected age.

32:11.320 --> 32:12.320
Yeah.

32:12.320 --> 32:17.560
And so it is I think that's one thing that can take new programmers a while to learn,

32:17.560 --> 32:22.160
especially in maybe a more complicated environment is just that, yes, dependencies are great

32:22.160 --> 32:25.160
and there's really great libraries that can do a lot of the work for you or really simplify

32:25.160 --> 32:28.920
how you think about things, but you do need to actually do a little research before you

32:28.920 --> 32:29.920
go and add it.

32:29.920 --> 32:32.440
It's one thing to go try it out in a shell really quick or something.

32:32.440 --> 32:35.520
But if you're really going to start adding it into your build system and start depending

32:35.520 --> 32:39.620
on it, do a little research, dig into the code, see if you can understand it.

32:39.620 --> 32:43.080
Maybe try to estimate like, what would it take to fix a bug in this if I really had

32:43.080 --> 32:44.080
to?

32:44.080 --> 32:45.080
What's the community like?

32:45.080 --> 32:46.080
Are they receptive?

32:46.080 --> 32:47.080
Are they harsh?

32:47.080 --> 32:49.400
Do they not take feedback or criticism or pull requests?

32:49.400 --> 32:53.640
Those are all just good things to research and figure out.

32:53.640 --> 32:55.080
I agree.

32:55.080 --> 32:59.560
Just to pull it back, one thing I do really like about the Clojure ecosystem is because

32:59.560 --> 33:06.160
it is so high level and often does rely on other things from Java or other JVM ecosystem

33:06.160 --> 33:11.280
libraries, I do find that I can almost always read through the code base.

33:11.280 --> 33:15.120
Now, I might not read every little bit, but I found it very refreshing.

33:15.120 --> 33:19.880
Unlike say Java, I can usually find the parts of the code that I actually need to care about.

33:19.880 --> 33:23.480
Even if I'm new to the library, I can at least skim through it and get like, okay, it might

33:23.480 --> 33:26.160
be one or 2,000 lines of code, perhaps.

33:26.160 --> 33:27.800
But that's actually not that big.

33:27.800 --> 33:30.960
And if I had to, I could wrap my head around it.

33:30.960 --> 33:35.520
Yeah, that makes sense, right?

33:35.520 --> 33:40.600
Unfortunately, well, you're still going to need a tool to do that.

33:40.600 --> 33:45.120
And that is where we go to our next topic, which is our tool of the week.

33:45.120 --> 33:47.520
I do have to start out right out of the gate.

33:47.520 --> 33:50.000
They stole what should be our domain name.

33:50.000 --> 33:52.480
Did you notice that, Mike?

33:52.480 --> 33:53.480
I did not.

33:53.480 --> 33:54.480
What did they steal?

33:54.480 --> 33:55.480
Yeah.

33:55.480 --> 33:56.480
Well, they got Coder.

33:56.480 --> 33:57.480
Codeserver.

33:57.480 --> 34:01.840
Well, but if you see the company behind it here, they've got coder.com, which, oh, man,

34:01.840 --> 34:02.840
I mean, coder.show.

34:02.840 --> 34:03.840
Coder.show is great.

34:03.840 --> 34:04.840
Keep going to coder.show.

34:04.840 --> 34:09.520
But dang, if only they hadn't taken it from us.

34:09.520 --> 34:12.720
Oh, why are we featuring this again?

34:12.720 --> 34:14.080
I know, right?

34:14.080 --> 34:17.920
I just thought it was an interesting little case study of tooling, and I wanted your perspective

34:17.920 --> 34:18.920
on it.

34:18.920 --> 34:22.520
So, Codeserver, it's open source.

34:22.520 --> 34:28.120
It's VS code running on a remote server, accessible through the browser.

34:28.120 --> 34:30.200
What's nice is they've also got it all broken out.

34:30.200 --> 34:33.360
So of course, if you want to, you can go pay for this as a service.

34:33.360 --> 34:36.700
They'll run all the servers for you, provide you account details, you log in, use your

34:36.700 --> 34:38.400
favorite IDE.

34:38.400 --> 34:42.200
But they have a pretty easy to use little Docker container too.

34:42.200 --> 34:46.680
So if you're more like me and you're like, well, I got way too many servers running all

34:46.680 --> 34:49.360
the time, you can just pop this over there.

34:49.360 --> 34:53.680
So maybe you're developing on a Chromebook or a tablet, you don't have to worry about

34:53.680 --> 34:56.840
trying to get VS code installed on that environment.

34:56.840 --> 35:00.480
You can just use your web browser.

35:00.480 --> 35:01.480
That's interesting.

35:01.480 --> 35:04.880
It reminds me of a few years ago, we featured Cloud9.

35:04.880 --> 35:08.280
Yep, and that's exactly what came to my mind.

35:08.280 --> 35:09.840
That's exactly what came to my mind.

35:09.840 --> 35:13.920
AWS bought them, right?

35:13.920 --> 35:14.920
I think so, right?

35:14.920 --> 35:15.920
It was Amazon.

35:15.920 --> 35:20.600
And so it's clearly like, quote, unquote, cloud workspaces, excuse me while I go vomit

35:20.600 --> 35:21.920
really quick.

35:21.920 --> 35:22.920
It seems to be a thing.

35:22.920 --> 35:25.680
Now, it's not an area I really need to use.

35:25.680 --> 35:30.680
And that's just probably because I have fairly simple tooling and mostly just run on Linux.

35:30.680 --> 35:35.840
But I'm curious as someone who was just talking about renewed faith in the iPad, is this something

35:35.840 --> 35:38.760
that you have a use case for?

35:38.760 --> 35:45.600
You know, it could be good, honestly, I like this idea more for teaching than anything

35:45.600 --> 35:46.600
else.

35:46.600 --> 35:47.600
Right?

35:47.600 --> 35:48.600
Just like I like Cloud9.

35:48.600 --> 36:00.760
I think like cloud IDEs or cloud text editors are make a lot of sense for sort of an educational

36:00.760 --> 36:04.960
environment we're trying to teach like dev concepts, right?

36:04.960 --> 36:06.760
Does that make sense at all, Wes?

36:06.760 --> 36:07.760
Right, right.

36:07.760 --> 36:10.520
So you're trying to get people started programming.

36:10.520 --> 36:14.480
It can be pretty rough if you have to go through all the hurdles of carefully setting up a

36:14.480 --> 36:15.480
development environment.

36:15.480 --> 36:18.880
I mean, you can you can see that even in for experienced developers, right?

36:18.880 --> 36:22.020
You just often there's a lot going on, especially if you're picking up a code base.

36:22.020 --> 36:25.220
So I can see this right instead of having to go futz with this, you just point them

36:25.220 --> 36:29.440
give them a login to whatever system, tell them to have at it and they can explore play

36:29.440 --> 36:33.360
with use all the neat helpful features of VS code without having to deal with any of

36:33.360 --> 36:34.920
the complications of running it.

36:34.920 --> 36:35.920
Exactly, exactly.

36:35.920 --> 36:40.360
I do however, think on the iPad, you'll definitely need online accents.

36:40.360 --> 36:41.600
Yeah, right.

36:41.600 --> 36:42.600
Totally.

36:42.600 --> 36:45.800
I guess I suppose if you were running it on your local network, that would be one advantage

36:45.800 --> 36:48.620
of the open source nature of this.

36:48.620 --> 36:54.280
That would be I still feel like the way native iOS iPad app that is a text editor would be

36:54.280 --> 36:57.160
pretty valuable at least to me.

36:57.160 --> 37:01.040
Yeah, okay, that's true.

37:01.040 --> 37:04.560
So some of the advantages they listed here are, you know, Chromebook, tablet, tablet,

37:04.560 --> 37:07.880
whatever or if you're like on a Windows or Mac, you can use this and know that it's already

37:07.880 --> 37:11.120
talking to stuff on the back end of running in Linux.

37:11.120 --> 37:13.400
And of course, you might be able to preserve battery life.

37:13.400 --> 37:16.680
One thing they mentioned here is, right, all of the intensive stuff runs on the server

37:16.680 --> 37:22.280
and because VS code is electron, well, if it's just a tab in a browser, that's one less

37:22.280 --> 37:24.360
Chrome instance that's running.

37:24.360 --> 37:25.360
Right.

37:25.360 --> 37:26.360
That's true.

37:26.360 --> 37:32.500
I just had to note the reason this works so well and the reason that they can basically

37:32.500 --> 37:37.120
just fork VS code and you know, kind of patch it up to make it run in a server environment

37:37.120 --> 37:39.840
is because electron uses web technologies, right?

37:39.840 --> 37:43.560
Like we have a common base of this stuff and while it kind of sucks in some ways, especially

37:43.560 --> 37:48.440
the memory overhead, there are a lot of advantages to the speed of things because you have one

37:48.440 --> 37:49.440
toolset.

37:49.440 --> 37:57.320
I don't know, I think that like somehow web technologies are eventually going to take

37:57.320 --> 37:58.320
over.

37:58.320 --> 38:01.600
But I'm not sure that on the iPad in particular we're there yet.

38:01.600 --> 38:02.840
Yeah, that's true.

38:02.840 --> 38:08.000
And iOS is obviously a platform with really high expectations both by Apple and end users.

38:08.000 --> 38:13.040
So if you're going to do it, like you probably want to make sure it's going to be kick ass.

38:13.040 --> 38:18.360
Yeah, you really need it to be super responsive and kind of follow I think the Apple like

38:18.360 --> 38:20.640
command structure, right?

38:20.640 --> 38:24.880
Just even like keyboard shortcuts because many people using an iPad Pro are using those

38:24.880 --> 38:27.720
Apple external keyboards.

38:27.720 --> 38:29.280
So but yeah, I think this is great.

38:29.280 --> 38:33.920
I mean, I would, you know, I have a little brother West who's 11 and he wants to learn

38:33.920 --> 38:34.920
some coding.

38:34.920 --> 38:39.920
So this is the kind of thing I would definitely use with him.

38:39.920 --> 38:41.240
That makes a lot of sense.

38:41.240 --> 38:42.240
Well, thank you, Mike.

38:42.240 --> 38:43.240
I appreciate that.

38:43.240 --> 38:44.240
I've played with a little bit.

38:44.240 --> 38:45.840
I mean, I just I'm not I'm not going to use it anymore.

38:45.840 --> 38:48.160
But perhaps the audience will find it useful.

38:48.160 --> 38:49.160
That's what we hope.

38:49.160 --> 38:53.360
And you can give us feedback about it if you'd like to just head on over to coder.show.

38:53.360 --> 38:55.960
You can also find all the ways to subscribe.

38:55.960 --> 38:58.040
We're on basically all the platforms you want.

38:58.040 --> 39:01.560
We even just got a plain old RSS feed if you want to do it old school or just you know,

39:01.560 --> 39:05.360
download an MP3 like a maniac.

39:05.360 --> 39:10.200
I don't know why you do that, but but but you could you could.

39:10.200 --> 39:13.520
And of course, you can find all the other wonderful Jupiter broadcasting shows over

39:13.520 --> 39:18.960
at Jupiter broadcasting dot com dot com dot com.

39:18.960 --> 39:22.440
And if you just want more, you can't wait till the very next episode.

39:22.440 --> 39:23.640
Well, we're both on Twitter.

39:23.640 --> 39:29.580
I'm at Westpane and you're at Dumanuco.

39:29.580 --> 39:33.680
You can also find the network there at Jupiter Signal.

39:33.680 --> 39:37.400
If you want to hear a little bit more discussion of the recent JB trip down to scale, well,

39:37.400 --> 39:39.540
tune into the next Linux Unplugged.

39:39.540 --> 39:42.400
I'm sure we'll be talking about it there.

39:42.400 --> 39:58.680
Thank you all for joining us today and come back next week.


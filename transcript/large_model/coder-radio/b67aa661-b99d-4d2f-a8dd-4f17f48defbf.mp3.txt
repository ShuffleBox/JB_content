This is KOTOR Radio, episode 488 for October 17th, 2022.
Hey good buddy, welcome back to Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and the business of software development and the world of technology.
My name is Chris, and joining us every single week, and I smell a little Linux, it's our
host, Mr. Dominic.
Hello Mike.
You will all be assimilated into TUX.
So you're still, are you on the Thaleo still?
I'm on the Thaleo right now, yep.
You know, I can tell, I can almost tell there's a slight sound, it's not bad, there's just
a difference.
It's actually a step up in quality, so I like it, but it doesn't make any difference because
you record locally also.
But I can tell now when you're on the Mac, usually, or when you're on the Linux box just
by the sound of the remote connection, how about that?
Really?
It's a little, just a little slightly different, slightly different, but it's sticking it sounds
like.
Yeah, it's sticking.
You know, you never know, Apple could release a shiny tablet, you know how I am, but it's
been Thaleo and Dev1 exclusively for a while.
I am packing up my Thaleo and sending it back because I just have the review unit.
It's a little sad, it's a little sad.
I think if I were to build my perfect Thaleo, I talked about this on Love this week, I think
I might actually, although I love the Ryzen system, I might actually go for an all Intel
box, Intel 12th Gen i7 and these new Intel Arc GPUs that are actual hardware dedicated
GPUs that you plug into a PCI slot.
Have you seen these?
They basically iterated on their integrated GPU, they've made it way more powerful, it's
the same open source graphic stack, it's based on the same open source code, so it's fully,
if you have Linux 6.0 and the latest Mesa, you just plug this thing in, you've got 100%
Linux compatibility, you don't have to do anything else other than just plug it in.
And it's gameable.
I don't know if I'd compare it to a high end Nvidia or Ryzen, or I mean AMD, but it is
gameable.
It's a new era.
And like the mid-level one, it's like $280, it's not bad when, you know, the new Nvidia
stuff is $600 up, so I'm excited about that.
I think they're gonna make for some really great workstations, because you gotta give
it this, that Intel stuff is rock solid.
An all Intel system, you know, maybe it's not the absolute edge cutting performance
thing, but you know, the 12th Gen's are pretty good, and you just get, with Linux, you just
get absolute rock solid stability.
You combine that stack with something like ECC RAM, oh baby, oh, Crash would be a thing
of the past, no doubt about it, no doubt about it.
So yeah, it's a little sad to send it back, but I'm gonna box it up and then I'm gonna
think on it.
I may end up replacing my OBS machine with an all Intel Thalio, that may be my route
I go.
You're all Intel, I'm all AMD, it's like a civil war.
So would that make, yeah, I guess that would be I'm team blue, you're team red, something
like that.
I don't know.
Привет, comrades.
All right, so Sean asked for our thoughts on something going up in Canada right now.
And the term software engineer is under attack, an Alberta regulator says.
Calm down, Jordan Peterson.
You can't do this every time.
I know, it's gotta be, it must have been Peterson.
An Alberta regulator says, no, you can't just go around, slap an engineer at the end of
a developer's title and make them an engineer.
In order to be a, quote, software engineer, they must hold a permit and they must pay
fees for that right.
This is coming, I think this was started by the Association of Professional Engineers
and Geoscientists of Alberta, APEGA for short.
They asked the court to order one of the province's leading software companies known as Jobber
to stop using the term engineer in job titles and postings unless they get a permit from
the regulator.
And over in Quebec, they've successfully sued Microsoft in the early aughts to stop
them from calling their graduates of the Microsoft Certified Systems Engineers, engineers.
They can't use it.
And they gave them a thousand dollar fine, maybe, I don't know if it was per person or
in total, pretty minor fee.
But they cannot use the term software engineer without actually being an engineer and then
getting licensed and paying a fee.
And this is, I guess, happening in Alberta and over in Quebec.
And I think there is some truth to this.
I mean, I hate to be this guy, but...
Okay, be this guy.
I have participated in the watering down of the term engineer.
You know, I think we had people when I was at Linux Academy on my department's team that
were like...
Audio engineer?
Yeah, I knew you were going to go there.
Audio engineer, podcast content engineer, you know, that kind of stuff.
And I've also seen it really abused, like, you know, somebody goes and takes a couple
of basic Microsoft certifications and I don't mean to demean it because they're part of
building a career.
But, you know, Microsoft starts throwing around the term engineer pretty much out of the gate
if you learn how to manage a Windows box and now you're an engineer and you're certified
by Microsoft as such.
So I think it has been watered down, I think in part, maybe to help with wages, you know,
to help justify high tech wages and things like that.
But I'm curious, do you consider developers engineers and should we be able to use this
term without big Govy coming down and demanding fines?
So I went back when I saw you put this in the show notes.
We have literally covered, not this exact case, because, of course, the Tim Hortons
shrinkers decided to, I guess, they don't have a First Amendment per se, right?
So if you really want to hear all about this, listen to old Jordan Peterson, but I would
caution you on the newer stuff, something weird happened to him.
You know, he spent some time in Russia.
Yeah.
Yeah.
I don't know what happened.
He came back a little different.
A little bit.
I mean, I know some would argue he was always like that, but yeah.
We've actually covered this topic several times because there was a bunch of prominent.
Really?
Yeah.
Am I that old?
Wow.
Not this exact case, but there is a very prominent, particularly in the kind of older engineering
developer, I should say, community, that was suggesting that there should be some kind
of exam.
Way, way, way, are you ready for this?
2013, we were talking about this.
And one of the very prominent.NET developers in that community was hinting that there should
be, you know, this is a person who's big into, like, agile certifications and stuff like
that.
Okay.
And you and I both took a giant dump on it.
You know, maybe I've changed my mind over the years then.
I'm going to say, I think we've both kind of changed our mind because I think there's
the big difference is age.
I think this is one of those things.
You know what?
Let's talk about a prominent software engineer, Tucker Carlson, for a moment.
Everyone is familiar with his software engineering prowess.
But I was reminded, thanks, weirdly enough too, as of Reclined's podcast, that early
Tucker Carlson was a hilarious liberal, not liberal, Libertarian party boy.
Okay.
Okay.
I kind of remember him on that Crossfire show with his little bow tie.
Yeah.
Well, even before that, he was on MSNBC and he was like, I want to have like three girls.
He's like, let's drinks and girls, baby, all day long.
And now he's like, you know, the family, blah, blah, blah.
I don't like you, whatever, conservative stuff.
It's just age.
Right?
You and I were like, we were pretty hardcore on, I mean, Alex, I'm sure we'll find it.
We were pretty hardcore against this idea to like, I think some of that on my part was
straight up fear, right?
Like that I could just simply be disqualified out of my own business if they passed a law
that said you had to have the credentials.
Sure.
Yeah.
I'm going to have an actual nuanced take for once.
So part of this is just like Canada is not America, right?
In America, this lawsuit could never really happen because first amendment, you can say
whatever the hell you want, unless you say it on Twitter and then they will shut down
your business.
But that's not the government.
That's just yay.
I don't think this matters as much as people want it to matter.
I understand why to a certain mindset saying you're an engineer might sound better.
I would even avoid the title altogether because if you look at the salary wages right now,
people are hiring developers, engineers, coders, code monkeys, JavaScript ninjas, if you're
doing node apparently, and they're paying, right?
There are also tons of layoffs happening.
So we're in this weird transition state, but this is a fight that I understand why if you're
maybe super early or just like getting to that intermediate stage and things that you
feel a visceral like, well, don't screw me over reaction to, but it really doesn't matter.
Your salary is not going to be different if you're working at Dark Matter Dev Inc. and
your software engineer level two, or your software developer level two, or your code
monkey Jabberwocky level two, they're going to pay you the same because they have to compete
with everybody else.
Now, this might matter for things like Microsoft certification, right?
What is it, MCSE, Microsoft Certified Software Engineer, isn't that?
Yeah, there's a few of them, but that's one of them.
Yeah.
That might be problematic in good old Canada.
I don't know.
I'm not Canadian.
I don't know how the law works.
I'm not a lawyer nor Canadian nor am I a Canadian lawyer.
I have a friend who's a traffic engineer and she's always like dunking on me that coders
aren't engineers, sure, but it's getting close, right?
I think the question you really want to ask is should they be, right?
Should there be some type of software development that you actually have to acquire and maintain
a engineering license for?
And if so, what is that process like?
Is it like a CPA license or like an engineering license, right?
You have to take ongoing classes every couple of years.
You have to, you know, requalify.
I don't know, that gets real messy and real tough because we're not, you know, just think
of like the 20 JavaScript frameworks that have been released since we started the show
15 minutes ago.
How the hell do you properly license people?
Or is it more abstract?
Okay, well then we go the thing that I hate, the low-level algorithms and design patterns
trivia test where it's, all right, man, we have this set of data and I want you to, here's
10 sorting algorithms, pick the fastest one, okay.
It's still stupid, still impractical because it usually doesn't matter.
When I say usually one out of like 10 million times.
And we're already, I think, this is one case where shocking, Mike thinks the free market
works, right?
I think the market has worked in that, you know, Google needs those dudes and the way
Google does it is they make their interview process an incredibly arduous, painful, somewhat
maybe overboard experience.
I think you could argue too, they're paying an engineer's salary over there.
And they're paying it, right, and they're paying, well, it's, although not all engineers
make that much money, right?
So it's, I think the money argument's a little weaker, but we're already doing it.
But you know, your bank, or bank's probably a bad example, but your Dunder Mifflin up
in Scranton who just needs another Java developer to keep their damn HR system running kind
of doesn't care if you use the less efficient sort algorithm.
You know, I agree with everything you're saying in principle.
I think where I get hung up is human behavior shows us that we do place value on certain
terms and the word engineer has just kind of become one of those respected terms, kind
of like a doctor.
So it makes sense that we would have kind of co-opted its use to bring some of that
official shininess over to this new field to legitimize it a little bit.
And I think in doing so, we got away with applying engineer to one thing, and then we
tried applying it to another type of work, and then another, and now it's just sort of
anyone's an engineer, you just actually literally just put engineer in the job title, and that's
just human behavior.
Do you think it was intentional, or was it because in the 50s and 60s, like the original,
you know, software developers, engineers, whatever, maybe more so the early 70s, it
was a lot more related to actual engineering, right?
So like you were working on these circuits, you were, you know, I think, I mean, it's
just it's JavaScript's fault.
Yeah, well, there's that maybe a little bit of real basic and visual basic in there as
well.
Right.
The problem is the craft or art or I firmly I mean, this is an argument against calling
it engineering.
It is in no way a science.
Like I did.
It's just not a science.
I know people get pissy when I say that.
The reason you know, it's not a science is because there are many different ways to do
the same thing.
And most importantly, you improve over time and practice, which makes it an art.
That's how that works.
Right?
If this the very, you know, Renaissance way to think about it, but that's generally where
you go.
So I don't know, is the term developer or less offensive to you?
Well, it clearly hasn't been enough.
You know, they've clearly felt the market I'm speaking that they broadly just have felt
like because otherwise we would just work on software developer instead of software
engineer.
All right.
I'm going to fry some Klingon bacon here.
Oh, all right.
Oh, geez.
You know, the Targs have particularly tough bacon.
Yeah, we're really going to get that oil hot.
You know why it's called why it's called engineering?
I'm just going to go with this because we're all nerds.
And when it started, a bunch of Star Trek nerds were like, which which section of the
enterprise would we be?
Engineering, of course.
I'd be Scotty.
Scotty.
Right.
Yeah.
Yeah.
I guess that could be it.
I mean, I don't think there's a center circle ball of white coated nineteen sixties eyes.
We're like, right.
Hey, we'll make four hundred dollars more a year if we say we're engineers and maybe
what we're seeing up there in Quebec and in Alberta is a swing back to kind of reclaiming
the sanctity of the engineer term.
Every actual licensed engineer I know hates, hates this.
Right.
And could you imagine, though, if we did bring some sort of licensing to software engineering,
it just seems like it would stifle innovation like I wonder it would be great for me.
How does something like rust come along in this license world?
Is rust recognized by a board?
And then you can be.
You and I both know someone who would gleefully go on Twitter and say that if you are not
a licensed rust engineer, then you are not a real developer.
We know this dude.
It's not me.
Yeah.
Linode dot com slash coder Linode makes the cloud simple, affordable and accessible to
anyone at any skill level.
And when you go to Linode dot com slash coder, you'll get one hundred dollars in 60 day credit
to try it out, to really get a feel for what Linode is like fast, reliable.
Those are words that come to my mind and honestly, a great deal, 30 to 50 percent less than the
hypervisors out there.
Linode's app marketplace makes it super easy to deploy a lot of popular open source software
and the next cloud deployment has been taken to the next level.
In fact, Linode seems to be working directly with the next cloud project and they just
published a really great interview and background on Frank, the founder of next cloud and next
cloud, the company and kind of how they're organized as a group.
That's not a super long read either.
So I'll link to this in the show notes.
If you're not familiar, next cloud provides like a open source productivity suite now
closer to Office 365 with their hub three that they just announced, which will be released
soon.
You basically have an alternative to the Google workplace product, Office 365, Slack, all
of that in one self hostable package that you can deploy with just a couple of clicks
on Linode.
Same with GitLab and other just absolutely essential tools, including some cloud IDEs.
Or if you prefer, which is honestly the route I often take if time allows, you can build
it up from the ground on Linode and today they have 11 data centers and throughout next
year they're going to fire up a dozen more.
They are their own ISP, so their connections are super fast.
They've got dedicated CPU rigs with AMD epic CPUs.
They've got dedicated GPU rigs with the super high end Nvidia data center GPUs in there
and they've got systems that will just be what you need to run a blog, maybe something
simple for yourself, like a gallery site, or maybe your own Nextcloud instance just
for a couple of people.
Like the whole range is there.
Our matrix server for Jupiter broadcasting is a 48 core Linode.
It's a monster.
It won't always be that way.
In fact, we started, I think like maybe a four core and we scaled up as demand needed
the same rig, the same install all the way up to 48 cores.
I think it's like 128 gigs of RAM.
It's something just astronomical mind blowing and for somebody who was super happy when
his computer had two megs of RAM and that was after I put an upgrade stick in and we're
just scale it back down once we've reconfigured it with more workers and whatnot.
It's so powerful what you can do with Linode, the tooling, the backups, the snapshots.
It's truly one of our secret weapons here at JB that lets us have the reach and the
infrastructure of the billion dollar companies when we're just a small little bespoke podcast
shop.
So go try it for yourself.
Go try it for your business and go get that $100 linode.com slash coder.
So the internet's pretty upset this week because it seems with a little bit of tweaking, you
can quote block public code that copilot emits and what you end up with, surprise, surprise,
seems to be quite a bit of copy written code when you change that setting.
And this was noticed over, I don't know, was it the weekend by Tim Davis on Twitter and
he writes, with at GitHub copilot and the public code block setting, it now emits large
chunks of my copy written code with no attribution and no LGPL license.
For example, and he shows a simple prompt with a sparse matrix transpose CS, it produces
his exact code and he has his original code in the screenshot up and then he pulls up
the copilot produced code and it's line for line identical and it seems clearly like it's
just reproducing his code without his permission.
And this has provoked the conversation that copilot, much to I think your concern, it's
actually happening.
It is enabling copyright laundering, code laundering essentially, and you can just use
somebody's copy written code and then when somebody comes after you, you can just put
your hands up and say, I didn't, a copilot gen, I didn't, I had no idea.
People are getting pissed.
Yeah, so we should define our terms real fast though, right?
So apparently public code in code pilot parlance means permissive licenses, I think that's
what it sounds like.
All right.
And when they say, when you say copy written code, we are not talking private repos here.
We are talking code that is in fact public, is in fact open source, but is under a more
aggressive license you could say, right?
Like a GPL, LGPL, whatever.
Before I get into some concerns on this, I have some really bad news for you guys.
Uh oh.
People are doing this all the time.
People who even like engineering developers, code monkeys, whatever we're calling them
now who don't involve themselves in the Linux community.
I know for a fact, routinely just steal GPL code.
Oh, oh sure.
Yeah, I, I, I, I, yeah, yeah, yeah, right.
So this isn't like a big change.
In fact, I would say, you know, your dumb sort algorithm when I, this Tim Davis guy
is actually an academic, so his stuff is real, but like you're, you're dumb, like, you know,
iterating through some dictionary.
If somebody happens to copy that via code pilot unwittingly, eh, come on buddy.
You didn't, you know, come on.
The other thing is I'm going to push back a little, even though I'm what was one of
the earlier persons concerned about this.
If you put a prompt that looks, first of all, the prompt thing in code pilot is super, super
problematic.
I agree with that.
You shouldn't be able to ask the code genie to generate you code.
It should just do it intuitively for lots of reasons.
One, if you do it intuitively, it looks at your own code first locally, which code cohesion
is the thing you want that it's good for you.
It's good for your organization.
End of rant.
But if you, you know, string together a prompt intentionally trying to get your code back
and succeed, that's a little, that's a little sus as the kids would say, right?
That's a little, I mean, fair point.
You've made your point, but you've made your point, you know, in the way that lots of lawyers
make their point that if the glove fits, you must acquit.
And if Wookiees live on indoor, like it's a totally contrived argument.
What about Jeremy Saller's argument that you could basically use this for illegal source
code laundering?
That's just automated by GitHub is that you could just literally find any piece of code
you want under an incompatible license, and then you just keep probing copilot until it
reproduces it.
And then you have plausible denied ability later.
Now this is a way to kind of copy that GPL code.
Like you were saying, people do already and put it in there like, you know, close source
company app or whatever operating system.
But now you can do that with this tool and also have legal deniability.
So it's like, it just makes it even easier to get away with it now.
Okay.
So what I would say generally is that there's a lot of overheated takes on this.
And I think that's a little silly calling it code laundering is, uh, one of the things,
so this is a little dangerous territory that I think pushes people away from the FOSS community
is the more militant aspects of it.
People aren't just running around looking to rip off, rip off your open source project.
They're doing it by accident because either they don't know, or in, I guess, very, very
few cases, it's a business decision made by some startup who I hate to break it to you.
But when you sue them, they're probably by the time the lawsuit hits a judge, they'll
probably be bankrupt for other reasons, right?
So this is like the biggest tempest in the littlest teapot.
And I know there's going to be a visceral reaction to that because I understand the
people who've truly philosophically believe in FOSS for its own sake.
This is like, you know, the Virgin Mary being the centerfold and playboy, but not only does
this not matter, to be honest, reading some of these takes put me off.
It's one of those things that every time I come into this community, I kind of get like,
all right, you guys need to like have a shot of reality.
Most code that I've seen code generate is actually bad.
I'm just saying like, it's not good.
So if some super, you know, I'll get accused of gatekeeping here, but super like newbie
person who just came out of a boot camp wants to rip off some code I have in a public repo
or a gist and just like try to shoehorn it into their project, what would you like me
to do?
Should I sue them?
Should I sue GitHub?
I mean, I'm pretty sure GitHub has in that EULA that you indemnify them.
So here's something I've noticed recently.
And all of this is prefaced with I think Twitter is pretty much a dumpster fire.
And in all of these cases, if people just stayed the fuck off Twitter, they would have
a lot easier simpler life and a lot less stress and things would be a lot smoother professionally.
And you know, an example of this is Hector Martin, who I have a lot of respect for because
Hector has led the charge on porting Linux over to Apple's M1 hardware and the Asahi
Linux project has incredible success.
But Hector is also involved in this culture of like, got to have a hot take.
And it seems GitHub has entered this size and territory now where every single action
GitHub takes.
Pun.
Wow.
TM.
Action TM.
Yeah.
Yeah.
There is both a massively positive reaction and a massively negative reaction.
And GitHub is so large that when they do something, anything, they end up touching things with
negative consequences.
And so on October 14, GitHub tweets, this handy action flag issues and PRs that go untouched
for a certain amount of time.
Try it with your repo today and start closing out those old stale issues.
And it's an action that, you know, you could set an X amount of time and it will go through
and close certain issues and PRs that have been untouched.
So it's an issue of janitor effectively.
Yeah.
Hector Martin quote retweets that don't do this ever.
This is insulting and disrespectful to your users.
Everybody is entitled support from volunteers and FOSS projects and they absolutely do deserve
not to have the issues they took time to file actively thrown away.
If you haven't fixed this bug, it stays open.
This then kicks off a conversation that between Hector and other people that essentially devolves
into if you use this action, you hate free software and you hate free software users.
And it goes from like, you know, like here's the thing, here's a perfectly reasonable way
to tweet this.
You could tweet, hey guys, here's a suggestion, you know, quote retweet and say, in my experience,
this actually can discourage future contributions.
You might want to consider not using this.
But the reality is every project is unique.
Everybody has different use cases because you could argue that also in a free software
project, people open up a lot of bogus PRs and a lot of bogus issues that the project's
never going to touch and they pile up and they pile up and they become overwhelming
and demotivating to the developers because they have hundreds of open issues that they're
never going to touch, but they don't know what to do.
Like we have a small GitHub for Jupiter broadcasting and that's already come up a couple of times
as like, well, what do you do with these issues that don't really fit here?
They're not really a problem.
They're more of somebody's opinion.
Like, what do you do?
Do you just close it?
Do you say thanks for your contribution, then close it?
Do you just let something come along and clean it up?
Like there really is never a right answer.
And so when you go in so hard and so hot on these takes, I can't help but lose respect
for somebody a little bit because it's just, you boil it down to this sort of like, don't
do this ever.
And it's like, well, wait a minute.
Now that's just never the right recommendation.
It's funny because, you know, we follow many of the same people on Twitter.
I also follow this very large, I would say larger than the kind of more experienced FOSS
developers we're talking about, community of, love you guys, but super newbie developers
that have just come out of bootcamp.
And they love co-pilot.
Do you know why?
Because they literally don't know how to do that iterate through the dictionary thing
I was joking about, right?
And I don't know, we always talk about accessibility and not, you know, quote unquote, gatekeeping,
which is a term I fricking hate.
What is that, so as soon as you slap like a license on it, I also don't think you should
wantonly violate open source licenses.
I don't, but the idea that this wasn't going on before co-pilot and the idea that the answer
is to codify some militant force of angry senior developers who are going to scold you
like you're in a British boarding school seems stupid to be honest.
It seems really dumb because you know what the biggest threat to open source projects
is on average?
Not being, bringing enough people in to maintain them over the long haul.
Not a problem if you're the Linux kernel, sure, because everybody, you know, that's
prestige and you have big money behind you.
But I'm not sure that our response, and I truly believe that code pilot is being used
by a lot of these junior just out of bootcamp devs as a crutch and maybe that's not good
for their learning.
Maybe it is.
I think we're going to need a couple of years to figure that out, but regardless of whatever
mistakes they may make, I don't think having, you know, an openly hostile kind of honestly
condescending DBAG reaction is the way to go.
I feel bad because I like some of these people, and I used to do a lot of this angry crap
on Twitter and it never gets you the result you want, I would say.
Go there to get a free personal account for up to 20 devices and it's a great way to support
the show.
Tailscale is a zero config VPN.
It'll get on any device in like minutes.
It's impressive.
It'll manage your firewall rules and it works from anywhere.
Devices connect directly to each other using WireGuard's noise protocol.
So it builds you a flat mesh network with the absolute best VPN in the business.
And you can quickly and easily create a secure network between your machines.
I'm talking servers, VMs, iPad, Android phone, Raspberry Pi cluster, a single Raspberry Pi,
you name it.
And Tailscale will manage the firewall.
It'll take care of the NAT if you have it or even carrier grade double NAT, it even
manages to work with that.
And Tailscale will support DNS in that flat network and they just announced a partnership
with NextDNS.
So now you can put a DNS resolver using NextDNS in there or you could use something like Pi
Hole or just straight up bind.
It'll let you choose exactly how you want to manage it and then you can do name resolution
for all your machines in the Tailscale network.
And there's Tailscale Send which is like Airdrop but for all of your machines that have Tailscale
including your Linux boxes of course.
There's things like Tailscale SSH that helps you manage your SSH keys.
You log in with your Tailscale credentials.
It's powerful stuff and it's surprisingly simple to get going.
And you can use it for free up to 20 devices when you go to tailscale.com slash coder.
This is truly one of those tools that I advocate in my personal life to my friends and my family.
Literally this weekend, I was getting my dad set up with Tailscale.
I'm surprised I hadn't done it earlier.
I just hadn't had a chance to see him.
Now he's got it set up though.
Go try it out.
See why I love it.
See why everybody around us, everyone at JB uses it, tailscale.com slash coder.
So the Wall Street Journal and Business Insider have been hitting Meta week after week on
a scheduled attack.
And I've grabbed a couple of pieces because they're just eviscerating.
The first one that I noticed Meta sunk 15 billion dollars building the Metaverse.
Where did the money go?
They say that precise details of where the money has gone remain fuzzy.
Some experts express disappointment that Meta and the updates that Meta announced last week
with their Meta keynote, which I watched parts of.
The biggest thing they announced was legs for avatars and the new Quest hardware.
Which is not even, I don't even have a tinge of desire to buy.
And we're still using the Quest one.
We just used it this weekend.
We really enjoyed it.
But I don't even have the slightest tinge to buy the $1200 Quest hardware.
So they are kind of a disappointment in that regard.
And then next, this one is super damning, I think.
Most Metaverse users don't even last a month.
Internal documents show that Meta's Horizon Worlds platform is struggling bad to retain
users.
This is the kiss of death for these platforms.
So if you can get the hardware, you know, like you can maybe pick up a Quest one now
for $400, most Metaverse users don't return to the Horizon Worlds platform after the first
month of usage.
They are losing users.
So people buy the hardware, and I have to say, that is absolutely the way it worked
for us.
The very first thing my kid wanted to do when I gave it to my oldest is he wanted to check
out the Metaverse.
He checked it out for one night.
I don't think they've ever gone back.
My middle child said she checked it out for one night, and then she's never gone back.
They'll play Beat Saber, you know, they'll do that stuff.
Metaverse sucked for them though.
What are your thoughts?
I don't know.
This is exactly what my experience was.
I mean, I have the Quest as well.
I think I went in the Metaverse for a whopping 10 minutes, then I went back and fought Darth
Vader.
I apologize.
I don't remember the name of the game, but it's, I mean, I'm sure if you have a Quest
and you listen to the show, you've probably fought Darth Vader too.
That is good times.
But then I was like, okay, let me buy this other game.
It was garbage.
My stepdaughter, honestly, it looked like she was taking some sort of seizure, but she
did the Beat Saber game to Lady Gaga quite a bit until she like almost busted her ass.
That pretty much put an end to that.
And it is sitting in my closet, I joke you not, laying wrapped in my coderly robe.
Something Meta about that actually.
Yeah, I don't, I don't know.
I know you and I talked a lot about this being for like virtual meetings or virtual events.
I don't, I don't know that I could actually tolerate wearing it for more than like 15,
20 minutes.
Yeah.
Yeah.
This is definitely not the one, right?
You know, when I see people who have stuck with the Quest, like they use it actively,
they've replaced the headgear stuff.
They've replaced the straps.
They've added a ton of stuff to make it more comfortable.
Part of the problem is, is that there is a heavy duty set of lenses and a smartphone
on the front of this thing.
And so it's pulling down on your face constantly.
And I already am getting what I call a tranche in my hair, which is a real tragedy.
Oh yeah, from headphones.
Yep.
From the headphones and from my CPAP.
So I wear a strap all night that goes in the same place my headphones do.
And then I wear headphones all day.
And then when I play them, when I play on the Quest, I'm putting a strap on again.
And so I get this tranche.
It's like I'm basically, I have a strip of balding in the center of my head.
It's just the hair has parted like the ocean from straps all the time.
And so like the last thing I want to do is put another strap on.
It's just, it needs to be a lighter device and it needs to be more comfortable than I
could see it.
I could see it.
I still love the idea.
The one thing they touched on more in their more recent keynote, to back up just a moment
to kind of set the context.
You remember how we talked about recently, the first couple of Apple watches, they really
hadn't figured out fitness and then they really honed in on fitness.
I feel like maybe they're going that direction with the Quest and home offices and you know,
work from anywhere setups where you have an awesome virtual office and because they made
a couple of references to how they're putting a lot of work into a new virtual office space
where they're creating their own first party app.
You have a virtual office, you pull your desktop screens in and you can do conferencing in
there as well.
They made a reference to down the road.
Their goal would be your entire computer is in that Quest headset and I actually think
that could work.
So you put, you know, it's powerful enough.
I mean, imagine if you had, you know, iPad Pro hardware in there.
You put that thing on, it is your entire computer so you don't need to like bring in the screens
from your laptop or your desktop.
It has all your screens.
It has all your apps and you just put it on and you're in your perfect workspace wherever
you're at and you and I played with this a little bit and it was early days when we looked
at it, but if somebody like Meta or Apple really focused on that idea, I think that
could be the killer app like fitness was the killer app for the watch because that with
work from home and work from anywhere because work from home is really just work from the
internet and so if you could like for me, I could be sitting in my passenger seat of
the RV.
I put that headset on, boom, I'm in my office.
I've got all my screens.
I've got all my apps.
I've got all my messages in their current state.
That sounds super powerful to me and I can't be the only one that would use the crap out
of that.
Yeah, I don't know.
Yeah, I know.
I agree.
It seems, it does seem, it seems just as sketch as it did two, three years ago.
I feel like for the last three to five years, the industry has been searching for the next
new thing, right?
The next mobile, the next iPhone, whatever it is, and these are all solutions desperately
searching for a problem.
Like I work in a home office.
It's fine.
Yeah, although as homes get smaller and we all get packed into smaller and smaller Japanese
style apartments, maybe you don't have room for a computer desk.
I honestly think you and I will live to an age where the computer desk is looked at as
like those antique TVs that were like an entire credenza.
I think that's how we'll view the computer desk and the idea that you had a room that
had a desk with screens that you just sat at all day will look archaic and well, no
wonder everybody was so overweight.
That's I think honestly where hopefully by the time you and I are dying, that's how the
world will look at computer desks.
Well, but isn't this what we've been hoping for for a long time, right?
The Star Trek tablets.
I mean, Microsoft is the closest to what I think is actually going to happen.
They're just Microsoft and you know, are cursed to never succeed in the consumer space other
than Xbox.
Right?
Yeah.
You know where the HoloLens is alive and well?
JPL.
When you walk the JPL campus, which I had the opportunity to do recently, they have
HoloLens.
They're kind of like QR codes, but more complicated throughout the campus.
So that way you can sync up your HoloLens to different areas as you're walking the JPL
campus.
Yeah.
And I think of just like the surface, the idea that your main device, I mean, most of
the time I'm not working at my Thale home, I'm working on the Dev one because you hit
the nail on the head.
The idea of just sitting at a desk and like in my case, my bedroom, you know, and being
totally locked in is not conducive to the new world of work from home when you have
kiddies running around.
Yeah, it's not conducive to flow and it's not good for the body.
And now that I'm getting old, it's like I notice that if I just work a few extra hours
a day, so say, so I've been staying at the studio since last Coder because I'm getting
some work done on JOOPS and I pick her up after today's episode.
Because I'm here, I work longer.
I work basically from like six a.m. to like six thirty seven p.m.
And I notice that my RSI is significantly worse just by adding a couple of hours more
to my day or just consistently working longer.
Like it's not unusual for me to work those hours, but maybe it's unusual for me to work
those hours like seven days in a row.
And as I do that, I can feel my hands are starting to hurt.
It's my my body is just getting old.
I got to take more breaks and I got to move about more.
And I think part of the way to do that is using different equipment and working in different
work positions.
So I got to wrap my head around like, what is the best tool when I want to do this kind
of thing and where should I do that from?
I think I'm going to spend a little bit of time this winter kind of figuring that stuff
out just to kind of try to habitualize a new routine of working.
And what I'm hoping for, although who knows, is sort of like train myself like a dog.
Like when I'm in this area and I'm using this equipment, I'm doing this task.
And so maybe I get into flow a little bit easier because it's like I'm training my body,
my mind, this place, this equipment, these apps go, you know, I could see it working.
I don't know.
Why not?
If you can work from the Internet, you can work from anywhere.
Well, unless you have a data cap.
Yeah.
Yeah.
Oh, man.
Let's not forget about Comcast.
Or like, you know, technical issues like this last road trip was just horrendous.
Or it's, you know, three months out of the year in Florida.
Yeah.
Ask not what your podcast can boost for you, but what you can boost for your podcast.
We got some boosts into the show this week.
Thank you, everybody who boosted in.
We do just select some of them to come onto the show, but we read all of them.
I appreciate all of them.
And our first one came in from Soham with nineteen eighty four sets.
Hmm.
Hmm.
I see what you did there.
Boost.
He says every episode you all get so close to realizing capitalism is doomed by definition.
Come on over to the red side.
Do we?
Is that what we do?
I don't know if I agree with that.
I feel like we recognize that it's sick.
It's it's definitely sick.
I don't know what else is doing so well.
I like how we have a communist underground that listens to the show.
I know.
I know.
It's really kind of it's very Dostoevsky.
It's it's like it's it's kind of perfect, isn't it?
We appreciate you, comrades.
Yeah, we can we can reach across to all sides.
Works from home boosts in with a thousand sets.
B-O-O-S-T. Regarding Chris's uniform, I have two words for you.
Shoulder pads.
Yes, it's nineteen eighties, nineteen eighty four.
It's perfect.
You know, they're going to come back, right?
You know, they're going to come back.
So let's just get ahead of the trend.
So now that now that I am back from the road trip, I have been considering this a lot.
I'm giving it some thought.
I've been looking for where I can source stuff.
So I am beginning the process of figuring out the uniform.
Oh, my God.
Yeah, it's happening.
It's it's happening.
Optimus Gray boosts in with twenty forty eight sets coming in hot with the boost.
I'm boosting Coder because this has to do with Chris's wardrobe and uniform.
Jesus Christ.
Velcro, guys.
OK, let me say Velcro sleeves and upper left chest.
I mean, maybe you could wear the same shirt but have Velcro patches for luck.
Oh, my God.
For Coder and for self-hosted.
That's great.
Said I'd buy a self-hosted Velcro patch all day and then the Bitcoin dad talks.
You can wear a patch for that show.
This is a great idea.
It's just one shirt with different Velcro patch patches depending on the show you're
doing.
That's I mean, that means we have to do it.
We'd have to launch a whole patch line investigation.
You know, you'd be like the Thaleo of shirts.
You have all the different face plates.
Also keep keeping in with our 80s theme because now Velcro is back.
OK.
Yeah.
Right.
Yeah.
Right.
I mean, there's something to this here.
Shoulder pads and Velcro and patches.
John eight came in with I think our biggest boost of the episode with seven thousand sets.
Seven thousand for the seven percent interest rate.
Ouch.
Yeah.
And then CPI was up since we got together again.
Every seven days.
Oh, it's bad.
It is something, man.
We are watching some incredible times.
And also, it really shows you just how long all of this stuff takes to work its way through
the economy.
Right.
Because the Fed has basically been hawkish since November of last year.
We're almost a year now in a hawkish action by the Fed.
And inflation is still increasing.
Hey, question, if you go to the unemployment line, you say you're an engineer or developer,
which is better?
Might be something to think about.
Yeah.
Think about that, everybody.
Bond boosted in with one, two, three, four sets to love the truthful take on crypto.
That's right.
No B.S. here.
By the way, since we've been live, top of Hacker News or at least it was a half hour
ago, former FBI director says they actually loved crypto the whole time because it was
far easier to track than real money.
One hundred percent underscored.
Everybody that tells you that like Bitcoin is great for cybercrime and criminals has
no idea what they're talking about.
Every single transaction is traceable on the block chain, especially if you're using a
centralized wallet, kids.
Yeah, that's.
Yeah.
Well, and just about every Bitcoin you buy today, unless you use something like Robo
stats is it's tracked from the moment you buy it.
They have your name, your ID, your information.
When you buy that Bitcoin, they know that address is associated with your identity.
The exchanges will hand that over immediately to the authorities when they want it.
There is the most private, secure, untraceable way to pay for crime is cash, art, precious
metals.
And that's truly what the criminals use.
They don't use Bitcoin, Monero potentially.
But the value of Monero is so low that you and the liquidity of Monero is so low that
you can't move really anything serious.
You can't do like a big drug deal in Monero.
You know, I guess that depends on your definition of big, but there's just not enough.
There's also not a lot of liquidity in crypto.
It's not a huge market.
So you can't move millions of illegal dollars.
And if you did, it would fundamentally shift the price.
Like the entire community would notice if like 10 million dollars of illicit funds move
through the Bitcoin network and it would be so obvious and it would be so traceable.
It's not what you want to use for illegal activity.
So this is your PSA.
If you want to join the heights of organized crime, as Chris and I apparently have, buy
some Van Gogh.
There you go.
In cash.
Hunter's got pictures.
He'll sell.
He takes diamonds of payments.
I joke, but that does give you a little insight into how the elite do that kind of business
off the record.
It's fascinating stuff.
If you put the political stuff aside, it's fascinating.
Just a couple of thank yous out there.
We got 2048 sats from our 30s.
He says, sending in some thanks with the sats he earned, just listening to podcasts in fountain.fm.
And we've got a classic row of ducks from Mr. Quackers, Quacka Wacka.
It's a treasure.
Yippee.
Coming in once again.
We see you out there, Mr. Quackers and appreciate you appreciate everybody who boosts in.
You can go get yourself a brand new spanking new podcast app and new podcast apps dot com.
These are podcasting 2.0 compatible along with the boosting.
There's a bunch of other great 30 other fantastic features that a really brilliant, really fast
moving community are developing.
It's really exciting times.
We talk about it actually a lot on office hours, if you're curious, office hours, not
here.
So I try to get it all out over there so I don't fill these shows up with something I'm
just so super excited about.
I think it's just really time the podcast industry had some improvements that were done
decentralized that aren't tied to Apple or Spotify.
It's a movement that you can join by upgrading to a podcasting 2.0 compatible app at new
podcast apps dot com.
I want to say a big thank you to our members to you invest in the ongoing production of
these shows.
And as a thank you, we have created an ad free feed for you so you get a nice tight
coder still produced by Drew.
Just no ads in there.
And of course, you get the coderly report when a fresh one is available for you every
single quarter, which will be coming up soon.
You can join at Coder QA dot co or you can support every show and get every show on the
network ad free at Jupiter dot party.
Mr. Dominic, is there anywhere you want to send the good people this week?
Well, after your admonishment about Twitter, you're right.
I was going to go on Twitter, but you know what?
Let's challenge ourselves for seven days.
Let's just like be nice to the other tech nerds.
There's not that many of us.
We could do it for seven days.
Seven days.
We could do it.
You know where people are actually genuinely nice?
Our matrix chat.
That is shorter that show slash matrix going 24 seven good people, not a huge crowd, but
a really good crowd in there.
That's a spot, too.
And sometimes Mr. Dominic pops in.
I do.
And sometimes I play Magic the Gathering with the people in there.
I saw that.
That's so great.
I believe I've thus far gone undefeated.
So, yeah.
Oh, very nice.
If you are on the Twitter, you can check out at the Mad Botter Inc, you know, or the podcast
at Coder Radio Show.
You could do that.
I suppose.
I mean, there is the whole network to add Jupiter signal.
I don't know.
I don't know.
It's weird.
You know, we have the Telegram group.
That's not Twitter.
That's podcasting.com.
Telegram.
I don't know.
Most people listen.
Just want to listen.
They don't even need any of this social crap.
God, that's so nice.
So simple.
But then again, I'm part of the problem because I like talking to people, you know, don't
know what to do with that.
I like posting memes on Twitter.
Yeah, that is fun.
Well, links to what we talked about include any memes or hot Twitter threads over at Coder
dot show slash four eight eight.
You'll find our contact form there.
We want your emails.
We need more emails into the show.
And we say you should probably get the RSS feed.
I mean, just to be a pro.
Go grab that RSS feed.
That's what we say.
You can join us live Jupiter at two Mondays at nine a.m.
Pacific.
See you next week.

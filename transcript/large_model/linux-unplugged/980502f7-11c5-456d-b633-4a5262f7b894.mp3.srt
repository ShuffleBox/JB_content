1
00:00:00,000 --> 00:00:17,000
Breaking news just as the show starts, this Kickstarter project has smashed through its goal, it was looking for $35,000 and right in front of my eyes as we hit record, it just hit $36,000. Fully funded, what is it?

2
00:00:17,000 --> 00:00:25,000
Why my friends, it's the Raspberry Pi, but it's totally and completely untethered.

3
00:00:25,000 --> 00:00:39,000
If you've ever thought of taking your Raspberry Pi project on the go, then you understand how bulky and tedious it can get. And since it was not originally created with portability in mind, it lacks certain features common to mobile devices.

4
00:00:39,000 --> 00:00:56,000
This is why we created CutiePie, a 12mm thin Raspberry Pi tablet with an 8 inch display, a 5000 mAh battery and a handle that also doubles as a stand. Now you are free to create, whenever and wherever the inspiration strikes.

5
00:00:56,000 --> 00:01:16,000
At the heart of CutiePie is our own custom designed circuit board. This piece of open source hardware contains all the components necessary to make your projects portable. The onboard power management feature shows information about the battery life and gives you the freedom to use or recharge your CutiePie tablet just like your everyday gadgets.

6
00:01:16,000 --> 00:01:32,000
To take advantage of the custom hardware, we built our mobile shell on top of Raspberry Pi OS. Everything you need to work on the go, the shell has you covered. And it does all this while maintaining 100% compatibility with the original Pi environment.

7
00:01:32,000 --> 00:01:41,000
Okay, let's talk about this. This is pretty neat. It's even cooler when you see it in person because it's got a handle. And anytime you put a handle on technology, I'm pretty much in.

8
00:01:41,000 --> 00:01:53,000
Yeah, it's like the modern day GameCube. I love it. Yeah, it is. The UI, the CutiePie interface actually doesn't look that bad. I'm surprised to say it, but it actually looks decent.

9
00:01:53,000 --> 00:02:04,000
Yeah, it's a Qt based open source application framework called, you might expect, CutiePie Shell. And they say it's a highly optimized mobile user interface.

10
00:02:04,000 --> 00:02:15,000
Yeah, it's got a CutiePie UI for a more tablet like experience. It comes with an eight inch five point multi touch IPS display running at 1280 by 800 resolution.

11
00:02:15,000 --> 00:02:29,000
And the wording they use there, you might have caught it's fully compatible with the Raspberry Pi. It's powered by a custom certified open source board that uses a Raspberry Pi compute module that's a three plus light.

12
00:02:29,000 --> 00:02:37,000
It has a gigabyte of RAM. It has the same system on a chip as the Raspberry Pi three model B plus. It's a lot of funny names, Wes.

13
00:02:37,000 --> 00:02:41,000
Yeah, I guess it's almost a Raspberry Pi, but either way, you can take it with you on the go.

14
00:02:41,000 --> 00:02:48,000
You can do your normal sort of tablet things like logging onto a Wi-Fi hotspot, checking into some websites, getting some basic work done.

15
00:02:48,000 --> 00:02:53,000
And because it's all powered by almost a Raspberry Pi and Linux, well, if you want, you can pull up a terminal.

16
00:02:53,000 --> 00:03:08,000
And most importantly, your terminal can have a handle.

17
00:03:08,000 --> 00:03:13,000
Hello, friends, and welcome into 360 of your weekly Linux talk show. My name is Chris.

18
00:03:13,000 --> 00:03:14,000
My name is Wes.

19
00:03:14,000 --> 00:03:20,000
Hello there, Wes Payne. Good to be connected with you on a very exciting episode of the show.

20
00:03:20,000 --> 00:03:24,000
We have so much interesting community news to get into.

21
00:03:24,000 --> 00:03:34,000
We have a couple of guests joining us and we have a pick that's going to make your audio sound nearly pro, even in less than ideal conditions.

22
00:03:34,000 --> 00:03:37,000
Don't count Pulse Audio out yet. It's still got a few tricks.

23
00:03:37,000 --> 00:03:41,000
We'll tell you about a GUI front end that does real time noise suppression.

24
00:03:41,000 --> 00:03:46,000
It's super cool and you don't even need a fancy NVIDIA GPU to pull it off.

25
00:03:46,000 --> 00:03:51,000
But before we get there, before we get to the community news and all of that, I got to say hello to Drew and Cheese.

26
00:03:51,000 --> 00:03:54,000
Gentlemen, welcome to the table. Hello. Hello, Internet.

27
00:03:54,000 --> 00:04:00,000
And then, of course, a big, hearty, time appropriate greetings to that mumble room. Hello, Virtual Lug.

28
00:04:00,000 --> 00:04:02,000
Hello. Hello, everybody. Howdy.

29
00:04:02,000 --> 00:04:06,000
Howdy. Also joining us off mic is Levi, the studio dog.

30
00:04:06,000 --> 00:04:11,000
He's here with me in Austin, Texas, today hanging out as the kids are out doing the swimming stuff.

31
00:04:11,000 --> 00:04:15,000
And I'm down here doing the podcasting stuff. I brought him with me to keep me company.

32
00:04:15,000 --> 00:04:18,000
I got him a little bed. I got him a little dog bone.

33
00:04:18,000 --> 00:04:23,000
So let's get into the community news because there's some really cool stuff to talk about today.

34
00:04:23,000 --> 00:04:30,000
Probably number one on my excited to see list because it's something we'll all get eventually is some nice improvements to GNOME Shell.

35
00:04:30,000 --> 00:04:36,000
It's actually fixing a regression that caused Windows to render slowly.

36
00:04:36,000 --> 00:04:39,000
It all comes down to culling. What do you know here, Wes?

37
00:04:39,000 --> 00:04:46,000
Well, as part of wanting to improve GNOME performance, especially things like 4K resolution, which we all love,

38
00:04:46,000 --> 00:04:57,000
Canonical's Daniel von Wutt, one of our favorites, has been profiling various desktop issues and looking to fix them up before GNOME 3.38 slash Ubuntu 2010.

39
00:04:57,000 --> 00:05:04,000
One of his recent discoveries, though, is that Mutter Windows culling code in general, well, it was kind of just broken.

40
00:05:04,000 --> 00:05:10,000
And given the huge number of pixels at 4K resolution, well, it just makes the problem worse.

41
00:05:10,000 --> 00:05:15,000
Might have been OK tolerable at 1080p, not so at 4K.

42
00:05:15,000 --> 00:05:18,000
Even Windows not being presented at all, we're not being culled.

43
00:05:18,000 --> 00:05:21,000
And that leads to a huge waste, especially at these high resolutions.

44
00:05:21,000 --> 00:05:26,000
So you could be dragging a small terminal window over eight maximized windows.

45
00:05:26,000 --> 00:05:31,000
That wasn't going to be good. You'd get about 30 FPS. With these fixes, though, that's 60 FPS.

46
00:05:31,000 --> 00:05:38,000
Hey! Yeah, right. Or another example is if you're running a maximized GLX gears, which I mean, come on, that's what we're all doing all day, right?

47
00:05:38,000 --> 00:05:43,000
I just sit there, run GLX gears. Well, you drag that over eight maximized terminal windows.

48
00:05:43,000 --> 00:05:48,000
That frame rate went from 15 to 60. That's a big win in my book.

49
00:05:48,000 --> 00:05:54,000
Hey, that's why you're getting them fancy GPUs these days. You want them 60 frames per second, even for your desktop environment.

50
00:05:54,000 --> 00:06:00,000
It all came down to that broken culling that was a regression for 3.34 of GNOME show.

51
00:06:00,000 --> 00:06:03,000
A fix is currently being evaluated and hopefully will be picked up soon and backported.

52
00:06:03,000 --> 00:06:07,000
But given its importance, we'll get it to older versions of GNOME Shell too, which I could definitely see happening.

53
00:06:07,000 --> 00:06:12,000
That's happened a lot with some of these types of fixes as they make their way back into the older versions eventually.

54
00:06:12,000 --> 00:06:15,000
But they tend to land first in the newer version. Well, of course.

55
00:06:15,000 --> 00:06:24,000
Now, I can't quite decide if this is, you know, kind of shameful because it's an embarrassing bug or we should just focus on the good here and it's getting fixed.

56
00:06:24,000 --> 00:06:29,000
The regression is going away and we'll all be back to a high performance GNOME desktop pretty soon.

57
00:06:29,000 --> 00:06:33,000
This feels like a classic open source conundrum, right?

58
00:06:33,000 --> 00:06:38,000
Because in one part, it is a bit embarrassing that a bug like this crops in.

59
00:06:38,000 --> 00:06:46,000
But on the other end, a bug like this could easily crop into one of the commercial platforms and we would just never, ever be told about it.

60
00:06:46,000 --> 00:06:52,000
Yeah. Ain't that right? You'll just be wondering why your desktop suddenly sucks. And then eventually, one day, magically, it's fixed.

61
00:06:52,000 --> 00:07:01,000
A service pack comes out that greatly improves performance, but instead of getting it in a six month iteration, you get it like in a year iteration.

62
00:07:01,000 --> 00:07:04,000
So I think it's I think it's a win for free software.

63
00:07:04,000 --> 00:07:10,000
It would be so easy for me to get on my we need a workstation grade desktop environment stat soapbox.

64
00:07:10,000 --> 00:07:17,000
But I'll save that for when we talk about ButterFS because instead I'd like to talk about Mint 20.

65
00:07:17,000 --> 00:07:24,000
I think it's been I don't know, it's been several months that I've been sort of tracking the beta landed a few weeks ago.

66
00:07:24,000 --> 00:07:33,000
I started poking at it. And then when the final release landed last week, I wiped my test install and loaded the final version fresh.

67
00:07:33,000 --> 00:07:37,000
I went with the cinnamon. It's cinnamon four dot six Linux kernel five dot four.

68
00:07:37,000 --> 00:07:50,000
And it's based on Ubuntu 20 or four and it will receive security updates until 2025 until 2022. Future versions of Linux Mint will use the same package base as Linux Mint 20.

69
00:07:50,000 --> 00:08:01,000
So upgrades, even other versions should be really easy because in that logic, Mint 21 will be based on the same Ubuntu 20 or four base until 2022.

70
00:08:01,000 --> 00:08:05,000
The development team won't start working on a new base that's just going to be fully focused on this one.

71
00:08:05,000 --> 00:08:11,000
That's a nice feature for users. It's sort of a nice bit of predictability there. This is going to be around for a while.

72
00:08:11,000 --> 00:08:18,000
Yeah. So I thought it was worth kind of following the development of it, trying it when I could find a way to try it and then installing the final version.

73
00:08:18,000 --> 00:08:24,000
And they put forward a couple of things in this one that are, quote unquote, new. What's old is new again.

74
00:08:24,000 --> 00:08:33,000
Ten years ago, I'm talking like Linux Mint six. They had a tool called Giver, which would share files across a local network without any user configuration.

75
00:08:33,000 --> 00:08:39,000
They would just use DNS to discover each other. And then you could just drag files between the machines.

76
00:08:39,000 --> 00:08:45,000
And it was sort of like AirDrop. Well, they've brought it back, Wes, in Linux Mint 20. It's called Warpinator.

77
00:08:45,000 --> 00:08:50,000
Oh, Warpinator. What a name, right? So, yeah, it's basically just a reimplementation of Giver.

78
00:08:50,000 --> 00:08:55,000
And as you touched on setting up a whole server for something like FTP or Samba or NFS.

79
00:08:55,000 --> 00:09:02,000
Well, yeah, that works fine if you've already got one. But it's a little bit overkill if you just want to send a file between two computers.

80
00:09:02,000 --> 00:09:07,000
Now, you know me, I just use Netcat, but that's not for everyone. That's for sure.

81
00:09:07,000 --> 00:09:12,000
So here you've got Warpinator and you just open Warpinator on the two computers. They'll auto discover each other.

82
00:09:12,000 --> 00:09:15,000
And then, boom, you've got file transfer.

83
00:09:15,000 --> 00:09:24,000
I think this is a pretty solid feature because I have discovered through spending time in offices that people use AirDrop.

84
00:09:24,000 --> 00:09:34,000
I just thought AirDrop was like some sort of side thing that iPhones had, but it's integrated at the Mac desktop and they use it to drop files amongst each other.

85
00:09:34,000 --> 00:09:39,000
And this is something similar that you just have your machines that have Warpinator show up automatically.

86
00:09:39,000 --> 00:09:42,000
And, you know, you have to be on the same LAN and the same broadcast domain.

87
00:09:42,000 --> 00:09:47,000
But then you can just drag a file from your desktop into Warpinator and it sends it to them.

88
00:09:47,000 --> 00:09:54,000
It just seems like a very nice, you know, user focused feature. All the technology already exists in the Linux and free desktop stack.

89
00:09:54,000 --> 00:09:58,000
They've just kind of tied it together and made it a little easier and more accessible.

90
00:09:58,000 --> 00:10:03,000
I think you can find a lot of things to criticize Mint about. I'll get to one of them here in a moment.

91
00:10:03,000 --> 00:10:10,000
But they've been historically really good at putting their head where the user is.

92
00:10:10,000 --> 00:10:13,000
And so I think it's reflected in the way their update manager displays things.

93
00:10:13,000 --> 00:10:21,000
I think it's reflected in tools like Warpinator and in some of the decisions they've made to fork other projects to keep things from changing.

94
00:10:21,000 --> 00:10:26,000
It's in trying to service an end user who just wants a practical, functional desktop.

95
00:10:26,000 --> 00:10:39,000
And that's why it's nice to see things like in Cinnamon 4.6, they've updated the NEMO file manager so that it will prioritize navigation and the display of content over thumbnail generation.

96
00:10:39,000 --> 00:10:45,000
So it doesn't delay loading a large directory so it can crawl the files and get thumbnails.

97
00:10:45,000 --> 00:10:49,000
It first will display you the content. It will first respond to your navigation requests.

98
00:10:49,000 --> 00:10:53,000
And then when all other tasks are complete, it will work on the job of thumbnails.

99
00:10:53,000 --> 00:10:55,000
And I think that's just a small but very nice improvement.

100
00:10:55,000 --> 00:10:56,000
Amen.

101
00:10:56,000 --> 00:11:04,000
There's also in 4.6 of Cinnamon fractional scaling now, which obviously has been a big topic for a lot of desktop environments.

102
00:11:04,000 --> 00:11:13,000
You either had 100% scale, just what the natural normal scale is, or you could bump it all the way up to 200% scale, which would be quote unquote high DPI mode.

103
00:11:13,000 --> 00:11:16,000
And that would be uniform across all the monitors.

104
00:11:16,000 --> 00:11:19,000
That's not what I want, though, right? I mean, come on. That almost never works.

105
00:11:19,000 --> 00:11:31,000
OK, maybe in the base setup, but when you've maybe got like a laptop connected and you've got a nice screen on the other side and you've just got a mix of resolutions or you're doing something like you, Chris, where you've got some horizontal and then some vertical monitors.

106
00:11:31,000 --> 00:11:33,000
It's just not going to work.

107
00:11:33,000 --> 00:11:44,000
So I'm really pleased to see that in Cinnamon 4.6, each monitor can have a different scaling factor and you can choose values in between 100% and 200%, hence fractional.

108
00:11:44,000 --> 00:11:46,000
Linux Mint 20 is out now.

109
00:11:46,000 --> 00:11:50,000
My impressions of it were pretty standard.

110
00:11:50,000 --> 00:11:51,000
The install is the same as always.

111
00:11:51,000 --> 00:11:54,000
There's no ZFS option.

112
00:11:54,000 --> 00:11:57,000
The default fonts and icons all look really great.

113
00:11:57,000 --> 00:12:03,000
The first step and the welcome wizard that it gives you now lets you set your color highlights, your dark theme.

114
00:12:03,000 --> 00:12:08,000
You can choose a traditional versus modern layout just right there and just boom gets it done.

115
00:12:08,000 --> 00:12:14,000
And there's also a button when you scroll down to get your snapshot set up, run the driver manager, the update manager.

116
00:12:14,000 --> 00:12:17,000
All the managers are just right there. One click to launch them.

117
00:12:17,000 --> 00:12:20,000
Some of them are they just get you in the app and you have to do the rest.

118
00:12:20,000 --> 00:12:22,000
And some of them are like take a specific action.

119
00:12:22,000 --> 00:12:25,000
It's it's well done. It's nice to see.

120
00:12:25,000 --> 00:12:28,000
There was an issue I hit, though.

121
00:12:28,000 --> 00:12:31,000
I'm really disappointed in how Linux Mint has handled this.

122
00:12:31,000 --> 00:12:44,000
I wanted to install Chromium and they have opted, I guess, to break the user experience in favor of making a political statement towards canonical.

123
00:12:44,000 --> 00:12:55,000
So on an Ubuntu system, when you apt install or whatever, you go to the software center and you know, no software, you go in there, you install Chromium. It's actually a snap on Ubuntu.

124
00:12:55,000 --> 00:12:57,000
Well, Mint is based on Ubuntu.

125
00:12:57,000 --> 00:13:04,000
Mint takes advantage of a lot of the heavy lifting that Ubuntu and Canonical do, both in infrastructure and in development.

126
00:13:04,000 --> 00:13:08,000
When Canonical or Ubuntu make a change like that, it impacts Mint.

127
00:13:08,000 --> 00:13:14,000
And what they opted to do was just break my ability to install Chromium.

128
00:13:14,000 --> 00:13:18,000
In fact, when I did apt install snap D, I also got errors.

129
00:13:18,000 --> 00:13:25,000
So I couldn't even opt as a user to say, well, I'm I'm fine with running Chromium as a snap.

130
00:13:25,000 --> 00:13:28,000
So I'll just install snap and go. I couldn't do that either.

131
00:13:28,000 --> 00:13:38,000
So what I was forced to end up doing was just go to Google and get the more proprietary locked down deb and just download and install that. And I didn't want Chrome. I wanted Chromium.

132
00:13:38,000 --> 00:13:44,000
But I just didn't get a choice. The Mint developers had just decided that Canonical shouldn't be snapping applications.

133
00:13:44,000 --> 00:13:46,000
And so we're just going to break this.

134
00:13:46,000 --> 00:13:52,000
I know the folks at Canonical would have been willing to work with the Mint team to come to a solution here.

135
00:13:52,000 --> 00:13:56,000
There was no communication about this. It's just a crappy experience.

136
00:13:56,000 --> 00:14:02,000
And it seems so opposite of how they typically try to empathize with where the user is at.

137
00:14:02,000 --> 00:14:04,000
They try to put their heads with where the user is at.

138
00:14:04,000 --> 00:14:16,000
But in this case, I found it to be a user hostile experience and sort of disappointing because I ended up going with like the more locked down tracked proprietary version to get what I wanted.

139
00:14:16,000 --> 00:14:18,000
So I could get the Web page loaded that I needed.

140
00:14:18,000 --> 00:14:24,000
Now, I will note in the release notes for Linux Mint 20, they do have some instructions on how to re enable snap if you'd like.

141
00:14:24,000 --> 00:14:27,000
But it is a little confusing, especially if you're coming from another distro.

142
00:14:27,000 --> 00:14:32,000
And while I agree, I mean, it's kind of pretty frustrating, especially if you're used to using snap packages.

143
00:14:32,000 --> 00:14:41,000
I think from the Linux Mint perspective, snaps are kind of all about giving developers control, direct stuff, especially for some of these proprietary applications where it doesn't really make sense.

144
00:14:41,000 --> 00:14:49,000
And I think that just doesn't jive well with the sort of control aspect that Clem and the rest of the Linux Mint team want to have over their distribution.

145
00:14:49,000 --> 00:14:51,000
And you're right. It's all based on Ubuntu.

146
00:14:51,000 --> 00:14:58,000
But I think they see it as their own thing and that this change from upstream messed with how they wanted their distro to work.

147
00:14:58,000 --> 00:15:03,000
So it seems user hostile and it seems hostile towards canonical, which is sort of like crapping in your bed.

148
00:15:03,000 --> 00:15:06,000
So it just seems like there could have been a better way to solve this problem.

149
00:15:06,000 --> 00:15:09,000
And I I did see all the drama about the announcement.

150
00:15:09,000 --> 00:15:11,000
We saw it all. We just didn't feel like talking about it.

151
00:15:11,000 --> 00:15:14,000
Neither anyone from canonical came on the show or anyone from it came on the show to talk about it.

152
00:15:14,000 --> 00:15:16,000
So we let it be.

153
00:15:16,000 --> 00:15:23,000
And now I just thought, OK, well, I just experienced it as an end user being somewhat aware of the situation, but not having really explored it very much.

154
00:15:23,000 --> 00:15:26,000
I find it disappointing. I think it's really kind of silly.

155
00:15:26,000 --> 00:15:38,000
I wonder if the experience is different for folks who are used to maybe a more traditional environment, you know, especially if they've been on Mint for a long time and aren't prepared for the snap revolution where, you know, all the behavior, which I think we've seen on the other side, too.

156
00:15:38,000 --> 00:15:42,000
There's plenty of people in the Ubuntu world that are sort of upset that snaps have taken things over.

157
00:15:42,000 --> 00:15:52,000
Now, I'm fine with that. I'm, you know, I'm used to it. But I think there are multiple segments of users out there who have different views on how this packaging transition is happening.

158
00:15:52,000 --> 00:15:55,000
And it's just interesting to watch. Yeah, it really it is.

159
00:15:55,000 --> 00:16:00,000
You look at the Mint situation and you go, huh? Well, where's the line at, guys?

160
00:16:00,000 --> 00:16:05,000
Because you're basically hitched to Ubuntu's wagon. You don't have control there.

161
00:16:05,000 --> 00:16:09,000
Yeah, I'm aware of Linux Mint Debian edition. Go ahead. Pull that trigger.

162
00:16:09,000 --> 00:16:19,000
And you also have no control over software as a service or every single website on the Internet, which is a primary tool for people now.

163
00:16:19,000 --> 00:16:26,000
So you have no control over what is going to be the most common primary application, the Web browser and the Web.

164
00:16:26,000 --> 00:16:31,000
You have no control over the base of which you've based your operating system over.

165
00:16:31,000 --> 00:16:39,000
But this this is where you draw the line in a way that breaks it for end users and sends a middle finger to canonical.

166
00:16:39,000 --> 00:16:44,000
And they're not going to forget this. Like, who wins here?

167
00:16:44,000 --> 00:16:48,000
It just seems like somebody got grumpy and wanted to make a grumpy statement.

168
00:16:48,000 --> 00:16:54,000
And everybody but that one individual loses out. I don't know. I mean, it doesn't need to be a big thing.

169
00:16:54,000 --> 00:17:04,000
It's just I think the bigger picture is, is the system managed by the distro maintainer, including all of the applications the end user is expected to use?

170
00:17:04,000 --> 00:17:12,000
Or is the system managed by the user and they choose if they get vendor updated applications or if they use repository applications?

171
00:17:12,000 --> 00:17:15,000
Who's the boss? In my world, it's the end user.

172
00:17:15,000 --> 00:17:21,000
But you can enable it again. And I mean, I think the other thing is snaps are kind of more about developer control than user control.

173
00:17:21,000 --> 00:17:28,000
Right. I mean, with the auto updating, I just think the traditional grumpy sys admin, as you touched on, they might prefer this approach.

174
00:17:28,000 --> 00:17:35,000
You know, it's the app that they know. You know, it's you controlling the system and not this snap connected to a proprietary store under canonical.

175
00:17:35,000 --> 00:17:40,000
It's just standard apt. You can reenable it just like you could go get the flat pack.

176
00:17:40,000 --> 00:17:44,000
But these are mint users. Right. So maybe it's a little bit different.

177
00:17:44,000 --> 00:17:49,000
Like, how about in that welcome wizard? Give me an option to install it from a deb file or something.

178
00:17:49,000 --> 00:18:07,000
I think that could have been gone a long way. You know, if they had done some work to maybe add a repository that set up Chromium to still use the, you know, the deb version and not have to go to Chrome or had some stuff at the welcome wizard or in the installer that let you choose like, hey, do you want to use snap given our concerns or do you want to use our default of not having snap?

179
00:18:07,000 --> 00:18:09,000
Definitely this wasn't handled ideally.

180
00:18:09,000 --> 00:18:13,000
Yeah, we'll link to the blog where they made their announcement about the change because this has been in the works.

181
00:18:13,000 --> 00:18:21,000
They communicated ahead of time. June 1st, Clem made a post in his monthly update saying this was coming and this is their choice.

182
00:18:21,000 --> 00:18:28,000
And I think they have every right to make it. I just think there's a way to do it in which it doesn't have to be dramatic.

183
00:18:28,000 --> 00:18:35,000
We intentionally didn't cover the drama around this because I think everybody is a little exhausted by universal packaging drama.

184
00:18:35,000 --> 00:18:39,000
I think all of us have just had it. And at this point, we just want crap to work.

185
00:18:39,000 --> 00:18:44,000
And so I just decided to avoid it until I experienced it. And I found it really frustrating.

186
00:18:44,000 --> 00:18:50,000
I found it to be substandard when the rest of the experience is pretty great, like setting up snapshots is very straightforward.

187
00:18:50,000 --> 00:18:56,000
Picking a mirror that is closest to you and fastest performing is made easy enough for any average end user to figure it out.

188
00:18:56,000 --> 00:19:03,000
That welcome wizard that gets you set up and going with all these little tiny things that make the experience more stable and recoverable.

189
00:19:03,000 --> 00:19:15,000
All of that and things like Warpinator clearly demonstrate empathizing with where the user is at, making it easy for an expert or a newbie on Linux Mint to get up and going.

190
00:19:15,000 --> 00:19:22,000
And you're right, getting Chrome, which is kind of bog standard web client these days, that's harder than it needs to be.

191
00:19:22,000 --> 00:19:31,000
It just seems like there is an animosity between them and Canonical. And I guess I feel like, well, then move. Go somewhere else.

192
00:19:31,000 --> 00:19:35,000
Switch switch to the Debian edition. This can't be healthy as a long term thing.

193
00:19:35,000 --> 00:19:43,000
All right. Well, moving on, let's talk about something that is quite healthy, and that is the continued steady march to opening up our hardware.

194
00:19:43,000 --> 00:19:59,000
And System 76 has taken some significant steps with the new Oryx Pro, which ships with for the first time ever with System 76 is open firmware and an NVIDIA monster GPU inside this thing.

195
00:19:59,000 --> 00:20:04,000
So Jeremy joins us from System 76 to talk about this and some of the benefits it brings us.

196
00:20:04,000 --> 00:20:08,000
Jeremy, welcome back to the show. Hey, glad to be here. Glad to have you here.

197
00:20:08,000 --> 00:20:14,000
So let's start with the open firmware in a machine with NVIDIA graphics, because first of all, that's a huge accomplishment.

198
00:20:14,000 --> 00:20:20,000
It's in a laptop, and I think it means a lot of great benefits for end users. Can you talk us through some of that?

199
00:20:20,000 --> 00:20:30,000
We've definitely noticed how important it's been for our customers on systems that have integrated graphics like the Galago Pro, the Darter Pro and of course, the Lemur Pro.

200
00:20:30,000 --> 00:20:39,000
And we've always wanted to continue pushing this across our line until it covers everything, laptops and desktops.

201
00:20:39,000 --> 00:20:49,000
And of course, that's a very heterogeneous set of hardware. On the laptop side, we have Intel CPUs and we have AMD CPUs.

202
00:20:49,000 --> 00:20:58,000
We have Intel graphics. We have NVIDIA graphics. And this will only continue to diversify as we move forward.

203
00:20:58,000 --> 00:21:11,000
It's been important to me especially that the firmware we develop is able to deal with the wide set of hardware that's typically dealt with by proprietary firmware.

204
00:21:11,000 --> 00:21:24,000
And what you'll find is if you go to a company like Inside, which produces the proprietary firmware for these systems, or a company like AMI, which produces proprietary firmware for our desktops,

205
00:21:24,000 --> 00:21:38,000
they will have a wide set of support code for features that are not so common across other core boot machines, things like Thunderbolt, things like NVIDIA GPUs.

206
00:21:38,000 --> 00:21:45,000
Even having the H-class Intel CPU is something that's very rare in core boot machines.

207
00:21:45,000 --> 00:21:48,000
Can you talk a little bit more about what the H-class means?

208
00:21:48,000 --> 00:21:56,000
So that's the high performance version. It's a mobile CPU that's 45 watts, and it can actually go a lot higher than that.

209
00:21:56,000 --> 00:22:15,000
It's competitive with desktop CPUs versus the U-class CPU, which is less than half the wattage at 15 to 25 watts, which is designed for ultra mobile and definitely you'll notice performance differences.

210
00:22:15,000 --> 00:22:18,000
So the H-class is incredibly high performance.

211
00:22:18,000 --> 00:22:27,000
It has some unique characteristics that have made this a pretty intense project compared to the Lemur Pro.

212
00:22:27,000 --> 00:22:33,000
So the system can power off if it is using all of its hardware on battery.

213
00:22:33,000 --> 00:22:36,000
That's the first thing.

214
00:22:36,000 --> 00:22:49,000
The AC adapter is 180 watts and the system can use up to and above 180 watts because its thermals allow it to exceed that value.

215
00:22:49,000 --> 00:22:59,000
So instead of using the thermal limits as the power limits, as was done with the Lemur Pro, this model is completely different.

216
00:22:59,000 --> 00:23:04,000
On this model, we have to use power limits that are separate from the thermal limits

217
00:23:04,000 --> 00:23:09,000
because the thermal system is capable of exhausting more than the power system can.

218
00:23:09,000 --> 00:23:12,000
Oh, wow. That's nice.

219
00:23:12,000 --> 00:23:20,000
On battery, the system can only go up to about 80 watts, and this is a typical number for laptops on battery.

220
00:23:20,000 --> 00:23:25,000
You won't find any laptops that move more than 80 watts when they're on battery.

221
00:23:25,000 --> 00:23:27,000
It's going to be somewhere around that value.

222
00:23:27,000 --> 00:23:31,000
But on the AC adapter, it's able to go up to 180 watts.

223
00:23:31,000 --> 00:23:39,000
And then you throw in the NVIDIA card, and with the NVIDIA card, you have a ton of ACPI features that need to be implemented.

224
00:23:39,000 --> 00:23:41,000
The benefits are the same as the Intel graphics machines.

225
00:23:41,000 --> 00:23:48,000
You have the ability to inspect the firmware, you get faster boot times, you get more recurrent updates to the firmware,

226
00:23:48,000 --> 00:23:52,000
and you get better compatibility across Linux distributions.

227
00:23:52,000 --> 00:23:55,000
Lightning fast boot times, as you guys put it.

228
00:23:55,000 --> 00:24:02,000
I'm actually impressed, Jeremy, that as the Intel processors continue to evolve, that this is a project that is even possible.

229
00:24:02,000 --> 00:24:08,000
Like, I could have seen it dying at the eighth generation Intel CPUs and never been able to progress further than that.

230
00:24:08,000 --> 00:24:14,000
Is it a cat and mouse game where they change something and then it's a matter of figuring out what was changed to make it work?

231
00:24:14,000 --> 00:24:20,000
We've been able to consistently release open firmware with Intel releases.

232
00:24:20,000 --> 00:24:26,000
Two years ago, it would not have been possible because the FSP was not released in this kind of timeline.

233
00:24:26,000 --> 00:24:28,000
Now the FSP is released.

234
00:24:28,000 --> 00:24:33,000
I just have to crunch through the documents, find what has been done incorrectly in core boot,

235
00:24:33,000 --> 00:24:36,000
and what needs to be added for the specific platform.

236
00:24:36,000 --> 00:24:40,000
And I always find something and then get it working.

237
00:24:40,000 --> 00:24:43,000
So I have a bunch of debug tools.

238
00:24:43,000 --> 00:24:45,000
I've actually got the orcs right now.

239
00:24:45,000 --> 00:24:47,000
I've got it next to me.

240
00:24:47,000 --> 00:24:52,000
It's lying on the lid, halfway open.

241
00:24:52,000 --> 00:24:54,000
The keyboard has popped out.

242
00:24:54,000 --> 00:24:59,000
It has an Arduino with a ribbon cable connected into the keyboard controller.

243
00:24:59,000 --> 00:25:05,000
It has a spy clip on the ROM on the other side of the machine.

244
00:25:05,000 --> 00:25:10,000
And this is how I run it when I'm doing firmware debugging.

245
00:25:10,000 --> 00:25:21,000
What happens is before memory init, you don't have access to display, USB, any devices except the most simple devices possible.

246
00:25:21,000 --> 00:25:29,000
And in the case of our open EC machines, we've developed a technique for debugging using the EC

247
00:25:29,000 --> 00:25:34,000
so that we can get output from the system throughout the whole boot phase,

248
00:25:34,000 --> 00:25:38,000
including the power states before the CPU is even turned on.

249
00:25:38,000 --> 00:25:43,000
When I first get a system and the hardware has been done,

250
00:25:43,000 --> 00:25:47,000
so this is a board that we know we can try firmware on,

251
00:25:47,000 --> 00:25:54,000
I'm going to use the schematics for the board to design the firmware support that I think is going to need to be there.

252
00:25:54,000 --> 00:25:58,000
And I'm going to build an image and then I'm going to flash it to the system.

253
00:25:58,000 --> 00:26:02,000
And then this is the most fateful time of the whole process.

254
00:26:02,000 --> 00:26:04,000
Will it boot or not?

255
00:26:04,000 --> 00:26:10,000
If it boots to display init, things are going to be really easy because then I can develop on the machine.

256
00:26:10,000 --> 00:26:16,000
So long as I can get to the point where I can boot any device, then things go a lot faster.

257
00:26:16,000 --> 00:26:19,000
That has happened a lot more for me recently.

258
00:26:19,000 --> 00:26:24,000
We have the Gazelle, the Adder and the Oryx Pro that all got updated.

259
00:26:24,000 --> 00:26:31,000
I was able to, within two hours, develop firmware for all three, flash the firmware,

260
00:26:31,000 --> 00:26:34,000
every single one of them booted on the first try.

261
00:26:34,000 --> 00:26:38,000
That must have been amazing. That must have felt incredible.

262
00:26:38,000 --> 00:26:46,000
I guess I have a question that I noticed that is stressed pretty significantly in this blog post that talks about some of this is,

263
00:26:46,000 --> 00:26:50,000
it sounds like it's unique to have this in combination with an NVIDIA GPU.

264
00:26:50,000 --> 00:26:52,000
Can you talk to that a little bit?

265
00:26:52,000 --> 00:26:58,000
Yeah, it's both unique to have an NVIDIA GPU for anything running core boot.

266
00:26:58,000 --> 00:27:07,000
It's even more unique as in this is the only system that supports switchable graphics after the OS is booted with core boot.

267
00:27:07,000 --> 00:27:09,000
You mean you don't have to reboot to change graphics cards?

268
00:27:09,000 --> 00:27:17,000
You don't. In fact, with the NVIDIA driver 450.51 in Pop!OS 20.04,

269
00:27:17,000 --> 00:27:22,000
this system will support hybrid graphics where you can use external displays,

270
00:27:22,000 --> 00:27:30,000
you can run things by default on the integrated GPU, or by right clicking in Gnome Shell, you can run it on the discrete GPU.

271
00:27:30,000 --> 00:27:34,000
That's great.

272
00:27:34,000 --> 00:27:37,000
And some things already have rules set up.

273
00:27:37,000 --> 00:27:41,000
Steam, for example, is already set up to run on the discrete GPU by default.

274
00:27:41,000 --> 00:27:45,000
And the interesting thing is when you run Steam on the NVIDIA GPU,

275
00:27:45,000 --> 00:27:54,000
if you close the window and it goes to the background where it's in, you know, logged in, you're going to get your messages kind of mode,

276
00:27:54,000 --> 00:27:57,000
it will turn off the NVIDIA GPU automatically.

277
00:27:57,000 --> 00:27:58,000
Oh, wow.

278
00:27:58,000 --> 00:28:02,000
Yeah, the power savings are the same as if you're in integrated graphics mode.

279
00:28:02,000 --> 00:28:09,000
So long as you're not utilizing the NVIDIA GPU, you plug in an external display with a new beta driver, it will work.

280
00:28:09,000 --> 00:28:16,000
Windows works out of the box with our firmware and with the same display switching capabilities.

281
00:28:16,000 --> 00:28:17,000
Wow.

282
00:28:17,000 --> 00:28:20,000
And this took a ton of work.

283
00:28:20,000 --> 00:28:30,000
By far, the longest part of the Oryx Pro project was to get NVIDIA graphics working so that it would be switchable at runtime.

284
00:28:30,000 --> 00:28:36,000
That took me maybe an hour to figure out how to get the NVIDIA GPU to actually show up.

285
00:28:36,000 --> 00:28:44,000
After it showed up, the rest of the time, a couple of weeks maybe, to figure out how to get switchable graphics to work.

286
00:28:44,000 --> 00:28:52,000
And then to fix problems with switchable graphics like suspend wouldn't work or suspend would come back and the NVIDIA graphics card wouldn't be there.

287
00:28:52,000 --> 00:28:58,000
And at the very end, it worked perfectly in Linux and it didn't work at all in Windows.

288
00:28:58,000 --> 00:29:03,000
And that was our release day where we wanted to put it up on the site and that was on Thursday.

289
00:29:03,000 --> 00:29:11,000
For one day, we had a disclaimer on the site saying Windows NVIDIA driver will not work on this machine.

290
00:29:11,000 --> 00:29:25,000
And then during that day on last Thursday, I figured out the problem with Windows, which is I cannot understand how firmware developers get anything done with Windows.

291
00:29:25,000 --> 00:29:29,000
Like it is impossible to work with.

292
00:29:29,000 --> 00:29:31,000
But you did it for us, Jeremy.

293
00:29:31,000 --> 00:29:34,000
You're the hero that we need.

294
00:29:34,000 --> 00:29:40,000
So you already got the NVIDIA driver, which is closed source, and it's not going to tell you that much about what it's doing.

295
00:29:40,000 --> 00:29:46,000
Then you pair that with the Windows kernel, which is, by the way, you want to know what that NVIDIA driver is doing.

296
00:29:46,000 --> 00:29:50,000
There's no way you can use us to figure that out.

297
00:29:50,000 --> 00:29:55,000
All the ACPI debugging messages, I could never figure out how to get those to work.

298
00:29:55,000 --> 00:30:04,000
So I ended up implementing a weird protocol in ACPI that would talk to the embedded controller over a port and would output debug messages that way.

299
00:30:04,000 --> 00:30:05,000
Clever.

300
00:30:05,000 --> 00:30:08,000
The embedded controller is a big part of this.

301
00:30:08,000 --> 00:30:17,000
It's been a real boom to our open firmware work because now we're able to get debugging from any point of the system's process.

302
00:30:17,000 --> 00:30:23,000
In fact, right now I'm working on debugging the Intel FSP because we want to enable memory overclocking.

303
00:30:23,000 --> 00:30:27,000
Just to clarify, you're talking about the system 76 embedded controller firmware, right?

304
00:30:27,000 --> 00:30:29,000
Yeah, that's what I'm talking about. Yeah.

305
00:30:29,000 --> 00:30:32,000
Yeah. So that that plays a role in this.

306
00:30:32,000 --> 00:30:39,000
I didn't I guess I didn't appreciate that connection that this this controller gives you a debug point to do this other stuff.

307
00:30:39,000 --> 00:30:47,000
It is probably the single most important thing for us in terms of being able to reproduce open firmware on new devices.

308
00:30:47,000 --> 00:30:48,000
Fascinating.

309
00:30:48,000 --> 00:30:55,000
Before we had the Galago and we had the Darter Pro, that was kind of the first generation.

310
00:30:55,000 --> 00:30:58,000
And that was kind of the chimpanzee version.

311
00:30:58,000 --> 00:31:00,000
But now we've evolved.

312
00:31:00,000 --> 00:31:08,000
OK, now we're maybe one hundred fifty thousand years ago when people first discovered fire or whatever.

313
00:31:08,000 --> 00:31:11,000
I'm excited to see what we evolve into in the future.

314
00:31:11,000 --> 00:31:22,000
And what this project has done, this works pro, is we have covered so many different pieces across the whole spectrum of what you would expect from a modern PC.

315
00:31:22,000 --> 00:31:25,000
And I've poured it to the Adder, too.

316
00:31:25,000 --> 00:31:27,000
So we've got OLED 4K figured out.

317
00:31:27,000 --> 00:31:33,000
We've got systems that pretty much go through the laundry list of what is in a PC.

318
00:31:33,000 --> 00:31:35,000
And this was extremely important.

319
00:31:35,000 --> 00:31:40,000
Now we're pretty sure that we can port this to all of our laptops.

320
00:31:40,000 --> 00:31:43,000
And hopefully moving forward our desktops.

321
00:31:43,000 --> 00:31:46,000
That's awesome to hear. And just sticking with the orcs for a second.

322
00:31:46,000 --> 00:31:51,000
This seems like the most competitive laptop system 76 has ever made.

323
00:31:51,000 --> 00:31:53,000
It's four point three nine pounds.

324
00:31:53,000 --> 00:31:55,000
It has the open firmware.

325
00:31:55,000 --> 00:31:57,000
It has the embedded controller firmware.

326
00:31:57,000 --> 00:32:00,000
It has the real time switchable graphics.

327
00:32:00,000 --> 00:32:03,000
It has the high performance CPU.

328
00:32:03,000 --> 00:32:08,000
So I figured I'm going to head over to your website right now and configure one and just see what it lands at.

329
00:32:08,000 --> 00:32:14,000
So I went with the eight gigabytes of video memory for the RTX 2070.

330
00:32:14,000 --> 00:32:18,000
I thought, why not go with the 17.3 mat if I'm going to go big?

331
00:32:18,000 --> 00:32:21,000
It also comes in a 15.6 inch mat, which is nice.

332
00:32:21,000 --> 00:32:26,000
Five point one gigahertz, 10th generation i7.

333
00:32:26,000 --> 00:32:29,000
I'm going to go with 16 gigs of RAM on this one.

334
00:32:29,000 --> 00:32:31,000
Maybe. You think maybe I should go with 32, Wes?

335
00:32:31,000 --> 00:32:33,000
I think you got to go with 32.

336
00:32:33,000 --> 00:32:34,000
Amen.

337
00:32:34,000 --> 00:32:35,000
It's got Thunderbolt.

338
00:32:35,000 --> 00:32:42,000
You're going to want to use your Thunderbolt dock and do the VM thing that you've been talking about on the show for years, right?

339
00:32:42,000 --> 00:32:43,000
You're right.

340
00:32:43,000 --> 00:32:44,000
Yep.

341
00:32:44,000 --> 00:32:46,000
Plus, you can replace all those pies.

342
00:32:46,000 --> 00:32:47,000
Yeah. All right. OK.

343
00:32:47,000 --> 00:32:52,000
I'm going to go with a terabyte MVME and I'll just stick with one disk with a one year warranty.

344
00:32:52,000 --> 00:33:01,000
It comes out at 2245, which if you think about something like this in comparison to what you get in like a MacBook hardware,

345
00:33:01,000 --> 00:33:07,000
which would be a forty five hundred dollar machine and it wouldn't even have 10th generation Intel CPUs.

346
00:33:07,000 --> 00:33:14,000
And it's just it's remarkable because not only is it price competitive, at least in my opinion, especially for what you get here,

347
00:33:14,000 --> 00:33:21,000
but it is genuinely a unique offering in the Linux space, too, with this firmware level stuff that you've done.

348
00:33:21,000 --> 00:33:27,000
And I'm really glad you came on to tell us a little bit about the behind the scenes of it because I'm able to appreciate it even more now.

349
00:33:27,000 --> 00:33:36,000
And I am so impressed that the work has continued, Jeremy, and I'm glad to I'm glad to hear that some of the work you did previously paid off in getting the orcs ready and that we could see the spread across the line.

350
00:33:36,000 --> 00:33:40,000
I just say, yeah, now we just need to get one and we need to try it.

351
00:33:40,000 --> 00:33:42,000
Awesome. We'll have links in the show notes.

352
00:33:42,000 --> 00:33:47,000
Jeremy, thank you for your time and congratulations on a job well done.

353
00:33:47,000 --> 00:33:50,000
I think your work there has made this and of course, the rest of the team.

354
00:33:50,000 --> 00:33:53,000
But your work there particularly has made this a very competitive product.

355
00:33:53,000 --> 00:33:55,000
It looks really good. I want one.

356
00:33:55,000 --> 00:33:58,000
Awesome. Thanks.

357
00:33:58,000 --> 00:34:06,000
All right. Well, let's talk about another project that is making some fantastic progress.

358
00:34:06,000 --> 00:34:09,000
And that's you reports in the post show when we were just streaming.

359
00:34:09,000 --> 00:34:11,000
It wasn't recorded afterwards. This came up in our virtual log.

360
00:34:11,000 --> 00:34:13,000
It was like, hey, let's get a reports update.

361
00:34:13,000 --> 00:34:19,000
And I thought, you know, it is time because we've got pine phone stuff to talk about and we've got another project I want to chat with.

362
00:34:19,000 --> 00:34:25,000
So we are going to transition from talking about big burly desktops to big burly phones.

363
00:34:25,000 --> 00:34:28,000
And Fred joins us from UberPorts. Fred, welcome to the show.

364
00:34:28,000 --> 00:34:36,000
Oh, hello. I would like to chat a little bit about the pine phone and just get your opinion on the state of affairs and how the pine phone is changing the game.

365
00:34:36,000 --> 00:34:41,000
I got one. I got the Braveheart edition and I haven't yet loaded UberPorts onto it.

366
00:34:41,000 --> 00:34:49,000
If I were to get a pine phone and if I say listener in this case, where to get the pine phone and grab this image, how functional is it at this point?

367
00:34:49,000 --> 00:34:53,000
A lot of hardware actually works. You can do phone calls now.

368
00:34:53,000 --> 00:35:02,000
There is much improved power saving and especially due to the crust work that has been going on in the background.

369
00:35:02,000 --> 00:35:10,000
So you can finally reach about 14 hours of battery standby time, which is not bad at all compared to what we had before.

370
00:35:10,000 --> 00:35:12,000
No kidding.

371
00:35:12,000 --> 00:35:17,000
Yeah, right. On the other hand, though, there are some minor issues still to be worked on.

372
00:35:17,000 --> 00:35:25,000
For example, the GPS stuff. I'm not sure how well progressed that one is, but I'm pretty sure we will get there sooner rather than later.

373
00:35:25,000 --> 00:35:30,000
So you also go by Alfred. In our mumble room, you're going by Fred. But tell us what you do with the project.

374
00:35:30,000 --> 00:35:34,000
We should cover that because I think it's your first time on the show. So we got to do some of the basics.

375
00:35:34,000 --> 00:35:40,000
I joined the Ubiport community almost two years ago and I started out as a porter.

376
00:35:40,000 --> 00:35:47,000
I have been doing ports multiple times and especially for Sailfish OS, for example, on the Galaxy Nexus.

377
00:35:47,000 --> 00:35:53,000
And I thought, hmm, I have this Sony Xperia X lying around here. Maybe I should do something with it.

378
00:35:53,000 --> 00:36:03,000
And I figured there are some people who use it for running Sailfish OS and might as well just try Ubuntu Touch on it

379
00:36:03,000 --> 00:36:06,000
because Jolla has already done a lot of work enabling the hardware.

380
00:36:06,000 --> 00:36:13,000
So I just fiddled around with it a little bit and turns out it was not that hard to get it working.

381
00:36:13,000 --> 00:36:21,000
And it has been a community device for like half a year now. People can download it, people can flash it.

382
00:36:21,000 --> 00:36:29,000
And I'm super proud of the work that has been going in, especially due to the help of the community, getting dual SIM to work.

383
00:36:29,000 --> 00:36:33,000
And yeah, it's a fantastic experience being in the Ubiport community.

384
00:36:33,000 --> 00:36:38,000
That's such a classic scratch your own itch to get started and then it just snowballs into something much bigger.

385
00:36:38,000 --> 00:36:43,000
Is it still your primary device for Ubiports or do you carry another device as your main one?

386
00:36:43,000 --> 00:36:48,000
I carry multiple devices actually around. I have to.

387
00:36:48,000 --> 00:36:51,000
Of course, of course. Why am I not surprised?

388
00:36:51,000 --> 00:36:59,000
For example, the MX4, which has been an Ubuntu Touch device for a long time, but still some bugs come up

389
00:36:59,000 --> 00:37:07,000
and I have to check out a bug report and just fix it whenever something comes up.

390
00:37:07,000 --> 00:37:12,000
But there is also, and that ties into the new work that has been going in with Helium 9,

391
00:37:12,000 --> 00:37:18,000
I'm currently working on a port for the Google Pixel 3a.

392
00:37:18,000 --> 00:37:25,000
And that one is very interesting because the software landscape, the Android landscape has changed so dramatically

393
00:37:25,000 --> 00:37:33,000
just over a short period of time that you have to take into account the changes in partitioning

394
00:37:33,000 --> 00:37:37,000
and changes of how the recovery and the boot image work.

395
00:37:37,000 --> 00:37:46,000
And the Helium 9 version or the Helium project all in all is just moving towards that.

396
00:37:46,000 --> 00:37:54,000
We're not completely there yet, but it's enough to get almost fully functional device working with Android 9 based drivers.

397
00:37:54,000 --> 00:38:00,000
Helium is the project that drives the newer generation of ports for Ubuntu Touch.

398
00:38:00,000 --> 00:38:10,000
The Helium 9 basically is the version of Android 9 modified and adapted to GNU slash Linux typical system.

399
00:38:10,000 --> 00:38:18,000
With Helium 9 especially, the hardware abstraction is getting so good that the performance has been improved,

400
00:38:18,000 --> 00:38:27,000
the hardware support for rotation sensors, etc. has been migrated over to packages from YOLO.

401
00:38:27,000 --> 00:38:36,000
And we can now see that the initial bring up compared to a 7.1 based port is actually much faster

402
00:38:36,000 --> 00:38:41,000
and we reached a lot of goals in a very short amount of time.

403
00:38:41,000 --> 00:38:46,000
Can you help me understand where Project Treble lies in all of this for Ubiports?

404
00:38:46,000 --> 00:38:53,000
Because I saw a story on XDA developers on June 22nd that there is a generic system image

405
00:38:53,000 --> 00:39:00,000
that will just maybe in theory one day bring Ubuntu Touch to any Project Treble supported Android device.

406
00:39:00,000 --> 00:39:04,000
How does that play in here? Is this a realistic thing as far as you're aware?

407
00:39:04,000 --> 00:39:06,000
Is it complement what you're doing already, etc.?

408
00:39:06,000 --> 00:39:15,000
Currently, the work on a generic system image in Project Treble is spearheaded by Irfan, one member of the community.

409
00:39:15,000 --> 00:39:23,000
He's the one that drives the developments on GSI related things, Project Treble related things.

410
00:39:23,000 --> 00:39:31,000
And he basically releases a root fs plus a generic system image flashable as a zip file.

411
00:39:31,000 --> 00:39:40,000
So if you're used to Team Win Recovery, you can just take the zip file and flash a generic system image on your device.

412
00:39:40,000 --> 00:39:49,000
The only thing that is the missing piece or the only two missing pieces right there are a vendor partition that is Project Treble compatible

413
00:39:49,000 --> 00:39:51,000
and a modified kernel image.

414
00:39:51,000 --> 00:39:56,000
So due to the fact that we rely on AppArmor in a big way,

415
00:39:56,000 --> 00:40:02,000
we do require some kernel changes to be present in the kernel image, but as soon as those are in,

416
00:40:02,000 --> 00:40:09,000
you are free to basically take the GSI image, flash it onto your device and enjoy Ubuntu Touch that way.

417
00:40:09,000 --> 00:40:11,000
Okay, so that sounds pretty promising.

418
00:40:11,000 --> 00:40:17,000
Now, to get us ready for today's episode, Mr. Cheese Bacon locked himself in the laboratory and ran some experiments.

419
00:40:17,000 --> 00:40:20,000
So I know he walked away with a few questions for you. So take it away Cheesy.

420
00:40:20,000 --> 00:40:29,000
You know, I'd used UbiPorts last year on a Nexus 5 for a week during Linux Northwest, and it held up great there.

421
00:40:29,000 --> 00:40:36,000
I've noticed I do also have the PinePhone, the original Braveheart edition.

422
00:40:36,000 --> 00:40:42,000
But first off, you guys are doing a fantastic job. I love where you've gone with this so far.

423
00:40:42,000 --> 00:40:43,000
Thank you.

424
00:40:43,000 --> 00:40:49,000
I do have a couple of problems, though, and this may be more hardware related than it is software related.

425
00:40:49,000 --> 00:40:55,000
But I notice that the machine, the phone will boot loop every once in a while.

426
00:40:55,000 --> 00:41:01,000
Whenever it gets to kind of a low power reserve, whenever you plug it in, it will try to power itself on.

427
00:41:01,000 --> 00:41:07,000
But then there's not enough current, I guess, to run the phone itself.

428
00:41:07,000 --> 00:41:09,000
So it kind of goes into this boot loop mode.

429
00:41:09,000 --> 00:41:18,000
And then also, whenever I power my device off, that's when I started incurring this boot loop issue and the battery was completely drained.

430
00:41:18,000 --> 00:41:28,000
I ended up having to pull the battery out, booting to the postmarket OS kind of default firmware that was shipped with it and then reset the battery.

431
00:41:28,000 --> 00:41:32,000
And I was finally able to get back in once there enough current got going to it.

432
00:41:32,000 --> 00:41:36,000
So is that is that a hardware specific issue or is that software related?

433
00:41:36,000 --> 00:41:45,000
Remember in the Android world, when you plug in a phone that is powered off and it tries to charge the device,

434
00:41:45,000 --> 00:41:49,000
there is this low power mode where which the device enters.

435
00:41:49,000 --> 00:41:57,000
And that's the reason you can see this battery symbol in the middle of the screen just showing you that it's charging up.

436
00:41:57,000 --> 00:42:04,000
That is something that is probably missing in the PinePhone world right now or with mainline devices in general.

437
00:42:04,000 --> 00:42:08,000
So there is no special way for the bootloader to tell the OS.

438
00:42:08,000 --> 00:42:17,000
And remember, that is a fully booted Android working in the background just showing you a charging indicator in the middle of the screen.

439
00:42:17,000 --> 00:42:18,000
Wow.

440
00:42:18,000 --> 00:42:20,000
It's definitely something that we can take a look at.

441
00:42:20,000 --> 00:42:29,000
And yeah, there are some differences between what we're used to and what the PinePhone provides or what other mainline devices provide.

442
00:42:29,000 --> 00:42:33,000
So we will definitely have to take a few things into account.

443
00:42:33,000 --> 00:42:38,000
Yeah, and notice, too, and I don't know if this was a recent update because it's been a little bit.

444
00:42:38,000 --> 00:42:46,000
I've actually got a SIM card en route to me so I can try this with full on calls and text and stuff as well.

445
00:42:46,000 --> 00:42:49,000
But the store seems to have changed a little bit.

446
00:42:49,000 --> 00:42:55,000
And now you've implemented the kind of like dislike feature.

447
00:42:55,000 --> 00:43:00,000
Is that is that something that's new to this latest version or is that something you guys have shipped for a little while?

448
00:43:00,000 --> 00:43:08,000
No, that one is actually pretty new in the way that it shipped just like, I believe, one month ago.

449
00:43:08,000 --> 00:43:14,000
The most important thing is shout out to Brian and Joanne who have been working on the redesign.

450
00:43:14,000 --> 00:43:22,000
They have been working very hard on implementing a commenting and liking like feature.

451
00:43:22,000 --> 00:43:26,000
Turns out that people are actually willing to give feedback that way,

452
00:43:26,000 --> 00:43:33,000
which is awesome for me personally because I also do maintain a few applications on the store.

453
00:43:33,000 --> 00:43:40,000
And it is just nice to get feedback from users who actually care about the platform and the applications that run on it.

454
00:43:40,000 --> 00:43:44,000
Alfred, it sounds like there's a lot of things that are continuing to progress forward.

455
00:43:44,000 --> 00:43:49,000
Before we wrap up, I'm just kind of curious to know what you're looking forward to yourself the most next.

456
00:43:49,000 --> 00:44:00,000
I do believe that the ability to plug in a monitor, keyboard and mouse into a phone and present a fully working desktop experience.

457
00:44:00,000 --> 00:44:05,000
That is something that I'm looking forward to just as much as the integration of Lumiri,

458
00:44:05,000 --> 00:44:10,000
the desktop environment into Debian and possibly other distributions.

459
00:44:10,000 --> 00:44:18,000
Just seeing where we were one year ago and how far we have come is actually pretty great to see that.

460
00:44:18,000 --> 00:44:24,000
It's pretty exciting to watch it and it's great to see a lot of hardware options kind of converging in.

461
00:44:24,000 --> 00:44:28,000
So feel free to jump back on the show in the future and let us know when something develops

462
00:44:28,000 --> 00:44:30,000
and keep us updated on it because we'd love to follow it.

463
00:44:30,000 --> 00:44:33,000
And we're rooting for you guys over there. So thank you very much for joining us.

464
00:44:33,000 --> 00:44:35,000
Thank you for having me.

465
00:44:35,000 --> 00:44:43,000
And also Alfred slash Fred stopped by Luplug on Sunday and hung out with us for a little bit during our Luplug, which was great, too.

466
00:44:43,000 --> 00:44:47,000
And it's a great way to test your microphone out and make sure it's working before Tuesday.

467
00:44:47,000 --> 00:44:49,000
So just a little plug for Luplug.

468
00:44:49,000 --> 00:44:52,000
We do it every single Sunday and it's at noon Pacific.

469
00:44:52,000 --> 00:44:54,000
That's the regular time for this show.

470
00:44:54,000 --> 00:44:59,000
It's now on the official Jupiter Broadcasting live calendar, too, at Jupiter Broadcasting dot com slash calendar.

471
00:44:59,000 --> 00:45:04,000
And you just get in the lobby on our Mumble server at noon and just chat Linux.

472
00:45:04,000 --> 00:45:08,000
We had tons of tons of interesting conversations going this last Sunday.

473
00:45:08,000 --> 00:45:10,000
It was it was pretty great.

474
00:45:10,000 --> 00:45:21,000
So the you know, the RV is pretty packed with a little dog, three kids, a wife, and then you've got air conditioners going and TVs going and tablets going.

475
00:45:21,000 --> 00:45:30,000
And so I went out and sat in the car and hung out for a couple hours doing Luplug in the car just with the windows down.

476
00:45:30,000 --> 00:45:33,000
You adorable nerd. Yeah, it was pretty close.

477
00:45:33,000 --> 00:45:37,000
It was a little warm, but it was pretty cool just to hang out and have some have some downtime with the legs.

478
00:45:37,000 --> 00:45:42,000
So check it out every Sunday noon Pacific on this here mobile server.

479
00:45:42,000 --> 00:45:45,000
Wes, what do you say we get to the pics before we get out here?

480
00:45:45,000 --> 00:45:48,000
Because we got a really cool one. Oh, yeah, we do.

481
00:45:48,000 --> 00:45:51,000
Yeah. Now, this is one that we actually did.

482
00:45:51,000 --> 00:45:56,000
We'll do a little demo for you in just a moment because it's something you can hear the difference in.

483
00:45:56,000 --> 00:45:59,000
And I'm going to give a shot at the name, Wes, and then you tell me how it did.

484
00:45:59,000 --> 00:46:02,000
OK, I think it's pronounced Cadmus.

485
00:46:02,000 --> 00:46:05,000
Hmm. I was going with Cadmus.

486
00:46:05,000 --> 00:46:07,000
But Drew, you found this. What's your input?

487
00:46:07,000 --> 00:46:10,000
I'd definitely say Cadmus. What miss?

488
00:46:10,000 --> 00:46:14,000
There's no it's C-A-D-M-U-S. That's muss. What are you talking about?

489
00:46:14,000 --> 00:46:18,000
Cadmus. Cadmus. Maybe Prospect or Chris might know.

490
00:46:18,000 --> 00:46:21,000
It's Cadmus. I'm telling you, it's Cadmus. Don't you know?

491
00:46:21,000 --> 00:46:24,000
Either way, it doesn't really matter how I pronounce it.

492
00:46:24,000 --> 00:46:29,000
It gives you something that is pretty in demand right now for everybody working from home.

493
00:46:29,000 --> 00:46:34,000
And that is better sounding audio despite background conditions.

494
00:46:34,000 --> 00:46:41,000
And Mr. Wes Payne recorded a little sample for us from his home office to give you a demonstration of what it's like in real life.

495
00:46:41,000 --> 00:46:45,000
I'm sitting at my desk getting some work done. Here, you can hear some typing.

496
00:46:51,000 --> 00:46:54,000
This is me typing. Here, I'm typing while talking.

497
00:46:54,000 --> 00:47:01,000
Now, this is just me working away as normal using my regular desktop microphone.

498
00:47:01,000 --> 00:47:04,000
But with Cadmus, we can make things a little bit better.

499
00:47:04,000 --> 00:47:10,000
All right, I'm back again, still at my desk typing away, getting work done.

500
00:47:10,000 --> 00:47:15,000
But you're a little less distracted by the background noise, thanks to Cadmus.

501
00:47:15,000 --> 00:47:18,000
Here's some typing.

502
00:47:18,000 --> 00:47:24,000
And here's me talking while I'm typing. What do you think about this, huh?

503
00:47:24,000 --> 00:47:29,000
All right, now I'm doing some talking and I'm typing at the same time as an example.

504
00:47:29,000 --> 00:47:33,000
It's not perfect. You can hear some artifacting in there.

505
00:47:33,000 --> 00:47:37,000
But for something that you can flip on and start using pretty quickly,

506
00:47:37,000 --> 00:47:42,000
it would make like a meeting go by pretty easily without a bunch of background distraction.

507
00:47:42,000 --> 00:47:44,000
So tell me about the user experience, Wes.

508
00:47:44,000 --> 00:47:46,000
Yeah, this was really easy to get started with.

509
00:47:46,000 --> 00:47:52,000
So it's actually powered behind the scenes, well, first by Ziff's RN Noise,

510
00:47:52,000 --> 00:47:56,000
which is like an open source noise removal implementation.

511
00:47:56,000 --> 00:48:01,000
And then that's wrapped up over in a noise suppression for voice plugin for PulseAudio.

512
00:48:01,000 --> 00:48:06,000
But you have to go load that module yourself and tweak it and set it all up.

513
00:48:06,000 --> 00:48:09,000
Cadmus, on the other hand, is all geared about being easy.

514
00:48:09,000 --> 00:48:12,000
So literally all I did, I mean, there are some dev packages available,

515
00:48:12,000 --> 00:48:17,000
but I just downloaded the app image, you know, Chamad Plus X on it, run it,

516
00:48:17,000 --> 00:48:22,000
and then it pops up in your icon tray and it scans for your available input devices.

517
00:48:22,000 --> 00:48:28,000
And then it adds two virtual PulseAudio devices, so you get an input and an output,

518
00:48:28,000 --> 00:48:31,000
and both of them have been run through the noise removal software automatically,

519
00:48:31,000 --> 00:48:34,000
no setting it up, no tweaking, no anything.

520
00:48:34,000 --> 00:48:36,000
And then you just, you know, select that audio device,

521
00:48:36,000 --> 00:48:40,000
whether you're recording from something or you're just trying to play it out somewhere,

522
00:48:40,000 --> 00:48:41,000
and you're done.

523
00:48:41,000 --> 00:48:42,000
I see.

524
00:48:42,000 --> 00:48:45,000
So it just would like to say you're in a Zoom meeting or a BlueJeans meeting,

525
00:48:45,000 --> 00:48:49,000
you would just choose that as your audio device, and if you select that one,

526
00:48:49,000 --> 00:48:52,000
then you just get the noise suppression version of audio.

527
00:48:52,000 --> 00:48:54,000
Yeah, and I think you could do it either way too.

528
00:48:54,000 --> 00:48:56,000
So you could use it on, you know, if you're listening to a presentation

529
00:48:56,000 --> 00:48:58,000
and you wanted to have it try to remove background noise there,

530
00:48:58,000 --> 00:49:03,000
you could do it that way, or you could do it on your input going to the meeting,

531
00:49:03,000 --> 00:49:05,000
which is, I mean, really flexible.

532
00:49:05,000 --> 00:49:06,000
You're right.

533
00:49:06,000 --> 00:49:08,000
You could totally be watching like a YouTube presentation

534
00:49:08,000 --> 00:49:11,000
that has crappy background sound and you could just flip it.

535
00:49:11,000 --> 00:49:13,000
I didn't really consider that, but that's a good use case too.

536
00:49:13,000 --> 00:49:15,000
So give it to a straight, Drew.

537
00:49:15,000 --> 00:49:17,000
How do you feel about this?

538
00:49:17,000 --> 00:49:19,000
I mean, I know it's not anywhere near what you could do in post,

539
00:49:19,000 --> 00:49:22,000
but I mean, not bad for something that's real time and open source

540
00:49:22,000 --> 00:49:24,000
and pretty simple to set up.

541
00:49:24,000 --> 00:49:28,000
Yeah, I think as with all things audio,

542
00:49:28,000 --> 00:49:30,000
the more background noise it has to filter out,

543
00:49:30,000 --> 00:49:33,000
the worse it's going to be and the worse it's going to sound.

544
00:49:33,000 --> 00:49:38,000
So I would never recommend this for, you know, like professional use

545
00:49:38,000 --> 00:49:41,000
with recorded and released material,

546
00:49:41,000 --> 00:49:46,000
but if you're just like talking on Discord or in a Zoom meeting

547
00:49:46,000 --> 00:49:50,000
or something like that and people don't want to hear the fan behind you

548
00:49:50,000 --> 00:49:54,000
or, you know, you tapping away at your keyboard,

549
00:49:54,000 --> 00:49:58,000
it's a good pick and it's a good option for that sort of thing.

550
00:49:58,000 --> 00:50:03,000
But yeah, I would say that this doesn't even come close to professional grade,

551
00:50:03,000 --> 00:50:06,000
but nothing that's going to run real time is.

552
00:50:06,000 --> 00:50:08,000
It just isn't.

553
00:50:08,000 --> 00:50:10,000
I mean, that's hard.

554
00:50:10,000 --> 00:50:11,000
Yeah, that's true.

555
00:50:11,000 --> 00:50:13,000
You know, Chris, it did do, not perfectly,

556
00:50:13,000 --> 00:50:16,000
but there was some dog barking as I was experimenting with it,

557
00:50:16,000 --> 00:50:19,000
as you well know, and it's decently there.

558
00:50:19,000 --> 00:50:21,000
It kind of makes me think of the recent Google Meet feature

559
00:50:21,000 --> 00:50:24,000
that they rolled out with, you know, their fancy server machine learning

560
00:50:24,000 --> 00:50:27,000
to do the same where, yeah, all right, it's not going to be perfect

561
00:50:27,000 --> 00:50:29,000
and it'll artifact your voice, but if you're not talking

562
00:50:29,000 --> 00:50:32,000
and you don't want to have to constantly mute and unmute yourself,

563
00:50:32,000 --> 00:50:34,000
this might just get you over the line.

564
00:50:34,000 --> 00:50:36,000
Yeah, that very much is true.

565
00:50:36,000 --> 00:50:39,000
At least you won't have a noisy signal going into the meeting.

566
00:50:39,000 --> 00:50:41,000
And I think this sort of showed up on a lot of our radars

567
00:50:41,000 --> 00:50:44,000
when there was the announcement of, I think it was Nvidia RTX Voice

568
00:50:44,000 --> 00:50:48,000
or one of the GPU accelerated voice suppression plug-ins,

569
00:50:48,000 --> 00:50:51,000
and us Linux users were looking around going, oh, wait a minute.

570
00:50:51,000 --> 00:50:54,000
So that's why it was really neat to see this pop in the feed.

571
00:50:54,000 --> 00:50:56,000
Drew found this one and it's pretty cool.

572
00:50:56,000 --> 00:50:58,000
And I completely agree with you guys.

573
00:50:58,000 --> 00:51:02,000
It's both not production grade and also incredible that it does it in real time

574
00:51:02,000 --> 00:51:04,000
as well as it does.

575
00:51:04,000 --> 00:51:06,000
That's pretty much how I see it.

576
00:51:06,000 --> 00:51:08,000
So we'll have a link to that in the show notes.

577
00:51:08,000 --> 00:51:11,000
Guess what? We got links to everything.

578
00:51:11,000 --> 00:51:14,000
LinuxUnplugged.com slash 360.

579
00:51:14,000 --> 00:51:17,000
That's where you'll find all them links to all that stuff over there.

580
00:51:17,000 --> 00:51:19,000
You can also subscribe to the podcast

581
00:51:19,000 --> 00:51:22,000
and just get it when we release an episode right as it's fresh.

582
00:51:22,000 --> 00:51:27,000
There's a subscribe link there and most importantly, a contact link.

583
00:51:27,000 --> 00:51:31,000
We're going to do a follow-up episode very soon

584
00:51:31,000 --> 00:51:35,000
and we would like to get your ideas on topics that we have covered here

585
00:51:35,000 --> 00:51:38,000
on this podcast that you would like to hear us follow up on.

586
00:51:38,000 --> 00:51:40,000
You know, more longer term reviews.

587
00:51:40,000 --> 00:51:43,000
One of the agenda items is NextCloud.

588
00:51:43,000 --> 00:51:47,000
We're going to do a follow-up on our team deployment of NextCloud

589
00:51:47,000 --> 00:51:50,000
more than a year in, I think, on how that's been going,

590
00:51:50,000 --> 00:51:52,000
how much it costs us and all of that.

591
00:51:52,000 --> 00:51:56,000
And anything along those lines where you've heard us talk about a new setup

592
00:51:56,000 --> 00:51:59,000
or review something and you're curious how it's lasted,

593
00:51:59,000 --> 00:52:02,000
how has it held up, let us know.

594
00:52:02,000 --> 00:52:06,000
LinuxUnplugged.com slash contact or tweet me at ChrisLAS

595
00:52:06,000 --> 00:52:10,000
and I'll try to take a note of it so that way we can cover it in the roundup review.

596
00:52:10,000 --> 00:52:12,000
Wes, where can people find you on the internet?

597
00:52:12,000 --> 00:52:14,000
I'm at Wes Payne.

598
00:52:14,000 --> 00:52:15,000
What about you, Mr. Bacon?

599
00:52:15,000 --> 00:52:17,000
I am at Cheese Bacon.

600
00:52:17,000 --> 00:52:18,000
And Drew, how about you?

601
00:52:18,000 --> 00:52:20,000
I am Drew of Doom on Twitter.

602
00:52:20,000 --> 00:52:21,000
There you have it.

603
00:52:21,000 --> 00:52:23,000
Thank you, gentlemen, for being here with us.

604
00:52:23,000 --> 00:52:25,000
Thank you to our Mumble Room for joining us.

605
00:52:25,000 --> 00:52:28,000
Hope to see some of you on Sunday for Luplug.

606
00:52:28,000 --> 00:52:29,000
Always appreciate you.

607
00:52:29,000 --> 00:52:32,000
And a special thank you to those of you watching live,

608
00:52:32,000 --> 00:52:34,000
even if you're not in the Mumble Room or in the IRC room.

609
00:52:34,000 --> 00:52:37,000
We still appreciate you hanging out with us every single Tuesday,

610
00:52:37,000 --> 00:52:39,000
noon Pacific, over at jblive.tv.

611
00:52:39,000 --> 00:52:43,000
And with that, it brings us to the end of this week's episode.

612
00:52:43,000 --> 00:52:47,000
I really had a good time down here in Austin.

613
00:52:47,000 --> 00:52:49,000
I'm beginning the journey home now,

614
00:52:49,000 --> 00:52:53,000
so you may see me tweeting a little bit more as I hit the road at Chris LAS.

615
00:52:53,000 --> 00:52:54,000
Go follow that.

616
00:52:54,000 --> 00:52:58,000
But also, we may end up doing a prerecord on one of our Luplug Sundays,

617
00:52:58,000 --> 00:53:01,000
we'll try to give the Lug a heads up on that.

618
00:53:01,000 --> 00:53:04,000
But if you've been thinking about joining it, this might be the time,

619
00:53:04,000 --> 00:53:07,000
because when we do the prerecords, that's the place to be.

620
00:53:07,000 --> 00:53:10,000
It's like an extra bonus weekend episode.

621
00:53:10,000 --> 00:53:13,000
You just have to show up because you never know when it might happen.

622
00:53:13,000 --> 00:53:42,000
But you can always see us back here next Tuesday!

623
00:53:43,000 --> 00:53:58,000
Levi got bored legitimately in the intro.

624
00:53:58,000 --> 00:54:00,000
He got bored and he was like, okay, I'm done.

625
00:54:00,000 --> 00:54:02,000
And he had been napping all day and chill.

626
00:54:02,000 --> 00:54:05,000
But right before we started, he started getting a little, little barky,

627
00:54:05,000 --> 00:54:08,000
you know, like he's waking up and people were coming and going from the office

628
00:54:08,000 --> 00:54:09,000
where I'm at.

629
00:54:09,000 --> 00:54:11,000
And so I was like, all right, let's get him in here.

630
00:54:11,000 --> 00:54:14,000
We'll get him set up with his bone and get him in his dog bed.

631
00:54:14,000 --> 00:54:17,000
And then next thing I know, he's down on my feet.

632
00:54:17,000 --> 00:54:19,000
And then like later on the show, he's barking.

633
00:54:19,000 --> 00:54:22,000
But thankfully, he didn't bark much when I was talking.

634
00:54:22,000 --> 00:54:26,000
There were a couple of woofs that snuck out that I'm sure Drew will hear

635
00:54:26,000 --> 00:54:27,000
while I was talking.

636
00:54:27,000 --> 00:54:31,000
But other than that, all the other barks happened while I was off mic.

637
00:54:31,000 --> 00:54:34,000
So I'm sitting here doing that dance where I don't have a mute switch with me.

638
00:54:34,000 --> 00:54:38,000
So I'm like, dog, no, no, don't bark.

639
00:54:38,000 --> 00:54:41,000
Because not only is it an office, but I'm doing a podcast.

640
00:54:41,000 --> 00:55:08,000
And now he's looking at me like I'm some sort of maniac.


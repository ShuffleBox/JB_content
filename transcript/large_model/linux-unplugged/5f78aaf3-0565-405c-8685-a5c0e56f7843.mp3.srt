1
00:00:00,000 --> 00:00:03,240
It's for people who like to mess with computers.

2
00:00:03,240 --> 00:00:06,680
This is Linux Unplugged, episode 308,

3
00:00:06,680 --> 00:00:08,840
for some time in the future.

4
00:00:08,840 --> 00:00:20,680
Oh, hey there, yeah, you.

5
00:00:20,680 --> 00:00:23,080
Thanks for tuning in to your weekly Linux talk show.

6
00:00:23,080 --> 00:00:23,960
My name is Chris.

7
00:00:23,960 --> 00:00:25,120
My name is Wes.

8
00:00:25,120 --> 00:00:26,120
Hello, Wes.

9
00:00:26,120 --> 00:00:28,240
This week, we're doing something kind of special.

10
00:00:28,240 --> 00:00:30,280
We're throwing out the regular format,

11
00:00:30,280 --> 00:00:34,440
and we're making an episode all about PCI Passerby.

12
00:00:34,440 --> 00:00:35,920
Wait, wait, finally.

13
00:00:35,920 --> 00:00:36,560
I know.

14
00:00:36,560 --> 00:00:37,440
I know, finally, really.

15
00:00:37,440 --> 00:00:38,880
Actually, this is actually something

16
00:00:38,880 --> 00:00:41,680
I've been wanting to do for, oh, I don't know, about five years.

17
00:00:41,680 --> 00:00:42,840
And we finally get to do it.

18
00:00:42,840 --> 00:00:45,740
But wait, if it's not for you, I encourage you to stick around.

19
00:00:45,740 --> 00:00:46,800
You may learn something.

20
00:00:46,800 --> 00:00:48,640
Maybe it will pique your interest.

21
00:00:48,640 --> 00:00:51,360
This is something that solves a lot of problems.

22
00:00:51,360 --> 00:00:55,120
If you want to run Windows, Mac OS, and Linux at the same time,

23
00:00:55,120 --> 00:00:57,400
maybe you even want to run Windows games

24
00:00:57,400 --> 00:00:59,640
without having to mess with proprietary drivers

25
00:00:59,640 --> 00:01:01,640
on your main Linux desktop.

26
00:01:01,640 --> 00:01:04,400
This is something that can help you achieve that.

27
00:01:04,400 --> 00:01:08,320
And PCI Passerby can also just be a great way

28
00:01:08,320 --> 00:01:10,720
to get full performance when you distro hop.

29
00:01:10,720 --> 00:01:14,440
And I use the term full performance a little vaguely,

30
00:01:14,440 --> 00:01:17,240
but full graphical performance, if nothing else.

31
00:01:17,240 --> 00:01:19,200
For distro hopping, that's such a great way

32
00:01:19,200 --> 00:01:21,280
to try out different Linux distributions

33
00:01:21,280 --> 00:01:25,160
without having to nuke and pave every single time.

34
00:01:25,160 --> 00:01:29,560
Or the slowness and artificial properties of using a VM.

35
00:01:29,560 --> 00:01:32,000
Oh, Wes, oh.

36
00:01:32,000 --> 00:01:37,680
I have got a long sort of sordid history with virtualization.

37
00:01:37,680 --> 00:01:41,040
It really stems back from maybe even

38
00:01:41,040 --> 00:01:45,400
pre-PowerPC on the Macintosh System 7 platform.

39
00:01:45,400 --> 00:01:51,360
You had Virtual PC, which would emulate the entire Intel stack.

40
00:01:51,360 --> 00:01:55,400
It had to do translation from Intel to PowerPC

41
00:01:55,400 --> 00:01:57,840
to execute on a PowerPC system, where

42
00:01:57,840 --> 00:02:00,240
it might have been an 8086 system back then.

43
00:02:00,240 --> 00:02:01,440
I don't remember what they were.

44
00:02:01,440 --> 00:02:02,800
Those were the days.

45
00:02:02,800 --> 00:02:05,440
So you were really in real virtualization.

46
00:02:05,440 --> 00:02:08,360
As time went on, if money was available,

47
00:02:08,360 --> 00:02:11,120
you could buy a expansion, I think

48
00:02:11,120 --> 00:02:13,160
it was NetBus card, that you would

49
00:02:13,160 --> 00:02:16,140
install that had an Intel processor and memory on it.

50
00:02:16,140 --> 00:02:19,560
It was like an entire PC on an expansion card

51
00:02:19,560 --> 00:02:22,280
that would then communicate with proprietary, expensive

52
00:02:22,280 --> 00:02:25,680
virtualization software.

53
00:02:25,680 --> 00:02:28,440
So desktop virtualization has come a long way.

54
00:02:28,440 --> 00:02:31,440
And server virtualization has come even further.

55
00:02:31,440 --> 00:02:34,200
I have a long history with VMware and server

56
00:02:34,200 --> 00:02:35,640
virtualization, too.

57
00:02:35,640 --> 00:02:37,440
One of the best things about desktop Linux

58
00:02:37,440 --> 00:02:39,960
is we can take advantage of all of the developments

59
00:02:39,960 --> 00:02:43,720
and progress in the server space right here on our workstations.

60
00:02:43,720 --> 00:02:46,520
So there are a few caveats about PCIe Pass.

61
00:02:46,520 --> 00:02:48,320
There's a few things you have to know.

62
00:02:48,320 --> 00:02:50,720
But I thought we'd start with describing our hardware setup

63
00:02:50,720 --> 00:02:53,000
so you have an idea of what works for us.

64
00:02:53,000 --> 00:02:54,400
And maybe you can build your setups around there.

65
00:02:54,400 --> 00:02:56,020
So let's start by going around the horn,

66
00:02:56,020 --> 00:02:59,580
because also on the line we have Cheese, Alex, and Drew.

67
00:02:59,580 --> 00:03:03,240
Alex, let's start with your virtualization setup.

68
00:03:03,240 --> 00:03:03,840
Right then.

69
00:03:03,840 --> 00:03:06,960
So this topic is something that I've

70
00:03:06,960 --> 00:03:09,720
been secretly hoping you would cover for years.

71
00:03:09,720 --> 00:03:13,520
And I'm so happy that I'm around whilst you're doing it.

72
00:03:13,520 --> 00:03:18,200
PCIe Pass got me into Linux in the first place in 2013.

73
00:03:18,200 --> 00:03:20,440
I'm just looking back at the Linux server blog.

74
00:03:20,440 --> 00:03:23,640
And I have a post dated 10th of August, 2013,

75
00:03:23,640 --> 00:03:28,180
how to compile a custom kernel ready for Xen and Ubuntu

76
00:03:28,180 --> 00:03:30,120
Server 1304.

77
00:03:30,120 --> 00:03:30,800
Oh, boy.

78
00:03:30,800 --> 00:03:31,960
So that's going back a bit.

79
00:03:31,960 --> 00:03:33,720
Yeah, I think you probably have the longest

80
00:03:33,720 --> 00:03:35,460
standing on the panel here.

81
00:03:35,460 --> 00:03:36,960
Back then, there was a whole bunch

82
00:03:36,960 --> 00:03:39,120
of stuff you had to consider.

83
00:03:39,120 --> 00:03:41,080
But there's a few things that have remained

84
00:03:41,080 --> 00:03:42,440
constant throughout that period.

85
00:03:42,440 --> 00:03:44,720
And the most important thing to get right

86
00:03:44,720 --> 00:03:46,480
is your physical hardware.

87
00:03:46,480 --> 00:03:50,160
So there's a few prerequisites that you need.

88
00:03:50,160 --> 00:03:52,680
First of all, your CPU must support

89
00:03:52,680 --> 00:03:57,960
what's called VT-D or VTX if you're in the Intel world.

90
00:03:57,960 --> 00:03:59,200
I forget the name of the AMD one,

91
00:03:59,200 --> 00:04:01,540
but there's a similar equivalent.

92
00:04:01,540 --> 00:04:04,100
So not only must your CPU actually support it,

93
00:04:04,100 --> 00:04:05,980
and you can use the Intel Arc to tell you

94
00:04:05,980 --> 00:04:08,280
whether it does or not, your motherboard

95
00:04:08,280 --> 00:04:09,520
must also support it.

96
00:04:09,520 --> 00:04:13,200
But on top of that, your specific BIOS version

97
00:04:13,200 --> 00:04:14,080
must support it.

98
00:04:14,080 --> 00:04:17,160
So there have been cases where BIOS updates have

99
00:04:17,160 --> 00:04:18,880
broken PCR pass-through for people

100
00:04:18,880 --> 00:04:20,040
and they've had to downgrade.

101
00:04:20,040 --> 00:04:24,680
So it's cutting edge, a lot less so

102
00:04:24,680 --> 00:04:26,960
than it was five, six years ago.

103
00:04:26,960 --> 00:04:30,200
But it's still, some assembly is required.

104
00:04:30,200 --> 00:04:30,960
Yeah, that's fair.

105
00:04:30,960 --> 00:04:32,160
That's definitely fair.

106
00:04:32,160 --> 00:04:34,760
Now, most Xeons, in fact, I think all Xeons

107
00:04:34,760 --> 00:04:37,960
have shipped with VT-D extensions for the longest time.

108
00:04:37,960 --> 00:04:41,000
So you don't need to worry if you have a Xeon-based system,

109
00:04:41,000 --> 00:04:42,560
because servers and things like that

110
00:04:42,560 --> 00:04:47,280
have been using pass-through for NICs and SATA controllers

111
00:04:47,280 --> 00:04:50,200
and all sorts of stuff for a long time.

112
00:04:50,200 --> 00:04:52,900
What got me the most excited about this stuff a few years

113
00:04:52,900 --> 00:04:57,280
ago was being able to put a video card in my system.

114
00:04:57,280 --> 00:05:00,800
So back then, you used to need an AMD card.

115
00:05:00,800 --> 00:05:04,680
But nowadays, you can use an AMD card or an NVIDIA card

116
00:05:04,680 --> 00:05:07,040
with some caveats, which we'll probably come to later.

117
00:05:07,040 --> 00:05:10,240
And when you say passing through the video card,

118
00:05:10,240 --> 00:05:13,160
you essentially are blacklisting it

119
00:05:13,160 --> 00:05:15,180
from the underlying operating system

120
00:05:15,180 --> 00:05:17,960
and exclusively making it available to the virtualization

121
00:05:17,960 --> 00:05:19,160
subsystem.

122
00:05:19,160 --> 00:05:22,840
And it shows up in your VM as if it was plugged right

123
00:05:22,840 --> 00:05:24,920
into that VM's PCI bus.

124
00:05:24,920 --> 00:05:26,920
And the operating system in your VM

125
00:05:26,920 --> 00:05:29,640
is responsible for the driver and the communication

126
00:05:29,640 --> 00:05:31,800
with the hardware, the whole lot.

127
00:05:31,800 --> 00:05:34,320
The VM has no idea that it's not directly connected

128
00:05:34,320 --> 00:05:37,240
to the PCI bus as if it was a native machine.

129
00:05:37,240 --> 00:05:40,180
So that's why the performance is roughly

130
00:05:40,180 --> 00:05:43,360
between 95% and 98% of bare metal performance,

131
00:05:43,360 --> 00:05:46,280
which is, for all intents and purposes, pretty good.

132
00:05:46,280 --> 00:05:47,740
Pretty, pretty good.

133
00:05:47,740 --> 00:05:50,480
And then there's also the visceral experience,

134
00:05:50,480 --> 00:05:52,240
in my case, although there's other ways

135
00:05:52,240 --> 00:05:53,680
to do this, which we'll cover.

136
00:05:53,680 --> 00:05:57,680
I have then a physical monitor plugged into that video card.

137
00:05:57,680 --> 00:05:59,920
And I'm also using a physical mouse and keyboard that are

138
00:05:59,920 --> 00:06:02,000
plugged into dedicated USB ports.

139
00:06:02,000 --> 00:06:05,720
So the VM that I am using feels completely

140
00:06:05,720 --> 00:06:07,520
to my monkey brain like a dedicated PC,

141
00:06:07,520 --> 00:06:09,320
because it's got a screen, it's got a mouse,

142
00:06:09,320 --> 00:06:11,960
it's got a keyboard, and everything's fully accelerated.

143
00:06:11,960 --> 00:06:16,280
Now, CPUs prior to Skylake, Intel did some skew,

144
00:06:16,280 --> 00:06:19,680
skull-doggery, ooh, that's a nice phrase,

145
00:06:19,680 --> 00:06:23,820
where they limited VTD to non-K chips only.

146
00:06:23,820 --> 00:06:26,560
So traditionally, the K chips were their overclocking chips,

147
00:06:26,560 --> 00:06:29,400
and the non-K chips were not.

148
00:06:29,400 --> 00:06:31,500
And if you wanted to do this virtualization

149
00:06:31,500 --> 00:06:32,920
pass-through, PCI pass-through, you

150
00:06:32,920 --> 00:06:38,480
had to buy an i5-3570, not the 3570K, for example.

151
00:06:38,480 --> 00:06:41,160
So from Skylake onwards, though, I

152
00:06:41,160 --> 00:06:45,200
think pretty much every CPU included VTD.

153
00:06:45,200 --> 00:06:48,580
But use the Intel Arc to double check what the CPU does

154
00:06:48,580 --> 00:06:49,600
and does not support.

155
00:06:49,600 --> 00:06:51,880
Sounds especially annoying for gamers, right?

156
00:06:51,880 --> 00:06:54,840
You might want to overclock, and then you couldn't

157
00:06:54,840 --> 00:06:56,080
use something like pass-through.

158
00:06:56,080 --> 00:06:59,000
Yeah, it's one of these things that really turns me off Intel,

159
00:06:59,000 --> 00:07:01,800
to be honest, and makes me hate them.

160
00:07:01,800 --> 00:07:04,240
There's some stuff that Nvidia have done as well,

161
00:07:04,240 --> 00:07:05,260
which we'll come to.

162
00:07:05,260 --> 00:07:08,560
But these big guys, they just have

163
00:07:08,560 --> 00:07:11,720
this way of differentiating their products that is just BS,

164
00:07:11,720 --> 00:07:13,440
and it's really annoying sometimes.

165
00:07:13,440 --> 00:07:16,200
Yeah, it comes down to artificial limitations,

166
00:07:16,200 --> 00:07:19,560
so that way they can charge more for the enterprise-grade chips.

167
00:07:19,560 --> 00:07:21,280
In the case of Intel, it's Xeons.

168
00:07:21,280 --> 00:07:25,400
And in the case of Nvidia, it's their higher-end graphics card

169
00:07:25,400 --> 00:07:26,960
that they sell to businesses.

170
00:07:26,960 --> 00:07:29,120
Now, we'll circle back to video here in a moment,

171
00:07:29,120 --> 00:07:31,080
because there's still some fundamentals that your system

172
00:07:31,080 --> 00:07:32,440
has to be able to support.

173
00:07:32,440 --> 00:07:34,120
And there's a very important concept

174
00:07:34,120 --> 00:07:35,600
that you have to understand in order

175
00:07:35,600 --> 00:07:38,880
to group these PCI devices together and allocate them

176
00:07:38,880 --> 00:07:39,440
to your VM.

177
00:07:39,440 --> 00:07:42,920
Do you want to cover the IOMMU grouping stuff real quick?

178
00:07:42,920 --> 00:07:44,680
Yeah, so to pass a device through,

179
00:07:44,680 --> 00:07:47,560
you must pass an entire IOMMU group.

180
00:07:47,560 --> 00:07:49,720
Yeah, I'm sorry, but just to interrupt really quick,

181
00:07:49,720 --> 00:07:52,880
what is an IOMMU group in really basic terms?

182
00:07:52,880 --> 00:07:54,680
So far as I understand it, and I'm probably

183
00:07:54,680 --> 00:07:57,760
going to butcher this, but it's a logical grouping of devices

184
00:07:57,760 --> 00:07:58,800
on the motherboard.

185
00:07:58,800 --> 00:08:01,680
So I think it's got something to do with PCI lanes

186
00:08:01,680 --> 00:08:05,160
and how they're presented to the CPU and all that kind of thing.

187
00:08:05,160 --> 00:08:08,560
So often, what you'll find on consumer-grade motherboards

188
00:08:08,560 --> 00:08:11,920
is that two or three different PCI slots are grouped together

189
00:08:11,920 --> 00:08:13,160
into a single group.

190
00:08:13,160 --> 00:08:14,620
And that doesn't sound like a big deal

191
00:08:14,620 --> 00:08:19,380
until you're doing one VM has a graphics card,

192
00:08:19,380 --> 00:08:21,720
and then you want your host to also have a graphics card

193
00:08:21,720 --> 00:08:22,620
as well, for example.

194
00:08:22,620 --> 00:08:24,960
So you've got two GPUs in this system.

195
00:08:24,960 --> 00:08:27,960
Now, if they're both in the same IOMMU group,

196
00:08:27,960 --> 00:08:32,520
then you're unable to tell the VM to only grab

197
00:08:32,520 --> 00:08:33,480
that single device.

198
00:08:33,480 --> 00:08:36,080
It will try and grab everything in that group.

199
00:08:36,080 --> 00:08:40,360
So the same is true of USB controllers or SATA controllers

200
00:08:40,360 --> 00:08:40,840
or anything.

201
00:08:40,840 --> 00:08:43,840
Each thing has to be in its own group for separation.

202
00:08:43,840 --> 00:08:45,680
And you have to bring over the entire group.

203
00:08:45,680 --> 00:08:48,120
So here's a perfect example that just about anybody

204
00:08:48,120 --> 00:08:50,520
doing video pass-through will run into.

205
00:08:50,520 --> 00:08:55,040
Most modern video cards have an HDMI port.

206
00:08:55,040 --> 00:08:58,320
Well, that HDMI port includes audio.

207
00:08:58,320 --> 00:09:01,400
And so that actually, the audio component of HDMI

208
00:09:01,400 --> 00:09:04,560
shows up as a separate device on the PCI bus.

209
00:09:04,560 --> 00:09:07,840
And you need to blacklist both of those devices

210
00:09:07,840 --> 00:09:10,320
and then allocate them to the VM,

211
00:09:10,320 --> 00:09:13,640
because they're all in that IOMMU group.

212
00:09:13,640 --> 00:09:16,580
And the other thing that, in my case, was very relevant

213
00:09:16,580 --> 00:09:20,040
is a Thunderbolt 3 device, all of those devices

214
00:09:20,040 --> 00:09:23,480
in that Thunderbolt 3 device are in a PCI group

215
00:09:23,480 --> 00:09:25,640
or an IOMMU group.

216
00:09:25,640 --> 00:09:27,600
And that, in my case, worked really well,

217
00:09:27,600 --> 00:09:29,760
because I could dedicate the entire dock to the VM

218
00:09:29,760 --> 00:09:30,800
in that instance.

219
00:09:30,800 --> 00:09:32,200
Yeah, and like server equipment.

220
00:09:32,200 --> 00:09:34,120
So we talked about Xeons being well-supported.

221
00:09:34,120 --> 00:09:39,440
Server motherboards often have very generous IOMMU groups.

222
00:09:39,440 --> 00:09:42,320
So they have one group per PCI slot, for example,

223
00:09:42,320 --> 00:09:44,240
because they know that a lot of their customers

224
00:09:44,240 --> 00:09:45,840
are going to be doing this.

225
00:09:45,840 --> 00:09:47,160
So all hope is not lost.

226
00:09:47,160 --> 00:09:49,280
If you have bought a consumer-grade motherboard

227
00:09:49,280 --> 00:09:54,400
that groups multiple PCI ports together under the same group,

228
00:09:54,400 --> 00:09:57,360
you can apply an ACS kernel patch,

229
00:09:57,360 --> 00:10:01,480
which will artificially separate those devices out

230
00:10:01,480 --> 00:10:03,160
into separate groups, allowing you

231
00:10:03,160 --> 00:10:07,120
to have multiple devices in the same physical group.

232
00:10:07,120 --> 00:10:09,140
But so far as your OS is concerned,

233
00:10:09,140 --> 00:10:10,760
they're in a different logical grouping.

234
00:10:10,760 --> 00:10:12,440
So it works just fine.

235
00:10:12,440 --> 00:10:14,960
There are some security concerns.

236
00:10:14,960 --> 00:10:16,320
And I forget exactly what they are.

237
00:10:16,320 --> 00:10:18,640
But you want to be sure that you understand

238
00:10:18,640 --> 00:10:21,520
the ramifications of this ACS patch before you apply it,

239
00:10:21,520 --> 00:10:25,340
because it can allow for some nasty things, breakouts

240
00:10:25,340 --> 00:10:27,080
from the VMs, for example.

241
00:10:27,080 --> 00:10:30,880
Yeah, it essentially does not guarantee isolation

242
00:10:30,880 --> 00:10:33,040
for a particular device.

243
00:10:33,040 --> 00:10:36,880
So while it does get quote unquote isolated,

244
00:10:36,880 --> 00:10:42,080
it's not quite the same where something could potentially

245
00:10:42,080 --> 00:10:46,080
use it to break out of a VM and attack the host.

246
00:10:46,080 --> 00:10:47,680
Right, and to be clear, this is only

247
00:10:47,680 --> 00:10:51,880
if you're using that workaround, that ACS patch.

248
00:10:51,880 --> 00:10:54,420
And in my case, this actually works out fantastic,

249
00:10:54,420 --> 00:10:57,680
because I'm passing through Thunderbolt 3 devices.

250
00:10:57,680 --> 00:10:59,820
And on these Thunderbolt 3 devices,

251
00:10:59,820 --> 00:11:01,360
I want the gigabit ethernet.

252
00:11:01,360 --> 00:11:02,720
I want the USB bus.

253
00:11:02,720 --> 00:11:05,320
I want the sound card, the display port, the GPU.

254
00:11:05,320 --> 00:11:08,200
I want it all to go to the virtual machine.

255
00:11:08,200 --> 00:11:11,160
So it just happened to be in my particular setup.

256
00:11:11,160 --> 00:11:12,880
Having to group all these together anyways

257
00:11:12,880 --> 00:11:16,920
made it actually simpler to just pass the entire Thunderbolt 3

258
00:11:16,920 --> 00:11:18,640
devices through to the VM.

259
00:11:18,640 --> 00:11:20,720
And in my case, I'm not breaking any isolation.

260
00:11:20,720 --> 00:11:22,140
I'm not running any risk.

261
00:11:22,140 --> 00:11:23,400
It's perfectly safe.

262
00:11:23,400 --> 00:11:28,400
I'll tell you another use case where this ACS patch is useful.

263
00:11:28,400 --> 00:11:30,840
So if you have multiple identical graphics cards

264
00:11:30,840 --> 00:11:34,440
in the same system, let's say you've got two RX 560s,

265
00:11:34,440 --> 00:11:37,240
for example, or two 1060s, or something,

266
00:11:37,240 --> 00:11:41,520
two GPUs that present themselves as their PCI IDs

267
00:11:41,520 --> 00:11:45,240
as the same device, that can be really tricky.

268
00:11:45,240 --> 00:11:47,800
And sometimes you need to move the physical devices around

269
00:11:47,800 --> 00:11:49,520
in the actual slots on your motherboard

270
00:11:49,520 --> 00:11:51,760
to get the host to pick up the right GPU first.

271
00:11:51,760 --> 00:11:54,320
So in my system here, for example,

272
00:11:54,320 --> 00:11:57,400
I have an RX 560 and a 1080 Ti.

273
00:11:57,400 --> 00:11:59,680
The 560 is in the top slot on the motherboard,

274
00:11:59,680 --> 00:12:01,760
and the 1080 is in the second slot, which

275
00:12:01,760 --> 00:12:05,040
is the other way around to what you would think to get the 16x

276
00:12:05,040 --> 00:12:06,960
and the 8x slots.

277
00:12:06,960 --> 00:12:08,600
In reality, that performance difference

278
00:12:08,600 --> 00:12:12,840
is so negligible that I don't actually care about that.

279
00:12:12,840 --> 00:12:15,800
And by having it this way around, my arch host

280
00:12:15,800 --> 00:12:20,240
can pick up the AMD GPU first and use that for Linux

281
00:12:20,240 --> 00:12:22,560
with all the native kernel support it has.

282
00:12:22,560 --> 00:12:25,240
And then my guest just picks up the second slot,

283
00:12:25,240 --> 00:12:27,720
and it just works.

284
00:12:27,720 --> 00:12:30,160
Now we'll get more into our individual setups,

285
00:12:30,160 --> 00:12:33,880
because each one of us has a very different setup.

286
00:12:33,880 --> 00:12:35,640
But one thing that's going to be common

287
00:12:35,640 --> 00:12:40,040
is all of these VMs will use an open source UEFI firmware.

288
00:12:40,040 --> 00:12:42,920
They have to be on UEFI firmwares for this to work.

289
00:12:42,920 --> 00:12:45,920
Yeah, so the magic that makes all this possible is OVMF.

290
00:12:45,920 --> 00:12:49,160
That was one of the things a few years ago

291
00:12:49,160 --> 00:12:51,160
that caused a lot of headaches.

292
00:12:51,160 --> 00:12:54,520
So if I look at one of my really old blog posts

293
00:12:54,520 --> 00:12:58,160
from September 2013, I am looking at a Windows 8 VM,

294
00:12:58,160 --> 00:13:00,840
just to give you an idea of the context of where

295
00:13:00,840 --> 00:13:04,280
we were at that point, kernel 3.10 for Linux.

296
00:13:04,280 --> 00:13:05,880
So it's quite a long time ago.

297
00:13:05,880 --> 00:13:08,680
You used to have to eject your graphics card

298
00:13:08,680 --> 00:13:12,760
before rebooting the VM, because if you didn't do that,

299
00:13:12,760 --> 00:13:15,360
then the firmware on the graphics card didn't reset.

300
00:13:15,360 --> 00:13:17,520
So when you reboot your system, there's

301
00:13:17,520 --> 00:13:19,880
a whole bunch of resetting of different firmwares.

302
00:13:19,880 --> 00:13:22,320
And basically, the graphics card has a small BIOS on it

303
00:13:22,320 --> 00:13:24,080
as well.

304
00:13:24,080 --> 00:13:26,080
That doesn't sound like too big of a deal

305
00:13:26,080 --> 00:13:27,880
until something like Windows Update

306
00:13:27,880 --> 00:13:33,160
comes along and just randomly reboots your VM for fun.

307
00:13:33,160 --> 00:13:37,240
So I had to write these very basic scripts back in the day

308
00:13:37,240 --> 00:13:41,400
that ran in a registry key that ejected the graphics

309
00:13:41,400 --> 00:13:44,040
card at startup and shut down in the Windows VM

310
00:13:44,040 --> 00:13:45,640
to get around that problem.

311
00:13:45,640 --> 00:13:49,200
Now, these days with OVMF, it's so easy

312
00:13:49,200 --> 00:13:52,680
that the UEFI BIOSes on all these cards

313
00:13:52,680 --> 00:13:56,880
just handles the resets, even in a VM scenario, just fine.

314
00:13:56,880 --> 00:14:01,840
So you can reboot, shut down, reattach to a different VM.

315
00:14:01,840 --> 00:14:04,040
You can go to town and go crazy, and it will just

316
00:14:04,040 --> 00:14:06,720
continue to work, and it won't lock up the host anymore.

317
00:14:06,720 --> 00:14:11,560
I have had bad luck with my RX 570

318
00:14:11,560 --> 00:14:14,960
doing a full reset, where in some cases with Windows

319
00:14:14,960 --> 00:14:18,680
and Mac VMs, I have to power off the system

320
00:14:18,680 --> 00:14:20,400
or sleep the system, the host system,

321
00:14:20,400 --> 00:14:22,240
before the graphics will reset.

322
00:14:22,240 --> 00:14:25,400
Did not have that issue with the NVIDIA graphics,

323
00:14:25,400 --> 00:14:26,200
which surprised me.

324
00:14:26,200 --> 00:14:28,280
I thought it'd be the other way around.

325
00:14:28,280 --> 00:14:30,000
OK, now why don't we get into our setups?

326
00:14:30,000 --> 00:14:32,360
Because I think that's an interesting bit here is,

327
00:14:32,360 --> 00:14:33,880
and then we'll get into configuring

328
00:14:33,880 --> 00:14:35,200
the various aspects of it, depending

329
00:14:35,200 --> 00:14:35,880
on what your setup is.

330
00:14:35,880 --> 00:14:37,240
I also want to get into something

331
00:14:37,240 --> 00:14:39,680
like Looking Glass, if you don't necessarily

332
00:14:39,680 --> 00:14:43,080
want to have a dedicated monitor, dedicated hardware.

333
00:14:43,080 --> 00:14:44,620
There's other solutions there too.

334
00:14:44,620 --> 00:14:49,800
But Alex, let's start with your current PCI pass-through setup.

335
00:14:49,800 --> 00:14:50,680
I have two.

336
00:14:50,680 --> 00:14:54,720
So my main desktop rig is, as I've said,

337
00:14:54,720 --> 00:14:57,920
it's got an RX 560 and a 1080 TI in it.

338
00:14:57,920 --> 00:15:00,720
The 1080 is dedicated to Windows,

339
00:15:00,720 --> 00:15:03,680
and the RX 560 is dedicated to Linux.

340
00:15:03,680 --> 00:15:05,300
And to be honest with you, the only reason

341
00:15:05,300 --> 00:15:07,200
I have Windows lying around these days

342
00:15:07,200 --> 00:15:09,740
is for Adobe stuff, for Lightroom and Photoshop

343
00:15:09,740 --> 00:15:11,200
and that kind of thing.

344
00:15:11,200 --> 00:15:18,560
It's an Intel CPU, an 8700K, and 32 gigs of RAM.

345
00:15:18,560 --> 00:15:21,440
So not that much RAM, but it works just fine.

346
00:15:21,440 --> 00:15:23,440
You're doing a dedicated disk, or are you just

347
00:15:23,440 --> 00:15:25,320
doing a Cal file or somewhere?

348
00:15:25,320 --> 00:15:26,240
How are you doing that?

349
00:15:26,240 --> 00:15:27,240
Oh, yes.

350
00:15:27,240 --> 00:15:28,760
Disks are important to talk about.

351
00:15:28,760 --> 00:15:32,640
So when you've got two machines on your system,

352
00:15:32,640 --> 00:15:34,720
you're probably going to want to make sure that there's

353
00:15:34,720 --> 00:15:38,440
at least a SSD per machine.

354
00:15:38,440 --> 00:15:41,200
Now, you can run your virtual machine out of a QCOW image

355
00:15:41,200 --> 00:15:43,280
on the same SSD as your host OS.

356
00:15:43,280 --> 00:15:45,200
Obviously, that's going to limit performance,

357
00:15:45,200 --> 00:15:47,600
because there's only so many inputs and outputs

358
00:15:47,600 --> 00:15:51,120
physically a device can do in any given time.

359
00:15:51,120 --> 00:15:54,240
So I have a dedicated SATA controller

360
00:15:54,240 --> 00:15:58,560
that I pass through to the VM so that the guest just

361
00:15:58,560 --> 00:16:02,200
sees a native SSD as if it was plugged straight in.

362
00:16:02,200 --> 00:16:05,400
Now, there is one other thing that's worth talking about.

363
00:16:05,400 --> 00:16:07,360
There's these VertIO drivers.

364
00:16:07,360 --> 00:16:09,480
Now, they are developed by Red Hat,

365
00:16:09,480 --> 00:16:13,680
and they enable a huge performance leap over just

366
00:16:13,680 --> 00:16:15,680
standard SATA emulation.

367
00:16:15,680 --> 00:16:17,180
Now, when you're installing Windows,

368
00:16:17,180 --> 00:16:19,560
there's a few hoops you'll need to jump through in terms

369
00:16:19,560 --> 00:16:20,760
of enabling drivers.

370
00:16:20,760 --> 00:16:24,240
So in the installer, you'll need to load up

371
00:16:24,240 --> 00:16:27,200
not only the Windows ISO, but also a VertIO ISO,

372
00:16:27,200 --> 00:16:28,680
which is available in the show notes.

373
00:16:28,680 --> 00:16:29,920
There's a link.

374
00:16:29,920 --> 00:16:35,280
And with that VertIO ISO, you'll need to browse through

375
00:16:35,280 --> 00:16:39,720
and find the storage driver to enable Windows

376
00:16:39,720 --> 00:16:41,360
to see the VertIO drive.

377
00:16:41,360 --> 00:16:43,760
Otherwise, when you get to the Install page,

378
00:16:43,760 --> 00:16:45,840
and it says, select the device you want to install,

379
00:16:45,840 --> 00:16:47,760
it will just be a blank list.

380
00:16:47,760 --> 00:16:49,780
And that foxed me for quite a while.

381
00:16:49,780 --> 00:16:52,640
The fun of Windows, ooh.

382
00:16:52,640 --> 00:16:56,140
VertIO is amazing, because the system, the driver,

383
00:16:56,140 --> 00:16:57,640
is aware that it's virtualized.

384
00:16:57,640 --> 00:16:59,960
And so it communicates intelligently

385
00:16:59,960 --> 00:17:01,160
with the hypervisor.

386
00:17:01,160 --> 00:17:04,400
And just a quick rabbit hole tangent to that,

387
00:17:04,400 --> 00:17:06,200
QMU developer, I think Alex, you're

388
00:17:06,200 --> 00:17:08,160
the one that noticed this, thinks

389
00:17:08,160 --> 00:17:13,160
that it looks like Apple is adding early support for VertIO

390
00:17:13,160 --> 00:17:18,360
and frame buffer graphics to the latest iterations of Mojave

391
00:17:18,360 --> 00:17:20,440
and Catalina.

392
00:17:20,440 --> 00:17:25,460
So it looks like Apple is adding virtualization VertIO driver

393
00:17:25,460 --> 00:17:29,560
support to Mac OS, which is going to make this even easier

394
00:17:29,560 --> 00:17:30,320
down the road.

395
00:17:30,320 --> 00:17:33,440
Would that justify $100,000 cheese grater to you?

396
00:17:33,440 --> 00:17:37,360
No, because I can run this on a custom built Linux box

397
00:17:37,360 --> 00:17:39,400
and get GPU performance in Mac OS.

398
00:17:39,400 --> 00:17:40,900
In fact, we'll get there in a moment.

399
00:17:40,900 --> 00:17:43,940
But is there any other notes on your setup?

400
00:17:43,940 --> 00:17:46,120
That's a pretty comprehensive review.

401
00:17:46,120 --> 00:17:46,720
I like that.

402
00:17:46,720 --> 00:17:48,080
I like the SATA pass-through tip.

403
00:17:48,080 --> 00:17:51,760
I am using a QCOW file on my laptop disk,

404
00:17:51,760 --> 00:17:54,200
because obviously I can't stuff a ton of SATA disk in there.

405
00:17:54,200 --> 00:17:58,160
And I do notice a bit of a performance impact.

406
00:17:58,160 --> 00:18:00,320
Nothing major, ones like games are loaded and stuff.

407
00:18:00,320 --> 00:18:03,840
But yeah, during patching and whatnot, it's brutal.

408
00:18:03,840 --> 00:18:06,260
As a few other things, like CPU pinning, for example,

409
00:18:06,260 --> 00:18:07,040
for performance.

410
00:18:07,040 --> 00:18:09,100
So you need to ensure that your host system has

411
00:18:09,100 --> 00:18:12,440
at least one full core available to use at all times.

412
00:18:12,440 --> 00:18:16,760
Otherwise, if your host system runs out of CPU time,

413
00:18:16,760 --> 00:18:18,560
you're going to have a bad time.

414
00:18:18,560 --> 00:18:20,440
The other thing is, how do you handle

415
00:18:20,440 --> 00:18:22,900
sound and keyboard and mice?

416
00:18:22,900 --> 00:18:24,520
So sound is a tricky one.

417
00:18:24,520 --> 00:18:27,440
There's lots of different options here.

418
00:18:27,440 --> 00:18:28,920
The one that I'm using at the moment

419
00:18:28,920 --> 00:18:32,200
is to stream from the guest through to Pulse Audio

420
00:18:32,200 --> 00:18:33,320
on the host.

421
00:18:33,320 --> 00:18:34,680
And that works fine.

422
00:18:34,680 --> 00:18:36,280
It can be a little crackly at times,

423
00:18:36,280 --> 00:18:39,720
but not enough that I bothered to fix it.

424
00:18:39,720 --> 00:18:42,440
The other thing is, you could just buy a USB DAC,

425
00:18:42,440 --> 00:18:43,800
for example, sound card.

426
00:18:43,800 --> 00:18:45,400
Plug that in and pass that through.

427
00:18:45,400 --> 00:18:49,080
And that will give you audio directly from the host.

428
00:18:49,080 --> 00:18:53,960
Another neat way to do it is to use the HDMI headphone out

429
00:18:53,960 --> 00:18:57,480
on your display to plug into your sound that way.

430
00:18:57,480 --> 00:18:59,680
So when you switch the input on a display,

431
00:18:59,680 --> 00:19:02,080
you're automatically switching the sound input as well.

432
00:19:02,080 --> 00:19:03,480
So that's another way to do it.

433
00:19:03,480 --> 00:19:05,720
I'll add, just for context, what I decided to do

434
00:19:05,720 --> 00:19:07,780
was get a USB gaming headset.

435
00:19:07,780 --> 00:19:09,320
And I use that for all kinds of stuff.

436
00:19:09,320 --> 00:19:11,440
And if I want audio, I just plug that in.

437
00:19:11,440 --> 00:19:15,560
OK, Drew, so you've recently set up a PCI pass-through.

438
00:19:15,560 --> 00:19:17,800
And I think it's a little different than what we're doing.

439
00:19:17,800 --> 00:19:19,000
So tell me about your setup.

440
00:19:19,000 --> 00:19:22,480
So my setup is on a Ryzen-based system.

441
00:19:22,480 --> 00:19:27,860
So I am using AMD-V instead of VTD.

442
00:19:27,860 --> 00:19:30,280
And that works fine.

443
00:19:30,280 --> 00:19:32,600
That I had no problems with at all,

444
00:19:32,600 --> 00:19:36,880
was pretty much out of the box on the latest kernel, which

445
00:19:36,880 --> 00:19:41,720
at the time is 5.1.2, I want to say.

446
00:19:41,720 --> 00:19:42,760
Are you on Fedora?

447
00:19:42,760 --> 00:19:43,600
Currently, yes.

448
00:19:43,600 --> 00:19:47,960
And the reason I'm on Fedora is I had started this journey

449
00:19:47,960 --> 00:19:49,240
on Ubuntu.

450
00:19:49,240 --> 00:19:52,040
And I ran into some issues because I

451
00:19:52,040 --> 00:19:56,660
do have an RX 580 and an RX 480.

452
00:19:56,660 --> 00:19:59,920
And they do show up with the same device IDs.

453
00:19:59,920 --> 00:20:03,000
So while they were in different IOMMU groups,

454
00:20:03,000 --> 00:20:07,880
I could not select just one of them to pass through.

455
00:20:07,880 --> 00:20:11,720
And I started, I even rolled a whole kernel.

456
00:20:11,720 --> 00:20:15,440
But I couldn't get the init RAM FS script that

457
00:20:15,440 --> 00:20:18,200
would detect the boot GPU and then pass

458
00:20:18,200 --> 00:20:20,940
through the non-boot GPU through.

459
00:20:20,940 --> 00:20:23,600
I couldn't get that to run reliably.

460
00:20:23,600 --> 00:20:25,840
So I ended up going back to Fedora

461
00:20:25,840 --> 00:20:29,840
because in all honesty, I'm just more comfortable with Drakut

462
00:20:29,840 --> 00:20:32,600
and using their init RAM FS system.

463
00:20:32,600 --> 00:20:35,540
To me, it's more transparent and easier for me to read.

464
00:20:35,540 --> 00:20:38,320
I'm sure I probably could have gotten there on Ubuntu.

465
00:20:38,320 --> 00:20:40,440
But it would have taken a lot more time.

466
00:20:40,440 --> 00:20:42,120
And I wanted to get this going.

467
00:20:42,120 --> 00:20:44,440
So yeah, over to Fedora.

468
00:20:44,440 --> 00:20:48,320
And it turns out I needed to use the ACS patch.

469
00:20:48,320 --> 00:20:51,720
Well, there is a handy dandy pre-built kernel for it

470
00:20:51,720 --> 00:20:54,400
in copper.

471
00:20:54,400 --> 00:20:55,880
So I grabbed that.

472
00:20:55,880 --> 00:20:57,880
That'll be linked in the show notes.

473
00:20:57,880 --> 00:21:01,380
And loaded up the init RAM FS script

474
00:21:01,380 --> 00:21:03,400
that I grabbed from the Arch Wiki

475
00:21:03,400 --> 00:21:07,720
and dropped that into Drakut and off to the races.

476
00:21:07,720 --> 00:21:14,520
It immediately put that second RX card into the VFIO drivers

477
00:21:14,520 --> 00:21:17,600
and dropped it out of the host system entirely.

478
00:21:17,600 --> 00:21:20,680
So like that monitor, boot up, that monitor's black.

479
00:21:20,680 --> 00:21:22,240
It's not picking up anything.

480
00:21:22,240 --> 00:21:24,520
And I could pass it straight through

481
00:21:24,520 --> 00:21:26,880
to the VM, which is great.

482
00:21:26,880 --> 00:21:31,480
Now, currently, the way I'm doing keyboard and mouse

483
00:21:31,480 --> 00:21:37,680
is I am also passing through the USB 3.1 ports on my tower.

484
00:21:37,680 --> 00:21:41,800
And I have a little USB 3 breakout

485
00:21:41,800 --> 00:21:46,200
that I can plug between the front panel on my computer

486
00:21:46,200 --> 00:21:51,880
to a USB extension that runs back to that USB 3.1

487
00:21:51,880 --> 00:21:53,040
that I'm passing through.

488
00:21:53,040 --> 00:21:54,280
And these are different devices.

489
00:21:54,280 --> 00:21:56,800
So you still have USB ports for the host system.

490
00:21:56,800 --> 00:21:58,640
But then you have a separate USB controller

491
00:21:58,640 --> 00:22:00,720
that you can pass through to the guest?

492
00:22:00,720 --> 00:22:01,600
Exactly, yeah.

493
00:22:01,600 --> 00:22:05,520
So I just move that USB hub from one port to the other.

494
00:22:05,520 --> 00:22:09,960
And boom, donzo, I've switched from controlling my host

495
00:22:09,960 --> 00:22:11,560
to my VM.

496
00:22:11,560 --> 00:22:14,160
So that was the simplest, easiest solution.

497
00:22:14,160 --> 00:22:18,080
There's a fun little USB switcher thing

498
00:22:18,080 --> 00:22:21,120
that you can buy, which is a box which has two USB cables coming

499
00:22:21,120 --> 00:22:21,780
out the back.

500
00:22:21,780 --> 00:22:24,880
One you plug into one bus, one you plug into the other bus

501
00:22:24,880 --> 00:22:26,480
that's passed through to the VM.

502
00:22:26,480 --> 00:22:27,640
And then there's a button on top of it

503
00:22:27,640 --> 00:22:29,360
that you can physically press.

504
00:22:29,360 --> 00:22:30,880
Where do I find this?

505
00:22:30,880 --> 00:22:33,200
I'll find a link and put it in the show notes.

506
00:22:33,200 --> 00:22:33,880
Thank you.

507
00:22:33,880 --> 00:22:37,160
Yeah, I need that real bad.

508
00:22:37,160 --> 00:22:41,560
So now for disks, I had originally

509
00:22:41,560 --> 00:22:46,280
started trying to use a spare partition that I had.

510
00:22:46,280 --> 00:22:49,480
But because this is UEFI, you can't really

511
00:22:49,480 --> 00:22:51,600
use just a single partition.

512
00:22:51,600 --> 00:22:54,360
The UEFI just does not work properly,

513
00:22:54,360 --> 00:22:58,680
because it'll see that there is another UEFI on that same disk

514
00:22:58,680 --> 00:23:00,040
and try to boot through that.

515
00:23:00,040 --> 00:23:02,600
You have to do a whole disk.

516
00:23:02,600 --> 00:23:04,260
And Alex, you can correct me if I'm wrong.

517
00:23:04,260 --> 00:23:09,000
Maybe I didn't do it right, but it did not work for me.

518
00:23:09,000 --> 00:23:11,800
So I think I need to go out and buy another SSD

519
00:23:11,800 --> 00:23:14,820
and slap it in my tower to really do it right.

520
00:23:14,820 --> 00:23:18,120
But right now, I'm using a raw image, not QCOW, but raw.

521
00:23:18,120 --> 00:23:20,480
Why raw over QCOW?

522
00:23:20,480 --> 00:23:24,040
Just because it's a little more performant.

523
00:23:24,040 --> 00:23:27,680
And since I'm just using this for gaming and nothing

524
00:23:27,680 --> 00:23:30,740
business facing, I don't really need the extra safety

525
00:23:30,740 --> 00:23:32,440
that QCOW provides.

526
00:23:32,440 --> 00:23:33,480
Yeah, that makes sense.

527
00:23:33,480 --> 00:23:35,960
Yeah, I had the same internal debate myself.

528
00:23:35,960 --> 00:23:38,480
So that's curious.

529
00:23:38,480 --> 00:23:40,800
So once everything was all said and done with the pass-through

530
00:23:40,800 --> 00:23:45,160
and all of that, did you run into any issues with the VM?

531
00:23:45,160 --> 00:23:46,720
In particular, like Windows, when

532
00:23:46,720 --> 00:23:48,520
you're working with an NVIDIA card,

533
00:23:48,520 --> 00:23:51,160
it can kind of suss out that it's in a VM.

534
00:23:51,160 --> 00:23:54,040
And the NVIDIA driver can essentially disable itself.

535
00:23:54,040 --> 00:23:56,880
And that's where you get this really common code 43

536
00:23:56,880 --> 00:23:58,680
in the event log that says, or it's

537
00:23:58,680 --> 00:24:01,160
even when you just go into Device Manager

538
00:24:01,160 --> 00:24:03,200
and you look at the driver, it'll be disabled.

539
00:24:03,200 --> 00:24:06,000
And you go in there, and it'll say error 43 or code 43.

540
00:24:06,000 --> 00:24:07,800
Device could not be properly initialized.

541
00:24:07,800 --> 00:24:09,200
Did you run into any of that kind of stuff?

542
00:24:09,200 --> 00:24:10,240
That's really common.

543
00:24:10,240 --> 00:24:13,160
No, I use AMD because they don't pull

544
00:24:13,160 --> 00:24:14,840
those kind of shenanigans.

545
00:24:14,840 --> 00:24:15,280
You know what?

546
00:24:15,280 --> 00:24:15,940
You say that.

547
00:24:15,940 --> 00:24:16,500
You say that.

548
00:24:16,500 --> 00:24:22,120
However, I also, in this whole journey,

549
00:24:22,120 --> 00:24:27,480
I switched from an NVIDIA card to an AMD RX 570.

550
00:24:27,480 --> 00:24:31,360
And man, it worked perfectly under Windows 10.

551
00:24:31,360 --> 00:24:33,640
And Mac OS just automatically detected it.

552
00:24:33,640 --> 00:24:35,100
Never got it to work under Linux,

553
00:24:35,100 --> 00:24:36,800
so I wonder if something's wrong there.

554
00:24:36,800 --> 00:24:40,540
But under Windows 10, it works perfectly, full acceleration,

555
00:24:40,540 --> 00:24:43,940
until I upgrade to the absolute latest Insider build,

556
00:24:43,940 --> 00:24:46,120
so that way I could try out the WSL 2.

557
00:24:46,120 --> 00:24:47,960
We were going to do a little report on it.

558
00:24:47,960 --> 00:24:50,700
And when I do that, when I get to the latest build of Windows

559
00:24:50,700 --> 00:24:55,240
and it sucks down a newer version of the GPU driver,

560
00:24:55,240 --> 00:24:58,520
it disables my card, and I actually get code 43 now

561
00:24:58,520 --> 00:25:02,180
in Event View or in the log for my AMD card.

562
00:25:02,180 --> 00:25:04,480
It goes from working to not working.

563
00:25:04,480 --> 00:25:06,820
I'd be cautious about throwing shade

564
00:25:06,820 --> 00:25:10,640
based on an Insider build, though, that's pre-release.

565
00:25:10,640 --> 00:25:11,480
Yeah.

566
00:25:11,480 --> 00:25:13,040
Yeah, however, I did.

567
00:25:13,040 --> 00:25:16,840
So get this, Daddy-O. I went back

568
00:25:16,840 --> 00:25:20,520
to a clean Windows 10 standard install, which is up to date,

569
00:25:20,520 --> 00:25:24,020
but it's just on a regular default track,

570
00:25:24,020 --> 00:25:27,120
and downloaded the latest AMD driver from their website,

571
00:25:27,120 --> 00:25:28,680
installed that, same issue.

572
00:25:30,040 --> 00:25:32,960
I don't know, because I pulled the latest AMD driver

573
00:25:32,960 --> 00:25:36,160
off the website just yesterday to do the install,

574
00:25:36,160 --> 00:25:37,300
and it worked fine for me.

575
00:25:37,300 --> 00:25:39,720
I'm loving Drew calling you on this, Chris.

576
00:25:39,720 --> 00:25:40,560
I know.

577
00:25:40,560 --> 00:25:42,840
Well, it really could be something in my setup,

578
00:25:42,840 --> 00:25:44,480
because it's a new video card.

579
00:25:44,480 --> 00:25:46,360
So you've got to work these things out.

580
00:25:46,360 --> 00:25:47,200
Well, that's a pretty solid.

581
00:25:47,200 --> 00:25:48,460
So what are you using it for, Drew?

582
00:25:48,460 --> 00:25:49,920
Is it Windows stuff you're using it for,

583
00:25:49,920 --> 00:25:52,480
or what's the utility you get out of this?

584
00:25:52,480 --> 00:25:54,400
Windows 10 gaming.

585
00:25:54,400 --> 00:25:57,520
So my wife is obsessed with this game called Arc,

586
00:25:57,520 --> 00:25:59,920
and they just put out a new map,

587
00:25:59,920 --> 00:26:01,760
and occasionally I like to play with her.

588
00:26:01,760 --> 00:26:06,520
Now, Arc has a native Linux build, but it's terrible,

589
00:26:06,520 --> 00:26:10,680
and trying to run it through Proton technically works,

590
00:26:10,680 --> 00:26:15,680
but it also uses BattleEye, so it's real hit or miss.

591
00:26:16,640 --> 00:26:18,120
And so I thought, well, okay,

592
00:26:18,120 --> 00:26:20,560
I want to play with her on this new map,

593
00:26:20,560 --> 00:26:23,560
so why don't I try this pass-through thing?

594
00:26:23,560 --> 00:26:26,440
And yeah, I was able to get into the game

595
00:26:26,440 --> 00:26:29,720
and play a little bit, and it works just great.

596
00:26:29,720 --> 00:26:31,580
It's the only way I'm going to run Windows now.

597
00:26:31,580 --> 00:26:33,640
It's like, it's Windows with a safety net,

598
00:26:33,640 --> 00:26:35,480
because you've got snapshots,

599
00:26:35,480 --> 00:26:38,720
you can physically copy the image file around.

600
00:26:38,720 --> 00:26:41,880
It really, it feels like safe Windows to me,

601
00:26:41,880 --> 00:26:43,800
and I like it.

602
00:26:43,800 --> 00:26:47,640
So I'll just briefly, my setup is two different setups.

603
00:26:47,640 --> 00:26:50,720
I've got what I call a virtualization go-bag,

604
00:26:50,720 --> 00:26:51,640
and I'm very proud of this.

605
00:26:51,640 --> 00:26:52,720
I showed it to Wes the other day,

606
00:26:52,720 --> 00:26:54,480
and I was just going on and on about it.

607
00:26:54,480 --> 00:26:56,160
I am so jealous,

608
00:26:56,160 --> 00:26:58,720
and since I have the same backpack you used,

609
00:26:58,720 --> 00:27:00,080
I might have to copy you.

610
00:27:00,080 --> 00:27:03,200
Yeah, I use the swag backpack we got from Red Hat Summit,

611
00:27:03,200 --> 00:27:06,400
and I use that as my virtualization go-bag.

612
00:27:06,400 --> 00:27:07,960
So it's a companion backpack

613
00:27:07,960 --> 00:27:09,840
that goes with my laptop backpack,

614
00:27:09,840 --> 00:27:11,520
and I don't take it with me everywhere,

615
00:27:11,520 --> 00:27:14,760
but I do sometimes take it between the studio and the RV.

616
00:27:14,760 --> 00:27:19,760
And inside this backpack is a tiny HDMI 1080p LCD screen.

617
00:27:21,120 --> 00:27:23,260
It's brilliant, because it's so compact.

618
00:27:23,260 --> 00:27:24,880
Like, it's just super dense pixels,

619
00:27:24,880 --> 00:27:26,280
and it just looks gorgeous,

620
00:27:26,280 --> 00:27:28,040
and it's a very vibrant screen.

621
00:27:28,040 --> 00:27:33,040
HDMI cable that goes into the Thunderbolt 3 Lenovo GPU dock

622
00:27:33,640 --> 00:27:34,480
that I got.

623
00:27:34,480 --> 00:27:35,720
I've talked about it before on the show.

624
00:27:35,720 --> 00:27:37,360
This is why I bought the GPU dock too,

625
00:27:37,360 --> 00:27:38,800
because I plan to do something like this, you know?

626
00:27:38,800 --> 00:27:40,320
And so I have that in there,

627
00:27:40,320 --> 00:27:41,740
which has a Thunderbolt 3 cable

628
00:27:41,740 --> 00:27:44,080
that connects to the ThinkPad T480.

629
00:27:44,080 --> 00:27:47,080
I've got a USB gaming headset, a USB mouse,

630
00:27:47,080 --> 00:27:49,520
and a tiny portable USB keyboard

631
00:27:49,520 --> 00:27:50,680
that all go in this backpack,

632
00:27:50,680 --> 00:27:53,120
plus the power adapter that powers the whole thing.

633
00:27:53,120 --> 00:27:55,640
I bust all that stuff out, I hook it up.

634
00:27:55,640 --> 00:27:58,560
And in that, I've essentially got in that backpack

635
00:27:58,560 --> 00:28:03,560
a Mac, a Win 10 VM, and an Ubuntu 1910 VM,

636
00:28:04,640 --> 00:28:07,240
which I use for all kinds of different testing.

637
00:28:07,240 --> 00:28:09,560
The host system, like I said, is the ThinkPad.

638
00:28:09,560 --> 00:28:13,920
It runs Fedora 30, and it's been a dream to set this up.

639
00:28:13,920 --> 00:28:16,480
I use Vert Manager as the software front end

640
00:28:16,480 --> 00:28:17,860
to manage my VMs.

641
00:28:17,860 --> 00:28:19,820
I love it, because I also have Vert Manager

642
00:28:19,820 --> 00:28:22,320
connected now to the on-premises server

643
00:28:22,320 --> 00:28:24,440
that we have here at the studio,

644
00:28:24,440 --> 00:28:26,080
and I can manage those virtual machines

645
00:28:26,080 --> 00:28:30,680
and my local virtual machines all through one UI.

646
00:28:30,680 --> 00:28:35,080
It also is a very easy way, by the way, BT dubs,

647
00:28:35,080 --> 00:28:36,740
to go through and select the PCI devices

648
00:28:36,740 --> 00:28:39,200
you wanna pass through to the guest.

649
00:28:39,200 --> 00:28:42,360
It's just nice, because I like seeing the device names,

650
00:28:42,360 --> 00:28:45,280
selecting it, hitting apply, and then it's boom, it's set up.

651
00:28:45,280 --> 00:28:46,520
Oh, that sounds really nice.

652
00:28:46,520 --> 00:28:47,840
Yeah, you gotta do the blacklisting

653
00:28:47,840 --> 00:28:50,260
of the PCI devices first, but once you've got them

654
00:28:50,260 --> 00:28:52,960
blacklisted on the host system, which is not hard to do,

655
00:28:52,960 --> 00:28:55,500
it's really just a matter of getting a list

656
00:28:55,500 --> 00:28:57,960
of the PCI devices on your Linux box.

657
00:28:57,960 --> 00:28:59,160
Checking it twice, I'm sure.

658
00:28:59,160 --> 00:29:02,860
Yeah, and we'll have some guides linked in the show notes.

659
00:29:02,860 --> 00:29:04,160
That's worth mentioning, Wes,

660
00:29:04,160 --> 00:29:06,120
because if you blacklist the wrong device,

661
00:29:06,120 --> 00:29:08,240
your system may not boot, because suddenly

662
00:29:08,240 --> 00:29:10,960
the hard drive's ripped out from under the feet of the OS.

663
00:29:10,960 --> 00:29:12,280
Just be careful with that.

664
00:29:12,280 --> 00:29:13,120
Pro.

665
00:29:13,120 --> 00:29:16,160
Yeah, yeah, yeah, so you get a list of the PCI devices,

666
00:29:16,160 --> 00:29:19,120
you blacklist their individual IDs, you reboot,

667
00:29:19,120 --> 00:29:21,100
and then you go into Vert Manager,

668
00:29:21,100 --> 00:29:22,680
and as you're setting up the VM,

669
00:29:22,680 --> 00:29:24,960
you can go in and configure it for the additional options,

670
00:29:24,960 --> 00:29:27,960
and you add hardware, and one of them is pass-through devices,

671
00:29:27,960 --> 00:29:29,400
and you just start clicking on them.

672
00:29:29,400 --> 00:29:31,960
It won't let you add a device you haven't blacklisted.

673
00:29:31,960 --> 00:29:34,840
If a PCI device is in use, it won't let you assign it

674
00:29:34,840 --> 00:29:36,960
to a VM, so it's pretty easy.

675
00:29:36,960 --> 00:29:40,000
You can't put a square thing into a round hole in this case.

676
00:29:40,000 --> 00:29:41,920
And once you have it all set up, you double click it,

677
00:29:41,920 --> 00:29:43,400
you start it.

678
00:29:43,400 --> 00:29:45,880
When you start it, it is such a sensation,

679
00:29:45,880 --> 00:29:49,560
because you start what feels like a piece of software

680
00:29:49,560 --> 00:29:53,000
on your laptop, and all these other physical hardware

681
00:29:53,000 --> 00:29:54,320
devices light up.

682
00:29:54,320 --> 00:29:56,840
The monitor comes on, the keyboard lights up,

683
00:29:56,840 --> 00:29:59,560
the USB audio card turns on, the blue light comes on,

684
00:29:59,560 --> 00:30:01,120
I hear that pop in the speakers.

685
00:30:01,120 --> 00:30:03,480
It is amazing.

686
00:30:03,480 --> 00:30:06,000
You've just magicked up another computer.

687
00:30:06,000 --> 00:30:06,600
Exactly.

688
00:30:06,600 --> 00:30:07,900
I've conjured it from nothing.

689
00:30:07,900 --> 00:30:09,320
I've conjured it from nothing.

690
00:30:09,320 --> 00:30:12,200
And what's crazy about it is, with modern systems,

691
00:30:12,200 --> 00:30:15,240
with SSDs, and eighth generation processors,

692
00:30:15,240 --> 00:30:19,320
and et cetera, et cetera, you don't even really

693
00:30:19,320 --> 00:30:20,760
feel it on the host.

694
00:30:20,760 --> 00:30:22,160
I'm just sitting there, I'm still

695
00:30:22,160 --> 00:30:25,040
running like a dozen and a half electron apps,

696
00:30:25,040 --> 00:30:30,080
I'm browsing websites in Chrome, I'm updating packages.

697
00:30:30,080 --> 00:30:32,200
You don't even feel it on the host system,

698
00:30:32,200 --> 00:30:34,200
because there's so much power to spare.

699
00:30:34,200 --> 00:30:36,200
I've got cores for days, right?

700
00:30:36,200 --> 00:30:38,720
And I've got 32 gigs of RAM in a laptop.

701
00:30:38,720 --> 00:30:41,840
So it's just brilliant, because you've

702
00:30:41,840 --> 00:30:45,840
got so much horsepower to spare that you can actually

703
00:30:45,840 --> 00:30:48,560
have another complete environment.

704
00:30:48,560 --> 00:30:53,280
And if you're even the slightest distro hopper or distro curious,

705
00:30:53,280 --> 00:30:56,720
this is so wonderful, because I finally

706
00:30:56,720 --> 00:30:59,360
got the perfect Linux desktop.

707
00:30:59,360 --> 00:31:02,440
I am so happy with this setup.

708
00:31:02,440 --> 00:31:05,840
I am so happy with where things are at right now in 2019,

709
00:31:05,840 --> 00:31:09,480
because Linux is just doing so well.

710
00:31:09,480 --> 00:31:12,920
The Mac is finally getting interesting again.

711
00:31:12,920 --> 00:31:15,520
Windows 10 is not like Windows before.

712
00:31:15,520 --> 00:31:18,120
That's something else I've learned in this experiment,

713
00:31:18,120 --> 00:31:21,280
is they're doing different stuff with Windows 10.

714
00:31:21,280 --> 00:31:24,980
When you bring Windows 10 up to the latest Insider builds,

715
00:31:24,980 --> 00:31:26,440
and you get everything up to date

716
00:31:26,440 --> 00:31:32,600
so you can run WSL and all those new goodies, it's a new OS.

717
00:31:32,600 --> 00:31:36,080
It's absolutely something Microsoft would have held back

718
00:31:36,080 --> 00:31:39,080
and made a different OS in years past.

719
00:31:39,080 --> 00:31:42,200
I mean, I'm talking different UI, different assistance pop-up,

720
00:31:42,200 --> 00:31:44,520
different menu options, completely different

721
00:31:44,520 --> 00:31:46,280
configuration options.

722
00:31:46,280 --> 00:31:48,040
It's a different start menu.

723
00:31:48,040 --> 00:31:49,960
The login screen is different.

724
00:31:49,960 --> 00:31:53,360
Everything changes in these later Insider builds.

725
00:31:53,360 --> 00:31:55,120
And it's so exciting to watch.

726
00:31:55,120 --> 00:31:56,680
I'm not going to switch to Windows 10.

727
00:31:56,680 --> 00:31:58,800
I'm not going to switch to the Mac.

728
00:31:58,800 --> 00:32:01,720
But it is fun right now.

729
00:32:01,720 --> 00:32:04,520
The platforms are actually getting interesting again.

730
00:32:04,520 --> 00:32:06,560
I happen to think Linux is the best right now.

731
00:32:06,560 --> 00:32:08,920
And now it's letting me play with these other things

732
00:32:08,920 --> 00:32:10,360
occasionally.

733
00:32:10,360 --> 00:32:14,200
But more importantly, I can keep trying out the latest Linux

734
00:32:14,200 --> 00:32:18,020
distributions without wiping my main setup.

735
00:32:18,020 --> 00:32:26,160
And that's where I can fence off all the proprietary crap.

736
00:32:26,160 --> 00:32:29,520
All of the closed source video card drivers,

737
00:32:29,520 --> 00:32:34,800
like for the NVIDIA card, or proprietary games and software,

738
00:32:34,800 --> 00:32:37,160
that's all now in these VMs.

739
00:32:37,160 --> 00:32:41,600
And my desktop is like this pure open source stack.

740
00:32:41,600 --> 00:32:43,500
That's just a rock solid machine.

741
00:32:43,500 --> 00:32:45,500
And if nothing else, that's what I love about it.

742
00:32:45,500 --> 00:32:46,580
It seems like it would work really well

743
00:32:46,580 --> 00:32:48,040
for any sort of appliance, right?

744
00:32:48,040 --> 00:32:49,800
Like maybe if you were going to record a show

745
00:32:49,800 --> 00:32:52,720
and you could just sort of dock your ThinkPad into this setup

746
00:32:52,720 --> 00:32:54,600
and have all the sound devices ready,

747
00:32:54,600 --> 00:32:57,000
software configured in the VM set to go,

748
00:32:57,000 --> 00:32:59,200
and you don't have to fuzz with it.

749
00:32:59,200 --> 00:33:01,960
As we're recording this, we're recording this a little early

750
00:33:01,960 --> 00:33:04,320
because of travel.

751
00:33:04,320 --> 00:33:07,160
Last night, the Linus Tech Tips channel

752
00:33:07,160 --> 00:33:12,280
released a video with something like six editors, one PC,

753
00:33:12,280 --> 00:33:16,960
where they're using this technology with a GUI on top.

754
00:33:16,960 --> 00:33:20,540
They're using Unraid as a KVM management tool.

755
00:33:20,540 --> 00:33:25,360
And they're allocating each developer an SSD,

756
00:33:25,360 --> 00:33:27,840
like 30 gigs of RAM or something like that,

757
00:33:27,840 --> 00:33:30,560
a Titan video card.

758
00:33:30,560 --> 00:33:33,360
And they're essentially setting up one Linux

759
00:33:33,360 --> 00:33:36,120
PC to power six editing stations.

760
00:33:36,120 --> 00:33:38,000
Yeah, it did cost them $100,000.

761
00:33:38,000 --> 00:33:41,280
So it's in Mac Pro price territory.

762
00:33:41,280 --> 00:33:43,520
So my other setup is I recently got,

763
00:33:43,520 --> 00:33:46,480
and I'll have a link to this, a Mantiz eGPU dock.

764
00:33:46,480 --> 00:33:51,240
And this thing's pretty neat because a Mantiz,

765
00:33:51,240 --> 00:33:56,620
it's with a Z, it has not only a full sized PCI slot

766
00:33:56,620 --> 00:34:01,360
for a full graphics card, so I put a AMD 570 in there.

767
00:34:01,360 --> 00:34:05,560
But it also has a SATA enclosure inside,

768
00:34:05,560 --> 00:34:08,800
so you can have a dedicated SATA disk.

769
00:34:08,800 --> 00:34:15,480
It has a USB hub, so it's got, I think, five USB 3 ports.

770
00:34:15,480 --> 00:34:18,160
And it's got gigabit ethernet.

771
00:34:18,160 --> 00:34:22,240
That's everything you need to make a virtual machine

772
00:34:22,240 --> 00:34:24,280
essentially a real PC.

773
00:34:24,280 --> 00:34:26,240
There's really not much fake about it at that point

774
00:34:26,240 --> 00:34:30,520
because I'm using real USB, real ethernet, real graphics,

775
00:34:30,520 --> 00:34:33,320
real physical devices to interact with it.

776
00:34:33,320 --> 00:34:35,520
It's running inside a VM, but it's not really

777
00:34:35,520 --> 00:34:39,640
that much more unusual than a regular machine at that point.

778
00:34:39,640 --> 00:34:42,300
You just happen to be using the CPU virtually.

779
00:34:42,300 --> 00:34:43,520
Everything else is real.

780
00:34:43,520 --> 00:34:45,200
Right, yes, absolutely.

781
00:34:45,200 --> 00:34:48,280
Right, yeah, you're just kind of loaning it some compute.

782
00:34:48,280 --> 00:34:51,640
Yes, and it's all coming in over one Thunderbolt 3

783
00:34:51,640 --> 00:34:54,160
cable, which also, by the way, happens

784
00:34:54,160 --> 00:34:55,880
to supply power to my laptop.

785
00:34:55,880 --> 00:34:59,040
So I'm doing all of this with literally only a single cable

786
00:34:59,040 --> 00:35:00,240
coming out of my laptop.

787
00:35:00,240 --> 00:35:03,320
Now, there's video cable and USB cables and stuff

788
00:35:03,320 --> 00:35:05,720
coming out the back of the eGPU box.

789
00:35:05,720 --> 00:35:09,480
But the laptop, it's one cable, and it does all of this.

790
00:35:09,480 --> 00:35:11,280
But still, shut up and take my money.

791
00:35:11,280 --> 00:35:12,500
That sounds amazing.

792
00:35:12,500 --> 00:35:14,160
It's so great.

793
00:35:14,160 --> 00:35:16,640
It's so fun.

794
00:35:16,640 --> 00:35:18,260
And to really be able to play around

795
00:35:18,260 --> 00:35:23,000
with these operating systems and feel like they're full speed,

796
00:35:23,000 --> 00:35:24,000
I'm never going back.

797
00:35:24,000 --> 00:35:27,240
And I can honestly see myself not really needing

798
00:35:27,240 --> 00:35:29,560
to reload my laptop, as long as the base OS continues

799
00:35:29,560 --> 00:35:30,400
to run fine.

800
00:35:30,400 --> 00:35:32,960
The base OS matters less than ever,

801
00:35:32,960 --> 00:35:36,600
with Docker and containers and this and everything.

802
00:35:36,600 --> 00:35:37,600
I looked last night.

803
00:35:37,600 --> 00:35:41,680
I haven't reloaded my art system in 18 months,

804
00:35:41,680 --> 00:35:42,720
because I don't need to.

805
00:35:42,720 --> 00:35:45,660
Every time I get this itch, I can just spin up a VM

806
00:35:45,660 --> 00:35:48,840
and pass the graphics card through, and it's so good.

807
00:35:48,840 --> 00:35:50,520
Proxmox is another way to do this, right?

808
00:35:50,520 --> 00:35:52,720
Doesn't Proxmox now support PCIe pass-through?

809
00:35:52,720 --> 00:35:56,440
Yeah, so Proxmox just uses KVM under the hood anyway.

810
00:35:56,440 --> 00:35:57,840
And this was a second setup, which

811
00:35:57,840 --> 00:36:00,320
I realized I forgot to talk about.

812
00:36:00,320 --> 00:36:02,600
So in my basement, I have a file server,

813
00:36:02,600 --> 00:36:07,740
which is serving Plex and a whole bunch of other stuff.

814
00:36:07,740 --> 00:36:10,360
I also have a PFSense VM on there.

815
00:36:10,360 --> 00:36:15,560
Now, that VM has a 4 gigabit Intel NIC card,

816
00:36:15,560 --> 00:36:18,400
with two of those ports pass-through.

817
00:36:18,400 --> 00:36:21,200
One plugs into the WAN port on the back of my router,

818
00:36:21,200 --> 00:36:23,120
and the other one plugs into my LAN.

819
00:36:23,120 --> 00:36:25,240
And so I have a fully virtualized PFSense,

820
00:36:25,240 --> 00:36:27,280
and I've been running it now since I moved here,

821
00:36:27,280 --> 00:36:28,920
so since September.

822
00:36:28,920 --> 00:36:31,240
And it's been great.

823
00:36:31,240 --> 00:36:33,860
The only time I've had an issue is when the power's gone out,

824
00:36:33,860 --> 00:36:36,720
and I haven't been home, because my router hasn't rebooted

825
00:36:36,720 --> 00:36:37,680
properly or something.

826
00:36:37,680 --> 00:36:38,760
But that's on the sysadmin.

827
00:36:38,760 --> 00:36:42,200
That's not on the software being a problem.

828
00:36:42,200 --> 00:36:42,800
Right, true.

829
00:36:42,800 --> 00:36:47,420
So yeah, I pass through also to my main file server.

830
00:36:47,420 --> 00:36:49,880
I also pass through three different SATA controllers.

831
00:36:49,880 --> 00:36:53,000
One's an MVME one, and then I have one that has,

832
00:36:53,000 --> 00:36:55,200
I think, 12 disks connected, and another one that

833
00:36:55,200 --> 00:36:58,280
has another four disks connected or something.

834
00:36:58,280 --> 00:37:01,520
So you can really take this technology and run with it.

835
00:37:01,520 --> 00:37:05,100
And if you can think it, you can do it.

836
00:37:05,100 --> 00:37:06,060
You just have to know how.

837
00:37:06,060 --> 00:37:08,440
Right.

838
00:37:08,440 --> 00:37:10,560
Yeah, I liked your note in the show notes, like, hey,

839
00:37:10,560 --> 00:37:13,160
by the way, not a bad way to mine crypto.

840
00:37:13,160 --> 00:37:13,840
Oh, yeah, no.

841
00:37:13,840 --> 00:37:15,840
So when I was getting into Bitcoin mining,

842
00:37:15,840 --> 00:37:19,760
this was when December, what, two years ago?

843
00:37:19,760 --> 00:37:21,720
When Bitcoin was going bonkers, I

844
00:37:21,720 --> 00:37:25,320
built a Bitcoin mining rig with like seven GPUs in it

845
00:37:25,320 --> 00:37:26,280
or something.

846
00:37:26,280 --> 00:37:29,320
Turns out, Windows has a four GPU limit.

847
00:37:29,320 --> 00:37:30,120
So what did I do?

848
00:37:30,120 --> 00:37:33,000
I created two Windows VMs and passed through four GPUs

849
00:37:33,000 --> 00:37:35,920
to each VM, or four and three to each VM,

850
00:37:35,920 --> 00:37:37,640
and got around the problem that way instead,

851
00:37:37,640 --> 00:37:39,520
rather than doing all sorts of crazy registry

852
00:37:39,520 --> 00:37:41,160
hacks that the internet was suggesting.

853
00:37:41,160 --> 00:37:41,880
Problem solved.

854
00:37:41,880 --> 00:37:45,040
I mean, one potential reason you could even

855
00:37:45,040 --> 00:37:48,960
justify installing a video card in the server we have here

856
00:37:48,960 --> 00:37:51,360
at the JB Studio is something else you could do

857
00:37:51,360 --> 00:37:54,920
is run a headless VM of Windows that's accelerated,

858
00:37:54,920 --> 00:37:57,480
and then do steam streaming, and just

859
00:37:57,480 --> 00:37:59,740
pass through a whole bunch of games to all your Linux

860
00:37:59,740 --> 00:38:01,000
boxes on the network.

861
00:38:01,000 --> 00:38:04,080
That works stupidly well, except for one caveat.

862
00:38:04,080 --> 00:38:07,320
You're going to need some kind of a dummy dongle

863
00:38:07,320 --> 00:38:09,480
to go into the HDMI port to trick it

864
00:38:09,480 --> 00:38:10,980
into the correct resolution.

865
00:38:10,980 --> 00:38:14,400
So you can buy these things on Amazon that are 1080p,

866
00:38:14,400 --> 00:38:17,400
like headless, tricky dongle things.

867
00:38:17,400 --> 00:38:18,480
I don't know the name.

868
00:38:18,480 --> 00:38:20,400
It's not technical, is it?

869
00:38:20,400 --> 00:38:22,120
Yeah, but it's been around for a while.

870
00:38:22,120 --> 00:38:24,360
You need them for a lot of Bitcoin mining setups, too.

871
00:38:24,360 --> 00:38:26,720
Yeah, I have a question about this.

872
00:38:26,720 --> 00:38:32,040
So I tried to steam stream from my Windows

873
00:38:32,040 --> 00:38:36,400
pass-through VM to my Linux desktop that was a host,

874
00:38:36,400 --> 00:38:43,440
and it did crash Steam on the host, not on the guest.

875
00:38:43,440 --> 00:38:45,320
Is there anything special that needs

876
00:38:45,320 --> 00:38:48,920
to be done to support this, like do I

877
00:38:48,920 --> 00:38:51,920
need to pass through a discrete NIC,

878
00:38:51,920 --> 00:38:58,800
or does it only work if the disk is fully passed through

879
00:38:58,800 --> 00:39:00,640
and it's got a discrete disk?

880
00:39:00,640 --> 00:39:02,280
Where am I going wrong?

881
00:39:02,280 --> 00:39:04,700
Or is it just that this particular game is just

882
00:39:04,700 --> 00:39:07,800
horribly buggy, which is certainly true?

883
00:39:07,800 --> 00:39:09,000
Games don't have bugs in them.

884
00:39:09,000 --> 00:39:10,480
Who are you kidding?

885
00:39:10,480 --> 00:39:13,000
So there's a couple of ways to skin this turkey.

886
00:39:13,000 --> 00:39:16,280
First of all, I don't know what you've done with your NICs,

887
00:39:16,280 --> 00:39:18,520
but the traditional way is to use

888
00:39:18,520 --> 00:39:22,320
Vert.io to have a 10 gigabit ethernet link

889
00:39:22,320 --> 00:39:23,720
between the host and the guest.

890
00:39:23,720 --> 00:39:25,440
So I'm assuming that's the way you go,

891
00:39:25,440 --> 00:39:27,160
because that's what all the guides do.

892
00:39:27,160 --> 00:39:28,720
You could do what Chris did and pass

893
00:39:28,720 --> 00:39:30,840
through an actual physical NIC, which is also

894
00:39:30,840 --> 00:39:32,720
another way to do it.

895
00:39:32,720 --> 00:39:34,640
But what you might be running into

896
00:39:34,640 --> 00:39:38,600
is the CPU pinning thing that I talked about earlier.

897
00:39:38,600 --> 00:39:41,560
If one or either of the VMs or the host

898
00:39:41,560 --> 00:39:44,840
runs out of enough CPU time, there

899
00:39:44,840 --> 00:39:46,320
can be some contention issues there.

900
00:39:46,320 --> 00:39:49,680
So it's worth pinning those CPU cores.

901
00:39:49,680 --> 00:39:51,440
That is one thing I haven't gotten to yet,

902
00:39:51,440 --> 00:39:53,000
so I will give that a shot.

903
00:39:53,000 --> 00:39:53,800
Same.

904
00:39:53,800 --> 00:39:55,160
Also, something else Drew might consider

905
00:39:55,160 --> 00:39:56,600
is maybe just not doing this setup,

906
00:39:56,600 --> 00:39:58,800
but playing around with something like Looking Glass.

907
00:39:58,800 --> 00:40:02,080
Yeah, so Looking Glass is super duper cool.

908
00:40:02,080 --> 00:40:05,720
So the frame buffer technology that Chris talked about

909
00:40:05,720 --> 00:40:08,160
being potentially added to Mac OS,

910
00:40:08,160 --> 00:40:13,480
this technology was developed by a chap on the Level 1 Tech

911
00:40:13,480 --> 00:40:14,280
Forums.

912
00:40:14,280 --> 00:40:17,200
Gniff, I think, is his moniker.

913
00:40:17,200 --> 00:40:21,400
Wendell and all those guys over on Level 1.

914
00:40:21,400 --> 00:40:25,400
So Looking Glass allows you to capture the frame buffer

915
00:40:25,400 --> 00:40:27,080
output from the HDMI port.

916
00:40:27,080 --> 00:40:29,480
So when Windows renders a frame, it

917
00:40:29,480 --> 00:40:33,160
writes that very short term to a piece of memory.

918
00:40:33,160 --> 00:40:36,400
What Looking Glass does is it hooks into that piece of memory

919
00:40:36,400 --> 00:40:39,560
and makes it available from the guest to the host.

920
00:40:39,560 --> 00:40:41,000
And there's also another patch that

921
00:40:41,000 --> 00:40:42,760
lets you view that frame in a VM.

922
00:40:42,760 --> 00:40:45,560
So you could effectively share this piece of memory

923
00:40:45,560 --> 00:40:48,520
between two VMs via the host, which

924
00:40:48,520 --> 00:40:51,240
is kind of meta and amazing.

925
00:40:51,240 --> 00:40:54,680
And what this allows you to do is capture, basically,

926
00:40:54,680 --> 00:40:58,480
in real time the HDMI output from the guest

927
00:40:58,480 --> 00:41:01,840
and display it in a window on your Linux desktop.

928
00:41:01,840 --> 00:41:02,360
Oh, wow.

929
00:41:02,360 --> 00:41:04,280
So you could effectively marginalize

930
00:41:04,280 --> 00:41:06,760
Windows to be nothing more than just a window.

931
00:41:06,760 --> 00:41:09,400
And no physical monitor, physical keyboard.

932
00:41:09,400 --> 00:41:10,360
Nope.

933
00:41:10,360 --> 00:41:13,400
And the latency is sub-5 milliseconds.

934
00:41:13,400 --> 00:41:16,720
So it's just as good as anything.

935
00:41:16,720 --> 00:41:18,200
And it's pretty amazing.

936
00:41:18,200 --> 00:41:19,960
It's better than some monitors.

937
00:41:19,960 --> 00:41:20,600
Yeah.

938
00:41:20,600 --> 00:41:22,400
Now, really, you can tie all that together

939
00:41:22,400 --> 00:41:23,880
by getting some input in there, too,

940
00:41:23,880 --> 00:41:25,920
with something like Synergy, which the audience tells us

941
00:41:25,920 --> 00:41:28,320
all about all the time, and we never really talk about it.

942
00:41:28,320 --> 00:41:33,400
But Synergy is there's a couple alternatives, too.

943
00:41:33,400 --> 00:41:37,160
But it lets you move a mouse between hosts on your LAN

944
00:41:37,160 --> 00:41:39,960
or the host and the VM.

945
00:41:39,960 --> 00:41:41,040
Yeah.

946
00:41:41,040 --> 00:41:43,120
We talked briefly about keyboard and mice earlier.

947
00:41:43,120 --> 00:41:45,000
So there's the USB switcher option,

948
00:41:45,000 --> 00:41:46,360
which is in the show notes.

949
00:41:46,360 --> 00:41:48,680
There's Synergy, which allows you to just move your cursor

950
00:41:48,680 --> 00:41:50,440
from one window to the next seamlessly

951
00:41:50,440 --> 00:41:52,720
as if it's multiple windows on the same system.

952
00:41:52,720 --> 00:41:55,440
It's like magic, and it's amazing.

953
00:41:55,440 --> 00:41:57,480
There are other ways to do it using EV dev,

954
00:41:57,480 --> 00:42:01,240
so you can actually pass the devices through that way.

955
00:42:01,240 --> 00:42:03,560
Or you can use vrsh attach device,

956
00:42:03,560 --> 00:42:07,880
which is a command that allows you to interact with your VM.

957
00:42:07,880 --> 00:42:09,840
You need to write a couple of XML files,

958
00:42:09,840 --> 00:42:14,080
and I've provided a couple of templates I use from my VFIO

959
00:42:14,080 --> 00:42:16,760
repo on GitHub.

960
00:42:16,760 --> 00:42:18,320
And it's a very simple.

961
00:42:18,320 --> 00:42:21,400
You can just script it and bind it to a hotkey.

962
00:42:21,400 --> 00:42:25,680
So I have a hotkey that changes the monitor inputs using

963
00:42:25,680 --> 00:42:30,640
ddutil and also passes through my keyboard and mouse

964
00:42:30,640 --> 00:42:31,660
at the same time.

965
00:42:31,660 --> 00:42:33,280
And then I have the same thing in Windows,

966
00:42:33,280 --> 00:42:36,400
but it just SSHs into the host remotely

967
00:42:36,400 --> 00:42:37,960
and then undoes what it's just done.

968
00:42:37,960 --> 00:42:40,680
So you have to give it some thought,

969
00:42:40,680 --> 00:42:44,560
but it's not too hard to get a slick setup going.

970
00:42:44,560 --> 00:42:45,320
Yeah.

971
00:42:45,320 --> 00:42:48,000
So Chris, I know that one of the things that you've mentioned

972
00:42:48,000 --> 00:42:53,040
is using macOS in a PCIe pass-through setup.

973
00:42:53,040 --> 00:42:56,760
And would this be a way for me to possibly get away

974
00:42:56,760 --> 00:43:02,160
from having to run macOS as being my daily driver

975
00:43:02,160 --> 00:43:05,720
because I need those Adobe applications?

976
00:43:05,720 --> 00:43:09,760
And then, two, how will that affect those Adobe

977
00:43:09,760 --> 00:43:10,360
applications?

978
00:43:10,360 --> 00:43:15,120
So whenever I go to render out, most often it's 1080p.

979
00:43:15,120 --> 00:43:18,440
But whenever I go to render out 1080p video,

980
00:43:18,440 --> 00:43:20,800
am I going to see a performance hit there on the rendering

981
00:43:20,800 --> 00:43:22,520
side?

982
00:43:22,520 --> 00:43:25,080
How exactly would this work out?

983
00:43:25,080 --> 00:43:28,040
Because I would love to eventually have

984
00:43:28,040 --> 00:43:31,080
a system like this where I have a rock solid Linux

985
00:43:31,080 --> 00:43:34,640
base with VMs and pass-throughs.

986
00:43:34,640 --> 00:43:39,080
I could see this being great for not only my desktop,

987
00:43:39,080 --> 00:43:43,220
my personal desktop, but also my travel work laptop,

988
00:43:43,220 --> 00:43:45,880
just being able to plug in, pass everything through,

989
00:43:45,880 --> 00:43:50,360
get work done, shut it down, or not necessarily

990
00:43:50,360 --> 00:43:53,200
have to feel like I need to reload an old beater machine

991
00:43:53,200 --> 00:43:55,440
to test out maybe a different distro.

992
00:43:55,440 --> 00:43:56,040
Totally.

993
00:43:56,040 --> 00:43:58,120
But be able to play around with it a little bit more.

994
00:43:58,120 --> 00:44:00,440
Well, I'll start with the latter half.

995
00:44:00,440 --> 00:44:01,960
So the last half of the question is,

996
00:44:01,960 --> 00:44:03,280
is it a performance penalty?

997
00:44:03,280 --> 00:44:06,920
I think it depends on how you look at it.

998
00:44:06,920 --> 00:44:09,560
I think to get a Mac that could outperform

999
00:44:09,560 --> 00:44:12,700
what I can match in commodity PC hardware would probably

1000
00:44:12,700 --> 00:44:15,280
cost me thousands of dollars.

1001
00:44:15,280 --> 00:44:19,440
Could I buy an iMac Pro that would outperform this VM?

1002
00:44:19,440 --> 00:44:20,520
Yes.

1003
00:44:20,520 --> 00:44:21,680
Could I afford one?

1004
00:44:21,680 --> 00:44:22,160
No.

1005
00:44:22,160 --> 00:44:23,760
And the other thing that's nice about this

1006
00:44:23,760 --> 00:44:28,040
is this eGPU setup also can benefit the host system

1007
00:44:28,040 --> 00:44:29,120
down the road if I want.

1008
00:44:29,120 --> 00:44:31,120
I could plug this into another computer

1009
00:44:31,120 --> 00:44:33,520
and just use it as a video card if I want later.

1010
00:44:33,520 --> 00:44:35,760
It doesn't have to be used for VMs.

1011
00:44:35,760 --> 00:44:37,320
And obviously, I'm using this hardware

1012
00:44:37,320 --> 00:44:39,920
for multiple operating systems, which that wouldn't necessarily

1013
00:44:39,920 --> 00:44:42,480
be the case with Mac OS, even with Boot Camp.

1014
00:44:42,480 --> 00:44:44,880
You could even bring it to the Sprint or something, right?

1015
00:44:44,880 --> 00:44:46,800
And you're sharing your GPU with others.

1016
00:44:46,800 --> 00:44:48,520
Yeah, I mean, I've got the Go Bag.

1017
00:44:48,520 --> 00:44:50,080
I've got the Virtualization Go Bag.

1018
00:44:50,080 --> 00:44:54,040
And I would say that that is going to probably easily

1019
00:44:54,040 --> 00:44:56,300
outperform a laptop or a Mac Mini.

1020
00:44:56,300 --> 00:44:59,560
So that's where I look at the performance aspect.

1021
00:44:59,560 --> 00:45:01,360
And you could go all in, right?

1022
00:45:01,360 --> 00:45:03,280
You could get a really expensive PC,

1023
00:45:03,280 --> 00:45:05,360
and you could probably allocate just a portion of that

1024
00:45:05,360 --> 00:45:06,700
to outpower a Mac, unless you were

1025
00:45:06,700 --> 00:45:08,400
looking at the really high end.

1026
00:45:08,400 --> 00:45:09,440
Now, the other side of it.

1027
00:45:09,440 --> 00:45:12,280
Could you use it to run Final Cut and whatnot?

1028
00:45:12,280 --> 00:45:14,720
I haven't actually done a full edit session yet.

1029
00:45:14,720 --> 00:45:17,020
But you and I are on the same page here.

1030
00:45:17,020 --> 00:45:18,560
This is what I'm thinking is I'd really

1031
00:45:18,560 --> 00:45:20,280
like to get back into flying the drone

1032
00:45:20,280 --> 00:45:23,080
and doing drone videography and photography.

1033
00:45:23,080 --> 00:45:25,240
And as soon as I do that, I'm going to want to edit.

1034
00:45:25,240 --> 00:45:26,700
I'm going to want to color correct.

1035
00:45:26,700 --> 00:45:28,960
I'm going to want to fix it up a little bit.

1036
00:45:28,960 --> 00:45:30,800
And I'm going to want to use Final Cut,

1037
00:45:30,800 --> 00:45:34,200
because in my opinion, my experience, it's just the better

1038
00:45:34,200 --> 00:45:36,640
editor for online media.

1039
00:45:36,640 --> 00:45:38,520
Now, maybe I'll try some other ones over time.

1040
00:45:38,520 --> 00:45:41,680
Like, I'm not announcing some intention here.

1041
00:45:41,680 --> 00:45:44,520
It's just something that's been in the back of my mind.

1042
00:45:44,520 --> 00:45:46,120
I thought, well, OK, let's see.

1043
00:45:46,120 --> 00:45:46,720
Let's just see.

1044
00:45:46,720 --> 00:45:50,080
Could I, as a thought experiment,

1045
00:45:50,080 --> 00:45:53,080
before I go learn Blender or before I go spend

1046
00:45:53,080 --> 00:45:56,320
a whole bunch of time with DaVinci or et cetera, et cetera,

1047
00:45:56,320 --> 00:46:01,140
could I get Mac OS working in a VM that could actually

1048
00:46:01,140 --> 00:46:02,980
be hardware accelerated and use Final Cut?

1049
00:46:02,980 --> 00:46:04,320
Because in theory, I could easily

1050
00:46:04,320 --> 00:46:08,440
buy a video card that's nicer than 90% of the Mac video cards

1051
00:46:08,440 --> 00:46:10,880
that you get when you buy a Mac.

1052
00:46:10,880 --> 00:46:15,240
And to that end, there are surprisingly more and more

1053
00:46:15,240 --> 00:46:18,520
guides and systems to get Mac OS,

1054
00:46:18,520 --> 00:46:23,660
even the latest betas of Catalina, running under VM.

1055
00:46:23,660 --> 00:46:27,920
So I would say it's like hackintoshing,

1056
00:46:27,920 --> 00:46:31,080
but it's like the most Mac way possible to hackintosh,

1057
00:46:31,080 --> 00:46:33,720
because you have a known set of hardware

1058
00:46:33,720 --> 00:46:35,940
that you have a known set of drivers for.

1059
00:46:35,940 --> 00:46:39,140
So it's like how Apple develops Mac OS for the Mac.

1060
00:46:39,140 --> 00:46:40,680
It's like hackintoshing that way.

1061
00:46:40,680 --> 00:46:44,820
It's becoming like the go-to way to run Mac OS really easily

1062
00:46:44,820 --> 00:46:46,060
on PC hardware.

1063
00:46:46,060 --> 00:46:49,320
It's sort of the most reliable way to hackintosh right now.

1064
00:46:49,320 --> 00:46:50,440
Does that make sense?

1065
00:46:50,440 --> 00:46:51,160
There's some risk.

1066
00:46:51,160 --> 00:46:53,800
I mean, it's not a Mac, but it's probably the most solid.

1067
00:46:53,800 --> 00:46:57,320
And with Apple seemingly adding VertIO driver support

1068
00:46:57,320 --> 00:47:01,720
to later versions of Mac OS, it may be even easier soon.

1069
00:47:01,720 --> 00:47:03,480
There's a big caveat there, isn't there?

1070
00:47:03,480 --> 00:47:05,440
Don't you need a Mac to create the install

1071
00:47:05,440 --> 00:47:06,760
media in the first place?

1072
00:47:06,760 --> 00:47:08,280
No.

1073
00:47:08,280 --> 00:47:09,200
Not anymore.

1074
00:47:09,200 --> 00:47:11,120
You used to could, as my kids would say.

1075
00:47:11,120 --> 00:47:14,400
But have you seen this simple Mac KVM guide going around?

1076
00:47:14,400 --> 00:47:14,880
Nope.

1077
00:47:14,880 --> 00:47:17,160
You're going to tell me all about it now, though, right?

1078
00:47:17,160 --> 00:47:17,840
Yes.

1079
00:47:17,840 --> 00:47:20,520
We'll have a couple of links in the show notes.

1080
00:47:20,520 --> 00:47:21,720
It's pretty brilliant.

1081
00:47:21,720 --> 00:47:25,560
So there is a little tomfoolery going on to make it possible.

1082
00:47:25,560 --> 00:47:28,360
The author of this script, which is an open source script,

1083
00:47:28,360 --> 00:47:30,440
I think, I have not looked into it,

1084
00:47:30,440 --> 00:47:33,960
but I think is presenting to the Apple servers

1085
00:47:33,960 --> 00:47:40,680
a Apple user agent ID, because it's an HTTP request.

1086
00:47:40,680 --> 00:47:43,360
And I think this is maybe the only tomfoolery happening here.

1087
00:47:43,360 --> 00:47:46,760
But what you have is he's got two scripts, basic.sh,

1088
00:47:46,760 --> 00:47:49,520
and then there's a second script that essentially launches

1089
00:47:49,520 --> 00:47:52,480
the VM for you and does some of the pass-through commands.

1090
00:47:52,480 --> 00:47:56,800
And what basic.sh does is it says,

1091
00:47:56,800 --> 00:47:59,080
hey, what version of Mac OS would you like?

1092
00:47:59,080 --> 00:48:03,320
And you just add it with a TAC Catalina, TAC Mojave,

1093
00:48:03,320 --> 00:48:04,440
or whatever.

1094
00:48:04,440 --> 00:48:06,880
And then it goes and it knocks on Apple's recovery server

1095
00:48:06,880 --> 00:48:10,320
doors and says, hi, I'm a broken iMac,

1096
00:48:10,320 --> 00:48:14,120
and my user needs to reload their operating system.

1097
00:48:14,120 --> 00:48:16,400
Can I stream the installer from you, please?

1098
00:48:16,400 --> 00:48:20,200
And it says, OK, here's the URL on the Akamai CDN.

1099
00:48:20,200 --> 00:48:23,080
We'll blast you those packets as fast as humanly possible,

1100
00:48:23,080 --> 00:48:25,320
or actually electronically possible.

1101
00:48:25,320 --> 00:48:27,320
And so it tells the recovery service

1102
00:48:27,320 --> 00:48:28,960
that you're a broken iMac.

1103
00:48:28,960 --> 00:48:31,520
And you can then, without ever having

1104
00:48:31,520 --> 00:48:35,960
to download from the Mac store and flash a USB disk

1105
00:48:35,960 --> 00:48:39,480
or anything, it'll get you the recovery ISO.

1106
00:48:39,480 --> 00:48:41,840
Then you boot that in the VM, and it just pulls down

1107
00:48:41,840 --> 00:48:43,520
the installer like a net install would.

1108
00:48:43,520 --> 00:48:46,080
Does it work with modern Nvidia GPUs?

1109
00:48:46,080 --> 00:48:50,240
Because Apple haven't shipped 10 series, have they?

1110
00:48:50,240 --> 00:48:51,960
Now, your mileage there is going to vary.

1111
00:48:51,960 --> 00:48:55,960
This is that fun corner of Hackintosh, isn't it?

1112
00:48:55,960 --> 00:48:58,280
Yeah, you're going to have a much better time with an AMD

1113
00:48:58,280 --> 00:48:58,880
graphics card.

1114
00:48:58,880 --> 00:49:03,040
Is that the same for AMD and Intel

1115
00:49:03,040 --> 00:49:06,200
as far as being supported by Hackintoshing?

1116
00:49:06,200 --> 00:49:08,800
See, this is where doing it in a VM

1117
00:49:08,800 --> 00:49:11,200
actually makes things a little easier,

1118
00:49:11,200 --> 00:49:14,000
because that stuff is a little more abstracted.

1119
00:49:14,000 --> 00:49:15,920
It's just standard VM stuff at that point.

1120
00:49:15,920 --> 00:49:18,880
And so it just looks like a regular Intel system

1121
00:49:18,880 --> 00:49:20,200
or whatever to the Mac OS.

1122
00:49:20,200 --> 00:49:23,520
So it doesn't care about the underlying chip architecture

1123
00:49:23,520 --> 00:49:24,020
at all?

1124
00:49:24,020 --> 00:49:27,720
No, not really, as long as your CPU supports all the stuff.

1125
00:49:27,720 --> 00:49:30,920
Now, to be clear, I have run into issues with networking

1126
00:49:30,920 --> 00:49:31,720
support and whatnot.

1127
00:49:31,720 --> 00:49:34,460
I'm not here proclaiming that it works flawlessly yet.

1128
00:49:34,460 --> 00:49:36,800
I've gotten close.

1129
00:49:36,800 --> 00:49:38,680
But I have not gotten it all working yet.

1130
00:49:38,680 --> 00:49:42,000
I have not gotten through a full test of Final Cut yet.

1131
00:49:42,000 --> 00:49:44,040
I have not brought in 4K footage.

1132
00:49:44,040 --> 00:49:45,100
So it's up in the air.

1133
00:49:45,100 --> 00:49:47,320
I have gotten Linux and Windows VMs.

1134
00:49:47,320 --> 00:49:49,760
Those are my priority.

1135
00:49:49,760 --> 00:49:52,360
And no surprise here, guess what operating system

1136
00:49:52,360 --> 00:49:55,240
works the best, Linux.

1137
00:49:55,240 --> 00:49:57,440
I actually now have decided that I'm

1138
00:49:57,440 --> 00:49:59,840
going to do all of my gaming in a VM.

1139
00:49:59,840 --> 00:50:05,400
I'll just have a VM image, or actually this SSD disk,

1140
00:50:05,400 --> 00:50:07,280
if I can say that, this SSD disk that's

1141
00:50:07,280 --> 00:50:11,960
in my eGPU is just going to be loaded with a VM that's

1142
00:50:11,960 --> 00:50:14,520
got all my Steam games and all my GOG games installed

1143
00:50:14,520 --> 00:50:16,780
and all my Lutris games always installed

1144
00:50:16,780 --> 00:50:19,700
with all of the proprietary graphics drivers installed.

1145
00:50:19,700 --> 00:50:22,440
I hook that up to my base system, and I start playing.

1146
00:50:22,440 --> 00:50:23,600
No more downloading.

1147
00:50:23,600 --> 00:50:25,080
Maybe I have to patch a little bit.

1148
00:50:25,080 --> 00:50:26,000
No big deal.

1149
00:50:26,000 --> 00:50:29,240
Linux is such a great guest in this setup.

1150
00:50:29,240 --> 00:50:32,120
So it's like, even if you never have

1151
00:50:32,120 --> 00:50:35,160
any intention of running Windows or Mac OS,

1152
00:50:35,160 --> 00:50:37,720
it's absolutely worth it just to play with Linux.

1153
00:50:37,720 --> 00:50:40,720
I thought, though, too, Wes has talked about this a little bit

1154
00:50:40,720 --> 00:50:42,120
on and off in the past.

1155
00:50:42,120 --> 00:50:44,720
But since we're doing different crazy great ways

1156
00:50:44,720 --> 00:50:46,900
to run Linux and other operating systems

1157
00:50:46,900 --> 00:50:49,340
without having to nuke your install,

1158
00:50:49,340 --> 00:50:51,760
Wes has got a clever way that he likes to run machines.

1159
00:50:51,760 --> 00:50:53,760
I know you've played around with a few different things.

1160
00:50:53,760 --> 00:50:55,760
What do you want to share with the class today, Wes?

1161
00:50:55,760 --> 00:50:57,260
Oh, man, there's just so many ways.

1162
00:50:57,260 --> 00:51:00,460
I was disappointed to hear that some of this pass-through stuff

1163
00:51:00,460 --> 00:51:04,800
might not work with partitions because just having

1164
00:51:04,800 --> 00:51:08,160
a separate partition can be an easy way down that road

1165
00:51:08,160 --> 00:51:09,640
where you can boot into something,

1166
00:51:09,640 --> 00:51:13,600
or it's really easy to use virtualization to just attach

1167
00:51:13,600 --> 00:51:15,000
to an existing partition.

1168
00:51:15,000 --> 00:51:16,620
And as long as you're not accessing that

1169
00:51:16,620 --> 00:51:20,160
or have it mounted in the host, then away you go.

1170
00:51:20,160 --> 00:51:22,240
I love that just because anytime I

1171
00:51:22,240 --> 00:51:26,220
can use the host system to install a new operating system

1172
00:51:26,220 --> 00:51:29,040
without having to reboot and go through that painful cycle

1173
00:51:29,040 --> 00:51:30,800
of disconnecting everything I'm doing

1174
00:51:30,800 --> 00:51:33,400
or having to go get a second computer,

1175
00:51:33,400 --> 00:51:34,800
I just don't want to be bothered.

1176
00:51:34,800 --> 00:51:38,080
You know, I do kind of walk kind of a happy medium here.

1177
00:51:38,080 --> 00:51:43,320
I'm passing through ISO images, and I am doing a Cal file.

1178
00:51:43,320 --> 00:51:46,360
But I also, for the Windows installation,

1179
00:51:46,360 --> 00:51:48,880
before I wanted to get everything all plugged in

1180
00:51:48,880 --> 00:51:52,180
and everything, I just clicked in the VM

1181
00:51:52,180 --> 00:51:53,760
and had it grab my mouse and keyboard.

1182
00:51:53,760 --> 00:51:55,360
I actually did the whole Windows install

1183
00:51:55,360 --> 00:51:59,280
with a laptop mouse and keyboard on the laptop screen using,

1184
00:51:59,280 --> 00:52:01,200
it's like a VN, they call it Spice,

1185
00:52:01,200 --> 00:52:02,740
where you can just remote view.

1186
00:52:02,740 --> 00:52:05,040
I did that, and then once the installation was done,

1187
00:52:05,040 --> 00:52:07,300
I hooked up all the physical hardware.

1188
00:52:07,300 --> 00:52:08,880
So I kind of do like a balance there.

1189
00:52:08,880 --> 00:52:11,360
Windows can actually boot from a raw image

1190
00:52:11,360 --> 00:52:13,800
as long as you make it in the VHD format.

1191
00:52:13,800 --> 00:52:18,380
So if you already had, say, a shared NTFS drive,

1192
00:52:18,380 --> 00:52:20,280
that's one way you can easily do it from a file

1193
00:52:20,280 --> 00:52:22,320
if you don't want to muck about with separate drives

1194
00:52:22,320 --> 00:52:23,840
or even a separate partition.

1195
00:52:23,840 --> 00:52:25,880
So that's nice, too, is if you're clever about it,

1196
00:52:25,880 --> 00:52:29,240
you can often boot into files, especially on Linux,

1197
00:52:29,240 --> 00:52:32,200
because you can make Linux do anything.

1198
00:52:32,200 --> 00:52:33,520
You can have a virtual machine image,

1199
00:52:33,520 --> 00:52:34,960
set it up in a virtual machine,

1200
00:52:34,960 --> 00:52:38,000
and then if you play around with your init RAM FS

1201
00:52:38,000 --> 00:52:40,160
or your grub setup a little bit,

1202
00:52:40,160 --> 00:52:41,600
you can reboot right into that

1203
00:52:41,600 --> 00:52:43,700
and not have to mess with having a separate system.

1204
00:52:43,700 --> 00:52:45,000
You just got to know how, huh?

1205
00:52:45,000 --> 00:52:46,360
You just got to know how.

1206
00:52:46,360 --> 00:52:48,280
So that's something that I use quite heavily.

1207
00:52:48,280 --> 00:52:50,820
I actually switched away from grub to system de-boot

1208
00:52:50,820 --> 00:52:51,720
on my host.

1209
00:52:51,720 --> 00:52:53,800
It makes it a lot easier to specify

1210
00:52:53,800 --> 00:52:56,280
which particular kernel I'm booting into

1211
00:52:56,280 --> 00:52:58,360
or things like that than I found grub.

1212
00:52:58,360 --> 00:53:00,900
So give system de-boot a try.

1213
00:53:00,900 --> 00:53:02,420
Oh, yeah, it's fantastic.

1214
00:53:02,420 --> 00:53:04,560
And the configuration files are easy to read

1215
00:53:04,560 --> 00:53:06,080
and easy to modify.

1216
00:53:06,080 --> 00:53:06,920
Very good.

1217
00:53:06,920 --> 00:53:08,680
And then I suppose for something completely different,

1218
00:53:08,680 --> 00:53:09,920
if you don't feel like virtualizing,

1219
00:53:09,920 --> 00:53:11,000
there's always kexec,

1220
00:53:11,000 --> 00:53:12,960
which we've talked about that before, too,

1221
00:53:12,960 --> 00:53:16,340
which is sort of like live switching to a whole new kernel.

1222
00:53:16,340 --> 00:53:17,820
Wes likes to make it extra spicy.

1223
00:53:17,820 --> 00:53:21,240
By then, when you kexec, you also are running his,

1224
00:53:21,240 --> 00:53:23,000
he runs his disk out of RAM.

1225
00:53:23,000 --> 00:53:25,120
So it's like the whole thing is just like.

1226
00:53:25,120 --> 00:53:28,180
Right, I mean, if you're not sure about a distribution,

1227
00:53:28,180 --> 00:53:29,320
you just want to give it a try.

1228
00:53:29,320 --> 00:53:31,640
You really don't want to commit.

1229
00:53:31,640 --> 00:53:33,480
That's about as close as I can get.

1230
00:53:33,480 --> 00:53:35,160
You could just, the ultimate rage quit,

1231
00:53:35,160 --> 00:53:36,160
you turn off the power button

1232
00:53:36,160 --> 00:53:37,880
and the entire thing is erased.

1233
00:53:37,880 --> 00:53:40,560
You know, it's gone, it's so satisfying.

1234
00:53:40,560 --> 00:53:42,320
I wonder how fast Windows would feel

1235
00:53:42,320 --> 00:53:43,720
if I ran it from RAM.

1236
00:53:43,720 --> 00:53:44,600
I might try that.

1237
00:53:44,600 --> 00:53:45,420
Oh, you should.

1238
00:53:45,420 --> 00:53:47,520
I think Windows Update would still take forever.

1239
00:53:47,520 --> 00:53:48,620
I'll tell you what.

1240
00:53:48,620 --> 00:53:50,360
Oh, that's been one thing

1241
00:53:50,360 --> 00:53:52,600
that I have just shaken my head at.

1242
00:53:52,600 --> 00:53:55,480
They've tried to make it better in the later builds,

1243
00:53:55,480 --> 00:53:57,820
but what they did is they added like six more screens

1244
00:53:57,820 --> 00:53:58,660
of options.

1245
00:53:58,660 --> 00:54:00,720
That's a lot.

1246
00:54:00,720 --> 00:54:03,320
I really just appreciate package managers after that.

1247
00:54:03,320 --> 00:54:04,920
All right, well,

1248
00:54:04,920 --> 00:54:07,320
I know we just kind of given you the basics to get started,

1249
00:54:07,320 --> 00:54:09,480
but this is one of those things you'll have to go deep dive.

1250
00:54:09,480 --> 00:54:11,480
We'll have some additional resources in the show notes

1251
00:54:11,480 --> 00:54:12,700
and a surprise here.

1252
00:54:12,700 --> 00:54:13,860
Shocker, everybody.

1253
00:54:14,920 --> 00:54:17,440
The Arch Wiki is also a great resource.

1254
00:54:17,440 --> 00:54:18,720
Who would have known?

1255
00:54:18,720 --> 00:54:20,720
We'll be back with a regular format

1256
00:54:20,720 --> 00:54:24,640
at our regularly scheduled live time over at jblive.tv.

1257
00:54:24,640 --> 00:54:29,640
Right here next Tuesday.

1258
00:54:54,640 --> 00:54:59,640
Oh, man.

1259
00:55:01,800 --> 00:55:05,520
I apparently in last week's code radio,

1260
00:55:05,520 --> 00:55:08,240
I leaked what the next free study groups are

1261
00:55:08,240 --> 00:55:10,480
on Linux Academy.

1262
00:55:10,480 --> 00:55:11,920
I didn't mean to.

1263
00:55:11,920 --> 00:55:14,200
I guess I did talk about it

1264
00:55:14,200 --> 00:55:15,520
before it was public on there.

1265
00:55:15,520 --> 00:55:16,360
Oops.

1266
00:55:16,360 --> 00:55:17,360
Well, I don't know.

1267
00:55:17,360 --> 00:55:19,440
You know, this is one of those episodes

1268
00:55:19,440 --> 00:55:20,840
I have been wanting to do PCI.

1269
00:55:20,840 --> 00:55:21,680
I know I said this beginning,

1270
00:55:21,680 --> 00:55:23,800
but I really been wanting to do a PCI pass-through

1271
00:55:23,800 --> 00:55:26,480
since it was ever, ever a thing.

1272
00:55:26,480 --> 00:55:28,280
And it always seemed,

1273
00:55:28,280 --> 00:55:31,220
it always seemed like just like way too much work

1274
00:55:31,220 --> 00:55:32,320
to get started with.

1275
00:55:32,320 --> 00:55:33,380
Yes.

1276
00:55:33,380 --> 00:55:34,400
I've been following it too, right?

1277
00:55:34,400 --> 00:55:36,040
Cause it's always been that sort of holy grail,

1278
00:55:36,040 --> 00:55:37,760
like, oh, maybe you need windows.

1279
00:55:37,760 --> 00:55:40,180
You don't want to deal with separate machines or rebooting.

1280
00:55:40,180 --> 00:55:42,560
You can have everything and I guess you can.

1281
00:55:42,560 --> 00:55:43,960
Yeah, I think it's totally worth it.

1282
00:55:43,960 --> 00:55:45,720
And it's not that bad anymore.

1283
00:55:45,720 --> 00:55:47,800
If you've got modern hardware, that's really the keys.

1284
00:55:47,800 --> 00:55:50,520
You gotta happen to have some current stuff,

1285
00:55:50,520 --> 00:55:53,200
but eventually everybody's going to have this stuff.

1286
00:55:53,200 --> 00:55:54,960
And then we're really going to be cooking with gas.

1287
00:55:54,960 --> 00:55:56,320
Like it's going to be,

1288
00:55:56,320 --> 00:55:58,400
I'm just really excited about the potential.

1289
00:55:58,400 --> 00:56:01,120
And now that I have an Nvidia setup and an AMD setup,

1290
00:56:01,120 --> 00:56:02,640
I feel like I'm going to really be able to get to play.

1291
00:56:02,640 --> 00:56:04,160
Like neither one of the setups

1292
00:56:04,160 --> 00:56:05,720
are particularly high end graphics wise,

1293
00:56:05,720 --> 00:56:07,160
but there's still so much to learn

1294
00:56:07,160 --> 00:56:09,880
and see how systems respond with different graphics stacks.

1295
00:56:09,880 --> 00:56:13,080
And that's going to be a particular area of interest

1296
00:56:13,080 --> 00:56:14,040
for me, I think.

1297
00:56:14,040 --> 00:56:17,720
I've just dropped into Slack a link to a file

1298
00:56:17,720 --> 00:56:21,600
that might help your networking issue on OS 10.

1299
00:56:21,600 --> 00:56:25,840
This BRNetFilter thing needs to be called by sysctl

1300
00:56:25,840 --> 00:56:29,840
at boot time to allow the IP tables, I think,

1301
00:56:29,840 --> 00:56:30,720
to be modified.

1302
00:56:30,720 --> 00:56:34,360
So I think my Windows VM wouldn't get an IP address

1303
00:56:34,360 --> 00:56:35,720
until I enabled this.

1304
00:56:35,720 --> 00:56:37,520
So that's worth considering.

1305
00:56:37,520 --> 00:56:41,960
It's in that archvfio repo that's on my GitHub.

1306
00:56:41,960 --> 00:56:42,800
Of course.

1307
00:56:42,800 --> 00:56:43,640
And in the show notes.

1308
00:56:43,640 --> 00:56:45,600
Yeah, I was going to say.

1309
00:56:45,600 --> 00:56:51,720
OS, you're on top of it.


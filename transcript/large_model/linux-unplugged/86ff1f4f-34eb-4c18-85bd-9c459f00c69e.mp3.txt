Wes, you never have to worry about again.
They have thrown machine learning at recipes.
At least I think.
What did you find here?
Well, you already trust machine learning
to drive you around, right, Chris?
So why not let it cook for you
with some generated recipes using TensorFlow
and a recurrent neural network?
How does cream soda with onion sound?
Mm, about as good as the orange club tea sandwich
with cookies.
Yeah, these are pretty wild.
It's a TensorFlow model applied to a whole bunch of recipes
and then why not see what it comes up with?
Now they do warn here in the README,
it's all open source of course,
that these recipes are for research purposes
and not for actual cooking.
Maybe you'd make this one, I don't know, Wes.
Let's cook this up before the show
and see if we like it mushrooms with lentil,
stewed with shallots and tomatoes.
It sounds really good.
It has a lot of garlic, so what could go wrong?
Hello friends and welcome to your weekly Linux talk show
that has yet to be replaced by machine learning.
My name is Chris.
My name is Wes and I have high hopes for the machines.
They have a lot of sample data to review
because this is episode 359
and this week we have so much to get into,
including the death of Mac OS 10
and how this will affect the Linux desktop.
But before we get there,
I wanna say time appropriate greetings
to our powerful assembly of Mumble Room.
Lug members of power?
Time appropriate greetings, Mumble Room.
Hello.
Hello, good evening.
I need to work on that, you know?
I need to work on that name.
It's just, it was like a beta, you know, it's just a beta,
but we have a good crew in there.
Lots of people in the quiet listening as well.
We have 23 members there today,
some familiar faces and some new ones as well.
So thank you everybody for joining us.
Well, let's get into the unplugged program
because yeah, we have a lot to discuss.
First of all, some big community news,
some like things are changing kind of community news
for the Linux hardware future landscape.
And then we'll talk about how Apple switching to ARM
will impact Linux.
We don't do this too often,
but I think in today's world,
you have to acknowledge the entire marketplace
and ecosystem and how that will also affect us Linux users.
And we'll also talk a little bit more
about the longer term picture there.
Plus we have some pics, maybe some feedback and all that.
More so Wes, what do you say?
You wanna just start right in with the community news?
Yes, please.
See, I wanted you to argue.
I thought for sure you'd argue with me a little bit.
Now, you know, I love community news.
It's true, you do.
It's all kind of on topic this week
because it just seems to be the way the industry is trending.
There is an ARM-based Japanese supercomputer
that is now the world's,
is it the fastest or one of the fastest?
The part that I cared about, of course,
is that it runs Linux,
but it is a Japanese supercomputer that's taken,
it has taken the top spot
in the biannual top 500 supercomputer speed ranking.
Yeah, and it's the first time a computer based on ARM
has done so.
It's Fujitsu's 48-core A64FX system on a chip
that's powering the whole thing
and it's co-developed by Ryken and Fujitsu.
The computer placed in the top 500 high-performance results
with performance numbers like 415.5 petaflops.
That's 2.8 times as fast as IBM's Summit,
which is number two.
That 48-core chip, huh?
Wow.
So right now it's number crunching for COVID-19,
which is pretty cool.
Also, Fujitsu's 48-core ARM chip here,
this is one of those things we don't talk a lot about,
but Fujitsu is kind of a wild duck out there.
They're doing their own thing,
they're making these super cool systems,
but because they don't really fit
into the realm of everyday life,
they don't get talked a lot about.
But this is a nice reminder
that there's some killer Linux systems out there
from Fujitsu.
Yeah, super powerful.
Back in the day, I had access
to this neat flatbed printer they make,
so clearly they're in the hardware game
at serious levels in all kinds of spaces.
It's also kind of interesting here
where normally it's just been the Americans
and the Chinese sort of competing
for fastest supercomputer out there.
This is the first time that Japan's made the list
in the past nine years,
but obviously they came to play and with an ARM system.
I think we'll continue to talk about today
how that's a big sign of things to come.
Yeah, it does seem very fitting.
Debian also has some big news in the ARM department.
Ampere has partnered with Debian
to support their hardware infrastructure
and has donated three of their high performance
ARM64 boxes.
These Lenovo ThinkSystem HR330A servers
contain Ampere's eMag CPU
with an ARM V8 64-bit processor
specifically designed for cloud servers.
They've got a sweet 256 gigs of RAM,
dual 960 gig SSDs,
and a 25 gig dual port NIC on there.
So these are no slouch.
The donated servers have been deployed
over at the University of British Columbia,
just up north from the studio here.
And the Debian system administrators group
has already configured them to run ARM64,
ARM hard float, and ARM EL build daemons.
And all of that stuff is good news
because they're replacing previous build servers
that were running on basically development grade boards.
And Ampere's goal here really
is just to get better software developed
for their cloud built, they say,
the future of cloud and edge computing
for these very specific systems they have
where they're trying to build features
in at the processor level for this type of work.
They need the software support there.
They need the open source software support there.
And they seem to be big fans of the Debian project
reading through their release announcement.
So it's kind of a win-win.
I mean, come on, who's not a big fan of Debian?
The Dev1 folks?
Yeah, I suppose so, but you're right.
I mean, you know, the more these are out there,
the easier it is to build on these platforms.
And that is maybe one of the things
that can be difficult about the ARM world
is you gotta build for the platform
you're actually gonna try to run on.
Well, that's better for everyone,
especially considering the huge number of packages
in the Debian repos.
Yeah, I've been really enjoying the Pinebook Pro
over the two weeks now that I've been using it.
I do feel like there's been a handful of packages
I wish I could have gotten installed
that are just not yet built for the ARM chipset.
And I think it's not really,
you know, I'm trying to think it's mostly
like commercial applications
that maybe even if the desktop client is open source,
it's connecting to their proprietary service.
I think that's probably the ones
that haven't worked the most.
And it's been frustrating, so I'd love to see this grow.
But watching all this ARM news
and reading it from an ARM laptop
has been a bit of a mind job for me
because the Pinebook Pro is already there, right?
The ROK Pro 64, it's already a competitive mobile ARM
platform and we have the PinePhone in studio
and it was much better built than we expected
right out of the box.
That's for sure.
So in a big way for open source and free software,
it feels like ARM is now just an implementation detail
that hasn't just really gotten wide enough adoption yet
for all of the software edge cases to be worked out.
But it just seems inevitable at this point.
Yeah, I mean, these are cloud enabled servers,
AWS, Amazon, they've been working hard
on their Graviton chips too.
So there's gonna be some really nice,
in terms of performance and cost,
instances available over there before long.
And unless you've got x86 workloads
that you really need because of some optimization
or some vendor library that you don't have control over,
if it's all just open source stuff
that you can rebuild, recompile,
or already just runs on top of Python or the JVM,
why not run on ARM?
And I think too about the Raspberry Pi.
So the Raspberry Pi 4, eight gigs of RAM,
pretty good processor now.
Imagine what that thing's gonna be like
when it's the Raspberry Pi 7, Raspberry Pi 8,
maybe even the Raspberry Pi 10.
It's gonna be a very capable little board.
It's gonna probably put what we would consider
a standard desktop system to shame today.
And that's just a trend that just seems to continue.
So it's coming, Wes, and the Pine Book
has really made me kind of appreciate it
because the battery life is fantastic.
And I've been on this trip, I'm still on my trip.
I'm actually in Texas.
In fact, not only am I in Austin, Texas right now,
but I am christening my cousin's studio
that he had built down here at his office in Austin
with the very first broadcast right here
on Linux Unplugged in his new studio space.
We're still dialing it all in,
doesn't have all the furniture in here yet,
doesn't even have all the final sound treatment
installed yet, but it is pretty, pretty cool.
Here, I'm gonna lean back so you can enjoy the space.
Are you ready, Wes?
I'm gonna-
Oh, please.
It's pretty, pretty great.
You see, it drops off.
You hear, I mean, it drops off pretty good, doesn't it?
I mean, really-
It's got some good bones in that studio.
So pretty cool to do the first broadcast right here.
So we're battle testing it for him.
And I might give him a few pointers afterwards.
My first tip was put a rug down.
You gotta put a rug down.
So he went this morning to Lowe's and got a rug.
I mean, you just want as much stuff
to absorb that sound as you can, right?
Yep, so pretty great.
So I'll probably be down here for the rest of the week.
And I'll probably start the long trek
back to the Pacific Northwest, maybe via Montana first.
I just like how wherever you go,
you just end up setting up studios, you know?
So wherever you stop, you're like,
hey, can I just, I'll just rent an extra room
and I've got all this foam paneling.
If you guys could put that up for me.
I mean, that's, you know,
I fill all the RV up with foam, right?
Just for these very purposes right here.
It's like a ball pit, but you're just floating on foam.
So I'm looking at my route back, you know?
I'm looking at that and I'm thinking,
I'm gonna avoid New Mexico as much as possible
because I think I lost five years of life on my RV.
And in fact, I even have a slight oil leak
from my fill pan from my drain.
Just my drain plugs leaking.
But I think it's because the New Mexico roads were so bad
that it just shook Lady Joups down to her core.
So I gotta do like a little bit of maintenance
on her before we head home.
And I think I'll probably go up through Colorado
and Wyoming, through Montana,
and then through Idaho, back to Washington.
So take a nice long trek, you know?
Just work from the road.
I got the kids with me, got the wife, got the dog.
Got the Mi-Fi, so yeah,
why not enjoy the experience of the West?
Got multiple Mi-Fis, Wes, multiple.
Yeah, that's true, you're a pro here.
And so not only have I been rocking the Pine Book Pro
as sort of my, I just want one thing
that I just plug in and keep charged
and don't have to worry about it while I'm on the go.
Pine Book Pro has been great for that.
But I gotta say, so much respect for the Raspberry Pi 4.
People talk about, oh, it runs a little hot.
You know, that was a big discussion for the Raspberry Pi 4.
You better get a heat sink for it.
And people are getting heat sinks with active fans
and just going all out to try to keep the temperature down.
Last night, the booth that I run the Raspberry Pis in
along with my Wi-Fi and my Switch,
and I don't do this, don't do what Chris does.
And where I have my hard drives
that are all formatted in ButterFS,
that space got to 99 degrees last night.
Oh! Yeah.
Now that's Fahrenheit, right?
Yeah, otherwise they'd be melting.
They just kept going, you know?
Like I'm streaming Plex to the TV, the Wi-Fi's,
everything's just working.
If they just, they get hot
and I don't have them under intense load,
if I really had them crunchy,
then they'd probably start having issues.
And I vent them when I get home
and I realize how hot it is.
I like the idea of you, because it's in a seat in your RV,
like the idea that you have to prioritize,
well, am I gonna sit down and relax?
Or am I gonna vent my computers?
No, sorry, son, you can't sit there.
The Pi's are venting.
That actually happened, yep.
I gotta, hey, I gotta vent the computers.
Oh, but I wanna get to it before they all fry,
because what I'm really worried about going
isn't now the Raspberry Pi so much.
I'm worried about the little power bricks
for like the switch or the Wi-Fi access point.
I'm worried about that melting or popping.
So that's my concern at this point,
because the Raspberry Pi will thermal throttle.
It'll even, it'll shut itself down.
So that isn't the big concern.
That's the nice part about this solid state life.
There's not a whole lot of moving parts.
So it's gonna fail, it'll get there eventually.
And actually, the way I realized it's kinda great,
I mean, it's not a huge thing,
but I Velcroed everything in there,
and that, or I should say that loop and hook,
it's not Velcro, it's loop and hook.
No, come on, that's a brand name.
But that creates an airspace under the hard drives
and under the Raspberry Pi,
so there's a little bit more room for air to move
when I do ventilate, so that helps.
But I'm, yeah, I'm pretty impressed
with how well it's all worked.
LadyJuice is so integrated now with the Linux systems
and the automations that it's pretty critical.
So that's, if anything happens,
it makes things very, very, very inconvenient.
But it's all awesome so far.
You drop back like 50 years if that little booth goes down.
Yes, yeah, really.
The one thing I will note for folks,
because I do hear from people
that are building these into their campers
for the summer and stuff like that.
All of these systems expect your home
to remain in one place.
So anything that uses location for your automations
or security stuff, or like for me, like my cameras.
The way I have my home assistant system work
is when I leave an area, the cameras come on.
If no one's been home for a while, lights start to turn off.
The heaters go to standby mode.
Like things sort of shut down over time when no one's home.
And then when people arrive, these things reverse themselves.
Or when the sun sets or the sun rises,
other things automatically trigger in the RV
to maintain things.
And the first couple of days, I didn't really notice
because I was pretty close to home on the road.
But by the time I got to Utah,
I noticed that something wasn't quite right
with the lights and everything.
And then like things just didn't seem like
they were working quite right
or something wasn't in the state I expected it to be in.
And it took me a solid maybe three or four days
into the trip before I realized, oh yeah,
every couple of days now, I got to go in there
into home assistant into the other systems
and update the location information
because they just expect your house to never move.
Oh yeah, I mean, I don't move around as much as you,
but I move around more than I'd like.
And I've noticed that too, just you change a little bit
and all your systems have already learned like,
oh, these are the nearby cell towers.
Here's where you are approximately.
You don't tell them any of that.
And I don't know how to necessarily tell Google
that I've moved and that my directions shouldn't go
to the old place.
Yeah, it's very tricky on Google home
and it's not even worth it on the ecosystems.
They just are such a pain in the butt.
It's not even worth updating them.
And so you just basically get weather and information
from your home location.
The plus side of that is no one knows where you are.
Yeah, that is true.
That is kind of great actually.
But speaking of Google,
there is more features coming to Chrome
because we've been talking about how Chrome needs more stuff
and more specifically, it's getting a feature
that iPhone users and Mac users seem to enjoy, AirDrop.
And they're calling it Nearby Share
and it will expand Android devices, Windows, Linux, Mac OS
and Chrome OS all thanks to its Chrome integration.
Yeah, in other words,
Nearby Share will be part
of the Google Chrome browser feature lineup.
One more feature for this browser that just keeps growing.
Taking care of the whole sharing thing regardless
of the platform and hey, that is kind of nice, right?
Chrome runs basically everywhere these days.
According to a recent discovery
shared by Dinson Francis of Chrome Story,
the feature has actually already been implemented
in the Canary version of Google Chrome.
So if you're running that,
maybe you've seen it show up in a system near you.
That means it's currently
in a rather advanced testing phase
and probably we'll all get to play with it before too long.
I mean, this is so late.
I don't understand like what a handy feature to have
just observing folks in the iOS ecosystem.
I mean, this is a pretty basic technology, right?
I didn't realize how popular AirDrop was
until I started visiting offices again
and people would just use AirDrop for just,
hey, I updated the presentation before you go live,
here's the presentation for one group I'm thinking of
or here we're at the meeting,
would anybody else like a copy of this doc?
And they just AirDrop it to everybody.
And to me, that always seemed like,
well, that's what file shares are for
or God forbid, even an email attachment.
But much like many other things in the corporate world
changed since the last time I was in it,
AirDrop seems to have been fairly adopted.
And I note that Microsoft integrated a very similar feature
with the same name, Nearby Share, that's awkward,
into Windows 10 build 1803.
Now, technically, Chris, that's Nearby Sharing
on the Microsoft side, totally different.
Right, my bad.
And I wonder if Google's is gonna be like Chromecast
where there's some cloud involved
sometimes in the actual transmission of the data
or sometimes it's just for session negotiation
or will it be over the land?
Because that seems to be the primary advantage of AirDrop
and the equivalence that we've tested on the Linux desktop
is it's land to land.
Yeah, right, there's totally times
where you just don't have access to the cloud
for whatever reason, even if you wish that you did,
then these features can just keep working without a hitch.
That's a lot of value.
When I'm driving and there's areas
where maybe there's a tiny bit of cell signal
or there's no signal, so, so much of modern technology
is just worthless, just worthless.
And I just don't want any more of that.
There's no reason that a cloud server needs to be involved
for me to discover something on my land
and send something to an IP address on my land.
Right, I was just thinking of, I had a time on a plane
where I had an ebook downloaded on my laptop,
but I needed it on my phone.
But I hadn't paid for the internet, of course, on the plane.
Because it's ridiculous.
Yeah, and it just, despite all of the weird hacks
that I tried, I just couldn't get it to go.
And if I'd had this feature that worked offline,
it would have taken me two seconds
and I would have enjoyed my ebook.
Was that before you tried HTTP over DNS?
Yeah, I think so, in my more naive days.
All right, well, let's do a little housekeeping here
in the pod, because we have a few things to talk about.
Number one, the Luplug takeover is happening.
They now have an autonomous zone in our mumble every Sunday.
They also have established an autonomous zone
on the IRC server, irc.geekshed.net pound Luplug.
Now, the LuG itself takes place every Sunday
at noon Pacific.
That's the same time we do this here podcast,
but it's just on Sunday.
It's also, somehow, they have leveraged
their new negotiating position to campaign Angela
and they have gotten it
on the actual live production calendar.
A true victory for the Luplug.
So join us every Sunday where we hang out, talk Linux,
come up with ideas for the show,
and if I don't make it, they plot takeovers
of the entire network, so that's fun too.
All of that is in our mumble room,
the same exact software and server we use for this show.
So you get it set up once, you come hang out on a Sunday,
and then if you ever have the opportunity
to join us on a Tuesday, you can.
That's when we record this show, Tuesday live,
noon Pacific over at jblive.tv, also on the calendar.
How about that?
Huh, look at us.
It's really all Angela.
So thanks to Angela for doing that.
Jupiterbroadcasting.com slash calendar
to get that converted to your local time.
We'd love to see you.
If you're hanging out, I just jump in from time to time
and make it for maybe an hour,
maybe make it for a couple hours,
maybe I make it 45 minutes.
It goes while the conversation's going.
That's how long, and you can just sort of dip in.
It's like a beautiful, crystal clear Linux stream
of fresh conversation.
That's what I love about it,
is it's just a place that you know is gonna be there.
Sometimes you can make it, sometimes you can't.
So you never know quite who's going to be there,
which is partially exciting.
But regardless, you know there's gonna be a community
of folks interested in talking about Linux and open source.
Ready, if you are, on Sunday.
Couple other bits of admin for this show.
You hear us mention the show notes quite a bit.
Linuxunplugged.com slash 359 will be links
to stuff we talk about today.
That's also where you'll find the contact page link.
If you'd like to send us an email
or recommend something we check out on the show,
you can find that there as well.
Linuxunplugged.com.
And with that,
we enter a zone that is truly going to be frustrating
for some of you.
I warn you, you may be triggered
by what happens next on the show.
This week was WWDC.
And I don't think we've ever covered one of them ever
on this show before, very intentionally.
But this year is a little different
because it is the death of Mac OS 10,
and it is the transition of the Apple platform
back to an extremely esoteric custom-built system
that will undoubtedly be very, very locked down.
This is a big moment
because it's Apple's custom system on a chip.
It's not an x86 processor
that's capable of running x86 OSs out of the box right now.
It's something brand new.
Apple is officially moving to its own silicon chips
for Mac hardware.
Calling it a historic day for the Mac,
Apple CEO Tim Cook detailed the transition
from PowerPC to Mac OS,
the move to Intel chips before unveiling their plans
to use Apple's own ARM-powered silicon chips
in the Macs in the near future.
The Mac has had three major transitions in its history.
The move to PowerPC, the transition to Mac OS 10,
and the move to Intel.
And now it's time for a huge leap forward for the Mac.
Because today is the day we're announcing
that the Mac is transitioning
to our own Apple silicon.
Wow.
Oh boy.
Now, we don't have all of the details yet,
but what we have so far is a Mac mini
with an iPad processor in it, 512 gigabytes of storage,
some RAM in there, and it's a development kit.
16 gigs of RAM.
And I think this will truly be the end
of any opportunity to ever run Linux on a Mac hardware.
I really do.
I think this is just the end of it natively.
You'll be able to virtualize it, we'll get to that.
But I think it truly is the end.
Now, this is an awkward position for Apple
because Linux can't be ignored anymore.
In their previous transitions,
they didn't have to address it.
When they announced x86 Max,
it wasn't the elephant in the room.
But now it is legitimately part of the real world.
It is part of people's development workflow.
And it even got a mention in their keynote.
Now, as Craig mentioned,
many of our users rely on apps from other environments.
So let me bring up a Linux VM and parallel its desktop.
You can see the graphical user interface
designed for Linux here.
But of course, many developers like to use Linux
for hosting servers.
So let me dive down to the command line
and launch an Apache web server.
And now, I can simply bring up Safari
and browse the website of the server
I just launched in the Linux VM.
Pretty weird to see Linux demoed on the stage.
Well, it's not really a stage,
but on screen at WWDC.
Yeah, right, they're giant developer event
that normally includes mostly just Xcode
and some flashy Mac features.
Yeah, it's remarkable if any other company gets a mention,
let alone a GNOME Shell Debian 10 demo.
That's pretty wild.
So what is the open source story on the Mac?
Because I think one of the first reactions
that people have is,
well, Linux already runs great on ARM processors.
But something that people have to remember
is these are not standard ARM CPUs.
These are custom Apple silicon.
ARM isn't a CPU.
There's not like it's an Intel x86 processor,
where you could buy something that's x86 compatible
that could be from AMD or Intel.
There isn't one ARM CPU.
And so it's a series of technologies
and there's so much more to it,
including graphics, storage controllers, networking,
all of that has to be supported
by the host operating system.
And I think it's pretty clear that Apple's vision for this
is we'll port the open source applications themselves
and the rest is up to virtualization.
We're also passionate about making sure
that open source projects thrive on the Mac,
especially if they benefit
the larger software developer community
and can help accelerating the port
of other software packages.
So we've already done the initial work
for some of the more widely used open source projects
to help the community get started.
And we'll be publishing patches to them in the next days.
They've ported things like Qt,
they've ported things like Mono, FFmpeg,
and others to their ARM processors.
Homebrew, that's a big one that stands out,
and Blender even.
Yeah, but for the actual Linux OS itself,
for that they've updated their hypervisor in Mac OS
and they expect that's how people will run Linux on Macs.
One area that we have worked on removing kernel extension
usage is for virtualization products.
The Mac is the world's best developer platform.
Many developer workflows require using tools
from different platforms or performing server deployments.
To meet these needs, many of you spin up virtual machines
running different operating systems
or lightweight containers like Docker.
And we know that this is critical to your work
and important we support these needs.
That's why we've been working hard with our partners
to support virtual machines on Macs with Apple Silicon.
As you saw in the keynote,
we started working with Parallels,
and I want to walk you through an early port
of Parallels Desktop for Mac,
running on the Apple hypervisor
that's been updated for Apple Silicon.
This is running on a prototype Mac with Apple Silicon
that supports virtualization.
Here we have a fully featured ARM version of Debian Linux
running on Parallels Desktop.
Remember, this doesn't require any third party
kernel extensions to be installed now.
I've installed Swift for Linux and started a new version
and started a new project with Vapor,
a Swift web framework you may be familiar with.
So we should be clear here, right?
That this is Debian on ARM?
Yes.
You can run efficient ARM VMs
on top of their ARM-based silicon.
Exactly.
This is Apple supporting Linux VMs that are ARM-based.
They have, I believe, taken Beehive from FreeBSD
and ported it to Mac OS and customized it
to run enhanced on their silicon.
It's now all in an SDK you can access.
So instead of having to make your own custom
kernel module basically,
there's just now regular Apple calls to the OS
that you can say like, hey, I want a new ARM VM.
Here's the disk image I want you to use and go at it.
Yeah, I mean, it's not unsimilar to how we do it on Linux.
It isn't a complete solution.
See where Microsoft, they closed the gap
and made a solution around Linux.
Apple is essentially offloading this work to Beehive
and Parallels, a commercial company to build the front end.
And then they're deprecating the ability
to actually run native operating systems on their hardware
and saying, well, look,
we've ported a bunch of the open source software
and we've got this fancy hypervisor
that we've stolen from BSD.
So what's your problem?
I think when you zoom out and look at this,
it means the world has one less Unix-like operating system
for the desktop.
And it makes Linux the most prominent Unix-like desktop
that is now available for general computers.
So if I take your point here,
it's that Mac OS is, for a while we pretended,
or I mean, and it was, right?
The Hackintosh world maybe demonstrates this best.
It was a sort of general purpose operating system.
Sure, 95% of it ran on Apple hardware,
but it was an operating system that could
and would support other things.
But in theory, the more iOS-like future Mac OS 11, I guess,
that's gonna be even more targeted
at custom Apple hardware and isn't intended anymore
if it ever really was for more general purpose things.
I don't think it's possible.
I think the controller,
which you've already seen at the T1 and the T2
that are in the MacBooks with touch bars and later,
it's never been supported by Linux.
And now they're going to integrate the secure enclave
and encryption and all of that into the system.
That'll never be supported by Linux.
They'll never do that.
I think that's an interesting aspect here.
You touched a little bit on, well, yeah,
I mean, Linux already supports ARM architectures and stuff,
but I think the biggest thing here
is they no longer have that Intel chip at the core
that limits sort of how they're gonna customize their board
and configure all the other chips running on the system.
Now that entire domain is basically in their hands.
And so, yeah, it's not new.
We already had the whole, the T2 chip,
lots of custom hardware and controllers
that just Linux didn't support
because it was all custom done
between the hardware and the software on Apple side.
This is just one bigger step down that road.
Yeah, very much.
And Drew, I know that you worked,
I think as an Apple genius or a certified Apple tech
for a while, ages ago,
back when you could put Linux on MacBooks.
I'm curious to know your perspective on this.
Yeah, I was ACSP and ACT certified for a while
working in the MSP world.
And one thing that I do want to be flat out about
is even though they make the promise
that they're going to be porting
some open source projects over,
I would be hesitant to really put any faith or trust in that
because they are so wary of the GPL v3
that they went so far as to roll
their own Samba implementation
rather than go up to Samba 3.
I would not expect for them to really bring out a ton here.
It's only going to be things using GPL v2, LGPL,
things that they consider to be friendly licenses to them.
And while that will cover a large portion
of open source products,
we're not looking at a case of Apple
is suddenly going to be a huge boon to open source on ARM.
I just don't think that's going to be the future for us.
Yeah, I could see it causing an industry reaction
where more players move towards ARM
and that has the net effect of improving
open source free software
and Linux's support for that platform.
I could see it having that sort of knock on domino effect
at the bigger picture level.
I don't think any direct hardware drivers
are going to be contributed by Apple.
For a brief moment,
when they started talking about Linux up on stage,
I thought, what if they did it?
What if they just took a sucker punch to Microsoft
and they went all in on a bootcamp style Linux support?
That'd be pretty great.
But Apple users aren't going to care.
I think it was a very common use case
that if they were going to be using Linux,
they'd be using it in a VM or in a terminal,
SSHed into a server.
They weren't putting Linux on their MacBooks.
This is just something that I've always thought
would be great to see Apple support.
And now it's just, that hope is gone.
For the most end users,
I think running it in a well-supported VM
is actually going to be a pretty good solution for them.
Unfortunately, I think when you look at the state
of software distribution and development
in the open source world,
this is going to fit right in
with where most people are at.
And then something to keep in mind,
there's the Docker angle here.
And that also got a mention in Apple's keynote
and in the State of the Union,
where some of these clips are coming from.
And it seems they're planning to work with Docker
to bring some kind of support natively to macOS.
These environments can interact
due to features built into macOS Big Sur.
And thanks to the hypervisor framework
with complete support for networking, storage,
input devices, and much more.
Virtualization technology is used by container solutions
such as Docker.
And we know it's incredibly important for many of you
as it's a very common for server-side development
and testing.
So we'll be working with Docker to enable this
in the coming months.
To Docker somehow via some probably virtualization tool
like it's done on Windows.
Right, well, I mean, that's how it works now, right?
Docker just spins up a Linux VM in the background
and then the user space sort of connects everything through
with proxies and forwarding.
On macOS already?
Yeah, yeah, that's how they do it now
because they didn't go the Windows route
of having this before fancy API compatibility
and now just even more built-in things.
So instead of OS X or OS 11 now doing,
Windows does that at the OS layer for you
with WSL and on the Mac side,
that's what the fancy Docker desktop app is for.
Yeah, and we're not gonna see something like WSL on Macs.
That's just, it's not gonna happen.
They are too scared of dipping their toes in the water
of something that is a license that requires you
to contribute back.
That's never been their thing.
For lack of a better word, they're takers,
they're not contributors to open source.
And we're not going to see something like them
bringing the Linux kernel into Mac
and having it run things natively.
It's just never going to happen
unless there's a huge cultural shift at Cupertino.
You know, that's really interesting.
You were talking about the taker side
and I think they kind of hit on it there.
They were talking about how they've already made
some patches that are gonna be contributing
to a wide range of open source software.
But right at the end, they mentioned,
the whole goal of that is it's just like a recognition
that these software libraries are at the base
of so much proprietary software and open source
or mixed licensed software,
that their goal was to get end user software going.
And so they just had to touch these base systems.
And it's an interesting model of take when you want,
contribute when you need to.
It's very Apple.
And you think about their focus.
Their focus really at the end of the day
is all about iOS services,
building that iOS ecosystem platform.
That's really what drives them.
And so you can kind of look at the lens
of these decisions through that.
This is bringing the Mac platform closer together.
It means that the Mac is once again,
kind of its own unique branch of technology
like it was back when it was power PC
or even Motorola based.
I think, now I could be wrong,
but I think this is tremendously wonderful for Linux
on the desktop.
And it's also to FreeBSD's loss.
If you think about it,
imagine just for like a crazy branch of reality moment,
let's picture that, right, FreeBSD was GPO.
And then let's picture that Apple decided to adopt
some of the BSD user lens stuff
and bring it in with their mock kernel into Mac OS.
And that every single improvement they made
to any of those tools or any of that user space stuff
over time had to be contributed 100% back up to FreeBSD.
Where would FreeBSD be today?
And I know Apple hates the GPO
and they don't wanna use that blah, blah, blah.
Even though they do have some GPO projects actually.
But I know that for their desktop
and for their consumer systems,
that's not what they're into.
But imagine that moment.
This could be FreeBSD's moment
for those who want to remain on the x86 platform.
This could be FreeBSD's moment,
but instead it will be Linux and Windows.
And I think for those who want a Unix like system,
now you have Lenovo, Dell and System76,
Intraware and others that are at the top
of their games right now.
Making Linux hardware, top Linux hardware,
the best Linux hardware we've ever seen.
And it's a perfectly functional developer system
that you can install and just continue to upgrade.
And you don't have all these shenanigans
where once a year they're gonna pull the rug out
from underneath you with either a new UI
or a new platform or a new way of distributing apps
or a new app store system
or a new in-app payment restriction.
That kind of stuff just doesn't happen.
And it's just goofy nonsense
that people that are creating server-side and web software
just don't even need to deal with.
Now, people who are writing iOS apps and Mac apps,
they'll have to deal with it,
but I think Apple will limit the total developer appeal
by moving away from x86.
Right, I mean, they have done a lot to show how games
and other sort of graphical utilities will run,
but you've just got to wonder how many times
is there some weird C library
that you have to get all the right build dependencies
installed for to get it to compile
just because your Python app needs to link against it
so it can use those advanced features.
Now, it does seem like they've already,
they've been paying particular attention to that.
If you look at some of the libraries,
they've already chosen to port,
but sometimes you get into the weeds
and there just isn't an arm build for it
and you're not comfortable porting that C dependency,
you might be stuck.
Yeah, I think also the lack of virtualization options
will hurt.
When you spend $3,000, $4,000 on a computer,
you want to be able to do all of the things
you needed to be able to do.
And that often for a lot of professional workloads
or even hobbyist workloads includes virtualization
and emulating full stack, emulating x86 on arm.
I don't care how fast your arm processors are,
that's going to be painful.
And it seems like Apple sort of has built a mechanism
for certain types of Mac software
and they're calling it Rosetta 2.
Now, while we expect most developers
will go native immediately,
we want to make sure that users can run all of their apps
on day one, even if some apps haven't yet been updated.
Now, we've been down this road before.
When we transitioned from PowerPC to Intel processors,
a cornerstone of that transition was Rosetta,
a technology that makes it possible to run PowerPC apps
on Intel-based Macs.
Mac OS Big Sur will include a new version of Rosetta,
Rosetta 2.
Rosetta 2 automatically translates your existing Mac apps
so they work on new Macs with Apple Silicon.
And this time, Rosetta is even faster,
more powerful, and more compatible.
We will see.
They say it translates the apps at launch time.
And if you download the app from the Mac App Store,
in the background, it will translate the calls
almost wine proton style, where it says,
okay, this is an x86 call,
I'm going to translate it to an Apple Silicon call.
And it will pre-catch that for certain types of apps.
And then for apps that you download from the web,
they will figure it out on first launch.
And so that first launch will have a delay.
That's where it's really interesting
because they have the ability both to like
just sort of convert it ahead of time
for a compiled application,
or for something like a web browser
that's running just-in-time compiled JavaScript,
then they can do it just at runtime too,
which I mean, clearly,
that's where a lot of engineering effort,
besides building the Silicon,
they spent a lot of time monitoring it too, I'm sure.
It's an interesting bit of technology.
I think part of me covers this with a bit of sadness.
It would have been great to see something like Mac OS
just become generally available.
I would love to see Apple just say,
yeah, you know what we're going to do
is we're going to make it the most powerful
developer workstation for every developer in the world
like they claim it is by making it available
to everyone in the world.
Right, compete on the same terms of like,
I can buy some sort of decoupled hardware,
whatever I want happens to suit me best, Mac or otherwise,
and then run your operating system
because it's a good operating system with a good ecosystem,
which that all might be true,
but I just, I can't run on a ThinkPad or an XPS.
Yeah, and with this transition, Mac OS 10 is done.
They're done, they ran it for about 17 years.
They got about 18, 17 years of life out of it.
Really, they're launching Mac OS 11,
and that will be a new version,
a new branch with a new UI with these new features
and aim for ARM compatibility towards the future.
And I think when we look at this,
we as a desktop are not yet ready
to fully replace either Windows or Mac OS still.
And we covered this a little bit last week.
I would love to have seen our desktop environments
be even a little more robust,
get even a little more polished.
I'd love to see a more powerful file system used by default
in more distributions.
I would like to see more engineering
put into some of the finer touches
to get developers up and running with sets of tools.
Like you've seen certain distributions invest in,
but it's just unique to them.
Those are areas where I think like Linux
could have shored up a little bit
before this opportunity came around, but here's the thing.
This is to Apple's own admittance, a two-year transition.
Now, Tim Cook says they're gonna start shipping ARM Macs
by the end of this year,
but they say it'll take them multiple years
to actually pull this off.
We still have time and we still have an opportunity
to see where the rest of the industry goes here.
And I think Linux is in a really,
really good position right now
because of our early work on ARM
and because of the continued acceleration
of adoption of ARM in the cloud,
which will benefit Linux as well.
I think we're in a good position.
Yeah, you're right.
I mean, really everything's been going well from Linux.
Microsoft recognizes it.
I mean, Apple clearly recognizes it,
mentioning Linux at WWDC,
a powerful ecosystem of easily recompilable software.
That's about the best thing you could hope for, right?
They had to go set up special relationships
with folks like Microsoft and Adobe
to make sure that their flagship products would run
versus the open source approach where they just said,
oh yeah, we already fixed it.
We'll send you the patches.
Yeah, and it's just gonna be in the OS and good.
Yeah, exactly.
I mean, it gives them more control
and to some extent, if they contribute some other things,
it might benefit the ecosystem.
I mean, just running on their platform is good.
Ideally, you'd hope that they would continue to do
and contribute some improvements and such,
but they at least acknowledge
they have to play a little bit of ball.
So what do you think Intel's reaction will be, Byte?
Well, if I look at how Intel reacted
when Microsoft went with Snapdragon,
it will be a lot of lawsuits coming up.
Yeah, especially it seems like Microsoft got in that area
when it came to the emulation of x86
and Intel released some statement already saying,
we're gonna keep working with Apple on other stuff.
You know, we don't just sell them CPUs,
but also our CPUs are still better.
They essentially released that statement.
Well, I'll just say this before we wrap up,
if anybody out there in the audience
ends up with one of these Mac mini iPad monsters,
try putting Linux on there and let us know how it goes.
I'd be curious.
Okay, Westpane, before we get out of here,
we do have a pick this week that is rad.
It just, first of all,
is a great example of how awesome
a command line application can look.
And second of all, very handy.
Yeah, this is so cool.
It's called Unsilence,
and it's a console interface in library
to remove just the silent parts of a media file.
Yeah, even videos or whatnot.
So say you download a lecture
and the professor pauses, walks back and forth
and just sort of, you know,
maybe there's two, three, four, five, 10 seconds
of silence there, just snip all that out for you.
Or sometimes Chris is burping on the live stream
and you just don't want to hear it.
Yeah, you do need something tuned for burps though.
That is not impossible though.
Right, customized.
That's what Drew's for.
Drew's tuned for burps.
We appreciate you.
Yeah, can we develop a machine learning module
for detecting burps and farts?
That would make my life much easier.
Well, we've got plenty of sample data,
so we should be able to.
Yeah, there you go, I have a link to that
and everything else in the show notes.
That's such a nice app.
It gives you tons of feedback as it goes through
and like figures out where all the silent bits are
and removes them.
And you know, there's all kinds of stuff
because it's just some Python and FFmpeg.
And so if you want to customize this,
you want to make a video
where it's a whole bunch of jump cuts really quick,
or you want to make a video
that just contains the silent parts,
all of that's possible with this library.
Everything is possible with FFmpeg, let's be honest.
It's the best tool ever.
And it's already ported to run on Apple Silicon.
Oh, good.
All right, well, I think that's about all the Apple talk
we have in us for like the next 360 episodes,
so that should be good.
Unless somebody gets their hands
on one of them development kits,
then we might bring it up again.
LinuxUnplugged.com slash contact,
one more plug for how you get ahold of us.
The network is at Jupiter Signal.
The show is at Linux Unplugged on the Twitters,
if you use it.
And if you don't, I understand.
Just go tell a friend about the show.
Spread the word about the big talk show, we appreciate it.
Let the world know there's an Unplugged out there for them.
See you next Tuesday!
士 put your phones in your pocket
So I think, you know, the reality is, is that Macs haven't been for a long time or were
never going to be computers that you could just use for whatever you want.
They are a product that has that product's operating system, like a Nintendo Switch does,
like a PlayStation or an Xbox does.
And you've got to think about it in that context, not in a, hey, this is a piece of consumer
technology that is mine and I can do what I want with.
You have to think of it as this is a piece of technology that is built for very purpose
specific things.
And if I am doing those things, perhaps it's good for me, but I can't make it do what I
want.
And even though it's very expensive and if I spend $4,000 on a laptop, I should be able
to do everything with it.
That's just not the reality is there is a use case spectrum now, and it just if it doesn't
fit within that use case spectrum, this is not a computer for you.

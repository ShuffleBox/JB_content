There's this thing in the back of your mind
where you sometimes wonder,
I feel like computers used to be easier
or they were faster or you could do more with less space
and you always sort of kind of dismiss that.
The practical voice comes in and says,
oh, come on now, Chris.
Computers are great.
They do so much more.
They're connected to the internet
and they have richer content
and they're so much more sophisticated.
And I go, yeah, you know what?
Practical self, you're right, you're right.
But then you try out like Haiku OS,
which is, it's from an era
that almost feels like an alternative universe,
the way personal computers could have gone
and you realize that things may actually have been better
and they were way ahead of their time.
I didn't really expect to have this,
but it just hit me in waves
as I was trying out Haiku this week.
It is another way of doing computing
that I think was better.
Like they nailed it back then.
If BIOS or B-O-S, however you like to say it,
had gotten the user desktop share that Linux has today,
you know, something that's not substantial,
but it's respectable and sustainable.
If BIOS had achieved that back in the late 90s, early 2000s,
they would be the most advanced,
sophisticated operating system on the planet today
because where Haiku is at right now
is phenomenally mind blowing.
This is Linux Unplugged episode 269 for October 2nd, 2018.
Welcome to Linux Unplugged, your weekly Linux talk show
that's post-test barbecue and pre-switching to HaikuOS.
My name is Chris.
My name is Wes.
Hello, Wes.
We have a really fun episode today.
In fact, it was one of these special episodes
where I jumped on a train, took a ride down to Seattle
and met up with Wes in his home turf
so that way we could brainstorm about the show over lunch
and on the drive up.
At least that's our excuse.
Worked pretty well.
It did actually work really well.
Thank you for the ride, by the way.
That was great.
I really enjoyed it because I could work on the train
the whole way down and prep today's big, big show.
So coming up, we'll get into some community news
that I think is gonna peak your interest
and things that we should probably just keep an eye on
over the next few months.
Plus we'll look back at what some may say
was the heyday of computing.
When everyone hated Microsoft
and BOS was possibly going to be a thing.
And then we'll look forward now with the new release
that the Haiku project has just put out
after a really, really long time.
And we'll try to make the case for Haiku
and why you should care.
If you're sitting there thinking to yourself,
what's the point?
I hope we answer that today.
Then we'll give you an update on our ThinkPad T480s.
My thought on this is what's the point of doing a review
if you don't follow up after using it for a while
and tell you about some of the road bumps you've hit.
And some of these apply to multiple breeds of laptops
from several vendors.
So we'll get into that, do a little followup there.
Then we'll tell you about some of the new things we set up,
the VM environments that we're doing
and some of the tools we're using
to try to manage those VM environments on our laptop.
And then last but not least, a little bit of a tip.
We've talked a lot about the LVFS project.
Well, today we're gonna talk about doing LVFS the hard way.
So perhaps you're not a Gnome Shell user,
you don't have Gnome software.
How do you get all of those great firmwares
onto your machine and get your firmware updated
if you don't have Gnome software?
How do you do it?
I wanna know.
We'll tell you how to do it.
It's just a few couple of easy commands
that are probably already installed on your machine.
And you can update your firmware from the command line,
which is the proper way to do it.
It's the proper, come on, that's the proper way to do it.
Well, we can't go any farther though
without bringing in our virtual lug.
Time appropriate greetings, Mumble Room.
Hey, hello.
Hello.
Good morning.
Wake up and smell the coffee.
Ha, ha, ha.
We got a great turnout.
Brent is in there, Brandon is in there.
We have two Erics, Eric and Eric the IT guy.
Mr. KP, Mini-Mech, Ryan Sipes returns
for a second show in a row, and Sean's back too.
And Sean, you've been here for a while too.
So guys, thank you so much.
That Mumble Room is open.
You can find out more by just googling
Jupiter Colony Mumble, really.
There's a setup guide.
You just have to pass a mic check and have headphones,
learn how to use Push to Talk,
and you can join the conversation in the show.
Next week is gonna be 270.
What?
Be really awesome to have a great showing.
Yes, it would.
Come join us.
It's lots of fun.
We did do the test barbecue after last week's episode.
It went pretty well.
There was one dynamic situation that,
all in all, all things considered went pretty well.
Wes brought us a surprise sous vide,
but the sort of dynamic situation
that had to be dealt with was the brown bear.
You see.
Oh boy.
He, myself, not a big fan of the schnapps,
but brown bears recently discovered Rupplemintz,
which he's a pretty big fan of and it's pretty strong.
So we discovered the boundaries
of how much booze should be at the barbecue.
So we'll get that right on the next one.
It's an important thing to work out because,
well, the results could have been disastrous.
Yeah, everything went fine.
It all went good.
Only small damage.
We're healed now.
Had some good conversations though in the meantime.
Speaking of great conversations,
before we get into the community news,
I just wanted to put out there
that if you've been wondering, why was Chris gone?
What happened to him?
Why is he talking about himself in the third person?
All of that gets explained in this week's,
or last week's, I suppose, User Air,
episode 49, not dead yet, air.show slash 49.
I talk about my recent brush with death
and what happened to me while I was in Texas.
And then also we get into some bigger questions
about Windows affecting bare metal Linux adoption now.
And it's a pretty great episode.
The guys invited me on to tell my story
about my near brush with death.
And I had a great time hanging out
with Dan and Popey and Joe.
And if you've been wondering what happened,
I invite you to check out User Air, air.show slash 49.
But with that out of the way,
let's get into some community news.
I have had an interesting conversation
over the last week and a half with System76.
And they've released publicly now information.
It's just a bit of a tease at this point,
but it's peaking my interest.
Posted just recently on the System76 blog,
they announced, quote, System76 is releasing
a new open source computer available
for pre-order next month.
Hmm, really now?
Yeah, yeah, an open source computer.
Yeah, okay, well, so their CEO, Carl,
posted a few days ago on Twitter
that at this week's Open Hardware Summit,
they'll be showing off this soon-to-be-released
open hardware desktop, and it might be called Thelio.
Yeah, it looks like it will.
And there's not a ton of details yet.
We know that System76 has been spinning up a warehouse
where they're gonna build their own systems.
But you're left with a lot of questions.
And I'm kind of a naturally skeptical guy.
So it's like, is this x86-based?
Is this gonna be a RISC computer?
Because really, you'd have to go RISC-V to go,
I mean, I would think.
Or is this something about the binary blobs
will be required to run it?
Like, what is the definition of fully open source here?
What does that mean?
And I haven't gotten a clear answer from them,
but I did get an invitation to go out
and visit towards mid-November-ish, I'm not quite sure,
somewhere in the November month,
to actually see the machine in person.
So I'll be able to see it with my own eyes
and see if it boots and what it is.
But I think this is a pretty exciting opportunity
because they're in a unique position
to deliver on something like this.
And it is obviously gonna resonate with a core audience
that they are already well-established with.
So there's a lot of possibilities here,
depending on how free this thing is
and if they're able to live up to expectations, I think.
Right, these are goals that we talk about all the time
that we wish, you know, when we're reviewing laptops,
these are things we complain about.
But what does it actually look like?
It does seem like they're having a lot of fun
setting up all their facilities to make this thing.
So people just get to have fun
playing with their new hardware.
It's an unbelievable, mind-boggling,
honestly panic-inducing investment, if you think about it.
Carl must be a brave man
because they had a very nice office in Denver
and to move all of the operations into a warehouse
and then really be learning how to set this thing up
and how to manage a warehouse,
while at the same time also trying
to get new products spun up,
I get overwhelmed at the idea of how do I even lay out
a warehouse to manufacture computers?
Like that detail alone is overwhelming to me,
not even to consider the fact that I've,
it's this massive financial investment
for a business like System76
and moving your crew and having them set up
in a new location is a massive work culture change for them.
Like every single level, this is a very big gamble
and it could pay off very well for them.
It could position them as a particular kind of leader
in this market and it also could fail
to gain enough traction to make everything sustainable.
And it's not the only machine
they're gonna make out of this place,
but it is fascinating to watch
and I'm kind of glad they're the ones doing it
because I couldn't imagine anybody else pulling this off.
Right, it does seem to be like them living their values
to some extent and if a company is gonna do it,
well, System76 has talked the talk for sure, so.
Ryan, I'm not gonna put you on the spot.
I notice you're not tagging me in mumble
to say anything about this.
Do you have any thoughts in general on this topic?
Yeah, I think that it's a great company
and this has been a big goal of theirs for a while
and I know that everyone there is really excited to do it
and if somebody's gonna pull it off,
I'd love to see somebody who cares as much
about the open source ethos as they do
be the ones to do it.
You know, you could almost run for office with that answer.
That is a very good answer.
Be careful.
It's a safe answer but I know what you mean, I follow you.
All right, well, let's keep going.
Let's talk about something
that Haiku has apparently nailed already.
Oh, yes, okay, that is true.
Now, Chris, you might be familiar
with a little distribution known as Fedora.
Oh, yeah.
Okay, well, then you probably know Fedora29
is right around the corner.
There's a lot of goodies coming out there,
including, well, you know, some of that work
they have done optimizing battery life.
One exciting thing I noticed,
Fedora29 is looking to provide
a flicker-free boot experience.
Flicker-free, you say?
Yeah, I mean, this is kind of the goal
we've been waiting for.
You get it on those other operating systems,
even some surprising ones,
but even with like fancy Plymouth setups,
there's still a little flicker left.
You know, it's one of those intangibles too
because you look at it and go, who cares?
You know, but then when you power up a system
and the entire process is smooth and flicker-free,
there is a intangible cohesiveness to it
that feels polished and complete
and the opposite of rough.
Like when you see it flashing,
it feels like you can kind of see
where the tape's holding it together,
like the little rough.
Exactly, yeah, the connection points.
Yeah, and I kind of commend Fedora
for just plugging away at this now
for what feels like a fricking decade.
But they've had a lot of curveballs.
You know, the premise of this long desired
fricker-free boot is to maintain the same resolution
and mode set from the system boot
through the desktop loading
without any of those unnecessary mode set operations
that will cause your screen to flash
or sudden graphics changes in order to provide
this whole smooth experience all the way.
Yeah, they've got a great video
showing you what it looks like
and it looks like what you see on other operating systems,
but that motherboard logo,
whoever you're system manufacturing,
well, it just stays on the screen
and then your operating system loads.
Oh, so they're doing it through an EFI frame buffer, really.
So it's not like they're putting a Fedora logo
up on the screen.
Right, now there may be some options to add,
let's say, additional overlay graphics on top of the logo,
but the whole idea and the work they've done
is that whatever the system has drawn at the very start,
you keep that buffer and then you just add things on top
or hand it off, let's say, to grub or to the kernel.
A lot of my machines, not all of them,
but a lot of my machines let you replace that logo.
So you could put a Fedora logo in there.
Perfect.
Or just screw with people
and put a Debian logo in there
so when they think they're putting their faces in it,
there's a lot of fun you can have with that.
There is a caveat to this story,
like many of these new shiny things,
there still is work that has to be done
to get this working with Radeon or NVIDIA drivers.
So it's Intel only at the moment.
Not too unusual there with that,
but from the unusual department,
this is a big secret that we've heard rumors about,
I think we covered them back in March on this show,
so don't tell anybody about this one.
The cone of silence.
All right, now that it's just us kids,
Google is working on bringing game streaming
to the Chrome browser,
and this could have massive implications for desktop Linux.
All of the other places out there like TechCrunch
and The Verge are talking about Chrome OS,
but screw Chrome OS.
Think about desktop Linux in general,
because you know this is gonna be a feature
that lands in Chrome.
I mean, we're talking about H.264 decoding,
some super fancy input management.
We're talking about technologies
that are gonna be a general stack
that gets baked into Chrome itself.
When you take just the native library of Steam,
plus now what you can do with Proton
or what you will be able to do in the future,
and then you combine it with this Google Stream project,
where it's gonna probably be
a whole nother category of games,
we may be months away from just about every game
being available to Linux.
The year of the Linux gaming desktop?
Well, it's really the year of the Chrome gaming desktop,
if this is true.
Google this week unveiled Project Stream,
and while Google calls this a technical test,
pay no attention, we all kind of see where this is going.
It's a test to see how well streaming a game to Chrome works,
and it's clear that this is a foundational technology
for game streaming service in general.
So far, they've partnered with Ubisoft
and are giving a limited number of players access
to Assassin's Creed Odyssey
for free for the duration of the test.
It's U.S. only.
You have to be able to handle 25 megabits per second,
and you have to be older than 17 to participate,
and you have to have an Ubisoft account
and a Google account.
I don't know if I have an Ubisoft account,
but I'd make one.
So you could sign up already.
I did, perfect.
Have you tried it?
Are you gonna sign up?
Oh, I already did, yeah, of course.
We probably all did, really.
I'm not so sure about this.
I am not as much of a doubter
as I think most of the audience is about streaming games.
I've tried several.
Nvidia has their own service
that works fantastic on the Nvidia Shield,
and I've played many games on that,
just tried it out for like three months,
and never really had any issues.
I've played games I've been wanting to play for ages,
but just was never gonna install Windows to play them,
and they were great.
As long as they worked okay with a controller,
they were great.
This, by the way, this setup,
will require that you hook up a controller
to your Chromebook.
Oh, interesting.
Or your machine learning Chrome.
They say either a PlayStation controller or an Xbox.
It does seem like it's gonna work better
for some classes of game.
Various games are more or less sensitive
to different input latencies,
so maybe it's not gonna be the best for your FPSs,
but it's exciting.
Do we want to moan about how big and bloated
Chrome is getting?
I mean, a game streaming engine in this thing now.
They've got remote desktop capabilities.
It really is a platform with a browser included.
I am curious, has there been discussion of,
obviously, it seems like right now
they're just donating all the compute and GPUs
to do this in the cloud somewhere.
Oh, it's gonna be a pay service.
So yeah, what is that gonna look like?
How much would you pay for that
if you didn't have to get a Windows box?
You know, if you look at Google's history,
oh, that's a good way to put it.
You're right.
This could save you even a Windows license.
Right, because you could set up a gaming machine
and do like the Steam streaming, for instance,
if you wanted to now.
I would say the way Google's gonna do this
is they're gonna bundle it with some other service.
Like, you know how they have YouTube Premium now,
and then when you get that,
you also get Google Music with it and things like that.
They'll bundle, I bet.
That could be one way they do this.
You could discharge separately for the service,
but I'm trying to think,
I can't remember the name of that gaming service.
On Live, I think it was?
Yeah, I can't remember it.
On Live.
They couldn't make it sustainable.
Think about the overhead with this.
You have to have racks and racks and racks
full of machines with monster GPUs
with incredible network performance
with huge CDN connections.
Like, this is not a cheap operation.
Even if you have 500 users,
just think about the load of 500 users
playing high-end 1080p, 60 frames per second,
Assassin's Creed.
That's a big job for a data center.
Google does have a pretty big head start, right?
They've already got...
They're probably one of the few
that has an infrastructure to do this
at a massive million user scale.
See, On Live ran into just run costs.
They couldn't charge enough.
Plus, they kept running into the issue
of the game publishers also wanted a ton of money
for every time somebody played a game,
and they had problems just porting the games
to some of the requirements of their platform.
So to do this at a scale,
you almost have to be making money
on the infrastructure with other things.
And then the gaming is something you can afford to do.
It can't be like the only thing that makes you money.
So they've got the infrastructure in place
for all the other Google services.
They've got the bandwidth to the homes.
They've got some of their own fiber that they own.
And they've got the compute.
So it seems like they could probably charge
eight to 15 bucks a month,
and you get access to a huge gaming library
right in your Chrome browser.
And you hit full screen,
you don't even know you're in Chrome.
Now, the question is,
do we trust Google of all companies
to run a service like this for a long time?
Like, is this gonna be a test that they do once,
and then nothing happens?
Maybe if we knew more,
if we could just know more about what they're doing here,
like Ryan points out,
wouldn't it be great to have the details?
Yeah, I was just thinking about the fact
that we don't really know how this is running
on their infrastructure.
And you talked about OnLive.
Did OnLive have a Windows license
for every instance that ran a game?
Is this using Proton?
Is this doing something else entirely?
I'd be really interested to know.
Yeah, I wonder too, since they require controllers,
they could be the console version somehow,
although very doubtful.
You're gonna want them in a PC platform, I would think.
We'll keep an eye on it, as we do.
It gave me the thought that maybe I should consider
getting a Chromebook, now that they can run Linux apps,
and soon they'll be able to stream games,
and they have a Samba file browser in them.
Be part of the Zeitgeist, Chris.
Well, I feel like maybe I have a blind spot all of a sudden.
You know, like I'm not really following that.
No, I don't use them, I don't have one, but I'm curious.
Let's go back in time a little bit.
These days, the conversation around Microsoft
is how they've embraced open source,
20,000 developers on GitHub.
They just released DOS as open source on GitHub.
I think, what was it, MIT license, I can't remember.
But no pull requests.
No pull requests.
No, thank you.
No pull requests.
But the conversation's really shifted.
Azure is dominated now by Linux.
Their workload on Azure, or Azure,
is 50% to 60% Linux boxes now.
Visual Studio Code is a massive project.
.NET Core, PowerShell Core, all open source projects.
TypeScript.
Huge, yeah.
Really huge.
And so, there is an understandable kind of cock-the-head,
why do so many Linux users still hate Microsoft?
And if you go back in time, all is revealed.
And October marks the 20th anniversary
of the Halloween documents.
In October of 1998, a confidential Microsoft memorandum
on Redmond's strategy against Linux
and open source software was leaked.
And it's sort of just gone away.
Now, this represents, in my view, a tactical Microsoft.
One that was looking at a new threat to its business model
and being honest with what its advantages were.
And I'll give you a couple of examples here.
So, here's some key quotes from their analysis of Linux.
So, they say, the Linux OS could become,
in a sense, the next Java VM.
And that sounds weird, but they were kind of right.
I mean, back in the mid-90s to late-90s, Java was huge.
And now, Linux runs everywhere,
even on Windows, just like Java.
So, they were kind of right.
It has kind of become the universal platform.
Couple of other things they noted
in these Halloween documents,
which was so controversial back in the time.
How could they say this?
Here's one.
An advanced Win32 GUI user would have a short learning cycle
to become a productive user under Linux.
Oh, boy.
Here's another one.
Consumers love it.
Yeah, they do.
That's it right there.
That's a pull quote from the memorandum.
Using today's server requirements,
Linux is a credible alternative
to commercial developed servers
in many high-volume applications.
That seems to be interesting.
They also note the effect of patents and copyright
in combating Linux remains to be investigated.
So, there is a couple of interesting quotes in here,
but what I read is a strategic plodding Microsoft
that hasn't accepted where things are going yet,
because this is the 90s.
They haven't seen anything like this before.
Right, was trying to wrap their head around this.
But it caused such an outrage in the community
that a bunch of anti-Microsoft camps came up.
And there is a lot in these memorandums,
including doing damage control,
where Microsoft develops an emergency response team
to cope with Linux conversation announcements,
I'm sorry, conversion announcements,
and people announce they're converting their systems
over to Linux, Microsoft would create a strike team
to try to help mitigate that.
There's some good stuff in there,
including the Get the Facts campaign,
which really got people riled up.
Do you remember that?
I forgot about that, oh!
Yeah, yeah, the Get the Facts campaign
and the total cost of ownership, which really riled up.
Gotta have that TCO.
How dare Microsoft talk about the total cost of ownership
when we're offering a free operating system for life?
You know, it was just great.
And it really puts you in that mindset of the 90s.
And it was fun to revisit,
but you really can see how things have changed,
how far things have come.
Well, not everything.
Some things may have been better in the 90s.
I hate to be that guy.
So let's go with the 2000s.
In fact, let's go with March 2000.
In March of 2000, one of the best operating systems
ever released to humanity came out.
And it was called BOS R5.
It was the final version of BOS from B Incorporated.
It came in two varieties, professional and personal.
And this was the release that I got my hands on.
It was also the first release of BOS for the x86 platform
and made freely available to download.
So check, check, check for me, right?
Ooh!
You would download it or you could order a CD-ROM.
And if you did that, it would ship with legal encoding
and decoding for MP3.
On a live CD, a live CD.
So it was a very well-designed operating system, I felt.
But my bias was I didn't grow up with DOS in the home
or Unix in the home.
After the early computer era,
after like the trashes and the early consoles,
I jumped on a Mac because my mom was a graphic artist.
So she got herself an old-
That makes sense.
This is like the black and white days of Mac OS,
like Mac OS system one.
Or it's just, I don't know what it was called back then.
And it had some simple advantages to it.
If you wanted to extend the operating system,
you would take an extension file
and you would drag it into the extensions folder.
And if you no longer wanted that functionality
or it conflicted with something else,
you would just go into the extensions folder
and you would move it out.
And then it would no longer,
your system would no longer have that.
If you wanted to install an application,
you would just drag it into a folder and it was installed.
There was a simplicity to it.
If you needed to get access to your hard drive,
you could just plug it into another Mac.
It would mount right there on the desktop.
You could move files around.
You could even copy over the system folder, reboot,
and now boot off of that system folder
that you just copied over there.
It was remarkably simple,
but yet pretty sophisticated for its day.
It also had a lot of issues.
It wasn't properly threaded.
It crashed all the time.
But an intrepid group built BOS
around some of those same concepts.
But they built it to be multi-threaded
at a ridiculously fundamental level.
And they created a file system
that even Redmond had to dream about,
something that was database powered.
They created a system that was powerful,
very fast, very stable,
Unix-like in a lot of ways,
but simple in a Mac OS classic way.
But unfortunately, they just weren't successful.
They just couldn't really be sustainable.
And you do wonder what things would be like
if they had been successful.
And that's where the Haiku project comes in
and brings us all something wonderful.
If we can take an afternoon or an evening
just to play with this free software.
And they finally released another beta release.
Yeah, it's been, well, almost six years since Haiku's last release.
Yeah, November 2012.
That's kind of too long and it makes you worry about a project.
But after all that time, there are a ton of new features
and we have a brand new beta.
Haiku is really now its own project.
It's a continuation of the philosophy and themes of BOS,
but mostly it's its own thing now.
But it does still have some of that heritage.
For example, it has two flavors, 32-bit and 64-bit.
The minimum requirements are an Intel Pentium 2 or AMD Athlon,
256 megabytes of RAM, and you need at least an 800 by 600 screen
and they recommend three gigs of storage.
I think I got that.
Now, their 64-bit version, they recommend an i3 at least
and two gigs of RAM and 16 gigs of storage.
But some of the things they've introduced in Haiku
are delightful now.
They've introduced Haiku Depot, which
is probably the biggest change in the way
that you work with Haiku.
They have a legitimate package management system
and Haiku Depot sits on top of that.
And it's very easy to use.
Lots of cute applications in there, as in QT.
It's nice.
And pretty fast, pretty complete too.
And it matches it with a command line.
But the cool thing is, like the Mac Classic,
some packages are merely activated.
They're not installed.
And that, unlike the Classic Mac,
means you can do even more with Haiku.
The bootloader has been given some capacity to affect them.
So you can now boot into a previous package state,
like say you have a bad update, or you can even
go in and blacklist an individual file, which is just
stored in a settings file.
So if you want to mount the BOS drive from another system,
you can go in there, blacklist an individual file,
plug the hard drive back into the machine, boot up.
It's done.
That's fantastic.
We don't really have that feature now.
No.
No, and of course, it's got all the other kinds
of nice advanced features too, like disk transactions
for managing packages.
Not only does it do it there, but it's all transactions
written to the file system.
You can thus also manage installed package sets
on non-running Haiku systems.
And accompanying the package manager
is a massively revamped port system
that has moved from an organized array of build scripts
to a well-oiled, full-fledged port street,
containing a wide variety of both native software
and software that's getting ported to Haiku.
It's a good list of stuff in there too.
It really is.
I mean, you can use it too.
It has Wi-Fi support.
They've borrowed the network stack from FreeBSD,
so you've got all kinds of networking goodies in there.
And here's another example of cleverness.
Haiku's native remote desktop application is slick.
Unlike VNC or other bitmap-based protocols,
Haiku's remote desktop forwards the drawing commands
from the host system to the client system, which
for most applications, and pretty much all of them
except for video, consume significantly lower bandwidth.
It's similar to how pre-compositing X11 operates,
or it's pretty close to how Microsoft's RDP operates,
where you don't send the bitmaps,
you send the draw commands, which are just commands,
and then the client actually does the drawing locally.
You don't need any special server.
As long as you have SSH access, you can do this.
And you get a native client included with Haiku,
but there's also an HTML5 client you
can run in any web browser.
And we've had some fun with it.
We tried it out on this Dell that
will be the precision laptop that we're
going to try to review next week.
We were going to review it this week,
but we're going to try to review it next week.
We loaded on that with the 4K screen.
And I also put it under virtualization on my Lenovo,
which I'll talk more about my virtualization setup.
But I was pleased to see that they
have made modifications to the new release
to support virtio, bus, and drivers.
So it works pretty great under QEMU and KVM.
I did have to make a slight change to actually have
the mouse input work well.
So if you want to try out Haiku and you just
want to run it under VM, it'll work pretty good.
It's snappy, yeah.
But if you're using like Virt Manager and your mouse
is jumpy, go into the details of the virtual machine
that you have Haiku installed, go to Add Hardware,
and then Input, and then add an EV Touch USB graphics tablet.
And the reason why you do this is it
forces Virt Manager to operate with an absolute mouse
resolution instead of like a guesstimated mouse resolution.
Because it thinks maybe you're dealing with a tablet
or something, I don't know.
And that made my mouse nice and smooth under Haiku under VM.
So if you want to try it, that's the way to go.
So it's nice.
It's really, really nice.
But you might be wondering what's
really so great about it besides the simplicity, the speed,
the stability, and really the cleverness of it.
Yeah, I already run a Tiling desktop on my Linux computer,
Chris.
What am I getting here?
What are you getting here?
Well, eventually, someday, maybe, no.
Actually, what you see is, like I was talking about earlier,
it's almost an alternative universe of the way computing
could have been.
And you can't help but observe just how far ahead of everyone
they were.
And they're able to pull off some stuff that we still
haven't nailed down in Linux.
Like, for example, Haiku has a series of kits.
And it's all explained in the B-book,
which we'll have linked in the show notes.
But they have an application kit, a device kit, a game kit,
an input server kit, the mail kit, the network kit.
These are all essentially kits that are
starting points for developers.
The application kit, for example,
is classes that establish an application
as an identifiable entity, one that could cooperate,
and then also tells it how to communicate
with other applications, all described in the application
kit.
If you want to connect an input device to Haiku,
there's a device kit that describes
how you build that for Haiku.
And it's all out there, everything
from how the windows should be drawn on the screen
to the way they should look to how you communicate
with the network stack or draw OpenGL on the screen.
They have all of it out there for developers in a clear,
documented, communicated way that's
been stable for years now.
Yeah, like imagine if MSDN was actually helpful and included
and in a book on your OS.
Just right there in a bookmark that you could just go read.
It is really smart.
The things they've thought about,
you have to wonder why they haven't taken off.
And that's why, after all this time,
after being failed in the early 2000s,
that's why people are still excited about this.
Because it is something that is truly unique,
and you can actually put your hands on it.
You can use it.
Yeah, it's a living entity.
I mean, yes, you can virtualize it, but you can boot it.
We got it booted, and we plugged it
in a mouse and the keyboard, and it worked.
You can get Wi-Fi working if you have just the right hardware.
So you can get a feeling for the ideas here.
And I think there are still some ideas
that we could stand to use.
We don't need to just leave this in the waste bin of history.
It's complete and integrated in a way that, I mean,
the BSDs explore this a little bit more,
but it's just so different from a traditional Linux desktop.
It was almost the future Mac OS.
Apple, and I think this is one of the reasons
that B Incorporated failed, and you could probably
find out more if you just go read their Wikipedia page.
My recollection goes like this.
Apple was in serious negotiations
to use BIOS as the next Mac OS.
And that was until Steve Jobs came back
to the company, which brought along Next with it,
and then they based Mac OS off of Next.
But they were in early communications with B.
When Steve came back, the decision
hadn't been made to drop B yet.
And so while Steve was still interim CEO of the company,
they evaluated B, they tried to hire Linus,
and they evaluated Next.
And the issue really came down to is the people on the team
that had joined now coming from Next,
like folks like Scott Forstall, were familiar intimately
with how Next worked.
And so they had an internal team that just knew Next.
And so that was what they decided
to build Mac OS 10 off of.
It was almost BIOS, though.
It was almost BIOS for a time.
And if that would have happened, we
would have it in crap.
Of course, it would be locked down to Apple,
so it wouldn't be as exciting.
Because this, you can load on a brand new Dell Precision,
or you can load it on a Pentium system that's 32-bit.
So in a way, you get a lot more fun with it.
And after using it, I really felt,
I wish this was the operating system I could deploy
to friends and family who don't really like to use computers,
but use them as a tool, and strictly a tool.
They facilitate some singular purposes for them.
They need to do just something in the web browser,
maybe print something, maybe scan it most.
And they want a computer that just runs
and is very simple to understand.
This Haiku OS is so easy and simple
to understand that you begin to just instinctively navigate it
within five minutes of using it.
It's obvious.
It's non-offensive.
And consistent.
I think that's the other thing, right?
There's like a base set of abstractions,
and they're used everywhere, and they're all tied together.
Which is probably responsible from those kits.
And so that kind of thing, I think,
works really well for that type of user base.
And my hope for Haiku is that they get more people trying it.
Maybe they get more people into the project,
and they don't have to go so long between releases.
And maybe we could actually someday get a Haiku 1.0
that is deployable to end users.
Yeah, and there is a surprising amount of software
on there, things like LibreOffice, right?
You can get real work done.
Which was, for me, that was the killer thing for BOS R5.
When I was using it back in the early 2000s,
they did two things.
Is they let you install BOS from within Windows, which
was really high tech, right?
Especially back then.
The other thing that they had is StarOffice.
Remember that?
Remember StarOffice?
StarOffice.
Those are the days.
I was trying to advocate that my school district,
because I was an employee then, and I
saw the amount of money that we were spending on Microsoft
licensing, and I just said, let's use something else.
Let's use StarOffice.
And I was advocating at the time for StarOffice,
and I can't remember if I was actually by then.
I don't think I was pushing for the Linux desktop yet,
but I was like, we've got to stop paying these $300,000
Microsoft bills.
And that was just the tip of the iceberg.
And so StarOffice was like, that was my foot in the door.
I was advocating StarOffice.
And so when I saw that that was available for BOS,
I was a match made in heaven.
I had the main office suite that I
was trying to get everybody to switch to,
and I had a great desktop environment
that you could install on the existing x86 PCs.
Sounds a lot like Linux now.
And yeah, so there are some apps.
LibreOffice is out.
They have a web browser that is based on WebKit
that they had somebody work on, I think near full time,
as part of a Google Summer of Code.
They've gotten a few Google Summer of Code sponsorships
over the years, and that's helped out a lot.
But it's so neat, and it's really worth checking out.
It's not going to be your daily driver.
Ours gave it a go, and it didn't really work out so well
for the author over there.
It's pretty funny.
Sean Gallagher tried to use Haiku for a week
to get the job done, and it sort of failed on him pretty hard,
mainly around the browsers.
They just weren't able to do things
like some of the Google apps that he needed,
like Docs and Gmail just didn't work super well.
WebPositive was also the new browser, also not so great.
But he noted something of interest.
Of all things, the Swift programming language
has been partially ported to Haiku,
thanks to a Google Summer of Code effort.
I think they're working on Rust as well.
So hey, maybe some of the future apps
will run just native to Haiku.
Yeah, and OpenJDK was already ported.
So if you can put up with the email client that's
a bit bare bones, and the web browser that
won't support all the websites that you want to go to,
and limited applications, you might
be able to use it for a week.
But Sean Gallagher over at ours wasn't able to pull it off.
I didn't try.
I don't look at it as a, I don't think
it's fair to compare it to modern desktop Linux,
or Windows, or Mac OS.
It's more of like going to a museum that's
being refreshed and rebuilt. It's a historical adventure.
You're going spelunking here.
You're not trying to make it your new desktop home.
But I got to say, if in another six years or so,
they release something that is usable on the desktop with,
maybe Firefox, like an actual Firefox browser or something,
I'd be pretty tempted to give that a go again.
I think they could really have something special there.
So we'll have links in the show notes for all of that.
You can see everything that we've tried,
including some fixes to get it working a little bit better
under virtualization.
It's really easy to give a go.
Yeah, it works great under virtualization.
And you can just etcher or DD the ISO
that they provide to a USB disk if you want to try it out live.
So yeah, it's pretty neat.
It's pretty neat.
I want to now shift gears, though,
and talk about these laptops.
So we mentioned virtualization.
I was doing it on my new T480.
We did a review a couple of weeks ago.
We got these new work rigs.
They're identical, Wes and I. And so we did a review
on the show.
But I thought, after using it for about three weeks
after that review, a couple of things
have stood out that I would like to amend the review and include.
And it's nothing that's a showstopper,
so it's not a big deal.
But for me, I'd have to say, in the not pleased category,
I'm not so happy with the speakers.
They're weaker than I'd like for serious work,
like editing or recording a show.
I'd be putting on headphones anyways.
But I'd say if you're looking at getting
one of these ThinkPads, one of these thinner, smaller ThinkPads,
I've seen a couple of them now.
Just don't plan to binge Netflix with them.
You can hear your system alerts.
You can make a call.
It's going to work.
I was watching some Netflix on here just this weekend, Chris.
Were you underwhelmed?
Well, I attached a Bluetooth speaker.
Very good.
There you go.
Also, something we didn't mention in the review,
but we got the keyboards that don't light up.
Now, that said, this is one of my all-time favorite keyboards
on a laptop ever now.
But these keyboards are not backlit.
After some conversations and reading some reviews online,
it seems there's two types of keyboards with these ThinkPads.
And the one that has the transparent keycaps
so that the light shines through has a slightly softer feel.
And I guess the keycaps wear off.
And then there's one with an antimicrobial covering.
That's the one we have, where the keycaps last longer
and it's a little bit better of a tight feel,
but they don't light up.
So that's something I thought I'd mention.
Also, I know you've already switched it,
but the function key, control key, it's still,
it's, I didn't switch it right away,
and now my brain is broken.
My hands are broken.
Yeah, I had to make a call on that.
So on the keyboard, in my opinion and Wes's opinion,
the function button is where the control button should be.
It's on the far left.
The far, far left key, that should always be control,
so that way you can just blindly mash it, right?
Exactly.
On the Lenovo ThinkPads, it's where the function button is.
And then control is one button over.
And then the worst part is that the sizes are the same.
So you can switch them in the BIOS,
but then your control button
is like half the size it should be.
Yeah, yeah, that is the downside.
So I had to make that call.
They do make it a BIOS level change.
You go in there and you flip it.
So obviously they know it's a problem.
And I decided to do it sooner than later.
I went about three days,
and I think I went one day too long,
because I started to remap it in my brain.
But the sooner you switch it, it's just easier on you.
It's just easier.
And then it persists between reinstalls.
It's just, it's the way to go.
I did finally run into that problem
that we did bring up in the initial review,
that hey, some folks have had a problem
where their CPUs are throttling.
And it wasn't a big problem.
In fact, I kind of liked it
because I kept my laptop slightly cooler
and I didn't really notice the performance difference.
But I started having a problem when I closed the lid,
the laptop wouldn't go to sleep.
And it was reporting about thermal,
a thermal trigger event.
So, okay, well, let's look into this.
So I started digging around
and I found this great terminal app
that I wanna tell you guys about this week.
It's a terminal based CPU stress monitoring utility,
and it's called STUI, S-TUI.
And man, does it look slick.
And it shows you everything,
the frequency of your CPU, the utilization,
the temperature and the power.
And it puts it all on a really nice looking bar graph
that persists on the screen for a while.
So you can get a real sense of the range of punishment
you're putting your machine through.
And when I started watching this,
I did start to see where the CPU was throttling me back,
throttling me back.
And I thought, well, this is bullshit.
So I started digging into this
and yeah, it's a firmware bug in the Lenovo's.
But like all things Linux,
there is a workaround for this issue
that's been posted on GitHub.
And this also works for the Dell XPS 9370s.
So hot tip there, and a whole range of Lenovo's.
And it kind of tweaks what the range of power frequencies are
that your CPU is allowed to reach.
So it's not without some risk, I suppose.
And it does require that you disable secure boot.
You are mostly just banging some bits into,
you know, firmware control parts of memory.
So yeah, maybe some caution.
Yes, and you have to disable the thermal D service.
So I did that.
So I disabled secure boot, I disabled thermal D,
and you can turn this script off
with a system D stop command.
So it's not like it's, the reverse process is just-
It's easy to undo.
Yeah, yeah.
And so then I started up the script
and I immediately noticed that my laptop
was reaching 4.2 gigahertz as it's specced.
And I rebooted and immediately for the first time
as the system was logging in,
noticed the fans kicking up.
They've never done that before.
I haven't heard my fans today, no.
No, no, you don't.
So if you don't fix this bug,
it keeps the CPU running it like,
I don't think it goes beyond 3.5 gigahertz
or something like that.
Maybe, it depends on your rig,
it can go up a little higher,
but that actually makes it run cooler.
And it makes the battery last a little bit longer.
So I did also see a small hit to battery life.
Also did not fix my suspend issues that I was having,
that I originally tried to fix.
No, really?
So they're still there.
Yeah, and it's weird, it's not every time.
I close the lid and I'd say 80% of the time
the machine goes to sleep, no problem.
But I have run into the problem
where I thought it's asleep and I put it in the bag.
I take it out of the bag two hours later and it's-
Burning up, wasted battery.
Yeah, and-
It's only on battery when this happens.
I believe so.
I believe it only happens when it's on battery.
I have yet to have it trigger when it's plugged in.
I can unplug it after I've put it to sleep and it's fine.
See, now I'm just worried.
This is lying and wait, I'm gonna run into it.
I haven't yet.
I was worried today on the train.
In fact, it happened on the train.
I was on battery the whole train ride down to see you today.
And when we got to King Station,
I closed the lid and it didn't go.
I watched it and it didn't go to sleep.
And I'm like, I wanna put it in my bag
because we're at the train station.
And I'm like, it's not going to sleep.
Like I had to open it back up, put my password in,
shut it down, confirm shutdown, wait for it to shut down.
And I, you know, I had stuff open.
I gotta say, Chris, your experience
with just niggling little issues like that,
it mirrors my own.
And I don't know exactly what causes these things,
but they're super frustrating, right?
And they detract massively from the overall experience.
Yeah, yeah, it's a little bit unfortunate.
Welcome back to the show, Alex.
Brandon, you fixed this on your X1 Carbon, do tell.
Yeah, so have you guys updated your bios?
Well, that's where we're going to next actually,
but go ahead.
Yeah, and that fixed the initial stuff.
And then if I was using Wayland at all,
it would not go into suspend at all.
So right now I'm using X11.
I believe I'm on X11, yeah, I'm on Neon.
So I think that's, yeah, that's X11.
So the thing is the plasma desktop doesn't yet,
although it will soon have a way to update your firmware
from the graphical desktop.
You're saying it's worse than Gnome.
I never thought I'd hear you say it, Chris.
The advantage on Gnome is when you go into Gnome software,
it's just along with all your software updates is boom,
here's a firmware update.
Or maybe you, for some reason, are an XFCE user,
or like you say, a tiling window manager,
you're not going to get this stuff
unless you specifically want to install all the Gnome stuff
to run Gnome software.
And I don't.
So in the case of the T480,
the firmware update does not fix this issue,
but it does for some systems.
But there is a way to do LVFS the hard way.
Now remember, the Linux Vendor Firmware Service
is the project that's collecting all of these different
firmwares from the vendors
and then shipping them down to your machine.
And part of that is the FW update daemon, or FWPT.
FWPT.
It's a simple daemon that allows session software,
which could be Gnome software,
could be Discover, or will be soon.
It's coming soon in an update.
It allows them to check for firmwares on your local system
by enumerating the hardware,
seeing what their firmware versions are,
and then delivering that information back to the client.
So in this case, we're going to be using the command line.
It's designed for desktops,
but it's also actually usable on phones
and several headless servers where you can just SSH in
and you can use these same exact commands
to update the firmware on your servers if you want.
So if you want to find out if you have a device
with firmware that is supported by FW update,
you have to get on the command line
and run the command FW update manager get devices.
And we'll have a link to all of this in the show notes.
Once you get the devices,
there's an FW update manager refresh command,
which goes out and it's like a package repo refresh.
It goes out and it gets all the latest firmwares
that are applicable,
versions that are applicable to your hardware.
Nice.
And then you can just simply update
the command FW update manager, get dash updates.
It goes out and downloads all them
and then FW update manager update.
Again, all this will be linked to the show notes.
So you just made a guide for me
because I haven't played with any of this yet,
but it's coming up.
Yeah, and it makes it really nice
because you can just do all this from the command line.
Doesn't matter what desktop environment you have.
And it's kind of neat.
Like the FW update manager, get dash devices
shows you a bunch of cool information about the hardware.
Here's my T480 Thunderbolt controller.
Isn't that neat?
And then you do the refresh command
to go out and pull down the latest repos,
get dash updates to download them,
and then just update.
It will download and apply all the updates for your system
and updates that can be live will be done immediately.
And then it will also set aside updates
that need to run at boot up.
And next time you reboot your distro,
it'll stage them and apply them.
That's just fantastic.
Wow.
Isn't that great?
How did this happen?
Like in the back room without any of us really noticing
and now not only does it not brick our machines,
but it just works.
Yeah, and it's another cool way to get information
about the devices in your system.
So that's all outlined in the show notes.
There's also a really simple EZR Twiki go figure,
as well as the project's documentation.
In fact, if you just run FW update MGR dash dash help,
all the stuff is right there.
It's really super simple to mess around with.
So I ran that on my T480 and we were fully up to date.
They shipped all up to date.
And they're pretty new, so that makes sense.
Right, yeah.
Unfortunately, it's not a firmware update for us.
But I have read that some X1 users have
been able to resolve the issue with a firmware update.
So I'm hopeful it might come around to us.
And now we know how to do it.
So we'll keep an eye out.
A couple other things.
Setting up this machine, I decided
I got this thing with 32 gigs of RAM, an MV and eDrive.
Let's do some virtualization.
Right?
Right?
You got to put this thing through its paces.
So I'm trying out two different virtualization managers.
First and foremost, you've got to get Vert Manager.
It's the go-to tool for the desktop.
So I installed Vert Manager.
And that's what I was using for my Haiku review and drive
through, whatever you want to call it.
It's not really a review.
And it works pretty good.
But it's not HTML5 enough, you know what I'm saying, Wes?
No, it is not.
I mean, it's nice.
It's there.
But, well, it's just not that slick.
I actually kid.
I'm just joking.
But both Wes and I decided to take a little look at Kimchi
over the last week, which is an HTML5-based management
tool for KVM.
And it's designed to make it as easy as possible
to get started with KVM and create your first guess.
And I like this a lot, because it
makes it accessible to people that maybe have never really
messed around with this before.
We have KVM baked into our Linux desktops.
I don't know how to state this to you.
That is an enterprise-grade virtualizer
that entire companies base their revenue source off of.
In the early days, like back when
I was trying out BOS R5, we had mainframes that did this.
This is what mainframes did.
And they cost so much money.
And they had to have massive support contracts.
And they had to have proprietary hardware.
And it was a massive investment to have
a bunch of virtual machines.
And now, we have something 100 times better, more powerful,
and faster just baked into our Linux desktops.
Every Linux laptop, every Linux desktop out there
has the potential to access this thing called KVM.
You just have to install a few tools.
And the power of that is just sort of underappreciated
by those of us that have just grown used to it.
But when people are coming over to Linux,
it's one of those cornerstone features.
It's something that maybe they want to try for their work,
or maybe it's something they've read about and learned about.
And Kimchi makes it all accessible.
It is a very nice web GUI that sits on top of KVM that makes
it simple to manage your VMs.
Yeah, because unfortunately, a lot of the tooling
that ends up sort of focused around the big server cases,
because that's like probably 99% of what actually runs on KVM.
But these days, it runs pretty darn well just doing desktops.
Yep.
I also, I really liked, I would never use it now,
but back in the day, when I first was trying to set up Linux,
having a tool like even like Webman,
which was a little dangerous, but was very useful for just
kind of closing a couple of gaps.
I didn't really understand how to do something like under Samba
and having Webman available to help sort of build out
that config file.
Then I could then go reverse engineer what it had done.
Right.
When you're learning, you just want like a nice GUI
that you can explore and poke around and fiddle with options.
For my own systems that I run on Digital Ocean,
I use Cockpit to manage them.
There you go.
And I love it.
I think it's great.
So Kimchi is pretty nice.
It's a little tricky to get working on Ubuntu 18.04.
It requires a package called Python Imaging, which is not
in at least the regular Ubuntu repo.
It might be in Universe.
And it won't install without that,
even though it has been replaced by, what was it,
Python Ping or something?
PIL, the pillow, I think is what you would have been installing,
an alternative imaging library.
So Kimchi could use that, but they
have hardcoded in the deb that it
needs this specific package.
It is available for 18.04, so I've
linked it in the show notes if you want to try giving it a go.
It's still early days for Kimchi,
but I have a lot of hope that it's
going to be a super nice way for people
to manage a handful of VMs.
You know, you imagine something like this on your LAN,
you throw a machine in the closet or in the garage,
and you could use this to replace something
like Proxmox.
Right, yeah, exactly.
And it's just nice for those cases
where maybe you don't use libvert on the command line
all the darn time.
You just forget what flags there are.
Well, here you go.
I'll tell you one other thing I've
used this week for the first time was boxes.
Oh, yeah.
And I had to install Windows for some stupid reason.
I can't remember who it was.
I'm so sorry.
Thanks.
And I threw the ISO into boxes, and 20 minutes later,
or 15 minutes later or something,
I had a fully booted, activated Windows 10 system,
completely touch-free installer.
Amazing experience.
Yeah, but if you're on the GNOME desktop, boxes is so great.
I considered installing under Plasma,
but I ended up going for Vert Manager.
Brandon, I'm curious about your use of Cockpit
from your workstation and laptop.
Yeah, so I use it to manage virtual machines
with the machines plug-in.
So it basically does most of the things I need.
If I need to create special networks,
I have to go to the command line or open up Vert Manager
to set up networks that are not just the default NAT network.
But everything else is available right in Cockpit.
It's super easy to use.
You can get access to a console, add additional disks to a VM.
Basically, all the things I would need to use locally.
Yeah, and so you use that to manage your own local VMs,
not even VMs up on a server.
Just local VMs on my workstation for servers in my basement.
I have a cluster of three servers that are running.
But in that case, I'm running Obert.
As one does in his basement, right?
Yeah, that's what you do when you have a basement, right?
And one gig up down the century link.
Oh, yes.
That is what you do.
Yeah, those are the two requirements, a good basement
or, in my case, a garage and a great link.
My basement is full of scary spiders that jump.
I do not like it.
Yeah, they got a lot of those down there, Alex.
They got them up here in Washington, too.
You can't get away from the spiders in the States,
unfortunately.
Just don't let the ones with red bellies get near you.
That's the one you need to worry about.
Oh, gosh.
The spiders around here have a legal right to marry.
Let's not freak out people with arachnophobia,
because I'm one of them.
And it's making me a little uncomfortable.
There's a bunch of different ways
to manage your virtual machines.
But Vert Manager and Kim Chi were the one
that I thought would be worth talking about,
but definitely a good, big, hearty plug for Cockpit,
because that's what I personally use to manage mine.
I mean, you could be hardcore like Wes Payne
and just do it all with QMU on the command line,
and then VMC in, and just what's the problem?
What's the problem?
That's what Wes says.
So next week, we should have a review
of that Dell Precision laptop.
I wanted to give it enough time.
I just felt like I hadn't had enough time with it.
I did run some pretty hardcore benchmarks.
One of the things I'd love to get the audience's feedback
on is I'm thinking about trying to come up
with a framework to review laptops
when they're under extreme load.
So how does it handle thermals?
Does it start cutting back on the CPU
to bring the temperature down?
How long can it run it back before it has to start caving?
I've been testing that on the ThinkPad
and on the Dell Precision, and I find
that to be interesting workload, because every now and then,
you just need your machine to be a champion for two hours.
And so how does it run at full bore, sustainable workloads?
Does it start cutting back?
I'm curious what folks think about that idea
and other things of that nature we could start testing
on these laptops, because the goal of these reviews
is to give you usable information
to make a purchase or to defer a purchase
or to just reflect on your own setup.
I'm not here to sell a laptop.
I'm here to try to tell you if this is a reasonable tool
or not.
And so I'm always struggling to come up
with ways to properly do that.
Benchmarks are one way, but what's
the real point of those, unless you could actually
compare it to a real-world globe?
We want to get closer to simulating something
that you might actually do.
So I'd love ideas on that and tests.
I'd love some objective way of measuring fan noise,
because that really annoys.
So when you hear a MacBook about to take off,
that might be different to what an XPS sounds like
or something.
Yeah.
I mean, I have tools to measure the decibel output
of the laptop, and I could just get it under load,
and I could start measuring that.
That's definitely something I could check.
That's a good one.
And if you guys out there listening have suggestions,
just go to linuxunplug.com slash contact.
You can send them in that way or tweet me, at Chris LAS.
I'd just be curious to know.
I showed some recent benchmarks that I was doing
and kind of put a little context as to what
I was trying to achieve.
And I got some great suggestions on Twitter, too.
So I've been collecting information,
and I've always really kind of wanted
to nail this down to try to make it something
that, even if you're not in the market yet, it's still useful.
So I want to try to achieve that.
So give me your tips and what you'd like to see,
and hopefully we'll have a decent review for you next week.
I can't promise that I'll have it nailed by next week.
But over the next few reviews, as we start thinking this way,
I think we'll get it.
Yeah, get a little more systematic.
Yeah, come up with a way to do that.
We have so much stuff going on behind the scenes these days.
So we'll be talking about some of that as well,
some of the changes that we're making to our pipeline
and how we're going to open source all of that.
So that's coming in the future in a future episode
as well as time permits.
So we have a lot to get into, but I
think that's probably where we'll leave it for this week.
We'll try to keep it a little shorter.
I'm flirting with the time formats,
trying to see what people like.
Tuesdays can be pretty busy.
That is true.
So you've got to let us know.
Middle of the week.
People got a lot of shows by the time this comes out.
We want you to want to fit in Linux Unblogged.
You've got to get in that sweet spot.
And don't forget, next week is 270.
We'd love to have you show up in our virtual lug and hang out.
Just Google for the Jupiter Colony Mumble Guide.
Mumble is free open source software.
You can get installed.
We'd like it if you have a headset.
And with that, a mic and headphones.
You know, not just something that's on your head.
Not like a tiara.
That doesn't count.
I mean, you can have that too.
Don't want to stop you.
I don't know.
Unless it has a mic built in.
The nice thing about the virtual lug
is you can dress however you want.
They come as you are.
I imagine most of them are sitting there,
drinking something, scratching, browsing the web, and chatting.
Like, you know, they are probably pretty chill.
That's what makes it a virtual party.
I know.
I should go do that.
I should go home while you do the show.
I'll jump in the lug and just see what it's like.
I should try that one time.
But not next week.
Not the week after, but maybe someday.
Thanks so much for tuning this week's episode.
Go get more of Westpane at techsnap.systems or at Westpane.
I'm at chrislas.
The whole network is at Jupiter Signal.
Thanks so much for joining us.
And we will see you next Tuesday.
I had a lot of fun with Haiku.
Way more than I expected.
I know.
It was just so good.
It's good stuff.
It's good stuff.
Mumble Room, thank you guys very much for making it.
There was one story that didn't make it into the main show that I wanted to share with
you guys.
It just doesn't really have like a direct Linux angle, but it sure makes me smile.
There is, for some unknown reason, now a Star Trek Enterprise-shaped gaming PC being built
by Lenovo.
How did this happen?
Okay, no, no.
I don't even need to know.
I'm just too excited.
Wes, Lenovo is boldly taking computers where they have never gone before.
Oh, it's getting cringey already.
With a newly revealed Lenovo Titanium PC shaped like Star Trek's USS Enterprise.
The Lenovo Titanium Enterprise NCC-1701A is shaped like the Starship Enterprise, like
Captain Kirk's Enterprise, before he just... Oh, I won't spoil it.
I won't spoil that part, but let's just say Klingons were involved.
It's a real beaut.
Fascinating.
Definitely not a trash heap.
The technology includes a GeForce RTX 2080, an overclocked 9th generation Intel, 32 gigs
of RAM, and a one terabyte M.2 SSD, and a two terabyte... or a spinning Rust disk.
They say that it's the perfect PC for Star Trek enthusiast gamers.
I'm thinking maybe we got the wrong Lenovo's, Chris.
I know, right?
It's super lit, too, and I mean lit up, like it's got lights everywhere in the thing.
All over the saucer section, the warp nacelles light up, the deflector dish lights up, and
it's on a stand.
Like the Starship models themselves, it's on an arm stand, and it's kind of shaped like
the Enterprise, and the PC parts are all stuffed into it.
The cooling is on the bottom of the saucer section.
The nacelles are wider and larger than the actual Starship.
That's where the bulk of the PC is, is in the primary hall, if you're a Star Trek nerd.
It still looks legit enough that if I was a big Star Trek online player, if I still
did the Star Trek podcast-
You would have to have it.
You would have to have it.
I mean, if you put KDE neon on that thing, that'd be pretty good.
So any deets on when can we get it?
Where can we get it?
Actually, I want you to guess what the price is.
Guess what the starting price is before you've even spec'd it.
Now it's not insane, but it's not cheap.
I'm going to go with $4,000.
That is probably what it would be after I spec'd it.
The starting price, the base price-
$3,999.
All right, anybody else have a guess?
This is Price is Right Rules, so if you go over, you're disqualified.
Anybody else have a guess of what the-
Three grand.
Three grand, okay.
We have three grand.
What did you say?
Four grand?
Yeah.
I'm going to say three, two, one, zero.
Three, two, one, zero.
All right.
The Lenovo Titanium Enterprise NCC-1701 has a starting price of $2,180.
You overbid, so you all should go buy one now.

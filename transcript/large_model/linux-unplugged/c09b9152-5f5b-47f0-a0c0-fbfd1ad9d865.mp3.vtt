WEBVTT

00:00.000 --> 00:02.800
Drew, you're just so good. So handsome!

00:02.800 --> 00:04.120
Aw, why thank you.

00:04.120 --> 00:06.000
It's true. I know.

00:06.000 --> 00:08.220
Have you seen the way his hair sort of floops to the front?

00:08.220 --> 00:10.760
I was just gonna say, he's got that adorable hair thing going on.

00:10.760 --> 00:14.020
It's just, you read my mind. You read my mind.

00:14.020 --> 00:16.220
Like a giant bunny ear, but for a person.

00:16.220 --> 00:18.480
Hahaha!

00:18.480 --> 00:33.800
Hello, friends, and welcome into 3.73 of your weekly Linux talk show.

00:33.800 --> 00:34.840
My name is Chris.

00:34.840 --> 00:35.840
My name is Wes.

00:35.840 --> 00:36.840
Hello, Wes.

00:36.840 --> 00:38.320
You brought a posse with you today.

00:38.320 --> 00:40.720
I don't know if we have enough seats for all these fine people.

00:40.720 --> 00:44.720
Well, we have a huge show, so, you know, we need a crew.

00:44.720 --> 00:46.880
It's time for an in-studio audience for this one.

00:46.880 --> 00:51.360
This episode is brought to you by a cloud guru, the leader in hands-on learning.

00:51.360 --> 00:53.320
The only way to learn a new skill is by doing.

00:53.320 --> 00:58.140
That's why ACG provides hands-on labs for cloud Linux servers and much more.

00:58.140 --> 01:00.840
Get your hands cloudy at a cloud guru dot com.

01:00.840 --> 01:02.100
Drew, hello.

01:02.100 --> 01:04.360
I'm impressed you managed to find a seat in here today.

01:04.360 --> 01:05.360
I know.

01:05.360 --> 01:06.760
It is so crowded in here.

01:06.760 --> 01:09.200
I think we're breaking some ordinances, aren't we?

01:09.200 --> 01:10.200
Oh, for sure.

01:10.200 --> 01:14.800
But, you know, ever since we hit 3.70, Wes has always rolled with the posse now.

01:14.800 --> 01:17.320
This is the new Wes, so we're going to make it work.

01:17.320 --> 01:19.820
But you like my hat, so no complaints.

01:19.820 --> 01:20.820
That's true.

01:20.820 --> 01:21.820
And I like that you guys are all color matched.

01:21.820 --> 01:22.820
That does actually work.

01:22.820 --> 01:23.820
Look pretty good.

01:23.820 --> 01:26.120
Before we get into the stories, though, we have to bring in our virtual lug.

01:26.120 --> 01:27.120
Time appropriate.

01:27.120 --> 01:28.120
Greetings, mumble room.

01:28.120 --> 01:29.120
Hello.

01:29.120 --> 01:30.120
Hello.

01:30.120 --> 01:31.120
Hello.

01:31.120 --> 01:32.120
Hello.

01:32.120 --> 01:33.120
Woody.

01:33.120 --> 01:34.120
Bienvenido.

01:34.120 --> 01:35.120
Hey.

01:35.120 --> 01:36.120
Rocking 27 people in that virtual lug today.

01:36.120 --> 01:37.560
Good to see all of you.

01:37.560 --> 01:38.560
Hello.

01:38.560 --> 01:42.680
I am thrilled about today's show because not only do we have some fantastic community news

01:42.680 --> 01:47.040
that we're going to get into, but then Wes and I had a lot of fun messing around with

01:47.040 --> 01:53.280
Linode last night and setting up a couple of servers to just hammer ButterFS Send and

01:53.280 --> 01:55.580
ZFS Send versus R-Sync.

01:55.580 --> 02:00.680
And today what we want to do is just give you a plain explanation of what these technologies

02:00.680 --> 02:04.960
are and why it's an example of something that these newer file systems offer and how you

02:04.960 --> 02:05.960
can use it.

02:05.960 --> 02:10.080
But does it really matter when you have R-Sync and you can use R-Sync with any file system?

02:10.080 --> 02:11.080
We'll talk about that.

02:11.080 --> 02:12.800
And it was fun last night.

02:12.800 --> 02:14.720
I mean, Wes stayed up a lot later than I did.

02:14.720 --> 02:15.720
I'm an old man.

02:15.720 --> 02:19.480
I had to go to bed by 11, but we were building these systems and then attaching these disks

02:19.480 --> 02:23.380
and then setting up ZFS and then setting up ButterFS and then throwing data between them

02:23.380 --> 02:26.480
and all in the name of podcasting.

02:26.480 --> 02:30.520
And let me assure you, all of our pools were named after Star Trek engineers.

02:30.520 --> 02:31.520
All right.

02:31.520 --> 02:34.400
Well, let's get into the community news first, though.

02:34.400 --> 02:37.360
This is just great for the LVFS project.

02:37.360 --> 02:43.200
A certain kind of milestone, I mean, you know, numbers are arbitrary, but early this week,

02:43.200 --> 02:51.400
Richard Hughes from LVFS announced that they have provided the 20 millionth firmware update

02:51.400 --> 02:52.400
out to a machine.

02:52.400 --> 02:56.320
Now, here's the thing, though, is it actually could be a lot more than that, Wes, because

02:56.320 --> 03:01.400
there's systems that are behind Nets that just entirely mirror all of LVFS.

03:01.400 --> 03:03.480
So that's all one update.

03:03.480 --> 03:04.480
Yeah.

03:04.480 --> 03:05.480
Yeah.

03:05.480 --> 03:10.840
It really kind of all started, Richard writes on his blog, because of the Colorhug firmware.

03:10.840 --> 03:14.960
And if you have one of those Colorhug devices, in a way, you kind of helped start the whole

03:14.960 --> 03:16.440
LVFS thing off.

03:16.440 --> 03:17.440
Yeah.

03:17.440 --> 03:22.280
I mean, he writes, my experience building open hardware devices really pushed me to

03:22.280 --> 03:30.240
make the LVFS free for all, mostly on the logic that I wouldn't have been able to justify

03:30.240 --> 03:38.360
even a $100 per year subscription and certainly making the service free in all respects meant

03:38.360 --> 03:44.500
that it was almost risk free for companies to test the service.

03:44.500 --> 03:45.500
That's key, right?

03:45.500 --> 03:51.020
Because now the LVFS analyzes uploaded firmware for security problems and it keeps millions

03:51.020 --> 03:52.480
of devices up to date.

03:52.480 --> 03:57.800
And here at Linux Unplugged, we keep reporting on how many new hardware manufacturers are

03:57.800 --> 04:01.400
adopting LVFS because of this open model.

04:01.400 --> 04:03.480
Yeah, it's pretty neat.

04:03.480 --> 04:09.520
And it's not without some lacks still, I think I'd still, there's still some devices I have

04:09.520 --> 04:12.880
that I'd love to see updates, but it's just an assumed now at this point when I get a

04:12.880 --> 04:18.000
new device, which I have, by the way, I don't think I've mentioned this on the show, have

04:18.000 --> 04:19.000
I, Wes?

04:19.000 --> 04:20.760
No, you have not.

04:20.760 --> 04:26.120
So I don't know if Dell just listened to last week's show and realized that they could

04:26.120 --> 04:30.960
probably get me or if they just happen to send this anyways and me being in the laptop

04:30.960 --> 04:36.840
market right now is just a coincidence, they have sent me a review unit of a Dell Precision

04:36.840 --> 04:37.840
5750.

04:37.840 --> 04:41.620
Oh, that's a mean looking rig.

04:41.620 --> 04:42.920
Look this thing up.

04:42.920 --> 04:47.320
As configured, it's $4,900 and in the review, I'll get into why.

04:47.320 --> 04:48.880
Wait, wait, what?

04:48.880 --> 04:49.880
Yeah.

04:49.880 --> 04:50.880
Uh-huh, yeah.

04:50.880 --> 04:54.660
And Dell has put some serious R&D into cooling.

04:54.660 --> 04:59.560
So they have laptop Xeons in this thing that they can run at high speeds because of the

04:59.560 --> 05:03.400
cooling system they've put into this, as well as a super high end graphics card.

05:03.400 --> 05:04.400
I'm trying it out still.

05:04.400 --> 05:07.200
I'm going to try it for a little bit, get past the honeymoon stage, throw a few different

05:07.200 --> 05:11.760
distros at it, run it through its paces and all of that, and I'll give you a report, but

05:11.760 --> 05:17.200
this is so clearly aimed right at whoever would be like kind of that developer market

05:17.200 --> 05:19.440
that might be buying a MacBook Pro.

05:19.440 --> 05:21.320
This is Dell's answer that it's thin.

05:21.320 --> 05:22.380
It's got chamfered edges.

05:22.380 --> 05:28.940
It's got four USB-C ports plus an SD card reader, and it's got much upgraded speakers

05:28.940 --> 05:32.400
compared to what are normally shipped into Dell that it clearly seems like they're trying

05:32.400 --> 05:35.920
to match what the MacBook Pro has in audio quality.

05:35.920 --> 05:38.680
And then just the specking on this thing, which I'll get into in the review, is just

05:38.680 --> 05:40.440
absolutely insane.

05:40.440 --> 05:45.440
And it's obviously Dell saying, hey, by the way, if you heard about this ARM transition

05:45.440 --> 05:48.760
and everything that you target in the cloud runs on x86 and you'd rather just get a Linux

05:48.760 --> 05:54.640
box that could replace your MacBook Pro, have you seen the Dell Precision 5750?

05:54.640 --> 05:55.640
It's really crazy.

05:55.640 --> 06:02.720
I mean, between the like just the really hot RAM and the screen, there's a lot to like

06:02.720 --> 06:03.720
here, right?

06:03.720 --> 06:04.720
Yeah, yeah.

06:04.720 --> 06:05.720
It has screaming RAM in this thing, too.

06:05.720 --> 06:07.080
That's yeah, that's one of the other things they did.

06:07.080 --> 06:10.760
You know, I just know that this thing, it's going to be supported by LVFS now, and that's

06:10.760 --> 06:16.200
a pretty sweet position to be in because I could put Fedora 33 on that thing and I'm

06:16.200 --> 06:20.920
not, I could put PopOS on that, which is going to be kind of particularly ironic, or I could

06:20.920 --> 06:24.080
leave 1804 is what it ships with right now.

06:24.080 --> 06:26.000
And they're all going to get supported with LVFS.

06:26.000 --> 06:27.620
It's pretty nice.

06:27.620 --> 06:29.240
There's other things in the works.

06:29.240 --> 06:30.680
Few hints.

06:30.680 --> 06:35.960
He also gives a notable mention to Logitech, who's done literally millions, shipped literally

06:35.960 --> 06:37.160
millions of firmwares.

06:37.160 --> 06:39.680
Kind of an early adopter, too.

06:39.680 --> 06:44.660
And he gives specific thanks to Lenovo, they've really worked well with the project.

06:44.660 --> 06:48.080
But there's other details in here, too, that I think are worth the click in the show notes

06:48.080 --> 06:51.380
if you guys care about the project.

06:51.380 --> 06:52.380
Some good stuff in here.

06:52.380 --> 06:53.380
It's really neat to see this.

06:53.380 --> 06:57.920
What I really liked about this post by Richard was just, you know, last year he presented

06:57.920 --> 07:03.680
a talk and his slide was, well, LVFS is just a website that runs cron jobs, right?

07:03.680 --> 07:08.760
At the end of the day, it has, you know, it's basically new packaging infrastructure.

07:08.760 --> 07:13.240
But someone in the crowd told him, you didn't just create a website.

07:13.240 --> 07:14.760
You changed an industry.

07:14.760 --> 07:15.760
And that's it, right?

07:15.760 --> 07:18.080
Like, LVFS feels like a pipe dream.

07:18.080 --> 07:21.960
It feels like the kind of firmware updates that we wish we could have in the free software

07:21.960 --> 07:22.960
community.

07:22.960 --> 07:25.400
And yet, it's 2020.

07:25.400 --> 07:26.720
Here we are.

07:26.720 --> 07:28.920
By and large, we have them.

07:28.920 --> 07:35.360
Now, this next story, I don't know, maybe it's going to appeal to millions.

07:35.360 --> 07:38.440
Maybe it's only going to appeal to just me.

07:38.440 --> 07:45.640
But the Zen project is officially porting its hypervisor to the Raspberry Pi 4.

07:45.640 --> 07:47.600
You got to, you know, you got to have the four.

07:47.600 --> 07:49.680
So to be precise, it's really...

07:49.680 --> 07:50.680
Four.

07:50.680 --> 07:51.680
Yeah.

07:51.680 --> 07:54.160
Well, it comes down to some of the hardware components in there.

07:54.160 --> 07:56.880
And this idea kind of bubbled up, what?

07:56.880 --> 07:57.880
Not too long ago?

07:57.880 --> 07:58.880
Yeah.

07:58.880 --> 08:03.680
Well, the idea to do an official port bubbled up from the Zen community, you know, as it

08:03.680 --> 08:09.800
will, and then reached the desk of George Dunlap, chairman of the Zen Projects Advisory

08:09.800 --> 08:10.800
Board.

08:10.800 --> 08:16.040
Dunlap mentioned the idea to an acquaintance who works at the Raspberry Pi Foundation.

08:16.040 --> 08:18.800
Okay, friends in high places.

08:18.800 --> 08:25.360
And was told that around 40% of pies are sold to businesses, rather than hobbyists.

08:25.360 --> 08:29.760
And Chris, I mean, I think at this point, the number of pies in your RV alone, well,

08:29.760 --> 08:31.760
that's a small business, right?

08:31.760 --> 08:36.160
Hmm, you know, now that I'm independent again, I wonder if I could claim it's a business

08:36.160 --> 08:37.160
expense.

08:37.160 --> 08:42.440
Yeah, I mean, I'm doing some serious business with my pies.

08:42.440 --> 08:47.320
And they're now actual production devices, so much so that I could even eventually see

08:47.320 --> 08:51.920
myself being convinced to run a Raspberry Pi in the studio, which is my highest level

08:51.920 --> 08:54.160
of production grade.

08:54.160 --> 08:55.160
We're getting close.

08:55.160 --> 08:56.160
Yeah.

08:56.160 --> 08:57.520
Now, here's the nutty thing, though.

08:57.520 --> 09:02.800
30 million ARM-based pies have been sold as December 2019, and it looks like if you go

09:02.800 --> 09:08.660
by what has been released by the foundation, the Raspberry Pi sales are running at like

09:08.660 --> 09:13.320
a brisk 600,000 plus a month as of April 2020.

09:13.320 --> 09:17.720
The register has a really good piece on all of this that goes through a lot of the details.

09:17.720 --> 09:23.440
And the thing is, Wes, there is some similarities to the Raspberry Pi and the x86 systems that

09:23.440 --> 09:27.600
Zen has run on that made it possible, but then there was also some complications as

09:27.600 --> 09:28.600
well.

09:28.600 --> 09:34.760
Yeah, I mean, the Raspberry Pi 4 system on a chip uses a regular GIC 400 interrupt controller,

09:34.760 --> 09:37.200
which Zen supports out of the box.

09:37.200 --> 09:42.280
And I know, I know, especially here at Linux Unplugged, we're all about KVM, but Zen has

09:42.280 --> 09:45.260
been there for literally decades.

09:45.260 --> 09:49.900
And it's, I mean, it's fair to say it's huge in the hypervisor space.

09:49.900 --> 09:53.680
So the fact that you can just support the interrupt controller on this board, you can

09:53.680 --> 09:56.880
use it for virtualization, that's no small feat.

09:56.880 --> 09:58.360
Yeah, it's a pretty big deal.

09:58.360 --> 10:01.880
Now, the thing is, it's not just that easy.

10:01.880 --> 10:06.360
They had to do a deep dive into the belly of the memory allocator and Linux's address

10:06.360 --> 10:08.320
translation layers.

10:08.320 --> 10:09.320
Better them than us.

10:09.320 --> 10:10.560
Well, no kidding, right?

10:10.560 --> 10:14.280
And then later on, they had to figure out how to handle DMA and physical address conversions.

10:14.280 --> 10:18.880
They had to solve all kinds of problems, but you can read them for yourself.

10:18.880 --> 10:27.120
But the upshot of it is that they're all kind of coming together to land in Linux 5.9.

10:27.120 --> 10:33.520
So by Linux 5.9, when that ships, we could have a fully working Zen hypervisor on the

10:33.520 --> 10:36.000
Raspberry Pi 4 just out of the box.

10:36.000 --> 10:39.800
Now don't get too excited though, Chris.

10:39.800 --> 10:47.000
Linus Torvalds, in his infinite wisdom, has released Candidate 7 and suggested maybe another

10:47.000 --> 10:51.360
cycle of testing will be needed before a full version release.

10:51.360 --> 10:58.020
So it might be just a little while before the official Zen on Pi is able to be deployed.

10:58.020 --> 10:59.520
But it's coming.

10:59.520 --> 11:00.520
Yeah.

11:00.520 --> 11:05.160
And for those of you that can't wait, Project Eve, which is the Linux Foundation's OS for

11:05.160 --> 11:10.240
the IoT network edge devices, will soon publish details on their GitHub page detailing how

11:10.240 --> 11:12.480
you could kind of get it going sooner.

11:12.480 --> 11:15.520
But at the end of the day, I think this is actually a bigger deal for industry that are

11:15.520 --> 11:21.360
developing applications than it really is for guys like us.

11:21.360 --> 11:29.560
That said, I have given virtualization a bit of a poke on the Pi 4 and it's horrible, horrible

11:29.560 --> 11:30.560
right now under KVM.

11:30.560 --> 11:35.800
I mean, just because a thing is possible does not mean you should be doing it and it would

11:35.800 --> 11:39.320
not be usable in any sense of the meaning.

11:39.320 --> 11:45.000
But if they could get something with Zen and I could run a super low end base OS with Zen

11:45.000 --> 11:50.960
on there and then I could have a few VMs, that would give me a sense of security.

11:50.960 --> 11:57.240
Because being production grade also means easy to restore, easy to back up, or at least

11:57.240 --> 11:59.360
there's a straightforward process.

11:59.360 --> 12:04.360
And I don't really have that with the Pis right now beyond DDing the SD cards or something

12:04.360 --> 12:05.360
like that.

12:05.360 --> 12:06.920
Yeah, something gross.

12:06.920 --> 12:07.920
Yeah.

12:07.920 --> 12:09.720
So, anyways, it's great to see it.

12:09.720 --> 12:12.200
Well, let's talk about a little more powerful hardware.

12:12.200 --> 12:14.480
We've got ThinkPads and Dells, oh my, this week.

12:14.480 --> 12:19.480
Let's start with the new XPS 13 and the developer edition, which is what Dell calls the version

12:19.480 --> 12:24.800
preloaded with Ubuntu, has been announced right alongside the new XPS 13.

12:24.800 --> 12:30.380
Now this is based on the Tiger Lake 11th Gen Intel laptop CPU.

12:30.380 --> 12:35.720
They're going to ship with Ubuntu 2004 and Thunderbolt 4.

12:35.720 --> 12:37.360
How about that for fancy?

12:37.360 --> 12:38.360
What?

12:38.360 --> 12:40.040
How does that work?

12:40.040 --> 12:42.720
And isn't it just USB?

12:42.720 --> 12:47.840
I mean, I think what happened is the USB became Thunderbolt, essentially, they've merged into

12:47.840 --> 12:52.640
one Ultra Bolt, maybe, either way, if it's fast, I'm happy.

12:52.640 --> 12:57.360
There's some interesting details in here like fast RAM and going up to 32 gigs.

12:57.360 --> 13:00.800
It'll be available in the US and Canada starting September 30th.

13:00.800 --> 13:04.920
And then they're going to roll it out across European countries to participate with Dell.

13:04.920 --> 13:09.960
The price was not yet announced, but here's the thing in this announcement that I thought

13:09.960 --> 13:10.960
was noteworthy.

13:10.960 --> 13:12.360
The hardware, it looks great.

13:12.360 --> 13:17.040
It's just it's what you expect now from the XPS 13 and they just impressively keep delivering

13:17.040 --> 13:19.320
every single iteration.

13:19.320 --> 13:20.680
And that remains true.

13:20.680 --> 13:27.160
But this thing in here I thought was cool and perhaps a good data point for us to observe.

13:27.160 --> 13:32.160
This is Dell, they write, based on their input from our developer community, we've also added

13:32.160 --> 13:40.120
functionality to allow Windows XPS 13 users to switch their system from Windows to Ubuntu

13:40.120 --> 13:47.040
2004 with a free software tool that Dell is making available, even if they did not originally

13:47.040 --> 13:49.840
purchase the developer edition.

13:49.840 --> 13:53.960
You can set it up so that both operating systems run side by side or that just Ubuntu takes

13:53.960 --> 13:55.760
over completely.

13:55.760 --> 13:57.240
That's got to be a big deal, right?

13:57.240 --> 13:59.480
That they've made a tool to do this?

13:59.480 --> 14:00.480
That is something.

14:00.480 --> 14:06.760
I mean, they're invested at this point, Linux is a thing they're shipping and representing

14:06.760 --> 14:07.760
in their hardware.

14:07.760 --> 14:10.840
I mean, they start with based on input from our developer community.

14:10.840 --> 14:15.240
So I guess this is something that they've gotten from their customers.

14:15.240 --> 14:20.540
This is enough customers either requested or attempted this and contacted support or

14:20.540 --> 14:25.840
whatever the story is, the number, the data metric was high enough for the leadership

14:25.840 --> 14:29.480
or whoever it is at Dell to decide this is worth investing in.

14:29.480 --> 14:31.560
That's got to be noteworthy and that's pretty exciting.

14:31.560 --> 14:34.720
So I mean, the machines look great, too.

14:34.720 --> 14:41.680
I think that's a nice note for our audience just in that consumer choices matter.

14:41.680 --> 14:48.400
If you and your purchasing department perhaps are interested in hardware like this, Dell

14:48.400 --> 14:51.440
seems to be listening.

14:51.440 --> 14:55.600
Our original XPS 13 that I bought forever ago is still going strong, still going strong

14:55.600 --> 14:57.680
in the Fisher household.

14:57.680 --> 14:59.920
That's not to be outdone by Lenovo.

14:59.920 --> 15:03.920
Lenovo is increasing the number of PC and laptops they sell preloaded with Ubuntu.

15:03.920 --> 15:08.040
We talked about how they recently announced some Fedora systems.

15:08.040 --> 15:14.640
And at that time, there were Ubuntu systems on Lenovo devices that you could buy if you

15:14.640 --> 15:19.600
had like a business sales rep window that you could go through to get those machines.

15:19.600 --> 15:25.000
But it seems that barrier is being removed and then they're just cranking up the machines

15:25.000 --> 15:26.000
they support.

15:26.000 --> 15:32.040
Oh, yes, that news builds on that certification program for big companies.

15:32.040 --> 15:39.600
But now there's a comprehensive range of ThinkStation and ThinkPad series laptops that are available

15:39.600 --> 15:46.560
to buy or at least will be from the Lenovo website, most coming preloaded with Ubuntu

15:46.560 --> 15:47.560
2004.

15:47.560 --> 15:51.780
That's a lot of machines and desktops, it's not just laptops.

15:51.780 --> 15:52.780
So that's pretty great.

15:52.780 --> 15:56.560
A lot of nice work systems to choose from right there.

15:56.560 --> 16:02.000
And I hope that means that maybe more businesses could offer some of these systems to their

16:02.000 --> 16:03.000
staff.

16:03.000 --> 16:05.960
Maybe they're already a Dell shop or a ThinkPad shop.

16:05.960 --> 16:11.240
It's just nice to see that integration with IT departments, especially in the age of Apple

16:11.240 --> 16:17.560
embraces ARM and all kinds of custom system on a chips like, you know, the bog standard

16:17.560 --> 16:21.120
x86 platform where you can just run whatever you want.

16:21.120 --> 16:23.520
It's still going surprisingly strong.

16:23.520 --> 16:29.480
Yeah, and in a way, when the hardware kind of reaches a point where the CPUs aren't changing

16:29.480 --> 16:34.480
much and the, and all of that, a way that they can start to differentiate and reach

16:34.480 --> 16:38.200
a new market is by offering Linux.

16:38.200 --> 16:43.160
And it's not like a huge market, but it is something they can do to the machine that

16:43.160 --> 16:44.500
differentiates.

16:44.500 --> 16:47.480
And something tells me the people who are interested in that, well, they're willing

16:47.480 --> 16:51.760
to spend the money.

16:51.760 --> 16:56.640
Lenovo.com slash unplugged, go there, sign up and get a $100 credit towards your new

16:56.640 --> 16:58.880
account for 60 days.

16:58.880 --> 17:05.440
Linode is the world's largest independent cloud for developers founded in 2003 and they're

17:05.440 --> 17:10.600
in 11 global markets with over 800,000 customers, 100% independent.

17:10.600 --> 17:14.120
They launched three years before AWS.

17:14.120 --> 17:17.440
Linode.com slash unplugged, get a $100 credit.

17:17.440 --> 17:21.360
Wes and I use the heck out of Linode for the unplugged program.

17:21.360 --> 17:24.380
And that's actually kind of how it started for me.

17:24.380 --> 17:29.480
Two years ago, I thought I need to have a cloud for my own personal stuff that's separate

17:29.480 --> 17:33.360
from my work stuff because I needed to have that divider now.

17:33.360 --> 17:36.160
I no longer owned all of that, I needed to have my own account.

17:36.160 --> 17:40.520
So I knew of Linode of course, because I've seen them at many of the events I go to, they're

17:40.520 --> 17:44.480
active participants in the community, they have developers on staff who contribute upstream.

17:44.480 --> 17:48.600
So I had seen their name a lot and I knew about Linode, so I thought, okay, I'll go

17:48.600 --> 17:49.600
try them out.

17:49.600 --> 17:53.160
And I had actually known a few developers who had written into Coderadio who told me

17:53.160 --> 17:54.720
they host their stuff on the node.

17:54.720 --> 17:59.840
So I'd gotten over the years, a picture and a snapshot, but I was using a different provider.

17:59.840 --> 18:03.260
You guys might be familiar with who that was, but I thought for myself, I'll try it Linode.

18:03.260 --> 18:04.400
That was two years ago.

18:04.400 --> 18:05.640
And then it just kind of built from there.

18:05.640 --> 18:10.660
I started doing it for my own systems, when I needed like an SSH jump post or something.

18:10.660 --> 18:15.500
But then as we started to go independent again, it just was obvious to build out the infrastructure

18:15.500 --> 18:16.780
on Linode.

18:16.780 --> 18:18.340
We just prefer it.

18:18.340 --> 18:22.720
The Linux ethos is it's baked into the way you just configure the systems and the access

18:22.720 --> 18:24.200
you get and the options you have there.

18:24.200 --> 18:28.000
But just all of it, like I created a volume last night, just as an example, I created

18:28.000 --> 18:30.420
a volume last night and attached it to one of our systems.

18:30.420 --> 18:34.120
It immediately just comes up with a nice little hover over of, here's the command you run

18:34.120 --> 18:35.960
on Linux to mount it with the exact path here.

18:35.960 --> 18:38.660
If you want to format it to a different file system, run this command.

18:38.660 --> 18:42.480
They just, they know what the next step is because they use these systems themselves.

18:42.480 --> 18:46.640
They make it simple to deploy infrastructure and you can rely on it.

18:46.640 --> 18:49.640
We've been running a brand new matrix server on it flawlessly.

18:49.640 --> 18:53.300
And with 11 data centers worldwide, you're going to find something that works for you.

18:53.300 --> 18:56.280
They have shared plans that start as low as $5 a month.

18:56.280 --> 19:00.560
Then of course they have dedicated CPU and GPU systems that are fast and powerful.

19:00.560 --> 19:02.440
And every system has crazy fast networking.

19:02.440 --> 19:05.840
That's one of the reasons why we're doing this test that we're about to talk about on

19:05.840 --> 19:10.680
Linode because we wanted to just blast files as fast as possible at each other.

19:10.680 --> 19:13.000
And so we set up two Linodes to do it.

19:13.000 --> 19:15.700
And you get root access to your server along with their API.

19:15.700 --> 19:17.240
So you get full control.

19:17.240 --> 19:20.440
Let's start by going to linode.com slash unplugged.

19:20.440 --> 19:25.320
That gets you a $100 60 day credit for your new account and it supports the show linode.com

19:25.320 --> 19:26.440
slash unplugged.

19:26.440 --> 19:31.960
And thanks to Linode for supporting the unplugged program.

19:31.960 --> 19:36.920
We had dropped some hints in the past that Microsoft was attempting to support Linux

19:36.920 --> 19:40.120
GUI applications via WSL.

19:40.120 --> 19:44.360
And now we've got some interesting details on how X11 and Wayland applications are going

19:44.360 --> 19:45.640
to work.

19:45.640 --> 19:51.880
And we even saw some demos of good old GIMP running under WSL on Windows 10.

19:51.880 --> 19:55.160
And we have a picture, a literal picture, which we have linked in the show notes for

19:55.160 --> 19:58.520
you, that shows how all of this is going to come together.

19:58.520 --> 20:04.120
And the secret sauce seems to be that Microsoft is doing what just about every other open

20:04.120 --> 20:06.240
source desktop is doing.

20:06.240 --> 20:12.320
And yeah, get this, they're writing their own Western implementation and it's actually

20:12.320 --> 20:13.320
kind of clever.

20:13.320 --> 20:19.000
In a nutshell, what we're doing is we're taking Western, we're taking this RDP backend and

20:19.000 --> 20:23.880
we're extending it to teach it how to basically do remote application.

20:23.880 --> 20:29.000
So instead of remoting the desktop, we remote individual window and then we can take those

20:29.000 --> 20:32.800
window and integrate them with the rest of the Windows desktop.

20:32.800 --> 20:37.800
And of course, they have to do the good old GIMP demo, which is always sort of cliche,

20:37.800 --> 20:41.880
but proves a good point to that, hey, look, complex multi window application is working

20:41.880 --> 20:43.440
on desktop.

20:43.440 --> 20:48.200
Like, okay, all right, well, there's no arguing, you obviously have X apps going.

20:48.200 --> 20:49.200
Right?

20:49.200 --> 20:50.640
I mean, can you edit images?

20:50.640 --> 20:52.720
Well then, you pass the test.

20:52.720 --> 20:54.360
Now how are they doing all of this?

20:54.360 --> 20:59.600
This is the interesting thing and they say, and we'll have a link to the Xorg Developers

20:59.600 --> 21:00.960
Conference presentation.

21:00.960 --> 21:04.040
It's a long presentation, it's like a big old one.

21:04.040 --> 21:08.320
The Xorg Developers Conference ran September 16th through the 18th and this was one of

21:08.320 --> 21:11.200
many presentations that was given there.

21:11.200 --> 21:12.200
XTC?

21:12.200 --> 21:14.360
Yes, that's right, XTC.

21:14.360 --> 21:15.360
Thank you.

21:15.360 --> 21:18.760
Yeah, it's got a cool logo too, which looks like the X logo, which is cool because it's

21:18.760 --> 21:19.760
got an X.

21:19.760 --> 21:26.720
They are modifying and upstreaming changes to free RDP to do all kinds of cool things,

21:26.720 --> 21:32.960
including create PulseAudio syncs, pull that in and push it all to the standard Microsoft

21:32.960 --> 21:33.960
RDP client.

21:33.960 --> 21:38.960
And inside the guest, we're also running a PulseAudio server that's hosting our RDP sync

21:38.960 --> 21:42.120
and RDP source for audio in and audio out.

21:42.120 --> 21:47.720
And we forward those over to our compositor where we're running the RDP backend, but we're

21:47.720 --> 21:54.580
running a greatly enhanced RDP backend.

21:54.580 --> 21:56.940
We added support for things like multiple multi-mon.

21:56.940 --> 22:03.480
So now you can go run all of this in multiple monitors and as the monitor comes and go,

22:03.480 --> 22:06.600
the application will see the monitor comes and go.

22:06.600 --> 22:12.240
I did support for things like cut and paste and things like this over the RDP channel.

22:12.240 --> 22:18.900
So we start essentially to have an RDP server that is fully functional, that allows you

22:18.900 --> 22:24.640
to do almost the same thing that you can do, say, remoting into a Windows box.

22:24.640 --> 22:29.140
And if you go by the diagram that they have, it's free RDP that they are doing this to

22:29.140 --> 22:31.480
and they say they're upstreaming the changes.

22:31.480 --> 22:34.280
I think this is so cool in a number of ways.

22:34.280 --> 22:38.280
Okay, there's the large Microsoft sort of, you know, stand out in the corner.

22:38.280 --> 22:39.960
We'll get to that later.

22:39.960 --> 22:46.600
But just that RDP is the thing that they invented and Weston is the thing from the Linux world

22:46.600 --> 22:54.760
with these like abstractions first design and that you can merge these two so nicely

22:54.760 --> 22:58.680
and have an upstream first mentality to make this all work.

22:58.680 --> 23:01.360
I think that's Linux winning to quote Linus, right?

23:01.360 --> 23:02.360
Yeah.

23:02.360 --> 23:06.240
Like that's Microsoft having to give over and say like, look, this is the way we should

23:06.240 --> 23:07.240
design this.

23:07.240 --> 23:09.160
This is how we should tie our system in.

23:09.160 --> 23:13.200
Even if you guys over in the Linux world haven't even decided that you're all ready to move

23:13.200 --> 23:15.360
over to the Wayland Weston world.

23:15.360 --> 23:16.840
Yeah, we're there.

23:16.840 --> 23:21.800
Yeah, it's remarkable the effort they continue to put into WSL.

23:21.800 --> 23:26.200
I mean, they could have stopped at WSL one.

23:26.200 --> 23:32.960
I remember a time when there were other layers you could put on a Windows system that are

23:32.960 --> 23:33.960
like WSL.

23:33.960 --> 23:39.760
Like they had they actually had a Unix compatibility layer in the past that was on NT four that

23:39.760 --> 23:40.760
you could install.

23:40.760 --> 23:41.760
Right.

23:41.760 --> 23:44.220
I mean, that's kind of what became WSL v1.

23:44.220 --> 23:47.640
When they announced WSL v1, I thought, okay, that's what it's going to be like based on

23:47.640 --> 23:50.160
what I've experienced with their compatibility layers in the past.

23:50.160 --> 23:51.160
This is where it'll stop.

23:51.160 --> 23:54.120
And, you know, they'll patch it and keep it up to date, etc, etc.

23:54.120 --> 23:57.920
That'd be a compatibility layer into their own NT proprietary world.

23:57.920 --> 24:01.560
Boy, is that not what's happened?

24:01.560 --> 24:02.560
Is that not what's happened?

24:02.560 --> 24:04.000
It's like not what's happened at all.

24:04.000 --> 24:09.360
No, it's 2020 and Microsoft is shipping like a regular new Linux kernel.

24:09.360 --> 24:10.360
Yeah.

24:10.360 --> 24:12.400
So let's jump ahead to an email we got in from Chris Thompson.

24:12.400 --> 24:18.000
He says, is Microsoft going to ditch Windows and Linux wins the desktop war?

24:18.000 --> 24:21.160
One can dream, true or not, but the day may come.

24:21.160 --> 24:25.960
And he links to a register article, which we have in the show notes.

24:25.960 --> 24:30.600
But that register article is really about a story that Joe and I touched on in Linux

24:30.600 --> 24:32.960
action news this Sunday.

24:32.960 --> 24:39.000
And that was that Eric Raymond predicted that Windows would essentially co-opt Linux and

24:39.000 --> 24:44.840
that Windows would turn into a compatibility layer, a proton-esque compatibility layer

24:44.840 --> 24:49.920
that runs on top of a Linux kernel, and that eventually developers would start targeting

24:49.920 --> 24:58.040
Linux and the compatibility layer would become just a option for old applications or old

24:58.040 --> 24:59.880
third-party applications.

24:59.880 --> 25:04.180
And that essentially you'd see a flip of what we have today, that you'd have the reverse

25:04.180 --> 25:08.640
instead of a Windows desktop with a Linux compatibility layer, it's a Linux desktop

25:08.640 --> 25:10.360
with a Windows compatibility layer.

25:10.360 --> 25:11.880
Boy, I don't know.

25:11.880 --> 25:16.800
I mean, I think there's still a lot to be said about controlling your own kernel, right?

25:16.800 --> 25:21.920
I mean, they've got a lot of say here and as much as you hear the Microsoft folks playing

25:21.920 --> 25:27.200
very nicely with upstream, and again, we should emphasize that, we really should.

25:27.200 --> 25:32.080
But there's also still a lot in the proprietary world when you're running your own cloud and

25:32.080 --> 25:37.960
when you control the dominant desktop operating system, you can choose when or when not to

25:37.960 --> 25:43.760
play those games because it's your own kernel, they've got their own abstractions and they've

25:43.760 --> 25:48.560
figured out how through Hyper-V, et cetera, to host Linux really well.

25:48.560 --> 25:53.840
So I think they're in a surprisingly a very good point and if anything, they're in a better

25:53.840 --> 26:00.600
spot now from rejecting Linux as a cancer to embracing Linux where they need it, right?

26:00.600 --> 26:05.000
And where not, they've still got their own whole NT stack for the next generation of

26:05.000 --> 26:10.080
Xbox and when they want it in Azure, they've got Linux-based switch hardware.

26:10.080 --> 26:12.280
Yeah, that's how I see it too, Wes.

26:12.280 --> 26:17.720
Eric Raymond makes the argument though that on a longer timetable, you know, maybe a decade

26:17.720 --> 26:23.280
or something, the economic pressures will just kind of force Microsoft to shed their

26:23.280 --> 26:30.280
historical tech legacy and just enjoy the cost benefits of having other developers create

26:30.280 --> 26:34.360
software and he makes the case that you're already seeing this right now.

26:34.360 --> 26:41.200
There's evidence today for you to witness this and that is the release of Edge for Linux.

26:41.200 --> 26:45.840
He says that that shows you what Microsoft is doing is they're taking free or open source

26:45.840 --> 26:52.580
software and they're packaging it up and saying, look, world, we've made this business safe.

26:52.580 --> 26:56.840
The adults have come into the room, they've taken this and they've packaged it up.

26:56.840 --> 27:01.720
Yeah, those kids and crazy doctors over at Google came up with this web browser but what

27:01.720 --> 27:05.980
we've done here is we've gone and given it the Microsoft audit.

27:05.980 --> 27:09.360
We've gone through it and we've added some features that we think make it better for

27:09.360 --> 27:13.160
your business and oh, by the way, you can centrally manage this via group policy and

27:13.160 --> 27:14.400
actor directory.

27:14.400 --> 27:19.600
We think it's going to be great and now you can run it on Linux too and Microsoft saved

27:19.600 --> 27:25.040
themselves a decade of work in investing in a new web browser engine like Triton and instead

27:25.040 --> 27:30.120
were able to adopt Blink and Chromium and just essentially switch over to Edge in like

27:30.120 --> 27:36.080
a year and hit the ground running and he argues that as a company, they're going to look at

27:36.080 --> 27:39.800
that return and say, well that's clearly what we have to just do for the desktop now too

27:39.800 --> 27:41.960
because Azure is really our long play.

27:41.960 --> 27:44.040
I really don't see this argument.

27:44.040 --> 27:51.800
For one, Edge is not exactly the first thing that Microsoft has put out even with a GUI.

27:51.800 --> 27:53.600
No kidding.

27:53.600 --> 28:00.840
Like we've had SQL, PowerShell, VS Code, Teams, all kinds of things have been coming over

28:00.840 --> 28:01.840
to Linux.

28:01.840 --> 28:06.440
It's not like this is some, oh my God, they're suddenly releasing software for Linux.

28:06.440 --> 28:09.440
No, they've been doing it for a while.

28:09.440 --> 28:17.080
This is not really something to start shouting from the rooftops about and I really don't

28:17.080 --> 28:23.360
see the momentum going towards having a switch to Linux as a base.

28:23.360 --> 28:25.000
I just don't see it.

28:25.000 --> 28:29.720
There is way too much investment in the enterprise space and yes, I know that they're pushing

28:29.720 --> 28:36.200
people towards the cloud for as many services as possible, including Active Directory, including

28:36.200 --> 28:43.640
Exchange, all of it is trying to go towards the cloud, but I want people to keep in mind

28:43.640 --> 28:48.360
that we have entities like the US government who are still paying them to support things

28:48.360 --> 28:51.360
like Windows 95.

28:51.360 --> 28:55.120
That's not going away anytime soon.

28:55.120 --> 29:01.440
These big on-prem deployments are huge money makers for Microsoft and they're not just

29:01.440 --> 29:06.780
going to turn away from that and they're not going to tell their clients, hey, switch over

29:06.780 --> 29:10.560
to this thing where Linux is now your base and we're going to support all your stuff

29:10.560 --> 29:12.280
via a compatibility layer.

29:12.280 --> 29:13.480
It's fine.

29:13.480 --> 29:15.680
That doesn't fly from mission critical.

29:15.680 --> 29:16.840
It just doesn't.

29:16.840 --> 29:19.240
I completely agree here.

29:19.240 --> 29:26.320
I think Microsoft has never been in a better position not to need to do this and additionally,

29:26.320 --> 29:31.540
there's going to be one clear tell that you have to see before this is ever going to happen

29:31.540 --> 29:35.460
and if you don't see this, then you don't need to worry about it and that is in some

29:35.460 --> 29:40.680
shape or form, DirectX is either open source or released for Linux or whatever because

29:40.680 --> 29:44.180
there ain't no way Microsoft is abandoning DirectX.

29:44.180 --> 29:48.320
It's a huge part of their strategy and the only way they could do a transition like this

29:48.320 --> 29:52.240
is if they battle tested DirectX in a transition like that.

29:52.240 --> 29:57.280
All the hardware vendors would be utterly upset if Microsoft switched from a Windows

29:57.280 --> 29:59.640
NT kernel to Linux for two reasons.

29:59.640 --> 30:06.000
The first is switching to a Linux kernel means that they would have to constantly work at

30:06.000 --> 30:11.120
their drivers and have to potentially mainline it, which that's a lot of work.

30:11.120 --> 30:15.800
Well, we've been lucky so far with the way that things have gone for the vast majority

30:15.800 --> 30:17.440
of hardware vendors.

30:17.440 --> 30:22.360
We were bootstrapped by people reverse engineering drivers and then it got to a point where there

30:22.360 --> 30:27.880
was this kind of critical mass in certain sectors that led to people starting to do

30:27.880 --> 30:32.600
it kind of first, then putting it and then other people taking that work and then mainlining

30:32.600 --> 30:39.760
it themselves, but you rarely ever see the actual vendors themselves directly contributing

30:39.760 --> 30:42.760
to the Linux kernel to add new drivers.

30:42.760 --> 30:49.480
That just doesn't really happen very often, even today, and basically if the surefire

30:49.480 --> 30:54.700
way for Microsoft to ruin all their relationships with all their hardware partners is to say

30:54.700 --> 30:57.880
that we're moving to a Linux kernel and you have to do this.

30:57.880 --> 31:01.860
Yeah, they'd be asking them to flush years of work.

31:01.860 --> 31:03.080
It's not just the years of work.

31:03.080 --> 31:05.240
It means that they actually have to care.

31:05.240 --> 31:09.160
See the biggest problem with Windows drivers and one of the reasons why it was so notorious

31:09.160 --> 31:16.960
for what 15 years or so is that when you make a Windows driver, you're building it against

31:16.960 --> 31:21.560
a stabilized interface that you can that Microsoft guarantees for X period of years.

31:21.560 --> 31:24.440
Well, once they build the driver, they don't have to care about it.

31:24.440 --> 31:29.320
With the exception of graphics drivers, almost no drivers get updates after they're initially

31:29.320 --> 31:30.320
made and released.

31:30.320 --> 31:35.300
Yeah, fair that that does not work in the Linux world at all.

31:35.300 --> 31:40.400
It seems like every time some big new piece of Microsoft, something XYZ on Linux happens,

31:40.400 --> 31:45.120
this conversation comes up again and an edge, I think for those of us who have been around

31:45.120 --> 31:50.160
a long time, represents a pretty strategic move because we're familiar with how Microsoft

31:50.160 --> 31:55.120
leveraged Internet Explorer in the past, and so it invokes maybe an even a deeper analysis

31:55.120 --> 31:57.560
of this topic, but I think the fundamentals remain the same.

31:57.560 --> 32:03.880
I was pretty optimistic when I read that article, I was pretty optimistic and I said, why not?

32:03.880 --> 32:07.040
But now I hear Drew and also the arguments of made.

32:07.040 --> 32:15.080
I want to say these are really good arguments, and if you know that thing behind Windows,

32:15.080 --> 32:19.200
all the relationship they have with their hardware vendors and everything that sounds

32:19.200 --> 32:20.400
pretty obvious.

32:20.400 --> 32:24.080
So it was really interesting to hear these arguments right now.

32:24.080 --> 32:26.200
So thank you, Neal and Drew.

32:26.200 --> 32:32.520
I think maybe the argument comes up because there is some logic to it like it would make

32:32.520 --> 32:36.120
it would be great for Linux in the sense that a lot of games would come and it would mean

32:36.120 --> 32:41.040
that the Linux user base and the underlying utilities that were all GPL would remain.

32:41.040 --> 32:45.040
And it would mean the unification of developer support and that could be great, like there's

32:45.040 --> 32:48.560
a lot of pros to it, if not a lot of risks.

32:48.560 --> 32:51.940
But it seems obvious that Microsoft would also reap from a lot of benefit of not having

32:51.940 --> 32:55.600
to do the plumbing and the other elephant of the room here that we all are not really

32:55.600 --> 33:01.400
saying out loud is no doubt Windows is a horrible rat's nets.

33:01.400 --> 33:04.720
It's just got to be just a mess of technical debt.

33:04.720 --> 33:09.200
Sounds like you've been looking at the recent Windows XP source code leak, Chris, because

33:09.200 --> 33:13.840
oh boy, there's some embarrassing comments.

33:13.840 --> 33:16.640
No better way to fall asleep at night, but let's talk about something that we can get

33:16.640 --> 33:18.840
our hands on today.

33:18.840 --> 33:22.760
Fedora 33 beta landed a little bit earlier today.

33:22.760 --> 33:28.240
And the nice thing is it was a little delayed, but there's a pro in that the final version

33:28.240 --> 33:33.120
of GNOME 3.38 landed in this beta, so we can actually get some beta testing on that.

33:33.120 --> 33:38.000
Gives a little more time for us to kick the tires on ButterFS as well, which is I think

33:38.000 --> 33:41.560
probably the most notable new feature landing in Fedora 33.

33:41.560 --> 33:43.700
And it seems like things are looking pretty good.

33:43.700 --> 33:44.700
It's in good shape.

33:44.700 --> 33:49.840
I noticed that you haven't mentioned Nano as the default text editor.

33:49.840 --> 33:50.840
You bastard.

33:50.840 --> 33:53.440
That's my silent win right there, Wes Payne.

33:53.440 --> 33:54.920
That's my silent win.

33:54.920 --> 33:59.520
The Nano army is out there, and we just do favors for each other in different parts of

33:59.520 --> 34:01.280
the community silently.

34:01.280 --> 34:07.240
Really we should say things like that swap on Zram, link time optimization.

34:07.240 --> 34:12.560
These are all things that Fedora always does and advances the state of the Linux desktop

34:12.560 --> 34:14.380
because they care, right?

34:14.380 --> 34:21.600
They integrate upstream changes between Linux, the kernel, between GNU and GCC, between LVM.

34:21.600 --> 34:25.160
They make it all work, and we all benefit.

34:25.160 --> 34:29.240
I've been doing like Linux podcasts for like 14 years.

34:29.240 --> 34:36.240
So it kind of takes something special to get me to look forward to reviewing and testing

34:36.240 --> 34:37.240
a distribution.

34:37.240 --> 34:39.520
And some of them, it happens still, thankfully.

34:39.520 --> 34:41.400
And this is definitely one of them.

34:41.400 --> 34:43.040
2004 was one of them.

34:43.040 --> 34:46.920
I'm looking forward to 2010, but I'm really looking forward to Fedora 33 because they're

34:46.920 --> 34:50.240
pushing the envelope, much like 2004 did with CFS.

34:50.240 --> 34:53.760
This is here now with ButterFS and just equally exciting.

34:53.760 --> 35:00.080
And there's something so great about that, to be following this every single day on a

35:00.080 --> 35:04.160
weekly basis for 14 years and still get excited by this stuff.

35:04.160 --> 35:07.040
It shows you how hard these teams really are working on this.

35:07.040 --> 35:09.480
So we're definitely going to review this one on the show.

35:09.480 --> 35:13.880
I can't wait.

35:13.880 --> 35:16.880
How about a little housekeeping, tidied up around here, a few things you should probably

35:16.880 --> 35:17.880
know about.

35:17.880 --> 35:22.560
I'm going to suggest you consider upgrading to the Jupiter Broadcasting All Shows feed.

35:22.560 --> 35:26.280
You can search for the All Shows feed in your podcast catcher or we have a link in the show

35:26.280 --> 35:28.480
notes or a link on the JP site.

35:28.480 --> 35:29.480
There's things in the works.

35:29.480 --> 35:33.940
A lot going on now that we've gone independent and we're, I don't want to say specifics,

35:33.940 --> 35:35.740
but there may be some new stuff and I don't want you to miss it.

35:35.740 --> 35:39.840
The All Shows feed is a great way to get this show, get Linux action news, self-hosted when

35:39.840 --> 35:41.160
it comes out.

35:41.160 --> 35:44.840
There's Koda Radio back on the air that lands every single week.

35:44.840 --> 35:48.560
There's good stuff in the All Shows feed and one spot to get it all.

35:48.560 --> 35:52.220
And when something new comes out, if it does come out, I mean, who knows?

35:52.220 --> 35:54.240
But if it does, that's where it would be.

35:54.240 --> 35:57.520
And if you're looking out there to reach the perfect audience, Jupiter Broadcasting has

35:57.520 --> 36:01.320
some sponsor opportunities in October, it could be a great fit.

36:01.320 --> 36:04.360
Email me chris at jupitabroadcasting.com and let's talk about it.

36:04.360 --> 36:05.760
There could be something there.

36:05.760 --> 36:08.840
I think this could be an opportunity for the community to reach out to other community

36:08.840 --> 36:09.840
members.

36:09.840 --> 36:10.840
chris at jupitabroadcasting.com.

36:10.840 --> 36:16.320
All right, we got really nerdy for this one, Wes.

36:16.320 --> 36:22.160
We got really nerdy and in a way, it was really great to once again go through the process

36:22.160 --> 36:24.800
of setting up a blank system.

36:24.800 --> 36:29.340
This is a temporary system, guys, so we went with Arch because it's simple, clean, lean

36:29.340 --> 36:30.340
and mean.

36:30.340 --> 36:31.340
Okay, wait, wait.

36:31.340 --> 36:32.340
What?

36:32.340 --> 36:38.240
Can I just say this time, this one time, I didn't pick Arch, that was you.

36:38.240 --> 36:42.880
I SSHed into this box and you had picked Arch.

36:42.880 --> 36:43.880
Yeah.

36:43.880 --> 36:48.680
And also, I kind of freshened up the place for you and put on fish shell for you, so

36:48.680 --> 36:49.680
you know.

36:49.680 --> 36:50.680
Which was so nice.

36:50.680 --> 36:55.440
Yeah, I take care, but don't you think for this kind of build where you're trying to

36:55.440 --> 37:00.480
get what you want, modern file system version, you just create a couple of devices, one's

37:00.480 --> 37:04.080
ZFS, one's ButterFS, one's extended for you, so there's a few devices.

37:04.080 --> 37:10.920
I mean, I think we've accepted Arch as the modern Gentoo slash Linux from scratch alternative

37:10.920 --> 37:18.120
where you want to integrate all the upstream changes all at once without the Fedora, important

37:18.120 --> 37:24.400
people like Neil and Carl who tested it first, will just test it and do a worse job.

37:24.400 --> 37:27.360
I've got a new thought technology for you when it comes to Linux distros.

37:27.360 --> 37:29.160
Are you ready for this one?

37:29.160 --> 37:32.600
Arch is my learn and burn distro.

37:32.600 --> 37:33.600
Learn and burn.

37:33.600 --> 37:34.600
You set it up.

37:34.600 --> 37:35.600
You update it.

37:35.600 --> 37:36.600
You make some mistakes.

37:36.600 --> 37:39.040
Well, like after today's episode, I mean, we're not going to keep these two systems

37:39.040 --> 37:40.040
running.

37:40.040 --> 37:41.500
We'll just, we'll literally just delete them.

37:41.500 --> 37:43.480
So you know, for this, it kind of makes sense.

37:43.480 --> 37:45.440
Anyways, back on track.

37:45.440 --> 37:50.400
What we wanted to play around with was a feature that is truly fantastic about these new modern

37:50.400 --> 37:51.720
file systems.

37:51.720 --> 37:56.740
And that is either ButterFS send and receive or ZFS send and receive.

37:56.740 --> 37:58.780
You may have heard these mentioned before.

37:58.780 --> 38:02.320
We wanted to talk a little bit about what they are, what they can do for you, and kind

38:02.320 --> 38:05.680
of the differences between those and say R sync.

38:05.680 --> 38:09.920
So how about in the context of backups, Wes, maybe that's a good place to start.

38:09.920 --> 38:11.200
We've been playing with ButterFS.

38:11.200 --> 38:16.480
We've been playing with ZFS for really a long time.

38:16.480 --> 38:18.500
And we have a lot of small files that change.

38:18.500 --> 38:24.320
So we started thinking about what's a good test case to use for backing these things

38:24.320 --> 38:25.320
up.

38:25.320 --> 38:30.400
And right off the get go, Chris, you set these systems up over at Linode.

38:30.400 --> 38:34.200
ZFS had a bit of a detractor, right?

38:34.200 --> 38:35.200
Yeah.

38:35.200 --> 38:39.760
So looking at this from a standpoint of one disk or two disks, and we want to use this

38:39.760 --> 38:46.760
send and receive to do backups, there is the gotcha that you don't really just format a

38:46.760 --> 38:48.280
disk with ZFS.

38:48.280 --> 38:53.520
You don't just do makefs.zfs and point it at your disk or partition and say, go for

38:53.520 --> 38:54.520
it.

38:54.520 --> 38:55.520
Oh, no.

38:55.520 --> 38:57.400
With ZFS, at least, you have to create a pool to get started.

38:57.400 --> 39:04.400
Honestly, this has been a really fun example of when and where do you use file systems,

39:04.400 --> 39:05.400
right?

39:05.400 --> 39:07.880
Because, okay, so we want to talk about send and receive, right?

39:07.880 --> 39:12.760
We want to talk about backups, talk about copy and write, incremental backups, and where

39:12.760 --> 39:13.920
it made sense.

39:13.920 --> 39:20.360
And I think we've been flirting with, at Linux Unplugged, some of the advantages or disadvantages

39:20.360 --> 39:24.060
of ButterFS and ZFS combined, right?

39:24.060 --> 39:32.520
Because we live in a Ubuntu 2004, or, honestly, 1604 world, where you have ZFS, but we also

39:32.520 --> 39:39.560
live in a world where Chris sets up a Linode Arch server, and you have to compile the ZFS

39:39.560 --> 39:41.720
module from scratch.

39:41.720 --> 39:45.040
And in that world, ButterFS is a lot simpler, right?

39:45.040 --> 39:50.640
I mean, okay, did you not tell me last night, I'm going to set up the ButterFS file system.

39:50.640 --> 39:52.640
Can you set up the ZFS file system?

39:52.640 --> 39:53.640
Yeah.

39:53.640 --> 39:56.960
I just didn't want to mess it up for the test, and with ButterFS, I just did the MakeFS,

39:56.960 --> 40:01.320
BTRFS, pointed at the device, and I can essentially take advantage of things like compression

40:01.320 --> 40:05.000
and snapshots immediately without having to create a pool and setting up any kind of form

40:05.000 --> 40:06.360
of RAID.

40:06.360 --> 40:10.280
While both file systems offer some of the features we're about to talk about, that's

40:10.280 --> 40:13.440
one thing to consider, and I think the point we're trying to drive home is, if you're on

40:13.440 --> 40:19.000
a laptop or you're on, say, a VPS with a single disk, it may be a more appropriate use case

40:19.000 --> 40:23.760
for ButterFS, despite what everybody's going to say about it being scary and dangerous.

40:23.760 --> 40:29.920
If you're in a scenario where you have a large pool of disks, and you have essentially this

40:29.920 --> 40:36.480
desire to have the file system and the operating system be separate, and they don't intertwine,

40:36.480 --> 40:38.520
ZFS is a much better solution there.

40:38.520 --> 40:42.420
Well, maybe not much better, but it's definitely maybe a better use case for ZFS there.

40:42.420 --> 40:47.600
But at the end of the day, they both have this ButterFS, or ZFS send, and on the other

40:47.600 --> 40:53.880
side receive command that allows you to essentially shoot snapshots over the network to another

40:53.880 --> 40:59.640
system running ButterFS receive or ZFS receive, and then replicate that snapshot onto the

40:59.640 --> 41:03.360
file system, which, once it's there, you could treat as a mount, and you could actually mount

41:03.360 --> 41:04.360
it.

41:04.360 --> 41:08.680
I mean, there's a lot of options you have there, and it's R-Sync at the actual file

41:08.680 --> 41:09.680
system level.

41:09.680 --> 41:11.840
Is that too crude of an explanation?

41:11.840 --> 41:16.380
Well, maybe R-Sync plus plus, right?

41:16.380 --> 41:17.380
How so?

41:17.380 --> 41:18.380
Well, okay.

41:18.380 --> 41:24.600
So, we started things off with a split partition setup on our two Linode machines, where we

41:24.600 --> 41:30.320
had an ext4 partition, a ButterFS partition, and a ZFS partition, right?

41:30.320 --> 41:34.120
And we copied the same data set over to each.

41:34.120 --> 41:37.120
And okay, yeah, this was a super nerdy data set.

41:37.120 --> 41:38.980
It was for machine learning.

41:38.980 --> 41:42.000
It's basically a bunch of JPEGs of fruit.

41:42.000 --> 41:43.000
Yes.

41:43.000 --> 41:44.340
Honestly, it's fruit.

41:44.340 --> 41:45.480
It's apples.

41:45.480 --> 41:46.580
It's kiwi.

41:46.580 --> 41:47.580
It's pineapple.

41:47.580 --> 41:50.160
It's all the things that you might want to eat.

41:50.160 --> 41:52.400
Is that a banana, or are you just happy to see me?

41:52.400 --> 41:54.640
Oh, I'm very happy to see you.

41:54.640 --> 41:56.960
Continue on, sorry.

41:56.960 --> 42:02.260
And we set up a script to maybe make this a little more obvious than it needs to be.

42:02.260 --> 42:07.600
We had a Python script set up that would just modify a few pixels in each picture.

42:07.600 --> 42:09.160
You know, they have white backgrounds.

42:09.160 --> 42:12.280
We changed that background to black.

42:12.280 --> 42:14.880
And that's where R-Sync kind of fails.

42:14.880 --> 42:21.320
And ZFS and ButterFS, with their copy-on-write technology, really come to the forefront.

42:21.320 --> 42:26.520
Because if you think about copy-on-write, it's an advanced technology, but it makes

42:26.520 --> 42:28.280
a huge difference.

42:28.280 --> 42:34.500
Because a lot of our storage systems, well, you overwrite in place, right?

42:34.500 --> 42:37.720
You update a file, you just write over the same file.

42:37.720 --> 42:43.240
But with copy-on-write, you only copy if you have to make updates.

42:43.240 --> 42:50.500
And that means with ButterFS and ZFS, when you take snapshots, when you have new subvolumes,

42:50.500 --> 42:53.640
you only store the delta changes.

42:53.640 --> 43:00.240
Whereas R-Sync, well, it needs to go check all of the files that might exist, rehash

43:00.240 --> 43:05.240
them, and figure out what differences actually need to get sent over the wire.

43:05.240 --> 43:11.280
I've heard of use cases where you can use ZFS or ButterFS and over long distances.

43:11.280 --> 43:14.080
There's ways to accommodate that, too.

43:14.080 --> 43:18.520
It's not necessarily a replacement, one or the other, for R-Sync or for the file system

43:18.520 --> 43:20.120
send and receive functionality.

43:20.120 --> 43:24.680
But think of it as this way, everybody, is it's kind of just baked in now.

43:24.680 --> 43:28.600
So when you have a system that has ZFS or ButterFS versus Extended 4, which I'm not

43:28.600 --> 43:33.680
trying to convince anybody to switch, but with Fedora 33 just around the corner, canonical

43:33.680 --> 43:38.040
investing a bunch of work into ZFS, I'm trying to paint a picture for why it's necessary.

43:38.040 --> 43:39.840
Well, that's just it.

43:39.840 --> 43:45.200
Honestly, one of the best aspects of this little experiment that we did, Chris, was

43:45.200 --> 43:51.780
kind of feeling out, like, what does it feel like to use a ZFS system or a ButterFS system

43:51.780 --> 43:54.160
for serious data retention?

43:54.160 --> 43:55.680
So here's the setup we had.

43:55.680 --> 43:58.680
We've got this large data set of images.

43:58.680 --> 44:05.960
We ran a Python script to modify one pixel in each image, and then synced the changes

44:05.960 --> 44:15.360
both via R-Sync and Extended 4, ZFS, and ButterFS, and wanted to figure out, how does that feel?

44:15.360 --> 44:16.360
What does it look like?

44:16.360 --> 44:18.380
And what are the actual transfer rates?

44:18.380 --> 44:22.140
And that actually was sort of where I think you and I did some of our most speculation

44:22.140 --> 44:28.320
is I honestly expected R-Sync to kind of own this, because this is like its thing, I thought,

44:28.320 --> 44:29.320
for sure.

44:29.320 --> 44:30.800
It's its thing, yeah.

44:30.800 --> 44:35.460
But what's fundamental about this is it's integrated the file system layer, and it is

44:35.460 --> 44:36.680
aware of the blocks.

44:36.680 --> 44:38.480
It's aware of the snapshots.

44:38.480 --> 44:39.880
It's just a more integrated tool.

44:39.880 --> 44:44.920
And surprise, surprise, I think in most cases, after your initial sync especially, right,

44:44.920 --> 44:47.800
it sends much faster via file system than R-Sync.

44:47.800 --> 44:48.800
No kidding.

44:48.800 --> 44:51.120
OK, so we should clarify here.

44:51.120 --> 44:57.220
We're using bitmaps, so we're updating exactly one little pixel in that bitmap.

44:57.220 --> 45:01.460
We're just changing it from a white background to a black background.

45:01.460 --> 45:02.460
Not a big deal.

45:02.460 --> 45:07.480
But you could imagine that you've got a large corpus of legal texts or backgrounds

45:07.480 --> 45:08.480
for your website.

45:08.480 --> 45:12.460
It doesn't really matter, but you've got a small incremental update that you need to

45:12.460 --> 45:15.220
sync to a large number of data sets.

45:15.220 --> 45:17.280
A good real world example is Facebook, right?

45:17.280 --> 45:22.440
They've got a huge number of containers they run in production, all powered by ButterFS.

45:22.440 --> 45:27.480
You might update a few packages as your Fedora release comes due, and you've got a few

45:27.480 --> 45:29.840
more updates, right?

45:29.840 --> 45:33.480
You don't want to download each of those individually on each server.

45:33.480 --> 45:37.960
You'd like to just diff the delta, send the delta, and update it.

45:37.960 --> 45:43.120
Yeah, and to that point, Wes, as we saw in that talk that was given by a Facebook developer,

45:43.120 --> 45:45.600
oh no, it was the ButterFS developer who works at Facebook.

45:45.600 --> 45:50.000
He mentioned that they distribute updates to the Facebook website via ButterFS file

45:50.000 --> 45:51.320
system send and receives.

45:51.320 --> 45:53.640
I mean, they can actually just replace portions.

45:53.640 --> 45:54.800
Well, yeah, right?

45:54.800 --> 46:02.580
I mean, to give Docker due credit, they support ZFS and ButterFS as backends because they

46:02.580 --> 46:04.880
support copy and write fundamentally.

46:04.880 --> 46:11.860
So when you want to make a copy, instead of actually overriding in place, you make a new

46:11.860 --> 46:13.920
copy and you change it there.

46:13.920 --> 46:19.160
And that means these file systems can figure out which blocks have changed without having

46:19.160 --> 46:24.280
to do a full differential sync like our sync might do.

46:24.280 --> 46:30.040
This really showed up when we were testing this out because our sync took a full 20 seconds

46:30.040 --> 46:36.160
to go figure out like, oh, all of the images that you had, well, they each had one tiny

46:36.160 --> 46:37.160
bit flipped.

46:37.160 --> 46:44.120
ZFS and ButterFS, they took less than a second to figure out the same thing because they've

46:44.120 --> 46:45.840
got file system smarts.

46:45.840 --> 46:49.400
And of course, that speed advantage just scales the more you're trying to move around and

46:49.400 --> 46:51.120
the more that it's on the file system.

46:51.120 --> 46:52.120
Exactly.

46:52.120 --> 46:55.260
I mean, really, we're doing the minimal level here, right?

46:55.260 --> 47:01.500
We've got like this machine learning initial training data set where it's just a lot of

47:01.500 --> 47:04.200
really nice looking strawberries.

47:04.200 --> 47:09.120
But once you start doing some real stuff, or you've got backups going for years, right?

47:09.120 --> 47:13.960
Where, okay, yes, the presentation from your college days doesn't change a lot.

47:13.960 --> 47:19.040
But maybe you've got some to-do lists, some stuff that does have a little more churn,

47:19.040 --> 47:22.600
is in the complete override in the last five years.

47:22.600 --> 47:23.600
Project files.

47:23.600 --> 47:24.600
Yeah, exactly, Chris.

47:24.600 --> 47:25.600
We know.

47:25.600 --> 47:26.600
You haven't still updated those servers.

47:26.600 --> 47:27.820
That's true.

47:27.820 --> 47:29.580
That's exactly the stuff.

47:29.580 --> 47:32.720
It just sends in the most efficient way possible.

47:32.720 --> 47:40.320
And honestly, it was a really good comparison between where ButterFS is as a enterprise

47:40.320 --> 47:43.320
file system and ZFS.

47:43.320 --> 47:45.000
Yeah.

47:45.000 --> 47:48.480
And I think maybe the folks in the enterprise, I could see how people with an enterprise

47:48.480 --> 47:52.960
mindset would look at ButterFS if they're not familiar with it and go, oh, that's more

47:52.960 --> 47:54.020
of a hobbyist file system.

47:54.020 --> 47:56.360
I don't think it's a fair accusation anymore.

47:56.360 --> 48:00.880
Really, it's funny how many times we've been working with both these file systems for this

48:00.880 --> 48:01.880
show.

48:01.880 --> 48:05.600
And now I just clearly walk away from this going, oh, yeah, okay, I see this use case

48:05.600 --> 48:09.160
for ButterFS that I use it for, and I have a use case for ZFS too.

48:09.160 --> 48:10.920
And that's why I just use both now.

48:10.920 --> 48:14.920
But I'm curious about the differences that you notice in terms of, did you really notice

48:14.920 --> 48:20.160
any speed or any kind of real performance difference between ButterFS and ZFS?

48:20.160 --> 48:22.520
I know it's not a huge workload, but it's a couple of gigs.

48:22.520 --> 48:23.520
Yeah.

48:23.520 --> 48:30.440
I think our training set here was approximately 2.4 gigs of just lovely fruit bitmaps that

48:30.440 --> 48:31.840
we had going.

48:31.840 --> 48:41.240
ZFS by default uses LZ4, at least if you install on Arch, ZFS on Linux with LZ4 compression.

48:41.240 --> 48:45.040
But ButterFS, well, you've got to enable that.

48:45.040 --> 48:46.040
Yeah.

48:46.040 --> 48:47.720
That's kind of what I would expect, though.

48:47.720 --> 48:51.520
I was actually surprised to learn that it was turned on by default, but I think that's

48:51.520 --> 48:54.680
just because Upstream has kind of determined that that's the more...

48:54.680 --> 48:56.920
But here's where that doesn't matter.

48:56.920 --> 48:59.200
You've still got to do your initial sync, right?

48:59.200 --> 49:04.520
So if you want to go listen to self-hosted, you should, because Alex has some great stories

49:04.520 --> 49:11.040
about syncing some of his backups over to his parents' place across the pond in London.

49:11.040 --> 49:12.560
I've done similar.

49:12.560 --> 49:16.440
If you've got big data sets, the initial sync is still going to take a long time because

49:16.440 --> 49:19.400
you've got a lot of bits to send.

49:19.400 --> 49:22.320
What matters is the delta.

49:22.320 --> 49:27.000
And when you've got a fancy copy-on-write file system, you just don't have to worry

49:27.000 --> 49:28.000
that much.

49:28.000 --> 49:35.680
So the crux of our test here at Linux Unplugged was that we modified every file with a few

49:35.680 --> 49:37.480
pixel changes.

49:37.480 --> 49:42.360
Our sync, it basically resynced the entire data set.

49:42.360 --> 49:48.040
Both ZFS and ButterFS, despite the initial slowness maybe that you might contribute to

49:48.040 --> 49:55.860
ButterFS on the initial files end, neither of them took longer than a second to update

49:55.860 --> 49:57.360
all files.

49:57.360 --> 49:58.460
That's a pretty big difference then.

49:58.460 --> 50:00.400
So there's a huge speed difference.

50:00.400 --> 50:02.120
They both offer compression.

50:02.120 --> 50:03.760
What about encryption with ButterFS?

50:03.760 --> 50:08.560
Okay, so now we get into real-world administration details.

50:08.560 --> 50:13.400
Chris, I think it's fair to say that setting everything up, you kind of like ButterFS a

50:13.400 --> 50:14.640
little bit more.

50:14.640 --> 50:19.780
As a traditional Linux sysadmin who just over time I have learned I like things that are

50:19.780 --> 50:25.160
built into the OS that are tools like just kernel-supported stuff.

50:25.160 --> 50:28.000
And ButterFS to me works like a file system I'm familiar with.

50:28.000 --> 50:36.040
I can just go make FS on a disk and it just is there and it's already installed when I

50:36.040 --> 50:37.040
get going.

50:37.040 --> 50:39.040
All I have to do is just install the programs if they're not already installed and it's

50:39.040 --> 50:40.200
just supported in the kernel.

50:40.200 --> 50:42.720
There's no DKMS module I had to worry about.

50:42.720 --> 50:48.040
So those things, and actually not just those things, I got to be honest, the other thing

50:48.040 --> 50:54.000
that really appeals is I'm very commonly working on VPS nows and a VPS system generally has

50:54.000 --> 50:56.760
maybe two disks at most but often just one disk.

50:56.760 --> 51:00.560
And you're pretty abstracted from like whatever that real hardware is, right?

51:00.560 --> 51:03.640
You're not talking to the disk, you're talking to like a network interface.

51:03.640 --> 51:10.780
And ButterFS just seems perfect in that scenario where ZFS, if I owned the box and I had direct

51:10.780 --> 51:17.320
access to the physical machines and I was writing ZFS to the actual disk and ZFS was

51:17.320 --> 51:23.240
managing the actual physical disk and the RAID and it was all top to bottom controlled

51:23.240 --> 51:28.120
by ZFS, I think that would be a pretty good ZFS scenario, especially more than a couple

51:28.120 --> 51:29.120
of disks.

51:29.120 --> 51:33.880
But with ButterFS on my laptop or on a VPS, it just seems to work a lot simpler.

51:33.880 --> 51:39.800
While I don't have a solution for ButterFS encryption today, I know it's coming and I

51:39.800 --> 51:42.560
know I prefer the ButterFS administration style.

51:42.560 --> 51:47.920
It doesn't mean our NAS here in the studio is going to switch off of ZFS though.

51:47.920 --> 51:48.920
I'm not doing that.

51:48.920 --> 51:54.680
No, of course not, well, so that's what's interesting is that it really feels like ButterFS

51:54.680 --> 51:56.400
has a great default, right?

51:56.400 --> 52:01.520
You have a mixed usage file system, maybe you've got some sub volumes that, you know,

52:01.520 --> 52:04.560
they're archival, they're backups, they're things like that.

52:04.560 --> 52:11.320
And then you've got other ones that are just sort of ext4 plus plus, whereas ZFS, you've

52:11.320 --> 52:13.000
got to commit, right?

52:13.000 --> 52:19.200
It doesn't just slot into the sort of Unix layering system, it doesn't slot into how

52:19.200 --> 52:21.320
you manage any of the other volumes.

52:21.320 --> 52:28.920
When you do a df-h grep cfs, well, you get the data set name, not the actual partition

52:28.920 --> 52:30.200
number, right?

52:30.200 --> 52:38.000
So it just doesn't play nice with some of how you might use the Linux system as an admin.

52:38.000 --> 52:45.680
But at the same time, it's a standalone enterprise system and some of the biggest wins it has

52:45.680 --> 52:55.880
are resumable send and receive, built in support for compression, and recently, native encryption.

52:55.880 --> 53:00.840
So if you just want to send some snapshots, you want to catch things up on the other side,

53:00.840 --> 53:03.160
ButterFS is the easiest way to go.

53:03.160 --> 53:06.680
And I didn't actually expect this conversation to kind of go into this, but it is sort of

53:06.680 --> 53:11.960
the logic for ButterFS, and maybe with Fedora 33 around the corner, it's on our minds.

53:11.960 --> 53:17.040
But I'll also say this, and it's not as silly as it used to sound, but you're not going

53:17.040 --> 53:19.320
to run ZFS on a Raspberry Pi.

53:19.320 --> 53:25.160
And remember that number we just talked about have been 30 million Pis sold.

53:25.160 --> 53:29.800
And that number is based on April data, so it's more than 30 million.

53:29.800 --> 53:33.160
And you can run ButterFS like a champ on my Raspberry Pi at least.

53:33.160 --> 53:34.160
You sure can.

53:34.160 --> 53:37.400
So I think there's a lot of use cases for it still.

53:37.400 --> 53:40.420
And so I think we've made our case.

53:40.420 --> 53:42.840
There's obviously a lot of reasons why it's pretty great.

53:42.840 --> 53:46.100
The send and receive functionality, though, is something that I really encourage people

53:46.100 --> 53:51.040
play with once they start switching over to these file systems, whichever one it may be,

53:51.040 --> 53:54.120
because this could change your backup game a little bit.

53:54.120 --> 53:57.300
And think about it from an application restoration standpoint.

53:57.300 --> 54:05.300
You could have a container host or a VM host, and you snapshot and you ButterFS or ZFS send

54:05.300 --> 54:08.680
that and put it on another machine that's a hot standby.

54:08.680 --> 54:13.840
Mount it as a sub volume, get going, spin the containers right back up, zero downtime.

54:13.840 --> 54:18.480
It was kind of fascinating to see how much of a difference it was between ButterFS and

54:18.480 --> 54:19.480
ZFS.

54:19.480 --> 54:24.840
So like on our little test setup over at Linode, I was taking snapshots on ButterFS, I was

54:24.840 --> 54:30.320
taking snapshots on ZFS, and in the ZFS world, it was like sort of a logical entity, right?

54:30.320 --> 54:33.520
I had a data set, I would take various snapshots.

54:33.520 --> 54:35.200
They wouldn't show up on the file system.

54:35.200 --> 54:36.200
No, of course not.

54:36.200 --> 54:39.960
Those were like logical entities that existed within ZFS.

54:39.960 --> 54:46.480
But in the ButterFS world, those all existed, like you had to pre-plan stuff so that you

54:46.480 --> 54:51.360
had like a top layer namespace that you would take snapshots underneath.

54:51.360 --> 54:54.720
And if you want to do a send or receive in ButterFS, you got to make sure that those

54:54.720 --> 54:57.600
snapshots are read only.

54:57.600 --> 55:01.140
In ZFS, well, they're always read only.

55:01.140 --> 55:05.840
That's good and bad because you get a little more flexibility depending on that and how

55:05.840 --> 55:08.520
you think about these things.

55:08.520 --> 55:10.480
It's just fascinating.

55:10.480 --> 55:12.440
You can do the same thing on both.

55:12.440 --> 55:19.800
I think ZFS has more maturity by far in the sense of encryption, native compression, and

55:19.800 --> 55:23.440
resumability for send and receive.

55:23.440 --> 55:28.280
But ButterFS has the advantage that it's just sort of built into a modern kernel you might

55:28.280 --> 55:29.280
use.

55:29.280 --> 55:30.280
That's true.

55:30.280 --> 55:33.480
And you could turn on compression and take advantage of that.

55:33.480 --> 55:35.440
And you could just not use any of these features.

55:35.440 --> 55:39.040
You don't even have to use copy on write, and you just get a pretty decent file system

55:39.040 --> 55:40.040
for your laptop.

55:40.040 --> 55:43.860
I think that's what has me so excited about this.

55:43.860 --> 55:47.880
This is what an enterprise grade file system does, is it has this kind of functionality.

55:47.880 --> 55:54.360
And I've watched over the years as it's sort of been lacking on these Linux workstations.

55:54.360 --> 55:59.120
We sell these machines supposedly for developers, but they have a file system that has the functionality

55:59.120 --> 56:02.320
of the 90s or actually even the 80s.

56:02.320 --> 56:07.240
Meanwhile, Windows has shadow copies and NTFS and with granular permissions.

56:07.240 --> 56:12.160
I'm not a huge NTFS fan, but I have to admit they seem to have kept it in decent shape

56:12.160 --> 56:14.160
over the years for what it is.

56:14.160 --> 56:19.480
People has APFS, which offers not as many features as these nicer file systems that

56:19.480 --> 56:23.640
we have, but definitely more than extended four has.

56:23.640 --> 56:29.700
And it's just kind of expected on a workstation for the file system to have a workstation

56:29.700 --> 56:31.320
grade functionality.

56:31.320 --> 56:37.720
And now just by installing Ubuntu 2004 or by installing Fedora 33 in the near future,

56:37.720 --> 56:42.040
you get this stuff and you never have to touch it, but it's there if you want it.

56:42.040 --> 56:44.800
Along with a bunch of other really cool stuff that's built into these that we haven't even

56:44.800 --> 56:46.360
touched on today.

56:46.360 --> 56:51.340
But the send and receive functionality specifically is worth a little more attention.

56:51.340 --> 56:53.600
Maybe it's a little early now, but we want to get it in front of you.

56:53.600 --> 56:58.100
So that way when you start using a distribution with these file systems, if you don't already,

56:58.100 --> 56:59.640
you can kind of see some of the advantages.

56:59.640 --> 57:05.600
And we also want to arm you with actual knowledge about this file system, ButterFS that's built

57:05.600 --> 57:11.520
into Linux and try to give you some counterpoints to what you'll always hear about ZFS and how

57:11.520 --> 57:12.520
great it is.

57:12.520 --> 57:16.060
It's not that it's a bad file system or it's not that it's a good file system.

57:16.060 --> 57:19.940
It's different use cases and there are advantages to both.

57:19.940 --> 57:22.980
And I hope we've made that point and I hope that we've given you kind of that ammo so

57:22.980 --> 57:26.760
when you're in those conversations, at least for yourself, you know what the reality is,

57:26.760 --> 57:31.560
is that not one file system is the answer to all, but the situation's getting better

57:31.560 --> 57:33.960
for all Linux users over time.

57:33.960 --> 57:39.240
And pretty soon I hope that it's the default on all Linux desktops, but that's just crazy

57:39.240 --> 57:40.240
Chris.

57:40.240 --> 57:43.280
And then we have some feedback we should probably get to because we're going to be going on

57:43.280 --> 57:47.800
forever if we keep talking about file systems.

57:47.800 --> 57:51.280
I don't know what it is, but we love talking about file systems.

57:51.280 --> 57:55.240
Thomas writes in with a question about to do apps and this is something we need to talk

57:55.240 --> 57:58.680
about because otherwise we just talk about file systems all day and I got to keep on

57:58.680 --> 57:59.680
track.

57:59.680 --> 58:00.680
So to do app is perfect.

58:00.680 --> 58:05.720
And he says, you recently covered GNOME or I'm sorry, GNOME to do, which got me going

58:05.720 --> 58:06.800
down a rabbit hole.

58:06.800 --> 58:07.800
Thanks so much.

58:07.800 --> 58:10.280
I'm looking for more to do applications.

58:10.280 --> 58:14.880
I've settled on D task for now or DS task after trying task warrior and the gnome to

58:14.880 --> 58:15.880
do list.

58:15.880 --> 58:19.720
And I've also tried to do.txt for the CLI stuff and I've tried task book.

58:19.720 --> 58:20.720
Wow.

58:20.720 --> 58:23.080
I'd love to hear more about to do apps.

58:23.080 --> 58:26.120
Is that something you've covered before on self hosted or luck?

58:26.120 --> 58:28.000
If not, I'd like to hear more about it.

58:28.000 --> 58:34.400
Well, I decided Thomas, we'd probably cover this one because I just kind of went all in

58:34.400 --> 58:35.400
on to do list.

58:35.400 --> 58:37.640
And so I thought maybe I'd talk about to do list a little bit.

58:37.640 --> 58:40.400
You know, I've been using to do list as well.

58:40.400 --> 58:44.320
I started looking at it again when they announced a quote unquote native Linux app.

58:44.320 --> 58:48.480
That's always kind of, okay, it also works great on my phone.

58:48.480 --> 58:53.760
It works on my watch, it works on the web and it now it works on desktop Linux and they

58:53.760 --> 58:59.960
added support for Trello like project boards along with to do lists and they have support

58:59.960 --> 59:04.960
for sharing those to do lists with other folks like the wife and I have one for the RV that

59:04.960 --> 59:09.560
we just put stuff on individually and you know, I have a bunch for work on there and

59:09.560 --> 59:11.340
I found it to work pretty well for me.

59:11.340 --> 59:16.580
It's not the prettiest to do app, I gotta be honest, but it is super functional.

59:16.580 --> 59:18.120
It has an API for days.

59:18.120 --> 59:22.380
The integrations with to do list are just mind bending.

59:22.380 --> 59:24.000
It's just mind bending.

59:24.000 --> 59:27.760
And on top of all of that, it seems like it's going to be around for the long haul.

59:27.760 --> 59:29.760
I've watched them for a couple of years.

59:29.760 --> 59:31.680
They seem pretty solid as a company.

59:31.680 --> 59:36.400
They seem to be iterating at a pretty decent pace and adding decent features and the more

59:36.400 --> 59:41.340
I drill into the application, the more I find that it does like I have this situation where

59:41.340 --> 59:45.480
I have to again call back to Verizon wireless and so I just keep all of these notes for

59:45.480 --> 59:51.480
every time I call these these people and I try to get them to cancel my line, I get it.

59:51.480 --> 59:55.560
I have it right in there and I have all the details in my call notes and I find that to

59:55.560 --> 59:56.560
be super handy.

59:56.560 --> 01:00:01.400
Plus it supports a lot of plain English stuff for scheduling and whatnot and the mobile

01:00:01.400 --> 01:00:02.920
apps decent too.

01:00:02.920 --> 01:00:07.880
So I recommend to do list any anybody in the mumble room have suggestions for to do app

01:00:07.880 --> 01:00:09.560
that works for them.

01:00:09.560 --> 01:00:12.960
Super productivity is one that I've started using.

01:00:12.960 --> 01:00:18.520
I got a reference to that from another podcast and that was it.

01:00:18.520 --> 01:00:21.800
I'm kind of amazed at how it makes things better.

01:00:21.800 --> 01:00:26.460
It's not just doing to dues and note taking and stuff like that, but it also integrates

01:00:26.460 --> 01:00:31.440
with managing issue tracking workflows and stuff like that.

01:00:31.440 --> 01:00:36.320
It might be a little bit more developer centric than to do as it is, but it's it's certainly

01:00:36.320 --> 01:00:41.080
starting to help me out a little bit in balancing like what I'm trying to keep track of and

01:00:41.080 --> 01:00:43.120
what I'm supposed to do and things like that.

01:00:43.120 --> 01:00:44.120
Nice.

01:00:44.120 --> 01:00:45.120
And the name was again.

01:00:45.120 --> 01:00:46.120
Super productivity.

01:00:46.120 --> 01:00:47.120
Nice.

01:00:47.120 --> 01:00:48.120
That sounds like it.

01:00:48.120 --> 01:00:49.440
That sounds like one worth looking into as well.

01:00:49.440 --> 01:00:52.960
Drew, do you have one that you use any kind of like to do list management at all?

01:00:52.960 --> 01:00:54.060
Yeah, I do.

01:00:54.060 --> 01:00:56.680
But I like mine to be super duper simple.

01:00:56.680 --> 01:01:01.040
I don't think that a to do app needs to have a whole bunch of bells and whistles.

01:01:01.040 --> 01:01:05.560
So I actually just use Google task and it works great for me.

01:01:05.560 --> 01:01:06.560
Wow.

01:01:06.560 --> 01:01:08.740
I thought it'd get killed, but it seems like it's sticking around.

01:01:08.740 --> 01:01:12.520
They seem to be integrating it more and more with different aspects of the Google app suite.

01:01:12.520 --> 01:01:13.680
So I think it's in for the long haul.

01:01:13.680 --> 01:01:16.560
Well, there's a couple of ideas right there.

01:01:16.560 --> 01:01:20.000
And if you have any others and you're screaming them at us right now, you can always throw

01:01:20.000 --> 01:01:21.000
them in the telegram group.

01:01:21.000 --> 01:01:25.160
Go to broadcasting.com Telegram, join up and tell us about them.

01:01:25.160 --> 01:01:26.160
I'd like to know.

01:01:26.160 --> 01:01:31.120
I'd like, you know, we get if we get a batch of them, we could always do a little to do

01:01:31.120 --> 01:01:32.200
pics special.

01:01:32.200 --> 01:01:36.140
I suppose I want to say thank you to our core contributors.

01:01:36.140 --> 01:01:39.080
Those of you that are supporting the show, we really appreciate it.

01:01:39.080 --> 01:01:41.260
You're making the show possible and you get more show.

01:01:41.260 --> 01:01:42.260
You have a choice.

01:01:42.260 --> 01:01:48.160
You get the fully uncut live stream with all of our mistakes, but also a lot more content.

01:01:48.160 --> 01:01:49.880
Too much content.

01:01:49.880 --> 01:01:51.520
Is there ever too much Westpain?

01:01:51.520 --> 01:01:52.520
Really?

01:01:52.520 --> 01:01:54.320
No, probably not.

01:01:54.320 --> 01:01:58.080
No, no, you can never have enough Westpain.

01:01:58.080 --> 01:01:59.900
And there's two options for you.

01:01:59.900 --> 01:02:06.120
You have the limited ad feed, which is fully produced, the fully edited show with the nice

01:02:06.120 --> 01:02:11.440
mix and all of that, just with limited ads, or you get that full live version.

01:02:11.440 --> 01:02:13.540
Thank you for making the show possible.

01:02:13.540 --> 01:02:16.840
And if you're interested in supporting the unplugged program, if you want to become a

01:02:16.840 --> 01:02:21.800
member, you can go to Linux unplugged.com and if you look right along the top there,

01:02:21.800 --> 01:02:26.080
we have the links to send you over to our core contributor page and you can sign up

01:02:26.080 --> 01:02:30.440
and then you get the feeds for the extra content and support the show.

01:02:30.440 --> 01:02:35.280
Also over on the website, along with all the show notes, we have our matrix server info.

01:02:35.280 --> 01:02:38.760
If you've been wondering about that and our mumble server info, if you'd like to join

01:02:38.760 --> 01:02:45.060
us on a live stream, we do this show on Tuesdays at noon Pacific, 3pm Eastern, but get it converted

01:02:45.060 --> 01:02:49.760
at your local time at jupiterbroadcasting.com slash calendar.

01:02:49.760 --> 01:02:50.760
All right, Mr. Westpain.

01:02:50.760 --> 01:02:51.760
See you next week.

01:02:51.760 --> 01:02:54.760
Same bat time, same bat station.

01:02:54.760 --> 01:02:56.960
Wait, do we have a bat signal?

01:02:56.960 --> 01:02:59.160
I thought it was a penguin.

01:02:59.160 --> 01:03:00.160
I think it's Twitter.

01:03:00.160 --> 01:03:02.160
You know, when we just tweet that we're live.

01:03:02.160 --> 01:03:03.160
You're right.

01:03:03.160 --> 01:03:05.280
It's a at Linux unplugged, right?

01:03:05.280 --> 01:03:06.280
Yeah.

01:03:06.280 --> 01:03:07.280
That's the new bat signal, I think.

01:03:07.280 --> 01:03:08.340
It's got to be.

01:03:08.340 --> 01:03:09.340
Or the telegram group.

01:03:09.340 --> 01:03:12.240
Cause I often post it in a telegram group.

01:03:12.240 --> 01:03:14.880
So that's, that's another way to know when we're going live.

01:03:14.880 --> 01:03:18.160
Thank you everybody for tuning this week's episode of the unplugged program links for

01:03:18.160 --> 01:03:22.480
the topics and stories we talked about and information about the file system features

01:03:22.480 --> 01:03:27.920
we've been going on about linuxunplugged.com slash three seven three.

01:03:27.920 --> 01:03:31.440
Thank you so much for tuning into this week's episode of the unplugged program and we'll

01:03:31.440 --> 01:04:00.480
see you right back here next Tuesday.

01:04:01.440 --> 01:04:15.760
So, Hey drew, Hey Chris, Hey drew.

01:04:15.760 --> 01:04:23.720
If I wanted to throw an audio job at this Dell for a review, is it possible to script

01:04:23.720 --> 01:04:29.960
a Reaper series of actions so that I could import audio, process audio, render audio

01:04:29.960 --> 01:04:33.560
or encode audio and then just run it over and over again?

01:04:33.560 --> 01:04:40.080
Uh, maybe, you know, getting into the scripting thing isn't something that I've done a ton

01:04:40.080 --> 01:04:41.080
of.

01:04:41.080 --> 01:04:44.160
I picture you sitting in front of Reaper and you're kind of like just like executing all

01:04:44.160 --> 01:04:48.380
kinds of automations and you're, you've got like a VR headset on and like a Nintendo power

01:04:48.380 --> 01:04:51.840
glove and hence stuff is just like flying on the screen.

01:04:51.840 --> 01:04:53.520
The power glove is key.

01:04:53.520 --> 01:04:58.360
I was actually picturing drew with like one of those duck hunt, uh, you know, those orange

01:04:58.360 --> 01:04:59.360
guns that you see.

01:04:59.360 --> 01:05:00.360
The little light gun.

01:05:00.360 --> 01:05:01.360
Oh yeah.

01:05:01.360 --> 01:05:30.960
They're shooting at mistakes and they're getting cut.


So Wes, have you ever owned a Windows phone?
Oh, I was hoping you weren't going to ask me that.
I'm ashamed to say yes.
OK, I mean, it was a significant other at the time.
But there was one in my household.
And I definitely played with it a little.
But you don't have access to it anymore then?
No, although I am curious.
There was some news out this week.
Microsoft, they've just kind of abandoned that whole platform,
right?
But they were producing new phones.
They were still getting sold.
So there's still relatively recent Windows phones
out there.
If you had one on the Lumia-branded smartphones,
which I did, there was already a jailbreak.
So you could actually do something useful
with this unsupported hardware that you've probably
either subsidized or paid directly for.
But now, thanks to actually a secure boot flaw, which
I think is hilarious considering how much work Microsoft put
to making that standard, thanks to that,
now on any Qualcomm-based, which is basically every single one,
any Qualcomm-based Windows phone, there's a jailbreak.
Yeah, I'm sure that devs will be rushing to port ROMs to it.
Yeah, probably not.
But if you have something like an HP Elite X3 or HTC One M8,
I did see that one out.
That was kind of popular, maybe more so on a better operating
system.
But you get what you pay for.
This is Linux Unplugged, episode 283, for January 8, 2019.
Hello, and welcome to your weekly Linux talk show.
Let's put Chris out to pasture this week.
My name is Wes.
My name is Joe.
Thanks for joining us, Joe, especially since I
know you have a new toy you would probably
rather be playing with.
Yep.
But you're here.
You're helping out.
Chris is traveling.
He's already told us all about his adventures.
But meanwhile, well, there's a whole bunch of community news
to talk about, some big changes planned or not planned
for the upcoming Fedora releases.
And there's a shiny new kernel coming soon
with a brand new major version number.
Then those old GNU projects, they've got releases too.
It's just that time of the year.
And one of them, well, it's that bass shell,
which we all know and love.
Speaking of shells, we had an opportunity
to sit down and talk with one of the developers of the fish
shelf, one of my personal favorite shells.
We've also got a discussion coming up
about with the success of Proton,
are there still problems lurking at the heart of gaming on Linux?
And contributing even more, Joe had a chance
to sit down and get some information about just what's
going on with Adobe.
Is there any chance of Creative Cloud coming to Linux?
But before we get into any of that,
well, we're going to need a little help
from our Mumble Room.
Time appropriate greetings, Mumble Room.
Hello there.
Hello.
Oh, aren't you guys the best?
All right, let's just get started.
We talked about this back in Linux Unplugged 2.77.
And there was some chatter going on about Fedora 31.
And was it going to be delayed by a half year?
Were they going to break the six month release cycle?
They've been discussing this since November.
Turns out, no, they're not.
Yeah, this was a bit of a surprise, wasn't it?
Because Matthew Miller came on and talked
about all the good reasons they were doing this
with all the retooling and the fact
that they really needed time to just wait for the release
and concentrate on that retooling.
But it seems that maybe they're just
going to have to get on with it and double up their work.
Yeah, as Paul Fried explained, after talking
with the council, as well as some
of the folks who are depending on the cadence,
especially they highlight IoT here,
it was clear we need to look at this option.
But for now, we're not going to have any cadence changes.
There's no changes for cadence.
There's no objective requirements from them.
Unless more specific reasons are given,
we're not adopting this at this time, which, OK.
It did seem like there was a little discussion
about, clearly, there's a lot of underpinnings in just how
Fedora gets made, the build processes, the CICD
infrastructure, all the stuff behind the scenes.
I know there were particularly concerns about unblocking
more community management, tying it
less to maybe some specific resources
that just Fedora team members have.
That's all important work.
I guess there just wasn't enough of an argument
about really breaking from the release cycle,
because even though it's not always perfect,
it is something a lot of people depend on.
Well, this does go to show that Fedora does everything
in the open, including making major decisions like this.
It was proposed.
There was a lot of support for it.
We thought it was going to happen.
But ultimately, there was discussion,
and the consensus was against it.
I suppose this kind of thing would probably
happen in quite a lot of projects,
certainly in proprietary software,
and we'd just never hear about it.
Yeah, that's a great point, right?
If it was in a private company, and we
didn't hear about the first part,
well, we would have never heard about it.
It would have just been released and no news story.
It also goes to show that Fedora, well, they
don't stand still, and that's a good thing, right?
There's a lot of great innovations coming from Fedora.
This next story is maybe an area where they're playing catch-up.
So we've already talked about all the data collection,
and Linux for a long time has kind of
been an environment where you had a little bit of privacy
on your desktop.
There was a big hullabaloo about Ubuntu adding more data
collection to the installer, and now Fedora developers
are looking at implementing a per-system UUID identifier
leveraged exclusively by DNF, their package manager,
in order to more accurately count their user base.
So what do you think about this?
Do you think that the controversy is justified,
or do you think that there's nothing to see here,
move along?
My mature opinion after thinking about it for a while
is going to have to be the second one,
but I think it's a question worth asking.
I don't think it's nonsense to bring up the topic.
I think the way that they've implemented it
seems like it's going to be OK, though.
They're not reusing these UUIDs.
Their intention is not to try to identify you as a user.
Mostly, they've seen a lot of problems
of trying to count stuff like, you know,
if you install six-piece copies of Fedora
behind a gnat at your house, well, that counts as one,
even if it was your roommate installing that.
They've also added a couple controls around,
is this just like a short-lived environment,
something like a container, versus an actual,
maybe a server install or a desktop workstation?
That all seems like data that would help them a lot,
and personally, I'm OK giving up.
Yeah, I don't have any problem with this,
and I think they kind of deserve the metrics, don't they?
If you're working hard at making an operating system,
you kind of want to know how many people are using it.
It's like counting the download numbers for a podcast.
We know roughly how many people download the shows that we do,
but we have no idea about any of the people
unless they write in specifically to talk to us.
And I do trust Fedora to do this properly.
They will do it all in the open, and they'll
make sure that this data isn't misused,
but then they can actually use it to do good things,
like concentrate on the areas where the users are,
and potentially even concentrate on areas
where they want to get new users.
Yeah, right, that is sort of the flip side is that you have
good metrics about what people are using
or what user bases are growing that
can help the limited resources that are available
for development.
Yeah, and it's a shame to see so much controversy about it.
People will just get up in arms about anything, won't they?
Yes, they will.
They also get rather excited about just about anything,
and that's probably going to be true about the upcoming Linux
release, Linux 5.0.
Yeah, this was going to be 4.21.
I thought it was actually going to be the 4.20,
but it seems that they wanted to 4.20 represent.
So yeah, Linus has decided that 4.21 will actually now be 5.0.
And there's quite a lot that's actually gone into this
or that's going to be going into it, quite a lot of graphics
stuff specifically.
Oh, yeah, there is a lot of graphics changes.
I also noticed that the Raspberry Pi touch display is
finally getting mainlined.
Hey, that's nice to see.
Yeah, that's long overdue, but yeah, good to see now.
The other one that stood out to me
is this new large version of the Terminus console font
that you can optionally compile in.
That's going to be useful if you've
got one of those fancy high DPI displays,
and you'd actually like to be able to use
the regular terminal before you get
to your graphical environment.
No, I wouldn't know about those high DPI displays, Wes.
No, I wouldn't, but that's one of those reasons, right?
It's not quite working well enough,
and since we are something of a terminal forward operating
system, it's nice to see this somewhat first class.
That's true, but I think there are other high DPI
concerns before that.
Oh, that's true, but this one's a low hanging fruit.
The other good part that probably needed
to get some work seen in general is
work to remove some of the performance hits from Spectre
and meltdown bug mitigation.
In particular, some of the network performance problems
that came from Google's retpoline fix.
That's just going to be good.
I mean, as long as security isn't compromised,
we'd like it to be both secure and fast.
Have we had a kernel release since the beginning
of last year that hasn't had some sort of mitigations in it?
If so, it was there were pretty few and far between.
And I imagine 2019 is going to just be more of the same.
Yeah, but it's very arbitrary, isn't it?
As Linus says, it's really just he
ran out of fingers and toes to count the number on,
and that's why he iterated it up to five.
But there is something psychological about that,
isn't there?
When the new distros come out with a 5.0, anything
with 4.0, whatever, it's going to seem old and crusty.
Yes, it will.
And especially, I mean, the kernel
has just had such an interesting history.
There was the two days which lasted just forever,
and now we're burning through version numbers.
I think for us people familiar with it,
it doesn't really matter.
Once you realize it doesn't really matter,
you just pay attention to the release notes
and what's going on with the kernel, you'll be fine.
Outsiders, though, it might be a little bit confusing,
especially things keep changing.
We have the Chrome-style version numbers.
We have more semantic versioning style,
and then other projects are just all over the place.
You know which project I love for version numbers?
System D. It's just so straightforward.
It's just a whole number, and it just
keeps going up and up and up.
No points, releases, no confusion.
It's just whatever the number is, add one to it.
Yeah, that's a system even I can understand.
Yeah, that's the one good thing about System D.
Ooh, Joe, ouch.
OK, well, speaking of confusion, we've
got a little update from the corrections department today.
Yeah, so on the last episode, which I was nothing
to do with whatsoever.
Didn't touch it one bit.
No, no.
You talked about this blog post on the Clear Linux blog
that was written by Aiki and Aoki,
and talking about how Clear Linux was going
to go and concentrate on the desktop
and have all this remote desktop stuff.
And you guys got pretty excited about that,
specifically because Chris had been tipping Clear
Linux to be the next big thing.
Well, it turns out that blog post was a couple of days old.
Was it maybe a few hundred days old?
Yeah, I mean, published April 22, 2016.
Right, so yeah, almost three years ago.
Yeah, after that in 2017, they switched to Gnome, obviously,
as we know from using it and reviewing it.
Yeah, so that's not very good of us, really.
That was kind of all of our faults.
Chris said that we can throw him under the bus
because he is ultimately responsible.
But really, I'm going to blame Maurice Quarbek because someone
sent it to him.
He sent it to me.
I posted it in our Slack.
You guys read it and then talked about it.
And along that whole chain, nobody
stopped to look at the date.
So it's quite embarrassing, really.
It very much is, and something we try very hard
not to have happen.
And generally, we have a chain of trust, right?
And we only refer links that you've at least somewhat read
or vetted or thought this might be interested.
And this time, no one did it.
It had been discussed that there was excitement around it,
and that was too much for us.
So we're sorry about that.
And I just appreciate the corrections on it, though.
We want to be accurate, and we want to make mistakes.
Well, we've got to own it.
I will also say, a lot of the stuff
that it talked about in the article, XFCE things,
that's maybe the silver lining here
is XFCE still does make a great remote server desktop.
Yeah, it does.
I think from now on, you're going
to have to write some sort of script
to check all these links, go through and grab
the date or something.
You know, that was kind of my instinct as well,
just like a link verify or something, a procedure
to go through and make sure we're always up to date.
Well, you've probably noticed, dear audience,
that Joe stepped in today.
And we're very grateful.
That's because Chris, well, he's on the road.
And once again, you can follow right along.
If you go to our show notes, linuxunplugged.com,
slash 283, you'll find a link to the Rover tracker.
That lets you be as creepy as you like.
Surprise Chris while he's out shopping or just trying
to live his life, no, no.
But it will help you find out where he is.
Follow along.
He's tweeting updates, real cute updates
with some Levi pictures.
So go check those out too.
Yeah, he's in California at the moment.
And I'm very jealous because the weather's probably
a lot better than it is here.
You know, I'm sure it is.
I'm trying to get back at him in my own small way,
though, for abandoning us in the rain and the drizzle
and the cold.
And that's because, as you know, Chris is something of a nano
fan.
And I just can't abide that.
I mean, we're all welcome to our editors, of course.
But that's just an intrinsic free choice
that we all have inside of us.
But when you have workstations that don't have Vim on them,
kind of upsets me.
So while he's been away, I've been
making sure every darn computer in this place
has Vim installed.
So I was thinking about editors, right?
And I just, I'm faster at it.
How do you get to the bottom of a file in nano?
Am I just like paging down like an animal?
I just don't get it.
You know, I've got a great idea, Wes.
While you're installing it, alias nano to Vim.
Oh, that's evil.
I'm not sure he would forgive me on that one.
Thankfully, he could figure it out and fix it himself.
Yeah, true.
Although, how would he edit the config file?
I think at least he's got a GUI on these machines,
so he could probably pull up everyone's favorite, Kate.
No, gedit.
That's everyone's favorite.
Oh, yeah, gedit.
Timeless classic.
Speaking of timeless classics, another recent release
caught my eye.
And that's GNU-Ed 1.15.
As you probably already know, or probably don't,
Ed is a line-oriented text editor.
It's used to create, display, modify, and otherwise manipulate
text files if you're a sadist.
Now, of course, no one really uses Ed anymore unless you're
in a very particular, maybe an embedded environment.
But I'm sure there are thousands of shell scripts out there
that still make use of it in some way
and have been ported from a legacy Unix environment
and probably still work.
Well, should I be embarrassed that I'd never heard of this
until you put it in the show, doc?
You know, honestly, I don't think you should.
It just won't come up.
It's an interesting piece of Unix history and trivia,
still getting updates to this day.
But you would just never have any occasion
to use it, especially these days with rich text editors.
You probably do a bunch of composition on a website.
So Ed is about the complete opposite.
It's not the only GNU release, though, is it?
No, no, it's not, Joe.
This one, I think you probably have heard of.
It's the Bash shell, the born-again shell,
a complete implementation of the POSIX shell spec.
5.0, they've got a bunch of new, interesting supported
variables.
A lot of people had actually been using Bash compiled
before the official release because some distributions
wanted these features, which that's understandable.
But now they're official.
They're out.
You can go get it.
They've got some nice new substitution variables.
The random variable works pretty nicely these days.
Every time you call it, you get a new random number.
Hey, that's nice.
And I think it's just nice to see
that such a fundamental tool that makes up,
even in the days of containers running
on virtual infrastructure as functions that
live for like 10 seconds, there's
still a whole bunch of Bash in like half of those.
Yeah, but common ways, who is still using Bash at this point?
I think a lot of people.
As a, let's say, prosumer on the desktop, shell switching,
it can be something that's pretty fun and useful.
But when you're in the admin server side,
there's a lot of pressure against that sort of thing,
mostly because, well, Bash is everywhere.
It's already installed.
I think that's less of a problem now that Linux is kind of one.
There's a homogeneity about the marketplace
that you might not have had in the days of Solaris or HPUX
or any of the other bigger Unix distributions.
But if you're just a user, maybe you're just a developer,
you don't have root on a bunch of these boxes,
Bash is going to be the shell you have,
so you probably have to know it.
Yeah, I mean, I was only joking, really.
The thing is, it's ubiquitous, isn't it?
It's even on Macs and on the Windows subsystem for Linux.
It's just everywhere, Bash.
Yeah, and there are some more minimal shells,
things like Dash, of course, classic SH that you could use.
But I think we're stuck with Bash for the time being.
But you don't have to be on your own.
And I don't frequently change shells on servers,
unless it's a server I either use all the time
or use very infrequently.
But for home machines, if I'm doing some processing,
if I'm really getting some work done
and I need some specific Bash-isms
or I just know how to do that really well in Bash,
well, it's one command away.
You just type, whatever your shell,
you just type Bash and hit Enter and you've got a Bash shell.
That's why on a lot of my machines,
well, I'm running the Fish shell.
And as rightly pointed out by many people,
Fish, it's not POSIX compliant.
It does things a little bit differently.
And for the old guard, you might not be comfortable with it
because it'll break a lot of assumptions.
But I think for someone new,
someone you're trying to get on Linux,
maybe they're interested in learning a little bit
about the command line,
maybe they're interested in development
or learning administration, anything like that.
They just wanna play with their computer,
but they haven't had 10 years
of using a command line before.
Fish really is friendly.
It's called the Friendly Interactive Shell.
And I think that really does live up to that.
You've got stuff like easy history searching automatically.
It's also got like smart directory memory.
So it knows if you run a command frequently
inside a certain path,
well, that command will just surface up automatically.
I'm curious, Joe, do you use Fish at all?
I have tried it before and I did find it very useful,
but it's not something that really stuck with me.
I think that it's just a case of Bash is just there.
It's always there no matter what machine you're on
and that extra little step to get Fish installed
is just a bit of a blocker.
I just forget to do it.
And then I just haven't got into the rhythm of using it.
But you've kind of pushed over that hump, haven't you?
And it's kind of your daily driver shell.
Once you get used to it,
it's not on all of my machines, as I said,
but for just like simple common command line tasks,
it's really hard to beat because it is friendly.
It'll remember commands.
So if you haven't taken the time
to make a whole bunch of complicated aliases
on that machine, it's got your back on those.
And well, it just had a release.
This was just at the end of December,
right before the new year, Fish 300 was released.
Now there's some backwards incompatibility.
So you're gonna wanna go read the release notes
if you're a big Fish shell user.
That said, they obviously have their eye on stability.
So those are just kind of only the things
they had to change.
There's also some good news.
A lot of people as someone in the IRC
just pointed out, previously Fish wouldn't let you use
double ampersand for like an and command
as you would traditionally do with the bash shell.
They wanted you to use the literal word and,
they've added that syntax.
So there's actually a lot of new changes
that are really friendly for people coming from POSIX.
So I think now is probably a better time than ever
to talk about Fish shell and to give it a try.
Because of that, we were lucky enough to be joined
by Peter, one of the developers of the Fish shell.
He came on and chatted with Chris and I before Chris left.
Let's hear a little bit more from that.
Anybody who's listened to Linux Unplugged for a long time
knows that Wes and I are both daily drivers
of the Fish shell.
We love Fish.
And we wanted to bring on one of the core members
of the project to just talk about a little bit
after their new release.
Peter, welcome to Linux Unplugged.
Thanks Chris, it's great to be here.
Oh no, no, thank you for making it.
Especially sort of last minute when this just crossed
your mind after the new release.
But I thought, Peter, instead of me
saying it in any kind of ham-fisted way
that I might explain it, from your own words,
how do you describe Fish shell?
What is the Fish shell?
Sure.
So Fish is a command line shell like Bash.
If you are a Mac user and you launch the Terminal app or iTerm
or you're a Linux user, you launch Xterm or Kitty
or whatever, you have a program which draws the window frame
and it has some text in it, renders the text.
And that's called the Terminal emulator.
And the shell is the program running
inside the Terminal emulator that will receive the text
that you input and then, based on that,
decide what commands to run.
So a lot of users are initially confused
about the distinction between the Terminal emulator
and the shell.
And Fish occupies the same space as Bash, as Zshell,
as some other ones like TCH.
I like that explanation.
That's probably much better than the one I would have given.
No kidding.
So I guess I have to ask you the biggest question on my mind.
And that is, how do you get people to use Fish shell?
Because everybody's just got Bash by default now.
Bash is sort of the default, and default is sort of supreme.
And Fish shell is an alternative to that.
And in most cases, or maybe in a lot of cases at least,
people might not even be aware that they can switch a shell.
So how does Fish shell fit in with that?
How does that work?
How does that?
I guess the better way to put that is,
how do you feel about the fact that Bash may always
remain dominant and supreme?
And some people may not even know they can switch.
Does that affect the way you work on the project?
Does that affect you in any way?
That seems like a major elephant in the room
with a project like this.
Yeah, that's a great question.
Driving adoption is certainly a challenge for our project.
For the reason you said, Bash is very entrenched.
And shells are like text editors.
They're very personal.
When you develop a lot of techniques and muscle memory
to use these tools day to day, that
makes it a challenge to switch, because when
you try a new project, it feels unfamiliar, right?
The things you're used to don't work.
None of your muscle memory applies or less of it
applies, and there are surprises.
And so one of the ways that we try
to address that in the Fish shell
is we try to identify the features that users miss
from Bash the most, and then we add them in.
And we're conservative about that.
We do that slowly, but that's one of the ways
that we can help make users feel more comfortable initially.
It also helps that Bash is missing out
on a lot of user-friendly features, features
that are part of the Fish shell.
We say that the Fish shell is a command line
shell for the 90s.
That illustrates that in a lot of ways,
command line shells are stuck in the past,
but we think that Bash is a command line
shell from the 80s.
It doesn't have features like syntax highlighting.
It doesn't have features like autocompletion and so forth.
So one of the ways that users learn about the Fish shell
is they just see it on other people's screens,
on other users' screens.
They're like, wow, that looks really cool.
How can I get that?
And it spreads by word of mouth.
Yeah, that has definitely been my experience,
not only how I found it, but how others have found it
after they saw it on my screen.
And you described it as it's a personal thing.
I used the word when I was chatting with Wes
before we sat down.
It's also maybe the most intimate software
I use on my computer, because I'm not just interacting with it
and clicking it.
I'm communicating with it.
Yeah, it sees everything that you run,
and it enables you to use your machine.
And there's not much software these days
that I have a very strong emotional opinion about,
where you could use language like love,
as for how strongly I love Fish shell.
I really feel strongly about it.
I don't feel that way about a lot of software anymore,
but Fish shell is still one of them.
And so there's something special about building a shell.
So the project's been around now, what, since 2005?
The project is around since 2005.
That was the first release.
I was not on one of the original authors of the Fish shell.
That would be Axel.
I wanted to attempt his last name,
but you can put it in show notes.
And Axel started the project in 2005 as the first release.
And I think development started to slow down around 2010.
And that's when I picked it up.
And I was a user of the Fish shell,
and I was very happy with it.
But there were some bugs I found or things
that I thought could work a little differently.
And I just decided to scratch my own itch
and set out to fix them.
And I figured it would take me a week.
And then a year later, I was pretty embedded in it
at that point.
So that's how I got my start, just scratching my own itch.
Well, isn't that interesting.
How many stories have we heard like that, where somebody
starts scratching their own itch?
You guys just recently had a big release, too.
Was it version 3?
Is that the new version that just came out?
3.0, or is it 0.3?
It is 3.0.
So this is the third major release.
The first major release where I was on the project
was 2.0 and 3.0 signals that we've
made some fairly radical changes in this release.
And that's why we think it deserves a new major version
number.
Would you chat a little bit more about those?
One thing I've always liked about Phish
is I have it on some systems, not all, unfortunately.
But whenever I use it, I'm not concerned, usually,
that things are going to break.
It's mostly just work.
So are there some things people really
need to look out for when they upgrade here?
There's a few things that are different,
but we don't want anyone to have an experience where they
install it and their software breaks.
So a lot of the changes are backwards compatible.
So for example, we support now in 3.0 the double ampersand
for AND or double pipe for OR, a very long requested feature.
But the old syntax, the explicit AND and OR commands
are still supported.
So none of that breaks.
Very good.
Yeah.
We also have a way of staging breaking changes
called feature flags, which allow users to opt into it.
So these are changes that we plan
to make in the future when the current syntax is deprecated.
So this includes, for example, question mark as a glob.
This often breaks users who paste in the URL,
and this will be interpreted as a wildcard.
So with 3.0, we plan to eventually remove
the question mark wildcard.
But in 3.0, you can opt into that removal
by just setting a feature flag in one of your variables.
So there's a lot of forward-looking features
in the 3.0 release like that.
Is the feature flag new to 3.0, or has that
been around for a while?
The whole mechanism of staging these deprecations
and breaking changes is part of 3.0.
Wow.
Interesting.
It signals a bit of a philosophical shift
where we're trying to be a little less dogmatic
and a little more practical and move a little faster, right?
It is very rare to have any program,
but especially a shell, remove features.
Normally, they just secrete features over time.
So we want to have the capability
to have the right feature set, not just the sum of all past
feature sets.
Right.
But how you actually pull that off
is a little new in the world of shells.
And getting it right is important.
That's right.
It is a little risky, so we'll see how it works out.
Yeah.
Oh, I'm excited to hear that.
Let's keep talking about the practical stuff for a moment.
One of the things I love about Fish Shell, to be honest
with you, is I can load it everywhere, Fedora, Arch,
Ubuntu, and even Mac OS, and probably the subsystem
for Linux if I was on a Windows box.
And I really appreciate that fact.
It's one of the, I mean, obviously,
Bash is everywhere, but I don't want to use Bash, right?
I want to use Fish.
So I'm curious, roughly, is Linux your largest
install base?
Do you have, are there a bunch of Windows users?
What's the user base look like for Fish?
Yeah, honestly, I don't know that.
I mean, Linux and Mac are both huge, the largest users,
of course.
But we don't track how many users there
are from any particular platform.
There's no telemetry in the Fish Shell, so we don't know.
But we do have a lot of actually surprising use cases
that we discover.
The team that is on Haiku, which is the BOS recreation,
they have a lot of Fish Shell fans there.
And they have Fish Shell running on Haiku.
That's awesome.
Makes me really happy.
WSL, a Windows subsystem for Linux,
there's also a number of users there.
I actually feel like WSL is a big opportunity for the Fish
Shell because users who have WSL are less likely to be,
you know, have a long history with Bash.
So they're coming at it with fresh eyes.
Yes.
I run it on my Raspberry Pi.
I run it on AWS.
We even have a user running Fish on the TH2,
which is a 33 petaflop supercomputer in Guangzhou,
China.
Right on.
I bet Fish runs just great on there.
I bet it does.
I bet it does.
Fish has always been one of those projects where
you install it, and the defaults have just felt right.
I've been able to install Fish and then run it for six months
before I even changed a single thing.
I really love it.
And I think it's one of the projects
that you can install on a new Linux user's computer
and make the command line a little less intimidating.
And that has massive potential.
I agree completely.
One of the design goals of Fish is that it be very user
friendly.
And the way we design features is we start by thinking about,
what do we want the user to see, to encounter?
And then we work backwards to the implementation
of the feature from there.
So for example, setting your prompt
can be done either via the command line
or via a graphical UI.
There's a command Fish config, which spins up a little web
server and opens a web page that connects to that, all local.
And there's nothing on the network here.
It allows you to set your colors and your prompt and so forth
just with a graphical UI.
So that's much more convenient for new users
compared to, for example, setting the PS1 variable
for controlling your prompt like you would do in Bash.
Which is how I had been doing it.
What's funny is I've been using Fish for years and years
and years.
And it was only until last week that I
ran Fish config for the first time
and did it through the web page.
I've always just done it the old way, the old school way,
because I'm used to the way Bash does it.
That's how you assumed you would do it.
But that web page was great because there
was pre-suggested themes and looks and styles
for my command line that I love.
I love.
And it's an example of making, again, the command line
accessible to people that are maybe transitioning
from another platform where you don't use the command line as
much.
And I think one of the things that
makes Linux more usable as a platform
is if we just acknowledge sometimes it's OK
to use the command line.
And people don't like that, but we
can make the command line a better experience.
Yeah, right.
If we just embrace that and say, we have a great command line.
Well, Peter, what else should people know about?
Is there anything you want them to check out
for the project or things you guys are working on
or any destinations you want to send them?
Well, the project is hosted on GitHub.
We have five contributors on the project other than me
who are very regular and very passionate.
I'd like to give them some credit here
because many of them are even more active than I am.
In particular, I want to give credit
to David Adam and Fabian, who are both very long time
contributors.
And we have Aaron Guise, who's done a ton of great work
across all parts of the shell.
And we have Saeed Shuar, who was with me from the beginning.
And Mahmoud is our newest contributor,
who's very active in porting fish and getting it running
well on WSL.
So I'm really grateful for all their contributions.
It's actually pretty easy to get started contributing
to the fish shell.
A lot of contributors just have a command they want to run,
and tab completions aren't working for it properly.
So they can just add a tab completion.
And that's a very easy way to get started
or improving the documentation.
So if you'd like to contribute, if you're a fish shell user,
it's very easy to get started contributing to the shell.
Yeah, I think especially in this case.
That's more so than what is even, I think, common with
an open source project like this.
There's some stuff in there that is really
user-facing, like documentation that anybody
can participate in.
Well, Peter, thanks so much for coming on the show.
Thanks to you and the entire team
for working on one of my absolute favorite pieces
of open source software.
All right, thanks, Chris.
Thanks, Wes.
And thank you to Peter for coming and chatting with us
about that.
Peter was great, real friendly.
And it's an interesting tale, because as we
talked about in that interview, at around 2012,
Phish development had stagnated.
It's very obvious if you go look at the commit analysis
over on GitHub.
And Peter stepped in and sort of reinvigorated the project.
And they've just had a recent release.
He wasn't the one who released it, right?
There's enough other people in the project
that there are several main contributing developers.
So it seems healthy.
It's probably not for some expert users.
It might not even be a forever shell
if you're going to go off and become like a terminal expert.
But I think it's a shell that thinks
about what the interaction between a user and a computer
should be in a terminal environment.
They're exploring interesting grounds.
He almost made me switch to it.
He almost convinced me, but almost.
Well, you do need to be the curmudgeon, Joe.
What would we do without you?
OK, so let's move on to another area
I've been excited about recently.
That's gaming on Linux, and it's just some of my friends
who are not Linux desktop enthusiasts.
They might not even listen to the show.
But they make a lot of comments about how great Proton is,
how they can use their Linux desktops to game.
And I've certainly experienced that.
I've been advocating for it more.
But while we were getting excited about that,
we talked a lot about it here on Jupiter Broadcasting
over our various holiday and year-end review episodes.
There was a discussion right around the new year
over on Twitter that I missed until now.
It started with a tweet from Ben Golos, who
works over at Uber Entertainment,
actually local here over in Kirkland, Washington.
They make Planetary Annihilation.
And while the discussion is basically
they shipped Planetary Annihilation on Windows, Mac,
and Linux, Linux users were actually
a big vocal part of the Kickstarter for the project.
But in the end, they accounted for less than 0.1%
of the sales and greater than 20%
of auto-reported crashes and support tickets.
Most of that graphics driver-related, I guess.
His opinion would totally skip Linux.
So does this mean, is this a fundamental problem?
Is there something we're missing here?
Or does it just mean that much like Electron apps,
we're going to get games, we just won't get them natively?
I think that that is the reality of the situation.
Because if you look at this Twitter thread,
it's easy to kind of come down on the side of, well,
it's just not worth supporting Linux.
But then people have chipped in on the Hacker News
thread about this that surfaced this week,
saying that, well, they did it wrong.
They didn't go into it with their eyes fully open.
They kind of thought it would be easy to port it to Linux.
And the reality dawned on them that it was actually
quite hard.
And I think in that Twitter thread,
there's a very, very depressing and telling phrase
that he says, adding Linux support
ended up likely costing Uber hundreds of thousands
of dollars for a few hundred dollars in sales.
And that just doesn't look good for anyone
trying to port any software to Linux, never mind just games.
Yeah, that is true.
And that's part of the problem is,
even if we have a more successful game development
story in 2019, you might not know about it.
You might not know the right choices.
You might not.
That's hard to find.
There is no universal development kit to target.
You can be an expert at game development
and still not be able to develop for our platform
and have it be a success.
And that's concerning.
When the whole Proton thing broke as a story,
there was kind of two ways to look at it.
One is that, OK, well, this means
that no one will bother developing natively for Linux
anymore.
But the other way to look at it was, well,
it will enable a lot of Linux users to use these games,
play these games that they otherwise couldn't before.
And it will potentially make people
on the fence about switching to Linux make that switch.
And then where the users are, the development goes.
I think that realistically, it's probably the former rather
than the latter, though, isn't it?
That you're much more likely to get just Windows games working
and tested with Proton, and that's good enough.
Why bother doing a whole native port
when you can just use this off-the-shelf solution
from Valve?
Yep, that is true.
And then even more so, we're still,
even with it working really well just out of Valve,
you're still going to buy a computer that
probably has Windows on it.
And if you're a gamer but not a Linux fan,
there's not going to be a big reason that you should ever
switch to Linux.
Now, you might have a better switching story
if you eventually happen to listen to this program, say.
But we're just still same old, same old, I guess.
I don't know, though, Wes.
My Evo 970 didn't come with Windows on it.
It came completely blank, and I had to install whatever
I wanted onto it.
And that's the reality for most gamers who build their PC.
I mean, most enthusiasts who want to go full RGB and all
of that, they build their machines.
So this argument of that they come with Windows,
I don't think is necessarily true.
Obviously, laptops come with Windows.
But if you're doing a self-build,
and no self-respecting gamer would use a pre-built desktop,
surely.
Yeah, sure, sure.
Yeah, of course.
But they just consider Windows to be part of that build.
No, that's a very interesting point.
Like, there's this cultural element.
So if we can maybe change some of that,
then if you're already an enthusiast,
you're willing to do research, you're
willing to maybe tweak or tune, Linux does
have a better story there now.
Yeah, but you only have to look at big gaming and PC YouTube
channels, like Linus Tech Tips.
And he had this video, Linux gaming
doesn't suck, because the assumption was
that it would just suck.
And then he actually tried some Linux games
and said, actually, they're all right.
And that was a surprise.
And that's that culture, isn't it,
that gaming really is all about Windows.
That's just been the assumption for 20-plus years,
that if you want to play games on a PC,
you're using Windows to do that.
Yeah, I suppose you're right.
And unfortunately, there are still many workflows
that you might need a Windows or another proprietary operating
system to get your work done.
And one of those, for a long time and still remains one,
is the Adobe platform, their whole creative suite
of applications.
I know, I mean, I've used them over the years.
I don't have them now.
But they're obviously the standard.
And Linux users, for a long time,
have been wondering, do we have even a shot of ever getting
these applications?
You've done some hard work and found out a little bit more
information, though, Joe.
Yeah, I've been chatting with Jason Evangelo, who
has become well-known in the last few months,
I suppose the back half of last year, for writing for Forbes.
He kind of switched from writing about gaming and hardware
to writing about Linux as he got into Linux.
And it's just become really, really popular.
Everyone seems to be following on Twitter
and reading his articles.
And more importantly, it seems that he
has driven a lot of people into our community, people
who are into gaming or kind of on the fence or whatever.
He is really doing good stuff for the whole Linux community,
as far as I can see.
And he's very pragmatic.
I know, OK, some people are going to say,
oh, we don't want that proprietary software.
Why don't you just use Kdenlive or whatever or GIMP or Krita?
But the reality is that if we are
going to grow the Linux user base,
we're going to need some of these huge proprietary
commercial bits of software, like Creative Cloud.
And he is very much of that belief.
He's very much a pragmatist.
We need both, right?
We should have good open source technology,
but we also need to use what the market's using.
Well, in an ideal world, we wouldn't
need any proprietary software at all.
But it's a vicious circle of the proprietary software
isn't there so the users don't come to the platform,
and then the developers don't develop open source software
for them to use.
So I think it's hard for me to say
that I want this proprietary software to come to Linux,
because I don't think I would use very much of it if it did.
But I think that an awful lot of people would,
and that would be better overall for Linux,
because this is all additional stuff.
It's like the Proton stuff.
It's like Steam.
It's like the graphics drivers.
You don't have to use any of that stuff.
You can run Debian or Triskel or whatever
and just run completely free software.
That's a good point.
It's all additions to Linux and free software.
So I see it as a good thing.
But yeah, he had a chance to talk
to some people from Adobe, some quite important people
actually.
And so I thought that I would catch up with him
and get him on the show and speak
to him about how that went.
And so should we have a listen to that?
Let's do it.
Thanks a lot for coming on the show, Jason.
Yeah, you bet.
Happy to be here.
Yeah, we've been wanting to get you on Linux
unplugged for a long time.
And finally, the timings have worked out.
Yeah, and before, when you asked me the first time around,
I was really shy.
And now I'm not.
So just a little bit of background.
You've been writing for Forbes for quite a while now.
And in the relatively recent past,
you started writing about Linux.
And those articles have really taken off.
And you've used your Twitter following as well
to kind of help that.
And it's just gone a bit crazy, hasn't it?
It has, in a very unexpected way.
When you spend like six years on a major platform talking
about AMD and NVIDIA and Intel and reviewing big products
and things like that or just breaking news,
and then six years later, you kind of
stumble into Linux for the first time in like 13 years
and fall in love with it.
And at that point, I gradually decided, you know,
I'm loving this.
I'm loving the discovery and really loving
just writing about it and being so engaged on Twitter
and Facebook with people who are enjoying the content.
It's been a repeatable thing where I will take,
say I'm writing two articles in one day.
And I'll say, OK, hey, Introware is launching their Aries
all in one desktop PC with Ubuntu and Ubuntu Mate, right?
And then the same day, I'll write something about NVIDIA.
And the Introware article will get more traffic.
And it blows me away every single time.
But it is becoming a consistent thing.
And I think that there's a really, at least to me,
a surprisingly large audience who
is hungry for that content in kind
of a, I guess, non-technical, more conversational manner,
if that makes sense.
Yeah, well, it seems to be working for you.
I've seen you post stats about the Linux articles being
the most popular of all time, almost.
Yeah, towards the end of the year, I wrote about Deepin.
And it was just kind of an opinion piece,
talking about why I think that it's
a more beautiful desktop experience than Windows
and Mac OS.
And within a few weeks, that climbed to the number three
most viewed article since 2012.
We're talking about beating stuff like Pokemon Go
when it launched and things like that.
I mean, yeah, incredible, just incredible.
Months later, I'm just still blown away.
And it's been a blast.
But just before Christmas, there was a bit of a blow up
on Twitter about Adobe and Premiere.
And people requesting that for Linux.
And you managed to send so much traffic their way
that they shut down the topic.
So what was all that about?
They did.
I think that I actually heard about it
through a couple of my Twitter followers
and also Michael at Foronix.
And I want to make sure people understand he's
the one who wrote it first, right?
I just kind of elevated it and gave it a bit more exposure.
But I do want to make sure that people realize
he kind of broke that news.
But anyway, I wrote an article saying, hey,
Adobe wants your feedback on bringing Premiere Pro to Linux.
And the tweet blew up.
The article blew up.
And I think within three or four days,
they had somewhere north of 6,000 upvotes for that.
And a lot of really healthy discussion
in there between both the Linux community and a lot
of the Adobe staff, like I think it was Patrick Palmer, who
does, he's their senior product manager
for professional video editing for Creative Cloud.
And at some point, someone alerted me to the fact
that it was just gone.
They're like, I'm trying to click the link in your article.
It's just not there.
It's nowhere.
It's gone.
And Adobe Help, actually, got in touch with me.
And they said that it had received so much,
like a surge in upvotes, that it had triggered their spam
filters, and they had taken it down.
They just had no idea that it would be so popular.
So that got resolved.
And yeah, that got resolved soon.
And that was good.
And then people kept on voting.
So after that, sometime after that,
Adobe's Help account on Twitter actually reached out to me.
And they were like, hey, Bill Roberts and Patrick Palmer
would love to just chat with you about your point of view
as someone in the Linux community
looking at the possibility of Adobe products being
ported over to Linux.
And I said, great, let's do it.
And so yeah, we got on the phone like four or five days later,
and we had a really great chat.
But before you had this chat with them,
they did officially respond and say something along the lines
of, we take this interest very seriously,
but don't get your hopes up.
There's a lot of fragmentation with Linux,
and it's not just supporting one platform.
It means supporting loads of different ones
and basically saying, thanks for the interest,
but don't hold your breath.
Yeah, and I think that that discouraged a lot of people.
But in a way, Joe, I kind of appreciate them
for not getting people's hopes up.
Although through the course of the chat we had,
it became apparent to me that what matters right now
is that this is a possibility.
And this is what they told them.
This is what Bill and Patrick said.
They're like, this is a possibility now.
They weren't entertaining this idea before.
Oh, wow, so it really has made a difference then.
It really has.
And I don't know if it was, let's be honest,
it probably wasn't the user voice post and feedback
that prompted that, but it may have helped, right?
It may have definitely changed or influenced maybe
their timeline or brought a few other important members
of the team over to the Linux side of the fence.
I don't know, but what matters is
that they are looking at this as something that's possible now.
And when they said that there was this fragmentation problem,
everyone replied to them saying, snaps, flat packs,
snaps, flat packs.
Is that something that they weren't aware of or what?
They're very aware of it.
And I kind of brought that up.
I said, hey, you can use stuff like Vulkan.
You can focus maybe on just one distro
and don't spread yourself too thin.
But they're completely aware of all
of the technical environments surrounding
what it would take to port Premiere Pro over to Linux.
But Patrick's problem is that there's
a major difference between developing and testing, right?
Because sure, they could develop it for Ubuntu.
But it will get used on other distributions, right?
And there's all these combinations
of distro and CPU and GPU and everything else.
And the cost of testing those and scaling that up
is what concerns them.
But beyond that, they want the product
on everything it could possibly be used on, right?
And they want to come out of the gate flawlessly.
Even though they're very aware, and they told me this,
they're very aware that they could have hazardly released
something on one distribution, and maybe everything
doesn't work.
And they know the community will make it work, right?
But that's not how they want to do it.
They want to come out of the gate flawlessly.
And one other aspect of this is that the conversation isn't
just about developing Premiere Pro.
And I think that a lot of people in the Linux community
think, why not just do that, right?
That can't take a lot of resources.
It can't take a lot of time.
But Adobe's issue is that their users
are tapping into their entire ecosystem, right?
They have a workflow that normally extends
beyond just a single Adobe app.
Well, yeah, people want the whole Creative Cloud, don't they?
Exactly.
And so that is bringing the entire Creative Cloud
is what seemed to me to be a monumental effort.
And they just don't want their products
coming onto Linux handicapped and kind of robbing users
of what they've come to expect from their products, right?
And another wrinkle to this is that, obviously, they
want to achieve some levels of parity
when we're talking about performance, right?
They want to have parity between Mac OS and Windows
and Linux.
But that's only half the story.
If all the third-party libraries don't support the format,
having that great performance is kind of useless.
So it really is that entire ecosystem
that has to start coming together.
Yeah, suddenly this becomes quite a large endeavor,
sort of almost too much to take on.
Yeah, but yes.
I mean, yes.
And they did have a lot of interesting things
to say about enterprise.
I mean, not in a lot of detail, but that's
where they would focus first.
I will tell you that.
That's where Adobe would focus first is the enterprise.
But here's what's really interesting.
The path to having these Adobe products on Linux,
where do you think that would happen?
Would it be just a straight port,
or is there something actually coming that would kind of get
their foot in the door?
What do you mean by something coming?
I mean, I would assume that the path to getting it on Linux
would be snaps, essentially, or possibly Flatpak.
Yeah, and I don't have an argument for or against that.
But I think when we're talking about the architecture
and the development and just the knowledge
that their engineers and developers need,
it's actually Premiere Rush.
All right.
So Premiere Rush, as probably you guys know,
is kind of a mobile lite version of Premiere Pro.
And it's already on desktop.
It's already on iOS.
But it was strongly hinted to me that once it
comes to Android this year, that is their kind of first step.
Oh, right.
Interesting.
And I wish I could tell you more,
but that's really all that I know.
I can just tell you that the way that they were explaining it
to me and the kind of the attitude
that they were portraying and the enthusiasm,
don't take this as the gospel truth or anything.
But I really feel like once this hits Android,
it's something that they can legitimately start to explore.
Did the market share issue come up at all?
That must be in their mind.
It really didn't.
And I don't know if that's just because they
were trying to be polite.
And I also didn't bring it up.
I was really encouraged walking away from that conversation
because they don't view bringing their products to Linux,
they don't see it as a technical barrier.
They know how to get there.
And I think the larger issue for them
is having some reassurance that all of the effort
that they invest into it, into not just Premier Pro,
but the entire Creative Cloud suite,
into the testing and scaling for every distribution
and making sure that the entire ecosystem is working as it
should on other major operating systems,
it's encouraging to me that they know all that
and that they are, in the process of developing
Premier Rush for Android, kind of hinting at the fact
that it helps them with potential Linux development.
I was really happy walking away from that
because it wasn't a lot of the Linux community, at least
who's that has interacted with me about this whole Adobe
thing, they feel like Adobe is just giving them lip service.
Like, we're going to get your hopes up
and we'll do this poll and we'll make you think it's possible
and then we're just going to slam the door shut in your face.
And that may have been true in the past,
but I genuinely don't believe that's true now.
And I think it's something they're at least open to
and it's just a matter of resources and time.
And market share probably, let's be honest.
Yeah, yeah.
Well, it'll be very interesting to see what happens with it,
whether or not it is just lip service,
but hopefully you'll be clued into what's happening
and you can maybe come back and let us know.
But it's been great to have you on
and very much look forward to speaking to you again sometime.
Yeah, absolutely.
Thanks, Joe.
Yes, thank you, Mr. Joe.
That was a great contribution and a great interview
with Jason.
You know, he's been doing a lot of great writing these days
and he's definitely a friend of the network.
Yeah, could you tell that I'd only just woken up
and it was still daylight?
You know, I wasn't going to bring that up and no,
actually, I don't think I could tell, so good job.
It was a good chat and yeah, he's a very interesting guy.
And yeah, I definitely recommend checking out his articles
on Forbes.
He's always got a positive spin on everything.
That is actually what I was,
I have a question for you about it,
but that was going to be my takeaway from that interview
is all right, well, there's nothing concrete there.
Nothing's changed really,
but it's also not a bad thing, you know?
I mean, obviously Adobe runs a massive cloud platform.
They clearly deploy a lot of Linux servers
and have a wide array of technical experts at their employees.
So of course they know about Linux,
but it's nice to hear that there's not this like horrible bias
or rejection or just, you know,
like developers being tired of hearing this like
very vocal minority of people clamor for support.
So it seems like there's a positive relationship
we can actually build on here
and it might not be anything soon,
but there are professionals who use Linux.
Yeah, it does feel like it's going to be medium term
rather than short term,
but they are clued into the fact
that Linux users do want to use their software,
do want to pay them money.
And as Windows and Mac OS seems to get worse and worse,
and Linux seems to get better and better,
then you never know,
maybe we'll get that critical mass of users
and maybe they will pull the trigger on it.
Right, and I mean,
they already have to adapt to a changing marketplace.
Well, you know, Windows and Mac might still dominate
the creative design markets.
And mobile is huge, right?
It's eating the desktop market share all the time.
So they've already worked on some stuff for that platform.
So I've talked to a couple of people inside Adobe as well.
And they're actually, that platform is surprisingly modular.
They have a lot of high level code and infrastructure
to sort of orchestrate on top.
So it was interesting to hear Jason talk about
that the technicals aren't the problem
and that it comes down to something like, you know,
not wanting to cripple the product,
wanting to have a good reputation.
That's a very business sort of concern
that I think sometimes we in the open source world
forget about.
Yeah, it is all about dollars and cents
at the end of the day, isn't it?
Right, I mean, I guess it has to be
because that's what keeps the whole thing going.
And clearly there's a lot of people
who use and rely on their products.
So I can't blame them.
Time will tell.
Maybe go try some free and open source software
and submit bug reports
and see if you can make them a little bit better.
Yep.
All right, do you want to hear about my toy then?
Yes, I do.
We teased it a little bit at the top of the show.
You were very gracious despite being woken up early
by this delivery of something you've been expecting
for quite some time, I believe.
What did you get?
Yeah, I've been wanting this for quite some time
and finally sorted it out.
This is an Entraware Apollo laptop.
Now I have to say quickly, full disclosure,
Entraware do sponsor my other show,
my independent show, Late Night Linux,
but this will be completely unbiased.
I can't do a full review
because I've only had it for a matter of hours
and I did go back to sleep briefly today as well.
So.
You deserve to, you deserve to.
Yeah, I haven't had much time with it.
So it's really just first impressions.
But I'm pretty pleased with it so far.
Turning it on straight away,
the screen was just super bright, super sharp.
And yeah, really, really impressed.
This is their 14 inch Ultrabook
that I'm talking about here called Apollo.
Right, okay, so Chris had an Apollo as well
and I've used that somewhat extensively,
but is this right, that was a 13 inch screen size,
but the form factor hasn't actually changed?
Yeah, it's the same chassis, but smaller bezels.
Oh, I like it.
Yeah, so they've squeezed that 14 inch screen into it
and that gives you that extra little bit of real estate.
It's 1080p, we're not talking about crazy 4K or anything.
And on a 14 inch screen,
do you really need any more than 1080p? I certainly don't.
No, no, I mean, I think you probably need a bigger screen
if you're gonna really leverage those resolutions,
but some people like it.
And you've seen, even on some of the low end Mac products,
some pretty high resolutions.
Yeah, well, there are some bad sides to this.
It's got USB-C, but that is not Thunderbolt.
So there's no external graphics to be had.
But then again, I'm not gonna go buy
an external enclosure and a graphics card.
If I want a serious graphics card,
I'll put it in my desktop machine.
Thank you very much.
This is supposed to be light and portable.
Was that a dig at Mr. Martin Wimpress
on a day that he's not here?
Well, I just don't really understand
why you would use that.
If you're tethered to a desk and an external screen anyway,
why not just use a proper desktop machine?
I don't understand all this Thunderbolt business,
but I know some people are into it.
And storage as well, obviously,
is gonna be faster over Thunderbolt.
But it has got some full size old school USB,
although they are 3.1, so that's nice.
And it's got DisplayPort and full size HDMI
and an SD card slot and gigabit ethernet.
You don't often get that these days on an ultrabook.
And that's important when you have
a lot of WAV files to upload.
Yeah, exactly.
And it's also got a headphone jack,
which you can't really take for granted these days,
can you?
No, you have to check.
It's a little awkward.
It's sort of like trying to be like, what's going on here?
You're holding it up to the light.
Oh yeah, there it is.
Okay, so there's some questions in the IRC
I just have to ask.
As someone who has used one but never bought one,
is this just a rebadged Clevo?
What's going on with Entryware?
Well, Clevo is the ODM,
but there are some less scrupulous vendors,
resellers, you might say, who just buy Clevo stuff
and then just sell it.
Whereas what Entryware does is they very carefully
select the parts.
It's a Clevo chassis,
but they make sure that the parts
that they're putting inside this thing
actually are going to work with Linux properly.
And they also make sure that the firmware
and everything's working.
And that's why there are some vendors
who punt out the new Clevo machines quite quickly
without fully testing this firmware stuff.
Whereas Entryware sometimes wait a little bit
and make sure that everything is going to work.
And that was my first impression of it with Ubuntu.
Okay, I don't really like GNOME.
I think it's fair to say, but it worked perfectly.
Everything worked as you should.
It was a very good experience.
It was very much a stock Ubuntu installation.
It wasn't long before I put Xubuntu on it, obviously.
But from what I saw of the Ubuntu installation,
it was very stock and everything just worked perfectly.
And with Xubuntu as well, so far, so good.
I've not come into any problems at all.
See, that's a really good point
because there aren't that many ODMs in the world.
And so really whatever you buy,
you're just hoping that the person who assembled it
did a good job of choosing equivalent parts.
So if you've got a little bit of a guarantee
that, oh, well, the people who sold me this
are at least aware that Linux is a thing.
And in this case, actually optimize for it.
Well, it might not be the fanciest.
It might not have the smallest bezels,
but it'll run Ubuntu.
Yeah, someone's asking about a suspend in the IRC.
I've never suspended a laptop.
Once you've got an NVMe drive in there,
it boots so quickly that there's just no need to suspend it.
Oh, really?
See, that's funny.
I feel like I used to have that.
That was my workflow for a long time,
but now I just close my laptop lid and forget about it.
I don't know.
I just like to have it either on or off.
I mean, it's not secure.
It's not, you know, that's totally reasonable.
And it's nice to actually reboot your machine,
that your update didn't work anything, all of those things.
I'm just surprised.
I'm so used to, I just don't even,
it goes probably weeks without rebooting.
Yeah, I don't know.
I reboot my machines all the time
because now that storage is so fast,
this thing, you turn it on,
and before you've even taken a sip of your drink,
it's booted.
So, you know, that's the same with all modern machines
with decent storage in them.
So for me, suspend's just not really a thing anymore.
The nice part too is if you don't reboot
all the time, then you forget what you have to do
when you reboot, maybe adding SSH keys
or entering permissions or re-logging into something.
And of course, the moment that you have rebooted
is probably the time that you really didn't want to.
Yeah, exactly.
One nice thing about this is it's got a 2.5 bay as well.
So if you want to put spinning rust in it
or a larger SATA SSD, you can do that.
I'm not going to do that, I don't think.
I've got a 500 gig Samsung SSD NVME in there,
which I think will do me for now.
But it's good to know that I've got that option
if I want to.
Yeah, right.
That's something that you always want to look for is,
is this serviceable?
Will it have a lifetime?
Can I upgrade it when I want and need to?
Now, most users might not, but in our audience, well,
that's a great way to get more life out of your machine.
Yeah, well, as for upgrading it, it's really, really easy.
It's like 10 screws or something.
And then the bottom just comes off
and it supports up to 32 gigs of RAM, which is really nice.
So you can get all the VMs essentially running on it.
It's easy to take that for granted.
I mean, I've owned several laptops
where you have to take the whole main board out before you can
even get to the hard drive.
So the fact that it's 10 screws and, you know,
Bob's Joggle, great.
Yeah, you can upgrade both storage and the RAM.
It's very user serviceable.
And you could even swap out the fan and stuff
if you wanted to, you know, down the line
if anything goes wrong with that.
So yeah, pretty impressed with it so far.
But yeah, I can't really say that I've
lived with it long enough, so maybe I'll
have to give you an update at some point.
Is this going to become a distro review machine or just
a mobile workstation for you?
No, very much not.
It means that my old, old laptop is
going to become the full-time distro review machine.
This is very much production.
I've got my main desktop for main production,
but this is my take to Linux Fest Northwest machine.
And so it'll be probably Zubon 2, you said?
Yeah, yeah, Zubon 2.
No, no deviance there.
All right, that makes perfect sense.
Thank you for that mini preview of the intro.
I'm sure we're going to find out a lot more as you actually
use this machine.
I'll be curious to give it a hands-on look when
I get to see you at Linux Fest Northwest.
That's a great chance.
We should just talk about Linux Fest Northwest.
It's their 20th anniversary this year.
And if you've never gone before, it's a great time to go.
We've got links to all of that and everything
we talked about today, linuxunplugged.com
slash 283.
Now, Joe, I'm just ever so grateful that you came and hung
out here with us today.
Where can the audience go to find more of you?
Well, Linux Action News is a good one,
linuxactionnews.com and error.show.
If you want to listen to User Error,
that's me and Popey and Dan from elementary talking
about life, the universe, and everything,
and a bit of Linux chucked in there.
So yeah, check those two out.
And also, lateknightlinux.com.
If you want to hear me effing and blinding,
effing and a jeffing.
And you almost always do.
Thank you to our wonderful Mumble Room, as always.
And of course, the IRC and everyone else
in the Jupyter Broadcasting community,
linuxunplugged.com slash contact if you
want to send us some of your favorite things,
either interesting finds, questions, or just
your comments and feedback.
We love it all.
For all the other Jupyter Broadcasting shows,
go to JupyterBroadcasting.com.
Thank you so much for joining us.
We're going to get out of here, but don't worry.
There's lots of good stuff to look forward to.
I'm always excited about the next User Error release.
Just let me say, Joe.
So good job.
Thank you for joining us.
And I think we're going to see you next Tuesday.
Come on, Wes.
You can do better than that.
Next Tuesday.
Yeah, you're right.
Tuesday!
Hey!
So, I just got my father an iPad, mostly so he could read some, like, journalism, you
know, various apps from bigger newspapers than his tiny, dying hometown newspaper.
And he used, like, a Windows, oh, I don't know, was it an XP machine?
I don't know, whatever his, before he retired, right?
And so he has this very particular interface with computers, and I've got, I've got my
mom on Linux now, and part of me wonders, he might just actually take to the command
line, because it's sort of a conversation, and less of an exploration visually.
And so, like, but Bash is kind of arcane, and if you know what you're doing with Bash
or CSH or really any shell, you can obviously configure most of the stuff that you find.
But with Phish, it just, like, it really is friendly, and that friendly only goes so far,
and once you're an expert, you probably don't care about friendly, but for new users, like,
if you first got a Phish shell and then you learned Bash, there's probably a lot of Bash
things that you would think were so silly.
Don't you find that Phish kind of does things by itself too much, though?
At least with Bash, you type stuff in, you press enter, okay, you've got tab completion,
but if you don't know about that, you're not going to get it, whereas you start typing
and then just things happen, and you're like, it's a bit scary for people who don't know
what they're doing.
Okay, I can see that.
You probably do need, in, like, a basic introduction, you probably do need a little bit about that.
Like, you probably have to touch on that feature.
It feels like, to me, you have to have used Bash and have some vague understanding of
how it works before you could use Phish.
I guess I could see that with the very, very present autocomplete, I could see that being
confusing.
Yeah.
But I wonder if you started off from a blank shell, like, with no autocomplete history,
and if it would make more sense that it would, like, if it was only commands that they had
typed that got suggested to them again, if that would be better.
I don't know.
It'd be an interesting experience in user experience research.
Yeah.
I can't see many companies putting money into that, though, unfortunately.
No, no, that's exactly what I was thinking.
No one's, no one's wondering that.

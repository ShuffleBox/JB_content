Oh, there he is.
Good.
I thought maybe you had a power outage or something.
You know?
Something crazy.
No, I don't know.
Internet outage maybe blipped there?
I'm back now.
I'm the one with the bad internet.
Jeez.
Did you get a good silence capture on your side?
Way too long.
I didn't realize what was happening,
so I just kept going for, like,
Isn't there a whole new friend?
Ha, ha, ha.
Hello, friends, and welcome back to your weekly Linux talk
show.
My name is Chris.
My name is Wes.
And my name is Brent.
Hello, gentlemen.
Good to see you again.
It is our weekly get together, and this episode
is brought to you by Cloud Guru, the leader in learning
for Cloud Linux and other modern tech skills.
They have hundreds of courses and thousands
of hands-on labs.
Get certified, get hired, get learning at acloudguru.com.
But coming up on the show today, you voted, and we're doing it.
OpenSUSE Tumbleweed will be landing on our new garage
server soon.
But we have a big twist this week.
And I will tell you, but it's good news.
It's not bad.
It is good news.
I'll tell you more about that in a little bit.
But this week's all about preparing our minds and bodies
for a trip into SUSE land.
So this week, we are preparing for that journey
and figuring out what needs to be on our route,
sharing our current test setups that we've built,
what we've learned, what we still need to figure out,
and who of us is still actually running Tumbleweed
as we do this episode.
But first, we got to say hello to our virtual log.
Time appropriate greetings, Mumble Room.
Hello, hello.
Hello.
Hello.
Hello.
Hello.
Hello, Wes and Chris.
Hello.
Something tells me we'll need your help today, Mumble Room.
Yeah.
Yeah, it's going to be one of those.
So while we're talking about the SUSE,
let's talk about the 2021 Tuxi nominations,
because yeah, they're open again.
And we need you to go vote for the best free software
project, the real standout distro of the year,
your text editor that you just loved this year,
a new project that came along that really blew you away,
a strong server distro, and a lot more.
It's all in a probably three to four minute survey
that we've built on a Nextcloud box that you can go take.
And right now, I'm a little suspicious, Wes.
Actually, let's do a little aside here.
Wes.
The cone of science.
Wash your hands on the cone, man.
I know.
I know.
I had to make room for Brent.
Thanks, guys.
So we have a problem, I think.
And I don't really know if it's genuinely a problem
or what we should do.
And I don't want the audience to have doubt
in the sanctity of the Tuxis.
But it seems very strange to me how far ahead
SUSE is polling in the various areas where
SUSE is an option right now.
Oh, are you suggesting some sort of foul play?
Lizard foul play, perhaps?
I mean, I was suspicious with the survey around the server.
And then I got word that it was shared around internally.
And I'm just wondering.
We've got a lot of great answers.
But whenever SUSE is an option, it's
number one in every category.
It could just be that there's some sort of SUSE fever
sweeping the audience.
Here's what we'll do.
We don't want to tell the audience, obviously.
Don't want to spoil anything.
We don't want to concern them.
We want them to trust the sanctity of the Tuxis.
So what I'm thinking we do is we'll just
compel them to go vote by offering free cookies
at the voting booths.
And then hopefully we just get more numbers
and just sort of wash it all out.
Yeah.
Hmm.
Yeah.
That seems pretty doable.
Brent, you better get bacon, buddy.
OK.
Yeah, no kidding.
The cone of silence.
So yeah, the 2021 Tuxi nominations are open.
And at the various polling booths right now,
we are handing out free cookies for no other reason
than we just want to get as many people out.
Oh, it seems we've had 407 responses.
So let's see if we can't double that by next episode.
It means everybody's going to have to get out and go vote.
You can find a link in our show notes
to participate or go to tuxis.party.
And also, our first use of Nextcloud for something
like this.
All right, all right.
There's going to be some more zoos later on in the show.
Let's do some community news first.
Steam belt activated.
So we may, by this time next year,
be talking about how SteamOS is the next up-and-coming Linux
desktop environment.
Now, hear me out, hear me out.
So I got some bad news.
We learned this week that the deck
was going to be delayed until February 2021.
So a two-month delay.
But in that same batch of news, we also
learned that SteamOS, which is Arch-based,
is going to use an immutable file system.
Will SteamOS have a read-only immutable OS file system?
Yes, so by default, the OS updates
will be distributed as a whole OS image.
But you can enter a developer mode,
which will let you modify the file system
and install packages like a normal distribution.
So this is sort of like Silverblue or KinoKnight
or Ubuntu Core, only it's a full modern plasma
Wayland-based desktop produced by Valve that's
going to have a safe, reversible update mechanism thanks
to this immutable file system.
And then support for Flatpaks to add applications
without even having to turn those protections off.
Isn't this what we've been asking for for a very long time,
is some large vendor to use plasma
and build a professional-grade workstation?
They've taken the ideal Arch workstation
and brought it to the next level by adding an immutable file
system, in my opinion.
I don't know that they'd say they're
targeting the workstation.
But yeah, I see where you're going with this.
I mean, we also kind of suspected
they might have to do this, whether it
was their own repository or, I guess,
as it seems, some kind of image-based solution.
They're going to need some kind of stability layer on top of Arch.
And I think, what, you're just hoping, then,
that the way they do it will be, in the usual way of open source,
a way that, say, a Garuda user over here could take advantage of?
Well, it's not my idea.
It's actually Linus Torvalds' idea.
He said it years ago.
He said, it's going to take a vendor like Valve,
literally what he said.
It's going to take a vendor like Valve
to product up the Linux desktop and make
it usable by average users.
And here's what I actually expect would happen.
For people like you and I, we would probably
be using some sort of open community fork of SteamOS
that is packaging it up for a workstation.
It includes the immutable OS and the Arch patches and all of that.
But maybe it doesn't automatically
boot into big picture mode, or whatever they're going to call it.
So it's probably a community fork of the term,
maybe loosely using the term fork, is what I would expect happens.
Do you gentlemen have any guesses on what's under the hood
making all this possible?
Not totally, no.
I'm actually really curious to get my hands on it.
They say they won't release it until after the deck is
released.
So I was hoping they'd release it sooner
so we could start kind of understanding how
the deck works before it ships.
Because I think that would actually,
having a community out there that kind of understands
the underpinnings of that thing may actually
help it be more successful.
But I think Valve's just kind of focused on getting the deck out,
and that's where all efforts are.
And they're not, they don't want to spend the time packaging it
up to distribute it to the community yet.
Yeah, you get it over the wall, and then maybe you clean things up.
I get that.
Minimac, you had an experience with an OS that does this as well.
Well, there is a rather famous phone
OS called Ubuntu Touch that does that too.
So the base system is, in fact, in LXC LXD containers.
So it doesn't allow you to change the system, which
has a really cool thing offer, because it
allows you to switch from stable to experimental and back.
You just change the container, and then you just continue,
and your data is in a separate container.
So that's pretty cool.
Yeah, it gives you a nice escape hatch.
It really does kind of make a workstation a little more bulletproof.
I wonder if they are just going to use OS Tree,
and they do end up just using Flatpaks for application distribution, which
is kind of admittedly how it looks on the surface right now.
That could mean that they're planning to probably offer some,
maybe they could offer some of that stuff outside of SteamOS as well.
And Valve is officially packaging it in these different channels.
A lot of things are going to change for gaming on Linux
after this, because the other part of this
is the games that do publish through Steam
can opt in to take advantage of the Steam Deck Verified program.
And Valve will test how the game performs in Proton
now before the developers have actually even released it.
So while not every game will take advantage of this,
and not every game ships through Steam, a lot more will.
And so that means a hell of a lot more games
are just going to have Linux support one way or another on day one
once the Deck is launched.
Even if you never buy a Deck, it's just great news
for all desktop Linux users.
Yeah, really.
You get that so much, hopefully, so much earlier in the cycle, right?
When you're starting to think about these things,
when you're thinking about the publishing process,
rather than after the fact when a very small little niche of users
maybe start emailing you asking for support.
Yeah, do it before you're all in on using MSHTML
when you could still switch over to a different open web render.
We went into a lot more detail in this week's Linux action news,
and including some of the nuances around things developers
are going to run into when they do try to do this.
It's not as rosy as the initial announcement makes it seem,
but it's not impossible either.
So we have details in there.
OK, so this week I was really disappointed in some behavior
that I saw online by Rocky Linux in a couple of ways.
And I normally wouldn't even talk about this kind of thing on air.
I'd probably just grouse about it to the guys behind the mic and move on.
But December is approaching, and the transition from CentOS Traditional
to Stream, and then into the life of the Traditional product, is soon.
And all of the rel clones are technically very similar.
If they weren't, they'd be failing at their job.
And there's a lot more out there between just Alma and Rocky.
I think probably Oracle has probably the other most famous.
Of course, we all remember ones like Scientific Linux as well.
Today, when I was grabbing one more ISO before the show,
I wanted to grab the transactional OpenSUSE ISO.
I was lazy, and I just went to Google, and I just searched OpenSUSE download.
And this is really gross to me.
What I got were a bunch of paid links by Greg's company for Rocky Linux.
In my opinion, clickjacking OpenSUSE users,
trying to redirect them to Rocky Linux.
And it just feels really gross, because they're not taking ads out
to try to grab clicks from SUSE Enterprise Linux.
They're trying to go after the free community OpenSUSE.
And that just seems out of bounds to me.
And I would hope that a distribution that's
going to have the prominence and position in the community
that Rocky might have one day would understand
how awful and demotivating that is to people behind the project.
And I know for a fact it is.
How do you think the people behind these projects feel when Greg's company,
so that way Rocky doesn't do it directly, right, or maybe they can't,
when Greg's company, CICQ or whatever the hell it is,
goes out there and buys this stuff and clickjacks from OpenSUSE?
Now, probably minimal impact, let's be honest, but it doesn't look good,
and it's definitely not in the spirit of free software and community.
And, boy, it probably feels bad if it is successful,
if the campaign were successful, which you would think the Rocky folks would
want their campaign to be successful,
you would think they would want their investment to be worthwhile.
It would mean less downloads for OpenSUSE.
What does that mean for the project?
And then what also is just very, very disappointing about this entire thing.
A week or two ago, Rocky Linux held an AMA.
It was fine.
A few things in there I disagreed with, but, you know,
it's their moment to interact with the community.
Today, Alma Linux held an AMA.
And, of course, Greg is in there stirring crap up.
While the Alma folks stayed completely out of the Rocky AMA,
Greg's in there throwing bombs.
And in that AMA, he essentially calls me a liar,
saying that screenshot's from months ago, which is crap.
I do have a screenshot from months ago,
back when they were doing this to Alma.
At the end of July, they did the same thing against Alma.
But that feels a little different.
That's at least competitor to competitor.
I don't think it's a good look, but it feels inbounds.
But the screenshot today of the Rocky Linux ads
when I searched for OpenSUSE were from just hours ago.
Not only do I have the file timestamp on my hard drive,
but I immediately shared it in our team chat.
And I have the timestamp on that from this morning,
because I was getting ready for the show this morning.
And Greg in the AMA says I'm lying about that,
that it's from months ago, that they don't do that anymore.
So either he's completely unaware of what his company does
and what they're doing on behalf of his company
for the distribution that he's now launched, or he's lying.
Either one's not a good look.
And again, I come back to these RHEL clones
are technically identical.
So what makes the difference long term
is the team structure and the people behind the distribution.
That's why this matters right now.
And maybe you've noticed, I've noticed,
Rocky seems to have been late on every RHEL beta
and release compared to Alma.
So maybe, in my opinion, they should
focus less on scamming people into using their distribution
and instead, in my opinion, work more
on their release pipeline and their release timeline.
I just find the whole thing gross.
One of the big questions I have is,
that's only the stuff you noticed.
That's one person noticing one thing.
Where else are they putting ads?
Who else are they trying to steal stuff from?
I don't know that much about the projects,
but the more I learn, it feels a little disappointing.
I want them both to succeed, and they're
doing something a little bit different, but jeez.
I know.
Come on.
I would say, ultimately, I felt like we
had a moment here for a real enterprise community that
included all of these clones.
And the going in the AMA and dropping bombs,
and then later on calling me a liar, why would you do that?
Why would you go in there and call me a liar like that?
It's not from months ago.
And why would I claim it's from this morning
if it wasn't?
The whole thing is extremely disappointing.
And you're coming at me when I've got not only the receipts,
but I've got an audience and a platform, too.
It just doesn't make any sense, and it just seems reactionary,
and it seems crass, and miscalculated
from the very beginning.
Doesn't really address the root of the issue either, right?
OK, even if somehow you were wrong,
you're still doing it in the past.
Have you really addressed that?
Yeah, that's got to be what it was, right?
It's like, drop a bomb here, so that way you're not
paying attention to what was actually going down over here.
I mean, it's hard to say.
This whole thing is unfortunate.
It's just our experiences, so.
You know, one of the very first questions
that I saw in that AMA this morning
when I was waking up and doing the online thing
was, what is the difference between Alma and Rocky?
And that's an excellent question from the audience.
And the Alma team had a great description.
And they said, oh, yeah, we're doing
slightly different things.
Here's what's different about it.
And they were almost celebrating the fact
that they both existed.
And it was really refreshing to see.
And I didn't see any of the updates since then.
But it's really disappointing to hear
which direction that took.
And it's clouding, sort of, Alma's chance
to connect with the community, it sounds like.
Well put.
We'll have a link to that AMA, though,
because there is some really good information
and some good questions answered in there.
Lino.com slash unplugged.
Go there to get $100 in 60-day credit on a new account.
And you go there to support the show.
So it's lino.com slash unplugged.
It's where we've built everything
that we call infrastructure in the last couple of years.
It's how I host everything that needs to run on Linux.
Just for this episode alone, Wes is
going to go into detail about how
he was able to leverage all of the tools
that Linode gives you to do a custom
install of SUSE on Linode.
And I wanted to actually mention this,
because a big usage for us with Linode
is an R&D lab, because the systems are just wicked fast.
They're just wicked fast.
They have brand new MBME storage they're rolling out.
They have 40 gigabit connections coming into the hypervisor.
And then for the distros they support,
they locally mirror the repos.
So when you do an update, the updates
slam down to your rig so fast, it's
faster than your SSH terminal could update the output
of the package manager.
And then when you're pulling anything off the internet,
it's just stupid fast.
And then because they have 11 data centers around the world
to choose from, you can pick something that's close to you.
So I often will pick something here on the West Coast
when we're doing an R&D lab thing,
because even with my Comcast connection,
I just get an incredibly fast, low latency connection
to Linode.
And then if we're doing something that the audience is
going to bang on, I'll generally more centrally deploy it.
It's so great.
And every step along the way, I never
feel like I'm being limited by the tooling.
Like if we got to the point, which we did this week, where
we just wanted to replace the OS and deploy something
that they don't have in the dropdown selection,
we could do it.
And I've done that before for my own mesh VPN system.
And I don't often have to do that.
It seems like maybe about once a year, I get down to the metal.
And every time, I am just so grateful
that Linode doesn't hide that stuff,
doesn't prevent that stuff.
In fact, we follow a guide from Linode on how to do it.
Then on top of that, of course, they've
got the one-click deployment of an entire stack
that you can just get up and get running.
Generally, what they'll do is they'll
have you just fill out a couple of questions
about how you want it set up, like in the case of, say,
like a GitLab server or a Minecraft server
or a lot of these.
You can fill out a couple of fields,
hit Deploy, and you've got a system ready to go.
So you can go that one-click route as well.
You have that full range.
And it works, and it's so fast, and it's so reliable,
and then it's just so straightforward
to put it in production and then know
that you can turn on those Linode backups, and you got it.
And if you ever just need to grow your storage,
like we've had that problem where we're like,
we need more disk.
They've got object storage.
You can easily add more block storage,
and it's all just so fast.
On top of that, they have high-end CPU and high memory
and even GPU rigs, and they're rolling out bare metal as well.
And their VLAN support is slick.
God, it's so cool now when you set up a Linode.
Like, I can join them to the VLANs.
I can have the SSH keys.
I can do all this stuff that just
makes it so quick to get in and get going and start building.
So go try it out and really put that $100 to work.
That's going to really let you try this thing out.
See what we've been saying, linode.com slash unplugged.
Go there to support the show and get yourself $100 in credit
for a new account, linode.com slash unplugged.
All right, well, let's try to find something a little more
positive to talk about.
Chris, we had quite the development over the weekend.
I think we should probably catch the audience up on.
You know, Wes, we have really, it's
cliche for people to say, oh, we have the best audience.
But we really, truly have the best audience.
No comparison.
So we had a listener bring us up another Dell server
this weekend.
And I didn't grab all the specs.
So I will go into it when we actually do the build.
I'll go into the details.
But we got another Dell server loaded up and ready to go.
We have two systems that are honestly probably
nicer than what I would have bought, both of them.
And now we have two of them that have been given to us
by different audience members.
And it just, it's so awesome because, of course, this
means now we can do some backups.
We can do some fun things with all kinds
of different projects.
I mean, the possibilities and the directions
we can take that for the show and the content and ideas
that we're going to have in the lab.
And it's just, it's so awesome.
And so, yeah, we had a great experience this weekend.
While Wes and I were recording Linux Action News,
we took a break and broke lunch with this listener.
And they dropped off the server for us.
And we chatted for a bit and then got back to doing LAN.
And now it's sitting here.
And I'm just looking at it.
I just can't believe it.
We have two of these beautiful big servers.
And we have a lot in store.
That's going to be kicking off really soon.
So today was really all about us getting oriented with OpenSUSE
because we've all taken cracks at it before.
I don't know exactly.
I can't remember if we did Leap or Tumbleweed in the past.
But we really were looking at the desktop of OpenSUSE.
Don't think I'd ever run OpenSUSE on a server properly,
more than for just boot the ISO and check things out
or something.
Yeah, I mean, I'd done SLES a lot back in the day,
the Enterprise product, but never OpenSUSE as a server
and never Tumbleweed as a server.
But that was what the audience voted for, for our new server.
So we wanted to get oriented.
And Wes, you took the route of deploying it on Linode.
But just with one hitch, Linode doesn't
have Tumbleweed as an option.
No, no they don't.
And I don't know, I wanted to go out there this time.
So I thought, when we first started thinking,
we better get prepared for this.
We're not ready to design the layout for these servers
yet, because we're not familiar with the operating system
enough.
So we've been playing with it, and we both
saw that there was this transactional server setup
that you could do.
We didn't try it at the time, but I thought, all right,
this time, this time I'm going to do it.
But yeah, Linode doesn't have Tumbleweed,
let alone the transactional server version of it.
And after playing with Kinoite the other day with Fedora 35,
I was hooked.
I had to try it.
Now, they do have Leap on Linode?
Yeah.
That's probably what you should really do.
Like, if you're going to do this properly,
you're not going to do it the weird west way.
They have an upgrade path where you can go from Leap
to Tumbleweed.
We'll have some instructions linked in the doc
if you want to play it.
But that seemed a little too straightforward to me.
It's boring.
So instead, I decided I'd boot up a Fedora 35 box.
Of course.
Wait, wait, wait, wait, wait, wait, wait, wait, wait.
Why Fedora 35?
My instinct would be, go get a Tumbleweed ISO and boot that.
Why did you go Fedora 35?
Oh, you'll see.
OK, all right.
I got my Fedora 35 going, you know, quick and easy
on Linode is great.
And then I downloaded the Tumbleweed network installer.
They have a little network installer,
and I always love these, right?
Because you're going to get the fresh packages anyway.
Why not just start with the minimal thing that you need?
Mounted that ISO.
And then I used my old friend, Kexec, to get things started.
And that's why I picked Fedora 35,
because I know Fedora ships with Kexec right out of the box.
I just love that, which also, hey, Tumbleweed does too.
So that's great.
I should have known.
I don't even know why I doubt it.
I should have known.
So you Kexec'd from Fedora into Tumbleweed?
Yes, I wasn't really sure how this was going to work.
I did kind of prototype it a little bit in QEMU
on my local machine, and it seemed viable.
What really made this possible, though,
was that Linode has a graphical web console you can use.
So I was able to just pop up an SSH, run Kexec,
and then do sudo systemctl kexec to get things going.
And of course, my connection drops there.
But I can go onto Linode, boot up the graphical console,
watch the darn thing boot, and then I
was greeted by the normal yast graphical installer,
just like I was installing it here locally at my house.
That's great.
I was going to say, I think you probably
could have made it easier and just gone with the ISO,
but that sounds a lot more your style.
And so then do you take over that system,
or are you still just Kexec?
How is that working?
Well, yeah, so now I'm just running the installer kernel
and initramfs, and it kind of has just enough in there
to go onto the internet, DHCP, Linode.
That's the nice part, is it's really just running it
in a data center.
It has the stuff it needs, so it just bootstrapped itself
and presented me with a normal screen of like, hey,
what do you want to install here?
Now, did you go with the transactional system,
or did you go with the traditional server?
Because you have two options now when
you're installing OpenSUSE.
Yeah, I went with the transactional this time.
I thought, why not, right?
Like, the stuff is, it seems like it's eventually
going to be the way in one form or another,
and I want to see the Tumbleweed and the OpenSUSE
take on this.
I will say, I do really like the Yast installer.
It might be my favorite install.
I don't know.
It is a lot.
There's a lot going on there.
But I was impressed that it was willing to go grab
existing SSH keys off the Fedora 35 install.
That was nice, right?
Because Linode has an option.
I just pre-checked the SSH keys some of the JB team members
have put in there.
Didn't have to give those up even though I was overriding
the whole darn server.
Wow.
That's awesome, actually.
You know what I liked about the installer is that summary
at the end, like it says firewall on, SE Linux off,
CPU mitigations on, and they're linked.
So you could just click it and adjust the setting right there.
And I'm like, yeah, you know what?
I don't want my firewall on.
And I don't want CPU mitigations in this VM.
So no, turn them off.
That was great.
It's definitely a lot.
But I think it was a nice balance, too,
in that it felt very intuitive in a way
that I know I harp on this way too much,
but in a way that Anaconda just never has for me.
Poor Anaconda.
Yeah, it felt to me like the interface
was hiding a bunch of super user features
right where you needed them.
They weren't in your face, but if you wanted them,
they're just a click away, which I really appreciate it, too.
Yeah, definitely.
Did you do anything update-wise and see
how the transactional stuff works and snapshots work?
Did you suss that out?
Yes, I did.
OK, so I got it installed, and then it was reboot time.
And at first, I was pretty worried that, dang it,
I shouldn't have gone this route.
It wasn't going to work, because when I rebooted,
I was just met with a blank rescue grub screen.
But I think, actually, this is just a little thing.
I saw some issues around when these similar changes happened
to the grub setup in the Fedora land, I think around Fedora 30.
And it's just something about the way Linode specifically boots
and the grub config it expects.
So I was able to just hit Exit and get to the grub install
that OpenSUSE had set up, and that worked just fine.
So this is probably another reason,
don't do it the way that I did.
Don't think I would have run into this
if I hadn't moved off the inner MFS and the Linode kernel that
are specifically set up to handle the boot process.
But other than that, it's just worked.
I mean, I was, you know, I greeted with the system,
had Kexec already there running, set up ready to go,
which is great, not that I needed it anymore.
And I was like, OK, what do I want to try with this?
What do I normally do on a server?
And of course, one of the first things
we end up doing for JB tests are getting some containers running.
I knew you were going to go the classic just go get Docker
around, so I thought, well, I'm going
to try Podman this time around.
Because I was like, I'm pretty sure OpenSUSE just
has that package.
And I found some docs for getting containers going,
getting rootless containers going,
which is always neat with Podman.
And I wanted to see if Tumbleweed had the Podman working
with some of that Docker Compose socket support
that they added recently.
And of course, the first thing you got to do
is install a darn package.
I will say, getting Docker Compose,
you'll probably touch on this, but it was kind of confusing
in some ways.
But I really like that they have the command not found
helper installed, and that you're prompted by it
if you try to run something that isn't there.
That just need to happen once for me, where it was like, hey,
you don't have that command, but you
can run this to figure out which, you know, run cnf.
And it'll tell you which packages
you can install to get it.
And I've used that so many times already just
in the short time I've been playing with this.
It's great.
It's an interesting setup, because it's
a little unique in some ways, being transactional,
but also Podman instead of Docker.
That's a fun combination.
Did you run into any kind of snags?
So the biggest thing is with the transactional updates,
it works well.
You're going to use the transactional dash update
command.
No surprise there, right?
And they've got a managed page that the dash dash help menu
is pretty normal, and they've got some stuff
you can exec into a snapshot to make
some other customizable changes, or you
can run sort of a command you might expect to say,
transactional update, package, install.
And then it's going to go do all the stuff behind the scenes
to create a new snapshot based on the previous one,
set it all up, trute in there, run zipper inside that,
get your packages installed, rejigger the system
so that on your next boot, that's what you'll boot into.
And that's the one part that I think
is going to be a pretty big learning curve or something
I needed to get used to.
And I'm sure there's lots of tricks, right?
I'm definitely new to this whole setup.
But after each of your transactional updates,
you got to reboot.
And if you don't, or you want to like,
I wasn't sure by default how to stack multiple updates
without reboots in between all of them.
And that I could see getting kind of annoying, at least
for one-off machines.
On a system where you're running some sort of configuration
management or building images, you're not worrying about that.
No big deal at scale.
But for me, continuing to mess up,
it was easy to me to be like, oh, I installed that package,
and then I didn't realize that execing in there
and messing about or installing a separate package
before rebooting could actually overwrite the changes,
or at least make it so that the snapshot, the way
that they inherited from each other, was off.
And what I rebooted into didn't actually have
the commands I was expecting.
Oh, I could totally see making that mistake.
So it sounds like maybe you think
we shouldn't go transactional for our server.
Well, no.
I just think if you do, you just got to kind of be all in.
And maybe it takes some of your initial setup
time or your play time longer.
Or maybe you have a prototyping system that
isn't transactional that you kind of learn on,
so you've got it down.
Because after that, like once I got Docker Compose and Podman
installed, which really was just me learning the system enough
to run the right command and install them both
at the same time or install them and reboot in between,
then it just worked.
System CTL enabled the socket, and I got a Docker Compose
project up and running no problem.
So after that point, it's been a totally fine server.
I wonder if we should use Podman in our deployment then.
That's kind of what I was thinking.
I'd be down for that.
OK, then.
I think we just committed.
Let's try it.
I mean, what's the worst that happens?
We've got to back up.
If we have to abandon ship, we'll abandon ship and fess
up on the air, of course.
But yeah, right?
I mean, it's coming along, and we get fresh Podman
with Tumbleweed, so let's take advantage of it.
Yeah, I wonder if anybody out there
knows of any major problems using Podman on Tumbleweed.
I suppose let us know at linuxunplug.com
slash contact before we do it.
Brett, you had a pretty snappin' time,
and you tried out the Plasma desktop being a Plasma
gentleman yourself.
How did your adventures in the Soos land go?
I think they went fairly well.
I tried to apply the exact same approach
as I did with our Fedora 35 review
that we did a few episodes ago.
So I just stuck to the desktop, because that's
most of what I know.
I let you guys do all the crazy stuff.
And I had all the same thoughts about the installer.
It was kind of, well, everything we've already mentioned.
What was really new to me and what I really wanted to dive
into was the software updates.
Ah, yeah.
The whole reason to run Tumbleweed is for that.
As far as I understand it thus far with the reading
I've been doing and some help from various people
is that ButterFS allows you to do some really nice sort
of snapshotting stuff at boot.
So you can install the rolling.
So as far as I understand, it's a rolling release
that is very well tested, which really
appeals to me, as you know, Chris.
And having those snapshots in there
is nice, because my understanding
is that it will take a snapshot on a system update.
So you could, in theory, revert back.
And yeah, I think it's using ButterFS and Snapper
to do all of that on the back end.
You have like a lot of different snapshot technologies
out there, and we've touched on a couple of them.
You have transactional updates, which are like entire images
that you switch at boot.
And then you have snapshots, which
are file system snapshots that capture
a current or certain state of the OS.
And you have ZFS snapshots and ButterFS.
It goes on and on and on.
But yeah, ButterFS snapshots, and I
think they're using a tool called Snapper.
They are.
That's what I read about thus far.
But I guess either way, essentially what you need to know
is there is a bit of an insurance policy
when you're using this system.
So unlike Arch, where it's rolling with no suspenders,
this is rolling with suspenders.
Yeah, and I have run Arch for a few years previously,
and I moved away from that because of it
felt inherently risky on a daily basis.
And while that's fun, if you're trying
to get stuff done on your main machine, that feels.
Did it ever really actually bite you, though?
Oh, yeah.
Oh, it did.
OK.
All right, OK.
And partly my fault, I think.
Some of the ways I set it up with disk encryption and stuff
led to some issues.
So fair enough.
Lots of learning there.
But that was the whole point of running Arch at the time,
was to learn.
But having this snapshot functionality
feels like I can dive into that full steam ahead again,
which I've missed, but without, I don't know,
without that feeling that I might just
drown when I need to be floating and get stuff done.
It just makes you feel a little more comfortable
actually proceeding with updates and whatnot,
like you're not dreading it.
Yeah, and I noticed the more that I
dove into how it worked in reading
some of the documentation, the more this deeply curious
and excited younger version of me started coming out.
And I really, really appreciated that.
I think that probably colors my testing of OpenSUSE,
but in such a wonderful way.
So I then decided to go a little crazy
and set up my microphone and our recording for this episode
on that test laptop, because I thought, what the heck,
let's bring it to the next level.
And maybe I'm going to throw this out there.
If I'm considering maybe moving to this distribution
as my main setup, may as well try it on the show, right?
I didn't expect we'd be matchmakers today, Chris.
Wow.
Yeah, I know.
And that's an interesting outcome of it.
Wes, are you still on Tumbleweed now,
or are you on your regular machine?
Yes, yes, I am.
So both of you are Tumbleweeding.
I'm not.
I actually still have my VM, so I'll get into going, though.
Brent, did you get a chance at all to experience
the essence of Yast?
So as far as I understand from listening to,
I did dive into a few talks at conferences.
I wanted to get some of the history of OpenSUSE,
because I just didn't have much experience with it.
So I dove into a bunch of historical documentation
and talks and stuff.
And it sounds to me like Yast is controversial,
or at least people didn't like it a long time ago
or it didn't keep up.
And apparently, as far as I understand,
Yast 2 is kind of the thing we're dealing with now.
And I got to say, it was really nice.
I didn't have any issues with it.
I did see some slightly confusing naming conventions.
Like, for instance, there's an application
called Yast Online Update, which it took me a long time
to figure out what that did.
I'm still a little confused about that.
Apparently, it's used to get patches
to correct and improve your existing installation.
So maybe in a week or two, I'll figure that one out.
But for the most part, yeah, it was great.
Yeah, I think that's just the updater.
But yeah, right, it is a weird.
So I prefer to use Zipper on the command line myself.
So yeah, I think it's a classic GUI tool versus command line
tool kind of debate.
We should talk about Zipper, though,
because I feel like in the past, I was skeptical.
But I kind of like it.
I haven't really used it in anger yet.
And admittedly, this most recent time
has been kind of wrapped in the transactional update stuff.
I don't know.
What I have done with it recently, it hasn't been bad.
Yeah, I agree.
You know, my cards on the table here,
it was the transition to Zipper that made me leave Soos.
Way back when.
I was just done.
I was done at that point.
There had been a couple of other package manager transitions.
Plus, I was trying to use red carpet.
And RPM dependency resolution was a real nightmare back then.
And I was just done.
And apt was a thing.
Yum was a thing.
And Mandrake had URPMI, which was also really nice.
And so I was done when Zipper came along.
But this time around, I found the Zipper cheat sheet
that the project publishes.
And I don't know if it's, I think it's current.
But it worked for me.
It's just great.
I'll have a link in the show notes.
It's just a PDF.
Man, this is the way to go.
And you know, I think what trips me up is I've
been surprised that in some areas,
they didn't adopt a more common syntax.
Like, they use the word refresh instead of update,
where if you use DNF and apt a lot,
you're just DNF update, apt get update.
But I would actually argue that the convention in apt
seems a little awkward.
I would assume it's only nice for you because it's familiar.
But for someone coming at each fresh,
I think refresh makes a lot more sense because you're right.
In that sense, if you come at it clean.
But you know what I think when we do user studies a lot, what
we commonly see is that turns out people
been using systems for a while now.
And if something's been really popular,
like say a start menu and a task bar and things like that,
like those conventions become so well understood
by the general population that if you want to provide them
a low friction transition, you adopt
some of those conventions, even if they aren't necessarily
the ones you'd always come up with if you're starting anew.
It's, you know, there's always, it's a balance and it works.
It's fine.
It's just once you know those little differences, right?
And that's where I think that having the map,
like the cheat sheet, that makes that really great.
And then once you have that, I think it's a nice tool to use.
It's got good display and output.
It's quick.
I'd say it's quicker than DNF.
I liked it from that standpoint.
But I do have that, like that old school,
like I can't believe we're doing another package manager
transition.
That was actually one of the items
I was most hesitant about in doing
some of these distribution tests in the last few weeks
is package management.
I don't have that much, I actually
don't have that much experience with them.
I've used apt and Arch has forced
me to do the Pac-Man thing for a while.
But I didn't know any of the RPM based ones.
And that, I have to admit, was the source of my biggest
fears in all of this.
I thought, jeez, if I just can't even update packages
or anything like that, I'm going to look pretty silly online
trying this stuff out.
But it turns out they're all pretty friendly these days.
And that wasn't my experience a decade ago
when I played with all this stuff.
So I was actually pleasantly surprised and continue
to be impressed.
You know, speaking from a desktop perspective too,
like the last time I used SUSE pretty seriously,
Flatpak and Flathub weren't a thing.
And that makes a difference now too.
Kind of changes the software availability story
that used to be a big deciding factor
between the distributions.
Yeah, no kidding, right?
Like there's this one layer of, I don't know,
more server centric tooling and kind of like base system
tooling that we're talking about.
And of course, there's the open build service,
which we haven't really talked about today.
But you're right, like for just day
to day, the dumb business applications I got to use,
Flatpak has totally changed that.
And it's probably in a fantastic way for us distro hoppers.
And then on the server application side,
using things like Podman and Docker
means that how you run and install software
has sort of been normalized.
And so then you start looking at, OK,
now what else differentiates a distro?
Well, you know, now I'm kind of paying attention
to the fact that I kind of like the way they set up
the console by default. You know what?
I kind of like that they're using
ButterFS to do these snapshots.
And you know, it's kind of handy that zippers quick,
because when I do have to use the host system,
I'd like every interaction to be as quick as possible.
And so for my test setup, because I am also
always kind of thinking long term about what
my next build in Lady Joob's my RV is going to be.
Right now, I'm very happy with Ubuntu 20.04
on a couple of Raspberry Pis.
It's been really good.
But gosh, that's so LTS.
How long can you last?
I know.
I'm always kind of shopping for the next thing.
And for my workloads, a rolling OS
wouldn't necessarily be a bad thing,
because everything, again, on that is in a container.
And the LTS has plenty of updates.
So it's not like I don't need to log in
and do updates all the time on the LTS.
So I've thought, you know, what else?
So CentOS Stream 9 is very high on my list.
And Tumbleweed, or maybe Leap, but probably Tumbleweed,
is also on that list.
And so I was curious what their ARM image release is like,
because some distributions really half-ass this.
And some distributions treat it like a first-class citizen.
Like, I've been very impressed with Fedora 35 ARM
and the Ubuntu ARM.
And now I am also very impressed by the OpenSUSE server ARM
image.
I felt like there was no penalty for being on an ARM box.
I had a great experience.
I booted up that ISO.
I got it going.
I almost went transactional server like US.
I almost did.
But there's a wiki post that explains some of the drawbacks.
And I don't know how current that is.
But I read through some of that, and I thought, hmm.
No, I think I won't.
But I'll link to that in the show notes if you're curious.
Yeah, it's probably a lot, especially, like, as you say,
you're still learning a new package manager.
There's a lot going on that you don't
understand about what's different than the Linux
systems I know.
I think adding, learning both of those at the same time,
probably not the best idea.
So that's why you did it.
I love it.
But yeah, I figured, yeah, OK, I won't.
And I appreciated them making that kind of, you know,
the drawbacks kind of very, very clear.
And they weren't necessarily anything too serious.
So I had set up a couple of hosts.
I set one up as a Docker host, and I set up one as a Samba.
So two virtual machines.
I did all this in a VM.
And the Docker host was interesting.
I set it up twice.
The first time I went through, I did it all by hand.
You know, just what's it like, you know,
I'm going to do this on my own and not look for any help
and not ask anybody, you know, that stupid mentality.
Well, I decided to do that.
And of course, I had trouble figuring out
which version of Docker Compose packages to install.
I loaded up Yast.
I went into the, you know, the software manager,
because I wasn't fully, I hadn't found the cheat sheet yet.
And so I go in there, and I search for Docker.
And I find the Docker packages.
OK, great.
And then, like, in the Yast software manager,
in the InCurses terminal interface,
when you select a package, you get, like, a check.
But then they have a dash, and they have a slash.
And I used to know what those mean, but I have no idea.
I'm pretty sure I know what a check is.
So I got them checked.
And then I went over to the search,
and I type in Docker Compose, and nothing comes up.
Well, that's weird.
So I type in Docker dash compose.
Three results.
Oh, OK.
Well, I didn't search as hard.
I needed a dash, OK.
Three results, though.
Well, what are these three results?
And they are three different results
that correspond to different versions of Python
that you could hypothetically have installed on your system.
And I don't, at that moment, while I'm in that search,
I don't know what version of Python.
I assume it's the latest, because I'm
on a rolling distro.
So I choose the one that has the highest number.
I mean, that's how I'm building my server at this point,
is that one's a high number.
I'll choose that one.
And I hit Install.
And I go to run a Docker compose file.
I say, you know, Docker compose up.
And I get a whole bunch of errors,
because I had wrongfully assumed that the service would
automatically be started.
So the second time, and I got everything up and going.
I eventually figured it out.
Got my user added to the group, all that kind of stuff.
The second time through, though, I
wanted to see what the documentation was like,
what the community guides were like.
And I went out, and I found, I think
it's actually on their official wiki.
But if it's not, it's really well done.
That explains, very briefly and very simply,
what zipper commands to get.
And then the user group add commands and all that stuff.
And so I, the second time through,
using this concise guide, I probably
had a Docker environment up in about two minutes, at the most.
So it was really a lot smoother going that way.
Also, the Samba box was a total cinch to get going.
I used to build these all the time on Sless,
so that was kind of my comfort zone.
But what I noticed about Yast, they've
dialed it down a little bit.
It does less stuff.
I think, as the general Linux ecosystem,
the kernel does more systemd as a thing.
There's just more stuff happening,
and more things are automatic.
They've kind of paired Yast back a little bit.
And that's, I think, actually really, I should say,
I think that's actually good on them.
I think it's a good approach.
Keep it lean on me.
Well, you're adapting, too, to the ecosystem now.
As you say, there is just somewhat more of a shared
platform that you can tap into.
So if you don't have to reinvent it yourself, don't.
I sort of feel like they may have adapted too far
with the Samba configuration.
Wes, in the past, man, you could set up so much stuff
for Samba.
You could even make the damn thing an Active Directory
controller, or an NT4 domain controller, all right there
in Yast.
Oh, just right from Yast, whoa.
Yeah.
Dang.
Now it's like, now you go in there,
you set your work group name, and you
set if the services are enabled and if they start automatically.
And that's it.
That's all it does now.
So everything else is in SambaConf, and that's fine.
That actually is probably, maybe, the best way to do it.
Because you don't want people messing with this stuff,
unless they, I suppose, they know what they're doing.
But gosh, I don't want to edit SambaConf.
I don't want to.
I liked the both systems, just default.
I thought their hard drive layout config was smart,
and I went with it, and I used ButterFS.
And I had a much nicer and much smoother experience
than my previous desktop experience.
It kind of braced me for.
I was sort of braced to fight this thing.
And I had two servers set up and going in one evening,
and then I just blew it away and did it again just
to take a different approach at it.
And I think a big part of it was getting that zipper cheat
sheet, and there is a lot of good documentation
out there now.
And now I'm deploying applications
via containers instead of a big old pile of RPMs
and install shell scripts, which always was
problematic for me on SUSE.
And it's like kind of just now a non-issue.
So I actually found the experience better
than I was expecting, and I'm feeling a lot better
about deploying it on our main server now.
Yeah, I think this is going to work.
I mean, if anything, we're going to screw it up.
But I think it's going to work.
JupiterGarage.com, the random swag bags are back.
We have two different swag bags now.
So what's in here is like stickers
of the shows, retro items from past Jupiter broadcasting
swag, whatever, like events or sales or whatever.
And then also we have some bonus stuff from the road trip
that we're giving out on the meetups along the road trip.
And then there's a second journal for just $5 more.
You get all that stuff, but also you
get the Jupiter journal, which is a really nice low-key journal.
It's a spiral bound, so you can lay it open and flat
with lined paper in there so you can just take notes.
And it's got a nice, classy rocket on the front
that's imprinted into it.
It looks real good.
And you see, you get the swag bag with that journal in there
for just $5 more.
Or you can go grab a journal if you just want the journal.
And then you can choose your color.
We have them in blue or gray.
And there is about a dozen of each bag left.
So there's not a lot.
And generally, people put a lot of the orders
in the first day or so after the show's out.
So if you're listening, you want to grab one, do grab it.
The jacket that's up there will be up for a while
because that's print-on-demand.
And it is the Bearded Tux Bomber.
And it's just something I wanted to do for the winner.
It's like your nice going-to-town jacket.
It's got another.
I'm really big now on just the low-key, subtle design.
It doesn't need to shout, but if people know, they know.
And so the Bearded Tux is one of my absolute favorites.
That's all up at jupitrgarage.com.
And I should mention, our members,
our core contributors, get a discount on that jacket.
We got a little bit of feedback this week
from our last episode on command line love.
ChunkyPie, who I love that name, he wrote in.
He says, I think the biggest draw to the GUI
is the visual output.
The drawback to the command line is the visual output
as well that a non-power user sees.
So he says, for non-super users, I
don't believe the command line syntax, the input,
is the problem.
A person can easily be taught and can understand
the concept of command, name, option, and argument syntax.
The problem lies in what they receive as the output
when they type in a command and press Enter.
Try to explain the output and what
all the columns of an ls-l command means to a regular user.
He continues, I believe the solution
to making the command line easier for non-super users
is to change or have an option to change
the output of the command line.
If the output is something that's
visually easier to understand, then the barrier for entry
would be much lower for normal users.
He also adds, PS Chris, I envy your RV as a home life.
Keep living the dream.
First of all, very good points on the command output.
So I think I do have some more thinking to do about my position
and I do appreciate that input.
I also, though, have to acknowledge
I find it so incredibly valuable that the commands I learned
when I was just a wee lad, nearly 30 years ago now,
I find it awesome that I am still
using some of those same commands
or a slight tweak on those commands.
And that the time I invested to learn that
has paid dividends for 20 plus years.
And I can't think of any gooey experience
where I can say the same.
So I don't necessarily think the position's invalidated.
I just think it needs some thinking.
For the RV, I think it's a little bit more
for the RV full time thing, we do really love the freedom.
But just to balance it all out, before I came into work today,
I'm flying the drone up over the RV
because there was 60 mile per hour
winds blowing through the Pacific Northwest yesterday.
And we were under a tree.
It's been trimmed, but the top of it is not.
And it just started disintegrating and just fall.
I mean, it was just like disintegrating all over Lady
Joops because she was parked right underneath it.
And I mean, bam, bam, smack, clump, thump.
You're just like you're hearing your solar panels take hits.
And when we just got Lady Joops, we
had parked somewhere near, well, there's
trees everywhere in the Pacific.
There's nowhere that doesn't have trees.
We parked near a tree, and a branch
actually came through our roof very early on.
Yeah, so we have literal scars.
Yeah, really actual scars that are there still.
We had to seal it up, but the holes are still there.
So I flew the drone up this morning
to take a look at the damage.
Not a single branch up there.
A twig that got caught under one of the solar panels.
Not a crack in a single panel.
It's like it all just rolled off.
It just all rolled.
Maybe the rain and the wind pushed it all off.
It blew it all off.
But oh my god, I can't believe we survived that
without branches up there.
I thought, honestly, I'd be going up
this weekend with a blower and some gloves
and throwing branches off it.
But we did discover a crack in one of our seals.
So my wife, Adia, as I'm down here recording,
was up there fixing that.
So it's not all freedom and road trips.
There is work to be done.
Wes, I thought you could take this next one from Ryan
that touches on the same topic of our command line love.
Ryan writes in, I started typing gibberish at the command
prompt almost 40 years ago.
I enjoy it, I understand the appeal,
and I really see the potential, and I admire the elegance.
But I have to agree with Linus Tech Tips
that the command line will not have
a prominent place in the future of computing
for regular people.
I see friends and family type at a command prompt
about as often as I see them pump the hood of their car
and change their own oil.
I know it's cliche, but sometimes I
look to sci-fi for a glance at what could be.
And when Geordi of Star Trek The Next Generation
was adjusting the lighting in his quarters for a date,
he didn't sit down at a command prompt
and type in how many lumens he wanted.
And he didn't pull up in Elcar's gooey
and adjust the lights with a dimmer switch.
Because the Enterprise had the newest version of Home
Assistant installed, he was able to say, computer,
dim the lights.
No, that's too low.
Raise it a little more, a little more.
Now play some relaxing music.
Or in the episode where they were trying
to find out what element was causing random ship
malfunctions, the engineers didn't pull up a terminal
and start typing SQL statements.
They asked the computer to access
a list of possible elements, and they slowly
eliminated them with more verbal commands.
I think the future of computing will be something
like that for ordinary people.
But fear not, at least not on my account.
I don't believe the command line is going away entirely
anytime soon.
Can you think of any highly successful gooey apps that
don't have a command line or at least an accessible API
somewhere underneath them?
I think there will probably always be some kind of back end
with more options and flexibility offered in gooey's
accessible with a command prompt of one form or another.
It's a good take.
It's got a good point.
I mean, when he's throwing the Star Trek facts at me,
I can't argue with that.
I would wonder perhaps the engineers at the Starbase
that installed the computer, maybe they
were using the command line to get things going.
And then the developers who programmed the interfaces
for Geordi to command the luminance of the lights,
perhaps they use the command line.
And what I think this probably gets back to is
who is the new user for Linux?
And in my estimation, the new user for Linux
is one that's technical and one that is perhaps
an engineer, a developer, a tinker, a hobbyist,
an enthusiast.
And of course, you have users who
have been set up with the system, companies, and friends
and family, and schools.
Absolutely.
But there's distributions that are purpose built for that.
But for the general tech community,
people who would consider themselves pro users, somebody
who would consider themselves savvy in technology,
I think it is not that it's too hard or it's too cryptic.
I think it's truly a mindset thing.
I think it's a cultural mindset about how
we view the command line.
And again, now for new users or people like friends and family
that don't have any interest in how the computer works,
if really for most people, they probably
shouldn't have to use the command line.
It should all be available to them some way.
Well, and it makes me think of, as you often touch on,
technology doesn't usually just go away.
I mean, yeah, in some cases.
But we'll probably have all these things.
We'll have standard GUIs.
We'll have command lines.
We'll have audio interfaces, perhaps
some sort of nonverbal interface in the future.
Can watch you dance and interpret that somehow.
I guess my fear is, I just hope we
don't lose sight of some of the design elements that
go into the GUI side.
Touching on the car analogy there,
some of the reasons some people who
might want to change or do more maintenance on their car
can't these days is because it's not really
designed with that in mind.
It's made more difficult than it needs
to be to service it.
And for now, in Linux, we don't have that.
And I just don't want to see that disappear.
Not that I think it necessarily will.
Great way to put it, Wes.
That's exactly it, is I don't change the oil in my car.
But I would not want the ability for me to do it taken away.
In fact, it's already kind of a pain in the ass.
And the funny thing about the RV is the damn thing's so big.
And it's more from an industrial kind of legacy
that it's actually easier for me.
And I do change the oil on my RV because it's more accessible
to me and it's easier to understand it.
It's not simple necessarily.
I mean, it is simple.
And I think that's actually an interesting more
I think about that is you're right.
That is kind of what we're on the precipice of right now
and maybe why this has come up ultimately.
I know that we have more to say in the mumble room.
So what I'll do is I'll try to bring it up in the post show.
But we've got to clean up around here.
Thank you to our core contributors
over at unpluggedcore.com.
Your direct support means that we
don't have to load the show up with any random sponsor who's
willing to sponsor us.
I have the flexibility to just be flexible and make sure
that I have the flexibility to be picky, I guess
is what I'm trying to say.
And I don't have to rush into anything.
And that's really thanks to our member support.
That's huge.
And it can only grow from there, right?
Like one day it could truly replace an entire sponsor.
So thank you to everybody who supports us at unpluggedcore.com.
You get a limited ad feed as a thank you
and also the full live feed, which today
is worth the price of admission alone.
In fact, maybe we should talk after the show.
Maybe that should be released because I
think that was a really valuable conversation
we had in the pre-show.
Huge, actually.
So there's things that happen in the pre-show just organically
because we have really interesting people showing up
and sharing their perspectives in our mumble room.
So go over there, check it out, unpluggedcore.com.
We also want to hear from you.
Contact the show, linuxunplugged.com slash
contact.
And of course, our telegram is jupiterbroadcasting.com
slash telegram.
And if you're in the BC area, let Brent know.
I mean, BC is a big place, but I have recently
discovered that we have a few listeners
in my immediate area.
And so I'm in Eastern BC near Cranbrook.
And so I was thinking we might just
do a little mini micro meetup, maybe
the beginning of December.
So if anyone is in the area at all and interested,
please get in touch.
linuxunplugged.com slash contact,
and we'll see what we can do.
I might even have some gifts to give away.
And just to be clear, if you are in BC and you don't show up,
we will find you.
Join the love plug.
You know what, if you do that, I'll let it slide.
It happens every Sunday.
You can get the mumble room details
at linuxunplugged.com slash mumble, noon Pacific,
jupiterbroadcasting.com slash calendar for the mumble
lifetime, mumble virtual live lifetime,
and for our show live stream.
I have a really special pick.
And it is a command line tool.
Now, all the picks are not going to be command line tools,
but it seemed appropriate for this week.
And this one, if we have never covered this before,
it is an egregious error that will be corrected.
Shame on us.
It's called mp4 grep, a command line tool that searches audio
and video files like grep.
And so it's not just for mp4.
Even though it's called mp4 grep,
it'll also search mp3 files, aug files, webm, mov, wav files.
I'm going to try this after the show
because I just found this a little bit ago.
This could be awesome for, like, what episode did we say this
word, or did we say this thing?
This sounds so great.
How have we not known about this for years?
This sounds amazing and kind of a little bit like wizardry.
Do you have any idea how it's doing this?
It's using something called VOSK, V-O-S-K.
I'm feeling like I'm just discovering, like,
this entire universe of stuff that exists.
And, you know, VOSK is a speech recognition toolkit.
And so I kind of feel like it's Wes's fault
because this is his area.
We're always talking about this stuff.
So he should have said something.
I know.
I don't know why we didn't see it.
Probably because, unlike many of our picks,
this is not written in Rust.
No, this is a Java app, actually.
You're right.
You're right.
That's got to be it.
I will say, this is super exciting.
I kind of hack around this sometimes by, you know,
if it's a video on YouTube or you can upload it
to your own YouTube and get auto subtitles that way,
you can then fetch the SRTs and search.
Because I use this a lot, or I would use this
and will use this for just trying to figure out time codes
or, like, I know that was in a video,
but this video doesn't really have chapters or something.
Where did they talk about that?
Where did they talk about that?
But if I can do it with an open source tool,
that is so much more flexible.
And, you know, what's nice is VOSK,
which I'm sure I'm butchering the pronunciation on
because it's the first time I've ever even seen the word.
What's nice is that it's all offline.
So you're not using, like, Google Transcription
or whatever.
You know, you're just running it right there on your machine.
It looks like it comes with a lightweight English model
for that, you know, speech recognition.
But VOSK has a whole bunch of other ones
that you can go swap in if you are looking
at some non-English sources.
So this looks so handy.
Yeah, really.
And it's a command line tool, too.
So we've got to give a little command line
love for our command line picks out there.
Although I have to say, I don't normally do this,
but I wanted this to be a command line thing.
But I found such an awesome GUI app
that I'm going to tell you guys about next week.
You tease.
I know, I know, I know.
Go find our friends at Cloud Guru on social media.
They're just slash the Cloud Guru
at pretty much any place that is a legit social media
platform out there, you know, like the YouTubes or, I mean,
I think that's social media, right?
I think I'd consider that social media.
Twitters, the Facebooks, the Instagrams, you know,
just slash the Cloud Guru for that social media.
And you can follow this year podcast
at Linux Unplugged on Twitter, if that's your thing,
and at Jupiter Signal.
I don't know if anybody's doing that anymore.
But if you want to and get information
about what's going on, that's where you do it.
But what you really ought to do, Chris's pro tip,
invest in your RSS ecosystem.
Build your own system.
And then go over to JupiterBroadcasting.com,
find each one of our podcasts, and subscribe.
We have an all shows feed.
Then you just get all the shows.
You know, then you get the full package.
Linux Action News, which is giving you
all the info you need.
You're getting the breakdowns in a nice, concise type package.
You're getting the Coder Radio, where
we're doing more analysis on the entire tech industry
with a developer bent.
And then, of course, you're getting self-hosted,
where Alex and I are talking about awesome free software
projects that you can self-host all the time,
and the hardware that makes you do that,
and including I have a really cool device
for that show next week.
So why not get the all show feeds?
Then you get that, you get all the good stuff.
And then you come over here live,
and you've really got the complete package.
Join us next week.
We do it live at jblive.tv on a Tuesday.
See you next week.
Same bad time, same bad station.
12 Pacific, 3 PM Eastern.
jubilabroadcasting.com slash calendar.
Links to what we talked about today,
and things you can try out, and our pick,
and the SUSE tips, and all of that,
at linuxunplug.com slash 432.
Thank you so much for joining us on this week's episode
of the Unplugged program.
Remember those tuxes?
Oh, man.
I'm glad I remembered.
Won't you remember?
Tuxes.party.
Go vote.
We've got a big show coming up, and we need your input.
And perhaps you can fight against the lizard revolution.
Anyways, really, thank you so much for joining us.
And we'll see you right back here next Tuesday.
Thank you so much for watching, and we'll see you next week.
OK, JBtitles.com, let's go do our boats.
We've got to go figure out a title for this thing,
and then we've got to ship it off.
Parker, I know you had something you wanted to jump in on
during the show.
Oh, yeah.
I was going to say that, going back to how the command line
should be more friendly to newer Linux users,
the command line, we might want it to maybe make
it more human-speakable.
So instead of commands like sudo apt-get update or whatever,
have commands like just update.
So that it would, when we tell people
to go into the command line, it's just easier to say,
yeah, just go in there, type update,
and it'll update your system.
Right.
Or something along the lines of saying admin override update
or something.
Basically, if you want to still have the sudo type elevation
request, prefix it with words people can say.
Exactly.
Sudo is super user do.
So admin override or something along those lines
that somebody can understand.
Just effin' do what I say, machine.

Ladies and gentlemen, arriving in the studio
is our brand new PinePhone Braveheart Edition.
Mr. Westpane, would you care to do the unboxing, sir?
Ooh, I love this.
I mean, even on the side, model, PinePhone,
Linux smartphone, how cool is that?
That's exactly what I want.
I know, it is so cool.
Now, truth be told, I've already taken it out of the box
once and played around with it a little bit,
but it's bigger than you'd expect, isn't it?
It is, but it's shiny.
I mean, it looks like a phone.
Yeah, it looks like a legit phone,
and it feels really good in the hand,
a lot better than I was expecting.
How about that?
Wow, nice finish on the back, smooth.
USB-C.
USB-C port right there on the bottom.
You know, it's maybe a little thicker
than some phones I'm used to, but not much.
I mean, I could be way off, but it feels no bigger or thicker
than, say, like the Nexus 6, yes, or whatever it was.
You're absolutely right.
Yeah, it's pretty cool.
It's real.
And when you hold it in the hand,
you have a real appreciation of the feat that
has just been pulled off here.
It even has a headphone port.
Hello, friends, and welcome in to your Unplugged program,
episode 340.
My name is Chris.
My name is Wes.
Hello, Wes.
This is really exciting.
I've been looking forward to episode 340,
and I didn't expect you to bring this entire taco plate.
This is really nice.
You know, I will apologize.
We will be eating some tacos during the show.
You know, it is episode 340, and that's how we're celebrating.
These look so tasty.
But on the show today, we have a lot of community news
to get into, including a brand new community news subsegment,
the first ever on the Unplugged program.
I've been on burnout still.
We've gotten some more feedback.
Our friends from elementary OS are here
to talk about the App Center and the success
of their fundraiser, and then we'll
wrap it up with some highlights from Fosdome 2020.
Pretty nice, Wes.
This is a giant show.
Pretty nice.
And of course, we have a slammed mumble room today.
Time appropriate greetings, virtual lug.
Hello.
Hello.
Hello.
Howdy.
Hey.
This is a record breaker.
That is definitely a record breaker.
This is so awesome.
Hello, everybody.
Ace, Nomad, Brent, Byte, Carl, Cassidy, Dan, Drifter, Dusty,
Frank, John, Colonel, MarioGrip2, MiniMech, Nervo, Steve,
and TechMav are just in the main on air.
And then there's a whole other group up in the quiet listening.
But also, a big, warm welcome back to Mr. Bacon.
Hey, Cheesy.
How you doing?
Hey, everybody.
I'm doing good, man.
Glad to be back.
We missed you.
Good to have you back.
Glad you're up and at least going enough
to join us on the show today because there's
a ton for us to get into.
And one of them is installed right here on my machine
right now, Wes.
Plasma 5.18 is out.
It's a doozy.
It's an LTS, which, of course, stands for Long Term Support.
Yeah, that means 5.18 will be updated and maintained
by the KDE contributors for the next two years.
Regular versions are just four months.
Boom.
So this is an overall continuing improvement to the look.
Better support for GTK applications
using client-side decorations.
And as well, I mean, I guess if you're coming,
thinking about this, if you're coming from the past LTS
release of Plasma, which was 5.12, which shipped in Kubuntu,
you have a totally new notification system,
all new web browser integration, new lock screen,
totally redesigned system settings panel,
totally new display management, including
what's it called, fractional scaling support in there,
flap hack support in Discover, night color features,
Thunderbolt device support.
It's a huge, huge, huge upgrade if you're
coming from the past LTS.
Still pretty good if you're coming just
from the previous release, though.
There's some nice things in there.
Oh, yes.
OK, so you mentioned fractional scaling.
That's now a lot less glitchy on X11.
Glitchy, you say.
Oh, yeah.
Less glitchy.
You don't want that.
I don't want glitches.
I mean, I'm not promising it's glitch-free,
but significantly less glitchy, let's say.
Hey, Wes, what's a glitch?
Oh, you've never encountered that.
I mean, what is it?
Like, technically, what is a glitch?
What is a glitch?
I don't know what a glitch is.
Are they talking about bugs?
Do they mean it's less buggy?
Is that what they mean?
What does a glitch mean?
A sudden, usually temporary malfunction or irregularity
of equipment.
Oh, a bug.
OK, OK, good, less bugs.
That's good.
Less bugs.
That's good.
Fewer bugs, probably is what Joe wants you to say.
Fewer bugs.
If you have an NVIDIA GPU, that info is now in case discard.
Hey, that's pretty handy.
And my favorite, a redesigned audio volume system widget.
I love that.
And Joey over at OMG Ubuntu has a really nice write-up
that I think is a little bit better
than the official write-up.
But that's not bad.
It's just Joey really did a great job of summarizing it.
So we'll link to that.
There's just another bit of hardware news to get into,
and that is this monster of a Thaleo desktop
that System76 launched.
It's a whole new line that's powered
by these brand new Ryzen Threadripper CPUs.
Yeah, so it's actually launched in conjunction
with these new Ryzen Threadripper 3990X.
And with that, we have the Thaleo Major R2,
which has those Threadripper CPU options.
And wow, there's a lot in here.
Yeah, so the base configuration starts 16 gigs of RAM,
250 gigabyte NVMe.
I said that right this time, right?
Didn't I?
Yes.
It's a graphics 550 and a 1,000-watt power supply.
But you can get the thing pretty loaded.
Yeah, I think these specs might be more suitable to you, Chris.
64-core Threadripper, 256 gigs of DDR4 RAM,
and 46 terabytes of storage.
I'm sorry, what?
Yeah, that's three NVMe SSDs and eight SATA drives.
I'm sorry, did you say how many terabytes of storage?
46.
OK.
On the graphics side, you can also
have dual NVIDIA GeForce RTX 2080 TIs.
I'm going to go configure one right now.
So I'll get a 64-core Threadripper system possibly.
Let's see, I'll start with, realistically,
I don't need 64 cores.
I'd probably be happy.
I could probably live with 24 cores.
Plenty of cores.
Probably.
I would like 32 gigs of RAM, but I actually
don't know if I need much more than that.
But think about that.
You're going to have the system for a long time.
I agree, but I have been surprised at the systems that
have 16 gigs of RAM.
I'm still getting work done.
It's a little tight, and the ones that have 32 and 64
feel about the same to me.
You're so reasonable.
But that 250-gig NVMe has to go.
Yeah, think of all the things you're
going to be doing on a system like this.
That's going to be a lot of large files.
Two terabytes on that sucker.
You can get an additional one.
I think I won't.
I think instead I'll do 2.5 storage,
and I'll go with a two-terabyte SSD for that one.
Oh, they offer just spinning rust, too.
All right, I'll do that.
I'll do a 500-gigabyte solid-state spinning rust.
I'm going to go pretty realistic on the old GPU.
I just love how the form is set up,
because the header is first GPU.
Yeah, that's true, right?
I'm going to go reasonable here.
I don't think I have to go crazy with the GPU.
I don't need a whole bunch of GPUs,
but I want this thing to play a decent amount of games.
So I'm going to go an RX 5700.
It's not the best I could do, but it'll work.
I don't need a second GPU.
I'm not going to get a display.
I'll stick to the base warranty to try to keep costs down.
And Westpac, can you read that final price there?
No, I can't.
Oh, yeah, $4,870.
That is a lot less than I was expecting.
It's not to say that it's not a lot of money,
but I think the Mac Pro just totally reset my expectations.
This thing would be no slouch.
I mean, I only got the 24-core version and 2 terabytes
of storage.
And I mean, dang, man.
And I mean, that's before you get to the whole,
it's made right here in the States,
and it's all kinds of open.
Oh, yeah, I'm not even making a comparison in that regard.
I'm just saying I think they're getting the pricing right,
and it's a really nice system for what you get.
And it looks like they've updated the cooling system
in there a little bit since the original Thalios that we saw.
Yes, and I mean, yeah, that's a totally reasonable amount,
especially for a business buying this for an employee.
Yeah, or me buying it for myself.
No, that's not true.
I just don't need that much power.
I don't need it.
Not yet.
Well, it looks like they did change the CPU intake
to include another die-cut kind of almost a Linux unplugged
rocket along the side of it.
That's cool.
And underneath it there, it looks
like some additional Morse code.
I don't know what it says, but they
are pretty cool about hiding little Easter eggs all
throughout their cases and stuff, too.
It probably says linuxunplug.com slash RSS.
Probably does.
It should.
All right, I promised it earlier,
we have a new subsegment here in the community news.
Ladies and gentlemen, I am proud to announce
the launch of Rustwatch.
I think that the sound clips guy you hired
is taking this job a little too seriously.
That was a little much.
Got to have him dial it down a little bit.
Well, it's the first time for this segment,
and you've been begging to add this to the show for weeks.
That was a lot, though.
That's a hell of an intro.
I know.
It's sort of too much.
Well, anyways, Rustwatch starts out with a fork of core boot.
This is going to be the pitch for Rustwatch.
What is getting rewritten in Rust this time around?
And this time, it's core boot, and the project
is called OrBoot.
You get it?
I love that name, personally.
And it currently plans to support Linux boot payloads.
Wes, why are we doing this?
You've got to rewrite everything in Rust, right?
There is some logic to it.
The whole point about Rustwatch is
to have some fun with the fact that it's like the new hotness,
but there is reason for it.
It is a safer language for maybe things like this.
And there's lots of the nice modern tool chain
that you have access to.
And in some cases, doing things again,
well, they can end up better designed,
learning from the past mistakes.
Sure, sure.
But it's not all roses here in the Rustwatch subsegment.
There's also some concerns about Rust infringing
on people's freedoms.
Of course, we have the four essential freedoms
and freedom number three is being imposed upon.
Here is the post from the hyper wiki they have.
Rust and also Cargo, the Rust package manager,
violates freedom to redistribute without their explicit
approval.
Their trademark license imposes requirements
for distributions of modified versions
that make it inconvenient to exercise freedom three.
And this has turned into a bit of a conversation that
has kind of taken a turn of, well,
the problem is distros can just take up our packages,
modify them, and call them the same thing.
And now this is the argument.
The distros want to be able to package it up
and call it Rust.
They don't want them to call it Rust without their approval
because they want to make sure it truly
is genuine their product.
Right.
An example might be if you were to strip out
the borrow checker, for example, which
is part of the important memory model used in Rust
to keep things safe.
And if you called that Rust, that
wouldn't really be Rust.
It's an interesting question because it
is sort of it's not necessarily violating those freedoms.
It's still entirely open source.
It's a trademark issue, kind of if you
remember the whole Ice Weasel Firefox business.
It's definitely similar to that.
But of course, the code is all still open source.
Steve Klabnik, who's a Rust developer,
did respond over at Hacker News and said, basically, yes,
the intention of the policy is to prevent people
from adding confusion around a fork of the language.
But we do know that distributions
make patches to Rust and still call it Rust.
And we're fine with that.
Nobody's asked to do it.
And we haven't instigated any problems with that.
So I think it is kind of a gray area.
It's not maybe as free as we would like to see.
But there are trade-offs to be made.
And I think the Rust team has done
a good job of managing their project
and has gained a lot of contributions,
even made a whole subsegment on this show for it.
So I don't know that it's the end of the world just yet.
Yeah.
Yeah, it seems like they'll work it out.
But it was interesting to see people go
to their edges of the mat and say, well, distributions
do this.
And then other people say, well, the four essential freedoms
guarantee us this.
But we'll sort it out and do it, of course.
And in the meantime, we'll keep an eye as part of Rust Watch.
Where did you find this guy?
Yeah, he's real cheesy.
If you hadn't brought the tacos, I don't know, Wes.
I just don't know.
Tacos smooth all wounds.
Well, something pretty neat happened this last week.
It really happened over the weekend.
The folks over at Elementary OS launched App Center
for Everyone on IndieGoGo, a fundraiser
to get the team together in Denver
to work essentially on a sprint.
And their goal was $10,000.
That was probably too low.
Because as we record this, they have reached 110%
of their funding.
They're now at $11,000.
Wow.
Congratulations, Dan and Cassidy.
Thanks.
Thank you.
So this is obviously a signal that your user base
gets what you're doing and encourages you to keep going.
Did you shoot a little too low, possibly?
Well, I think what we wanted to set up
is what the cost of the sprint was.
And we budgeted out pretty carefully
of what is actually it going to cost us to build this thing.
But yeah, I guess it might have been
that we could have shot for two weeks or two separate sprints.
We're talking now about how we could handle some stretch
goals.
And the kind of ideas are either following up
with another sprint, maybe that or something,
or as we originally planned with the campaign,
to use any extra funds to do remote contracted work.
Sure.
So Cassidy, I've noticed that you've been hustling like crazy,
trying to reach out to everybody who's
kicked in, contacting people to spread the word.
Has this been a full-time job for you for the last few days?
Kind of, yeah.
It's been a lot.
But it's been really fun.
I mean, Dan did most of the campaign setup
or a lot of the campaign setup work, recorded a video.
I helped edit that a little bit.
And we've been sending out the updates.
But we've heard from backers that they
like getting updates from the project,
even if they've already backed.
Like, we're not begging them for more money or anything.
But they like hearing, like, yeah, hey,
we hit this percentage.
We hit this number of backers.
Oh, hey, here's an update on the swag.
So I've been trying to be really transparent with that.
That's been really great.
So let's explain, before we go too far, what it
is that the goal is here, Dan.
It's App Center for Everyone.
What does that really mean?
The end result is a sprint that will hopefully produce what?
The idea is that when we first did App Center,
we did our fundraiser a couple of years ago.
And it was the pay-what-you-want app store for elementary OS.
As we've been working on it, technologies like Flatpak
have kind of evolved.
And we see developers that are looking at that
and saying, hey, I would really like to reach more users
than just elementary OS users.
But when I publish on Flat Hub, I
lose all the cool pay-what-you-want stuff
that comes with App Center.
We want to embrace Flatpak and make
that the standard in App Center so the developer will publish
in App Center, still use our pay-what-you-want model,
but also get a little bit of that wider spread
from Flatpak.
And there's a lot of cool privacy.
It's security implications and stability
and all kinds of stuff for users on that side of using Flatpak.
So that's kind of the big idea is we're taking everything
and rebuilding it from the ground up
around modern technology and all the cool stuff that
comes with it.
As if you were going to build it today, essentially.
How much is this related to some of the work
that Endless has been doing to create ways
to pay for Flatpaks?
So this is actually hand-in-hand with that work.
We've been in discussion with folks
at Endless and FlatHub and Flatpak itself.
And they've been really good about getting feedback
from elementary because they know,
we have a successful pay-what-you-want app store,
and they want to build that capability into Flatpak
itself.
So the new Flatpak Authenticators
is a technology that's enabling that,
and it's looking really good.
And so the end product would be a technology, a set of APIs
or a set of libraries or what, that developers
that are targeting any distribution
could use to enable payments for the Flatpak on, say, Fedora,
for example.
Correct?
The Flatpak Authenticator is part of,
it's associated with the Flatpak remote.
So we'd have an app center remote,
just like you have a FlatHub remote today.
And then when you add that remote to your system,
it automatically downloads the Authenticator
that goes along with that remote.
So then when you go to install a Flatpak from that remote,
it's up to the Authenticator, which is some sort of,
it can be like a website, or in our case,
it's a native GTK app.
So that'll come up and offer the pay what you want download.
So basically, if you target app center
and you put your app in the app center repo,
then you get those pay what you want payments on any Flatpak
platform.
I see.
So we're not necessarily talking about the app center software,
the store itself, coming to all distributions as a Flatpak,
but more of the availability to use this new functionality.
Yeah, that's the beauty of it is that you get to still use
GNOME software or KDD Discover or whatever
it is that you use to consume Flatpaks on your system,
even if it's like the command line,
it still throws the Authenticator
when you go to download.
So you can still use whatever your native system is
that you like.
You don't have to use the app center app,
but you still get to enjoy those apps,
and developers still have a way to monetize.
And we're building the back end in such a way
that it should be agnostic, and it
should be easy to stand up your own instance of it
so that FlatHub can take advantage of this as well.
And we want to really like where anybody can spin up
an app center or FlatHub instance,
their own pay what you want app stores.
Wow, that could be really neat.
So who sits in the middle of refunds?
So say somebody buys something via this process that
isn't an elementary OS app center user
and decides, ah, I don't like this.
I want a refund.
Is your project involved at all in that process,
or is that handled separately?
So the way it's currently set up is that apps are actually
sold by the app authors themselves.
So it's a more direct relationship.
While we are kind of an in-between that
helps distribute those applications,
the application is being sold by the app developer.
So now users will get an email with information
about the purchase.
And then they can, if they want, they
can request a refund that way.
And that'll actually go through the app developer.
Oh, interesting.
Nice and scalable, it sounds like.
So that's, yeah, so then it's just part of the support
process that developer would normally take on anyway,
and doesn't involve the project at all.
I think that was like one of the questions I thought, hmm,
I see people asking this, and I don't
know what the answer is to that.
That seems very elegant and how it already
operates in the app center today.
Exactly, and that's one of the awesome things
that Stripe gives us for free as part of their payments API
is they enable a direct relationship
between the developer and the users.
So it's really convenient.
Cheesy, you had a question as well.
So when you talk about streamlining this payment
process, are you also talking about giving me
the ability to set up an account that I can then
tie to a credit card that will remember
my purchases throughout the app center experience?
That's the big thing that we're looking at is, well, firstly,
we want to have something that's just
you being able to save the payment
and do like a one-click payment.
But the ultimate goal is that we would
like to have some kind of way for you
to log in on another computer and restore
your purchases over there.
And we want to just make sure that we
do that in a way that's secure and privacy respecting,
and we don't want to hold onto a bunch of private data.
So we're kind of working through different models of what
can be stored through Stripe's API,
and we can use tokens and their kind of proven security
infrastructure, and what works better
as local data stored on your computer,
and try to keep as much information off
of elementary servers as possible.
Yeah, I would agree with that.
Who wants that hassle?
Good.
I think that answers Colonel's question, too, that he had.
Yeah, it's clear that there's been a lot of thought
put into the design here.
It feels like the project is transitioning
to the next level of involvement with the wider community.
Because I think also, Cassidy, of your recent work
with the free desktop standard around dark theming,
and going to these events, and speaking there,
and having a presence, and being part of the conversation
around those things, as well as something like this,
working with Endless, and putting something actually
usable around Flatpak for payments.
It's going to have wider implications than just what
happens on elementary OS, but should also, hopefully,
improve the app ecosystem on elementary OS, as well.
So I think it's a very clever strategy, gentlemen.
Well done.
Thank you.
Yeah, we love that whole coopertition angle.
We can work together, and build things,
and compete a little bit.
But we're all building free software,
so let's just work together.
And the rest of us get to benefit.
I think, too, it's worth mentioning how important
I personally believe it is to have
a way to pay for decent third-party applications.
When I tried out the Mac with the eGPU a couple of weeks
ago, and loaded some application to manage Final Cut libraries,
just to several apps that are also available for iOS,
so I installed them on the Mac to match my iPhone.
And the quality of the applications,
while you pay $4, $5, $6 to $15 for them, is really strong.
It benefits from the platform having a clear direction
for developers to build applications,
publish them in a central repository,
and charge a fee so that way they can justify
the time spent on them.
Got the support they need to make it sustainable.
And they've managed to make it work
with their crazy, restrictive, overly controlled app center
model.
And this is something that's more universal,
that could be cross-distribution,
but still give us some of those core benefits.
It's a way to do it better than the way Apple does it,
but still reap some of those benefits
of giving developers the ability to feed themselves.
And I mean, since the days of Linux Action Show early,
I have been trying to harp on this point.
I've given up.
I really have.
You know, when Ubuntu's App Store didn't really work out,
and I just kind of gave up.
I just thought, all right, this isn't the path to monetization.
But then when I visited the Mac recently,
and you can see the collective benefits now
of many years of having these APIs,
and having these standards, and having these tools,
much like elementary OS does, actually,
having these things in place many years down the road
really does have its benefits.
And you guys are laying down some
of the most essential frameworks right now.
So I'm really pleased to see it got funded.
And I think it should probably be at $15,000, $20,000.
So I say everybody go fund it.
Well, I did.
We'll have a link in the show notes, of course.
Yep, indiegogo.com slash project slash appcenter dash
forward dash everyone.
Go there.
Let's get them going, because isn't this
exactly how we want to see other distributions operating, too?
And the thing that's pretty great about this
is it's a direct lever.
The users and the community are funding this.
They, as a team, are getting together and producing code.
It's a pretty great opportunity to be directly involved
with the development.
And I would argue an opportunity you
don't get with commercial software development
ever, other than going and buying their products directly,
which is a very detached way.
You're directly helping developers.
It's pretty special.
So good luck.
I will give it a ding for that one.
And great work, gentlemen.
Great work.
Thank you.
Thank you.
Glad to see it proceeding.
I think you launched it on a Friday, right?
Who does that?
Who launches it?
Or was it Thursday?
I can't remember.
Yeah, it was Friday morning.
It was kind of a weird time.
And it blew up over the weekend.
That's never going to work.
Yeah, well, by like Monday, midday, Monday,
you guys had already hit your goal, right?
Yeah.
Yeah, Monday afternoon.
I really think you really played the game of getting out there,
getting the word out there, casting the net as far
as possible, thanking people, being part of the community
while it was happening.
And I think it paid off.
And I'd love to hear how it goes.
I would love to be able to go.
Don't think it's going to be possible.
But I was putting feelers out there.
But if nothing else, love to have one of you guys join us
or both of you join us again to just kind of give us
an update afterwards to let everybody know how it went.
I think that'd be really cool if you could make it work.
We'll do, yeah.
Thank you, guys.
Wonderful.
One note before we get to Fosdom.
And I don't know if we're going to keep doing this anymore.
It's sort of gotten a life of its own.
And it's this burnout topic we've talked about.
And you'll recall this really kind of came up,
I want to say, almost a month ago on the show when, well,
it really kind of came up when a PPA maintainer got really
frustrated by demands that were being put on him
and pulled his PPAs, which included ZFS on Linux
for Ubuntu and a bunch of other really critical packages.
And that's when the burnout conversation came up.
And we found this clip from Fosdom,
which I think we'll just play now, because it almost
perfectly summarizes the issue that that developer was
going through, as well as, what was the blog we read, Wes,
that was super cool?
Oh, yeah, Drew DeVault's post about just
how hard and beautiful it is to work in FOS software.
That was a good post and really got us thinking about this.
And you found a clip from Fosdom.
It does have a bit of audio noise.
I think it's just on a wireless mic,
but it's totally understandable.
All projects go through, or successful projects,
go through a sort of, please, please contribute
to my project, please like me, to a, oh, my god,
what do I do with everybody liking me so much?
This is a scaling problem in open source.
And in Linux, the crisis point was actually reached in 2002,
which is pretty good.
This is 11 years after the initial project started.
Up till 2002, every patch that went into Linux,
and I believe you've seen Greg Crow Hartman's statistics
telling you today about how many tens to,
we're approaching hundreds of thousands of patches
emerged by each release cycle, every patch
was emailed personally to Linus and personally integrated
by him.
This gives you an idea, given the patch volume
we accept today, of why this model just wouldn't scale.
And like I said, the scaling point was reached in 2002.
Linus just was starting to burn out and couldn't cope.
But we talked about it a lot in terms
of software development, open source sustainability.
But one of the things I've heard from the audience
is it hits them at work as a system administrator,
or in sales, or Tim hit me up on Telegram
and said that he's just been fighting at home,
working at home, being burned out
by all of the things that are at home that are not work,
like the dishes or the laundry.
Everything else you're behind on.
Yeah, everything else.
And he finds it distracting, which is pretty cool,
because Brent, you chimed in.
You were in the conversation, and you
chimed in with a couple of suggestions
that you follow when you're working from home
and kind of feeling that way.
Support is a huge one.
Feeling like you're connected to other people
and sharing ideas is massive.
I think you'd mentioned in there going for a walk too.
And Alex suggested sometimes even just getting up
and switching locations.
Yeah, going for a walk changes up your ideas.
Like, you've done this, Chris.
Just go for a 10, 20 minute walk,
and it's amazing how that resets your mindset.
And also switching locations.
I try to only do work in that specific chair
in that corner of that room so that when I'm not there,
I'm not thinking of work.
But the opposite's also true.
When I'm sitting there, all I'm doing is work.
I'm trying not to do other stuff.
That's interesting.
Tim said that one of the things that he did
was he set a little bit of time aside
to just focus on cleaning his workbench first
and took it away from watching YouTube time,
which I thought.
Oh, that's nice.
We could probably all make a few cuts here or there.
Or even if you just set yourself,
okay, I'm gonna spend X amount of time every day
working on this thing that's driving me crazy.
Then when you are trying to focus on your work
and it starts to creep into your mind,
you can remind yourself, don't worry,
you've set time, you've dedicated time to deal with that.
It can help you stay focused
and gives you a little more energy too once you get it done.
My experiment, I talked about it last week,
was I launched The Chris Last Cast.
And that was really interesting
because it was a chance for me
to try totally different equipment,
totally different recording styles.
And I even did one episode that I honestly was scared.
I thought about pulling a couple of times,
which I haven't pushed myself in that way
in a really long time.
So that felt kind of like I was starting,
it felt new again.
It felt really new.
That was, I feel like that kind of energize
I got from taking a risk and then having it work out.
I have carried that momentum into the shows this week.
Here, it's been a really interesting kind of-
Even though it was, I mean, more work that you had to do
and a lot of investment,
I can still end up having benefits and dividends
way ahead of proportion.
But kind of like Tim, I just watched less YouTube.
That's really what I did.
Well, there you go.
And I launched a long-term project
called Work Life and RV at worklifeandrv.com.
And I launched a blog as well
that my wife and I did together.
And we blogged about our solar upgrade.
We've got pictures in there and our junkyard home base,
we did a blog-
Oh, it's really lovely.
I'm curious, what'd you use for your blog?
Oh, don't worry.
I'm gonna do an episode on it.
Okay, okay.
Yeah, that's definitely something self-hosted
that we're gonna be talking about,
which actually talked a little bit about
some of the hosting in, I think, self-hosted,
I wanna say 11, so you can catch that.
I don't know, I've had a lot of fun.
It was like, it was a total lark.
Like, I'll just try this.
And it went really well.
So I'm gonna stick with some of it.
Probably won't do it with very many Chris Lastcasts.
I'll probably keep it going a little bit though.
But the Work Life and RV thing really got a good reception.
And I've got a lot to say there.
And it just totally doesn't fit on the JB network.
Right, a little extra space on the side
so you don't have to compromise
on how you talk about it or cover it.
You can really dive in.
Yeah, and that's obviously something
I've got a lot of experience.
I've been doing it for five years.
You only talk about it all the time.
Yeah, off air, it's like pretty much all I talk about.
So it gives me an outlet that doesn't sort of,
you know, wreck the on-air content at JP.
But be honest about it.
It was just a really,
it was a really interesting experience.
It was a challenge that I put out there last week,
and I'm really glad that we did it.
And I got a few positive things.
I'd love to hear other people's results
at linuxunplug.com slash contact.
Your last episode of Chris Lastcast,
the one you did with Jason Spizak.
Man, that was a good episode.
I really loved it.
I ended up just sitting down and listening to it,
just me and the podcast for like an hour.
It was, it was great.
So please, hopefully you're getting some good,
good feedback and I'd love to hear more of that.
Well, thank you.
That was the one that I was the most nervous about
because I went out there with the title.
You know, I also was,
I gave me a chance to practice listening better
and not speaking as much.
And so I, at times I just put my hand over my mouth,
I would just listen and give,
give him the space to finish his thought,
which is something that I don't do as often
on the live shows because we are live
and we are sticking to a time limit and we move on.
Right, you have to manage the flow.
Yeah, and so it was a chance for me to practice a skill
that isn't my primary skill when I'm hosting,
but one that I need to develop further.
And Jason's great.
You know, he's got a, he's got a great audio setup.
He's got two different professional audio studios.
He runs them all on Linux.
Incredible.
And the man can talk about anything.
So, and he's, I think he's a, he's a wise man too.
So thank you, Brent.
I don't know if I would have done it
if this burnout topic hadn't come up,
but I felt like I needed to kind of get
the energy level up a little bit,
but I needed to do things out of the box
that would scare me and challenge me a little bit.
Right, get out of the, get out of the grind, feel refreshed.
Yeah, and, and then I, then I feel more focused than ever.
It's been an interesting process.
Been a good challenge.
It was, I'm glad we did it.
I almost want to, I almost want to keep it going,
but I think now I'm just going to try to find a balance,
which I think is what we all, we all have to do.
Few quick housekeeping items.
I don't have a bunch in here
other than to go say check out Brunch with Brent
with Peter Adams, if you haven't yet.
Part one and two are both posted.
He's the photographer behind the faces of open source,
a great thinker himself,
and that was also a great conversation.
And our telegram group.
Now I think over, is it over 1500 now, Sol?
Did we stay there?
Yes, I think so.
We were bouncing around all weekend.
No, we're at 1499.
Oh, oh, come on.
One, one away.
Here's my commitment.
If we can get all, if we can cross 1500
and get all of you in one space,
I will buy PBRs for everyone.
It's like 1500 bucks, dude, I mean.
I know, but dude, how, but come on.
We're never going to get everybody together.
But I do feel like we should get
like a telegram hangout going.
That would be really great.
Like a meetup every now and then.
Something, there's something there,
something there that we got to look into.
So that's at Jupiterbroadcasting.com slash telegram.
Conversation keep going after the here show.
So you can go check that out.
And that's really, I think all the housekeeping I got.
I think that's it, Wes.
You got anything else?
That looks pretty clean around here.
The bell has rung.
Yeah, well, that's what happens, you know,
when we clean up after ourselves.
So FOSDEM 2020.
FOSDEM was started in 2000.
It was a different name back then,
but essentially the same thing.
And entrance and participation is entirely free.
It's financed by sponsors who accept
the non-commercial nature of the event.
And there's donors amongst the visitors.
You can donate,
which a lot of people in our audience have.
Absolutely.
Donors receive a form and a token
that gives them like, you know, an extra little note.
Ooh.
Little, I don't know, what do you call that?
Flare?
Yeah, Flare.
And so it's like a four, 5,000 plus event.
Carl, you were there?
Yes, sir.
Did you get a rough figure of the numbers?
It's a little weird because the thing is spread
across a lot of different buildings on that college campus.
So every building's jam packed,
but you never get a sense of all of the people
all at one time.
Yeah, okay.
That would be hard to measure, you're right.
Carl, I'd like to get your take on FOSDEM
compared to events here in the States.
It was definitely very different.
It was the first FOSDEM I'd been to.
I've always heard about it.
The biggest thing that struck me
other than the number of people there
was that it was a lot different projects
that showed up there.
I've never seen Gnome at a Stateside conference,
for instance.
So I managed to get me a lot of Gnome stickers.
I got an F-Droid sticker.
I'd never seen them in a conference before.
A lot of projects like that, that for whatever reason,
have a lot more European contributors
and they're regulars there at FOSDEM,
but they don't come Stateside for whatever reason.
That makes sense.
I mean, I don't make it over there very often.
Indeed.
Which is a real shame.
So, I mean, I've always wanted to.
So I'm glad you're able to make it, Carl.
That's pretty great.
Would you go again?
Probably won't have a choice with my new job.
CentOS, I'm working on CentOS now for Red Hat.
And so they're probably going to have me go back there again.
Next year, I'd like to actually make it to a few more talks.
This year, I did spend most of my time at the CentOS booth
and meeting a lot of my new teammates.
I went to a couple of talks in the distribution dev room.
And what I realized was that I went in the morning,
but once you leave, you can't really get back in
because there's just a waiting,
a line of people waiting to get back in.
And so if you want to, if you have a dev room
that you want to see the talks at for the day,
get there early and just camp out there the entire day.
Like don't even drink water
because you'll have to get up to go to the bathroom.
Oh, Ace Nomad, there was a bit of a JB mini meetup
at FOSDEM, eh?
Yeah, there is.
I saw ByteBitten for the first time
as well as Bitten throughout the conference.
And I knew there was a few other
JB community members there as well.
I actually got to meet Carl at the very, very tail end
of the last part of the day for a couple of minutes.
So yeah, it was great.
That's neat.
Fantastic.
FOSDEM pumps out videos
like no other conference pumps out videos.
Very impressive.
It might be like 800 videos for this event so far.
And the turnaround between like when the conference happened
and the videos being up, wow.
Now we went through as many of these as we could
and pulled out a few gems
because there's some great stuff in there
and nobody can go to everything
and nobody could go through all of those clips
but we gave it a good shot.
And something about me recently
has really been enjoying the history aspect
of Unix and Linux.
And guess what?
I found a talk that talks about
some of the very early linkages in Unix history.
They were absolutely fundamental to get where we are today
that we never talk about.
And one of them was almost completely lost to time.
And it's called the PDP-7
and it's a huge machine.
But what's a PDP-7?
It's a mini computer
that Digital Equipment Corporation, DEC, produced
in the 60s and 70s.
And it was one of a line of 18-bit computers.
Now 18-bit sounds kind of weird.
We're used to 16 or 32 or 64 bits.
But at the time DEC came out with this,
all the mainframes were 36 bits.
So 18 made sense.
It was like half a mainframe or something
kind of in the thinking of the time.
An 18-bit computer.
Mini computer.
And we wouldn't likely have the Berkeley BSDs
if it wasn't for this rig.
And it was lost to history
because simply records were lost
and documentation on these punch cards was lost.
PDP-7 Unix is largely a footnote in history.
Nobody uses it today, nobody knows about it today
except maybe a quick question to a trivia,
or an answer to a trivia question.
But it was very important in building credibility
for this group at Bell Labs.
They had just spent five years with a failure in Multics
and they needed some wind they could show.
So they were able to use the PDP-7,
show it to people, show how useful it was,
and were able to get the patent department
to buy the PDP-11 to port Unix to.
For a long time it was believed
the sources were lost to history.
There's no binary artifacts from this time.
Nothing really survived.
But there have been a few recent discoveries.
One of them was in the home of a man named Robert Morris.
It's probably a name you're not familiar with.
But he invented something you likely use every single day.
In 2011, Robert Morris Sr. passed away.
Now he was a security researcher at Bell Labs
in the 60s, 70s, and 80s.
And he did a lot of security things on Unix.
Probably the one you're most familiar with is Etsy Password.
And when he passed away he had a huge collection of papers
that took a long time to go through.
So his estate asked Doug McGilroy,
who was another person from Bell Labs,
to go through the papers
and sort out the ones of historical relevance.
And in here they find old Unix manuals,
maybe even what might be source code
that is literally printed out.
But they don't go much further with it
until about a year later.
The next year, in 2016,
Norm Wilson was going through his garage
and found this notebook of Unix source
that he had copied while he worked at Bell Labs.
And it turns out that it was the PDP-7 kernel listing
and the user utilities A through F.
So a group with a twos group typed this all in
because you might think this would work to OCR,
but when you OCR it and you get all kinds of errors
and you have to recheck it anyway,
so it's faster just to type it all in.
So they typed it all in and created an image
and enhanced SimH simulator to run it.
And now you can run PDP-7 Unix.
You can run it because they typed in by hand
the source code that was printed out.
Glad I didn't have that job.
I know.
I know.
And it was sort of the granddaddy
to what later became the Unixs that became the BSDs
that eventually became the BSD wars,
which led to the revolution
that was Linux and free software and-
It's an amazingly rich history that we're a part of.
Before we go from the past, there was one bit in there too,
we'll link to the full talk,
but there was one bit in there.
That you really got to appreciate.
And that was what a crap show early networking was.
I mean, you might remember,
if you can recall token ring networks and net buoy and IPX,
there were so many different kinds of standards
and ways to communicate.
But more than that,
there was fundamental philosophical differences
on how the data should move around a network.
Networking in Unix also goes back a long way.
So a lot of people say, oh, it started with Berkeley
and it turns out that there were a number of implementations
before Berkeley did their stack.
This is timeline wise, 1977.
Before Berkeley at AT&T,
there was something called data kit
and at Berkeley, there was something called BerkNet.
But BBN wrote the TCP IP stack
that would actually later go into Berkeley.
Berkeley added a sockets API,
the BBN stack had a completely different API
that was more file oriented
and showed some of the limitations
of the everything is a file paradigm.
Isn't that fascinating?
That of course was gonna be the Unix's first approach
to networking.
Just make it a file.
Everything's a file.
But the earliest ones, it's kind of a tie.
There's something called Network Unix
that the University of Illinois did in 74.
And there's a spider cell network inside of AT&T.
And I put both of these up there
because it shows the split in thinking
between these two groups.
Everybody inside of AT&T was circuit switched.
They're a phone company.
They make circuit connections.
So their networking was based on that.
Everybody outside of AT&T was packet switched.
Everything's virtual.
We just send packets.
And that's the school of thought that won.
And that also explains why if you go back
and look at these early Unix's,
a lot of the ones from Bell Labs
don't have any TCP IP stack
because they had this giant blind spot.
They thought everything was gonna be circuit switched.
Wow, that's fascinating.
I mean, it makes perfect sense, but wow.
I know.
It could have gone a different way.
Now, to show you sort of the opposite side of FOSDEM,
there's also a much more modern side.
Ironically, right now while we stream,
there's a conversation in the chat room
about confusion around IRC.
And this was one of the points that Matthew,
I think it's Broberg?
Yeah, that's a great name, Broberg.
I love that. Absolutely.
Matthew is making the point
that none of you that are longtime Linux users
are going to want to hear.
And that is the next generation of contributors
does not want to get on IRC.
But my pathway is not the same
as I know many others have gone through.
That started with IRC just being a logical, simple thing.
But for me, it's still this.
Even though I understand where it comes from
and I understand it had its place in time,
I feel as if it's not as inviting
as that incredible GitHub issue
that didn't shame me or make me feel stupid.
He's making the case that people
who get into open source development
sort of through the GitHub channels
and Slack and all these other, Riot Chat,
all these other platforms,
they look at IRC as if it's something of the stone age.
And he has numbers to back it up.
To put it in some context,
I understand when IRC came out
and became the de facto standard,
it's because there's a lot of empty space around.
It was IRC or nothing to communicate.
I guess telnetting and reading each other's things
is something that I've read about as well,
but I'll just put that aside.
I don't know it very well.
But if we fast forward to today,
the stats I've been able to find
is that IRC is hovering around 400,000 active users
in the last year or so.
And we look at some of the other
synchronous communication channels
that people are talking about.
We've got Microsoft Teams.
Okay, so 400,000 for IRC.
This is a network effect.
Do you have any guesses for Teams?
Which you know is gonna be smaller than Slack.
Yeah, it's gonna be smaller than Slack.
Let's go with a million.
Just people have to use that for work
and don't necessarily love it.
There's 13 million people on that.
Slack, people love it.
Open source communities hate it.
12 million users.
Riot.Iam, very impressive that they've grown
to well over 11 million users.
These numbers are odd because Teams, he says, is bigger,
which I guess maybe it's possible.
Microsoft has a reach.
And Slack doesn't have the built-in market.
Right, it's not just with your subscription.
I can see it.
But the really surprising one there was Riot Chat.
That's great news.
Yeah, it is.
Google Chat, it's slowly waning in the background,
but at four million.
And that's just synchronous communication channels.
And that's just recently.
We zoom out even further and think about the ways
in which we interact with communities
in the technology space.
You've got Twitter, which is my default place
to conversate with community members.
At 126 million users, Telegram is way more massive
than I ever realized at 200 million.
And a lot more open source communities are talking there.
Discord is humongous.
Reddit is a complete beast when we think about it.
Yeah, when you consider some of the online communities,
it's even more.
So right now we have 271 people in our IRC room.
And we've now crossed the 1,500 line at the Telegram group.
I really feel like the end is nigh
for IRC as a primary community communications tool.
Yeah, I mean, does this mean IRC should just dwindle away
and we move on?
No, I think technology doesn't work like that.
Even Betamax is actually still around.
Not very much anymore, but for many years
after the, quote unquote, Betamax VHS wars, production
shops still used Betamax.
Just because Sirius XM launches doesn't mean
there's not FM radio still.
It'll always be around.
But I think when you're trying to draw in as many contributors
as possible and bring in fresh contributors,
I think it's something you've got to at least consider
and think about.
Yeah, it's not easy to get started with.
And unless you really start learning it well,
it doesn't have the features that people
are used to or expecting, especially
if you want contributors who are a little less dedicated
and might just be doing this a couple weekends a month.
Sure, and they want low barrier of entry.
In his talk, he talks about how the whole Nixerv stuff,
where it gets you to authenticate, is just too much.
It was way too much.
I felt like I was fighting the computer immediately
as soon as I logged on.
Cassidy, it sounds like you guys have some experience with this.
Yeah, we used to do all of our development
over on IRC for elementary.
And honestly, one of the best decisions
we've made as a project was moving away from IRC
to two other mentalities.
One is using non-real-time platforms better,
like GitHub issue tracking.
And then other chat apps are just a way better experience
for people than IRC.
And it's way easier.
It lowers the barrier of entry to new contributors.
The integration thing can be nice.
And a lot of different platforms offer this,
where you can tie it in with existing workflows
or there's automatic notifications when
somebody commits something.
And you can have a conversation based around an issue
right there in your main chat program.
Yeah, exactly.
We have a private Slack for contributors.
And we call it our virtual private office.
Because when you're working, you're in the office.
You're in Slack.
When you're not working, you close it.
And you do all your communication right there.
And it's great.
Yeah.
And it has a lot more support for I'm available.
I'm in a meeting.
Are you sure you want to disturb this person?
Because they're in a different time zone.
Like, these things matter when you're
working in an international team.
But I don't think it's gone.
I'm not going to stop using IRC.
But I think it will be relegated to probably
the existing communities.
I mean, those numbers are devastating.
400,000.
I mean, who knows if they're accurate.
But they're probably in the ballpark.
I mean, we just saw some news, what,
that IBM was going with Slack and has 350,000 employees.
So that's kind of the scale.
Yeah, really.
No kidding.
All right, well, you found a talk
that seemed to grab your attention called
the selfish contributor.
I'm going to take you on a journey
through the deep, dark, motivational secrets,
the seamy underbelly of open source,
how people can actually get engineers
to contribute efficiently to the open source project.
I'm James Bottomley.
I work for IBM, as you can see from my email address.
I'm actually a very old school open source person.
So my open source experience actually
goes back to 1982 with looking at the source
code of what was then BSD.
So that means I've spent almost 40 years in open source.
Yeah, James is also the SCSI maintainer.
And he really has a long history in working with open source.
In particular, has seen how, well,
we like to talk about some of the altruistic motives involved
in open source, right?
You're helping the community.
You're adding to the betterment of everyone.
Really, a lot of things, open source is a shared good.
But we have to acknowledge that a lot of people's actions
are primarily self-interested, right?
I mean, you're scratching your own itch.
And he kind of acknowledges that.
And you need to think about that if you
want to make these projects work as well as they can.
So the trap is that once you run into the scaling problem,
the temptation is to flow control.
I mean, you're all engineers.
Everybody knows that if you've got a congestion problem,
you flow control it.
So the natural flow control you would think of
is tap the source, push back on the contributors,
try and slow down the contributions,
make the pipeline flow much more evenly.
And effectively, the temptation, therefore,
is to try and push the problem onto the contributors,
to raise barriers to contribution.
Right.
And that's sometimes what you see with things like IRC.
Or in the kernel's case, we talked about that scaling
problem with Linus.
And they solved it at that level, at the maintainer level,
with tooling, in particular, inventing Git and having
a system with maintainers where you
could have multiple trees managed and then merged
together into one.
And that's all kind of all about respecting
your users and contributors.
But conditioning contributions on mandatory unrelated actions,
the quid pro quo, makes contributors feel used.
You know, it feels like the project
is stealing your free time.
You're not giving it voluntarily because you
want to get this patch upstream.
Perhaps your employer has charged
you to get this patch upstream.
So you have to satisfy this quid pro quo
to get this to happen.
And it makes you feel very used and unhappy.
Scaling problems must be solved in the acceptance layer.
They must be solved by tooling.
They must be solved by the maintainers.
If you push the scaling problem down onto the contributors,
you're setting your project up for failure eventually.
I mean, it will chunter on for a long time.
Perhaps it will be a popular project for a long time.
But the moment your popularity starts
to wane, as it did in the kernel a long time ago,
is the moment that your contributors will
start to remember all of the wrongs you've done to them
and start to move off onto the trendier projects.
If you want to keep a committed contributor base,
you need to treat them well.
Wow, this feels like we've just come full circle
on a month-long conversation we've
been having at the metal level on this show.
That's really great.
And there's so many more things.
I really liked everything I grabbed.
This with the server was really feeling
the load on this last weekend.
And it probably will be because they're still
adding more videos.
So people are still coming and checking.
And not everything's actually like that.
It's a tall order to get to them all.
We'll have some of our favorites linked in the show notes.
And they're definitely worth checking out, especially a
couple there's been a lot of discussion lately around,
do Linux distros still matter in the age of containers
and Kubernetes?
There's some good answers to that.
Minimac has a follow-up to the IRC topic.
Go ahead.
I think IRC will stay forever.
It's like ham radio.
It will never die.
And someday you'll be happy to have it.
I could see that.
It's very low bandwidth, number one.
And the text-based nature of it means
that it's always going to be advantageous for some reason.
And like the conversation was continuing in the chat room,
there's tools on top of IRC now that give it
some of that additional image previewing or integration
or those kinds of things.
Your thoughts, Byte?
Well, you at least need IRC for all those botnets.
I do.
I would hate to say goodbye to JBot, if nothing else.
Now it's like, oh, yeah, JBot's like the old bot that's
been around for so long now.
It's the cute little broken robot that still kind of works.
Yeah.
It's over there running in the wall right now,
but it's still grabbing title suggestions, which we are not
getting enough of.
Chat room.
I will shut that IRC down.
For shame.
Well, Carl, any other kind of closing notes
or anything else you want to touch on about FOSDEM?
This is your moment to be our reporter on the scene.
I don't know if there's anything that you felt like maybe
we're missing in our chat here.
Did you see the picture that I posted about kind
of the summary of FOSDEM?
I don't know if I did.
If you go to FOSDEM's Wikipedia page,
the main picture on there besides the logo
is just one of the rooms with a full sign on it.
They are very strict about fire code and things like that
there, and so it's off-putting to a lot of people.
This was my first one, but after going,
I heard a lot of people complaining
about how they couldn't get into any of the talks they wanted
to.
I mentioned the dev rooms where you just kind of had
to camp out all day long, and you wouldn't get your seat back
if you even went to the bathroom.
It can be a little off-putting, but I don't really
know how they would solve that when you have that many people
interested in going.
You don't want to just tell them not to come.
One of their big appeals is that they
don't require any registration.
It's also free, as in money.
It doesn't cost anything, and they just
have so much attendance that they
have a lot of logistical problems around it.
Yeah.
That is a tricky balance.
I have tried to get into a talk and been told, nope,
room's full, and they've had to say it 100 times,
so they're kind of not very rough with it.
Yeah, that's the way to put it.
Not patient.
Yeah.
It definitely is part of what makes it great,
but also part of what makes it not so great.
Maybe they could think about how to scale that a little better.
Not sure.
Yeah, the Texas Cyber Summit that we went to, I think,
was doing live streams at the event over a Wi-Fi network
or something.
Do you recall that?
They had a way to tune into rooms
that you weren't in for a lot of them.
Oh, yeah, that was pretty convenient.
And I don't know how much of that made it public,
but they had a resource for goers
that wanted to tune into it.
But you don't go and travel all that way
to get an audio feed with bad mic audio,
because I mean, this mic audio, that's
even after we've cleaned it up.
We're cleaning it up and fixing their audio,
and it still doesn't sound great.
It's never quite like being in the room.
It's really, yeah, it really is what it's about.
Lots of people there, FOSDEM, they just completely
ignore the sessions, just focus on the hallway track
and face-to-face time with people,
because FOSDEM's so good about their video recordings.
That's what it is, man.
It really is.
After all, people used to say, oh, it's
all about the hallway track, and I thought,
that's a waste of money.
You are irresponsible.
You should be taking advantage of that time and learning.
And not that that isn't part of going,
but now here I am, like, 10 years into that plus,
and it's like, oh, you know what really is the best part is
seeing people catching up, talking
about what they're doing, problems they're solving.
It's really way more valuable than you realize.
That's the community right there.
I really like having a mix.
The hallway track's great in getting to talk to people,
but also there are some talks that, hey,
I want to see that live, like right now, and ask questions.
And it's just off-putting not being able to get into a room.
Yeah.
I still think we're going to have
to find our way over there sooner rather than later.
I know.
I know.
Yeah, although I kind of like, like,
Linux Fest Northwest is about as big as I like.
Scale is a little too much for me.
And Texas Linux Fest is the perfect size for me,
but I think it could also grow a bit.
But there's a different, there's like a sort
of a diminishing return on results
when it starts getting too big.
Right, and it becomes a little more chaotic and a little less
sort of community feel.
Could you imagine like another couple thousand
at Linux Fest Northwest?
That'd be tight.
It'd be a lot.
It'd be a lot.
It's a nice campus, but it'd be a lot.
OK, well, do check out the resources for FOSDEM.
There's a lot to dig into, and it's still pretty neat
to see a community-funded event like this going strong now
for 20 years.
And you're right, Wes.
We do need to make it over there.
All right, some picks?
Of course.
All right, before we exit this week,
I want to follow up on something we just sort of tossed out
recently.
We said, there's that really cool thing
you can run on the terminal that makes
it look like you're doing a bunch of really cool hacker
work.
And yeah, we figured it out.
It's called Hollywood, and it's available as a snap.
Created by Dustin Kirkland.
Yeah, yeah, and he's also published it
as a Docker container.
Oh, he can just go get it off of GitHub.
It's the perfect thing to put up in a terminal window
and put on a virtual desktop.
And then anytime you need to look like you're
working on something that's unbelievable that only Linux
could do, you flip over to that.
He calls it Hollywood because it is quintessential kind
of Hollywood crazy stuff going on your screen that looks
like hacker-type activities.
And I love it.
I love it a lot.
And he was tweeting Elon Musk last week.
This is how I came across it again.
He was tweeting Elon Musk, encouraging
him to integrate it into the Tesla screens.
Wouldn't that be amazing?
And I'm like, yes.
And it's running Linux, right?
Isn't that thing running Linux?
Of course.
So I think you should get in on that.
It really is impressive, too.
I mean, they put in some time into work
to get a diverse array of different technical information
with all the fancy Unicode you could want.
It's so great.
And it pulls in a few bits, like your user name and stuff.
So you can see a few things in there
that look kind of legitimate going by.
And then this one has been on our Get To list
for a long time, in fact, so long that I haven't tried it
recently.
Is that a word, Wes?
No.
It's recently.
You're close, though.
So close, Wes.
It's called SharePoint Sync.
And it's an AirPlay audio receiver.
So if you got yourself a receiver.
I was confused by that at first.
What's the problem?
You explain it.
Well, here's your use case scenario.
But there's lots.
I mean, you could toss this thing on an old Pyskys,
hook it up to a speaker, and then you just
got yourself a $50 home button.
You know what I'm saying?
There we go.
But here's the more practical use case.
Say you got yourself one of those iOS devices, which
I know you don't, but let's just say you did.
Sure, sure.
There is a scenario that those of us
who are listening to a podcast on the road run into when
we get to work and we want to continue
listening on our desktop speakers, where
we got nicer speakers, you want to keep listening.
So what you can do now is you get out of the car.
You walk into the old office.
You sit down at the old desk.
You've got this running on your machine.
You can hit this button.
Your Linux box starts receiving the audio from your phone
and starts playing it over your desktop speakers.
You finish off the podcast.
So that is neat.
That's why I wanted it.
That's why I got it.
I kind of like you capturing from that proprietary world
and playing with it right there in Linux.
And once you get it in Linux, you think about it.
You could probably capture the audio pretty easily.
You could do anything with it.
So it's called SharePoint Sync.
I don't know why they call it Microsoft's intranet name
thing.
SharePort.
Oh, thanks.
What is the matter with me?
It's like once it's in the old noggin,
once my peepers read it one way and put store it
in the old noggin, that's just how it comes out.
SharePoint wouldn't make any sense.
That's the Microsoft thing.
That would be a dumb name for a product like this.
Although I'll be honest with you, SharePort, not much better.
But you get the idea.
Looks like a great project.
Yeah.
And it's supposedly, suppose, supposedly,
suppose to synchronize with the AirPlay video tracking.
So if you're watching a video on your internet phone,
it'll be in sync with the audio coming out of the speakers.
That is impressive.
Yeah.
And he has gone to extra care, as he puts it,
to work well with Pulse Audio on desktop Linuxes.
That's neat too, just like having your iOS device
show up right in Pulse.
Yeah.
Awesome.
Kodi does it too.
Kodi, it works in Kodi.
Kodi, you can go into Kodi and turn this on.
They're doing their own thing to make this possible.
So you can also do it to like a TV hooked up
to like some nice speakers with the old Kodi.
That'll work as well.
Turns out a lot of Linux users also have iPhones.
Well, maybe.
Maybe, or maybe it's just me.
But now I'm just open about it.
You know, I used to be ashamed, but yeah.
Ain't nothing wrong with that.
Oh, I think they're both great, honestly.
I mean, the truth of the matter is I have a Pixel as well.
And a PinePhone now.
Yeah, and an iPhone.
God, what is the matter with me?
This is ridiculous.
We've got to get out of here.
I need to go do some reflecting on all of this.
Maybe stop by the pawn shop.
We need some more SIM cards.
Actually, I did get a SIM card in.
Got a Ting SIM card.
Ting.
Tell us a little more about Ting.
You know, if you go to last.ting.com.
I wonder if it's still there.
I don't know.
But you get $25.
And listen, most Ting bills are around $23 or $24 a month
there, cheese.
So you can pay for your first month.
All right, well listen, we're getting out of here.
Be sure to tune in live.
It's a lot of fun.
It's a huge mumble room.
You can get information if you just Google search for Jupiter
colony mumble.
The show is live on Tuesdays, jupiterbroadcasting.com,
so that's calendar in your local time zone.
And we'll see you back here next Tuesday.
Hey!
JBtitles.com. Everybody go vote. We got to get our titles in. JBtitles, JBtitles.com.
Everyone go.
We literally can't do it without you.
Go vote. And also, I just want to take a second again and say, Dusty, I've been wanting you
to join us forever. So I'm really glad that Carl twisted your arm and got you to do it.
You work with CoreOS, right?
Yep, that's right.
What do you do with CoreOS?
It hasn't changed a whole lot since the last time I interviewed with you, but mostly helping
do the engineering side of things with Fedora CoreOS and also a little bit of community
stewardship there.
Okay, all right. So help me understand. So when you say this, really, it's Fedora CoreOS
you work on now, not CoreOS anymore. So that's where I'm confused. So you're not actually
maintaining or are you maintaining both of them? Are you doing that until September?
What is the situation there?
Yeah. So within our teams, we try to separate out the terminology a little bit. So for example,
if you talk about the old offering from CoreOS Inc., we call that Container Linux because
they renamed it, I guess, a while back before any Red Hat acquisition or anything like that.
So it's called Container Linux. And then if you're talking about some of the new offerings,
we either call it Fedora CoreOS or there's the enterprise offering that OpenShift runs
on top of that's called a RHEL CoreOS or some people call it Red Hat CoreOS.
And so if somebody says CoreOS, they're referring to RHEL CoreOS, which works with OpenShift?
When somebody says CoreOS, we have to ask them what they really mean.
That's what I was trying to get to about you.
He's not going to give you a clear answer on purpose.
Yeah. So I primarily work on Fedora CoreOS that feeds into the Red Hat CoreOS piece that
OpenShift runs on top of. So I do work there as well anytime bugs need to be fixed or whatnot,
I participate in those duties. But as far as Container Linux goes, I don't personally
touch that as much just because the team of people who were doing that already had a lot
of the knowledge. We did some cross pollination there. We have had some of our new team members
run some of those processes to do releases and stuff, but we don't touch them as much
as the people who were responsible for them before the acquisition.
So you were on in 2018 around June. So how much has your role shifted since? I mean,
that's quite a while ago now, a year and a half. How much have things shifted for you
for your day-to-day roles?
It's mostly the same. We've had a lot of work that we've done in the community, just taking
the two projects, the Atomic Host project and the Container Linux projects and putting
them together has been quite a lot of work. Just mainly because Container Linux, the model
there with the streams is pretty different than what Fedora is typically built on today.
So with Fedora, we have rawhide, we have updates testing, we have updates. And that model is
a little bit different than what Container Linux had with the alpha, beta stable.
And so what we've tried to do is mold the Fedora model a little bit to get a stable
and testing stream as well as something that we're calling Next, which is not quite what
alpha was for Container Linux, but we'll more closely follow what rawhide is, or what the
branch next release is for Fedora Core OS.
So we've kind of gone through a lot of like, oh, evaluate what Container Linux was, their
release processes, their guarantees to the community, the technology underneath, evaluate
what Atomic Host was, its relationship to Fedora, what kind of community we had, what
are the things we wanted to support, what are the things we didn't want to support.
And it's just been a very large effort to resolve all of those things, and then put
it all together and start to build steam, start to do releases every two weeks, and
start to exercise those release processes that we've recently defined.
Wow, no kidding. Do you have a rough sense of the size of the Container Linux user base?
Is it hundreds of thousands? I mean, do you have a rough ballpark number? I was looking
at the transition plan and it looks like there's flat car for them if they want something that's
a direct migration, but it looks like there's not a perfect solution for all particular
use cases. And I wonder if this is like, are we talking like, is this a ginormous market
disruption or is this going to impact a few thousand people? Like what's the ballpark
figure there?
Yeah, so I don't know exact numbers there. You know, it's definitely not less than 10,000
and it's not, it's not a million either, right? But, you know, they had some, I guess, data
on how many users were checking in on a daily basis. And then they also got data from different
cloud providers letting them know, all right, here's how many instances were spun up, you
know, in a given month or whatnot. And, you know, I'm not sure how reliable, you know,
the numbers that I know about are, but it's not a small market and it's not a huge market
either. It's somewhere in between. But what we've tried to do is communicate from the
beginning about differences that are going to happen with, you know, the migration from
what container Linux was and give people enough information from the beginning to be able
to, you know, make decisions for what they need to do in the future. Fedora Core OS has
had a preview came out in July of last year. So we've been taking feedback from community
members, you know, ever since that came out and really trying to, you know, not just drop
anybody right on their face. But luckily flat card does exist as well. So we had a guy come
in earlier today and was like, Hey, can I migrate from container Linux? And unfortunately
the answer is no, because it's a completely different model, right? We, we, our updates
aren't based on a block device is based on a file system, right? So the answer is no,
he can't directly upgrade his existing container Linux node to Fedora Core OS.
You could probably move the container workloads though, if you set up a new host.
Exactly. Yeah. Part of the idea behind container Linux itself was that you essentially define
how that node is going to be started and provisioned using Ignition from the beginning, right?
And so if you define everything about that node in this one, you know, Ignition config,
which is JSON, then you should be able to take that Ignition config to any number of
nodes and just spawn them off, you know, just start them up, right? Um, so the idea there
is that you encode everything that's needed for this node to know what it needs to do
in life, um, in that config. And then it's really easy to start new nodes, right? So
the idea there is, uh, you know, migration, as long as they have a configuration file
that defines what that node's life is, or view of the world is, uh, is not that big
of a deal because honestly, um, you know, spawning new instances should be kind of
normal day-to-day stuff in, in our, um, you know, more cloud native world, right? There's
existing bare metal instances that kind of don't live by that model, but we're trying
to get people more to that model. Um, and so unfortunately for this guy, his case was
that he was in a different state than where his server was, and he also didn't have any
sort of lights out management for that server. So fortunately for people like that, um, there
is flat car, right? So, you know, we're actually appreciative of that project existing for
people to have somewhere to go if they really can't migrate to Fedora Coral West. But, um,
you know, that's just an example of a community spawning up where a need exists, right?
I love that. Um, well, I'm glad you're able to stop by and update us. I encourage you
to join us anytime you have the time and I'll leave you, uh, with a bit of advice. If Carl
ever tells you something's good eats, you trust that man at his word. He knows good
food.
That's all the time we have for today's episode of Fedora Coral West. We'll see you next time.

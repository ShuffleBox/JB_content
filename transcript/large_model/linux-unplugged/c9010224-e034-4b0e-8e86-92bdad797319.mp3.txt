Every time a Debian release reaches end of life, I feel old.
Debian Stretch has officially been, I guess, discontinued is what they call it.
I guess 9.13, which was the last one, came out on July 18th, 2020.
But 9.0 was originally released on June 17th, 2017.
And I don't know, man. I seem like to remember that was a big deal.
Like it was the stretch version because it was like this big important release of Debian.
And now it's end of life.
And that especially makes 2017 feel like a million years ago.
Maybe I'll give it a try. I haven't tried it yet. I should give it a go.
Okay. Yeah. Yeah, right? Yeah.
Wes, you were noticing it shipped with what Linux?
4.9.
4.9.
Right?
Oh, wow. Okay, even that makes me feel old.
And there was a big platform that got deprecated in this release too, right?
Poor old i586.
That's how long it's been.
Everybody was really reeling from that change.
But I mean, it worked out fine.
So we say farewell to Debian Stretch.
Hello, friends, and welcome back to your weekly Linux talk show.
My name is Chris.
My name is Wes.
And my name is Brent.
Hey, guys, guess what?
We're going to have quite the adventure this week.
We'll catch up on what Wes has been up to with his new Raspberry Pi.
Hint, hint.
There may be some kegs that can nix in there. I don't know.
Then we're going to geek out at some tech that's really at the center of just about everything we've really been into these days.
And it just kind of dawned on us this last week.
So we'll tell you about that.
I think you're going to be surprised, actually, about all the different things at the core here.
But then we'll round it out with some boosts and picks and a lot more as we always do.
So before I go any further, I do want to say time-appropriate greetings to our virtual lug.
Hello, Mumble Room.
Hello, hello.
Hello.
Good evening.
Hello, Chris.
Hello.
Hello, everyone.
Hi there.
And hello, everybody up there in the quiet listening.
Nice to have you along.
And of course, everybody watching over at Jupiter.Tube.
Give them a wave, boys.
Give them a wave.
There you go.
That's nice.
That's nice.
I had a fun weekend.
I was really up to several projects, which we'll get into.
See, when you say fun, normally that means something bad happened.
Previously on Linux Unplugged, we talked about this project called Umbral.
And it is sort of a self-hosting platform for a home server that has a whole raft of really awesome apps,
sort of like the best of the best in home self-hosting that is in a Docker container.
And it manages all that for you.
Initially started life as a Bitcoin node.
And then with the more recent release, they separated that stuff out as individual apps.
And so now it's just really an app platform.
And there's things on there like SimpleTorrent and UptimeKuma, Home Assistant, SyncThing, Photoprism,
VaultWarden, Synapse, all that stuff, PyHole, Nextcloud.
All in a slick little UI just a couple of clicks away.
Brand new fancy UI, new architecture.
And I was on the previous version.
And I was on a call with Brent on Friday.
And I'm like, Brent, I really think I want to upgrade this.
But I'm really nervous about it because I don't want it to break.
I told him not to do it.
You did.
So I went ahead and did it, of course, right?
And I'm wondering what you guys would do.
Would you go into the GUI, into the settings, and click the upgrade button in there
and do the upgrade through the interface?
Or would you SSH into the box and do the upgrade through a script that's available
in the application directory of the service, which they may just be calling on the backend?
No.
Actually, step one for me would be backups, backups, backups.
And I wonder if you skipped that step.
No, I did backups.
Have you tried restoring from those backups?
Well, we'll get there.
We'll get there.
We'll get there.
OK.
OK.
But what would you do, Wes?
I mean, are they both equally supported from the vendor?
Are they both blessed methods?
Or is the script sort of a hack?
Well, no, I found this method.
Good question.
That's a really solid question.
I found this method actually in their community troubleshooting guide.
And I don't actually know if this was authored by a staffer or not.
But they give you all of the steps to do the process right here.
And it's clear that they've built this update script because it's in a scripts folder.
There's commands.
You can tell which version to go get.
Nice.
Yeah.
When was that last updated would be a thing I would check right away.
Yeah, it is from like a year ago.
But, you know, I kind of figured the script syntax would be the same.
So I actually decided to go the script route.
Would you have done that or would you have done the GUI?
Yeah, I probably would have just because that's my default.
I've come to this realization that I tend to not like the stuff that tries to hide the
information from me because I want to know what it's doing and what stage it's at and
if there's an error message.
And I would prefer to see that output.
Right.
I mean, it's like if it doesn't work, you're going to have to go hunt for that output anyway
if you want to debug it.
So you might as well just get it.
Right.
So I went the script route.
And actually what they have you do in here, this is a good idea, is first they have you
stop all the containers.
Then they have you do an update to the OS.
And I had a few, I had like 30 updates that needed to be done.
Then they have you reboot.
Then they have you do the upgrade to the actual project.
And I've seen a lot of reports that people are having problems.
And if this breaks, our boost break.
And I love the boost.
So I didn't want this to break.
Yeah, that's what keeps you in a good mood.
So.
It's basically it, dude.
It says boost is coming.
These days and the alcohol.
No, not really.
But just the boost.
So I flipped the switch and it went and it went and it went.
And at the end it came up and it was just fine.
I didn't have to do any restorations or anything like that, but it did get me thinking.
Like, how do I do a test restore?
Because some of the stuff that's in these backups is channel state.
And I can't really do a restore if my main thing is online.
Like that's not going to work.
So I don't know exactly how to test restore this thing.
Now, if you're just using it for, you know, photo prism and next class and stuff like that,
that'll be obvious.
But I'm using it as a lightning node.
I don't know.
Yeah.
Would you have to sort of like take it down, back it up and then try to restore that onto
a new box and let it operate for a while and then back that up?
And I think so.
And I just have to roll forward.
I think so.
I think so.
Brent won't have to worry about any of that because he's going to start out at version
0.5 because after I got that done, I went ahead and I set you up a node, Brent.
So you now have your own node that's all fresh and shiny.
Nice.
It's actually sinking right now.
It's probably about 50 percent done.
It's up on Linode so it sinks super fast.
You gave me the high performance one.
That's great.
Thank you.
Yeah, you definitely have the fastest node.
I have in the show notes, I have Brent's lightning node address.
And if people out there would like to open a channel to Brent so that way he has some
inbound liquidity, that would be fantastic because he's going to need some help with
a brand new node.
It's all free software.
It's a free software payment system.
And what we want to do is the last month we were raising funds for open sets, which is
a 501 C nonprofit that donates sets to free software projects.
And we were doing a 15 percent split, I think somewhere around there, to open sets for the
last month.
So anybody that boosted this show, 15 percent of their boost was going to a free software
charity.
And I think we raised just about $300 for them in total.
That's great.
Thank you everyone out there who boosted.
And I think that's really great.
That's amazing.
I know the folks behind open sets now and I think they're going to put that money to
good use.
I think 100 percent of the funds raised will go to free software, too, which is great.
So for this month we're going to do a different split.
We're going to send 50 percent of the boosts into this show.
Maybe it's 40 percent.
I remember because there's like other cuts in there.
There's the podcast player and there's the index.
But we're going to send a big chunk of the boosts to Brent's new lightning node to help
build up a little bit of a gasoline fund or a petrol fund, if you will, because we want
to do some projects here in the studio and gas has gotten ridiculously expensive.
It's about a two day drive for Brent to get from his place in the Canadian wilderness
to the Pacific Northwest studio.
And we got like that laptop we want to get him set up with.
But we've got we've got a whole list of other projects we want to do before he heads off
to Alex's house.
And so for the next four episodes, as you boost in, we'll send the split off to Brent's
lightning node for his gas fund to come to the studio.
And as a way to help him out as he's doing his travels down here.
So we're going to try this out because one of my grand ideas right is down the road.
We can throw free software projects in there.
We could people who help us with the show in the community.
We can throw them in there.
So this is the beginning of an experimentation here.
And so we're putting your boost to good work.
Thank you, everybody.
Now, Brent, you have your own umbral server.
And one of the things I put on there for you and you're going to love the address.
I don't want to say it publicly, but you're going to love what I came up with.
Great.
I put a hosted element chat client on there.
So now you have your own self hosted web element instance that you could have connected to
the J.B. Matrix.
Now you're talking.
Yeah.
So there's all kinds of good stuff on there.
So you could possibly you could possibly use that for all kinds of things because I put
about 900 gigs of storage on that box.
I'll give you all the logins.
You can change it if you want.
And then probably eventually one day we'll probably migrate it to a system on your land.
We'll figure out how to do that.
Now, as part of this deal, you do have to tell us if you break it.
Oh, I'm good at that.
So we'll see how it goes.
What I'm curious to know and I hope because I think it'll work this way is I think you're
going to get a copy of the boosts if you're in a split.
I think you get the boost message.
So I also installed helipad for you so you can read some of the boosts that come in because
I think that's how it works.
We've never done this before.
So we can test it like after the show.
Yeah.
So I've already I've already added to the podcast index.
The nodes address is already in there.
So it should start effect for this episode and should be trickling out there.
That's amazing.
Umbral is a great project.
It's a it's a really nice, clean setup under the hood.
And I really like that I can SSH in and do that stuff on the command line if I want.
And I've everything I've observed so far seems like a really rational way to build a system
like how I probably do it.
It didn't seem crazy under the hood, right?
Like some scripts, some docker compose going on and otherwise fairly standard.
If you'd like to help out with Brent's travel funds and support the show with the boost,
you can get a new podcast app at new podcast apps dot com or go grab boost CLI.
Do it from the command line.
Or, of course, Breeze at B-R-E-E-Z dot technology and join us there.
But, you know, speaking of getting together and having a good old time.
We have a venue.
It turns out Alex has informed us that for the J.B.
London meetup, we have a venue.
And because I'm a North American, I did have to look up the pronunciation of some of these things.
So here we go.
I'm going to try it out.
So August 5th, 6 p.m. is going to be at the Jubilee Park and Garden on the south bank of the river Hems.
Did I get that?
Near the London Eye.
So apparently that's very, very, very, very central.
And anyone who is thinking of going would probably know exactly where that is.
That's what I was told.
The River Tam?
Is it Tam?
I think he had to look up the word London.
Hems?
Well, good job.
Good job.
Yeah.
All right.
So we're going to be at Jupiter broadcasting and keep an eye on there because we do have a West Coast meetup coming up in September in California.
We'll have more details about that probably next week.
But I just wanted to give this some room.
I don't want to get people you know, I don't want to steal any glory from the London meetup because I want that to flourish and be a big thing because I'd love to maybe have it happen next year and we go.
But we will have a California West Coast meeting coming up very soon.
We'll have more details on that in probably next week's episode.
We've been on a real NixOS bender.
I think that's safe to say.
Yeah.
And we've even been not talking about it on air as much as it's been happening off air because we know not everybody listening cares about NixOS.
And so we've been trying to, you know, come up sometimes.
Yeah.
Pace ourselves.
There we go.
That's a good way to put it.
Yeah.
We've been working with stuff that we've been doing that we want to tell you guys about.
And it really kind of got kicked in the next year when listener Maximilian hit me up on Matrix and offered to send a pie here to Westpain.
I said, yeah, let's let's do it.
That's going to be great.
We've got some ideas for that.
We want to build a router.
We've been having a hard time getting our hands on an actual pie to do this with.
Hot commodity.
And, you know, next thing we knew there was a package here at the studio for you.
So what was it?
I know it was a pie, but tell me more.
Yeah, Raspberry Pi four set up with a very nice metal case, all preconfigured.
It had a power supply in there, pretty much everything you needed to get going.
And it was already ready and set up to boot from USB.
So just choice right there.
That's how you want your Raspberry Pi.
Right.
So you're not using any SD card with this SD card hasn't touched it since I got it.
That's so much better.
Admittedly, I need a better USB.
I need some faster disk going on is a more permanent set up for this thing.
But it was, you know, good enough to get started.
That's a pretty big leap from the last time you set up a pie.
I would imagine.
Yeah, it's been at least two years, maybe, maybe longer since I set up a pie.
Doesn't it feel like it's come more?
It's more advanced now.
It is more advanced.
I forgot about the whole micro HDMI thing.
So so far, I've been relying on network troubleshooting, which is good, which is good.
It's just maybe it's tamped down my adventurousness just just a little bit.
So you got it with, I guess, Raspberry Pi OS on it.
Yeah, it was my first time installing Raspberry Pi OS in ages, too.
Oh, you installed it.
OK.
Yeah, yeah.
Nothing.
Nothing out there.
I just but I went out there like an animal and downloaded Raspberry Pi OS.
Well, I had to verify that it was ready for USB boot.
I thought like stick with the standard stuff.
Right.
And just like, you know, this is the stock.
Plus, I hadn't installed Raspberry Pi OS for a long time.
I think, I mean, since it was Raspbian, actually.
Yeah.
Maybe I played with it for Linux Action News.
But in any case, I hadn't played with it since they kind of changed the default pie user
set up, you know.
So now you got to go in.
You can do that thing where you touch the SSH file to get it to open SSH by default.
Right.
And now you can specify a user comp text or you can just put in sort of the same password
hash that you put in your shadow file.
Right.
Stick that and then reconfigure it.
That's pretty easy.
Also figured out how to tell it not to resize to the whole disk.
There's like one hundred and twenty gig USB drive that I just did.
Yeah.
Didn't need all that.
Yeah.
So it's kind of fun, fun to get reacquainted.
That was pleasant to get started with, but of course, NixOS is the real call here, right?
Yeah.
I mean, that's the question.
We looked at it months ago.
I think it was like three months ago.
And the word at the time was like, it's not really ready or something funky about it.
I can't even remember anymore.
Did you give NixOS a go on it?
Did you try it?
I did.
But disclaimer up front here.
This ended up being just a rabbit hole exploration day.
However long this all took.
So it's not yet to the stage where it's like I'm ready to go say, Chris, you should just
deploy this setup that I've been playing with.
But it's not saying we can't get there or that.
But just I was playing with some limitations.
A USB setup that wasn't ideal.
No HDMI.
So it's like doing everything over the network.
And it's the first time I've kind of been doing ARCH64 stuff for a long time, too.
So I'm getting back in the whole groove of like different architectures.
And I don't have a lot of I don't have a you know, I don't have like an M1 system handy.
I don't have any other ARM boxes on my network at the moment.
So I don't have any other like native platforms to debug or mess with the images from in a way.
So that was kind of interesting to figure out like what changes in my setup and my approach
to messing with Linux when I'm on a different platform.
So are you doing I mean, with no HDMI cable, what do you like?
You're powering this thing on.
You got it plugged into Ethernet, I imagine, because you can't even get on Wi-Fi yet.
And then are you checking your DHCP log to see like what IP got taken to figure out what
you need to even SSH into?
Yeah, pretty much.
And then after that, it worked fine.
Well, actually, I just pulled up the pulled up one of the apps on on your phone to scan
the network and map would work just fine, too.
Yeah, yeah.
That's funny.
I just I just I'm that does feel like you're working with one hand tied behind your back
at least trying to get this thing right.
And it's just like it was all unfamiliar.
And I'm here.
I'm trying to do like six new things at once.
I did go down a little bit of a rabbit hole trying to figure out if Kexec worked.
This is important stuff.
We need to know.
And it seems like the answer is yes, but it's not enabled by default in the Pi kernel.
So you got to you got to go change some stuff.
There's also some weirdness around like kernel properly parking other multiple CPU.
So you might have to add a flag to say, like, just use one CPU.
I was wondering about that.
That does seem like it'd be different on the Pi.
So if you didn't use Raspberry Pi OS, but you had, say, Ubuntu 2204 on there.
So I haven't got it to work yet.
I am going to keep playing with it because I really want this to work for really no reason.
But it just seems fun.
One approach is just recompiling the kernel.
I did actually try that.
Jeff Geerling has a nice little guide and there's a few of them out there, including another guide.
I'll link in the show notes for just like if you want to try setting up a whole Pi image from scratch, like compiling a kernel, finding the firmware blob, setting up the user space stuff.
I thought that was just that's just a neat idea because the Pi images are sometimes a little black magic to me at least.
Oh, NixOS.
Yeah.
Not so smooth or?
Well, so going down the rabbit hole of playing with Kexec when I was building my own kernel.
Yeah.
Trying to get NixOS running, I imagine.
Yeah.
And I didn't want to build the kernel on the Pi, right?
Right.
Because that's going to take forever.
Yeah.
So I ended up figuring out how to go do cross compiled builds, which I don't know if that's something you've played with in your Pi.
No, I don't really build much software on the Pis.
But if I was going to, I think I'd have to figure out this.
So this is where another machine does some of the heavy lifting for you.
Yeah, exactly.
I didn't have access to another ARM machine and I didn't want to use the Pi to do all the software compiling work.
So I spun up a Linode just in a Bantu box and then you just install a couple of GCC packages and then you can install some QEMU packages if you need those as well.
Because you would actually, on Linode, you would, right?
Because it's an x86 machine.
Yeah.
So you would need to build in an ARM VM on that Linode.
Okay.
But then it gets even cooler if you go enable the bin format functionality and QEMU's like user mode abilities.
You can have it transparently use QEMU to execute binaries that are built for the ARM platform.
Wow, it's almost like using QEMU as wine.
Yeah.
And so then like I was able to just download either like the Raspbian or the Raspberry Pi OS image or the NixOS SD image, which we'll talk about in a second,
and then use systemdnspawn to just like launch them up.
Really?
And just sort of transparently emulate it.
That is so cool.
And it just uploads the required source code to this Linode to start the build or did you have to get it up?
Oh no, I set that up.
Ah, okay.
So you get it all up there.
Mm-hmm.
Okay, okay, okay.
So it's not like discc was back in the day that would actually like batch up parts of the work and send it out.
Well, there are like remote workers and remote build things you can do, like especially in the Nix world.
But this was just me manually trying to figure out like, can I rebuild the Pi kernel?
Let's try that.
I love it.
That's a great idea.
Yeah.
Use the CPUs on a Linode, not the Raspberry Pi.
Well, because I'm so used to being able to sort of like chroot into a system and then configure it or change it or manipulate that.
But I couldn't without another ARM box.
I couldn't really do that.
I mean, I could edit text files, but I couldn't run any of the binaries.
So it was a limitation I wasn't used to.
But all of that was sort of a prelude to actually starting to really play with.
I was just getting comfortable again, like with the Pi.
When you first start searching for NixOS in the Pi, you'll see a lot of results, some of which are from the past.
The good news today is it does just work with like the default AR64 SD card image.
So stuff has improved a lot even over the last like year or two.
Right.
That seems like a big step.
Now, one of the gotchas there is that it does, I believe, enable SSH out of the box.
But it doesn't come with a password or an SSH key by default.
So you either need to have a setup where you can configure that, you know, first time from a shell.
Or you can also kind of go in there and manipulate the image a little bit and add one in there.
There's some gotchas there, too.
Or really embrace the NixOS way and just build yourself a new image.
And it turns out there's a lot of great tools out there, too, including some docker scripts that set up like cross compilation for you.
So it sort of spins up.
It's like a docker compose setup that will spin you up a docker that's pre-configured to do these cross compiled builds, pull down everything.
It's got the templates.
The next community, man.
The next community is so crazy.
It is.
So which route did you end up going with and did it work?
That's the question.
They've also got, which I haven't tried, but they've got a packer script in there to spin up an Amazon arm box, which is a great idea.
And then that says they can build like the image in like five or six minutes.
Yeah.
Because it's just running on.
Yeah, right.
Exactly.
So I ended up just playing with trying to modify the existing NixOS image, which is how I kind of doubled down on this whole like, can I mess with the image?
Because when you get to the SD card, it's super minimal out of the box, like the main file system just has the next door and some boot stuff and not much else.
And so.
Face with that, I didn't know immediately, like, how do I if I want to stuff a key in here or something without rebuilding it, how do I do that?
Go not wanting to go down that rabbit fall too far.
I actually ended up just installing Nix sort of the way that we played with when you override a VPS and going that route by first installing Nix on Raspberry Pi OS.
I mean, that's probably the most simple, right?
It's tried and true.
It's a method you and I have done before.
That makes sense.
So you took you overtook the Ubuntu host system essentially is.
Yeah, yeah, exactly.
It's like a bootloader for Nix.
They've got that. Yeah, they've got that neat lust rate set up, and so you can basically just install Nix because you install Nix on pretty much anything and then switch it over to basically using Nix OS bootstrap.
That the Nix Wiki has a lot of good documentation on the specific quirks you need in your configuration next to account for, like the Pi hardware and the bootloader stuff and that kind of thing.
And then do the follow the normal instructions.
There is a little bit of stuff with the with the bootloader itself, because you need, you know, it's the way Raspberry Pi OS and some of the other ones do it.
And the way Nix does it is a little bit different, including where things get mounted.
I bet it's quite a bit different.
But I found that just so installing Nix the normal way from from Raspberry and doing like a takeover that way and then combining that with just popping over the bootloader files from the boot partition on the SD image, which is all set up to like copy all the right firmware blobs and stuff.
That was a winner.
Really?
How long? I mean, how many different like research rabbit holes did it take?
Yeah, I'm still kind of like doing a poor job of explaining this because I've like I've subsumed a whole bunch of knowledge and I haven't.
I'm definitely in that state of like, I need to do this one more five more times.
Well, we will.
I want to I want to build a custom image because I think that's probably something we would we would really do, especially if we could just spin up on like Linode build box.
Yeah, yeah. When we were talking about this last night as you were working on this, I could tell you had been going on it for going for a while.
And it was like, you know, but really, you're saying I just want to get to this point where we'll have like the standard image that we can just deploy on a Raspberry Pi spins up.
It's ready to go. Or, you know, a standard image we could deploy on a Linode and it's ready to go.
Yeah, right. Or you could have an easy template that you could just sort of copy and be like, oh, but I'm going to tweak this one a little bit.
Yeah, it's going to be great when it gets there.
I'm sort of surprised that standard image isn't something that's available already. Surely we're not the only ones who want this.
I mean, with Nix, you get so close just by having a heavily modified configuration file.
You get the base OS on there and then, you know, build off that.
I'm sure hopefully some of the Wiser Nix folks can point me to things I've missed because there were you know, there was a lot of different resources to pull through.
I still need to go through some of the links, but the show notes will have all the things I found useful.
Great, great. I'm going to look at that, too, because I have that compute module that I want to turn into a router here at the studio.
And it just I'd love to have something like Nix on there for for a router device like that really seems like a good solution.
So to Brent's point, you know, you get set up, but then there's all like the little small configuration things, you know, all the little like dot files and all of that stuff.
And that's where Home Manager comes in for Nix OS.
And I have been slowly wrapping my head around Home Manager.
And unfortunately, this is not a criticism, but I do feel like it is a bit of a barrier to entry for new users.
There's usually some really thick language and terminology around some of this stuff and how you get started.
But in short, Home Manager, it was just a it's a straightforward way for a user like me to manage multiple configuration options about my system and have my own set of software installed.
That isn't necessarily system wide or isn't necessarily giving me, you know, maybe I don't necessarily have root privileges or something like that.
So I've just got Home Manager set up on my box and I have a tutorial that I found that I thought really kind of cut through all of the confusing language.
And that's saying something right there. I thought this made it a lot easier.
And the idea is, is that you can essentially manage all of your application settings, your desktop environment settings, the packages that you run on your box.
And you can define them all in a configuration. And then this will maintain it for you.
So you get your base system set up and then you deploy this. And maybe you have it backed by something like Git that has all your files in a repository.
If you may, there's there's a lot of file managers. This is like a manager for everything.
So I've just got it going recently. And I think this is the piece. I don't know if this works in a server context, but I think this is the piece.
It's going to take using it on my laptop from something that I'm I'm getting by with.
But I could see I have edge cases that don't work. And I think this is going to fill those gaps for me.
Yeah, maybe take it from something you'd use for like a kiosk machine or occasional sort of machine to something that's personalized for you.
Exactly. Now is Home Manager Nix specific or can you use it anywhere?
Yeah, it's Nix specific.
Yeah, it sits on top of the Nix package manager and does all that good stuff for you. I'll put a link to the tutorial.
But we should reinforce here, Brent. You can install the Nix package manager in a ton of places, including the distro you're using now.
If we get if we get Nix going on that Dev1, we'll totally put Home Manager on that.
You say if, but I think we must.
Well, I mean, I don't want to force it on you.
We can reflash it.
Oh, yeah, for sure.
I think we should. I think that would be a lovely exploration.
So check out the links in the show notes for that one.
Linode dot com slash unplugged. Go there to get one hundred dollars and sixty day credit on a new account.
And of course, it's a great way to support the show and let them know you heard about it here.
And Linode is the hosting provider for Linux Geeks.
They started in 2003 because they saw some of the virtualization capabilities coming to Linux.
And now, nearly 19 years later, we call this cloud computing.
But they've been there every step of the way, building on the technology because they were Linux Geeks and they loved it.
And now they've built something that's so straightforward to use.
It's so affordable and it's so well supported.
I'm honestly thrilled to have a chance to talk to you about it every single week.
It's really something that I am still passionate about advocating you go try because it's the best hosting I've ever experienced.
I run everything on there because I chose to.
I picked Linode before they were a sponsor and I still use Linode.
I think it's a great opportunity to get one hundred dollars and try it out.
They have an easy to use, powerful cloud dashboard.
I use the absolute heck out of their S3 compatible object storage.
I've got servers deployed in multiple data centers.
They have 11 around the world.
They are their own ISP, so they have super fast networking.
They got a powerful DNS manager, VLAN support, DDoS protection.
If you're so lucky, you have that bad luck.
And pricing that's 30 to 50 percent cheaper than those hyperscalers.
They want to lock you into their esoteric cloud with their crazy esoteric language and their horrible, bad, no good support.
Linode flips all of that on its ear and it does it by taking Linux and making it super accessible to anyone, experts or beginners.
They're dedicated to offering the best virtualized cloud computing.
If it runs on Linux, it runs on Linode.
So go build something, go learn something, go try something and support the show and get that one hundred dollars.
Linode dot com slash unplugged.
That's Linode dot com slash unplugged.
So I know we did get last week and I think this would be maybe a sequel.
It seems that I just couldn't get my head out of get.
Wes has been kindly helping me all week, despite his also being in several deep rabbit holes.
And I had a real aha moment that I think, well, both of you either were involved in or would be interested in.
But also that really tied a bunch of strings for me.
And so I'll give you a little bit of background.
So I was seeing, you know, there's like a hundred thousand tutorials about how to use get.
But what I noticed, because my curious mind just can't let things go, is that they're kind of like surface level.
And I was having a hard time the more I used get on our our new website development,
the more I was realizing that the mental model that I was being taught wasn't quite what I was seeing using the command line.
And so I had to dig a little bit further.
So I started digging into the get internals and how it works.
I have a few wonderful links, but the real aha moment was discovering that
they're not when let's say when you commit something, they're not actually doing deaths,
which is how people often present what a commit is.
What it's actually doing is snapshots.
And that brought me down a whole fascinating rabbit hole of like, wait, wait, wait, wait.
So every commit is a snapshot.
Well, what's it actually like referring to?
And I think we've seen this before.
So that got me thinking, well, maybe maybe gets just like butter a fest sort of,
but just for a project instead of a whole file system.
And so as the rabbit hole continued and Wes and I had very many discussions about testing my assumptions
and what I had been taught and trying to pick his brain about how he understands it
and what mental model he's built up, we we kind of dug into.
Thanks, Wes, for sending me a few resources.
Oh, yeah, which is great.
And apparently, if you dig into a few of these resources, you'll understand get more than 80% of people.
So, you know, I'd like to be the upper 20% if I can.
I'm still a beginner.
But one of the great resources that we found was the Git book that talked about Git internals
and they call it plumbing and porcelain to try to like distinguish between the stuff that you use
and the stuff that's happening, you know, underneath the hood.
One of the quotes that really hit me is the following.
If it isn't clear yet, Git is fundamentally a content addressable file system
with a version control system user interface written on top of it.
And that's when I had that like, aha moment.
I was like, ah, what I suspected is true.
And once you dig into it, that's how it's working.
Another one that Wes sent me was from the GitHub blog.
Commits are snapshots, not diffs is the title of this article.
Another little sentence that got me that same feeling, it writes,
it has a reputation for being confusing.
Users stumble over terminology and phrasing that misguides their expectations.
This is the most apparent in commands that quote, rewrite history,
such as git cherry pick or git rebase.
In my experience, the root cause of this confusion is an interpretation of commits
as diffs that can be shuttled around.
However, commits are snapshots, not diffs.
So that got me digging into like, well, OK, well, how does this work under the hood?
And of course, Wes is really good at suggesting that I go deeper and deeper and deeper.
Never once were you like, no, you know enough, just use it.
It turns out that at the base of Git is the concept of a Merkle tree.
And it seems many, many, many of the technologies we've been looking at in the last six months
and excited about even longer than that also use the concept of Merkle trees as the base.
So ButterFS has that, ZFS, the Bitcoin network, Git, of course,
the Nix package manager and also Geeks as well, the new Geeks and IPFS,
which we've researched a ton and maybe should dig into.
But it turns out all those technologies have the same concept in mind.
And that was just quite the aha moment for me this week.
And I wondered if that had occurred to either of you or what you think about that.
I knew it, but it hadn't occurred to me.
I've definitely heard the term Merkle tree used for ZFS and ButterFS and Bitcoin
and a number of NoSQL projects on a number of occasions.
But I never did the math.
You know, I never put it all together.
And I mean, you said it right there, Brent, like you're basically playing the hits.
ButterFS, ZFS, Git, Nix, Bitcoin.
I mean, like, these are some of our favorite things.
Just fishing for Chris.
And that's like an excerpt of the list.
There's a much longer list if you even just look at the Wikipedia page
that includes a whole bunch of network protocols and all sorts of things.
Gentlemen, we have been eating from the Merkle tree and didn't even realize it.
Well said.
Well, it's tasty fruit.
Brent, I think I've got one more like challenge up if you want to go even deeper.
Bring it.
You know me.
Implement your own Merkle.
Implement your own Merkle tree.
This will require Kexec, won't it?
Sadly, no.
No, we can work it in.
We can work it in.
Never mind.
I take that back.
We'll Kexec into like a Python environment for you.
There we go.
Yeah.
And so this is kind of a new concept for me.
You know, I know you're partly joking there, but what would it take?
Like, is this something you could just write in Python or something?
Or tell me a little bit more if you've got something in mind.
Oh, yeah, absolutely.
I mean, whatever language could do it.
But yeah, I mean, I think it underscores two sort of separate things that are important
building blocks that just like hash functions.
Right.
Those come up all the time in a huge array of applications from just storing data to
obviously keeping things secure and cryptography.
And then on the other side, these tree data structures, which, yeah, like are hugely important
in file storage and file systems of all kinds.
You can combine these in very clever and interesting and fruitful ways.
And they're worth studying more.
I agree.
PixelPimp, I think, puts it really well in our live chat room.
Yet another example of why the most important class in the entire CS program is data structures
and algorithms.
Just saying.
I think he's right.
What is it about this that appeals to us so much?
Because not everybody in the Linux community geeks out on this stuff like we do.
What is happening here?
What is the fundamental thing that this this Merkle tree, this wonderful tree is giving us?
Like, what is it?
Is it the way to store structured information that we can build things on top of that seems
to appeal to us three?
Well, I think it's that combination, the verifiability, right?
The sort of integrity checks that we know what we put in as Linus put it in that talk
we linked last episode.
You trust that what you put in is what you're going to get out.
Right.
But then at the same time, it's that notion of history, right?
Like the commits all reference the commits before them.
Yes.
And same with our file systems or with Git.
I think that connects maybe it's less true with the file systems depending on how you use it.
But for Git, especially in Bitcoin, because you have this verifiability and that history,
you can build these open systems that you don't have to hide away or keep keep scared
because it's baked into the structure.
Yeah, that is that is you really touched.
I think you touched on it right there.
I think that really is it.
I think what has been really fascinating to me is the elegance of these systems.
And it seems like, you know, they're using JAWS, you know, fear not the shahs and other
and other YouTube video that Wes sent my way, which I think we need t shirts with that on
it.
But it's the elegance of how it's all sort of put together.
And, you know, to think that that Linus could just go away for, you know, what did he say
something like six months and, and build something like this?
Well, I'm sure he didn't come up with this out of nowhere.
And yet he took what are some really sound concepts and built it into a system that now
is sort of the default for distributed, you know, contributions to any project, which
I think that's what really gets me is and same as Satoshi is just taking something and
applying it to a new problem and building on top of multiple tools and things like that.
Yeah, that's it.
And then the thing that you end up with or that has been really impressive to me is that
it solves a lot of different problems with elegance.
And so, you know, holding some blob of information, but not duplicating it too often, or only
as required, for instance, but just, you know, not only locally, but also in a distributed
fashion.
So if you think of, you know, forks of a project, well, everybody only has one copy of a very
specific piece of information.
And so even if you, you know, start a whole new project, and that piece of information
is in it, if it exists locally on someone else's system, you don't have to copy it over
the network.
So it's also very there's this efficiency that is also, I think, really beautiful, very
appealing.
Yeah.
And so it as a file system, all of those things obviously really matter.
And so I think it's just like, I think I was odd this week at at how lucky we are to have,
you know, people designing this kind of stuff, and that we get to use it.
It's amazing.
I know what you mean.
You're like, there's been times where I've come across projects, and I'm like, this is
amazing that people can be this intelligent and this, you know, think things through like
this, and it's humbling in a way.
So here's my question.
Now, this is like the meta question.
Now that you've gone down these rabbit holes, and you have a broader fundamental understanding
of the tooling, does it change how you're going to interact with Git, and how you're
going to use Git or GitHub?
Or is it just now background information?
Like, here's what I'm asking, I guess.
Could you have just taken the just taken the easy answer and accepted that and or do you
feel like having gone down this rabbit hole, you're better equipped somehow?
Is there a real difference?
Why are you asking?
Could someone have done that?
Or Brent?
Because I think that's true.
Okay.
I'm just curious.
Is there utility to it?
Or was it just intellectual playtime?
No, I was trying to solve a real problem, which was a lack of understanding of, okay,
so our little website MVP, Stefan made a wonderful demo for us.
And he's hosted this on his, you know, GitHub.
And so I'm trying to contribute and learn Git at the same time, right?
It seems pretty simple.
So Wes suggested I make my own fork, which seems like a totally standard way to help
with open source projects.
Right.
That seems pretty straightforward.
And the GitHub interface, for instance, makes that real easy.
So I, you know, last week, as we noted, made my first contribution and all that works great.
And then I sat down this week and I thought, okay, I'm going to do the next thing that
I want to work on.
And I thought, well, how the heck am I going to get the new stuff that he's done on his
project and bring it over to my, you know?
And so I started looking that up.
The answer should be fairly straightforward.
And it turns out there are like three different standard ways of doing it.
And any resource you look at does it a little differently because, you know, why not?
You can either, like, fetch something and merge it, I guess.
You can do a rebase, which some people are like, yeah, do a rebase.
That's the standard way.
And other people are like, duh, I'd be very careful with rebasing.
You could totally screw things up.
So the whole reason for my going down this rabbit hole, which maybe I should have mentioned
at the start of all this, was to try to understand, like, well, what is this all doing?
And what is it doing?
You know, there's also Git pull, which turns out is just sort of a macro for a few other
functions, Git fetch and Git merge.
And so it's like, well, I need to understand what's actually happening so that not only
am I, you know, using it short term, but I want to understand how to use this tool to
its full potential for the long term.
So I figured, you know, it's easy for me to dive into these rabbit holes.
But that was the real problem I was trying to solve was, well, what is it actually doing?
And why am I having such a hard time figuring out how to sort of do this relatively simple
operation?
I could easily visualize what I want to do.
And yet, it seemed relatively confusing as to which one I should be doing, you know,
if anyways, so that's how I got there.
Yeah, it seemed like you didn't want to just have to have to use these scripts without
understanding what they were doing or the potential consequences.
Yeah, I think I've learned from, for instance, you know, copy and pasting our sync commands
that if you don't understand what it's actually doing, you can, you know, even the slightest
flag can get you in a lot of trouble.
So I've wisely learned that it's better to understand what's happening first and then
implement it.
But I was having a hard time with that because of the conflicted resources.
You deleted the whole MVP, Brent?
How?
It's just a dash D. I don't know.
You know, Brent, the thing that you said in there that I like a lot is you said, well,
if I'm going to use this thing for a while, I should probably learn what I'm actually
doing.
And that's the part that really clicked for me is I really like that mindset.
And I have a very similar mindset.
And it's like it's also having a kind of this confidence that, yeah, you can probably figure
this out.
Right.
You're clever enough to figure this out.
And if you're going to be using this, you should probably know what you're doing.
And I like that.
So I'm really I'm really impressed.
The only thing that's kind of a red flag for me and I'm sure the chat rooms probably pick
this up and I'm sure it's going to be a comment.
So I should probably just bring it up right now because I think you're probably under
the influence.
But I don't know how many times you said I don't know how many times you said it.
Somebody maybe is keeping track, but Wes suggested has come up a lot.
And I'm just a little concerned that perhaps there's a long term campaign by one of the
co-hosts on this show to influence the other co-host to become a closure developer.
That's all.
How did you know that came up as well?
There's like a nice low key campaign by Wes.
He's like, you know, maybe you should check out this.
You know, maybe you'd want to know more about this.
And he's just gently guiding you down a path right now.
I'm not prescribing anything.
I'm just going to try to suggest some, you know, interesting, interesting leads.
I'm on to you, Wes Payne.
I'm on to you.
Bitwarden.com slash Linux.
Get started with a free trial of teams or enterprise or a personal account at Bitwarden.com slash Linux.
I started years ago as an individual user.
Then I became a subscriber when I wanted a few more features.
It's really nice the way you can step it up.
You can absolutely try it for free.
Get a sense of what Bitwarden can do for you.
And they get an idea if the value is there.
I think you'll find it is.
But you have that range.
You have that flexibility.
And our audience is always, I think, a little bit more comfortable with software like this
that's open source.
And Bitwarden is.
It's trusted by millions of individuals as a very active community.
So you have Bitwarden support directly and you also have a big community, including many,
many Linux users like Wes and I that run Bitwarden every single day.
Bitwarden has account switching support to to make it really easy to switch between like a personal
account and your work account.
Or if you're working on a free software project and you want to keep your personal stuff and the project
you're working on separate, Bitwarden is great for that.
They've recently introduced a username generator.
This is just totally great.
So now why not have a unique username and password for every service you use.
Right.
But Bitwarden takes it even a step further and they're now helping you generate a unique email
alias for every service.
And this comes across to the mobile as well.
So if you're on a website, you create a user account, a password, it saves it.
Then you go log in on your mobile device in the app.
They figure all that out for you.
In fact, they make it super easy on Android to switch between accounts while you're doing the
autofill in a login screen.
It's like next level.
And on iOS, I love the face ID integration.
Love that.
It feels like the future is so great.
Using a good password manager might be one of the best things you can do for yourself and your
accounts online.
I mean, you might already know that.
Maybe you haven't pulled the trigger yet, but you probably know that.
Maybe go check it out if you haven't done this yet or maybe someone you know in your life, in
your workplace, friends, family, maybe they need a little bit better password management.
Something like Bitwarden could really make a huge difference for those folks.
And it's easy to get started.
Just visit Bitwarden.com slash Linux.
Try for yourself or your business and support the show.
That's Bitwarden.com slash Linux.
And now, as the French say, it is time for Le Boost.
Bronzewing boosts in six days ago with 1337.
That's LeetSats.
Hey, Chris, take a look at OpenMTCP router.
An open source solution to aggregate multiple internet connections.
You can run it on a Pi and even just add it to your current setup.
Because I think you might want like one more layer of net and that might be perfect.
It's going to be great, actually.
You know, this is what he's saying here is this is like an open source alternative to my Peplink.
That would be a fun project.
And so to be clear, the project name is OpenMTCP router and we'll have a link in the show notes
for that because this looks really cool.
Anybody out there has any experience with this, please let me know.
I would really like to know if that is a viable option.
Another boost from logic.
Six days ago, 500 Satoshis.
Boost.
First, we've got a tip, then a question.
The tip is put underscore no map at the end of your SSID.
Break the Wi-Fi location tracking and increase your privacy.
This is the thing, I guess, but the Google truck would have to respect that no map thing.
That's really good to know.
Good tip.
Yeah, I've never tried that.
It's an ugly hack.
I'm curious about this no map thing.
It seems obscure and not like a standard.
Can you give me some background?
Like why would this work and where would this work and when would it not work?
Because it seems kind of like one of those hacks that only works in a very specific case.
Yeah, I think constitutionally speaking there, Brent, it's not a guarantee.
I think what it is is that when Google and Apple and all these other companies that go around
and do essentially war driving and find locations of APs and tie them to GPS coordinates,
I think they're supposed to just respect this.
Yeah, it turns out I think this one's a Google standard.
Microsoft, for instance, has a different one, which is underscore opt out.
So you could think this article from Android Police suggests you could do both.
You're getting pretty ugly in your SSID, though.
So you have to add a long string of exclusions to your SSID.
I hate that so much.
I hate that so much.
Wow.
That's really horrible.
We'll just all be unique in the order of our exclusions and that's how I'll remember.
Yeah, it's good to know, though.
And a question from this boost.
Love in the live show, but boost in the show versus the last episode.
Is this a workaround way to live boost in the short term at least?
Yeah, so the live boosting is it's near, but we're not there yet.
We have to we have to start generating our own RSS feeds for that.
And I'm going to have a chat with Alex Gates, the podcasting consultant on office hours this coming week about how they are,
how they're doing that right now with PeerTube so that the setup is that you stream to PeerTube and you could do audio or video.
And then that pushes out to the podcasting 2.0 apps and they open up their app like say Podverse and you'll have your list of shows and Linux unplugged would be listed there.
It would just have a live badge next to it.
And then you would hit that and it would just tune the app into the live stream and you could boost sort of like a YouTube super chat during the show.
Yeah, I think that'd be I think it'd be really neat.
So just that functionality alone, I think, is a brilliant, brilliant idea.
Like it's sort of silly that you have to leave your podcast app to listen to a live podcast when you think about it.
It have always been in the podcast app, but because there's been no evolution of the standards, there's been nothing the developers could implement.
We've just come up with solutions that are outside the podcast app.
And I think that has been a detriment to podcasters because imagine.
That means that it puts all of your subscribers, gives them all of the option to tune in live when they want.
And that's also happened to use some other random platform that might be Discord or Twitch or YouTube.
Right. Right. I think that could be really great.
And they're working on tying in cross app comments that are based on things like Activity Pub and whatnot.
So I think also XMPP. So there could be a lot of really cool solutions coming down the pipe.
So we are following it very closely logic, but it's still early days.
That's for sure. Linux Trucker boosted in six days ago with 50,000 sats.
Wow, thank you. That's great.
Linux Trucker, it's nice to hear from you, too.
They just wanted to say thank you for making Atlanta traffic just a little more tolerable each day and every day.
Self hosted, unplugged, LAN encoder, keep the miles rolling and give me plenty of great ideas to fill my time at home, sometimes to the wife's chagrin.
You guys rock. Keep doing what you do. The Linux Trucker.
Thank you, sir. That's very nice of you.
Golden Dragon also wrote in with a boost six days ago, 2222 sats.
A row of ducks.
I would love to get into get, but every time it seems to go, Ari, I have to give it another shot.
Well, we have a bunch of resources. If you're into the internals of get, I'm going to put a bunch of stuff in this week's show notes.
But last week, I think some of the some of the resources we shared are a good place to start.
So, you know, to Golden Dragon, perhaps you like Brent just needed to kind of understand the underlying technology better.
And so that could be that could be the trick boost.
Well, we've got a boost from Gene Bean five days ago, 10000 sats.
Nice. Thank you, Gene Bean.
If you are interested in a GUI for get, even if just for the hard parts like resolving merge conflicts, then check out get cracking.
I love it. And I think it helps ease people into get as well.
But oh, wait, this is a double boost.
1000 additional sats in this message.
LOL. I sent my first boost before hearing the pick was get cracking.
This is hilarious. And Gene Bean, don't feel embarrassed at all, because first of all, thank you for sending the second boost to clarify.
But, you know, the great thing and also the tricky thing is the boost button is in the podcast player.
So you don't have to leave anywhere to send us a comment.
And so we say something and sometimes people comment on it and then we cover it later in the show.
That does happen occasionally, but it gives us another chance to hear from you, which we like.
So there's that, you know, I will note that get cracking is not an open source project, though it can be very beautiful.
I did discover this week that I don't think I mentioned or actually some people wrote in and suggested it K as an open source alternative.
Not quite as beautiful, but kind of tries to accomplish some of the same things.
So give that a shot, too.
You might also try on get, which is like a node app, a similar web app style.
So a lot of options.
All right. All right.
User 386 boosted in five days ago with 5000 sats.
B-O-O-S-T.
Listening to this show got me excited about my career again after it hit a slump.
When I started listening to LUP during the pre Linux Academy days, I was on the help desk answering the same calls day in and day out.
I have been there. I have been there.
I got so burned out dating myself, but I got so burned out fixing virus infected XP machine.
God just drove me crazy. It just drove me crazy.
But user three six is now I'm a sys admin at a decent sized enterprise and I get to tackle new challenges weekly.
Thank you for changing the trajectory of my career and a double PS.
Give that good boy Levi some pets.
He is a good boy. He's such a good boy.
I don't know if we can take credit for that 386, but we do.
We do often hear that we help people, you know, keep their focus, stay excited about the career they're in and double down on it.
And that I think is I think a really good thing.
And if that's a part we can play, then we will gladly do so.
Yeah, keep boosting and tell us more about your adventure sometime.
Yeah, I do keep us updated.
Cospelein boosted in five days ago with 3690 sats like he always does.
Do not I repeat, do not roll back a snapshot on an umbral VM.
Oh, you will lose your sats.
We were mentioning last week, like, how should we do this update with that?
Well, we could take a snapshot with the VM.
He says instead, do a channel state backup and restore that if you need to.
Otherwise, the network will think you're cheating if you try to restore a snapshot and will close your channels and the funds will go to the other party.
Thanks for the show.
Well, that is a really good thing to know.
Mm hmm.
And Cos reached out on Matrix.
He's like, did you see my did you see my booth?
And like, of course, I saw your booth.
Yeah, of course I did.
Like email and maybe Matrix Telegram, maybe Twitter, maybe boost.
Yeah, definitely.
That's your version of doom scrolling.
Yeah, I just wait for it to scroll for me.
Anonymous also sent in a boost four days ago.
One thousand three hundred and thirty seven sats.
Four score and seven boosts ago.
My vote is for ANSI dot sis by a master boot record.
I think they mean for the song.
Chris, do you have this?
I do.
Should we sample it?
Oh, I think we could.
ANSI dot sis by master boot record.
Can you guys kind of guess what sort of vibe this song is going to have?
Does it? Yeah. Yeah.
This is going to be pretty great.
So chat room, let us know what you think about it.
I don't know if this is our winner, but we have been searching for the song that we play before we start the show to get us hyped to do the show every single week.
Is this it?
All right, what do you think, boys?
It sounds like sampling a dial up modem to me, which I kind of like and disk drive parts and stuff.
It's a fun song. Yeah, it might be too intense.
Yeah, like happy or playful.
Yeah. Right. But what I would like one thing I think has going for it is I could see it really pulling us out of whatever mood we were in before.
It's very captures.
This part really sounds like disk drives right here.
But you can kind of hear it, right? Like the searching.
Yeah.
Yeah, I like it.
I could see adding it to our our live stream mix of songs.
I think that's where it would fit really well.
But I don't think it is our start the show song necessarily because both of you and I are a little lukewarm on it.
How are you feeling, Brent?
Yeah, I think you're right. I enjoyed it, but I don't think it's the song that we want to listen to every week for endlessly.
I would say the rest of our lives.
That being said, I think we are honing into better and better suggestions all the time.
You know, we're kind of like narrowing the band of what we're accepting.
And I think they're they're all kind of in that sweet spot.
But we got to we got to keep going.
I can't tell if Brent just complimented or called out the audience for the suggestions.
Both? Yeah.
We love the suggestions. Keep them coming.
MG also boosted in five days ago with 512 sats.
It simply says Airwolf. Yes.
Yeah, we got some votes for Airwolf.
I think Airwolf is my top contender right now, but I still don't know if I could marry it.
You know, definitely wouldn't mind going out to dinner again with Airwolf, especially some of the remixes.
Yeah, if we get some more remixes tossed in, that would help rekindle things.
But like as the holidays get close and we're going to be recording a double or something like that, am I going to want to listen to it twice?
We'll still have the same effect for those double days. Good question.
Yeah. These are the things, man. These are the things we got to think about.
Well, we also got to think about thank you boosts.
Including 321 sats from Bon and a big old thank you boost from Jeff.
23,451 sats.
Dang, Jeff. Thank you. That's great. And also the ram for Brent too.
I feel like that's a baller boost. Thank you everybody who did boost in to support the show.
Don't forget for the next few weeks, your boosts will be split with Brent to help with his travel funds to get down to the studio so we can make some content while gas is super expensive and sats are cheap right now.
So you can boost the dip. You can buy a little more and send them in and make a bigger difference than perhaps you could have a few months ago.
We do have two picks that I want to cover before we get out of here.
We've been talking about pod verse on the show and this is a new free podcast player open source free software that's on iOS, Android and available for the web.
And I had a chat with one of the developers on office hours recently and I asked him Mitch in there.
I said, Mitch, you know, would you consider releasing your web player as an embeddable element that anybody could use on their website?
Because it's one of the best web podcast players I've ever seen and it has great support to visualize chapters and metadata.
And of course, it does support boost and supports playlists and it displays the artwork really nice.
It's just a clean and really nice player and it's open source.
And Mitch said, well, actually, we're already working on it.
And so this week they have released the embeddable podcast player from Podverse.
So you go to Podverse dot FM slash embed and over there they got a player demo that kind of shows you how it works and your options there and how you customize the CSS.
So not only is this just a great podcast client that has a lot of the new podcasting features, but now they've released it as an embeddable player for your website.
And I think we're going to look at it for the new J.B. website as a potential.
Very, very, very excited about that.
You know, I did notice that they use the Linux unplugged artwork for their demo and also some of their marketing material.
That's real kind of them.
Yeah, I feel like that might be a nod to our conversation on office hours, perhaps, where I asked about that.
It is really neat to see how quickly these podcasting clients are developing and adding new features.
Speaking of new features, an application that we talk about on the show from time to time and absolutely love for connecting our VPS together, Nebula.
This is another mesh networking option that is also based on the noise protocol, I believe, for encryption.
And Nebula has been a tool that we kind of did a round up, oh, maybe a year and a half, two years ago.
And just sort of steadily use it and don't talk about it a lot.
But version 1.60 came out three days ago.
And in here is a new experimental feature that I guess is one of their most requested feature, but it's the ability for clients to act as a relay.
So you can really bust through difficult network situations now.
Right, because if you recall, they've got these lighthouses, but that's really just for like setting up the connections.
And then the actual traffic was always sent peer to peer.
But now, presumably with these relays, you could have all kinds of relays set up in your private infrastructure, public infrastructure, whatever you needed to keep the plumbing going.
Nebula is really cool.
So we wanted to have an opportunity to mention it on the show.
So check the link in the show note for that version 1.60 brings that.
Surely that uses a Merkel tree under the hood somewhere, right?
I don't know about that, but it does use the noise protocol, which WireGuard also uses.
So we love that.
So there's a lot of common threads and themes for our technology that we love.
All right, gentlemen, is there anything else we need to mention before we get out of here this week?
I'd say office hours on Tuesday live.
Sure.
Office hours Tuesday live.
Join us over jblive.tv, noon Pacific, 3 p.m.
Easter is the same time we do up on a Sunday, we just do it on a Tuesday.
See you next week.
Same bad time, same bad station.
And the Mumble rooms open for office hours as well.
Details of Linux unplugged dot com slash mumble.
We have the quiet listening room.
You can hang out and get a super high quality, low latency Opus audio stream.
Or you can go to Jupiter dot tube and watch the show live.
Hang out with us over there or get the replay.
Or of course, Linux unplugged dot com slash subscribe.
Get the RSS feed and you listen to it whenever the hell you want.
And last but not least, a huge thank you to our members.
Our unplugged core keeps us going and get special versions of this show ad free and the full live stream as a special thank you because they matter to us.
And you can find out more at unplugged core dot com.
Thanks so much for joining us on this week's episode of the unplugged program.
See you right back here next week.
So after this, Wes and I are going to go cook up some food.
We've got some short ribs that are food.
They're in the bath right now.
You know, I still tell people that we make food that way.
Like, wait, you soak it in water.
But yeah, but it's in a bag.
So it's like boiled.
No, it's not boiled.
It's like slow cooked.
That's right.
It's real slow.
Real slow.
It's really what?
It's what the water has a thermal mass, right?
And that helps keep it a real steady temperature, right?
Whereas a slow cooker, I mean, I guess it depends on the slow cooker.
But with the water, you got the thermal.
Yeah, right.
You just keep it real tight, focused.
So here's how I knew that Wes was probably looking at his DHCP log yesterday.
Wes is like, he sends me his messages like, there is an ESP home on my Wi-Fi network and I can't figure out what this device is.
And I think I would know if I added like a smart home device to my network.
I usually do, right?
Right.
Like, you'd know if you replaced your thermostat.
And so we're sitting there, I'm like, you know, chatting back and forth.
And what could it be?
And we're talking about it.
And I'm thinking like, I don't want to suggest like the obvious because it's kind of insulting to like say like, well, did you put a smart light in anywhere?
Like, obviously you're thinking of that, right?
But he figured it out.
He figured it out.
And you should tell him what it is.
I don't want to steal it.
It's pretty great.
It's the sous vide.
The sous vide itself has an ESP home in it.
No way.
That's great.
I want to take it apart now and find it.
Right.
I think that's so funny.
And you do have to, you control this thing with an app.
So of course they needed a way to get on the network and do all of that.
And of course the way they do, you know, it's all phoned home too, unfortunately.
I wish it was open source.
Because of course I tried to scan it and stuff, but all the ports are closed.

Not to start two shows out in a row with a system D joke,
but Knoppix 8.6 is out,
the new release is based on Debian 10 Buster,
and they've ripped out that system D.
Well, yeah, I mean, you just write whatever you want
in etsyrc.local, Chris.
It's easy.
You don't need a system D unit.
Oh, hey there, and welcome into Linux Unplugged,
your weekly Linux talk show.
My name is Chris.
My name is Wes.
Hello, Mr. Payne, and let's not wait another moment.
Let's bring Brent in too.
Hey, Brent.
Hello.
In studio.
Nice to see you.
Always good to be here.
Nice to see you.
Good to have both of you here,
and of course, we've got Cheesy, Alex, and Drew as well.
Hello, gentlemen.
Hello.
Miss you guys.
I miss you too.
Yeah.
So they're not in studio with us,
but they were last week.
Everybody was in studio last week.
I mean, this is the next best thing.
At least we get to hear each other.
Yeah, it is nice.
I mean, this is what we're familiar with.
We have post-sprint depression right now.
A little bit.
It's nice to have Brent still here
cooking me brunch though.
Like, that's kind of helped smooth out the transition.
So I appreciate that, Brent.
It's a community service, really.
It is.
Keeping your podcaster happy keeps the shows good.
And of course, our virtual lug is here.
Time appropriate greetings, Mumble Room.
Hello.
Hello.
Hello.
Hello.
Hello, good to see you.
Bite and Dill's in there, hello.
And of course, Mini Mac as well,
and more joining as the show goes on.
That's cool.
Full house today, I love it.
The Mumble Room is always available
if you'd like to participate.
And we start this week with some community news, as always.
And it's a big headline from System76.
They have a new firmware manager
that updates both from their own repository and from LVFS.
Each components, the System76 firmware
and the LVFS component are also removable.
So if you wanted to deploy this graphical firmware
update tool they've built in Rust, by the way,
you could actually remove the System76 component
and just use it anywhere.
But the beauty is for System76 customers,
they'll now have a central location in GNOME settings
to update both LVFS firmwares
and their vendor-specific firmwares.
And this is important for them in particular
and other distributions like elementary
because they don't use GNOME software.
Right, if you just happen to be one of those distros
that has your own application center,
there wasn't really a solution before this.
This is pretty neat, the way they've built this,
making the System76 part modular.
I like that.
I mean, I think it shows,
that was kind of one of our big criticisms.
It was great that they were managing firmware,
getting it updated,
but there were kind of two players in this space
and okay, maybe they don't have to perfectly mesh,
but at least now we're playing ball
in a polite and friendly, open way.
I think the question has been,
well, why not just use LVFS completely?
Yes.
And my understanding is that's just not quite possible
with the current upstream OEM hardware
provided that they have.
I mean, you can imagine,
we'd see Apple all the time as an example.
Sometimes it's nice to have control of the complete stack
that you're working and building on.
So they seem to have found something here
that is a nice,
actually, I would say this is above and beyond
what you would expect because it's open source,
it's well engineered, it follows best practices,
it's completely open source up on GitHub,
and it is available in a way
in which you can remove the System76 components
completely, they didn't need to do that.
No, it's like a generically useful open source application.
And it's designed in such a way
that it plugs into GNOME settings,
like it's just part of GNOME settings,
or it can be a standalone GTK application as well.
And the back end is toolkit agnostic,
so if someone wanted to write acute front end,
they could, they would just need to submit the patches.
That's what you mean by well engineered.
It really, it's pretty neat.
So I had a couple of questions.
So I contacted Carl, the CEO of System76,
and I had basically a big picture question
and an implementation detail question.
And I think his email, I'll just read it to you,
he says, so far the coverage has been pretty accurate,
which is great to see,
because I always like to ask when I contact people,
how have you felt the coverage has represented
the accuracy so far?
Because that's a great way to ask them,
like, what are people getting wrong
that you'd like to respond to?
And you get a little insight into their thought process too.
I feel like it's a very revealing question.
And he writes, so far the coverage has been pretty accurate,
and they clarified some of the confusion
about distribution and repackaging,
which was a big part of the question.
But he says, most importantly,
I want to stress that the feature only requires
a small set of standard dependency support
for either firmware from us or LVFS,
which I think is awesome.
And then I asked him about a tweet,
because Carl had tweeted that this was the beginning
of System76 becoming a bigger software player.
And I asked him if he saw a future
where Pop OS could potentially have more users
than they have hardware customers.
And this firmware manager could get adopted
by distros like elementary and others that use GTK,
but don't use GNOME software.
I could see that really taking off actually.
People love Rust is so in right now.
So something built in Rust grabs attention.
It also just means they'll probably be able to ship
an easily installable package, right?
This is going to be available as a modern Linux application
that's easy to get and easy to run.
That's being maintained by an upstream provider
that has business motivations to keep it current.
A reliable, yeah, exactly.
So I asked him, I'm like, there's potential here
where you become just as much of a software shop
as you are a hardware shop.
And his response to that is we create features
with the hope that it's useful,
that everyone can use them,
but they focus on the needs of the customers first.
If the needs overlap with others,
so our work can be valuable to the broader community,
that's kind of great, I think is the implication.
He says, but this is what's special about open source.
There are all these places where the work overlaps
without conflicting with the ability to create unique
and focused products and solutions.
That is very well said.
It's profound.
Yeah, I mean, we talk about that all the time,
but that kind of just sums it all up.
We can, sure you compete with people,
but most of the time we can all work together.
And then he ends it with for us,
software and hardware are inseparable.
Hardware is the business model that enables us
to invest in the Linux desktop.
I think I've heard that before from somewhere
that's fairly successful.
Right, I mean, it's kind of an established model
in some ways.
I think they're really proud of the work.
I think they're really proud of something.
I think they feel like they've made something really good.
And I think they have.
Yeah, I don't know how easy it is to get at this moment,
but there is a GitHub repo we'll have linked
in the show notes, so you can go build it yourself
if you've got the Rust tool chain.
Yeah, we poked at it a bit and kind of decided not yet.
We'll wait till it's a little easier.
Maybe somebody's packaged it up a little bit easier
outside of Pop OS.
But we will have a link to the GitHub
with all of the details if you are curious.
But speaking of doing a great job,
the chairman for OpenSUSE has stepped down.
Richard Brown is leaving the project
and he's handing it over to another member of SUSE.
Richard will continue to work for SUSE as a developer,
but he will no longer be the chairman of OpenSUSE.
It's pretty big community news for OpenSUSE.
Yeah, passing the torch on to the next leader.
It seems like it would be sort of obvious.
The elephant in the room, if you will, if I didn't mention
the fact that they're working
on further independence from SUSE.
They're working on this new council
that we talked about before on the show.
He says in his changing of the guard post
that that's not a factor here.
And I just wonder what the root of this story is
because Richard didn't really share it.
So it leaves some to the imagination,
but I think he leaves a good legacy.
Five years, he was a passionate chairman.
Oh, very passionate.
I mean, I think did a good job
of trying to espouse the benefits of running OpenSUSE.
Good luck to whatever next endeavors he takes on.
We'll see what comes on next.
We'll see what other stories develop.
And of course, keep an eye on OpenSUSE in general,
just like we keep an eye on Fedora.
We have an update for Fedora 31.
It looks like the month old proposal
for the upcoming Fedora 31 Linux distribution
to release, to stop, I should say,
releasing the I-686 repositories for everything
and modules was voted on today by the Fedora engineering
and the steering committee.
Say that again, Chris?
No, I'll say it.
Yeah, it's a little- The Vesco Group
gave their formal approval today
for permitting these I-686 repositories
to be removed beginning with Fedora 31.
This also goes hand in step with Fedora 31
having already decided to stop I-686 kernel builds.
Mm, this is doom.
Obviously, all games are ruined.
This is gonna destroy wine on the Linux desktop.
And it was just about to be the year of the Linux desktop.
We're screwing it up.
I know, I can't believe it.
Right, Drew?
It's all- No, no, no.
Hold your horses.
What?
Oh, I was getting so worked up though.
Multi-lib is not going anywhere.
This is just to drop direct I-686 builds.
So they're not going to be releasing an x86 kernel.
They're not gonna have an x86 release,
but they are continuing all of the multi-lib work.
So if you're running 64-bit, which after 30, with 31,
you definitely will be running 64-bit.
You can still run everything that was in the 32-bit.
You're just doing it through multi-lib.
That's such a good clarification, Drew,
because I mean, it's kind of just recognizing
what we're all already doing.
Yes, I need to run some 32-bit applications,
but I want to run a 64-bit system.
Yeah, I know, that's perfect.
I just don't know what I'm gonna do with this pitchfork now.
Dang it, I got it all polished up.
You know, I got the flames, put the kerosene,
whatever it is on there, so it would burn real nice.
You know, I put a lot of effort into that.
Oh, I think you'll find something.
I was up all night working on that.
Well, you know what?
I was wondering why it took so long.
Why did it take a month for them to decide?
Was it like super hard?
Did they deliberate like just constantly?
No, no, it's just the way time you worked out,
you had flock and you had to punt at once
and there was just a lot going on.
I mean, it's worth considering too, you know.
You don't want to have to take it back.
It is worth considering, yeah, it would be.
Well, you know, I bet, just like with the Ubuntu thing,
if there was some situation where things got a little weird,
something tells me a container or a flat pack
would probably solve the problem.
Put it all in a flat pack, that's what I always say, Wes.
Just put it all in a flat pack.
Now we have a new feed, a new content we're exploring,
minimum viable podcasts, if you will,
fun extras that maybe didn't fit in the show,
an extended interview or, for example, today,
Chris and Wes react to old clips of Linux unplugged,
it's brutal.
Oh, so bad.
We have new content, extras.show
and subscribe at extras.show slash subscribe.
It's the Jupiter Extras, the Jupiter Extras.
I mean, if you're at all curious,
I'd say just, you know, just subscribe, why not?
We're kind of excited about it and have all kinds of ideas
about stuff we're going to put there, so give it a try.
As they say in the biz,
we have a pipeline full of content
already queued up and ready to go.
Stay a while and listen.
Yeah, so extras.show, irregular,
extra content that we're having fun with.
We ended the Friday stream.
We'll be doing more live stream community events.
I don't know if we want to say anything yet, Cheesy.
Should we just hold on?
I don't want to spoil anything, but we got more coming.
Yeah, I don't want to spoil anything either,
but there is some stuff coming around the pike
and I think it's going to be good.
I think it's going to be bigger than the Friday stream was
in a lot of respects.
And with extras, it gives us definitely a platform
to try a lot of things and places to put stuff
that we really didn't have a place before.
So, you know, with a lot of these interviews and stuff,
you can only put so much into the show
without it being too campy almost.
So this gives, you know, that person
that was being interviewed an opportunity
to have the full interview aired.
And I think it gives the listeners something extra.
Extras, you might say.
It's been fun.
It was something that we were considering
during our recent sprint.
Everybody got together and it just like took off.
It took off in a big way.
The first thing we published
was the full Thomas Cameron Linux Fest keynote.
Then the Choose Linux crew got together
for the first time in studio
and recorded Elle's trip to Hacker Summer Camp experience.
Oh man, there's a lot in there.
And then this morning, we published you and I reacting
to old clips of Linux unplugged.
And tomorrow morning, there will be some breaking news
that doesn't fit in anywhere else.
So it'll be in the feed.
Oh yeah, stay tuned.
So go over to extras.show and subscribe.
It's just a little things here and there,
just fun extra stuff.
And we'll have, like I said,
a whole pipeline of content coming soon.
And I'm really happy with the way
the React series turned out.
We might do it.
We might turn it into a series.
Oh, I hope so.
We'll see what people say.
Extras.show, go check it out.
Now, with all of that said,
we should probably talk about
why we're gathered here today.
I spent the weekend on Wayland.
Who's Drew's fault?
We'll get to that.
Oh yeah.
And it meant going gnome shell for a bit.
And then it meant learning how to live with Wayland.
And I've got some observations.
I've got some tools, some tips, some tricks,
and we'll do a little kind of recap
of where Wayland support is at
and why it's taken so long.
So first,
a little of that old housekeeping.
I have to give a shout out
to the Linux Academy YouTube channel.
They've posted two really great tutorials recently,
Scanning Your Network for Vulnerabilities with Nmap.
It's eight minutes long.
It's a great tutorial.
Oh man, what distro is that?
Oh, that's Kali, of course.
That must be Kali.
Yeah, so using Kali in there.
And then there's another video
that was posted just a couple of days ago,
how to copy directories around your network
with SCP recursively.
Three minutes and 49 seconds.
So really quick videos, youtube.com slash linuxacademy.com.
Go check those out.
And then they're continuing to post
longer in-depth tutorials on the Linux Academy blog,
linuxacademy.com slash blog.
Good additional content that often complements
what we're covering in these shows.
Well, yeah, it really does.
So go check that out.
It's youtube.com slash linuxacademy.com
for the YouTube channel,
and linuxacademy.com slash blog.
For that blog.
There's a lot going on with Wayland, guys.
There's a lot going on with Wayland.
It's been a while since we talked about it.
I feel like some distributions,
some people started running it by default
with Gnome, for example.
Yep, yep.
And then we didn't hear anything else.
Is it just going well?
Is no one using it?
We haven't talked about it.
It's almost become a meme, really.
Like, when is it going to ship fully?
Like, everywhere.
Wayland begun in 2008.
Version 1.0 was released in October of 2012.
Wow.
So it's been a few years since this project started
as we record this here episode.
And if you look back at the history,
like the announcements of Wayland,
it wasn't described as the X11 killer.
In fact, it was kind of downplayed
as a tiny display server that might be good
for embedded media devices that, like, are doing displays.
Or maybe this might be the display server that GDM uses.
You'd still use X for your desktop,
but GDM would use this Wayland thing
because they were concerned about the overhead of GDM.
And that's the initial launch intention behind it.
But that started to shift.
Almost, if you look at the history of things,
and we have some links in the show notes,
about six months after Wayland's release,
everything kind of shifts.
You got to figure, like, people were looking for something.
And even the project begins to describe itself
as a simpler replacement for X.
I mean, this was kind of inevitable, right?
X is so old.
It first came out in 1984.
OK, all right.
I mean, we do computing a little bit differently these days.
And I mean, even just like in, say, 2013,
there were already a ton of issues,
and it was showing its age.
I mean, some of these are from the core protocol.
But also, most modern X servers run 23 of the 27
possible X extensions.
Yeah, this extension thing is like spaghetti.
Yeah.
And the policy is basically always
preserve backwards compatibility.
And so X.org, the main implementation
we're all using of X, it has four different input models,
four display models, and two rendering models,
despite the fact that many of those are actually obsolete.
So they were probably needed at some point in history.
Yeah.
And one thing, we kind of talk about what
happens for us as the end user.
And that's important.
But we should think, too, this is an open source project.
There's developers here who are putting time and energy.
And one of the developers describes it
as we've kicked that can as far down the road as we can.
And that's it, right?
If it's hard to work on, that's going to be security problems.
And that's just going to make it so no one wants to contribute.
Yeah.
I recently saw a developer post by the Fedora developers
who are some of the primary developers on Wayland
and, by contrast, also the maintainers for X.org.
And in the blog post, they write very clear, clear as day.
We now consider X.org in maintenance mode.
We are shutting it down.
We are transitioning off.
Wayland is the future, which kind of got this idea in my head.
So when Drew came along and was trying this, I was like, hmm.
That Fedora pusher, Drew.
But how did we get here?
Because initially, the core idea of Wayland
was to be something very simple and something very clean
and small.
And how's it going to replace something
as massive and sort of edge case accommodating as X?
Yeah.
I mean, can it?
Will it?
Will it?
And I think a lot of the concerns we've had have been,
how do we fill all the tiny little gaps, right?
We got pretty early with Wayland,
just basic rendering and compositing sort of stuff.
That's easy.
But making all the little details,
being able to capture windows, having security,
being able to have hotkeys around,
let's not get started about remote desktop connections.
All of those are little extras not used by everyone,
but are crucial to many workflows.
One of my biggest documented fears right here in the show
is some of those things are getting implemented differently
by different projects.
And so I raised that concern about a year and a half ago.
And so I thought this would be a good check-in
to see, how is that really playing out?
Is it really been that bad?
I thought that'd be also a note.
So there's been a few things, a few observations.
So Drew, you were here as part of the overall sprint.
And you run Gnome Shell, Fedora, Wayland on your ThinkPad T480.
And I was watching you and how smooth it was.
But there was one moment, I think, that I think you got me.
It was really a small thing.
It was like the straw that broke the camel's back.
Well, and what's funny is it has very little
to do with Wayland, the thing that caused you to switch.
Absolutely.
It was, I went to show you something on my computer.
And you saw my browser.
And you were about to epiphany shame me.
Screen peeker.
And I said, no, no, no, that's Firefox.
And it's just a CSS theme on top of Firefox.
And oh, by the way, Firefox is Wayland native now on Fedora.
And that seemed to be the thing that kicked it
into high gear for you of, OK, well, let's go ahead
and do this now.
I was just seeing, one, how good Firefox could look.
And two, that, oh, wow, browsers are starting to support it.
Yeah.
Maybe it's getting there.
There's something about Firefox having native Wayland support
and being smooth as silk on your desktop and looking.
So when I was epiphany shaming, it sort of says two things.
It says, wow, epiphany is great looking.
And then it also says it's not good enough, right?
But the fact that you've got Firefox
to look as good as epiphany.
Oh, we were both impressed.
It was just like, uh.
And it was smooth.
What?
It's kind of an open source testament, right?
Like, we can have it this good.
Yeah, we'll have a link to that theme in the show notes,
by the way.
Don't you worry.
And to get that browser meant I needed to be on Gnome Shell,
because that was a theme to look good on Gnome Shell.
And you needed client-side decorations
and all of that jazz.
And I had this niggling desire to try Wayland
in the back of my mind anyways.
So this was the moment.
I just took my ThinkPad with XFCE installed on it.
And I did a dnf group install gnome-desktop.
That's all it takes.
That's all it takes.
And then everything.
Oh, I also, using systemctl, disabled LightDM
and enabled GDM.
So then I also got a hot tip from Drew
to enable a certain copper repo.
Yes.
So there is a copper repo out there.
It's called gnome-with-patches.
And it's exactly what it sounds like.
All of those performance patches that
have been trickling in from other distros, some of them
from Canonical, some of them direct from the Gnome project,
but they're not yet in the stable repos for Fedora.
Those have all been kind of consolidated
into this one repo.
And it is technically experimental,
but it is great.
The performance in Gnome Shell is so much better
using this repo for me, personally,
that I'm using it on both a Radeon build on my desktop
and on my laptop.
And there is also experimental support
for enabling the real-time support that is coming in.
I think it's coming in 3.33.
But it's not there in 3.32 yet, but you can get it here.
And you do have to enable a setting through,
is it deconf or gconf?
Gconf, yeah.
Yeah, through one of those to get that support.
So when you say performance improvements,
what perceptively is noticeable?
It's just silky smooth, everything
from moving windows around, windows launching, scrolling
between your virtual desktops.
All of it feels almost as fast as XFCE,
but definitely smoother because you've
got those animations going on at the same time.
So I think that's where I wanted to start my Wayland observations
at right here, is I have felt like everything
has felt smoother on Wayland.
So you're saying it's even smoother with these patches?
Yes.
How smooth can you get, man?
Eventually, I'm going to slip off my computer.
Well, that makes sense, right?
Because if we're just talking about a protocol here,
then the protocol enables that smoothness.
And now we're seeing some of the implementation details.
The refinement.
Yeah, exactly.
Makes sense.
So that's a good way to break it down, Mr. Payne.
I definitely would say, though, my number one
with a bullet observation is Gnome Shell, so far, very smooth.
I'll tell you a couple of things that I think
are necessary to get there.
But everything's smooth.
Firefox is smooth.
Scrolling the settings is smooth.
It's ridiculous.
You're just sitting there scrolling all day,
not getting any work done.
I'm telling you, man, it's like I'm having an ASMR experience,
but there's no audio.
It's just so great.
So that has been my big preferred change.
I really like that.
Now, here's what I haven't liked.
Here's my dislike change.
And that is, surprise, now this is likely the entire stack,
not just Wayland, but it wakes up way slower than XFCE.
XFCE, man, I cracked that lid open,
and it literally wakes so fast that it's
open before I can see the light on the screen.
I mean, it's awake before I can see the light on the screen.
And it's so fast that I question if it was sleeping at all.
Did you actually check that?
Because that would be probably.
I do now.
I do, because it wakes so fast.
I'm like, one of these times it's not going to be sleeping.
So I always look to see if that little red IBM light is
pulsing right now.
It's that fast.
Now that I'm on the Wayland stack with GDM,
and then on Michelle Locker and all that,
I open up the old lid, and 1, 1,000, 2, 1,000,
screen wakes up.
I do the old space bar, log in with my password, hit Enter,
1, 1,000, 2, 1,000 at the desktop.
It's just not that perfect, faster than a MacBook
experience, which XFCE got me.
But all the other experiences of using the desktop
feel very smooth.
And having been away from UI effects for a long time,
and now being back on a desktop that implements them,
but I'd say in a nice way, in a clean way,
it's not over the top.
My windows aren't exploding.
Hey, hey now.
I like that.
But it's very smooth.
It's probably the smoothest I've ever seen it.
Now, I'm going to give it a little bit.
I'm not switching off XFCE.
See, I'm wondering if your experience in,
that's why we got XFCE in the studios, which I agree with
and is appropriate.
But there is a little smoothness, a little butter.
You miss, right?
Like a little just makes it sort of feel special and modern
and snappy.
This is something I was trying to work out with Brent off-mic.
And I was just trying to get his input,
because what I was saying to you was,
it feels like I'm compelled to use something
that I can't quantify in numbers.
It's just simply how it makes me feel when I use the computer.
And I struggle to assign a value to that.
Well, there's something about the user experience
that is so much richer when you can actually
enjoy every single aspect of it, right?
When it just kind of feels good in your bones
when you're using it.
If I don't enjoy using my tools, it
does seem like it's a creative blocker for me.
Like, if I'm frustrated with the experience,
you may have witnessed it recently.
I was doing a quick edit clip, and I busted out.
All the computers are in use.
We have a MacBook here, so I busted it out.
And I haven't used Mac OS in so long
that I became really frustrated with the UI,
like the way the trackpad worked, which I used to love
the trackpad.
I became frustrated with the way that even selecting windows
and resizing them.
I mean, it was like the experience was so awful.
I don't think I'll ever do it again.
It really made trying to do something
quick and creative a very frustrating experience.
You were on the edge of a nerd rage, for sure.
Yeah, Alex, you saw it, too.
You saw when I was really having a hard time with the Mac,
and it was like, I'm just not used to having
to fight my tools like this.
And if I don't enjoy using the machine,
I kind of burn out on the work.
Once I got the clip good enough, I was like, oh, screw it, man.
This took way too much work.
I'm done.
I was spent at that.
What kind of maniac am I?
What does that mean about me?
What does that say?
What's wrong with me?
Because you don't have this problem.
Your windows are exploding like a maniac.
You don't care.
No, I don't mind at all.
You can have a crack on your screen.
It doesn't drive you crazy.
If I have a crack on my smart screen,
I don't go to the AT&T store or whatever I got to go to go,
or the Apple store or whatever I got to drag my ass into.
I don't do that.
I don't do that.
But if my screen is cracked, I'm going
into that store like that day.
So sometimes you just got to be a little resilient.
It does help if you don't taste some of the other stuff.
You were on XF.
Now you're experienced.
I kind of just assume it takes a little bit
to wake up from sleep.
So that sounds normal.
That sounds normal to me.
I feel like I can't go back either.
That's the problem.
I mean, it's the same with proprietary stuff.
If you just try the open source solution and you make it work,
it's great.
It's fine.
And sometimes you try the proprietary,
and you're like, now I see the flaws.
Which is useful and good, and we should try to aim there.
But it's kind of a mental thing.
Another way to put that is I'd probably
think Lightworks or Acadian Live could do everything I ever
needed to do.
And anyone who said anything differently
was a dope if I had never used Final Cut.
Or I'd never used Premiere.
But I got access to those first.
And so the other tools to me just never really satisfied me.
Exactly.
But I'm sort of trapped here, because I find the overall
experience to be very pleasant.
My laptop runs cooler.
I don't have a solid read yet, but I'm
getting comparable-ish battery life to XFCE,
which if I even get in the ballpark of XFCE's battery
life, that's a breakthrough for Gnome Shell.
That's a breakthrough.
Now I'm on the ThinkPad T480 using the Intel GPU,
so I'm best case scenario.
So what is the state?
What is the state of Wayland?
Like, do you need to be on very specific hardware?
Sort of.
Now the Ryzen graphics stack is open source,
and the Intel graphics stack is open source.
You have a lot more options.
You can get some good desktops.
Drew, you said there's been some downsides, though,
on your Ryzen system.
Yeah, but it's edge cases.
Describe the system.
Is it AMD graphics?
Is it a Ryzen CPU?
Like, is it an Intel system?
What is the hardware you're having issues with?
So I have a Ryzen processor, Gen 1.
And I've got a Radeon RX 580, as well as a Radeon RX 480.
But that one's just for pass-through.
So the 580 is really the one that's happening,
doing all of my Linux graphics processing.
And it runs great.
Wayland behaves normally under most circumstances.
But I do have a rotated monitor.
And that's where I get one of these little tiny edge cases
where, every now and then, I'll get a cursor stuck,
rotated back the other way, up in the corner.
And it just stays there.
And a lot of times, I could ignore it.
But like you, Chris, sometimes you look at it, and you see it,
and you just get angrier and angrier.
The good news is that particular bug,
along with other paper cut bugs, if we want to call them that,
are on a list that are actively being worked at
by the Wayland people to get those little paper cuts that
are kind of blocking mass adoption to just wipe those out
and get it working correctly for everybody all the time.
That's it.
Wayland is now at a point where there's some paper cuts.
There's some paper cuts, but you can get your job done.
And there's also appreciable benefits to using it now.
Drew, you've even done some No Man's Sky under Proton
on Wayland, correct?
Yeah, also on an Intel GPU.
That part's ridiculous.
I mean, X-Wayland is so, so smooth.
I have no idea what is a Wayland application
and what is an X-Wayland application.
I cannot tell you the difference at this point.
It's nice not having to know, right?
You just sort of use Windows.
You've been on it longer than I have, though, Drew.
Is there some standout identifiers?
Can you tell when something's an X-Wayland application?
Only when the application itself is kind of buggy to begin with.
And it can kind of show its cracks.
Like Reaper, as great as it is, for example.
And this is proprietary software running its own toolkit on Linux.
But a great audio editor.
A great audio editor.
I love it to death.
But every now and then, it can kind of
show some cracks where it's just not quite as good.
And I get more graphical glitches with Reaper
under Wayland than I do under X. But to be fair,
they're still very minor and are not breaking my workflow.
Just when I resize a window or something like that,
you can just kind of see the cracks at the edge.
But that's about it these days.
Other than that, no, I can't really tell.
Now, if you, like me, have grown to depend on a few core desktop
Linux applications, it is useful to have a Wayland buddy
when you switch.
Drew, you are my Wayland buddy.
And you helped me replace a few of my key go-to Linux desktop
applications with ones that do work better under Wayland,
starting with my favorite beloved built-in screenshot
tool to XFCE.
I had to get something better, something more modern.
And you pointed me to Flameshot.
Yes.
So I came across Flameshot when I first
started playing around with Wayland maybe a year ago
and discovered that Shudder does not work in Wayland.
And I had to find something to replace that
and came across Flameshot.
And it's just a great little screenshot tool.
Works very, very well in Wayland and also in Xorg.
So if you're still on Xorg, you're not missing out here.
You can still use it.
But it's great.
And I just rebound my Print Screen button for it.
And now, anytime I have to print anything,
I can do it with Flameshot where I
can draw a particular size of the screenshot.
I can copy it to a clipboard, publish it to Imgur,
any number of things.
It's just got support for all of this built-in
and a really slick interface.
It is really good, really good.
That was a solid recommendation.
And then there was the moment I struggled with the most.
I even considered some crazy hacks that
were offered by the project.
Side note, one of the project's workarounds
I'm about to mention was log out of your desktop,
choose the X11 desktop, and log back in.
I'm like, what kind of fix is that?
Yes, you still get that sometimes.
But my beloved ULauncher is usable, for sure, on Wayland.
But it is not a native Wayland application.
And one of the big disadvantages is applications in the past
where you'd set a hotkey for kind of don't work great
on Wayland.
It doesn't really let just any application
grab any old key input.
Which, I mean, that is nice.
And you can solve this by using the GNOME shell settings
to do key bindings.
Because that's at the shell level, and that does work.
And you, in the case of ULauncher,
had to load a couple of other things.
And I looked at all of my options.
Drew convinced me, drop ULauncher, which was rough.
You know that GNOME Shell has a.
And he was the built-in GNOME Shell launcher.
And there's a bigger philosophy there, Drew.
Yeah, well, use the tools that you're given.
And in this particular case, the GNOME Shell launcher
already does most of the things that ULauncher can do.
And you don't need to add extra stuff on top.
It's just like with extensions.
The more you pile on, the more chances
you're giving your desktop to misbehave.
So by trying to decide, OK, what's
the smallest number of extensions that I really need?
And granted, ULauncher is not an extension.
But I'm going to kind of lump it in with those.
No, I follow you.
By stripping those out, you can get down to a base that
is still very workable.
And still, maybe you have to kind of relearn the direction
you go for one particular thing.
But overall, you can still do everything
that you need to do, just in a slightly different way
and a much more stable and fluid desktop.
That's what I've found with Wayland and GNOME
in most recent builds.
I think you nailed the trade-off there.
If you're willing to go a different path
to get that task done, you're rewarded
with stability, smoothness, and a modern workflow.
Some compromises may be necessary.
And I mean, maybe you can put some pressure,
file some bugs, and improve the tools
that you have that start out really nice
and just need to grow a few new features.
Well, you've got to have a certain momentum of users
using Wayland to make it worth developer time.
Yeah, absolutely.
And we all just do weird stuff, too, right?
I mean, there's no way to figure out
how it doesn't work until you've run into it.
Oh, yeah.
Everybody's got their own workflow.
So yeah, I also am subscribing to the philosophy
of minimal extensions.
In fact, I think I've pared it down now to only three.
The hardest one since day one of using Gnome Shell,
well, since 3.12, that's like when Gnome Shell 3.12 launched,
I just see it as a new point.
It was like a new turning point in Gnome Shell.
That's when I really became.
Gnome Shell timeline, because there
was some stuff in the early 20 series that was also huge.
And there's some huge stuff in these reviews.
Right now, yeah.
And so it's also why it's kind of fun to check it out,
to not just totally dismiss the project
and see what they're doing.
Because they're kind of an important desktop.
So I kind of feel like it's my responsibility.
Well, and even if you don't like whatever they're exploring,
you can't deny that they are exploring a different way
of doing a desktop, right?
So I gave up the old dock, which I've
used Dash to Docker canonicals implementation to,
which is great.
I've used it on every Gnome Shell install
I've had since Gnome 3.12.
And that was the hardest one to give up,
because I've always used that one.
But Drew convinced me.
And I've pared it down to three extensions.
And I want to give you one of them.
I think it's really important.
It's made Gnome Shell more on par with Plasma for me.
One of the key things I love about Plasma desktop
is those fricking KWIN rules.
Once you learn to embrace KWIN rules,
your workflow changes forever, girl.
Let me tell you.
It is.
It's great.
You showed me the way, yeah.
Yeah, it's great.
I mean, we use it here in the studio for a lot
because some of our applications open up like 12 windows.
And there's nothing quite like it in Gnome Shell or in XFCE.
Now, in Gnome Shell, you could replicate the functionality
with two extensions, minimum workspaces,
and then another one where you'd say whenever this application
opens up, you always put it on this screen.
Ah, yes.
Minimum workspaces and that other extension,
they don't work under Wayland.
Of course not.
Not all Gnome Shell extensions work under Wayland.
I have discovered.
Well, it wouldn't be so easy, Chris.
This also encouraged me paring it down
to like three extensions, I'll add.
So I want to mention Auto Move Windows.
This is not perfect.
It won't recognize all Windows types.
But it recognizes the couple that I need, Telegram, Slack,
Chrome, Firefox, Thunderbird, that kind of stuff.
It will, when they open, automatically move them
to a workspace that you designate.
It's so beautiful.
So if I click a link when I'm like in Telegram chatting
with Wes Payne and he sends me a link to something fancy
and I want to click it, as you do.
Of course you do.
I send great links.
The best.
And I click that link, it always opens up
the browser in that workspace.
It's messy, you know?
So no, I move that.
Oh, you want that move.
I move it.
I move it with this Auto Move Window.
It moves it to the workspace I designate for Firefox.
So every future Firefox window opens.
I see.
That's perfect.
Right.
So then it keeps just Telegram clean.
So I have just Telegram on that workspace.
And it puts the browser in a different workspace.
And when I want to go see your fancy link,
I just move to that workspace.
But if you want to go pop over and find out
what's for brunch with Brent, then you'll know.
Right.
Well, it's always delicious.
I don't even need to check.
Like here in the studio, when we open up Quasl,
we have a KWIN window rule to always put it on desktop too.
It's so nice.
Now I kind of have that same functionality.
Is it all the way?
No.
No, it won't do like this particular size
in this particular region.
But most applications will remember their size
and position.
So if you put them on the right workspace,
they'll just resume in the spot that they were at.
So that works.
That's nice.
Auto-move windows, and then I had
to change up and get rid of my beloved Guake.
It just was time.
Of course.
I mean, there's some hotkeys involved, right?
And it's not a Wayland native application yet.
And Drew recommended Tilex.
We've heard of it before.
It may have even been a pick years ago.
I'm sure it was.
And it's a great tiling terminal emulator.
And my second Gnome Shell plug-in
uses Tilex to do the drop-down terminal.
So I can hit the tilde key, and I get a drop-down terminal,
and it's using Tilex.
Slick.
Yeah.
So it's, you know.
Well, what do you think?
Are you liking it as a terminal?
That's an important thing.
It's great.
Tilex has always been a solid app.
I just never had a strong need to use it.
And Gnome Shell's terminal's fine, but Tilex is great.
It's great.
Drew, what are your favorite Tilex features?
Because I'm brand new to it, and it's like my go-to now
already.
First of all, just UI, it's great.
Second of all, feature-wise, it's kind of unmatched.
Yeah, so it has the features where
you can split the terminal window
into multiple sections, left, right, or top, bottom.
As the name implies, sure.
Right, exactly.
So it's tiling.
But in addition to that, you can open up multiple tabs.
Except the tabs, you can do them several different ways.
You can either have it as a list down the left or right side
with previews, where you can actually
see what each tab looks like, including with their tiling.
And that's kind of the biggest part of what makes it up
as an application.
Beyond that, I think it's just kind
of quality of life improvements.
Like, for example, using the newer style GTK scroll bars
versus using Gnome Terminal, you've got that static scroll
bar that's just kind of over there on the right
and looks a little old, whereas with Tilex,
it's got the thin scroll bar until you go over it,
and then it expands.
And it goes directly over top of the content,
so it's not like this whole separate thing.
So the whole thing to me just feels
like if you took Gnome Terminal and pushed it
to the modern equivalent of what it should or could be,
and that's kind of where it is.
It's also, and this is some of the features
that I find to be, like this is where I'm going to Tilex
all the time now, is it has some great different options around
how it handles copy and pasted content.
And that's really fancy, so check it out.
We'll have a link in the show notes.
We've mentioned it before, so enough with that.
But I want to do a little update on how some
of the different projects are getting along
with Wayland support.
So the number one question, probably the elephant
in the room at this point, is what about NVIDIA?
The story there isn't great.
You've noticed we haven't really mentioned any of us
are using it.
However, different projects are getting along with support.
In fact, the Kaywin project for Plasma Desktop
now lists initial support in Plasma 5.16
for the NVIDIA binary.
Oh, nice.
Partial work around, they say.
OK, maybe it's gross.
I don't know.
Yeah, I don't know.
But the situation is getting better.
I think that's the overall story there,
is the situation is improving.
For GNOME, especially GNOME 3.34,
there's refined X Wayland support.
So X11 applications run even better,
smoother, and with pseudo support, which is great.
That is nice.
Yeah.
And the Amate desktop is working on implementing Wayland support
via Mir.
There is a demo video up on YouTube you can see now.
But Mir essentially acts as a stable API
to interface with Wayland.
Yeah, you can sort of bridge right over to it.
That's a really interesting use case for it.
And that work is primarily being done by a canonical developer
who is not Martin Wimpress.
And then we'll have a link to the Plasma state of affairs,
which looks pretty strong, and Drew DeVault's blog post
on Wayland misconceptions.
Yeah, there's a lot of good info there.
In his, let's say, traditional style,
there's a little bit of brazenness at times,
let's say, because sometimes it's true,
like there are missing features.
But the only way to get those features
is for the people who want them to show up, as he says,
and get to work.
They're happy to offer whatever support.
He develops the WL roots project along with others.
So there's a lot of work going on.
We just kind of have to try it all out,
figure out what's lacking, and then support
development of those features however we can.
Mobile Room, any of you on Wayland for a daily driver
or a frequently used machine?
Anybody rolling that particular dice at this point,
or are you all X11 users in there?
Well, I tried Wayland on my Chromebook,
and I was pretty happy with it.
But I have certain workflows.
And Wayland has still some missing features.
Like you say, I have, for example,
mouse clicks based on window names.
So if I have Firefox and do a left click, it goes side back.
And if I do the same thing in Audacious and Lollipop,
it goes last song.
And I'm missing these kind of features in Wayland.
If we get that, I'm ready to switch, probably.
What about you, Dan?
Are you, by any chance, a Wayland roller?
I tried it a while back on Ubuntu with Gnome.
But I'm using Ubuntu Mate now, so I'm
struggling to get that running.
And in that situation, I would imagine
you're probably like most, you'll probably
switch when the project switched as a default, right?
Yeah, I will.
Yeah.
What about you, Byte?
Have you tried out Wayland?
Are you a Wayland roller, as I'm now calling it,
which is kind of obnoxious?
I love it.
No, I'm just waiting until a WM-based distro comes up
with the standard.
Fair enough.
I mean, I'm curious to see where the Monte project gets
with a mere back end.
Because that could be what I'll just
say more niche desktops end up using, potentially,
however that plays out.
Because you're not really seeing a lot of progress
on the desktops outside of Plasma and Gnome Shell
at this point.
Strong words.
And with the new XFCE release just out, wow.
Well, if I was the XFCE project, and I
needed to start working on something,
it'd be nice to have a stable API to develop against.
And that's what Mir is offering.
And if there is code that the Monte project uses,
which is another GTK-based desktop that I could also
take advantage of, that would be pretty compelling.
And if you look at it, there's a lot of desktops out there.
And they're all pretty dependent on X11.
They're going to be looking for some kind of solution.
Now, projects like Plasma and Gnome Shell, debatably,
have the resources to develop for the full protocol
on their own.
But not every project has that amount of horsepower
to do that kind of development.
But also, if you aren't that different or can share,
we could share and then have some sort of common back end,
which might mean we can concentrate development there
and have something better.
But if you want to give it a go, check out
some of the links we have in the show notes for extensions
or application replacements.
And live the lean extension lifestyle, if possible.
You won't have much of a choice.
There are still enough extensions available
to get you in trouble.
So there's still plenty out there.
Be careful.
Single-threaded.
All right, well, let's move on to a question I think
might just be perfect for Alex.
Ed wrote to me on Twitter, at ChrisLAS,
I've been out of the loop for a while,
and now I need to back up a bunch of family data.
I'm looking for a good incremental backup solution
that will use little storage.
He plans, if possible, to upload the backup to Google Drive.
His server is Ubuntu 19-something.
He doesn't say what.
I'm going to assume 1910, 1904, probably one of those.
It's a good bet.
And if you have any suggestions, he says, he'd love to know.
And thanks for our time, Alex.
I'm curious to know if you have any go-to backup strategies
to get data up on Google Drive.
I might, yeah.
Share them with us.
Give us a little taste.
The one that I use the most is called rClone.
And this uses the fuse to translate transparently
a Google Drive and many other endpoints, for that matter,
transparently to the host operating system.
That's a good one.
There's so many solutions out there.
There's so many different ways you could go that
depend on your setup that you just,
there's a lot of complex issues around this
that you have to consider.
So Wes, you have some sort of resource
people could use that will help them at least see their options?
Yeah, I was just looking around and found
it looks like a new list put together.
They kind of just had a lot of these keys,
little tags for each program.
Because it kind of depends.
Are you considering integrating lots of cloud support,
or are you just looking for something
that can cryptographically verify and encrypt
and then supports incremental?
Or you want the replication as part of the backup tool
or not, right?
Back in the days of TechSnap with Dan,
bacula was a common option that he really liked for managing
big systems for backups.
For some personal stuff, I've used RESTIC before,
which I've enjoyed a lot.
And I have a few things up in TARSNAP, which is not
necessarily open source, but is a nice program, nice setup.
And you can read the code.
And the developer is brilliant.
Another one that I use, which Linux Server Maker Docker for,
is Duplicati.
And this allows you to do incremental file level backup.
I've heard from a good handful of folks in the audience
that use Duplicati.
So I think I've looked at it lightly.
And it sounds like it's pretty popular in the audience.
So Duplicati could be another one to look at.
Put those in the show notes.
If Google isn't your endpoint, there's always rsync.
Just keep it simple.
Yeah, all right.
If you have any suggestions, tweet me.
Let me know, at Chris Elias.
Or join our Telegram, jupitabroadcasting.com
slash telegram.
I'm sure we've missed your favorite backup tool,
because there are 1,000.
Yeah, there are a lot.
There are a lot.
And maybe we'll get a few good suggestions,
and we can integrate them into future coverage.
Carry a pigeon.
Now, we have a couple of picks this week.
Alex, you saved the segment, because I
got a pick in here that I'm kind of meh about,
because it's sort of limited.
It's early days.
It's an open Apple AirDrop implementation
written in Python.
As iPhone users out there really, really need
an AirDrop solution on Linux.
AirDrop is a great solution for Mac to Mac or Mac to iPhone.
But Linux users, we don't get to participate in this,
because all this interesting implementation details.
So that's where OpenDrop comes in.
It is an AirDrop implementation written in Python.
We'll see.
We'll see.
It has certain requirements.
I think it might only work from Linux to Mac.
It requires that you install a few packages via brew on Mac OS.
So I wasn't feeling good about this.
But I wanted to let those of you out there know that need this.
There could be something.
And Alex came in with a Hail Mary for our pick segment today.
And it's special.
It's really something that's going to drive you crazy.
It's called Process Wallpaper.
Tell me about this, Alex.
Have you ever wanted your wallpaper to be a cloud of words
showing your most used process?
Well, if you have, great news.
I've never wanted that.
Never in my life wanted that.
But now you see it.
You do want it, right?
I kind of do.
It uses pleasant colors.
Oh, yeah, it looks kind of nice.
I almost want to try it.
Now, do be careful that you're only running things
with polite names now.
I suppose so.
It looks like if you want Spotify and Gnome Shell
on your background, this is a good picture.
That's a good way to do it.
I am now a little curious what mine would look like.
You should try it.
It's pretty neat.
It's a Python script that basically looks
at all your processes and then puts together
a nice color-coordinated word cloud
and sets that as your background.
And it's neater than you'd think, actually.
It looks kind of good.
But doesn't that just chew up more CPU cycles?
Well, you'll know if it shows up on your background.
Yeah, exactly.
That's the one thing that seems to be
missing on their example wallpaper
is their own application name.
It's interesting that ex-Wayland shows up, but not much.
So whoever took the screenshot is a Wayland user.
How fitting for today's episode.
That is perfect.
Diddle down in the chat room saying Konki.
Oh, yeah.
If you've got weeks and weeks to spare, sure.
Good memories and bad memories with Konki right there.
It's been a while since I've sort of tuned my desktop
and gone to that level.
What's the install process?
I've got to look at that.
Oh, yeah.
So it's easy.
It's just a Python script.
You probably already have Python 3.
A GNOME desktop environment is required for setup.ssh
to change the wallpaper automatically,
but it will export just a PNG.
So you can hook that up to your desktop however you want.
Wow, this is a really on-topic pick, Alex.
See how he just saved the segment right there?
He just saved it.
You're welcome.
I was coming in with this crappy half-working open AirDrop
alternative, and you gave us a lemonade, so I appreciate that.
Thank you, Alex.
It's a pleasure.
All right, thank you to the mumble room as well.
What do you got there, Wes?
You tried it?
Oh, yeah, I tried it.
Actually looks kind of good.
Doesn't look bad.
Chrome is using a lot of resources.
Yeah, I forgot that I was running wine for some Jack
plugin.
What's going on here?
You say Electron.
I say Flash 2.0.
That's right.
All right, so that's the show, I guess.
Thanks for coming.
Go over to linuxunplugged.com slash 315 for all the links
to everything we mentioned today.
Of course, linuxunplugged.com slash
subscribe for our RSS feeds.
And you can join us live over at jblive.tv
every single Tuesday.
We do it at 2 PM Pacific.
You do the math.
See you next Tuesday!
I'm going to go get some coffee.
See you.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
See you later.
Hey, Unplugged program.
Oh—all right.
Now, we've got to title this thing.
There's a story that didn't quite make it into the show I was looking at.
Oh, it's just what you figure.
If you were going to place a bet on if vendor firmwares work patched and following modern
practices, you'd probably bet that they're not.
Right?
Yeah.
Oh, yeah.
Shocker.
It's true.
is what one researcher found. That's, according to Sarah Zataco, she's the chief scientist
at the Cyber Independent Testing Lab, which is a nonprofit organization that conducts
independent tests on software security. Quote, we found no consistency in vendor or product
line doing better, or even showing improvement. There was no evidence that anybody is making
a concerted effort to address, to address, I like this, safety hygiene of their products.
Yeah, oh man, Microtech's looking pretty bad in this little result, as is Belkin.
Well, Asus doesn't look so good either, and sorry Ubiquiti fanboys, which there are many
of, the UAP AC Pro wireless access points, as well as the D-Link DWL 6600 access points,
suck. They only did slightly better than average on the overall assessment. Yeah, sorry.
I have three, five, nine of those in deployment right now.
You know, I looked at doing this, covering this story in the TechSnap episode that's
coming out later this week, but it was just too depressing.
It is a bit of a bummer, and I think it continues to validate why it's important that we as
consumers have the option to install our own firmwares.
Yeah, and we need to figure out a way to make this, you know, a thing that, like, how do
we get this in the culture so that we have ways to know? Because if you don't know, you
can't actually choose what you're buying with any validation.
I kind of think you could get awareness about the issues with the firmware via the conversation
about why it's important consumers can install a firmware.
Right.
Because it'll sort of beget the question, well, why? And then in that conversation,
you'll talk about all of the issues. And I think the way to start having that conversation
is to really hammer on the point that these are devices in our homes. We buy these, we
own these, and then we put them in our homes.
Oftentimes, they control access, right? They're like a gateway to our home.
So it should be my right to install anything I want. If I want to attempt to put Windows
10 on a Linksys, I should have...
You are a madman.
I would never, but I should be able to at least flash it with my own firmware. It is
just like if I wanted to, for some reason, take the door off my microwave. You know,
it's a dumb thing to do in some cases.
That's why the studio looks like this.
Have you put a fork in there yet? Try a CD. It's great.

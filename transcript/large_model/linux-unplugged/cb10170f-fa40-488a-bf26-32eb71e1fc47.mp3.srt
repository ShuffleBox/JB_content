1
00:00:00,000 --> 00:00:04,000
Wes found this article about desktop compositing latency.

2
00:00:04,000 --> 00:00:08,000
It's real and annoys me, says the headline.

3
00:00:08,000 --> 00:00:12,000
So the guy measures latency input on Windows 7 and Windows 10,

4
00:00:12,000 --> 00:00:16,000
Windows 7 without DWM, and then talks with

5
00:00:16,000 --> 00:00:20,000
some people, Pavel Fatin, which

6
00:00:20,000 --> 00:00:24,000
has also written about this before. He summarizes the difference between a stacking and a compositing

7
00:00:24,000 --> 00:00:28,000
window manager as follows. Stacking window managers orchestrate

8
00:00:28,000 --> 00:00:32,000
drawing of overlapped windows in such a way that the background windows are painted

9
00:00:32,000 --> 00:00:36,000
first. While this approach has some drawbacks

10
00:00:36,000 --> 00:00:40,000
window content has to be restored explicitly, it introduces

11
00:00:40,000 --> 00:00:44,000
no additional delays because applications draw directly in

12
00:00:44,000 --> 00:00:48,000
the frame buffer. Examples of stacking window managers

13
00:00:48,000 --> 00:00:52,000
are the classic theme in Windows and Openbox in Linux.

14
00:00:52,000 --> 00:00:56,000
Compositing window managers substitute the frame buffer

15
00:00:56,000 --> 00:01:00,000
with a dedicated off-screen buffer for each window.

16
00:01:00,000 --> 00:01:04,000
Then display all of the windows together

17
00:01:04,000 --> 00:01:08,000
when and how they see fit. This separation

18
00:01:08,000 --> 00:01:12,000
is inevitable and leads to some latency increase.

19
00:01:12,000 --> 00:01:16,000
Examples of compositing managers are Aero in Windows and Compiz

20
00:01:16,000 --> 00:01:20,000
in Linux. The thing with compositing

21
00:01:20,000 --> 00:01:24,000
window managers is they seem to also enforce vertical synchronization, v-sync.

22
00:01:24,000 --> 00:01:28,000
This means we need to wait until a picture is displayed on the screen before we can start drawing

23
00:01:28,000 --> 00:01:32,000
the next one. This causes some latency. How much?

24
00:01:32,000 --> 00:01:36,000
Well, according to Fatin, we might expect an additional delay before the frame

25
00:01:36,000 --> 00:01:40,000
buffer update when vertical sync is turned on. A maximum delay

26
00:01:40,000 --> 00:01:44,000
is 17 milliseconds. An average one is around 8 milliseconds

27
00:01:44,000 --> 00:01:48,000
for a 60 Hz refresh rate. 8 milliseconds is on average,

28
00:01:48,000 --> 00:01:52,000
which isn't too bad, but actually the average seems to be two times that. Roughly

29
00:01:52,000 --> 00:01:56,000
17 milliseconds and the minimum latency is actually 8 milliseconds.

30
00:01:56,000 --> 00:02:00,000
I don't know if the 8 milliseconds is the

31
00:02:00,000 --> 00:02:04,000
processing latency of the compositor or bias in my frame capture method.

32
00:02:04,000 --> 00:02:08,000
Even with v-sync enabled, the minimum should be close to zero because sometimes we simply

33
00:02:08,000 --> 00:02:12,000
get lucky and happen to send key presses before the picture is sent to the display.

34
00:02:12,000 --> 00:02:16,000
Anyway, the point is there is a measurable difference in key input

35
00:02:16,000 --> 00:02:20,000
latency between Windows 10 and Windows 7 with no DWM.

36
00:02:20,000 --> 00:02:24,000
The difference is small but noticeable and affects

37
00:02:24,000 --> 00:02:28,000
every user of Windows 10. In general, UI input latency

38
00:02:28,000 --> 00:02:32,000
is a known problem and a reason why e.g. your mouse cursor

39
00:02:32,000 --> 00:02:36,000
uses a special rendering path under Windows.

40
00:02:36,000 --> 00:02:40,000
So they've measured composited

41
00:02:40,000 --> 00:02:44,000
desktops and they've seen an explicit difference in performance.

42
00:02:44,000 --> 00:02:48,000
This is Linux Unplugged, episode 224

43
00:02:48,000 --> 00:02:52,000
for November 21st, 2017.

44
00:03:00,000 --> 00:03:04,000
Oh, welcome to Linux Unplugged, your weekly

45
00:03:04,000 --> 00:03:08,000
Linux talk show that's busting out all the classics this week. My name is

46
00:03:08,000 --> 00:03:12,000
Chris, no Wes, but we do have a beard. Hello beard!

47
00:03:12,000 --> 00:03:16,000
Hey Chris, how's it going? Thank you, Wes, thank you for being here. Wes should be here soon though

48
00:03:16,000 --> 00:03:20,000
so it won't be all on you. You won't have to keep me calm, insane, and

49
00:03:20,000 --> 00:03:24,000
rational all on your own. That's a hard task.

50
00:03:24,000 --> 00:03:28,000
Because I'm a ball of energy, you just gotta keep me contained. We have a real

51
00:03:28,000 --> 00:03:32,000
classic episode for you this week. We're gonna start with some community news that's actually

52
00:03:32,000 --> 00:03:36,000
breaking today as we go on the air. Tuesday seems to be a good day for that lately.

53
00:03:36,000 --> 00:03:40,000
After we get through a few

54
00:03:40,000 --> 00:03:44,000
important stories, I'll just put it that way, including one that we're gonna have to...

55
00:03:44,000 --> 00:03:48,000
I can't believe it. We also have, not one,

56
00:03:48,000 --> 00:03:52,000
but two, that's right, two everybody. Two app picks this week, looking really good.

57
00:03:52,000 --> 00:03:56,000
One for video, one for audio. So we're gonna have all the bases covered.

58
00:03:56,000 --> 00:04:00,000
And then, I'm gonna reach back into the old

59
00:04:00,000 --> 00:04:04,000
toolbox, my tackle box, from when I

60
00:04:04,000 --> 00:04:08,000
was doing penetration testing and Linux security auditing, and we're gonna talk about how

61
00:04:08,000 --> 00:04:12,000
you can easily audit your Linux box

62
00:04:12,000 --> 00:04:16,000
using a tool that will give you reproducible reports, tell you about

63
00:04:16,000 --> 00:04:20,000
vulnerabilities and best practices that you could be implementing on your system,

64
00:04:20,000 --> 00:04:24,000
it does an extensive security overview, and then writes it

65
00:04:24,000 --> 00:04:28,000
all up and tells you what you gotta fix. And then,

66
00:04:28,000 --> 00:04:32,000
and then, if time allows, and I sincerely mean this,

67
00:04:32,000 --> 00:04:36,000
if time allows, it's really all up in the air because Wes isn't here yet,

68
00:04:36,000 --> 00:04:40,000
but we are going to attempt to kick off the Gen 2

69
00:04:40,000 --> 00:04:44,000
challenge. We've got a great idea, we're really looking forward to how we're gonna do it. You know,

70
00:04:44,000 --> 00:04:48,000
we've been meaning to do it for a couple of episodes now, and

71
00:04:48,000 --> 00:04:52,000
today was the day. Legitimately, even if you're watching the video version, have

72
00:04:52,000 --> 00:04:56,000
a screenshot right there, ready to go, of the system we'll be

73
00:04:56,000 --> 00:05:00,000
loading Gen 2 with, but our driver

74
00:05:00,000 --> 00:05:04,000
isn't here yet. I don't know. You know, Wes was on assignment.

75
00:05:04,000 --> 00:05:08,000
That's what they say, right? That's what you're supposed to say? He's on assignment?

76
00:05:08,000 --> 00:05:12,000
Just checking it out. Yeah. Maybe he got stuck building Gen 2.

77
00:05:12,000 --> 00:05:16,000
Stuck. Yeah. That's what happens when you do a stage one. But never fear,

78
00:05:16,000 --> 00:05:20,000
we have a mumble room here with us. Time appropriate greetings, mumble room.

79
00:05:20,000 --> 00:05:24,000
Hello. Time appropriate greetings. Hello guys. Hi there. Hello.

80
00:05:24,000 --> 00:05:28,000
Now we have news right off the top of the show that I think we should probably get into.

81
00:05:28,000 --> 00:05:32,000
You know me. I love doing a little breaking news on the Unplugged program.

82
00:05:32,000 --> 00:05:36,000
This is CNN Breaking News. And if any of these

83
00:05:36,000 --> 00:05:40,000
stories actually really matter, we'll cover them more extensively in Linux Action News.

84
00:05:40,000 --> 00:05:44,000
But let's start with an update on the quote-unquote Android problem. This is a

85
00:05:44,000 --> 00:05:48,000
play on an earlier story that went around about a year ago.

86
00:05:48,000 --> 00:05:52,000
And it starts like this. Android has been a great boon to the Linux

87
00:05:52,000 --> 00:05:56,000
kernel community, having brought a great deal of growth in both the user and development

88
00:05:56,000 --> 00:06:00,000
communities. But Android has also been a problem in devices

89
00:06:00,000 --> 00:06:04,000
running it. They ship with kernels containing large amounts, often millions of lines of

90
00:06:04,000 --> 00:06:08,000
out-of-date tree code that fragments the developer community and makes it impossible

91
00:06:08,000 --> 00:06:12,000
to run mainline kernels on this hardware.

92
00:06:12,000 --> 00:06:16,000
Yep, that's about right. The problematic side of Android was discussed

93
00:06:16,000 --> 00:06:20,000
at the 2017 Maintainer Summit. That's what just wrapped up. But what actually

94
00:06:20,000 --> 00:06:24,000
came out of the summit was a rather optimistic

95
00:06:24,000 --> 00:06:28,000
look towards the future. We have a couple of positive trends developing

96
00:06:28,000 --> 00:06:32,000
right now. This could be interesting, especially in light of what we're about to

97
00:06:32,000 --> 00:06:36,000
talk about. So this starts with

98
00:06:36,000 --> 00:06:40,000
some quotes from Greg KH. You remember Greg? He's been on the Linux Action

99
00:06:40,000 --> 00:06:44,000
Show before, and he's also the maintainer of the long-term

100
00:06:44,000 --> 00:06:48,000
support edition of the kernel that we've been talking more about.

101
00:06:48,000 --> 00:06:52,000
And he says that there's... he started out the

102
00:06:52,000 --> 00:06:56,000
talk really by saying that they've been working some time with a system on a chip vendor to try

103
00:06:56,000 --> 00:07:00,000
to resolve a core problem, which he says the real issue

104
00:07:00,000 --> 00:07:04,000
is the shipping out-of-tree unpatched code

105
00:07:04,000 --> 00:07:08,000
is primarily Qualcomm. They decided not to work upstream.

106
00:07:08,000 --> 00:07:12,000
And Qualcomm has

107
00:07:12,000 --> 00:07:16,000
since concluded that that was a mistake on their part, and they have also

108
00:07:16,000 --> 00:07:20,000
apparently become determined to fix it. But the process of fixing it is going to take

109
00:07:20,000 --> 00:07:24,000
years. And here is the funny thing.

110
00:07:24,000 --> 00:07:28,000
See, before kernel 4.14,

111
00:07:28,000 --> 00:07:32,000
the longest support

112
00:07:32,000 --> 00:07:36,000
that the kernels got on these system-on-a-chips was two years.

113
00:07:36,000 --> 00:07:40,000
And the catch-22 is, it takes the system

114
00:07:40,000 --> 00:07:44,000
on a chip makers about two years to get their shit out the

115
00:07:44,000 --> 00:07:48,000
door. So by the time their chips shipped in Android

116
00:07:48,000 --> 00:07:52,000
devices, it was just about at the end of the two-year lifetime support

117
00:07:52,000 --> 00:07:56,000
for the LTS kernel. So by the time they could even ship, the kernel they were using

118
00:07:56,000 --> 00:08:00,000
is losing support. And somebody asked in the crowd, has anybody

119
00:08:00,000 --> 00:08:04,000
ever successfully done a major kernel upgrade

120
00:08:04,000 --> 00:08:08,000
on an Android phone in the wild?

121
00:08:08,000 --> 00:08:12,000
What do you suppose the answer to that is? Pretty much.

122
00:08:12,000 --> 00:08:16,000
It's close. The only phones in the wild that have gotten over-the-air

123
00:08:16,000 --> 00:08:20,000
updates that were pushed out by Google and carriers and the OEM,

124
00:08:20,000 --> 00:08:24,000
the Galaxy Nexus, and

125
00:08:24,000 --> 00:08:28,000
Galaxy S phones, some of them, have seen major kernel upgrades.

126
00:08:28,000 --> 00:08:32,000
So it's technically possible, but when you upgrade the kernel, there's a number

127
00:08:32,000 --> 00:08:36,000
of regulatory certifications that have to get redone.

128
00:08:36,000 --> 00:08:40,000
So the idea with this new six-year support cycle

129
00:08:44,000 --> 00:08:48,000
we will be able to ship code fixes

130
00:08:48,000 --> 00:08:52,000
and bug fixes and security fixes to these Android handsets

131
00:08:52,000 --> 00:08:56,000
for years after they've gone into the market. They won't be just going to the market as

132
00:08:56,000 --> 00:09:00,000
they are going out of support, but

133
00:09:00,000 --> 00:09:04,000
it's not a perfect situation yet. In fact,

134
00:09:04,000 --> 00:09:08,000
Greg says that if

135
00:09:08,000 --> 00:09:12,000
vendors don't follow Google's new project treble rules, and

136
00:09:12,000 --> 00:09:16,000
they don't really fix this behavior, he's going to eventually stop maintaining this

137
00:09:16,000 --> 00:09:20,000
six-year LTS release. I mean, why bother? I mean, for him, it's like that's a lot of work.

138
00:09:20,000 --> 00:09:24,000
But for now, he's running an experiment, and he's going to support

139
00:09:24,000 --> 00:09:28,000
the 4.4x kernels for a period of

140
00:09:28,000 --> 00:09:32,000
six years, which I think is going to be a huge

141
00:09:32,000 --> 00:09:36,000
boost for Android security. A bunch of other interesting things

142
00:09:36,000 --> 00:09:40,000
in here. It was interesting to see Linus Torvalds chime in. He noted

143
00:09:40,000 --> 00:09:44,000
that there's a lot of Android devices that are not necessarily phones. Tablets, for example,

144
00:09:44,000 --> 00:09:48,000
could prove to be a better development device.

145
00:09:48,000 --> 00:09:52,000
So there was a good back and forth. Linus also asked about the

146
00:09:52,000 --> 00:09:56,000
status of the Mali GPU driver, and that there is a person working

147
00:09:56,000 --> 00:10:00,000
on reverse engineering that device, but he didn't work

148
00:10:00,000 --> 00:10:04,000
out well with other developers. So now somebody else is making progress

149
00:10:04,000 --> 00:10:08,000
on the older GPUs, but nobody's working on the current generation devices. And Linus pointed

150
00:10:08,000 --> 00:10:12,000
out that if we could get that solved, the community as a whole would be in good shape.

151
00:10:12,000 --> 00:10:16,000
So that's also an interesting story, that Mali GPU driver issue.

152
00:10:16,000 --> 00:10:20,000
Yeah, so they walked away from the summit feeling much more positive, as long as

153
00:10:20,000 --> 00:10:24,000
vendors get on board with Project Treble and ship an LTS kernel.

154
00:10:24,000 --> 00:10:28,000
This issue where there's millions of lines of code outside the mainline

155
00:10:28,000 --> 00:10:32,000
kernel tree. The core problem with that is it's fracturing developer time

156
00:10:32,000 --> 00:10:36,000
and resources. So instead of working on the main kernel, you have a lot of really

157
00:10:36,000 --> 00:10:40,000
high-end, well-paid, commercially-backed

158
00:10:40,000 --> 00:10:44,000
software developers that are working on a kernel code tree

159
00:10:44,000 --> 00:10:48,000
that may never see the main tree. It may just be

160
00:10:48,000 --> 00:10:52,000
lost work. I've got an example.

161
00:10:52,000 --> 00:10:56,000
A 2014 Motorola phone

162
00:10:56,000 --> 00:11:00,000
is just getting the Vibe support added to the kernel for its

163
00:11:00,000 --> 00:11:04,000
Taptic engine in a 2014 Motorola phone.

164
00:11:04,000 --> 00:11:08,000
Because the driver for that always existed in another tree, another branch

165
00:11:08,000 --> 00:11:12,000
of the kernel that never made it to mainline. And just in the last kernel

166
00:11:12,000 --> 00:11:16,000
update, somebody came around and got that code into mainline kernel.

167
00:11:16,000 --> 00:11:20,000
And so now it's in there.

168
00:11:20,000 --> 00:11:24,000
The core issue is that it's been fracturing developer focus.

169
00:11:24,000 --> 00:11:28,000
Now, unless anybody has anything to say on that, there's not probably much

170
00:11:28,000 --> 00:11:32,000
to add. I want to talk about this story, because it's also Android

171
00:11:32,000 --> 00:11:36,000
related, and it affects all of us that use Android.

172
00:11:36,000 --> 00:11:40,000
It affects you if you have location services turned off. It affects you if you

173
00:11:40,000 --> 00:11:44,000
pulled the SIM out of your phone.

174
00:11:44,000 --> 00:11:48,000
Google is still collecting your location and the address

175
00:11:48,000 --> 00:11:52,000
of cell towers around you. I want to be clear, even if you've turned off your location services,

176
00:11:52,000 --> 00:11:56,000
even if you've removed the SIM card,

177
00:11:56,000 --> 00:12:00,000
when you take all those precautions, phones running Android software gather data

178
00:12:00,000 --> 00:12:04,000
about your location and send it back to Google whenever they get connected to the Internet.

179
00:12:04,000 --> 00:12:08,000
Since the beginning of this year, in January of 2017,

180
00:12:08,000 --> 00:12:12,000
Android phones have been collecting the addresses of nearby cellular towers,

181
00:12:12,000 --> 00:12:16,000
even when location services are disabled, and sending that data back to Google.

182
00:12:16,000 --> 00:12:20,000
The result is that Google, a unit of Alphabet behind Android, has access to data

183
00:12:20,000 --> 00:12:24,000
about individuals' locations and their movements that go far beyond reasonable

184
00:12:24,000 --> 00:12:28,000
consumers' expectation of privacy. Now, quartzqz.com

185
00:12:28,000 --> 00:12:32,000
did a whole bunch of actual journalism, including

186
00:12:32,000 --> 00:12:36,000
doing data captures and getting the information that

187
00:12:36,000 --> 00:12:40,000
was directly collecting, contacting Google and finding out what the hell is going on.

188
00:12:40,000 --> 00:12:44,000
So, this is Google's statement. This is their answer.

189
00:12:44,000 --> 00:12:48,000
In January of this year, we began looking into using cell ID codes as an additional

190
00:12:48,000 --> 00:12:52,000
signal to further improve the speed and performance of our message delivery.

191
00:12:52,000 --> 00:12:56,000
I think they're talking about push notifications.

192
00:12:56,000 --> 00:13:00,000
The Google spokesperson said in an email that however we had incorporated

193
00:13:00,000 --> 00:13:04,000
cell ID into our network sync system, we hadn't incorporated cell ID into

194
00:13:04,000 --> 00:13:08,000
our network sync system. So, that data was immediately discarded and we

195
00:13:08,000 --> 00:13:12,000
updated it to no longer request cell ID. So, they're going to phase

196
00:13:12,000 --> 00:13:16,000
it out, they say, by the end of this year. The location sharing

197
00:13:16,000 --> 00:13:20,000
practice does not appear to be limited to any particular type of Android phone or tablet.

198
00:13:20,000 --> 00:13:24,000
Google is apparently collecting cell tower data from all modern Android

199
00:13:24,000 --> 00:13:28,000
devices. Even devices that have been reset to factory default

200
00:13:28,000 --> 00:13:32,000
settings and apps with location services disabled were

201
00:13:32,000 --> 00:13:36,000
observed by Quartz sending nearby cell tower addresses to Google.

202
00:13:36,000 --> 00:13:40,000
Devices with cellular data or Wi-Fi connections appear to send the data to Google

203
00:13:40,000 --> 00:13:44,000
each time they come within range of a new cell tower. When Android

204
00:13:44,000 --> 00:13:48,000
devices are connected to a Wi-Fi network, they will send the cell tower address to Google

205
00:13:48,000 --> 00:13:52,000
even if they don't have a SIM card installed.

206
00:13:52,000 --> 00:13:56,000
Which is really my favorite part of this whole thing.

207
00:13:56,000 --> 00:14:00,000
They say this is to improve

208
00:14:00,000 --> 00:14:04,000
push notification delivery, but this also feels like the time

209
00:14:04,000 --> 00:14:08,000
that they were just driving around a whole cloth collecting everybody's Wi-Fi data and network

210
00:14:08,000 --> 00:14:12,000
information for anybody that had it. Oops, sorry, yeah, we just accidentally left that

211
00:14:12,000 --> 00:14:16,000
whole TCP dump thing running in the background. That was our bad.

212
00:14:16,000 --> 00:14:20,000
Sorry, oh, you want to fine us for that? Oh, because this is

213
00:14:20,000 --> 00:14:24,000
going to be outside the US too. I mean, there could be other governments that don't have such a favorable view

214
00:14:24,000 --> 00:14:28,000
of Google that want to respond to this. This came out today at

215
00:14:28,000 --> 00:14:32,000
QZ.com and they did

216
00:14:32,000 --> 00:14:36,000
a really good job. They did packet capture, they contacted Google.

217
00:14:36,000 --> 00:14:40,000
It's been like this for 11 months according to a Google spokesperson.

218
00:14:40,000 --> 00:14:44,000
What are your thoughts on this? I'm not surprised, I take it. No, not really.

219
00:14:44,000 --> 00:14:48,000
It seems like Google does things

220
00:14:48,000 --> 00:14:52,000
and then just forgets to turn them off. Oh,

221
00:14:52,000 --> 00:14:56,000
you're being charitable then. You think they didn't mean to do this. Well, I mean,

222
00:14:56,000 --> 00:15:00,000
you can't really tell one way or the other. Oh, I feel like you implicitly

223
00:15:00,000 --> 00:15:04,000
build this into your system and then you had to, I mean, think about

224
00:15:04,000 --> 00:15:08,000
the system they had to build to monitor this, resolve it to an address, collect that

225
00:15:08,000 --> 00:15:12,000
data, batch it up, and queue it to be sent back to Google once a Wi-Fi connection

226
00:15:12,000 --> 00:15:16,000
was there. That's pretty intentional. That's a pretty sophisticated system.

227
00:15:16,000 --> 00:15:20,000
Well, I mean, they already admitted that they intentionally built this system to potentially use it.

228
00:15:20,000 --> 00:15:24,000
They just didn't end up using it. So this is what weirds me out about

229
00:15:24,000 --> 00:15:28,000
using Android is there's probably a dozen other things like this about it.

230
00:15:28,000 --> 00:15:32,000
And is it part of the Play services? Does it

231
00:15:32,000 --> 00:15:36,000
happen if you're on a different ROM that's still using Android?

232
00:15:36,000 --> 00:15:40,000
You know, I don't know. And why this stuff isn't optional?

233
00:15:40,000 --> 00:15:44,000
Go ahead, were you going to say, was somebody in the moment going to jump in?

234
00:15:44,000 --> 00:15:48,000
Yeah, I was just going to mention, isn't this our concern about

235
00:15:48,000 --> 00:15:52,000
closed source software in general? Like, completely inclusive

236
00:15:52,000 --> 00:15:56,000
of all closed source software? That the developers have put in back doors

237
00:15:56,000 --> 00:16:00,000
that they can just flip on and start siphoning data whenever they

238
00:16:00,000 --> 00:16:04,000
jolly well please, and we can't go and audit for it. It also feels like there's an

239
00:16:04,000 --> 00:16:08,000
additional risk when that company is primarily

240
00:16:08,000 --> 00:16:12,000
profited by advertising, so they really have

241
00:16:12,000 --> 00:16:16,000
a ton of business incentive to know a lot more about you.

242
00:16:16,000 --> 00:16:20,000
And because they're a public corporation, they're always trying to find new paths to revenue. They're always

243
00:16:20,000 --> 00:16:24,000
trying to increase their bottom line. If they're sitting on this information,

244
00:16:24,000 --> 00:16:28,000
there could be a discussion at some point that says, could we integrate this into their advertising profile

245
00:16:28,000 --> 00:16:32,000
somehow?

246
00:16:32,000 --> 00:16:36,000
That would be really weird, like you start seeing ads when you drive by a place Verizon was trying to work on that.

247
00:16:36,000 --> 00:16:40,000
Yeah, so the one thing I couldn't

248
00:16:40,000 --> 00:16:44,000
get out of the Quartz article was if this was a Play services thing, or if

249
00:16:44,000 --> 00:16:48,000
this was deeper in Android. My gut says it's

250
00:16:48,000 --> 00:16:52,000
probably any device that supports Play services. So if you're running

251
00:16:52,000 --> 00:16:56,000
on a ROM and you don't have GApps, then you might be in the clear.

252
00:16:56,000 --> 00:17:00,000
But if you're using an alternative ROM and you have the Play API stuff,

253
00:17:00,000 --> 00:17:04,000
then you probably are getting tracked.

254
00:17:04,000 --> 00:17:08,000
I think the push notification stuff is in stock Android.

255
00:17:08,000 --> 00:17:12,000
Yeah, it must be. I mean, it would have to be. But it doesn't necessarily mean that's where the tracking is.

256
00:17:12,000 --> 00:17:16,000
The thing I don't get is why...

257
00:17:16,000 --> 00:17:20,000
In January, across multiple generations of Android devices, that almost has to be a Play API thing.

258
00:17:20,000 --> 00:17:24,000
Why is this still enabled even if you don't have a SIM card though?

259
00:17:24,000 --> 00:17:28,000
Because if they're using it for improving the messaging...

260
00:17:28,000 --> 00:17:32,000
You don't need that.

261
00:17:32,000 --> 00:17:36,000
If you're on Wi-Fi only, then you're on Wi-Fi. It doesn't matter what cell tower.

262
00:17:36,000 --> 00:17:40,000
Do they really have the ability to route to a specific cell tower?

263
00:17:40,000 --> 00:17:44,000
Isn't it just all TCP IP data packets and they send it to the carrier

264
00:17:44,000 --> 00:17:48,000
and then it's the carrier's job to track where my device is and route it to the proper cell tower?

265
00:17:48,000 --> 00:17:52,000
It doesn't seem like Google's involved in that process at all.

266
00:17:52,000 --> 00:17:56,000
My guess would be that if they were to enable this, they'd be sharing that data with the cell carriers.

267
00:17:56,000 --> 00:18:00,000
Well, that's even creepier.

268
00:18:00,000 --> 00:18:04,000
Yeah, push notifications are in Play Services, of course.

269
00:18:04,000 --> 00:18:08,000
But I think you can still get push notifications if you don't have the Play APIs.

270
00:18:08,000 --> 00:18:12,000
But they can't really update Android unless it's through the Play Services.

271
00:18:12,000 --> 00:18:16,000
And then, on the other end of the spectrum...

272
00:18:16,000 --> 00:18:20,000
So we go from ARM devices to Intel devices.

273
00:18:20,000 --> 00:18:24,000
I haven't seen a lot of write-ups on this yet, but today...

274
00:18:24,000 --> 00:18:28,000
Really yesterday night, but today, Google...

275
00:18:28,000 --> 00:18:32,000
Or I'm sorry, Intel, we're switching gears here, posted a revised update

276
00:18:32,000 --> 00:18:36,000
to a cumulative review that they have done on the Intel Management Engine.

277
00:18:36,000 --> 00:18:40,000
Yeah, you know that ME thing you hear everybody talking about?

278
00:18:40,000 --> 00:18:44,000
Everybody's working to bypass right now.

279
00:18:44,000 --> 00:18:48,000
I just got a tweet from Carl at System76 today saying they're working to bypass Intel ME on their systems.

280
00:18:48,000 --> 00:18:52,000
Of course, we've talked about how Purism did that recently,

281
00:18:52,000 --> 00:18:56,000
and Google has launched a project to do this as well.

282
00:18:56,000 --> 00:19:00,000
So Intel writes, in response to issues identified by external researchers,

283
00:19:00,000 --> 00:19:04,000
Intel has performed an in-depth, comprehensive security review of our own shit.

284
00:19:04,000 --> 00:19:08,000
And as a result, Intel has identified several security vulnerabilities

285
00:19:08,000 --> 00:19:12,000
that could potentially place impacted platforms at risk.

286
00:19:12,000 --> 00:19:16,000
Systems using the ME versions of basically all of them are impacted.

287
00:19:16,000 --> 00:19:20,000
It's anything with a 6th or 7th or 8th generation Intel Core processor,

288
00:19:20,000 --> 00:19:24,000
or a few of the Xeon and one or two of the Celeron CPUs.

289
00:19:24,000 --> 00:19:28,000
So if you have anything older than a 6th generation Intel CPU,

290
00:19:28,000 --> 00:19:32,000
this doesn't apply to you.

291
00:19:32,000 --> 00:19:36,000
You're not running one of the systems that have Minix embedded.

292
00:19:36,000 --> 00:19:40,000
It's only on the systems that are on the last three generations of Intel CPUs.

293
00:19:40,000 --> 00:19:44,000
So it's not as widely deployed as some would have you believe,

294
00:19:44,000 --> 00:19:48,000
but it's still a major problem.

295
00:19:48,000 --> 00:19:52,000
And it's getting bypassed and exploited at a faster rate

296
00:19:52,000 --> 00:19:56,000
because the management engine is now built around

297
00:19:56,000 --> 00:20:00,000
an Intel Edison system on a chip design.

298
00:20:00,000 --> 00:20:04,000
And that's an x86 platform, which means all of the x86 debugging tools

299
00:20:04,000 --> 00:20:08,000
and memory reading tools and just the

300
00:20:08,000 --> 00:20:12,000
huge amount of tribal knowledge around how x86 applications work

301
00:20:12,000 --> 00:20:16,000
all apply now to hacking this management engine. And that's why we're starting to see

302
00:20:16,000 --> 00:20:20,000
a big influx of bypasses and exploits.

303
00:20:20,000 --> 00:20:24,000
So Intel thought, hey, you know what we should do? We should take a look and see if we can find anything.

304
00:20:24,000 --> 00:20:28,000
Now I would have expected them to find stuff, say nothing, and push out a minor update,

305
00:20:28,000 --> 00:20:32,000
but it turns out they found multiple buffer overflows,

306
00:20:32,000 --> 00:20:36,000
multiple privilege escalations, multiple buffer overflows in

307
00:20:36,000 --> 00:20:40,000
one of their other chips, and a buffer overflow in the active management technology

308
00:20:40,000 --> 00:20:44,000
in the mini versions of the Intel management

309
00:20:44,000 --> 00:20:48,000
engine that allow remote access on server systems.

310
00:20:48,000 --> 00:20:52,000
So there's actually some shit in here that needs to get fixed. And now as a Linux user

311
00:20:52,000 --> 00:20:56,000
you've got to figure out what particular dance you've got to do to get your firmware updated.

312
00:20:56,000 --> 00:21:00,000
Some systems will just get it through GNOME software, others

313
00:21:00,000 --> 00:21:04,000
I don't know how you're going to get it.

314
00:21:04,000 --> 00:21:08,000
I mean, I applaud Intel on their transparency at least.

315
00:21:08,000 --> 00:21:12,000
Yeah, I have a more skeptical take on this.

316
00:21:12,000 --> 00:21:16,000
Not to be frying bacon here in the

317
00:21:16,000 --> 00:21:20,000
unplugged program, but

318
00:21:20,000 --> 00:21:24,000
isn't this exactly how you'd fix all these little loopholes and workarounds

319
00:21:24,000 --> 00:21:28,000
that people are using to disable the management engine in the first place? Is you'd push out

320
00:21:28,000 --> 00:21:32,000
security fixes? Because these are legitimate security flaws.

321
00:21:32,000 --> 00:21:36,000
I mean, what's the difference if you're using an exploit or a buffer overflow

322
00:21:36,000 --> 00:21:40,000
to disable the management engine versus take it over? You're using the same attack

323
00:21:40,000 --> 00:21:44,000
vector. So to Intel, they're both attack vectors. One is used to bypass

324
00:21:44,000 --> 00:21:48,000
the management engine, one is used to take over the management engine. It needs to be fixed either way in

325
00:21:48,000 --> 00:21:52,000
Intel's book. But you could take away

326
00:21:52,000 --> 00:21:56,000
some of these OEM's ability to ship a system without the management engine.

327
00:21:56,000 --> 00:22:00,000
Maybe Intel creates

328
00:22:00,000 --> 00:22:04,000
a product that doesn't have a management engine for people who care? Could you see them doing that?

329
00:22:04,000 --> 00:22:08,000
Could you see them releasing a chip without a management engine? Or just add an

330
00:22:08,000 --> 00:22:12,000
option to disable it? Would you trust it?

331
00:22:12,000 --> 00:22:16,000
If there was a software setting to disable it, would you trust that it was actually disabled?

332
00:22:16,000 --> 00:22:20,000
I don't know. I mean, would you trust that

333
00:22:20,000 --> 00:22:24,000
there isn't a hidden management engine in new

334
00:22:24,000 --> 00:22:28,000
hardware? No. I almost kind of think it's just sort of spooky.

335
00:22:28,000 --> 00:22:32,000
It's almost in everything now. If you think it's bad on there,

336
00:22:32,000 --> 00:22:36,000
just think about phones and stuff. Yeah.

337
00:22:36,000 --> 00:22:40,000
I think you're probably right. Hopefully I'm

338
00:22:40,000 --> 00:22:44,000
just being extra cynical and Intel really just wants to keep the security on this good and they're not

339
00:22:44,000 --> 00:22:48,000
looking to sort of shut down these exploits. I feel like Intel doesn't have a choice

340
00:22:48,000 --> 00:22:52,000
but to fix these problems. Of course. Because if they don't do it, they get

341
00:22:52,000 --> 00:22:56,000
lambasted for having a vulnerable product.

342
00:22:56,000 --> 00:23:00,000
Yeah. And if they do do it, then they get lambasted for

343
00:23:00,000 --> 00:23:04,000
by people wanting to disable the management engine. So Intel

344
00:23:04,000 --> 00:23:08,000
can't win, basically. Despizzoni? How do I say it again? You'll have to remind me.

345
00:23:08,000 --> 00:23:12,000
Despizzoni? I forget. I'm sorry. I like... Despizzoni.

346
00:23:12,000 --> 00:23:16,000
Okay. I like what you just put in the Discord. Say it out loud because that's good.

347
00:23:16,000 --> 00:23:20,000
Yeah. I mean, if you let it just

348
00:23:20,000 --> 00:23:24,000
leave it up to the software to say it's disabled, it's not going to be a different thing. Google saying

349
00:23:24,000 --> 00:23:28,000
sure, your location's disabled. Yeah. I feel like our last story has taught us that

350
00:23:28,000 --> 00:23:32,000
lesson. You're exactly right. Anybody else have thoughts on either the Android story

351
00:23:32,000 --> 00:23:36,000
or anything we've talked about so far in the news? Big news

352
00:23:36,000 --> 00:23:40,000
day today.

353
00:23:40,000 --> 00:23:44,000
There's nobody. That's fine. I guess that, you know, I take that

354
00:23:44,000 --> 00:23:48,000
to mean I've comprehensively covered the stories. Is that what that means? Can I take

355
00:23:48,000 --> 00:23:52,000
that? You know, Chris, I would guess that the best way to disable the Intel

356
00:23:52,000 --> 00:23:56,000
management engine is to buy an AMD product.

357
00:23:56,000 --> 00:24:00,000
Yeah, except for now Intel and AMD chips are going to be

358
00:24:00,000 --> 00:24:04,000
shipping together, Rikai. So they're taking that peanut butter and that chocolate and they're

359
00:24:04,000 --> 00:24:08,000
shipping a single product. So who knows? Cats and dogs, Rikai. You can't

360
00:24:08,000 --> 00:24:12,000
count on anything anymore. So what you're saying is ARM chips? Yeah. I don't know if that

361
00:24:12,000 --> 00:24:16,000
bag is much better. That's also an equal bag of hurt. You know what isn't though? Linux Academy.

362
00:24:16,000 --> 00:24:20,000
linuxacademy.com slash unplugged. Go there to get a free seven-day trial

363
00:24:20,000 --> 00:24:24,000
for the platform about Linux. Also support the show. Coincidentally.

364
00:24:24,000 --> 00:24:28,000
linuxacademy.com slash unplugged. Everything you need

365
00:24:28,000 --> 00:24:32,000
to learn and get hands-on experience with Linux. Self-paced, in-depth video courses

366
00:24:32,000 --> 00:24:36,000
on every Linux cloud and DevOps topic. It's so awesome.

367
00:24:36,000 --> 00:24:40,000
When I logged in there I'm like, what is something that I've always been sort of a little

368
00:24:40,000 --> 00:24:44,000
I won't say afraid, but apprehensive about getting into?

369
00:24:44,000 --> 00:24:48,000
It would be development. I just always felt like I just, I can't wrap my head around it.

370
00:24:48,000 --> 00:24:52,000
I don't have the focus. So when I went to Linux Academy and they're able to break different topics

371
00:24:52,000 --> 00:24:56,000
down to like four hours, six hours. Course one, basics. I'm like

372
00:24:56,000 --> 00:25:00,000
finally, to me, it clicks. It's not this huge nebulous thing. It's just

373
00:25:00,000 --> 00:25:04,000
six hours of my time that I need to dedicate. And then they have a course scheduler

374
00:25:04,000 --> 00:25:08,000
where you can pick a course and set a time frame and then they'll help you stick to it.

375
00:25:08,000 --> 00:25:12,000
Set some learning goals. If you want to go for certifications, they've got learning paths just for that.

376
00:25:12,000 --> 00:25:16,000
Instructor mentoring real human beings when you need it. It's a great service.

377
00:25:16,000 --> 00:25:20,000
LinuxAcademy.com slash unplugged. Go there, sign up, and get a free

378
00:25:20,000 --> 00:25:24,000
seven day trial. Also, grab their IOS and Android app. You can study on the go

379
00:25:24,000 --> 00:25:28,000
and they have lesson audio and personal notebooks, other tools to help you study that are all

380
00:25:28,000 --> 00:25:32,000
downloaded. You have them with no internet at all. You can go out

381
00:25:32,000 --> 00:25:36,000
and camp and learn about Linux for all I care. In fact, I recommend it. LinuxAcademy.com slash

382
00:25:36,000 --> 00:25:40,000
unplugged. Big thank you to Linux Academy for sponsoring the Unplugged

383
00:25:40,000 --> 00:25:44,000
program. You guys keep it up. Maybe I'll get a quieter chair. Do you hear this chair today?

384
00:25:44,000 --> 00:25:48,000
Can you hear this? I can hear this, but more importantly,

385
00:25:48,000 --> 00:25:52,000
I can do something tech related and it doesn't require the cloud. Dude, you know how

386
00:25:52,000 --> 00:25:56,000
people were saying they were hearing farts in TechSnap? It might be this chair.

387
00:25:56,000 --> 00:26:00,000
No, it was too consistent. Okay, but listen. Okay, listen.

388
00:26:00,000 --> 00:26:04,000
So, hold on. I'm going to turn off my gate. Okay, you hear that? That's my...

389
00:26:04,000 --> 00:26:08,000
I mean, this thing's just like falling apart.

390
00:26:08,000 --> 00:26:12,000
We need new chairs, Chris. I know. Yeah, you see that?

391
00:26:12,000 --> 00:26:16,000
We've got to get a chair fund. We really do. Or we just need more patrons so we can dedicate

392
00:26:16,000 --> 00:26:20,000
some of that to chairs because they are just falling apart. Patreon.com slash Jupiter signal. Okay.

393
00:26:20,000 --> 00:26:24,000
So, speaking of kernels, 4.14 arrived recently

394
00:26:24,000 --> 00:26:28,000
and there was sort of this throwaway line that Linus had that I thought would be

395
00:26:28,000 --> 00:26:32,000
interesting to dig into. And it was just

396
00:26:32,000 --> 00:26:36,000
sort of simple. He says when he announced the release of kernel 4.14,

397
00:26:36,000 --> 00:26:40,000
it's probably worth pointing out, Linus writes, that the zero-day

398
00:26:40,000 --> 00:26:44,000
robot has been getting even better. It was very

399
00:26:44,000 --> 00:26:48,000
useful before, but it has been working on making it even better

400
00:26:48,000 --> 00:26:52,000
and reporting the problems it found. A robot?

401
00:26:52,000 --> 00:26:56,000
A zero-day robot? Working on the Linux kernel, I thought to myself when I read Linus'

402
00:26:56,000 --> 00:27:00,000
email and I thought, let's take a look into this. So, the reg has an

403
00:27:00,000 --> 00:27:04,000
article about it. The said robot is an automated vulnerability checker that scours the kernel

404
00:27:04,000 --> 00:27:08,000
code for issues. With version 4.14 slated to be the next kernel to receive

405
00:27:08,000 --> 00:27:12,000
long-term support, and that support now being six years, it was even more important

406
00:27:12,000 --> 00:27:16,000
than ever. And so, I found out

407
00:27:16,000 --> 00:27:20,000
that this is essentially an Intel open source project.

408
00:27:20,000 --> 00:27:24,000
It's 01.org, which stands for Intel Open Source.

409
00:27:24,000 --> 00:27:28,000
And the zero-day service is an automated Linux kernel test service

410
00:27:28,000 --> 00:27:32,000
that provides comprehensive test coverage of the kernel. It monitors various kernel trees

411
00:27:32,000 --> 00:27:36,000
spanning the mainline tree, the next tree, maintainers trees,

412
00:27:36,000 --> 00:27:40,000
key developers trees, it watches all of those for changes, and

413
00:27:40,000 --> 00:27:44,000
also monitors the Linux kernel mailing list itself. It performs builds

414
00:27:44,000 --> 00:27:48,000
and boots and functional tests and performance tests and power tests

415
00:27:48,000 --> 00:27:52,000
whenever it detects a change. Whenever there are any boot, functional performance

416
00:27:52,000 --> 00:27:56,000
or power issues detected by the test infrastructure, kernel developers receive

417
00:27:56,000 --> 00:28:00,000
an email report from the KBuild

418
00:28:00,000 --> 00:28:04,000
test robot. This is a service

419
00:28:04,000 --> 00:28:08,000
from the zero-day that automatically reports build failures of Linux code.

420
00:28:08,000 --> 00:28:12,000
What's also cool is when one is successful, it then tries to actually build it on physical hardware

421
00:28:12,000 --> 00:28:16,000
and boot it. And that's kind of a neat thing. If there's any failure during the build

422
00:28:16,000 --> 00:28:20,000
stage, zero-day will bisect the failure

423
00:28:20,000 --> 00:28:24,000
to the first code patch that introduces the failure. The patch author is then notified

424
00:28:24,000 --> 00:28:28,000
with the failure information and the steps to reproduce the problem.

425
00:28:28,000 --> 00:28:32,000
This allows developers to reproduce the problem in their local environment and then verify

426
00:28:32,000 --> 00:28:36,000
their fixes. This thing's just always going there, scanning all the time, getting better

427
00:28:36,000 --> 00:28:40,000
and better, and learning more about their quirks. So when you hear the kernel

428
00:28:40,000 --> 00:28:44,000
developers talk about the zero-day bot, this is what it is.

429
00:28:44,000 --> 00:28:48,000
Looking into this, I would say it's more like dozens

430
00:28:48,000 --> 00:28:52,000
of different functions and services that are all kind of working together. I guess

431
00:28:52,000 --> 00:28:56,000
that's kind of a bot now these days. I guess you could call that a bot.

432
00:28:56,000 --> 00:29:00,000
And it's neat because the performance tests are one

433
00:29:00,000 --> 00:29:04,000
thing, like 80 different functional test suites, the benchmark stuff

434
00:29:04,000 --> 00:29:08,000
that it generates and gives people like a, hey, before this patch we were running

435
00:29:08,000 --> 00:29:12,000
this fast, and now after this patch we're running like this. That's pretty good stuff.

436
00:29:12,000 --> 00:29:16,000
And it helps you scale as the kernel gets huge.

437
00:29:16,000 --> 00:29:20,000
And it sounds like it's actually functional stuff because something tells me that if it was crap,

438
00:29:20,000 --> 00:29:24,000
Linus would be calling it crap in the mailing list and not giving it props at the top of his release announcement.

439
00:29:24,000 --> 00:29:28,000
So that also serves well for it.

440
00:29:28,000 --> 00:29:32,000
Also kind of another feature that flew under the radar for 4.14

441
00:29:32,000 --> 00:29:36,000
is this heterogeneous memory management.

442
00:29:36,000 --> 00:29:40,000
You're going to like this, Beardsley. It allows GPUs to access an application's

443
00:29:40,000 --> 00:29:44,000
memory space. Yeah, so it's good for like GPU intensive stuff.

444
00:29:44,000 --> 00:29:48,000
Yeah. Isn't that cool? That's a pretty cool feature. And also the

445
00:29:48,000 --> 00:29:52,000
Droid 4 phone is the phone that got that vibrator driver that I was talking about. Not that kind of

446
00:29:52,000 --> 00:29:56,000
thing. It kind of goes in a phone. Jeez, guys.

447
00:29:56,000 --> 00:30:00,000
That mumble room is dirty today.

448
00:30:00,000 --> 00:30:04,000
I do like that in this article they referred to Linus

449
00:30:04,000 --> 00:30:08,000
at one point as the Linux Lord. Really? Is that what they say?

450
00:30:08,000 --> 00:30:12,000
Yeah, well, I suppose. I suppose.

451
00:30:12,000 --> 00:30:16,000
Yeah, he was in the news quite a bit this week, but mostly for his language again.

452
00:30:16,000 --> 00:30:20,000
Not for the code that got released. I thought maybe we'd just focus on the code.

453
00:30:20,000 --> 00:30:24,000
We've talked positively about BcashFS on this

454
00:30:24,000 --> 00:30:28,000
show. Bcash is an up and coming project. I'm a

455
00:30:28,000 --> 00:30:32,000
patron of the developer. Big fan. I think it's going to be

456
00:30:32,000 --> 00:30:36,000
a fantastic desktop file system.

457
00:30:36,000 --> 00:30:40,000
I think it's going to be the choice. It's going to be the choice. People will be talking about

458
00:30:40,000 --> 00:30:44,000
Hammer. People will be talking about ButterFS and ZFS. Those are all great in their own

459
00:30:44,000 --> 00:30:48,000
rights, but BcashFS is where I'm betting the future.

460
00:30:48,000 --> 00:30:52,000
Especially on MV&E. I mean, it's just going to be a good future, guys.

461
00:30:52,000 --> 00:30:56,000
It's going to be really good. The present, however, is bad. It's real bad.

462
00:30:56,000 --> 00:31:00,000
In fact, Bcash is destroying file systems, at least on Gentoo.

463
00:31:00,000 --> 00:31:04,000
Speaking of the Gentoo challenge, using Bcash can destroy the file

464
00:31:04,000 --> 00:31:08,000
system. Mine was gone after a third non-successful try to mount the

465
00:31:08,000 --> 00:31:12,000
rootFS. It was not possible to recover any files.

466
00:31:12,000 --> 00:31:16,000
These things happen, and so a

467
00:31:16,000 --> 00:31:20,000
Gentoo user found it, submitted a bug, and they're looking

468
00:31:20,000 --> 00:31:24,000
into it right now. Could be nothing. Could be bad. Could be

469
00:31:24,000 --> 00:31:28,000
pretty bad. I mean, to be fair, doesn't the Bcash developers

470
00:31:28,000 --> 00:31:32,000
say that you shouldn't use this as an important file system?

471
00:31:32,000 --> 00:31:36,000
Yeah. That's why you've got to have backups when you're doing this kind of stuff. Absolutely. That's why I'm a patron

472
00:31:36,000 --> 00:31:40,000
and not a user. You know what I mean? You know what I'm saying? Those kind of

473
00:31:40,000 --> 00:31:44,000
things happen. Remember when we talked about ButterFS? I'll eat some systems, too. When these

474
00:31:44,000 --> 00:31:48,000
things are in development, I think it's something that

475
00:31:48,000 --> 00:31:52,000
you don't really fully appreciate until you've lost some data to something like this, and then you don't

476
00:31:52,000 --> 00:31:56,000
tend to experiment with file systems.

477
00:31:56,000 --> 00:32:00,000
When you hear bad things about a file system, you tend to stay clear of it.

478
00:32:00,000 --> 00:32:04,000
I was listening to Noah's interview

479
00:32:04,000 --> 00:32:08,000
yesterday with Wendell from Level One Techs in Ask Noah. What episode

480
00:32:08,000 --> 00:32:12,000
was that, Bear? Was that 34? 35.

481
00:32:12,000 --> 00:32:16,000
Episode 35 of Ask Noah, where he had Wendell on.

482
00:32:16,000 --> 00:32:20,000
I was happy to hear Wendell give a plug to my favorite desktop file system right now,

483
00:32:20,000 --> 00:32:24,000
which is XFS. I think that is, it has been my go-to

484
00:32:24,000 --> 00:32:28,000
now for over a decade. Really solid file system,

485
00:32:28,000 --> 00:32:32,000
still under active development. We've mentioned it before on the show, but you guys ask, you write in and

486
00:32:32,000 --> 00:32:36,000
ask all the time. Extended is fine, too, but if you're going for the desktop, you don't need

487
00:32:36,000 --> 00:32:40,000
a big fancy setup, I really think XFS is a super solid file system.

488
00:32:40,000 --> 00:32:44,000
It's got journaling for the metadata, it's got online defrag, it's got

489
00:32:44,000 --> 00:32:48,000
extended attribute support. It's fast, too.

490
00:32:48,000 --> 00:32:52,000
Yeah, it's feature-wise in between EXT and

491
00:32:52,000 --> 00:32:56,000
ZFS. Yeah, and I think they've got, it's got a bright

492
00:32:56,000 --> 00:33:00,000
future, put it that way. Alright, let's do some app picks.

493
00:33:00,000 --> 00:33:04,000
I'm feeling like we're going to run out of, I'm feeling like we're moving so fast that we're

494
00:33:04,000 --> 00:33:08,000
going to run out of time, and Wes will get here and we'll be out of time for the

495
00:33:08,000 --> 00:33:12,000
Gentoo Challenge, and then we're going to have to punt another episode of the

496
00:33:12,000 --> 00:33:16,000
Gentoo Challenge. I can't even believe it. I can't believe it. We should just do a special episode.

497
00:33:16,000 --> 00:33:20,000
Like a 24-hour Gentoo-a-thon or something. Well, you know,

498
00:33:20,000 --> 00:33:24,000
if you want to waste some time, I can give you a surprise app pick, Chris.

499
00:33:24,000 --> 00:33:28,000
Oh, really? You want to do three app picks? Sure. Let's do it. Yeah.

500
00:33:28,000 --> 00:33:32,000
So, a friend of mine was trying to figure out

501
00:33:32,000 --> 00:33:36,000
the frequency of their CPU.

502
00:33:36,000 --> 00:33:40,000
Oh, yeah. And it turns out that proc CPU info

503
00:33:40,000 --> 00:33:44,000
is not always accurate. In fact, that was mentioned in

504
00:33:44,000 --> 00:33:48,000
the 4.14 release. Yeah, so there's a third party

505
00:33:48,000 --> 00:33:52,000
tool called I7Z. Yeah.

506
00:33:52,000 --> 00:33:56,000
That is specifically for the I series Intel processors

507
00:33:56,000 --> 00:34:00,000
that gives very, very accurate

508
00:34:00,000 --> 00:34:04,000
frequencies for your stuff, so you can tell if it's

509
00:34:04,000 --> 00:34:08,000
respecting power states correctly and stuff.

510
00:34:08,000 --> 00:34:12,000
Yeah, so you're talking about the I7Z tool, right?

511
00:34:12,000 --> 00:34:16,000
Which is, I think, is the official page, the code.google page?

512
00:34:16,000 --> 00:34:20,000
Yeah. Okay, I'll put a link to that in show notes. This I have used myself when doing

513
00:34:20,000 --> 00:34:24,000
reviews and stuff. It's nice to have it up, because I think it's a cute app, and I just

514
00:34:24,000 --> 00:34:28,000
happen to like just the way it displays the information, too. There's a command line app, too.

515
00:34:28,000 --> 00:34:32,000
Really? Yep. Cool. Am I thinking of a different app

516
00:34:32,000 --> 00:34:36,000
then with the Google? No, it has a GUI version as well. Oh.

517
00:34:36,000 --> 00:34:40,000
I actually kind of prefer the command line, because then I could use it on like VPS systems

518
00:34:40,000 --> 00:34:44,000
and stuff. I think at least on Arch there's I7Z and then I7Z-GUI.

519
00:34:44,000 --> 00:34:48,000
Oh, that's totally what I did. You know me. You know me back.

520
00:34:48,000 --> 00:34:52,000
You know that I was rolling Arch back then. All right, so are you ready for my... I got two.

521
00:34:52,000 --> 00:34:56,000
I got one for video folks. Let's do this. And I got one for audio folks. The first

522
00:34:56,000 --> 00:35:00,000
one, I don't know how this is... I'm listening. Yeah, maybe you've heard of this, Eric.

523
00:35:00,000 --> 00:35:04,000
I had not, I don't think. And I'm not really sure how this is possible, because it's their

524
00:35:04,000 --> 00:35:08,000
fifth release. And I follow this stuff pretty closely.

525
00:35:08,000 --> 00:35:12,000
But it's called VidCutter. And it's a free video trimmer app that

526
00:35:12,000 --> 00:35:16,000
traditionally has been available for Mac and Windows, and I guess

527
00:35:16,000 --> 00:35:20,000
Linux for a fair share of time. And it's a Qt 5

528
00:35:20,000 --> 00:35:24,000
application that uses ffmpeg underneath. That's the core of it.

529
00:35:24,000 --> 00:35:28,000
And this is an article over at OMG Ubuntu. But if you want to

530
00:35:28,000 --> 00:35:32,000
split video trim video or join video clips into a single montage, this is like

531
00:35:32,000 --> 00:35:36,000
VidCutter's power zone. The app lets you perform these tasks as well as

532
00:35:36,000 --> 00:35:40,000
a bunch of others super quick. It's got a really nice timeline UI that makes it

533
00:35:40,000 --> 00:35:44,000
easy and simple even if you're not a video editor. You can create frame accurate

534
00:35:44,000 --> 00:35:48,000
cuts using the new smart cut feature that's in the latest release, which makes

535
00:35:48,000 --> 00:35:52,000
the feature makes use of re-encoding and can be toggled on and off by clicking

536
00:35:52,000 --> 00:35:56,000
on a little icon so you can either keep the straight video or recode the

537
00:35:56,000 --> 00:36:00,000
video like if it's a flash video or whatever ffmpeg supports.

538
00:36:00,000 --> 00:36:04,000
And it's got a nice fancy progress bar down below where you can see which clip

539
00:36:04,000 --> 00:36:08,000
is... Beard, you see that on the main screen there? You see how they put the progress bar over the

540
00:36:08,000 --> 00:36:12,000
actual part of the clip that's rendering? That's an interesting UI

541
00:36:12,000 --> 00:36:16,000
approach. I like that. So you can see what it's helping. And then they have a feature called

542
00:36:16,000 --> 00:36:20,000
stream mapping, which helps ensure all source media streams are included

543
00:36:20,000 --> 00:36:24,000
in the finished export. Yeah, that's inherited from ffmpeg.

544
00:36:24,000 --> 00:36:28,000
That is a pretty nice looking app. So it's a free video trimming app for

545
00:36:28,000 --> 00:36:32,000
Windows, Mac OS, and Linux desktop, Joey writes, and you can get it as an app image.

546
00:36:32,000 --> 00:36:36,000
Geez, it's a 200 meg app image, but you can also get it as a PPA.

547
00:36:36,000 --> 00:36:40,000
That's probably where you are in all the other places. For real world usage

548
00:36:40,000 --> 00:36:44,000
I can see people using this to very quickly make GIFs. Oh yeah.

549
00:36:44,000 --> 00:36:48,000
Oh yeah. Or, you know, this is always my go-to example,

550
00:36:48,000 --> 00:36:52,000
is you're going to go to xgiving. How do you like that, xgiving?

551
00:36:52,000 --> 00:36:56,000
It's like Thanksgiving, and the Christmas holiday, and the xgiving.

552
00:36:56,000 --> 00:37:00,000
What else do you call it? You've got to have some sort of generic term for the next month and a half.

553
00:37:00,000 --> 00:37:04,000
Happy Holidays, Chris. Yeah, you go to the family holiday thing, and you've got a couple of videos

554
00:37:04,000 --> 00:37:08,000
on your new fancy smartphone, because you're a geek, so you've got one of them phones maybe

555
00:37:08,000 --> 00:37:12,000
has a 4K camera, maybe it's 1080, I don't know what you've got. But you go there, you get your camera, you get your video,

556
00:37:12,000 --> 00:37:16,000
now you can put it together. You can put a little music to it, you can cut in and out,

557
00:37:16,000 --> 00:37:20,000
you can get that embarrassing moment cut out or keep it in, depending on your family,

558
00:37:20,000 --> 00:37:24,000
and then you can crap that thing out in just a couple of seconds,

559
00:37:24,000 --> 00:37:28,000
because you can choose to not re-encode or re-encode, and post it up on your family

560
00:37:28,000 --> 00:37:32,000
page or whatever the hell you've got, and now you're the holiday superstar.

561
00:37:32,000 --> 00:37:36,000
Or say there could be this guy doing a podcast about politics

562
00:37:36,000 --> 00:37:40,000
that needs to cut clips real quick, that doesn't want to re-encode things.

563
00:37:40,000 --> 00:37:44,000
That's of course my personal reason. Yeah, that is

564
00:37:44,000 --> 00:37:48,000
my personal reason, of course. I've got a years case as well.

565
00:37:48,000 --> 00:37:52,000
This might come in handy, like if I have to

566
00:37:52,000 --> 00:37:56,000
import a huge, huge file into some

567
00:37:56,000 --> 00:38:00,000
video editor and don't want to spend like years waiting for

568
00:38:00,000 --> 00:38:04,000
it to decode and go into whatever

569
00:38:04,000 --> 00:38:08,000
native file format it needs to. Absolutely, absolutely.

570
00:38:08,000 --> 00:38:12,000
And then every time you can avoid re-encoding, you avoid losing quality too.

571
00:38:12,000 --> 00:38:16,000
Yeah, exactly. Yeah, I do like that they

572
00:38:16,000 --> 00:38:20,000
offer a toggle. Okay, well you guys liked that one. I like it when I have an

573
00:38:20,000 --> 00:38:24,000
app pick that you guys actually enjoy. I think this next one might be a bit of a thud, but

574
00:38:24,000 --> 00:38:28,000
I'm going to give it a go. Now I've got one for you audio fans out there,

575
00:38:28,000 --> 00:38:32,000
and this could be just simple if you like listening to stuff, and then

576
00:38:32,000 --> 00:38:36,000
you hit pause, and if you're somebody like me, after you like

577
00:38:36,000 --> 00:38:40,000
pause a podcast or a radio show or whatever you're listening to, I like to

578
00:38:40,000 --> 00:38:44,000
back it up like a few seconds, so that way I don't miss anything

579
00:38:44,000 --> 00:38:48,000
and just back it up a couple seconds. Well, this

580
00:38:48,000 --> 00:38:52,000
is Paralletype. It's a minimal audio player. It's built for

581
00:38:52,000 --> 00:38:56,000
speech transcription. It's written for the GNOME desktop,

582
00:38:56,000 --> 00:39:00,000
and it plays audio files and then lets you transcribe them in your favorite

583
00:39:00,000 --> 00:39:04,000
text editor, but here's a cool thing. It

584
00:39:04,000 --> 00:39:08,000
has two features I really like. Number one, when you pause, it

585
00:39:08,000 --> 00:39:12,000
rewinds a few seconds, so when you hit play, you're like three seconds

586
00:39:12,000 --> 00:39:16,000
back. That is great. I wish I could have that in a video

587
00:39:16,000 --> 00:39:20,000
player, because I would use the crap out of that for our shows. And then the other

588
00:39:20,000 --> 00:39:24,000
thing I like is that it can play back

589
00:39:24,000 --> 00:39:28,000
as fast or as slow as your typing,

590
00:39:28,000 --> 00:39:32,000
and it has the ability to speed up the playback

591
00:39:32,000 --> 00:39:36,000
without altering the pitch of

592
00:39:36,000 --> 00:39:40,000
the sound, so you don't get the chipmunk effect.

593
00:39:40,000 --> 00:39:44,000
That's a game changer for closed captioning.

594
00:39:44,000 --> 00:39:48,000
Huge, dude. It's huge. And it also has a bunch of great features.

595
00:39:48,000 --> 00:39:52,000
It produces timestamps, which you can insert into a transcription.

596
00:39:52,000 --> 00:39:56,000
It has LibreOffice helpers. They recommend you use LibreOffice

597
00:39:56,000 --> 00:40:00,000
because they have a set of macros that can be assigned to key bindings, and

598
00:40:00,000 --> 00:40:04,000
you can insert timestamps or jump to timestamps, and of course it's using

599
00:40:04,000 --> 00:40:08,000
GStreamer on the back end, so whatever you can play with GStreamer, you can

600
00:40:08,000 --> 00:40:12,000
play with this thing. This could just be a great way to listen to podcasts,

601
00:40:12,000 --> 00:40:16,000
and then you can use it for transcription if you want. Transcription is something

602
00:40:16,000 --> 00:40:20,000
that all podcasts could use. They really could

603
00:40:20,000 --> 00:40:24,000
use it because it opens it up to another audience, number one. It makes it

604
00:40:24,000 --> 00:40:28,000
accessible to an audience that otherwise is just totally left out, but it also helps with

605
00:40:28,000 --> 00:40:32,000
search. Google doesn't search audio files, it searches text.

606
00:40:32,000 --> 00:40:36,000
And so podcasts that can do transcription

607
00:40:36,000 --> 00:40:40,000
can be better discovered. It's a great

608
00:40:40,000 --> 00:40:44,000
way to like, if there's a podcast you love, it'd be a great way to help them out.

609
00:40:44,000 --> 00:40:48,000
So there you go, it's Paralletype, and I'll have a link

610
00:40:48,000 --> 00:40:52,000
in the show notes. Seems pretty nice. Seems like, and

611
00:40:52,000 --> 00:40:56,000
I guess for those of you that are not visualizing, it's one of those minimal Gnome 3

612
00:40:56,000 --> 00:41:00,000
applications, but it's got everything you need. Play and stuff is in the client

613
00:41:00,000 --> 00:41:04,000
side decoration. In the middle is a waveform, below that is a

614
00:41:04,000 --> 00:41:08,000
really accurate time scale, and then you have playback controls in the bottom half and a speed

615
00:41:08,000 --> 00:41:12,000
slider. Pretty nice, pretty clean, pretty simple. It would fit on your

616
00:41:12,000 --> 00:41:16,000
screen while you're working and not take up a lot of room.

617
00:41:16,000 --> 00:41:20,000
So I'm going to just probably do it to listen to local podcasts that I download the MP3 of, you know what I'm saying?

618
00:41:20,000 --> 00:41:24,000
I'm looking forward to that. Parallel play.

619
00:41:24,000 --> 00:41:28,000
You know what we should do? Paralletype, I'm sorry. Paralletype. We should

620
00:41:28,000 --> 00:41:32,000
take a second here. If you're listening live, if you're in Discord or you're in the IRC,

621
00:41:32,000 --> 00:41:36,000
and wish Angela, tag her and wish her a happy birthday, because today as we're recording

622
00:41:36,000 --> 00:41:40,000
is her birthday. There you go. Another little breaking news, right?

623
00:41:44,000 --> 00:41:48,000
So yeah, Architect points out that Antennapod

624
00:41:48,000 --> 00:41:52,000
also has speed up. I wonder how many people listen to our shows

625
00:41:52,000 --> 00:41:56,000
at double speed. I've recently taken to doing it for a couple of things that I'm trying to catch

626
00:41:56,000 --> 00:42:00,000
up on, and man does it devastate the music. It just

627
00:42:00,000 --> 00:42:04,000
wrecks the audio. Anybody in the Mamba Room

628
00:42:04,000 --> 00:42:08,000
like a 2X listener of podcasts? There's

629
00:42:08,000 --> 00:42:12,000
an article today about it actually. It's actually a news story about people

630
00:42:12,000 --> 00:42:16,000
who listen to podcasts at 2X.

631
00:42:16,000 --> 00:42:20,000
I wonder if I could find it really quick. No, I don't think. Speedcasters

632
00:42:20,000 --> 00:42:24,000
is what they call them I think. They called them speedcasters or something like that. It turns out that

633
00:42:24,000 --> 00:42:28,000
almost nobody goes over 1.8% for some reason though. Really? Yeah.

634
00:42:28,000 --> 00:42:32,000
Yeah, because it starts sounding pretty bad. Most people stick to like

635
00:42:32,000 --> 00:42:36,000
1.5%. People who listen to podcasts

636
00:42:36,000 --> 00:42:40,000
at 2X or something like that. I know there was an article today about it.

637
00:42:40,000 --> 00:42:44,000
Yeah, here it is. Of course it's BuzzFeed. Of course it is.

638
00:42:44,000 --> 00:42:48,000
It's meet the people who listen to podcasts at super fast speeds.

639
00:42:48,000 --> 00:42:52,000
That's what it is.

640
00:42:52,000 --> 00:42:56,000
They say 2X, but yeah, I think you're probably right.

641
00:42:56,000 --> 00:43:00,000
They say most people listen to five podcasts a week, but some people

642
00:43:00,000 --> 00:43:04,000
listen to a lot more. Some people, 20% of podcast

643
00:43:04,000 --> 00:43:08,000
consumers listen to more than six podcasts a week. They call them podfasters.

644
00:43:08,000 --> 00:43:12,000
That's what it was, podfasters. Isn't that obnoxious?

645
00:43:12,000 --> 00:43:16,000
Of course, leave it to BuzzFeed. Nobody in the Mamba Room will own up to it.

646
00:43:16,000 --> 00:43:20,000
Nobody in the Mamba Room is going to own up to being a podfaster. Who's a podfaster?

647
00:43:20,000 --> 00:43:24,000
As bitmucks,

648
00:43:24,000 --> 00:43:28,000
I don't quite make 2X, but really it depends on the speed of the podcaster.

649
00:43:28,000 --> 00:43:32,000
I will do easily 1.5, 1.6.

650
00:43:32,000 --> 00:43:36,000
Really? I would think I would sound way too fast at that speed.

651
00:43:36,000 --> 00:43:40,000
I would put me like a 1.3 max.

652
00:43:40,000 --> 00:43:44,000
I do it accidentally.

653
00:43:44,000 --> 00:43:48,000
There's a Boing Boing article that says some people listen to it up to 300%.

654
00:43:48,000 --> 00:43:52,000
Well, I actually will sometimes listen to audiobooks

655
00:43:52,000 --> 00:43:56,000
at a pretty fast clip because my

656
00:43:56,000 --> 00:44:00,000
ADD brain has to listen just a little bit more intently

657
00:44:00,000 --> 00:44:04,000
and I retain the information better. So it's a little bit of a brain hack.

658
00:44:04,000 --> 00:44:08,000
If I listen faster, I can't let my brain drift because I will miss it.

659
00:44:08,000 --> 00:44:12,000
And because it's more challenging, I find it more satisfying to stay focused on.

660
00:44:12,000 --> 00:44:16,000
So there is some logic to it when you're getting through it like an audiobook.

661
00:44:16,000 --> 00:44:20,000
I just find with podcasts it wrecks the flow of the conversation.

662
00:44:20,000 --> 00:44:24,000
Apparently there are some other potential benefits besides speed.

663
00:44:24,000 --> 00:44:28,000
Apparently higher tones are less likely to be masked by low-pitched street noises,

664
00:44:28,000 --> 00:44:32,000
HVAC or low-flying planes. So it's easier to hear in loud situations.

665
00:44:32,000 --> 00:44:36,000
That's weird. Huh. Okay.

666
00:44:36,000 --> 00:44:40,000
I can't argue with that. That's ear science, right?

667
00:44:40,000 --> 00:44:44,000
You know what's really strange is when you

668
00:44:44,000 --> 00:44:48,000
listen to the theme music of various podcasts for so long at high speed

669
00:44:48,000 --> 00:44:52,000
and then you listen to that same podcast live, it feels like the theme music is just dragging.

670
00:44:52,000 --> 00:44:56,000
See, I have the opposite feeling.

671
00:44:56,000 --> 00:45:00,000
When I hear it, I'm like, oh my gosh. Oh, I was going to try to do it.

672
00:45:00,000 --> 00:45:04,000
What's the command in MPV to double speed? Is there a command? I don't know what it is.

673
00:45:04,000 --> 00:45:08,000
I'm sure there is one.

674
00:45:08,000 --> 00:45:12,000
It also says if you speed it up to 2x or 3x,

675
00:45:12,000 --> 00:45:16,000
your comprehension really starts to break down. But the exception to this is blind people.

676
00:45:16,000 --> 00:45:20,000
Because they're used to only listening so they can speed it up faster than

677
00:45:20,000 --> 00:45:24,000
sighted people and still understand it.

678
00:45:24,000 --> 00:45:28,000
I'm just thinking right now of the Ask Noah show at 2x. I'm just thinking how fast that would

679
00:45:28,000 --> 00:45:32,000
be. That would be rapid-fire podcast right there.

680
00:45:32,000 --> 00:45:36,000
I feel like if you speed it up at all, you can't understand it.

681
00:45:36,000 --> 00:45:40,000
It would be in a half hour. That would be good.

682
00:45:40,000 --> 00:45:44,000
I'm going to try it real quick and then we'll move on.

683
00:45:44,000 --> 00:45:48,000
No, I didn't do it.

684
00:45:48,000 --> 00:45:52,000
Oh well. People listening just sort of lazily

685
00:45:52,000 --> 00:45:56,000
will be like, what the hell is going on? What's the matter? I wonder if you'll get a comment

686
00:45:56,000 --> 00:46:00,000
about bad editing. That would be good.

687
00:46:00,000 --> 00:46:04,000
You could, if you wanted to, take a moment

688
00:46:04,000 --> 00:46:08,000
while we're waiting for Wes and head over to Digital Ocean. This might be a good use of our time.

689
00:46:08,000 --> 00:46:12,000
Because what else is there to do with life other than wait for Wes Payne

690
00:46:12,000 --> 00:46:16,000
and set up Digital Ocean? DigitalOcean.com. You go there, you create your account,

691
00:46:16,000 --> 00:46:20,000
and then use our promo code DOUNPLUGGED. That helps Rekai's beard

692
00:46:20,000 --> 00:46:24,000
grow. And really that's what this whole show is about. It's really a long

693
00:46:24,000 --> 00:46:28,000
play to grow that beard. You go to Digital Ocean,

694
00:46:28,000 --> 00:46:32,000
you create the account, and then you apply that beard

695
00:46:32,000 --> 00:46:36,000
oil called DOUNPLUGGED. One word.

696
00:46:36,000 --> 00:46:40,000
And that will give you a $10 credit. You can get started in less than 55 seconds.

697
00:46:40,000 --> 00:46:44,000
And you'll have a fast system on their infrastructure. Everything's SSDs.

698
00:46:44,000 --> 00:46:48,000
40 gigabit connections to the hypervisor. Object storage and block storage.

699
00:46:48,000 --> 00:46:52,000
Hey Chris, you know, this beard is pretty big, and you know what it could use?

700
00:46:52,000 --> 00:46:56,000
Some space. Oh yeah, well then you need to check out their new

701
00:46:56,000 --> 00:47:00,000
spaces system. It's object storage. Beautiful and simple. You can use

702
00:47:00,000 --> 00:47:04,000
it programmatically like a boss, or you can just generate URLs in their

703
00:47:04,000 --> 00:47:08,000
dashboard. And by the way, hell of a dashboard it is. They got a dashboard for days

704
00:47:08,000 --> 00:47:12,000
over there. You've got a long time, sort of like a barnacle of the IT

705
00:47:12,000 --> 00:47:16,000
industry. Got kind of like this sort of skeptical outlook on

706
00:47:16,000 --> 00:47:20,000
everything. All this new fangled web stuff. Let Digital Ocean treat you to how

707
00:47:20,000 --> 00:47:24,000
to do it right. You build a product around an amazing API. And then that results

708
00:47:24,000 --> 00:47:28,000
in a gorgeous dashboard. And it results in an easy, simple,

709
00:47:28,000 --> 00:47:32,000
I'm going to say, not having done a lot, but the work we have

710
00:47:32,000 --> 00:47:36,000
done, very comprehensive API. Like the things that we can

711
00:47:36,000 --> 00:47:40,000
do with the API. I don't even know why I'd even need to go to the website if I didn't want to.

712
00:47:40,000 --> 00:47:44,000
And it's so simple and well documented. So, while I haven't set up like

713
00:47:44,000 --> 00:47:48,000
10,000 systems, every single day I'm controlling multiple

714
00:47:48,000 --> 00:47:52,000
Digital Ocean systems using that API, and I don't ever use that dashboard. And then when I go back

715
00:47:52,000 --> 00:47:56,000
there, I'm like, damn, look at this thing. This isn't a dashboard for days.

716
00:47:56,000 --> 00:48:00,000
This is a dashboard for years. DigitalOcean.com, use our promo code DOUNPLUGGED

717
00:48:00,000 --> 00:48:04,000
and a big thank you to Digital Ocean for sponsoring this

718
00:48:04,000 --> 00:48:08,000
here unplugged program. You use spaces, don't you? Yeah, I have.

719
00:48:08,000 --> 00:48:12,000
I've only done light testing with it, because I don't have a big need for it.

720
00:48:12,000 --> 00:48:16,000
But I did use it to share some pretty large files, and it's super fast.

721
00:48:16,000 --> 00:48:20,000
And the link, I had it automatically destroy after like

722
00:48:20,000 --> 00:48:24,000
I don't remember, it was like a time period I set in there. I think it might have been a couple of days, because I was trying

723
00:48:24,000 --> 00:48:28,000
it out. And then the files are gone. Boom. Just destroyed.

724
00:48:28,000 --> 00:48:32,000
I feel like such a boss when I know my data's got a self-destruct. I feel like it's mission impossible.

725
00:48:32,000 --> 00:48:36,000
Speaking of mission impossible,

726
00:48:36,000 --> 00:48:40,000
let's do a little break into your system before somebody else does. This is, I think, one of the

727
00:48:40,000 --> 00:48:44,000
best security practices. You can keep your system patched. You can use

728
00:48:44,000 --> 00:48:48,000
the right account privileges, don't run as rude, all this kind of stuff. But

729
00:48:48,000 --> 00:48:52,000
if you're not checking, if you're not probing your system, you're not really fully confident

730
00:48:52,000 --> 00:48:56,000
that it's secure. And who doesn't want to just sort of take a look, do a little audit?

731
00:48:56,000 --> 00:49:02,000
It's a little checkup, like going to the mechanic. Only you can do it yourself.

732
00:49:02,000 --> 00:49:06,000
The tools have changed over the years, but

733
00:49:06,000 --> 00:49:10,000
Linus, L-Y-N-I-S, is an open source security auditing tool.

734
00:49:10,000 --> 00:49:14,000
And you run this on a FreeBSD box,

735
00:49:14,000 --> 00:49:18,000
a Solaris box, an AIX box, a Mac

736
00:49:18,000 --> 00:49:22,000
NetBSD, oh yes, and Linux.

737
00:49:22,000 --> 00:49:26,000
You can run that on these systems, including things like a QNAP storage device.

738
00:49:26,000 --> 00:49:30,000
And it will come back with an extremely comprehensive report. Now, this isn't

739
00:49:30,000 --> 00:49:34,000
going to be the all-in-all solution. You run this, and now your box is perfectly secure.

740
00:49:34,000 --> 00:49:38,000
But if IT security isn't your day job,

741
00:49:38,000 --> 00:49:42,000
you will get a pretty good education running this thing. Because not only will it check

742
00:49:42,000 --> 00:49:46,000
for some best practices, like what's listening on the network, what version

743
00:49:46,000 --> 00:49:50,000
your patches are, what CVEs your system is vulnerable to,

744
00:49:50,000 --> 00:49:54,000
it will also audit things like your SSH configuration, and make sure that you're

745
00:49:54,000 --> 00:49:58,000
following some of the best practices there, because things change. And they keep this program

746
00:49:58,000 --> 00:50:02,000
up to date. So it's basically a six-step system

747
00:50:02,000 --> 00:50:06,000
after you install it. You run it, and it determines your operating system. It will search for available

748
00:50:06,000 --> 00:50:10,000
utilities and updates. You then run the test based on some plugins that it ships with out of

749
00:50:10,000 --> 00:50:14,000
the box, and you get different categories to choose from, and then you get the report.

750
00:50:14,000 --> 00:50:18,000
And I thought we'd just do it right here on the show, because it's pretty

751
00:50:18,000 --> 00:50:22,000
quick, and I've already installed it. It's not a PPA, but there is a repository

752
00:50:22,000 --> 00:50:26,000
available for Debian and Ubuntu systems, probably

753
00:50:26,000 --> 00:50:30,000
in a lot of repos, or you can just download it from them. Once you have it installed,

754
00:50:30,000 --> 00:50:34,000
you get the linus command, l-y-n-s, and you can do linus show commands,

755
00:50:34,000 --> 00:50:38,000
and I'm showing it here on the video version, if you'd like to check at this point in the show. If you're

756
00:50:38,000 --> 00:50:42,000
listening on audio, you can go refer to YouTube if you'd like, or just install it

757
00:50:42,000 --> 00:50:46,000
and run linus show commands, and you'll see what I'm talking about. It's pretty straightforward. So the first

758
00:50:46,000 --> 00:50:50,000
thing we're going to do is... I'm going to try not to do anything

759
00:50:50,000 --> 00:50:54,000
in sudo until it tells me to, by the way, and you can follow along if you like. I'm going to do

760
00:50:54,000 --> 00:50:58,000
a linus update first, to make sure that all my stuff is updated.

761
00:50:58,000 --> 00:51:02,000
And we'll do update for info. So this will be all the vulnerability

762
00:51:02,000 --> 00:51:06,000
info that it can know about. Alright, so I am up to date. So if I'm up to date,

763
00:51:06,000 --> 00:51:10,000
then I can go ahead and I can run the audit. Now that I am going

764
00:51:10,000 --> 00:51:14,000
to run as root, sudo linus audit. You type

765
00:51:14,000 --> 00:51:18,000
that in. I give it my crazy super secure password.

766
00:51:18,000 --> 00:51:22,000
And, oh! I should mention

767
00:51:22,000 --> 00:51:26,000
one of the things they've recently added to linus is the ability to also audit

768
00:51:26,000 --> 00:51:30,000
docker files. So you can download a docker file and then run this against

769
00:51:30,000 --> 00:51:34,000
those containers. And that is super, super, super useful. But

770
00:51:34,000 --> 00:51:38,000
in this case, I need to actually specify system now. So I'm going to specify

771
00:51:38,000 --> 00:51:42,000
linus audit system. Now it begins to run. It checks the operating system

772
00:51:42,000 --> 00:51:46,000
and it's finding all kinds of stuff already. It's going to generate

773
00:51:46,000 --> 00:51:50,000
a text report that I can read at my leisure. It's going to be in

774
00:51:50,000 --> 00:51:54,000
var and you're going to need root privileges to be able to read it. But if you can do that,

775
00:51:54,000 --> 00:51:58,000
then you just give the, it'll give you the path. You just give that to your favorite

776
00:51:58,000 --> 00:52:02,000
text editor. Nano! And then you can read the full report.

777
00:52:02,000 --> 00:52:06,000
But right now linus takes, it'll take anywhere from, oh! Just found some stuff. Anywhere from

778
00:52:06,000 --> 00:52:10,000
a minute took what? About 25, 30 seconds to run it here on my system.

779
00:52:10,000 --> 00:52:14,000
Now I can get a report here in my browser. So I got a couple of dings already.

780
00:52:14,000 --> 00:52:18,000
There is right off the top here some recommendations for how I could

781
00:52:18,000 --> 00:52:22,000
harden my SSH configuration. There is some

782
00:52:22,000 --> 00:52:26,000
auditing changes I could make and some changes to logging on my

783
00:52:26,000 --> 00:52:30,000
system it's recommending. It's also recommending that I install

784
00:52:30,000 --> 00:52:34,000
rootkit hunter or check rootkit and then cron that, which is just sort of a best

785
00:52:34,000 --> 00:52:38,000
practice. So it ranges from things that I actively need to do or patch to best practices.

786
00:52:38,000 --> 00:52:42,000
And in fact, here's some on permissions.

787
00:52:42,000 --> 00:52:46,000
Here's a warning. Found one or more vulnerable packages. And then it gives me the

788
00:52:46,000 --> 00:52:50,000
package that it found and a URL to read more about it. It also recommends

789
00:52:50,000 --> 00:52:54,000
that I set a password on my grub bootloader to prevent altering boot configuration.

790
00:52:54,000 --> 00:52:58,000
And it also goes through and identifies all of the package files

791
00:52:58,000 --> 00:53:02,000
that have changed since I've installed them on my system. And software

792
00:53:02,000 --> 00:53:06,000
that might have a suggestion, like

793
00:53:06,000 --> 00:53:10,000
my log level, my max sessions, my permit root login settings,

794
00:53:10,000 --> 00:53:14,000
X11 forwarding settings, allowing agent forwarding

795
00:53:14,000 --> 00:53:18,000
settings. It has suggestions for all of those. It does have a warning

796
00:53:18,000 --> 00:53:22,000
for file permissions with CUPS on my printing. Something I need to fix.

797
00:53:22,000 --> 00:53:26,000
And of course, like I mentioned, I have a vulnerable package. But

798
00:53:26,000 --> 00:53:30,000
it looks like I'm pretty good as far as listening to remote hosts

799
00:53:30,000 --> 00:53:34,000
and looking at my DNS stuff, looking at my IP stuff.

800
00:53:34,000 --> 00:53:38,000
That all checks out. I had 43 ports open on TCP

801
00:53:38,000 --> 00:53:42,000
or UDP. It checked promiscuous interfaces. I passed all of those.

802
00:53:42,000 --> 00:53:46,000
No ARP monitoring software was running. It'll also do an IPv6

803
00:53:46,000 --> 00:53:50,000
audit if I have one. And then at the very bottom here, I get this

804
00:53:50,000 --> 00:53:54,000
output where I could actually throw that into my

805
00:53:54,000 --> 00:53:58,000
text editor of choice. It's at var log linus.log

806
00:53:58,000 --> 00:54:02,000
and I could get the whole thing in there. So we could take a look at that too. Because

807
00:54:02,000 --> 00:54:06,000
this is sort of the thing you would want to, if you were actually doing

808
00:54:06,000 --> 00:54:10,000
this for work, you would use this as documentation that you've completed the audit.

809
00:54:10,000 --> 00:54:14,000
Oh yeah, I just said I had to have root permissions.

810
00:54:14,000 --> 00:54:18,000
This is right here, your documentation that you completed the audit, but this is also now your

811
00:54:18,000 --> 00:54:22,000
comparison. So you save this, you set it aside, you make the changes that it recommends,

812
00:54:22,000 --> 00:54:26,000
and then you run it again. And you see how you do on the next pass. And then you

813
00:54:26,000 --> 00:54:30,000
find what's missing, you make those changes, and then you save that, you set it aside, and you

814
00:54:30,000 --> 00:54:34,000
run it again. And you just keep doing that. And you can do it on your digital ocean

815
00:54:34,000 --> 00:54:38,000
droplets, you can do it on your laptops, you can do it on your servers. It supports

816
00:54:38,000 --> 00:54:42,000
tons of different operating systems. It's based on stuff that I have been using for over a decade.

817
00:54:42,000 --> 00:54:46,000
Some of you might remember Bastille and other tools that have been around

818
00:54:46,000 --> 00:54:50,000
for a very, very long time. And the

819
00:54:50,000 --> 00:54:54,000
funny thing about actual IT security, the

820
00:54:54,000 --> 00:54:58,000
dirty truth about it is, you don't have to get it right.

821
00:54:58,000 --> 00:55:02,000
You just have to show that you're actively trying to mitigate risk,

822
00:55:02,000 --> 00:55:06,000
and you're actively taking corrective action when you find an issue.

823
00:55:06,000 --> 00:55:10,000
And if you can show that to auditors, or management, or whoever it is

824
00:55:10,000 --> 00:55:14,000
in your particular dynamic, that's

825
00:55:14,000 --> 00:55:18,000
really the benchmark. That's the bar.

826
00:55:18,000 --> 00:55:22,000
I'm not arguing, I'm not advocating it. I think it should be you strive

827
00:55:22,000 --> 00:55:26,000
for optimum security in every case. But the reality is, in a large production

828
00:55:26,000 --> 00:55:30,000
environment, you need a tool where you can have a baseline to work off,

829
00:55:30,000 --> 00:55:34,000
something you can modify and add your own things. That's the other thing you can do with Linus is

830
00:55:34,000 --> 00:55:38,000
you can add your own kinds of checks that are maybe specific to your environment.

831
00:55:38,000 --> 00:55:42,000
And you can also say we're using this to check docker images

832
00:55:42,000 --> 00:55:46,000
when we pull them down. So when management comes to you, or when

833
00:55:46,000 --> 00:55:50,000
an auditor, in my case, had come to us, we could say, we are using this, this is

834
00:55:50,000 --> 00:55:54,000
a process we've developed, this is a tool we've used, this is the tool, and this is what we

835
00:55:54,000 --> 00:55:58,000
do when we document a mistake, and this is what we do when we document a fix.

836
00:55:58,000 --> 00:56:02,000
And it gave us a trail, a paper trail,

837
00:56:02,000 --> 00:56:06,000
of IT security auditing. And that not only saved our

838
00:56:06,000 --> 00:56:10,000
butts several times from an auditing standpoint with the FDIC, but it also

839
00:56:10,000 --> 00:56:14,000
showed like producible work that the IT people were doing. Like here's this thing,

840
00:56:14,000 --> 00:56:18,000
and here we ran it several days later, and we fixed these things. And so that was great too.

841
00:56:18,000 --> 00:56:22,000
But now I can just run it on my own systems and go, oh yeah, right, I should change that about SSH.

842
00:56:22,000 --> 00:56:26,000
I never use that feature in SSH. Why do I have that on?

843
00:56:26,000 --> 00:56:30,000
Yeah, they say that they also use it for like ECI and HIPAA compliance testing.

844
00:56:30,000 --> 00:56:34,000
Yep. Oh yeah. Yeah, yeah. That's basically, I wasn't doing HIPAA. Well, I had

845
00:56:34,000 --> 00:56:38,000
to actually use it for some HIPAA systems. It also just gives you a great report of all of the

846
00:56:38,000 --> 00:56:42,000
background system daemons that are running. I forgot I installed

847
00:56:42,000 --> 00:56:46,000
X2GO on this machine. So that was good to see that.

848
00:56:46,000 --> 00:56:50,000
And the developers have kept it updated throughout the years

849
00:56:50,000 --> 00:56:54,000
now with systemd support, and like I mentioned, they recently got Docker support in there.

850
00:56:54,000 --> 00:56:58,000
It's a pretty cool tool. L-Y-N-I-S.

851
00:56:58,000 --> 00:57:02,000
And you can find it at, oh boy,

852
00:57:02,000 --> 00:57:06,000
it's CISOFY.com slash

853
00:57:06,000 --> 00:57:10,000
sysify slash linus. And it's pretty neat.

854
00:57:10,000 --> 00:57:14,000
You could also cron something like this and then get reports, which is something we've done.

855
00:57:14,000 --> 00:57:18,000
So you could have a system. Oh really?

856
00:57:18,000 --> 00:57:22,000
Oh, good to know. Good to know, Echo. Thank you. You could have this

857
00:57:22,000 --> 00:57:26,000
run on a remote system, a VPS or something like that,

858
00:57:26,000 --> 00:57:30,000
and just use it to check in and make sure nothing changes. If you've got a rig that you don't log

859
00:57:30,000 --> 00:57:34,000
into very often, you don't get a lot of eyes on, why not have this thing running in the background

860
00:57:34,000 --> 00:57:38,000
every Sunday sending you a report telling you if anything's gone wonky?

861
00:57:38,000 --> 00:57:42,000
It's pretty nice. You can start to think about ways you could use this

862
00:57:42,000 --> 00:57:46,000
from all kinds of different scenarios.

863
00:57:46,000 --> 00:57:50,000
And since it's open source and free, it also has a plug-in system, but I think

864
00:57:50,000 --> 00:57:54,000
you start getting into the commercial

865
00:57:54,000 --> 00:57:58,000
territory. I have never really dug into that with Linus as much as I did with some of the previous tools.

866
00:57:58,000 --> 00:58:02,000
The main difference with Bastille, for those of you that remember,

867
00:58:02,000 --> 00:58:06,000
is this is

868
00:58:06,000 --> 00:58:10,000
more comprehensive. This is more of an in-depth security scan.

869
00:58:10,000 --> 00:58:14,000
You kind of pick a level of security that's appropriate for your environment

870
00:58:14,000 --> 00:58:18,000
and then Linus holds you to that. It supports way more operating systems than Bastille

871
00:58:18,000 --> 00:58:22,000
did. It won't actively break your system like Bastille did in some cases.

872
00:58:22,000 --> 00:58:26,000
And the audit is significantly more in-depth.

873
00:58:26,000 --> 00:58:30,000
I don't know if you guys, maybe, probably nobody remembers these tools like Nessus

874
00:58:30,000 --> 00:58:34,000
and some of these tools that I used back in the day, but Nessus is another tool you could run against

875
00:58:34,000 --> 00:58:38,000
your own system. The thing is, in that case, or OpenVAS would be

876
00:58:38,000 --> 00:58:42,000
one you could use today, but again, in Linus it's going to be significantly faster.

877
00:58:42,000 --> 00:58:46,000
You're not going to bang out your log files because you're slamming on these ports.

878
00:58:46,000 --> 00:58:50,000
And because you're running it on the host,

879
00:58:50,000 --> 00:58:54,000
you're running it with privileges that Nessus or OpenVAS wouldn't normally have.

880
00:58:54,000 --> 00:58:58,000
And since you're running this yourself, you want to know what's there, so you get some more

881
00:58:58,000 --> 00:59:02,000
comprehensive search of the entire system.

882
00:59:02,000 --> 00:59:06,000
They do have an enterprise. They should contact me. We'll talk.

883
00:59:06,000 --> 00:59:10,000
I'll do some of the marketing for their enterprise products. I'm all in.

884
00:59:10,000 --> 00:59:14,000
Like a remote core system and all that, that's

885
00:59:14,000 --> 00:59:18,000
probably incredibly fancy. Anyways, I've read it on enough now

886
00:59:18,000 --> 00:59:20,000
about my old security

887
00:59:20,000 --> 00:59:24,000
proclivities, but it's fun, and it's a neat way to just check your system out and see

888
00:59:24,000 --> 00:59:28,000
what's going on. If you're on the Mac system,

889
00:59:28,000 --> 00:59:32,000
you know, one of the Macintoshes, it's in Homebrew. And if you're on FreeBSD,

890
00:59:32,000 --> 00:59:36,000
it's in Ports, and it's available as a deb and an rpm and a tarball

891
00:59:36,000 --> 00:59:40,000
as well. As well as, like I said, a deb repo for the Ubuntu's.

892
00:59:40,000 --> 00:59:44,000
What do you think, Beerbert? Oh, go ahead. I wonder if there's an API

893
00:59:44,000 --> 00:59:48,000
for that. I think that'd be really interesting. That would be good. It'd be really interesting

894
00:59:48,000 --> 00:59:52,000
if we could, you know, build a GUI for that so that regular

895
00:59:52,000 --> 00:59:56,000
users could be able to do that kind of audit, that kind of

896
00:59:56,000 --> 01:00:00,000
check. You know, just be able to see little green check boxes or whatever. It's

897
01:00:00,000 --> 01:00:04,000
GPL too, so I wonder if there's any distro out there that's pre-shipping this

898
01:00:04,000 --> 01:00:08,000
and emailing the users with a report or something. Because you could even modify it

899
01:00:08,000 --> 01:00:12,000
a bit to kind of clean it up and make it more presentable, I suppose. It looks like for at least their premium

900
01:00:12,000 --> 01:00:16,000
software as a service offering, they do offer an API. Oh, yeah, I figured.

901
01:00:16,000 --> 01:00:20,000
Yeah, I figured. Isn't that how it always goes now? I'm guessing

902
01:00:20,000 --> 01:00:24,000
their self-hosted version also offers an API, considering

903
01:00:24,000 --> 01:00:28,000
you have to receive a custom quote to get it. Oh, yeah.

904
01:00:28,000 --> 01:00:32,000
Oh, yeah. Yeah, the API is where the money's at these days, right? So you always

905
01:00:32,000 --> 01:00:36,000
have to throw that behind the enterprise product. It is pretty affordable, though. Three dollars

906
01:00:36,000 --> 01:00:40,000
per system per month. Hmm.

907
01:00:40,000 --> 01:00:44,000
That's for their premium offering. This is the way this works. So the GPL

908
01:00:44,000 --> 01:00:48,000
sort of like the core product that you just run on your own on the command line that you could

909
01:00:48,000 --> 01:00:52,000
automate if you knew some shell scripting and cron and, you know, you could get it

910
01:00:52,000 --> 01:00:56,000
done. And so they tease you with that, and then you get like a big huge infrastructure

911
01:00:56,000 --> 01:01:00,000
that like, you know, if you just, you could use the enterprise product. It's the same core technology, but

912
01:01:00,000 --> 01:01:04,000
we've added additional value, and we have an API. It's only three dollars a month.

913
01:01:04,000 --> 01:01:08,000
How do you not go, I'm doing that, right? If you start using this at the enterprise level,

914
01:01:08,000 --> 01:01:12,000
sure, if you're on a laptop, you're on a couple systems here in the studio, probably not worth it, but

915
01:01:12,000 --> 01:01:16,000
you start getting more beyond 10, 15 systems, you start getting to 25, 30, 35

916
01:01:16,000 --> 01:01:20,000
systems, that enterprise offering is all of a sudden starting to look pretty tempting. I mean, I know

917
01:01:20,000 --> 01:01:24,000
Noah's going to be in just because there's a self-hosted option. Oh, really? There is?

918
01:01:24,000 --> 01:01:28,000
I should call in. I should call in to ask Noah, and I should

919
01:01:28,000 --> 01:01:32,000
ask him what Linus is, and he'd start explaining who Linus Torvalds is,

920
01:01:32,000 --> 01:01:36,000
and right? No, no, no, not Linus. Linus. What?

921
01:01:36,000 --> 01:01:40,000
I could just see how that conversation goes. Yeah, yeah, there you go,

922
01:01:40,000 --> 01:01:44,000
Dan. Build it into elementary OS, okay? Just build it right in there, and

923
01:01:44,000 --> 01:01:48,000
we'll give us a mess. Yeah, I gotta go poke. Now I gotta talk to some people.

924
01:01:48,000 --> 01:01:52,000
I'm on a mission now. It would be a pretty cool like headline feature, elementary OS,

925
01:01:52,000 --> 01:01:56,000
self-auditing security, you know? Wouldn't that be pretty sweet?

926
01:01:56,000 --> 01:02:00,000
It would. I wonder if you could like run this stuff on against the

927
01:02:00,000 --> 01:02:04,000
elementary OS ISOs to see how secure they are?

928
01:02:04,000 --> 01:02:08,000
Yeah, I'm going to have to start a whole witch hunt now.

929
01:02:08,000 --> 01:02:12,000
We're going to change some default settings.

930
01:02:12,000 --> 01:02:16,000
I think it'll be fun to watch. You tell us how it goes, Dan. You report back, okay?

931
01:02:16,000 --> 01:02:20,000
Alright, well, so check it out, Linus. You can find a link in the show notes, and

932
01:02:20,000 --> 01:02:24,000
yeah, I actually did pretty good. Some of my other systems that I ran this on did

933
01:02:24,000 --> 01:02:28,000
not pass the audit as well, but it's all pretty readable. It's all

934
01:02:28,000 --> 01:02:32,000
pretty understandable if you've worked with this stuff in the past. It's like, go change the permissions

935
01:02:32,000 --> 01:02:36,000
on this file. Go change this line in the config. Go install this package.

936
01:02:36,000 --> 01:02:40,000
Does it give you like a description of why this is a bad setting?

937
01:02:40,000 --> 01:02:44,000
Yeah, so what they generally do, I was trying to find one that I could refer you to, but

938
01:02:44,000 --> 01:02:48,000
boy, there's just a lot when you look in the full log, but what they generally do is they'll say

939
01:02:48,000 --> 01:02:52,000
this is a best practice for XYZ reasons. See more here

940
01:02:52,000 --> 01:02:56,000
on this URL, and they'll give you a URL to their website with like a knowledge base article,

941
01:02:56,000 --> 01:03:00,000
or they'll link you to a CVE, so you can go read the CVE

942
01:03:00,000 --> 01:03:04,000
on that particular vulnerability.

943
01:03:04,000 --> 01:03:08,000
Of course, it also supports SE Linux and things like that. I probably should not get back into all the things it supports, because

944
01:03:08,000 --> 01:03:12,000
I could really do an entire episode just on this.

945
01:03:12,000 --> 01:03:16,000
I wonder if it's possible to run it on the Windows

946
01:03:16,000 --> 01:03:20,000
subsystem for Linux. That's a great question. I want to see what that would

947
01:03:20,000 --> 01:03:24,000
return. I sometimes wonder if we should have that installed

948
01:03:24,000 --> 01:03:28,000
somewhere on one of these systems, if we're missing some aspect of Linux now.

949
01:03:28,000 --> 01:03:32,000
Do you think that's a thing? Are we missing out on something there?

950
01:03:32,000 --> 01:03:36,000
Maybe. I mean, I feel like there's a silent group of people

951
01:03:36,000 --> 01:03:40,000
that are using it, but they're not talking about it. I've definitely had a

952
01:03:40,000 --> 01:03:44,000
couple of conversations where people are, it starts like this, it's like, you know how

953
01:03:44,000 --> 01:03:48,000
you were saying on air that you were worried that Ubuntu on Windows would just keep

954
01:03:48,000 --> 01:03:52,000
people on Windows? Well, that's me. And I've had that a few times now. And they're like,

955
01:03:52,000 --> 01:03:56,000
you know, I was thinking about switching, and now I don't have to.

956
01:03:56,000 --> 01:04:00,000
I mean, but at the same time, those are technically also now Linux users.

957
01:04:00,000 --> 01:04:04,000
Don't give me that crap. Don't give me that. I hate that. I hate it when people do that. It's like calling Android

958
01:04:04,000 --> 01:04:08,000
users Linux users. You just don't like Linux being in a sandbox.

959
01:04:08,000 --> 01:04:12,000
Yeah, don't put Linux in a box. I know. Well, unless it's a box on your Linux box.

960
01:04:12,000 --> 01:04:16,000
But you're perfectly fine with running Windows in a VM. Why does that need to be in a sandbox?

961
01:04:16,000 --> 01:04:20,000
Because Windows is a toy operating system. It's actually almost irresponsible to run

962
01:04:20,000 --> 01:04:24,000
Windows on physical hardware. You should always be running Windows under Linux

963
01:04:24,000 --> 01:04:28,000
virtualization, I think. Maybe with hardware pass-through.

964
01:04:28,000 --> 01:04:32,000
On the flip side, though, I think Linux is the most popular

965
01:04:32,000 --> 01:04:36,000
virtualized operating system. Damn it. Damn it. Yeah, you're probably right.

966
01:04:36,000 --> 01:04:40,000
And of course, I'm just having a bit of fun. The only time I would ever really run Windows

967
01:04:40,000 --> 01:04:44,000
is actually when I needed to be on physical hardware. So I don't often have use for

968
01:04:44,000 --> 01:04:48,000
Windows in a VM anymore. Or when you need Skype to not suck. Yeah. Yeah, that's been

969
01:04:48,000 --> 01:04:52,000
a thing. Yeah. I was trying to debate if we should have a no Skype

970
01:04:52,000 --> 01:04:56,000
policy, like talking about Skype in the show. But we recently, just because it is kind of

971
01:04:56,000 --> 01:05:00,000
newsworthy-ish, is we recently had the

972
01:05:00,000 --> 01:05:04,000
new version of Skype for Linux. The rest upon us. Yeah, the version that

973
01:05:04,000 --> 01:05:08,000
they shipped out to everybody now. Windows, Mac users. We've all gotten the new Electron

974
01:05:08,000 --> 01:05:12,000
based Skype. We don't have a choice but to use it because the old Skype

975
01:05:12,000 --> 01:05:16,000
doesn't work right anymore. Yeah, and it has totally borked audio

976
01:05:16,000 --> 01:05:20,000
on our Ubuntu 16.04 system, ironically. We finally

977
01:05:20,000 --> 01:05:24,000
stabilized on the Ubuntu 16.04 system. Well, to be fair, it could be

978
01:05:24,000 --> 01:05:28,000
on any Linux version. We haven't tested it yet. Yeah, we've only tried it on 16.04.

979
01:05:28,000 --> 01:05:32,000
That's true. But I haven't heard everybody else complaining. But what happens is, is you run Skype for a

980
01:05:32,000 --> 01:05:36,000
bit. A few minutes. It's an instant problem.

981
01:05:36,000 --> 01:05:40,000
And how would you describe this problem? How would you describe what happens to the audio?

982
01:05:40,000 --> 01:05:44,000
The audio slows down, so things are

983
01:05:44,000 --> 01:05:48,000
pitched down a few octaves. But it's also only the highs of the

984
01:05:48,000 --> 01:05:52,000
audio. So it's slowed down, but it's like, okay, well there's two things.

985
01:05:52,000 --> 01:05:56,000
The audio that gets recorded and the audio that we hear are two different things. Yeah. You're talking about

986
01:05:56,000 --> 01:06:00,000
the audio that gets recorded. Correct. Yeah. So just finish describing that. I'll describe the

987
01:06:00,000 --> 01:06:04,000
other audio. So it slows it down. Yeah, it slows it down so the audio

988
01:06:04,000 --> 01:06:08,000
is down a few octaves and it's slower, noticeably slower, like when you put

989
01:06:08,000 --> 01:06:12,000
if you're recording on another system, like if you're

990
01:06:12,000 --> 01:06:16,000
recording two ends of a Skype conversation, you put them in the timeline, one will be

991
01:06:16,000 --> 01:06:20,000
longer than the other. And then there's also the

992
01:06:20,000 --> 01:06:24,000
other issue that Chris is going to explain. So on the sound output from the system

993
01:06:24,000 --> 01:06:28,000
that's now running Skype, everything is high pitched. It's slowed a bit and it's

994
01:06:28,000 --> 01:06:32,000
high pitched. So it's more chip monkey, kind of

995
01:06:32,000 --> 01:06:36,000
screechy, scratchy kind of sounding. And it's

996
01:06:36,000 --> 01:06:40,000
all application output after Skype's been loaded. It's fine. I could

997
01:06:40,000 --> 01:06:44,000
demonstrate it right now. If I loaded Skype, it would break the audio from the mumble room

998
01:06:44,000 --> 01:06:48,000
for everybody. Everybody would sound like their microphones are broken. Until you reboot.

999
01:06:48,000 --> 01:06:52,000
Yeah. Can't even just close applications and reopen them.

1000
01:06:52,000 --> 01:06:56,000
You've got to reboot. And then if you

1001
01:06:56,000 --> 01:07:00,000
open Skype again, you've got to reboot again. And the weird thing is

1002
01:07:00,000 --> 01:07:04,000
even if you're, well since you're recording externally from Skype,

1003
01:07:04,000 --> 01:07:08,000
like it will, if you have good audio

1004
01:07:08,000 --> 01:07:12,000
when you start from another application and you open Skype,

1005
01:07:12,000 --> 01:07:16,000
it will affect that audio as well from the other application. Yes.

1006
01:07:16,000 --> 01:07:20,000
So I mean our solution has been don't use Skype. But what happens is

1007
01:07:20,000 --> 01:07:24,000
every now and then we end up in a situation where one of our remote hosts

1008
01:07:24,000 --> 01:07:28,000
has happened a couple of times recently, is at a client's network and the client

1009
01:07:28,000 --> 01:07:32,000
has outbound firewall rules.

1010
01:07:32,000 --> 01:07:36,000
And when that happens, we're kind of limited.

1011
01:07:36,000 --> 01:07:40,000
Yeah. So it's most time

1012
01:07:40,000 --> 01:07:44,000
it's just been Skype. They only allow us to use Skype. They have like, or Slack.

1013
01:07:44,000 --> 01:07:48,000
But we're not going to use Slack to record podcasts. So it's like Slack or

1014
01:07:48,000 --> 01:07:52,000
Skype. So we went with Skype. Yeah, for example, the user error that just came out

1015
01:07:52,000 --> 01:07:56,000
on Sunday, we ended up recording that

1016
01:07:56,000 --> 01:08:00,000
on mumble because we had the first issue that Chris described. And then

1017
01:08:00,000 --> 01:08:04,000
we switched to mumble, but then we opened Skype and that messed up the recording

1018
01:08:04,000 --> 01:08:08,000
over mumble. You know what? I think InagoGo might have it. And I wonder if I could fix

1019
01:08:08,000 --> 01:08:12,000
it with Puva control. So InagoGo postulates, or perhaps

1020
01:08:12,000 --> 01:08:16,000
he knows, that Skype is changing the sample rate in pulse.

1021
01:08:16,000 --> 01:08:20,000
Well that seems testable. Yeah, that's possible.

1022
01:08:20,000 --> 01:08:24,000
And that seems like something, I wonder why that would be, but I wonder if we could, if we

1023
01:08:24,000 --> 01:08:28,000
change it back, I wonder if Skype would sit there and fight with us and flip it? Well, we also noticed

1024
01:08:28,000 --> 01:08:32,000
that Skype was changing levels every time we started it. Yeah, that's true.

1025
01:08:32,000 --> 01:08:36,000
And then after, and then after some of this bouncing around, it was

1026
01:08:36,000 --> 01:08:40,000
just, we were just, okay, we just, it's not like we want to sit here and waste a lot of time

1027
01:08:40,000 --> 01:08:44,000
trying to make stupid Skype work, you know? It's not like it's some high priority, but

1028
01:08:44,000 --> 01:08:48,000
go figure. It's like, it's, the purpose of this system is to

1029
01:08:48,000 --> 01:08:52,000
have multiple avenues of communication. Discord, mumble, Skype,

1030
01:08:52,000 --> 01:08:55,520
Hangouts, Jitsi, whatever

1031
01:08:55,520 --> 01:08:59,520
cockamamie SIP application Noah wants me to use this week.

1032
01:08:59,520 --> 01:09:03,520
This is our communications rig that we bring in for remote hosts, and so Skype is one of

1033
01:09:03,520 --> 01:09:07,520
the many applications it's supposed to work with. Now hopefully

1034
01:09:07,520 --> 01:09:11,520
InagoGo goes right. Hopefully he's onto something, and we can fix it.

1035
01:09:11,520 --> 01:09:15,520
Because I want to keep it 16.04, I don't want to have to switch to something like Windows. Which is probably where

1036
01:09:15,520 --> 01:09:19,520
we might end up. Which would be, nobody would want that. Nobody would want that.

1037
01:09:19,520 --> 01:09:23,520
Alright, Beardsley. Well, so I thought, since we don't have

1038
01:09:23,520 --> 01:09:27,520
Wes, we could, we could lay, you know what we could do is

1039
01:09:27,520 --> 01:09:31,520
we could lay the groundwork for how we're doing the Gen 2 challenge. And cover that,

1040
01:09:31,520 --> 01:09:35,520
and cover the software setup we're doing, and cover what stage install we're starting with and why.

1041
01:09:35,520 --> 01:09:39,520
And the plan that we're going to have for going forward, so that way

1042
01:09:39,520 --> 01:09:43,520
it doesn't like monopolize the whole show, but we're still going to get to it. So anyways,

1043
01:09:43,520 --> 01:09:47,520
we'll do that. We'll do that in place of actually kicking off the challenge, is we'll lay the

1044
01:09:47,520 --> 01:09:51,520
groundwork for the challenge, and then we can just go full force. So, let's thank

1045
01:09:51,520 --> 01:09:55,520
Ting for sponsoring this here show. Go to linux.ting.com.

1046
01:09:55,520 --> 01:09:59,520
Linux.ting.com. You've heard that word before, Linux. You want to put that in your browser.

1047
01:09:59,520 --> 01:10:03,520
Because then, when people start typing L, they get Linux

1048
01:10:03,520 --> 01:10:07,520
sites and not, I don't know, other things that can start with an L.

1049
01:10:07,520 --> 01:10:11,520
Linux.ting.com. You go there and you learn more about a better way to do mobile.

1050
01:10:11,520 --> 01:10:15,520
Average bill, $23, and it's delicious!

1051
01:10:15,520 --> 01:10:19,520
Like a turkey dinner? Oh! Like a turkey beard over there.

1052
01:10:19,520 --> 01:10:23,520
You pay for what you use. It's just however much you talk, however many

1053
01:10:23,520 --> 01:10:27,520
text messages you may or may not send, and however many megabytes

1054
01:10:27,520 --> 01:10:31,520
you may or may not use. Wi-Fi! And then it's nationwide coverage, no

1055
01:10:31,520 --> 01:10:35,520
contracts, no determination fees. It's just $6 for the line, Uncle Sam's

1056
01:10:35,520 --> 01:10:39,520
cut, and then your usage. You know, with three lines, three lines,

1057
01:10:39,520 --> 01:10:43,520
we're almost always under $35. It's great because

1058
01:10:43,520 --> 01:10:47,520
all three of us are always on Wi-Fi, and we're always on Telegram,

1059
01:10:47,520 --> 01:10:51,520
or some other VoIP system when we want to make calls.

1060
01:10:51,520 --> 01:10:55,520
I mean, it just works so great for us. And if you're in a small business, it's kind of like in our setup, where you have a few

1061
01:10:55,520 --> 01:10:59,520
savvy users, it's just such an awesome way to

1062
01:10:59,520 --> 01:11:03,520
give, not just like phone services, but to really keep everybody

1063
01:11:03,520 --> 01:11:07,520
in contact on the team. Because you have, like in our case, you have Telegram and

1064
01:11:07,520 --> 01:11:11,520
Slack, or whatever apps you guys in your organization might be using.

1065
01:11:11,520 --> 01:11:15,520
But now everybody is connected all the time, and so

1066
01:11:15,520 --> 01:11:19,520
Joe and I were just talking about Linux Fest Northwest just before the show started, and

1067
01:11:19,520 --> 01:11:23,520
that's the time where I go, you know, I'm thinking I might buy a few Ting Sims ahead of time. I don't even

1068
01:11:23,520 --> 01:11:27,520
know what we'd use them for, but they're $9, and I don't pay a contract, there's no determination

1069
01:11:27,520 --> 01:11:31,520
fee, so I just put, when the guys get here, we put them in a device and we're good to go.

1070
01:11:31,520 --> 01:11:35,520
And you can get them on Amazon, they're primeable too, which is a great way to give them out for

1071
01:11:35,520 --> 01:11:39,520
holiday presents as well. That's kind of cool. And then when they want to sign up, just send them to

1072
01:11:39,520 --> 01:11:43,520
linux.ting.com, and they'll get our deal. That's pretty cool. So what's great

1073
01:11:43,520 --> 01:11:47,520
about that is if they've got a device already, then they could get a $25

1074
01:11:47,520 --> 01:11:51,520
service credit and their first month's going to be free. That's a pretty great gift.

1075
01:11:51,520 --> 01:11:55,520
linux.ting.com. linux.ting.com?

1076
01:11:55,520 --> 01:11:59,520
Here's my question, Chris. You saved a whole lot of money on Ting. Do you know

1077
01:11:59,520 --> 01:12:03,520
of any delivery turkey services? That is a great

1078
01:12:03,520 --> 01:12:07,520
question. I know places where you can get really good turkey meals, but you've got to pick them up.

1079
01:12:07,520 --> 01:12:11,520
And it's pretty far from here. Boy, turkey

1080
01:12:11,520 --> 01:12:15,520
delivery. I don't know. You know, really what you should

1081
01:12:15,520 --> 01:12:19,520
do is you should get a grocery store delivery and just get one of their turkeys and

1082
01:12:19,520 --> 01:12:23,520
just go that route. But I want somebody else to make the turkey for me.

1083
01:12:23,520 --> 01:12:27,520
Yeah, just get the pre-made one and you can microwave it. I mean, nobody's counting.

1084
01:12:27,520 --> 01:12:31,520
Microwave turkey!

1085
01:12:31,520 --> 01:12:35,520
Indiegogo says he was just guessing, by the way, but I think that's a good guess. It's something I might check.

1086
01:12:35,520 --> 01:12:39,520
And yeah, if you have time to check it yourself, Mr. Gogo, please go for it.

1087
01:12:39,520 --> 01:12:43,520
I have done some research, Chris. There apparently is mail-order turkey.

1088
01:12:43,520 --> 01:12:47,520
Yeah, but it seems like you'd have to get on that like a while ago. Maybe.

1089
01:12:47,520 --> 01:12:51,520
This is like hours away now. Turkey Day is hours away.

1090
01:12:51,520 --> 01:12:55,520
There's probably Amazon next day delivery.

1091
01:12:55,520 --> 01:12:59,520
I wonder if she's looking to Boston's. See what they offer. You know, they're not too far away.

1092
01:12:59,520 --> 01:13:03,520
So let's talk about this Gen 2 challenge. Not Turkey Day.

1093
01:13:03,520 --> 01:13:07,520
Although it is funny, Turkey Day is getting on our minds more and more. It's big for my family.

1094
01:13:07,520 --> 01:13:11,520
This is the one that we really like. Because we like to eat, to be honest.

1095
01:13:11,520 --> 01:13:15,520
Anyways, we're going to do the Gen 2 challenge in some, I hope, in a way that's fun.

1096
01:13:15,520 --> 01:13:23,520
And also sort of gives you a real taste of what life with Gen 2 would be like.

1097
01:13:23,520 --> 01:13:29,520
So it's kind of a delicate balance, because we don't want it to be boring to people who don't give two craps about Gen 2.

1098
01:13:29,520 --> 01:13:33,520
And at the same time, we want to give it its proper due.

1099
01:13:33,520 --> 01:13:41,520
We are going to take an approach that I think you guys will like, especially once it's up and rolling.

1100
01:13:41,520 --> 01:13:45,520
And that is, I'm going to build a VM here for Mr. Wes Payne.

1101
01:13:45,520 --> 01:13:49,520
And it's running here in the studio.

1102
01:13:49,520 --> 01:13:53,520
And at the beginning of each show, Wes will fire it up and he'll begin building the Gen 2 system.

1103
01:13:53,520 --> 01:13:57,520
As the show goes on, he'll sort of tend to it. Keep things rolling.

1104
01:13:57,520 --> 01:14:01,520
Keep it installing.

1105
01:14:01,520 --> 01:14:05,520
And then when the show's over, we'll pause the virtual machine.

1106
01:14:05,520 --> 01:14:09,520
You know, we might pause it a few minutes after the show. Maybe let it build, finish, or something.

1107
01:14:09,520 --> 01:14:13,520
We'll pause the virtual machine and we'll go home. We'll go about our day.

1108
01:14:13,520 --> 01:14:17,520
And then the next episode we'll come back, we'll continue the build.

1109
01:14:17,520 --> 01:14:23,520
Now the idea here is to demonstrate, if you take a few hours a day, or a week, a couple hours a week,

1110
01:14:23,520 --> 01:14:29,520
how long does it take you to get a running Gen 2 system all the way up to X, and then make it usable?

1111
01:14:29,520 --> 01:14:33,520
So we're basically doing a real-time Gen 2 install over a series of weeks.

1112
01:14:33,520 --> 01:14:39,520
Yeah, and so we'll sort of just check in on it. It won't be the main topic, but it'll be part of the show each week for a couple of weeks.

1113
01:14:39,520 --> 01:14:43,520
We'll just check in on it and give everybody a sense of what that's like.

1114
01:14:43,520 --> 01:14:47,520
And we were looking at it, and you start with a Stage 1 because that'd probably be the most entertaining.

1115
01:14:47,520 --> 01:14:51,520
And then we could poke the most fun at Gen 2 with a Stage 1, right?

1116
01:14:51,520 --> 01:14:57,520
Look at Gen 2. Look how long it takes. That would be, of course, the most entertaining.

1117
01:14:57,520 --> 01:15:05,520
We did some digging around, and it seems like that Stage 3 is basically – that's the way the project recommends now, right, Beard?

1118
01:15:05,520 --> 01:15:09,520
Because when I did this, it was like, go whichever way you want, but Stage 3 is like –

1119
01:15:09,520 --> 01:15:13,520
that's the recommended path now, and they make it hard to even do a Stage 1 or 2.

1120
01:15:13,520 --> 01:15:17,520
So the differences in the stages are how far along the system is.

1121
01:15:17,520 --> 01:15:21,520
With a Stage 1, you're just doing everything. You're building everything.

1122
01:15:21,520 --> 01:15:27,520
With a Stage 2, the tarballs that you get contain some packages that the Stage 1 might have had. They're built from that.

1123
01:15:27,520 --> 01:15:31,520
And then it's a little bit further along. You have more tools in the chain.

1124
01:15:31,520 --> 01:15:39,520
Then you have a Stage 3, which is – of course, it's everything the Stage 1 and Stage 2 tarballs have, but it also contains a system set.

1125
01:15:39,520 --> 01:15:45,520
And Portage includes quick references for this set based on packages that might be in the atSystemSet operator.

1126
01:15:45,520 --> 01:15:55,520
It has architecture-specific downloads available, so you can get it for like the 64-bit version of an Intel CPU or 32-bit, or you can get it for ARM.

1127
01:15:55,520 --> 01:15:59,520
And it's more of a complete system ready to go.

1128
01:15:59,520 --> 01:16:10,520
Basically, they use Stage 1 to build out Stage 3, and Stage 2 is basically just Stage 1, except they built Stage 1 with itself to make sure it could build itself.

1129
01:16:10,520 --> 01:16:15,520
Right. So it really is not Stage 1 and 2 combined so much as it's a completely built Stage 1.

1130
01:16:15,520 --> 01:16:24,520
And it's kind of like now you partition the disk and lay these things out on the disk, and you just have to then do your partition magic.

1131
01:16:24,520 --> 01:16:28,520
And look who walks in right now. Hello, Mr. Wes Payne.

1132
01:16:28,520 --> 01:16:30,520
I could tell you needed me, gentlemen.

1133
01:16:30,520 --> 01:16:32,520
Yeah, did your Gen 2 ears start itching?

1134
01:16:32,520 --> 01:16:33,520
Oh, yeah, yeah.

1135
01:16:33,520 --> 01:16:37,520
Yeah, so I was just telling the folks about our strategy. So I've set you up a virtual machine here.

1136
01:16:37,520 --> 01:16:38,520
Oh, look at this.

1137
01:16:38,520 --> 01:16:41,520
And I've got you a Stage 3 ISO.

1138
01:16:41,520 --> 01:16:47,520
I decided – oh, hello there – I decided for simplicity's sake just to do VirtualBox for the VM because it's got the easy pause option.

1139
01:16:47,520 --> 01:16:48,520
It sure does, yeah.

1140
01:16:48,520 --> 01:16:50,520
I just thought that for simplicity's sake, we'll go VirtualBox.

1141
01:16:50,520 --> 01:16:54,520
I haven't used VirtualBox in a while, and they've got a built-in setting for Gen 2.

1142
01:16:54,520 --> 01:17:00,520
And so, yeah, we're going to essentially just – I bet next episode I think you'll have it booting.

1143
01:17:00,520 --> 01:17:05,520
And then it's just going to be how long does it take to build from there, and we'll just sort of check in on the project as we go.

1144
01:17:05,520 --> 01:17:13,520
And you can follow along, too, if you'd like. In fact, I think that'd be a really fun aspect if you want to build a VM and start it up while you listen to the show and see how far you get.

1145
01:17:13,520 --> 01:17:15,520
Oh, we can build together.

1146
01:17:15,520 --> 01:17:19,520
That's what I was thinking. Wouldn't that be really cool? I mean, it's nerdy, but I mean, that's what this is all about, right?

1147
01:17:19,520 --> 01:17:20,520
That's right, it is.

1148
01:17:20,520 --> 01:17:23,520
It wouldn't be a virtual lug if we weren't doing things like compiling Gen 2.

1149
01:17:23,520 --> 01:17:30,520
Yeah, and I totally – seriously, if you guys – anybody in the Mumble Room wants to do it along with us as well, you can check in when we're doing our check-in.

1150
01:17:30,520 --> 01:17:39,520
Or if you're going to do it at home and decide you want to join the Mumble Room, you can go to – it's mumble.jupitercolony.com to get the setup guide and information you need to join our Mumble Room.

1151
01:17:39,520 --> 01:17:45,520
mumble.jupitercolony.com if you want to do it along with us. I think that could be pretty cool.

1152
01:17:45,520 --> 01:17:48,520
Well, I'm glad you made it, Wes. How about that Washington traffic?

1153
01:17:48,520 --> 01:17:51,520
Oh my, that was some of the worst I've seen in a long time.

1154
01:17:51,520 --> 01:17:57,520
Everybody gives credit to New York and Los Angeles for their traffic, but nobody gives proper credit to how awful Washington is.

1155
01:17:57,520 --> 01:18:00,520
See, we need to spread this more so people stop moving here.

1156
01:18:00,520 --> 01:18:02,520
Yeah, exactly, because they don't know about this.

1157
01:18:02,520 --> 01:18:03,520
It's horrible, don't come.

1158
01:18:03,520 --> 01:18:04,520
But you did bring us a beer, huh?

1159
01:18:04,520 --> 01:18:05,520
I did.

1160
01:18:05,520 --> 01:18:07,520
That is – jeez, a winter ale.

1161
01:18:07,520 --> 01:18:11,520
It's even called Kitten Mittens.

1162
01:18:11,520 --> 01:18:27,520
You know, okay, so I was just about to wrap up the show, but since you're here, I thought we should mention that everybody, all of you, even if you're not a TechSnap regular, should probably check in on episode 346 because there's some news in there.

1163
01:18:27,520 --> 01:18:32,520
Some changes are coming to the TechSnap program, and it may be relevant to listeners of this program.

1164
01:18:32,520 --> 01:18:33,520
It sure might.

1165
01:18:33,520 --> 01:18:34,520
I'll just put it that way.

1166
01:18:34,520 --> 01:18:38,520
And also possibly the next episode of User Error?

1167
01:18:38,520 --> 01:18:48,520
Right, yes, yes, yes, because Wes will be joining us for the next episode of User Error, so we'll have details about big secret plans that we've been working on for several months behind the scenes.

1168
01:18:48,520 --> 01:18:49,520
Oh, so secret.

1169
01:18:49,520 --> 01:19:02,520
So get the news, get the announcement in TechSnap 346, which we have not recorded yet, but we'll have more details in User Error 36, which will probably be out like Saturday or Sunday of this week.

1170
01:19:02,520 --> 01:19:05,520
So something to maybe listen to over the holiday weekend.

1171
01:19:05,520 --> 01:19:07,520
There's always changes happening here at the JV network.

1172
01:19:07,520 --> 01:19:08,520
Well, Wes, it's good to see you.

1173
01:19:08,520 --> 01:19:09,520
Oh, yeah.

1174
01:19:09,520 --> 01:19:10,520
Thank you for making it.

1175
01:19:10,520 --> 01:19:11,520
Thank you for doing a wonderful show.

1176
01:19:11,520 --> 01:19:14,520
I was enjoying it listening while I was trapped.

1177
01:19:14,520 --> 01:19:15,520
That's good.

1178
01:19:15,520 --> 01:19:18,520
Did you do the JV Live FM, or did you do the YouTube stream?

1179
01:19:18,520 --> 01:19:20,520
What's your in-the-car choice?

1180
01:19:20,520 --> 01:19:21,520
Normally it's the FM stream.

1181
01:19:21,520 --> 01:19:24,520
This time it was YouTube because it was just the easy, I told Google and it brought it to me.

1182
01:19:24,520 --> 01:19:27,520
And the nice thing is you lock the screen and it basically converts to an audio stream.

1183
01:19:27,520 --> 01:19:28,520
Yeah.

1184
01:19:28,520 --> 01:19:29,520
And that's pretty nice, too.

1185
01:19:29,520 --> 01:19:30,520
And then you unlock the stream, boom, back to a video.

1186
01:19:30,520 --> 01:19:32,520
That's only if you have YouTube Red, though.

1187
01:19:32,520 --> 01:19:33,520
Yes, true.

1188
01:19:33,520 --> 01:19:34,520
Good point.

1189
01:19:34,520 --> 01:19:35,520
But then otherwise go to jvlive.fm.

1190
01:19:35,520 --> 01:19:36,520
Yeah.

1191
01:19:36,520 --> 01:19:37,520
You can listen that way.

1192
01:19:37,520 --> 01:19:38,520
All right, gentlemen.

1193
01:19:38,520 --> 01:19:39,520
Thank you, Mumble Room.

1194
01:19:39,520 --> 01:19:40,520
Thanks, guys.

1195
01:19:40,520 --> 01:19:42,520
Go check out Mr. Dan there over at the Elementary Project.

1196
01:19:42,520 --> 01:19:46,520
Of course, they've just got that app center just rocking these days.

1197
01:19:46,520 --> 01:19:48,520
New apps are landing all the time over there.

1198
01:19:48,520 --> 01:19:49,520
Go check those out, too.

1199
01:19:49,520 --> 01:19:52,520
I just saw a new one going by, a new weather app that looks real slick.

1200
01:19:52,520 --> 01:19:53,520
Ooh.

1201
01:19:53,520 --> 01:19:54,520
It's good to see you, Dan.

1202
01:19:54,520 --> 01:19:55,520
Thank you for making it again.

1203
01:19:55,520 --> 01:19:56,520
I appreciate it.

1204
01:19:56,520 --> 01:19:57,520
Of course.

1205
01:19:57,520 --> 01:19:59,520
Now, thank you, everybody, for making the Mumble Room.

1206
01:19:59,520 --> 01:20:01,520
We had a light turnout this week, but we had a great crew.

1207
01:20:01,520 --> 01:20:03,520
So I really appreciate everybody that did make it.

1208
01:20:03,520 --> 01:20:06,520
And again, you're welcome to join us, mumble.jupitercolony.com.

1209
01:20:06,520 --> 01:20:11,520
If you have story suggestions or show, like, episode-specific feedback,

1210
01:20:11,520 --> 01:20:13,520
the subreddit is great for that.

1211
01:20:13,520 --> 01:20:17,520
Go to linuxunplugged.reddit.com, and you can send your emails.

1212
01:20:17,520 --> 01:20:20,520
Go to jupiterbroadcasting.com slash contact,

1213
01:20:20,520 --> 01:20:23,520
and choose Unplugged from the dropdown.

1214
01:20:23,520 --> 01:20:25,520
Go get more beard at wretch.net.

1215
01:20:25,520 --> 01:20:26,520
Hey!

1216
01:20:26,520 --> 01:20:27,520
God, that's a good one.

1217
01:20:27,520 --> 01:20:28,520
So good.

1218
01:20:28,520 --> 01:20:29,520
How did he get that?

1219
01:20:29,520 --> 01:20:30,520
And you're at Westpaint.

1220
01:20:30,520 --> 01:20:31,520
That's right, I am.

1221
01:20:31,520 --> 01:20:32,520
You got your name on there.

1222
01:20:32,520 --> 01:20:33,520
That's pretty good, too.

1223
01:20:33,520 --> 01:20:34,520
Clear, simple, easy.

1224
01:20:34,520 --> 01:20:35,520
That's pretty good.

1225
01:20:35,520 --> 01:20:36,520
I'm at Chris LAS.

1226
01:20:36,520 --> 01:20:38,520
The network is at Jupiter Signal.

1227
01:20:38,520 --> 01:20:42,520
And I feel like I probably should mention this from time to time.

1228
01:20:42,520 --> 01:20:46,520
We also have a telegram group, jupiterbroadcasting.com slash telegram,

1229
01:20:46,520 --> 01:20:49,520
where you can join in some of the shenanigans there.

1230
01:20:49,520 --> 01:20:52,520
Thank you for joining us on this week's episode of the Unplugged program.

1231
01:20:52,520 --> 01:20:53,520
Go grab our RSS feed.

1232
01:20:53,520 --> 01:20:57,520
That way you can see us next week, because otherwise we're going to miss you.

1233
01:20:57,520 --> 01:20:58,520
Goodbye!

1234
01:20:58,520 --> 01:21:03,520
and we'll see you next week.

1235
01:21:03,520 --> 01:21:04,520
Bye!

1236
01:21:04,520 --> 01:21:29,520
Get it out of here.

1237
01:21:29,520 --> 01:21:41,520
Well, Wes, I think obviously you should title the episode.

1238
01:21:41,520 --> 01:21:44,520
I mean, that seems like, I mean, I don't know.

1239
01:21:44,520 --> 01:21:47,520
Anybody got some suggestions we need to title this monster?

1240
01:21:47,520 --> 01:21:48,520
Let's get a name.

1241
01:21:48,520 --> 01:21:49,520
Let's get a name for this thing.

1242
01:21:49,520 --> 01:21:51,520
Let's not make it awful this time.

1243
01:21:51,520 --> 01:21:53,520
Not like last week.

1244
01:21:53,520 --> 01:21:54,520
What happened?

1245
01:21:54,520 --> 01:21:56,520
I'll tell you what.

1246
01:21:56,520 --> 01:22:00,520
I'm going to just clickbait.

1247
01:22:00,520 --> 01:22:04,520
Wes panning for Gen 2, Gen 2 test scam.

1248
01:22:04,520 --> 01:22:07,520
And simple tricks to audit your Linux system.

1249
01:22:07,520 --> 01:22:08,520
We could get really good at this.

1250
01:22:08,520 --> 01:22:13,520
We should just do like a whole like rash of those.

1251
01:22:13,520 --> 01:22:16,520
What about, are you getting that impressive emoji support or are you using the...

1252
01:22:16,520 --> 01:22:18,520
I'm using the web browser for that impressive emoji support.

1253
01:22:18,520 --> 01:22:19,520
Yes.

1254
01:22:19,520 --> 01:22:22,520
I'm using the Discord app in the web browser.

1255
01:22:22,520 --> 01:22:23,520
No escape from Google.

1256
01:22:23,520 --> 01:22:24,520
That's kind of good.

1257
01:22:24,520 --> 01:22:25,520
That's kind of good.

1258
01:22:25,520 --> 01:22:26,520
That is pretty good, actually.

1259
01:22:26,520 --> 01:22:28,520
Architect kills it with those titles sometimes.

1260
01:22:28,520 --> 01:22:29,520
Dude, he's a ninja.

1261
01:22:29,520 --> 01:22:32,520
He comes in there and he's like, boom, right in the nuts.

1262
01:22:32,520 --> 01:22:34,520
And by nuts, I mean things suggested.

1263
01:22:34,520 --> 01:22:37,520
What about B caching your file system?

1264
01:22:37,520 --> 01:22:39,520
Well, I don't want a dog on the B cache because it loves it.

1265
01:22:39,520 --> 01:22:42,520
I got nothing but love.

1266
01:22:42,520 --> 01:22:46,520
Yeah, I saw some good replies to people being snarky about that in some comments elsewhere

1267
01:22:46,520 --> 01:22:49,520
and like pointing people to like, here's the code.

1268
01:22:49,520 --> 01:22:51,520
Can you spot the problem with it?

1269
01:22:51,520 --> 01:22:54,520
And then like the one line patch that actually fixed it.

1270
01:22:54,520 --> 01:22:57,520
Still a shame though.

1271
01:22:57,520 --> 01:23:02,520
What about Android colon location aware?

1272
01:23:02,520 --> 01:23:03,520
I don't know.

1273
01:23:03,520 --> 01:23:06,520
I don't think that's better than no escape from Google.

1274
01:23:06,520 --> 01:23:11,520
So you mean we peaked at the top of the show then, huh?

1275
01:23:11,520 --> 01:23:12,520
Is that what that means?

1276
01:23:12,520 --> 01:23:14,520
I thought the Linux stuff was pretty neat.

1277
01:23:14,520 --> 01:23:16,520
I mean, you know, I thought that was neat.

1278
01:23:16,520 --> 01:23:17,520
No, you're right.

1279
01:23:17,520 --> 01:23:18,520
You're right.

1280
01:23:18,520 --> 01:23:21,520
I think sometimes I Google out on the security stuff more than people care.

1281
01:23:21,520 --> 01:23:22,520
That might be what's up.

1282
01:23:22,520 --> 01:23:23,520
That might be.

1283
01:23:23,520 --> 01:23:24,520
That might be true.

1284
01:23:24,520 --> 01:23:25,520
But to me, it's just so handy.

1285
01:23:25,520 --> 01:23:30,520
It's so handy to be able to check your box and just get like a, even if it's not a totally

1286
01:23:30,520 --> 01:23:32,520
comprehensive, it's more than you were probably looking at.

1287
01:23:32,520 --> 01:23:33,520
That's what I like about it.

1288
01:23:33,520 --> 01:23:34,520
Yeah, absolutely.

1289
01:23:34,520 --> 01:23:37,520
And it's fun to play around with that stuff and compare your different distributions.

1290
01:23:37,520 --> 01:23:41,520
Like, you know, you installed one distro and then you installed the other distro and you

1291
01:23:41,520 --> 01:23:44,520
can see how they're kind of set up out of the box differently.

1292
01:23:44,520 --> 01:23:47,520
Maybe we can bring that back around on this here Gentoo business.

1293
01:23:47,520 --> 01:23:48,520
Oh, that would be interesting.

1294
01:23:48,520 --> 01:23:49,520
Yeah.

1295
01:23:49,520 --> 01:23:53,520
I, we have to have a yin and yang for architect.

1296
01:23:53,520 --> 01:24:22,520
He also suggests titles like Google way up your butt.


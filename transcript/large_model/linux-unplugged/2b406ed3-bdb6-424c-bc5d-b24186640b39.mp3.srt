1
00:00:00,000 --> 00:00:07,000
This is Linux Unplugged, episode 25 for January 28th, 2014.

2
00:00:30,000 --> 00:00:41,200
Welcome to Linux Unplugged, your weekly Linux talk show that's not too big to admit when

3
00:00:41,200 --> 00:00:46,640
its own fantastic foot has been stuck in its own amazing mouth. My name is Chris.

4
00:00:46,640 --> 00:00:47,800
And my name is Matt.

5
00:00:47,800 --> 00:00:52,680
Hey there, Matt. Episode 25, buddy. I'm pumped up because it's like a marathon for me tonight.

6
00:00:52,680 --> 00:00:56,480
On the livestream, we're doing the State of the Union coverage on Unfiltered. That's like

7
00:00:56,480 --> 00:01:01,880
right after we're done on this show, man. It's like big time over here. But not only that,

8
00:01:01,880 --> 00:01:05,200
not only that, but I think we've got a really good episode ahead of us. We're only going to

9
00:01:05,200 --> 00:01:10,840
talk about Steam. No, I'm kidding. Well, we got some Steam feedback, so we are going to talk a

10
00:01:10,840 --> 00:01:15,560
little bit about Steam. But every time Steam comes up on any of our shows, there's always

11
00:01:15,560 --> 00:01:19,520
the chorus of folks who chose Linux because gaming just doesn't even interest them, right?

12
00:01:19,520 --> 00:01:22,400
So it's like not even on the radar. So like when we have an episode about Steam,

13
00:01:22,400 --> 00:01:25,400
like, oh man, they're talking about this again. I don't like gaming.

14
00:01:25,400 --> 00:01:29,720
They're like, not again. I think they fail to understand how important it is in the

15
00:01:29,720 --> 00:01:33,400
grand scheme of things. But we'll get to that. Yeah, exactly. I can relate that it's not big

16
00:01:33,400 --> 00:01:38,040
to them. That's why they chose Linux in the first place because gaming wasn't a huge priority. But

17
00:01:38,040 --> 00:01:42,520
oh, so many big things are changing up. And I'm actually really excited because coming up on the

18
00:01:42,520 --> 00:01:46,120
show right off the top here, we're going to be getting into some feedback. And one of the which,

19
00:01:46,680 --> 00:01:51,000
I just thought it would be perfect to bring in our guest this week, joining us in the Mumble Room,

20
00:01:51,000 --> 00:01:56,040
our virtual lug as it were, is Aaron Saigo. Now you guys know Aaron Saigo. He's a long-time KDE

21
00:01:56,040 --> 00:02:01,080
contributor. He's also what I like to call a free culture thinker, and he's really the heart of the

22
00:02:01,080 --> 00:02:05,080
improv project. And he's going to join us. Hey there, Aaron. Hey, how's it going, guys?

23
00:02:05,080 --> 00:02:10,040
Quite good. Quite good. Thank you for coming today. Now see, Aaron pinged me on the super

24
00:02:10,040 --> 00:02:16,040
secret bat line that I like to thank Google because Google makes it possible for people

25
00:02:16,040 --> 00:02:21,240
to get a hold of me in all kinds of new ways, including. But in this case, it actually worked

26
00:02:21,240 --> 00:02:26,200
out really well. Aaron was able to get a hold of me. And when he messaged me, I was actually

27
00:02:26,200 --> 00:02:31,880
editing the Linux action show. So I was responding to Aaron using the voice dictation because my hands

28
00:02:31,880 --> 00:02:38,280
were busy editing. And it was doing OK. I mean, Aaron, what would you say? Was it OK? Was it passable?

29
00:02:39,000 --> 00:02:43,320
Yeah, it was. Actually, I didn't know until you actually said, yeah, using voice dictation.

30
00:02:43,320 --> 00:02:47,080
So did you just think I was like some sort of maniac with the keyboard? Like there was

31
00:02:47,080 --> 00:02:52,360
a few things that didn't make sense. Yeah, you've got that that filter, that automatic

32
00:02:52,360 --> 00:02:56,520
filter that happens, right? You just skip over all the errors. It was actually pretty good.

33
00:02:56,520 --> 00:02:59,800
That's good. That's good. So I was like, OK, well, instead of dictating, why don't you just

34
00:02:59,800 --> 00:03:04,440
come on unplugged on Tuesday and talk about this? Because, you know, Aaron called me out on a thing

35
00:03:04,440 --> 00:03:11,960
that after after we wrapped up Linux action shows in defense of Noam, I always kind of think back

36
00:03:11,960 --> 00:03:18,200
over the show and I critique it myself. And one of the things that I felt was sort of unavoidable

37
00:03:18,200 --> 00:03:22,280
for that type of episode, but was still sort of the underlying message in a sense, is that

38
00:03:22,280 --> 00:03:26,840
the show was really championing new and shiny. Look at this new thing. It's been rebuilt and

39
00:03:26,840 --> 00:03:31,880
it's finally getting to a usable standpoint. It's sort of a celebration of the fact that it's new

40
00:03:31,880 --> 00:03:36,520
and it's it's it's been rebuilt. It's something, you know, that it's almost like a sense of

41
00:03:36,520 --> 00:03:42,520
consumerism that I feel is really kind of pervasive in the US culture. And it's sort of that same sort

42
00:03:42,520 --> 00:03:46,920
of mentality put towards software development. You know, what have you done for me lately?

43
00:03:46,920 --> 00:03:52,120
And when somebody is sturdy and solid and building a reliable platform, then they're boring. But when

44
00:03:52,120 --> 00:03:56,040
somebody is rebuilding and starting over, well, then they're crazy because they've just shot all

45
00:03:56,040 --> 00:04:00,520
their functionality out the air airlock and I'm really frustrated as a user. So Aaron called me

46
00:04:00,520 --> 00:04:03,480
out on that and we're going to talk about that today because I actually think it's a fantastic

47
00:04:03,480 --> 00:04:09,640
topic. I I've kind of coined it as the term of the new and shiny culture that is pervasive on the

48
00:04:09,640 --> 00:04:14,680
Internet. And it plagues open source more so than ever. We constantly see projects get thrown out

49
00:04:14,680 --> 00:04:20,120
and rebuilt, sometimes for completely justifiable means and reasons like potentially like OpenShot

50
00:04:20,120 --> 00:04:23,160
could be a good example. I was about to say OpenShot. Yep. Yeah. But then, you know, there's

51
00:04:23,160 --> 00:04:28,520
other projects you look at. Unity, where it was sort of obvious from the onset what they wanted

52
00:04:28,520 --> 00:04:32,840
to accomplish was already out there and they didn't necessarily have to reinvent the wheel.

53
00:04:32,840 --> 00:04:36,760
And when they did, they sort of chose the wrong direction. And then now they're sort of facing

54
00:04:36,760 --> 00:04:41,960
this reboot. And I think, you know, when you look at Unity, Unity 8 is what's going to be called.

55
00:04:41,960 --> 00:04:46,360
When that comes out, I think users are going to be shocked with some of the stark differences

56
00:04:46,360 --> 00:04:49,880
that aren't there and some of the things that don't work the way they expect after Unity 7

57
00:04:49,880 --> 00:04:54,040
has been built up over years and years and years of and polish. Right. Especially right now as

58
00:04:54,040 --> 00:04:57,960
Unity is going through this sort of, I mean, for lack of a better term, refinement phase,

59
00:04:57,960 --> 00:05:01,960
while they don't really add much to it. Yeah, we're going to get this big reset. And I think

60
00:05:01,960 --> 00:05:05,720
that's going to be a stark comparison of where you see something start over and much like when

61
00:05:05,720 --> 00:05:11,080
Gnome hit version three and started over again. But before we get to that, I want to do some of

62
00:05:11,080 --> 00:05:15,480
our feedback because, gosh, we got some really great feedback. But first, I want to thank our

63
00:05:15,480 --> 00:05:20,040
first sponsor this week, and that is Ting.com. Ting is mobile that makes sense. My mobile service

64
00:05:20,040 --> 00:05:25,160
provider and Matt, what about you? Oh, yes. Look at that. Yeah, this is something that if you're

65
00:05:25,160 --> 00:05:29,800
sort of a consumer who likes to be informed and vote with your wallet, this is why I like Ting.

66
00:05:29,800 --> 00:05:33,240
That's why I recommend it to my audience. Not only have I been using Ting for over a year,

67
00:05:33,240 --> 00:05:37,560
but Ting has no contracts, no early termination fees. And the best part is you only pay for what

68
00:05:37,560 --> 00:05:42,760
you use. Now, I'm a shut in. OK, I don't I don't like going outside. It's scary out there. There's

69
00:05:42,760 --> 00:05:48,920
people and those people don't know how to drive. So for me, it's really great to only pay for what

70
00:05:48,920 --> 00:05:53,320
I use. So that way, when I do go out and get out and have to make calls and it's the holidays,

71
00:05:53,320 --> 00:05:57,320
then I pay the appropriate price for that. And it's an incredibly reasonable rate. And when I'm

72
00:05:57,320 --> 00:06:00,760
shut in and I'm not calling anybody like this week after my birthday and I don't want to talk

73
00:06:00,760 --> 00:06:04,920
to anybody, then I only pay for what I use. It's actually a really brilliant system. And right now

74
00:06:04,920 --> 00:06:09,480
you can go over there to Linux.ting.com and save twenty five dollars off your first month of service

75
00:06:09,480 --> 00:06:13,640
or twenty five dollars off your first device. And by the way, check out their rates page and also

76
00:06:13,640 --> 00:06:18,120
check out their blog if you're listening to this podcast in the month of January, because Ting is

77
00:06:18,120 --> 00:06:23,480
doing an LG G2 giveaway. That's that G2 is that new sweet phone. Thirty two gigabyte version.

78
00:06:23,480 --> 00:06:27,400
It's pretty easy. All you have to do is be a YouTube subscriber on Ting's channel. You have

79
00:06:27,400 --> 00:06:31,880
to leave a comment on their new unboxing video of the LG G2. That's not too tough because that's a

80
00:06:31,880 --> 00:06:35,480
great video. And then there you go. If you're a Ting subscriber, you'll be entered to win. They're

81
00:06:35,480 --> 00:06:40,840
going to pick on January 31st and announce on Google Plus. So you can go to Ting.com slash blog

82
00:06:40,840 --> 00:06:44,360
to get more details about that. You need to be a Ting customer. So if you're not a Ting customer,

83
00:06:44,360 --> 00:06:49,960
go to Linux.ting.com and get started. Average Ting bills for our listeners are usually around

84
00:06:49,960 --> 00:06:55,000
thirty dollars per month for a full fledged smartphone with hotspot tethering, caller ID,

85
00:06:55,000 --> 00:06:58,360
voicemail, all that stuff. I mean, it's a full phone. It's got everything. They also have incredible

86
00:06:58,360 --> 00:07:03,400
roaming deals. If you're going up into Canada and things like that, they've got great deals there.

87
00:07:03,400 --> 00:07:07,160
I get feedback from folks all the time who are always really surprised at that aspect of the

88
00:07:07,160 --> 00:07:11,240
Ting service. And not only that, they have fantastic customer service. You can give a Ting

89
00:07:11,240 --> 00:07:15,160
representative a call anytime between eight a.m. and eight p.m. Eastern at one eight five five

90
00:07:15,160 --> 00:07:20,680
Ting FTW and a real human will answer the phone. So go to Linux.ting.com to support this show.

91
00:07:20,680 --> 00:07:28,440
And a big thank you to Ting for sponsoring Linux Unplugged. That's right. OK. So let's read

92
00:07:28,440 --> 00:07:34,280
Jonathan's post here. I'm sorry. His name is not Jonathan. I was reading something else.

93
00:07:34,280 --> 00:07:39,160
His name is Scott. Scott James Remnant. I think it's Remnant. Aaron, you got a vote on how you

94
00:07:39,160 --> 00:07:44,840
say his last name Remnant? As far as I know, it's Remnant. OK. All right. So he was a

95
00:07:44,840 --> 00:07:50,600
previous Canonical employee and he was one of the original software developers of Upstart.

96
00:07:50,600 --> 00:07:54,120
So he has some interesting perspective to share on his Google Plus feed. And I'll have that linked

97
00:07:54,120 --> 00:07:58,360
in the show notes if you guys want to circle him. And I'll just read it. He says the open source

98
00:07:58,360 --> 00:08:02,280
and free software communities work on the principle that when I contribute patches to a project,

99
00:08:03,000 --> 00:08:08,360
I'm donating my time, expertise and resources. In return for that donation, I receive the time,

100
00:08:08,360 --> 00:08:13,080
expertise and resources of the rest of the community on equal terms in which they have

101
00:08:13,080 --> 00:08:19,000
received mine. I benefit as I benefit and the community as a whole benefits. Certain projects

102
00:08:19,000 --> 00:08:24,360
make you sign agreements when you contribute that instead make the terms unequal. Sorry.

103
00:08:24,360 --> 00:08:28,440
Usually benefiting just one party. When you contribute under one of these agreements,

104
00:08:28,440 --> 00:08:35,800
the community may benefit. But one individual or company benefits more. They receive all your time,

105
00:08:35,800 --> 00:08:41,880
expertise and resources, but reserve the right not to return the favor. I'm a coder in my day job

106
00:08:41,880 --> 00:08:47,640
and I give my time, expertise and resources to that company. They are not under any obligation

107
00:08:47,640 --> 00:08:56,520
to return that favor. In return, they pay me. The CLA is employment without wage, without a wage.

108
00:08:56,520 --> 00:09:01,080
The CLA is employment without a wage because it's the same sort of arrangement. I contribute

109
00:09:01,080 --> 00:09:07,960
my code and my time. But when you work, you get a wage. So Aaron, I know you've talked about

110
00:09:07,960 --> 00:09:12,440
CLA's in general and lots of projects have them. You've talked about them for years though,

111
00:09:12,440 --> 00:09:17,320
and I wanted to get your reactions to Scott's post here because as Debian's looking at this

112
00:09:17,320 --> 00:09:21,480
whole init system debate, it's really sort of exposed the whole CLA issue that a lot more

113
00:09:21,480 --> 00:09:25,160
people in the community are talking about now. And as somebody who's sort of been trying to

114
00:09:25,160 --> 00:09:27,800
get this conversation rolling for years, I'd love to know what you think.

115
00:09:29,640 --> 00:09:37,720
Sure. So right off the top, I'm not anti-CLA carte blanche. In fact, I helped bring in

116
00:09:37,720 --> 00:09:43,320
a version of the Free Software Foundation Europe's fiduciary license agreement or FLA

117
00:09:43,320 --> 00:09:50,440
into the community. So I think that there are benefits that can be realized by having formalized

118
00:09:50,440 --> 00:09:57,320
agreements that cover contribution. But I think that what Scott gets at and it's really insightful

119
00:09:57,320 --> 00:10:03,880
is that there are systems properties to these agreements. And when you approach it from a

120
00:10:03,880 --> 00:10:10,120
systems thinking point of view, you do get people looking at it and going, well, I'm not benefiting

121
00:10:10,120 --> 00:10:17,400
anymore and therefore I'm not going to add into the system and into the pot anymore. And so the

122
00:10:17,400 --> 00:10:22,600
point that I think Scott was trying to make and really accurately is that these CLA's intended to

123
00:10:23,160 --> 00:10:29,720
grant advantage and make it even maybe possible for the company to see a profit or something along

124
00:10:29,720 --> 00:10:35,320
that lines may actually be having the exact opposite effect that they expect because it

125
00:10:35,320 --> 00:10:41,720
shrinks the contributor pool. And the whole point of having source that's open from a perspective of

126
00:10:41,720 --> 00:10:47,320
contribution and benefit is you're sharing development and risk. And so anything you do

127
00:10:47,320 --> 00:10:54,040
to limit that is defeating. Is that true? If we just kind of look at the success that Canonical

128
00:10:54,040 --> 00:11:00,840
has at getting contributions over the years, wouldn't you say that perhaps the CLA is a

129
00:11:00,840 --> 00:11:05,400
non-issue because people just want to contribute. They want to follow their passion. The CLA is a

130
00:11:05,400 --> 00:11:10,200
non-issue until either the company starts to get big or the company is on the decline. And then

131
00:11:10,200 --> 00:11:15,080
all of a sudden these flaws are exposed. But as long as they're on top, everybody's so passionate

132
00:11:15,080 --> 00:11:22,360
and motivated that they almost just don't care. Yeah. I mean, I think that one of the issues that

133
00:11:22,360 --> 00:11:27,400
in the past, free software developers have not been aware of these issues at all. And they've

134
00:11:27,400 --> 00:11:33,400
made them just with the assumption that everyone's intentions are good and therefore they're going

135
00:11:33,400 --> 00:11:39,320
to create good things. And that's not entirely true, unfortunately. Not that people have bad

136
00:11:39,320 --> 00:11:44,760
intentions, but that not everything that's being created is good. So three years ago in 2010,

137
00:11:44,760 --> 00:11:50,200
I actually had patches that got kicked out of the Canonical project because I refused to sign in

138
00:11:50,200 --> 00:11:56,840
a CLA. Things that fixed bugs in a project that they had under their CLA. And it was specifically

139
00:11:56,840 --> 00:12:03,480
because of reasons like what Scott mentioned where it's asymmetrical. But even worse,

140
00:12:04,520 --> 00:12:09,240
and this is really gets where not all CLAs are equal. The CLA in particular that Canonical uses

141
00:12:09,240 --> 00:12:17,080
is extremely broad and has no termination clause. So you can't tell what it's going to cover in the

142
00:12:17,080 --> 00:12:22,200
future because it basically just says anything that they host and they say is covered in future

143
00:12:22,200 --> 00:12:27,880
is covered. And that really, yeah, I mean, I couldn't sign such a thing with a good conscience.

144
00:12:29,160 --> 00:12:36,520
So it does affect in the net here and now. And then we look at two other projects, Upstart and

145
00:12:36,520 --> 00:12:41,800
Mirror. There are people who are not contributing to Mirror because of the CLA. I know this for a

146
00:12:41,800 --> 00:12:49,320
fact because they've said exactly that. There are people who otherwise have no bone contention or

147
00:12:49,320 --> 00:12:56,360
ax to grind. Upstart is of course controversial. I mean, the reason why System D, according to

148
00:12:57,640 --> 00:13:02,520
the Red Hat evangelist, Jan, and I won't even try his last name because I always mess it up,

149
00:13:02,520 --> 00:13:07,800
great Dutch guy. He said the other day on G+, that one of the reasons System D started was

150
00:13:07,800 --> 00:13:14,040
because of the CLA. What about the alternative side though? And it's not just on success or

151
00:13:14,040 --> 00:13:20,440
failure. That does make sense. But what about the alternative side to that? So say for some reason,

152
00:13:20,440 --> 00:13:26,840
maybe there was an agreement with a carrier for Ubuntu Touch and they had to flip some code that

153
00:13:26,840 --> 00:13:32,920
a lot of people have contributed to a proprietary license. What about the argument that everything

154
00:13:32,920 --> 00:13:37,000
that was created at that point still remains open? It's still open source software. There's

155
00:13:37,000 --> 00:13:42,040
going to be a fork of it now that has been relicensed, but that code isn't taken away

156
00:13:42,040 --> 00:13:49,720
from the community. Well, so there's two flaws with that. One is that there are people who

157
00:13:49,720 --> 00:13:54,360
engage with free software on ethical grounds. And so for them, the fact that there is a

158
00:13:54,360 --> 00:13:59,480
proprietary fork goes against their ethical position. I would be one of those people.

159
00:14:00,600 --> 00:14:05,720
But let's just say that we're the weird fringe minority. Once a company can take something

160
00:14:05,720 --> 00:14:12,840
proprietary, if there is no safeguard in place, there is nothing to say that they won't continue

161
00:14:12,840 --> 00:14:19,320
adding to the proprietary code. And then we get either a proprietary fork, we get open core style

162
00:14:20,440 --> 00:14:26,840
things. And at the end of the day, what you're agreeing to is a asymmetrical relationship where

163
00:14:26,840 --> 00:14:35,160
your contributions are not of equal value at the end of the day to other contributions. And of

164
00:14:35,160 --> 00:14:39,800
course, Canonical does say, and Marco said this publicly, well, but we pay for the majority of

165
00:14:39,800 --> 00:14:45,240
the development in this project. So we have a moral stand or an ethically backed stand that

166
00:14:45,240 --> 00:14:49,720
we can say, well, we deserve to be able to do this. And I agree with them. If they're paying

167
00:14:49,720 --> 00:14:54,120
for it, they have an ethical position that they can say, we can take a proprietary. The result,

168
00:14:54,120 --> 00:14:56,840
however, from a systems point of view is people will disengage.

169
00:14:56,840 --> 00:15:05,400
So I wonder though, okay, so explain to me in your mind how if a CLA hinders contributions to

170
00:15:05,400 --> 00:15:10,440
say something like the Mirror project, how does it not hinder something like the Qt project that

171
00:15:10,440 --> 00:15:19,880
also has a CLA? Right. So I'll say first off, I'm not a huge fan of the CLA in Qt. It's there for

172
00:15:19,880 --> 00:15:25,560
practical and historical reasons, but there's a very, very important difference. Besides the fact

173
00:15:25,560 --> 00:15:31,080
that it's well-defined and only covers the Qt world, there's also another group or another

174
00:15:31,080 --> 00:15:36,360
agreement, the Free Qt Foundation. And this has an agreement with the owners of Qt. It's actually

175
00:15:36,360 --> 00:15:42,360
been passed on from Trolltech to Nokia to now Digio. And what it says is it's a legally binding

176
00:15:42,360 --> 00:15:50,600
contract that should they go into the path of proprietary only. So they can take the free

177
00:15:50,600 --> 00:15:56,840
software code and release it under grant proprietary licensing terms. But if there's

178
00:15:56,840 --> 00:16:02,280
ever a difference between that proprietary licensed code and the free software or open

179
00:16:02,280 --> 00:16:08,920
source code, the entire Qt stack is immediately relicensed under the BSD license, which pretty

180
00:16:08,920 --> 00:16:12,440
much destroys their business model. So you sort of have an insurance policy.

181
00:16:12,440 --> 00:16:15,960
Mutually Assert Destruction Agreement there. Right. It's an insurance policy in a sense.

182
00:16:15,960 --> 00:16:24,040
Exactly. Now other groups treat it... Right. And that creates a reasonable expectation of symmetry.

183
00:16:24,840 --> 00:16:30,440
Other products do it differently. So with the FLA and KDE, for instance, there is a secondary

184
00:16:30,440 --> 00:16:35,000
document that accompanies the primary document that gets signed. These are the only terms under

185
00:16:35,000 --> 00:16:41,800
which the organization you're entering into the agreement with, KDEV, is allowed to relicense your

186
00:16:41,800 --> 00:16:46,520
software and it's all free software licenses. You can't take a proprietary, even though the

187
00:16:46,520 --> 00:16:53,880
FLA you sign, which is optional, not mandatory, would in theory allow this. And what the secondary

188
00:16:53,880 --> 00:16:59,720
document says is that should the KDEV, the nonprofit organization, decide to go evil and do

189
00:16:59,720 --> 00:17:05,640
this, your FLA is immediately rescinded and void and they cannot do this. So there's different ways

190
00:17:05,640 --> 00:17:13,640
of ensuring symmetry. Of course, one is not having a CLA or an FLA. But there are, in certain cases,

191
00:17:13,640 --> 00:17:19,960
are downsides to this. Sure. The reason why KDE has one is to allow if someone disappears from

192
00:17:19,960 --> 00:17:25,080
the face of the planet and GPL version 4 comes out, we can move forward without having them

193
00:17:25,080 --> 00:17:33,320
there. If you die, for instance, that's the big one. Or if someone sues you for some patent issue

194
00:17:33,320 --> 00:17:37,960
or something that involves you murder your wife and go to jail, it allows the nonprofit organization

195
00:17:37,960 --> 00:17:42,760
to represent you. Rise or FS. I'm just making a rise or FS joke. I don't want people to think

196
00:17:42,760 --> 00:17:49,000
I want to murder my wife. I just realized that sounded really creepy out of context.

197
00:17:50,680 --> 00:17:54,600
Well, you know. Well, I mean, that makes a lot of sense. I'm glad I asked because I think that's

198
00:17:54,600 --> 00:17:59,000
probably a common response that people would have is, well, QT and other projects. But yeah, okay.

199
00:17:59,000 --> 00:18:04,440
There's sort of a give and take in that scenario. That makes more sense. Okay. Well, all right. We'll

200
00:18:04,440 --> 00:18:10,520
leave the CLA topic there for now. And thank you, Aaron. We'll pull you back in in a few minutes

201
00:18:10,520 --> 00:18:16,840
when we get through the rest of the feedback. Our next feedback is sort of a collection of

202
00:18:16,840 --> 00:18:21,320
a lot of comments, several threads in the subreddit, a few emails, and also some posts

203
00:18:21,320 --> 00:18:27,240
on G Plus and Twitter where in response to our Steam Streaming Showcase episode on Sunday for

204
00:18:27,240 --> 00:18:31,400
the Linux Action Show, Jonathan Houston, who's in the chat room right now, he says, okay, I'm

205
00:18:31,400 --> 00:18:35,400
curious to see what everyone thinks about this. My friend and I have been discussing the implications

206
00:18:35,400 --> 00:18:40,440
of SteamOS and the potential impact on Linux. He brought up a very good point on how, and I think

207
00:18:40,440 --> 00:18:47,160
I agree with him. Valve may have shot Linux gaming in the head with the ability to stream games from

208
00:18:47,160 --> 00:18:51,800
a Windows machine to a Linux machine as recently demoed on last. The reason being with SteamOS

209
00:18:51,800 --> 00:18:56,040
developers, we're seeing good reasons to add Linux support. Now they don't need to. Now they can just

210
00:18:56,040 --> 00:18:59,240
keep doing what they've always been doing and some Linux user wants to use their game, they'll just

211
00:18:59,240 --> 00:19:04,520
have to stream it from a Windows machine. They've removed many of the reasons to spend money to

212
00:19:04,520 --> 00:19:10,040
develop on Linux by shifting the cost to the consumer. Now the onus is on the consumer and

213
00:19:10,040 --> 00:19:13,640
we just have to accept buying a second computer, not only a second computer, but one capable of

214
00:19:13,640 --> 00:19:19,000
streaming the games and programs we want on the machines we want. Boy, you know, I think I would

215
00:19:19,000 --> 00:19:24,360
agree with the fact that I think developers will consider this, but I think at the end of the day

216
00:19:24,360 --> 00:19:27,800
the argument can go further and say, well, if they want to play the game badly enough, they'll just

217
00:19:27,800 --> 00:19:33,720
go ahead and buy a Windows machine. So I think it goes both ways. I reluctantly disagree. I think

218
00:19:33,720 --> 00:19:37,320
that I see where he's coming from, but I don't think that's going to actually, I don't think

219
00:19:37,320 --> 00:19:43,480
they'll pull the trigger. I say you take that doubt, get it out of here because here's the thing

220
00:19:43,480 --> 00:19:49,560
is this is Valve being super slick at this. And what this is, is this is a transitional technology.

221
00:19:49,560 --> 00:19:53,960
This isn't like wine. This isn't like anything else. This is a transitional technology to add

222
00:19:53,960 --> 00:19:58,680
value to lower end machines and machines that yet do not play the games that the market demands.

223
00:19:58,680 --> 00:20:03,640
And it's good enough of a temporary solution that it could be a permanent solution. And that,

224
00:20:03,640 --> 00:20:07,800
my friends, is a very good sign for something that's this early in the beta stage. But here's

225
00:20:07,800 --> 00:20:13,560
the reality. You and I, we might be up to having an extra Windows machine and even understand what

226
00:20:13,560 --> 00:20:18,440
the concept of remotely encoding a video game stream and then sending it to a remote client

227
00:20:18,440 --> 00:20:23,160
that can then interpret that, decode it, and then send back the keystrokes or controller strokes in

228
00:20:23,160 --> 00:20:29,080
real time. We grok that concept even if it's loosely. Consumers, that is an alien idea to them

229
00:20:29,080 --> 00:20:34,920
and Valve and developers can never and will never be able to depend on Steam Box users having another

230
00:20:34,920 --> 00:20:39,880
computer in the house capable of playing video games because it's simply too much to expect

231
00:20:39,880 --> 00:20:43,240
for the average consumer. For the early enthusiasts, for the people that are going to buy the first

232
00:20:43,240 --> 00:20:47,640
generation of Steam Boxes, i.e. everybody buying a Steam Box for the next year, year and a half,

233
00:20:47,640 --> 00:20:51,240
they might have that expectation and they know that they can lean on that streaming to help fill

234
00:20:51,240 --> 00:20:55,480
that gap. But by the time the Steam Box goes mainstream, a couple of years down the road,

235
00:20:55,480 --> 00:20:59,640
there's no way any developer who's going to target SteamOS that wants to actually make some money

236
00:20:59,640 --> 00:21:04,120
can rely on that. So they have to go native. Market Dynamics will force them to create a native

237
00:21:04,120 --> 00:21:08,920
application because that's what the vast majority of Steam Box users will expect. And so it's

238
00:21:08,920 --> 00:21:12,760
actually not that bad. And in the meantime, it gives us some really cool tech to play with,

239
00:21:12,760 --> 00:21:17,560
like the application streaming. I wish people go watch, you know, we had some people just chose not

240
00:21:17,560 --> 00:21:21,320
to watch the episode because I had Steam in the title. And I think that was a mistake on their

241
00:21:21,320 --> 00:21:26,040
part because we demoed some really cool tech. And I'm happy that the streaming tech is so good that

242
00:21:26,040 --> 00:21:30,760
it makes us a little nervous. And I think this betrays that Linux users have been beaten so many

243
00:21:30,760 --> 00:21:35,960
times by a commercial company that just disappoints that now we just were expecting it. We're just

244
00:21:35,960 --> 00:21:40,840
looking for it. And I also think there's confusion on this. Oh, well, isn't this just remote desktop?

245
00:21:40,840 --> 00:21:45,880
And it's like, no, no, no, no, no, no. This isn't accessing a remote desktop. This is bringing that

246
00:21:45,880 --> 00:21:51,560
desktop's experience fully accelerated into your own experience where you might as well be running

247
00:21:51,560 --> 00:21:54,920
it natively, meaning you can run Netflix and things of that sort. Yeah, exactly. You know,

248
00:21:54,920 --> 00:21:59,640
we demoed QuickBooks, Photoshop, Netflix. And what's great about this is to me, it lets you

249
00:21:59,640 --> 00:22:04,520
rip off that Windows Band-Aid, but then not be so well stranded on Linux Island because there's a lot

250
00:22:04,520 --> 00:22:09,160
of offices, especially as I mean, I know you can't really expect businesses to do this, but there's

251
00:22:09,160 --> 00:22:13,800
going to be enough out there with a savvy enough IT guy or gal and she's going to know about Steam

252
00:22:13,800 --> 00:22:17,880
and she's going to know that, hey, we need to replace Windows XP so you know what we can do.

253
00:22:17,880 --> 00:22:21,080
We can take one nice Windows machine and if you're just streaming desktop applications,

254
00:22:21,080 --> 00:22:25,320
it doesn't even have to have high end GPU. And we'll put this in the office and the three times

255
00:22:25,320 --> 00:22:29,800
a week that Cheryl and Larry need Photoshop and that Bob and Rick need to use QuickBooks,

256
00:22:29,800 --> 00:22:34,200
they can do it and it's no big deal and we know we'll be okay because we know what kind of

257
00:22:34,200 --> 00:22:37,480
experience we're going to be able to deliver. And I think that's a really good thing, even outside

258
00:22:37,480 --> 00:22:43,320
of gaming. Agreed. And it's coming at a good time when we need some transitional tools.

259
00:22:43,320 --> 00:22:47,400
So speaking of things that are coming at a good time and maybe not being ready,

260
00:22:47,400 --> 00:22:50,600
remember last week we covered that guy who was sort of trolling Linux users,

261
00:22:51,240 --> 00:22:55,000
coming up with all of these reasons why Linux was totally not ready for the desktop.

262
00:22:55,000 --> 00:22:59,080
Well, we were pretty hard on that guy, but John writes in in defense of that guy. He says,

263
00:22:59,080 --> 00:23:03,400
Linux isn't ready. He said, I read through that whole post myself and I have to agree with most

264
00:23:03,400 --> 00:23:07,080
of what he said, although it was pretty exaggerated. The Linux community should be

265
00:23:07,080 --> 00:23:12,600
happy to get critiques like this. This is solid gold user feedback. You couldn't ask for a better

266
00:23:12,600 --> 00:23:16,680
feedback. Anyone interested in making Linux into something with potential of replacing Windows

267
00:23:16,680 --> 00:23:22,360
should look long and hard about at that post. Sure, he's rude and exaggerated, but so are

268
00:23:22,360 --> 00:23:26,760
disgruntled users. Any diehard Linux user would have similar language about Windows.

269
00:23:26,760 --> 00:23:32,520
But see, here's the problem is we keep calling Windows power users, the average user. That's

270
00:23:32,520 --> 00:23:37,320
the problem we're seeing here. This was someone and probably the person that initially did the

271
00:23:37,320 --> 00:23:41,480
post was a power. It was a Windows power user. This is someone that knows Windows backwards and

272
00:23:41,480 --> 00:23:46,120
forwards and it installs their own operating system. That's not Joe average. Joe average

273
00:23:46,120 --> 00:23:50,120
doesn't even care as long as they can check their email and surf eBay. I think that guy was kind of

274
00:23:50,120 --> 00:23:55,000
in the FUD territory. I mean, there was some valid stuff in there, but that shows that he

275
00:23:55,000 --> 00:23:58,360
was a power user. So that's the problem is they say, well, it's not ready for the prime time.

276
00:23:58,360 --> 00:24:02,440
It's actionably happening right now. It happens at my mom's house. It happens that you have

277
00:24:02,440 --> 00:24:05,640
relatives that use Linux. I have relatives that use Linux. I have friends and family that use

278
00:24:05,640 --> 00:24:10,680
Linux. When I retired from the PC repair business, I actually rotated people into Linux and then put

279
00:24:10,680 --> 00:24:15,880
them in front of a guy that would help support them. It's here and that was years ago. So just

280
00:24:15,880 --> 00:24:20,760
factually speaking, he's incorrect. Yeah, that's true. It's funny how as geeks, people just like

281
00:24:20,760 --> 00:24:27,560
they see the world through the geek lens and it's like, well, if you can't use solid works,

282
00:24:27,560 --> 00:24:34,280
then it's not good as a desktop. That's true for a certain set of people. Exactly. All right. Well,

283
00:24:34,280 --> 00:24:39,240
last feedback, Rick comes in. He says, Hey guys, I just want to say thanks for the digital ocean

284
00:24:39,240 --> 00:24:43,400
coupon. I set up my mumble server using Debian and it's running great. Most websites that sell

285
00:24:43,400 --> 00:24:49,640
mumble servers do it by the person. One site sells a 15 slot server for $6 a month. Well,

286
00:24:49,640 --> 00:24:53,240
with digital ocean, it's unlimited as long as you don't hit the one terabyte cap. This works out

287
00:24:53,240 --> 00:24:57,400
great for myself most of the time with only a few friends, but sometimes we have about 20 people on

288
00:24:57,400 --> 00:25:02,360
there. He says, but with my horribly inaccurate calculations, one terabyte is way more than enough

289
00:25:02,360 --> 00:25:06,120
for my usage. And he's got a questionnaire about monitoring bandwidth usage on the Debian service.

290
00:25:06,120 --> 00:25:09,480
So I'll answer that here in a second. But first that seemed like the perfect opportunity to tell

291
00:25:09,480 --> 00:25:13,960
you about our second sponsor this week, digital ocean. Now what is digital ocean? Well, if you

292
00:25:13,960 --> 00:25:17,560
haven't figured it out, like our, uh, writer, what was his name? Ron, right? Yeah. Rick. Oh,

293
00:25:17,560 --> 00:25:21,080
Rick. If you haven't figured out like Rick, then digital ocean is simple cloud hosting dedicated

294
00:25:21,080 --> 00:25:25,000
to offering the most intuitive and easy way to spin up a cloud server. Users can create a cloud

295
00:25:25,000 --> 00:25:31,640
server in 55 seconds. Now me, I'm 47 seconds. So you let me know if you beat, if you beat that,

296
00:25:31,640 --> 00:25:36,200
I'm 47. We should have a chart. I don't think anybody's going to crush the champ, Matt, but

297
00:25:36,200 --> 00:25:40,120
we'll see. Okay. All right. He says, Oh, by the way, I just want to let you know that they have

298
00:25:40,120 --> 00:25:44,840
credible, incredible pricing to pricing plans started only $5 per month, 512 megs of Ram on

299
00:25:44,840 --> 00:25:50,280
that rig, a 20 gigabyte SSD. And yes, an SSD really does make a difference. And one CPU with a

300
00:25:50,280 --> 00:25:55,560
terabyte of transfer. Hello, a terabyte of transfer. Think about this for a fixed $5 cost.

301
00:25:55,560 --> 00:25:58,840
You know exactly how much you're going to get. And this is awesome. This is way better than some of

302
00:25:58,840 --> 00:26:03,000
the other services that transfer you, that charge you by the bit. And on top of that, they're all

303
00:26:03,000 --> 00:26:06,600
over the place. Digital ocean has data, data center locations in New York, San Francisco,

304
00:26:06,600 --> 00:26:11,400
and Amsterdam. They have a simple interface with an intuitive control panel and the power users can

305
00:26:11,400 --> 00:26:16,040
replicate that bad boy with their own straightforward API. But even better digital ocean loves

306
00:26:16,040 --> 00:26:19,480
community. They offer a vast collection of tutorials in their community section on their

307
00:26:19,480 --> 00:26:23,880
site. And if you submit an article that gets published to the community, digital ocean will

308
00:26:23,880 --> 00:26:28,840
pay you 50 bones per piece. Think about that. So if there's probably a good chance given our

309
00:26:28,840 --> 00:26:33,560
audience that you guys know how to set something up on a CentOS box, on a Ubuntu box, on a Debian

310
00:26:33,560 --> 00:26:40,200
rig, you can write up a how to on something. You can submit it to digital ocean. $50 credit. I mean,

311
00:26:40,200 --> 00:26:45,960
think about like at $5 per month, that's going to get you a super awesome VPS for a long time. And

312
00:26:45,960 --> 00:26:51,960
by the way, the backend technology on digital ocean servers is the tops based on KVM, based on

313
00:26:51,960 --> 00:26:56,520
any predefined droplet you want to deploy, or you can create a machine from whole cloth. Like I did,

314
00:26:56,520 --> 00:27:00,600
you have DNS management. You can resize a server in a single click backup snapshots,

315
00:27:00,600 --> 00:27:05,320
two factor authentication, one app, one click application installs. And with that community,

316
00:27:05,320 --> 00:27:09,480
you can get up and going at no time. Then you have your own box that you have root access to.

317
00:27:09,480 --> 00:27:14,360
You have root login. You know exactly what's installed on this machine. And by the way,

318
00:27:14,360 --> 00:27:18,520
if you want to do some testing, check out where you deploy it on. You can also have a private

319
00:27:18,520 --> 00:27:22,520
network, which is really great to have maybe a front end machine that communicates to a backend

320
00:27:22,520 --> 00:27:26,280
machine over a private network. It gets you a little extra security there. So combine that

321
00:27:26,280 --> 00:27:30,520
with their amazing hardware. It's the best way to go. And by the way to our writer, Rick, they have

322
00:27:30,520 --> 00:27:33,320
bandwidth graphs. So if you go into your account summary a little bit later, they'll tell you about

323
00:27:33,320 --> 00:27:36,920
your usage and stuff like that too. So there's a lot of reasons to use digital ocean. So here's

324
00:27:36,920 --> 00:27:41,240
what you need to do to get a five or to get a $10 credit, which if you use the $5 machine like I've

325
00:27:41,240 --> 00:27:46,440
got, that's going to get you two months of digital ocean for free. Hello. Just use the promo code

326
00:27:46,440 --> 00:27:51,480
Linux unplugged January when you check out Linux unplugged January, all one word, Linux unplugged

327
00:27:51,480 --> 00:27:55,800
January, and you'll get that $10 credit. Try it out for a couple of months. There's tons of uses

328
00:27:55,800 --> 00:27:58,440
for it. We keep hearing about them from our audience all the time. And if you've got a great

329
00:27:58,440 --> 00:28:02,840
use for a digital ocean machine, let us hear about it. I love hearing these stories. So a big thank you

330
00:28:02,840 --> 00:28:07,160
to digital ocean. Stop and think about it. I mean, it's like, look, okay, so by not taking advantage

331
00:28:07,160 --> 00:28:10,600
of this, you're actually losing money because they're giving you two free months. I mean,

332
00:28:10,600 --> 00:28:14,440
really you're, you're, you're really losing out on a great situation. It's so slick. And when you,

333
00:28:14,440 --> 00:28:19,800
when you, when you get up there and you got your own machine and you're, you have root access to it

334
00:28:19,800 --> 00:28:23,400
and you can, you can keep coming up with new scenarios like, well, maybe I want to try ever

335
00:28:23,400 --> 00:28:27,240
pad up there. Maybe I want to put a bit torrent sink machine up there. Maybe I want to try mumble

336
00:28:27,240 --> 00:28:30,040
up there and then, oh, you know what? I got to go up to the next machine. It's like another,

337
00:28:30,040 --> 00:28:33,720
it's just, it's a very, they have a very simple pricing structure plan. That's very easy to

338
00:28:33,720 --> 00:28:36,840
understand. And every step of the way, you know exactly how much you're going to be paying and

339
00:28:36,840 --> 00:28:40,120
exactly what you're going to get. So I love it. I've been using it. I'm going to keep using them

340
00:28:40,120 --> 00:28:43,800
for even more services that we're going to be doing here at Jupiter broadcasting, which you'll

341
00:28:43,800 --> 00:28:48,840
be hearing more about very soon. I know it is really sweet. So I'm going to bring, I'm going to

342
00:28:48,840 --> 00:28:53,880
pull Aaron back down into our private little room here. And hopefully he wasn't in the middle of

343
00:28:53,880 --> 00:28:59,400
saying something to the, to the group. But so Aaron let's talk a little bit about you. You

344
00:28:59,400 --> 00:29:03,320
got kind of fired up when you were watching the episode that we did recently in defensive gnome.

345
00:29:04,040 --> 00:29:07,560
And I think he really called me out on something that I was actually sort of kicking myself for.

346
00:29:07,560 --> 00:29:12,840
And that was sort of the celebration of new and shiny and rebuilt to have a rebuilt purpose. And

347
00:29:12,840 --> 00:29:17,720
you sort of brought up this counterpoint and said, well, what about, what about this methodology of

348
00:29:17,720 --> 00:29:21,720
refinement and, and, and evolution and working with something and staying with it for a while

349
00:29:21,720 --> 00:29:26,360
and building on top of a platform, building on top of something. And that isn't almost in some

350
00:29:26,360 --> 00:29:30,920
cases really even respected in the community. What do you, what are your thoughts? And

351
00:29:31,560 --> 00:29:36,280
share a little bit about what got you fired up. Sure. So just to make it clear for everybody

352
00:29:36,280 --> 00:29:42,920
right off the top, I'm not wearing my KDE hat at all here. This is really me with my free software

353
00:29:42,920 --> 00:29:50,440
must rule the world one day hat on. And, and it's this exact idea that, yeah, you know,

354
00:29:50,440 --> 00:29:54,360
new and shiny is awesome. And, and yeah, I mean, it is new and shiny is awesome,

355
00:29:55,080 --> 00:30:03,000
but there's cost to everything that we do in new and shiny. Every rewrite, every new adventure

356
00:30:03,000 --> 00:30:07,800
comes with a cost. So when you make a bunch of applications and you decide we're going to redo

357
00:30:07,800 --> 00:30:17,160
them all, you end up with, you know, being able to get the, you know, first 90% of functionality

358
00:30:17,160 --> 00:30:22,680
or 80% of functionality fairly quickly. And then you spend, you know, the rest of the 90%

359
00:30:22,680 --> 00:30:28,600
of the development time getting the 10 to 20% that people actually need for it to become a

360
00:30:28,600 --> 00:30:33,800
reasonable application. And when we toss these things aside, you know, applications that work

361
00:30:33,800 --> 00:30:40,360
and that have reached this point of maturity, what we might do is we might deliver something

362
00:30:40,360 --> 00:30:47,480
with marginally better visuals or a slightly better workflow. But in the meantime, our users

363
00:30:48,280 --> 00:30:53,960
tend to be left with locations that don't have the feature they need. And what happens from

364
00:30:53,960 --> 00:30:59,720
a developer's point of view, who works on free software quite a bit, there is a real constant

365
00:30:59,720 --> 00:31:05,800
pressure from a lot of people, especially the attention areas of our community, you know,

366
00:31:05,800 --> 00:31:14,760
the media and whatnot, to always be producing something new and flashy and cool. And it's more

367
00:31:14,760 --> 00:31:21,160
reward for promising something wonderful and starting off by scrapping whatever you have

368
00:31:21,160 --> 00:31:28,680
right now. At the same time, we also get our feet held to the fire if it isn't stable, and if it

369
00:31:28,680 --> 00:31:33,080
isn't performant, and if it doesn't have the features that people need. You're talking earlier

370
00:31:33,080 --> 00:31:37,240
about, you know, is the Linux desktop ready for the average person? Well, it never will be if we

371
00:31:37,240 --> 00:31:43,400
keep reinventing things every few years. And so there's this conflict, right? These two motivations

372
00:31:43,400 --> 00:31:51,320
don't really gel well together. And this is both part of what new free software developers coming

373
00:31:51,320 --> 00:31:57,000
into it are bred and born on. So they come into it with this expectation of, oh, we need to redo

374
00:31:57,000 --> 00:32:03,240
things that's, you know, sexy and cool, or go the other way and be hyper conservative. There's no

375
00:32:03,240 --> 00:32:10,120
middle ground. And meanwhile, those projects that try and hit a middle ground, I think, come under

376
00:32:10,120 --> 00:32:17,720
a lot of unnecessary pressure on the one hand, but also just get overlooked a lot for trying to,

377
00:32:17,720 --> 00:32:21,720
you know, going through cycles of innovation, but then also going through longer cycles of stability

378
00:32:21,720 --> 00:32:27,560
and support. So, you know, I just to kind of track this to a level where people would kind of

379
00:32:27,560 --> 00:32:33,160
recognize it down to the desktop, I would say, like, for me, I do kind of understand what you're

380
00:32:33,160 --> 00:32:38,120
saying in the sense that I look at like the GNOME desktop and their reboot has cost them, I believe,

381
00:32:38,120 --> 00:32:46,120
not only who untold users, but years of basically progress on the desktop. I would say that while

382
00:32:46,120 --> 00:32:51,640
they've obviously been working very hard, it's really now getting to a point where I'm comfortably

383
00:32:51,640 --> 00:32:56,680
using it on a daily basis. That wasn't, I mean, you know, that's if you look at the years it took

384
00:32:56,680 --> 00:33:01,880
to get there, that's a big reset. And it kind of came at an inappropriate time, right? When Microsoft

385
00:33:01,880 --> 00:33:05,320
was stumbling with Vista, there was sort of, I've always felt like this golden opportunity where

386
00:33:05,320 --> 00:33:08,920
Linux could have succeeded a little bit stronger, where, you know, perhaps if Canonical hadn't

387
00:33:08,920 --> 00:33:14,280
rebooted with Unity, and Unity was really quite awful at the beginning, and if GNOME hadn't

388
00:33:14,280 --> 00:33:19,880
restarted with GNOME 3, which GNOME 3.0 was really quite unusable at the beginning, we might have had

389
00:33:19,880 --> 00:33:25,160
a little more traction, perhaps. So then you look at it now, and these projects are getting to a

390
00:33:25,160 --> 00:33:30,760
good state, but one of them is about to face another reboot. And I see there's projects where

391
00:33:30,760 --> 00:33:36,040
sometimes there'd be value in starting over, and then there's other projects where I see it almost

392
00:33:36,040 --> 00:33:41,080
feels a little sad because it's so much effort and time will be lost while they rebuild and retrace

393
00:33:41,080 --> 00:33:47,080
things that they have already once completed and already once figured out. Exactly, and when these

394
00:33:47,080 --> 00:33:51,640
projects get to the point of, okay, finally they're usable again, I can use them on a daily basis,

395
00:33:51,640 --> 00:34:00,120
have they really progressed the technology sufficiently to offset that cost? And I think

396
00:34:00,120 --> 00:34:07,160
with the wild abandon that we embrace new and shiny with at times, we tend to destroy that.

397
00:34:07,160 --> 00:34:13,400
I mean, the biggest problem I had with something like PulseAudio, for instance, was not that we

398
00:34:13,400 --> 00:34:21,800
needed a non-crappy audio stack, but that it was pushed onto the user community when it wasn't

399
00:34:21,800 --> 00:34:31,080
ready, can be clearly seen by years of troubles that people had. There was literally a distribution

400
00:34:31,080 --> 00:34:35,000
that shipped where the volume slider didn't do anything. As crappy as the Linux audio stack was,

401
00:34:35,000 --> 00:34:41,560
it finally worked for most people. And so we seem to be, as you said, picking really bad times to

402
00:34:41,560 --> 00:34:47,320
reinvent things and doing it for what will deliver marginal benefit, if any, at the end of the day.

403
00:34:47,320 --> 00:34:52,920
Yeah, see, here's the thing. It's this interesting culture that's driven, and I feel like it's more

404
00:34:52,920 --> 00:34:57,320
than just one thing that attributes to this, but from a media production standpoint, like from the

405
00:34:57,320 --> 00:35:01,400
Linux action show, people are going to be much more interested in something brand new that they

406
00:35:01,400 --> 00:35:07,720
want to learn about than sort of retracing how great it is that every application I use under KDE

407
00:35:07,720 --> 00:35:13,000
has a proper notification icon in the system tray. That's an example of how staying stable and just

408
00:35:13,000 --> 00:35:17,400
having something and defining the way it works and keeping it that way for years benefits end users,

409
00:35:17,400 --> 00:35:21,720
but it doesn't make for a good segment in a podcast, and it doesn't make for a good article

410
00:35:21,720 --> 00:35:26,760
on a blog. And so I do agree that that is driving the conversation in one direction,

411
00:35:26,760 --> 00:35:31,320
but at the same time, that's because that's what the consumers of that content want to hear about,

412
00:35:31,320 --> 00:35:35,160
right? And the developers that are going into these projects, they don't want to work on the

413
00:35:35,160 --> 00:35:39,880
old guy's old busted code. They want to come up with their new hot concepts and bring those on

414
00:35:39,880 --> 00:35:44,760
the world. So that's their motivation. So it seems to be like this multi-dimensional problem

415
00:35:44,760 --> 00:35:50,280
that just sort of is maybe human nature. No, I agree. And so on the one hand, we need to

416
00:35:50,280 --> 00:35:55,960
not reward those developers who just want to come in with a wrecking ball, or at least reward them

417
00:35:55,960 --> 00:36:02,200
a lot less for doing that if they're not bringing any real large offsetting value to it. The other

418
00:36:02,200 --> 00:36:07,720
side of it is, yeah, how do we present mature projects as interesting as the ones that are

419
00:36:07,720 --> 00:36:16,280
not mature projects as interesting? And I agree it requires a little more positioning and thinking.

420
00:36:16,280 --> 00:36:21,560
And most free software projects and most people involved in free software are not great

421
00:36:21,560 --> 00:36:26,840
self-promoters and marketers. And so yeah, I completely get that it new is an easier story.

422
00:36:26,840 --> 00:36:32,840
It writes itself. On the other hand, if you look at... So a product that I've been involved with

423
00:36:32,840 --> 00:36:38,200
for years was Plasma, which most people know as a desktop environment. And it gets to the point

424
00:36:38,200 --> 00:36:43,400
where it's mature enough that we can actually start branching off and doing things like Plasma

425
00:36:43,400 --> 00:36:48,200
Active where we can bring in devices. And this whole convergence story that has been really

426
00:36:48,200 --> 00:36:55,240
exciting for people around Unity is actually where we were three or four years ago. Now,

427
00:36:55,240 --> 00:36:59,240
the question is, why didn't that story get out in a more interesting way? Why doesn't it

428
00:36:59,240 --> 00:37:06,120
keep people's attention? And I'm sure there's probably things that I could have done differently

429
00:37:06,120 --> 00:37:09,400
or better to make it more interesting. But on the other hand, I also think that there's

430
00:37:11,000 --> 00:37:15,720
a kind of an expectation you can only tell a story once. And I think that the convergence

431
00:37:15,720 --> 00:37:20,840
story, for example, is one that has a lot of legs if we can keep ourselves kind of moderately

432
00:37:20,840 --> 00:37:25,800
entertained and interested. And companies like Google, for instance, there's a bunch of people

433
00:37:25,800 --> 00:37:32,200
talking pre-show about things like Chromebooks. And what we don't realize with these things is

434
00:37:32,200 --> 00:37:38,760
that, I don't think consciously, is that they bang on the same boring message for like five years

435
00:37:38,760 --> 00:37:44,120
before people get it. And when people get it, it's new and exciting to them. But you have to bang

436
00:37:44,120 --> 00:37:49,800
those old messages through. And I think that hurts the free software adoption as well, because we

437
00:37:49,800 --> 00:37:54,440
don't have the patience to bang the message through. That usually takes two, three years.

438
00:37:54,440 --> 00:37:59,960
And so what happens is we get projects that are less interesting to people. And until someone

439
00:37:59,960 --> 00:38:04,040
comes along with the wrecking ball and erects the new shiny that is not usable anymore,

440
00:38:05,000 --> 00:38:07,320
they don't get the attention. And so we kind of catch ourselves in the spiral.

441
00:38:07,320 --> 00:38:12,440
You also have these companies that some people in the development communities idolize,

442
00:38:13,160 --> 00:38:18,200
Apple, where you'll see Apple from time to time completely reboot a product, even if it's a high

443
00:38:18,200 --> 00:38:22,600
end product like Final Cut or the Mac Pro, into something brand new and just say, suck it. You

444
00:38:22,600 --> 00:38:27,320
take it or you don't take it, and this is the way it is. And I think in some weird, creepy way,

445
00:38:27,320 --> 00:38:32,200
that message is to people that that's an okay thing to do, because they see Apple doing it,

446
00:38:32,200 --> 00:38:37,640
and some people hold that in some level of regard. And so it seems to me, too, that there is a bit of

447
00:38:39,000 --> 00:38:44,040
the commercial companies like Google and Apple are also sort of driving this mentality a bit.

448
00:38:44,040 --> 00:38:50,680
And it takes a certain wisdom to sort of see past that and be still motivated to work on something

449
00:38:50,680 --> 00:38:54,760
that is tried and true. And how do you incentivize somebody to want to do that?

450
00:38:58,040 --> 00:39:06,680
Well, I think that most tried and true software kind of... How do I say this politely? Has areas

451
00:39:06,680 --> 00:39:15,320
that suck after a number of years. Software doesn't stand up to the test of time if you don't

452
00:39:15,320 --> 00:39:22,280
change it. And so right now, I'm involved in rewriting one small part of a project that I'm

453
00:39:22,280 --> 00:39:29,880
involved with that's... Yeah, it's a rewrite of one small component. And it's very interesting,

454
00:39:29,880 --> 00:39:37,320
and it will bring important value to the users. It's not a rewrite of everything.

455
00:39:37,320 --> 00:39:42,600
So I think on the one hand, finding ways to create a culture of you don't have to rewrite

456
00:39:42,600 --> 00:39:48,760
everything. Make your software a little bit more modular with a more forward-looking design,

457
00:39:48,760 --> 00:39:54,360
which is something that we need to teach each other how to do. And then you can do incremental,

458
00:39:54,360 --> 00:39:58,920
important evolutionary work where you can talk about it. I mean, my blogs in the last two weeks

459
00:39:58,920 --> 00:40:04,200
have featured quite a few times this component that I'm rewriting. And people are finding it

460
00:40:04,200 --> 00:40:09,240
very interesting and exciting. And it's done in a very low-risk way. The other thing is that there

461
00:40:09,240 --> 00:40:16,600
are tons of topics that free software does not touch, does not cover. We don't need to be

462
00:40:16,600 --> 00:40:24,600
rewriting the image viewer application every two years. Let that topic area go, and let's find the

463
00:40:24,600 --> 00:40:30,680
other 8 million application categories that we have no answer for and create a new shiny there.

464
00:40:30,680 --> 00:40:31,480
No kidding.

465
00:40:32,280 --> 00:40:37,080
Instead of just chasing our tails. But maybe that's just me. Maybe we actually do have a

466
00:40:37,080 --> 00:40:39,640
complete software catalog. But last time I checked, we didn't.

467
00:40:39,640 --> 00:40:47,960
Well, so I guess if you move, if you kind of zoom out a little bit and you look at like the whole

468
00:40:47,960 --> 00:40:52,840
like free software ecosystem, there's certain aspects of like Linux that have Linux itself have

469
00:40:52,840 --> 00:41:00,280
had pretty even curved development and stability and also innovation. The Linux kernel has then

470
00:41:00,280 --> 00:41:05,880
been adopted by every company under the sun to power their product. And I think that's

471
00:41:05,880 --> 00:41:09,160
speaks to sort of what you're talking about when you have a group of people that just stay at it

472
00:41:09,160 --> 00:41:13,160
and keep building it. Don't keep throwing it all out and restarting again. It gives people

473
00:41:13,160 --> 00:41:17,560
certain assurances. But because that hasn't happened really at the user space as much,

474
00:41:17,560 --> 00:41:23,960
we haven't seen a stabilizing there. And so, you see these, we had a great thread in the

475
00:41:24,440 --> 00:41:29,640
Linux action show subreddit saying, why has Linux on the desktop failed? He looks at,

476
00:41:29,640 --> 00:41:34,360
this was Ersk in the chat room, he looks at the market shares, Linux is at 1.73%

477
00:41:34,360 --> 00:41:40,360
according to NetMarketshare.com. And he says, regardless of the distro, it's at 1.73% while

478
00:41:40,360 --> 00:41:45,320
XP is 12 years later, still at 29% market share. One of the reasons this could be the

479
00:41:45,320 --> 00:41:51,000
popularity of XP in Asia, of course, and things like that. But honestly, XP was this quote unquote

480
00:41:51,000 --> 00:41:55,960
stable in terms of it's an easy target for developers to quantify, develop for. And I

481
00:41:55,960 --> 00:42:02,200
wonder if perhaps, remember when Miguel Itacazo wrote that the problem with the Linux desktop

482
00:42:02,200 --> 00:42:08,040
was always changing and always incompatibilities, always being brought in. I wonder if he sort of

483
00:42:08,040 --> 00:42:13,000
nailed it in a sense where, what we really need is something, now I know I'm just gonna sound

484
00:42:13,000 --> 00:42:18,040
like I'm blowing smoke up the KDE project, but we need something like KDE 4.x that is just,

485
00:42:19,160 --> 00:42:23,960
is what you see is what you get for years. It's snapshotted like this for years, much like Unity

486
00:42:23,960 --> 00:42:30,360
will be in the current, in the next LTS release. Does Linux need a little XP-ification

487
00:42:30,360 --> 00:42:40,200
right now? I think so. And this can be done without ossifying or fossilizing things either.

488
00:42:40,200 --> 00:42:43,160
Now you brought the Linux kernel, I completely agree with what you said about it and why it's

489
00:42:43,160 --> 00:42:50,040
successful. But the Linux kernel is like this massive constant churn. So it's not like they're

490
00:42:50,040 --> 00:42:55,480
sitting still and moribund. They've managed to marry the two. So a really good example,

491
00:42:55,480 --> 00:43:02,280
I think of this in the user space is, so we've had, you know, the whole many years of UDEV,

492
00:43:02,280 --> 00:43:09,400
U disks, basically the hot plug and disk management facing the user space side has

493
00:43:09,400 --> 00:43:16,040
gone through a number of revolutions and not always, in fact, at each break, it was a radical

494
00:43:16,040 --> 00:43:25,000
API change. So what the KDE developers did was they decided to create an API that did what

495
00:43:25,000 --> 00:43:29,560
application developers could wrap their head around, because the lower level user space APIs

496
00:43:29,560 --> 00:43:36,200
were also pretty hardcore for the average person who just wants to write a cool game or something.

497
00:43:36,200 --> 00:43:40,840
So they created a slightly simplified API, but they masked what was going on down below.

498
00:43:40,840 --> 00:43:46,520
And the CSS opened up the ability to port to Windows and Mac and now iOS and Android.

499
00:43:47,080 --> 00:43:53,960
But when the, you know, the U disk thing came in, while other desktop environments like XFCE,

500
00:43:53,960 --> 00:43:58,840
for instance, had to do a lot of work to catch up their applications and rewrite them, no KDE

501
00:43:58,840 --> 00:44:05,160
application had to line a code. A new backend was written for that framework called Solid,

502
00:44:05,160 --> 00:44:09,640
and everything just continued working. Even more magical, no one got left behind.

503
00:44:09,640 --> 00:44:13,880
Because the people who were using the old stuff used the old backend, and the people using the

504
00:44:13,880 --> 00:44:17,480
new stuff used the new backend, and no one was stranded on an old version.

505
00:44:17,480 --> 00:44:24,440
So it is possible to do, but it takes forethought. And I think that Miguel de Caza was correct in

506
00:44:24,440 --> 00:44:30,120
his criticism or his critique, except that we do have projects and communities out there

507
00:44:30,120 --> 00:44:36,280
that do exactly what he said we should be doing. And the challenge we face is that the community

508
00:44:36,280 --> 00:44:41,800
as a whole, on the one hand, I don't think recognizes that. You know, when someone who

509
00:44:41,800 --> 00:44:45,960
does something like Solid, there's a certain community or group of people in the community

510
00:44:45,960 --> 00:44:50,040
who hurl stones saying, you're just writing, you know, yet another abstraction layer, and,

511
00:44:50,040 --> 00:44:53,960
you know, you should be writing to the Linux stack directly, and that's the way to go.

512
00:44:55,080 --> 00:45:01,400
And so there's like a popular backlash against doing the responsible thing. And I think as a

513
00:45:01,400 --> 00:45:06,440
community, we need to take stock of what really matters. And if we do want to get that stable,

514
00:45:06,440 --> 00:45:13,560
approachable user land, and especially at the GUI level, we need to start valuing that kind of work

515
00:45:13,560 --> 00:45:18,520
that isn't very glamorous, but pays off in the long run. And we need to start supporting those

516
00:45:18,520 --> 00:45:23,880
people. And the people who don't do that, maybe we should say, look, I love you guys, and you guys

517
00:45:23,880 --> 00:45:28,920
are doing free software, which is freaking awesome. But you know what, we need you to do it

518
00:45:28,920 --> 00:45:33,480
responsibly. And so we're going to go over here and support these people that are looking at five,

519
00:45:33,480 --> 00:45:39,560
10 years down the road. And I think if we did that, if we shifted what we value, everybody would

520
00:45:39,560 --> 00:45:43,160
start doing things a little more responsibly. And then I think the whole new shiny thing would

521
00:45:43,160 --> 00:45:48,920
resolve itself, because people tend to do by and large that which is rewarded.

522
00:45:48,920 --> 00:45:51,960
Matt, let me ask you the million dollar question, and then I'll open it up to the mumble room.

523
00:45:52,760 --> 00:45:57,480
How do we shift the end user's value, which would hopefully then influence development?

524
00:45:57,480 --> 00:46:02,200
Would hopefully then influence developers and media coverage? How do we shift the value from

525
00:46:02,200 --> 00:46:06,760
new and shiny to tried and true? Well, I think the opportunity definitely lays

526
00:46:06,760 --> 00:46:11,560
with XP. The problem is that the end user looks at XP, not realizing the fact that it's going to

527
00:46:11,560 --> 00:46:16,200
be a major problem here in the coming months, and doesn't see a reason to switch. But I think if you

528
00:46:16,200 --> 00:46:20,120
speak to the fact that they could potentially continue to use the hardware they already have,

529
00:46:20,120 --> 00:46:24,840
without having to invest in new hardware, I think money is really going to be the sweet spot.

530
00:46:24,840 --> 00:46:29,480
Yeah, I think the point you're driving at here is there's a certain class of user

531
00:46:29,480 --> 00:46:33,720
that absolutely values tried and true, and then there's a certain class of user,

532
00:46:33,720 --> 00:46:38,760
the more sophisticated user, who maybe is a little more on the I want the shiny, right?

533
00:46:38,760 --> 00:46:43,960
Exactly. That's exactly it. And I think that it's really hard to hit that nail on the head,

534
00:46:43,960 --> 00:46:49,720
but I think the biggest problem Linux has for both groups is they really suck at marketing.

535
00:46:49,720 --> 00:46:56,440
I mean, I can't stress that enough. They have this amazing product that is driven through very much

536
00:46:56,440 --> 00:47:01,400
an echo chamber world. I mean, it really is. And it's a shame because I introduce it to people,

537
00:47:01,400 --> 00:47:04,520
and they're just blown away as to why the hell they've never heard of this before. And they have

538
00:47:04,520 --> 00:47:08,920
an Android phone. They have no idea. So it's interesting. So it's going to be tough to say

539
00:47:08,920 --> 00:47:14,440
for sure, but I definitely say that the real opportunity for growth is going to come from

540
00:47:14,440 --> 00:47:17,640
the people that are using XP. I think that's really where it is. The new and shiny people,

541
00:47:17,640 --> 00:47:20,040
honestly, I don't know. Maybe they're always going to want new and shiny.

542
00:47:20,040 --> 00:47:22,280
Yeah, that's like trying to herd cats. I don't know about that.

543
00:47:24,520 --> 00:47:33,080
Well, I think we can do both, but I do completely agree with you, Matt, when you say that people who

544
00:47:34,040 --> 00:47:41,480
want the tried and true, that's how do we market to them? And that's the gap, the marketing bit.

545
00:47:42,200 --> 00:47:46,200
And this is kind of what tweaked me when I listened to your show. And I'm often like one

546
00:47:46,200 --> 00:47:52,440
or two weeks behind that I've been on the Linux action show to catch up. And it's what tweaked

547
00:47:52,440 --> 00:47:59,160
me about it, right? It was like, you guys are the people who market us best because we do suck at it.

548
00:48:01,400 --> 00:48:09,560
Full stop. And so when I see people who would be our best and brightest in terms of getting the

549
00:48:09,560 --> 00:48:16,840
message out of marketing, rewarding really, and for good intentions, I think, the new and shiny,

550
00:48:16,840 --> 00:48:21,960
because you all want to support and push forward everything. I mean, nobody wants to be the grumpy

551
00:48:21,960 --> 00:48:25,160
guy who goes, well, you're really putting your heart and soul into this, and I can see that,

552
00:48:25,160 --> 00:48:30,200
and you're doing this free software, but really? No one wants to be that guy. I get it. But if we

553
00:48:30,200 --> 00:48:35,640
want to succeed, there's some level of responsibility that needs to come in. And the people who do the

554
00:48:35,640 --> 00:48:43,800
best marketing for us who is not me and the other software developers, we need you guys to, and not

555
00:48:43,800 --> 00:48:50,600
just you two, but the media in general who follows free software to do it. And what goes even one

556
00:48:50,600 --> 00:48:56,440
step further of pain and heartache is when I read certain people in the media who cover free software

557
00:48:56,440 --> 00:49:01,640
basically going, fine. Okay, great. The free software projects will never get together.

558
00:49:01,640 --> 00:49:06,280
And again, this is a systems thing because we've been rewarding the wrong things all along. Fine.

559
00:49:06,280 --> 00:49:11,400
And now I'm just going to say that Google with their services are where it will be. And to me,

560
00:49:11,400 --> 00:49:16,360
that feels like just running the white flag straight up the flagpole and unnecessarily.

561
00:49:16,360 --> 00:49:21,800
And I'd love to find some way to break that feedback loop so that we can start rewarding

562
00:49:22,360 --> 00:49:28,920
strategically useful behavior and then getting that message out to those people who would most

563
00:49:28,920 --> 00:49:35,240
benefit from it, such as the XP crowd. It's not an easy thing. I realize that's a gigantic

564
00:49:37,000 --> 00:49:41,960
thing to take on, but I think that's the path to success lies in that direction somehow.

565
00:49:41,960 --> 00:49:47,960
Very good. That's a good point. And it's well taken on my end too, because it's definitely on

566
00:49:47,960 --> 00:49:53,320
my radar because I always cringe a little bit. Like you say, I have that same feeling. It's like,

567
00:49:53,320 --> 00:49:56,040
okay, it's good that you're doing this and I really appreciate the hard work.

568
00:49:56,040 --> 00:50:00,520
And especially in the Gnome case, it's like for years, everybody's been so hard on them. It's

569
00:50:00,520 --> 00:50:04,360
like, okay, they've finally gotten it to a point that it's okay, it's worth talking about now.

570
00:50:04,360 --> 00:50:10,040
It's really gotten good. But at the same time, in the back of my mind, I do understand that I'm

571
00:50:10,040 --> 00:50:15,080
sort of encouraging, like I called it, a form of consumerism. And I'm not generally comfortable

572
00:50:15,080 --> 00:50:19,640
with all those kinds of things. But before we go any further, I want to bring in the main virtual

573
00:50:19,640 --> 00:50:26,280
log here and ask these guys if anyone in the room here wants to raise defense or comment. Go ahead,

574
00:50:26,280 --> 00:50:34,280
Riley. Yes. I have a couple of issues with all of Aaron's things. Everybody is guilty of

575
00:50:34,280 --> 00:50:41,080
beautification. Even KDE is guilty of it. Remember how bad KDE 4.0 and 4.1 was when it came out?

576
00:50:42,120 --> 00:50:46,200
It happened right when Windows 7 came out too, because they were trying to... I mean,

577
00:50:46,200 --> 00:50:49,000
they looked almost exactly alike. I actually think that's a good distinction to make,

578
00:50:49,000 --> 00:50:54,280
is there are times where maybe, all things considered, it is worth retooling and rebooting.

579
00:50:54,280 --> 00:51:01,000
Also, people always have a choice with Linux. The reason why is the LXDs out there and XFDs

580
00:51:01,000 --> 00:51:07,480
out there. They'll be around for a long time to come, and let these newer thread tier projects

581
00:51:07,480 --> 00:51:16,200
keep going. People can use them if they want to. Those awkward transition periods. XP was great,

582
00:51:16,200 --> 00:51:22,600
it was stable, but then they created Vista. Vista was awful, but that led to 7, and 7

583
00:51:23,160 --> 00:51:30,920
was a huge improvement over XP. I think that's the same thing that Ubuntu did between 10.10

584
00:51:30,920 --> 00:51:35,400
and 12.04. That's the same thing KDE did, the same thing GNOME did. Hold on there,

585
00:51:35,400 --> 00:51:43,480
hold on right there. Let Aaron respond to the first comment about KDE rebooting and

586
00:51:43,480 --> 00:51:50,520
things like that, and then we'll move on to the next topic. Yeah, sure. First off, I completely

587
00:51:50,520 --> 00:51:57,240
agree that the results of 4.0.4.1 were not what we all desired, and we've learned from that.

588
00:51:57,800 --> 00:52:04,920
We're doing the next major release, the 5.0, extraordinarily differently as a result. There's

589
00:52:04,920 --> 00:52:15,880
learning curves for everybody. That said, the reason to take on such a revamp or the choice

590
00:52:15,880 --> 00:52:23,800
to do it was only taken after a very extensive examination of the code base we had at the time

591
00:52:25,000 --> 00:52:31,800
and where we could go with it in the future. On the desktop side, applications were a completely

592
00:52:31,800 --> 00:52:39,080
separate issue, but the desktop shell itself was at an evolutionary dead end, and looking at what

593
00:52:39,080 --> 00:52:47,400
we could do with it and to move it to the next step was more work and even more disruptive than

594
00:52:47,400 --> 00:52:53,720
doing what we did with the reboot with Plasma. I wish it would have been different, but

595
00:52:54,360 --> 00:52:59,080
that was a necessary thing, and that needs to happen. We probably have the ability to do that

596
00:52:59,080 --> 00:53:06,440
or afford to do that maybe once in 10 to 15 years, which is exactly what they did there.

597
00:53:08,040 --> 00:53:14,040
Even to this day, I'm on Intel graphics and I still had issues with KWin rendering effects.

598
00:53:16,120 --> 00:53:19,160
I don't want to make this about tech support. I wanted to go back to Tyler. Tyler, were you

599
00:53:19,160 --> 00:53:23,560
going to make the point that essentially 7.0 was an iteration of Vista, and so Vista in a sense was

600
00:53:23,560 --> 00:53:29,640
a reboot, and 7.0 was the... I was going to say that a lot of people seem to forget that Vista

601
00:53:29,640 --> 00:53:36,600
was like a 6.0 release. Microsoft didn't magically do anything with 7.0 to make it better. It was by

602
00:53:36,600 --> 00:53:42,200
the time 7.0 got released, all the hardware and software support was already there for the Nt6

603
00:53:42,200 --> 00:53:49,800
series. Yeah, that's true. Well, SP1 did.

604
00:53:49,800 --> 00:53:56,360
So, if I could just add a little thing there. Now, the feedback that we got after the 4.0 release

605
00:53:56,360 --> 00:54:04,280
was anything but gentle. And while unpleasant, it did have the positive effect of making us

606
00:54:04,280 --> 00:54:11,960
seriously consider the lightness and the responsibility that goes into making such

607
00:54:11,960 --> 00:54:17,080
decisions. And I think that in that sense, the kind of feedback that was often like,

608
00:54:17,080 --> 00:54:23,160
oh, that sucked. That's useful. And I think it'd be much more useful if that was kind of,

609
00:54:23,880 --> 00:54:26,760
you know, maybe not as brutal, because I think a lot of it went over the top.

610
00:54:27,720 --> 00:54:33,160
But that kind of critique, honest critique is useful and needs to be taken on. Because if we

611
00:54:33,160 --> 00:54:38,760
don't look at it as, oh, you're just criticizing me horribly, but this is feedback, I need to take

612
00:54:38,760 --> 00:54:44,120
this on, let's move forward. If we can all engage in that way, then we can actually be more honest

613
00:54:44,120 --> 00:54:49,000
and more critical in a non-confrontational way with each other. And then again, that moves,

614
00:54:49,000 --> 00:54:54,520
I think, the developers towards a path of actually being able to develop more responsibly.

615
00:54:55,080 --> 00:54:59,960
Okay. I wanted to change gears. I'm done talking about Windows. But I wanted to ask a question to

616
00:54:59,960 --> 00:55:05,720
the room that I asked Matt earlier and see if you guys had a take on it. So, Aaron, I think,

617
00:55:05,720 --> 00:55:11,960
made the astute point that if we could encourage the celebration of tried and true and developing

618
00:55:11,960 --> 00:55:17,480
rock-solid platforms and sticking with them and encouraging developers to want to contribute to

619
00:55:17,480 --> 00:55:22,760
that, encouraging users to be interested in that. Does anybody have any ideas on how you actually

620
00:55:22,760 --> 00:55:29,160
shift people's values and perceptions on that? Anybody have a throw, maybe like an idea to start

621
00:55:29,160 --> 00:55:35,000
that process? Well, I think when we talk about mature projects and what Michael Dominic from

622
00:55:35,000 --> 00:55:40,520
Quota Radio calls, quote unquote, the new hotness, I think we need to take a, I think we need a

623
00:55:40,520 --> 00:55:49,000
balance between the two. We mean, I think, an ideology and approach that both gives people

624
00:55:49,000 --> 00:55:54,040
something shiny, something new to play with, but also has that reliability and maturity

625
00:55:54,040 --> 00:55:59,880
that people expect from their software and their computers. I think when we look at software in

626
00:55:59,880 --> 00:56:08,200
general and DEs especially, I think we also need to have new features and integration with modern

627
00:56:08,200 --> 00:56:13,480
technology. We need to have JavaScript, we need to have HTML5, we need to have all those things,

628
00:56:13,480 --> 00:56:21,080
but we also need stability. We also need a lot of critical bugs. To interrupt, if I could,

629
00:56:21,080 --> 00:56:27,240
what you're basically saying is we need to have developers who are experienced enough and savvy

630
00:56:27,240 --> 00:56:33,240
enough to need to know that they need to build something massive that they can build upon for

631
00:56:33,240 --> 00:56:38,120
years that will have the plumbing and meet the requirements for stuff they haven't even considered

632
00:56:38,120 --> 00:56:43,720
yet. And that sounds to me like we're asking too much of people that are just contributing to free

633
00:56:43,720 --> 00:56:47,800
projects during their free time. That is true. That is true because a lot of times developers

634
00:56:47,800 --> 00:56:55,240
do not know what the people really want because, I mean, sometimes it really makes you scratch

635
00:56:55,240 --> 00:57:01,640
your head, especially with, I want to say it, but Unity and me are like, are you actually using it

636
00:57:01,640 --> 00:57:08,840
right now? It's like, think about that. Use what you develop and go from there. Like you haven't

637
00:57:08,840 --> 00:57:15,000
used it yet. Go ahead, go ahead, go ahead. I might be able to speak from a little bit of

638
00:57:15,000 --> 00:57:20,840
authority of the Unity side. I spent the day today in an office of a hundred plus people

639
00:57:20,840 --> 00:57:25,960
all using Unity all day for all kinds of business activities, developers, kernel developers,

640
00:57:25,960 --> 00:57:33,320
designers, finance people, HR. And it runs Linux. A lot of times it's Unity on Ubuntu and you see

641
00:57:33,320 --> 00:57:41,080
it in an everyday setting. Right. And what I found pleasing was not only that, when I left the office

642
00:57:41,080 --> 00:57:45,640
and got the train home, I sat next to some random dude and asked him what game he was playing on his

643
00:57:45,640 --> 00:57:50,760
iPad because it looked like fun. And it turns out he happened to be an Ubuntu user as well and told

644
00:57:50,760 --> 00:57:56,680
me he'd been playing with Ubuntu on a mobile phone and playing with Ubuntu on a desktop. And so that

645
00:57:56,680 --> 00:58:04,280
kind of rekindled my thoughts that actually, despite how much flack we get for Unity and how

646
00:58:04,280 --> 00:58:11,000
much flack we get for whatever we do in terms of licenses and packages we pre-install or don't

647
00:58:11,000 --> 00:58:17,080
pre-install, there are actually plenty of normal everyday users out there who continue to use this

648
00:58:17,080 --> 00:58:22,040
stuff, not just Unity, but for software in general. And they have a whole different set of

649
00:58:22,040 --> 00:58:28,760
expectations and they have a whole different set of preconceptions before they go in and use a

650
00:58:28,760 --> 00:58:36,760
computer. And to really sort of underscore the point there is, what I find amazing about it is

651
00:58:36,760 --> 00:58:41,480
now it's almost like, when we first did Runs Linux, it was a really big deal that all these

652
00:58:41,480 --> 00:58:45,240
computers in this office space would be running Linux. Now we're finding out about it because,

653
00:58:45,240 --> 00:58:49,720
well, of course, it's just a foregone conclusion. That's what we installed and there's the desktop.

654
00:58:49,720 --> 00:58:53,960
It's like not even brought up. It's not even a big mention because it just seems obvious. And

655
00:58:53,960 --> 00:58:57,960
I mean, really, it's like seven out of ten times those are Unity desktops and they're probably

656
00:58:57,960 --> 00:59:02,360
running a long-term support version too on top of that. So there really is a good degree of

657
00:59:02,360 --> 00:59:07,000
stability. And really a lot of what we're talking about is it sort of changes when you change the

658
00:59:07,000 --> 00:59:11,960
context. When you change the context to Ubuntu 12.04 LTS, now all of a sudden you essentially

659
00:59:11,960 --> 00:59:16,200
have what we're talking about for four or five years, which is a pretty good length of time,

660
00:59:16,200 --> 00:59:21,880
probably about the appropriate length of time. So it's interesting because it's this really

661
00:59:21,880 --> 00:59:26,280
complex issue because there's a lot of development actively happening at the front and then there can

662
00:59:26,280 --> 00:59:33,160
be silos of stability that take place that are not really considered in this context, I guess.

663
00:59:33,160 --> 00:59:39,320
I guess on the point to take away from all this is my main selling point of Linux is you always

664
00:59:39,320 --> 00:59:44,520
have a choice. There's always one thing to fall back onto if something else isn't working.

665
00:59:44,520 --> 00:59:51,000
I feel like that's a trope that we lean on to say, well, even if we don't make software that's

666
00:59:51,000 --> 00:59:55,160
actually good enough to meet the expectations of users, we have a lot of software that's not good

667
00:59:55,160 --> 00:59:56,520
enough that you can choose from.

668
00:59:56,520 --> 01:00:03,000
It's not necessarily that. I mean, XFCE, if you don't like GNOME 3, most people go to XFCE

669
01:00:03,000 --> 01:00:04,040
and it's very good.

670
01:00:04,040 --> 01:00:05,240
No, it's not.

671
01:00:05,240 --> 01:00:11,240
But jumping around from one solution to another is not a solution for the average person.

672
01:00:11,240 --> 01:00:15,480
The average individual is not going to hop from desktop to desktop environment.

673
01:00:15,480 --> 01:00:19,640
If you're going to deliver to users, you're making a commitment to them.

674
01:00:19,640 --> 01:00:24,440
Now, I agree that the fact is like, oh great, there's a bunch of people using Unity.

675
01:00:24,440 --> 01:00:30,520
That's almost uninteresting. The question ought to be, are those people using Unity

676
01:00:30,520 --> 01:00:36,280
because it's E, or had they stuck with GNOME, for instance, 2 or whatever,

677
01:00:37,240 --> 01:00:41,960
would they also be using that? So is the differentiation point Unity or not?

678
01:00:41,960 --> 01:00:47,480
And if it isn't, and I'm not trying to pick on Unity, I think this is true of every single out

679
01:00:47,480 --> 01:00:47,720
there.

680
01:00:47,720 --> 01:00:51,160
Right, but like Nat always says, default is king. It's just whatever ships is default.

681
01:00:51,160 --> 01:00:59,160
Right, so if the game changer is not Unity, then this is resources and time that we're

682
01:00:59,160 --> 01:01:00,120
not using wisely.

683
01:01:00,120 --> 01:01:01,560
Well, I think that...

684
01:01:01,560 --> 01:01:02,600
I'll go ahead, Poppy.

685
01:01:02,600 --> 01:01:05,880
Sorry, it also goes back to what Aaron was saying about marketing.

686
01:01:05,880 --> 01:01:11,880
And whilst I agree with Aaron that there is grassroots marketing that people like Chris

687
01:01:11,880 --> 01:01:18,200
and Matt do on this show and others, and Lugs and local teams and other special interest

688
01:01:18,200 --> 01:01:25,400
groups, there's also the very great power that comes from selling machines pre-installed

689
01:01:25,400 --> 01:01:27,400
with whatever operating system.

690
01:01:27,400 --> 01:01:27,960
And brand.

691
01:01:27,960 --> 01:01:30,200
And that co-marketing.

692
01:01:30,200 --> 01:01:33,080
The Dell brand, the System76 brand, there's power behind that brand.

693
01:01:33,080 --> 01:01:41,800
Exactly. And so you can be forgiven for not focusing your attention on the older computers

694
01:01:41,800 --> 01:01:49,720
that have a very low amount of memory and a single core CPU, because those don't get

695
01:01:49,720 --> 01:01:54,280
you that marketing eyeballs. What gets you the marketing eyeballs is the shiny in the

696
01:01:54,280 --> 01:02:00,120
shop and the online store and the what's the latest greatest multi-core processor with

697
01:02:00,120 --> 01:02:04,040
gigabytes of memory and an SSD. That's what gets you that marketing push.

698
01:02:04,040 --> 01:02:07,000
Or really look at the Ubuntu Edge, right? The Ubuntu Edge got a lot of...

699
01:02:07,000 --> 01:02:08,360
...for a constant late ticket there.

700
01:02:08,360 --> 01:02:13,880
I think one point that really should be brought up is we should be striving for stable and

701
01:02:13,880 --> 01:02:19,960
solid software, regardless of what time of year, what releases we're looking at, because

702
01:02:19,960 --> 01:02:24,040
OpenSUSE could arbitrarily say, okay, this is going to be an evergreen release, and it's

703
01:02:24,040 --> 01:02:27,080
not as scheduled as Ubuntu's LTS releases.

704
01:02:27,080 --> 01:02:32,840
Right. Yeah. It's always something I think... And I think some of this too is there are

705
01:02:32,840 --> 01:02:36,200
certain things that are going to get to a maturity. Gnome is going to reach a certain

706
01:02:36,200 --> 01:02:41,560
level of maturity. Obviously, KDE is at a certain level of maturity. And in time, the

707
01:02:41,560 --> 01:02:46,440
new versions of Unity will be at a certain level of maturity. And all of this is really...

708
01:02:46,440 --> 01:02:51,240
It's sort of getting our ducks in a row. And I think maybe this might be a problem that

709
01:02:51,240 --> 01:02:54,920
a couple of years down the road is not nearly as pronounced. Maybe. Now, you'll still have

710
01:02:54,920 --> 01:02:58,680
a lot of small apps that are changing all the time that we could argue about, user-end

711
01:02:58,680 --> 01:03:03,080
apps that need to stabilize. But I think big picture wise, we might not really be talking

712
01:03:03,080 --> 01:03:09,960
about this in a couple of years. If I may, really quick. Here's my position on this.

713
01:03:09,960 --> 01:03:20,440
And I think it just needs to be said that we have LTS for the people that want stability

714
01:03:20,440 --> 01:03:27,000
and they want to work in an environment where everything will be expected and everything

715
01:03:27,000 --> 01:03:35,400
will stay the same. Whereas we have the Arch community where we work on these type of things.

716
01:03:35,400 --> 01:03:45,400
And we develop the future for the LTS projects. So in a sense, the people that do the development

717
01:03:45,400 --> 01:03:53,560
work in the future will also help the people that have businesses or just want to have

718
01:03:53,560 --> 01:04:02,520
just a stable computer at home. And so I think the best way to go look at this is that to

719
01:04:02,520 --> 01:04:12,120
have a community where we proactively respond to the effects that we need to have for people

720
01:04:12,120 --> 01:04:18,040
that want to try Linux or want to have Linux as an everyday product and not have to worry

721
01:04:18,040 --> 01:04:30,600
about problems in the future. I think there's no need to overthink it.

722
01:04:30,600 --> 01:04:31,600
Overthink it.

723
01:04:31,600 --> 01:04:32,600
Overthink it, yeah.

724
01:04:32,600 --> 01:04:38,200
All right. Well, last final words, gentlemen. Aaron, you've got to go across to the side.

725
01:04:38,200 --> 01:04:43,320
I have a question for Popi, actually. I'd be interested to get his perspective as a

726
01:04:43,320 --> 01:04:50,600
technical employee. What exactly are the purposes of the non-LTS Ubuntu releases? Are those

727
01:04:50,600 --> 01:04:52,920
supposed to be like testing grounds for the Ubuntu releases?

728
01:04:52,920 --> 01:04:55,000
All right. Hold on. We'll do that in post-show because I've got to wrap up.

729
01:04:55,000 --> 01:04:56,880
Hold on. Chris, can I get one thing in real time?

730
01:04:56,880 --> 01:04:58,680
Go ahead, Q5.

731
01:04:58,680 --> 01:05:03,480
One thing that I've noticed that we as a Linux community sometimes don't wrap our brains

732
01:05:03,480 --> 01:05:07,800
around is that we have multiple levels of development. Myself working with the Popi

733
01:05:07,800 --> 01:05:17,240
Linux project, distro development is one step removed from, say, desktop environment development.

734
01:05:17,240 --> 01:05:24,120
I think sometimes we try to lump all development into one bucket. That's a problem in my mind

735
01:05:24,120 --> 01:05:31,200
because as a distro developer, most of the time I'm limited by what upstream desktop

736
01:05:31,200 --> 01:05:37,600
environment developers give out. We all need to work together, but people also need to

737
01:05:37,600 --> 01:05:42,000
realize that there are decisions that are made at the application layer that then the

738
01:05:42,000 --> 01:05:44,160
distribution layer has to then try to deal with.

739
01:05:44,160 --> 01:05:46,880
Right. That makes sense. Aaron, were you going to say something?

740
01:05:46,880 --> 01:05:51,560
Yes. I was just going to say in response to what you said, Chris, about maybe in two years

741
01:05:51,560 --> 01:05:56,560
this won't be a problem. If that was the case, we wouldn't be in the problem now because

742
01:05:56,560 --> 01:06:03,600
we'd actually achieved a position of relative stability, featurefulness, and then everyone

743
01:06:03,600 --> 01:06:11,000
went and did a bunch of new things, in large part because people observed or felt they

744
01:06:11,000 --> 01:06:16,560
observed that to be relevant, to be on that shiny new machine and that new hardware, you

745
01:06:16,560 --> 01:06:23,800
had to reinvent and rewrite. Now it's just a cycle of constant rewriting. I think that

746
01:06:23,800 --> 01:06:30,560
if we do not change how we interact with our expectations, that this will just repeat over

747
01:06:30,560 --> 01:06:39,320
and over and over again. We'll only have so many more kicks of this can before we don't

748
01:06:39,320 --> 01:06:40,320
have any more.

749
01:06:40,320 --> 01:06:44,800
I completely agree. I want to button it right there because I think that it's a good warning

750
01:06:44,800 --> 01:06:48,760
as somebody who's also been following this for a long time. You guys know I've expressed

751
01:06:48,760 --> 01:06:52,080
my feelings on this. Matt, you and I have talked a few times about how we feel like

752
01:06:52,080 --> 01:06:55,480
there's been some missed opportunities. I think Aaron just nailed it. It's a warning.

753
01:06:55,480 --> 01:07:00,400
It's something to think about. You can send us in your feedback by going over to JupiterBroadcasting.com

754
01:07:00,400 --> 01:07:04,000
and clicking the contact link and then choosing Linux Unplugged from the drop down or even

755
01:07:04,000 --> 01:07:09,240
better, you could join us live over at jblive.tv. Go in our chat room, do Bang Mumble and guess

756
01:07:09,240 --> 01:07:12,520
what? You'll get our Mumble server and you can join our virtual lug and have your voice

757
01:07:12,520 --> 01:07:17,720
right here in this very show. Now Linux Unplugged is live on Tuesdays at 2pm Pacific. You can

758
01:07:17,720 --> 01:07:22,320
go over to JupiterBroadcasting.com slash calendar and then you can just get that in your local

759
01:07:22,320 --> 01:07:25,760
time zone. Matt, we're going to get to that how-to on Sunday. Remember I was talking about

760
01:07:25,760 --> 01:07:26,760
the remote desktop thing?

761
01:07:26,760 --> 01:07:27,760
Oh, right on.

762
01:07:27,760 --> 01:07:32,280
We're going to do that this Sunday. We might do a slightly shortened show because it's

763
01:07:32,280 --> 01:07:33,280
Super Bowl Sunday.

764
01:07:33,280 --> 01:07:35,320
Oh, yeah, right? It might as well at that point.

765
01:07:35,320 --> 01:07:38,840
That could be a problem. We'll see, but we'll figure it out. All right, everybody. Well,

766
01:07:38,840 --> 01:07:42,120
thank you so much for tuning this week's episode of Linux Unplugged. If we don't see you on

767
01:07:42,120 --> 01:07:57,480
Sunday, we'll see you right back here next Tuesday.


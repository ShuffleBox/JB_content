WEBVTT

00:00.000 --> 00:07.000
This is Linux Unplugged Episode 33 for March 25th, 2014.

00:30.000 --> 00:40.160
Welcome to Linux Unplugged, your weekly Linux talk show that's prepping for the

00:40.160 --> 00:45.160
display revolution. My name is Chris. My name is Matt. Hey there Matt, I've still

00:45.160 --> 00:49.800
got the yellow hat on, the rest of the suits off though. And you know, I just

00:49.800 --> 00:52.920
want to know, I just gotta visualize it. Are you still in the monkey suit?

00:52.920 --> 00:56.760
Monkey suit was a thing until it was bedtime and then the wife kind of drew

00:56.760 --> 00:59.720
the line in the sand and said I'm not gonna do it like they do it on the

00:59.720 --> 01:04.280
animal planet, so that's not happening. So that had to come off, unfortunately. I understand Matt.

01:04.280 --> 01:08.200
Well, now I like the idea this monkey suit is floating around there and it

01:08.200 --> 01:11.660
could always like, there could be another bet down the road and like the monkey

01:11.660 --> 01:16.520
suit looms. You know that if the bet doesn't pan out, they might have to come

01:16.520 --> 01:20.080
back out of retirement. Right. So this week we're gonna kind of pick up on

01:20.080 --> 01:25.400
where we touched on Linux Action Show 305 last week. We talked with Kevin

01:25.400 --> 01:30.760
Gunn from Canonical about Mir. And the day that we ran with that show, there

01:30.760 --> 01:34.520
was a couple of posts, one from another Canonical developer, Bob, who said the

01:34.520 --> 01:37.240
display server doesn't matter and we covered that in the feedback. And then

01:37.240 --> 01:41.920
after that, two succeeding posts came out, one from Martin and one from Aaron

01:41.920 --> 01:47.480
from the KDE camp. They said, oh wait a minute, the display server does matter.

01:47.480 --> 01:51.560
And I'll tell you Matt, I've been thinking about this. In fact, I thought

01:51.560 --> 01:56.800
about this so hard. Get ready for this. I did some exercise. I got

01:56.800 --> 02:01.640
exercise. I put on my new hoodie. Actually I put on the demo print hoodie,

02:01.640 --> 02:05.640
I'm not gonna lie. And I went out, I walked in the rain and I thought, you

02:05.640 --> 02:09.920
know, I wanted to kind of really kind of in the last couple of weeks come to sort

02:09.920 --> 02:14.920
of where I land on the whole Mir debate. Because I for a long time have

02:14.920 --> 02:19.320
been taking the, hell you know what, let him have at it Haas. Let's see how it

02:19.320 --> 02:23.320
goes. Nothing bad with having a little competition out there. It might spur

02:23.320 --> 02:26.120
people into getting their butts in gear and make things better for everybody in

02:26.120 --> 02:29.880
the long run. And now I've thought about it and I realized two things. There's a

02:29.880 --> 02:33.040
headwind of the general, there is a large percentage of the

02:33.040 --> 02:37.200
general audience who just doesn't give a crap. They couldn't care less about Mir

02:37.200 --> 02:41.280
or Wayland or X11 and I want to change that opinion today. So if you consider

02:41.280 --> 02:44.880
yourself one of those people who doesn't really care about Mir, who doesn't really

02:44.880 --> 02:48.600
care about Wayland, I want to correct that. Because that is a mistake on your

02:48.600 --> 02:52.080
part, at least I think, and I want to make the case why you should care and why I

02:52.080 --> 02:56.560
think if this doesn't pan out correctly, it could fundamentally damage Linux,

02:56.560 --> 03:00.680
desktop Linux's success in the future. Okay. And if we don't get this right, and

03:00.680 --> 03:04.880
this is why we have to care, because what is at stake here is taking Linux as a

03:04.880 --> 03:08.720
serious platform. And that could not be a more critical thing right now as all of

03:08.720 --> 03:12.120
these game companies are announcing support for Linux. There was just an

03:12.120 --> 03:16.200
NVIDIA demo today. NVIDIA is up on stage and they're demoing their brand new

03:16.200 --> 03:20.600
product on an Ubuntu desktop machine. It has never been a more critical point in

03:20.600 --> 03:24.520
the Linux desktop ever in the timeline of Linux desktop. And there is something

03:24.520 --> 03:28.360
that is about to happen that has never happened in Linux ever. And if we don't

03:28.360 --> 03:32.240
get it right, Linux is gonna be seen like a joke on the desktop for the rest of

03:32.240 --> 03:36.080
its existence. And I don't, and that is not, I believe, an exaggeration in the

03:36.080 --> 03:40.240
least. In fact, I think it is understating the issue. So if you are somebody who

03:40.240 --> 03:43.040
doesn't think they care about Mir, they don't think they care about Wayland, I

03:43.040 --> 03:46.480
think you got it wrong. And I want to try to change your opinion on that today. And

03:46.480 --> 03:49.040
if it's something you've been kicking around and mulling on for a long time

03:49.040 --> 03:53.360
like Matt and I have, I want to give you a little more to think about. Some more

03:53.360 --> 03:57.040
thoughts and we're gonna play off these recent posts that came

03:57.040 --> 04:01.080
out right as last was wrapping up. And here we are, you know, we're about

04:01.080 --> 04:04.800
a year in since the Mir announcement. And I think it's time to reflect on this

04:04.800 --> 04:08.240
and sort of think about the long-term ramifications of it. So that's what we're

04:08.240 --> 04:12.560
gonna talk about sort of in the second half of this week's show. But first, we

04:12.560 --> 04:16.960
should cover some feedback. And we got a lot of feedback on our Solid XK review.

04:16.960 --> 04:21.800
One of the folks who wrote in and we got, I mean, we got so many. It's great. I love

04:21.800 --> 04:25.280
it. Because we weren't quite sure like if we, you know, should we spend a lot of

04:25.280 --> 04:28.280
time on a small distro? Will people be that interested? Are people, you know,

04:28.280 --> 04:31.560
are the masses only interested in the big distros? And I think our experiment

04:31.560 --> 04:35.880
with Solid XK proves that if you get the right distro, it doesn't matter about the

04:35.880 --> 04:39.240
size. If they've got the right recipe, it's worth talking about. So Dave wrote

04:39.240 --> 04:42.400
in, he says, I've been distro hopping for some time now, looking for the right

04:42.400 --> 04:46.280
one. I think a lot of people can sort of put themselves in that shoe. He said,

04:46.280 --> 04:49.400
inspired by last and Linux unplugged reviews, I got around to taking a look at

04:49.400 --> 04:53.760
Solid X, or actually he looked at Solid K. I liked it so much, I promptly nuked

04:53.760 --> 04:57.760
and paved over my OpenSUSE install. He says, it's a quite well thought out

04:57.760 --> 05:01.520
implemented distro and it's great. And he says, thanks for the great programming.

05:01.520 --> 05:04.880
He loves it. And by the way, he also loves his new hoodie. We got tons of people

05:04.880 --> 05:08.120
that wrote in and said they're trying out Solid and they're really impressed

05:08.120 --> 05:12.760
with it. I think it's that, I think it's that, that rolling release done right. And

05:12.760 --> 05:16.800
I wonder if some of the bigger distros might look at what Solid's doing here and

05:16.800 --> 05:19.560
saying, yeah, maybe there's something we could kind of copy from this, something

05:19.560 --> 05:24.680
we could institutionalize. Because I, I think Linux is at its best when you're

05:24.680 --> 05:29.240
taking advantage of the fundamental fact that Linux is always moving forward as a

05:29.240 --> 05:32.200
whole. I don't mean just the kernel, but obviously the kernel applies here too. But

05:32.200 --> 05:36.240
all of the GNU-utils, everything in Linux is not static. That's one of its

05:36.240 --> 05:40.600
biggest faults and it's also one of its biggest, biggest advantages. And when you

05:40.600 --> 05:45.360
are on a distribution that snapshots Linux in time, like all distributions do

05:45.360 --> 05:48.560
that aren't rolling, you're inherently going against the nature of the

05:48.560 --> 05:52.880
underlying operating system. And what all of, and how the upstream system works

05:52.880 --> 05:56.560
altogether. And that's why a rolling release, if you've been a longtime Linux

05:56.560 --> 05:59.920
user, can be extremely compelling. Because it actually, in some really weird

05:59.920 --> 06:05.480
twisted way, feels more natural. It feels like the way the Linux desktop should be.

06:05.480 --> 06:10.600
And Solid has sort of struck that, that comfortable area with these understandable

06:10.600 --> 06:14.840
update packs. And these, and your core applications on a much more frequent

06:14.840 --> 06:18.040
basis. And I, I don't know if Solid's going to be the one. Because, you know,

06:18.040 --> 06:21.920
it's a small team. But bigger distros could watch this success and learn from

06:21.920 --> 06:23.160
it, I think.

06:23.160 --> 06:26.000
Well, you know, and I look at what they're doing and then I compare it to,

06:26.000 --> 06:29.200
like, a distros I'm using now. And it's, one thing I really like is the fact that

06:29.200 --> 06:33.560
they group those update packs together in nice little tidy packages versus...

06:33.560 --> 06:35.560
You know, okay, I'm going to plan for this.

06:35.560 --> 06:38.120
Right. It's like the laptop that I have sitting here in front of me and I'm going

06:38.120 --> 06:41.160
to, you know, it's like my old netbook, rather. And I boot it up, I know I'm going

06:41.160 --> 06:43.960
to have 50 billion freaking updates that I'm going to have to deal with because I

06:43.960 --> 06:47.520
haven't done it every day. And it's annoying. I mean, it's like, I like the

06:47.520 --> 06:51.160
updates, but it's like, oh my God, enough, right? So I love the fact that by having

06:51.160 --> 06:55.240
them in update packs, you know, that's kind of appealing. I like the fact that I can

06:55.240 --> 06:56.040
schedule it. Yeah.

06:56.040 --> 07:01.080
Now, for me, I get a little endorphin spike every day when I do a packer,

07:01.080 --> 07:05.280
SYU, and I see like 30 packages are going to get updated. And I get even a bigger

07:05.280 --> 07:09.040
endorphin spike when I see like 40, 50, 60 packages are going to be updated and the

07:09.040 --> 07:12.760
net difference is a reduction in total disk usage. That is my favorite thing.

07:12.760 --> 07:18.000
I love seeing that. So for me, like every day, I love updating because I always want

07:18.000 --> 07:20.880
to get new stuff. I always want to look at the new stuff. I want to use the new

07:20.880 --> 07:26.320
stuff. And so far, I haven't been burned big time. Like the biggest burn I've had

07:26.320 --> 07:31.760
is a theme might wonk out on me or virtual box won't start until I figured out, oh,

07:31.760 --> 07:34.320
I need to have the modules auto build when I update my kernel. You know, there

07:34.320 --> 07:38.800
was, I've, I've, I've hit some minor snags that I probably wouldn't have hit on a,

07:38.840 --> 07:43.440
on a more static distribution, but those are so minor compared to the thrill I get

07:43.440 --> 07:47.120
from having, I know it sounds silly, but when I hear an announcement that a brand

07:47.120 --> 07:50.480
new version of Chrome is out and I have it within 15 minutes, that feels pretty

07:50.480 --> 07:54.080
great. You know, and it could be, it's everything. Uh, and, and solid XK, those

07:54.080 --> 07:57.120
were people who don't want to ride that edge so close. I think it's pretty

07:57.120 --> 08:00.760
interesting. I think so. Yeah, I think so. I think the other piece of it, it's like,

08:00.760 --> 08:04.800
the only time I ever really got burned per se was, uh, Chrome did some weird

08:04.800 --> 08:09.200
legacy library issue that arch had way surpassed it. They were done and Chrome

08:09.200 --> 08:12.240
failed to catch up and I had to go to Chromium. That was not that much drama.

08:12.240 --> 08:15.280
It really wasn't a big deal. It's a bit of a pain in your butt. Yeah, but it

08:15.280 --> 08:17.720
wasn't that, you know, but it was, it was like, I needed to do this anyway, so

08:17.720 --> 08:21.640
whatever. You remember we also covered on Linux action show this Sunday, uh, the

08:21.640 --> 08:25.800
Debbie and looking at PPAs. Well, uh, Robert wrote in with some thoughts on

08:25.800 --> 08:29.640
that. He says, I was listening to your podcast as always. I noticed you had my

08:29.640 --> 08:33.240
letter on the Australian national board brand network. He says, but that was on

08:33.240 --> 08:37.080
text, not last. I don't think PPAs are the answer either, but I think there's an

08:37.080 --> 08:40.720
existing solution. Docker is fast becoming a standard for software

08:40.720 --> 08:45.280
delivery that is distro agnostic and reliable. It's already accepted and, and

08:45.280 --> 08:48.400
built into red hat enterprise Linux and there is a red hat certification for

08:48.400 --> 08:52.240
software providers. There is a tool called sub user that uses a config file

08:52.240 --> 08:56.680
and Docker to run an application, even a gooey app in an isolated Docker

08:56.680 --> 09:01.440
container. The sub user allows you to control what the app has access to. I,

09:01.440 --> 09:04.840
you could allow Firefox to access the downloads directory, but not your

09:04.840 --> 09:08.360
documents directory. Sub user is primarily for security, but it uses

09:08.360 --> 09:11.880
standard Docker image. So you could run Docker images without sub user if you

09:11.880 --> 09:15.320
wanted to, but if you're using it with sub user, you could easily control the

09:15.320 --> 09:20.120
isolation from the rest of the OS. Docker is also repository paste like get for

09:20.120 --> 09:24.360
binaries. So it would be a single command to download and use. Imagine if you had

09:24.360 --> 09:28.600
all upstream project release as Docker images, you could run it anywhere on any

09:28.600 --> 09:32.480
distro and not have to worry about breaking anything. The distro repos will

09:32.480 --> 09:36.240
still be important for the core OS stuff, but even the core OS stuff could be put

09:36.240 --> 09:43.280
in Docker images for a try. I like it. I think one of the times we interview the

09:43.280 --> 09:47.120
Docker guys on Koda radio, I specifically asked him and I said, so how

09:47.120 --> 09:51.040
are you guys playing with application delivery? And he said, well, it's not our

09:51.040 --> 09:55.040
core focus right now, but we have been experimenting with it. And it's sort of

09:55.040 --> 09:59.360
like, you know, think of it as a little isolated environment for each

09:59.360 --> 10:04.000
application. And the overhead would only be, I think, I might have this wrong, but

10:04.000 --> 10:08.600
the overhead of a Docker container would only be the differentials from your core

10:08.600 --> 10:13.360
system that don't match up with that Docker. So for example, if there was a GL

10:13.360 --> 10:17.560
library that was the same on your core system that was called for in the Docker

10:17.560 --> 10:20.760
image, it would just use the one on your core system. And because it's not actual

10:20.760 --> 10:24.080
virtualization, it's not like you have the overhead of a VM to run these

10:24.080 --> 10:28.440
applications. So I think it'd be something to play with. And I wonder if

10:28.440 --> 10:31.040
I'd like to hear from folks out there who might already be doing this because

10:31.040 --> 10:35.280
I know it is possible. And so if you're experimenting with application delivery

10:35.280 --> 10:39.600
via Docker, let us know because one of the things that could in theory do, at

10:39.600 --> 10:44.400
least according to the Docker developer, was sort of normalize out a lot of

10:44.400 --> 10:49.120
distro fragmentation. You know, like for example, Steam is doing this in a

10:49.120 --> 10:53.240
sense. There's the Steam environment. Every time you install Steam now, it

10:53.240 --> 10:56.760
installs a Steam runtime environment. That runtime environment looks an awful

10:56.760 --> 11:00.800
lot like an Ubuntu 12.04 install, right? But it's just the files that it needs. Yeah, you know, so

11:00.800 --> 11:04.740
they're already kind... This is essentially what Steam is doing right now. And it

11:04.740 --> 11:07.760
wouldn't be, you know, the chat room saying, oh, it would be really messy on your file

11:07.760 --> 11:10.760
system. Not necessarily. Because you could maybe have all your Docker images

11:10.760 --> 11:13.520
under slash op slash Docker or something like that. You could have an

11:13.520 --> 11:16.620
organizational structure to it where, much like on the Mac, when it's time to

11:16.620 --> 11:20.680
uninstall an application, you just drag that Docker folder that contains the

11:20.680 --> 11:24.760
application to the trash. Because on the Mac, application... When you

11:24.760 --> 11:28.480
drag an application icon to the applications folder to install it on

11:28.480 --> 11:33.840
the Mac OS X, that isn't a one single icon. That's a bundle file. It's a

11:33.840 --> 11:37.280
directory. You can right click on those and say, show package contents. And

11:37.280 --> 11:41.680
they're full of stuff. But the OS represents it as a single icon. So when

11:41.680 --> 11:44.400
you're dragging that single icon to the applications folder, oh, you're

11:44.400 --> 11:48.840
installing the app. But really, you're moving a folder. It's filled

11:48.840 --> 11:52.200
with files and a directory structure. And when you want to remove it, you just

11:52.200 --> 11:56.000
move that folder, but it looks like an app icon, to the trash. Docker could

11:56.000 --> 11:58.880
implement something similar to that. And in fact, it wouldn't even be reliant on

11:58.880 --> 12:02.660
the Docker guys to do that part. The shell guys could do that part, right?

12:02.660 --> 12:06.440
And when you're talking about working in the user restrictions where

12:06.440 --> 12:09.640
you could say, your sandbox, you can only access my downloads folder, not my

12:09.640 --> 12:12.320
documents folder. Well, that's something that the GNOME guys have already

12:12.320 --> 12:15.480
announced they want to do anyways. Sub user sounds a lot like it's already

12:15.480 --> 12:19.440
accomplishing what they want to do in GNOME with cgroups and whatnot. Which is

12:19.440 --> 12:22.880
a really good part of... It's good security hygiene. That way, you know, if you have

12:22.880 --> 12:26.800
an exploit in Firefox, it can't trample your whole system. It makes a lot of

12:26.800 --> 12:29.960
sense. And as long as you have the right access, you could override those kinds of

12:29.960 --> 12:33.800
things. So I think it's an interesting idea. Thanks for sending that in, Robert.

12:33.800 --> 12:38.360
And if you out there, folks, have experimented with deploying something in

12:38.360 --> 12:41.720
Docker, I would really like to hear that. I would like to hear your success

12:41.720 --> 12:45.480
stories, because I've been thinking about it, too. It does sound very

12:45.480 --> 12:50.480
PBI-like or click package-like. It's very similar to those. A little

12:50.480 --> 12:54.280
more isolated, though. And I think, you know, whereas PBI is

12:54.280 --> 13:00.400
specific to PCBSD and click packages will be specific to Ubuntu, this has the

13:00.400 --> 13:04.000
potential of truly being distribution agnostic. And the reason why I think that

13:04.000 --> 13:08.000
is super important is because that's what it's gonna take to get developers

13:08.000 --> 13:11.520
to be willing to put the effort in to make the application. Because when you tell

13:11.520 --> 13:15.560
them, well, you can make your app and you can easily deploy it on PCBSD or you can

13:15.560 --> 13:21.300
easily deploy it on Ubuntu. Yay! You just got a percentage of the market. Woo! But

13:21.300 --> 13:26.280
if you make a Mac for the app, every single Macintosh out there that has the

13:26.280 --> 13:30.480
hardware specs can run that application. And to a developer, that is a type of

13:30.480 --> 13:33.600
guarantee that justifies the amount of effort involved in making that

13:33.600 --> 13:36.560
application and then distributing it. And if you can't guarantee that for Linux,

13:36.560 --> 13:39.320
you're not gonna bring a bunch of developers over. And I know that makes it

13:39.320 --> 13:42.720
sound like developers are lazy, but guess what? Developers are lazy. Come on, developers, you know it.

13:42.720 --> 13:46.200
Well, it's also time is money. It's like, especially if they're doing this as their

13:46.200 --> 13:49.760
job, it's like there's this weird thing called time and they don't have enough

13:49.760 --> 13:53.120
of it. And so they're like, you know, I could spend time with my family or I

13:53.120 --> 13:56.320
could go and make sure that, you know, that 40-person distro over there has a

13:56.320 --> 13:59.440
package. I mean, you know, it's common sense. And you have the openSUSE build

13:59.440 --> 14:04.040
service, which is tempting to like, hey, upload your files here and we'll handle

14:04.040 --> 14:08.000
all the behind-the-scenes stuff to make it work on every distro. That is awesome

14:08.000 --> 14:12.840
for today's problem, but it really seems like it's a patch to a

14:12.840 --> 14:16.080
bigger problem that should be solved. And this, the thing I like about these Docker

14:16.080 --> 14:19.000
images, I don't even know if it would work, but the thing that what I like about it

14:19.000 --> 14:21.960
is I think a lot of times we've always thought, well, the way to really solve

14:21.960 --> 14:25.120
this is to have a universal package manager across all distributions. That's

14:25.120 --> 14:29.080
never gonna happen. No, it's not. It's a nice idea, but I mean, we can't even come

14:29.080 --> 14:33.480
up with, you know, display server correlation between different distros or

14:33.480 --> 14:37.760
even the back-end system, systemd versus upstart. How the hell are we

14:37.760 --> 14:40.280
gonna do that with packaging? And this is going to be the point of our

14:40.280 --> 14:43.720
talk in a little bit. I mean, it's just about to get worse. Well, speaking of

14:43.720 --> 14:48.280
Docker and companies that love Docker, Vodley writes in, he says, hi Chris and

14:48.280 --> 14:51.280
Dom, but he was actually writing for Coderadio, but I snagged this. I finally

14:51.280 --> 14:55.600
got myself a droplet from DigitalOcean and they're fabulous. I was getting a lot

14:55.600 --> 14:58.520
of latency from the New York droplet since I'm in India, so I was able to

14:58.520 --> 15:02.560
switch to Singapore in no time. Nowhere does anyone ever mention that you get to

15:02.560 --> 15:07.080
actually select the architecture of the DigitalOcean droplet. Since I run

15:07.080 --> 15:12.560
a 32-bit laptop, don't ask, he says, I selected a Ubuntu 64-bit up in

15:12.560 --> 15:16.680
the cloud and I'm cross compiling in the cloud. It's pretty awesome. So I want to

15:16.680 --> 15:20.440
take a minute and thank our sponsor, DigitalOcean. The community out there

15:20.440 --> 15:24.320
has been loving DigitalOcean and if you use the promo code Linux Unplugged March,

15:24.320 --> 15:28.360
you can get a $10 credit and try out that $5 DigitalOcean rig for two months.

15:28.360 --> 15:31.720
What is DigitalOcean? Well, DigitalOcean is simple cloud hosting dedicated to

15:31.720 --> 15:34.880
offering the most intuitive way to spin up a cloud server and they are blowing

15:34.880 --> 15:39.640
up because they are offering that sweet spot of perfect services wrapped in an

15:39.640 --> 15:43.880
awesome to use dashboard and backed by incredible technologies. Users can create

15:43.880 --> 15:47.440
a cloud server in 55 seconds, our community does in about 44 seconds

15:47.440 --> 15:52.280
apparently, and pricing plans start about $5 per month. They get you a 512

15:52.280 --> 15:57.320
megs of RAM, a 20 gigabyte SSD, a CPU and a terabyte of transfer. That's your fixed

15:57.320 --> 16:01.600
cost. You know right there, you're going to be paying $5 a month for that. It's

16:01.600 --> 16:04.520
not like some of these other services out there where they count your actual

16:04.520 --> 16:08.120
usage and your bandwidth transfer and your CPU load and boom, your bill is just

16:08.120 --> 16:12.080
like a different bill every single month. DigitalOcean is a fixed cost that you

16:12.080 --> 16:16.100
can easily quantify and DigitalOcean has data center locations in New York, San

16:16.100 --> 16:20.360
Francisco, Amsterdam and now Singapore. Their interface is simple, it's got an

16:20.360 --> 16:24.120
intuitive control panel and power users can actually replicate the whole thing

16:24.120 --> 16:28.440
with their straightforward API and if you use that promo code Linux Unplugged

16:28.440 --> 16:32.960
March, that's Linux Unplugged March to get that $10 credit. Go over there and

16:32.960 --> 16:38.200
check them out. They built this system on top of awesome, awesome technology. They

16:38.200 --> 16:41.960
call it the SSD only cloud and I was just updating my Arch Dropout that I

16:41.960 --> 16:47.440
have up there yesterday. I was getting from the repo 85 megabytes, yeah 85

16:47.440 --> 16:51.960
megabytes a second while I was doing the update and the SSDs man, they just boom,

16:51.960 --> 16:56.000
they just tear right through that. They have tier 1 bandwidth, 55 second

16:56.000 --> 17:00.440
provisioning, it's all running on top of KVM virtualization, they have amazing

17:00.440 --> 17:04.040
hardware and let me tell you when DigitalOcean started up, committing to

17:04.040 --> 17:09.040
SSDs was a major commitment on their part. It was a huge gamble because back

17:09.040 --> 17:12.160
when they started SSD prices, well they're still high, but back then they were even

17:12.160 --> 17:15.480
higher and people looked at them like they're crazy, but they knew that the

17:15.480 --> 17:19.600
performance difference was worth it. Now DigitalOcean also offers private

17:19.600 --> 17:23.840
networking, so you can go, you can have like a web server front-end with private

17:23.840 --> 17:30.080
database servers on the back-end. I just recently updated my DigitalOcean

17:30.080 --> 17:35.760
Droplet with the Quasl back-end. So Quasl is an IRC client for Linux and it

17:35.760 --> 17:39.720
was so easy to install Quasl on my DigitalOcean VPS and now I'm logged

17:39.720 --> 17:42.920
into the IRC chat room all the time and I can connect from multiple machines on

17:42.920 --> 17:47.460
multiple platforms and I'm all sharing the same session routed through my

17:47.460 --> 17:52.640
DigitalOcean VPS. It took me minutes to set up and it offers me so much value in

17:52.640 --> 17:56.280
terms of my productivity in the chat room that I would pay five dollars a

17:56.280 --> 17:59.640
month just for that feature alone. There's so many things you can do with a

17:59.640 --> 18:03.880
DigitalOcean VPS once you get started, everything from deploying it as the

18:03.880 --> 18:07.880
back-end for your production system. There's major sites that run on DigitalOcean,

18:07.880 --> 18:10.560
huge sites on the net run on DigitalOcean for their production back-end.

18:10.560 --> 18:14.320
You can use it to train yourself. Go up there and get yourself an actual server

18:14.320 --> 18:17.080
that has an imaging system so you can snapshot it before you make a big

18:17.080 --> 18:19.680
mistake. You don't have to worry, if you're worried about security

18:19.680 --> 18:22.880
implications and you want to build a web app and you don't want to open up

18:22.880 --> 18:27.040
ports into your LAN, throw it up on a DigitalOcean VPS and DigitalOcean has

18:27.040 --> 18:31.240
awesome support for Docker. You can build your system locally, you can create your

18:31.240 --> 18:34.000
app locally in a Docker image and then publish it up on DigitalOcean. They have

18:34.000 --> 18:38.760
one-click install. DigitalOcean has open-source Dooku, which is their

18:38.760 --> 18:42.080
application deployment system using Docker. So they're involved in the

18:42.080 --> 18:45.520
open-source community, they're using KVM, they're using Linux on the back-end that

18:45.520 --> 18:49.920
you choose between Fedora, CentOS, Ubuntu, Arch. I mean they're an awesome service

18:49.920 --> 18:53.240
and you can get it for five dollars a month and for two months free when you

18:53.240 --> 18:57.200
use our promo code LINUXUNPLUGGEDMARCH. So go over to DigitalOcean.com

18:57.200 --> 19:01.920
LINUXUNPLUGGEDMARCH and a big thank you to DigitalOcean for sponsoring Linux

19:01.920 --> 19:08.680
Unplugged. I love my VPS, Matt. Alright, well changing gears from follow-up to

19:08.680 --> 19:12.880
kind of FYI, Josh writes and he says, hey guys, I found out about a free course

19:12.880 --> 19:16.520
EDX is offering in conjunction with the Linux Foundation a couple weeks ago and

19:16.520 --> 19:19.780
I know this will be the best possible place to get the word out so check it

19:19.780 --> 19:23.040
out. This would be great for the viewer and this would be great for a viewer

19:23.040 --> 19:26.760
that are in going into college next year like me. He says he loves the show, he's a

19:26.760 --> 19:29.600
weekly listener to TechSnapCoderRadio and the Linux shows and I don't know if you

19:29.600 --> 19:32.840
heard about this, Matt, but it's yeah it's a course from EDX who makes online

19:32.840 --> 19:36.400
training and Josh wanted to kind of put this in front of us. I had seen this and

19:36.400 --> 19:39.040
I kind of thought we would cover it once too because I don't know if it's actually

19:39.040 --> 19:42.200
available yet and I thought that's when we'd cover it but I just I kind of wanted

19:42.200 --> 19:45.520
to give people a heads up because it's an introduction course to Linux. Develop a

19:45.520 --> 19:48.240
good working knowledge of Linux using both the graphical interface and

19:48.240 --> 19:52.720
command-line covering the major Linux distribution families. You know what this

19:52.720 --> 19:57.880
used to be like a $2,100 course that's now free so I go take it. Man yeah

19:57.880 --> 20:00.680
holy cow that's a great savings. Yeah I'll put a link to that in the show

20:00.680 --> 20:06.840
notes and the class starts Q3 of 2014 so I you know what I thought about it

20:06.840 --> 20:08.760
because I was going to just cover it when it launched but I was like we might

20:08.760 --> 20:11.680
need to give people a heads up so they can go register so I'll put a link to

20:11.680 --> 20:16.440
that in the show notes if you guys want to register it's a $2,100 value so why

20:16.440 --> 20:20.080
not? Yeah right and it's kind of a no-brainer in its education. It sometimes is

20:20.080 --> 20:23.720
good to relearn some of the basics too. I think that can actually be really

20:23.720 --> 20:30.000
beneficial because if you if you're self-taught I took I can't remember what

20:30.000 --> 20:33.480
the course was called but I went to a one of our local community colleges and

20:33.480 --> 20:38.920
I took a course on sort of the basics of Linux and why the like I'd say 80% of it

20:38.920 --> 20:43.920
was this was years ago but 80% of it was sort of repeat it was good to see how

20:43.920 --> 20:48.000
other people use the tools and and kind of see like the intended implementation

20:48.000 --> 20:51.480
of those tools not the ones I taught myself so if you're kind of in that camp

20:51.480 --> 20:55.160
you might want to check it out it it's a good course and I think it's really cool

20:55.160 --> 20:57.400
they're making available and props to the Linux Foundation I'm not sure if

20:57.400 --> 20:59.760
they paid them for it or if they're just working with them but either way it's

20:59.760 --> 21:03.880
pretty cool. Well however it came about I mean that's a that's a big deal. Yeah so

21:03.880 --> 21:10.640
last last last last last in the past last last last on Sunday well maybe

21:10.640 --> 21:13.520
that's a better way to put it last Sunday we asked hey should hey guys

21:13.520 --> 21:16.840
should we drop should we drop the seasons what do you think you know like

21:16.840 --> 21:24.080
we last last week's last week's episode was season 31 episode 4 I think 5

21:24.080 --> 21:27.640
episode 5 and I can never remember the seasons Matt can never remember the

21:27.640 --> 21:31.120
seasons. And honestly the seasons came about back when we used to take

21:31.120 --> 21:34.000
breaks every 10 episodes which we realized didn't really work very well so

21:34.000 --> 21:37.000
we put out a poll and we embedded this poll in the show notes we made it

21:37.000 --> 21:40.680
available to the to the live stream should hey should we drop seasons in the

21:40.680 --> 21:43.520
Linux action show and just call it the production number so example last week's

21:43.520 --> 21:52.000
episode would be episode 305. 81% of the votes say drop the season number. Only

21:52.000 --> 21:57.880
19% of the votes say keep the season thing out of a total of 608 votes. I mean

21:57.880 --> 22:02.600
it seems like drop the season thing is just a runaway winner. It seems like it

22:02.600 --> 22:07.640
but that seems to have changed from previous inquiries. Yeah big time big big

22:07.640 --> 22:13.120
time I mean in the past this was almost it was reversed it was keep the seasons

22:13.120 --> 22:17.840
part of the I mean it's part of the show's legacy is what I was told and I'm

22:17.840 --> 22:21.560
you know I'm all for I was just worried about making the backlog confusing but

22:21.560 --> 22:25.440
I don't know maybe we'll do like a couple of weeks of transition or

22:25.440 --> 22:28.720
something so that way when people are watching the backlog they'll catch up on

22:28.720 --> 22:34.280
it I'm not quite sure but we'll link this poll if you are I don't know I mean

22:34.280 --> 22:36.680
I think at this time I think there's no pulling it out I think starting next

22:36.680 --> 22:39.580
last I don't know we'll just make the announcement and sort of phase it in I

22:39.580 --> 22:44.840
guess. I think so and I think you know we can we can transition by continuing to

22:44.840 --> 22:51.480
keep the seasons in the text portion like on YouTube and on the show page. I don't know though, see people have suggested that. Does that become confusing?

22:51.480 --> 22:56.200
Well I'll tell you what because part of this I'm being completely selfish here

22:56.200 --> 23:00.040
as part of this is I have a hard time keeping track of it and so I have to

23:00.040 --> 23:04.000
keep keeping track of it if we keep doing that and the other thing is is

23:04.000 --> 23:09.160
it's so long all spelled out that it wraps or gets cut off like on YouTube or

23:09.160 --> 23:12.640
on oh yeah so it'd be kind of nice just to drop it from the way it looks and so

23:12.640 --> 23:16.000
one of the areas I one of I know this is a dumb reason but one of the reasons I

23:16.000 --> 23:20.480
most want to drop the season thing is I hate how it looks on our website it's a

23:20.480 --> 23:24.520
visual thing and so that's kind of like it's the worst of both worlds for me

23:24.520 --> 23:27.440
because I have to keep track of the season thing if we go that way and I

23:27.440 --> 23:30.400
have to continue updating the website with it printed out like that which I

23:30.400 --> 23:33.160
don't like either I know it would be really convenient but that's kind of

23:33.160 --> 23:35.720
like why I brought this up again because that's just that's an old that's an old

23:35.720 --> 23:38.080
thing for me that's just bugged me for years and every time I'm posting the

23:38.080 --> 23:42.640
show I think of it it's like it just gnaws at me so I don't know it's such a

23:42.640 --> 23:46.240
clear decisive vote and you know what somebody in the chat room pointed out is

23:46.240 --> 23:50.320
perhaps the reason why in the past if people voted differently is maybe they

23:50.320 --> 23:52.920
didn't listen to as many podcasts and now they listen to more podcasts and all

23:52.920 --> 23:57.440
the other podcasts are doing numbers when we came up when we came up with the

23:57.440 --> 24:01.480
season thing there weren't a lot of there weren't a lot of examples to look

24:01.480 --> 24:05.160
to on how you should number your shows and we've been it's been going on for

24:05.160 --> 24:08.640
like seven eight years now right so like when we came up with that shenanigans

24:08.640 --> 24:12.800
we didn't have a lot of models to template after and I think now it's it's

24:12.800 --> 24:16.440
a foreign thing it's odd it's weird like people people I think it's one of the

24:16.440 --> 24:20.200
things when you first find the show is a little confusing to follow and it's even

24:20.200 --> 24:23.080
gonna be more confusing and once we switch to the numbers and it's even more

24:23.080 --> 24:26.000
confusing because earlier on it was all numbers and then we went to season then

24:26.000 --> 24:32.040
we're going back to numbers but at at at 81% of the vote I think the people have

24:32.040 --> 24:37.120
spoken well and see for me most of the stuff these days I'm following it on

24:37.120 --> 24:41.520
YouTube just because it's I you know I haven't used a podcatcher in a while it

24:41.520 --> 24:46.000
just it's kind of how I've progressed over and I honestly don't care I mean so

24:46.000 --> 24:49.440
for other shows I don't care what number it is I either have heard this episode or

24:49.440 --> 24:53.360
I haven't hey the top the subject is blank oh hey that's new I'll listen to

24:53.360 --> 24:56.320
it yeah like oh hey that's not new you know the chair was also making some

24:56.320 --> 24:59.600
great points a all our other shows on the network are number based not season

24:59.600 --> 25:02.840
based and Rekind points out that if you think about it it's ten episodes anyway

25:02.840 --> 25:05.760
so you can get the seasons from the episode number so you can figure it out

25:05.760 --> 25:09.160
pretty quick and flash update cheese bacon says that course still costs 250

25:09.160 --> 25:13.000
bucks when you put when you drop it down from 2,500 whatever was it's still a

25:13.000 --> 25:18.120
great value so put that's all have that straw poll in the show notes you have a

25:18.120 --> 25:23.520
few more days to vote but you know if honestly at this point if that if that

25:23.520 --> 25:29.160
keep the season thing creeped up I would just assume it's bots yeah I think it's

25:29.160 --> 25:33.960
done but I in fairness of letting people get their chance to vote it will be in

25:33.960 --> 25:36.920
there because I got a note from somebody who said I didn't really wasn't quite

25:36.920 --> 25:40.800
clear on where I should go to vote and I want to cast my vote so I will put it in

25:40.800 --> 25:43.960
this week's show notes as well links to everything we talk about guys they're

25:43.960 --> 25:47.440
almost always in the show notes we just make it easy that way for you and it's

25:47.440 --> 25:51.160
you just go to Jupiter broadcasting comm you click on the episode you listen to

25:51.160 --> 25:55.560
and scroll down past the download links and I think this is the part that throws

25:55.560 --> 25:58.800
people off is they see the show description and they see the download

25:58.800 --> 26:01.880
links and they think that's the show notes but if you keep scrolling your

26:01.880 --> 26:04.440
page down you'll see links to everything we talked about and

26:04.440 --> 26:09.200
essentially in order that we covered them okay another update the course will

26:09.200 --> 26:12.160
be free when it launches so it's if you want to take the course right now it's

26:12.160 --> 26:17.880
just a discount okay very good lunches whatever yeah why not right okay so I

26:17.880 --> 26:21.480
want to I want to clear some room so we can get into this display server debate

26:21.480 --> 26:25.560
before we do that I want to thank Ting now Ting is mobile that makes sense my

26:25.560 --> 26:28.880
mobile service provider and Matt's mobile service provider Matt I got a I

26:28.880 --> 26:33.420
got a note from Ting saying they they got your banana activated but it's not

26:33.420 --> 26:38.240
gonna be able to do picture messaging so no picture messaging because turns out

26:38.240 --> 26:41.760
banana doesn't have a camera oh my god who'd have thought right I know thought

26:41.760 --> 26:45.000
who would have fortunately the other phone does so right right so go to

26:45.000 --> 26:48.200
linux.ting.com that's where you get started that'll take you to Ting's

26:48.200 --> 26:52.720
website Ting has some really unique approaches to the mobile industry that

26:52.720 --> 26:56.760
this is why I'm a Ting subscriber right here is because I think Ting is gonna

26:56.760 --> 27:00.760
pressure a lot of companies into changing their behavior and we know

27:00.760 --> 27:05.920
that needs to happen no contract no early termination fee and you only pay

27:05.920 --> 27:10.080
for what you use each line is six dollars flat so you get a phone you're

27:10.080 --> 27:14.800
paying six dollars for that phone per month plus taxes and then your usage

27:14.800 --> 27:18.800
it's straightforward I have a couple of phones right now on my Ting account and

27:18.800 --> 27:22.480
it's still cheaper than when I had one phone on one of the other carriers it's

27:22.480 --> 27:25.920
unbelievable they have a savings calculator you can try it out you can go

27:25.920 --> 27:29.800
over there and see what you would say by switching to Ting and if you're in a

27:29.800 --> 27:32.240
contract right now they have an early termination relief program they'll pay

27:32.240 --> 27:36.840
up to $75 per line that you have to get canceled there's some new phones that

27:36.840 --> 27:40.040
have just been announced so keep an eye out on the Ting blog because I think

27:40.040 --> 27:44.840
you'll see an update about those soon and Ting one of the reasons Ting is able

27:44.840 --> 27:48.160
to offer rates as low as they do and focus on the customer experience and

27:48.160 --> 27:51.560
focus on the devices in fact I just recently watched a video with one of

27:51.560 --> 27:55.200
their executives and he said you know for us it comes down to two things that

27:55.200 --> 28:01.040
we're really focused on right now one is devices and two is coverage and if you

28:01.040 --> 28:05.640
haven't checked out the Ting service in a while it might be worth reevaluating

28:05.640 --> 28:09.240
it they're writing on the sprint network and sprint has this program that they've

28:09.240 --> 28:13.880
implemented starting in 2013 it's still going on it's called the sprint network

28:13.880 --> 28:17.960
vision and you can google this and it is sprints plan to consolidate multiple

28:17.960 --> 28:21.000
network technologies into one new seamless network with a goal of

28:21.000 --> 28:25.080
increasing efficiency and enhancing network coverage and as of March 17th

28:25.080 --> 28:31.280
they now provide LTE service in 402 markets nationwide such as Atlanta

28:31.280 --> 28:35.640
Boston Dallas Houston Los Angeles Manhattan Milwaukee Queens Salt Lake

28:35.640 --> 28:41.240
City San Diego right here in the Pacific Northwest I've got awesome LTE up at the

28:41.240 --> 28:45.660
new studio and we're talking tri-band LTE to the good stuff the multi-band

28:45.660 --> 28:50.720
stuff so you've got lots of good signal to work with sprint wants to make 2014

28:50.720 --> 28:55.680
the year that everybody's opinion changes and the thing is is Ting is just

28:55.680 --> 28:58.960
gonna benefit from this immensely because they already have got the

28:58.960 --> 29:04.400
customer service and completely dialed in if you call them at 1 8 5 5 8 4 6 4

29:04.400 --> 29:10.760
3 8 9 that's 1 8 5 5 Ting FTW anytime between 8 p.m. and 8 a.m. Eastern like so

29:10.760 --> 29:15.200
right now if you called Ting's customer support a real person answers the phone

29:15.200 --> 29:19.360
like an actual human being who's gonna solve your problem and let me tell you

29:19.360 --> 29:23.000
something I have been dealing with contractors and companies of

29:23.000 --> 29:27.200
contractors and banks building this new studio I have been on hold and going

29:27.200 --> 29:31.840
through phone trees more than I have in years combined I am so appreciative that

29:31.840 --> 29:35.320
if I ever have an issue with my Ting service I can reach an actual person

29:35.320 --> 29:39.560
right away because my time is valuable I have deadlines myself I don't want to

29:39.560 --> 29:43.280
wait on these companies that I am paying and Ting understands that they can focus

29:43.280 --> 29:46.840
on the customer service they can focus on the device when you buy a device from

29:46.840 --> 29:50.960
Ting you own that device just like you want to own your laptop just like you

29:50.960 --> 29:54.520
want to own your desktop you wouldn't want to pay in a two-year contract where

29:54.520 --> 29:58.040
you're spreading the cost of your laptop out and you don't actually own the

29:58.040 --> 30:01.320
device until the ends of that two-year contract where you just have to re up

30:01.320 --> 30:05.200
anyways it's a system that is designed to extract as much money out of you as

30:05.200 --> 30:10.040
possible and it is a system that artificially hides the actual cost of

30:10.040 --> 30:14.480
these devices it's BS and Ting is trying to change all of that and you can help

30:14.480 --> 30:18.440
take part of that by going to linux.ting.com where they will take $25 off

30:18.440 --> 30:22.960
your first month of service or $25 off your first device go check out that

30:22.960 --> 30:26.920
control panel go check out those devices go check out that savings calculator go

30:26.920 --> 30:29.800
look at their blog for those device updates which you will see very soon

30:29.800 --> 30:35.000
linux.ting.com was where you get started and a big thank you to Ting for

30:35.000 --> 30:39.240
sponsoring Linux Unplugged they got some great videos on that blog right now they

30:39.240 --> 30:42.400
have some app pick videos they got an interview with one of their executives

30:42.400 --> 30:47.440
and they have a they have a giveaway of a Nexus 5 and $400 of Ting credit which

30:47.440 --> 30:51.800
wraps up on March 28th you can find out about all of that over at ting.com

30:51.800 --> 30:55.960
slash blog get started by going to linux.ting.com so that way they know you

30:55.960 --> 30:59.240
heard about it right here on Linux Unplugged and a big thank you to Ting

30:59.240 --> 31:06.880
for sponsoring Linux Unplugged love it okay so we talked with Kevin and I felt

31:06.880 --> 31:13.480
like we got you know a good a good look into where the where the where the where

31:13.480 --> 31:18.840
the mirror team is coming from pretty pretty quickly after that Martin who is

31:18.840 --> 31:23.800
the developer of Kaywin went to his block and said wait a minute wait a

31:23.800 --> 31:28.720
minute hold on guys the display server matters in a really big way he said I

31:28.720 --> 31:33.040
don't know how to put this but the best description is I am shocked I am shocked

31:33.040 --> 31:37.280
the canonical is still not seeing the problems they caused by introducing multiple

31:37.280 --> 31:43.400
display servers he has a great post it's pretty long he documents technically why

31:43.400 --> 31:47.720
you can't rely on the toolkit to interface with the display server he

31:47.720 --> 31:52.320
uses a screenshot application as a great example he's actually got code cited in

31:52.320 --> 31:57.200
his blog post he's totally worth checking out because it from a technical

31:57.200 --> 31:59.840
standpoint if this has been something you've been kicking around and you

31:59.840 --> 32:04.040
really want to see like the proof in the pudding that's a good post but I think

32:04.040 --> 32:09.880
I'll just focus on how he wraps he wraps this blog post by saying in summary

32:09.880 --> 32:13.200
canonical created a huge problem by introducing another display server and

32:13.200 --> 32:17.440
it's affecting all of us and they still are in a denial state it's not a simple

32:17.440 --> 32:22.000
it's not it's not as simple it's not as simple as the toolkit will solve it it

32:22.000 --> 32:24.800
can cause issues everywhere and that affects the development and maintenance

32:24.800 --> 32:29.000
cost of all applications my recommendation to application developers

32:29.000 --> 32:33.720
is to never accept patches for this mess canonical created if they want that

32:33.720 --> 32:38.760
fixed they should do it in their own downstream patches distro specific

32:38.760 --> 32:42.040
problems need to be fixed in the distros I certainly will not accept

32:42.040 --> 32:45.760
patches for frameworks and applications I maintain this is not for political

32:45.760 --> 32:49.640
reasons that is often claimed but for technical ones because I cannot test

32:49.640 --> 32:53.480
patches mirror is not available on Debian and our CI system cannot build

32:53.480 --> 32:57.120
them which is their continuous integration system so he's making a

32:57.120 --> 33:01.760
technical argument here saying look I'm not able to test these properly it's

33:01.760 --> 33:05.760
their responsibility and I think it's disingenuous for them to downplay the

33:05.760 --> 33:10.400
importance of the display server okay you know the way I see it is I

33:10.400 --> 33:12.880
completely agree with the you know he shouldn't have to deal with the patches

33:12.880 --> 33:16.240
and all that I you know hey if you don't want to participate don't you know if I

33:16.240 --> 33:19.200
from a developer point of view I think that makes perfect sense it's like look

33:19.200 --> 33:23.000
you know I'm not gonna even participate in that mess good luck but I'm not doing

33:23.000 --> 33:26.840
it that's that's the right approach has it or will it create problems I don't

33:26.840 --> 33:30.280
think we're there yet I think I think we're definitely speculating but I think

33:30.280 --> 33:34.760
he's got some great points so definitely think you know I agree and I but here's

33:34.760 --> 33:39.720
where I here's where my opinion has begun to diverge from that position that

33:39.720 --> 33:42.320
I have pretty much held since the announcement of mirror because that's

33:42.320 --> 33:45.680
essentially what you just said summarizes my outlook on this whole

33:45.680 --> 33:50.360
thing my a general approach to covering both sides of this debate right I think

33:50.360 --> 33:54.740
you know after talking with canonical after reading these posts after going on

33:54.740 --> 34:01.320
my rainy walk which is now sunny out go figure I've come down much much harder

34:01.320 --> 34:07.520
on this issue and all credit really goes to Aaron Saigo who who created I mean

34:07.520 --> 34:11.400
Martin and Aaron man they tag-team this stuff right and so Aaron comes out with

34:11.400 --> 34:17.080
a sort of a response to Martin's response and he said Martin's response

34:17.080 --> 34:19.800
demonstrates how many application developers will end up having to care

34:19.800 --> 34:23.240
about this kind of thing he made a convincing argument and yet he only

34:23.240 --> 34:26.800
touched on a few examples like the screenshot application but many more

34:26.800 --> 34:31.120
could be added such as using an on-screen display or the OSD as like

34:31.120 --> 34:33.920
what like Clementine does when you change the track and it'll have an on

34:33.920 --> 34:39.680
you know a pop-up of this track is now playing these kind of things like that

34:39.680 --> 34:42.560
like those types of on-screen displays and applications with screen capture

34:42.560 --> 34:46.440
features such as case snapshot or the GIMP these kinds of things are not

34:46.440 --> 34:50.240
generally provided by the toolkits themselves and require interacting with

34:50.240 --> 34:53.160
the display server so anybody who's making those apps can't rely on the

34:53.160 --> 34:57.560
toolkit the OSD use case is quite a little illuminating Aaron says future

34:57.560 --> 35:01.680
versions of plasma will provide a DBUS service that can be used for simple OSD

35:01.680 --> 35:04.880
needs like changing the volume and application getting an on-screen

35:04.880 --> 35:09.160
indication of the volume level I expect in time the services will grow features

35:09.160 --> 35:13.040
to support more sophisticated on-screen display patterns as this will not only

35:13.040 --> 35:16.320
increase desktop integration but provide a way to work around security

35:16.320 --> 35:20.480
restrictions to place systems like Wayland and mirror in force but what happens

35:20.480 --> 35:25.440
when this magical new beat DBUS service doesn't exist like it might not on a

35:25.440 --> 35:30.920
unity desktop here's another example status notifiers or perhaps called app

35:30.920 --> 35:35.640
indicators on Ubuntu this is a DBUS service and it's not available anywhere

35:35.640 --> 35:40.880
the answer until now has been to fall back to legacy x11 specific X embed

35:40.880 --> 35:46.000
method when you don't find the back-end system you need does this affect users

35:46.000 --> 35:49.280
these kinds of things the increase in development burden will will mean users

35:49.280 --> 35:52.120
of certain display systems will experience degraded performance and

35:52.120 --> 35:55.120
features in application application development will slow down as

35:55.120 --> 35:58.240
developers come to grips with the diversity and in turn quality will

35:58.240 --> 36:01.920
suffer as it tends to with multiple code paths when they're not easily tested in

36:01.920 --> 36:06.840
parallel let's let's stop talking about the future for a second and let's talk

36:06.840 --> 36:11.280
about something I think most desktop Linux users who bounce around desktop

36:11.280 --> 36:15.560
environments have experienced you you ever seen this problem at where like you

36:15.560 --> 36:18.920
got it you got an application and it has like a little system tray icon and

36:18.920 --> 36:25.440
maybe that particular developer decided I don't want to implement the the app

36:25.440 --> 36:29.240
indicator support for Ubuntu so when you're in Ubuntu unity desktop you don't

36:29.240 --> 36:32.360
get an icon up in the right hand corner but when you're in KDE you do get the

36:32.360 --> 36:35.400
icon and no maybe it's hit and miss you know you've seen this kind of thing

36:35.400 --> 36:39.040
right oh absolutely absolutely and it's something I've definitely experienced

36:39.040 --> 36:43.800
but it also colors based on the the level of difficulty which direction I'm

36:43.800 --> 36:48.000
going to go through sure because I've certainly had that experience both in

36:48.000 --> 36:53.460
unity and KDE less than no but yeah it's you know certainly certainly happened

36:53.460 --> 36:56.660
sure and see I feel like I've had more success and like almost all of the

36:56.660 --> 37:01.040
little tray icon show up in KDE it's totally hit and miss in unity and no

37:01.040 --> 37:05.040
one's gotten a lot better about it but it's still hitting miss and no and this

37:05.040 --> 37:10.240
itty bitty tiny bit of fragmentation was introduced when a couple of different

37:10.240 --> 37:13.520
desktops decided to implement or really one desktop decided to implement

37:13.520 --> 37:17.480
app indicators differently than the other desktops and even today years

37:17.480 --> 37:22.760
later we still get that wrong and let's let's be clear for what it is it looks

37:22.760 --> 37:28.360
like amateur hour it looks pathetic it's something that the Mac OS or Chrome OS

37:28.360 --> 37:32.440
or Windows would never get wrong and does not ever get wrong it looks

37:32.440 --> 37:35.560
ridiculous and I think we have to be clear when we're having this

37:35.560 --> 37:41.040
conversation that this type of little itty bitty fragmentation has much wider

37:41.040 --> 37:45.720
ramifications and how people appreciate and experience a desktop and this as I'm

37:45.720 --> 37:48.720
going to use this example because it's something we can all relate to and then

37:48.720 --> 37:51.160
we're going to look at the larger ramifications of the fragmentation at

37:51.160 --> 37:54.240
the display server level but what I want us all to think about as we are moving

37:54.240 --> 37:58.640
forward in this conversation is look at the future directory of Linux desktop

37:58.640 --> 38:02.440
Linux quote-unquote desktop Linux competition because it's not Windows it

38:02.440 --> 38:06.240
might be Windows today it might be Windows for the next few years but five

38:06.240 --> 38:10.760
ten years down the road on the high end it's Mac OS 10 on the low end it's

38:10.760 --> 38:15.720
Chrome OS and Android and those desktops would never be caught dead with that

38:15.720 --> 38:19.880
kind of amateur our implementation that was not going to happen and that is our

38:19.880 --> 38:23.120
competition if you look at the forward directory of the trajectory of the

38:23.120 --> 38:26.680
desktop market that's who we're competing against and those platforms

38:26.680 --> 38:31.800
specifically Android Chrome OS and Mac OS 10 already have a worldwide

38:31.800 --> 38:36.520
distribution system with massive amounts of momentum behind them they have stores

38:36.520 --> 38:41.240
in almost every country around the world you can order online they have a brand

38:41.240 --> 38:44.520
image around them and that's what future Linux is going to be competing with

38:44.520 --> 38:48.300
that's what we're competing with and we are not even bringing our a game we're

38:48.300 --> 38:51.920
not even we're not even doing a very good job with our current setup and now

38:51.920 --> 38:56.280
we're about to introduce fragmentation at the core level of the desktop that we

38:56.280 --> 39:02.240
have a never had fragmentation before and B are fundamentally under resourced to

39:02.240 --> 39:06.360
properly develop it as it is the X team already split to have one team work on

39:06.360 --> 39:11.000
x11 and one term one team work on Wayland we'll think about this what if

39:11.000 --> 39:15.120
Ubuntu had in some parallel universe had decided to go with Wayland that would

39:15.120 --> 39:19.320
mean millions of more users banging on Wayland that would mean more bug fixes

39:19.320 --> 39:23.080
more refinement at a higher pace to Wayland making that core part of the

39:23.080 --> 39:26.960
Linux desktop experience more refined more tested more performant all of these

39:26.960 --> 39:29.760
things that matter especially as game developers are moving over to Linux but

39:29.760 --> 39:32.640
instead we are splitting our resource we are splitting our attention we are

39:32.640 --> 39:35.840
splitting our testing we're splitting our development time and at the same

39:35.840 --> 39:38.960
time we introducing all kinds of fragmentations that developers are gonna

39:38.960 --> 39:42.480
have to account for because here's how humans work right you're gonna have your

39:42.480 --> 39:45.320
distribution you're gonna develop on that it's either gonna be a Wayland

39:45.320 --> 39:48.680
based distribution or a mirror based distribution and whatever it is that's

39:48.680 --> 39:51.440
the one you're gonna properly test on because that's the one you use and

39:51.440 --> 39:54.280
that's the one that the features are gonna work correctly on when I go to

39:54.280 --> 39:58.520
the next track in Clementine whichever distro display server the Clementine

39:58.520 --> 40:01.880
developer is using for that's the one I need to use if I want the next track on

40:01.880 --> 40:06.800
screen notification and that's even more amateur hour we are introducing a level

40:06.800 --> 40:10.160
of fragmentation at the core of Linux that will mean that applications are

40:10.160 --> 40:13.640
even more hit and miss now and what they feature does this application have a

40:13.640 --> 40:16.460
screenshot button maybe it does maybe it doesn't depends on what desktop you're

40:16.460 --> 40:19.440
on do you get an on-screen display maybe you do maybe you don't and here's

40:19.440 --> 40:22.520
another reason why you need to care because if you only want to use unity

40:22.520 --> 40:25.400
for the rest of your life then mirrors gonna work great for you but if you ever

40:25.400 --> 40:27.960
want to use Ubuntu with another distribution well you better learn how

40:27.960 --> 40:31.320
to install Wayland you better figure out you're gonna this is gonna be a

40:31.320 --> 40:35.400
explosion in blog posts and how to load Wayland on Ubuntu desktops because

40:35.400 --> 40:39.480
everybody out there that wants to use anything but unity ever is gonna need to

40:39.480 --> 40:42.920
learn how to install Wayland on their Ubuntu machine and that's another reason

40:42.920 --> 40:48.000
why you should care the reasons stack up and this these very issues these these

40:48.000 --> 40:51.840
fundamental issues are exactly the kind of thing that affect users so why I might

40:51.840 --> 40:55.240
not care if it's Mira Wayland I sure as hell care if my application doesn't work

40:55.240 --> 40:58.360
correctly I sure as hell care if I have to spend an hour figuring out install

40:58.360 --> 41:02.960
Wayland on my Ubuntu install so that way I can try out gnome 3 whatever it's it

41:02.960 --> 41:07.920
does absolutely affect users it fundamentally affects users I think it

41:07.920 --> 41:12.320
also slows down adoption in a very serious way because I think over time

41:12.320 --> 41:15.280
yeah and that's that's the piece that I see the bigger because at the end of the

41:15.280 --> 41:19.440
day granted I fall back to my old the market will sort it out and it will but

41:19.440 --> 41:22.440
we shouldn't have to sort it out in the first place I mean that's the big piece

41:22.440 --> 41:26.580
of it right theorists that work spending unneeded time sorting this out when it

41:26.580 --> 41:30.760
shouldn't have been an issue in the first place of all sorted but it's gonna

41:30.760 --> 41:33.760
be like a ten-year process developers are always like all Linux is too

41:33.760 --> 41:37.380
fragmented I don't know what I should target this just changes the equation

41:37.380 --> 41:43.480
even more you look at how 3d games capture the mouse pointer that's gonna

41:43.480 --> 41:47.520
be different between desktops or display environments if that's gonna game

41:47.520 --> 41:51.080
developers are gonna have to think about this kind of stuff and the other thing

41:51.080 --> 41:54.120
is I you know from my old contracting background and Aaron touches on this in

41:54.120 --> 41:57.440
his post and I thought it was really well done he says think about it from an

41:57.440 --> 42:02.640
IT support perspective right you already get people like what I I had several

42:02.640 --> 42:06.360
clients that had Linux on the desktop and you know the question of the

42:06.360 --> 42:09.160
problems would always arise if they one person was on one distro and another

42:09.160 --> 42:12.400
person was another distro one person to have something work another person

42:12.400 --> 42:15.800
wouldn't and then it would be oh well you need the build utils well what's

42:15.800 --> 42:19.120
that called on fedora what's that called on Ubuntu I mean it's already the

42:19.120 --> 42:23.120
diversity that we have there while in some ways in strengthens and empowers

42:23.120 --> 42:27.360
Linux it also from a support standpoint is already too complicated well that's

42:27.360 --> 42:29.840
what's just gonna happen when the display server changes currently as

42:29.840 --> 42:34.200
Aaron writes guides and manuals covering Linux can assume that X org is running

42:34.200 --> 42:38.120
and other troubleshooting tips with that assumption can be in place this is also

42:38.120 --> 42:42.000
one reason why the Linux world is standardizing on system D is such a good

42:42.000 --> 42:46.320
thing support will become easier when we don't have to ask are you using system

42:46.320 --> 42:50.560
with system 5 in it system 7 in it system D right start you just have to

42:50.560 --> 42:53.800
start troubleshooting at that level multiple display systems will produce a

42:53.800 --> 42:57.920
similar result in commercial settings this also translates to more cost

42:57.920 --> 43:01.480
particularly to companies who provide professional IT support for companies

43:01.480 --> 43:05.640
running desktop systems does this matter to users well it means less clear

43:05.640 --> 43:09.720
documentation more difficult support for Linux and higher commercial support

43:09.720 --> 43:14.720
costs so yes I would argue that matters to users and man did that resonate with

43:14.720 --> 43:19.780
me because I have been I have watched Linux go from the ha ha ha joke when I

43:19.780 --> 43:23.440
recommend it to yeah let's implement Linux right and I I have been

43:23.440 --> 43:27.200
advocating the deployment of Linux and businesses for years and I was already

43:27.200 --> 43:31.200
feeling the pushback from like that my doctor clients all wanted max and all my

43:31.200 --> 43:36.120
doctors wanted to get max and I really it is you know as soon as that support

43:36.120 --> 43:39.840
argument is brought up my arguments are clearly deflated because how do you

43:39.840 --> 43:43.920
compete with Apple stores everywhere how do you compete with a you know a

43:43.920 --> 43:47.640
warranty in writing and a system that's honestly less of a moving target it's

43:47.640 --> 43:51.840
really hard to fight against that yep it's a unified experience that I don't

43:51.840 --> 43:55.600
even if we go system D we go way and we go the whole thing we still don't have a

43:55.600 --> 43:59.920
unified experience we don't yeah at any level and it's happening here that it's

43:59.920 --> 44:03.120
happening at a time where we could be coalescing around Wayland we could be

44:03.120 --> 44:06.560
coalescing around system D right and these are major coalitions that could be

44:06.560 --> 44:10.920
happening and exact and he says they get yeah go ahead I was gonna say if they

44:10.920 --> 44:14.760
get those two and they get the packaging figured out you know Bob's your uncle

44:14.760 --> 44:18.960
you're good doubt those three things together would do wonders he Aaron

44:18.960 --> 44:22.360
points out you know this matters to display systems one thing free software

44:22.360 --> 44:25.960
does not have is enough of its graphic developers with X org there were exactly

44:25.960 --> 44:29.320
one place you could contribute to if you wanted to push for the display stack on

44:29.320 --> 44:33.120
a free software operating system such as Linux then Mir came along and introduced

44:33.120 --> 44:36.860
a split in the developer community which means fewer human resources applied to a

44:36.860 --> 44:41.160
topic that really needs every single pair of hands we have instead of one

44:41.160 --> 44:44.400
system that as good as we can make it we'll end up with a slower development

44:44.400 --> 44:48.920
of two systems with the risk of more of them being less than great and I think

44:48.920 --> 44:52.440
this part could be argued because you could say good competition spurs good

44:52.440 --> 44:56.640
innovation but at the same time if you know if you're familiar with the with

44:56.640 --> 45:00.880
the core X development you know how bad that situation is and how much we do

45:00.880 --> 45:05.040
need all hands on deck for that kind of thing and you know Aaron points that

45:05.040 --> 45:08.380
this is obviously no minor task mirror was originally promised to be the

45:08.380 --> 45:13.360
display system of choice and desktop Ubuntu in 2013 10 then it was pushed

45:13.360 --> 45:18.480
back to 2014 04 and now it's pushed out to 2016 04 this is not a trivial sort of

45:18.480 --> 45:23.000
project and making it harder by limiting human resources available is unwise and

45:23.000 --> 45:27.600
I think what we fall back on too often and I think something we can chant

45:27.600 --> 45:31.520
there's a couple of things we chant a lot in the Linux community well yeah

45:31.520 --> 45:34.720
maybe Katie isn't making you happy but you know what it's great cuz you got

45:34.720 --> 45:38.560
choice well that choice is not all that great if none of the choices are awesome

45:38.560 --> 45:43.480
so but you know Saigo says he's hopeful he says I do hold out hope the free

45:43.480 --> 45:46.640
software community is speaking with a singular voice and that voice is saying

45:46.640 --> 45:50.760
after X it's Wayland Wayland itself is still being worked on and has reached a

45:50.760 --> 45:53.840
level of maturity that allows real-world use several of the major

45:53.840 --> 45:57.920
desktop products are well on their way of supporting it as a first-class option

45:57.920 --> 46:01.900
including plasma by KD gnome shell and enlightenment all the major toolkits

46:01.900 --> 46:04.560
upstream have support for Wayland today and Wayland has the broadest driver

46:04.560 --> 46:09.040
support next only to X itself so that's a good point to be made so he's a little

46:09.040 --> 46:11.720
hopeful and he goes on to say the mere team keeps bringing up these topics

46:11.720 --> 46:15.720
although so does the KD team what's up but he says maybe they need to defend

46:15.720 --> 46:22.360
their position so does the KD team I can emphasize with how how they how how I

46:22.360 --> 46:24.800
don't want to repeat what he's saying here but what he says it sure I can

46:24.800 --> 46:27.280
emphasize that they are working on something they truly believe in and

46:27.280 --> 46:30.560
they're being told it's the wrong thing to do he says I feel it is their right

46:30.560 --> 46:34.800
to develop mirror at their heart's content and I cheer their moxie similarly

46:34.800 --> 46:38.560
it is our right as developers and users to choose what to support and what not

46:38.560 --> 46:41.920
to such decision-making is aided by having an accurate and complete

46:41.920 --> 46:45.160
information and it's with that goal in mind that I wrote the post about I

46:45.160 --> 46:49.000
thought this is a great post because I think what we are entering into is an

46:49.000 --> 46:53.720
era of unprecedented fragmentation in the graphical space for Linux and I

46:53.720 --> 46:57.840
wanted and I and I I want to reel it back in here because I'm pretty upset

46:57.840 --> 47:01.200
about this the more I think about this because what I see this potentially as

47:01.200 --> 47:10.360
is I see this as I don't want to use the words I'm thinking of but the these are

47:10.360 --> 47:15.480
politically correct version maybe well it is it is hobbling desktop

47:15.480 --> 47:20.960
applications in order to push forward the Ubuntu agenda because I don't

47:20.960 --> 47:25.560
believe we can we have already seen unity itself introduce a level a level

47:25.560 --> 47:28.680
of fragmentation that is below commercial desktops that would be

47:28.680 --> 47:32.600
intolerable for commercial desktop we have already seen that frankly already

47:32.600 --> 47:37.440
seen the the play out of that so when you introduce some fundamental stuff at

47:37.440 --> 47:42.000
the at the display server level you either have two options as a developer

47:42.000 --> 47:46.560
you try to target both main display servers and one of those targets is

47:46.560 --> 47:50.080
probably not going to be as optimal as the other or you simply ignore one all

47:50.080 --> 47:56.360
together and either scenario users lose so if you don't care about what display

47:56.360 --> 47:59.880
server you're using then you probably ought to stop using Linux because at the

47:59.880 --> 48:03.400
at the end of the day this is going to fundamentally change how the application

48:03.400 --> 48:07.440
landscape looks on Linux and even if it is just one application has an

48:07.440 --> 48:11.560
on-screen display on one display server and doesn't on the other that is enough

48:11.560 --> 48:15.840
to have me upset because that is unacceptable it is not good enough and I

48:15.840 --> 48:20.160
want the most kick-ass display server possible we have the most kick-ass

48:20.160 --> 48:23.400
kernel possible how about we get the rest of the stack as kick-ass as we can

48:23.400 --> 48:27.880
and to sabotage a display server like this for one company's personal gain in

48:27.880 --> 48:31.400
a mobile market that is not likely to be tremendously successful anyways feels

48:31.400 --> 48:35.800
awfully selfish to me right now well you know I honestly and I think even valve

48:35.800 --> 48:39.600
will be included in this I don't think anyone's gonna give a ripping rats butt

48:39.600 --> 48:43.080
about mirror one way or the other going forward I really don't I think just from

48:43.080 --> 48:47.400
the backyard developer guy who's doing this in his boxer shorts down to the

48:47.400 --> 48:50.480
multi-billion dollar corporation I don't I think they're gonna look at this

48:50.480 --> 48:54.580
fundamentally me like you know honestly I'm gonna go whichever way the

48:54.580 --> 48:58.400
community is going whichever way the drop you know the video card vendors are

48:58.400 --> 49:02.200
going whichever way direction they're headed basically it's a numbers game and

49:02.200 --> 49:05.760
so I think this potentially I'm hoping I'm right on this that this could work

49:05.760 --> 49:08.960
itself out fairly early on I'm hoping the more I think about it the more I

49:08.960 --> 49:14.760
think that it's definitely early days and I think something I wanted to kind

49:14.760 --> 49:18.200
of kick around to the mumble room is maybe abstraction can solve because

49:18.200 --> 49:22.640
we're all looking at this with today's set of problems and today's set of tools

49:22.640 --> 49:27.500
to solve this problem and I think also you know something that Martin and Aaron

49:27.500 --> 49:31.580
were trying to make the push is developers are users too and in fact I

49:31.580 --> 49:34.960
think developers make up a good user base of Linux right I think that's

49:34.960 --> 49:38.680
probably who a lot of the developed users are our developers so by impacting

49:38.680 --> 49:41.560
developers you are impacting the users of Linux and I think you're gonna that's

49:41.560 --> 49:44.280
it that's a segment that's gonna continue to outgrow any other segment of

49:44.280 --> 49:49.360
Linux usage but I don't anybody the mumble room want to take a first shot at

49:49.360 --> 49:52.440
this is this a is this a problem that future Chris and Matt aren't even gonna

49:52.440 --> 49:58.120
have to worry about they can ask you a question Chris go for it puppy what's

49:58.120 --> 50:05.760
the single most used display server on Linux right now as in in most in most

50:05.760 --> 50:11.960
deployments back sorry no surface flinger on Android in way more

50:11.960 --> 50:17.480
deployments than anything else Wayland mere or XOR mmm good trick question

50:17.480 --> 50:25.920
poppy surface flinger service flinger is the display server on Android nobody

50:25.920 --> 50:31.240
seems to have told them that they can't have their own internal project for a

50:31.240 --> 50:35.760
display server which is used but don't you think the difference the device but

50:35.760 --> 50:39.440
the difference there do we get why do we get that flag but isn't the difference

50:39.440 --> 50:43.880
there those are that but that's a that's sort of in a sense a whole cloth

50:43.880 --> 50:47.120
creation right where it's a whole new ecosystem with a whole new set of apps

50:47.120 --> 50:51.720
that are designed for that system but on on the Linux just like a bantu phone

50:51.720 --> 50:55.000
yeah exactly if anything the most biggest problem is it's a whole

50:55.000 --> 50:59.200
different paradigm compared to our legacy or at least what everything else

50:59.200 --> 51:03.680
has ever been I mean I think Poby makes a good point but I think that I think

51:03.680 --> 51:08.880
the the subtle difference is that you only have to target search for surface

51:08.880 --> 51:11.560
flinger on Android all right so when you're making your Android apps it's not

51:11.560 --> 51:14.320
really something that even has to be a consideration but on no you don't you

51:14.320 --> 51:18.180
don't because the stack that's abstracted away from you in exactly the

51:18.180 --> 51:22.240
same way that Robert and Robert car have both blogged about that stuff so you

51:22.240 --> 51:25.480
would get away from you by the talk you would disagree then with the assertion

51:25.480 --> 51:29.680
that Saigo and Martin are making that it's not quite as abstract as everyone

51:29.680 --> 51:34.760
would like no I'm suggesting that there are certain edge cases where you need to

51:34.760 --> 51:38.760
know about the underlying fundamental bits and pieces and yeah a screenshot

51:38.760 --> 51:45.040
tool is a real easy shooting fish in a barrel oh you know one to pick because

51:45.040 --> 51:50.400
it obviously needs interaction with the display server but there are way more

51:50.400 --> 51:54.360
applications out there than there are screenshot tools and there are way more

51:54.360 --> 51:58.560
developers out there developing tools with toolkits which will just work on

51:58.560 --> 52:03.480
these display servers and won't have this problem hmm so you say the

52:03.480 --> 52:07.440
canonical has the amount of influence and power that Google has when it comes

52:07.440 --> 52:11.920
to the mobile marketplace is just a little bit of a excessive state did I

52:11.920 --> 52:19.800
say that when it comes to comparing surface slinger to mirror a little bit

52:19.800 --> 52:25.760
it's not actually important I'm suggesting is that that it's it's

52:25.760 --> 52:30.080
entirely possible for someone to come up with a display server on Linux which

52:30.080 --> 52:35.640
isn't Wayland and isn't X and for them to deploy that to a large number of

52:35.640 --> 52:40.760
handsets around the world and it work and for application developers to do

52:40.760 --> 52:44.280
their work on top of that and not really care that it's surface fling underneath

52:44.280 --> 52:48.000
and not X org or Wayland or whatever so I think the fundamental disagreement I

52:48.000 --> 52:53.440
see here is one side thinks that it's really not gonna be that big of an

52:53.440 --> 52:56.960
ramifications for developers or application functionality and another

52:56.960 --> 53:01.040
side seems to disagree with that position the surface area of mobile is

53:01.040 --> 53:07.960
also far smaller in a way that it's very specific its kernel is predefined other

53:07.960 --> 53:13.480
than the cyanogen mods or whatever personally built mods that Android has

53:13.480 --> 53:21.120
otherwise the desktop is very very different there's a lot more and it's a

53:21.120 --> 53:24.080
lot harder to do which is one of the reasons why Mia hasn't landed in the

53:24.080 --> 53:29.080
desktop right and what it's kind of the point you mentioned that if it comes

53:29.080 --> 53:32.520
down to here's a toolkit you can use to build your app and it would guarantee

53:32.520 --> 53:37.240
it'll work that works but that's not a model that Linux is typically gone well

53:37.240 --> 53:42.000
I think I think their argument is is no toolkit is actually that comprehensive

53:42.000 --> 53:46.520
there's there's bugs or there's just gaps in what it's capable of providing

53:46.520 --> 53:52.280
that eventually a special case of unity pretty much only I think their argument

53:52.280 --> 53:55.840
is eventually you know there's there's you have to close a few gaps and when

53:55.840 --> 53:58.480
you do that you got to write directly to the display server you can't write to

53:58.480 --> 54:02.600
the toolkit and I think I think that I think the concept of a perfect toolkit

54:02.600 --> 54:06.400
is sort of sort of like a it's sort of like a dream but I don't think we've

54:06.400 --> 54:11.240
ever in the history of computing achieved the perfect toolkit no and I

54:11.240 --> 54:15.320
agree with the there are going to be holes in every toolkit and there are bits

54:15.320 --> 54:19.920
that we're gonna have to do at the plumbing layer and components that we're

54:19.920 --> 54:24.560
gonna have to provide that won't be provided by Qt we know that and we're

54:24.560 --> 54:29.840
building those as we go and yes it's a bit of a learning exercise for us as

54:29.840 --> 54:38.120
well but I don't think the the criticism is is necessary I don't think it's as

54:38.120 --> 54:44.400
warranted as as some might think it it's in some ways it feels like okay right

54:44.400 --> 54:46.880
we've got them to switch the system D right what's next

54:46.880 --> 54:53.400
I asked me let's see if we can get him to change that one now right yeah I I

54:53.400 --> 54:59.240
guess what I'm worried about is I'm worried that wishful thinking is

54:59.240 --> 55:03.160
influencing that thinking because it in an ideal world I think I think that's

55:03.160 --> 55:07.240
too ideal and I think the history of specifically desktop Linux shows us that

55:07.240 --> 55:11.320
things are very fluid and things are never quite as great as we want them to

55:11.320 --> 55:15.580
be and the idealism usually gives away a little bit of pragmatism and I think at

55:15.580 --> 55:21.160
the end of the day there's a lot of bets on things kind of coming together at the

55:21.160 --> 55:28.320
right time to make all of this work I think I think this is time is coming to

55:28.320 --> 55:33.360
an end soon because I mean they've been alienating and alienating the user base

55:33.360 --> 55:40.840
so much over the years with unity with near with yeah I don't know about that

55:40.840 --> 55:44.720
you know right I hear that a lot when Riley but the thing is is evidence of it

55:44.720 --> 55:48.640
the thing is is you can't discount the massive cloud deployment that Ubuntu has

55:48.640 --> 55:52.240
which will naturally push a lot of developers and sysadmins to want to run

55:52.240 --> 55:56.760
Ubuntu I mean they're doing really great there and I think also I think let's

55:56.760 --> 56:01.720
look at it from us from an all from an alternate perspective what if we fast

56:01.720 --> 56:06.800
forward three years down the road or 2016 or whatever it is where we have

56:06.800 --> 56:10.920
like this great QT based desktop which I think a lot of us think QT has a strong

56:10.920 --> 56:14.040
future ahead of it you know maybe this is a little bit further down the road

56:14.040 --> 56:18.400
but it's sitting on top of system D the only piece that has a lot of questions

56:18.400 --> 56:24.280
is how is I think what people are really worried about is the fragmentation being

56:24.280 --> 56:27.560
introduced at such a critical layer I mean we can all argue about package

56:27.560 --> 56:31.240
names and how they're different between all distributions or the locations of

56:31.240 --> 56:34.200
certain libraries on how they can be different or where the config goes can

56:34.200 --> 56:39.820
be different but we've we as a user base and as developers have never had to

56:39.820 --> 56:44.000
worry about that display layer I mean yes it's it's gotten old and it you know

56:44.000 --> 56:48.560
it's time has come to be replaced but at the same time it has been at least a

56:48.560 --> 56:54.200
consistent thing not just across Linux but also across Linux and the BSDs it is

56:54.200 --> 56:57.800
a consistent aspect for software development when you're targeting these

56:57.800 --> 57:01.520
systems that is now no longer going to be consistent and I think you cannot

57:01.520 --> 57:09.200
accept for that other platform that you keep forgetting about that has more

57:09.200 --> 57:12.920
deployments than all of those well that I mean there is a reality to that but I

57:12.920 --> 57:16.960
you know I'm very focused on the actual desktop aspect of Linux and maybe

57:16.960 --> 57:20.600
you know down the road I mean we're already seeing more and more laptops

57:20.600 --> 57:24.520
that are shipping with Android I just recently saw a post for a full-fledged

57:24.520 --> 57:29.200
desktop with a keyboard mouse and monitor running Android so I mean you

57:29.200 --> 57:32.960
know it could be a fair point that again we don't know what the future has ahead

57:32.960 --> 57:37.440
of us but right now I'm really focused on you know making my desktop version of

57:37.440 --> 57:42.200
Linux better than ever and I'm I'm really worried that if we cock this up

57:42.200 --> 57:47.680
and and if we get this wrong at this critical time with with new types of

57:47.680 --> 57:51.960
companies getting on board and making great products but also all of the

57:51.960 --> 57:55.640
desktop environments are getting to the point now where they're so good that

57:55.640 --> 57:58.880
it's these little things that bug us like the indicators and all this kind of

57:58.880 --> 58:02.880
stuff we're really getting to a good point and if we kind of screw this up I

58:02.880 --> 58:10.320
just Android and Chrome OS and and the Mac are gonna eat us alive so in three

58:10.320 --> 58:16.840
weeks time and thereabouts three weeks and two days I'm going to ship 1404 and

58:16.840 --> 58:22.680
that's gonna have X as the display server right and unity 7 with comp is

58:22.680 --> 58:27.680
everything you know and love or hate depending on your point of view and that

58:27.680 --> 58:33.600
gets support for five years so if you're a game developer you can still write

58:33.600 --> 58:37.000
your same game using your same libraries I don't by the way if you

58:37.000 --> 58:41.000
wanted to put it across to mere STL supports mere as well as supporting

58:41.000 --> 58:47.080
Wayland so it's I don't I think you're painting a rather bleak outlook for

58:47.080 --> 58:53.000
something that's nothing not gonna happen anytime soon that's true I mean

58:53.000 --> 58:57.840
that is not going to be the default on the desktop for some time I think Aaron

58:57.840 --> 59:01.960
was a little bit pessimistic saying mere is pushed back to 1604 you know what I

59:01.960 --> 59:05.960
think it is poppies I think we have been over the years those of us who've been

59:05.960 --> 59:11.360
running desktop Linux as our main desktop for so long now have watched these sort

59:11.360 --> 59:14.640
of peaks and then it's almost like watching the price of Bitcoin man it

59:14.640 --> 59:19.320
it peaks and then it crashes and it peaks and it crashes and we're so gun

59:19.320 --> 59:22.920
shy we've been so we're so we've been whipped so many times now that when we

59:22.920 --> 59:26.400
sniff something that's gonna screw things up there's this really strong

59:26.400 --> 59:31.640
reaction and I you know you mentioned the system to debacle I am seeing a

59:31.640 --> 59:35.000
pivot now in these conversations to more of the technical side and I think you

59:35.000 --> 59:39.920
would agree that one of the things that sort of was really strong on the system

59:39.920 --> 59:43.000
beside of the argument for Debian's in its system was they had the technical

59:43.000 --> 59:46.280
argument and that technical argument was really strong and now you're seeing them

59:46.280 --> 59:50.760
bust that out on the on the display server argument so we talked about this

59:50.760 --> 59:55.680
a few weeks ago where the the Linux community and people who are interested

59:55.680 --> 01:00:01.300
in Linux news I agree with you are watching you know LW when and watching

01:00:01.300 --> 01:00:07.120
for Onyx and and and maybe slash dot if that still exists and and seeing these

01:00:07.120 --> 01:00:12.440
news articles about all kinds of you know developments in in various camps

01:00:12.440 --> 01:00:17.400
and yeah reacting in the same way that you might react to like coin or Bitcoin

01:00:17.400 --> 01:00:23.240
and and I think it's kind of overdone because you know in the past I I've had

01:00:23.240 --> 01:00:29.280
people bark at me on Twitter you know complaining that Ubuntu was removing

01:00:29.280 --> 01:00:33.880
GIMP from the CD and I remember him saying whoever it was this mythical

01:00:33.880 --> 01:00:37.520
person on Twitter say to me mark my words this was the end of Ubuntu

01:00:37.520 --> 01:00:42.120
because you're removing GIMP from the CD I mean get real right we've all and

01:00:42.120 --> 01:00:46.400
we've all watched like these these huge upsets over stuff that ends up not being

01:00:46.400 --> 01:00:51.040
a big one but those have never been something as fundamental as a display

01:00:51.040 --> 01:00:56.660
server and I argue that the system D and the upstart one you know that was

01:00:56.660 --> 01:01:00.200
brought to a head by the fact that Debian had to make a decision and Debbie

01:01:00.200 --> 01:01:02.560
and made that at the end of the day that's less important than display

01:01:02.560 --> 01:01:09.560
server itself I mean we're reading any of the news articles over the last three

01:01:09.560 --> 01:01:12.640
months there's no way you could think that this was less important than

01:01:12.640 --> 01:01:16.200
anything else right well I feel like it is though like in a long-term

01:01:16.200 --> 01:01:20.560
ramifications standpoint because what what we really need to do is make the

01:01:20.560 --> 01:01:24.800
application experience better and I think what we I think the scenario I

01:01:24.800 --> 01:01:30.960
could potentially see playing out is on the unity desktop unity 8 or unity 9 you

01:01:30.960 --> 01:01:34.400
know whatever it is at this point like all of those applications are really

01:01:34.400 --> 01:01:37.980
gonna be top-tier after they've had a few releases and had some time in the

01:01:37.980 --> 01:01:42.120
market they'll they'll really be great and they'll work you know the marriage

01:01:42.120 --> 01:01:45.720
between mirror and the desktop environment and even the applications

01:01:45.720 --> 01:01:52.200
it's going to feel so refined and cohesive but I what I worry about is is

01:01:52.200 --> 01:01:57.200
outside of that I'm worried about certain desktop applications that don't

01:01:57.200 --> 01:02:00.240
have the support and I think as people start to wrap their support for certain

01:02:00.240 --> 01:02:03.680
features I think as people start to wrap their their minds around that I could

01:02:03.680 --> 01:02:07.800
see this erupting to even bigger than the system D debate because it honestly

01:02:07.800 --> 01:02:13.000
affects more people potentially well I mean your point is well taken it is

01:02:13.000 --> 01:02:17.080
your developers it might you know I don't think my mom's gonna be affected

01:02:17.080 --> 01:02:21.080
by this well she knows what display so she doesn't even know what web browser

01:02:21.080 --> 01:02:25.000
she uses just clicks the pretty colored icon in the corner of the screen your

01:02:25.000 --> 01:02:30.360
mom could be affected by this by she could say come on my on my computer here

01:02:30.360 --> 01:02:33.840
I no longer get the Thunderbird pop-up about a new email message I really like

01:02:33.840 --> 01:02:37.560
having that and you know what do you have to say to her as well you know the

01:02:37.560 --> 01:02:41.160
developers for Thunderbird decided not to implement support for how we do that

01:02:41.160 --> 01:02:48.720
in Mir so so in I heard you during your rather breathless rant earlier and talk

01:02:48.720 --> 01:02:53.080
about some of the issues that may come up you know the potential issues that

01:02:53.080 --> 01:02:56.640
may come up and wait what you got to remember is that we don't develop

01:02:56.640 --> 01:03:00.240
Ubuntu in a vacuum it's in all the packages that we put in the archive or

01:03:00.240 --> 01:03:05.400
in the archive and coexist with other desktops like Kubuntu KDE like Zubuntu

01:03:05.400 --> 01:03:10.160
and Lubuntu and we test a lot of this stuff on different environments it's not

01:03:10.160 --> 01:03:14.280
it's not just developed and tested and the developer says oh it works on my

01:03:14.280 --> 01:03:19.960
desktop ship it sure it doesn't work quite like that well so I guess the the

01:03:19.960 --> 01:03:24.160
end point I'm trying to make is I think probably the biggest takeaway is we have

01:03:24.160 --> 01:03:29.640
a lot of time like you mentioned the LTS is about to ship with X and then a lot

01:03:29.640 --> 01:03:34.200
can change in that five years that LTS has support but I think I at the same

01:03:34.200 --> 01:03:38.160
time you know you can you can look at the past Ubuntu controversies that

01:03:38.160 --> 01:03:43.160
really haven't turned out to be that big of a deal and that that doesn't

01:03:43.160 --> 01:03:47.200
necessarily mean that every situation moving forward is that is the same thing

01:03:47.200 --> 01:03:51.360
that future situations need to be evaluated on their own merits and their

01:03:51.360 --> 01:03:56.120
own you know their own impacts and this is a multi-level issue you know you have

01:03:56.120 --> 01:04:01.240
the the politics of it which are which are way too hostile already you have the

01:04:01.240 --> 01:04:07.400
potential people are just making almost no deal out of this it's making a mole

01:04:07.400 --> 01:04:11.440
hill out of a mountain in controversy or at least in contrast compared to the

01:04:11.440 --> 01:04:15.520
usual thing they're sweeping it under the carpet as if this is absolutely

01:04:15.520 --> 01:04:20.320
unimportant anyone I think this is core that's an interesting I think that's how

01:04:20.320 --> 01:04:25.720
I see this right now and at the same time like I'm of a mixed I'm of a mixed

01:04:25.720 --> 01:04:30.860
mind on it because I I've also witnessed in open source how a little you know

01:04:30.860 --> 01:04:36.000
coke versus Pepsi can benefit the overall desktop and can benefit overall

01:04:36.000 --> 01:04:43.200
Linux and so I'm not I'm not staunchly against mirror on on that principle but

01:04:43.200 --> 01:04:50.200
what I am staunchly against is having Linux desktop get any more shitty if it

01:04:50.200 --> 01:04:56.720
gets if it gets any worse at all we are screwed I mean we have literally we have

01:04:56.720 --> 01:05:00.900
literally across the board we have got to be over the next few years it is go

01:05:00.900 --> 01:05:05.920
time to play at our a game and I guess what I worry about is if if we are

01:05:05.920 --> 01:05:10.040
even playing at our b-minus game because of some differences between

01:05:10.040 --> 01:05:15.080
applications on different display servers man the developers will look at

01:05:15.080 --> 01:05:18.280
that as an excuse not to develop for Linux end users will look at that as

01:05:18.280 --> 01:05:21.940
confusing and make Linux hard to understand and sysadmins and support

01:05:21.940 --> 01:05:26.040
people will look at that and say how do I how do I provide cost-effective

01:05:26.040 --> 01:05:31.400
support for that and the argument could be made the argument could be made that

01:05:31.400 --> 01:05:35.120
if it was all Wayland across the board this wouldn't even be a concern and I

01:05:35.120 --> 01:05:37.640
think that at the issue right there when people start thinking about that it gets

01:05:37.640 --> 01:05:40.040
them a little fired up you know what I mean it gets them a little something

01:05:40.040 --> 01:05:45.280
else competition there should be healthy competition within our ecosystem in a

01:05:45.280 --> 01:05:51.000
way mirror was made in haste before Wayland's true potential could be

01:05:51.000 --> 01:05:59.640
realized well yeah in the system it's got to be tested I kind of feel like I

01:05:59.640 --> 01:06:03.600
kind of feel like no I kind of feel like if mirror was announced two years ago it

01:06:03.600 --> 01:06:06.360
would like I think a lot of people I think there's I think this would be a

01:06:06.360 --> 01:06:10.360
lot different I think they I think you know you got to give canonical credit

01:06:10.360 --> 01:06:15.160
they were early to have whatever they were early supporters of Wayland but I

01:06:15.160 --> 01:06:19.480
think you know I understand there's market realities there's products you

01:06:19.480 --> 01:06:22.960
need to be able to ship I produce a Linux show on an edit on a Mac I

01:06:22.960 --> 01:06:25.840
understand there's compromises that need to be made to produce the product to get

01:06:25.840 --> 01:06:28.880
it to the market at a way that's cost-effective and actually deliverable

01:06:28.880 --> 01:06:32.440
and I think that is where mirror came out of and that is a completely

01:06:32.440 --> 01:06:35.720
reasonable and understandable perspective but the problem is is that

01:06:35.720 --> 01:06:39.800
doesn't mean it still doesn't introduce potentially future oddities throughout

01:06:39.800 --> 01:06:43.800
the entire desktop I mean it is it is it is fundamentally something that could

01:06:43.800 --> 01:06:48.320
happen and if it does happen I just I do not feel like we can afford for it to

01:06:48.320 --> 01:06:52.720
happen and so we either have all desktops potentially reduced in

01:06:52.720 --> 01:06:55.540
functionality it's some degree even if it's just an on-screen display not

01:06:55.540 --> 01:06:58.720
showing up or somehow it all gets abstracted out it all works out and

01:06:58.720 --> 01:07:02.840
that's a potential to I don't know two things I want to bring up real quick

01:07:02.840 --> 01:07:05.840
because I think we need to take a trip back in time to a little thing that was

01:07:05.840 --> 01:07:10.680
called early revisions of Jack okay I remember a very popular newbie

01:07:10.680 --> 01:07:14.880
distribution that was absolutely all about Jack to screw everything else this

01:07:14.880 --> 01:07:18.160
is what the future is never mind the fact that I could literally load a web

01:07:18.160 --> 01:07:21.920
page and break Linux audio that's a big freaking deal I honestly thought it was

01:07:21.920 --> 01:07:25.960
the end of Linux as we knew it it was a big problem flash forward to today the

01:07:25.960 --> 01:07:29.320
new devil is pulse audio I mean they're different animals granted but they still

01:07:29.320 --> 01:07:32.000
interact with your ability to hear sounds on your computer and I suppose

01:07:32.000 --> 01:07:36.080
that's poppies point yeah yeah we will work through it now I will advocate

01:07:36.080 --> 01:07:41.000
against that yes I do think that if potentially this does create new

01:07:41.000 --> 01:07:43.980
problems it's gonna it's gonna drag us through the mud a little longer is it

01:07:43.980 --> 01:07:48.760
gonna be the is it gonna be a major problem no I think a major delay yes

01:07:48.760 --> 01:07:54.280
major problem not so much but I because I've seen this movie before I'm not that

01:07:54.280 --> 01:07:57.480
concerned about it because I've seen audio is a big deal it's a lot like

01:07:57.480 --> 01:08:01.200
display if you you know you see you hear those are kind of big deals I think

01:08:01.200 --> 01:08:03.720
we'll work through it I think we'll work through it I think we just need to kind

01:08:03.720 --> 01:08:08.120
of you know try to kind of come together kumbaya whatever the hell we got it you

01:08:08.120 --> 01:08:12.440
could make the argument that maybe pulse audio if it had something to compete

01:08:12.440 --> 01:08:14.920
against something to compare itself something to measure against something

01:08:14.920 --> 01:08:19.560
to you know live up to maybe it would have taken a different route and perhaps

01:08:19.560 --> 01:08:24.360
yeah well it provides me with functionality I want that I can't get without I mean

01:08:24.360 --> 01:08:27.360
that's just factually true yeah and I'm willing to say with we have to go

01:08:27.360 --> 01:08:29.920
through a growth period maybe there's some oddities like the Thunderbird

01:08:29.920 --> 01:08:33.120
notification doesn't show up but in the end if these two things can make each

01:08:33.120 --> 01:08:38.800
other better and that creates a more kick-ass display server yeah and we may

01:08:38.800 --> 01:08:42.640
have some third option from with your whatever stick with your grass yes or

01:08:42.640 --> 01:08:46.160
whatever you know whatever your favorite stable distribution is that sticks with

01:08:46.160 --> 01:08:53.360
X until Wayland is ready yes until Mary what happens a year or two years from

01:08:53.360 --> 01:08:58.280
now when 1404 is old and still like 12 or 4 is now and he had nothing to switch

01:08:58.280 --> 01:09:05.040
to I would say I would like to say I mean my biggest disagreement with Matt's

01:09:05.040 --> 01:09:11.000
point is I think I might have was that you Tyler you might have a little buzz

01:09:11.000 --> 01:09:14.720
there on your line I know Derek Devlin wanted to get a point in yeah I just

01:09:14.720 --> 01:09:18.440
like to interject because I've actually done some research and the differences

01:09:18.440 --> 01:09:23.320
between X Wayland and mere and I see as mere taken a different approach

01:09:23.320 --> 01:09:29.960
technically so X 11 was this huge thing that pretty much initially was very

01:09:29.960 --> 01:09:34.680
small and started patching up and because it was just adding futures that

01:09:34.680 --> 01:09:38.680
in futures and new features the result was the colossal huge amount of software

01:09:38.680 --> 01:09:43.720
that it is today now recent improvements have been stripping those things out

01:09:43.720 --> 01:09:48.080
Wayland actually comes and says we're gonna define a very basic premise and

01:09:48.080 --> 01:09:52.000
you can build on top of it and move to some of the responsibilities that are

01:09:52.000 --> 01:09:57.120
currently being addressed by X and letting that to the compositor or to the

01:09:57.120 --> 01:10:02.720
plugins so Weston is doing kind of that work mere takes a different approach and

01:10:02.720 --> 01:10:08.920
says look developers are used to program against something that actually has these

01:10:08.920 --> 01:10:14.720
futures present and they only deal with a very small subset of these features so

01:10:14.720 --> 01:10:19.280
they will actually only use those and mir says that we are going to provide

01:10:19.280 --> 01:10:24.400
the same rich set of futures however because we are implementing mere with

01:10:24.400 --> 01:10:28.680
those concepts in minds we are actually going to provide a more stable platform

01:10:28.680 --> 01:10:32.040
for that that's why I wanted to interject on this matter because

01:10:32.040 --> 01:10:37.240
technically they approach the problem very differently Wayland moves the

01:10:37.240 --> 01:10:42.640
problem upwards and mirror tries to solve the problem in the same section

01:10:42.640 --> 01:10:48.800
that X was solving in a way and when we actually think about most applications

01:10:48.800 --> 01:10:57.080
yes actually don't mess up with display server and that's a fact current this

01:10:57.080 --> 01:11:02.680
window managers and game developers use libraries and those libraries do Windows

01:11:02.680 --> 01:11:06.600
support Mac support Linux support and those platforms are completely different

01:11:06.600 --> 01:11:11.240
how is that possible it's simply just making an abstraction and from that

01:11:11.240 --> 01:11:15.760
perspective the same way libraries appear to allow cross-pollination of

01:11:15.760 --> 01:11:21.000
code I'm not sure why wouldn't be possible to make for the display servers

01:11:21.000 --> 01:11:25.640
so that's why I was saying that the paradigm of mirrors completely different

01:11:25.640 --> 01:11:31.280
as XOR again Wayland have I think which are normal which composite to a certain

01:11:31.280 --> 01:11:36.840
screen or a certain surface and that is resultantly put on like to the video

01:11:36.840 --> 01:11:41.400
driver and to your screen it takes a completely different approach by having

01:11:41.400 --> 01:11:48.280
a completely different compositor per a window or per UI element and that is a

01:11:48.280 --> 01:11:56.200
what is it a simple no they're all compositing together separately and then

01:11:56.200 --> 01:11:59.960
it actually gets put onto the screen which is why that is slightly more

01:11:59.960 --> 01:12:04.960
pluggable but it's completely more interconnected to each other because

01:12:04.960 --> 01:12:10.360
they're all their own compositor yes it is actually more modular in that sense

01:12:10.360 --> 01:12:15.120
but in the other sense let's let's take the other view I'm the final developer

01:12:15.120 --> 01:12:19.460
I'm consuming one of these compositors so wouldn't I have then if my

01:12:19.460 --> 01:12:23.920
application tends to do some work that matches best with this compositor and

01:12:23.920 --> 01:12:28.280
then matches best with the other one am I not just duplicating my efforts again

01:12:28.280 --> 01:12:33.880
I guess it's really if we are looking at from a technical perspective the

01:12:33.880 --> 01:12:37.840
approach of mirror taking is we have these model and people are used to it

01:12:37.840 --> 01:12:41.160
and there's also another thing I would like actually to point out is a lot of

01:12:41.160 --> 01:12:46.680
people could seem to say that canonical is backing mirror for their company

01:12:46.680 --> 01:12:53.200
issues and they want to solve that in you know going to more a pleasant way

01:12:53.200 --> 01:12:58.440
let's say for their business requirements you might say yes yeah yeah exactly but

01:12:58.440 --> 01:13:04.040
Wayland isn't that innocent either if we think about it because some of the ex

01:13:04.040 --> 01:13:08.240
developers were actually Nokia developers and other companies developers

01:13:08.240 --> 01:13:13.440
which moved to Wayland so I'm not seeing the point there so I wouldn't even say

01:13:13.440 --> 01:13:17.400
that that's an argument at all I think you guys have both heaven's revenge and

01:13:17.400 --> 01:13:20.520
daredevil and I've that's funny the opposite names there I think you both

01:13:20.520 --> 01:13:25.040
have raised some interesting perspectives on how mirror could provide

01:13:25.040 --> 01:13:29.480
solid competition to Wayland and kind of kick Wayland in the ass in a few areas

01:13:29.480 --> 01:13:33.960
to make it you know shore up like if it really truly has a stable ABI API the

01:13:33.960 --> 01:13:39.120
developer I mean that's a huge advantage for for developers that's an example of

01:13:39.120 --> 01:13:43.480
some good competition you know a little injecting some good competition why I

01:13:43.480 --> 01:13:49.760
took the bet go ahead Tyler if you don't mind the point I was trying to make

01:13:49.760 --> 01:13:55.480
earlier again with what Matt was saying about his comparison with the audio

01:13:55.480 --> 01:14:01.200
stuff earlier I think the biggest issue we have with mirror and Wayland

01:14:01.200 --> 01:14:06.440
especially if they're competing against each other is who are the driver

01:14:06.440 --> 01:14:10.760
developers going to cater to you right that's a big part of the picture that

01:14:10.760 --> 01:14:15.680
right now I mean seems to be predominantly in Wayland's favor yes and

01:14:15.680 --> 01:14:21.800
no if you think about it the mere design actually allows the current model of

01:14:21.800 --> 01:14:26.200
proprietary drivers to be more attractive but isn't that supposed to be

01:14:26.200 --> 01:14:30.400
just temporary well another thing is they're competing against each other

01:14:30.400 --> 01:14:33.560
it's still open source though isn't it I mean it can still look at each other's

01:14:33.560 --> 01:14:41.040
code freely borrow from it yes bingo drivers let's say the Nvidia drivers if

01:14:41.040 --> 01:14:44.640
you want to use the good ones they're proprietary and they might end up being

01:14:44.640 --> 01:14:50.840
working only well with Wayland well video has to actually put resources

01:14:50.840 --> 01:14:55.520
towards supporting mirror specifically because that is our only problem in open

01:14:55.520 --> 01:14:59.560
source is the binary blobs of our video drivers almost every other part of our

01:14:59.560 --> 01:15:04.640
ecosystem is open yeah it's a problem we're having with you know with mobile

01:15:04.640 --> 01:15:09.280
devices as well from more so with mobile devices because they all have loads of

01:15:09.280 --> 01:15:13.520
binary blobs to get them working and that's partly why we've gone down the

01:15:13.520 --> 01:15:18.680
road we have of using you know some of the Android driver stack to enable that

01:15:18.680 --> 01:15:25.000
quickly but listen I know I know you you're you're quite keen on impressing

01:15:25.000 --> 01:15:30.720
the point that that we as a Linux community are on the hook for this and

01:15:30.720 --> 01:15:34.640
we've got to you know get this done nobody understands that any more than us

01:15:34.640 --> 01:15:42.080
we've got at least two handset vendors which we're you know gonna be

01:15:42.080 --> 01:15:46.600
contractually obliged to provide software for this year and that puts

01:15:46.600 --> 01:15:50.000
enormous pressure on us to get this right because these things are going to

01:15:50.000 --> 01:15:55.000
be shipping to real people you know proper handsets they can order buy and

01:15:55.000 --> 01:16:00.760
use as their real phone on a daily basis and so we we are very cognizant of of

01:16:00.760 --> 01:16:06.320
that pressure and trying to get the intricate technicalities of those pieces

01:16:06.320 --> 01:16:15.120
working correctly and so yeah we're aware of that I was almost tragic when

01:16:15.120 --> 01:16:21.520
the time of XP is big ending its life we messed up and conquering the world when

01:16:21.520 --> 01:16:25.800
I screwed up but now it's peas end of life is coming up and now we have

01:16:25.800 --> 01:16:30.240
another shot but now canonical has given us another well I probably points out

01:16:30.240 --> 01:16:37.280
those users would be switching to LTS for Linux exactly I think Alan is Alan's

01:16:37.280 --> 01:16:40.520
points well taken most companies have already switched to Windows 7 I would

01:16:40.520 --> 01:16:45.800
like to make another point regarding drivers the good news is AMD does plan

01:16:45.800 --> 01:16:49.600
on going completely open source for the kernel driver and leaving the

01:16:49.600 --> 01:16:53.360
proprietary stuff for the user land right that's a very interesting

01:16:53.360 --> 01:16:57.000
development that could make a maybe maybe you know I don't know if Nvidia is

01:16:57.000 --> 01:17:01.800
even capable of doing the same thing but that could solve this these types of

01:17:01.800 --> 01:17:06.000
problems in a big way and that that was something I didn't mention in Sunday's

01:17:06.000 --> 01:17:09.360
last but that was something I put into consideration is and I wonder if that is

01:17:09.360 --> 01:17:13.080
influencing AMD's decision in doing that is because they're kind of looking at

01:17:13.080 --> 01:17:17.080
the future landscape and going well you know you know what I think the big thing

01:17:17.080 --> 01:17:20.680
is really honestly I think the big thing for Nvidia is they're probably looking

01:17:20.680 --> 01:17:24.320
back and seeing okay well what what direction is the steam box gonna go in

01:17:24.320 --> 01:17:28.320
and whatever that you know I mean sure if steam box decides to go mirror then

01:17:28.320 --> 01:17:32.400
and you know honestly it sounds like there's some compelling reasons around

01:17:32.400 --> 01:17:35.040
the oculus rift and things like that where they might want to go mirror and

01:17:35.040 --> 01:17:38.420
wouldn't that be quite the upset but if I bet you anything Nvidia is watching

01:17:38.420 --> 01:17:42.640
for that and that might make their decision right there I don't know let's

01:17:42.640 --> 01:17:46.240
help you know at the BSD conferences have been a lot of discussion lately

01:17:46.240 --> 01:17:50.960
about the problem of mono cultures there's a few specific products that

01:17:50.960 --> 01:17:55.000
have taken off to the point where they are the only choice for stuff for

01:17:55.000 --> 01:18:00.160
example open SSH is like 95% plus market share other than a couple embedded

01:18:00.160 --> 01:18:05.240
things like drop bear right yeah and there's no alternative

01:18:05.240 --> 01:18:10.360
and that's that's a bad thing so having an alternative to X org isn't

01:18:10.360 --> 01:18:20.200
necessarily a bad thing X X had no alternative for a very long time kind of

01:18:20.200 --> 01:18:26.040
switching tracks though what happens like five ten years now when X stopped

01:18:26.040 --> 01:18:29.400
being supported across the border what will be as he do that's what I'm wondering

01:18:29.400 --> 01:18:33.560
yeah he is a bone yeah what is BSD is playing there Alan do you know we

01:18:33.560 --> 01:18:37.560
already have experimental poor import of Western and Whaler

01:18:37.560 --> 01:18:43.560
oh wow there's nothing we can use it on yet right well that's amazing though

01:18:43.560 --> 01:18:47.880
which is the problem so work is already kind of beginning there I think it's

01:18:47.880 --> 01:18:51.920
gonna be if somebody had an app that we could actually run on it that would be

01:18:51.920 --> 01:18:55.480
helpful yeah that would be really awesome if BSD done that Alan thing even

01:18:55.480 --> 01:18:59.560
before Linux got full support for it that would do wonders in general I think

01:18:59.560 --> 01:19:10.160
oh my god everyone seems to agree that it's a critical time because once we've

01:19:10.160 --> 01:19:17.240
set this it's as an opportunity as well to take on users but actually it's one

01:19:17.240 --> 01:19:22.760
of the reasons to make this a more thought-out decision because it's gonna

01:19:22.760 --> 01:19:27.000
be what will affect us down the road yeah I think I think that's a good point

01:19:27.000 --> 01:19:29.920
and maybe we'll we'll end right there because that's just been a just a great

01:19:29.920 --> 01:19:34.560
conversation I like getting the all perspectives in on this one and I think

01:19:34.560 --> 01:19:38.200
I think it's gonna be a very interesting future and if only there was some way we

01:19:38.200 --> 01:19:42.680
could follow this as it's developed and create a history of it hmm maybe how

01:19:42.680 --> 01:19:47.580
could we do that maybe maybe maybe on your local Linux unplugged and Linux

01:19:47.580 --> 01:19:51.560
action show we'll keep on top of and hopefully we've given you some reasons

01:19:51.560 --> 01:19:55.000
to think about why the display server does or does not matter a little more

01:19:55.000 --> 01:19:59.800
than you had before before we wrap up I wanted to maybe ask your feedback on

01:19:59.800 --> 01:20:03.960
anything we've covered obviously today but also what do you think about Linux

01:20:03.960 --> 01:20:11.680
Mint perhaps using the same Ubuntu LTS base for Linux Mint 17 18 19 and 20

01:20:11.680 --> 01:20:16.920
that's right for the next for the next while Linux Mint would be based on

01:20:16.920 --> 01:20:23.280
Ubuntu 1404 LTS they say they would use that to push forward innovation and

01:20:23.280 --> 01:20:26.600
cinnamon be more active in development on mate and better support mint tools

01:20:26.600 --> 01:20:31.600
and engage in projects we propose we've postponed for years I'd like to know

01:20:31.600 --> 01:20:34.360
what people think about that what do you think Matt is that gonna get really

01:20:34.360 --> 01:20:38.920
boring is that code for we don't want to do stuff I mean I don't know just to me

01:20:38.920 --> 01:20:42.720
it just seems like what's from an end-user point of view what am I really

01:20:42.720 --> 01:20:45.680
getting out of it we're gonna do these cool things okay are we going to the

01:20:45.680 --> 01:20:49.360
point where I don't I don't know are we at the point where the base is good

01:20:49.360 --> 01:20:55.160
enough and so now it's time on yeah well I don't include the desktop

01:20:55.160 --> 01:20:59.760
environment I mean like the base like the kernel you know that the tools like

01:20:59.760 --> 01:21:02.720
the GNU tools all that kind of stuff are we good we had a point now where it's

01:21:02.720 --> 01:21:06.240
good enough because also keep in mind isn't that kind of what the next open

01:21:06.240 --> 01:21:10.040
SUSE releases the guys are not really focusing on the under the hood stuff but

01:21:10.040 --> 01:21:13.680
they're more focusing on the services around open SUSE yeah yeah they kind of

01:21:13.680 --> 01:21:17.440
are okay so let's just for argument say they do that are they going to be also

01:21:17.440 --> 01:21:20.160
stagnating on the kernel and just basically applying little you know

01:21:20.160 --> 01:21:24.360
patches as far as yeah sounds boring to me Matt yeah I mean it's like oh hey I

01:21:24.360 --> 01:21:27.320
gotta do this piece of hardware good thing I got that new kernel oh that's

01:21:27.320 --> 01:21:30.800
right I don't yeah see what I mean it's kind of like that doesn't really make a

01:21:30.800 --> 01:21:34.460
lot of sense well and it's not like the rest of the world standing it standing

01:21:34.460 --> 01:21:37.920
still and it's it's a cool it's a real close balancing act getting those user

01:21:37.920 --> 01:21:41.280
land applications which eventually end up relying on underlying stuff that has

01:21:41.280 --> 01:21:44.440
to be updated sounds like they're doing a simply Memphis to me that's just me

01:21:44.440 --> 01:21:46.440
well let's hear what the audience thinks I'll go over to Jupiter

01:21:46.440 --> 01:21:50.360
broadcasting.com click the contact link choose Linux unplugged from the

01:21:50.360 --> 01:21:53.680
drop-down and send us in your thoughts on that or anything we covered in this

01:21:53.680 --> 01:21:56.880
week's Linux unplugged and don't forget if you'd like to participate in our

01:21:56.880 --> 01:22:02.720
virtual lug hang out with us over at JB live TV we do this on a Tuesday at 2 p.m.

01:22:02.720 --> 01:22:05.760
Pacific go over go over to the calendar you'll get just in your local time zone

01:22:05.760 --> 01:22:11.080
Jupiter broadcasting.com slash calendar Matt on Sunday we'll be we'll be

01:22:11.080 --> 01:22:16.600
chatting with one of the guys behind Gentoo and I'm hoping to have the new

01:22:16.600 --> 01:22:20.120
gnome 312 on my machine I don't know if it'll make it yet but I hope so we'll be

01:22:20.120 --> 01:22:22.680
talking about that thanks so much for tuning this week's episode of Linux

01:22:22.680 --> 01:22:41.840
unplugged we'll see you right back here next Tuesday


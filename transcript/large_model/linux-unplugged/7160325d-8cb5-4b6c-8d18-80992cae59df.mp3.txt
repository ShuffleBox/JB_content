I'm somehow full of admiration that you take
thousands of miles with the car just to go to a Linux fest.
Well, and to visit Linux Academy, too.
Well, I don't know.
Sometimes I actually feel like I'm insane.
But at other times, there is something really good for me
because I spend so much time on the computer.
And I'm always working on the internet
that to then be very, very much disconnected
for long periods of time and driving down the road
does do something good for me psychologically, I think.
It's sort of a rebalancing thing for me.
I will be right back.
I'm going to get a beverage.
Grab one for me, too.
Absolutely.
So we were coming down into Texas last night.
We hadn't quite made it yet.
We were still in New Mexico.
And it was about 100 degrees out.
And I got the high temperature alarm on one of my rear tires.
So I have four rear tires, two sets of Duallys in the back.
And one of them got to 124 degrees, which is pretty high.
It's not super crazy high, but that's pretty dang high.
And so that was the first time during this trip
where we pulled over and just sat for a while
while our tires cooled down.
And it was towards the end of the night, too.
So by the time we got back on the road,
the sun was setting, and it dropped about 80 degrees.
And the tires stayed fine for the rest of the trip.
But there was a moment there where I went, oh, crap.
And the thing that was wild about it
is just 45 seconds before I passed a Class A RV
on the side of the road with a blown tire.
Their tire, something had gone wrong, and their tire blew out.
And then not even a minute later,
my alarm goes off for one of my tires.
And I was like, I'm not even going to mess around with this.
So I pulled over on the side of the highway.
Lots of big trucks going by because it was a real big
commercial corridor.
So they're shaking the whole RV as they go by.
And we just sat there for about 40 minutes
while the tire cooled down.
That was the first moment where I was like,
maybe this is a little stupid.
This is a little dumb.
Maybe I shouldn't be doing this because it's always
a bigger push than you expect.
But at the end of it, I get to go down there.
I get to hang out with audience members,
and I get to go do Linux stuff.
And then I just get to go home.
And I just live in Austin for about a week.
And then that's kind of a unique opportunity.
So how could I say no?
All ready, all ready.
Did you get that beer?
Yes, I did.
I'm ready to go.
Well, let's start the show.
This is Linux Unplugged episode 252 for June 5, 2018.
Oh, welcome to Linux Unplugged, your weekly Linux talk show
that's definitely the hot box sauna edition.
My name is Chris.
My name is Wes.
Hello, Wes.
I'm chatting to you from Plainview, Texas this week.
And we have got a huge show.
Microsoft helped this week by buying GitHub.
We'll talk about Microsoft's $7.5 billion acquisition
of GitHub.
We'll talk about Nat Friedman, who he is,
and why you might want to know more
about him in the next few months.
And then we're going to talk about what happens to Adam now
that Google, or no, I mean Microsoft owns GitHub, which
owns Adam, which competes with Visual Studio Code.
It's a mess.
We'll talk about that.
And then we'll get into some project news,
including some news around KWin, the Linux
subsystem that's going to be on Chromebooks,
and something big for Nextcloud.
It's a huge, huge moment today for Nextcloud.
We'll tell you about that.
And then the most app picks we've ever had on the show.
It's an app pick blowout.
We've got so many app picks, you're
going to need tabs for days.
There's probably something in here for everybody.
And then, at the end of the show,
after we let all of this soak for a bit,
after we marinate in Microsoft's purchase,
now that Microsoft is going to own Electron,
how can Microsoft make it better?
What could they do?
Let's just say things work out, and they
are able to steward Electron into a direction that
improves it for everyone.
That could happen.
We'll have to wait and see.
And I'll get the Mumble Room suggestions, my suggestions,
and Wes's suggestions.
So that way, we can maybe, maybe come up
with something good out of all of this.
Because Electron is getting a lot of deployment
on Linux desktops these days, and now Microsoft owns it.
So I think that's definitely worth discussing.
But before we go any further, let's bring in that Mumble Room.
Time appropriate greetings, Virtual Lug.
What's up?
Oh, hey.
Hey, oh.
Oh, hey, indeed.
Well, what's up is that it's like 100 degrees in this room
right now.
That's what's up.
That was expected.
We won't complain too much.
Wes, I don't know really where to start.
I'm not quite ready to get into the GitHub stuff
yet, because it's just such a big story.
I feel like it's a big story.
We should warm up with something.
Like, you and I do this on the TechSnap program
as we have these warm-up stories to kind of get us rolling.
And I've kind of set one aside this week that's
not super Linux-specific, but it is kind of mind-blowing
where all this stuff is going.
And the core tech runs on Linux.
It's from Facebook.
And it's their FAIR system, which
is the Facebook AI Research.
And their scientists yesterday unveiled a neural network
capable of translating music from one style and genre
and a set of instruments to another.
So you take something that starts out with like Bach.
And it's one of his symphonies.
And it's symphonies.
And he's playing.
And the AI can translate that into a song played
on a piano in the style of Beethoven, for example.
So you can actually just, in a way,
translate the music from one set of instruments and styles
to another.
And FAIR becomes the first AI research team
to create a unsupervised learning method
to actually do all of this.
Their results are kind of mind-blowing.
And they're sort of patting themselves
on the back this week because it's huge for the AI industry.
If you think about it, it's something
that a music professional could probably do fairly competently.
But now you have AI doing it.
And their approach involves a complex method
of auto-encoding that allows the network to process audio
from inputs it's never been trained on.
Rather than trying to match pitch or memorize notes,
this unsupervised learning method
uses high-level semantic interpretation.
I guess another way to put this is you could say it's listening
and it plays it by ear.
Right, exactly.
It's kind of crazy in that respect.
That's kind of one of the fun aspects of some of these AI
projects is just where they interface
with things that are traditionally so human,
like art, and how we interpret that,
and then trying to reason about how they, you know,
to quote unquote, understand it.
Giving computers the ability to see and the ability to hear
and then make decisions based on that is the fundamentals.
And they're very excited about the progress they're making.
I, on the other hand, am a little apprehensive,
just like I am with Microsoft's acquisition of GitHub
for 7.5 Billy.
Now, that's in stock, so it's maybe less impressive.
No, that's still, that's, yep, just checked.
Still impressive, still absolutely impressive.
And today is the day after, the day
after we got the official news.
It was brewing all weekend.
They announced it yesterday, Monday, Tuesday, the 5th
of June, 2018, is the second day after this announcement.
And we've already learned new details
that we didn't know yesterday.
So the first thing is that they, I think,
the biggest thing that we learned today
is that Google was hot on the tail for this.
There was a bidding war between Microsoft and Google
for GitHub.
So think about that for a second.
Just that information right there, Wes,
how would you feel if yesterday was announced
Google bought GitHub?
You know, I don't know.
It's kind of complicated.
Both are sort of gray areas.
I might actually be happier with Microsoft buying them.
That feels weird to say, but if someone had to,
it could have been worse, I think.
No.
I can even give you the reason why Microsoft or anybody wants
it.
And it's to do with search for code references.
Microsoft, a couple of years ago,
you guys reported in here, I think,
a tool that allowed you to search for actual solution
snippets.
And Microsoft wants that.
And Google wants that, too.
It also gives developers for their infrastructure,
which is looking for developers.
Looking for developers, so those are the reasons.
I don't think anybody would have been a better buyer
than anybody else.
They are all terrible because the reasons they want it is.
No, seriously, I think GitHub, if a foundation was made out
of it, it would be great.
But somebody buying it, there's nobody
that's going to buy a business which
is founded on selling storage.
That's what GitHub is.
So, Dar, what do you think, though?
If you were going to have to pick between Microsoft
or Google, as far as open source projects go,
which one are you more comfortable with?
I would say Google, I guess.
And the reason for that would have
been just because Google at least has a legitimate reason.
Also, aside from demining your code as data,
reason, which is code.google.com failed.
It was terrible.
It closed.
So they need a replacement.
It wouldn't make sense.
Microsoft, they kind of have this whole tooling.
They're going to change GitHub.
It's going to be worse.
Yes, it would be cool if it was a foundation,
but that was never going to happen.
They've always been maybe not actually making
a bunch of money, but attempting to be a for-profit company.
GitHub is convenient.
I have no love lost.
So it really just seems more like business to me
than anything else.
And maybe it means we reevaluate it.
But that's exactly.
Google would have probably kept this convenient
if they only bought it for the code.google replacement thing,
because that's what they had with code.google.
It was just sitting there, and people could use it.
It was a back burner that they didn't mind.
Yeah, that also means it wasted away.
I think Microsoft will probably be a much more active
and probably better steward.
They have been doing a lot of Git things.
I think they actually care about Git.
There's obviously other reasons for this acquisition,
but their developers are already using it.
They're one of the largest open source contributors
on the platform, so I think it's in their own interest
to actually make it work pretty well.
What that actually means is now you're
going to be filled with Microsoft products all over,
and Git will change to accommodate the Microsoft tool
chain, which means that if you love GitHub right now,
it might not be as pretty in that future
when it's connecting with all of the tools you don't use.
I think that's definitely a likely possibility for sure.
So Nat Friedman, who's going to be running it,
said that they're going to remain an independent entity,
sort of like how LinkedIn has.
We'll see if that's going to be true.
Even find that there's another problem
with this whole situation, which these big corporations are
compliancy.
They're full compliant.
And remember the takedowns that GitHub had?
Expect more of those.
Oh, and by the way, in the future,
we probably don't need certain governments
to develop Stuxnet.
They can just inject in normal daily software
because they have control of the repos
and who gets to see the code in the first place.
So you're building from source?
Who cares?
So I think what we have here is grounds for serious concern.
But we don't have anything that's
even going to really change for probably another six
months or so.
The deal isn't finished until, at best, the end of the year.
And then at the end of the year, Nat Friedman takes over.
And he's been an open source since the 90s.
He writes on his blog, he says, I
was blown away to discover a free operating system that
came with an editor, a compiler, and a debugger.
All of the tools you need to be a developer and all
of the source code, it was an incredible opportunity
for a teenager in a small town in Virginia
to learn from the best developers in the world,
he goes on to say.
I spent 15 years working with Linux
and founded a couple of open source companies.
My first commit to GitHub was in 2009
when GitHub was just a year old.
Two years ago, I joined Microsoft
when it acquired Xamarin, a developer-focused company
that I started with Miguel Atacaza.
And he goes on to write about how GitHub will operate
independently as a community platform and a business.
GitHub will retain its developer-first values,
distinctive spirit, and open extensibility.
And he says, we're going to support any language license
tool, platform, or cloud.
And they're going to retain their product philosophy
as well.
Now, he's not going to run the place until the deal is over.
But you've got to give them some credit here.
They've made a lot of inroads with.NET Core,
with Visual Studio Code, with a lot of the other projects
they have up on GitHub that we don't even mention very often.
Plus, the Windows source code is up on GitHub.
And a lot of people have reached out to me
that work at Microsoft and said, we just use Git a lot
internally.
If they screw up Git, we're going to just go ballistic.
So there could be a potential for a new dynamic here,
a new Microsoft that we've witnessed sort of change
and evolve over the years.
And when Satya Nadella took over and the tone changed,
I was the biggest skeptic of all of it.
I thought, this is just marketing.
You know, a company doesn't just change on a dime
when you change out the CEO.
They have deep, deep, deep cultural beliefs.
But then over the years, we've learned
that there was a lot of internal layoffs, and retooling,
and refocusing.
And I ended up talking to individuals
that were fresh out of college that were brought in
that were using Linux at Microsoft.
It's possible they're not going to screw this up.
I think we have to also consider that.
Both things are possible.
Only one way to tell where we will just have to wait and see.
I guess.
I guess so.
My recommendation, still clone all your repositories,
keep a local backup, rely less on GitHub,
and hope for the best.
Yeah.
That's exactly what I did.
Yeah, and I think you're seeing a lot of people
this week say that.
I think a lot of people are saying,
oh, all right, I'm out of here.
I'm on GitLab.
I'm out.
And although PFSense just announced that they're
moving some stuff to GitHub, as a lot of people
are leaving, a few folks, like I know Michael Dominic has
considered this on Coder Radio, and now PFSense,
are moving over to GitHub to essentially,
from what I kind of read from this,
is to outsource GDPR compliance.
To just say, all right, well, they're handling those things,
and so now we're compliant.
In fact, it's the number one reason
PFSense lists on their blog.
They say, we don't have to worry about storing
any personal information about contributors,
and contributors don't have to worry about creating
an account with limited use cases.
That's the number one reason is GDPR compliance.
And then they talk about a bunch of other things
that people always talk about when they go to GitHub.
Yeah.
Well, I think that plays into it, right?
Where I think of GitHub a lot, kind of like YouTube,
where it might not be your favorite place.
It might not be where you wish that you had to find stuff,
but it just has that social component.
So yeah, people, either you're an open source developer
or a personal user, and you should already
take advantage of the decentralized nature of Git
and have your own local clones, or push things up
to multiple, or run your own.
There's so many options.
Or if you're a business, then it just kind of makes sense,
and it doesn't matter because that's a separate world,
and that's a private business agreement.
Yeah.
So are you a user of Atom?
I can't remember your text editor of choice.
Well, I kind of use all the things that rotates.
I have used Atom a little bit.
I don't use it all the time.
Yeah.
So that's been the big speculation is, well,
what happens with Atom?
Because you have, as they say in the corporate world,
redundancies here between Atom and Visual Studio Code.
Well, one of the core developers to Atom
tweeted, I actually don't know where he posted this.
I think it was actually on Discord.
Just to let everyone know, I've been given assurances
that Atom remains key to GitHub.
Our product roadmap is set, and the team
will continue all of their work.
So Atom continues on.
So you're going to have VS Code and Atom sort of duked out,
both based on Electron, both kind
of the same fundamental technologies trying
to accomplish the same thing.
They do feel slightly more redundant now,
but I suppose it's a large enough organization if there
really are this separate that it's sort of, you know?
They don't necessarily care about that too much,
as long as it doesn't suck up a huge amount of GitHub's energy.
Yeah.
I think both you and I follow Ben Thompson on SirTekary.
I think you follow him, too.
I can't remember.
Yeah.
And I've liked his recent takes on the shutdown of some
of the Windows teams at Microsoft and whatnot.
So I'll link in the show notes at linuxunplug.com slash 252.
Is that where we're at?
That's where we're at.
Um, so I'll link the whole thing in there
because it's super long, and I'm just
going to read you one of the last paragraphs.
But he says, what Microsoft wants from their purchase
from GitHub is fuzzy.
They want to be developers' friends in large part
because it has no other option.
In the long run, particularly as Windows continues to fade,
the company will be ever more invested
in a world with no gatekeepers, where developer tools and clouds
win by being better on merits, not
by being able to leverage users.
Do you agree with that?
You know, at least partly, I do think it will be.
It is fuzzy, and Windows has sort of to fade.
So it does kind of feel like a play there, too,
of we want to be relevant.
We want to be in these worlds.
And I think there's probably also a lot of tech startups
or other companies with a lot of MacBooks in there,
or maybe even Linux laptops that just don't have
that much of a relationship with Microsoft
unless they're using some of their tools.
So the further they can spread that,
it's more mind share and maybe a backdoor sales account
for the enterprise section, too.
So remember the prediction of Linux distribution
from Microsoft with the desktop environment, Windows desktop
environment?
Like in the past, they have, look,
the guy that is going to be managing
is a guy that came from Xamarin.
Exactly the point.
Microsoft is not acquiring companies
on the exclusive merits of the products that they have,
but oftentimes because of the human resources
without having to signal the market that they're
hiring for such positions.
Because you can't lie on the job advertisement
what the skills are required, and you
indicate what you're going to be working with.
Now GitHub is a team that deals a lot with Linux,
deals a lot with cloud, deals a lot of making good APIs,
and that just goes straight into the vision of making
that Linux distribution.
I would love to see it, just because it
would be such a massive disruption.
So I kind of hope you're right.
I kind of agree with Ben Thompson here.
I think this is what we are watching
as Microsoft continue to try to carve out
a new area of relevancy before they're really bleeding.
And I think they're being pretty clever about the way
they're doing it.
While they still have a great strong Windows customer base
and they still have plenty of dominance in the market,
they're moving into this new area.
And that's how I see the GitHub purchase playing
into all of that.
As far as the speculation about what's
going to happen to it, as far as deploy on Azure buttons
or integration with Azure, I'm sure some of that
is going to come eventually.
I want to table the Electron discussion,
though, because I think that, almost outside of all of this,
imagine for a moment if Microsoft had just come along
and bought the whole Electron technology stack.
Now, of course, it's MIT licensed and all that.
But we're going to talk about it for a moment,
just zooming out from GitHub and just talking about Electron.
But save that.
We'll talk about that later in the show.
But before we're still talking about GitHub,
let's talk about GitLab.
Now, a lot of the audience members
have either tweeted me, or they've
been talking to the Telegram groups, or on Coda Radio,
they emailed in a bunch.
And people are trying out GitLab like crazy.
And I think that's been the number one response I've seen
is, oh, OK, I'm moving to GitLab.
And GitLab, if you're not familiar with,
it is an open source core style business.
So GitLab itself is open source.
You can go install in the Linux box for free.
It's Git compatible.
It's pretty great.
Wes, you must have played around with it before, I'm sure.
Yeah, absolutely.
I'm a user of their free service as well.
So I have code both on GitHub and GitLab.
They've been doing a ton of stuff with their CI CD tooling.
They have some neat sort of continuous integration
just baked right in, as well as integration with Kubernetes
and other things.
There is still the fear, of course,
that as they've evolved to the open core model,
more and more things are not in that core.
Sometimes things that you get on GitHub
or some of the other platforms where you might want fancy
or merge support, that sort of thing.
So how much does it get you?
Yes, it's open source.
Yes, that's important.
It's also just nice, maybe if you care less about that
or if you feel that it's not as genuine,
it's also just nice to have another player that is
plausibly competing against GitHub.
And it's easy to move between them, yes?
Fairly so.
There's definitely differences.
But if you're not super tied into all the feature
sets of one side or the other, if you're just
using it for storing a repository and cloning it
and sharing it, then yeah, it's pretty easy.
Yeah, I think probably the biggest advantage,
it sounds like, to GitLab is that you can self-host it.
And this whole event is a reminder
of the massive centralization we're
seeing in the tech industry.
Now one of the top five tech companies now owns GitHub.
And I'm a believer of the narrative
that this was going to happen eventually.
If Google was going after them, too,
that just sort of doubles down on that narrative.
A lot of people online have been saying that GitHub should
have remained independent.
That's what made them great.
And I've been arguing this was always going to happen.
GitHub has had leadership issues for a while.
They've had money issues.
They've just sort of been primed for purchase
for a little bit now.
Yeah, right.
I mean, it ties back in.
They're a business.
They're just going to have to operate that way, whatever
the community wants, regardless.
And since self-hosting is such a big component of why people
are moving to GitLab, let's talk about Digital Ocean
for a moment, our sponsor, do.co slash unplugged.
You can get a $100 credit when you go there for 60 days
when you sign up with a new account.
This is a way for you to deploy GitLab in seconds.
I'll link you in the show notes to a one-click deployment
of GitLab and to a guide where you can build it yourself
from the ground up.
So whichever approach you like, you
can get started with this $100 credit.
And you can experiment with moving over.
And if it works for you, just keep it in production.
My favorite system that would be way more than you'd
need for something like this is $0.03 an hour.
You could probably get by with the $5 a month rig.
And with a $100 credit, that's going to go with a nicer rig.
Because you can just really play around with Digital Ocean.
They have all SSD systems.
They have data centers all over the world.
They have a great interface to manage all of this
and a really clear, easy, well-documented API
that there's tons of good open source applications already
built for.
So they bring all of that together with that dashboard,
with these one-click deployments,
and that documentation.
And you get the $100 credit when you go to do.co slash unplugged.
You can deploy lots of different distributions
if you want to build the system yourself.
You can attach block storage when
you need to add more storage.
They have a 99.99% uptime SLA.
They have Cloud Firewall so you can block traffic
at the network level before they even touch your rig,
which is brilliant.
That's how it should all work.
And they have monitoring and alerting built into.
So you can check on the metrics, get
alerted if something goes down.
And with global data centers, if you have people
that you're working with in a team around the world,
you can put something in their area that's super fast.
And with those enterprise SSDs, you know it will be.
So if you're ready to get started, go to do.co slash
unplugged.
Take advantage of our $100 credit.
Why not try out GitLab for a bit?
So I'll have in the show notes the how
to use GitLab one-click install image to manage your Git
repositories, or also the step-by-step,
build it all the way up from the system up.
Because they just have fantastic documentation.
do.co slash unplugged.
Big thanks to DigitalOcean for sponsoring the Unplugged
program.
So let's talk about the K-Win maintainer
that we often mention on this show stepping down,
Martin, who I think is a brilliant individual.
And he announced on the K-Win development,
or I'm sorry, the plasma development mailing list,
that he is stepping away from the maintainer position.
And he has several reasons in here that some of it
seem to be personal opinions, and some of it
seem to be experiences that he's had.
And they kind of come down to maybe the design group
sort of running away with the decision process.
He says, I really dislike the development Katie is taking,
where usability is the goal.
But we don't stop to see if something
is long-term maintainable.
After we develop it, can we actually support it
for a while?
When we started Plasma 5, the fundamentals of the project
were focus on the basics and only what we can maintain.
And we've moved away from that, he says.
And I don't know if that's true or not.
That's his opinion.
But he would seem to be in a position
to make that determination.
He says, for the usability project,
my wish is not to take every user request as a mission.
Instead, evaluate whether it makes sense for the project.
Perhaps also consult the domain experts
prior to writing patches.
It's way more difficult to say no to a change
if the patch is already there.
And when I read through his entire post here,
what I kind of took away from this
is there was some decisions around the log-in manager
and some borders and a no-border discussion
that he was left out of, for whatever reason.
Maybe it was a place he doesn't lurk or whatever.
And the design group created patches.
And it created a bunch of momentum.
And it was essentially the decision was made.
And then when it got in front of him and he realized,
well, wait a minute, we have serious technical implementation
issues with this.
Why wasn't anybody consulted about this?
It was too late.
And then it becomes sort of a political fight
because you have somebody who's got a precious baby that now
they're trying to get born.
And then you have somebody coming along
and popping their bubble.
So it creates a lot of feelings, I guess you could say.
I think so, yeah, right?
I mean, on both sides, right?
When you work really hard on things, you care about it.
And there's not always a right answer.
Yeah, exactly.
Because as a recent Plasma user, I've
been so happy with it that I hate to see anything like this.
But some of this does kind of strike me as true.
He says, we should strive for satisfying 90% of the user
base and not everyone.
Currently, we try to satisfy everyone.
This is a road to failure, in my opinion.
We're on the road to KDE 3's configuration nightmare
and creating an unmaintainable monster.
And I could kind of see that perspective
because I've been advocating now for about a year and a half
that we need to just forget the idea
that we're trying to find the new Linux user.
There is no such thing as the person who
is unfamiliar with how computers work
and is also buying a Linux computer
or building a Linux PC.
These two things do not exist.
They may get a Chromebook and may eventually one day
run Linux apps.
But we've always tried to design our desktop environments
and our applications for new users, for new users.
Well, the new users that are coming to Linux
are technical experts.
They're system engineers.
They're software developers.
They're enthusiasts who love hardware.
They're people who love to mess around with source code
and write free software.
It's people who know how to mess with computers.
And what his point is, and I kind of click with it,
is that perhaps Plasma has gotten on this usability kick
because of the years and years of Plasma's too hard to use,
too much configuration, and now they've run away with it.
Do you think there's something to this, Wes?
I know you don't use Plasma a ton,
but you've been using it more and more.
Yeah, I have been using it more and more.
I can see maybe a soft trend.
I don't know if it's as bad as this.
I just don't follow it that closely.
But I do think it's a legitimate concern, especially
for a large, long-lived open source project
where there's not necessarily one very careful,
curating, benevolent dictator sort of situation.
You really do need to only add things that you can maintain.
And as we've seen, as we're talking about with Gnome,
if you're not careful, if you do build on unsolid foundations
or add things that are going to increase your debt
and make things harder and less agile down the road,
it takes a long time to undo that.
Yeah, and hopefully Martin sticks around
because I've always really respected his technical opinion.
And he's always been willing to go to the mat
to defend what he thinks is the right decision technically.
He's also a really, he's just a good communicator.
And I think he's given us a lot of really interesting views
into what's going on behind the scenes of plasma development.
Yeah, and I'll link to his full post
because when you read it, you really
take away somebody who cares about the project.
And he's not like rage quitting and going away.
He's like, I'm still going to stick around
and maybe write a few patches and help out here and there
and answer some questions.
But I'm just not really enjoying the maintainer aspect anymore.
And you've got to respect that, too,
because you could just see someone after all these years
just saying, that's it, I'm out.
I rage quit.
And he's like, no, I'm going to stick around.
I'll still be part of the community.
So I respect that, too.
Now, I did just mention that Linux on Chromebooks thing
there.
Well, you know already, everybody's
been talking about how the fancy Pixelbook,
if you get in the dev channel, is
going to be running Linux apps like either now
or very, very soon.
But we weren't really clear on some of the lower end,
quote unquote, lower end, even ARM-based Chromebooks
until today.
The Samsung Chromebook Plus is getting Linux support
as spotted by users once again on Reddit.
If you have the Samsung Chromebook Plus
and you opt into the developer-only build of Chrome
OS and enable things that are labeled as beta
and then use the terminal, you can apt-get software.
And you can run Linux apps on this ARM-based Samsung
Chromebook Plus, which you can pick up used for like $300,
I think.
Wow, really?
Somewhere around there.
Yeah, so it's not the cheapest.
But it is an ARM Chromebook, which so far, this
has been limited to the x86 line,
or I guess you should say x64 line of Pixelbooks.
It's 2018, Chris.
It's 2018.
I know.
I got tweeted about that.
Stop saying x86, Chris.
I'm like, you know what?
He's probably right.
I could say i686, but I think I'll try to say x64.
So it was limited to the Chromebook Pixelbook before.
But now we have an ARM version of a Chromebook
that more average mortals can buy and afford.
You can get it off Amazon right now.
And it's probably not going to be the same range as an x64
Pixelbook, but it's still going to be a bunch of apps.
And it immediately is turning that thing
into a much more useful tool.
Yeah, that was what I thought, too, right?
Suddenly, I wasn't really interested in Chromebooks
before, maybe for other people in my life, but not for me.
But now, maybe like as a travel laptop,
or you just need something spare while your main machine,
you're switching machines, or getting something repaired,
or just something to throw in your bag
and not have to worry about, not have to futz with.
Once you've got it, if you have a terminal,
and you have Chrome, and then whatever other Linux apps
you need to get your job done, perfect.
Yeah, you and I have talked about this arrangement
in the past, where you've got a lower end, front end laptop,
and then back at home, or in the office, or in my case,
the studio, you've got a much more powerful machine
that you remote into and do the actual work on.
And that's what I've been doing for this whole road trip.
I'm on an XPS 13, which is like three revisions old now,
or four revisions old now, I don't even know anymore.
And the real work is all being done back in the studio.
Like when we render video, or encode audio,
I'm executing those jobs on six core machines in the studio,
and not on my little two core XPS 13 here.
And it is time for me to replace this thing,
because I busted the side and stuff,
so it's kind of falling apart, and God,
is it super hot right now too, it's really warm.
It's funny, like everything's hot around me.
The microphone is hot to touch, like mics don't heat up,
but this one is hot to touch, everything's super hot.
So if I were like burn through my XPS 13 on this road trip,
which is kind of falling apart on me at this point,
because I dropped it, I almost could make it work
on a Chromebook, I could almost do it.
I could almost do this whole road trip.
I couldn't do unfilter, or this show,
but I could do almost all of,
I don't know, maybe I'll do unfilter on a Chromebook
if I had just a couple of Linux apps.
I mean, it's getting really serious if you do big tasks
on more remote high-end systems, or on a server.
There's also maybe like a weird,
I wouldn't have thought this,
but maybe there's a nice aspect too about like,
if you spend all the time configuring the studio machine,
you get that just how you need it,
and then if you can just pick this up
and not have to do much, not install an OS,
not customize Plasma, which sometimes is nice,
but if you just use the machine while you're traveling,
or not every day, it's kind of just like you can buy it
from a store, you get maybe the security
where some of the other things are easier, or simpler,
or just managed for you, and that's kind of convenient.
If you travel a lot, that kind of flexibility is,
I'll talk about it more in a second,
but you know, I'm going to Linux Academy
to help them move their broadcast system
from a Mac to Linux, and one of the things
that I talked about is, I said, when we get a PC,
let's get something that's Linux compatible,
but keep in mind, one of the advantages now
that we are gaining by moving from a Mac to Linux
is we now have general availability of PC hardware,
so when you go somewhere for a live Linux Academy event,
like when you fly to Denver for an event,
or you fly to California for an event,
and you get there and your PCs died
because something got rattled on the flight,
or you ship it and they screw it up,
because that happens every other event to us,
literally, it's so bad that we try to carry
all of the equipment in the RV whenever possible,
because when we ship it, it just constantly gets damaged,
even with serious Pelican cases, real packing,
I mean, Noah really knows what he's doing with this stuff,
and it still gets damaged, and so I said to him,
I said, the biggest advantage you have now
is you can go into a store, and if it's got
the right components, you can buy it right there,
take it back to your hotel room,
load Kubuntu on this thing, and within two hours,
it's broadcast ready, because it's this
general availability of hardware,
and that's what I also dig about the Chromebooks.
If you could make that workflow work,
you know, if I burned out a Chromebook
sitting here right now, or I dropped it
and it really got damaged, or if I was on a flight
and it got damaged or lost, I could just replace
that machine, it would be an expense,
but it would be a manageable expense,
and I would be right back up and working.
So I really, I think this is one of those events
that it's like the big bang, like it starts somewhere,
and you're like, oh, that looked like a little explosion
over there, and over time, it expands
into this massive sea change.
I think it could go that direction.
I don't think it's gonna be like a smartphone revolutionary,
but I think it's gonna change the way
a lot of people work on computers.
In two years, we'll just be quietly talking away
on Chromebooks and not have a second thought about it.
Speaking of two years, today, Nextcloud
is celebrating its second birthday.
732 days later, they say they've shown
their ability to execute on their vision.
Nextcloud is widely recognized as the most innovative,
forward-looking projects in the open source world,
pushing boundaries in the areas of security, collaboration,
and communication.
Their company's grown to more than 40 people,
and one of the things they're most proud of
is when they started out with Nextcloud,
they promised to make upgrades work,
and they think this area's really stood out,
and they've kept that promise, and within a week
of Nextcloud 13, over 10,000 servers
had already successfully upgraded
to the current version, and they also
say they're proud of their security insights.
They've started a bug bounty program,
and in the two years, they've paid out $8,000
to security researchers with over 100 reports
that they've closed as a result.
It's a pretty cool milestone, and I've
been using it more and more.
Since Fedora 28 came out, actually,
I sort of doubled down on my Nextcloud usage
and had it going in the background as a test.
So it's a really neat project, and when
you have a need for it, it can fit that niche really well.
You're making me think, though, maybe I should give Nextcloud.
I tried it back, I guess, about two years ago
when they were first Nextcloud.
I haven't run it for a while, though, so these features
are looking pretty nice.
I say it is worth a go, and now that you
can throw it up in a container in just a few minutes,
an official container from them, I think it's kind of worth it.
Yeah, that lowers the barrier to entry considerably.
So I am here in Texas, sweating in a way
that I have not sweated very many times in my entire life.
It is unbelievably hot.
It's about 101 degrees where I'm sitting.
And because it's Texas, it's Plainsview, Texas,
there's really no trees to be had.
We just made it into Texas this morning, actually.
And we decided on the way down to our current spot
to maybe go get some dog food for Levi
because we were running low.
And that was a bad decision, Wes.
Oh, no, why?
Well, I'm trying to get here to do the show,
and I've got to get connectivity tested,
so we've got to feed Levi, though.
Got to get food for Levi.
We don't want him hungry.
No.
So as I'm pulling off the ramp, it's too small.
The lanes are too narrow.
My rig doesn't fit in them, so I'm kind of in a lane and a half.
And I'm pulling off the off ramp,
and my back two doolies on the passenger side
go over a little curb, just a little curb.
Just a little one, sure.
And it tosses jupes really bad.
It's like if a massive wave were to just crash up
along the side of a boat because it's just this huge shift.
Like, whoa, the whole rig leans all the way to the driver's side.
And that's when the new upgraded suspension kicked in,
as if we were intentionally testing it.
See, we have these new sway bars.
And the way sway bars kind of work
is the amount of force that's applied into them
is then applied backwards to sort of correct the sway,
if that makes any sense.
And they really did their job.
I mean, we swung back up real quick, right back into place.
And much better than before the upgrades,
we would have swayed back and forth like a boat,
like swash, swashed right to left, boom,
which is really hard to drive.
It was really bad because it's a 25,000 pound RV
on top of a suspension system.
But the upgrades really helped that.
They resolved this.
There was no swaying back and forth.
It was right back up to the top.
But in that swing back to the right position,
because the amount of force that gets applied to the sway bars
is also then used to sway back, it sprung us back
like we came out of a pinball spring.
And everything dumped on the passenger side of the RV,
which is where our kitchen and our bathroom is.
Everything came out of the fridge.
It came out of all of the cupboards.
All of our food came out, all of our bathroom stuff
like vitamins that were in little pill jars,
Q-tips everywhere, the Tums bottle exploded.
It was just everywhere.
Beard oil went spilling.
It was the worst incident we've ever had on the road.
And it was thankfully recoverable
because it's all in a contained space.
All the slides are in, and it's not a very big rig.
So all I had to do was get us into some shade
because it's 101 degrees outside,
and it's just bacon when you stop moving.
And so I found some shade alongside the pet store building.
And for about 20 minutes, we just sat there
and had to clean up all the stuff,
but it all back away, throw a bunch of stuff,
stuff that got broke.
So that was a bit of a bummer.
Was there any like liquids that spilled all over
or anything like that?
Oh yeah.
The beard oil spilled, some water spilled.
Yeah, it's okay.
It happens, you know, sometimes.
The important part, did Levi get his food?
And did he like it?
Did he like it?
Yes, yes, all those things.
And he got to walk around the pet store too,
which he liked quite a bit.
Oh, perfect.
Yeah, yeah.
But now back, we were back on the road,
heading down towards Texas Linux Fest,
and we've reached Plainview,
which might be the actual hometown of Levi.
Plainview is on his paperwork.
So we may be in Levi's hometown right now.
And then he made his way up to Washington
where we got him from a rescue.
And we're in this little RV park called the hitching post.
I'm going somewhere with this story.
And when we got here,
we were a little rattled from that whole shakeup.
We'd already cleaned up, we were rattled.
When we got here, we talked to the manager, Karen,
and we said, we'd like to buy a night
so we can just park and hook up
and get some air conditioning because we're dying.
And I'd like to have power to do the show and whatnot.
And Karen said, well, you're just working?
Yeah, yeah, we'll just be here for about five hours or so.
She says, you know, just go find a spot and park.
You can just, don't worry about paying.
You can just stay there for free.
Wow.
Yeah, so we have 50 amps of power, great cell reception.
I can see the cell towers from here.
And 50 amps so we can run both air conditioners
when I'm not recording.
And we got running water for a little bit.
Well, we just sit here and kind of recharge.
And then we have about nine and a half more hours of driving.
And then I'll be in Austin for Texas Linux Fest.
That is so exciting, wow.
Yeah, yeah, we're gonna try to drive more at night
for these last couple of days because it's so hot out
that it drops to about 80 degrees at night
and the roads cool down, so your tires cool down
and all that kind of stuff.
So gonna be doing some nighttime driving
for the next couple of days.
After the show, we're gonna hit the road
and try to put in about five hours tonight if we can.
It's the last grind, Wes.
It's just a grind at this point.
Nothing can stop you now.
And hopefully you'll meet additional really nice Texans
who are just doing you all kinds of favors.
You know, we've already got a good group going.
If you're gonna be in the area,
jupiterbroadcasting.com slash Texas for our Telegram group,
we've got a really good group going.
And then also, the other reason I'm going down to Texas
is for Linux Academy.
Linux Academy has just been growing like crazy.
And as they've brought in more people
and they've done live productions,
they have some productions where they have eight remote hosts,
which is just mind-blowing, complicated kind of stuff.
And as they've brought production people on,
of course, they're trained on how to do all the stuff
on the Mac.
And they're trying to go back and write these ships
as they've expanded and try to get everybody back
on the Linux bandwagon.
What's really, really awesome is I've been chatting
with a couple of individuals down there
and they're totally on board.
Like, there's no resistance.
They're all about it.
They think this is gonna be great and they wanna do it.
And so we started chatting and they said,
yeah, could you come down here and help us move
from macOS Wirecast to Kubuntu OBS, exactly what we've done
for Jupiter Broadcasting.
So I would love to.
So after Texas Linux Fest, I'm going up to Keller
and I'm gonna hang out at the Linux Academy for a bit.
I'll be parked in their lot, boondocking there,
doing shows and converting their broadcast systems
over to Linux.
And I think it's gonna be a ton of fun.
It's gonna be super hot.
But so that's like phase two of my trip.
And then phase three will be the drive home,
getting back up into Washington where I can't really,
I can't even imagine it's like 65 degrees right now.
It sounds so wonderful.
But let's talk about Linux Academy before we keep going.
Linuxacademy.com slash unplugged.
Go there to sign up for a free seven day trial
and you can support the show.
Linux Academy is going to be at Texas Linux Fest.
In fact, if you go to their blog,
they've posted their track, their schedules for Friday
and Saturday and some information about how you can meet
up with them and if you want to find me,
a lot of my time at Texas Linux Fest is going to be
at the Linux Academy booth.
So that's sort of your surefire way to find me
on the weekend if you're not in our telegram group.
So check out Linux Academy.
It's a platform to learn more about Linux
and they're a company that's super passionate about it.
They really started because they wanted to spread
the word about Linux and Jupiter Broadcasting
had already started a podcast network about Linux.
Really, and they're like, well, how else can we do this?
They got together with educators
and they got together with developers
and they created this platform that's just been growing
and growing and gotten a ton of industry reception,
like just super well-received, really well-respected.
It's a name on the resume that matters
and they have public profiles where you can demonstrate
to potential hires or clients the things
you've accomplished at Linux Academy.
So go to linuxacademy.com slash unplugged,
get a seven day free trial and try out those hands-on labs.
And if you want to know more about their Linux Fest
Texas plans, well, then you can go over to their blog,
linuxacademy.com slash unplugged.
Okay, we have an inappropriate amount of apps.
We have a disproportionate amount of app picks.
People have been wanting app picks
and holy crap, do we have some good ones.
And I kind of have like a mix in here
and Wes threw some in here and it's just, it's great.
So let's start with ones that were put together
by the one and only Martin Wimpress, Mr. Wimpy.
So the first one is a snap that he put together,
which is steam for windows, soaked in wine
and all snapped up.
So it's the windows version of wine
or it's wine with the windows version of steam
all ready to go.
You install the single snap and it's steam for windows
for Ubuntu, Fedora, Debian and all the other major
Linux distributions that can run snap.
So that's pretty great.
Now the companion part to this snap
is Trackmania Nations Forever,
which has been soaked in wine and snapped for Linux.
This is a racing game that might,
if you saw it, it would look like a higher resolution,
better looking version of Mario Kart.
And it's a lot of fun
and it's now available as a snap as well.
I got kind of a gaming thing going a little bit this week.
It's not all games,
just a little bit of a gaming thing going this week
because I just had an itch
and Wimpy happened to put these together
and I thought this whole idea is worth talking about
where they've taken wine and they've taken steam
and now a game and like you can,
you can kind of build it all together like Lego blocks.
Isn't that kind of neat?
We're living in the future.
This used to be so hard to do.
You sort of had to know all the pieces
that you needed to wire together.
Just getting wine working right sometimes can be difficult.
So all you need is snap and you probably already have it.
If you are on the snap pipe train, then wow.
Yeah.
Okay, so this is the last gaming thing I have.
Everything else is all serious stuff,
but I wanted to mention Overload.
It's on steam and gog.com.
It's a $30 game.
So right there up front, this isn't free.
There's nothing about it that is open source,
but this is a remake from the original creators
of the classic game of Descent.
It is Descent for 2018.
Overload combines intense action
with awesome graphics and effects
to create the ultimate zero gravity shooter.
So you're flying around in this cool little spaceship,
flying through like mines and tunnels.
It features an awesome single player story campaign.
It has a survival mode, which is a lot of fun.
They've brought online multiplayer and just for wimpy,
they've also put VR support into it,
as well as a bunch of customizations and stuff
that were never really possible with the original game.
I don't know if any of you guys ever played Descent.
This is one of my all time favorite games growing up.
Played this with my dad a whole bunch on the computer.
It was one of the classics and now it's been reborn, Wes.
Interesting, I have not played it, but it's reborn.
I might just have to give it a go after the show.
While you're just leaving away on the road,
I'll be having a wonderful time gaming.
GOG.com and it's also on Steam.
I like it on GOG just because you can download the binary
and you don't have to be logging in Steam.
It's so easy.
Yeah, nothing like that.
All right, Geeta, I think is how you say this.
It's get with a cup of tea.
A painless, self-hosted git service.
It's a community managed fork of GOGGS?
What's, I'm assuming it's something written in GO,
but do you know what GOGGS is, Wes?
A painless, self-hosted git service.
What, well then that's perfect.
Yeah, this is something a little simpler
than GitLab is kind of what I grokked, am I correct?
Yeah, yeah, it's not so fully featured.
It doesn't have all those enterprise things
and a paid plan that you can get with support and all that,
but if you just need somewhere to stick some code
and file issues and manage releases and pull requests,
it's got it.
Yeah, that's kind of cool.
At git.io, G-I-T-T.io, or I have a link in the show notes.
And then this is the one you found this week
and I'm like, oh man, I want this.
Already I want to just mess with this.
I don't have a chance while I'm on the road,
but this looks really good.
PulseAudio DLNA, a lightweight streaming server,
which brings DLNA and universal plug and play
and Chromecast support to PulseAudio on Linux.
So once you get it all set up,
it just detects the DLNA device or the Chromecast
and they show up as a PulseAudio device
that you can just set your output to.
Or because PulseAudio is kind of cool these days,
you could load Puva control and you could just say like,
take Spotify and just send Spotify to the Chromecast.
This was a great find, Wes.
I know, it's actually super useful.
I'm using it right now in case I need to get up.
I've got my Chromecast loaded up with it.
I've got you on it so I can get up, walk around the room,
go grab another drink and still keep up with the show.
That's how you did it.
I noticed in the pre-show that when you got back
with the beer, you knew what we were saying.
You're using this right now?
That's right, my secret is out.
You clever dog, you clever dog.
Yeah, so behind the scenes over the last few weeks,
Wes built out a great little home studio
that he can broadcast from while I'm on the road
because why have him drive all the way up to the studio
while I'm gone?
Why, I mean, that's just, first of all,
he's been doing that for so long,
it's time to just take a break from doing that
to begin with, but second of all,
like when I'm not there, what's the point?
Nobody's gonna be barbecuing.
Yeah, the main attraction is gone.
Yeah, so this is really cool.
So I love how you're sort of making this space
into like the ultimate Wes Payne broadcast setup
because this little piece here,
for people who don't really do shows
that are live like this,
like there's no stopping once this show starts.
And so every now and then, you know, you gotta get up,
you gotta get another beer, you gotta take a leak.
Sometimes Chris is running his mouth for a bit.
But you don't know what he says
if you put down the headphones.
So, but you did it right
because I don't hear it in the background at all.
So you gotta turn down enough
where it's not getting picked up.
So, well done.
Thank you, sir.
Is there much of a delay?
No, it hasn't been too bad.
I haven't tested anything that's like super synced up,
right, for this use case.
It just needs to be, you know, within a couple seconds.
Yeah, and if you're doing something like music,
you know, like Spotify or your local music library,
you don't even care about any kind of latency.
It's great for that.
So again, it's PulseAudio, DLNA,
and we'll have a link at linuxunplug.com slash 252.
All right, now while we're in the terminal,
let's take a look at WTF.
Yep, WTF, a personal information dashboard for your terminal.
And it is everything you would want from like a,
like a, remember Google start page, their IG start page?
Yeah, it's everything you'd want
from like one of those old classic web portal pages
where it gives you your calendar, your to-dos,
last time you've chatted with your friends,
in this case, some local log files, mail,
recent GitHub check-ins, things like wifi status.
This is a heads-up terminal-based dashboard
that is like an overview of a lot of little things
that you would want to check on from time to time,
not all the time, but are very important.
That's sort of how they describe themselves.
So they have examples in here of like your to-dos
and recent chats and all the kind of things
you might want to just be able to take a glance at.
It's just a, it's just honestly, guys,
it's a badass looking terminal app, is really what it is.
It's just a badass looking terminal app.
And if you want something up on your screen,
that looks awesome on your virtual desktop
that you can switch over to super quick,
I'm gonna say this is one of them.
Yeah, if you have like an extra monitor
that you just don't know what to do with,
and you have a lot of things going in the terminal,
you might as well just have this running.
Yeah, yeah, so there you go.
So Steam, Steam, Soaked in Wine,
Trackmania Nations Forever, which is snapped up with Wine,
Overload on GOG, Git T, which is a simpler GitLab
alternative, GitHub alternative, PulseAudio DLNA,
Lightweight Streaming Server, which brings DLNA
and Universal Plug and Play and Chromecast support
to PulseAudio and WTF, a personal information dashboard
for your terminal.
That's a strong list of, I don't think,
I mean, that's more app picks than we really have any right
put in a show, so go get links to all of those.
Over in the show notes, now I did say I wanted to talk
about the bigger question about what happens
with Microsoft now owning Electron and the fact that
really any major application that is an industry application
that's come to Linux recently has pretty much
been an Electron.
Looking at you, Slack, and looking at you, Skype,
and a whole bunch of others that are all based on Electron
that we've talked about a lot on this show,
Mailspring, and many more, IRC Cloud.
Boy, I just got a whole bunch of Electron apps
stuck in my throat, because it's like I have tons of them
on my desktop or something.
So before we go any further, I want to take a moment
and I want to thank Ting.
Ting's making this entire show possible right now,
linux.ting.com.
They are a mobile provider that makes sense.
It's simple, you just pay for what you use.
It's smarter than unlimited.
You use less, you pay less.
The average Ting bill is just $23 per phone per month.
And the reason why is it's $6 a month for your line,
and then your minutes, your messages, and your megabytes.
Whatever you use, that's what you pay for.
They have nationwide coverage.
They have CDMA and GSM.
So yesterday, I was doing Koda Radio from the road,
and I was on their CDMA network.
It was just the better network in that area.
I was kind of surprised.
I thought it was going to be GSM.
Today, where I'm at, I'm within throwing distance
of a GSM tower, I'm getting unbelievable, unbelievable
performance on their GSM network today.
30 millisecond ping, which is great for a cellular connection.
21 megabits down, 22 megabits up is what my Ting GSM connection
is today.
They are so perfect for somebody like me,
because I don't really need my Ting data for almost any time
during the year, except for moments like this.
Then I can pick between their GSM or CDMA network.
So you just pay for what you use.
They have a great control panel to manage all of it.
And they have a bunch of devices you can buy or bring directly.
And they have a review up right now
on their blog of the Moto G6, which is a sweet looking phone.
It's $249 if you buy it from Ting directly.
But if you go to linux.ting.com, you get it for like $224.
This is a killer Moto phone.
They have a review on their blog right now.
Just a couple of things that stood out to me.
It's got the headphone jack.
It's got a 3,000 milliamp battery and turbo charging,
so it charges in super quick minutes.
It has a really nice 5.7 inch screen.
It's got a 2.1, which is 18 by 9.
I don't know the math on that.
It's weird.
Aspect ratio, nice, fast processor.
And you have the ability to hook up
Moto mods to this thing, too.
It's a really cool looking phone.
They have a review up on their blog.
Start by going to linux.ting.com.
You can bring a device, and you can get $25 in service credit
or you can pick up a device.
I, if I was searching for a phone right now,
would seriously look at that Moto G6.
For $224 when you go to linux.ting.com,
that's a great deal, linux.ting.com.
So how can Microsoft improve or evolve Electron?
Now that they own GitHub and GitHub owns Electron,
it's now a Microsoft product.
And I have a couple of ideas on things
that they could do to make Electron better,
specifically for Linux, too.
But I doubt those things will happen,
but I might mention them as well.
And I don't know about you, Wes.
Did you have some before I jump off?
Like, I don't want to just run with them,
because I want to hear some of your ideas, too.
But what do you think Microsoft could
do to just improve upon Electron or maybe even just evolve it,
like just reasonably make it better?
That's a good question.
There's a lot of potentials here.
I think they do have a lot of experience at this,
especially having built Visual Studio Code.
I feel like they probably have some good opinions about what
their limitations that they see with Electron
is, and I will just say Visual Studio Code, it's a good editor.
It's snappy.
It may not be for everyone.
I don't actually use it that much,
but every time I have used it, it's
been a really nice experience.
So I think they're in a good place
to just take care of it, to provide maintenance,
to just generally improve it even in its current form.
Some things I would like to see is
there have been a couple of vulnerabilities in the past,
so I think maybe a tighter eye on security,
and just make it more minimal, as few resources as it can use.
Find some clever ways to just make it less impact,
because if we're all going to run like 10 of these
all the time, I would like it to be a little skinnier.
Maybe something more radical also
is a huge amount of the appeal, right,
is that you get to use technologies
you're already familiar with.
You get to use JavaScript, HTML, CSS,
and so if you're already doing that,
you're already building a web app.
There's some other competing technologies in that space,
things like React Native comes to mind in particular.
So if they were able to keep some
of the easy workflow of doing that,
but then actually render more native components,
that could be a huge win.
So that's sort of in the lines of what I was kind of thinking
they could do to it.
And I could see this going a couple of different ways.
I could see them changing it so that way you
could have a modular back end, so it's not just Chromium.
I mean, this is Microsoft after all.
Maybe they'd make it so that way you could run Edge as a back
end.
Electron on Edge, yeah.
Or maybe if it's modular, it could also
support the Gecko engine or whatever
Mozilla's engine is now.
Because if they make it an interface or something
like that, that could be kind of cool.
You could even have maybe even some open source,
other just smaller engines that maybe they're lighter weight,
they're more purpose built that could make it safer.
Because it's such a large attack vector.
Yeah, exactly.
You could just do minimal if you don't
need all the fancy features or some
of the performance of things like that if you could just
have something smaller.
Yeah.
Or what about even maybe being able to use
a different language altogether than, say, JavaScript?
Maybe something, I mean, you could
see how they could maybe do.NET Core, of course.
But maybe it could also be something else,
like, I don't know, my favorite Rust.
That could be kind of a really big improvement is change
some of the tooling that you're using
to build these apps that are maybe a little safer tooling.
I think multiple browser back ends,
if you could decouple it somehow from Node and JS,
I think that would be worthwhile.
And I'm sure they'll come up with all kinds of other things
that could potentially happen to it.
But if anything dramatic happened,
at the end of the day, it's an MIT licensed project.
It could just, we could have free Electron or something.
So there's not a big risk.
Like, there kind of is with GitHub here,
or like there was with Skype.
Like, Skype is now a really different product
than Skype was before Microsoft bought it.
Yeah, right.
But yeah, we don't have to worry about it.
If they take Electron in a way that we don't like,
well, we kind of don't like it already.
And it's open source, so we can keep the version
that we do tolerate.
Yeah, I'd like to know the audience's ideas too,
linuxunplugged.com slash contact.
There's probably a lot of ways you can improve Electron,
including I would love to see lighter weight backends
and things like that, or even just more secure backends.
But it's sort of the bigger, I feel
like it's a bigger story for me personally,
that they now control Electron.
I'm not a GitHub user, really.
I mean, obviously I have a GitHub account.
We have some Jupyter broadcasting projects on there.
But it's not part of my daily workflow.
But Electron apps are part of my daily workflow.
Like, significant changes there, for the better
or for the worse, would directly impact my daily workflow.
So it is one aspect of this purchase
that I'm watching a little bit closer.
And I'm a little spooked that so few people
are kind of talking about it.
I know it's only day two and stuff.
But it seems like it should be at least a larger conversation.
But everybody's so busy freaking out.
And I think they're still in shock.
Yeah.
If I could write up a prescription though,
I think you've made some good points.
And I think I would say modular backend,
so that way Mozilla could maybe write a backend.
And the open source desktops could perhaps
write a backend.
WebKit could, instead of having Chromium,
it could be like a smaller, tinier WebKit backend,
perhaps, something like that.
Yeah, anything to streamline it.
MumbleRoom, do you guys have any suggestions
on what could be done to improve Electron by Microsoft?
Or maybe how they'll mess it up too?
I mean, that's also open.
Improvements to Electron?
It's almost a joke.
You don't think it's possible?
That's why?
I mean, just kill Electron in the first place, please.
Yeah, maybe.
Well, maybe we'll see an exodus there too.
As people are trying to exit out of GitHub,
maybe we'll see an exodus out of Electron.
Doubt it, though.
It seems like the momentum is already pretty strong there.
All right.
Well, I think that's just about everything
we have for today's episode.
Another on the road edition of the show,
which was much easier than last week.
So much easier.
Our magical, unnamed, officially unnamed editor
did unbelievable work last week.
Like, really just top notch.
Yeah, if you heard the live show at all
and then caught the download, it didn't maybe
sound as good as it could have because I was
in a loud, echoey, tiny hotel room.
But it was a remarkable recovery based really
all on the skills of our unnamed, very, very good
editor.
So thank you to whoever that may be who has yet to be named.
You know who you are, and we are grateful.
He's done a really good job on last week's episode.
Anyways, thank you, everyone, for tuning in this week's episode
of the Unplugged program.
We'd love to have you join us live.
We tend to do these shows right here on a Tuesday.
It's kind of a Linux sandwich, because you've
got Ask Noah, who comes in right as we're kind of wrapping up.
And the mumble room keeps rolling into that show.
The chat room keeps rolling into that show.
And then he starts taking calls.
And then who knows what happens.
I suppose that's up to you.
So you can hang out with us, and then you
get a little Noah afterwards, sort of like your dessert,
your brown bear dessert, brown sugar.
So I would love to have you join us.
Go to linuxunplugged.com slash contact
to send us your feedback.
I'm trying to remember all my URLs before we get out of here.
Go to linuxunplugged.tv to watch it live.
Jupiterbroadcasting.com slash calendar for where you can
get it converted to your local time.
You managed it.
I know.
You know, Wes, it's because of you.
It's because of you, holding the fort down over there
in Seattle, keeping it real.
I've got all my clocks set to West time right now.
So that way, you can keep me straight.
But thank you so much for tuning this week's episode
of the Unplugged program.
We'll see you right back here next week.
And we'll see you soon.
What about a way where you could, I didn't think about this in the show, but if you could
use the same backend for apps where the security made sense or you trusted it, so you could
just have less copies of all that stuff running.
Oh, interesting.
So it's like a shared backend, is what you mean?
Yeah.
Closer to just tabs in a browser, but maybe with some of the same integrations that we
like from Electron.
You'd have to be careful.
I don't know if it's feasible, but worth a shot.
Seems like it would reduce RAM usage too.
Yeah, exactly.
Yeah.
All right, JBtitles.com, let's name this thing and then I can turn on my air conditioning
and peel myself out of my chair.
Oh, Texas.

You know, I came across something kind of interesting today.
Do any of you guys in the mumble room ever struggle with like anxiety problems or things
like that?
Anybody ever have battle with that kind of stuff?
I know like it's kind of not like a normally socially acceptable thing to talk about, but
I think a lot of geeks and probably the geekier you are sometimes, the more likely you could
be to have some sort of anxiety problem.
Maybe there's social anxiety, maybe it's just, you know, stress anxiety.
I found a really interesting article today that kind of put it all in perspective that,
you know, it felt like it connected me to one of the OG geeks and that is Darwin.
There's a post over on brainpickings.org that was posted on the 28th of last month and it
goes into detail on Darwin's struggle with anxiety.
And there's a couple of interesting things in the article that I found.
So here is a quote from Darwin that he wrote in 1865.
He says, for 25 years, extreme spasmodic and daily and nightly flatulence, occasional vomiting
on two occasions prolonged for months.
Vomiting proceeded by shivering, hysterical crying, a dying cessation or half faint and
copious pallid urine, I'm not even sure what that is.
He says, now I have vomiting and every passage of flatulence proceeded by a ringing of my
ears.
He says, I have nervousness when E leaves me and E refers to his wife.
He would be stricken with horrible anxiety.
He goes on to say that, this was in the Chronicle of Darwin's Problems, it says, Darwin was
frustrated that dozens of physicians beginning with his own father had failed to cure him.
By the time he wrote to Dr. Chapman, Darwin had spent most of the past three decades during
which time he struggled to write on the origin of species because of his anxiety.
He was bound to his household based on his diaries and letters.
It's fair to say he spent a full third of his daytime hours since the age of 28 either
vomiting or lying in bed because of crippling anxiety.
You know, you hear a lot about these historical figures but you don't ever hear about this
part do you?
You never hear too much about the background.
And their own personal struggles like this.
Oh yeah.
A lot of people have struggles with anxiety.
I for one am somebody who suffers from anxiety disorder, not otherwise specified.
I've actually been diagnosed and yeah, I can totally relate to that.
Do I believe in Darwin's philosophies?
No.
That's just because of all sorts of other factors but in terms of struggling with anxiety
I totally get that.
And I think it's something that a lot of intelligent people are probably afflicted by a lot too
because your mind maybe wanders more than it should, or faster than you can control
it in some cases.
I have described that over and over again to friends and family is that like at night
my mind will just take all sorts of different paths which is why I have to read before I
go to bed otherwise I don't sleep.
You got to do what I do.
Yeah.
Just call up Aaron Saigo and then hang up after he answers the phone.
Yeah.
That's what makes me feel better.
Huh.
He's in here with us.
Hey there, Aaron.
Hey, I always wondered if that was you.
Yeah.
I thought maybe you'd recognize the breathing but it's fine, I hoped.
I'm glad you could join us today.
Congrats on the new project, by the way.
That's very cool.
Oh, thank you.
Yeah, I suppose you're referring to the Luminosity Reboot.
Welcome to Linux Unplugged, your weekly Linux talk show that always recommends building
your own online photo backup.
My name is Chris.
And my name is Matt.
Hey there, Matt.
Happy post-labor day to you.
Are you all rested up and ready to go?
We got a big show today.
Absolutely.
Joining us in just a little bit will be Aaron Saigo.
He's launching a new project that I'm pretty excited about.
And he's also been talking a lot about convergence.
What is the desktop?
What are laptops?
Where does mobile fit into all of this?
Sort of really doing a good meta-analysis of a lot of things we've been talking about
lately.
So we'll chat with him in just a bit.
I'm excited about that.
Plus, I don't know if you caught it.
We mentioned it earlier, but Linus was at DebConf, the Debian conference.
And I guess they had it in Portland.
So Linus showed up.
You know, he just threw on his socks, then he threw on his sandals, in that order, like
a man.
Went down there and talked to the DebConf folks about what was going on.
And I love it.
We're only going to...
I haven't even seen the whole video yet.
But the first five minutes of the video are like, I got to play this in the show.
Because he goes into a rant, and he perfectly summarizes kind of what's wrong with distributions.
And it turns out, kind of around the same time, the System Decabal app, they called
that themselves.
I'm not making that up.
The System Decabal thinks they have a solution to some of Linus's complaints.
And also, if we have a little time, we'll see, I'm not quite sure, but if we have a
little time, we'll also discuss Fedora's future package manager, what it can do and what it
can't do quite yet.
But what you should be seeing, starting in Fedora 21, and why DNF might be a big deal.
But first, Matt, as is tradition on the Linux Unplugged show, it is time for emails.
Dave writes in on a pre-show discussion we had a week or so ago about System D. He says,
hey guys, I've been listening to Linux podcasts for a few months.
I enjoy them very much.
Your discussion of System D seemed to come down to innovation versus stability.
I've seen this tension throughout my 30-year career in the Unix arena, and in the past
20, developing a couple of big commercial Unix operating systems.
Customers love stability.
And many will place stability over innovation to a large degree.
Innovation in these operating systems has to come from something completely new that
doesn't disturb the old stable features.
Or at defined points, where an OS vendor can warn the customers, there could be breakage
ahead.
What we're seeing play out in the Linux arena is a maturing of the operating system and
a growing group of users valuing stability over innovation, particularly when innovation
is disruptive.
Fortunately, with Linux, the different distributions are free to introduce these innovations in
ways that make sense for them.
E.g., I wouldn't expect Red Hat to put System D into Red Hat Enterprise Linux for a while,
but other distributions might choose to jump right in.
And I don't know if I totally, completely agree that it comes down to the camp that
likes System D is for innovation, and the camp that doesn't like System D is for stability.
Because A, it implies-
Yeah, I can't speak to that.
Yeah, it to me implies the people that don't want System D are curmudgeons.
And they're afraid of change.
I wouldn't go that far, but I think it's assuming a lot in both directions, and I wouldn't necessarily
go there.
Because I don't know what their opinions and thoughts are on it.
Yeah, I agree.
I think it is going too far.
And I think that sometimes it's not so much about avoiding change as it is just a philosophy
disagreement.
And that's what makes-
That I would agree with.
It's a multi-spectrum thing, I suppose.
It's some people that are curmudgeons about change, some people who don't like the design,
it's some people who don't like the people behind the design, it's some people who question
the political reasons.
And if it's all of these things that make it into one big issue, then that's why it
won't die.
If it was just one or two things, people could rationally debate and argue it and shut that
down.
It's not just one thing, though.
Jeremy writes in.
He says, my thought on Linux desktop managers.
Get ready for this, Matt.
Are you ready?
He says, hello, all, and thanks for the Jupyter broadcasting Netcast.
And he says, not just Netcast, but resources as well.
Now, I'm thinking, I'm wondering if-
It's for people who like to mess with computers.
I'm wondering if he's a Leo fan.
He says, but he likes to Netcast.
You caught that with Netcast, huh?
I said, I recently wrote a little blurb slash rant on my thoughts of Linux desktop managers.
He said, and he links us to it.
I'll read a highlight from a second.
But the TLDR is I avoid all desktop managers and I run my own lean environment, which makes
my life easier.
And here's what he does, Matt.
Get ready for this.
So he wrote on his blog, he says, I've always felt that at some point, someone out there
would develop a manager that would not try to be an all-encompassing ecosystem, but rather
maybe just something that attempted to just simply be a powerful desktop manager.
That time, though, never came.
It seems that every iteration of every major open-source desktop environment, the wheel
is being reinvented again from scratch, and the idea of how things should look, feel,
and behave kept changing unnecessarily.
They rarely provided any improvements that I felt were positive.
So if I'm not using a desktop manager, what do I use?
Well first of all, I removed the default window manager and replaced it with a highly customizable
window manager called Sawfish.
Sawfish is very customizable, with themes, keyboard shortcuts, customizable menus, and
scripts.
It focuses on being a great window manager and doesn't attempt to be anything else.
It's easily exceeded my expectations of what a window manager could be.
So I switched to Sawfish about 10 years ago and never looked back.
Anybody in the mumble room using Sawfish?
Never tried it over here.
Nobody in the mumble room is using it either, Matt.
Nobody.
Never heard of it.
No, no.
Been around for a while.
But I just, I don't know.
I'd have to...
Makes me want to try it out, though.
Yeah, I'd be curious to see what you could do with it.
And I like that he's stuck with it for 10 years.
Yeah, that's really says something, actually.
Quick question.
Wasn't Sawfish the window manager in older GNOME releases?
Yeah, I was wondering about that too, actually.
I wasn't sure.
I didn't want to say anything.
You know, I'm Googling it right now.
Sawfish.
I'm going to search for it right now.
Window.
Yeah, look at this.
And look at this.
This is the 1.x times.
Yeah.
Yes.
Yeah, yeah.
Yeah, yeah.
That sounds right.
Yeah, here's a screenshot of it, actually, on Wikipedia.
Boy, that's pretty hardcore.
Wow.
Yeah.
Well, I mean, you could...
I think it was...
More power to him.
Wasn't it extensible with Lisp or something?
Yeah.
And yeah, he mentions...
I think that was the scripting aspect to it.
And he also mentions that all the key bindings are totally customizable too, which is kind
of cool.
Yeah.
I like that too.
That's really funny though, looking at that.
Huh.
Yeah, I don't know.
I mean, you know, a little comp file massaging, that's fine, but I don't really want to get
into scripting something.
So I don't know.
Yeah.
I'd have to try...
I'd have to kind of weigh that out.
Yeah.
Yeah.
Maybe on an older system, that'd be a great way on a...
Yeah.
On a resource.
Or if you have a DigitalOcean droplet, which brings us to our first sponsor this week,
DigitalOcean.
And you know, I mentioned if you have a DigitalOcean droplet, I actually have a droplet up there
that I've installed Exxon, and you're going to laugh at me, audience, but you got to understand
the way I work.
I even installed Chrome on my DigitalOcean droplet.
I SSH in, I turn on compression and X11 14, and then I can manage all of my server side
stuff just using local host, and I don't have to expose any of that stuff to the web.
And that's just another layer of security for me.
So for me, because I'm always on an X11 based system, well for now at least, I can SSH in.
You guys know about SSH and X11 14.
You use compression, it runs like a champ, and you can start Chrome up.
And to be honest, I've actually had more success with Firefox.
I've both of them installed.
And Opera too.
I have Opera installed.
Hey, man.
I can't help it.
You know, Firefox runs really well under X11 14.
Yeah, it does.
It does work quite well, as a matter of fact.
So there's a lot of options you could do with a DigitalOcean droplet.
Go over to DigitalOcean.com and arm yourself with the knowledge of Unplug September.
That's the promo code you're going to want to keep in mind as I tell you about DigitalOcean
because it's going to get you a $10 credit.
So what is DigitalOcean?
It's a simple cloud hosting provider dedicated to offering the most intuitive and easy way
to spin up a cloud server.
And users can create a cloud server in under 55 seconds or 25 seconds if you're our audience.
And the pricing plans are incredible.
They start only $5 a month for 512 megabytes of RAM.
That gets you also a 20 gigabyte hard drive, one blazing fast CPU, and a terabyte of transfer.
DigitalOcean also has data center locations in New York, San Francisco, Singapore, Amsterdam,
and London.
The interface is simple and their control panel is crazy intuitive.
But on top of all of that, they have an amazing straightforward simple API that you could
just write your own scripts against or take advantage of any of the community applications
that are out there.
There's plenty of them that you can get your hands on.
They're really nice too because once you get a system spun up, you still have the option
to do one click deployment of applications.
You're like, oh, that's interesting.
Yeah, they're going to use Docker to do some of that stuff.
How cool is that?
They're using KVM for the virtualization and they're sitting on top of those SSD drives
and they work their butts off to make sure that they're at some of the best data centers
in the world.
They just spun up a new one with IPv6 in New York.
They got that new one in London.
They're growing like crazy.
Tons of you out there in the community have been trying out DigitalOcean because it works
so many for you.
That's why they invested in those SSD drives to get you that performance.
That's why they use the amazing hardware all wrapped up in this incredible interface.
They recognize that it takes all of that together to make an amazing product.
Go over to digitalocean.com and use the promo code unplugseptember.
You get a $10 credit.
You can try out the $5 rig that I've been getting a heck of a lot of use out of for
two months for absolutely free.
Digitalocean.com and the promo code unplugseptember.
And a really big thank you to DigitalOcean for sponsoring the Linux Unplugged Show.
Love my D.O.
Rufflets.
I got multiple now.
It's like phones up in here with me, Matt.
It's like phones.
Yeah, I think you've got me beat.
I had like four of them at the peak.
I dropped back to three.
Well, actually looking at doing a fourth one again.
Oh, what are you running on there?
Are you doing WordPress?
I'm actually doing more WordPress than anything.
I'm still rocking BitTorrent Sync, this big thing for me.
I do a lot of data back and forth.
But WordPress, it's like it's the best WordPress experience I've ever had and I've had a lot
of them.
Same here.
It's really, really smooth.
Super fast.
Love the setup.
You control it from top to bottom.
My wife, Angela, has been talking about how she kind of wants to get back into blogging
more regularly.
And one of the things we're thinking about doing is we're looking at all the different
options but definitely one of them on the list is just set up a WordPress site on a
DigitalOcean droplet and she can manage it even.
It's really straightforward.
It's kind of awesome.
I would recommend it.
It's fast.
It's just DIY.
But it's also easy.
It's really great.
Yeah, absolutely.
Okay, Matt.
So we've got a couple more emails we're going to get into.
This next one came from Ryan and this is a topic I love.
First of all, Ryan wants to know, just to clarify off the top, all he has to do to be
a guest on the show is take a shower with me because apparently when Eric was here last
week we implied that Eric took a shower with me so therefore he was allowed on the show.
So Ryan, just to clarify, that only works under two circumstances.
Number one, you're a lady.
Number two, if you're not a lady, I'm really lonely that day.
And then if you get me on the right day, you take a shower with me and I do have a shower
here in the studio, I'll probably let you on air.
I mean, you know, I'm a nice guy after all.
So that happens.
Hey, man.
Just telling it like it is and Ryan wanted to know, I'm just here to help the people
with the information they require.
So he says he's been a listener for a while now and he wanted to get to his actual question,
not just the shower question.
He says, I'm relatively new to Linux.
I tried to switch my five-year-old desktop last September but I had to switch it back
to Windows for both game-related and school-related reasons.
I recently bought a laptop with explicit intent of installing Ubuntu 14.04.
It took about eight hours because it came pre-installed with Windows 8.
Don't get me started on that OS or UEFI.
But I got it loaded and it works beautifully.
With the next six to eight months, I'm looking to get a refurbished desktop with a faster
processor, more RAM slots, and the MMOs I want for it aren't friendly with Linux.
So unfortunately, Windows 7 for that one.
Once I get the second desktop, I'll be looking to repurpose my current desktop as a local
file server for cohabitating my girlfriend and my files with a little backup action.
She has a Windows-based PC, so we have a mixed OS environment.
When I repurpose it, I plan on using Linux for this new machine.
What would be your top choices for distros to use for a home file server?
I'm going to set this up in VirtualBox on my laptop in the meantime so I can play around
with it before I actually go into it and put it in production.
Thanks for everything and I hope we had a great Labor Day.
So I have a few suggestions.
Matt, I'm sure you have a few.
Anybody in the Mumber room have a home file server distro recommendation for our email
Ryan here?
Not really.
It's not a Linux distro, but I can't speak of FreeNAS high enough.
I run an OpenMedia file.
Yeah, something's up, guys.
No, go ahead.
I was just seeing what else I was giving you guys a chance to say.
So we've got OpenMedia, FreeNAS.
Oh, sorry.
What else?
What else do we use?
Well, I just use SFTP into an OpenSUSE server and that's how I get my stuff done.
Matt, do you think...
I mean, come on.
Nobody's going to say Ubuntu LTS, right?
Come on, right?
But Matt, that makes a good home server.
I think Ubuntu's good.
I think anything Debian-based is certainly worthwhile.
That's kind of my go-to thing.
I think really moving more toward a Debian situation is just a comfortable place to be.
I like that.
I think even if it's not Ubuntu, I think Debian's good.
I also think OpenSUSE, like the Evergreen release, would be quite good.
Wouldn't recommend Fedora.
And if you're in the Red Hat camp, check out CentOS.
That's also a pretty solid option to go.
But like Wimpy says, OpenMedia Vault also a great opportunity to look into and one we're
going to do a review on soon here on the show.
Maybe we should do that next week.
Those of you doing the OpenMedia Vault, would you be ready to do the review next week?
Yep.
Okay.
Yep.
Okay.
So we'll do on Linux Unplugged next week, unless something changes, we'll have a review
of OpenMedia Vault, Ryan.
So that might help you as well.
Okay.
Last but not least, Sean writes in with the real cost of a MacBook.
He says, I know I'm a little behind on this comment, but I just started looking to Linux
within the past year and I came across Linux Action Show a few months ago and he's been
catching up.
I have a MacBook from the spring of 2008.
It runs better than Windows was my thought when I bought it.
Now my thought is I can only run up to 10.7 and that's as far as I can go?
In fact, he's stuck at 10.68 right now because as some of you may or may not know, after
a little while, Apple kind of discontinues support for these older MacBooks and they
don't really allow you to install the newer OSs on them anymore after a point.
He says, I tried running Linux distros on a VM in the MacBook, but it's slow and sketchy.
So I know I'm stuck with it for a while, but I got a hold of a couple of old desktops and
I've been running Ubuntu 14.4 and I want to set one up as a home server as well.
So I've downloaded CentOS.
Well, there you go.
All that to say the inability to move forward without shelling out major cash for a new
hardware has made me look back towards Linux.
Also getting back into computers and I'm in the process of getting an A plus and looking
at Linux 101 course.
So he says, keep up the great work.
Boy, isn't that true though about the MacBooks is like one of the things is you could throw
Linux on there and probably get a couple more years out of that, right?
I think that's really it because I think that really when you're in their own ecosystem,
they set the rules, they set the pace and you're limited to whatever they want to do
with you.
They, for example, have a old power PC, a Mac mini that runs a Linux.
And the reason why is because that's all you're going to do with it short of using it as a
doorstop.
It's not, it doesn't have any benefit in the OS 10 universe.
So very good.
Very good.
All right.
Well, uh, we have, uh, we, I, we're having some connection problems with Aaron, so, uh,
we'll see if he's able to make it back on.
Okay.
Oh, I hope he can.
If not, we'll still give him a good plug for his project he's working on cause it's pretty
exciting.
So, uh, what we'll do in the meantime as the guys work that out on the server end is I'll
tell you a little bit about our next sponsor and that's Linux Academy.
And Linux Academy is a great sponsor for the Linux Unplugged show because it's an opportunity
for anyone in the audience that's learned on their own or like if you're like me, self-taught
on the job, you'd be surprised going back and taking some of these fundamentals, how
much little bits of details they'll fill in and, and in my case at least, I won't speak
for you.
In my case, I learned, oh, I could have been saving myself quite a bit of time if I had
learned this the right way.
You ever had that now where you're like, oh, I guess I could have done this a lot easier.
I've been doing this the hard way the whole time.
So I have that at least once a week.
So yeah.
So here's just a little friendly reminder from someone who's been in this position.
Uh, maybe it's time to just check up on things.
Go over to linuxacademy.com slash unplugged.
That's going to get you the summer of learning discount.
You should go jump on that right now because it's a 33% off offer and Linux Academy is
offering new content every single week, so you're going to want that sub.
So what is Linux Academy?
Let me tell you.
It's kind of an awesome service created by Linux enthusiasts and educators who really
wanted to put something together that Linux users could go to and know they're getting
really good content from people who love Linux.
They have step-by-step video courses, downloadable comprehensive study guides, and each course,
when you need it, comes with its own server, spins it right up.
You can pick from seven plus Linux distributions and they'll automatically adjust the courseware
to match the distribution you've picked.
So if you're a Red Hat guy and you need to get in on a little bit of Debian, you can
take care of that or vice versa.
It's really kind of neat and I've heard from a lot of you out there who've tried this out
and say, you know, you mentioned the downloadable comprehensive study guides.
You didn't mention that was also video and audio that happens to work really well as
a podcast or you forgot to sometimes mention they do live events so you can ask the educator
directly when you've been taking courses.
I love all of that, but me, I'm a recluse.
I sit up in my, on my office late at night when I'm not sleeping very well or when I
want to accomplish a little something, get a little intellectual stimulation, I bring
up my Linux Academy dashboard, I look at how long a course is going to take me, and I just
go to town on it.
And sometimes that's a scenario where I'm building something from beginning to end on
S3 using S3, EC2, all of the Amazon web services, or maybe it's something on a Linux box.
It's maybe something using OpenStack because it's not something I've had a lot of in-production
experience with, but I still want to talk about it from an educated standpoint.
That's what I love about Linux Academy is they're constantly adding this new stuff that
I can continue to test myself, see where I'm at, they give me progress reports, and I can
also see if there's a new kind of technology that's coming up that interests me, that sort
of excites me, because it's, sometimes you run the risk when you work on a particular
area of getting a little stale.
This is my opportunity to prevent that.
Go over to LinuxAcademy.com, check out their OpenStack Essentials, it's now 100% complete
with tons of content.
Their AWS Certified SysOps Administrator Prep Course has over 14 hours of content that you
can check out.
I think it's a pretty neat system.
LinuxAcademy.com slash unplugged to get that Summer of Learning discount.
Go over there right now, let them know you appreciate them supporting the Linux Unplugged
Show.
That's LinuxAcademy.com slash unplugged, and a really big thank you to Linux Academy for
sponsoring the Linux Unplugged Show.
Check them out, guys.
They're great.
I don't see Aaron back just yet, so while we work on that, I got another topic, we can
move to our next topic because this, we've actually got, we've got way more show than
we can fit anyway, so either way, we're totally fine.
The meta story we've been covering is, is it too late for the Linux desktop?
We covered John C. Dvorak's trolling in the Linux Action Show, right?
And then the week before, actually for the last couple weeks on Linux Unplugged, we've
been talking about the perceived threat that the Mac desktop represents to the success
for Linux on the desktop.
Well, this past week, Linus Torvalds, your buddy and mine, was over at, he actually wasn't
just over there, he lives in Portland, so it's not that far for him to go, but he was
at the Deb Comp 14 in Portland, and Linus' style these days is to do more of a Q&A session
than it is so much to go up there and do a big speech, and so he sat, and just kind of
right off the top of his talk, started taking questions from the audience.
It's kind of cool when he does that, too, because anything goes, right?
And it's not like it's this pre-manicured experience where he's going to hit on these
bullet points and go out there and give the Linux talking point speech and really pitch
Linux to all of the people, he's just a guy going out there answering questions, and I
love that about him.
So the first question is the one we're going to start with today, and then we'll move into
what the System D cabal is trying to do to address this, and I think it should be for
an interesting discussion.
So I'll start with Linus' question here.
I think he's wrapping up a statement and then the question begins, and we'll let him go
for a bit, it's a great talk.
I have a really hard time just doing something else because that means I have to switch over
all my kids' machines, my wife's machine, and that's just painful, so that's why.
Okay, so this is a little difficult.
I guess we're all, at least for me, I'm kind of wondering very much like I think you are
lately, how to get to the year of the Linux desktop, if you will, right?
And we'd all like it to be the year of the Debian desktop, if possible, and I'm trying
to figure out if anything, if you have any insight as to possibly how to get closer towards
that.
So, I mean, there's a lot of things that are getting closer to that, and I think, I mean,
people, technical people don't tend to use Chromebooks, but I think that Chromebooks
are the kind of thing that will make the year of the desktop more possible, right?
Because once people get used to running their applications basically as a browser, that
makes a lot of things much easier.
That said, let me go on my first rant of the evening, right?
One of the problems desktop has, I mean, ignoring all the purely market and getting free installs
and making it just so that normal people, and by normal people I mean obviously non-technical
people will just buy a machine and it just works.
One of the things that none of the distributions have ever gotten right is application packaging,
right?
And now somebody will say, hey, dpackage is way improved and much better than RPM, and
that's not at all what I'm talking about.
I'm talking about actual application writers that want to make a package of their application
for Linux, and I've seen this firsthand with the other project I've been involved with,
which is my dialogue application, right?
We make binaries for Windows and OSX.
We basically don't make binaries for Linux.
Ouch.
That's Linus.
Ouch.
Why?
Because making binaries for Linux desktop applications is a major fucking pain in the
ass, right?
You don't make binaries for Linux.
You make binaries for Fedora 19, Fedora 20, maybe there's even like rel 5 from ten years
ago.
You make binaries for Debian, well actually you don't make binaries for Debian stable
because Debian stable has libraries that are so old that anything that was built in the
last century doesn't work, right?
But you might make binaries available for Debian whatever the code name is for unstable,
and even that is a major pain because, Christ, we had this small local flame fest just a
couple of days ago, Debian has these rules that you're supposed to use shared libraries,
right?
And if you don't use shared libraries, getting your package in, like, is just painful.
But using shared libraries is not an option when the libraries are experimental and the
libraries are used by two people and one of them is crazy.
So every other day some ABI breaks, right?
So you actually want to just compile one binary and have it work.
Preferably forever.
And preferably across all the Linux distributions.
And I actually think distributions have done a horribly, horribly bad job.
One of the things that I do in the kernel, and I have to fight this every single release
and I think it's sad, we have one rule in the kernel.
There is one rule.
We don't break user space.
Everything else is kind of a guideline.
The whole security thing, it's a guideline that we shouldn't do stupid shit, right?
But that's not a hard rule.
People do stupid shit all the time.
I don't get that upset.
People break user space.
I get really, really angry.
This is something that is religious for me.
You do not break user space.
And even in the kernel, every single release I have people saying, okay, I'm changing this
ABI because it's cleaning stuff up.
And I'm like, no.
You're not changing that ABI because I will crush you, right?
All right.
So I'll link to the rest of the talk.
It's available in WebM if you'd like to watch the whole talk in its entirety.
Obviously it's a good one.
I mean, Linus, that's what he does now.
I love his frankness about these matters.
And I think it's so telling that Linus does not package his own application for the Linux
desktop.
He makes binaries for Windows and Mac OS 10.
Tell me that doesn't sting.
That's just wow.
I mean, that's really telling.
I think we could debate all day long if the system is broken or not or if it's technically
feasible or not.
But at the end of the day, when the creator of the fricking Linux kernel won't package
his own software, I think that's an indication of a failure at some point in the system,
right?
I mean, I think it's, and I don't think like a small failure, right?
I don't think it's like a small failure.
I think it's kind of like a fundamental failure.
Am I wrong?
It seems like a big deal.
He said it was a major pain.
I mean, at the end of the day, I mean, the fact that someone comically earlier asked,
Hey, is, you know, when's the year of the desktop coming?
Um, well, there you go.
I think these are things that still have to be overcome.
Big time.
Right?
I mean, okay.
So is there a solution?
In fact, we've had people write in, Matt, you might recall to the Linux action show
and been like, guys, this is so frustrating.
Is there ever going to be a solution?
And I kind of joked.
I said, huh, I wouldn't worry about it.
I'm sure the system D guys will eventually come up with a universal package format for
all.
Well, guess what?
Oh boy.
Oh boy.
What?
Guess what?
Uh, you might've heard of him.
His name is Lenart.
Uh, he, he's done, he's, he's been around.
He's done a few things.
Um, Avahi, you might be familiar with Avahi project is the, uh, auto DNS discovery.
Uh, you could be familiar with pulse audio, perhaps, uh, you may have heard of the system
D project.
Uh, you might've be familiar with a company called Red Hat.
These are all things that you might attribute to Lenart Pottering.
Well, another thing you can contribute to Lenart is fundamentally attacking how we put
together a Linux system, changing what defines a distribution forever.
And the best part is it's all powered by butter FS.
Of course it is.
It's all powered by butter.
I'm sure a little system D is in there too.
It feels like a big Reddit meme, doesn't it?
All right.
Before we get into this, I can see the mumble room has a few things they want to talk about.
Let's start with Fred and then we'll go to Wimpy.
Fred, what are your thoughts thus far with that Linus talk and all of that?
What are you thinking right now?
Yeah.
So, um, somebody asked him later in the talk, if you did watch till the end, uh, you know,
uh, he, he built this sparse C front end and then he, to solve a problem.
And then he built Git to solve a problem.
And then now is he going to build some solution to solve that packaging problem?
Yeah.
Yeah.
And then he says, no, this is a hard problem.
And I actually really do think it's a hard problem.
Oh yeah.
Oh yeah.
Big time.
It's hard because of packaging issues.
It's hard because, um, I just, uh, so I thought up an example while you were playing, uh,
the video, even containers, I don't think containers can even solve that problem.
Let's talk about GTK and GTK themes.
So now you have this settings application, which you can go in and choose your GTK theme,
right?
And this changes for all applications, right?
So the theme, the same, all applications get the same theme.
Yeah.
So, um, now everybody's statically linking, which, uh, doesn't cause problems, but then
now everybody is bundling up applications dynamically linked with GTK, but they're just
in their own separate container or bundle or whatever you want to call them.
Which configuration file do you use to set the theme, are they separate configuration
files?
Uh, do you have a separate configuration file for GTK 2 and 3 or for GTK 2.12 and 2.14 or
for GTK 2.12.1.
All of the things, all of the things, my friend.
Yeah.
But then you cannot add new settings or, you know, like add more features to the configuration
files without breaking everything else.
Yeah.
Well, how do you do that?
And this is a simple problem.
That's not also not so important.
Theming is not that important functionally speaking, but it's a very good example.
It's a very good use case.
Something that would drive me nuts.
Yeah.
All right.
A few of us in the Mumble Room were talking about this, uh, yesterday, I think.
Oh yeah.
Okay, great.
And in general, I am, I am very pro-System B. I like System B, and I don't mind that
they've taken a lot of the little stuff.
That being said, anything to do with package management and changing that scares me because
one of the things I, my favorite things about Linux, the thing that I think sits at above
every other operating system is its package management.
And I'm not saying that this will screw it up.
I'm just afraid this will screw it up, or at least screw it up for a little while like
Pulse Audio did.
Well, I'm going to get into how they're going to pull it off in a second from like a package
management standpoint and things like that, but before we do, I wanted to give Wimpy a
chance to jump in, then Daredevil, and then we'll get into the meat of what the system
do you guys want to do.
So Wimpy, uh, what are your thoughts at this point so far?
Okay.
Well, I read Leonard's post this morning, that was my morning reading, so I had some
time to think about that on the commute into work and I read it again and had to think
about it on the way home.
Yeah, I read it twice too and I'm still thinking about it.
I was going to say, I think, I think it needs a third read to really absorb it, but, um,
I think he, he and his team are very good at tackling the tough problems in the Linux
world.
Yeah.
Yeah.
And what they've fleshed out, I really like.
So I noticed somebody referred to it in one of the comments as, Oh, it's, it's complicated.
And I don't think it's complicated.
I think it's complex, but not complicated.
And if, if you're a Python programmer, one of the edicts in the Zen of Python is, uh,
uh, choose complex over complicated, and it is a difficult problem to solve.
So there needs to be some complexity to it, but I really, I'm really quite enamored with
the approach and I say, I say, bring it on.
I'm really looking forward to a world in which we can isolate the user environment, the framework
environment for the desktop and, and with the appropriate configuration and then keep
the staple OS separate from that.
I'm really excited by that.
So I would, for those of you who haven't read this yet, I bet a lot of you are probably
thinking, you know, this is, they're going to use Docker.
This is going to, this is not what containers can play a role in this, but in a way it almost
demotes everything to the same playing level.
The, the, the base OS containers and VMs, uh, in some ways are, are, uh, from a file
consistency standpoint are the playing fields a little more leveled.
So essentially you could see why they want to do this and, and Lenart summarizes it very
well and Wimpy, please feel free to jump in as, as, as I go over this, uh, he says, what
we want to do is an efficient way for vendors to package their software, regardless of it's
just an app or the entire operating system directly to the end user and know the precise
combination of libraries and packages it will operate within.
I, you know, if we were to ship a Jupiter broadcasting media player that just played
Jupiter broadcasting content, was all themed up with our logo and stuff, I'd have no idea
what video libraries you might have on your distro.
So I would want a way to know what libraries would be used when I gave you the Jupiter
broadcasting app.
He says, we want to allow end users, uh, and administrators to install these packages on
their system, regardless of which distribution they have it installed on.
We want a unified solution that ultimately can cover updates for full systems, OS containers,
like Docker, end user apps, programming, ABIs, and more.
These updates shall be double buffered.
And what he means by that is like, if you guys have ever had a motherboard that has
two bioses or like the way the Mars Rover does updates, there's two computers and what
you do one update.
And then once you have a successful boot, then, you know, you update the second install.
So you have it, it's the, or in, in actually in the case of their approach, you'd have
infinite buffering depending on your free storage.
But they say we want at least in the minimal double buffer.
He says there's an absolute necessity if we want to prepare the ground for an operating
systems that can manage themselves, that can update safely without administrator involvement
a la core OS, or maybe some of the directions Fedora cloud wants to go in where yes, the
server OS is rolling, but the applications are protected.
He says we want our images to be trustable.
Now this is one that might have some controversy because he means signed and he doesn't just
mean like the application signs, they want a fully trustable OS starting to sound a
little bit like Microsoft here with images that can be verified by a full trust chain
from the firmware, meaning secure boot through the bootloader, through the kernel, all the
way up to the init cryptographically secure verifications of the code we want to execute
is relevant on the desktop, just like Chrome OS does now, but also for apps for embedded
devices and on servers, particularly in a post Snowden world.
So what they are proposing on how to accomplish this, it's amazing.
It's essentially a scheme built around a variety of concepts that are available either today
or hopefully soon in ButterFS.
I want to caveat something here.
Everything they're talking about in ButterFS is in a read only capacity.
So you're not really talking about ButterFS manipulating live data to accomplish this
so much as basing it off of snapshot of data and working from that snapshot of data.
So before you get too ButterFS freaky, do keep that in mind, although you probably are
legitimately concerned.
So they want to use the ButterFS file system namespacing.
There's a large number of features in ButterFS that neatly fit this concept today, he says,
and maintainers are busy working on a couple of others they want to eventually make use
of.
As part of the proposal, they will make heavy usage of ButterFS's sub volume capabilities
and introduce a clear naming scheme for them.
So you would have a user file system with a vendor ID, the architecture like ARM or
x86, and then the version.
And these would be volumes that could be mounted and mapped to your file system like a drive.
So when an application launches and it needs a particular version for a particular architecture,
it thinks it's talking to slash opt slash proprietary garbage slash bin, when in reality
it's actually in this deeper ButterFS sub volume that's been mapped to that location.
Kind of a little bit like that distribution we talked about a little while ago that would
let you run applications from any distro and do a whole bunch of cherooting on the background.
Oh yes.
Wimpy, am I getting everything right so far?
Yeah, you've totally summarized that correctly.
And they talk about how you wouldn't even necessarily have to have a ButterFS file system
to do this.
A lot of this functionality could be contained within a loopback device that is formatted
with ButterFS.
If you still wanted to use XFS or ZFS or Extended 4 for your primary file system, some of this
functionality may be capable of, I bet that's limited, but I bet some of the functionality
could work out of a loopback device.
Here's a couple of things that are really, really, really, really interesting and would
fundamentally change the way software is distributed on Linux.
They are taking advantage of a feature built into ButterFS called Send and Receive.
ZFS has something similar where you can take the blocks from your drive, from your storage
device, and send them over the network, over an SSH connection, or over the SATA cable,
and write those blocks to another storage device in another computer or on another drive.
It's kind of cool.
It's kind of crazy because you can just take the whole thing, suck it up and spit it on
another machine, and write it all down there.
Well, they want to use that same technology to distribute software, so it would be bit
by bit exactly what you got.
And using some of things like ButterFS's deduplication features and things like that, even though
you'd have a lot of the same libraries, on the back end, ButterFS would be doing dedupe
to clean it all up, and they would do Delta differentials too.
So if you're doing a Send and Receive of a ButterFS file system, it would just be the
bits you don't have.
So you would essentially have some Delta capability there too.
Now, they're also saying all of this doesn't even eliminate RPM or deb because the distro
maintainers would still be building the distros with those tools.
This would be more for the users.
The users would stop using the package managers as much, and would use systems more like this.
And they paint a scenario where you would have Gnome and LibreOffice and Firefox all
doing this system, and it escalates from there.
Any gaps you need to fill in there, Wimpy, you think?
Yeah.
I think one thing you've missed there is you mentioned LibreOffice and Firefox, but in
this brave new world, you can have the last six versions of Firefox, and the last three
versions of LibreOffice, and the beta release, and you can transparently switch between them.
Yeah, and that's, I think, where people think it seems a little complex.
And it is complex, but SystemD is already capable of doing some of those switching activities
now.
So this is building on what SystemD is already doing with its stateless booting and all that
sort of stuff.
And in this system, everything, as they're calling it, is double buffered, or really
end-fold buffered, depending on your storage, because user and the runtimes and the frameworks
and the app sub-volumes can exist in multiple versions.
You could roll back after a bogus update.
You could see how a rolling OS becomes a lot more reasonable because you could individually
or completely roll back different components or all of the components.
You're doing bit-by-bit transfers.
Wimpy, what do you think of the method they're proposing for software installation?
Does it blow your mind a little bit?
It's a little bit different, but there are some parallels to the way that we do some
things at work currently.
So we work almost exclusively with Python at work.
And if anyone out there is a Python developer, they've almost certainly come across Virtual
Env, which is a way of isolating a Python runtime and then installing just the packages
and tools that you need for your application into this sandboxed, isolated environment.
And it means to say that you can keep that separate from the system and stop the system
packaging from stepping on your applications and new libraries breaking your application.
And it's more complex, but it's like that.
It's like virtual environments, but for all of your partitions.
Right.
And in an example, Lenart says, I've got three vendor operating systems installed.
He's got like, I think it was two Fedoras and Arch Linux.
He's got KD and Gnome and the home directories are shared.
And using these namespacing concepts in ButterFS, he's free to mix and match apps and OSs or
develop against specific frameworks and specific versions on any operating system.
It doesn't matter if you booted the Arch instance or the Fedora instance, he can execute both
LibreOffice and Firefox just fine because the execution time gets matched up with the
right runtime at launch time.
And all of them are available for all the operating systems you have installed.
Kind of, I mean, part of this... Yeah, go ahead.
As a developer productivity tool, that's really powerful because right now, if I want to develop
against the Marte 1.9 branch, for example, I need to boot into a virtual environment
with all of that, a virtual machine with all of that stuff installed and develop that sort
of separately from my main machine.
But being able to step in and out of environments like that sort of at will is extremely powerful
and could in some way sort of usher out the hypervisor world altogether.
Yeah, and he also points out that one FAT binary, if you wanted to, could include all
of the architecture.
So, you could have, sort of like when the Mac was transitioning from PowerPC to Intel
and you could run either the PowerPC code or the Intel code with one icon.
He says the same thing could be possible with this.
An installer image could include the Fedora version compiled for x86-64, one for i386,
and one from ARM, all contained in the same ButterFS subvolume.
And due to ButterFS's deduplication, they'll share as much of the code as possible.
And when the image is booted up, the right subvolume is automatically picked based on
what architecture the system has detected it's had.
Yeah, brilliant, isn't it?
And he says here in this new system, it would also make installations of operating systems
much easier.
You could do it manually, but you could also automate this.
Here is the process to install a Linux distribution with this new ButterFS-inspired subvolume
system.
You would create a GPT partition table.
You would add an EFI system partition to that partition table.
You would create a ButterFS volume, obviously.
You would deserialize, that's what they call when you write one of these volumes right
to your hard drive.
You would deserialize a single user subvolume into that ButterFS volume.
You would install the bootloader into the EFI system partition, and then you boot the
system, and it's done.
There's got to be a downside to this, other than the complexity.
And the other thing is, he says right in here, he's like, A, we recognize this would take
a massive level of adoption.
That's why we're putting it out there right now.
And he says, we think this could also help us accomplish things like factory resets and
power wash features where users could press a button and all of their data would be protected,
all of their apps, everything they depend on, but everything could go right back to
a default.
That could be incredibly powerful for users.
But they've got to get adoption, number one.
They've got to make sure people are comfortable with ButterFS, number two.
And the real question is, how irrelevant does this make a distribution's built-in package
management tools?
Because for some distributions, their package manager sort of defines them.
You look at Arch or really even, you know, dev distributions.
There's folks that will only use dev-based distributions.
If you're an RPM-based distro, you're de-qualified.
This would sort of nullify that differentiator, right?
It could do.
I mean, you could build your framework and application sub-volumes just by compiling
and installing the code into them.
And maybe that's the simpler way to do it, thinking about it.
Maybe that reduces some steps and some overhead.
So yeah, thinking about it, yeah, maybe it does kill off the package manager.
But it doesn't necessarily mean you have to do that.
There's still some value in being able to package things and install things in a reproducible
way.
Right.
Yeah.
And in fact, I want to talk about that in a second.
Before we move to that aspect of it, does anybody else have any thoughts on...
It's early days on this proposal, so I know a lot of you haven't chewed on it yet.
We'll have a link to it in the show notes, too, if you guys want to read it all.
But anybody else in the Mamba Room want to chime up before we jump to...
Yes.
Definitely.
Definitely. So this is one of those things that I actually think...
So far from the proposal, I can see the feasibility of implementing it.
I can see the benefits of implementing it.
But I think we're misleading a little bit on a couple of things that we gained from
not doing that before.
So one of the things is people are now statically linking.
And the reason we weren't doing that is because there was this major benefit of updating the
library and getting it all updated.
Yes, it breaks packages and makes the distro and the package manager much more relevant.
However, it does make our applications to be following the path of later security, the
path of the latest upgrades that were made in technology, which is no longer true when
you have these kind of hybrid system.
The other thing that I also think that this can actually provoke is a situation where
you start just bringing everything to a monolithic state, and you lose the distro variety.
It's not really the software, it's not really the...
I think it's the experience that developers from different distros are trying to convey
to their users.
And I think that might be harder to tackle that philosophical issue of getting people
on adopting it than the technical sides of it.
I agree, that could be a big issue.
I understand why Linux is looking at it.
I don't package for Linux.
I mean, I developed the kernel.
I want to use wherever my kernel runs, and that's why he looks at it that way and he's
not packaging it.
But to be honest and fair, I think this will eventually become something of the past and
be simple.
If you want to develop an application, you want to target your end users.
Actually currently, if you're developing a server application, chances are you're developing
for Red Hat, OpenSUSE, or something like it.
And if you're trying to get to the end user, you're doing it for Ubuntu.
And that's simple.
You are focusing on an OS.
For now.
And having said that, the Docker idea is pretty cool and dandy, but you're just bringing all
your baggage to the desktop of the user.
And that's just assuming that our machines are ready to just take it all.
And yes, we have the hardware right now.
We didn't have in the past, but I think that's completely bloated.
It can be fixed in tooling for developers, not necessarily on this.
And to that point, the storage point, the chat room is mentioning, what about ButterFS
storage limitations?
I assume as this gets worked out, storage will go up and those things have to be worked
out too.
I know Heavens wants to jump in and bring this one home.
And then we'll move on to, hey, while package managers are still relevant, there's some
big changes coming that I want to talk about.
But first, let's thank Ting.
Go over to linux.ting.com right now.
Everybody go there.
Linux.ting.com.
First of all, that'll put Linux in your history.
Let's be honest.
Let's put Linux in your browser history, because I know what else is in there.
And it's not what you want in your history.
Linux.ting.com.
Go over there.
That'll also get you a $25 discount off your first Ting device.
If you've already got a Ting compatible device and you want to bring it with you, well then
good news.
They'll give you a $25 credit for a lot of you out there.
That gets you more than your first month.
So why Ting?
It's mobile that is zero BS.
You only pay for what you use.
Ting takes your messages, your megabytes, your minutes, adds them all up at the end
of the month, whatever bucket you fall into.
That's what you pay.
It's flat, $6 for the line, and your usage includes hotspot, tethering, picture message,
caller ID, all the stuff, everything, all of the things, plus more, all controlled by
an amazing dashboard.
Ting gives you the controls you need to see exactly where your account's at.
Maybe turn something off, turn something on, disable voicemail, enable voicemail, set up
caller ID, disable caller ID, all those things exposed for you right there in a crazy easy
to use interface.
Go over to Linux.ting.com right now and you can check out there's Ting savings calculator.
You put your current usage in that bad mama jam and not like what you pay, but your actual
usage and just get an idea of what you'd save by switching to Ting.
If you're listening to this right now between 8 a.m. or 8 p.m. Eastern, why not try giving
Ting a call, 1-855-TING-FTW, guess what?
No hold customer service.
They'll answer your questions right then and there on the spot.
It's kind of incredible.
And if you want to sort of charge up your Ting device, if you're a recent Ting customer,
they just posted a great top five app pick from one of the Ting associates, Ben, and
he talks about some of his favorite apps for Android.
He's got Waze on there and a couple of others for those of you in relationships or not in
relationships too or that one which might break up a relationship.
He's got a whole list over there on the Ting blog.
You can go over to Ting.com slash blog, but do me a favor.
Start by going to Linux.ting.com.
Linux.ting.com.
Go grab a device.
I've got the Nexus 5 on Ting right now and I got multi-ROM on there.
Rekai did and I've got Sailfish OS on that, badmama jamma, Firefox OS on that guy, Ubuntu,
Touch and Android L all on the Ting system.
It's cool because there's also other Ting customers who are doing the same thing and
every now and then I chat with them in the Ting forums.
Yeah, Ting has forums too.
They have a great community where people are trying out stuff all the time, always pushing
the envelope.
Linux.ting.com.
Go find out why so many of you out there have switched over to Ting and been super happy.
You might just save enough money to buy a new laptop every couple of years.
Linux.ting.com and a big thank you to Ting for sponsoring Linux Unplugged.
All right, heavens, did you want to jump in before we moved off of the new universal package
format that's going to save all of us proposed by Lenart and the system decabal?
Oh, may I?
Yes, sir, you may.
All right.
Sounds wonderful.
Well, anyway, this is, okay, what happens if this wasn't from Lenart?
Would people be more accepting of it or not?
I would actually be more skeptical.
Yes.
Yes.
Well, that too, but there is another situation here which, okay, most of the time or way
back when system D was just coming out, we were saying there is a future here of Linux
that we are going to come to that we have never seen before and guess what?
This is one of those side effects that the creation of system D has spawned.
It's actually one of those future things that we pretty much need because, what, libraries?
That's a figment of our GCC linking past just because we need to statically or dynamically
link to a certain library in the system.
That's pretty much GCC's legacy.
Just as rolling distributions and statically released distributions, this Lackware model
versus the rolling model, I think those are a figment of the past.
This is a very good headway into our future when it comes to partitioning the system.
Even though I'm not very much of a big fan of this butter FS, it just so happens to provide
the technology required in order to make this feasible or at least not insane.
Yeah, I agree there.
It does seem like it is a glimpse of the future that kind of has to come and Crossroads-
And we know.
Oh, go ahead.
It's really, well, yes, because Lenart, he has the overview of the system which none
of us have ever seen before because this is the future which we are coming to.
No one has seen the abstraction level that he has.
He is at that point.
He's the epitome of where he sees all these distributions and all their problems.
He's the person at the forefront.
If he can see all these little weird discrepancies and can have a reasonable way or at least
an idea on how to bring us forward, he's in a pretty good position when it comes to his
position, where he is and what he sees to propose something like this.
All right.
So I want to give Crossroads a chance to chime in because he's been waiting.
Crossroads 2 though, isn't this kind of a big win for Red Hat if all distributions are
more like Red Hat, then Red Hat wins?
I don't know about that, however, I think we can all acknowledge that this is an issue,
that developing software for Linux is more difficult because of Linux's variety.
I think we can all recognize that that's an issue.
Once we realize it's an issue, we have to think who can solve this?
In the Linux community, what in the Linux community can solve this?
Systemd I think is the only thing that can because with the exception of Gentoo and Crux
and a few of those other things, Systemd is on every Linux distribution, is or will be,
on every Linux distribution.
So if there's going to be one thing that can unite the package management of every Linux
distribution, it has to be Systemd.
Yeah, I agree.
I know that's why I made that joke a few weeks ago in Linux Action Show, it's going to almost
have to be.
And you almost have to have a company that has some real reason to put that much effort
into the game, and I think Red Hat is that company.
Wimpy, I know you wanted to kind of, did you want to touch on anything else before we wrap
up on the topic?
Yeah, I think Crossroads and Heaven's Revenge have totally hit on the right point here.
For decades, Linux has often been described as a Unix-like operating system.
It was neither one thing nor the other.
It wasn't, I mean, when I worked at Sun Microsystems, we used to joke that it was Solaris for a
pro and Linux for show.
Oh.
Yeah, oh, indeed.
And I think that what Systemd is doing is it's very clearly setting out the future of
Linux and it's giving Linux its own identity for the first time, a distro agnostic identity.
And Linux and Systemd are going to be the future of our platform, and I think people
are either going to have to choose to adopt it and learn it and like it.
And maybe now ButterFS is in that.
Yeah, definitely.
But I mean, I've said that despite ButterFS's foibles, I do use it on my root file system.
Yeah, that's why I've been using it too.
I felt like this was coming too.
Linux has to have a file system with these capabilities, and this entire initiative gives
you some insight as to why it's necessary to have functionality like this to have an
operating system to overcome these limitations, despite its problems.
Yeah, and I think the only question that leaves to be debated is do we continue calling it
GNU slash Linux or Systemd slash Linux in the future?
Ouch.
Wow.
We'll wrap the discussion there on that.
We'll talk some more.
I know Fred's got some stuff he wants to chime in on.
We'll do that in the post show, but the show's gone long, even though we didn't get a chance
to get Aaron in or the DNF discussion.
And Eric's been looking at DNF too, so maybe we'll just bust that into its own segment
next week and talk about Fedora's new package manager, because we've got to call it right
there because I've got to get home.
But a fascinating conversation.
If you're curious, go read Lenard's post.
He wants as many people talking about it as possible right now because I think he acknowledges
to make this work, to make this successful, it's got to have huge community adoption.
Buy off.
You thought Systemd had to have big buy off?
No.
No.
I mean, this is right.
I mean, think about this, Matt.
Universal package management using the file system across every Linux distribution.
You just have to have ButterFS support and this version of Linux kernel.
I mean, that's the biggest change ever.
It sounds awesome, but there's huge changes.
I mean, it's absolutely mountain moving, and it's one of those things to where you can look
at it seven days from Sunday, and you think you got it all figured out, and then you're
thinking, oh, wait.
What if you do that, though?
Yeah.
What if you do that other thing?
Yeah.
There's so many things.
How will it work on mobile devices?
How will it work on embedded systems?
Exactly.
All these kinds of questions.
How will we distribute software to switches running Linux now?
Yeah.
It's fascinating, and it's going to be one I think we will probably track for a while
as it sort of develops and grows.
And we'll be curious to see, A, if it makes it, and B, how much it changes from this point.
But I think tonight I'm going to give it another read.
I've got it saved up to Instapaper, and I'm going to give it a go through.
But Matt, guess what?
That brings us to the end of this week's Linux Unplugged.
Now, I don't know exactly what we've got scheduled for Sunday.
I'm waiting to hear back from a guest, but I already have kind of like a let's get serious
about A, productivity under Linux, but B, how to take the Chromebook and actually make
all these Chromebooks that are coming out right now a drop-dead awesome Linux experience.
Not a second-class experience, but an awesome experience.
How to do that.
I might cover some of that on the Linux Action Show.
We've got a whole range of topics, so Matt, I'll see you on Sunday, okay?
All right.
See you then.
All right, everyone.
Well, thanks so much for tuning this week's episode of Linux Unplugged.
Don't forget us.
Join us live.
We'd love to have you here on a Tuesday over at jblive.tv, jupyterbroadcasting.com, slash
calendar to get in your local time zone, and jupyterbroadcasting.com, slash contact to
send in your contact info, and jupyterbroadcasting, or also our subreddit, linuxactionshow.reddit.com
is a great place to go.
All right, everyone.
Well, if we don't see you on Sunday for the Linux Action Show, I hope we'll see you right
back here next Tuesday.
And Fred, why don't you, in the post-show now, get a chance to jump in with what you
were going to say, because I know you were mentioning you're seeing some problems if
the distribution's kind of normalized out.
Yeah.
First of all, you shouldn't feel that bad.
I mean, you have to run the show, and for me, it's really no problem if I don't get
to speak.
So, first of all, I'd like to say something about Linux, or at least how I see the whole
distribution thing, you know, spanning out.
So essentially, it's free software and open source is an evolutionary type of thing, yeah?
So made the best win, yeah?
And distribution's essentially branched off to solve different kinds of problems, to sort
of even solve the same problems in different kinds of ways.
And it's time to converge back by taking the best of each, right?
So you know, it's really not a problem if they all just converge back, right, into a
single system.
It's actually a good thing, because we get the best of each of them.
That's a good perspective.
I like that.
Yeah.
I actually think it's like the natural course of things, right?
It is the sort of organic evolution that open source seems to take, where it sort of forks
out the strongest survive, and then it gets reincorporated, and we kind of focus on that
thing.
Exactly.
Exactly.
And also, on that point, you have so much of the differentiation between the different
distributions is the low-level plumbing that defines them.
So ultimately, it's the package manager and the release cycle.
If you take package management and release cycles out of the equation, and Upstream is
now responsible for distributing their binary subvolume, the distributions are going to
have to focus on the end user experience to differentiate from one another, rather than
technical masturbation.
Yeah.
Yeah.
And philosophy and things like that.
Oh, I wanted to give, before we go too far there, I meant to give a quick plug to Aaron
Saigo.
He has a Patreon page up.
He is bringing back Illumination of Free Software, kind of like a talk show discussion show.
He's going to have it structured.
He's looking for backers.
You can go to patreon.com slash L-O-F-S, and I'm a backer, and he's got a video up there
talking about what he wants to do.
And we talk a lot about getting good open source coverage, and I think the thing about
a Patreon campaign, just like a Kickstarter, you can back a Kickstarter and get absolutely
nothing, or you can back a Kickstarter and actually get the product, and I think it depends
on who's running the project.
I think if anybody's going to be able to pull it off, it's Aaron.
I think if he sees success with it, he'll keep at it.
So go over to patreon.com slash L-O-F-S, and kick him a few over on Patreon if you want
to.
I wanted to give him a plug for that.
In other words, we're going to have him on the show, but we had some mumble connection
problems.
Okay.
So what about the fact that this is powered by ButterFS?
That does seem to be the elephant in the room that we're just kind of glossing over.
Yes.
Sorry, Fred.
Go on.
No, I have a much bigger problem here, and so Leonard is the guy who should be doing
this.
I absolutely agree.
I think he has the view and everything, but the problems he tackles usually, they're quite
big.
They're complex.
They're made of many small parts, and he has always a grand vision, but never a stepwise
vision for solving something.
He never gave out like, okay, now we're solving this little piece, and then that little piece
on top of that, and so on.
He just goes out and says, I'm groundbreaking.
I'm changing everything, and it's good for everybody.
Might be good for some people, might not be good for some people.
Until this day, I've been running Arch with systemd on my laptop, and I have some serious
problems because I encrypt, so I raid my encrypted partitions.
I don't encrypt my raided partitions, and systemd does not handle that properly.
So there are special cases where, sorry?
It actually does if you handle the dependencies correctly for your file system startup, if
systemd is in your init read, although I don't think Arch has systemd in the init read.
So I've read quite a bit.
I have went on the systemd IRC channel asking, I've read a lot of the documentation.
My system starts up fine.
It does not shut down properly.
And then actually for debugging shutdown, by the way, I have to log to a text file.
So I'm back to CSV init style of logging.
I cannot use journal CTL for some reason, this journal D stuff.
So there is a huge fuss, and then there is this one corner case that maybe somebody did
or didn't think about, and that he didn't manage to cover or systemd didn't manage to
cover or think about it somehow.
And this is the kind of problem we have in today's technology.
And Linux is going to turn into Windows if we keep doing this stuff.
Windows works fine.
No, I'm serious.
I'm serious.
Because Windows works fine for the general case, not for the corner cases, right?
And this is why Linux was so flexible and susceptible on a use case basis.
That's why it worked fine for so many technical people.
But if we're going to keep skipping those, skipping that, we're really going to end up
quite badly.
I also, I think I want to, you know, blackout24 in the chat room brings a good point that
it's not just a Lennart effort.
I think he's the name that has clicked the most with everybody because it does add some
credibility to the effort in a sense.
But I don't want to, but I guess I don't want to over-cult a personality, this thing, too,
because it is not just his thing.
However, let's not kid ourselves, he will become, if it's successful, he'll have to
become the figurehead of this, and it will become Lennart's baby.
Well, he's done it before, he might be able to do it again.
Well, he's just, simply put, he's one of the most followed online.
He's one of the most well-spoken from like a, he'll come at you with a technical rebuttal
that is both scathing but yet also technically accurate, so therefore hard to quibble with.
He's really good at that, and he's got the name brand.
So I mean, this is not a Lennart quote-unquote initiative, but I think by the end of it,
it'll look like one.
Well, you know-
A lot of the time.
Go ahead.
I just think this trend continues forward is that we keep seeing innovation starting
around the Red Hat Fedora-type people like Lennart.
So I just wanted to point that out, that's pretty interesting.
I wonder if our pace of development is getting a little bit too quick in a way that scares
most of our technical users now.
Oh, one Linux that fits all is not bad.
I'd say-
Well, you know, that's the thing that we have.
Our problem that we have so far is our variety.
A lot of people bitch about there's too much choice in Linux.
This helps, you know, unify.
Just choose a district.
A lot of people just like the village.
I mean, I think part of the problem, I think we are part of the problem each time that
we go and we say we're using Linux.
I mean, seriously, I'm not coming for the GNU plus Linux thing.
I'm just saying you use a distribution and the distribution represents a whole set of
things, not only the kernel, they could actually change.
That shouldn't matter to you.
When you're using your computer, like for us technical people, yes, we care about it,
but let's face it, a regular user comes to the desktop and he doesn't know or care about
what kernel is in there, what is going on on the background.
If it's called Unity, if it's called Gnome, they don't care.
They care.
It works for them and that's the experience they want and that experience is under a name
of the distribution.
That's the name you go for and if you do that, a lot of the issues of, oh, it's so fragmented,
just don't exist.
That exists for us.
We like to bitch about it, but let's face it, the user doesn't care.
The user just wants it to work.
Also, if we don't allow for change, if we don't allow for innovation, we can't move
forward.
Of course, but just a minute.
Let's turn off distro so it can always happen.
He can do it in the distro he's on and if people in there like it, some people like
everything else, when it proves useful and it proves to be worthy, it appears on others'
distros.
It can work.
Yes.
Thank you.
Thank you.
I'm trying to avoid the whole celebrity hacking topic because it's funny, not to even get
into the body parts aspect of the celebrity hacking, but I feel like so much of what we've
been talking about, building your own cloud, Team Fortress Chris or going with own cloud
or SyncThing or BitTorrent Sync and all of the encryption and all of this stuff and then
you just have this huge story that drops, this sort of the personification of all of
the stuff that we've been a little worried about, people have been a little nervous about
and it has flavors.
If you zoom out and look at the meta story, it has flavors of NSA spying and now it's
a new angle.
Look at that.
It has flavors of personal privacy and protection.
It has flavors of controlling your own data.
It has flavors of what the responsibility of these new corporate overlords that are
sort of forcing you into these new systems and these new ecosystems that just do this
stuff for you and at the same time, one of their marketing messages is, don't worry about
how it works.
That's the selling point.
You never have to think about it, which then encourages exactly these kinds of things to
happen.
So I think it's a huge meta story.
So yes, there's girly parts that are involved and of course, there has to be that adolescent
aspect to it that sort of gives it the traction, but I think when you take that away from it
and look at more of the violation and privacy aspect of it and the implications that this,
I mean, this is happening to very public figures and so the reaction is very public and a lot
of people are talking about it and a lot are aware of it, but I was just saying a little
while ago that if you actually follow the news on this kind of stuff, this kind of thing
happens almost on a weekly basis on a much smaller scale and usually it involves kids
and it involves a high school and the shaming of someone and then that someone either sometimes
gets suicidal or they have to leave the school.
There is a very real life aspect to this story and I think sometimes when we start talking
about it from a technical aspect, we'll talk about it from a, oh, well, they need local
encryption or we need transparency or the solution is open source code that can be publicly
audited, but we forget about the fact that on a much smaller scale and probably realistic
on a daily basis really, if you think about the amount of devices around the world that
are out there that this kind of stuff happens on, there is probably these kinds of violations
going on almost daily, but this story has given us the opportunity to actually stop
and think about it because it involves people with names we know and faces we recognize.
Although these women have had an egregious privacy breach for which there is no apology
by anybody, I'm not so sure they were the target of this.
Do you not think that Apple were actually the target of this in that this is, the timing
of this seems to be very precise?
Oh, snaps, look at you wimpy busting out the conspiracy bacon, very nice, sir, very nice.
Where's this bacon from?
Well, okay, so they're about to have their big unveil, this is Apple's time of the year.
They're going to introduce a new payment system supposedly partnered with Visa, MasterCard
and American Express, right, built on NFC, probably connected to your iTunes account,
I'm sure.
Yeah, and you look at the scale of what was disclosed improperly, this wasn't something
that just happened overnight, this must have taken weeks of planning.
Yeah, I agree, I agree.
So I think that the timing of this is very deliberate and I think it's designed to embarrass
Apple.
So it definitely accomplishes those things, it publicly shames famous people for using
iProducts, which is something that, you know, it's one of these things where you'll see
like Samsung will pay a celebrity to take a selfie and like Ellen, for example, she'll
be out on stage, she'll take a selfie with the Samsung camera and then she goes backstage
and tweets about it on her iPhone and that drives people crazy.
So wimpy, are you implying then that this was orchestrated by someone?
Well, I don't know who it might have been orchestrated by, but I'm wondering if the
motivations of the individuals behind it was to sort of slander Apple and use some salacious
means in order to accomplish that.
Maybe it was an activist that wanted to derail the centralization of the payment system,
right?
Maybe it was like...
Possibly that or possibly it's just simpler, I don't like Apple and I'm going to, you know,
show them in a bad light because I want product X to win, you know, the mobile wars.
I'm watching a video of my daughter right now on the baby monitor at home.
I think that bacon was brought to you from Frank's meat market in Black Diamond, Washington.
Ha ha.
Oh, man.
Well, yeah, I think that reasoning about us as activists or just a few people because
the nature of the simplicity of the brute force and it doesn't look like there's been
that huge of a technical effort behind it.
Right.
But also the other reason why I think this is an attack, I'm not sure if that's the right
word, an attack on Apple is looking at some of the files that were taken, it's implied
that other storage, you know, cloud storage platforms were potentially compromised.
But those cloud storage platforms haven't been mentioned.
They've very squarely pinned this on iCloud.
I do recognize that as well, but I also I've noticed just in the tech news industry, quote
unquote, if you can even frickin call it that, if the story has Apple, you put that in the
headline.
It does not matter anything else.
Because A, headlines are of limited length and B, it seems Apple headlines drive traffic.
If you put Microsoft, you could put Microsoft, Oracle, Amazon, Google, eBay in the headline
and they still drive less traffic than when you put Apple in the headline.
So I think that might explain that aspect of it, is that's just the click baiting nature
of the tech media.
But yeah, I mean, I think also if it is a simple, if it is truly as simple as a password
breach and perhaps aided by an inadequate lockout timer after a certain amount of invalid
attempts, then this is truly something that could affect any cloud service.
Because for example, if I have a script and a computer and time on my hands and say Dropbox
allows me to do nine invalid login attempts, on the 10th attempt it locks my account, well
then I would just make a script that tries to log into Jennifer Lawrence's Dropbox account
nine times and then sleeps for the hour or whatever it needs to sleep and then tries
another nine and I would let that sucker run for a year.
Just like people Bitcoin mine when they get nothing because if you get anything at all,
it's going to be such a payday, it's totally worth it.
So yes, it absolutely makes a difference if you rate limit the login attempts.
Fundamentally though, if these kinds of things, something this private, something this important
is being protected by a password and a password alone, I think that's a failure of the system
and I think you can give some of the blame to the user for using a dictionary password.
But I'll tell you guys, I've been guessing people's passwords since I was literally in
elementary school.
I figured out my teacher's password just by looking around at their pictures.
I've been doing it for years.
Nobody has changed.
I mean, I am, I'm getting to be an old person now and I'm telling you for 20 years now,
human beings have been using the most ridiculous, 25 years, people have been using the most
ridiculous passwords to log into their computers and that has not fundamentally changed.
And you know, it's funny because people think they're really good at picking passwords and
they think they're really clever, but I've been able to figure out my mother's passwords,
my father's passwords.
I won't say other people's passwords that might be listening, I've been able to figure
out teacher's passwords.
Human beings are not good at picking passwords unless you are educated on how to do it.
The nature of this attack was to use the find my iPhone, which I believe you need to supply
an email account and a password combination.
And once you get a valid credential, just think how many systems that can unlock, bearing
in mind the majority of people use the same password everywhere.
Email accounts are often used as the assert your identity field.
So you've now got an email account and password and you can just go around trying that Google
Dropbox and everywhere else.
Well for most of those, you don't even need to try the password, you just need the email.
Because you take your email and you go to whatever the service is and go, I forgot my
password.
I mean, that's one of the brutal things about current online identity is that it's built
around your email and maybe your phone, two things which are remarkably easy to get your
hands on.
Right.
And especially when you have physical access.
Like if you can sit at somebody's desk and you go to any website that they ever visit
and the chances are, even if that website's logged in, their Gmail or Yahoo or AOL Mail
is logged in and you just initiate a password reset.
It sends the email to a tab they might already have open on their computer.
You open up the email.
I mean, it's ridiculously easy to do this.
We talk about this constantly on TechSnap because people really, really, really underestimate
the quote-unquote value of their email inbox.
And really, that's where it's all at.
And I think too, we have to ask ourselves if you can't consider a service secure unless
it requires more than a password.
And would it be ridiculous, A, for a company to require two-factor, and B, if any company
could pull it off, wouldn't it kind of be Apple?
I mean, they do all kinds of stuff that's just like, you can't do that, and then all
of a sudden it becomes normal.
What if Apple required to make iCloud changes like this, touch ID and a password?
If you have an Apple device that has touch ID, then they just require you use that as
a form of two-factor authentication.
They could do it.
Yeah.
At least what I see among my peers and people that I know is the reason they, how they justify
using the same password and the same weak password is because they think, oh, no one
will attack me, or no one will ask me.
Yeah.
I'm not important enough.
Yeah.
But they don't realize it's not them that someone's going to try to hack.
They're going to attack Facebook or some site they have an account on, get all those accounts
and then automate the attacks against everyone else.
Right.
Yeah.
Yeah.
Yeah.
Then everybody just gets swept up in it.
So back to the app thing that you mentioned about, they could do it.
What would be their motive, like what would motivate them to do this?
Marketing?
I mean, it's a good marketing point, right?
So two reasons why I think Apple could be the company to do it.
One, because they'll do things that seem almost like suicidal sometimes, like they'll launch
a product that kills another product of their own.
The other reason is because they're not making money off the monetization of the data.
They're making money off the monetization of the hardware.
So Google and Microsoft, both of them monetize the data for advertising purposes, but Google's
way beyond that.
We all understand that.
So Google, for example, even though they're working on encryption for Gmail, I would be
pretty impressed if they ever actually encrypted the actual email contents that they couldn't
read themselves, because then they lose out on a huge AdWords opportunity that would probably
literally cost them millions of dollars.
But Apple, if they can't read my data, if it's impossible for them, if it's encrypted
at the operating system level on the device using their 64 bit fancy processor, they lose
nothing.
It doesn't cost them a dollar.
Wouldn't that take longer to send the message though?
I mean, that would be, you know, one of the, it's not acceptable.
It's just not a sexy feature.
It wouldn't be a time thing, but I'll tell you what, after what's happened, it's a sexy
feature now.
Well, maybe, maybe.
I was hoping the NSA stuff would make it a sexy feature, but that seems to have sort
of petered out.
Most iPhone users don't care.
I mean, they just don't care.
Most people I know really don't, it doesn't matter to them.
They don't care.
The thing about my generation is that we've grown up with Facebook and we've grown up
with sharing everything about ourselves.
So most of us, and I'm not included in that, but most of us really, it doesn't matter to
us if our information is out there.
Maybe to an extent, but so take one of these friends you're talking about.
They care if all of a sudden their dick's on the internet.
Yeah.
Although, as long as their dick isn't on the internet, they'll just say, oh, he shouldn't
have done that.
Right.
So anytime a dick or a booby gets on the internet, I think it brings it a little more home.
Because now it's somebody you know, it's a face you recognize, it's a body part.
It's not an abstract concept anymore.
It's a dick or a booby.
And I think that is more powerful than an abstract PowerPoint presentation published
by The Guardian.
That is true.
So maybe in regards to the nudes they're sending, sure that might get them to care a little,
but especially about all the stuff that Google collects, it doesn't matter to them that everyone
has a huge database on their life.
I bet amongst Joe Public, this story has resonated more and made them think more about their
own personal privacy and how they use their, not just Apple devices, but how they use these
devices than anything that was disclosed by Snowden and The Guardian over the last 18
months.
Yeah.
My favorite day weekend here in the United States was millions of US consumers going
through and purging their photo streams.
And then there's the other half of them that were actually going and looking for those
other photos.
Right.
And I'm thinking, hey, you know, maybe I should be taking, that was my thought process, hey,
maybe I should take some nudie photos.
And how would I do that exactly?
Polaroid.
That's what I was thinking.
Just grab a Polaroid.
If you want to succeed, you've got to have a sex tape.
That's the thing.
Jupiter broadcasts can really be catapulted into the spotlight, but not in the right spotlight.
I feel like a calendar train wreck out of me.
All right.
At work, when Heartbleed hit, I just quietly went about the business of patching our stuff.
And then at the next board meeting, I said, you know, there was this thing and did you
hear about it?
Nobody knew what I was talking about.
Really?
We weren't affected in the first place, but we've done the necessary things.
Today, my boss comes up to me and says, can I have a word with you for a minute?
And I say, yeah, sure.
I go into his office and he says, so what do you know about this iCloud hack with all
of these celebrities?
Really?
So it is great.
So I think this story resonates.
Heartbleed knows not so much.
Not on the radar.
No.
But then this, everyone wants to know.
Well, there you go.
It's got everyone's attention.
It's another reason to brag about that you have an iPhone.
Boobies bring us life and maybe they'll finally bring us some privacy and concern about security.
I feel really bad for those gals that, the women that had to have this happen.
Oh, I do too.
I can't imagine if that were like my wife or whoever.
I know.
It's really awful.
I think it's important to remember it's not just them it happens to.
It's happening on a smaller scale that is affecting lives all the time.
We can't do a lot in our position, but as advocates of free software and as folks, I
think a lot of you in the audience are those of you who work with your friends and family
to help them do these things.
You have an opportunity to at least help the people around you, show them alternatives.
Don't be heavy handed about it.
My mom's using iCloud.
I let her go ahead.
Mom, have at it.
Whatever.
But if you want an alternative, I'm there to help you set it up.
It's more secure.
Here's the benefits.
We don't have to be heavy handed about it.
But as folks in our position, I think we do have some opportunity if we want to engage
in it to help people with this.
Yeah.
I was just thinking back, it was a couple of years ago, I saw this on ABC.
There was this girl who got hacked.
She was like maybe 14 years old at the time.
And her life was essentially ruined by all these pictures that she was taking for her
boyfriend who I believe she's now engaged to or something or at the time of the thing.
And they were kind of risque photos in a lot of cases.
And her life was ruined from that point.
Everybody, once her account got hacked, her high school friends spread all over the internet
and her high school friends called her a slut and whatnot.
And she probably wasn't that way.
But the fact that they were treating her that way is just sad.
And a young person is probably not properly emotionally equipped to deal with it either,
which is sort of the unfortunate part.
Exactly.
The withdrawal from school and everything.
This happens every day.
And a lot of people don't understand that and don't recognize it.
And I hate that it took a celebrity gang hacked, or several celebrities, I guess, before this
became a public problem.
It's like natural disasters.
People don't care until it happens to them, unless they have sympathy.
We're kind of a martyr for our security systems at the moment.
And at least right now, we know there's a problem or at least normal jails of America
and hopefully the world because it's not just America celebrities that got used here in
this situation.
The world's, or at least a lot of different countries, got involved in this.
At least everyone will know that there's a problem that needs to be fixed versus just
the ladies being exposed or used for this sort of publicity.
I just hope we don't have an overreaction from the political side of the spectrum, but
we'll see.
Now, I think we'll leave it at that.
I think we've probably said enough.

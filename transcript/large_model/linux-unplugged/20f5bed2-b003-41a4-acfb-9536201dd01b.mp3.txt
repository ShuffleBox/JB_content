Everybody suffers from downtime every now and then.
And there was recently a major DDoS attack,
and with that, we got some great fodder.
Air, Azure, what is it?
airsazurethrows.tumblr.com.
airsazurethrows.tumblr.com.
Of course it's a Tumblr.
Is a collection of Azure Airs that are really great.
And you know, recently I've been struggling
where I have services where part of them is broken,
and I've realized it because they depend
on all these different various microservices
that keep going offline.
I'm looking at you Telegram bots.
This is a great Tumblr if you want to smile.
airsazurethrows.tumblr.com.
This is hilarious.
This is Linux Unplugged, episode 168,
recorded on October 25th, 2016.
Welcome to Linux Unplugged, your weekly Linux talk show
that has a real soft spot for open hardware.
My name is Chris.
My name is Wes.
Hello, Wes, we'll be getting into a little
open hardware purchase that I just made.
Very excited.
We'll talk about that a little bit in the show,
but as is our traditional recipe these days
for an unplugged show, we'll be going through
some great community updates.
We're gonna start with one that I'm personally
super excited about.
Am I not just dancing right now?
Oh, you are dancing off the wall.
I was totally just dancing on the intro there
because I'm so excited about this.
Then you've probably heard about Dirty Cow by now,
but did you know it's going after your Samsungs
and your Motorolas and your HD, yeah, your Android phones.
It's everywhere.
It's a train wreck, and we'll give you
a little more specifics about Dirty Cow,
and if you really need to worry if you're
an up-to-date Linux user, then we'll get into archival
of some of our long-term memories digitally.
We'll get an update from Popeye and Wimpy
about their trip to a recent event, that's right,
and then we'll get into that hardware surprise.
Oh, man, this is something I have been waiting for
for two years.
Well, yeah, waiting for this product for about two years.
We have had people that have created this product
on two different Jupiter broadcasting shows,
and I'm gonna play an interview for you today
in today's episode of Unplugged.
Then I'll unveil what it is that I got.
I am so excited.
I'm gonna have it right here in the studio.
I have no idea.
Oh, I know, I know.
And it actually relates to something
we were just talking about in the Poe Show last week.
Oh, no way.
It all ties together.
It all ties together.
But before we can get into any of that, Wes,
there's a protocol that must be followed,
a duty that must be followed through on,
and that's bringing in the most important part of the show,
our virtual log.
Time-appropriate greetings, Mumble Room.
Hello.
Hello, it's time.
Hello, good evening.
Woo-hoo-hoo-hoo-hoo!
Hello.
Woo!
Hello.
Beautiful people.
That is a virtual log right there.
Yes.
Okay, now tell me you can't be a little excited about this.
I am super excited about this.
Freeablo.
Freeablo, a work in progress,
free open-source replacement for the Diablo 1 engine.
Simply import your Diablo assets
and enjoy the same old game with better performance,
modern resolutions, and first-class support for mods.
Is that Linux I see on the top right
of your screen, Wes?
Yeah, it is, buddy.
No way.
Yeah, it is.
They love the original Diablo.
In fact, they love it so much,
they say they're gonna spend their precious time
developing a free and open-source solution
for those that wanna play it on a modern computer.
I think-
I'm down with that.
Yeah, and they say it's legal.
They won't distribute any of the copyrighted game assets.
You have to have a copy of those assets to play.
But everything else around it, they're gonna open-source.
See, that's great.
That seems like a pretty clever way to do it.
Yeah, and they're working on multiplayer right now.
So, I am so excited.
I had not seen this.
Did you find this?
How did I find out about this?
Good job, Wes.
How did you find out about this?
Where'd you see this?
You know, I actually don't know,
but I had it sticking in one of my open tabs.
I was like, okay, this deserves to be in the show,
because I had left it for myself, obviously,
because I wanted to play it.
Yeah, when I saw that come across the link list,
I was like, yeah, yeah, we are freaking talking about that.
What better way to exercise your left mouse button, right?
That's true, that's true.
All right, well, we did it last week,
and the tradition continues this week.
We're gonna open up the show
with a little bit of breaking news here.
This is CNN Breaking News.
So, you've probably heard to death by now
about the dirty cow vulnerability in Linux,
the most serious Linux vulnerability quote ever.
Ours said that, a few others have said that.
Now it seems that Android phones
are getting rooted by this vulnerability.
This feels like this is where this matters.
Yeah, your router, your fridge, your IP camera.
But that's still pretty niche to the main consumer.
Yeah, so it looks like there's a new method
for rooting Android devices that's believed
to work reliably on every version
of the mobile operating system,
and of course, a wide array of the hardware.
Individuals can use it to bypass limitations
imposed by manufacturers or carriers,
but they can also use it to sneak apps in
for malicious purposes.
The technique comes courtesy
of the Linux privilege escalation bug
that we talked about on Linux Action Show called Dirty Cow.
And so, some people are calling the vulnerability,
or it goes back to kernels,
the vulnerability goes back to kernels since 2007,
which pretty much means every damn Android phone ever made.
Right.
And several independent security researchers
are doing proof of concepts right now.
Ours interviewed two of them.
David Manchouser told Ours that the proof of concept code
that exploits Dirty Cow on Android
gets devices close to root.
And with a few additional lines of code,
he can get persistent root access
on all five of Android devices he's tested.
A separate security researcher asked not to be identified
said that several other people
have developed separate root exploits
based on this Dirty Cow exploit.
They say we're using a rather unique route
that we believe we can use elsewhere in the future.
And because of that,
they don't want to tell Google about it.
Oh, of course, right?
Because they don't want Google shutting down the vulnerability.
So they're keeping it on their own.
This is bad, right?
This is an example of why
sure you can get your Fedora machine updated,
you can get your Ubuntu machine updated
and your Archbox updated.
But-
What are you gonna do about your Samsung phone?
Joe Smith walking around with an S6 or an S5 or an S3
or a Motorola X or whatever.
Yep.
Especially on one of our big name carriers here.
Oh!
She'd have to buy a new phone
once there's a phone that is patched, I guess.
Yeah.
And I don't know,
anybody in the mobile room
think we're worrying too much about this stuff?
Because personally, I feel like I can't overemphasize this.
I feel like I'm sitting here
yelling down from the mountain top.
You're walking around with vulnerabilities in your pocket
that could expose your personal data.
A disaster is coming.
A flood is coming.
That's something you've been thinking about
a lot personally, I think,
in the last year or so.
Am I overreacting?
Sometimes.
With the personal data thing,
I feel like Android does that pretty well
by just vaguely saying what an app will do with your data.
Yeah.
And they do have sandbox.
And only once.
And there is, I mean,
and ours does a good job of mentioning it.
You know, there is that double-edged sword
of some users will benefit.
I have already linked this article
to some of my friends who are on phones
that they've wanted to root but can't.
So there are benefits.
Yeah, I was thinking that too.
I do also worry about that.
I mean, realistically,
I don't know what other people are going to do,
but does it just further the bad press
about the Linux kernel?
Does it make other people less likely
to build a similar platform using that kernel?
It also makes me feel like all of those people,
like the black phone,
or everybody who's created these ultra-secure Android phones,
there's a dozen different models right now,
they're all bullshit.
Because they're all walking around
with this kernel vulnerability.
The only phone that's legitimately safe
is probably a Nexus that gets the patched in
or a Pixel phone.
Yeah, that's probably true.
Or one that's not Android.
And speaking of this,
I want to give you a little more details about Dirty Cow.
Also, quaintly known as CV 2016-51-95.
Rolls right off the tongue.
Dirty Cow, which naturally has its own logo
and webpage now, which is kind of actually a funny one.
It's a sign of our times.
It is kind of a good one, though.
They do a very good job of it, actually.
It's a race condition
in the kernel's memory management subsystem.
By timing things right,
a local attacker can exploit the copy-on-write mechanism
to turn a read-only mapping of a file
into a writable mapping.
And then with that,
a file that should not be written,
you could write to,
you could write to,
which means change certain parameters,
change the permissions,
change the ownership.
Secondly, I'm in the pseudoers.
Yeah, it doesn't take much integrate,
or I'm sorry,
it doesn't really probably take much imagination
to see how the ability to overwrite files
could be used to escalate privilege in a number of ways.
The known exploit depends on access
to slash proc, slash self, slash mem,
which is not universally available.
Even some systems that don't provide it at all
or access to it.
But there are still ways to exploit the bug, potentially.
The exploit happily bypasses
almost every hardening technique out there.
Strong sandboxing with mechanisms
like seccomp might slow it down,
but counting on that is probably not wise either.
This is an article at LWN.
The only real protection
is to upgrade a kernel containing the fix.
You have to upgrade with a kernel that has the fix.
The workarounds aren't even all that reliable.
So DirtyCow's a real son of a bitch.
And it's not the only one
that's being exploited on Android right now.
So there is also the rowhammer vulnerability,
which allows the attacker to bit flip over to root.
Researchers have devised an attack
that gains unfettered root access
to a large number of Android phones,
exploiting a relatively new type of bug
that allows adversaries to manipulate data
stored in the memory chips.
This is actually, I believe, a vulnerability
more at the CPU level than it is on the fricking OS level.
The break. Yeah, it's a hardware problem.
Yeah, the breakthrough has the potential
to make millions of Android phones vulnerable,
at least until the security fix is available,
to new form of attack that seizes control
of core parts of the operating system,
and neuters key security defenses.
Neuterism.
Equally important, it demonstrates
that the new class of exploit, dubbed rowhammer,
can have a malicious and far-reaching effect
on a much wider number of devices than previously known,
including those that are on ARM.
So this seems to be an issue so far
tested on the Nexus 4, Nexus 5, and the G4 from LG,
the Moto G models from 2013 and 2014,
made by Motorola, the Galaxy S4, the S5 from Samsung,
the One from OnePlus.
However, not in all cases the results are consistent.
Only 12 of the 15 Nexus model 5s that were tested
were successfully rooted,
and only one of the two Galaxy S5s were compromised.
So it's something to do with the chip,
and the researchers that are testing this
have made an app that you can sideload
to test to see if your CPU is vulnerable
so they can get a wider sample base.
Holy crap!
And this they did tell Google in July.
Well, that's good.
Yeah, they say they're vulnerable at Google,
so the vulnerability is critical,
which is their highest rating,
and have awarded the researchers four grand.
So Google thinks this is a legit issue.
I like that.
Until recently, we never even thought about hardware bugs,
and software was never written to deal with them,
and there is no quick software update to patch the problem
and go back to business as usual.
That's a shame.
I do wonder though, it's kind of making me think,
I feel like we don't see the same kind of press
about jailbreaking on the iOS side as we do about
getting into it. That's because
it's a superior system.
Ah.
Really, I mean, come on, let's just admit it.
I mean, yeah, you can have your fanboy position,
but you're right, you don't.
You don't have this problem on iOS,
and if you do have this problem, they patch faster,
and that's a frickin' reality of the market right now.
Maybe another vendor will hopefully do it better soon,
but this is not what Google is good at.
It's kind of the perfect example of why, you know,
they do have problems on iOS,
but they patch them, and you know.
My hope is the Pixel fixes this particular gap.
I really hope the Pixel fixes this
in a way that a lot of people have.
I just.
You ordered one, right?
Yep.
Yeah, see, I really hope, man,
maybe you'll be our canary, because this is bad.
And be honest, you know, the other thing
that really pisses me off is that comment that,
well, until recently, we never considered hardware
vulnerabilities and didn't design our operating system.
Bullshit!
What is data execution prevention?
Come on, give me this, come on.
Really, why did Apple design the secure enclave
so that it doesn't pass any information
to the underlying operating system or the ARM chipset?
There's a reason they designed it like that.
Of course we know of hardware vulnerabilities.
X86 is filled with them.
And surely ARM is as well.
So just say, well, we, you know, wow.
Well, especially when, no.
It's like, it's like, bullcrap.
And even this one has been, you know,
the row hammer's been around for a while now.
What do you think, Swift?
I honestly think that for the most part,
people can't afford the Pixel,
so it's asking a lot to expect them to get it.
They need this security for a cheaper phone.
Yeah, I definitely agree there.
What do you think, MiniMac, about the Pixel?
Yeah, I would hope that the Pixel
gets more than three years of support
because of just these kind of vulnerabilities.
I don't pay a thousand bucks for a phone
only for three years,
and then have these bucks coming on me
and I can change anything.
This is probably the number one bit of feedback we got
on last week's User Air where we talked about the Pixel,
and we talked about the update cycle,
and so many people wrote in and said,
man, everybody in my extended friends and family
that is not, oh yeah, we also covered this on TechSnap.
We got a bunch of emails on TechSnap.
So both shows, we got a lot of people writing and say,
I might update my devices more frequently,
or I can't update my devices more frequently,
but you know who never updates their devices
is all of my friends and family who aren't tech.
Exactly.
People that aren't into tech.
To them, an update is just an annoyance.
It might break things.
They update their phone when it breaks.
Or you go into the store and they update it for you,
or whatever.
Maybe when they all die off, that'll change,
but that seems to be the way people operate right now.
And so these have to be five-year devices.
How do we teach the next generation that updates are good,
that updates are something you should do?
They sure like buying things.
Yeah, right.
Maybe they already got it.
I think the other thing that really drives me crazy
about all of this is I don't accept the answer
that it's not possible to update these devices
for five years.
That's, tell that to the banks that are running,
or just Red Hat in general.
I mean, they're backboarding crazy.
Tell that to the servers that have been running
a Red Hat distro for seven or eight years.
Tell that to the banks that have mainframe
still getting support by IBM
that are in there for 30 years.
Yeah, but Chris, to be fair,
the people who are getting updates from Red Hat
are paying for them.
Once you've gone through the retail experience
and you've walked out with a phone,
you give zero money to HTC or Samsung.
It all goes to Google.
I would say that,
but it's Google's responsibility to do the updates,
not HTC.
There's also no option for me to pay anyone
to do that if I wanted to.
I guess I...
Except for those maybe value-add people.
I don't see how this isn't just a technology problem.
This seems like it actually, this doesn't,
I guess here's what I mean,
is to me, Poppy,
this doesn't seem like a technology problem at all.
They technically could update the software
for as long as they want.
I think technologically possible,
they simply don't have the will
from a corporate standpoint.
No, I'm not suggesting it's not a technical issue.
It's a purely financial one.
Nobody's paying them to do it.
And it's probably also easier for them to,
otherwise you have to do things separately
and so they can roll their features.
Android 2 and devices never getting updates to...
This has been the same for years and years and years
that devices wouldn't get updates
and it slowly got better,
but it's always been the case that
if you don't pay for someone to actually do the hardware
enablement and do the back porting,
then that, I mean,
you're not getting any revenue from those customers.
They've walked out the door, right?
You're getting revenue from people
who are buying the Pixel phones
or the next phone or the next phone.
You're getting nothing from those people
who walked out the door three years ago.
Really though?
Google's not making any money off of Android users
besides the hardware.
So I'm not, I don't agree.
HTC and Samsung and all the others are.
Well, that's their, then they made a mistake
shipping Android because that's a separate argument.
That's a totally separate issue.
The fact that they can't make money off of Android.
Well, they've done pretty well off it.
I'm not saying they're not making money off of it.
I'm saying they're making money off,
they're making continual forward revenue
off the new devices they're being sold.
They're not making any money off the ones
that have already been shipped out.
You know, Toby, I understand
that they're not making money off of it.
I think this is Google's responsibility.
Just like Canonical can now live patch
the running Ubuntu 16.04 kernels
of servers all over the world.
I don't see why Google couldn't live patch Android handsets.
Why, the technology is there.
It's a possibility.
They just simply don't have the will
or the corporate contracts
or the bureaucratic structure to enable it,
but yet they still have the nuts
to sell these devices to consumers
and literally put their personal lives at risk.
It seems like a total disconnect to me.
Right, and I agree with you.
You know, I go to a store,
if you went to a Verizon store and bought a device,
my contract is with Verizon.
That's who I made the retail purchase with.
I understand, right.
If Google reached into my phone
and flipped some bits on my phone,
I would be pretty angry as Verizon
that Google are reaching into devices
and screwing this up.
I think that is an old argument.
The carriers have to test the devices
to make sure they work on the network,
but yet there are hundreds of millions of iPhones
receiving updates directly from Apple,
and there are tens of millions of Android devices
running CyanogenMod, and the carriers don't have any.
How many hardware, how many different hardware devices
are there that Apple support, like right now?
Not that many.
Look at how many different devices there are
that even one manufacturer, Samsung, has.
Look at the range of devices that one manufacturer has.
It's a completely different ball game,
Android devices than Apple devices.
That is true.
Although I wonder if something like that
could be fixed with like an SLA type agreement
between Google and Verizon.
You know, if they do cause Verizon real problems,
support calls increase by a certain amount
on these supported phones with upgrades.
You could have business arrangements around that.
All right, well I wanna give other people a chance
to jump in and kind of push back a bit too,
cause I know people have been tagging me.
Mosinrath, you had a comment about shipping Android,
about going with Android and not making any money.
Go ahead.
Yeah, just like a lot of people have been saying in there,
such as Demerit, and I believe Sweet Lou has also
made the point, you're gonna wanna get to him on it as well.
Swift 110 also made a statement about that.
You gotta take a look at, with Apple, as you see,
they have the enclosed garden set up,
so they're making money off of the software,
the hardware, you even thinking about it,
they're making money off of it.
The fact that you even used the word Apple,
yes, somehow they were in your pocket already.
But with say Samsung and HTC and all those other companies,
they ship the product, you're buying the hardware from them,
and as was stated, I believe it was by Popeye
a couple moments ago, that's it for them.
Yeah, well is that fair though,
because Samsung's charging $800 for a Note 7,
the Pixel, if you want a decent one, is $750,
the 6P is an expensive device,
they seem to be making a shit ton of money,
the device hardware costs as much, if not more,
in the case of Samsung, as an iPhone.
Yeah, but as a lot of people have stated,
they make the money off of you once, that's it.
That's the only cash they get from you,
so of course they're gonna try to get as much as possible
in order to develop the next product.
After that, they don't get any more money from you.
Well, Samsung doesn't, but Google,
Google's constantly monetizing the Android platform.
That's why they made it.
Yes, but that's Google that's monetizing the platform.
I think that's who should be developing the updates too.
But Google can't develop the updates,
because there's no cooperation between them
and the hardware manufacturers,
because the hardware manufacturers
keep the source to themselves.
That's why.
Well, that's not always,
it actually works the other way.
Google hold back Android updates
from handset manufacturers as well.
So Google will hold back the latest version of Android,
so they can ship it on their own devices
before it goes out to Samsung, HTC,
even the tier one handset manufacturers
don't get it as fast as Google get it themselves.
This is why the Pixel's a thing now.
I mean-
The only one with that Google Smart Assistant, guys.
Sorry, it just cracks me up.
Yeah, the only way to get it.
But I think it just tells you,
it just shows you that even Google themselves
recognize this is a core issue.
This disconnect between the carriers,
the handset manufacturers and Google.
It is not a great ecosystem.
Yeah, it is not a great ecosystem.
And everybody's paying patent fees
to Microsoft that gets in it.
Everybody's getting screwed at all ends,
and Google's the only one making money.
Samsung was, but.
All right, so does anybody else,
tag me again in the moment
if anybody else wants to jump in before we move on.
I think what I feel is I understand,
I understand how the business relationships
are structured today.
I understand how the source code
dumps over the fence work from Google.
I understand how monetization works of these devices
and how they make their money,
and how the carriers wanna add their layer on top of it.
I get all of that, and I ask you,
if you were an alien traveling from Mars
and you arrived here and you looked at the situation,
would you not think this is a dumb arrangement?
And say, well, the only thing that makes it this way
is the artificial constructs
that you hairless monkeys have set up to do this.
And if you just simply did it differently,
it would be better.
And it would literally be better for consumers.
It would protect their privacy better.
Mr. Swift, go ahead.
The fact that they don't protect people's privacy
is something that's gonna become a larger issue over time.
And I mean, if you just have an affordable way
to protect people and show that you respect them,
I think you'll make more over the long term
versus trying to grab, grab, grab in the short term
and charge all this money,
but you're not providing them
with the kind of comfort that they deserve.
Right, like you might need that to change the market.
Yeah, they're in their walled garden
and they feel safe and secure there.
If you can offer the same thing in the free software
or with regards to the phones,
then you'll be in a much better spot.
Yeah, and in fact,
WW, that's kind of what you're thinking, right?
I mean, geez, don't we hope that this is where free software
could really help us?
Yeah, because if you think about it,
console game developers, to put it,
to situate it kind of like that,
when you see an update on that, it's paid for.
The software development is paid for
and they pay for the actual update process
to get it on that hardware
and to be tested on that hardware
and whatever licensing fees.
And that kind of sucks.
Where on PC you can do whatever.
So I'm really hoping that with Ubuntu phone,
and maybe Poppy or would be good answer,
that's that, or maybe Poppy,
that would it be open?
So like, if you're a developer, you can solve these issues,
you can contribute to Ubuntu phone OS
and make it better without having to wait
and all that stuff.
Because as I see it now,
the only way this will be ever solved
is having an open system
where things could be more rapidly patched out.
Right, WW, when we were talking about,
well, it doesn't make HTC any money
to update these devices, in the back of my head,
I'm thinking, that's never been an issue
for Linux development.
No, you're right, it hasn't.
We've developed and people have put in their-
It's like the community can solve this problem.
And that would be Ubuntu phones advantage, right?
Yeah, maybe.
May I add something in here?
Yeah.
So what I know is that manufacturers like Qualcomm
and others, they only build devices for the Android platform.
So the device is not open, they ship their own drivers.
So you can't just build a Linux infrastructure
and put Ubuntu phone on it.
That's why Ubuntu phone and Sailfish is based on Android
because all these phones only run Android.
So it's not as easy as WW thinks.
Okay, fair point.
Yeah, I have noticed that.
And that is probably a fair point.
With the Linux development point you just made,
the difference with Linux is
the people who are doing these patches
are working for companies that want the code
because it helps them.
With Android, it's just being done by the companies
to help support the device
and then they'll gain money after that.
So I guess we need Google with its deep pockets
to step up and incentivize these carriers
or when hardware manufacturers to consent to updates.
Or as a market, the Pixel phone needs to be successful enough
that it forces the market to react.
And that might be what happens.
Or we just keep having these horrible problems
and enough that the platform is at risk.
Yeah, and like Sweetloo points out too,
not everybody can afford these latest and greatest phones
which also puts them at security risk.
I wanna address that in just a second.
But before I forget, I wanted to mention
that I got a note from the developer
of the tool we talked about last week
called the Magic Device Tool.
Oh, really?
That allows you to install Ubuntu or Cyanogen
or Phoenix OS or Android on your device.
And I made the mistake,
because I think I misread this,
yeah, I misread this article.
He actually does support the Google Apps.
He's like, hey, thanks for the coverage,
but by the way, we do support the Google Apps.
Hey, even better.
Yeah.
That's great.
Thank you for writing this to tell us.
Yeah, it was really nice.
And so what a cool tool.
And it's called, again, it's called the Magic Device Tool.
And it allows you to deploy
the latest Ubuntu Touch release, Cyanogen mod,
with or without the Google Apps,
and the factory Android app image, like a backup,
including Phoenix OS on the BQ line of devices,
pretty much all of them that matter,
including the tablets, the Nexus 5, the Nexus 7 2013.
Yeah, which is, a lot of us have that one
with nothing to do with it.
Also the 2012 Nexus 7, Samsung Nexus 10,
which is a great tablet, and the OnePlus One,
and the Fairphone 2 are all supported
by the Magic Device Tool.
So it's also just a nice way to create backups
to restore your device.
And it's nice that Ubuntu Touch is a top-supported option.
So basically, I bring this up
because if this is something that you've been chewing on,
because it's something I've been thinking about,
like Wes mentioned for a while,
I kind of feel like this is at least,
my boat is now on the beachhead and I have options.
And once the 6P is added to that list, if it ever is,
that'll be the day.
The day, yeah.
Yep.
I really, I'm really hoping I could.
That'd be a great device for it.
Oh my God, if I could ever, ever run Ubuntu Touch
on the 6P, I would be so happy.
Because I mean, I am willing maybe one day
to just get like an MX Pro type device.
Oh man, I would love it on the 6P.
Because I don't mind the 6P hardware.
It's a little big, a little heavy, but the core is nice.
Great screen, great battery.
And if you hold it real still, it takes a good picture.
So that may be something that happens.
And the Nexus devices you can pick up for super cheap too
if you want to play with Ubuntu Touch.
You know, there is another component
that is sort of something we have to attack from both ends.
And that's the carrier side of this.
Because they're a bunch of bastards
in this entire thing too.
So let's take a moment and mention our sponsor,
which is a carrier that does this differently
and does it right.
Go to linux.ting.com.
They don't get in the way of your updates.
They don't have like a ting experience
that they have to develop and integrate into the image.
They don't put their bloatware on their apps
because they don't have any bloatware.
They don't like prevent you from updating
over the wireless if you want.
Like this just simple wireless.
You pay for what you use, minutes, messages, and megabytes.
You pay for each for what you use.
So if you don't text a lot, you don't pay for any texting.
If you don't call a lot, you don't pay for any calls.
If you don't use a lot of data, you don't pay for data.
When you use it, you do pay and it all averages out.
You go to linux.ting.com to get $25 off your first device
or $25 in service credit if you bring a device,
which will pay for more than your first month likely
if you average it out.
This is something that's really nice
because there's no contracts.
There's no early termination fee.
The devices are unlocked.
They're not locked to Ting.
You can move them around if you want,
which makes it really nice to bring devices to.
When you do need help, you just talk to a person,
not a phone tree, but a person.
You don't have to press zero like seven times.
You don't hit mash it, ma'am, ma'am, yeah.
And they have CDMA and GSM,
which I know outside the US,
that's not very common to use CDMA,
but in the States with at least-
We just love it.
Well, especially on the West where you have,
we have the Rockies, there's a ton of trees.
CDMA has some serious advantages.
And you know, GSM has been absolutely rock solid
for me as well, so it's really nice to have both options.
So you can get a little bit of a taste of it
by going to linux.ting.com.
And then speaking, addressing Sweet Lou's point,
speaking of flagship-type devices
that aren't super expensive,
yesterday Ting just put up a blog post
about five inexpensive smartphones
with flagship performance.
It was brilliant.
So you can go get an unlocked phone
with great performance, with no contract,
$6 for the line, and you pay for what you use.
And you can read the blog by going to linux.ting.com
and then click on their blog link.
I think this is kind of, it's just a sort of end,
bookend our conversation.
This is a huge part of that entire formula.
Yes, it is.
Yeah, I really, if I could give you,
if you could afford it,
and I could give you one recommendation
about how to be secure with your mobile device,
get a device from the Play Store
and put it on the Ting network.
Yep, it's expensive, but you're right,
like that's probably the best option.
You can go this route too, you know,
and if these devices are getting updated
by their manufacturers, Ting will not interfere with that.
And so go read the devices they've listed here
because the prices are like under 300 bucks,
except for the OnePlus 3.
But you know, there's really some serious options
like the Huawei, is that how you say it?
Hawaii?
Huawei, the Honor 5X, 199.
The 5X, the 5X, still a great phone.
I mean, it would be a big upgrade
for what this has got right now.
Yes, it would.
In fact, you know what I love about Ting,
this is from their blog right here.
Here at Ting, we don't want to pressure you
to buy a phone from the Ting shop.
There's lots of special deals online
and we recommend that you take a look around.
Just by waiting a few months
and doing a bit of online research,
you can get all the smartphone you need
at a much smarter price.
That is so plainly written
and it is so refreshing to hear that
from a mobile phone carrier.
They're not trying to create a giant vertical monopoly.
They just want you to use their service
because it's good.
They give you the couple of tips you need
to go do a little searching.
They link you to the Ting compatibility checker
to make it even easier.
They say over 80% of the phones made
in the last few years are compatible with Ting.
Wow.
There you go.
I think this is such a refreshing take on this.
So get started by going to linux.ting.com.
That gives you the discount,
but also lets them know you heard about it right here
on the unplugged program.
And right there in the middle, what would you save?
Just experiment with that.
That's fun.
And consider like if you made a couple of changes,
say you marked your music to play offline
and you download your podcast over Wi-Fi,
how much data would you use when you're commuting
if you did that?
And if you switched to Ting
and you made those two adjustments,
how much could you save?
Check it out.
Go to linux.ting.com and a big thanks to Ting
for sponsoring the unplugged program.
So Wes, there was this post about the X, Z,
is that how you say it?
Yeah, X, Z.
X, Z is the X, Z form.
It's only two letters.
It seems like we could say them.
I know, but I don't know if it's Z or X, Z.
I actually don't know.
I think I always say X, Z, but I'm probably wrong.
Yeah, well, it doesn't really matter
because there's a post over at nonganoo.org that says,
so we can't just let that go by, right?
It's nonganoo.org, nonganoo.org.
I've never installed GNU slash Linux.
They say that the X, Z format is inadequate
for long-term archiving.
I think this entire post is bullshit,
but I was kind of curious what you thought about it
because you were the one that found this link.
And then I wanted to kind of roll this into
a slightly larger conversation with our mumble room
about what they do for their long-term data archival needs
because, and I know a couple of them in there are parents,
couple of them in there probably have keepsakes
that they want to have forever, videos, things like that.
The idea of like, before, I feel like a lot of people
had kind of discovered, right?
You had like pictures that you found in your garage
or your parents' attic or something.
You're like, oh, I have these from when I was a kid,
but if it's on a hard drive,
that is not the same in the digital age.
God, that is such a good analogy.
So I have photo albums from my childhood
that my mom gave me.
She's like, here, these are yours to hang onto now.
And once every 15 years or whatever,
I've opened them up and I'm like, holy crap,
remember when we had chickens?
Remember when we cut a hole in the side of the house
and put a window in?
That's so neat.
I'll look through it and I'm like, this is really great.
And maybe one day my kids,
like I've gone through my dad's photo album
and I found that to be fascinating.
Wow, look at my dad as a kid.
He looks like a kid.
Totally.
My dad's just a kid.
Those are good memories, right?
You get to experience that.
Nothing like that.
There's no book my kids are gonna go grab of them
because it's all on a hard drive.
Or it's in some cloud account
they don't have access to.
And I'm gonna be honest with you,
this is one of the reasons I sacrifice
every sacred freedom and privacy aspect I have
by uploading all my photos to Google Photo
because I'm just desperate to have
some sort of long-term archival
so that way when my kids are 15,
I can look at them when they were four and five
and remember what that was like.
I don't wanna not have that.
So I keep trying to think, well, how can I do this
where I control the data, I have a good archival system,
and it is, I guess I want the digital equivalent
of a photo album or other things like it.
And I'm kinda curious what your thoughts were
before we get to that.
Yes.
What are your thoughts about this particular article
about how the XZ format's a bastard
and shouldn't be used because of checksums?
Well, one, I think the Savannah, the non-GNU website,
they support free software.
I don't know their long history,
but I know they support free software,
but they're not associated
with the Free Software Foundation,
which as we've discussed on the show,
you can love them or hate them,
but they definitely have an ideology.
Zombies don't run Linux.
Exactly.
So this is, fair disclosure,
this is written by the author of the LZIP tool,
which is kind of a competing tool to XZ.
They both use the LZMA compression algorithm,
which let's see, that's a fun one.
What is it?
Oh, LZ.
ZIV Markov Chain Algorithm.
LZ is great because it's not the best compression ever,
but it's great speed, works great on a file system level.
I've used it in combination with ButterFS in the past.
Sure, yeah, yeah.
And so this XZ also implements that.
That's what it uses to compress files inside,
but it also implements its own container format.
And so this blog post,
there are some things where I think
that for the majority of use cases,
it doesn't really matter.
One big thing I think that did kind of ring true
is they talk about how it doesn't support garbage data
after the end of the file, that sort of thing,
where I think if you were gonna do things
with tape style backups, that sort of stuff,
there may be some validity.
I think there are also some things
that generally ring true
and are good design principles here
about you want to keep things simple,
you can over-engineer things.
There are some plausible arguments here
about how XZ may be over-engineered,
especially for the most common use cases.
Here's why I feel like the argument
that using XZ for backup in archival is bad.
The reason why it's bogus, he hangs his hat
on things like checksums and whatnot not being built in,
but there are so many other tools
that if you just use the Unix philosophy,
if you use SHA256SUM and PAR2,
there's ways you can do this
and supplement the deficiencies of XZ
that are just built-in tool chains on the Linux system.
Right, I think that's exactly.
But I wonder, does anybody in the Mamba room,
so InagoGo, Mr. GoGo, you just made a great point.
You said, in fact, speaking of you, your thing is next,
but Mr. GoGo, you had a, I forget what it was,
but you combine TarSnap with something else
and that this is your solution?
Well, I don't use it though.
I guess forward being an interesting way of doing it.
Using a free NAS to do ZFS stuff
and then doing, putting some of the stuff
you want to keep onto TarSnap
and then also having a photo album
just in case any of those two fail.
But that's not, yeah, that is a great way
to protect the data.
But I don't feel like it,
it doesn't have that accessibility that I'm looking for
that a generation from now,
when I'm not there to tell them how to get access to it,
I'm not there to provide them the login,
but I want them to have access to it.
That's what the physical photo album for.
Print them out.
Mosinrath, what do you think?
Is there a digital way to do this with like, this?
Probably not.
Like we've been discussing it in the chat room here
in terms of like how long things will last and all that.
But as you can see by my last comment
and what other people have said,
it's like, I dare you to try to use your free NAS
when there's a power outage.
Go ahead.
Let's see you do it.
You can't.
And therefore that physical media,
even though it is going to fade,
no matter what it is that you do,
is still the best one.
Like I got a pile of pictures and a couple of photo albums.
I'm looking at them right now, right?
I don't have those in any kind of digitized format.
I had them at one point in time, scanned them all,
lost them all because I formatted the wrong disk.
Oh, wait a second.
You could do that just about anywhere,
any place, any time, couldn't you?
Because there's no such thing as a setup,
as far as I know,
that if you can access it to put stuff in,
that you cannot access it and wipe things out.
Right, and something that you know
they're going to have access to generations later.
A kind of like TechMav's solution is create a dead man switch.
So maybe once you stop punching the button every few years,
it automatically delivers the login credentials
and a URL to your kids.
Yeah, that would be pretty neat.
You know what?
Let's punt this to the listeners
that are listening after the fact,
and let us know.
Comment wherever you're catching this
or wherever you prefer to comment or email or tweet,
and let me know what you would do for this.
And I obviously want it to be Linux based.
Right, I mean, open source, right?
I mean, you need things that you can,
if you need to do something 20 years,
100 years from now that you can.
Really, seriously?
Yeah, that's a key thing.
Because that way you could send the code along with the files.
So Mr. Gogo, was it in the post-show last week
that I was talking about how I'd love to have analog meters
to represent my CPU usage?
I think it was in the pre-show.
Pre-show, okay.
So after talking about it on the unplugged program,
Mr. Inagogo submitted this to the subreddit,
a video where he's connected a VU,
or I think it's a voltage meter, I think,
connected over USB to his laptop.
And you can see he's got Gnome system monitor running here,
and the CPU load that's in Gnome system monitor
is translated to this volt meter's analog dial.
Have I described this correctly so far?
Kind of.
Okay.
The Gnome system monitor was just me demonstrating
that it's quite accurate to where it's pointing.
Sure.
But there's an Arduino sitting between the laptop
and the volt meter, which is having data sent
from the laptop by a Python script,
which then turns that into a PWM signal
that changes where the needle is.
WW says it needs more Nixie tubes.
This is pretty awesome, though.
I'll be honest with you, when I saw this,
the first thing I thought to myself was,
God, I'd love to have some bigger versions
of these mounted on the wall by the main broadcast machines,
the OBS machine and the Wirecast machine,
and be able to have these analog dials.
So I knew how hard these systems were working.
I would love to have these as props in the studio
and also actual useful readouts.
How long did it take you to do this?
A day, after getting the VU meter.
Ha ha ha!
That is so cool.
And then you put the code up on GitHub to do it
so other people can play, too.
See, the other thing this makes me think of
is like cloud stuff.
Like what if you got your dropout
that's running the server for your people?
You want to see like any random metric
that you just kind of want.
Is that a thing?
Could you do that?
I mean, if you can make a time series data,
I don't see why not.
So you could have like your fricking droplet CPU load
represented with a V with a little...
I mean, there'd be a lot more intermediate steps,
of course, but...
That is so cool, Wes.
Man, as the sysadmin in me wants that for all the things.
Or like load average over the fleet.
Like, wouldn't it be great for like the different SATCOMs
to know how hard the different SATCOMs
are working right now for us?
Or what's your, yeah, throughput on your bandwidth?
What's the, yeah.
Oh, you could do, oh, you could, oh, oh, man.
It's Delta Flyer B2.
So here's what we need.
Now let's, I need Mr. Gogo and others.
I need you to come to the JB1 studio
and we need to spend two days out here.
I'll film the whole thing.
You guys build these things
and we'll make an episode out of it.
We need to do this.
That sounds amazing.
I think that is so awesome.
That is, gosh, that's cool.
All right, well, we gotta keep moving
because this is the longest episode ever.
This is a big show, yeah, right?
So I wanted to give a chance to chat with Mr. Popey
and I wanted to take a chance to chat with Mr. Wimpy
about a recent event they went to
and it's not too uncommon, I think,
but maybe just to recap, we could kind of set the stage.
Here, there's these events that Canonical holds
from time to time where they bring their team
or different members together
and they focus on a few things
and they say, let's really focus on development
in this area right now.
We have a distributed team all over the world
and we're gonna leverage having all of them in one space
for a short period of time.
There's gonna be a hyper level of productivity
and we're all gonna walk away with this
with sort of a shared picture,
a shared idea of what the next set of goals are
and a lot of things often get produced here
but they don't often get discussed.
People don't realize that this is happening.
I don't know, guys, how am I doing so far?
Have I kind of set up with the general premises
of what these events are?
Kind of, it depends.
Some of them are development sprints
where the developers get together
and actually hack on stuff.
Others are planning sprints
where there's loads of meetings and discussion
and this was more of a planning than a hacking sprint.
Oh, cool, so you can break them out.
Some hacking.
That's brilliant.
Yeah, well, we have sprints all the time.
There was one the week before we were there,
there's another one this week
and there'll be another one the week after
but with different teams.
So the one that we went to last week,
both myself and Martin went,
was in the Netherlands in The Hague
and there was 200 and something people there,
250 people there.
All from Canonical or where?
No, there was mostly Canonical people.
So design team, desktop team,
Snappy team, community team,
and others who I don't recall.
Unity 8 team, Mere team.
Unity 8 team, Mere team, yes, well done.
And like loads of other people
who I've never seen before
and also there were some community people there
as in non-Canonical people there as well
who were invited.
But it was mostly meetings.
There was a room we had set aside for hacking
because the Snappy team were working hard
on getting a release out the door
and the release candidate was last week
while they were there
and the final release is this or next week.
And so they were hacking but mostly it was meetings.
And I imagine that for a company
that is sort of dispersed,
I mean, I understand there's offices,
but for a company that has a very dispersed workforce,
it seems like these would be pretty essential
to getting everybody that's working
on this particular thing on the same page.
So even if it's not developing code,
you're getting everybody to-
Making it feel like a team.
You're buying it on the idea.
Is that accurate?
Yeah, it's very much that.
I mean, everyone like regularly meets up anyway online.
We all use Hangouts and Mumble and IRC.
We use all the tools, Rocket Chat, whatever.
But when you meet face-to-face, different things happen.
You can have a conversation in a corridor
and someone will say,
wouldn't it be great if this happened?
And then someone will go back to their hotel room
or the bar usually and sit back on their lap
and then give a demo, a lightning talk later that day
saying, we discussed this thing and look, it's now a thing.
Wow, cool.
That kind of stuff is quite good fun,
especially when you've got a couple of hundred people
who are all working in the same direction.
You could reach out to the right people
who have the knowledge about whatever it is
you want to achieve.
Yeah, that's not just productive.
What's fun about that is when I've been in those situations,
that's been some of the most personally satisfying work
I've done is it's just a lot of fun professionally
to be working in a team environment
that's firing on all cylinders or close to it.
And so I kind of want to poke Wimpy's brain for a second
because I imagine except for the snap sprint
that happened a little bit ago,
but this is Wimpy's first canonical event
as a canonical employee.
And I would imagine starting at a place,
you've heard these names,
you've talked to these people online,
you've met some of them,
but now all of a sudden you've jumped in the deep end
and you're working with them, you're shaking hands.
This must have gone from real to very real,
I would imagine for you.
Is that true, Wimpy?
It is.
I mean, I got to meet all of my team in person
who I've got to know most of them
over the years of contributing that never met before,
including my manager, so that was obviously good.
But then yes, there's lots of people in canonical
who've helped me along the way,
some of whom I got to meet in Heidelberg earlier this year
and some who I got to meet for the first time
this time round.
But these sprints are pretty intense efforts.
They're absolutely exhausting for all the right reasons.
It's pretty sort of a breakneck speed during the day
and then the exhaustion falls into beer and food
in the evening and lots of fun with everyone.
So yeah, they're really good fun.
And I was, I think, a stereotypical first time
sprint attendee in that I came back with the Ubu flu,
which I hear is something of a tradition.
Of course.
One thing that was different about you being,
this being your first one, which most people don't get,
was you were thrown in as a track lead,
so you had to manage a track of sessions
and not many people have to do that.
Sounds about right.
That is the deep end.
Yeah, the deep end was quite deep.
That's where he thrives, I think.
I just stepped on West's switch.
Wow, Wimpy.
Well, that sounds like it must,
so now you're back at home, other than the sickness,
you must really feel like you have a job job now.
I do have a job job now, yeah.
And we know what's in store for the next six months now,
not just within our team, but in all of the teams
and how all of the teams are gonna be pulling together.
To give you a flavor of what went on,
we were all given T-shirts at the end of this event
and on the front of these T-shirts,
it simply says, snap, snaps, snappy, snapped, snapcraft.
So if you're in any doubt what the theme was,
I think that underscores it rather clearly.
I think it's such a fascinating time right now
and Canonical has moved very fast on the snap packages.
Today, Flatpak got a big update,
so this is an area that's getting a lot of attention
and a lot of focus right now,
but Wimpy, I guess going from the outside in,
I think you are sitting in a position
where you maybe had suspected
that there was people in there
that were passionate about this stuff
or you probably hoped there was people in there
that followed current events,
but as an external viewer,
when you look at the Canonical group,
you know a few names,
but maybe you could name four, five, six people
at Canonical, the people at the top,
the people that join us frequently in the communities,
but I wonder, Wimpy, going in now,
did you walk away with a sense
that people there are hardcore Linux advocates,
they're Linux users?
What was some of the senses you walked away with
and some of the things you suspected but were confirmed,
what you can share at least?
Without a doubt, these were the 250, 300,
and 300 most smart people I've been in a place with ever.
Everybody is an expert in something.
Wow, that must be exciting.
You'll not hear the names of many of the people
that were there,
but they're all doing impressive things
and creating great technology.
Geez.
And that was my impression was
there are some seriously clever people around me
at the moment.
Isn't that a great feeling?
That must feel very rewarding
to work with a group like that.
Yeah, it is.
That's cool.
It's terrific.
So yeah, that was my sort of general feeling
was what an excellent group of people
Canonical have got working for them.
And I only got to see this one group
cross-section of the people in Canonical.
And I imagine it's the same
as you go across the other divisions as well.
I think, you know,
I universally I have had an incredible experience
when I go meet these companies
and I talk to the people
who don't come out publicly
and I walk away going,
holy crap, they're doing some amazing stuff
that they're not even discussing.
They have people that are advancing technology
that they're not bragging about.
Exactly.
A lot of these companies,
you know, Canonical included,
when I meet the people I'm like,
geez, how come you guys aren't telling the story?
This is really something.
I think it's impressive
and it's extremely reassuring
when you get down below the surface,
you get below the spokespersons,
you get below the blogs,
you get below the Twitter feeds
and you look at the people
that are actually contributing.
That is some of the,
at least if you're a tech head,
that's some of the most inspirational stuff
about this industry.
So that's really cool.
And guys, I don't know if there,
is there anything that we should be looking forward to
that's coming soon with Snap packages
or anything like that
that you can tease us with?
Yeah.
So there were some lightning talks
at the end of the days
and one of the ones that I was quite pleased to see
was Delta updates for Snap packages.
No way.
So like if you have like a LibreOffice Snap,
it's quite chunky,
but they're adding the ability
for the backend to do Delta
so that when next time you get a Snap update,
it only does a binary Delta,
it uses XDIF or something.
And the guy who was talking about this
gave a presentation,
not just about the technology underneath.
I mean, he gave a quick lightning talk about
his name's Tommy Richards.
And he gave a talk about,
a lightning talk showing downloading,
I think it was Inkscape or something.
And then he enabled Deltas
and then showed downloading the same thing again.
And it was super fast.
I mean, it was like noticeable difference
between many, many seconds
and a couple of seconds.
And then he gave a talk about how that's implemented
and the analysis that they did
in order to determine
what types of packages compress well.
And it turns out there are some
that don't compress particularly well.
And there are good reasons for that.
And it was a great learning exercise
for them to figure out,
what are the best algorithms to use
and what's the best methodology
to develop this kind of software.
And it was quite fascinating to watch.
Holy smokes, you know,
as somebody who's home connections on a MiFi
and somebody who occasionally broadcast from the road,
I thank you so much for Delta updates.
They are my favorite thing
when I have a distro that supports Delta updates.
It's a, that is,
my bandwidth thanks you too.
I am legitimately excited about both Flatpaks and Snaps.
I am probably personally
a little more interested in Snaps
because I'm already using a bunch of them
and I don't have any Flatpaks that are actually like,
the practicalness, the easy to use level faster.
And so therefore, yeah, that's what I want to use.
Yeah, and the apps, the couple of apps
that I wanted to try real quick
or the ones I don't want to futz with are already available.
And I would love to see more, absolutely.
And I could totally see,
I could see a huge place for this
in like enterprise or proprietary type deployments of things
where you already have all your own dependencies
and you just want a little bundle that you ship to
and you're going to probably run
some sort of Ubuntu cloud type operating system already.
No kidding, Wes.
I would have used the hell out of that back in the day.
Yeah, you're just like, oh, everything works.
It's in its wonderful little Snap, bam,
on in the server, you're good to go.
Geez, that makes me want to be a sysadmin again right there.
That would be so convenient and straightforward.
Damn, yeah, absolutely.
And you know, Wes, I still have a chance.
You still do.
There's still a chance.
Perhaps I could use my fleet of DigitalOcean droplets.
One of our sponsors here on the Unplugged program,
go to digitalotion.com and use our promo code DOUNPLUGGED.
That's one word and it's lowercase
and you plug it in there on your dashboard
and you get a $10 credit.
And this is why you want a $10 credit.
DigitalOcean is a simple cloud hosting provider
that is dedicated to offering the most intuitive
and easy way for you to spin up a badass Linux box
on their crazy great infrastructure.
They got great connections.
They got all SSDs.
They have a super sweet interface
that's better than it could even,
like if this was a desktop app
that you like had to like install as a package
on your desktop,
I'd be like, man, this is just such a great app.
It's a web app.
It's all HTML5.
It's a web app.
It works on your phone.
It works on your crappy browser.
It's a web app that actually is useful
and it's easy to use, but it's also extremely powerful.
If you're a total noob
or you've been setting up Linux servers for like 15 years,
you're gonna find this to be a nice UI.
Do you agree as somebody, you agree?
Yeah, absolutely.
And I gotta tell you,
when you use our promo code DOUNPLUGGED
and you get a $10 credit,
you could actually get a lot of distance out of that
because you can use hourly pricing over DigitalOcean.
So if there's something you wanna play with,
like OpenVPN or TinkVPN,
or maybe you wanna play with MB for 15 minutes
or Nextcloud. I still am using it
to compile my kernels.
When you have a custom arch kernel,
you just spin up a droplet.
Super fast.
You run the code to compile the kernel,
which is a make or whatever.
Which level droplet do you go with?
I usually go to the, what's the two-core one?
That's what I usually go with.
This is what I was gonna say,
because for three cents an hour,
I was gonna say,
because I know,
because a lot of everybody goes with the $5 droplet.
Which is a great deal.
It's a wonderful,
a little web presence,
your own domain, a blog, perfect.
But if you're just gonna build,
so if you go with the two-core,
so if you go with the Westrig,
it's three cents an hour,
it's two gigs of RAM,
a two-core processor,
40 gigabyte SSD,
they're all SSDs,
and three terabytes of transfer.
I don't have a reason to go
with the high-memory droplets yet,
but man, these things, they're crazy.
Like 64 gigs of RAM, 224 gigabytes of RAM,
and they're a ton of money, monthly.
But of course, if you need that much RAM,
that's probably not a big deal.
But something where you're already doing some caching,
or maybe you just need a big Redis that runs,
or Memcache.
And look, dude, if you switch it over to hourly,
okay, you know what?
I could afford 18 cents an hour.
Those are all numbers that I'm okay with.
Those are, even the $2 an hour,
like if I'm doing it for two hours.
At most a day, at most a day, maybe.
And you're like, okay, well then that's fine.
Yeah, it's a pretty cool system.
And then on top of all of it,
they have really great tutorials.
So you can just deploy a stack of apps,
or you can use one of the, like here's one,
pretty relevant, how to protect your server
against the Cal Linux vulnerability.
Well, it might be good to know.
Oh, that's topical, look at that.
Look at DigitalOcean over there.
So here's what I want you to do.
Go to DigitalOcean, set up an account,
and use our promo code DOUNPLUGGED.
We'll give you a $10 credit,
and then you can try any of this stuff for free.
You can run the $5 rig for two months,
or you can go run the Crazy Memory rig,
or you can run the West rig,
and build your kernels and stuff like that.
And I think the West rig's like three cents an hour.
Yeah, it's really, it's not that much.
I should do that for the, you know what, after the show?
If I remember, let's talk about how I could do that for my,
because you know, I got that MacBook running Arch
that you set up during the show.
And the kernel builds, they're like an hour, they're long.
So you know what the nice thing about Arch is?
It's pretty easy to run your own like Arch repo,
or it's something you can add.
And so then you just, you build everything on a big droplet,
you transfer it over to your $5 a month droplet,
because all you need is it to be like an HTTP endpoint.
And now you've got your own custom little Chris repo.
Man Wes, I'm gonna buy you a beer.
DigitalOcean.com, use the promo code DOUNPLUGGED,
and go build your kernels in the cloud like a boost.
DigitalOcean.com, big thanks DigitalOcean
for sponsoring the Unplugged program.
All right guys, I wanted to talk about something
that I'm beginning to change my tune on.
Do you remember that when I did a road trip to Noah's house
to like witness his home automation system?
And I was actually really impressed.
I was impressed as well.
And it's even cooler than we could capture on camera.
That guy's got chaps.
And on top of that, he's added on to it.
And so I have kind of changed my tune a little bit
on home automation, and there's this great-
You're tired of Rekai leaving the oven on?
Is that what you're saying?
You're farting.
Ha ha ha ha ha.
Ah ha ha ha ha ha.
Oh.
Sorry Rekai.
Oh, I catch it.
You've listened to user error.
I was listening to it on the way up.
Yeah, isn't that funny?
Yeah, isn't that funny?
Man, and you know what?
I've done that too.
The pizza situation since that episode has been rough.
All right, so this is really cool though,
because it's building a home automation system
where you run it all on your own land,
powered by Raspberry Pis.
And I've been experimenting with something recently.
This is gonna sound so stupid,
but just go with me for a second.
I've been experimenting with, during the weekdays,
leaving my monitors on.
Okay, tell me more, tell me more.
Well, traditionally, I've got these two.
Yeah, what's the monitor situation?
Oh man, I've got these great monitors.
They're 27-inch ASUS monitors.
I got two identical monitors.
One is vertical. Full HD, something else?
2K, so they're like, what is it, like 2560 by 1440
or whatever, but one is vertical and one's horizontal.
I love it, I love it for doing research, show prep,
or even just having like a terminal that's doing updates
and a telegram session.
The vertical monitor is wonderful.
It's killer, it's totally, totally killer.
However, one's hooked up over HDMI, or no,
one's hooked up over DVI
and one's hooked up over DisplayPort.
Let me guess, DisplayPort, oh man.
And it is, I've actually got a good system,
but so when I wake the system up,
the vertical monitor never fires up.
That's the DisplayPort monitor.
Yeah, you've been here.
Oh yeah, I've been dealing,
I just got some new monitors at work.
So we have six monitors now in a row
in the room I'm sitting in with verticals on the left
and right-hand most side.
So it's a really nice setup,
but one side is all DisplayPort and the other side,
I have one HDMI and then one DisplayPort
and then a DisplayPort chained to the third monitor,
which the chaining is actually working wonderfully,
but the power save, man, it's crazy.
I have a trick, I have a trick.
So what I do is my main monitor,
which I set via Gnome's display manager,
because otherwise the DisplayPort
would by default be the main display.
And in fact, when GDM starts up,
the login screen is sideways on the vertical monitor
and the horizontal monitor that sits in front of me is off.
Perfect.
And then I log in and Gnome 3 starts
and it rearranges the displays like a champ every time.
See, I'm on Unity too, so it's not even, it's worse.
Oh, okay.
But that's only if I've booted the system.
If I'm waking the system from sleep
or if I've just turned the monitors off
but left the system running
and maybe like let the drive spin down,
when I move the mouse and hit the power button
on both monitors, only the DVI monitor wakes up.
The DisplayPort monitor never wakes up,
which is where my telegram is
and where my terminal session is and all that.
I need that monitor.
So what I have done is I've installed a Gnome extension.
Of course.
That you just, you click it
and it puts your displays to sleep.
So what I do is I click it,
I have the horizontal monitor on, it is powered up,
and the vertical monitor, the DisplayPort monitor is off.
I hit the sleep.
Yep.
I turn the DisplayPort monitor on,
I hit the control button on the keyboard,
it then sends a new wake-up command to all the displays
and the DisplayPort monitor comes back,
pops right back.
Okay.
But this is about a 55-second process.
Yeah.
I've kind of timed it.
And it's super frustrating.
And one of the things I've done recently
is during the weekdays,
I've decided to just leave my monitors on.
And by God, I actually feel more,
I just sit down and I immediately start working.
All you do is the lock screen and you're good.
Or what, maybe not even that.
Boom.
No, just, I mean.
I mean, it's the studio, so.
If anybody hacks me, there's only one person
it's gonna be, and it's gonna be the beard.
And I don't think that lock screen's gonna be
what prevents him, so.
No, no.
Don't do it.
He's had rude since he got here, Chris.
Yeah, not only that, but he knows what the password is
for my account because all my studio machines
have a shared password.
And so I don't bother with the lock screen,
I immediately sit down and start working.
And I have just, I have been, Wes,
I gotta tell ya, it's made a difference.
I feel great, but now,
now I got this really annoying problem.
Like, I gotta like, turn on my lights,
and then there's two different places
I gotta go to flip a switch,
and sometimes I gotta turn on the fan,
depending on the temperature.
All this other hassle I gotta do before I get to work.
It's really highlighted the little,
how much the little things make a difference
in your everyday work.
This is actually what I'm saying.
And so I kind of have been,
I've kind of been turning around to the idea
of automating a couple of things.
Like, if I could automate the monitor wake-up process
so they could be turned off.
If I could automate the lights turning on
at the right time and the fan turned on
so that when I sit down, I am ready to go.
If I could have like an NFC checkpoint
or something at the entrance of the studio.
Or when your phone joins the wifi.
Exactly. Or whatever.
And if this, then that triggers all of that stuff
and turns it on.
I've been thinking more and more like,
not only would that just be nice to have, but great.
I'll film the entire setup,
and it would make great content too.
So it kind of seems like a double win, right?
Yeah.
I've been thinking about this setup
on how they've done it.
And man, this is sitting pretty with me.
They said it was a huge project for their office,
and they wanted light control, conference call room,
occupancy signalization, individual access codes,
audio systems with wireless music streaming,
manageable audio experiences in different rooms,
like the bathroom.
Honestly, with all this,
I'm impressed that they were able to take the time
to focus on this totally out of,
like this is a major accomplishment
for not exactly a business request, you know?
I agree.
And they worked on like light controls
and all that kind of stuff,
and they wanted to be able to control it
via web application.
What matters is they built it all
with this super badass Raspberry Pi system.
They have one master Raspberry Pi,
which controls all the low level hardware.
And then they have this thing called the distribution board,
and I'm showing a picture of it.
Oh, that's beautiful.
It's so beautiful that before the show,
I just sent a picture of this to Noah.
I'm like, Noah, look at this.
Noah, just look at this.
This is so gorgeous.
This is so great.
And then they have a second device
called the relay driver board,
which does what you would expect.
It also runs a web server on the main Pi
with a web application that allows the controls.
They have occupancy signalization via movement sensors,
which is how Noah does it in his house.
They have TV panel management
with Pis connected to different TVs,
and they have the Pis all centrally located in this rack.
So if a TV, they have an HDMI feed that goes out to the TV,
but all of the Pis are in one place.
You don't have to go out to the TV to service it.
Genius.
That's smart.
It's like bringing a patch panel to Raspberry Pis.
It's a patch panel of Raspberry Pis,
and this is the part of home automation
that's really, I'm loving,
because I could do HDMI over Ethernet for long runs,
and I'm loving this.
I don't know how you'd ever afford all of it,
but I think it's a great system.
And they talk about how they set up their audio
and all of that.
After looking at this,
it's really kind of turning my head
towards home automation again,
but in a way that doesn't feel like
it's tied to a product or a brand.
I think that's part of the part.
Noah uses a lot of interesting things,
and I think that he's a very cool,
it's almost like an analog approach,
but it does necessarily involve
a certain amount of products or boxes,
and it feels hard to replicate,
or very much like,
well, I've invested in this company's way,
or at least I've invested in these things,
and I need this equipment to do it.
Raspberry Pis are $35,
and Ethernet is whatever by the spool.
Plus I have Ethernet run to all the rooms
in the studio already.
You probably have the infrastructure to do it.
You have the,
I mean, you don't have the time,
but you have the Linux knowledge
and the wherewithal to do it.
Yeah, we need somebody to come out in the studio
and work with us, Wes,
to do all this kind of stuff.
We need some serious projects we can do,
because I've got like three or four Pis
in the studio right now.
They're just sitting around, right?
Or like Onion Omegas or who knows what.
Yeah, yeah, or Arduinos.
We'll be eating that in a moment.
Anybody in the Mamba Room experimenting at all
with any form of home automation,
even if it's like the Hughes brand
like I mess around with or anything like that,
anybody in the virtual log?
Yeah, go ahead.
I've been actually looking into using two Raspberry Pis
to solve an issue in my house,
which is the thermostat that I have is in one location
and my bedroom is at the other end of the house,
which means my bedroom in the winter is always cold.
So I was thinking about replacing
my simple, stupid thermostat with a Raspberry Pi,
which I already have sitting and doing nothing,
just connecting a relay to it
and making it switch the thermostat on and off.
And then having a second Raspberry Pi in my bedroom
that talks to that other Raspberry Pi.
And I can tell, you know, during the night,
maybe switch that thermostat to the temperature reading
from the other Raspberry Pi in my bedroom.
And during the day, switch it to the living room.
Solves that problem with, I have to buy a relay
and two thermometers.
You know, I've been thinking, it's funny you say this,
because I've been thinking about the same thing
when I finally set up whatever storage solution
and server solution I'm gonna have in Lady Jupiter
for being able to do on the road production.
It's all gonna be inside a dinette booth, which is...
Oh, right, this is in the rig.
Right, and you've seen it.
They're like plush leather seats.
Pretty comfy.
And they're made out of wood.
It's like you're putting inside a box that's insulated.
And so I've thought about putting a Raspberry Pi
or something in there with a temperature sensor
that could automatically shut down when things get too hot
because sure, in October in Washington,
I'm probably not gonna have an issue.
But what about in August?
In Arizona.
And I'm not, yeah.
Or I'm going down to California in a few weeks.
It could be a little warmer.
You park in the shade.
I have no idea, or one day maybe that side of the rig
is parked in the sunlight
and it's just getting beat with sunlight.
The temperature's gonna be all over the place.
And I've thought about, well, wouldn't it be great
if I had something in there that not only was charting it
so I had an idea of how things were going trend-wise,
but also a fail-safe that said, oh, God,
this is getting bad, shut down the cradle point,
shut down the storage array, shut down the NUC
or whatever it is.
Yellow alert, just power down.
And then send me a message.
That would be my ideal situation.
So that's where I've thought about using it too.
Even in the RV.
You know, I've thought about it.
It seems like there's a lot of applications.
Once you've got that kind of like,
I mean, if this, then that, that sort of style response.
Like there's a lot of things you can handle
like pet feeding or care, you can handle-
Turning on the AC, turning on a fan.
Yeah, that could be the route I go too, right?
I really just want like a home API.
Yeah, I looked into it and if you don't like doing things
by just using components that you buy on the wheel
or whatever, you can buy these relay boards
for Raspberry Pis and they can handle anything
from switching five volt circuits to 220 volt circuits.
Oh, that sounds really handy.
Anything from thermostat to lights and power.
Like you could literally just shut off power
to your entire computer with that Raspberry Pi relay.
Just before you do that,
make sure that that relay board in your mind
can handle the voltage before you burn anything down.
That could be bad.
Yeah, but they make those and then all you have to do
is they will probably be like I2C IO.
So you can just plug it into your Raspberry Pi
and start hacking.
And so if you're a software guy and not a hardware guy,
they make it pretty easy for you.
It's just a few extra bucks.
I like it.
This is exciting and I could see,
I don't know if I'll get it to the, I don't know.
God, I hope I get to it this year.
But with winter, I don't feel like it's the top
of my priority list, but I could see early spring
as being a project that I actually tackle.
It's kind of just interesting to think about it now
because as I start to deploy this stuff,
I'll have this in the back of my mind
of how I want to do this properly.
So I'll set the power up and the networking for it.
So it's all there when I'm ready to pull the trigger.
And then just, yeah.
And then when it comes time in the spring
before it gets too hot,
I'll have all the groundwork laid down.
That could be pretty, so if you've got ideas,
feel free to let me know.
Please do.
Yeah, if you've done this,
if you tackle this particular problem.
And you got a VU meter that'll work with it, right?
Yes, you'll have hardware dials.
You can get them up on the dash.
That'd be great.
Who cares about this MPH?
I'm looking at how my servers are doing.
That's so funny.
All right, well, before we go any further,
if you ever wanted to get really in depth
on a particular topic in Linux
or on the backend infrastructure
or any of the things that people
are really making money on Linux,
like Ruby or Python or AWS or Azure or OpenStack,
any of these kinds of things
that you would like to learn more about,
I would encourage you to visit our sponsor, Linux Academy.
Go to linuxacademy.com all unplugged.
That's where you go to support the show
and sign up for a seven-day free trial.
That's new.
I think that's a big deal
because you can go in there and get a little taste,
get a little idea.
Linux Academy has step-by-step video courses,
comprehensive study guides that you can download
and use offline,
and the courses come with your own server.
They'll spin up on demand.
I think also if maybe you've been tempted
by the certification life.
Right.
They have really good training on that,
and I mention this because I have been down this path.
It's been a while, but I have been down this path,
and you do want training that keeps in mind your end goal,
and I think they have a really good path.
They have these learning paths.
They're a series of courses and content
planned by instructors for specific tracks, which is nice,
and they have instructor mentoring available,
so if you do have questions,
you can actually talk to a real human and get your answers.
It's super transparent.
Yeah, you can get your question answered.
You get a good grasp,
so you really have a good grasp.
You really know what you're doing,
so when you go in there,
you don't have that anxiety about it.
It's not that you just prepared for a test.
It's you learned this because you're applying it.
You understand it.
You know what to do.
Especially if you combine it with their labs
and their hands on exercises.
You go in there, and you get real-world experience
on real servers.
I mean, these are servers they spin up
just like you would in production,
and you have the whole box to yourself,
the SSHN, and you're doing the job.
That is great experience,
and it's only the kind of thing you get
when a company focuses on Linux and open source,
when it's not just a thing that they do,
but it's what they do.
Exactly.
Linuxacademy.com slash unplugged.
Go there.
Try them out, and also, you can take advantage
of the new public profile feature.
I think this is a really nice feature
to let employers know how your training's gone,
which, I don't know, Wes, where you work,
when I was in IT, training,
like there was a part of my yearly, not salary,
but there was a part of my yearly budget for me
that included a little bit of training.
Do you get anything like that?
Yeah, there is a general organizational level
training budget.
Yeah, I think I'd be curious to know
if people out there have tried this with Linux Academy,
because to me-
It seems like a great way.
They have great team support.
Exactly.
It's a super easy sell.
Yeah, exactly.
It's a super easy sell,
plus it's something you can do
where you have full control,
and it's not just fluff content.
It's by people that really know Linux and care about it.
They're constantly renovating the content,
and with the public profiles,
it's very easy at the end of the year
to show what you've done.
Exactly.
You can show your employer.
You can be like, look, this is what I've done.
Here's how I've improved it.
Yeah.
I think it's probably,
if I was still in that field,
it's probably my perfect solution,
and I wish something like this was around back then.
It's also the perfect thing for you.
Like, well, I like Linux,
and I don't really know what I'm doing,
or you have a job that doesn't,
you don't get to use Linux like you'd like to.
Yeah, yeah.
Linux Academy is just the golden road for you.
For about a year,
I was using Linux Academy just to scratch itches
because there were so many things I'd want to try.
After I got out of doing that as a daily thing,
I still had these ideas that I wanted.
Linux Academy with the labs and the training,
it was a great resource for that.
And the other thing that's kind of nice
is sometimes there's a topic that I don't feel like,
man, I've read the story,
I've talked to the people that make it,
and I'm still not wrapping my head around this,
and Linux Academy has courseware on it,
and the thing that's really nice about that
is I look at it and I go,
oh, well, that's gonna be three hours.
Okay.
I will spend three hours on this,
and with the downloadable comprehensive study guides,
the audio you can listen to,
sometimes I'm podcasting this stuff.
And if you have a little bit of downtime
when you're commuting,
maybe you're a passenger or you're on public transit,
I really think the iOS and Android apps
could be a great way to learn while you're on the go too.
Oh, definitely.
So check them out, linuxacademy.com slash unplugged.
That's how you support the show,
and you can sign up for a seven-day free trial,
and a big thank you to Linux Academy
for sponsoring the Unplugged program.
So last week, we were talking about the perfect keyboard,
and I told you I was a little worried
about getting obsessed with keyboards.
And I walked away from the show,
and I was like, gosh, you know,
I remember this Keyboardio project.
Does this ring a bell at all to you, Keyboardio?
You know, that does sound really familiar.
Keyboardio is pretty cool,
and it's a group that Noah and I had a chance to talk to
a little while ago,
where they're embedding an Arduino Linux running board
inside a keyboard, a solid piece of wood that they have.
Look at that.
Yeah, are you seeing this?
Wow.
Yeah, this is a really slick device.
It's a split keyboard, which is ironic,
because I was just recently saying
this original Microsoft ergonomic QWERTY split keyboard
is how I became a touch typist.
Oh, really?
And that was what took me up to a really fast typist,
and I kinda wish I still had that.
This is the Model 01.
They say it's the best keyboard they can make,
and it's not like other keyboards.
They milled the Model 01 from two blocks of solid maple.
It feels good to rest your hand on the wood.
Instead of shallow, uncomfortable key switches,
they use glorious, tactile, mechanical key switches
similar to those found in the original Apple II.
They've custom sculpted each of the 64 individual keycaps
on the Model 01 to gently guide your fingers
to the right keys.
It's heirloom construction, they say.
I love that.
I think this, here, I'll play a little bit of their video.
This is pretty cool.
How hard could this be?
And then we built the best keyboard we possibly could.
It's not what you'd expect from a keyboard,
but people love it.
Creating a keyboard is kind of a weird thing.
It's been an obsession.
Hi, I'm Jesse Vincent.
I'm co-founder and CTO of Keyboardio.
I'm Kaia Decker.
I'm the CEO of Keyboardio.
I'm also married to Jesse.
I've actually, before we go any further,
you know what, I've talked to both these individuals
in person, and I've used the original prototypes,
and I can tell you, they've been obsessing about this
for a very long time.
This is a discussion we had with them in 2015.
We're here with Kaia with a Keyboardio, is that right?
Keyboardio, that's us.
All right, Keyboardio.
So now, there is a lot of talk of different keyboards.
They have the SteelSeries, and they have DOS Keyboard,
and then there's the people that just use the one
that comes with their OEM ship.
What is it that sets Keyboardio apart?
What is Keyboardio?
Sure, so Keyboardio is an open hardware project,
which is why we're here at Oscon,
and it is a cover project,
and it's designed to be used in a variety of ways.
And it is a comfortable, ergonomic keyword,
so it's built around the shape your hands work,
so it's designed to be more comfortable to type on
for long periods of time,
and it also was designed by a programmer
as the primary designer,
so there's a lot of things that you type more often
if you're a programmer, or a sys admin,
or someone else who does that type of work
that we've moved into especially easy-to-hit places.
So, brackets, for example,
I'm sure probably take a huge high priority then?
Yeah, so brackets,
instead of being off on the side to your pinky,
they're just right above home row.
You hit, you can hold down the function key,
and hit U-I-O-P,
and that gets you your curly and your straight brackets.
WASD moves the mouse if you hold down function.
H-A-K-L move the arrow keys,
which if you use VI or BIM might be familiar.
Yeah, and any keys that you hit and hold down,
what's called cording,
so control, or shift, or command,
we've taken off of your pinkies and put onto your thumbs,
which is a lot better for you ergonomically,
and yeah, it feels comfortable,
it's a little bit faster, it's better.
So, you said that this was designed
specifically to be more ergonomic,
and you used the word typewriter,
and so, can you give me a little bit of history
about how the typewriter keyboard was designed?
Yeah, I mean, so there's a lot of,
people have written entire theses
on the typewriter and the QWERTY layout.
Maybe just the clip notes.
Yeah, so it's, I mean, it was literally designed
in the late 19th century,
and so, it was based around what you could build then.
So, everything was laid out in rows,
touch typing was actually invented after QWERTY was invented,
and so, you know, there's different stories
that I don't know if any of them have been proven around.
Oh, it was designed so that it was
maximally inefficient to type on.
One of my favorite stories is that
why shift is on your pinky,
as opposed to sort of in a more convenient place,
and the reason is, is originally there'd been
an uppercase typewriter and a lowercase typewriter,
and they figured out, oh, you can literally shift
the plate and the thing that the hammer strikes
on a typewriter, but they'd already done their tooling
for the little hammers, and so, they're like,
well, we'll just put it on the side.
And so, like, one lazy engineer put shift on the side there,
which is why, you know, now control and command
and all these other things that didn't exist
when the typewriter and the QWERTY layout was invented
ended up there, and so, we've, you know,
moved them into a place that we think is more sensible
for the way that people use keyboards and computing today.
Well, regardless of, regardless of if it can be proven
that the keyboard was designed to be
maximally inefficient, as you put it,
there's no contesting the fact that
if you have a hammer that rises up,
that hammer takes a certain amount of time
to fall back down, so if you had two of them
that are crossed from each other and they hit,
that'd be a bad day.
So, yeah, I would imagine that some design went into,
it certainly wasn't designed for optimum typing, right?
Yeah, definitely.
So, tell me some of the advantages of your keyboard
versus, like, the programmable ones that I can buy
in Best Buy or Office Max or Newegg.
Sure, so it's programmable with the Arduino IDE,
so we're going to have, we haven't built it yet,
but have a sort of software GUI configurator,
and then it's also, if you want to do really crazy things,
you can, so if you want to extend it
by making it wireless or Bluetooth,
we give you all the pins that you have on an Arduino,
so you can hook up anything that works
in the Arduino ecosystem, and it'll work,
play nicely with it.
In addition, it's mechanical keys,
like the comfortable layout and so on,
I think are a big benefit, but in terms of programmability,
we're trying to give people as much rope
as they want to play with,
like actually give you firmware source
as opposed to saying, well,
you could remap the key here and there.
It's like, it's really, truly fully programmable.
So, right now, these keyboards,
they're being programmed with like a config file?
Yeah, so it's a couple of text files right now,
is the way it works.
There's, yeah, we're going to make it
so that it's easy to do through a graphical interface,
but yeah, the way it works inside
is actually sort of astonishingly simple in some ways.
I think that would appeal to a lot of Linux users.
We're really used to just opening up a text file
and changing the things we want.
Now, where is that text file stored?
Is that stored on the keyboard itself
or on the computer?
It's stored on the keyboard itself,
and one of the things, I used to be an Emacs user,
and my.emacs file was full of all these
weird configurations and stuff,
and I liked it because I could take it with me
from computer to computer,
and when I moved away from using Linux and Emacs
as my primary operating system and text editor,
I noticed there wasn't really that
for arbitrary operating system,
arbitrary key bindings and stuff,
and so it was important to us to not build something
where you have to install a driver
just to use a keyboard, right?
Don't install special software
just to use the keyboard to type,
so any changes you make,
you can put it onto the keyboard and flash it there,
and it will go with you from whatever,
laptop to desktop to work computer to home computer.
Now, is there software that I have to have
to flash the new config onto the keyboard,
or can I somehow plug it in
and open a text file and edit it?
Right now, I think you would need to install the Arduino IDE,
which is free and open and easy.
I think we're planning on changing that,
but that's probably a question for Jesse
in terms of the actual,
he's the guy who's doing the software engineering for it, so.
Anything else you wanna add,
or if somebody's interested
in purchasing one of these fine keyboards,
where they would go to pick one up?
Sure, go to keyboard.io, keyboardio, or keyboardio.com.
We've got a ton of info on our website.
If they have any questions,
we're real people answering our email,
and are happy to talk with anyone about keyboards.
It's fun to nerd out about it with people, so, yeah.
Well, thank you very much
for taking the time to speak with us.
We really appreciate it.
Yeah, thank you, my pleasure.
So, the cool thing now that they've done
with the model that's gone up for pre-order now
is they've kind of gone back a little bit.
They're doing it QWERTY style to begin with,
so it's not all that crazy,
but it still has the Arduino Linux computer in it
that is fully programmable,
that you can reset up and replace the keycaps if you want.
And you know what?
I have been recently reconsidering my position on keyboards,
and since this has been something
we have covered across multiple shows,
it's got Linux running this thing,
I think I'm gonna pre-order this.
I'm gonna get it here in the studio.
I'm gonna have it as my main keyboard.
And so, I sent an email and said,
hey guys, I wanna buy one,
and I think I'm gonna do it with it.
That is awesome.
Yeah, I think it's nice.
It's gonna look way better than your current setup?
Yeah, oh my gosh.
Yeah, well, this is just a free keyboard
that came with the case.
Oh, yeah, really?
Yeah, so it's not that high-end.
Yeah, it's just some, look at this,
it's got, see how it says it's like bi-thermal take on there?
Oh, you're right.
I would never have thought,
because it has like the blue backlit keys.
It looks like a gamer keyboard.
No, it's also got like this Borg insignia style circuitry
that's just lit up.
Yeah, where this is like a,
this is a proper set piece.
Craftsman.
When I do videos inside the studio,
this is something that'll catch the eye.
But on top of that, this is a project
we've literally been following for years now.
And I don't know, I got a soft spot for keyboards
that run Linux made out of wood.
Don't we all?
I wonder how it compares to something like ErgoDox.
Yeah, or DOS keyboard, or my Logitech G19,
or yeah, yeah, I'm a little nervous.
I am a little nervous.
Well, actually, I mean, ErgoDox is a more
similar comparison, right?
Because ErgoDox is a DIY split keyboard
that's designed to be more ergonomic.
It has the, most designs have the shifted columns,
just like the Keyboardio.
And they're both designed,
the way I see it is Keyboardio is maybe
keyboard designed by people who are passionate
about keyboards for people who just like good keyboards,
whereas ErgoDox is a keyboard that's designed
by people who are passionate about keyboards
for other people who are also really passionate
about keyboards.
I think Keyboardio is-
Not until recently, I think-
At $329 before you pay for fancy shipping,
Keyboardio is for people who want something
special and unique.
It fits that category.
Like I'm looking at their keyboard layout
and it's a little different to the LED light controls
where I would expect my tilde to be.
And there's things like that,
they're gonna be a little bit of an adjustment.
So we'll see how it goes.
But it feels like it's,
if you are a collector of fine art,
this would be sort of equivalent to that.
And it's much cheaper than that.
And I like that it's open design,
it's open hardware, and it's easily reprogrammable.
So there could be a potential, this is my thought,
there could be a potential for this
to be a very nice control surface for OBS.
The OBS upstream-
You've got your crazy hotkeys keyed in there, oh man.
OBS upstream is working on
some pretty sophisticated hotkey support.
And if I end up deciding that this is a no good,
this is bunk as a keyboard,
and the fact that we can replace the keycaps
and the underlying Arduino is reprogrammable,
this I feel like will be a pretty good OBS controller too.
So I kind of feel like I am kind of in a nice position
to test it out and see how it goes.
And I'll report back.
The keyboard thing has been fun.
Mohs and Rath, you found a G19 in Canada?
Where?
Actually, I can't find it again.
I actually had found it on Kijiji.
I'm currently looking as we speak.
It was in Port Hope, Ontario.
I'm completely serious.
I found it last week and we were sitting there
talking about it,
because my friends say with some truth
that I have a hoarding problem,
which has translated to a purchasing problem
of specifically Logitech keyboards.
And I have a G15, a G11, a G105.
I gave another friend of mine a G105, a G110.
There might be another one around here somewhere.
I don't know.
Love it.
But I actually did find one.
And if I find it again before the end of the show
or even shortly after the show, I will let you know.
I'm really in the search mode for it right now.
Nice, stay tuned and find out.
You know, I think that's sort of an interesting note
to end on right there.
And Mohs and Rath, don't beat up on yourself
because it's not that you are a hoarder,
it's that you are documenting a precious time of development
in our society.
In 20 years, you'll have a museum on your hands.
Yeah, you are at the forefront of witnessing
some of the most rapid progress in humanity.
And you can't feel too bad about that.
At least you can tell yourself that
and try to self-rationalize with that line.
You're welcome.
Hey, if you'd like to join us live next week,
go over to jblive.tv on a Tuesday.
There is some calendar changes coming up in the future
because I'll be traveling.
So check out jubilabroadcasting.com slash calendar
where you can find the live times
and get it converted in your local time.
I'm at chrislas, linuxactionshow.reddit.com.
All of that shenanigans and a post show
right here next week.
Put it down in the comments below.
All right, let's go pick a title, JBtitles.com.
Can I just say I'm loving this keyboard thing we're doing in this last episode?
I know, it's funny.
It's really fun.
It's been totally organic, and it is kind of fun to talk about this because it's something
we all use, and I can't believe I found another keyboard that runs Linux.
I got to get it.
If I find it, it's been years since I found another keyboard that runs Linux.
You have to have it.
I like it.
Cow tipping is not a bad, although we've already had cow in Linux action show, but JBtitles.com,
making IT steampunk, making it snappy, snap, snap, the snappy snaps, I don't know.
Are we feeling that?
Are we feeling that?
That's a lot of snap.
Mozan, did you find it before we get out of here?
Did you find it?
Oh.
Get it out of here.
That'd be a negative.
Yeah, we have a couple of different Telegram threads that we're using for conversations
that are related to what might work on user error or something like that.
And so, sometimes things come up, and we're like, man, this is a show topic, but they
come up a week before we record user error, and by the time we sit down to record user
error, even with the Telegram thread there, we can't find it.
We can't remember it.
Same thing with Slack and similar things.
Yeah, yeah.
So in Telegram, there is a to-do bot.
So why not use this bot to say to-do?
Use a to-do list manager as topic show manager, basically, because that pretty much translates.
And so I added a bot, and I start working with it, and then my first time I work with
it, I get a response.
And then after that, I never could get the bot to do anything, and I have no idea if
the server the bot runs is offline, if there's some sort of account issue with me.
Other bots seem to be working okay.
I have no way to troubleshoot.
There's no error message returned to me.
Not a phone number to call.
And it's like computers work with ones and zeros.
So send me back a one or a zero.
Don't just say nothing.
Yeah, right.
I don't understand it.
You've got to give him credit.
He made the jump right as the new MacBooks are about to be announced.
I know.
I was going to say.
No, he's like, screw that.
I'm moving forward with this.
Homey don't play anymore.
Is there a big TLDR for why he wanted to switch platforms?
The future of platforms for independent software development is probably in the hands of Linux
and many of those servers on the cloud run Ubuntu.
Yeah, there you go.
I think he's placing a big bet on AI and bots, AI slash bots, to sell bots as business contracts
to develop software.
Also, I think he also figures, I mean, you'd have to listen to yesterday's quarter radio
to get the full context, but I think he also figures that the app ecosystem is pretty commoditized
now.
Sure.
And most good apps that are worth their salt anyways have a huge back end infrastructure.
Yeah, absolutely.
So why not focus as a primary on the back end, on Linux, running on Linux, and then
offer iOS and Android apps as part of the entire package, because so far his business
has primarily been around developing apps for iOS and Android and some Mac desktop apps.
With back ends when needed.
Yeah.
And so now he's going to pivot and do back ends as the primary focus, and hey, as part
of the entire package, we'll also write the web front end, the iOS front end, the Android
front end.
That makes sense.
So all those things are going with progressive web apps or React Native and those kinds of
things.
And so in his mind, he's like, well, why do I need to spend $2,800 on a MacBook Pro when
I could spend $800 on a Lemur and develop on the same OS that I'm going to be deploying
on?
And I think the fact that Docker is just right there is a useful thing for him because Docker
allows him to experiment and sort of rapidly try things.
The cost of changing things up is like nothing.
And you know, I've been saying this for a while, I really think there's going to be
a lot of server-side developers and web developers that look at the Mac platform and say, OK,
well, this new MacBook, yeah, it's got a fingerprint sensor, it's got this OLED bar on here that
changes for the few people who wrote software that support it.
But Mac OS itself is not going in a direction I want, it's not getting to be stable, it's
not taking advantage of the Unix underpinnings the way I wish it would.
Yeah, it hasn't become a better Unix.
No, it's not at all.
It's gotten to be worse.
And so I think when you're looking, well, geez, I'm just going to be creating apps for
the cloud, cloud, anyways, why not get hardware that gets iterated faster, there's more choice,
and the desktop OS is agnostic as to which vendor I go with.
Because even in that scenario, you could eventually choose to go back to the MacBook hardware
if you wanted to.
Yeah, sure, definitely.
So I don't, I'm not, I think this is going to be a huge win for Linux, sort of like a
slow boil scale.
Slow boil scale, I like that.
We will see.
Linux slow boil.

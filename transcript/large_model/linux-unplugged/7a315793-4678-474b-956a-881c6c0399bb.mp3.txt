Well, thank you to the archive.org website.
Some precious internet history has been preserved.
It's peanut butter jelly time, peanut butter jelly time,
peanut butter jelly time.
Way yeah, way yeah, way yeah, way yeah.
Now there you go, there you go, there you go, there you go,
peanut butter jelly, peanut butter jelly,
peanut butter jelly, peanut butter jelly.
little peanut butter jelly, peanut butter gel smell,
peanut butter jelly with a baseball bat,
peanut butter jelly.
Yeah, this precious internet gem
amongst many others, is now being preserved.
These Flash games and movies and videos and comics
are being preserved on archive.org.
But there's a special twist for fans of this show, Wes.
Oh, yes.
It's all powered by Rust.
Rust, you say?
Well, yeah.
I mean, of course.
How else would you accomplish this magic?
You can watch all this.
You don't need to have a Flash plug-in installed,
because it's powered by WebAssembly and Rust
with the Ruffle project.
The only way to make Flash acceptable
is create an engine in Rust that plays it using WebAssembly.
I think this is a Linux-unplugged
approved methodology to watch your Flash videos
and to play your Flash video games and whatnot.
Flash, it's finally hip again.
Hello, friends, and welcome into your weekly Linux talk show.
My name is Chris.
My name is Wes.
Hello there, Wes.
This episode is brought to you by a Cloud Guru, the leader
in hands-on learning.
The only way to learn a new skill is by doing.
That's why ACG provides hands-on labs, Cloud Linux servers,
and much more.
Get your hands cloudy at acloudguru.com.
This is Linux Unplugged episode 381,
which is getting really close to one of my favorites.
I've had the privilege of a couple of shows reaching 386.
And that and 486 are my two favorite episode numbers,
because I'm a nerd.
Really good reminder of just how much time you spent here.
Yeah, it's nice.
It's nice, actually, to be looking back at 381
and feeling like, man, I feel like we still got a lot more
episodes in us.
We're not even close to feeling like we're
near done with this show.
We got still a lot to get into.
We have a lot of episode to get into.
This is going to be a really fun one,
because we have an open source tool that's
going to help you be a secret spy using, well,
retro technology, a new open source tool that
will make you feel very retro.
That's a good tease.
But we also have a bunch of community news
and some feedback, a pic, too, that I
think is going to make your desktop look even better
and your terminal look super sharp.
Oh, you're thinking of us.
I am.
I'm always thinking of you guys.
Well, and well, constantly just dogged by what the hell
I'm going to talk about next on the show,
like it's some sort of demon that constantly stalks me
every single day and ever.
Anyways, where were we?
Oh, yeah, right.
Time appropriate greetings, Virtual Lug.
Hello.
Hello.
Hello.
Hello.
Hello.
Hello.
Hello, everybody.
Look at that, 25 in the Virtual Lug today,
a few in the quiet listening, a whole bunch on air.
And it's really awesome to see some new faces, old faces,
and in between.
Of course, we're also streaming at jblive.tv on a Tuesday.
We do it at noon Pacific.
And every now and then, like the last couple episodes,
we tweak it up a bit.
But we try to keep the calendar as best up to date
as we can at jupitabroadcasting.com
slash calendar.
And let's start with a fun fact of life.
Like it or not, and maybe you do like it,
Chrome OS just isn't going away.
So the question the show has is, could we have some fun?
And there's a couple of projects out there
that would suggest yes, including one that
aims to be a total Chrome OS alternative maybe
for those older Chromebooks.
And it's from a developer we've heard of before, Wes.
Yeah, from the creator of Ubuntu Unity and Ubuntu Ed,
here comes yet another unofficial Ubuntu flavor,
Ubuntu Web Remix, which aims to be an alternative to Chrome OS
or Chromium OS.
I will admit to still watching Ubuntu Unity with a bit
of a curiosity, wondering what could happen there.
As time goes on, it almost feels like it'd
be fun to spend a week in Unity.
I think it would genuinely feel old at this point.
I have some fond memories, though.
Yeah, it still feels like it'd be kind of fun.
And I don't know if any of these will ever become official Ubuntu
flavors, but they're cool to see out there because you do wonder,
can you have a project that is Ubuntu adjacent,
so it brings a lot of compatibility with it,
that could be utilized to bring new life into old Chromebooks?
So this Remix right now is based off
of a version of GNOME 3.36.
It comes with an app pre-installed
so you can run Android apps.
It has DTube video sharing on there.
It has the Mastered on Web App and Twitter web apps
pre-installed.
Their focus here is really de-Googled web apps.
I think that's a big focus of that project.
Or at least they're focusing on those tools.
Right, I mean, it uses primarily Firefox instead of Chrome
because otherwise how is it an alternative to a Chromebook?
You should note, though, that if you plan to install the Android apps,
it's experimental right now and might not work properly,
especially on the live session or in a virtual machine.
It's all powered by Andbox under the hood,
and you might have to do some fiddling with things like Secure Boot
to get that all working nicely.
All right, so maybe he's all in on the Chrome OS.
So then maybe you want to bring it to other devices,
like maybe the Pine 64, which could be legitimately useful.
My kids' schools, they exclusively use Chromebooks,
and maybe it wouldn't be so bad for me to know
how to use the Chromebook OS and interface.
And my Pinebook, which I already own,
could be a great way for maybe me to learn without having
to make a big investment.
I'm going to take a shot at this name.
I'm going to say Fee-ed OS.
Well, I was going to say Fide, but yeah, all right.
Fee-ed OS.
No, no, no, it's Fide.
I just thought, because that's what I thought it was,
it must not be right.
Oh, surely we're both getting it wrong.
That's how it usually goes.
So it's Fee-ed OS, which is a fork of Chromium OS,
the open source version of Chrome OS.
This version is based for Chromium x86,
so it supports a lot of x86 machines,
but they're also making a version for the Pine 64.
Yeah, it is also available if you don't want it on the Pine
book, you know?
It's pretty flexible.
It's got custom builds for things like the Microsoft
Surface tablets, the Google Chromebook Pixel 2013,
and the GPD Pocket 2.
Hey.
Yeah.
That's kind of particularly cool and caught my eye.
But we do have a reporter live on the scene.
Byte Bitten, you're reporting live
from using Fee-ed or Fide OS, and you have some notes.
Yes, Chris.
So here with my Pinebook, bro.
So yeah, I've been trying Fide OS
or getting it to install my Pinebook Pro,
but it is very picky with the micro SD cards you're using.
It needs to be fast enough for it to boot.
And I had some what I thought were fast micro SD cards,
but they seem to be not fast enough.
And it is really a miss on that part,
and you need to try a lot of micro SD cards
if you don't find the right one.
Oh, did you nail down what it is that it's
looking for in an SD card?
Not exactly.
And also, the developer said that it is just
demanding on the micro SD card.
But as soon as you've got it installed on the eMMC,
then it is just smooth sailing from there.
Good to know.
Thank you.
Why don't we transition to a little bit of what's
coming down the pipeline?
As projects are looking to 2021, we're
getting an idea of what Gnome is going
to focus on as a project.
Feronix has an article that also covers
where they spent their money over 2020,
if you're interested in that.
It seems like a lot of it went to GTK4 development,
some technical infrastructure support for Flathub,
and a few other things.
Oh, yeah.
Hey, remember that legal case against Rothschild patent
imaging that costs money?
Plus some good stuff like conferences,
Gwadek, Linux App Summit, GTK hack fests.
They also got themselves a supported instance
of the video chat software Big Blue Button.
Hey, I'm sure that's pretty handy.
And some internships and just general community support.
And all of that is great work.
Yeah, I bet they weren't expecting
to need that video conferencing software quite as much.
No.
In 2021, they're going to focus on organizing Gwadek some more,
as well as the Gnome Summit and the Linux App Summit.
They're going to host virtual social events, hack fests.
But there's also going to be, of course, work on two more
editions of Gnome.
They're going to look to push forward
smaller projects within the Gnome ecosystem
with some of their funding, including also hiring
interns and paid internships for free software development.
Awesome.
Yeah.
Provide financial and logistical support
for people that are speaking at conferences, which
for people who are new to speaking.
But maybe you have somebody out there
who can be a really good advocate for you.
That's really nice to handle that stuff for them.
But they're also going to, they note in here,
launch a new initiative, including
the Faces of Gnome, an increased conference participation.
But the Faces of Gnome, I think, is that's interesting.
There is a Faces of Open Source project out there,
which I bet you this has inspired this.
And maybe pretty soon, we're going
to have a way to put more names to faces.
I like that.
Oftentimes, you just get to see a nick or a handle
or an email and a git commit.
But there's real people spending real time
on all this free software that we love.
Yeah.
And I think it's good to also remind everybody
that there's humans.
Humans.
Behind Gnome.
Gnome gets so much opinion in this space.
Everybody has an opinion.
And we kind of just speak of this nebulous upstream gnome.
Yeah, and everybody loves to share it too, right?
They love to share that opinion.
So maybe reminding us all that there's human beings there
isn't so bad.
But looking into our future crystal ball vision,
like we were earlier before, I see something else coming down
the pipeline, of course.
And that is details for Fedora 34.
Looks like we're going to have a couple of new spins,
I guess they call them, in Fedora parlance.
Well, one is the i3 team is working on an official Fedora
spin for Fedora 34.
And it looks like in Fedora 34, we
will see an official KDE plasma spin for 64-bit ARM devices.
I'm looking at you, Pi 400.
Isn't that nice?
And then the big doozy that, of course, Wes and I
care the most about is Fedora 34 may try,
this is still up in the air, but may
try to use pipe wire by default to replace pulse audio.
And I guess, would it also replace jack?
This is where I'm still fuzzy, or would it integrate with jack?
Yeah, I mean, that's just it.
Pipe wire would provide Fedora 34's jack support.
It would be a pipe wire future, at least based
on the Ferronix write-up.
Right, right.
I don't know how I feel about that.
I mean, I really love and support pipe wire.
I'm super excited about the pipe wire future.
But just the history of adopting new sound solutions
makes me a little bit nervous, even
in a great environment like Fedora, pipe wire
is pretty easy to install in Fedora right now.
I don't know.
If it's ready, it's ready.
Fedora can make that judgment.
It just makes me a little nervous.
Yeah, and it does maybe change our math a little bit
on if we were going to reload.
We have a machine that's super critical to our workload.
I'm talking to Wes on it right now, and recording,
and all of it.
And if it were to go out, we would be so as well,
and we'd have to rebuild that day.
And so the question is, would you rebuild with 18.04,
or at this point, at the end of 2020,
would you go with something else?
And seriously, Fedora would be a consideration in this mix,
but not if in the next release this change is coming.
And I'm all for it at the same time.
I still want them to do it.
It just means you'd use it in the appropriate use cases.
You also got to figure, Wes, that maybe they'd
make it an easy way to just switch back.
Yeah, that very well could be.
Yeah, that could be coming.
And it seems like you just haven't played with it a bit.
And I know our very own Mr. Drew has been evaluating
PipeWire fairly extensively.
And progress is very impressive.
So it very well could be totally ready for this, at least
in most use cases.
Yeah, and kind of in the same wheelhouse,
PulseAudio 14.0 has been just recently released.
It comes with many changes.
But there is this flat volumes controversy
that I guess most distros patched around,
so I was oblivious to it.
Can you explain this to me?
Yeah, I guess it's kind of always
been a controversial feature in PulseAudio.
With flat volumes, the stream volumes controls also
the sync volume.
And so maybe you've seen this feature
where you adjust the volume in your loudest application,
and that ends up adjusting the whole system volume.
So those become linked, and you don't have these two layers
of volume controls like you might think that you have.
And the biggest problem is that sometimes,
after you've adjusted the volume in one app to boost that up,
the next app that plays suddenly plays and blows your ears out.
OK, no wonder why the distros patch around that.
That's not good.
Right, and so that way, because it
can be confusing if you don't understand
that there's the second system volume.
If you are in an app and you go all the way to 100%,
if the system volume is at 30%, it's just not
going to get that loud, right?
So the intent was to fix situations like that,
but I think it ended up causing more confusion.
And clearly, the folks actually downstream implementing
Pulse at the user-facing level kind of think the same thing.
Yeah, that makes sense.
And there's other nice improvements in there,
and I guess one highlighted area that's
probably most relevant to the audience
is USB headset support has been improved.
Various vendors specifically seem
to have gotten improvements as well.
Yeah, isn't that nice to see?
Yeah, I guess so.
I mean, you've got to figure not only are people using it
obviously to play games, but a lot of people
are probably using those headsets to do virtual meetings
and whatnot as well.
I know I sure am.
I actually have been thinking about it with my big headset
just because I like the way it feels and all of that,
but I don't know.
I feel silly with it on video.
That's my only kind of slow-my-roll thing
on that one.
But maybe I'll just get over it, because after all, it
does look very cool.
Linode.com slash unplugged.
Go there to support the show and get a 100.
Wait, hold on.
What?
I got to check this.
$100 60-day credit.
Who authorized this?
That's too much.
Wes, did you authorize $100 60-day credit for new accounts?
I mean, it just sounds like such a good deal, right?
Who wouldn't want that?
You move the soundboard guy to the deals job,
and now this is what we get.
Well, I mean, there's no way they're
going to keep this going.
So you better go to linode.com slash unplug.
They're our cloud hosting provider.
They've been around since 2003 as one of the first companies
in cloud computing, and they started
because they freaking love Linux.
They saw where things were going in the kernel in regards
to virtualization and said, hey, you know what?
Hey, we could probably build a business around that.
I can relate with that.
I mean, that's how we saw with podcasting 13 years ago.
We saw where the technology was going.
You said, hey, you know what?
I could go talk about Linux on that.
And I can relate with that.
Now they're still the largest independently-owned cloud
provider.
They started with a love for Linux,
and now here, look at them.
And they've got fantastic customer service.
And if you don't know a lot about Linux
or you've never really ran a server before,
they got you covered.
I just deployed an Azurecast server.
And Azurecast, do you remember how we say that, Wes?
Azurecast.
Let's go with Azurecast.
Azurecast.
Yeah, yeah, with the role there.
And I deployed it in like 10 seconds on Linode.
And I'm thinking maybe in the future,
we're going to have this cool, new, upgraded live stream.
And I've been on the fence if I was
going to do that forever, for like a year now.
But with Linode, and it was just like one click,
I thought, well, why not?
But then once it started deploying,
I was like, oh, of course.
Of course this is how it works.
Linode is awesome.
So when you're deploying it, whenever they can,
they'll give you multiple choices of distros.
So it's a one-click application deployment,
and you choose the base OS.
So I chose Ubuntu 20.04, which matches our other Linodes.
And now it's up and running.
On a dedicated machine, I decided to go dedicated CPU,
since it's going to be doing multiple MP3 streaming codes.
And I positioned it in Dallas, Texas,
because I feel like for the majority of the audience
that will be streaming it during the daytime,
that's going to be US audience.
And so probably should centralize it as much as I can.
And they've got 11 data centers all over the world.
So you can pick which one's close to you or, in my case,
close to the client or the audience.
They've got native SSD storage that's
blazing fast 40-gigabit network connections
and a totally easy-to-use dashboard that
makes all of this possible.
But generally, just one click away to go deep.
If you know what you're doing, if you
know what a mount point is, you can go deeper.
It's great.
And that's what I love about it.
Not like the entry-level service providers
that try to block all that stuff off.
Plus, they have object storage, Kubernetes support,
Terraform support, node balancers, built-in firewall.
It's pretty feature-packed.
And that $100 credit's going to get you really far
with their base rig starting at $5 a month.
So go to lanode.com slash unplugged.
Go there, support the show, and get yourself $100 credit.
And go in there, let them know you heard about it on the show.
That helps, too.
Maybe share it with your friend.
I don't know.
Maybe print it out and put it up all over the town
on the post saying, server missing.
Go to lanode.com slash unplugged if you see it.
No, that's not my best idea.
That's not my best idea.
Maybe you should tweet me and let me
know what you're doing with your lanodes.
Tweet me at quizlast and let me know.
Lanode.com slash unplugged.
Well, while we're talking about new stuff,
let's mention kind of a nice win for LVFS
and, of course, for any users that use LVFS to upgrade.
More importantly.
ASUS is now offering their first motherboard firmware,
which looks like more to come now that the groundwork has
been laid down.
The lucky board in question is the P11C-C-4L,
which is a workstation or server board.
It's an eATX board for the Intel Xeon ePlatform.
So maybe not one you've got on hand,
but you've got to start somewhere.
Actually, it would be a really solid workstation.
And if I had built a workstation around that motherboard,
I'd be feeling real good right now
that I was getting firmware updates via LVFS.
And you know that's just the beginning.
There's going to be more.
And it's a nice little win for the project.
Also, fwupd, the front end that you
see on your machine that communicates with that service,
got a nice update.
There's various things you can go read in the show notes
if you want.
But the one thing that I like to see in here
is a plug-in has been developed for the Pinebook Pro.
Although, Huzy in here notes that it needs further work
before it'll actually work correctly.
But I like that it's there and that it's possible.
Yeah, right?
I mean, OK, you need a little help from the vendor
to make sure you can figure out which keyboard layout is
installed, getting the touchpad version worked out correctly.
But if you've got the bones, that's
the best place to be to add on these little things
to make it really work.
You talking about the doctor?
I sure am.
It's nice to see this thing hum right along, isn't it?
If you think about it, a couple of years ago,
none of this existed.
And the idea that you wouldn't have
to be booting into this sketchy DOS boot
disk or, God forbid, Windows to update your firmware,
I just expected that and kind of never updated my firmware.
Now I'm just in home software, and I'm updating my firmware
anytime I see one.
Well, this next update is just one I wanted to mention.
It came out over the weekend, and we've
had mostly just cloudy skies here in the Pacific Northwest,
which is nice, actually, because it acts as nature's blanket,
and it keeps us warm.
So I don't mind the clouds at all in the evening.
But every now and then, there's been a break, and just
the most brilliant stars.
And so I have kind of taken up an interest in those night sky
apps for the phone.
We kind of can pan the phone around
and see what constellations and what nots you're looking at.
And K-Stars is among one of a handful
of just really fantastic apps to do this for your Linux desktop.
And version 3.50 came out this last weekend.
And this release marks a significant milestone
for K-Stars because they've done the integration of Stellar
Solver, which, get ready for this,
is a cross-platform sex tractor.
Just what you need, right?
I can relate.
Let me tell you, Wes.
Let me tell you.
It also integrates with astronomy.net's
based internal astro-metric solver, which
this is getting serious, Wes.
I'm hoping maybe you can explain some of this to me.
Yeah, OK.
So there's already some tools out there
to do these things that you might need to do if you're
an amateur astronomer.
You're trying to make sense of the night sky
and plot things correctly, including astrometry.net.
But that application is command line only
and has some rather nasty dependencies,
depending on what system you're on.
Or maybe you're just more focused on staring up at the sky
and appreciating the beauty of the universe
or about tracking down LibJPG.
I can appreciate that.
Sure.
So now, with this integration with Stellar Solver,
you don't have to fuss with any of that stuff.
You just get K-Stars installed, and you're good to go.
Yeah, that is really nice and simple.
Because this is like one of those great little demos
when your family member or a kid even has questions or yourself.
And you just want to just sit down and get the answer
and kind of demonstrate some of the cool open-source software
that's out there.
So some real significant retooling went inside K-Stars
to integrate this stuff.
And they feel like it's going to be
a big benefit for their end users.
They seem very excited about it.
They put a lot of work into it.
And it's just a cool piece of software to remind you.
There's a big universe up there, Wes, and it's open source.
There's also an Android version.
Yeah, there's an Android version,
which I'm actually just going to have to give that a try.
Because I've got a couple of apps for trying to identify,
hey, just what star is that, or planet up there?
But all of them are free Android apps.
And therefore, terrible.
But you still haven't explained to me what a sex tractor is.
Maybe when you're older.
And also, I'm not even sure I know
what an astronomic plane is.
I read through this project announcement
and realized, man, there's a lot I don't know.
So apparently, you need an astronomic plate solver.
And I didn't even know astronomic plates
were a problem.
Yeah, well, I think a lot of this
comes down to when you're trying to match up
what are you looking at and match it to existing things
in star catalogs, say.
So here I am in the universe.
Here's what I'm looking at.
How do I find out actually where that is on the larger
picture of the night sky and what I can catalog
and know as a reference is there?
All right, well, let's clean it up around here a little bit
and do some housekeeping.
Shout out to the Luplug who had, sounds
like a very productive jellyfin bugathon this last Sunday.
They found some bugs and proved some documentation
and increased distro compatibility.
So like, wow, congratulations, you guys.
That sounds like it was a big success.
And I want to extend an invitation to anyone else
in the open source community who would like to participate
in our bugathons.
We have a dedicated matrix channel.
And you can join that matrix channel
on our jupitabroadcasting.com matrix server
and raise your hand in there.
And they'll jump on it, and they'll help organize it.
And then we'll promote it on the show here
so we get some people to show up and help
get a lot of eyes on it.
The idea behind this is to help developers in a way that
is within their bandwidth.
We don't want to just organize hundreds of people on the show
to just throw a bunch of bug reports at a project
and inundate them with a bunch of technical debt
that they can never address and burn them out.
We want to work with developers on their terms.
So they've set aside time.
They're ready to work in an interactive high bandwidth
environment where they can communicate in real time.
And they're there to address the issues that come up
and answer the questions.
And there's a set time window.
And when it's done, they go back to their life.
And this, I think, was a great example
of pulling that off because the developers there, several of them
were there at the same time with our community.
We had a lot of community participation.
And big results, I think, came from it.
So good work, guys.
Good work.
Way more productive than we were.
Yeah, well, you know?
And I think this could go, this could even
be a situation where if multiple developers participate
in the Bugathon and they join that matrix room, well,
some of them are sticking around afterwards.
And so all of a sudden, you may have a resource where projects
that aren't necessarily related all of a sudden
have a common chat room that they're talking in
and solving problems and have a community they can call upon
when they need some eyeballs.
It could go somewhere.
And it could all be on their terms,
which I think is the beautiful thing about it.
So keep your ears peeled, whatever the saying goes.
Keep your ears at the ready that don't know.
Your balls ready for future announcements on Bugathons.
And if you're interested, do contact our Luplug.
Things are in the works, too.
So be sure you're subscribed to the Jupiter Broadcasting All
Shows feed if you haven't already.
And if you're looking to sponsor on this here podcast in 2021,
give me an email.
You know, whatever.
I'll take it.
I mean, if you're going to give me money,
you can send me an email.
It's fine.
Chris at JupiterBroadcasting.com.
You go there, and maybe you'd be a good fit for our audience.
Let's talk.
Let's talk.
Let's talk.
Could be a good year with you and me together.
And that is the housekeeping.
All right.
So I'm going to share a URL in the chat room.
Is there an easy way for them to do this live really quick?
Because what we want to talk about today is Waveshare.
And I'm going to put you on the spot, Wes.
Can you explain kind of what Waveshare is
and why it's the coolest retro new thing?
Well, it's retro because of the way it sounds.
We'll have a sample of that in a moment, I guess.
But Waveshare is a neat project we found over on GitHub.
It's peer-to-peer file sharing using WebRTC,
but with signaling performed through sound.
This is really great.
So think about this as a way to transmit information.
I'm going to play an example of it in the show right now.
And if you have Waveshare set up and you
play this portion of the show back,
you will receive data from it.
It will decode data for you.
Here's an example.
This is the slow mode.
A little unpleasant on the ears, but it
is magic to my old man ears in the sense
that it completely reminds me of a modem.
Yeah, it sure does.
And it's kind of just a neat technology in general.
Now, Waveshare, the project itself is even more impressive
because it basically lets you set up a WebRTC connection
with no server side involved at all, just peer-to-peer.
And it's powered by this underlying technology
that can encode data in these audio tones.
Yeah, it's like a modulator demodulator.
Yeah, the current approach uses a multi-frequency, frequency
shift keying modulation scheme.
The data to be transmitted is first split into 4-bit chunks.
And then at each time slice, three bytes
are transmitted using six tones, one tone for each 4-bit chunk.
And you can kind of hear that as it
alternates between the tones in the sample.
Yeah, and we'll have a link in the show notes
that has a web-embedded version of this
that you could play with.
But it also has a really pretty straightforward command line
interface, too.
Yeah, so the web version is a little more involved
because it lets you set up a connection that, if you've
got your own network going, it uses
sound to establish the connection.
So you've got two laptops, you've
got their microphones on, you've got their speakers ready.
You can just connect them via sound and the local network
and then swap files back and forth.
But underneath that is this little technology
to actually just encode and decode
from these fun audio samples.
And Waveshare's got a nice little command line client,
super easy to get going.
You just clone the repo.
They've got build instructions right
in the README, which, of course, we'll
have linked in the show notes.
And then it just prompts you.
You can enter text to encode it.
Or if you just leave it open, it starts
listening on your microphone, you play back the podcast,
and you'll get Chris's little secret link.
Yeah, there is a secret message that we have embedded.
So I played for you the slow version.
There is also a fast version that, well, is faster.
And not like a ton, but I'll play it
so you can hear the difference here.
And you could also capture this and then get the secret message.
Oh, hey, oh, I completely forgot to mention this,
but I'm doing a Black Friday sale for the Unplugged Core
Contributors.
Random plug, if you want it to become one.
I'm taking two bucks off, unpluggedcore.com.
Keep the show independent, help reduce the ad load needed,
and get one of two feeds, limited ad feed or full
live stream, no cuts, no edits, all the nitty gritties.
You get to hear how Chris tries to pronounce it,
the really embarrassing part.
That's probably true.
It turns out several people, at least, people tell me,
are listening to the totally unedited feed
because when we recorded early, we
started getting feedback into the show
before we'd even posted the episode.
This is like, that was weird.
But that's totally a thing.
Like, if you sign up and become a core contributor,
you can get the live feed.
And we try to post that as soon as possible after we record.
So if we record on a Sunday, it means
you're going to get the show on a Sunday.
I don't know if that works better for you.
But when that comes up, which may come up from time to time,
that's a nice perk of getting that feed.
And right now, if you use the promo code BlackFriday,
all one word, you use that coupon code BlackFriday,
it'll take two bucks off.
And I'm not going to do that very often.
So take advantage of that.
And you can just go, I mean, I don't know.
I haven't done it.
You can just go to unpluggedcore.com.
And when you're checking out, put that Black Friday coupon
code in there.
Anyways, that was totally random and unplanned.
Back to Waveshare.
It's fun in like a spy sense, Wes.
Like, it makes me fantasize about sending secret messages
at the end of every episode of the podcast.
Like, we could fire off a little tone,
and it would give the audience like an extra little bonus
link that if they wanted to run through a thing,
it could give them a special thing.
Like, it's all these fun ways to actually use it.
But I don't know how practical it is.
Have you given thoughts to how you could practically use this?
Yeah, I don't know that we need it especially often
in our current day-to-day world.
But I think it's an interesting proof of concept.
It's a neat hack with some existing technology.
And it's kind of convenient that this can all
live on a totally serverless, just a static web page.
So if you wanted to be able to quickly share files
with devices, you could have this
going on your local network.
There's instructions in the GitHub
for if you want to get this all built and host it yourself.
Totally possible.
And then it's all powered by WebRTC,
which is just really neat because it
turns your browser into this powerful communications agent.
So not only are we using that to actually send audio data back
and forth right now, but here on the browser,
you can use it for just sending regular data,
transmitting files, whatever you need.
And you don't have to worry about a larger connection
to the internet to poke holes through firewalls
to get everything working or have to set up and maintain
some sort of handshake server that does the signaling
and sets up the WebRTC connection for you.
As long as you've got speakers and a microphone,
this can do it.
Yeah, that's the fun thing about it, I think.
Smartphone, computer, podcast playback.
So that's the thing I think that's really fun.
So that's called Wave Share.
We'll have a link in the show notes.
And you could do the three different speeds if you want.
I think the easiest way to use it
is how we're probably using it.
The most straightforward is to transmit
a small bit of information, like a URL.
And that URL then sends you to the larger bit of information.
Because otherwise, I mean, could you
do a base encode of some kind for the image?
And could you actually transmit the image, Wes?
Yeah, absolutely.
You just have to be willing to listen back to the audio.
Yeah.
There is an even faster speed that we haven't tried yet.
Oh, really?
Like a hyper speed?
Ultrasonic, they call it.
But is it actually ultrasonic?
We'll have to find out.
Man, computers, how do they work?
How do they work?
I think magnets.
ByteBitton, you have a vision of how this could be used.
And I like it.
Yeah, so not all phones have NFC.
And you have got the royalty fees
for having NFC implemented in there
for headsets and other Bluetooth kind of devices.
So well, headsets usually already have a microphone
in them.
So you have the app that sends a pairing code.
And that way, it's just setting your headphone in pairing mode.
It starts listening.
And your app sends that audio.
And you've got a pair.
That's also something they use with Furbys, for example.
The newer generation back then had a chirp app kind of thing.
And I also remember something that
was developed on Android where you could send messages
with a sort of chirp from Android phone to Android phone
using this kind of technology.
Yeah, what a great way to pair information or maybe even
transmit Wi-Fi passwords between two local devices
if they're trusted that isn't something that's audible
that anybody could hear.
It just should take off everywhere.
This seems like it'd be great on smartphones.
Great way to pair a Linux watch to a Linux phone.
Yeah, they're already listening to everything
you're doing anyways, right?
Why not make it useful?
Look at you busting out the bacon there.
I like it.
I thought we should share it with you guys.
It's a super fun one.
And it's an opportunity that we could put it in the show.
Yeah, so just to rehash the easiest way
to go find the secret little message,
go check out the repo, build the command line tool,
and play the podcast right back at it.
Yeah, yeah, yeah.
And you get the secret bonus content
that reveals the real star of the show, I think.
Indeed it does.
Putting us to shame.
All right, Wes.
Well, before we get to the picks,
let's do a little bit of feedback.
I think we've got enough time to get to a couple of them.
And this one got my interest.
I didn't get a chance to read this one before the show.
But it's from Eric.
And it's about his wonderful workstation,
which that gets my interest.
He says, in episode 380, you guys
asked about our setup and workloads.
The company I work for develops a desktop software package
for image analysis and quantification.
It has some really awesome 3D rendering capabilities
and support for deep learning image processing
with TensorFlow.
I have a pretty sweet workstation
to develop and test our own software.
I'm running an AMD Threadripper 2970 WX with 24 cores
and 128 gigabytes of RAM, one NVIDIA Quattro RTX 8000,
and two RTX 2080 Supers with an NVLink bridge.
Whoa.
I just got to breathe that in for a second.
I got to just sit with that for a moment.
Wow.
He goes on to say, I admit this workstation is
super overkill for software development,
but I recently managed to convince my managers
that we need to sell a VDI, a virtual desktop infrastructure
solution, to our customers rather than trying to get
their IT department to set it up.
I've been developing a framework for easily deploying
a local cloud system with VDI that
meets our customers' needs.
And I'm using Terraform, which Wes mentioned
in the past episode, to reallocate resources
from one VM to another without having
to code the API calls to the hypervisor myself.
Yeah.
By the way, that's why one of the reasons
I mentioned in our Linode read that it has Terraform support,
because that kind of crap is amazing.
Exactly.
What do you call it, Wes?
You call it that infrastructure by code?
Is that what you call it?
Yeah, right?
Well, don't you want it as code?
Everything code.
That sounds fancy.
He says, he goes on to say, I recently
added the RTX 8000 to my setup and started
playing with GPU pass-through.
Oh, yeah.
And also NVIDIA's virtual GPU capabilities,
which Terraform supports with VMware.
Wow.
It's really amazing nowadays how much one person can automate
with great tools like Packer, Terraform, and Ansible,
even if it's on corporate premises.
Sadly, I'll soon have to ship out my three video cards
to the head office so that our staff can
use my local cloud solution and integrate that
into their real workflows.
I'll be left with my humble GTX 1060.
Oh, wow.
You know, I've been thinking a lot about my future laptop.
Because I think everybody that listened to the show
for a while knows that I threw Linux Academy, then
a Cloud Guru.
I had a ThinkPad that I thought was really great.
But when that wrapped up, that was a company machine.
I no longer had access to it and had to send that back.
And I've been thinking for a long time,
like, what will I go to next?
And I've been really watching the market.
And it has crossed my mind a few times
that one thing that is just inescapable when
you're pricing a laptop and you're
looking at speccing a laptop is you
could get so much more with that same money in a workstation.
And that's a hard pill to swallow.
But when you need mobile, you need mobile.
And there's just no getting around it.
But yeah, that has been something
I've been watching closely and thinking,
I'll see what Apple does with the ARM machines.
You'll see where we get with the ThinkPad X ones that
come with Fedora.
And then System76 just updated the Galago.
So I've been sitting back and watching
and hearing Eric talk about his workstation
and knowing in the back of my mind what I could do with that.
Do you want to read the next one?
Yeah, sure.
OK, so next feedback.
Andrew writes into the show asking about container host
choices, something near and dear to your heart there, Chris.
He's looking to repurpose an HP Elite Desk G4 Mini,
i7, 16 gigs of RAM, 500 gig NVMe,
nothing to shrink at all.
As a container management host for home automation services.
And he writes that he'd like to use something that would allow
him to avoid manually rebuilding in the future
should anything go wrong.
But he doesn't have any experience with things
like NixOS or Ansible.
What would our recommended approach be?
OK, I know you're probably going to recommend something
that's more practical and would be a better skill that
could be used for employment opportunities and whatnot.
So I'm going to go the other way.
And I'm going to say, Andrew, you
may be just kind of reading this email,
kind of reading where you are at technically,
just between the lines.
There's a real easy solution depending on what you need.
And it's called Home Assistant, my friend.
You can get the entire Home Assistant stack, which
includes a supervisor container which can manage and install
machines, but also more importantly, snapshot,
restore them, back them up, help you do easy installations
with just about any popular open source automation or hosting
service out there from DNS to ad blocking
to virtual machine managers.
I mean, the whole nine yards can now
be deployed when you're using the entire Home Assistant
stack versus just like Home Assistant Core, which
would be the container version.
But if you get their whole purpose OS,
or there's other ways to go about getting it on a Linux
box, you have a system that makes this really approachable
and is using really modern tools under the hood.
Now, it's not what you're going to want
to use at any kind of scale.
You're not going to want to use it in an enterprise deployment.
You're not going to want to put this necessarily on a resume.
But if you have a home machine and you're particularly
looking at automation, this is one
of the things people don't understand about Home Assistant
is it has a lot of really well-managed one-click
deployments of very popular open source software.
And it gives you an easy snapshot backup management
update UI on top of it, and then has an extensible community
hack store you can add if you want.
And it's just all one stack OS that you could actually
just flash to a Raspberry Pi 4 image and run it all day long,
which I do.
And I am extremely sensitive to performance.
And it's just all out there for the taking.
And I don't think enough people appreciate or understand it
because they're not listening to self-hosted.
End of rant.
Ah, maybe they should head over to self-hosted.show
and check that out, where there's many fine episodes
that touch on basically all of this.
Yeah, you like how I turned it into a plug?
But I'm sure you'd probably have something that might
be a little more practical.
Well, I mean, I think it depends.
He writes container host.
If it is just containers and pretty much everything
in containers, I think you can get
a good amount of mileage just from Docker Compose.
If you don't really customize anything on the system,
it's just sort of a bog standard LTS
installer, the latest Fedora.
Install Docker and go from there.
That can work pretty well if you're OK
with that level of involvement.
Otherwise, over on Linux Action News,
we recently talked about the new backup server
that Proxmox has going.
And I wonder if, especially if maybe you've
got some mixed workloads, some VMs with some containers
involved, that might be an interesting choice as well.
That's a great point.
Proxmox is maybe something you should seriously
consider as at least the base of whatever home solution
you're going to do for hosting.
Because even if you deploy the applications in a container,
it's nice to have that host OS in a VM.
Because if this is successful, then it
makes it easy to migrate to a more powerful box
in a couple of years.
If you experience a failure, having everything virtualized
makes it significantly easier to backup and then thus restore.
And it abstracts out the hardware,
so that way you could move it about in the future.
You could even do things like take snapshots and then
test an upgrade.
If it doesn't work, roll back the entire OS.
So I think, like I knew he would,
I think Wes nailed it with the Proxmox recommendation.
And with that new Proxmox backup server,
that is even more of a solid choice.
And if you're not familiar with it, well, right into the show
and let us know if you'd like to hear about that.
Because it's something Wes and I are debating,
spending some time with, and then reporting back
on the show.
Lastly, Cory wrote in.
Everybody went to linuxunplug.com contact, right?
Cory wrote in and said, have you guys heard of Podify?
All right, get ready.
If you're going down the road, you
may need to pull over and listen to this one,
because this is a game changer.
Podify uses YouTube DL to create podcast RSS feeds, which
then you subscribe to in your podcast catcher of choice
or some other mechanism.
How awesome.
We're out of a job.
Yeah, Cory just, I think, just maybe came in
with the best pick of 2020.
How did we not find this, Wes?
This is amazing.
So again, it's called Podify.
We'll have a link to it in the show notes.
It's up on GitHub.
And it's awesome.
I even like the UI.
It's simple, straightforward.
Yeah.
Self-hosted, you get a web UI.
You paste in your YouTube link.
And then it downloads it with YouTube DL in the background,
adds it to a feed.
And then you can go add that feed
to whatever RSS player, podcast player of your choice,
and then have access to the stuff right there.
Way better than me downloading it manually
and then using Telegram to send it to myself.
Yeah, I think I've got to give this a go and then
do a report back.
But I might hold that report back for self-hosted,
because this is totally up that show's alley.
This turned into a big plug fest.
That is so great, Cory.
If you have a pick similar to that
or something else you find really useful,
do send it in to us.
We love those submitted at linuxunplug.com
slash contact, because that's great.
Now, speaking of picks, this one feels sort of not
as awesome now.
Cory stole your thunder.
Yeah, I got to follow Cory.
But I stumbled across dev fonts this week.
He was making the rounds on the internet,
and I wanted to pass it along to our community.
It is a way to go look at some really well-known popular fonts
that are quote unquote for developers.
But they're really for anybody who
likes very readable fonts in either their terminal, which
is what I really recommend you do,
or in your text editor of choice.
And there's a bunch of famous ones in there
and probably some you've never seen before.
And what's really nice about this website,
beyond some of the filtering options and whatnot,
is it gives you a preview in a code editor.
So you can see what the font looks like in the content
you'll be using.
And it's a really clever website,
so I wanted to give it a plug.
It's devfonts.gafl.dev.
But I'll have a link in the show notes,
so you don't have to try to remember that.
But it's devfonts is the website.
You can probably just Google it, too.
I think that's an I.
Oh, OK.
Oh, you're right.
Sorry.
I got across the room.
They should have used a better font.
devfonts.gafl.dev.
Yeah, that's got to be it.
That's why the link would just be a better way to go.
But don't you like how it previews it for you
and you can kind of get a sense of it?
Oh, yeah.
You can choose different themes.
You can also change the syntax highlighting.
So if you want to paste in some of your own work or code
samples to see how it looks in Python or Ruby or Java,
well, that's an easy little dropdown.
And they've got a lot of nice options here.
Cascadia code right at the top, which
is Microsoft's new dev-focused font.
Right below that is Fira code, which
is one I use myself because I'm a sucker
for those fancy ligatures.
Yeah, I really like that one, too.
I find it makes my terminal much more readable when
you need to distinguish important little bits there.
And then once I get it going in my terminal,
I'm like, well, now I want it in my text editor, too.
Put it everywhere.
It's pretty nice.
So check that out.
Link to that.
Not nearly as cool as Potify.
But Potify, I'm going to knock at one point
because of that name.
It sounds like a Docker management tool.
It sounds like a Podman tool or something, right?
Potify.
So I'm knocking at a point.
All right, all right.
You still win.
Yeah, that's what I'm going for.
Thanks, Wes.
I needed that win.
You know what else I need is I need you to join us live.
Yeah, so how about you do it?
Because we'd love to have you join us live at jblive.tv.
We put the times up at jupiterbroadcasting.com.
But nominally, it happens Tuesday at noon Pacific,
3 PM Eastern.
The other live show we have right now is Coda Radio.
But you never know.
I'm thinking about doing more live stream stuff.
So if you haven't followed us on Twitch,
that's maybe the best way to know when we're going live.
If you use Twitch, you can, I don't know,
subscribe or follow or whatever.
I don't think there's a bell.
But you can get involved over there
in some way with our channel.
And then you get notifications when we go live.
Old Man Chris tells the internet how to use Twitch.
And then there's the YouTube, which
is truly the source of all evil on the internet.
But you can also, if you bell us up over there,
I think you get the notification should the algorithm so
deem when we're live.
And the reason why I mention that
is because I'm going to be experimenting coming up
after the holidays predominantly.
But even maybe before the end of the year,
I'm going to experiment with a couple of different show ideas.
And I thought, I'll do it on the live stream.
And I'd like to get your feedback.
So if you're not already following us
on one of the places where you can watch us live,
it might be worth it.
Because you never know what could be there.
You never know.
Also, just one more plug for Linux Action News.
I'm really happy where that's at.
I think Wes has been able to really add
a lot of value to the show.
And while I still miss doing it with Joe,
I just love doing it with Wes.
And if you're not subscribed to Linux Action News,
you're missing a lot of what we cover.
I think truly one of the best ways
to stay informed in free software and the open source
world is weekly.
There's just enough there every week
that changes that it's good to keep track of that stuff.
And there's a lot of stories we're not putting in this show.
Because this show is really focused more on community stuff
and things that we can get a conversation really
rolling about and looking at like Fedora in the future.
But Linux Action News is like the things that really
happened in the open source world that week that matter.
And it's been really great having you on there, Wes.
So if you guys out there haven't subscribed to that yet,
go to linuxactionnews.com slash subscribe for that.
But see you next week.
Same bad time, same bad station.
That does bring us to an end of this week's podcast.
Thank you so much everybody who decided to download and listen
to the show.
Big thank you to our core contributors.
But even if you're not a core contributor,
we still really appreciate you listening.
We're thankful for your time.
We're thankful any time you have an opportunity
to share the show or if you take advantage
of one of our sponsors.
That's all things that really matter a lot to us.
And I've been ending now I think for three months officially.
I think I'm crossing the three month threshold today.
And I'm reflecting on that and just extremely grateful
for all of you out there.
Thanks so much for tuning this week's episode
of the Unplugged program.
And we will indeed see you right back here, not Monday,
but next Tuesday.
Yeah!
All right.
The duty has fallen upon us to title this here podcast.
So those of you watching live head over to JBtitles.com.
Today's episode is a real a phonic experience because we started with peanut butter jelly
time.
And then in the middle of the show, we were transmitting you secret messages using modem
sounds and then coming up here in a little bit, I have something else that I'm going
to play for you.
That's some special audio.
Assuming I can get it to download.
Oh, there we go.
Got it.
Just in time.
All right.
JBtitles.com.
Everybody go boat.
Yeah, we don't know what the title should be.
We can't know.
Wes, I'm getting positive reports that Test Turkey 2 is doing very, very good.
Ten pounds seems to be the perfect size for the smoker.
I was worried.
I know.
And that's why I wanted to keep you up to date because I didn't want you stressing about
it.
Now, will we have a live stream of you eating said turkey later on?
I don't think anybody wants that.
Nobody wants that.
Nobody wants to have to watch me try to carve a turkey either.
Let me tell you.
Maybe a sensual gravy pouring a little bit.
I feel so embarrassed when I'm trying to carve a turkey because I feel like as a dad, I should
have that down.
And let me tell you, I am just horrible at it because you do it once every few years
at best.
And at least I do.
So I'm not very good at it.
I had a little quick thing I wanted to do.
Wes and I came across this bit of audio.
You guys know we're audio geeks.
This is what the Perseverance rover sounds like.
Now, Wes, make sure I don't mess this up.
But they did like an internal diagnostic from the surface of Mars and captured some sound
of the internal machinery.
And that's what we have here, right?
Yeah.
So it's actually while it's on route.
This is one of the first times they've attached microphones to a spacecraft like this.
And the intent is to hear what it sounds like as they enter the Martian atmosphere and go
in for a landing.
But out in the void, quiet void of space, you can actually get a feeling for what it's
like coming along, hearing its own machine, internal machinery, and nothing else in the
void.
Oh, that wasn't the right one.
Dang it.
Slack.
Dammit.
You know what happens is it's a snap, and then it's not in the actual downloads folder,
but it's in the downloads folder inside the snap folder.
That's why I played the wrong one.
I have been trolled.
I have been trolled.
Self-troll.
Yeah.
Well, you know, you don't want just Slack having loosey-goose access to your file system
like an animal.
All right.
Here's the sound.
Here we go.
And I guess, I mean, it's not all that interesting, really, other than you hear some machinery
in there.
But one of the things, I guess, that's making the most noise is its internal heating elements.
I didn't realize, of course, this makes sense.
This is the rover that's en route.
And when it lands, does that mean we're going to get to hear what it sounds like on Mars?
Yeah, we'll see.
I mean, I guess, as long as all the microphone equipment makes it through, yeah, because
they're really aimed at experiencing what the landing is like, like the mortar that
sets off the parachute that helps break its fall, all that kind of element.
But in theory, if all of that survives, if it keeps working and you get it on the surface,
yeah, we'll have audio from Mars.
That's crazy.
Yeah, it is.
Tell me what you think.
I've got an idea for a combo, okay?
So tell me what you think of this combo for like the secret message of the week.
So this will be, this is how we do the secret message of the week.
The cone of silence.
Can you overlap the sounds like that?
Will that work?
I bet so.
We'll have to try it.
Somebody let us know.
I'll do it.
I'll do it.
You know, one more time and then you let us know if this works.
If you're listening live, let us know.
The cone of silence.

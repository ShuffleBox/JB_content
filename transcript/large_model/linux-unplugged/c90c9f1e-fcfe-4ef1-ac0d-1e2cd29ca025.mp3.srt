1
00:00:00,000 --> 00:00:02,880
Happy end of life for Windows 7 day, Wes.

2
00:00:02,880 --> 00:00:05,560
Microsoft sent us a whole bunch of new Linux users

3
00:00:05,560 --> 00:00:06,920
for our return show.

4
00:00:06,920 --> 00:00:08,880
You don't think they'll upgrade to Windows 10?

5
00:00:08,880 --> 00:00:09,640
I don't know.

6
00:00:09,640 --> 00:00:10,840
I was looking this up.

7
00:00:10,840 --> 00:00:13,660
How many people are actually still using Windows 7?

8
00:00:13,660 --> 00:00:16,600
And over at Computer World, they have an article that says,

9
00:00:16,600 --> 00:00:20,520
they ran an estimation, and they say on January 1, 2021,

10
00:00:20,520 --> 00:00:22,600
so a year from now, there will still

11
00:00:22,600 --> 00:00:26,480
be 18.7 of all Windows users running Windows 7, which

12
00:00:26,480 --> 00:00:30,920
is approximately 281 million machines.

13
00:00:30,920 --> 00:00:33,680
Something tells me they're not going to Windows 10.

14
00:00:33,680 --> 00:00:35,720
Pretty sure those folks are all going to openBSD.

15
00:00:35,720 --> 00:00:36,220
Yeah.

16
00:00:36,220 --> 00:00:36,720
Yeah.

17
00:00:36,720 --> 00:00:37,220
Yeah.

18
00:00:37,220 --> 00:00:37,720
Yeah.

19
00:00:37,720 --> 00:00:38,220
Yeah.

20
00:00:38,220 --> 00:00:38,720
Yeah.

21
00:00:38,720 --> 00:00:39,220
Yeah.

22
00:00:39,220 --> 00:00:39,720
Yeah.

23
00:00:39,720 --> 00:00:40,220
Yeah.

24
00:00:40,220 --> 00:00:40,720
Yeah.

25
00:00:40,720 --> 00:00:41,220
Yeah.

26
00:00:41,220 --> 00:00:41,720
Yeah.

27
00:00:41,720 --> 00:00:42,220
Yeah.

28
00:00:42,220 --> 00:00:42,720
Yeah.

29
00:00:42,720 --> 00:00:43,220
Yeah.

30
00:00:43,220 --> 00:00:43,720
Yeah.

31
00:00:43,720 --> 00:00:44,220
Yeah.

32
00:00:44,220 --> 00:00:44,720
Yeah.

33
00:00:44,720 --> 00:00:45,400
Yeah.

34
00:00:45,400 --> 00:00:47,960
Hello, friends, and welcome into the Unplugged program.

35
00:00:47,960 --> 00:00:48,840
My name is Chris.

36
00:00:48,840 --> 00:00:49,760
My name is Wes.

37
00:00:49,760 --> 00:00:51,380
Hello, Wes.

38
00:00:51,380 --> 00:00:53,720
If I sound a little different out there, dear audience,

39
00:00:53,720 --> 00:00:56,680
today, it's because I am a little different today.

40
00:00:56,680 --> 00:01:00,960
I'm on a remote snow setup using my emergency podcasting

41
00:01:00,960 --> 00:01:04,320
pack that I carry with me like every good podcaster should.

42
00:01:04,320 --> 00:01:06,680
So if I sound a little different, that's why.

43
00:01:06,680 --> 00:01:11,240
But nevertheless, we still have a great episode today.

44
00:01:11,240 --> 00:01:13,320
Jim Salter from TechSnap and Ars Technica

45
00:01:13,320 --> 00:01:16,560
and other places online, like anywhere you want to find them,

46
00:01:16,560 --> 00:01:17,240
is joining us.

47
00:01:17,240 --> 00:01:18,120
Hello, Jim.

48
00:01:18,120 --> 00:01:18,880
What's up?

49
00:01:18,880 --> 00:01:19,880
Hey, Jim.

50
00:01:19,880 --> 00:01:22,840
Now, you must be here because we're talking about a ZFS topic

51
00:01:22,840 --> 00:01:24,000
today.

52
00:01:24,000 --> 00:01:25,480
You can't keep me away.

53
00:01:25,480 --> 00:01:26,720
Well, thank you for joining us.

54
00:01:26,720 --> 00:01:29,080
We'll be getting to, in our estimation,

55
00:01:29,080 --> 00:01:32,120
why Linus has gotten a few things wrong about ZFS

56
00:01:32,120 --> 00:01:32,880
recently.

57
00:01:32,880 --> 00:01:36,040
We'll explain it to you and also what he's gotten right.

58
00:01:36,040 --> 00:01:38,240
We've gotten some community news that we're

59
00:01:38,240 --> 00:01:39,700
going to get to, something that's

60
00:01:39,700 --> 00:01:43,240
a little more straight from the headlines type inspired.

61
00:01:43,240 --> 00:01:45,360
But before all of that, we've got

62
00:01:45,360 --> 00:01:47,360
to say holler to our virtual lug.

63
00:01:47,360 --> 00:01:49,280
Time appropriate greetings, Mumble Room.

64
00:01:49,280 --> 00:01:49,780
Hello.

65
00:01:49,780 --> 00:01:50,280
Hello.

66
00:01:50,280 --> 00:01:50,780
Hello.

67
00:01:50,780 --> 00:01:52,000
What's up?

68
00:01:52,000 --> 00:01:52,800
Hello.

69
00:01:52,800 --> 00:01:55,040
I can hear that we have a really good showing today,

70
00:01:55,040 --> 00:01:57,600
but I'm flying blind in my remote setup.

71
00:01:57,600 --> 00:02:00,040
So I know it's like around a dozen people,

72
00:02:00,040 --> 00:02:01,280
so it's good to see everybody.

73
00:02:01,280 --> 00:02:02,120
I think you're just going to have

74
00:02:02,120 --> 00:02:04,520
to find out as they make their erudite comments.

75
00:02:04,520 --> 00:02:07,280
Yeah, tag me in the chat room with the old mumskies

76
00:02:07,280 --> 00:02:09,560
and let me know if you want to jump in since I can't really

77
00:02:09,560 --> 00:02:12,080
monitor the room today.

78
00:02:12,080 --> 00:02:14,800
But yeah, I am snowed in.

79
00:02:14,800 --> 00:02:18,220
And I say that kind of like with a kind of laugh about it

80
00:02:18,220 --> 00:02:20,640
because it's not like there's a lot of snow.

81
00:02:20,640 --> 00:02:23,560
I posted a quick like 20 second video

82
00:02:23,560 --> 00:02:25,920
on my YouTube channel, which I have linked in the show notes

83
00:02:25,920 --> 00:02:27,720
if you want to see what I'm talking about.

84
00:02:27,720 --> 00:02:30,120
I mean, I'm not trying to overstate what's going on here.

85
00:02:30,120 --> 00:02:33,520
It's not like it's horrible, but for the Seattle area,

86
00:02:33,520 --> 00:02:35,720
it's snowpocalypse 2020.

87
00:02:35,720 --> 00:02:37,720
And it's combined with a couple of days

88
00:02:37,720 --> 00:02:39,720
of staying below freezing.

89
00:02:39,720 --> 00:02:43,720
And so the roads are just trash and my water's frozen,

90
00:02:43,720 --> 00:02:45,480
which happens from time to time.

91
00:02:45,480 --> 00:02:48,120
But more importantly, people do not

92
00:02:48,120 --> 00:02:49,520
know how to drive around here.

93
00:02:49,520 --> 00:02:52,840
And an area of the freeway that I transit through,

94
00:02:52,840 --> 00:02:56,120
it's the exit right before the studio exit,

95
00:02:56,120 --> 00:02:58,920
has just seen nothing but accidents today.

96
00:02:58,920 --> 00:03:01,680
There was a car fire around 5 AM.

97
00:03:01,680 --> 00:03:04,120
There was a pile up that caused.

98
00:03:04,120 --> 00:03:07,220
And then spooky enough, around the time

99
00:03:07,220 --> 00:03:08,840
I would have been heading into the studio

100
00:03:08,840 --> 00:03:10,920
had I decided to brave the snow, there

101
00:03:10,920 --> 00:03:14,640
was a five car pile up and a semi collision

102
00:03:14,640 --> 00:03:17,360
in that exact spot.

103
00:03:17,360 --> 00:03:20,280
And so I thought, you know what?

104
00:03:20,280 --> 00:03:23,080
I'll just podcast from the snow in the RV today.

105
00:03:23,080 --> 00:03:24,400
Sounds much safer.

106
00:03:24,400 --> 00:03:26,440
Yeah, it's much safer.

107
00:03:26,440 --> 00:03:30,800
And it means it's kind of an interesting slow ramp

108
00:03:30,800 --> 00:03:33,920
back because the show has been on break for the last three

109
00:03:33,920 --> 00:03:36,360
weeks when we've been running our holiday specials.

110
00:03:36,360 --> 00:03:41,200
So this is our first episode back since before Christmas.

111
00:03:41,200 --> 00:03:43,640
And it's like a slow ramp up.

112
00:03:43,640 --> 00:03:44,800
It's kind of nice in a way.

113
00:03:44,800 --> 00:03:45,680
It's a little different.

114
00:03:45,680 --> 00:03:46,840
It's great to be back.

115
00:03:46,840 --> 00:03:50,120
Meanwhile, while we're dealing with the snow,

116
00:03:50,120 --> 00:03:51,640
the rest of the tech industry has

117
00:03:51,640 --> 00:03:54,720
been dealing with CES, the Consumer Electronics

118
00:03:54,720 --> 00:03:58,200
Show that happens every single year in Vegas.

119
00:03:58,200 --> 00:04:00,600
And we don't talk about it a lot because there's not

120
00:04:00,600 --> 00:04:04,320
a lot of pure Linux and open source stuff going on there.

121
00:04:04,320 --> 00:04:09,000
But as you would expect, there's a lot of gadgets running Linux.

122
00:04:09,000 --> 00:04:11,960
But some of them have been a little more upfront,

123
00:04:11,960 --> 00:04:14,440
a little more obvious about the fact that they're using Linux.

124
00:04:14,440 --> 00:04:16,600
They're sort of proudly using Linux.

125
00:04:16,600 --> 00:04:18,680
And surprisingly enough, Wes, it's

126
00:04:18,680 --> 00:04:21,440
the devices that seem to be using the automotive grade

127
00:04:21,440 --> 00:04:24,400
Linux project from the Linux Foundation.

128
00:04:24,400 --> 00:04:26,440
Subaru made a big announcement this week

129
00:04:26,440 --> 00:04:28,880
that they're going to do all of their infotainment systems

130
00:04:28,880 --> 00:04:30,280
using Linux.

131
00:04:30,280 --> 00:04:32,400
So they'll be rolling it out initially

132
00:04:32,400 --> 00:04:35,640
in the Subaru Outback and Legacy booth vehicles.

133
00:04:35,640 --> 00:04:37,840
But there's a bunch of others that already have announced

134
00:04:37,840 --> 00:04:38,520
support as well.

135
00:04:38,520 --> 00:04:43,040
Yeah, including the 2020 Toyota RAV4 and Mazda CX-30,

136
00:04:43,040 --> 00:04:46,840
both powered by automotive grade Linux software.

137
00:04:46,840 --> 00:04:49,480
Apparently, there were 20 plus open source demos at the Linux

138
00:04:49,480 --> 00:04:51,200
Foundation booth this year.

139
00:04:51,200 --> 00:04:52,440
Yeah, I did a little digging.

140
00:04:52,440 --> 00:04:55,800
And there's almost a dozen different manufacturers now

141
00:04:55,800 --> 00:04:57,800
that are on board with automotive grade Linux.

142
00:04:57,800 --> 00:05:01,720
And it's like legitimate companies that are in on this.

143
00:05:01,720 --> 00:05:04,640
We're going to actually start seeing real cars

144
00:05:04,640 --> 00:05:08,640
that people buy running automotive grade Linux.

145
00:05:08,640 --> 00:05:11,760
And they had over 20 different open source software demos

146
00:05:11,760 --> 00:05:12,840
running on this thing.

147
00:05:12,840 --> 00:05:14,000
Yeah, that's pretty neat.

148
00:05:14,000 --> 00:05:16,080
And maybe that's where some of the advantages.

149
00:05:16,080 --> 00:05:17,920
I mean, it's neat to see Linux being used.

150
00:05:17,920 --> 00:05:20,560
But this definitely feels Linux Foundation-y,

151
00:05:20,560 --> 00:05:23,760
if you get my drift here, in that these probably won't still

152
00:05:23,760 --> 00:05:26,000
be user modifiable or Linux like we

153
00:05:26,000 --> 00:05:27,560
would recognize it in any way.

154
00:05:27,560 --> 00:05:29,040
Yeah, it's kind of like that Android.

155
00:05:29,040 --> 00:05:30,360
It's the Android effect.

156
00:05:30,360 --> 00:05:33,200
But it does still speak to the capability and usefulness

157
00:05:33,200 --> 00:05:34,520
of the kernel we all love.

158
00:05:34,520 --> 00:05:35,020
Well said.

159
00:05:35,020 --> 00:05:37,080
And it's pretty neat to, it's like when

160
00:05:37,080 --> 00:05:39,920
you get on the airplane, how many times have you

161
00:05:39,920 --> 00:05:42,040
seen when people get on the Delta airplane

162
00:05:42,040 --> 00:05:44,520
and Delta will do a reboot of the infotainment

163
00:05:44,520 --> 00:05:47,680
systems during the passenger offloading and unloading.

164
00:05:47,680 --> 00:05:51,280
And so if you get on the plane kind of early,

165
00:05:51,280 --> 00:05:53,680
or they just are slow at the reboot, I guess,

166
00:05:53,680 --> 00:05:56,640
you can get a little shot of picture

167
00:05:56,640 --> 00:06:00,680
of Linux booting in the seat cushion of the Delta airline

168
00:06:00,680 --> 00:06:01,440
plane seats.

169
00:06:01,440 --> 00:06:03,660
Makes me feel better to have tux right there

170
00:06:03,660 --> 00:06:06,080
as I'm getting ready to fly.

171
00:06:06,080 --> 00:06:07,920
Doesn't look like it's a super great system,

172
00:06:07,920 --> 00:06:11,280
but I probably see one of those once a week either sent

173
00:06:11,280 --> 00:06:14,080
into the show or somebody posts it online.

174
00:06:14,080 --> 00:06:17,520
And I remember, I mean, we did it as a runs Linux forever

175
00:06:17,520 --> 00:06:18,760
ago.

176
00:06:18,760 --> 00:06:20,680
So yeah, it's out there.

177
00:06:20,680 --> 00:06:25,060
And it's just an implementation detail, really,

178
00:06:25,060 --> 00:06:26,840
for the most part, except for us.

179
00:06:26,840 --> 00:06:27,320
Right.

180
00:06:27,320 --> 00:06:28,680
That's assuming you can see the seat back

181
00:06:28,680 --> 00:06:32,160
screen between your knees when you're in that Delta seat.

182
00:06:32,160 --> 00:06:32,960
Yeah.

183
00:06:32,960 --> 00:06:34,020
Yeah, that's true.

184
00:06:34,020 --> 00:06:36,680
And honestly, I prefer Alaska.

185
00:06:36,680 --> 00:06:38,560
But I don't want to start a fight.

186
00:06:38,560 --> 00:06:42,000
I have so much to say about the snow.

187
00:06:42,000 --> 00:06:44,200
But I know we need to get into housekeeping this week

188
00:06:44,200 --> 00:06:46,840
already, because there's a lot to update people

189
00:06:46,840 --> 00:06:49,760
on since we've been gone and tons of really good stuff.

190
00:06:49,760 --> 00:06:53,280
So nominally today, we're going to talk about Linus's take

191
00:06:53,280 --> 00:06:55,480
on ZFS and maybe where he got it wrong.

192
00:06:55,480 --> 00:07:00,640
But before we do that, let's do a little housekeeping.

193
00:07:00,640 --> 00:07:02,140
There's a lot to tell you about, so I

194
00:07:02,140 --> 00:07:03,960
wanted to kind of get right into this sort

195
00:07:03,960 --> 00:07:05,760
of near the top of the show.

196
00:07:05,760 --> 00:07:09,080
First of all, thank you to everybody who's joined us

197
00:07:09,080 --> 00:07:11,440
at jupiterbroadcasting.com slash Telegram.

198
00:07:11,440 --> 00:07:13,200
That's our official Telegram channel

199
00:07:13,200 --> 00:07:16,080
where the conversation goes on after the show.

200
00:07:16,080 --> 00:07:18,560
And you can keep it going over at jupiterbroadcasting.com

201
00:07:18,560 --> 00:07:19,800
slash Telegram.

202
00:07:19,800 --> 00:07:21,280
It's doing great.

203
00:07:21,280 --> 00:07:24,680
And I think a big part of that is the spam bots and stuff.

204
00:07:24,680 --> 00:07:26,760
It's really kind of changed the game over there.

205
00:07:26,760 --> 00:07:28,320
So it's been really nice.

206
00:07:28,320 --> 00:07:34,060
Also, this Friday, assuming I'm not snowed in,

207
00:07:34,060 --> 00:07:36,760
Cheez and I and whoever else wants to join us

208
00:07:36,760 --> 00:07:39,320
are doing a live stream on living in the terminal,

209
00:07:39,320 --> 00:07:42,240
essentially creating a desktop-like environment

210
00:07:42,240 --> 00:07:45,760
but in the terminal, something you could SSH to on a VPS

211
00:07:45,760 --> 00:07:47,640
or back home.

212
00:07:47,640 --> 00:07:48,960
And it's really slick.

213
00:07:48,960 --> 00:07:51,820
It's something Cheez used to do on the DL at an old gig.

214
00:07:51,820 --> 00:07:54,760
So he really dialed it in.

215
00:07:54,760 --> 00:07:56,520
And he'll walk us through it on Friday.

216
00:07:56,520 --> 00:07:58,440
So that'll be live, assuming I can make it.

217
00:07:58,440 --> 00:08:00,480
I'm excited to see what his secrets are.

218
00:08:00,480 --> 00:08:01,160
Yeah.

219
00:08:01,160 --> 00:08:03,040
He's got a few great ideas in there.

220
00:08:03,040 --> 00:08:05,400
And then I've got a couple of points of interest

221
00:08:05,400 --> 00:08:07,360
that we need to get out there for everybody.

222
00:08:07,360 --> 00:08:13,960
Number one, two fests are closing their calls for paper

223
00:08:13,960 --> 00:08:15,180
very soon.

224
00:08:15,180 --> 00:08:19,440
This Saturday, January 18, Texas Linux Fest

225
00:08:19,440 --> 00:08:21,440
closes their call for papers.

226
00:08:21,440 --> 00:08:25,560
Now, Texas Linux Fest is one of my favorite Linux fests

227
00:08:25,560 --> 00:08:29,560
because it's the perfect size to actually build friendships,

228
00:08:29,560 --> 00:08:31,480
relationships, and connections.

229
00:08:31,480 --> 00:08:33,480
Some of the most fruitful things that

230
00:08:33,480 --> 00:08:36,240
have happened in my career and others I know

231
00:08:36,240 --> 00:08:38,380
are the result of Texas Linux Fest.

232
00:08:38,380 --> 00:08:41,360
So it's a great conference to get involved in if you can.

233
00:08:41,360 --> 00:08:44,680
And their call for papers wrap up very soon.

234
00:08:44,680 --> 00:08:47,960
So we have a link to their papercall.io site.

235
00:08:47,960 --> 00:08:50,080
If you want to give a shot, there's

236
00:08:50,080 --> 00:08:54,160
worse places to go than Texas in the winter.

237
00:08:54,160 --> 00:08:56,640
Is there anything else that we want to add to that, Carl?

238
00:08:56,640 --> 00:08:59,000
I know you're involved very closely with Texas Linux Fest.

239
00:08:59,000 --> 00:09:00,120
So if there's something you want to mention,

240
00:09:00,120 --> 00:09:01,960
I want to give you a chance here in the show.

241
00:09:01,960 --> 00:09:04,480
Yeah, just one thing somebody asked me about today.

242
00:09:04,480 --> 00:09:05,860
The call for papers, you don't actually

243
00:09:05,860 --> 00:09:07,320
have to have your talk done.

244
00:09:07,320 --> 00:09:09,880
Just get the idea and the basic elevator pitch submitted.

245
00:09:09,880 --> 00:09:11,760
So that way, we can select between them

246
00:09:11,760 --> 00:09:14,440
and schedule them in categories and all that.

247
00:09:14,440 --> 00:09:17,200
Yeah, yeah, get your pitch ready, get an idea,

248
00:09:17,200 --> 00:09:19,520
get an angle, get a concept, and then flush it out.

249
00:09:19,520 --> 00:09:21,760
You use the time between now and the fest.

250
00:09:21,760 --> 00:09:24,160
That's probably something people don't think about

251
00:09:24,160 --> 00:09:26,040
because it feels like you're cheating.

252
00:09:26,040 --> 00:09:27,880
But really, that's the expectation.

253
00:09:27,880 --> 00:09:30,000
Besides, you want to polish it right up to the time

254
00:09:30,000 --> 00:09:31,360
to get time to go.

255
00:09:31,360 --> 00:09:32,680
I don't know any other way.

256
00:09:32,680 --> 00:09:36,200
Also, Linux Fest, our favorite Linux Fest,

257
00:09:36,200 --> 00:09:41,760
Linux Fest Northwest, it's call for papers, wraps up Wednesday.

258
00:09:41,760 --> 00:09:43,320
That's tomorrow as we record.

259
00:09:43,320 --> 00:09:45,240
So if you're listening, it may have just closed

260
00:09:45,240 --> 00:09:48,440
or you may have a tiny bit of time left, better go check.

261
00:09:48,440 --> 00:09:50,920
And it's a good time to think about your plans

262
00:09:50,920 --> 00:09:52,400
to come join us at Linux Fest.

263
00:09:52,400 --> 00:09:53,280
Definitely.

264
00:09:53,280 --> 00:09:55,460
We are starting to do our planning.

265
00:09:55,460 --> 00:09:59,160
And we've had so much fun over the years

266
00:09:59,160 --> 00:10:01,600
that if you can make it, it's another one of those

267
00:10:01,600 --> 00:10:04,840
where you can really hear it's made connections and change

268
00:10:04,840 --> 00:10:05,680
things for people.

269
00:10:05,680 --> 00:10:07,380
So I really recommend, if you can make it,

270
00:10:07,380 --> 00:10:09,920
please join us at Linux Fest Northwest.

271
00:10:09,920 --> 00:10:12,120
You can get the details at their website.

272
00:10:12,120 --> 00:10:15,520
It's in April, towards the end, like last weekend.

273
00:10:15,520 --> 00:10:19,400
And then last but not least, our buddy Alex,

274
00:10:19,400 --> 00:10:22,720
my co-host on Self-Hosted, sat down

275
00:10:22,720 --> 00:10:26,120
with the Home Assistant podcast that comes out this week.

276
00:10:26,120 --> 00:10:28,680
And the Home Assistant podcast is definitely

277
00:10:28,680 --> 00:10:31,240
for those of you who want to learn a lot more about Home

278
00:10:31,240 --> 00:10:32,000
Assistant.

279
00:10:32,000 --> 00:10:33,520
We go into it on Self-Hosted, but it's

280
00:10:33,520 --> 00:10:37,160
part of our overall solution, whereas this podcast focuses

281
00:10:37,160 --> 00:10:40,880
in on what I think is one of the most remarkable open source

282
00:10:40,880 --> 00:10:45,120
projects and in the top 10 active open source

283
00:10:45,120 --> 00:10:47,120
projects on GitHub.

284
00:10:47,120 --> 00:10:49,320
And great podcast that really zeros in on that.

285
00:10:49,320 --> 00:10:51,360
And they had Alex sit and join them.

286
00:10:51,360 --> 00:10:53,480
Alex has a beautiful Home Assistant setup, too.

287
00:10:53,480 --> 00:10:55,040
So that was a good call on their part.

288
00:10:55,040 --> 00:10:56,440
Yeah, that's for sure.

289
00:10:56,440 --> 00:10:59,240
That'll be episode 61, if you want to find it.

290
00:10:59,240 --> 00:10:59,760
There you go.

291
00:10:59,760 --> 00:11:03,000
And we'll also put a link to the general podcast page,

292
00:11:03,000 --> 00:11:05,440
since it's not out as we record yet, in the show notes.

293
00:11:05,440 --> 00:11:07,120
But you can find it there.

294
00:11:07,120 --> 00:11:08,280
A lot going on.

295
00:11:08,280 --> 00:11:09,840
It's just about Linux Fest season,

296
00:11:09,840 --> 00:11:11,080
because something we didn't mention,

297
00:11:11,080 --> 00:11:12,760
but I will get it out there right now,

298
00:11:12,760 --> 00:11:16,120
since we're covering this, we're also going to be at scale.

299
00:11:16,120 --> 00:11:17,880
So if you're going to be at scale this year,

300
00:11:17,880 --> 00:11:19,280
come say hi to us.

301
00:11:19,280 --> 00:11:20,820
I'm sure coming up soon, we'll start

302
00:11:20,820 --> 00:11:23,200
setting up the actual meetups and all that kind of stuff.

303
00:11:23,200 --> 00:11:26,520
Yeah, this year we're planning to do Linux Fest Northwest, Texas

304
00:11:26,520 --> 00:11:27,840
Linux Fest, and scale.

305
00:11:27,840 --> 00:11:30,720
Now, everything's always subject to change, especially

306
00:11:30,720 --> 00:11:31,960
these days.

307
00:11:31,960 --> 00:11:34,240
But that's our intention as we record right now.

308
00:11:34,240 --> 00:11:35,840
So if you're thinking about it, and we

309
00:11:35,840 --> 00:11:37,680
could push you over the line a little bit,

310
00:11:37,680 --> 00:11:39,680
I hope that encourages you to come say hi to us.

311
00:11:39,680 --> 00:11:42,000
Come hang out.

312
00:11:42,000 --> 00:11:43,440
And that's the housekeeping.

313
00:11:43,440 --> 00:11:45,440
I thought that was going to be a lot to get through.

314
00:11:45,440 --> 00:11:48,200
But really, for being off the air for three weeks,

315
00:11:48,200 --> 00:11:49,320
that wasn't so bad.

316
00:11:49,320 --> 00:11:51,240
No, it actually looks pretty good in here.

317
00:11:51,240 --> 00:11:52,120
Yeah.

318
00:11:52,120 --> 00:11:55,560
I mean, I'm pretty proud of us, Wes.

319
00:11:55,560 --> 00:11:58,280
A computer kid in the chat room asks if you're going to Self.

320
00:11:58,280 --> 00:11:59,320
I don't know.

321
00:11:59,320 --> 00:12:01,280
It always conflicts, but we'll see.

322
00:12:01,280 --> 00:12:02,940
I've always wanted to make it down there,

323
00:12:02,940 --> 00:12:04,800
but it's a really long travel.

324
00:12:04,800 --> 00:12:05,560
I'm going to Self.

325
00:12:05,560 --> 00:12:05,840
Are you?

326
00:12:05,840 --> 00:12:06,760
Yeah, OK.

327
00:12:06,760 --> 00:12:07,800
Great, Jim will be there.

328
00:12:07,800 --> 00:12:08,880
Jim goes every year.

329
00:12:08,880 --> 00:12:12,320
Not quite as far for Jim as it is for me.

330
00:12:12,320 --> 00:12:12,920
No.

331
00:12:12,920 --> 00:12:13,880
So that's good.

332
00:12:13,880 --> 00:12:17,240
And you often go to all things open, too, don't you?

333
00:12:17,240 --> 00:12:18,040
Every year.

334
00:12:18,040 --> 00:12:18,960
There you go.

335
00:12:18,960 --> 00:12:21,240
I want to try to make it this year if I can.

336
00:12:21,240 --> 00:12:24,680
I don't quite have it nailed down yet, but I would like to.

337
00:12:24,680 --> 00:12:26,200
It is a monster of a show.

338
00:12:26,200 --> 00:12:26,720
Is it?

339
00:12:26,720 --> 00:12:28,440
We had 5,000 people last year.

340
00:12:28,440 --> 00:12:29,160
Whoa.

341
00:12:29,160 --> 00:12:29,880
OK.

342
00:12:29,880 --> 00:12:31,240
Sounds like we shouldn't miss it.

343
00:12:31,240 --> 00:12:31,720
Yeah.

344
00:12:31,720 --> 00:12:32,840
You really should not.

345
00:12:32,840 --> 00:12:33,440
All right.

346
00:12:33,440 --> 00:12:36,520
OK, I'm getting hyped.

347
00:12:36,520 --> 00:12:39,920
I mean, it's on my plan, so I'll start taking it seriously.

348
00:12:39,920 --> 00:12:43,720
All right, well, let's talk about Linus Torvalds' recent

349
00:12:43,720 --> 00:12:44,840
claims not to use.

350
00:12:44,840 --> 00:12:47,280
He says, quote, don't use ZFS.

351
00:12:47,280 --> 00:12:52,200
But unfortunately, he doesn't seem to fully understand it.

352
00:12:52,200 --> 00:12:53,800
For me, it was kind of hard to read this,

353
00:12:53,800 --> 00:12:56,800
because it's sort of like when I have a family member who I

354
00:12:56,800 --> 00:12:59,160
realize isn't going to figure something out.

355
00:12:59,160 --> 00:13:02,200
It's not kind of within them, and they sort of

356
00:13:02,200 --> 00:13:04,600
hit their limit, and it's sort of a little, well.

357
00:13:04,600 --> 00:13:06,320
Turns out Linus has faults, too, Chris.

358
00:13:06,320 --> 00:13:06,680
Yeah.

359
00:13:06,680 --> 00:13:07,360
I mean, we're all human.

360
00:13:07,360 --> 00:13:08,280
I think we knew that.

361
00:13:08,280 --> 00:13:10,000
It's just when Linus says something,

362
00:13:10,000 --> 00:13:11,960
it comes with a certain level of authority.

363
00:13:11,960 --> 00:13:14,960
It immediately, immediately generates headlines.

364
00:13:14,960 --> 00:13:16,120
It creates blog posts.

365
00:13:16,120 --> 00:13:17,880
It creates discussion.

366
00:13:17,880 --> 00:13:22,440
It's as it should after its contribution.

367
00:13:22,440 --> 00:13:23,880
But there was a series of questions

368
00:13:23,880 --> 00:13:26,280
about Linux performance in a thread,

369
00:13:26,280 --> 00:13:29,520
and eventually in there, ZFS came up.

370
00:13:29,520 --> 00:13:31,040
And it was in here where Linus went

371
00:13:31,040 --> 00:13:33,720
on to make some inaccurate and damaging potential claims

372
00:13:33,720 --> 00:13:34,360
about ZFS.

373
00:13:34,360 --> 00:13:36,160
And Jim kind of makes this case in an article we're

374
00:13:36,160 --> 00:13:40,280
going to link that he wrote over at Ars Technica that really kind

375
00:13:40,280 --> 00:13:43,760
of goes into some of the history here,

376
00:13:43,760 --> 00:13:45,800
because that's, I think, something that's really key

377
00:13:45,800 --> 00:13:48,680
to understand about this, is this really kind of goes back

378
00:13:48,680 --> 00:13:54,280
to January of 2019, when Greg KH decided he was done exporting

379
00:13:54,280 --> 00:13:58,240
certain types of kernel symbols to non-GPL loadable kernel

380
00:13:58,240 --> 00:13:59,040
modules.

381
00:13:59,040 --> 00:14:01,000
Yeah, back then, that particular symbol

382
00:14:01,000 --> 00:14:03,960
was keeping track of the state of the processor's floating

383
00:14:03,960 --> 00:14:04,880
point unit.

384
00:14:04,880 --> 00:14:06,680
And without access to that symbol,

385
00:14:06,680 --> 00:14:09,880
external kernel modules, think ZFS,

386
00:14:09,880 --> 00:14:13,240
which access the FPU directly, as ZFS does, well,

387
00:14:13,240 --> 00:14:15,360
they've got to implement some of the code, the state

388
00:14:15,360 --> 00:14:18,160
preservation logic, all on their own.

389
00:14:18,160 --> 00:14:21,600
So once that symbol was no longer available to them,

390
00:14:21,600 --> 00:14:22,640
that had to be done.

391
00:14:22,640 --> 00:14:25,280
Right, and I remember when that change was made,

392
00:14:25,280 --> 00:14:26,680
Greg was quoted as saying, quote,

393
00:14:26,680 --> 00:14:29,880
my tolerance for ZFS is pretty non-existent.

394
00:14:29,880 --> 00:14:32,880
And it kind of created a lot of drama.

395
00:14:32,880 --> 00:14:34,840
It spawned a lot of chatter.

396
00:14:34,840 --> 00:14:36,720
And it did create a breaking change

397
00:14:36,720 --> 00:14:41,080
that the ZFS folks had to respond to.

398
00:14:41,080 --> 00:14:44,440
So there's been some obvious kind of, not hostility,

399
00:14:44,440 --> 00:14:46,240
but not really a will.

400
00:14:46,240 --> 00:14:47,760
There's a hard line.

401
00:14:47,760 --> 00:14:51,000
Maybe a reminder that these are not well-meshed systems,

402
00:14:51,000 --> 00:14:52,480
that it certainly works very well.

403
00:14:52,480 --> 00:14:54,200
But these two development communities

404
00:14:54,200 --> 00:14:55,880
are not necessarily working together.

405
00:14:55,880 --> 00:14:57,280
Right, and the hard lines, I think,

406
00:14:57,280 --> 00:14:59,160
really form because of the licensing.

407
00:14:59,160 --> 00:15:01,480
And that's where I think Linus got this thing right.

408
00:15:01,480 --> 00:15:04,040
His concerns over licensing, I think, are reasonable.

409
00:15:04,040 --> 00:15:06,120
He writes, honestly, there is no way

410
00:15:06,120 --> 00:15:08,400
I can merge any of the ZFS efforts

411
00:15:08,400 --> 00:15:11,120
until I get an official letter from Oracle.

412
00:15:11,120 --> 00:15:13,120
Other people think it can be done,

413
00:15:13,120 --> 00:15:15,720
or think it's OK to merge ZFS code into the kernel,

414
00:15:15,720 --> 00:15:18,160
and that the module interface makes it OK.

415
00:15:18,160 --> 00:15:19,440
That's their decision.

416
00:15:19,440 --> 00:15:22,080
But considering Oracle's litigious nature

417
00:15:22,080 --> 00:15:24,160
and the questions over licensing,

418
00:15:24,160 --> 00:15:27,360
there's no way I can ever feel safe doing so.

419
00:15:27,360 --> 00:15:30,920
And he goes on to discuss the flimsy nature of the shim.

420
00:15:30,920 --> 00:15:33,640
But where it kind of goes off the rails

421
00:15:33,640 --> 00:15:37,280
is when he says, don't use ZFS.

422
00:15:37,280 --> 00:15:40,840
It's always more of a buzzword than anything else.

423
00:15:40,840 --> 00:15:43,200
And the benchmarks I've seen don't make ZFS look

424
00:15:43,200 --> 00:15:44,320
all that great.

425
00:15:44,320 --> 00:15:46,400
And as far as I can tell, there's

426
00:15:46,400 --> 00:15:51,040
no real maintenance behind it anymore.

427
00:15:51,040 --> 00:15:52,520
Well, my jaw dropped when I saw that.

428
00:15:52,520 --> 00:15:53,440
How about you, Jim?

429
00:15:53,440 --> 00:15:55,040
Yeah, in a big way.

430
00:15:55,040 --> 00:15:57,320
I do want to back things up a little bit, though.

431
00:15:57,320 --> 00:15:59,440
Things were kind of already off the rails

432
00:15:59,440 --> 00:16:03,680
when Linus started talking about how he couldn't integrate ZFS

433
00:16:03,680 --> 00:16:04,440
into the kernel.

434
00:16:04,440 --> 00:16:08,560
Because while I don't doubt that he has seen people ask that,

435
00:16:08,560 --> 00:16:12,000
maybe even some people have asked him that directly,

436
00:16:12,000 --> 00:16:13,280
he was responding to somebody.

437
00:16:13,280 --> 00:16:15,000
And I'm sorry if I mispronounce your name

438
00:16:15,000 --> 00:16:17,960
if you're listening, Jonathan Danti.

439
00:16:17,960 --> 00:16:21,240
Jonathan had replied to Linus saying

440
00:16:21,240 --> 00:16:22,800
that the number one priority for Linux

441
00:16:22,800 --> 00:16:24,960
has been don't break existing users.

442
00:16:24,960 --> 00:16:28,800
And he goes on to some degree about that, which is great.

443
00:16:28,800 --> 00:16:30,480
And that has been a longstanding policy.

444
00:16:30,480 --> 00:16:32,920
And it's an important one and a good one.

445
00:16:32,920 --> 00:16:34,420
Jonathan says, I really appreciate

446
00:16:34,420 --> 00:16:36,920
this pragmatic policy targeting user space application.

447
00:16:36,920 --> 00:16:40,040
However, I have a question about a recent kernel change.

448
00:16:40,040 --> 00:16:44,080
That was the one that Greg KH made his infamous snark about

449
00:16:44,080 --> 00:16:47,160
that broke an important third party module, ZFS.

450
00:16:47,160 --> 00:16:49,260
I don't want to flame and feel free not

451
00:16:49,260 --> 00:16:50,960
to reply if you think I am.

452
00:16:50,960 --> 00:16:54,320
But recently, the kernel FPU symbol was declared GPL only

453
00:16:54,320 --> 00:16:57,800
and caused a significant issue for the ZFS on Linux project.

454
00:16:57,800 --> 00:16:58,920
How do you feel about that?

455
00:16:58,920 --> 00:17:01,180
Can you speak about the motivation?

456
00:17:01,180 --> 00:17:03,600
Now, it's worth noting that at no point

457
00:17:03,600 --> 00:17:05,760
does Jonathan say, hey, Linus, why won't you

458
00:17:05,760 --> 00:17:07,640
pull ZFS into the kernel?

459
00:17:07,640 --> 00:17:12,200
He just wants to know about why do we

460
00:17:12,200 --> 00:17:15,120
stop exporting that symbol when that breaks a project

461
00:17:15,120 --> 00:17:18,040
and we say we don't break users.

462
00:17:18,040 --> 00:17:22,880
And how Linus opens up his response, he says,

463
00:17:22,880 --> 00:17:24,640
note that we don't break users is literally

464
00:17:24,640 --> 00:17:27,400
about user space applications.

465
00:17:27,400 --> 00:17:29,040
And I'm alighting a couple of his words

466
00:17:29,040 --> 00:17:31,440
here for brevity and clarity.

467
00:17:31,440 --> 00:17:34,000
We don't break users about user space applications.

468
00:17:34,000 --> 00:17:36,120
If somebody adds a kernel module like ZFS,

469
00:17:36,120 --> 00:17:37,580
they're on their own.

470
00:17:37,580 --> 00:17:40,040
I can't maintain it, and I can't be bound by other people's

471
00:17:40,040 --> 00:17:41,040
kernel changes.

472
00:17:41,040 --> 00:17:43,000
Yeah, his argument is that's not user space.

473
00:17:43,000 --> 00:17:44,280
That's a module.

474
00:17:44,280 --> 00:17:47,120
That's kernel space, and we can break that as much as we want.

475
00:17:47,120 --> 00:17:47,800
Exactly.

476
00:17:47,800 --> 00:17:51,240
And now, at this point, right there at this point,

477
00:17:51,240 --> 00:17:54,320
he has answered Jonathan's entire question.

478
00:17:54,320 --> 00:17:58,720
He has done so informatively and very usefully.

479
00:17:58,720 --> 00:18:02,080
He's also, if he stopped right there,

480
00:18:02,080 --> 00:18:05,200
done a lot to put a productive positive cap

481
00:18:05,200 --> 00:18:07,400
on the controversy from Greg KH's change.

482
00:18:07,400 --> 00:18:10,600
He says, hey, don't break user space is about user space.

483
00:18:10,600 --> 00:18:12,260
A kernel module is not user space.

484
00:18:12,260 --> 00:18:13,800
If you want to play in kernel space,

485
00:18:13,800 --> 00:18:14,920
you've got to play with the big boys,

486
00:18:14,920 --> 00:18:17,880
and that means that ABIs will break and you have to keep up.

487
00:18:17,880 --> 00:18:19,120
And that's perfectly fair.

488
00:18:19,120 --> 00:18:21,560
We were so close to not having to talk about this at all.

489
00:18:21,560 --> 00:18:22,280
Exactly.

490
00:18:22,280 --> 00:18:26,520
So he should have just clicked send right there.

491
00:18:26,520 --> 00:18:28,320
When he starts saying, and honestly, there's

492
00:18:28,320 --> 00:18:31,400
no way I can merge ZFS, blah, blah, blah, well,

493
00:18:31,400 --> 00:18:32,880
nobody's asking you to right now.

494
00:18:32,880 --> 00:18:34,800
And he's already gone off the rail there,

495
00:18:34,800 --> 00:18:37,640
because I got to tell you, like you opened up,

496
00:18:37,640 --> 00:18:41,080
I wrote a long, detailed article about this at Ars Technica.

497
00:18:41,080 --> 00:18:42,800
We're up to 10 pages of comments now,

498
00:18:42,800 --> 00:18:46,160
and I can't tell you how many people, because they've

499
00:18:46,160 --> 00:18:51,120
read Linus' comment, they think now

500
00:18:51,120 --> 00:18:55,840
that stopping the export of the kernel FPU begin symbol,

501
00:18:55,840 --> 00:18:59,120
now they think that that's about license compliance.

502
00:18:59,120 --> 00:19:00,400
And it never was.

503
00:19:00,400 --> 00:19:02,800
It was just a maintenance thing.

504
00:19:02,800 --> 00:19:03,880
It was tidying up.

505
00:19:03,880 --> 00:19:04,800
Right.

506
00:19:04,800 --> 00:19:07,200
And I think importantly here, where

507
00:19:07,200 --> 00:19:09,940
it gets into comments about performance

508
00:19:09,940 --> 00:19:13,200
and the state of maintenance, it really goes off the rails.

509
00:19:13,200 --> 00:19:14,740
Because first of all, the performance

510
00:19:14,740 --> 00:19:16,800
is an extremely complicated story,

511
00:19:16,800 --> 00:19:19,280
but I'm not sure where he got the maintenance thing

512
00:19:19,280 --> 00:19:19,840
from at all.

513
00:19:19,840 --> 00:19:22,420
He may have maybe found an old repo or something,

514
00:19:22,420 --> 00:19:25,680
but it seems like the ZFS on Linux project

515
00:19:25,680 --> 00:19:27,580
is firing at all cylinders these days.

516
00:19:27,580 --> 00:19:32,900
Well, so since then, he's kind of, and I got to be honest,

517
00:19:32,900 --> 00:19:35,520
I mean, I don't know somebody the stature of Linus Torvalds

518
00:19:35,520 --> 00:19:37,480
really cares what I think, but he really

519
00:19:37,480 --> 00:19:39,600
disappointed me because he replied to that,

520
00:19:39,600 --> 00:19:42,800
to where are you getting this unmaintained thing from.

521
00:19:42,800 --> 00:19:44,960
And he kind of retconned it and said, oh, well,

522
00:19:44,960 --> 00:19:48,040
if I say ZFS, obviously I'm talking about Oracle ZFS,

523
00:19:48,040 --> 00:19:50,160
and maybe it's being maintained.

524
00:19:50,160 --> 00:19:50,760
I don't know.

525
00:19:50,760 --> 00:19:51,680
It's proprietary.

526
00:19:51,680 --> 00:19:52,440
How can I tell?

527
00:19:52,440 --> 00:19:54,480
Do you know if it's maintained?

528
00:19:54,480 --> 00:19:56,240
And it's like, come on, dude.

529
00:19:56,240 --> 00:19:58,860
I mean, how could you have been talking about Oracle ZFS

530
00:19:58,860 --> 00:20:02,000
when you know perfectly well they don't need a Linux kernel

531
00:20:02,000 --> 00:20:06,200
symbol export, and nobody using Linux and asking about ZFS

532
00:20:06,200 --> 00:20:07,760
is asking about Oracle.

533
00:20:07,760 --> 00:20:11,080
They're asking about ZFS on Linux, which is open ZFS,

534
00:20:11,080 --> 00:20:13,160
and the GitHub repo is right there.

535
00:20:13,160 --> 00:20:16,920
There were 5,000 code additions in the last month

536
00:20:16,920 --> 00:20:18,240
at the time I wrote the article.

537
00:20:18,240 --> 00:20:22,800
Yeah, and a great things, if you just look at over 2019,

538
00:20:22,800 --> 00:20:25,640
landed in ZFS on Linux that really brought up

539
00:20:25,640 --> 00:20:28,880
a parity with the BSDs and brought fantastic features,

540
00:20:28,880 --> 00:20:31,640
some of which can lead to pretty decent performance,

541
00:20:31,640 --> 00:20:34,240
like some great compression features.

542
00:20:34,240 --> 00:20:36,600
When you look at ZFS itself, there

543
00:20:36,600 --> 00:20:39,800
is this tendency to just write it off as a buzzword.

544
00:20:39,800 --> 00:20:41,920
There's things I can build around it,

545
00:20:41,920 --> 00:20:44,720
things like Red Hat Project Stratus, which

546
00:20:44,720 --> 00:20:47,160
looks like a pretty nice collection of tools

547
00:20:47,160 --> 00:20:49,200
with an API that could eventually

548
00:20:49,200 --> 00:20:52,160
lead to some real serious alternatives.

549
00:20:52,160 --> 00:20:57,080
Or we have our setup in the studio where our OS

550
00:20:57,080 --> 00:21:00,800
and our boot drives and things of that type of nature

551
00:21:00,800 --> 00:21:04,440
are ButterFS, and then our data storage is ZFS.

552
00:21:04,440 --> 00:21:07,160
And we didn't have to pick a camp.

553
00:21:07,160 --> 00:21:09,520
We use both for what they're great for.

554
00:21:09,520 --> 00:21:13,360
But when it comes specifically to this kind of writing ZFS

555
00:21:13,360 --> 00:21:17,160
and reducing it down to one variable, oh, it's a buzzword,

556
00:21:17,160 --> 00:21:18,280
where is that coming from?

557
00:21:18,280 --> 00:21:21,960
Because it's clearly used in production quite successfully.

558
00:21:21,960 --> 00:21:25,200
But the only thing I can tell, I don't

559
00:21:25,200 --> 00:21:28,400
know what kind of private conversations

560
00:21:28,400 --> 00:21:31,720
senior developers like Greg KH and Linus might have,

561
00:21:31,720 --> 00:21:36,560
but Greg has been pretty voluble about his disdain for ZFS

562
00:21:36,560 --> 00:21:40,920
and what appears to be some anger about Sun having

563
00:21:40,920 --> 00:21:43,880
released it under the cuddle, at the very least

564
00:21:43,880 --> 00:21:46,040
with the knowledge that it probably would not

565
00:21:46,040 --> 00:21:49,280
be license compatible with the GPL.

566
00:21:49,280 --> 00:21:51,720
And he's made some pretty salty comments

567
00:21:51,720 --> 00:21:53,960
about if they didn't want to work with me,

568
00:21:53,960 --> 00:21:56,240
then why should I work with them?

569
00:21:56,240 --> 00:21:59,400
The thing about that is, I mean, now we're

570
00:21:59,400 --> 00:22:00,640
not talking about Oracle.

571
00:22:00,640 --> 00:22:01,840
We're talking about Sun.

572
00:22:01,840 --> 00:22:03,440
But to the best of my knowledge, we're

573
00:22:03,440 --> 00:22:05,200
not talking about the actual developers.

574
00:22:05,200 --> 00:22:07,320
Now, we do have some original Sun developers

575
00:22:07,320 --> 00:22:10,800
that are very senior and very active in OpenZFS.

576
00:22:10,800 --> 00:22:13,800
They basically, when Oracle bought Sun to begin with,

577
00:22:13,800 --> 00:22:15,960
ZFS developers pretty much all quit and immediately

578
00:22:15,960 --> 00:22:19,240
began the OpenZFS project, Matthew Ahrens

579
00:22:19,240 --> 00:22:21,140
being one of those.

580
00:22:21,140 --> 00:22:25,360
I haven't asked Matt about this, but I

581
00:22:25,360 --> 00:22:28,680
find it hard to believe that the actual developers, some of whom

582
00:22:28,680 --> 00:22:32,000
I know, were really all that keen on, hey,

583
00:22:32,000 --> 00:22:35,200
let's make Linux not be able to use our crap.

584
00:22:35,200 --> 00:22:38,060
That just reeks to me of Scott McNeely, who

585
00:22:38,060 --> 00:22:40,520
he was the CEO of Sun.

586
00:22:40,520 --> 00:22:44,600
And he absolutely on the record hated the crap out of Linux

587
00:22:44,600 --> 00:22:46,840
and didn't want any of his stuff ever working on it.

588
00:22:46,840 --> 00:22:48,160
Well, it competed with Solaris.

589
00:22:48,160 --> 00:22:49,960
Yeah, well, I had the great displeasure

590
00:22:49,960 --> 00:22:53,920
of attending a Scott McNeely keynote at an open source

591
00:22:53,920 --> 00:22:58,220
conference a couple of years after Sun was bought by Oracle.

592
00:22:58,220 --> 00:23:01,240
And he went on for nearly twice as a lot of time,

593
00:23:01,240 --> 00:23:02,920
would not get off the stage, and would not

594
00:23:02,920 --> 00:23:05,960
shut up about how the entire open source world was screwed

595
00:23:05,960 --> 00:23:07,680
now if they didn't have their hero Scott

596
00:23:07,680 --> 00:23:09,020
McNeely to protect them.

597
00:23:09,020 --> 00:23:11,040
And all they had was crappy old Linux.

598
00:23:11,040 --> 00:23:13,520
Right, and around that time, SCO was going to come and get us,

599
00:23:13,520 --> 00:23:14,020
too.

600
00:23:14,020 --> 00:23:16,760
So they were really feeling empowered at that time.

601
00:23:16,760 --> 00:23:18,880
But I mean, that's the guy that didn't

602
00:23:18,880 --> 00:23:22,240
want to cooperate with the Linux kernel maintainers

603
00:23:22,240 --> 00:23:25,760
or anybody using the GPL who had the giant partisan agenda,

604
00:23:25,760 --> 00:23:29,400
not the Open ZFS project, who is neither Sun's

605
00:23:29,400 --> 00:23:32,000
corporate leadership nor has anything to do with Oracle.

606
00:23:32,000 --> 00:23:32,880
That's a great point.

607
00:23:32,880 --> 00:23:35,180
Yeah, I feel like it's pretty crappy to still be holding

608
00:23:35,180 --> 00:23:37,780
that grudge and snarling about they

609
00:23:37,780 --> 00:23:39,000
don't want to work with us.

610
00:23:39,000 --> 00:23:40,960
Yes, times have changed.

611
00:23:40,960 --> 00:23:42,080
The crew has changed.

612
00:23:42,080 --> 00:23:44,100
The project location has changed.

613
00:23:44,100 --> 00:23:46,980
And it's a really great project.

614
00:23:46,980 --> 00:23:50,480
I wonder, too, though, can we just from,

615
00:23:50,480 --> 00:23:53,120
because you address this, and I think it's worth touching on.

616
00:23:53,120 --> 00:23:54,840
Can we talk about performance for a second?

617
00:23:54,840 --> 00:23:57,320
Because there is some truth to the fact

618
00:23:57,320 --> 00:24:00,320
that if you put ZFS up against an extended 4 disk

619
00:24:00,320 --> 00:24:06,320
or a single XFS SSD, ZFS might be a little bit slower.

620
00:24:06,320 --> 00:24:09,400
And so that performance thing is a bit of a touchy subject.

621
00:24:09,400 --> 00:24:13,720
It is, but it's also an unusually complex subject.

622
00:24:13,720 --> 00:24:20,240
If you just set up ZFS default and you run benchmarks

623
00:24:20,240 --> 00:24:24,220
and compare it against EXT4 defaults or XFS defaults,

624
00:24:24,220 --> 00:24:28,120
it will probably be slightly slower.

625
00:24:28,120 --> 00:24:30,000
It's usually not going to be slow enough

626
00:24:30,000 --> 00:24:31,840
to really notice unless you get yourself

627
00:24:31,840 --> 00:24:37,200
wedged into a particularly pathological corner case involving

628
00:24:37,200 --> 00:24:41,800
really, really heavily loaded SQL binaries stored on it

629
00:24:41,800 --> 00:24:42,400
or something.

630
00:24:42,400 --> 00:24:43,080
Sure.

631
00:24:43,080 --> 00:24:45,880
But it will probably be slightly slower.

632
00:24:45,880 --> 00:24:47,600
But here's the thing about that.

633
00:24:47,600 --> 00:24:50,320
One, we're just talking about the defaults.

634
00:24:50,320 --> 00:24:52,680
And I think it's reasonable to say

635
00:24:52,680 --> 00:24:54,580
that most of the people that are using ZFS,

636
00:24:54,580 --> 00:24:57,120
they want to dig a little deeper than that.

637
00:24:57,120 --> 00:24:59,200
Even if they don't on day one, they eventually

638
00:24:59,200 --> 00:25:03,000
get into looking at data sets and record sizes and all

639
00:25:03,000 --> 00:25:06,060
this tuning stuff that can make an enormous difference.

640
00:25:06,060 --> 00:25:08,280
And the other thing about that is there

641
00:25:08,280 --> 00:25:12,000
is a very, very long history of benchmarking storage.

642
00:25:12,000 --> 00:25:14,680
And one of the first rules of benchmarking storage

643
00:25:14,680 --> 00:25:17,960
is you do absolutely everything possible to eliminate

644
00:25:17,960 --> 00:25:20,280
any impact from file system cache.

645
00:25:20,280 --> 00:25:22,720
So in the real world, you're doing everything

646
00:25:22,720 --> 00:25:25,840
you possibly can to make sure as few reads as possible ever

647
00:25:25,840 --> 00:25:28,640
hit the metal because you want to conserve those IOPS.

648
00:25:28,640 --> 00:25:31,120
And you want to service those requests literally

649
00:25:31,120 --> 00:25:34,000
like two, three orders of magnitude faster from RAM

650
00:25:34,000 --> 00:25:35,160
in your cache, right?

651
00:25:35,160 --> 00:25:37,700
So you want to eliminate that when you're benchmarking disks

652
00:25:37,700 --> 00:25:39,960
or even usually when you're benchmarking file systems

653
00:25:39,960 --> 00:25:43,720
because the assumption is cache will just completely wreck

654
00:25:43,720 --> 00:25:45,960
the actual numbers that you care about because it makes

655
00:25:45,960 --> 00:25:47,280
such an enormous impact.

656
00:25:47,280 --> 00:25:50,660
And also, the assumption here is that all file systems

657
00:25:50,660 --> 00:25:53,200
will cache the same way and to the same degree

658
00:25:53,200 --> 00:25:54,120
of effectiveness.

659
00:25:54,120 --> 00:25:57,440
Right, using the same probably kernel level algorithm for it.

660
00:25:57,440 --> 00:26:00,600
Well, so one, up until very recently,

661
00:26:00,600 --> 00:26:02,400
they've all used the same algorithm, which

662
00:26:02,400 --> 00:26:04,240
is least recently used.

663
00:26:04,240 --> 00:26:08,440
It's just slightly smarter than FIFO first in, first out.

664
00:26:08,440 --> 00:26:12,760
An LRU cache, the way that works is as you read in a block,

665
00:26:12,760 --> 00:26:14,660
it goes into cache.

666
00:26:14,660 --> 00:26:17,600
If the cache is full, then the block

667
00:26:17,600 --> 00:26:19,620
that has been sitting in the cache for the longest

668
00:26:19,620 --> 00:26:23,080
without being read gets evicted to make room for the new one.

669
00:26:23,080 --> 00:26:25,100
Now, every time you read a block from cache,

670
00:26:25,100 --> 00:26:26,680
it gets jumped up to the top of the list

671
00:26:26,680 --> 00:26:27,840
again like it's brand new.

672
00:26:27,840 --> 00:26:29,800
So it is at least that smart.

673
00:26:29,800 --> 00:26:33,560
But an LRU cache will very happily

674
00:26:33,560 --> 00:26:36,360
evict every single block in it if you just

675
00:26:36,360 --> 00:26:39,360
read a stream of data off the disk larger

676
00:26:39,360 --> 00:26:41,200
than the size of the cache.

677
00:26:41,200 --> 00:26:45,880
Now, every file system on every operating system I'm aware of,

678
00:26:45,880 --> 00:26:50,800
other than ZFS, they share an operating system kernel level

679
00:26:50,800 --> 00:26:52,280
cache facility.

680
00:26:52,280 --> 00:26:56,320
On Linux, ext4, XFS, Butter, whatever you're using,

681
00:26:56,320 --> 00:26:58,680
it's not just, they're not just all using the LRU cache.

682
00:26:58,680 --> 00:27:02,120
They're all specifically using the Linux kernel page cache,

683
00:27:02,120 --> 00:27:03,320
which is an LRU.

684
00:27:03,320 --> 00:27:06,480
Now, over on the Windows side, NTFS, what have you,

685
00:27:06,480 --> 00:27:09,600
it's using a page cache, which is LRU,

686
00:27:09,600 --> 00:27:12,320
which is built into the Windows kernel.

687
00:27:12,320 --> 00:27:14,740
But now when you look at ZFS, ZFS not only

688
00:27:14,740 --> 00:27:17,360
doesn't use the operating system cache facility,

689
00:27:17,360 --> 00:27:19,220
it also doesn't use an LRU cache.

690
00:27:19,220 --> 00:27:20,840
It uses something called the ARC.

691
00:27:20,840 --> 00:27:23,360
ARC stands for adaptive replacement cache.

692
00:27:23,360 --> 00:27:26,000
And I like to explain it in simplistic terms

693
00:27:26,000 --> 00:27:28,160
as you can think of it as a weighted cache.

694
00:27:28,160 --> 00:27:30,560
So basically, every time you read a block,

695
00:27:30,560 --> 00:27:33,240
it not only stays in cache, it gets a little heavier,

696
00:27:33,240 --> 00:27:35,120
and it's harder to push it out.

697
00:27:35,120 --> 00:27:37,520
So if you've got a block that has been in cache

698
00:27:37,520 --> 00:27:41,460
and has been read from cache like 500 times,

699
00:27:41,460 --> 00:27:42,560
but maybe it's been five minutes

700
00:27:42,560 --> 00:27:44,040
since the last time it was read,

701
00:27:44,040 --> 00:27:46,640
it's gonna be more difficult to evict that block

702
00:27:46,640 --> 00:27:50,080
just because you read in some random thing off of disk,

703
00:27:50,080 --> 00:27:52,360
because even if it hasn't been active for a few minutes,

704
00:27:52,360 --> 00:27:55,120
the cache knows this block gets hit a lot.

705
00:27:55,120 --> 00:27:56,440
It's really hot.

706
00:27:56,440 --> 00:27:58,080
And it's even slightly smarter than that.

707
00:27:58,080 --> 00:28:00,960
Let's say that a block never quite gets all the way

708
00:28:00,960 --> 00:28:03,080
to the top of the cache, which are really hard to push out,

709
00:28:03,080 --> 00:28:05,240
but it keeps getting read in and keeps getting evicted

710
00:28:05,240 --> 00:28:07,200
and keeps getting read back in again.

711
00:28:07,200 --> 00:28:09,040
Well, the ARC also tracks blocks

712
00:28:09,040 --> 00:28:11,160
that have been recently evicted from cache.

713
00:28:11,160 --> 00:28:13,120
So if you have a frequent flyer like that

714
00:28:13,120 --> 00:28:15,400
that keeps getting evicted and bouncing back in,

715
00:28:15,400 --> 00:28:17,880
the ARC notices that and starts being more reluctant

716
00:28:17,880 --> 00:28:18,820
to evict it, because it's like,

717
00:28:18,820 --> 00:28:21,240
I'm just gonna see this thing again pretty soon.

718
00:28:21,240 --> 00:28:23,360
So the data impact here is that you have

719
00:28:23,360 --> 00:28:26,880
a much higher hit rate in most real world workloads

720
00:28:26,880 --> 00:28:29,120
from the ARC than you would from the LRU cache.

721
00:28:29,120 --> 00:28:30,340
And as we discussed before,

722
00:28:30,340 --> 00:28:33,000
the impact of cache is enormous.

723
00:28:33,000 --> 00:28:36,200
Every time you serve a read request from cache,

724
00:28:36,200 --> 00:28:39,480
you can serve IOPS and you also service

725
00:28:39,480 --> 00:28:42,040
that individual request much, much, much faster.

726
00:28:42,040 --> 00:28:44,320
Well, let me ask you this, am I right in saying then

727
00:28:44,320 --> 00:28:46,820
it's also even a little trickier with the ZFS ARC

728
00:28:46,820 --> 00:28:49,460
because it sounds like the adaptiveness of it

729
00:28:49,460 --> 00:28:50,800
takes it a little bit to figure out,

730
00:28:50,800 --> 00:28:53,520
oh, that is something they actually are using frequently.

731
00:28:53,520 --> 00:28:54,540
I will add it.

732
00:28:54,540 --> 00:28:57,080
Would that might not show up in a benchmark immediately?

733
00:28:57,080 --> 00:28:58,000
I'm not sure.

734
00:28:58,000 --> 00:28:58,840
You're correct.

735
00:28:58,840 --> 00:29:02,440
It's very difficult to trigger in a synthetic benchmark.

736
00:29:02,440 --> 00:29:04,620
Usually the gold standard for storage benchmarking

737
00:29:04,620 --> 00:29:06,320
is a tool called FIO.

738
00:29:06,320 --> 00:29:08,400
You can use FIO to model workloads.

739
00:29:08,400 --> 00:29:12,200
You can say, I want read, I want write, I want random,

740
00:29:12,200 --> 00:29:14,320
I want sequential, I want this block size,

741
00:29:14,320 --> 00:29:16,040
I want this many processes.

742
00:29:16,040 --> 00:29:18,980
You can mix it all together however you want.

743
00:29:18,980 --> 00:29:21,960
And if you're bypassing cache,

744
00:29:21,960 --> 00:29:24,280
it's a really, really amazing tool

745
00:29:24,280 --> 00:29:26,720
for modeling your exact type of workload

746
00:29:26,720 --> 00:29:28,840
and getting really realistic answers.

747
00:29:28,840 --> 00:29:30,840
But once you start looking at something

748
00:29:30,840 --> 00:29:33,900
that is as smart and adaptive as the ARC,

749
00:29:33,900 --> 00:29:37,200
it gets really difficult to synthetically benchmark it

750
00:29:37,200 --> 00:29:41,360
because the very synthesis tends to be way more random

751
00:29:41,360 --> 00:29:42,960
than an actual workload.

752
00:29:42,960 --> 00:29:45,320
So it doesn't really do a great job

753
00:29:45,320 --> 00:29:47,920
of modeling the actual impact the ARC has

754
00:29:47,920 --> 00:29:49,560
on you really doing real things

755
00:29:49,560 --> 00:29:52,680
that really do read the same data over and over again.

756
00:29:52,680 --> 00:29:53,760
Right.

757
00:29:53,760 --> 00:29:56,240
Okay, and then there's sort of the big picture question.

758
00:29:56,240 --> 00:29:59,680
Do you think there was some harm done by these statements?

759
00:29:59,680 --> 00:30:01,680
I, you know, you notice it in the comments for sure.

760
00:30:01,680 --> 00:30:03,680
Certain people will feel empowered now.

761
00:30:04,680 --> 00:30:06,560
Is there long-term harm done here

762
00:30:06,560 --> 00:30:09,400
because of just the scope of Linus's reach?

763
00:30:09,400 --> 00:30:10,960
That's kind of a complicated question to answer.

764
00:30:10,960 --> 00:30:13,640
The first answer is absolutely,

765
00:30:13,640 --> 00:30:15,720
there's no question about it.

766
00:30:15,720 --> 00:30:19,200
When you speak from a pulpit as tall with a mic

767
00:30:19,200 --> 00:30:22,960
as heavily amplified as, you know, Linus Torvalds does,

768
00:30:22,960 --> 00:30:25,840
when you take a crap on something, people notice.

769
00:30:25,840 --> 00:30:28,080
Positive comments from Linus, for example,

770
00:30:28,080 --> 00:30:30,680
got me, you know, that's what finally tipped me over

771
00:30:30,680 --> 00:30:32,160
to actually look at WireGuard,

772
00:30:32,160 --> 00:30:34,000
which was already on my radar

773
00:30:34,000 --> 00:30:35,640
as a potentially cool VPN thing.

774
00:30:35,640 --> 00:30:38,840
But I can't tell you how many potentially cool VPN things

775
00:30:38,840 --> 00:30:41,680
that I've been like, I should look at that, and never did.

776
00:30:41,680 --> 00:30:44,320
But Linus says, let me just say I love this code,

777
00:30:44,320 --> 00:30:47,440
and that day when I see him say that, I'm installing it.

778
00:30:47,440 --> 00:30:49,560
Yeah, that caught Wes and my attention the same.

779
00:30:49,560 --> 00:30:51,000
Yeah, now with that said,

780
00:30:51,000 --> 00:30:53,400
I mean, Linus taking a dump on something

781
00:30:53,400 --> 00:30:54,760
is kind of less newsworthy

782
00:30:54,760 --> 00:30:56,800
than him actually praising something.

783
00:30:56,800 --> 00:30:58,920
So I don't know that it has quite the same impact,

784
00:30:58,920 --> 00:31:01,120
but people absolutely do notice.

785
00:31:01,120 --> 00:31:05,280
Also, honestly, you know, I feel like podcasts like this one

786
00:31:05,280 --> 00:31:07,280
and, you know, articles like the one I wrote

787
00:31:07,280 --> 00:31:10,640
immediately responding in a thoughtful, detailed way,

788
00:31:10,640 --> 00:31:13,040
I do think they nerf a lot of that damage.

789
00:31:13,040 --> 00:31:15,480
So it was a negative impact.

790
00:31:15,480 --> 00:31:17,080
I don't think it's gonna be the end of the world

791
00:31:17,080 --> 00:31:19,560
because the community responded and responded pretty well.

792
00:31:19,560 --> 00:31:22,040
And it sends a pretty clear signal

793
00:31:22,040 --> 00:31:23,840
that there is demand here.

794
00:31:23,840 --> 00:31:26,560
You know, Wes and I were talking about this,

795
00:31:26,560 --> 00:31:28,640
and it could be, in part,

796
00:31:28,640 --> 00:31:33,640
if you look at Linux in production today in enterprises,

797
00:31:33,720 --> 00:31:36,800
true, some of them, and some very well-known ones

798
00:31:36,800 --> 00:31:39,920
are indeed using ZFS,

799
00:31:39,920 --> 00:31:42,360
but probably at scale, most traditional shops

800
00:31:42,360 --> 00:31:44,920
that have invested for, you know, maybe a few years ago,

801
00:31:44,920 --> 00:31:47,120
they have a NAS or a SAN.

802
00:31:47,120 --> 00:31:51,920
It's probably doing some sort of vendor magic hardware raid.

803
00:31:51,920 --> 00:31:55,360
Could be that they've iSCSI'd out the disks

804
00:31:55,360 --> 00:31:57,000
and they're just connecting them directly

805
00:31:57,000 --> 00:31:58,840
to the different machines and handling them that way.

806
00:31:58,840 --> 00:32:01,160
It could be they're using who knows what file system

807
00:32:01,160 --> 00:32:03,920
on the backend, but it's likely not ZFS,

808
00:32:03,920 --> 00:32:07,640
at least not if you bought something in the last five years.

809
00:32:07,640 --> 00:32:11,000
So I wonder if part of this is just simply

810
00:32:11,000 --> 00:32:13,280
at a practical user base level,

811
00:32:13,280 --> 00:32:14,880
there's a lot of enthusiastic people

812
00:32:14,880 --> 00:32:17,120
that are rolling custom solutions around ZFS

813
00:32:17,120 --> 00:32:20,240
that work really well, but it's not at a scale

814
00:32:20,240 --> 00:32:23,680
that like your SANs and your NASs are.

815
00:32:23,680 --> 00:32:25,400
I don't know that I would necessarily

816
00:32:25,400 --> 00:32:26,640
entirely agree with that.

817
00:32:26,640 --> 00:32:28,080
I think there's a kernel of truth to it,

818
00:32:28,080 --> 00:32:31,360
but I think you're probably discounting the popularity

819
00:32:31,360 --> 00:32:34,680
of, you know, like the IX systems, you know,

820
00:32:34,680 --> 00:32:37,320
that makes storage appliance.

821
00:32:37,320 --> 00:32:38,840
I don't want to use the word storage appliance

822
00:32:38,840 --> 00:32:40,920
because that's what Oracle calls their ZFS box,

823
00:32:40,920 --> 00:32:44,240
but they make free NAS mini and they make true NAS

824
00:32:44,240 --> 00:32:46,600
as their, you know, true enterprise product.

825
00:32:46,600 --> 00:32:49,480
And there are a lot of those things, you know,

826
00:32:49,480 --> 00:32:51,520
in the wild in businesses.

827
00:32:51,520 --> 00:32:54,360
And there are a lot of, you know, just like free NAS

828
00:32:54,360 --> 00:32:56,880
installations, you know, on individual boxes.

829
00:32:56,880 --> 00:33:00,200
It's a pretty popular backend with like an iSCSI

830
00:33:00,200 --> 00:33:03,600
or NFS transport, you know, to people's VMware

831
00:33:03,600 --> 00:33:07,480
or KVM or whatever, you know, virtualization systems.

832
00:33:07,480 --> 00:33:10,200
And then you've also got some people going hyper virtualized

833
00:33:10,200 --> 00:33:13,160
like I do with the ZFS storage part

834
00:33:13,160 --> 00:33:15,880
and the virtualization part all inside the same chassis.

835
00:33:15,880 --> 00:33:18,320
Now I think that's considerably less common

836
00:33:18,320 --> 00:33:19,920
because people are just so used to that idea

837
00:33:19,920 --> 00:33:22,280
to separate the storage silo from the vert silo.

838
00:33:22,280 --> 00:33:24,880
Right, it's essentially how we have it set up

839
00:33:24,880 --> 00:33:28,080
in the studio those we have with Docker

840
00:33:28,080 --> 00:33:31,200
instead of virtualization, but it's a similar setup for us.

841
00:33:31,200 --> 00:33:33,920
And it, I think, you know, when you look at things

842
00:33:33,920 --> 00:33:36,440
like ZFS send and compression that works really fast

843
00:33:36,440 --> 00:33:41,120
and really well and just the overall like functionality,

844
00:33:41,120 --> 00:33:42,040
it's a good option.

845
00:33:42,040 --> 00:33:43,760
There's a lot of good options, but it's certainly a good one.

846
00:33:43,760 --> 00:33:46,480
And I don't know if it's ever going to be possible.

847
00:33:47,680 --> 00:33:48,800
And maybe this is my last question

848
00:33:48,800 --> 00:33:50,120
because I'm curious to know your opinion on this

849
00:33:50,120 --> 00:33:51,120
because obviously it's just opinion,

850
00:33:51,120 --> 00:33:52,880
but I don't know if it's ever going to be possible

851
00:33:52,880 --> 00:33:54,640
for it to be officially mainlined.

852
00:33:54,640 --> 00:33:56,040
I think it's possible.

853
00:33:56,040 --> 00:33:57,840
I certainly wouldn't bet anything

854
00:33:57,840 --> 00:33:59,640
that you can't afford to lose on it.

855
00:33:59,640 --> 00:34:02,280
You know, the current situation is that

856
00:34:02,280 --> 00:34:05,640
there's just not really anybody with a good reason

857
00:34:05,640 --> 00:34:07,680
to try to bring an enforcement suit, you know,

858
00:34:07,680 --> 00:34:10,160
against mixing the GPL in the cuddle.

859
00:34:10,160 --> 00:34:13,200
That was my opinion before Canonical went all, you know,

860
00:34:13,200 --> 00:34:17,160
yellow swag in 2016 and just started shipping ZFS headers,

861
00:34:17,160 --> 00:34:19,600
you know, in their mainline kernels.

862
00:34:19,600 --> 00:34:20,640
I don't know if you knew that by the way,

863
00:34:20,640 --> 00:34:23,600
but Canonical doesn't just have ZFS in the repos.

864
00:34:23,600 --> 00:34:26,880
If you're using an Ubuntu machine

865
00:34:26,880 --> 00:34:28,720
with a kernel from Canonical,

866
00:34:28,720 --> 00:34:31,240
there are a cuddle licensed headers built into that kernel,

867
00:34:31,240 --> 00:34:33,640
whether you installed ZFS or not.

868
00:34:33,640 --> 00:34:36,080
But yeah, even before Canonical just went all yellow

869
00:34:36,080 --> 00:34:38,440
and decided to do it, my position was, you know,

870
00:34:38,440 --> 00:34:41,400
I don't see where anybody would want

871
00:34:41,400 --> 00:34:42,480
to bring a suit like that

872
00:34:42,480 --> 00:34:46,000
because there's literally no good outcome out of it.

873
00:34:46,000 --> 00:34:48,120
It feels like the most likely honestly

874
00:34:48,120 --> 00:34:50,720
would be a GPL partisan, you know,

875
00:34:50,720 --> 00:34:52,680
folks who are really, really invested in the GPL

876
00:34:52,680 --> 00:34:55,660
get really, really pissed about this particular topic,

877
00:34:55,660 --> 00:34:57,100
but they don't want to bring that suit

878
00:34:57,100 --> 00:34:58,940
because it's a risky ass suit.

879
00:34:58,940 --> 00:35:01,400
And if you bring a GPL enforcement lawsuit

880
00:35:01,400 --> 00:35:03,240
against somebody bundling cuddle

881
00:35:03,240 --> 00:35:05,860
and it doesn't go your way in court,

882
00:35:05,860 --> 00:35:07,560
well now you've weakened the GPL

883
00:35:07,560 --> 00:35:09,000
and you've weakened enforcement efforts.

884
00:35:09,000 --> 00:35:10,620
And that's certainly not anything

885
00:35:10,620 --> 00:35:13,040
that somebody who's big into the GPL wants.

886
00:35:13,040 --> 00:35:14,260
I don't want that.

887
00:35:14,260 --> 00:35:17,420
On the other hand, if you win,

888
00:35:17,420 --> 00:35:18,940
you've also set a precedent

889
00:35:18,940 --> 00:35:21,420
that's really going to put Linux very far back

890
00:35:21,420 --> 00:35:24,260
because if you win a cuddle enforcement lawsuit

891
00:35:24,260 --> 00:35:25,940
that says you can't have a cuddle kernel module,

892
00:35:25,940 --> 00:35:27,960
well you can't have Nvidia drivers either.

893
00:35:27,960 --> 00:35:30,580
Those are freaking proprietary.

894
00:35:30,580 --> 00:35:32,780
Now you can't have Nvidia drivers.

895
00:35:32,780 --> 00:35:35,460
You can't have, you know, hardware drivers

896
00:35:35,460 --> 00:35:39,160
for industrial stuff that requires dongles or whatever.

897
00:35:39,160 --> 00:35:42,020
You can't do any of all that proprietary.

898
00:35:42,020 --> 00:35:44,380
You have just made Linux unusable

899
00:35:44,380 --> 00:35:48,020
for an enormous portion of industry that it's in right now.

900
00:35:48,020 --> 00:35:50,860
And now you're just hoping everybody goes BSD

901
00:35:50,860 --> 00:35:53,020
instead of going to freaking Windows or something.

902
00:35:53,020 --> 00:35:54,300
Nobody wants that.

903
00:35:54,300 --> 00:35:57,060
This has got to be the calculation that Canonical's made

904
00:35:57,060 --> 00:35:59,460
is that it's just too destructive of a fight

905
00:35:59,460 --> 00:36:01,160
for either side.

906
00:36:01,160 --> 00:36:02,260
What if they won?

907
00:36:02,260 --> 00:36:03,240
What if they took it to court,

908
00:36:03,240 --> 00:36:05,580
the GPL folks take it to court and they won,

909
00:36:05,580 --> 00:36:07,760
the ZFS user base would get drained too.

910
00:36:07,760 --> 00:36:10,060
I mean, it would be so damaging

911
00:36:10,060 --> 00:36:13,140
to not just things like dongles,

912
00:36:13,140 --> 00:36:15,220
but anything else like that to your point.

913
00:36:15,220 --> 00:36:17,700
But transversely, if they didn't win,

914
00:36:17,700 --> 00:36:20,100
it would be so damaging because you would just see,

915
00:36:20,100 --> 00:36:22,880
you would see folks no longer have the motivation

916
00:36:22,880 --> 00:36:23,820
to mainline their code.

917
00:36:23,820 --> 00:36:25,440
They would just come up with these shim solutions

918
00:36:25,440 --> 00:36:26,280
and call it good.

919
00:36:26,280 --> 00:36:29,220
And the knock-on effects would be felt for years.

920
00:36:29,220 --> 00:36:30,440
Yeah, absolutely.

921
00:36:30,440 --> 00:36:33,820
I don't think that Canonical only had my thoughts there

922
00:36:33,820 --> 00:36:35,580
about, you know, nobody is going to be,

923
00:36:35,580 --> 00:36:37,060
nobody with any sense is going to be motivated

924
00:36:37,060 --> 00:36:38,780
to bring this suit.

925
00:36:38,780 --> 00:36:42,180
I do believe that their lawyers also told them,

926
00:36:42,180 --> 00:36:44,420
you know, look, we think this is fine.

927
00:36:44,420 --> 00:36:47,420
We're totally willing to take this to court.

928
00:36:47,420 --> 00:36:48,920
We think we'll come out on the other side of it.

929
00:36:48,920 --> 00:36:53,180
I know many years before Canonical did that,

930
00:36:53,180 --> 00:36:55,880
I want to say it was like 2012, 2013.

931
00:36:57,020 --> 00:36:59,100
I was very interested in the same question.

932
00:36:59,100 --> 00:37:02,020
I was about a year or two deep into, you know,

933
00:37:02,020 --> 00:37:03,780
my ZFS on Linux journey.

934
00:37:03,780 --> 00:37:05,900
I was several more years deep with ZFS,

935
00:37:05,900 --> 00:37:08,220
you know, on FreeBSD initially.

936
00:37:08,220 --> 00:37:12,340
And I convinced a local intellectual property lawyer

937
00:37:13,340 --> 00:37:17,440
to co-author a presentation with me

938
00:37:17,440 --> 00:37:19,780
for an open source conference.

939
00:37:19,780 --> 00:37:23,020
And basically, you know, I kind of brought him up to speed

940
00:37:23,020 --> 00:37:24,940
on the technical details.

941
00:37:24,940 --> 00:37:27,780
And, you know, he took a look at it from a legal perspective.

942
00:37:27,780 --> 00:37:30,820
And to my surprise, his conclusion was not only, you know,

943
00:37:30,820 --> 00:37:34,580
yes, you can get away with installing ZFS on Linux

944
00:37:34,580 --> 00:37:36,700
and then like selling somebody a system with that installed.

945
00:37:36,700 --> 00:37:38,820
He was like, you know, I'd be perfectly willing

946
00:37:38,820 --> 00:37:41,740
to take a course case defending,

947
00:37:41,740 --> 00:37:44,180
just putting ZFS directly in the kernel.

948
00:37:44,180 --> 00:37:45,340
I think it'd be good to go.

949
00:37:45,340 --> 00:37:47,160
And he had a lot of reasons for that.

950
00:37:47,160 --> 00:37:49,660
Some of which I have seen repeated elsewhere,

951
00:37:49,660 --> 00:37:54,260
some of which were mostly, you know, his take.

952
00:37:54,260 --> 00:37:56,900
But basically what I'm seeing is, you know,

953
00:37:56,900 --> 00:38:01,100
every time somebody who is an actual law professor

954
00:38:01,100 --> 00:38:03,580
or an actual practicing IP lawyer

955
00:38:03,580 --> 00:38:04,820
comments publicly on this,

956
00:38:04,820 --> 00:38:07,100
they seem to all be commenting, nah,

957
00:38:07,100 --> 00:38:08,620
I think we can work this out in court.

958
00:38:08,620 --> 00:38:11,460
That has been my observation as well.

959
00:38:11,460 --> 00:38:14,260
Kernel has a question, aptly named, in the mumble room

960
00:38:14,260 --> 00:38:16,940
about maybe Oracle playing a long game here.

961
00:38:16,940 --> 00:38:19,140
Letting everybody get all ZFSed up

962
00:38:19,140 --> 00:38:20,860
and then coming in with a big old lawsuit.

963
00:38:20,860 --> 00:38:23,500
Yeah, Kernel, is that your thought that that's their scheme?

964
00:38:23,500 --> 00:38:24,660
Yeah, I was thinking, you know,

965
00:38:24,660 --> 00:38:27,300
if they hold the intellectual property rights

966
00:38:27,300 --> 00:38:29,240
and they let everybody integrate it

967
00:38:29,240 --> 00:38:31,140
and then they go after people,

968
00:38:31,140 --> 00:38:34,420
it'd be a lot harder for us to switch over

969
00:38:34,420 --> 00:38:37,780
to, you know, BcashFS or something else.

970
00:38:37,780 --> 00:38:39,620
It would, but again,

971
00:38:39,620 --> 00:38:42,300
that's not really in Oracle's best interests either

972
00:38:42,300 --> 00:38:46,140
because Oracle is a significant Linux player

973
00:38:46,140 --> 00:38:48,200
and it's gonna be really damaging for them

974
00:38:48,200 --> 00:38:49,980
if all of a sudden unbreakable Linux

975
00:38:49,980 --> 00:38:51,900
becomes completely freaking useless

976
00:38:51,900 --> 00:38:54,460
because of a court case that they instigated

977
00:38:54,460 --> 00:38:55,520
that set the precedent

978
00:38:55,520 --> 00:38:58,120
that you can't have proprietary loadable Kernel modules.

979
00:38:58,120 --> 00:38:59,540
And that actually seems like a big deal

980
00:38:59,540 --> 00:39:03,300
to Oracle's customer base too, in particular.

981
00:39:03,300 --> 00:39:06,980
Exactly, I just, I don't see that happening

982
00:39:06,980 --> 00:39:10,020
because again, I think that it would damage them badly

983
00:39:10,020 --> 00:39:11,420
if they won such a suit.

984
00:39:11,420 --> 00:39:12,900
Now, what I used to worry about,

985
00:39:12,900 --> 00:39:14,500
I worried about a poison pill effect

986
00:39:14,500 --> 00:39:18,220
where Oracle, you know, might take a long time

987
00:39:18,220 --> 00:39:20,240
to let interest in open ZFS build up,

988
00:39:20,240 --> 00:39:21,660
wait for it to reach a critical mass,

989
00:39:21,660 --> 00:39:25,780
then say, oh, hey, Oracle ZFS is now GPLed

990
00:39:25,780 --> 00:39:27,800
and can be integrated in the Kernel.

991
00:39:27,800 --> 00:39:30,980
Open ZFS can't, you know, ha ha, LOL.

992
00:39:30,980 --> 00:39:33,140
And now everybody's, you know, scrambling to, you know,

993
00:39:33,140 --> 00:39:35,940
get on board the Oracle thing and yada, yada, yada.

994
00:39:35,940 --> 00:39:37,420
I'm less worried about that now

995
00:39:37,420 --> 00:39:39,500
because what I hadn't understood at the time,

996
00:39:39,500 --> 00:39:42,060
and this is the thing that most people

997
00:39:42,060 --> 00:39:43,820
who get vocal about this topic

998
00:39:43,820 --> 00:39:45,780
seem not to quite understand,

999
00:39:45,780 --> 00:39:49,060
the terms of the cuddle that Solaris ZFS

1000
00:39:49,060 --> 00:39:51,040
was first licensed under,

1001
00:39:51,040 --> 00:39:53,780
they include the ability for the licensed steward

1002
00:39:53,780 --> 00:39:57,120
who is defined as the initial developer of a project.

1003
00:39:57,120 --> 00:39:58,860
In this case, that would be Sun Microsystems,

1004
00:39:58,860 --> 00:40:01,220
which has now been purchased by Oracle.

1005
00:40:01,220 --> 00:40:03,540
So the initial developer is the licensed steward

1006
00:40:03,540 --> 00:40:05,740
and the licensed steward may issue

1007
00:40:05,740 --> 00:40:08,540
a new version of the license.

1008
00:40:08,540 --> 00:40:11,900
If that happens, the covered code can now be used

1009
00:40:11,900 --> 00:40:14,880
under the terms of either cuddle 1.0

1010
00:40:14,880 --> 00:40:18,580
or the new license version introduced by the licensed steward.

1011
00:40:18,580 --> 00:40:21,860
So it's completely possible for Oracle to fix this

1012
00:40:21,860 --> 00:40:24,180
should enough, you know, grassroots irritation,

1013
00:40:24,180 --> 00:40:25,940
you know, get them motivated.

1014
00:40:25,940 --> 00:40:27,320
If they were to make, you know,

1015
00:40:27,320 --> 00:40:30,740
the last Solaris ZFS before they turned it proprietary,

1016
00:40:30,740 --> 00:40:32,580
if they were to add, you know,

1017
00:40:32,580 --> 00:40:35,020
cuddle version 3.0 monkey blue or whatever,

1018
00:40:35,020 --> 00:40:36,860
that just happened to be exactly, you know,

1019
00:40:36,860 --> 00:40:40,140
the MIT license or the simplified BSD license,

1020
00:40:40,140 --> 00:40:41,820
you know, which was weak permissive,

1021
00:40:41,820 --> 00:40:44,980
but also, you know, GPL compatible.

1022
00:40:44,980 --> 00:40:48,380
If they did that, that would automatically cover open ZFS

1023
00:40:48,380 --> 00:40:49,820
as well as, you know,

1024
00:40:49,820 --> 00:40:52,420
well, it wouldn't have to cover Oracle ZFS

1025
00:40:52,420 --> 00:40:55,100
because again, you know, they own that code

1026
00:40:55,100 --> 00:40:56,940
and it doesn't have to apply to what they did

1027
00:40:56,940 --> 00:40:59,020
because as the owner, they can say,

1028
00:40:59,020 --> 00:41:00,700
well, we're no longer offering that.

1029
00:41:00,700 --> 00:41:01,540
But if they did that,

1030
00:41:01,540 --> 00:41:03,700
that would immediately fix everything for the open ZFS folks.

1031
00:41:03,700 --> 00:41:06,380
It would not require everybody

1032
00:41:06,380 --> 00:41:11,060
who's ever contributed open ZFS code or Solaris ZFS code,

1033
00:41:11,060 --> 00:41:13,180
it doesn't require them to okay it

1034
00:41:13,180 --> 00:41:15,820
because again, if you contributed to the project

1035
00:41:15,820 --> 00:41:19,620
to begin with, you had to contribute under cuddle one

1036
00:41:19,620 --> 00:41:21,520
and if there wasn't an exclusion

1037
00:41:21,520 --> 00:41:23,300
for the future license version clause,

1038
00:41:23,300 --> 00:41:26,620
which there was not for Solaris ZFS,

1039
00:41:26,620 --> 00:41:27,860
then that's just, you know,

1040
00:41:27,860 --> 00:41:29,700
you agreed to that when you contributed to begin with.

1041
00:41:29,700 --> 00:41:30,800
So it's good to go.

1042
00:41:30,800 --> 00:41:34,020
You've essentially just laid out a potential path

1043
00:41:34,020 --> 00:41:37,620
to eventual mainlining.

1044
00:41:37,620 --> 00:41:39,980
And I wonder if we talked about the damage

1045
00:41:39,980 --> 00:41:42,580
this could have potentially done these statements by Linus,

1046
00:41:42,580 --> 00:41:45,520
but I wonder if there isn't potentially

1047
00:41:45,520 --> 00:41:47,140
a longer term greater good

1048
00:41:47,140 --> 00:41:50,140
if the top kernel developers play hardball,

1049
00:41:50,140 --> 00:41:54,020
they sort of force Oracle's hand maybe long-term

1050
00:41:54,020 --> 00:41:55,820
to do just what you laid out.

1051
00:41:55,820 --> 00:41:58,340
I don't know that anybody can really force

1052
00:41:58,340 --> 00:41:59,900
Oracle's hand on this.

1053
00:42:01,020 --> 00:42:02,940
I think the potential path to success,

1054
00:42:02,940 --> 00:42:05,700
and this is something I've discussed at some length

1055
00:42:05,700 --> 00:42:09,020
with Brad Kuhn of the Software Freedom Conservancy.

1056
00:42:09,020 --> 00:42:11,900
He and I don't completely see eye to eye on this topic.

1057
00:42:11,900 --> 00:42:15,340
He's a lot more of a traditional hardline GPL partisan

1058
00:42:15,340 --> 00:42:19,960
than I am, whereas I'm a definite GPL fan on my own code.

1059
00:42:19,960 --> 00:42:24,780
I licensed GPL v3, but I'm a little,

1060
00:42:24,780 --> 00:42:27,020
maybe a little bit more pragmatic about it.

1061
00:42:27,020 --> 00:42:31,460
But at any rate, what Brad said,

1062
00:42:31,460 --> 00:42:33,100
and it makes a lot of sense to me,

1063
00:42:33,100 --> 00:42:35,380
is that the way that you maybe potentially

1064
00:42:35,380 --> 00:42:36,620
get Oracle to resolve this,

1065
00:42:36,620 --> 00:42:38,740
it amounts to a grassroots campaign.

1066
00:42:38,740 --> 00:42:41,820
You get enough pressure, enough complaining,

1067
00:42:41,820 --> 00:42:43,900
enough why won't you fix this?

1068
00:42:43,900 --> 00:42:45,420
This is a thing of great good

1069
00:42:45,420 --> 00:42:47,840
you could do at no cost to yourself.

1070
00:42:47,840 --> 00:42:50,500
Maybe eventually you convince them that,

1071
00:42:50,500 --> 00:42:52,580
yeah, all right, we'll do that.

1072
00:42:52,580 --> 00:42:54,020
Sure, it'll make us look like good guys.

1073
00:42:54,020 --> 00:42:55,260
We could use some good PR.

1074
00:42:55,260 --> 00:42:56,500
It's not like we get a lot.

1075
00:42:56,500 --> 00:42:57,540
That's my hope.

1076
00:42:57,540 --> 00:42:59,060
I mean, maybe it's, I think, you know,

1077
00:42:59,060 --> 00:42:59,900
of course there's gonna be people

1078
00:42:59,900 --> 00:43:01,760
that completely disagree if that's even possible,

1079
00:43:01,760 --> 00:43:04,580
but gosh, I sure like to think it could be one day.

1080
00:43:04,580 --> 00:43:05,820
It is possible.

1081
00:43:05,820 --> 00:43:06,860
Like I said, I'm not betting anything

1082
00:43:06,860 --> 00:43:08,420
I can't afford to lose against it,

1083
00:43:08,420 --> 00:43:09,860
but it's absolutely possible.

1084
00:43:09,860 --> 00:43:12,140
To one degree, it's already been done.

1085
00:43:12,140 --> 00:43:15,140
Brad hounded, and other people,

1086
00:43:15,140 --> 00:43:16,980
hounded Oracle relentlessly

1087
00:43:16,980 --> 00:43:19,900
about being the biggest GPL violator on the planet

1088
00:43:19,900 --> 00:43:22,740
by shipping a detrace with Unbreakable Linux's kernel

1089
00:43:22,740 --> 00:43:24,020
for years and years and years.

1090
00:43:24,020 --> 00:43:24,860
Yes, right.

1091
00:43:24,860 --> 00:43:26,240
And they got him to fix it.

1092
00:43:26,240 --> 00:43:28,820
And they fixed it the exact same way

1093
00:43:28,820 --> 00:43:30,760
that we're discussing right now.

1094
00:43:30,760 --> 00:43:33,780
They added, you know, weak permissive license to it,

1095
00:43:33,780 --> 00:43:36,660
and problem solved, you can now ship it with the kernel.

1096
00:43:36,660 --> 00:43:37,500
That's true.

1097
00:43:37,500 --> 00:43:40,180
So this is not theoretical.

1098
00:43:40,180 --> 00:43:42,500
This could be done.

1099
00:43:42,500 --> 00:43:44,180
We know exactly how to do it.

1100
00:43:44,180 --> 00:43:46,100
It's just a question of, you know,

1101
00:43:46,100 --> 00:43:49,300
do we have the collective will to make a great big,

1102
00:43:49,300 --> 00:43:51,380
you know, public stink in the right way

1103
00:43:51,380 --> 00:43:53,840
to convince Oracle that, you know, yes, we should do this.

1104
00:43:53,840 --> 00:43:55,420
I think it's building.

1105
00:43:55,420 --> 00:43:57,540
And the kernel developers not being willing to bend

1106
00:43:57,540 --> 00:44:00,020
also sort of, I think, does hold a line.

1107
00:44:00,020 --> 00:44:02,420
Yeah, and again, I'm not mad at them about that.

1108
00:44:02,420 --> 00:44:05,780
I do not think Linus is wrong for his opinion

1109
00:44:05,780 --> 00:44:09,220
that, you know, we should never integrate Cuddle code,

1110
00:44:09,220 --> 00:44:13,500
you know, into the kernel, which is GPLv2.

1111
00:44:13,500 --> 00:44:14,340
Right.

1112
00:44:14,340 --> 00:44:17,740
And although, again, he shouldn't have brought it up

1113
00:44:17,740 --> 00:44:19,420
the way he did and the context he did.

1114
00:44:19,420 --> 00:44:20,500
And the other thing is, you know,

1115
00:44:20,500 --> 00:44:23,980
his whole thing about I get an official letter from Oracle,

1116
00:44:23,980 --> 00:44:25,980
no, that's stupid.

1117
00:44:25,980 --> 00:44:28,600
You either resolve the license conflict

1118
00:44:28,600 --> 00:44:31,940
because Oracle has, you know, added weak permissive to it,

1119
00:44:31,940 --> 00:44:33,920
or it's resolved, you know, in a court,

1120
00:44:33,920 --> 00:44:36,300
somebody brings in an enforcement lawsuit and loses,

1121
00:44:36,300 --> 00:44:38,500
and now you have a court precedent that states,

1122
00:44:38,500 --> 00:44:42,780
no, it's totally kosher, you know, to mix CDDL and GPL.

1123
00:44:42,780 --> 00:44:45,420
At that point, that's when it becomes okay.

1124
00:44:45,420 --> 00:44:46,260
Yeah.

1125
00:44:46,260 --> 00:44:48,840
But until then, no, Linus is totally right for saying,

1126
00:44:48,840 --> 00:44:51,060
you know, we're not gonna mix Cuddle and GPL code.

1127
00:44:51,060 --> 00:44:51,980
That's fine.

1128
00:44:51,980 --> 00:44:52,820
Right.

1129
00:44:52,820 --> 00:44:54,860
Linus is also completely fine to say,

1130
00:44:54,860 --> 00:44:56,460
we don't break users is about users,

1131
00:44:56,460 --> 00:44:58,820
but we can't extend that guarantee to kernel space.

1132
00:44:58,820 --> 00:44:59,900
You wanna play in kernel space,

1133
00:44:59,900 --> 00:45:01,260
you gotta play like a kernel developer,

1134
00:45:01,260 --> 00:45:02,300
you gotta keep up.

1135
00:45:02,300 --> 00:45:04,300
That's fine.

1136
00:45:04,300 --> 00:45:06,060
Yeah, reasonable.

1137
00:45:06,060 --> 00:45:07,820
And what the expectation has been

1138
00:45:07,820 --> 00:45:09,380
for a long time in that regard.

1139
00:45:09,380 --> 00:45:10,220
I agree.

1140
00:45:10,220 --> 00:45:12,500
Yeah, it was just some of the other comments about it.

1141
00:45:12,500 --> 00:45:13,380
Well, all right.

1142
00:45:13,380 --> 00:45:16,500
I feel like we've got our head around it.

1143
00:45:16,500 --> 00:45:17,340
So thank you.

1144
00:45:17,340 --> 00:45:18,160
Thank you, Jim.

1145
00:45:18,160 --> 00:45:19,980
I appreciate you joining us to break that down.

1146
00:45:19,980 --> 00:45:22,380
And we'll link to the Ars Technica post that Jim wrote

1147
00:45:22,380 --> 00:45:23,580
that goes into even more detail

1148
00:45:23,580 --> 00:45:25,540
and some of the history in the show notes.

1149
00:45:25,540 --> 00:45:28,860
And Wes, before we go, we should probably do some picks.

1150
00:45:28,860 --> 00:45:31,340
We've got a good batch, one that I've already been using

1151
00:45:31,340 --> 00:45:32,740
since I'm on a remote connection

1152
00:45:32,740 --> 00:45:34,580
with a very limited bandwidth.

1153
00:45:34,580 --> 00:45:35,860
So it's time for some picks.

1154
00:45:35,860 --> 00:45:37,540
Ooh, yeah, something you can play with

1155
00:45:37,540 --> 00:45:38,660
while you're stuck at home.

1156
00:45:38,660 --> 00:45:39,500
Yeah.

1157
00:45:39,500 --> 00:45:41,180
Now, who found Bandwich,

1158
00:45:41,180 --> 00:45:43,180
the terminal bandwidth utilization tool

1159
00:45:43,180 --> 00:45:45,820
that was, I think it used to be known as what?

1160
00:45:45,820 --> 00:45:47,380
Yeah, you know, I've seen this floating around.

1161
00:45:47,380 --> 00:45:49,100
It looks to be a somewhat recent,

1162
00:45:49,100 --> 00:45:51,400
it is written in Rust, so I knew you would like it.

1163
00:45:51,400 --> 00:45:54,780
And that means they've got simple single binary releases.

1164
00:45:54,780 --> 00:45:56,060
You can go download from GitHub

1165
00:45:56,060 --> 00:45:57,440
if you just want to give it a casual try

1166
00:45:57,440 --> 00:45:58,540
without installing it.

1167
00:45:58,540 --> 00:46:00,220
Now, can you spell that for me?

1168
00:46:00,220 --> 00:46:04,600
It's band, B-A-N-D-W-H-I-C-H.

1169
00:46:04,600 --> 00:46:06,220
And it's up on GitHub.

1170
00:46:06,220 --> 00:46:07,220
We'll put a link in the show notes.

1171
00:46:07,220 --> 00:46:08,660
It's in the Arch repo.

1172
00:46:08,660 --> 00:46:12,820
And it's in, apparently, it's in void Linux.

1173
00:46:12,820 --> 00:46:15,180
And it's also, if you've got a Mac, it's a brewable.

1174
00:46:15,180 --> 00:46:16,660
Not doing anything unique here,

1175
00:46:16,660 --> 00:46:19,180
but it is a really handy, simple display

1176
00:46:19,180 --> 00:46:21,900
of what connections are going on from which programs.

1177
00:46:21,900 --> 00:46:24,620
Yeah, well, and I was surprised when I ran it

1178
00:46:24,620 --> 00:46:27,700
that a couple of applications I had paused syncing on,

1179
00:46:27,700 --> 00:46:30,460
and those apps were still communicating,

1180
00:46:30,460 --> 00:46:32,140
just like doing heartbeat check-ins or whatnot.

1181
00:46:32,140 --> 00:46:33,740
But right now, every single bit

1182
00:46:33,740 --> 00:46:35,660
when you're broadcasting from the snow counts.

1183
00:46:35,660 --> 00:46:38,960
So I went and closed a browser that was checking in,

1184
00:46:38,960 --> 00:46:40,580
probably bookmark sync or something,

1185
00:46:40,580 --> 00:46:42,060
and I closed those applications.

1186
00:46:42,060 --> 00:46:46,300
And I think it's, I think it's been kind of helpful,

1187
00:46:46,300 --> 00:46:48,460
specifically for today, so it was sort of perfect.

1188
00:46:48,460 --> 00:46:52,820
But a follow-up pick, previously, on Linux Unplugged,

1189
00:46:52,820 --> 00:46:56,860
we reviewed, or picked, STUI,

1190
00:46:56,860 --> 00:46:59,740
a terminal-based CPU stress and monitoring utility.

1191
00:46:59,740 --> 00:47:01,740
Well, it actually worked out pretty great

1192
00:47:01,740 --> 00:47:05,100
because Joe was running it last night on his machine

1193
00:47:05,100 --> 00:47:07,500
and discovered that he had a clogged fan with this thing.

1194
00:47:07,500 --> 00:47:10,000
So just a replug for STUI,

1195
00:47:10,000 --> 00:47:13,520
the terminal-based CPU stress and monitoring utility.

1196
00:47:13,520 --> 00:47:16,540
It's got real pretty graphs right there in the terminal

1197
00:47:16,540 --> 00:47:18,860
and an optional stress feature if you want to actually

1198
00:47:18,860 --> 00:47:20,260
put some load on your system.

1199
00:47:20,260 --> 00:47:21,340
Put it under stress.

1200
00:47:21,340 --> 00:47:22,180
But we're not done yet.

1201
00:47:22,180 --> 00:47:23,540
There's more picks, Wes.

1202
00:47:23,540 --> 00:47:25,100
Oh, yeah, okay.

1203
00:47:25,100 --> 00:47:28,380
So we've talked a little bit about Firefox Send,

1204
00:47:28,380 --> 00:47:31,020
Mozilla's offering to be able to quickly, securely,

1205
00:47:31,020 --> 00:47:32,580
and easily send files.

1206
00:47:32,580 --> 00:47:33,940
That works great in a browser,

1207
00:47:33,940 --> 00:47:37,180
but you know me, I'm mostly in the terminal, Chris.

1208
00:47:37,180 --> 00:47:40,620
So FFSend is also Rust-based,

1209
00:47:40,620 --> 00:47:44,100
but it's a terminal CLI interface to Firefox Send.

1210
00:47:44,100 --> 00:47:44,980
That's awesome.

1211
00:47:44,980 --> 00:47:46,940
Firefox Send from the command line.

1212
00:47:46,940 --> 00:47:50,020
And then last but not least, Age.

1213
00:47:50,020 --> 00:47:51,820
Yes, it's called Age.

1214
00:47:51,820 --> 00:47:54,200
It's a simple and modern secure encryption tool

1215
00:47:54,200 --> 00:47:56,700
with small, explicit keys,

1216
00:47:56,700 --> 00:47:59,260
no configuration you got to worry about,

1217
00:47:59,260 --> 00:48:02,020
and it goes together like a regular old UNIX command.

1218
00:48:02,020 --> 00:48:03,000
You'll grok it immediately.

1219
00:48:03,000 --> 00:48:05,640
We have a link in the show notes for that as well.

1220
00:48:05,640 --> 00:48:07,860
Sometimes you just want to encrypt a single file, right?

1221
00:48:07,860 --> 00:48:09,140
Maybe you've got some archive or you just have

1222
00:48:09,140 --> 00:48:10,940
a single backup or you just want to, you know,

1223
00:48:10,940 --> 00:48:13,480
have something safe and secure for transit.

1224
00:48:13,480 --> 00:48:15,740
But we've all tried to use BGP or GPG,

1225
00:48:15,740 --> 00:48:18,760
and it's just a horrible mess every time.

1226
00:48:18,760 --> 00:48:21,620
This tool uses some nice modern cryptography,

1227
00:48:21,620 --> 00:48:23,780
and it's a lot simpler to interface with.

1228
00:48:23,780 --> 00:48:26,780
You know, I was thinking about doing

1229
00:48:26,780 --> 00:48:28,500
my Docker compose files with this

1230
00:48:28,500 --> 00:48:30,400
and then throw them on a cloud storage provider

1231
00:48:30,400 --> 00:48:33,840
just to have some easy accessible backup that's offsite.

1232
00:48:33,840 --> 00:48:34,680
So there you go.

1233
00:48:34,680 --> 00:48:35,500
There you go.

1234
00:48:35,500 --> 00:48:38,380
A simple, modern encryption tool for the command line, Age.

1235
00:48:38,380 --> 00:48:41,020
And we have more picks than that,

1236
00:48:41,020 --> 00:48:43,240
but we realized we're going to have other podcasts.

1237
00:48:43,240 --> 00:48:44,440
So we should probably save them,

1238
00:48:44,440 --> 00:48:49,340
but we got pick-plorific on our holiday break, Wes.

1239
00:48:49,340 --> 00:48:50,180
Yes, we did.

1240
00:48:50,180 --> 00:48:52,540
Although that doesn't mean we're not still soliciting

1241
00:48:52,540 --> 00:48:55,460
some good picks or any other feedback from the audience.

1242
00:48:55,460 --> 00:48:57,180
Well, I got some feedback for you right now.

1243
00:48:57,180 --> 00:48:58,020
Real time.

1244
00:48:58,020 --> 00:48:59,020
I took a look at Bandwitch.

1245
00:48:59,020 --> 00:48:59,860
It looks pretty cool.

1246
00:48:59,860 --> 00:49:01,600
It's got a really nice looking interface.

1247
00:49:01,600 --> 00:49:02,440
I like that.

1248
00:49:02,440 --> 00:49:05,380
But if you want something that's already in repos

1249
00:49:05,380 --> 00:49:08,100
and it's just an app getaway on Ubuntu or Debian,

1250
00:49:08,980 --> 00:49:12,420
the most direct old school, you know,

1251
00:49:12,420 --> 00:49:15,180
tool that serves the same basic function is called NetHogs.

1252
00:49:15,180 --> 00:49:16,020
Oh, yes.

1253
00:49:16,020 --> 00:49:17,320
NetHogs does the same thing.

1254
00:49:17,320 --> 00:49:18,760
It'll show you all your connections.

1255
00:49:18,760 --> 00:49:21,320
It shows you process ID as well as, you know,

1256
00:49:21,320 --> 00:49:25,100
the termination points on both source and destination.

1257
00:49:25,100 --> 00:49:27,820
And there's also IFTOP.

1258
00:49:27,820 --> 00:49:30,180
IFTOP does not show you process ID.

1259
00:49:30,180 --> 00:49:31,540
So you can't tell if, you know,

1260
00:49:31,540 --> 00:49:34,960
if it's Apache or NGINX or, you know, Firefox

1261
00:49:34,960 --> 00:49:37,140
or what have you on your end that's using the bandwidth,

1262
00:49:37,140 --> 00:49:40,340
but it does show you the source and destination terminations.

1263
00:49:40,340 --> 00:49:43,940
And it's very useful if that's all you're looking for.

1264
00:49:43,940 --> 00:49:45,500
Both of those are in the main repos

1265
00:49:45,500 --> 00:49:47,360
on pretty much everything.

1266
00:49:47,360 --> 00:49:48,200
Good ones.

1267
00:49:48,200 --> 00:49:49,280
Yes, I love NetHogs.

1268
00:49:49,280 --> 00:49:50,120
Thank you.

1269
00:49:50,120 --> 00:49:50,980
Yeah, and like Wes was saying,

1270
00:49:50,980 --> 00:49:55,420
if you have something that's a really handy desktop app,

1271
00:49:55,420 --> 00:49:57,140
command line app, or even a web app

1272
00:49:57,140 --> 00:49:59,020
that makes using Linux a little easier,

1273
00:49:59,020 --> 00:50:00,180
do let us know.

1274
00:50:00,180 --> 00:50:01,340
We've got a year of podcasts.

1275
00:50:01,340 --> 00:50:05,120
We have now taken our totality of breaks for the entire year

1276
00:50:05,120 --> 00:50:08,020
and the Linux Unplugged show never misses a beat.

1277
00:50:08,020 --> 00:50:10,180
So we would love to hear your feedback,

1278
00:50:10,180 --> 00:50:11,580
your picks, all of that.

1279
00:50:11,580 --> 00:50:14,180
LinuxUnplugged.com slash contact.

1280
00:50:14,180 --> 00:50:15,720
Jim, thank you for joining us.

1281
00:50:15,720 --> 00:50:18,140
Really appreciate it and the real time feedback.

1282
00:50:18,140 --> 00:50:21,380
Go catch more of Jim over at TechSnap.Systems.

1283
00:50:21,380 --> 00:50:23,820
He and Wes are cracking over there these days.

1284
00:50:23,820 --> 00:50:25,140
Been absolutely loving it.

1285
00:50:25,140 --> 00:50:26,940
And there's a whole back catalog

1286
00:50:26,940 --> 00:50:29,420
if you haven't been listening, so go grab that.

1287
00:50:29,420 --> 00:50:31,460
Also, join us live next week.

1288
00:50:31,460 --> 00:50:33,780
JBLive.tv on an old Tuesday.

1289
00:50:33,780 --> 00:50:35,260
We do it now at noon Pacific.

1290
00:50:35,260 --> 00:50:36,900
You can get converted to your local time skis

1291
00:50:36,900 --> 00:50:40,460
over at JupiterBroadcasting.com slash calendar.

1292
00:50:40,460 --> 00:50:41,700
And you can find me on Twitter.

1293
00:50:41,700 --> 00:50:42,580
I'm at ChrisLAS.

1294
00:50:42,580 --> 00:50:43,540
What about you, Wes?

1295
00:50:43,540 --> 00:50:45,060
I'm at Wes Payne.

1296
00:50:45,060 --> 00:50:46,180
And what about you, Jim?

1297
00:50:46,180 --> 00:50:47,980
JRSSnet.

1298
00:50:47,980 --> 00:50:49,580
Magic, there you have it.

1299
00:50:49,580 --> 00:50:50,720
That's it.

1300
00:50:50,720 --> 00:50:53,220
That's the podcast from the snowpocalypse.

1301
00:50:53,220 --> 00:50:54,980
Don't forget about that live stream on Friday,

1302
00:50:54,980 --> 00:50:57,860
assuming I can survive and get out there.

1303
00:50:57,860 --> 00:50:59,100
Hopefully my water will unfreeze

1304
00:50:59,100 --> 00:51:00,660
and my vehicles will become unburied.

1305
00:51:00,660 --> 00:51:03,220
You'll be a little leaner by then, but that's okay.

1306
00:51:03,220 --> 00:51:05,420
It's really not that bad.

1307
00:51:05,420 --> 00:51:06,660
I put the video on the YouTube channel.

1308
00:51:06,660 --> 00:51:07,700
I mean, it's really not that bad,

1309
00:51:07,700 --> 00:51:10,060
but it's kind of fun for us.

1310
00:51:10,060 --> 00:51:11,420
And people in Western Washington

1311
00:51:11,420 --> 00:51:12,740
have no idea what to do with it.

1312
00:51:12,740 --> 00:51:14,380
So it kind of, it makes it a whole nother bit.

1313
00:51:14,380 --> 00:51:16,020
It makes it an event.

1314
00:51:16,020 --> 00:51:17,620
I'm really grateful I was just able to get back

1315
00:51:17,620 --> 00:51:18,460
for our first show of the year

1316
00:51:18,460 --> 00:51:19,580
and we're still able to make it work

1317
00:51:19,580 --> 00:51:20,860
via the remote connection.

1318
00:51:20,860 --> 00:51:21,700
You never know.

1319
00:51:21,700 --> 00:51:23,440
And there's always more when you join us live.

1320
00:51:23,440 --> 00:51:24,340
So do that.

1321
00:51:24,340 --> 00:51:26,180
Thanks so much for joining us here on this week.

1322
00:51:26,180 --> 00:51:28,460
And we'll see you right back here next Tuesday.

1323
00:51:28,460 --> 00:51:35,800
If you analyzed this video or found it interesting,

1324
00:51:35,800 --> 00:51:41,580
see what you find in YouTube ICO in the description under.

1325
00:51:41,680 --> 00:51:43,940
Also being good to know,

1326
00:51:43,940 --> 00:51:47,280
you come across many VIINAL manicurists

1327
00:51:47,280 --> 00:51:51,560
and other anonymous people using VR for their smallやrtr supply.

1328
00:51:51,560 --> 00:51:56,880
These are primarily non-descript or non- limite.

1329
00:51:56,880 --> 00:52:10,400
Okay, thank you everybody, JBtitles.com.

1330
00:52:10,400 --> 00:52:14,400
Let's go vote on our title, take care of our final business, and then get this shipped

1331
00:52:14,400 --> 00:52:16,120
over to Joe so he can edit it up.

1332
00:52:16,120 --> 00:52:20,160
Yeah, we really need some voting here to prune through all the great suggestions.

1333
00:52:20,160 --> 00:52:23,720
It's funny how we're running out of sounds for music.

1334
00:52:23,720 --> 00:52:27,640
We're at the point that we're starting to run out of, you know, simple like chord structures

1335
00:52:27,640 --> 00:52:28,640
for music.

1336
00:52:28,640 --> 00:52:32,280
Like you just, I don't think you can really invent one of those anymore.

1337
00:52:32,280 --> 00:52:36,520
That's what people say about movies too, you know, we're running out of new stuff, except

1338
00:52:36,520 --> 00:52:37,800
for podcasts.

1339
00:52:37,800 --> 00:52:39,560
There's always a new podcast out there.

1340
00:52:39,560 --> 00:52:41,040
There's always new podcasts.

1341
00:52:41,040 --> 00:52:45,000
I will say I am very happy that movies are finally starting to get the message that cell

1342
00:52:45,000 --> 00:52:46,480
phones are a thing though.

1343
00:52:46,480 --> 00:52:47,480
Yeah.

1344
00:52:47,480 --> 00:52:48,880
Yeah, that's an entire plot point.

1345
00:52:48,880 --> 00:52:56,320
I mean, when I watch like Die Hard and Cliffhanger and stuff, it's an entire point of the plot

1346
00:52:56,320 --> 00:52:59,680
that they can't communicate because they can't, or they got to make it to a payphone in time

1347
00:52:59,680 --> 00:53:02,960
and in Die Hard 3, they're all about running from phone to phone.

1348
00:53:02,960 --> 00:53:03,960
Yeah.

1349
00:53:03,960 --> 00:53:04,960
What a different world.

1350
00:53:04,960 --> 00:53:06,140
And yet so similar.

1351
00:53:06,140 --> 00:53:11,920
There was a real like run of movies in the 90s where the bad guy was over the phone.

1352
00:53:11,920 --> 00:53:16,400
The bad guy is always over the phone and it's a whole dramatic bit of it.

1353
00:53:16,400 --> 00:53:17,400
It's really funny.

1354
00:53:17,400 --> 00:53:20,760
Sometimes they just fix it by releasing an EMP.

1355
00:53:20,760 --> 00:53:22,240
It's a dark outlook, but yeah.

1356
00:53:22,240 --> 00:53:23,240
You've got the phone.

1357
00:53:23,240 --> 00:53:24,240
Not anymore.

1358
00:53:24,240 --> 00:53:47,880
I think I might maybe just jam the frequency instead, but you do you, buddy.


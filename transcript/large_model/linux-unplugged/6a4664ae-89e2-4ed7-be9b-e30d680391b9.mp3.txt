So something interesting happened today.
A little piece of me dies every time I hear
someone pronounce gif as jif.
And so Jif Peanut Butter has actually teamed up with Giphy
to help settle the debate once and for all
and has created a Jif can or container
for their peanut butter.
And you can actually order that on Amazon now.
This is an attack on me.
This is absolutely an attack on me.
Oh, hey friends, you did it.
You got the right show.
Welcome into the Unplugged program.
My name is Chris.
My name is Wes.
Wes 342, it's gonna blow the doors off.
Might be our best yet.
You know what I love?
SSH.
Me too.
Who doesn't?
Right?
And our guest, Jeremy, will join us in a little bit
to show us some things you never knew SSH could do.
At a scale which blows my mind,
there's things in there that are just gonna maybe change
the way you think about SSH,
but potentially change the way you log into your systems
in the future.
It's a real cool, really, really cool chat we had.
So he'll join us in a little bit,
but we also have our standard affair of community news,
some pics, some followup, and a lot more,
like our virtual lug.
Time appropriate greetings, Mumble Room.
Hello.
Hello.
Hello.
Happy Thanksgiving.
Woo!
Listen to that.
That is a lot of people.
That is a great turnout.
Wimpy, it's great to see you again.
Welcome back to the Unplugged Show.
Hello again.
Hello to everybody.
Normally, when we have a great turnout like this,
I'd read the names out, but there's so many in there.
It's just not possible.
So great to see so many of you.
I really, today is one of those days
where it's great to have friends,
and there is an aspect of lugs
that we don't talk about a lot,
and sometimes it can be a bit of a support group
where it's where everybody knows your name,
and it's just what you need,
and today is one of those days for me.
We'll get into that in a little bit.
I have something I need to update everybody on,
but in the meantime,
you guys are making all the difference for me today.
I really appreciate that you're here.
So if you'd like to participate in our virtual lug,
please do, because it's just getting better
and better all the time.
We do have the new time,
which will throw some people off,
but I think it's worth it.
What do you say, Wes?
Should we start with some great community news?
Yeah, we've got a lot to get into.
Super excited to get the announcement out
for the old Manjaro project.
Version 19 of Manjaro is out,
and of course, in there is tasty updates
to the different desktop environments,
as well as, I haven't tried this yet.
I was thinking about trying to get the old upgrade in
before we started.
Of course you were.
Still loving it on the ThinkPad,
but I just thought, you know what?
I got a lot going on today.
Today is not that day,
but I believe in there now,
and maybe actually Wim, but you may know,
I believe in there now,
they have really smooth integration
for snaps and flat packs,
like just the old double click,
and it launches right up and gets installed.
Yeah, this is, I can't speak to the flat packs.
I don't know what the extent of the work is there,
but knowing the attention to detail,
Phil and team have shown snaps,
I expect that both enjoy first-class support there now.
I've had a chat with Phil.
He's been showing me some of the development
as it's been going along,
and yeah, they've got all of the packages available
side-by-side, so you can take your pick
where you need to take a pick.
You know what I noticed, Wes?
They're using the LTS kernel.
Hmm.
That's a good idea.
Huh.
Wonder why we didn't think of that.
There's a good reason for that.
I wonder, you know, we actually,
Wes and I don't have the LTS kernel installed
on our Archbox right now,
and we, for the life of us, can't quite remember why,
other than we just felt like being dumb.
Like, I think we had the conversation,
and I think it went something like,
ah, screw it, let's see how far we can push this thing.
And it's been great for the show.
Why do they use the LTS kernel?
It must be for drivers or something, right?
Yeah, well, I know one of the reasons
is the fact that the Nvidia 390 kernel
is not compatible with anything newer than the 54 kernel,
so I think it's there so that people
that have got older generations Nvidia cards
have still got a support root there on an LTS kernel.
I think an LTS kernel is a pretty solid idea
on a rolling distro.
I'm a big fan after last week.
All right, well, there was a story
that I think we've all been,
I'm wondering if you can guess what it is, Wes.
There's a story out there that we have been led to believe
we'd have an update that caused inconvenience
for a bunch of enthusiastic purchasers,
and we now have a resolution and an update.
I'm trying to make it cryptic
because I don't want to give it away,
but Wes Payne, one guess.
The Raspberry Pi 4 finally got its USB-C act together.
That's right.
Woo!
That's right.
That means I can finally buy one.
I've been waiting for them to fix this.
Yeah, yep, you got it.
So I guess, what was it?
There was anything that was marked with a E cable
for USB-Cs, and that was like one of the smarter
USB-C type cables.
It wouldn't work with the Raspberry Pi 4.
Yeah, they had some non-standard wiring,
so it thought it was actually an audio device
and wouldn't give it all the juice.
I mean, USB-C's got lots of fancy things,
but you got to get those negotiations right
if you want all the power that you have.
So it meant that some adapters worked and some didn't.
Obviously, the one they supplied did,
but one of the nice advantages in theory of USB-C
is we've all got all of these things laying around.
With those first generation, they might not work.
Yeah, I want to power my Raspberry Pi
with my laptop adapter.
Come on.
So the register reached out to Eben Upton, right?
Eben, Eben?
Sorry, Eben.
It's not you, it's me.
Mr. Upton?
That's the way to go.
Mr. Upton, and they asked him about this
and like, what the hell, where's this at?
And he said, yes, indeed, they had rolled a fix
into their PCB design for manufacturing,
and he would expect that it has begun to reach end users
by about now.
Ooh.
So if you're buying a Raspberry Pi now
or in the near term future, it will likely have the fix.
So if you would do me a big solid,
if you get one of these and it does seem to be fixed,
please let me know.
I'd love to update folks and say, yes,
they are actually out in the marketplace now.
There was another interesting little tidbit
to this story, though, when they were talking to Upton,
he confirmed that the four gig version
was really the one flying off the shelves,
but I guess before the four launched,
they thought it would be the two gig version.
I think that's probably because of price.
They thought the price was too high on the four gig version.
Meanwhile, I was over here being,
could you make an eight gig version?
All right, I'll take all the RAM I can get.
That's what I want.
Yeah.
And I mean, they were kind of getting the data back
in September showing the four gig was performing better.
So I guess what this really is confirming actually
is that that is still the case.
The four gig is still the top performing seller,
which could mean maybe that eight gig version will show up.
That would be great.
Fingers crossed.
I'm running three.
I wanted to say four, but the fourth one
is just for playing with.
I'm running three in production at my home.
One does all of the things, probably too many things.
And then the other is just doing pie hole and one network
monitoring tool, Smokeping.
And then another is doing all of my security cameras using,
what's that project called that I can't remember?
Shinobi?
Shinobi, thank you.
And I mean, I've been using them for months now.
It really has felt like the first sort of like,
all right, I'll just deploy this, and it'll work,
and it's powerful enough for all of my needs.
You don't have to compromise too much.
I'm pretty happy.
And I'm actually kind of feeling like I
reaffirmed that decision to go.
The Raspberry Pi for me has always been a toy.
And as an old sys admin, the idea
of putting a toy in production for my server
seems like a bad idea.
And I still think I'll regret not
getting more frequent DDs of my SD cards,
because I know one of those suckers
is going to die on me soon.
Hey, that's on you, buddy.
I know, and there are ways you could get around it.
You don't have to use an SD card,
but I actually kind of like the floppy disk-like nature
where I can just copy them.
And anyways, where it has actually been pretty great
is how freaking low power they are.
Even the Raspberry Pi 4 is way less power than an x86,
even a low-end x86.
The whole load for my entire Lady Joops RV
with all of my smart lights on and all of my Raspberry
Pis running, my Wi-Fi, my network switch, my router,
all of that, and all my LED lights, all of it
together is less than 200 watts, everything.
That's fantastic.
Even on a cloudy day, I get that in solar power.
So I run my Raspberry Pis off of solar all day long.
That's pretty cool.
And I don't think I could do it with an x86
PC in the Pacific Northwest.
You can really just optimize.
It's just enough compute, just enough resources,
and you don't have to compromise.
And silent.
That's the other thing.
Maybe they'll die a year or two sooner
than if I was not using them in production.
But at that price point, realistically, I
could replace all of them every year.
And the form factor is so easy.
You kind of grab it, you just slot in your new SD card,
plug in, and you're done.
Well, and realistically, you're going
to replace them when the 8-gig version comes out.
Yeah, especially the one that I have that's running Plex
and it's running a bunch of other containers,
like a document wiki and a bunch of network tools
and all these other services that really push the Pi to.
I was really kind of seeing how far I could push it.
And then I was like, OK, well, now it's invaluable.
I pushed it really far and made it invaluable.
You do have backups, right?
Every night.
Every night.
But it's still not the same thing.
I have all the data backed up, and all the applications
are in containers.
But I'd still have to burn a day getting the OS all reconfigured
and all of that.
So I just don't want that.
I've insulated as much as I can, but I
Sounds like you need to teach Dylan how
to make copies of SD cards.
I like that you and Cheese keep coming up with jobs for my son.
This is good.
I'll get a list from you guys, and then I'll start getting them.
These are great chores.
Sorry, Dylan.
Son, today I'm going to learn you how to DD an SD card, son.
I think I might DD rescue it.
I don't know.
Does anybody in the Mumble Room have tips
for how to duplicate an SD card in Raspberry Pi?
Don't use DD or DD rescue.
What should I reuse?
This is good.
Well, you know, gnome disks can restore disk images,
like SD card images onto SD cards.
That works really nicely.
It's not just using DD in the back end?
No, of course not.
It's for animals.
We've evolved since then, Chris.
That was like 30 years ago.
OK, all right.
I'm totally down for giving that a go.
And it's so low impact to test it, right?
Here's what I was thinking my process would be.
Shut down the Raspberry Pi, pop it out of the Pi,
pop the current production SD card in my ThinkPad,
image it right off the built-in SD card reader,
and then pop a new one in and restore the image to that,
put that in the Raspberry Pi, see if it boots.
Yeah, sounds good.
And gnome disks has create a disk image
and restore a disk image.
So you can do it all with a UI and not
run the risk of DDing over something critical.
Yeah, but what if he's on plasma?
I'll install gnome disk, it sounds like.
Hey, I will say gnome disk is actually really great.
I'm running it on everything, even on plasma.
I've definitely taken a look at gnome disk.
Is there like a certain point where it's like,
you've got to have at least this version?
Or has it just been good enough for a long time now?
It's been there for as long as I can remember.
I mean, I was certainly doing lightning talks about this
four or five years ago.
I thought someone was going to say Clonezilla to me.
That's what I thought I would get suggested was Clonezilla.
But I like this.
This is much simpler.
Chris, would not a good alternative
to avoid the manual intervention here
be to simply run some rsync over the network to your backups?
I mean, it's not as complete a solution,
but it won't take you a day to restore.
Yeah, and just rsync the file systems around.
Yeah, I wonder, taking the whole theory of the Raspberry Pis
are not so expensive that maybe it
wouldn't be impossible to buy another $45 Raspberry Pi
and have it running as sort of a cold backup that's
syncing every day.
And then if one dies, I just pull the plug out,
plug in the other one.
Why do you need to restore data and move data around?
Aren't you running everything in containers?
Have a docker compose file stored somewhere
off site, GitHub maybe, and then spin up your containers,
plug in your persistent storage, and you're good to go,
aren't you?
Yes, mostly the data is solved for.
It's really trying to avoid the hassle of spending
the afternoon installing Raspbian, getting it updated,
getting the Docker repo added, getting Docker installed,
getting that data reinstalled, avoiding all of that stuff that
takes a guy like me an afternoon because I'm
doing three other things and it's a Saturday.
I want something that's nearly like plug a new SD card
in, power it back on, and it's pretty much good to go.
Because in theory, the data would be safe.
Because the data is stored on a separate disk.
Have you heard of my friend Bash Script?
He can do a lot of that for you.
Yeah, well, that's what Brett was saying,
is maybe just automate so that it's always synced up.
Yeah, I kind of like it.
Or Ansible, or there's a lot of ways
to solve this particular turkey.
That is actually part of my problem.
I got so many options.
I can think of a half a dozen ways to do it.
And then the internet could probably think
of 100 ways I could do it.
You should probably pick the one that
will be the best content for the future.
That's what I want to say.
Yeah, so I should say I should wipe all of them
and put Arch on there.
Well, I mean, I think the latest Manjaro release will be fine.
We'll see about that.
I actually think if I were to reload them,
I'd probably still for today.
I'm not sure.
Stick with Raspbian.
With the Raspberry Pi 4, it's been semi-necessary,
although I think that's changing.
So I may just relook at this in a few months
and then redo it then.
You know, probably one of these will just fail on you.
And then you'll have to figure out how to restore it.
And you'll figure it out then.
Undoubtedly.
Undoubtedly.
That's totally how that's going to go.
No problem.
Well then, let's do a little housekeeping.
There's a few things I'd like to tell you about.
Number one, you have to go check out Brent's recent brunch.
He sat down with Heather Ellsworth from Canonical.
She's a software engineer on Canonical's Ubuntu desktop
team.
She's also a Gnome Foundation member.
And she has quite a story, including a background
in physics at CERN and just a great conversation overall.
It gives you kind of an insight, too, at daily life
at Canonical as well.
That's one of my favorite brunches so far.
Yeah, Heather's awesome.
Her chat, we could have chatted for probably two hours.
But maybe that'll come sometime in the future.
But anyway, she's fascinating.
She's super awesome.
I encourage everybody to check it out.
Absolutely.
Also, well, OK.
So I have a little bad news.
We have been trying to get this sorted out for a little while.
I was hoping I wouldn't have to come on air and say this.
But we will not be attending scale this year.
It's a little last minute.
And the reason why that bothers me
is because I know there's already
some folks who have made travel plans to come out and see us.
You guys are awesome.
But the reality is just didn't work out this year.
The merger happened just right around the time of Fest season.
And budgets are getting finalized.
And it just didn't iron out.
So we decided to put our efforts and resources into LinuxFest
Northwest, which is going forward.
It's a shame.
We love coming out and seeing you guys.
You've heard me talk about how important the in-real-life
connection is a million times on this show.
And these are always our chance to actually practice
what we preach.
So it is unfortunate.
Elle will be there.
She'll be doing her talk Confessions of a SysAdmin
in Ballroom H on Saturday.
Definitely don't want to miss that.
So she will be there.
You can go say hi to her.
But your buddies, Chris and Wes, won't be making it this year.
And it kills me, actually, to be honest with you.
But we will try to make a great LinuxFest happen.
And hopefully, next year, we'll make it work.
I apologize that we weren't able to get the news out sooner.
We were just trying to make it all work.
But it just wasn't really in the cards.
Wrong timing this time.
Yeah, yeah.
But it's going to be a great scale.
Oh, yeah, we'll be looking on.
And we'll be jealous and watching conference talks
when they're available.
And I hope everyone has a great time.
Jill, tell people where they can come find you,
because I know you're going to be at scale.
And you've always got so much going on.
Yeah.
So I will be at the Linux Chicks of Los Angeles booth
and running that booth.
And I'll also be doing interviews
on the floor for Linux Gamecast.
And we're also going to go live from Linux Gamecast
and at the Lutris booth.
Dang.
Wow.
I'm going to be everywhere.
Jill, you are working it this year.
That's awesome.
Yes.
Scale is such a great event.
LinuxFest Northwest is our hometown event.
But scale, I think, is one of the best events in the West.
Yeah, and I'm going to miss my Jupiter broadcasting family.
Yeah, well, we'll miss you, too.
Yeah, it's always a good chance to catch up with everybody.
That's one of the things we love about it.
But perhaps next year.
All right.
Well, then, the housekeeping goes on.
One other thing I'll mention, go check out Headlines,
linuxheadlines.show.
We're doing something kind of neat here.
We're trying out a new format, a three-minute podcast.
That sounds crazy.
How could that work?
I like it.
I just put it on as I'm getting down the road,
and then my podcast player just plays the next thing.
It's just sort of the way I start off.
linuxheadlines.show, three minutes or less,
everything going on.
And here's what we try to do here.
We try to do something that's not
hypey, that's not just taking PR releases,
remassaging them, and then putting the headline on it
that makes you want to click it.
We've got a team of people that are dedicated to trying
to get that accurate coverage in there,
trying to get it just right.
And then, sometimes to our dissatisfaction,
we all argue over the details for a while
before we publish it to make sure everything's really
massaged just right.
And it gets reviewed by a team of us
before it's published every day.
You'd be amazed the amount of work
we're putting into a three-minute show.
But I think it's kind of important, especially
if you're in the industry.
You want to keep aware of what's going on.
You want to be current, sort of like due diligence in a sense.
But you don't need to commit to two hours or an hour long.
Just get the headlines every weekday at linuxheadlines.show.
And then the stuff that really needs
a deeper analysis, further discussion,
we'll either do it here or we'll put it
on Linux Action News on Sunday.
And of course, we've got links to everything,
so you can find out more.
Bob is indeed your uncle on that one, I say.
So check that out, linuxheadlines.show.
And last but not least, a plug for the old Telegram group,
just rocking it out.
People are awesome over there, some super good conversations.
I thought for sure it would fall apart as it got huge,
and it's gotten better.
It boggles the mind.
Jupiterbroadcasting.com slash Telegram.
Go get in a 1,500 and stronger group over there
that are talking about these shows, Linux,
and everything in between.
Jupiterbroadcasting.com slash Telegram.
Yeah, we actually just crossed 1,600.
That's amazing.
And it's just a nice place to be.
Great conversations basically all the time.
That is so cool.
All the time.
Now we have a little bit of a public service announcement
that I want to get into on the program.
This is something that's going to impact
those that are in the maker space
or love to see technology, cutting edge technology,
and see where it can go and tinker with it.
We cut now live to our reporter on the scene.
Alex, I'm hearing that people are getting very upset
about new drone changes that are coming to the states.
Well, not strictly Linux.
Actually, a lot of these drones do run Linux.
And I was kind of hoping maybe you could update me,
because I have not properly educated myself.
So the thing that I'd like to bring to the audience's
attention is something called remote ID.
And remote ID is effectively an electronic license plate
for all model aircraft.
It's not just drones.
So we're talking about helicopters, planes,
anything that flies, essentially,
that's an unmanned vehicle, UAV.
So on December the 31st of 2019, the FAA
published a proposal for what remote ID is going to look like.
And you have 60 days to comment.
And that period ends on March the 2nd.
Now, what happens after those comments are reviewed
is the FAA will publish a final report.
And the new rules would take effect 60 days after that.
So why is it such a big deal?
Well, for me, there's several things
that are an overreach here.
So let me just break a couple of the key things
down that kind of rubbed me up the wrong way.
Firstly, I build all my own drones,
like racing drones and that kind of stuff.
And as it stands, you will not be able to do that anymore.
Because you will need to buy 100% FAA-approved components,
else you will be restricted to FAA-recognized flying sites,
otherwise known as FRIAs.
Now, most of those are AMA, American Model Association
fields.
So I don't know if you're into FPV or drones,
and you've ever tried to go to a plane field,
you get the stink eye.
And you're not really very welcome there.
So you'll only be able to fly self-built models
three years after these new rules go into effect
at these FRIA sites.
Now, a further kicker is that they're not approving
any new FRIA sites ever.
Because as they assume in their rules,
all craft will be remote ID capable.
So there'll be no need for new FRIAs to be approved.
Well, that's just not true.
So in terms of where you can and cannot fly,
you will not be able to fly in your own backyard
on your own property.
You will not be able to fly in parks, anywhere that
is basically currently legal.
I mean, obviously, national parks and stuff like that
are still out of range.
But I think it's just a huge overreach
to try and regulate the model aircraft's base,
that sort of sub 400 feet altitude space.
So that people like Amazon, and FedEx, and UPS
can start flying commercial delivery drones.
So if your aircraft is not remote ID capable,
you will only be able to fly at a pre-approved FRIA site.
If your aircraft can share a location via the internet,
so this addresses most DJI type products,
you will need to subscribe to a subscription service, which
hasn't yet been decided.
So let's assume a minimum of $5 a month.
And at that point, you can only fly in a 400 foot sphere
around you.
So that includes up, but also sideways.
So 400 feet, that's it.
You have this drone that can go 5 kilometers,
and you can do 400 feet.
So I think it's pretty egregious.
I think it's a horrible overreach.
Now, what can you do about it?
You can leave a comment on the FAA website
before March the 2nd.
Please try not to make it an emotional type, reaction type
comment that FAA sucks.
That kind of thing is not very helpful.
But instead, focus on the specific areas of remote ID
that you think are unworkable or an overreach.
And propose alternate solutions, such as app-based systems.
Lance is something that already exists for part 107
commercial pilots to essentially say, hey,
I'm going to fly here through an app,
get pre-approval to fly in that airspace.
And just remember that as this proposal stands,
it's going to pretty much kill the remote control
hobby as we know it.
Yeah, it's a shame, because it seems like that community's
been really blossoming.
It's a makerspace thing now, like building these little
drones as a maker thing.
It's a huge part of the reason I'm into electronics
and self-hosting and all that kind of stuff.
I mean, I got into building my own quadcopters
and learned electronics through that.
And that's led to a whole bunch of other stuff
that anybody who listens to self-hosted
will be familiar with.
So many prominent YouTubers have released really excellent
content on this topic, including Flight Test,
Joshua Bardwell, Rotor Riot, Mr. Steel, et cetera, et cetera.
So please leave a comment for the FAA.
Even if you don't live in America,
just leave a comment anyway.
Let's try and get the numbers up.
If you want to help make a difference,
you can also join me and thousands of other people,
remote control pilots, who are going to be in Washington DC
this Saturday, the 29th of February,
for a protest outside the FAA headquarters,
just off the National Mall.
So thanks for letting me raise the awareness of this issue,
Chris.
Yeah, we want to talk about it now,
since the timing is critical.
There you have it.
Do-do-do-do-do.
There's Alex with our drone update.
Do-do-do-do-do-do.
He didn't mention it, but he's actually being
carried by a drone right now.
Thank you, Alex, for that very important public announcement.
Yeah, go speak on it if you can.
Make some comments, make some noise,
and hopefully there'll be some reconsidering done.
So now I want to talk about Zero Trust SSH.
This is something that is so cool.
Jeremy's going to join us and talk
about things I never knew were possible for SSH
authentication.
It truly is the magical, magical fruit in open source.
And he's got some problems to solve that I'd never
really contemplated before.
All right, well, we all use SSH.
And I mean, I daresay love it, right?
Love it.
From port forwarding to proxying to just
getting to a server securely, it's super handy.
But we don't all use it in the best way.
I mean, I'm looking at you, Chris.
You're one who uses password-based authentication.
A lot of times, unless it's like just a few
of the regular machines, I just stick to passwords.
But you at least know you have other options,
things like public-private key pairs
that you can use to get onto servers.
Well, there's another way to do it, and it has some advantages.
And Jeremy had a great presentation
all about how you might actually use it.
SSH has certificates, and Jeremy, thanks
for joining us to tell us more.
Oh, thank you very much.
Yes, password-based auth, it is sort of maybe
the first introduction you get to SSH.
You know, you sort of start it up,
and then try an SSH straightaway,
and you're prompted for your password.
And you think, oh, well, this is pretty familiar,
and it works no problem.
But then as you pointed out, there's
that public-private key authentication.
And maybe if you're like me, you sort of try to try it out,
because it was a bit of a more exciting way to connect.
Or you've just gotten tired of typing in your password
all the time.
Or maybe even if you're at a company,
you might be required to use private-public-key
authentication.
So there's some distinct advantages
with private-public-key versus password-based.
You're kind of authenticating your laptop to the server
instead of your password.
So there's some advantages that you can't accidentally
mistype your password into the wrong prompt, for example.
There's some other neat advantages of public-private-key.
But like you said, the third way that I discovered
is already in Open SSH since 7 point something,
I can't remember, is certificate-based authentication.
It's not an X.509 certificate.
It's kind of a lightweight certificate.
Really, all it is is your public key
that's been signed by another private key,
a little bit of metadata like expiry and username,
things like that.
But that's all it is, really.
So instead of having your public key and private key,
you have your public key plus that signature
and your private key.
And you can't have a chain of trust
like in a normal X.509 certificate,
like a TLS certificate.
So you can't have a root authority
and then an intermediate and then things like that.
It's just one.
You just have one level of delegated trust.
That's right.
That's right.
But when you go in SSH to a server,
so with public-private-key, what you need to do
is put your public key on the server.
Right.
I think we've all been through that,
having to share your private key with someone
or copy the public key over so that it's there.
And maybe you've got a little script to help you with it.
Exactly.
And maybe you're giving that to your IT team.
It's like, oh, here's my public key.
Except with the SSH certificate, the host
has never seen you before.
So you try an SSH to it.
And as long as your public key has
that signature of the trusted certificate authority,
then the host will go, oh, great, this is you.
This is Jeremy.
I'm going to let you connect.
So it kind of switches things up here.
If I'm getting this right, you can tell that host
to trust anything signed by your certificate authority.
And then it doesn't have to have any specific keys added.
Anything that's been signed, it'll automatically
grant access to.
Absolutely.
So for an individual, I mean, unless you
have hundreds of servers, it might not
be so much of an advantage over public private key itself.
Because I mean, it's not necessarily
any more secure cryptographically.
Right, it's using the same keys and the same infrastructure.
Exactly.
But when you start having more than one person
or a team to manage keys for, I don't
know if you've been through the pain of managing
a team of public keys.
I've definitely managed a Chef repository to push those.
Yeah, it's not a lot of fun.
Well, I mean, even just adding another one,
I mean, my previous company was Puppet.
And the flow for adding a new user
was quite literally get pull, get commit, add the public key,
make a pull request, get someone to review the pull request,
then merge the pull request, and then
watch the CI server deploy Puppet and wait for an hour.
It was a bit involved for just adding a user to the system.
It's some time that I just shouldn't
have been spending doing anything like that.
I should do something else.
So I really wanted to automate team management of SSH
on hosts.
And it doesn't matter where your hosts are.
They could be in Amazon, Google Cloud, or Azure kind of thing.
Or it could just be your own servers in your closet
somewhere.
But yeah, SSH certificates will really help
a team manage their access.
Because if you imagine your hosts suddenly
don't need to know in advance that your user is
going to connect to it, then you can bring up
new hosts all the time.
But as long as the users can go to that certificate authority,
get their SSH certificate signed,
and then connect to your host, it'll be smooth sailing.
That sounds really nice, honestly.
But how do you go about making sure all those certificates get
signed?
Is that another manual process?
Or can you automate?
Yeah, so that's a good point.
And so if I just swapped my problem
for now public key infrastructure
and managing public keys and certificates,
and you're kind of right, because it's maybe
a more difficult problem even than just public keys.
But one of the ways I was going about it
was to create the certificate authority in as light
as possible way.
And we happened to use Amazon, so AWS,
for most of our other things.
So I built a certificate authority
in the Lambda function.
So it's not a new concept, actually.
Netflix, I found it first with Netflix.
They have a project called BLESS, Bastian's Lambda
Ephemeral SSH Service.
Bit of a mouthful, but they were still
using this jump host idea.
And it was connecting users SSH to that first jump
host in the infrastructure.
And then it would go off to the Lambda function, which
is really just a bit of code running somewhere in Amazon.
Who knows where?
Could be on their vacuum cleaner, I don't know.
So you run your Lambda function, and then it
will sign your certificate for you, sign your public key.
Sure, so you send a public key, it'll sign it and send you back
the sign key.
That's correct.
So what Lyft did, which was quite interesting,
is they decided, well, we don't really want this Bastian host,
because it's just complicating things.
And now infrastructure's maybe not set up for it.
So they decided to make a Python client that
worked on developers' laptops.
So every developer's laptop itself
could go and sign its public key.
And it would invoke that Lambda function itself.
And they had a really clever KMS auth thing
to prove your identity to the Lambda,
to say, yes, I need my certificate signed.
And remember, all the Lambda's doing is just
takes your public key, it's got a private key pair,
private key, public key pair, and it just
signs your public key.
It needs to know what username to put into that certificate.
So it needs to know your identity,
a good sense of your identity.
Because if I could get my certificate signed
with someone else's username, then I'd
be able to connect as them.
Right, you've still got this trust layer
you need to take care of.
Exactly.
And actually, it's funny, in a zero trust model,
the idea being that you don't trust anything inside your
network or outside your network.
So each piece should be on its own.
You don't have this firewall, and everything
beyond this firewall is this wonderful garden.
The funny thing is zero trust is almost like more trust,
because you're adding all these extra layers of.
Right, now you're authenticating everywhere.
Exactly.
So one thing I tried to do with the Lambda that I wrote
was to use OpenID Connect to authenticate to the Lambda.
So you sign in with Google to get yourself that certificate.
It just creates that identity token,
which is this bit of signed JSON JWT by Google.
And you can pass it over to your Lambda
and it can verify, yes, your email address is correct.
And it can put your email as your username, for example.
So then in this mode, onboarding, I'm thinking,
I mean, here at Jupiter Broadcasting,
we've got some G Suite going on.
So I could configure a new user there, which I probably
have to do anyway.
And then if it was all set up correctly,
they could just have access to servers.
That's the dream, that a new engineer starts
and they have their laptop, and they already
have the access that they need without you having
to do anything, other than put them
in the correct groups in your directory, right?
Right.
I mean, this is kind of a solved problem
if you think Active Directory, LDAP.
There's all these, that's all existing.
But what I'm seeing is a lot of companies moving away
from having those traditional directories
and going just cloud native services.
So you might just have G Suite, for example.
And if you don't have Active Directory,
how do you now leverage some of those tools
that are all set up for it?
If you're not running LDAP, what's
the alternative kind of thing?
And I think this is a good alternative.
When you say that there's companies out there that
don't have directory services, too, I
think to our audience that is using Active Directory or LDAP,
that sounds ridiculous.
But Wes and I have, and may currently
have worked for companies that have no LDAP, no Active
Directory.
It's a G Suite authentication system.
Maybe you're running Slack.
None of these things necessarily need that back end
infrastructure.
Right.
Absolutely.
So for the company I was at, it seemed
a bit silly to provision LDAP just for managing this.
Right.
And you can also need people to manage LDAP, right?
That's its own arcane art.
So help me understand how shrimp plays into this.
Because I loved that you got a name
for a component of shrimp during the talk, too.
That was a great moment of your talk.
Oh, yes.
Well, I was going through why I named it Shrimp.
And so shrimp has shells, right?
Shrimp have shells.
Got a bit of a groan from the audience for that one.
Lightweight, right?
So I guess you could have a really massive shrimp.
I don't know.
All the shrimp's pretty lightweight.
And then someone yelled out, shrimp's on the barbie.
Right.
Like a classic Australian expression.
It comes from an advertisement ages ago, I think.
Yeah.
So I had to integrate that somehow.
I was looking for a name for the back end components.
So maybe that was the barbecue.
So like shrimp's on the barbie kind of thing.
Yeah.
I don't know.
So shrimp is the name that ties all of this together.
It's the different components that
enable you to use Lambda for this aspect.
Right.
Yeah.
So shrimp is the two parts.
There's the Lambda, and then there's
the client on your laptop.
So you need something to go and automate
the process of giving your public key to the Lambda
and then receiving back the signed certificate
and using it in your connection.
I mean, you can use just SSH key gen.
There's nothing special about what these tools are using.
It's just sort of automating it in a way that really makes
it easy for developers to get going.
I think the idea is, well, my idea was,
if you make it easier but also a little bit more secure,
people will jump on it really, really quickly
and really want to use it.
But if it's just slightly more inconvenient,
even though it's more secure, people
will try and find a way around it.
So true, right?
If you can give them an easy and secure option that's
right at their fingertips, there's
no reason to choose the wrong path.
Exactly.
So I want a method that they don't even
need to put your public key anywhere.
You don't need to copy and paste anything.
You're just up and running already.
So part of that was the client actually runs an SSH agent.
So normally, your SSH agent manages your private keys
for you.
So it's a program running on your laptop.
Maybe it's even partially on a smart card or a YubiKey.
Your SSH agent kind of manages that.
Where is your private key?
So I wrote an SSH agent.
Well, actually, the Golang crypto SSH module's
really great.
They have an agent implementation there.
So it's almost like just a plug into it.
Exactly.
So I used the SSH agent to provide
this Lambda-based certificate signing feature.
So when your SSH client says, hey,
I need the list of public keys, I'm
trying to connect to your server,
it will ask the agent to say, what have you got for me?
And at that point, the agent can say,
oh, just hang on one second.
I've just got to go and just check
what's in my Lambda closet over here.
Just give me a few minutes.
And it goes off and signs your.
So it actually generates a new private public key
and then goes and signs the public key.
And then it returns to the SSH client and says, oh, yes.
Everything's normal.
Don't worry about it.
Here's the public key and private key.
So for the SSH client itself, none of that matters.
It just gets back the key that it needs
and it ships it off to the server.
Exactly.
The advantage of that is other tools that use SSH
work just great, like rsync or scopy or maybe even Ansible
or something like that.
Those kind of tools, they just will be none the wiser.
Some other ways of doing this rely
on wrapping the SSH command.
So if you wrap it in another command,
but that almost breaks that flow.
So you can't really use those other downstream tools that
are using SSH underneath.
Well, Jeremy, thank you for joining us.
What time is it where you're at right now?
I've just hit 730 in the morning.
Thank you for getting up early to chat with us.
We really appreciate it.
And we will link to the talk.
Anything else you think we ought to link to?
Obviously, we'll link to shrimp.
Any other suggestions?
So that's shrimp repository.
I've got the Git repo for that.
One thing I didn't mention, which I found in the last week,
and it's not actually in that talk, is Keybase.
Have you guys heard of Keybase?
Oh, yeah.
Yeah, absolutely.
Keybase.io slash Chris Lass.
OK.
Well, you're going to have a new follower very soon.
Well, Keybase is a blog post where
they've implemented their own SSH certificate
authority on top of Keybase.
Oh, neat.
And it's the most bizarre chat ops use case I've seen,
where essentially, because there's
no secrets being exchanged when you sign these certificates.
You just give your public key.
And then the server, your certificate authority's
signing it.
That bit's done in private.
But then it gives you back your certificate,
which is also a public thing.
Right, there's no secret exchange between the machines.
Exactly.
And it can do it over the Keybase chat.
And it uses the Keybase API to do it for you.
So it runs on your computer.
It uses your Keybase if you're signed in the Keybase.
And then you have a chat bot on the other end,
also listening on that same channel.
And when it says, hey, I want to sign my public key, it goes,
OK, what's your username?
And because Keybase has such a strong sense of identity,
it knows, oh, yes, it's the right Chris.
I mean, I haven't reviewed their source code.
But if it's true that they claim end-to-end encrypted
and the way they've implemented it,
it will be very, very difficult to impersonate your chat
message.
So it really is coming from your laptop
that it should be your request for a public key.
And then the chat bot just signs it, and then here you go.
Here's your public key, which is kind of cool
because the SSH certificate authority doesn't
need to be publicly listening on the internet.
It doesn't have to be a Lambda function that
can be invoked somehow or a server running on EC2 that
is listening on some port.
You just need to be able to connect to Keybase.
Exactly.
It's kind of like an outbound connection.
It could be a Raspberry Pi in your office, for example,
or wherever you're, you know.
I've tried it out.
It's actually really neat.
That does sound really neat.
It's worth including.
I gave this talk at Auckland OWASP Day, our security
conference here in Auckland.
And I included that part as well.
It's just awesome.
You know, I love all of the ways you can use SSH.
It's just been proven such a flexible tool to build on,
I guess.
No kidding.
Couldn't set it better myself.
Jeremy, thank you so much for joining us
and going through some of this.
I really enjoyed it.
My pleasure.
Thanks.
Thanks for having me.
It was great that Jeremy was able to join us and talk
about that.
But it's really still worth watching his whole talk
because we've only scratched the surface.
One thing we didn't get into but is really neat
about these certificate-based solutions
is you can set the expiry time really low.
So for Netflix, as an example, they just
sign their certs for two minutes,
just long enough to let you SSH to whatever box
you're actually trying to get to.
But then you can never use it again.
Whoa.
A two-minute SSH cert.
That's it.
So when they issue the certificate,
they just can set a tiny expiration window?
Yeah.
And you can do other things like limit
where that's coming from to a particular host or IP ranges,
say.
All of these just go so much in the other, more secure
direction from adding a key to a server.
And then never touching it again.
But you'll want to check out other stuff.
There's lots of neat ways to actually make this work.
It's scale.
We'll have links to all the tools, including Jeremy's
excellent shrimp tool.
Such a great name.
It was nice for Jeremy to join us because he was in New
Zealand, right?
Yeah.
You know, one other thing I loved about his talk
is it was actually contained inside of an SSH certificate.
He wrote up Python script to display the talk.
And then you can actually, with the certificates,
you can use the force command option
to basically when you SSH to the server, it runs that command.
And then the command ran his Python script,
which then started up and displayed his presentation
in the terminal.
It's fantastic.
I am both intrigued and a little perplexed
by the idea of using Keybase chat.
But I could see some advantages, especially
in certain networking conditions.
Keybase is something we should probably talk more about.
Remember how SSH can do all these crazy things?
I mean, I just kind of use it the most basic way possible.
I feel fancy when I do x11 forwarding or copy a file.
Oh, look at me.
I'm fancy.
That's pretty great.
We will have links to all of that, as always.
But before we go into the picks, I
thought maybe we could do a little follow up
on the old Arch upgrade we did last week, which did not
go so well during the show.
No, it did not.
We got a new kernel, which wasn't yet
supported by the ZFS on Linux project.
So that didn't work.
Pause there.
Here's a great example of when you are kind of rolling
the dice with Arch on a server, because there
is no central control making sure
that you don't release a kernel that
is incompatible with the version of ZFS you're shipping.
In a traditional distribution targeted specifically
at the enterprise, those are the very kinds of things
that they work out and prevent hitting you in an update.
Now, we know that going in.
We were just kind of playing fast and loose.
And there is a side repo, like the Arch CFS repository,
which has kernels and those things a little more in sync.
We're not using that.
This is just the stock kernel at the moment.
At the moment?
You did try the LTS kernel for a bit, but it had issues as well.
Yeah, there was some bug going on.
It looked like that was going to be resolved more quickly
than the GPL symbol issues that seemed
to be lurking for kernel 5.5.
So the old snapshot and rollback system worked mostly smoothly,
except for you had to go remove a particular folder or file
somewhere, right?
Yes.
So when we didn't have support for ZFS, that didn't get mounted.
We are integrating Docker on that host with ZFS.
So it wants to go talk to ZFS.
Doesn't find it, but does end up making a folder
under VARlib Docker that when you restore ZFS support,
means ZFS won't mount cleanly.
Right, because now all of a sudden,
something exists there.
Just had to go clear that out, reboot, everything came back.
So to be clear, we were using essentially
butterfs snapshots to restore the system back.
Yep.
And then we have ZFS snapshots for the data.
Exactly.
But our particular issue was that the ZFS array would not
mount after the kernel upgrade.
And then even after we rolled back,
it still failed to mount because it had created that directory.
But nice fixing.
I mean, you had it all fixed within a few minutes.
Yeah, it wasn't a big deal.
And you know, there's a lot of options that we could do.
I'm sure that the latest kernel will get support before too
long, so you can also do upgrades where you just leave
the kernel out of upgrading, right?
I mean, that's a fine kernel.
Or install it with the LTS kernel.
Or get an LTS kernel.
That is probably the better idea.
Yeah, this is legitimately why we're doing this,
is so you don't have to.
If you ever wondered what it's like,
our philosophy here is arch with belts and suspenders
and everything backed up, containerized or VM'd.
Nothing actually running, for the most part,
on the arch host box.
That's the theory.
And I think we kind of proved it out with these rollbacks.
This issue here, with that directory getting created,
only happened because we tried to bring the system all
the way back up without the right CFS module.
If we had not done that, that issue would not have happened.
The rollbacks work, for the most part,
with that one exception.
And if I just remembered to delete that file
before rebooting, it would have been.
So potentially, if this ever were to happen again,
that rollback process you went through
would be 100% effective.
So how long, in total, would you say,
now that you've done it, if you ever had to do it again,
would it take you?
Five minutes.
That's not bad.
And a reboot in there as well, right?
And a reboot, yeah.
That varies depending on your slow server, like ours.
We could have also just downgraded the kernel
from the package cache as well.
But it was more fun to use Snapper.
Cubicle Nate wants me to just switch it over to SUSE.
Yeah, one day we might try that.
You never know.
Yeah, that might be next in the old server reboot queue.
See, what I'm concerned about is we'll be all like, hey,
let's try out 2004 Ubuntu LTS.
We'll put it on there.
And then we'll have no reason to remove it.
So we'll never try anything else again.
Well, I was just thinking that with Arch.
And OK, yeah, so we did have to futz around a little bit.
That did take a little time to go investigate.
And here I am on the ZFS on Linux GitHub looking at issues.
But it also means I don't have to reinstall.
There's no next Fedora that's coming out, or even
a next LTS release.
Like, that's just work I'm never going to do.
Right, right.
Probably not because, you know.
Maybe you diffuse that work throughout the lifetime
of the box instead of sort of bundling it all up at once.
That's the theory.
Although, you still have updates on all systems.
They're not all just as crazy and wild.
That's right.
We've got not one, but two app picks this week.
And one is a collaborative ASCII canvas.
What?
Yeah, I mean, haven't you ever just wanted
to hang out with your buddies and do some collaborative ASCII?
Because that's what it's all about.
Yes, most days.
Yeah, I mean, that's what?
Like, every Thursday?
Yeah, I mean, it's not collaborative antsy.
But you know, ASCII will work for a time being.
Or say you're SSH-ing around with your two-minute Netflix
keys, and you want to get with your buds at Netflix for two
minutes and jump onto the server and collaborate on some ASCII.
SSH-ing around is one do.
Yeah, SSH-ing around.
That's what we do.
I think we could do show notes in here.
We'll just have to change our format a little bit.
Go to two columns.
So Kolaski, I guess that's how you pronounce it,
is a pretty neat little app that'll
allow you to collaboratively draw on an ASCII canvas
together.
Because why not?
It's great.
It's great fun.
That's pretty good.
But I'm trying to live the end curses lifestyle, Cheez.
So what do you got for me if I just want
to go end curses all the time?
So yeah, I mean, if you want to end curse your way
into a display manager, you can check out
Lye, which is a terminal display manager, which essentially
will allow you to log into all of your favorite desktop
environments, Budgie, Cinnamon, Deepin, Enlightenment, Gnome.
Wow.
OK, I never knew I needed this, but I'm kind of in love.
Finally.
I mean, how long have we all been waiting?
Well, doesn't it feel silly to have this whole display manager
thing anyway?
It just gets in the way.
No kidding.
And good news works on Dev1 too, so no system D required.
And there's also a feature so that you
can enable the PlayStation Doom fire effect.
Oh, good.
If you don't know what that is, I'll
drop a link there into the channel.
But it's just a beautiful ASCII fire effect.
See how these things kind of tie together?
You see, and people say Linux is just for geeks.
Look at this, right?
Come on.
Super nerd fun.
Big point made.
Yeah, those are great.
Thank you, Cheezzy.
Those are really great.
Even if you're not going to install these,
I encourage you to check out the links because they
have screenshots and videos.
And they're just fun.
Super fun.
Speaking of fun, I hear they're about to have some fun over
there at the Ubuntu podcast.
Things are in the works again, Wimpy, for a brand new season.
They most certainly are.
Yes, season 13 confirmed.
And we're in pre-season preparation stages
at the moment.
Should start recording in March.
Was there any discussion to go right to 14,
just for avoiding bad luck?
No, we've decided to fully embrace the 13.
Oh, I like it.
Good for you, UbuntuPodcast.org.
I'm going to give a mention for my website, ChrisLass.com.
Not only do I have my Chris Lass cast there,
but that's where I'll be keeping links to what I'm up to
and some of my social profiles, like my Keybase,
I think is on there, as well as future things.
So check out ChrisLass.com for that.
I think you have some awesome pictures of your RV up there,
too, don't you?
The new solar setup?
That's on worklifeandrv.com, Cheesy.
Which you can get to from Chris Lass.
That's true.
It is linked on chrislass.com.
Hey-o, ba-dump-bump, shh.
You know, we should mention, we haven't
plugged for a little while.
Speaking of pictures, there's the gallery.
Oh, yeah.
Jupiter.gallery.
Go check out some of Cheesy's work there.
That's going to be updated here at LinuxFest Northwest.
And so if you are there and you do take pictures
and you want to share them, just email me,
and we'll get those up on the gallery.
LinuxFest.
Now, that's what I'm putting everything into now,
putting everything into LinuxFest now.
That's all I got.
That's all I got.
Go get more Wes Payne over at TechSnap.Systems.
And he's on the Twitter.
Where are you over there?
At Wes Payne.
How?
Guess what?
I'm at Chris Lass.
Aw.
Did you know?
You did know.
You can admit it.
Yeah, I knew.
At this point, if you didn't know,
there'd be something seriously wrong, dude.
I think even the network has one.
I think it might.
At Jupiter Signal.
What?
But does the podcast have one?
At Linux Unplugged.
Oh my gosh.
We're all over Twitter.
They're like tribbles.
They're like tribbles.
Of course, we're live.
We'd love to have you here.
It makes all the difference.
Please join.
jblive.tv on a Tuesday starts at noon Pacific.
We usually actually get rolling a little earlier, 1130.
Yeah, come in early for the excellent pre-show.
Yeah.
And of course, there's post-show.
You hear a little tiny bit of it in the release version,
but there's a lot more every Tuesday, jblive.tv.
We'll see you then.
We'll see you then.
Tuesday Unplugged Program Oh!
I think J-Bot had a little too much to drink at lunch, I think.
You know, we shouldn't have given him access to the tab.
I don't understand why J-Bot gets lunch on Tuesdays and we don't.
How did that work out?
How did he get that arrangement?
We don't get lunch and J-Bot does?
Come on.
I don't like any of this.
This is not a fair arrangement.
So we will have to rerun the title votes here in a moment after Wes...
Sometimes it saves it.
Sometimes.
I guess we'll go and try to rescue our other Arch server in production, which has been
in production for a bajillion years, actually.
Yeah, I'd like to point out this one was not my idea.
It has been running forever, though.
So when we get that going...
Forever ever?
Forever ever.
In a very special way.
So not one that we would recommend.
So Brian, I thought you weren't going to be here.
Did you just get all your work done super quick?
Were you a super efficient photographer?
Yeah, you know, the great thing about being a professional is you can get things done
faster.
So everybody's happy.
Client's happy.
Photographer's happy.
I got lunch right in before heading here.
It's all great.
Brian, I don't believe for a moment you did something quickly.
Nuh-uh.
No way.
No.
Actually, though, when you see him bust out that camera, man, he'll just boom.
The next thing you know, he's taking pictures.
Like it just goes from zero to taking pictures.
The camera, yes, but editing or anything.
Oh, well, yeah.
No.
I just don't believe it.
He's not done with the editing.
He's not done with the camera.
He just took the pictures today.
How's the life on the farm been, Brent?
Aren't you farm sitting?
Oh, man, yeah.
I got to farm sit the last few days for good, good friends of mine who have a farm about
maybe like 45 minutes from here, and I've worked on their farm a few times.
What?
What?
Well, hold on.
We got a Chris Lastcast about this.
This sounds castable, my friend.
Did you take care of the animals?
Yeah.
So it's still the deep of winter here.
So they only have like laying hens and their two dogs.
How big's the farm?
Oh, so they do mostly vegetables.
So I think they're farming like two acres of like basically a huge collection of vegetables.
Oh, I'd love to.
Okay.
All right.
Don't tell me too much.
Don't tell me too much.
Keep it for the Chris Lastcast.
I think this is castable.
You know, I have a family farm on my mom's side up in Canada.
What?
How do I not know this?
We got something to cast about, my friend.
I mean, secret farms.
I get like a mental image that Brent's just like out in the field picking carrots and
stuff like just having a snack.
That's what I did last time I was there.
There's a version of me that just nopes out of the internet and I'm just like, I'm out
and I just go to the farm and I spend the rest of my life on the farm.
And I think it sounds wonderful.
You know, Chris, I was actually, while I was there, I was trying to disconnect a little
bit to use it as a means of just having a bit of a quieter, you know, 24 hours.
And I was thinking back to the Linux unplugged episodes where we were talking about some
strategies to kind of deal with burnout and stuff like that.
I was thinking, hmm, something I try to do often is have these little like 24 48 hour
little retreats and you don't have to go very far.
You just have to go.
All right, hold on.
I got, I got a response.
We can't talk about this.
We can't, we gotta save it.
Write that down.
You're getting too deep, boys.
I got it.
I have the notebook.
You write it.
I didn't bring it in here with me today.
That's something we should.
I know.
I do have a whole podcast about keeping notes in the book.
I got a backup notebook.
It's just not my notebook, so I'm not as inclined to want to write in it.
You know what I mean?
Like I've got an attachment to my notebook.
I'll also point out the six computers that are around.
I'm no longer writing on computers anymore, Wes.
So actually I have specific note insights I'd like to share too.
Are you also hanging your clothes up on the clothesline?
Just sort of becoming Brent?
I wish.
I wish.
I tell you what, I'd consider it if I could make this mate jacket last another few years,
I think I'd do it.
I'm still wimpy.
Oh my God, what are the chances the day you show up I'm wearing the mate jacket?
I think you might have summoned it.
I think I did.
Well, there you go.
Yeah, I think that's how it works.
That is so funny.
Yeah.
I just started wearing it and oh wow, that's a weird way.
You're going to have to start wearing it every Tuesday.
I got mine the same time I sent yours over and it's still in regular use.
Yep.
It's just the perfect temperature this time of year right now for it.
It's not too much.
It's not too little.
And it accommodates my ever expanding sizes because they cut my... I seem to just fluctuate
in size all the time now and it sticks with me.
I appreciate that too.

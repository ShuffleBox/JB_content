This is Linux Unplugged Episode 39 for May 6, 2014.
Welcome to Linux Unplugged, your weekly Linux talk show that's still not exactly sure what
the Internet of Things even is. My name is Chris. My name is Matt. Hey there, Matt. Episode 39,
buddy. Forty's just around the corner. Are you feeling it? I am feeling it. Yeah, now, it feels
like I don't want to brag too much because this week Coda Radio just said episode 100, which is
pretty exciting. So, congrats to my co-host over there, Mr. Dominic, for 100 weeks in a row, too,
which is pretty awesome. Now, Matt, coming up on this week's show, there's been a couple of things
that have been sort of gnawing away at the back of me. We look at the Linux landscape in the
context of where things are going to be in a few years, and there's a lot of change. You've got the
number one Linux desktop, Ubuntu is going to make huge changes over the next few years, roll out new
applications based on QT. You've got Wayland that's going to be in the market at the same time that
Mir and X11 are going to be in the market. That's going to be a sort of fragmentation. But then,
also, you've got this other end of it, this Internet of Things. It's going to be a bunch of
little devices from light bulbs that run Linux, don't laugh, that's actually a thing, to devices
in your kitchen that control your toaster, all running Linux, all different iterations of Linux,
but none of them quite compatible with each other. There's a lot of types of fragmentation that are
coming up, so I want to talk about some of those this week, identify some of the ones that are
concerning us, and then what I'd love to kick around with the Mumble Room is, hey, what would
we like to see the outcome be? What would we like to do? If we could just wave a magic wand and the
future turned out in a certain way so that way applications could be written for Linux desktop
and it wouldn't matter what distribution you're on, things like client-side decoration could just
be magically cleared up. The QT GTK war automatically sorts itself out. Like, if we could
just pick from these things, what would we pick and where would that leave us? I want to talk
about that in today's show. We'll do that in just a little bit. But Matt, there's something I like
to follow up on from time to time. Yeah, that's a Valve update, Matt. We got to do a little Valve
update because I think this is, the work that Valve is doing is one of those interesting stories
in the Linux landscape where you have a vendor who's working on a lot of open source
infrastructure. The end result is it makes their commercial platform more successful. It makes
they sell more closed source software, some of which or most of which is even wrapped in DRM.
But to accomplish that ends, the means is improving open source. And I think this is a
really interesting dynamic for us to watch. So our Valve update this week is a story that
ran on Ferronix yesterday. Improvements to MESA are MESA done by Lenard G and sponsored by Valve
are now an open source patch set. Get ready for this. It's a total of 21 patches that these changes
reduce the startup time of applications that can handle deferred compilation of GSL shaders. Like,
okay, that's interesting. That's good. In practice, after these patches are applied,
a game like Dota 2 is running with a 20 second reduction in loading times across the board for
Intel Power Gigabyte Bricks Pro systems. Valve's already merging those patches into the SteamOS
MESA branch and will be shipping as part of their next driver release cycle for SteamOS,
which will be open source. This is the third or fourth story now we've done where there's some
boring piece of underlying code that was apparently just ripe for the optimization. And now we all
benefit from that. And I think this, what we're going to be talking about today is going to be a
lot of commercial companies that are building on the backs of open source. But when it's done right,
and I don't want to sit here and just be Mr. Valve fanboy, but when it's done right,
like Valve is doing right here, everybody benefits. Well, and it seems like they really nailed it
because I mean, like, you know, at first pass, someone hears this and they think, eh, whoop-de-do,
they're doing something, whoop-de-do, you know, Valve does stuff kind of thing, right? And then
you actually see the benefit of it and you're like, you kind of do a double-take and think,
oh, hey, whoa, now I care. 20 second reduction in load time is like something that I can actually
grok. I understand what that means. And I want that on my games. Definitely. Pretty cool.
Definitely. It's all early days, but it's just, I don't know. It's the right direction. I really
like what we're seeing. I really like the way Valve is going about this. And I just kind of
want to highlight it because I want to encourage it. Before we get to our first email, we got a
Magia question that came in, and he's going to put us to task, Matt. He's going to stick it to us,
and rightfully so, I will add. Magia has been missing from the discussion a lot,
so Aaron's going to talk to us about that. But first, I want to thank our first sponsor this
week, and that is Ting. What is Ting? Ting is mobile. That makes sense. Ting is my mobile
service provider and Matt's mobile service provider. And this is why I'm going to tell
you about them right here right now, because you've got to know about Ting. Here's the best
part. No contracts, no early termination fees. You only pay for what you use. You only pay for
what you use. It's a flat $6 a month, and then it's your individual usage on top of that. Ting
takes your messages, your megabytes, your minutes. They add them all up at the end of the month.
Whatever bucket you fall into, that's what you pay. Included hotspot tethering. Also included,
no hold customer support. And they have some serious devices. But what is also great about
Ting is they do some fun initiatives. They've just launched their Drop Your Data Challenge.
This is one of those things that I think is brilliant, because not only is it, as a nerd,
I'm ready to take on the challenge of figuring out how to game the system and get my data usage
down. I'm all about that anyway, save me some money. This is one of those challenges that you
save money while you're doing it, but they're also opening this up to non-Ting customers.
You don't have to be a Ting customer to participate. In fact, non-Ting customers can
take the Data Savings Challenge and be entered a random drawing to win $1,000 cash, or three
people will get $150 of Ting credits. Now, of course, Ting customers, you can save even more
while you're doing this by bringing your data usage down. And if you're not yet a Ting customer,
in addition to being entered to win a random prize, they'll give you a Ting credit for the
percentage of your data savings from week to week to help you make the move even better.
So, in other words, if you cut your data usage by 74%, then Ting will give you a $74 Ting credit.
So they're already starting up. You can go get it right now. They got an app you can use to track
this for you, or they'll take the native stat tracking in the Android or iOS system settings.
Pretty nice. They got a couple apps they'll recommend. And they've even got a Google
calendar where you can add to your calendar for the length of the Drop Your Data Challenge.
If you already want to do this anyways, because why not? You drop your data usage,
you're going to save money, you're saving battery, you're lowering your bill, and you have an
opportunity to win. So go over to linux.ting.com. That's where you can find out more, and that's
where you can get started, linux.ting.com. Also, if you want to make the switch, linux.ting.com
will take $25 off your first device. If you've already got a device, like the HTC One, or maybe
you've got an iPhone 4, 4S, or 5, maybe you've got an S3, an S4 you want to bring over, well,
then that linux.ting.com URL will just take $25 off your first month of Ting. Or actually,
however long the $25 lasts. Since it's only $6 a month, it might last you a little while.
linux.ting.com. And a really big thank you to Ting. And go try out their Drop Your Data Challenge.
You can find out more at ting.com slash blog. Go to linux.ting.com. First that,
let them know you appreciate them supporting the show. Okay, Matt. Let's get honest. Let's
fess up. Let's read Aaron's email about Magia. Okay. He says, hi. I'm a follower of Last and
Unplugged. I'd like to see some discussion of Magia. It seems to be a popular distro that
follows free software principles, a la Debian. Currently, I'm running Fedora 20. I'm wondering
how or if these distros compare. Thanks, and keep up the great work. So I'm going to be honest right
now. For some reason, I have not been particularly interested in checking out the more recent
Magia builds. Have you downloaded an ISO and thrown it on a rig at all, Matt?
Honestly, never had a real reason to. I mean, it's great. I'm sure it's fine.
I have a passing curiosity, but I don't. So Mumble Room, I'll open up to you. Anybody in here want to
take the Magia defense position or maybe why they're not interested in Magia? Because I'll
tell you where I'm sitting at Mumble Room is I'm kind of like, okay, I love that they're still
going. That's great. Bore power to them. But I feel like my needs between all the other distros
are pretty much already solved. What is Magia offering me that I don't already have anywhere
else? I think it's a good somewhere else to go if you don't like what options you have on offer.
There's a guy I met at a recent conference who said he left and he contributes to Magia because
he wasn't accepted in whatever other community that he was trying to contribute to. Are you
saying it's like a Linux refugee camp? I think so, yeah. But in a good way.
Yeah, pretty much. If you don't want to use OpenSUSE because it's all the Microsoft
backing and all that stuff, you just don't want to use Fedora and then there's Magia.
Magia has an awesome software manager. It's just by default, they have some weird things
that's going wrong with it. But the software manager is cool because you can get all different
repos and there's options of 40 to 50 repos that you can activate. But by default, they're all
disabled, which I find weird. Are they still using URPMI?
Do you know? I'm pretty sure, yeah.
So it's pretty cool that you can do that. You can easily go from beta packages to stable packages
and stuff like that just by getting a checkbox. But it's annoying to set up in the first place,
but once you get it set up, it's very nice. Yeah, I do like that.
Also, Magia has the closest thing to Yast that you can get outside of OpenSUSE.
Right. Is it still called DracConfig?
Oh, the old Mandrake, yeah.
Here's a good question. Does Magia have something similar to the OBS or the AUR?
Not really. No.
Repos are kind of limited too. It's the only thing.
Technically, in a way, they have an AUR because all the beta repositories that they support,
but it's not like in an official one place you can go to to get everything and have
any kind of writing system. And to be honest, I kind of am really annoyed by Magia's packaging
structure because if you don't have Magia installed, you can't really tell what versions
they have of anything because their packages are all listed out on mirrors. So you have to find
a mirror that has the files. Yeah, yeah. Forget that.
Yeah, from a developer standpoint, that's a nightmare.
From a user standpoint, that's a nightmare. I want to know what I'm using or what I'm going
to be using rather. Well, once you have it installed, it's fine. You can easily just open
up the software manager or whatever they call it. I forgot, but it's nice, but you have to
install it first. So I'm looking to see what dependence they have by default.
I have to load up Magia before I can find out. Interesting. Okay. Well, good info. And I think
it's something that Matt and I, it's our nature to keep an eye on these kinds of things. So we'll
watch it. And when there's something there that sort of tickles our fancy, we might jump in and
do a review at some point. I don't think we have any immediate plans, but it's not something we
would never do. It's something we would consider when there's a moment and it seems like the right
time. Definitely.
Corky writes in. He had an idea for a recap episode. I'm not so sure about that, but he said,
I came across your episode from April 14th, 2013 about Linux's use as a media creator.
You criticized Linux's lack of tools for use for you and it meant you needed to edit on a
Hackintosh. Well, a year has gone by and a lot has changed since then. Perhaps a recap episode
would be a good idea. You mentioned tools such as Telestream. I know quite a lot's changed. So
an update. I can give them one right now. It still sucks. Honestly. And I do edit stuff on
Linux now. Yeah. There's tools, right? There's tools. And here's my new philosophy that I'm
coming at this. I got a new angle for solving this problem, Matt. One is Rekai works with us
now and he's now taken over the editing. So that's taken that off my plate. So that's really nice.
And what I've been thinking about doing as time moves on is sort of building up a kind of a mobile
setup. And that would entail in itself, if I'm out on the road and things like that, its own separate
workflow anyways. And it seems like the time to switch over and, you know, I talked a lot with
Noah from who joined us for Linux Fest about this. Maybe the time to switch over to Lightworks,
for example, for editing is the time when I'm already setting up a new workflow anyways. And
now that I'm not handling the day to day show post-production, I can kind of zoom out a little
bit and look at all of my options and I can now afford to sort of kill time trying out different
stuff and don't have to worry about interrupting the flow of every single show. And so I'm excited
about the opportunity to kind of build a new workflow and then maybe one day that workflow
will become competent and inclusive enough that it could replace the old workflow as sort of a
wholesale upgrade at some point when all the pieces are there. Now on the back end, some of
the changes that have already happened with the new studio move is Rekai has written this great
script that automates a lot of the encoding and tagging process that I have done that at different
points but had sort of just abandoned my automation and was doing it all manually by hand. And the
great thing about that system is it's taking that encoding process and that's completely
portable. That can run on a Mac if you install Brew or that could run really straightforwardly
on a Linux box. And so we can move it around depending on where horsepower is at. So some
of the tools we're using now are open source just based on the new workflow that we have.
The editing is still Final Cut. The problem is it's just a good product. Despite what the internet
will tell you, it actually is a good product, especially for online media production. So what
I'm curious to see is can Lightworks be comparable? And I won't know that until I've used it for a
while and I've set up a new workflow. But that's my new goal is to kind of go down that path on
a new setup. The Bonobo is certainly powerful enough to do mobile editing. I have two drives
in that so I can read from one drive and write to another drive. I've been experimenting with it on
the Ultra Pro. Also completely usable. And you can even get two drives in the Ultra Pro. When
Noah was up here, he had it loaded on his Pixel. He had a Chromebook Pixel running Ubuntu that he
had Lightworks on there. And he says it's usable. So I'm excited to give that a go.
There's other things we use too, like the YouTube download script for certain clips.
OSHA audio is an open source audio editor. Audacity, those are already in our tool chain as
well. So some components, more components since that episode in April 14th of 2013, definitely
more components are open source. Everywhere it makes sense. But the editing, at least probably
for the rest of this year and into next year, I don't think will change unless I really come
across something pretty fantastic in the new setup. And that would be nice to see. I mean,
for myself personally, I've all but given up on OpenShot. Kdenlive is what's kept me sane,
just because it won't crash on me. I love the fact that regardless of the environment I'm in,
I can depend on it. It gives me the functionality I want, and it's not going to take it up on me.
So that's awesome. Audio, Audacity. So I do use the tools, and I actually was fighting with
Audacity earlier this morning. So it's certainly not without its issues. But I do live in that
world. I actually eat my own dog food on that. And I do think it has a ways to go. It really does.
Yeah. And it's not just one particular program. I think that's what I want to underscore, right?
It doesn't just take having an editor, right? Because then once you have a good editor,
well, what is your codec situation? And once you have that solved, okay, now what's your motion
graphics suite? Because Blender is great, but if you just want to be able to grab a motion template
and edit it, well, you're out of luck. If you want to grab an After Effects template, edit it,
you're out of luck. So we don't have to have a one-to-one. Because you're married to Blender
templates at that point. Right. They are limited in comparison, because believe me, I've looked.
Yeah. They really are. Yeah. That's it. That's the problem. It's not insurmountable,
but it also means it's not just about perfecting and replacing one single application,
but an entire suite of applications. And that is more challenging. But you know what?
Things change. Things change in big ways. And I would not say it will never be possible. I think
it is possible. And I think we're working towards it right now. And we're just... Sometimes you just
come up with new ways of doing your work too, and then the different tools make more sense.
All right, Matt. Our last email today comes in from Captain Kirk. And he says,
Chris and Matt, last week you touched on Ubuntu One closing and made some recommendations
regarding replacing Ubuntu One. When I learned Ubuntu One was to close, I got a DigitalOcean
Droplet and I put ownCloud on it. It is working fine for me. But since ownCloud was not among
your recommendations to replace Ubuntu One, I've become concerned. Is there a reason I should not
use ownCloud? Is it flawed in some way that I don't know about? Best regards, Captain Kirk.
Well, you know what? I will answer Kirk's question right then and there. But first,
this is a great opportunity to thank our sponsor this week, and that is DigitalOcean. Here's what
I want you to do right now. Go over to DigitalOcean.com, use our brand new promo code
UnpluggedMay. UnpluggedMay will get you a $10 credit. Now, what is DigitalOcean? DigitalOcean
is simple cloud hosting dedicated to offering the most intuitive and most effective
offering, the most intuitive and easy way to spin up a cloud server. And that is a huge deal.
That really changes the game. Users can create a cloud server in 55 seconds and pricing plans
start about $5 per month, which will get you, not about, it is $5 per month. That will get you 512
megabytes of RAM, a 20 gigabyte SSD, one CPU, and a terabyte of transfer. A terabyte of transfer,
you guys. We had somebody write in and he said, hey, you know, I don't really use like half my
bandwidth on DigitalOcean. So when Ubuntu 14.04 came out, I just spun up a seed and I used a web
transmission to help seed for a little while because I had about 500 gigs left on my cap.
And that's a really cool way to just like, hey, I got a machine, I can help out the Linux community
a little bit. And the web transmission client makes that super easy. And DigitalOcean has
data center locations in New York, San Francisco, Singapore, and Amsterdam. Their interface is so
simple. The control panel is very intuitive and power users can replicate that control panel on
a larger scale with their straightforward API. It's really about the dashboard too. The dashboard
takes all of these different technologies, things that you really used to have to be an expert to
take advantage of, things that I used to be able to charge lots of money for my clients to implement
for them are now so straightforward that it's kind of amazing. They have this droplet system where
you can create image backups. You can move them around. You can snapshot before you make any big
changes. You can move them between data centers. They also now support private networking. There's
lots of really great features all built around this really simple and intuitive dashboard.
It gives you an HTML5 console so you can look at the machine as it boots up right at the BIOS level
all the way up through post. Two factor authentication if you want to be secure.
It's so great. And there's more and more cool community applications that take advantage of
their awesome API. So use our promo code Unplugged May when you check out. That's going to get you
the $10 credit so you can try the $5 rig. I've been using the $5 rig for months and months now.
When you combine the power of KVM sitting on top of these SSD drives with tier one bandwidth and
data center locations all over the world, the combination is absolutely insane. And you can
try it for free for two months with that $5 rig Unplugged May. And a big thank you to Digital
Ocean for sponsoring Linux Unplugged. It's a great service. Okay. So to answer his question about
own cloud. I haven't brought up own cloud as a sync solution simply because every time I've
implemented own cloud, I have ran into some serious performance issues. And I don't know
if it's my setup. I don't want to presume that own cloud inherently has some sort of problem.
But I have had significant performance issues. And I think it's because of the amount of files
that I have deployed. And I have tried it on everything from a Raspberry Pi to a fairly high
end i5 home server. And I still have not been happy with the performance. That's not the case
for everybody. And that's why it doesn't come front to my mind. But if it works for you, then
have at it, man. That's awesome. Own cloud is a great solution for you.
Well, and to elaborate. So when you're talking about performance, if I'm not mistaken,
you're actually talking about the actual performance of accessing a file or actually
getting something to sync. Not merely bandwidth, but going deeper than that.
Yeah, yeah. Like the UI and retrieving the directory listing and all those things for me
has been a little slow. Now, Fayther in the chat was pointing out, you can change the database
back end. And perhaps it was just my database back end selection. Now, I've done it a couple
of times. I do not remember which database back end I used each time. I believe I've varied it up
with still limited success. I don't know, Mumble Room, anybody in here who had similar experiences
with own cloud or an opposite experience with own cloud that you want to chime in with?
Well, I just tried setting it up one time just on a server, just on a little server rig. And
I don't know if I did something wrong or what it was, but it was just a pain in my butt the
whole time. It never worked right. I got it set up easy enough, but I didn't
have a use for it because I have ridiculously fast network at my house. And so I don't want
to sync to the internet. Yeah. Odair Devon, what was your experience?
Well, my experience was really weird. I think at least I got the impression that they're trying to
make it hard because they have this duality of the community edition and their own edition for
enterprise. So I think they're kind of trying to get people to approach their services. I don't
know. It just like even you do the installation, everything is correct. And you just trickle
everything and images start missing, things not loading. That was my experience with it.
And I've retried and it appears that each version installation gets difficult.
I hate duplication.
Doesn't CISO Studio have a version of own cloud?
Oh, yeah. I mean, yeah, yeah. And it's not difficult to install in pretty much any distro.
And I'm seeing comments in the chat room right now saying, hey, we're using it in production at
my work. It's just fine. So I think it depends on maybe the database back end setting, how many
files you have in there, those kinds of things. Because to be honest, I was loading mine up with
a ton of pictures and music. And if maybe you're more document focused and more calendar focused
and contact focus, it might just work just fine. And maybe if I didn't have to put 10,000 pictures
in there and 20,000 songs. That could work a little better.
Okay. So I want to talk about a topic with you guys. Now, Poby, don't take offense. This is just
food for thought. But and he actually doesn't. I'm going to say let's look at this in the context of
a post Ubuntu dominant desktop world. But it actually is just as applicable if Ubuntu is still
the number one Linux distro. So it actually works either way. But something that's been sort of
gnawing away at the back of my head for the whole year, at least, is a very awkward future we're
going into in the next couple of years. It's come up a couple of times on the show. But this week,
I want to kind of take a different take on it. We have a few things that are coming up soon.
Sooner than I think we'll all realize. It'll just be here. Number one, let's stick on the Ubuntu
thread. Now, caveat, 1404 will be out for five years. LTS. Okay, we're all establishing that.
Now, the newer releases of Ubuntu based on Unity 8 are going to have, on the desktop side,
brand new applications written in QT that, just like always happens in the Linux community,
some people will think are great and praise them for being innovative and the right direction.
And some people will hate them. And they'll declare that Ubuntu has ruined the desktop,
and they'll leave. And it'll probably be pretty, you know, there'll probably be a lot of people
on both sides of that aisle. And I think the likely outcome of that would be people who are
frustrated, they're not just all going to jump to one distribution. You know, they're not all going
to go in unison and say, all right, it's time to make OpenSUSE our new distro. And all of a sudden,
OpenSUSE becomes the big fat lizard of the Linux community. Or they're not all going to go to
Fedora or Mangia or Arch, right? It's not going to be any of those instead. You know, if anything,
it's probably going to be a mass spreading out across all of the distributions. And it won't be
like devastating for Ubuntu. I would foresee more folks moving out that are unhappy with
some of the changes. But that brings with it that elephant in the room that a lot of developers who
are targeting Linux desktop like to mention, and that is fragmentation. And not only will we have
this sort of user-based fragmentation over the next couple of years, but we will also have
display server fragmentation. We'll have Wayland, we'll have Mir, and we'll also have distributions
that just elect to stay on X11 for very legitimate reasons for a lot longer than we've been doing for
a lot longer than we all expect. And so we will have fragmentation at that layer. And then at the
same time, there is a really interesting development battle brewing where GTK is starting to
maybe not become the preferred targeted framework for new desktop Linux applications. A lot of
people are talking about QT. It offers a lot of advantages. It's great with mobile platforms. It's
a good technology in general. Obviously, the canonical folks are switching over to it. So
fragmentation there. And then on top of that, you've got just a general desktop environment
fragmentation where some desktop applications handle notifications in one way, another desktop
environment handles it in another way. Some draw borders, some don't draw borders, right? It's all
over the map. And this is just going to be in the next few years. And I'm trying to wrap my brain
around this, and I'm thinking at the same time at the hardware side of things, it sounds like calling
it the cloud, but you've got this internet of things, right? All of these devices from
Philips light bulbs to the toaster to the TV to your garage door opener to your front door locks,
there's going to be devices out there running Linux talking to each other,
but they're not going to be compatible Linux boxes. They're not going to be able to run
the same applications. You're not going to be able to write once and run it anywhere.
They're not going to have the same processors. It's another type of fragmentation. Not but not
one I am particularly worried about. The Linux core itself, it's pretty solid.
You know, you know that you're going to have glib see, you know, you're probably going to
have G streamer or cutie, you know, you're probably going to have cups for printing,
you know, you're probably going to have web kit, if you need to draw an HTML box. So those things
are kind of standardized, the core, the kernel, system D, all that kind of stuff is pretty
standardized. So I'm not so worried there. But I am pretty worried about the desktop,
because I can't see where this is going, where end users don't lose out and where developers
where developers don't get so frustrated, they just put their hands up and say, screw it,
I'm going to write an application for the Mac, because I know they'll spend money.
And I only have to write it for one operating system. And let's be honest,
all this is happening when the dominant desktop Linux or the dominant commercial desktop platforms
are getting pretty boring. You know, they're not changing very much. And a lot of developers like
that they like that particular brand of boring because it's easy for them to make money on.
That's definitely not a brand Linux has to offer. So I thought maybe we could discuss with
the mumble room with our virtual lug how we'd like to see this play out. What would we what
if we could wave a magic wand and push the future of desktop Linux in a certain direction
to prevent some of these problems to save ourselves this obvious hassle that we're all
about to encounter? I mean, it's like we're all driving down this freeway going 80 miles per hour,
and we know that there's a bunch of trouble up ahead and the bridge is out, but we're still
going. And we don't you know, we just hope that when we get to the bridge, I will just jump that
I will just jump that gap and nobody will notice the bridges that nobody notices. But if we could
like somehow build that bridge before we got there, what would we make that look like? And
that's one of the things I thought maybe we could toss around today. I have a certain tea pot.
Go ahead, Ick. Yeah, I think we got tempted to say a teapot. So many people I talked to at
Linux Fest Northwest about the direction Unity is going and how it's going to be mostly QT based
seemed really happy about that. Yeah, they seem like it'd be more solid. So that was my take away
too. Yeah, easier program, easier to program on. Heck, I keep seeing QT programs on Windows too.
So you know, it's it's cross platform, you can do you can go anywhere with QT. So it's it's easier
for purposes of making cross cross platform application. So you're saying in your Linux
desktop of the future, QT is sort of emerged as the dominant framework that applications are
developed with. I think so, because it's more cross cross platform. Therefore, more people can
program with it and it can be port easily, easily portable. And I want to see more of that.
All right. I'll go to heaven's next and then popes up. So go ahead, heavens. What were you going to
say? Well, I would like the next iteration of what I wanted Chrome OS to be. Right now,
Google kind of screwed up what I imagined Chrome OS to actually be. QT and GTK both have embedded
JavaScript interpreters or ECMAScript interpreters, which actually make them do their beautiful magic
QML and GJC, the JavaScript inside of GTK, which makes it absolutely Mac ish pretty. So I think
because JavaScript was invented to control UI elements as it's fundamentally, that's what its
design goal was. It's cross platform. It can go to Mac, Linux, Windows or run on your car. It doesn't
have to be Windows or C++ or compiled. No, it's perfect for this. It's perfect for this Internet
of Things future. Now, before we go to Popey, Tyler, you wanted to kind of dovetail on something
that Ick was just saying. Oh, yeah. I wanted to also say part of our discussion when we were at
Linux Fest Northwest also involved talking about Mir versus Wayland and the direction I'd like to
see the video card companies go is develop the kernel drivers open source like AMD wants to move
towards or Intel. And so that kind of reduces some of the compatibility issues that we would have with
proprietary drivers. Now, Popey, I want to I want to throw something in your face. So let's say here
when I'm saying, you know, the future desktop, what I'm saying is like there's some sort of
overall consensus in the development community that when we're writing a desktop application
for Linux, these are the things we target. And it's sort of the whole hive mind in some
magical future is sort of bought off on this. Popey, what would you like to see in that scenario?
So I'm going to take a step back and not answer that, because I think your argument is flawed for
two reasons. First is, even if Unity is pure Qt, that doesn't stop applications being GTK or some
other toolkit. So, you know, whilst it's great that Unity is moving towards Qt, that's just one
of the platforms Unity has been implemented on. It's been reimplemented multiple times,
and we've still been able to run Qt, GTK and other toolkit applications on top of that.
We don't we don't stop that happening. So no, no, I wouldn't say so.
So implying that in six months or a year or wherever the full Unity eight mirror lands on
the desktop, implying that that means the world is Qt and forget GTK or forget anything else.
You can't run those things on Ubuntu, therefore it's gone. What's the post apocalyptic world
going to look like? I think you're a little sensitive, because what I'm saying is what
the frustration is and the developers that I've heard from is that there's too many choices,
right? And so what I'm trying to come to is something that doesn't look fragmented,
something that doesn't look out of place. I'm trying to come to some sort of consensus where
we can have a desktop operating system that's filled with choice. Because one of the good
things honestly is like each distro solves a particular niche and they're good for those
areas. So how do we come to something that is sort of each in each area looks like it belongs,
look like it's in place. And what I'm what I'm suggesting is maybe if we could if we could sort
of come to a consensus to perhaps let's just say some sort of utopian future where the Qt
transitions go so well that more and more people jump on board. Wouldn't that actually be a good
thing? I don't think that's dystopia. I think that's good. Right. So I'm not saying there's
a dystopia. My reading was that the implication was, you know, that there's going to be this mass
exodus from Ubuntu when this happens. Maybe I read that wrong. Well, yeah. No, what I'm saying there
is that there's going to be whenever you change applications like that, there's just going to be
people who will make a big fuss, right? They make a big change. Change equals bad. So that'll add
fragmentation. What I'm saying there is that's going to add fragmentation in the user base,
what they're using. So I would say the best thing about this is you can take the comments that Ike
made and the comments that Heaven's made, which is basically QML and Qt are great. JavaScript is
great as well. We've implemented our toolkit in QML, but we're also implementing it as HTML5. So
if you want to bring your JavaScript app across, it will look the same on Ubuntu, whether it's a
QML app or an HTML5 app. So you can get that same look and feel across different tools. That is
possible. You know, that was sort of the pitch. Well, in a sense, that was the pitch to the
Firefox OS guy made at Linux Fest, as he said, you know, the developer can make a make a phone
app and then, you know, they just redesign the layout or maybe it automatically relays out.
And it's a web app, too. And you've you've written the application once and it runs in both spots
and it saves the developer having to duplicate work. And if you could, even with minor tweaks
to make it integrate properly, take one application and move it across Ubuntu Touch, Ubuntu Desktop,
Firefox OS and anybody who has a browser capable of rendering HTML5, that seems like a pretty
compelling incentive for developers to target that, even if one of the individual platforms
doesn't have that much traction. Because in whole, there's a considerable amount of traction and a
reduced amount of development time, which that's why I that's why I really do think Qt has a strong
future, not just on the Linux desktop, but everywhere. And and maybe it's Qt and a combination
of HTML5 apps. Are we worried about that, though? Is that a good thing? I mean, do we want a bunch
of web apps? My response as far as Qt goes, I'm really hoping that if Ubuntu is heading towards
Qt, popular applications like, let's say, Firefox or Chrome will start pulling their
theming from Qt instead of GTK. But Chrome has stopped pulling from GTK anyways. They're doing
their own thing. Aurora, right. Do you guys have a lot of problem with the fragmentation? Like I'm
honestly sitting on a Windows computer running a GTK app and a Qt app side by side and with my
Windows app. I don't care. This is exactly where I wanted to go, because I think if you look at
actual in production, I don't know of a Linux desktop that at least is on x86 that doesn't have
Chrome or Firefox like Thunderbird, right? I'm just naming applications that are already cross
platform VLC. We all have these, even though there's supposedly so much fragmentation already
that developers could never target Linux. But yet I've been using applications across
multiple different Linux desktops for years and years and years, and they're the same applications.
I get them at the same time for the most part. I haven't had any problems. So let me ask you this.
Is fragmentation just a bunch of crap? Is it hype? Is it just like something the developers use as
an excuse to be lazy? I don't understand. Alan, I'd say as far as my response goes for wanting
a beautiful desktop, GTK apps, and I'm a KDE user, do not fit into KDE that well at all,
unless you are limiting yourself to like a certain set of themes. But it works. It works,
but it doesn't look good. Right. Yeah. And that bugs me. Well, that doesn't bother me.
And it doesn't bother most normals. I don't think it does either. Yeah. I think most users-
The guy who write programs, it would probably be an easier idea if you have a layer to
connect all the toolkits and stuff so that they only use one set of interfaces.
Well, but you know who does care actually are developers themselves. They don't want to make...
PC Wiz, close your mic. They don't want to make something that they think looks ugly,
right? They're not going to put their time and effort into something that-
Well, that depends on which kind of developer you're talking about. Because some types are like,
I don't care what it looks like. It has this really odd design because that's how I like it.
Right. And then you look at- And I'd like to add onto it,
normals might care about it because you have this beautiful desktop,
and then you have this GTK app that might look like it came from Windows 98.
I mean, I think normals might care when like, for example, the client-side decoration thing,
where you've got two close bars, two title bars. I mean-
Well, yeah, that's just confusing. Yeah.
Wow, you have a real B in your bunny about client-side decorations. That's like the
fourth episode of the show that you mentioned.
Second episode, but fourth mention. Yes. Second episode, fourth mention. I agree.
No, it's because it is the beginning of this particular type of this brand of fragmentation
that I'm talking about and where it's happening right now. And as a GNOME user, you know what?
I'm of two minds of it. So I'm trying to wrap my brain around it because I picture myself
showing this to my mom, who has been a graphic designer for almost all of her professional life.
And that means she's used Macs since the 80s to right now. And I try to put her down in front of
an Ubuntu box because she wanted a new computer. And I was showing her GIMP, and I could not even
begin to describe to you how badly that went. And it's things like that that she just would
look at it and she would think, is this why it's free? That's literally what she'd say.
Ouch. Right now for the client side decorations, I think we're just in a phase. It is something
that the desktop environments have to solve. It's not the responsibility of other things
right now. The client side decorations is desktop specific.
Yeah. Yeah. So I want to just kind of close out my thoughts on the perfect desktop. I would love
to see more targeting of things that work across all desktops, not just Linux desktops, but all of
them. And I'm willing to give this transition to more web apps a proper go because I feel like in
the last couple of years, we've actually started to see web applications that are impressive.
And I don't know if you guys have played around with it, but if you install Chrome,
and then there's the Chrome apps, I think all of the Linux desktops, it will add those Chrome apps
as individual launcher icons, like in your menu or activity screen, whatever you're looking at.
And I launched the Plex one, and it looks like I'm running a standalone Plex application. And
it's just a Chrome application. And it actually works.
Go ahead.
The only thing I don't like about the Chrome applications is that they use one session for
all of them. So if you have multiples of the same web app you want, you can't log in separately.
You have to log in just once, and then it makes a duplication. But if you look at Midori, they have
an applications thing very similar to the way Chrome does it, but they have every single
application being made, has its own individual session.
What if I had the Firefox version of that?
I remember that was called Prism.
Prism was the application.
Yeah, bad name now. Dave, you were going to say maybe it's more about how the applications
communicate with each other?
Yeah, I mean, think about how these different devices that we use actually connect to each
other. I mean, I have two phones, two laptops, and a desktop in my home, and they're all on the
same Wi-Fi network. So I don't think at the end of the day it matters what graphical toolkit it's
actually running or what the UI is. If they're all accessing the same file and writing to and
from the same file, then they'll work together. For example, the Plex app. The Plex app is still
reading from the same server, whether it's on your phone, whether it's on your laptop,
or, you know, on the cloud. So what I'm saying is I think we need a standardized
back-end network interface for phone applications and desktop applications and HTML cloud
applications to talk to each other. We need a back-end connection, like say something like
Unix sockets or a standardized network interface where these things can talk to each other and
they can work together with each other and just exchange data regardless of what the
individual UI is.
Right, as long as it can be implemented safely. Now,
Daredevilin, you were going to make a point about how you just want to get into a nice pair of
comfy toolkit jeans and just walk around and feel good, right? Did I make a point for you or did
you want to add to that?
No, yeah. I mean, if I'm familiar with the toolkit, I probably know how to leverage that
toolkit to look just exactly how I want. And I'll do my application to look the best I can,
and that's going to be my effort. Now, if a distribution later on that uses a different toolkit
wants to pick it up, well, they better support my toolkit. And in the end, it will benefit every
single user because there's more developers that just do like I do. They focus on what they know
because it's easier. I mean, if you're going to jump on toolkit to toolkit, sometimes you will
gain extra benefit. Like, for example, you go to elementary OS, you will have a very valid GTK
focused environment. You will get runtime performance, consistency with their teaming
because they have these toolkits, these widgets that you can use.
No, I mean, it works, but you have to have the elementary OS photo viewer and the elementary OS
music application and the elementary OS this and the elementary OS that. And to be honest with you,
they're not a multimillion dollar company that can hire dozens and dozens of developers to work on
each individual application. At best, they get a mild feature improvement after each release.
And this is my issue here is when you reinvent these applications, when you recreate them,
there is a massive technical debt that you undertake to make them as featureful as all
of the other applications have been around for potentially 10 years.
But that's not what I mean. I'm not saying that the elementary way is to go. I'm just saying that
if I selected that toolkit and those tools when I'm going there, it's going to make my life easier
there. And because they select this path, it's going to be very clear that if I do GTKR, we'll
get a few things for free, such as the widgets. When they change, it will change in my application
as well. Same way that you do in Mac OS X with Cocoa. But I really don't think this is a problem
just because, I mean, developers have been using their toolkits and when the toolkit is not there,
some of them will actually compile the toolkit there. I think the best is for the developers
to focus on getting a good experience on their application, regardless of the toolkit, and then
worry about, okay, can I port? Unless it's like a mobile platform where the resources are
constrained and then you have to deal with just one tool.
I guess I just look at, I'm sitting back and I'm looking at the successful, really successful
Linux-based platforms. And two that come to mind are Android and Chrome OS. And both of those
involve a limited set of choices for developers. Both of those involve a very narrow scope of what
you can and cannot do and how you do those things and then where you publish those things. They all
have a very set of strict lanes that you have to drive down and rules you have to follow. And the
desktop is nothing, nothing like that. It is a wild west and a cornucopia of choice, but that's
not necessarily a good thing. Now, that said, I mean, I don't want to be all Mr. Anti-Forking
and whatnot because Jake Edge over at LWN.net had a good piece about Linux and the Internet of
Things. He was talking about Tim Byrd, who was giving a keynote at the Embedded Linux Conference.
This piece was at the end of April of this year. And he brought up a point that Linus made about
forking the kernel. But Linus is actually, this was in an Ask Linus column from years ago, when
somebody asked Linus, do you get all upset when people fork the kernel and sort of start reinventing
the wheel? And Linus says, actually, he thinks that when folks targeting a new market where Linux
does not have a presence, it actually makes a lot of sense to fork. He said, well, you know,
it makes a lot of sense to fork. He says, just as a new market, and we need a new base camp to
attack from it. So when they fork, they're essentially creating a new base camp in that
new market. And, you know, you look at how Android started. Android was originally a fork. And then
later, they've been folding much of the Android changes back into the mainline Linux kernel after
years. And so he says, and Linus, I have to agree with, he says, you know, the key to getting in
there is to have some place to start from. And sometimes fragmentation at the beginning looks
of the world, or it looks like it's going to be a huge mess. But because the code is open,
and the changes can be readopted if those upstream want them, it sometimes actually works out for the
better. And, you know, in this case, the Linux kernel has gotten a lot better because of these
kinds of forking. And I think that's telling, because if you can do it at the kernel level,
you can certainly do it at the file manager level. Or you can, I mean, who says somebody
doesn't take the new Qt file manager for Ubuntu, and it becomes three, four years down the road,
it becomes the default KDE file manager, they fork it, and they make a new dolphin based around
it or something like that. I mean, you just never know what could happen. So maybe it won't be that
bad. Well, you have to bait the hook to suit the fish, right? I mean, that's what he was saying.
Yeah, that's very good. Yeah, that's very true. Yeah, I think the market will just eventually
sort it out, just like it's always done. Like the Linux community is pretty resilient when
it comes to that stuff. So like, eventually, it might not happen right away. But over time,
things will get sorted out. As far as the client side decorations, those just need to go and burn
in a pit somewhere. Oh, I mean, that's a little extreme. Yeah. With my app, actually what we're
doing is separating the UI and the core. So the core is being written completely without a UI,
and then we can put any UI on top of it. So it could be Qt, it could be GTK or whatever.
And the reason we're doing this is because it allows us to make one core that can support
mobile and desktop. So we were working on an Android version. And that particular that
core will work also on the desktop with whatever toolkit we pick.
Yeah, that's the that's what the KDE guys were doing. I saw this video OS something OS connect,
where they this is KD's vision as far as I understand it. The basic toolkit has to be
the same KD lives, hasn't been upgraded from 4.9 because they're kind of halting it. The UI
they believe has to be different for tablets, different for phones and different for desktop.
And this is exactly what is going on. You know, fragmentation is good. If it's done properly,
we have to, you know, make the hook to suit the fish. Phone UI is different. And it needs a
different ground. It needs a different implementation from the ground up from the
kernel to the GUI toolkit to the actual interface. Right. The same with the desktop. Right. So,
you know, I think that's what we're ignoring here that we can't have the same UI across the board.
And we have to both embrace the fragmentation and find a way to connect the dots, basically.
Can I be different? Yeah, I also think, you know, earlier, the inter app communication was brought
up. I think the difference this time with this type of future we're going into is actual,
reliable and performant back end processing is literally today's reality. You know, you could
throw something up on DigitalOcean Droplet, on a Rackspace machine, on Windows Azure,
and you can have essentially as much processing power as you need. So, if you need to have
different applications across a phone and a desktop communicate, we have a solution for that
now. You know, you look at all these, the augmentation you can add to help smooth out the
rough edges between these different form factors and different types of devices that need to
communicate with each other is much more of reality now. It doesn't have to be device to
device anymore. There can be a middle processor that does that logic work, that does the storing,
does the state information. And that's going to be extremely powerful. And I think, I'm hopeful,
that's going to help smooth some of this stuff out too. A back end. Yeah, exactly. Which we're
seeing different iterations of that now. It's just going to become more prevalent. You know,
imagine a Linux distribution that maybe has, instead of, now I don't know if people would
like this, but instead of each individual installation going out and doing a package
refresh and pulling down all the repo information, maybe that distribution just has a single server
that just, when you do an update, your Linux box just connects to that server and says,
hey, what's the latest package? Okay, thanks. And it's like this, they're doing the back end
refreshing of all the repos. They're doing the back end caching, even with your own personal
repos. And they're just delivering you a single answer across all your devices. It's a weird
example, but you could see how back end processing could be applied at all different levels of these
things. It could really change things up. And that's just something we can't really wrap our
brains around right now because we're just starting to see the beginnings of that. And that's
going to be a major game changer down the road. So that's my thoughts on that. Yeah.
Cloud computing isn't a buzzword anymore. It is a reality.
Yeah. We just don't have to call it that. Let's just not call it that.
It's still a buzzword because you can't describe to me what it actually means.
Yeah. But computing. There you go. I did it for you.
All right. Just bring it down to the earth and make a fog.
Or how I describe it, it's anytime the system is opaque and you can't tell what's going on
inside of it. Right. Anytime it's magic. Before we go, I wanted to give a special shout out to
Irrational Number in the Linux Action Show subreddit. He's been doing an Ubuntu challenge
and he's really going at this. This is a really interesting journey he's taking. It came up
actually during an IRC conversation from Linux Unplugged a few weeks ago. So with 14.04,
he made the switch over as a long-time Arch user to using Ubuntu. He did a great post that outlined
his goal and then he's done a great write-up on his first week and what he ran into and what
kind of struggles he had and how he just posted two hours ago, week two, another really good post.
You know what? This is the kind of thing you start reading and it's actually very interesting.
And then there's some good conversations that are starting up around these posts too. So I
will link to these in the show notes if you guys want to read these. I thought they were pretty
interesting to follow. And then one last thing I wanted to cover before we run was a question that
came in today to our subreddit. It says, my children's school district, this is a gray wolf
night, my children's school district is looking at testing various options for replacing XP.
Probably a lot of people are. Right now, they mostly have one main CPU, three to four workstations
per room. They're trying Chromebooks for teachers and Windows 8. I would like to provide them with
another solution. The school district doesn't have a lot of money, so I'm hoping to get a solution
to help teachers and students. I was hoping to reach out to see if anyone out there has ideas
for a desktop window manager and programs. I like sugar idea, but I have a hard time with it,
so I'm not ready to make that work. I was able to get IT department to try out open office,
but any more solid programs, especially for teachers, thanks to anyone who has some suggestions.
I will tell you what I've seen work. I don't know if you're going to like my answer.
Linux terminal services project, Google Docs. The thing about the Google Docs is,
and this is what you can't get around, and you can make the same argument with open office,
but then it requires parents at home to install software on the computer. The thing about the
Google Docs is they just need to have the web browser. Google just launched Google Classroom,
where schools are going to be able to do assignments and integrate that with Google
Docs, and students will be able to check in. Again, all you have to do is just have the browser,
and Google just announced that they also will not be doing tracking or ad sales against educational
accounts, so the creepy factor has been reduced, too. I don't know what that means exactly,
but they're supposedly not going to be scanning the content of children's Google drives,
and won't be displaying ads against that. That seems good. That's one solution. Linux terminal
servers work really well. As long as you have even semi-decent connectivity, it works even over Wi-Fi,
one box, and then you just have a multitude of front-end clients, you will be amazed at how
smooth it works. Matt, do you have any other suggestions for a cheap way to get boxes in a
school? Boy, I think you really nailed it. I know here at a local community college,
Google Docs and Moodle, those are the two. They have great success with that,
and it actually works really well. I feel a little dirty recommending Google
Docs because it's not A, open source, and B, there is going to always be some kind of tracking.
But at the end of the day, it's kind of like, you just can't get past that. They don't even have to
run Linux at home, right? They could be on Windows, they could be on Mac, and they could still work on
those same school docs. That's a pretty compelling use case for students in schools.
Well, yeah, I mean, because my nephew uses a Windows machine at the school, then comes home,
and we only use Linux here, so he has a Linux laptop in his room, and he just logs into that,
and it doesn't care. It just works. Yeah, and chatroom is bringing it up,
too. Edubuntu is a great distro to run. Sure.
I've also done it with Fedora. There are specific spins of distros that are targeted for Linux
terminal services, so try it out. Edubuntu is a great start because it's really focused
at the educational market. Okay, Matt, well, guess what? That brings us to the end of this
week's Linux Unplugged. How about that? Did you know? Hey, were you aware, Matt? This is brand
new. We just launched this. Did you know you could watch this show live? How about that?
You can. I know. It took a little working, but I found this company called ScaleEngine,
and they hooked us up. Yeah.
So here, you could... Hey, maybe you guys didn't know it, so come over at jblive.tv. We start at
2 p.m. Pacific, or go to jupiterbroadcasting.com slash calendar to get in your local time zone.
Oh, and go over to teespring.com slash cr100 for the Coderradio 100 shirt. All right, Matt,
I'll see you on Sunday, okay? See you Sunday.
All right, everyone. Have a great week. We'll see you right back here next Tuesday.
Bye.

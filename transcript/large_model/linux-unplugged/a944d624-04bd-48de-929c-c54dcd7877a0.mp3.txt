Has anybody seen this tiny palm phone?
Is that the companion one that goes with your real phone?
Yeah, it's-
I'm so bummed about how they're marketing it.
Why, why?
I think it's a great idea.
You don't need a watch, you need a tiny phone.
Okay, you're right.
That sounds, that sounds dumb.
I want a tiny phone instead of a giant phone.
I just want that to be a thing again.
I miss my small phones.
Cassidy, what you're looking for is the Sony XZ1.
I had a X, a Sony something compact
and it was pretty good.
Oh, that one.
Yeah, yeah.
The compact version.
I just, yeah.
I'm happy that they're doing it.
I just wish more people made small phones.
I wish, I wish that a three and a half inch phone
didn't have to be marketed as a companion.
As a weird thing.
It could be marketed as like a phone.
Well, you know what would legit make me buy this
right now though, is if it ran webOS again.
That would be so amazing.
The good old days.
Yes.
It's weird.
It's like they don't remember the folio that they made
back in the day that was a companion device
that didn't even get released.
How do they think this is going to work?
Also companion devices.
Isn't that a thing from like, you know, 12, 13 years ago?
Can you remember having companions to things?
Isn't Palm a thing from 12 or 13 years ago?
This is Linux Unplugged episode 271 for October 16th, 2018.
Welcome to Linux Unplugged, your weekly Linux talk show
that's playing high fidelity sound clips
over its Thunderbolt 3 port on Linux.
It's amazing.
My name is Chris.
My name is Wes.
It worked.
That's our first intro.
No problems, no glitches, Linux for the win.
Played live off the ThinkPad as the sound board
over a Thunderbolt 3 connection
into the mixer via sound interface.
Just a proud milestone.
All right, well, that's not what we're here to talk about.
Coming up on this week's episode,
we've got a bunch of community news,
and then we'll ask Dan and Cassidy the hard questions
about elementary OS Juno's new release
that just came out moments ago.
We'll preview this week's Ubuntu 18.10,
chat some hardware with Wimpy,
and then we'll bring Dalton on from Ubuntu Touch
and ask them about the new Ubiport's OTA 5 release.
And then after we're done with that,
we're gonna announce our own free software project,
a modest one, and we need your help naming it.
And I may have found a, quote,
Photoshop alternative, unquote, for Linux.
And I found it in the most unlikely place.
I started trying to get old Photoshop 7 under wine,
couldn't actually find it anywhere
where I could get a valid download,
I mean, backup copy,
wandered off into GIMP and Inkscape and Corita for hours,
and ended up on our app pick this week.
And we'll do a full panel review
of this potential Photoshop replacement for Linux users.
But before we go any further,
we gotta bring in that mumble room.
Time, appropriate greetings, virtual lug.
Hello. Hello.
Whoa, that is, that is, hold on, down periscope.
We gotta look at this.
Brandon's in there, Brent's in there,
Cassidy's in there, Cubicle Nate,
Dan's in there, Mr. Echo, Dave, Eric, Funtalis, hello.
MiniMech, Popey, Sean, TechMav, and Wimpy.
Hello, virtual lug.
A lot of snads.
That is, that's such a long list,
I'm almost gonna have to take a breath
after going through that, that is impressive.
Pace yourself, we've got a huge show.
We have a huge show today.
We are also just doing a little public service announcement
here at the top of the show.
We won't be live next week,
we have a very special feature edition
of the Unplugged program.
We're gonna do a deep dive into a project
we've been working on,
we're gonna bring on the lead developer of PipeWire
and talk about the future of video and audio
and what happens to Pulse Audio,
and all of that next week,
including a review of that crazy high-performance
Dell Precision 5530 laptop.
So we will have an episode for you next week,
but we just will not be live,
because I will be down at MeetBSD,
which is on October 19th and 20th of 2018 in Santa Clara,
at the Intel campus, Wes.
I'm gonna sneak around Intel
and see if I can find the next generation processors.
Make sure it has Linux support now.
That might help them with some of their production issues
too, you know, pretty clever.
That is generous.
Check their benchmarking process whilst you're there.
Yeah, and maybe walk out of there
with the next generation NUC too.
That'd be pretty good.
So yeah, I'll be at MeetBSD next week.
I don't know.
I realized that I'm probably walking into
a whole bunch of Linus jokes, you know?
They're all gonna be cracking about Linus
the whole time I'm down there.
Hey Chris, how's Linus?
You know?
You're gonna have to get a thick skin
just so you can, you know, maintain relations.
That's important.
You're our ambassador there, Chris.
I know, I know, I know.
I'll have to bring like chocolate or something.
I hear the BSD guys like chocolate.
Well, let's get into the community news.
Just a quick one off the top here.
Not only a happy birthday,
a happy 22nd birthday this week to KDE,
but also it seems they've received
a somewhat sizable donation from the Handshake Foundation,
a $300,000 US Greenback donation.
Handshake is pleased to be able to support
KDE's international community
of dedicated volunteers, they write.
That's great for them.
That is great for them.
And 22nd birthday too.
Just, I don't know, a lot of good news these days.
Caligra, by the way, the Caligra Office Week,
which is a great office suite,
is gonna get 100,000 of that.
I can't happen to notice that Gnome
got just a little bit more money from these guys.
I don't know what that's about.
You had to go there.
You had to go there.
I just had to.
Unbelievable, Wes.
Yeah, you're right though, huh?
They did.
But you know what?
Maybe that just means there's less work
that needs to be done on the Plasma side.
I'm trying. Let's go for that, yeah.
That seems plausible.
Yeah, that's awkward.
All right, well let's change gears
and talk about the brand new, fancy,
version five release of elementary OS Juno.
It's here, it's refined, and it's improved.
And Daniel and Cassidy from elementary OS are both here.
Guys, welcome back to the Unplugged program
and congratulations.
Thank you, thanks for having us.
Hey, thanks for having us on.
This seems like maybe one of the releases
you've worked the hardest on.
I don't know, maybe I've been following it a lot closer,
but it really seemed like this one was a lot of effort
and a lot of hustle.
Yeah, it's definitely a huge update.
And I also spent a lot of time actually
documenting everything that's changed,
so that also helps.
Yeah, the post Cassidy is,
it's almost like one of those
John Syracuse-style reviews that was created in-house.
I love it actually, it's really in-depth.
What system did you use?
Is this a text file to track all of this
or is there actually a system you used to track all this?
Yeah, I don't know, I mean, GitHub mostly,
like just following along.
Yeah, cause we use a milestone planning on GitHub,
so we can check each milestone along the way
and see what all issues and pull requests were submitted.
So that helped a lot.
Yeah, so I want to just ask you guys
both a couple of questions that have been kind of lingering
in the back of my mind
with the release of Juno on the way.
I think I wanted to start with
the developer side of the story.
So I think one of the things that you've gained
the most traction for recently is the App Center,
the pay what you want model has been interesting to watch.
There is some really good updates in Juno
where you can try the app before you buy it
and then be reminded to purchase it.
I think that's an interesting take
on that particular problem.
I don't know if this is a Dan or a Cassidy question,
but I'm curious what the back channel communication
is like between you and the developers
that are creating these apps.
And in addition to that, how much expectation you have
that they'll be updated for Juno now?
So there's a lot of developers that actually hang out
in our community Slack, which is super helpful.
So they've kind of formed their own community there.
And then it's easy for us to jump in
and talk to them really quickly that way.
We also have a Gitter channel that some people are using,
but we've used a GitHub issues a lot actually
during this release to give people information
and let them know like how they can update
their applications.
And as of release time out of the over 100 applications
that are available total, 75 of those
have been ported to Juno so far.
Whoa, whoa, that is significantly more than I would expect.
That's awesome.
And that shows some excitement in the development community.
So it seems like there is some actual momentum there too.
That's great, congratulations guys.
I think the other thing, just thinking about things
that have really shifted since your last release,
because you guys are not really on the same release cadence
that anybody else is.
And so some significant things have shifted in the community
since your last release.
And I think maybe one of the more significant ones
for your projects and totally correct me if I'm wrong,
is the conversation around it's a Mac OS rip off,
it's a Mac OS clone.
And I think it has transitioned to,
it's an elegant, well-designed desktop,
and it's a workstation desktop.
And it's not just for new users,
but it can work really well for new users.
So that's, I think, and do you agree with that assessment?
Yeah, I mean, I think there's a lot more new ones now.
There's a little more sense of purpose and place
within the great array of distros.
You still got your ankle biters who are still,
ah, it's a Mac rip off, who don't really pay any attention
and don't look into it.
But I think for the most part, the conversation has shifted.
My buddy from Coder Radio, Michael Dominic,
is moving over to using it
as his primary day-to-day development platform.
That's awesome.
Yeah, he finds it to be a nice, clean, elegant,
get out of his way, just work the way he wants.
And that's a pretty big shift of tone.
That's a big shadow for a project
to crawl out from underneath.
And I don't know if you completely agree with me,
but I'm curious if you guys have a sense
of what the next conversation is,
what the next statement is that the project needs to make.
Like, what's the next hurdle communication-wise,
community perception-wise that you see?
Hmm, yeah, I mean, I think focusing on privacy
is always a really big,
it's always been a big focus for us,
but we're paying more attention
to actually actively talking about it
and kind of making that be a bigger conversation
because as we see more cloud services,
as we see more, even desktop operating systems
be more invasive in your privacy,
like that's super important to us
that we don't do any of that.
So I think that's probably one of the biggest focuses
coming up.
Hmm, I'm curious too, along those lines,
is there cross-pollination work
with some of the stuff you've been doing,
System 76, that's gonna show up down the road too?
Like the installer?
Yeah, so I mean, the installer we helped,
we designed and helped develop the front end for,
and Pop!OS is currently shipping that,
and yeah, there's been this secure by default series,
I guess, of posts that I've written
and that we've been talking about,
and encryption by default is a big part of that,
and that's something that the installer lets us do.
We're not currently shipping it
because there's actually other pieces of the stack
we have to develop to be able to do that,
like initial setup.
We don't use GNOME initial setup
because it has a lot of GNOME dependencies.
So there's still some work that we have to do,
but yeah, getting secure and privacy by default
is a really big deal.
I like that.
I think that's really cool,
and I'd be a pretty happy camper
to see the home encryption land by default.
I gotta kind of be honest with you guys,
the installer, although it's a great installer,
a bunch of guys, don't get me wrong,
the installer does sort of feel a little out of place
on the desktop now because the rest of it is,
there's such a clear design language on the rest of it,
and the installer doesn't quite follow it,
and the style sheet, I don't know,
it doesn't quite look right to me on that installer.
And so I think that for the next release
would be a really nice piece to replace
if everything's ready.
Exactly, yeah, the current plan is
that could be a big feature for 5.1 hopefully,
so that's definitely a focus.
Now, I'll tell you something else while we're in this area
that would be, I think, helpful for adoption,
although I understand it's a really hard problem,
is something to make it a little more testable under VMs.
And I think it was good, like, when you guys sent out
an email to some of us to review it,
you said, by the way, it doesn't work perfectly in VMs,
there's some things that don't render quite right.
Why is that?
And is there any potential of one day fixing it
so that way people that just want to try it
on their machine under a VM can give it a go?
Yeah, so the thing with that is a lot more
of kind of the underlying stack.
The desktop environment does require
some hardware acceleration for animations
and things like that.
And it looks great too.
Yeah, the way that GTK handles the fallback
when animations are disabled can sometimes mean
that you have extra spaces where things are supposed
to be slide out revealed and things like that.
So that might be fixed in the future stack
with upcoming technologies like Vulkan, Wayland, GTK4.
Who knows, that might be improved on that place.
But for us, I think a lot of those issues
are more in the underlying technology.
Yeah, I thought that might be the case.
If I may, you'll remember that Ubuntu
is now collecting hardware metrics
for people that want to share that information.
And we've learned that there is a large proportion
of users installing the Ubuntu desktop on virtual machines.
And I know that Will Cook has a vested interest
in improving that experience and working upstream
to land the necessary performance improvements
and fixes to make the VM experience just generally better.
So I think that's something that will improve in time.
Yeah, that would be awesome.
I know it might also be more obvious in elementary OS
because we use a lot of animation and a lot of GTK revealers
which are those little animated things
that kind of collapse down or expand open.
So it might just be more obvious in elementary OS
than other desktops because of the types of widgets
that we use.
But yeah, getting all those fixes upstream,
that would be great.
Thanks, Wimpy.
Yeah, it would be as nice for me to be able to do test drives
but I do totally understand that there's a certain experience
you're trying to achieve on a modern desktop.
A lot of desktops just don't perform their best under VM.
So that's not an unusual thing either.
There's a few others that I always like to catch up
on you guys with.
Also requested by my co-host, Michael Dominic,
was he was hoping for the elevator pitch
on why somebody looking to target elementary OS
should bother learning Vala.
Yeah, it's really about,
and we actually gave a talk about this recently
at the Libre application summit.
It's really about having the one true developer path of,
Vala was created by Gnome for GTK and G-stack development.
And so that's what we use and it works really well for that
using, it's tailor-made for our stack.
And really it's less important about which exact language
we choose.
It's more about the fact that we have a specific language
that we recommend people to use.
It's also just a really great, easy to understand language.
It's pretty simple to read.
It's, if you've come from other languages like C-sharp,
it's, or Java even, it's really similar.
So it's more about the ecosystem of development around that.
So there's the documentation,
there's the community of other developers
who are writing open source code using that one language.
It just makes this whole big development ecosystem
a lot better.
That makes perfect sense.
I always liked that answer.
I think that's really a solid reason.
And we see it on other platforms that are doing well,
right, they do that.
Now, Cassidy, this is the first release,
the first major release since you've been a full-time
employee, how's that working out for you so far?
It's so great.
Is it?
It's so good.
Yeah, I love it.
Good, I'm glad to hear that.
It's so cool.
Yeah, I've been able to spend a lot of time
doing a lot of the stuff I really love,
like both development and design work,
but also things like writing a 7,000 word release post
about it and taking all the really great screenshots
and stuff.
So it's been a really great deal.
I think too, it's worth mentioning,
because you guys don't get a lot of credit for this,
that what appears to be a pretty polished set of,
I mean polished is not even doing it justice,
an extensive encyclopedic set of release notes.
Honestly, if I was a super fan of this OS
and I had been waiting and waiting and watching
the countdown, to be able to read through this
would be very rewarding.
And it's, of course, like everything you guys do,
it itself is well laid out and well formatted
with great visuals, the prettiest screenshots
on the internet.
And I like the way you do this because it allows the reader
to just appreciate and examine that element of the UI.
And this also extends into the press kit
that they send out to some folks that sign up for it.
And in there is also like a resource of screenshots
where they'll zoom in on a particular element of the UI.
So you can sit there and really kind of appreciate
how well it's thought out.
Because when you see it on your screen with three or four
other windows and the toolbar and the dock,
it's sort of just one of the many details.
But when you take these applications
that are on elementary OS and you isolate components
of their interface, you can appreciate really
how well designed there are.
And this press kit is just really, really well done
with cautions about the VM and other explanations in there
about the features.
And so from end to end, this has felt
like one of the most professional releases
of a software product, not of a Linux distribution,
not of an open source project, but of a software product.
And I think you guys have nailed it
at a level of professionalism that is up.
It's rare for the industry in general.
So my hat's off on the back end organization and effort
for the Juno release.
It's exceptional.
Thank you so much.
Yeah, that's awesome to hear.
Well, guys, just to make everything easy in our show
notes, we've direct linked to the ISOs.
So that way, people can just bypass the website all together.
Just kidding, of course.
I saw your tweet to DistroWatch this morning,
and I thought, oh, what are they doing?
What are they doing?
Of course, elementary OS is a crowdfunded effort.
And there's multiple ways you can do that.
And one of the options is to kick them a few bucks
when you go download the ISO.
And even if it's just something you try out,
I think it's worth kicking them a few bucks
because they're doing something nobody else is doing,
and they're doing it really well.
That's a new standard, I think.
Yeah, on a lot of fronts, on how you communicate
with developers, on how they should build tools,
on how to distribute applications
for your platform, how they can monetize those applications.
They're literally one of the few app centers or app stores
in the entire market that has figured out a way to do demos.
I don't know why Apple and Google and Microsoft
haven't been able to figure out this system, but somehow,
these guys over at elementary OS figured it out.
Plus, the whole thing is exceptionally well-designed,
and they've been doing this for a while now.
So this is multiple releases in, and it deserves that 5.0.
It really does.
I think it deserves that 5.0 number.
And I just think it's a great release.
So even if you don't stick with it,
I think it's worth kicking them a few bucks.
So go check it out.
We will have links to the website and the announcement
in the show notes.
Congratulations, guys.
Good release.
Thank you.
I hope you guys get some rest.
And as long as you get all the bugs fixed,
the people report right away.
Hey, and if you want to go get more Dan
and maybe understand the hype around the Plasma desktop
or hear Dan's thoughts on it, which, again, was another.
I thought that was really well done, too.
Dan did an analysis of some of the UI quirks of Plasma
that bother him.
And Popi offered a really solid rebuttal to a lot of it.
And the conversation, I thought, was great,
especially as a Plasma user.
And it was in user error 50.
You can check it out at error.show slash 50.
That's error, not air.
Error.show slash 50, where they break down all the Plasma hype,
as well as a few great hashtag ask air questions
and some heavy topics.
Oh, yeah, it's a wild episode, that one, but great.
That's good.
I got an email into the show from listener Alan with an E.
He says, love the show.
It's now my number one go-to for all the Linux things.
I have a question that I'm hoping you can answer for me.
I'm fairly new to the Linux community.
And recently, I saw a website that's
come out saying that Flatpak is a security risk
and shouldn't be used.
I've heard it referenced on your show a few times,
and it seems like it's a way to install software.
I was wondering if you could alleviate some confusion,
or should I discontinue the use of Flatpaks?
Is this an internet hoax or a security risk?
Alan.
That's honestly a pretty good question.
There's been a lot of things up in the air,
and if you don't really understand the technology,
if you're not using it, or you haven't looked at the source
code behind it, how could you know?
Yeah, a website recently came out, flatkill.org,
where it went after Flatpaks for inadequate sandboxing
practices and shipping out-of-date libraries.
The author, which is a really common mistake,
though, attributed these flaws to Flatpaks themselves.
Instead of how the developers have packaged them,
as if this developer, or as if this author of the blog post
was unaware that this is how maybe potentially hundreds
of thousands of Docker images ship,
this is how some packages are in the Debian repo right now.
This is not a new problem to software.
This has been a problem with software for a long time,
and this is, I believe, made worse
when you have volunteers packaging the software instead
of the developers directly packaging it themselves.
So Flatkill takes off, goes all over the typical places,
and I just saw people shitting on the Flatpak concept
and on SNAP packages.
And I can't believe on October 16 of 2008,
we have to have a minute where Chris explains the reason we
need universal packaging.
I can't believe that people still don't get this.
And I think it's because everybody is so self-obsessed
that they can't figure that there could be problems out
there that they've never witnessed.
And they have no ability to empathize with anybody else
on the internet, it appears.
I mean, I'm just projecting a bit here,
but it seems to be the case.
Experience holds up.
Besides sandboxing, which is a nice aspect,
if you configure it correctly, of Flatpaks, or isolation,
whatever you want to call it, even if you just look at that,
that itself is a nice improvement.
But creating an API system, creating a portal system
for Wayland, that way you can get access
in Wayland environments where everything is sandboxed,
that way you can get access to hardware and devices.
This is all necessary.
And you can't just say because you have a sandbox,
then you have 100% security anyways.
Security is a multi-layered thing.
You don't just put locks on your doors,
you also put locks on your windows, right?
Because security is many things, and sandboxing is a component.
And if one of those many things is bogus,
that doesn't mean the entire thing is bogus,
especially if it's not an implementation,
or especially if it is an implementation detail,
and it's not like a core fundamental flaw with Flatpaks.
But let's talk about Flatpaks and the specific desktop app
problem space.
Because really, I think when we think about this,
we think about the servers.
But the security position on the desktop to begin with
is horrible.
Anything in your session basically
has complete access to everything
belonging to your user.
Think about the way an X11 system traditionally works.
Even with these limitations on a traditional Linux desktop,
Flatpaks still brings security, like default sandboxing,
IPC filtering.
A new file system too, don't forget that process,
and UID namespacing, sitcom filtering,
and an immutable user and app directory.
I think it's also worth highlighting
some of the other reasons why Flatpak exists at all
to begin with, or why other universal packaging formats
do.
It allows apps to become agnostic
of their underlying distribution.
So you can have something that maybe
has dependencies on GTK2.
And you don't have to have GTK2 installed system-wide
to run that.
Don't worry that suddenly you won't be able to update anymore
because you broke your package manager.
That's right.
Also, you're separating the release update cadence
of the distribution from the application.
This is a point that we heard from Frank of OwnCloud
and now NextCloud over and over again,
that old, vulnerable versions of their PHP-based application
were still being shipped in the distro repositories
while they had brand new ones available for download
off their website.
The issue is the distribution doesn't
update the repos as often as NextCloud updates.
But if they're shipping them as a universal application,
like a snap, they can update the snap when they want.
It also disintermediates the app developers from the users
when you have it that way.
When you have the distribution in control of the software,
then the developer really is disconnected completely
from the end user.
The developer doesn't really have any idea
of how many installs under Linux they are.
We've heard this from LibreOffice.
They say, yeah, we have a few numbers from our website
and a few mirrors.
But if users install LibreOffice from the distros,
we really don't have any idea of how many installs
we have out there on Linux.
So we don't know where to weigh it, necessarily,
because not all of it checks in.
Not all of it is being pulled from our servers.
And it decentralizes the distribution of applications.
If you can distribute something like Plex server as a snap,
it is not an Ubuntu-specific thing that has now happened.
Last week, Plex announced that the Plex server is now
available as a snap.
It's in the beta channel right now.
It's a beta version of Plex server.
And you can install it from a snap
and have Plex installed and ready to go.
That's incredible.
And it's not an Ubuntu-specific thing.
Canonical did the legwork with the relationship
to help them make that happen.
And in the past, before this kind of thing,
it would have been an Ubuntu-only technology.
It would have been a PPA or a DEB.
The people would have had to have guides
to get working on Arch and get working on Fedora.
And now it is a frickin' snap.
It's not an Ubuntu repo.
And the same thing is true with Flatpaks and App Images.
It's not like Flatpaks are perfect,
but they solve problems.
Same with snaps, same with App Images.
And the crap on the concept is to pretend
like the existing way to distribute software on Linux
has been sufficient.
It has not been.
We wouldn't be having this conversation if it had been.
And it's anti-intellectual to blame the core technology
for the developers' bad actions.
I think it's frustrating with the tone, too, right?
Because as you just said, Flatpak
isn't perfect, but it's a progression.
We're trying to get better.
We're trying to have more options for sandboxing,
for understanding what resources an application might need
and it should be allowed to have on your computer.
And yes, you can do that poorly.
You can not implement sandboxing.
You can leave things too open,
and we should be aware of that.
We should be aware that, yes,
when you do ship all your dependencies bundled together,
sometimes they don't get updated.
But that's already a problem in these platforms,
and we should talk about it,
but we don't need to throw the whole thing out.
How many Windows systems have old DLLs that get sprayed
onto their hard drive when you run the install wizard?
Or all Macs ever.
DMG files that probably ship with old libraries in them.
I'm curious what Popey thinks, though,
about my wild assertion that this is going to be
more of a problem whenever you have volunteer-curated
Flatpaks or Snaps, and that it really kind of relies
on the software shop to integrate the packaging
into their production pipeline.
Well, first of all, I'd say it's really unfortunate
that the person who had issues with Flatpak
decided to create a website and an ill-informed bit of copy
on a webpage and try and brand it as some security nightmare.
I think that's really not the way to go.
If you want, you can engage with the developers
and talk to them about the issues you have.
Supply code is the absolutely best way to go,
but otherwise, supply bugs or test cases
to prove the things you're trying to illustrate are wrong.
But I think the way they went about it
was just completely wrong.
And it really stirred up the whole sentiment
against some of these package systems
which are trying to solve problems.
I agree.
As you say, all of them are trying to solve
similar problems in different ways,
and this just wasn't really helpful at all.
100% agree with you.
You nailed it.
Now, my question, though, is do you think that,
I mean, the one fundamental truth that we could find in here
is developers may lackadaisically configure
their sandbox requirement,
and GNOME software could do a better job
of alerting users of weak sandboxes.
I installed a snap today via Discover on the latest Plasma,
and I actually got a warning that it was an unconfined snap,
and it asked me if I was okay continuing.
See, that's slick, yeah.
You should be asked.
That's how it should work.
Right.
So there's some obvious areas for improvement,
or not packaging really old libraries or failing
to update them, which seems like that is a volunteer issue.
There's a lot of things that need to catch up.
It's, you know, the guys who are working on Flat Hub
and AppImage and SnapD and all these other technologies,
there's a whole lot of legacy that they're trying
to drag through into the 21st century,
and some of that is some of the software stores
don't understand the concept of confinement,
and so they need to know how to present to the user
and make it possible for the user to make those decisions,
like whether that's in badges or little verified ticks
or however that's represented to the user
so the user can make an informed decision
exactly the same way as you do on your mobile phone.
You go into the Android store, you start looking at reviews,
you look at how many downloads this thing has.
Does it look like it's come from a reputable developer,
or is this like Mr. Joe Smith in, you know,
some random country in Middle Asia?
Like, you need to empower users with the ability
to make decisions to control their own computer
and control what software they put on their computer,
and that's what we're trying to do.
We're trying to make it easier for users
to make those decisions, and sometimes,
we're not quite there.
Things like GNOME software doesn't quite present
the information we'd like, which is why
we had a design sprint a few weeks ago,
and our designers are working with the upstream
GNOME software developers to improve that situation,
so it's all, it's in progress, but it's not,
we just haven't arrived at that final destination,
and I'm not sure we will anytime soon.
It's a rocky road, and we're all on it,
and we're all on it together.
There's no point us fighting.
That's why this flatkill.org, or whatever it was,
was not helpful, because it is in progress,
and it really is, it is sort of a shame,
because the issue, the reason why I'm sensitive to it,
and the reason why I say it's a bit of a shame
is because I've heard a lot over the years
via different methods of feedback
over the different shows that distributing applications
on Linux is a daunting of enough challenge
that a lot of developers look at it and go,
meh, nah, not worth it.
We talk about that all the time.
People driven away are just scared
to even figure out what's happening.
I mean, think about that.
That's where they stop.
I can't even figure out how to properly distribute
downloads from my website in a way
that's guaranteed to work across most of the distributions.
I can give you a use case.
A while ago, we were approached by a software developer,
and they had an application that worked on Windows,
worked on Mac, and they got a prototype working on Linux,
but they didn't know how to distribute it,
and we worked through building a SNAP,
but yeah, they could have chosen any technology.
They just happened to have chosen SNAP,
and we worked with them to get that in the store,
and they had to really sell it to their senior management,
because their senior management was not convinced
that Linux users would pay for software
or would pay for their subscription service,
and they weren't sure that it was worth the time
to invest to port the application.
I mean, it didn't need porting,
because it's all Python and Qt,
and really, it was easy to port.
It was just do we want to support it on Linux,
and it turns out they get better technical reports,
bug reports from Linux users.
They get better feedback from Linux users
and better engagement from Linux users,
and yes, those people do turn into subscribers,
so they are making money out of customers
who are running Linux, so it does work.
It can work, and we can help make it easy
for developers who are building software
to bring their software to Linux users.
It's not perfect, but we're certainly getting there.
I hope so, and it feels like we've made a ton of progress
in that direction, and it's a huge deal
to have Plex server available as a SNAP.
That's one of those things that has, I think,
converted a few folks to Linux,
like, all right, I'll set up a Linux rig in my garage
or in my office, and I'll try to get it.
Yeah, that's one of the first things people want to do,
but it's kind of been a pain to get going before.
Yeah, I mean, if you're not really familiar
with Linux at all, it's sort of daunting.
Now it's a SNAP command.
It's pretty cool.
I was pontificating with Wes earlier today
that I really feel like we're at a point
where for a lot of us that have been using Linux
a long time professionally, there,
and obviously this is broad strokes,
but for me, I've landed on a spot
where I feel like there's two desktops
that are right for a lot of us,
and I know a lot of people are gonna disagree with me
on this, but just go with me.
I think one of our greatest desktops,
surprise, surprise, is Plasma.
If you are willing to invest some time into setting it up,
I think it's a really great utility workstation.
It's a workhorse system.
It's kind of that classic Linux application style
where it has all the right technical fundamentals.
It's a powerhouse, but you gotta get to know it
and you gotta put in the time.
And you still find, you could be using it
a couple of months in and still find new features,
and you're like, oh man, I've been waiting
for computers to do that.
That's great, I didn't even know that was there.
I'm surprised I couldn't find that before.
Like, it's not maybe surfaced super well.
And then, and I'm not just saying that
because they're here, I think on the other end,
you have elementary OS, which is more of a complete,
cohesive package.
Where Plasma is a workstation desktop interface
that you can put on any distribution,
elementary OS is really best as a whole.
And you're really not changing and tweaking your themes.
You could, like, so in code, you could change it
from a light theme to a dark theme.
Like, there's a few areas where you can customize,
but it really is a very well thought out,
refined, out of the box experience
that's not really meant to be heavily modified.
That's what's good about it.
It's meant to just get down to work.
And you have these two really,
these two on the really, I think,
far spectrums of each other.
And in there, ironically, as maybe the most popular
desktop environment, is Gnome Shell.
As time goes on, Gnome Shell has improved,
especially in the last year or so.
It seems like it's gotten a lot better,
but things still need to get fixed up.
And one of the big changes that I think
will be really hard for users to process
is the eventual removal of the GTK theme support.
That seems to be the direction we're going in,
and there's a lot of really good reasons for it.
As a lot of people, like Joey at OMG Ubuntu, are putting it,
GTK 3 themes don't actually exist.
It is an irony, really, because there are so many
beautiful Gnome Shell themes.
The new 18.10 theme is great.
Yaru, and it's really nice.
It almost works, it's so, it's close,
and clever people have managed to hack this together
so that you get something that largely works,
but that doesn't mean it's how it should be.
So this, the way it actually kind of comes down,
and this is from Tobias Bernard,
who's written a well-reasoned article over on his blog,
writes that essentially what it comes down to
is GTK themes are exploiting a flaw rather than standards.
There's no API.
And here's a quote.
There is no clearly defined theming API.
There are CSS style sheets,
but they were only ever meant to be used
by the platform and app developers.
The platform style sheet is called Edwadia,
and that is for a reason, which Yaur is,
or how do you pronounce it, Yaru?
Yaru, whatever the Ubuntu 18.10 theme is,
is based off of Edwadia.
But essentially, themes are a hack.
They're kind of an attempt
to graft on a new look on top of Gnome 3.
And there is inconsistency throughout.
It's sort of like papering over cracks, really.
And then when you launch things like Electron apps
or Firefox, you see little areas
where it's not quite perfect.
There's no really best standards to adhere to.
App developers have no idea
what theme is being smashed onto their app,
so they can't plan for that.
And app developers then have to fix the bugs
that only appear in those custom themes.
So then they get the bug reports.
And then the theme devs have to patch around bugs
and app updates when they find them,
which probably is pretty hit and miss.
It's actually pretty busted right now.
And a lot of, well, I mean, all of the themes really
that you see out there in Gnome 3 land
are all based off of other themes,
because the hard work is actually getting it to work.
You gotta go in and raw dog hack the CSS of the Gnome shell.
Which are used by other things.
That's a huge API, very easy to cause conflicts.
I'm just, I'm really dying to ask Cassidy or Daniel about this,
because to me, this is a problem
that doesn't exist on elementary OS.
And it's a problem that desktops like Plasma plan for,
and they do have a system and support for it baked in.
And then on the other end of the spectrum,
you have elementary OS that just really sort of opted
to just come up with your own look.
And as a result of that, developers know what to expect,
and there is a consistent look.
But it did strike me that, boy, it'd be nice
if I could have a system-wide dark mode on elementary OS.
I had an itch to tweak a few things.
I think because I'm a long-time Linux user,
that just is what I come to expect.
Elementary OS is, in a sense,
making some hard design decisions for the user
that Plasma would let me fiddle with all day.
Yeah, I think I agree completely with Tobias' stance here.
And just the fact that we don't put any style sheet settings
up there, and we make sure that all of our developers
are publishing their screenshots
using the system style sheet and configuration,
does a couple things.
And one, it empowers them to do custom styling
that doesn't look non-native or doesn't break.
Some of the most popular apps in the store
have done really, really interesting things with GTK CSS
that they would never be able to do
if they had to assume that their application
can be styled any which way.
Yeah, the buttons may be somewhere
you completely don't expect or may not light up
the way you expect or have a text color you expect.
Yeah, so they've been able to do a lot of interesting things
with their own visual style and branding,
which makes these apps feel really refined and cool.
But it also helps when you go into App Center
and you're looking at screenshots of all the applications,
what you see is what you get.
It's never going to be some random style sheet
pictured in the screenshots, and then when you download it,
the app doesn't look like that.
You always get what you pay for.
I hadn't even thought about that.
I hadn't even thought about that you could be looking at an app
that has a totally, like in my case,
it would undoubtedly have a light theme,
and then I would install it on my box
and launch it as a dark theme.
It immediately is different than the picture.
That's not something that weirds me out,
but I could see it weirding out some folks
or not meeting expectations.
Well, especially when you've paid money for an application
and then you download it and there's
some great broken visual thing with it,
then you feel like this is supposed
to be a quality product that I paid the developer to get this
and it's broken out of the box.
Wimby, can I ask you about Mate?
Are themes implemented differently
on that era of the Mate desktop?
How does that work over there, or is it an ugly hack, too?
No, it's not an ugly hack.
It's taking advantage of the facilities that
exist in GTK 3 in order to use style classes to style widgets.
Which is how it is done on Qt, too, essentially.
Which is much the same way that the elementary folks
do things, although they prescribe a style sheet that
is part and parcel of the API of designing
your elementary application.
So in elementary, you get this prescribed,
consistent user experience.
And in Mate, because we appeal to an audience that
are used to having multiple themes and the ability
to customize things to their heart's content,
we have multiple themes that implement style classes
in different ways to change the look and feel of the desktop.
So the issue here is specifically what with GNOME?
In the write-up, I noticed particular focus
on client-side decorations, and the header bars
seem to be a major source of issue.
So is it these shell-side things that is really the problem?
It's not the actual GTK 3 applications?
Maybe Dan and Cassidy can answer this better,
but I suspect that GNOME are running
into a position that elementary solved long ago, which
is Adwaita on GNOME is part of the API of the GNOME shell
and the GNOME desktop experience.
But people using GNOME are still in the mindset
that this is a configurable, dynamically themeable thing.
Yeah, I think the hard part, especially for GNOME,
is that there is no GNOME OS.
So the most popular shipped GNOME desktop
is Ubuntu right now, right?
So it's not even shipping their intended visual style.
So when people are writing applications against GNOME,
they're not even really writing against Adwaita.
Yeah, it's interesting that that's the case now,
and now this conversation is relevant.
I think that's interesting.
I wonder if this conversation would be coming up
if it was Fedora that was shipping
as the largest GNOME desktop.
As Dan says, people are targeting effectively Ubuntu.
Predominantly, they're not targeting GTK or Qt at all.
Predominantly, they're using Electron.
The significant number of developers out there
are not writing GTK or Qt applications.
Electron uses a little GTK in there, I think, just a bit.
A tiny, tiny little bit.
No, Electron developer knows that.
No.
That's just an implementation detail.
No reason to concern yourself.
Well, that's fair, but I think we've experienced issues
where Chromium and Chrome, when you maximized it,
didn't have window controls for months.
And they shipped it like that because they only tested
against Ubuntu, and it worked in Ubuntu.
And that was how it worked in Ubuntu, and that was great.
And then on other desktops, it didn't work.
So I think even if they're not writing in GTK,
they're still testing against Ubuntu.
I'm curious to know how the world goes on if we
do go to a one-theme world.
I mean, we essentially are now, but nobody follows it.
So I don't know what they could do to make it a one-theme world.
But that seems to be the direction of the conversation
is make it Adwadia, and then everybody
knows what they're getting.
Is this a one-theme world for all of Linux
or a one-theme world for GNOME?
Yeah, right, exactly, for GNOME.
Well, for Fedora, basically.
Well, that's just it.
It seems to me that Sam Hewitt made a blog post about this
a while ago about how GNOME needs
to make a theming API rather than just screw everybody,
we're doing it this way.
The problem is that we had something like that with GTK2,
and it turned out that it was really restrictive.
And now we have this great API that's
great for application developers,
but it's bad when users touch it.
It empowers developers to have more expressive API available,
but it also makes the applications more fragile
when users try to pull those styles out
from underneath them.
So the reason why this is back up today
is Tobias Bernard, over on one of the blogs at gnome.org,
wrote a really good post on why these themes do not work.
And he showed a lot of examples.
Unfortunately, our friends over at System76
kind of take a beating, because he shows out
a lot of inconsistencies in Pop!
OS's theme, where certain buttons don't light up,
a block is hanging off randomly off the header bar.
And when he zooms in on it, you can really kind of see
the difficulties.
Then he shows some examples of some things coming down
the road in Nautilus that just don't even
render properly at all in the theme,
because the theme is going to have to be tweaked now
to support that new feature in GTK3.
And at the end of it, he basically devastates themes.
He really does.
Like, he's like, it's an ironclad case here.
And it seems to me that, and he even addresses, like,
for the users want themes.
And I admit, I'm one of them.
That's kind of one of the things I like about Plasma,
is I have all those theme options,
and I can just download them right off the thing
and install them and try them.
So the conversation is continuing.
And I have a sense it would be good for GNOME and the, quote,
GNOME platform, end quote.
But I don't understand how it would
be good for downstream distributions that
want to have a different look and feel,
so that way it looks and feels like Antegros,
or it looks and feels like Ubuntu.
Like, you've got to tweak it a little bit.
I think, I mean, that's always been the case.
Maybe everybody could ship the same exact looking GNOME shell,
but I just don't see it.
And there's no formal facility, there's no formal API
that they could be shutting down here,
because they never created one.
So people can just make the same hacks
they've always been making.
So I don't really quite understand
how they would even enforce it.
But the conversation's getting louder,
and I find it to be fascinating.
And I say, if you're going to make Adwadi the default,
you better keep investing in it.
Keep making it look great.
But it's a great post, and we'll have a link to it
in the show notes.
If you want to look at the examples,
and if you are concerned about this at all,
I really encourage you to read the post.
We'll have OMG Abuntu's summary of it,
and then we'll have a direct link to the blog post too.
In the show notes, linuxunplugged.com
slash 271.
Let's keep moving, though.
We've got a lot more to get into.
We've got much more.
A new version of DXVK is out this week.
It features some great improvements and support
for great new games that were either supported before
and broke or needed fixes, like Assassin's Creed and BioShock
and Dark Souls 3.
Some really good stuff in here.
And also today, the folks over at Crossover Office
released Crossover 18, which includes their DXVK support,
which is support for Vulkan.
What is it, takes DirectX calls and translates them to Vulkan?
Direct3D 10 and 11.
Thank you, thank you.
So that's in Crossover now too.
So they had another release this week,
so that's congratulations to them.
Oh, hot new tech.
Linux Academy is trying something kind of adorable,
and I thought I'd give a shout out to that.
If you are carving pumpkins with the kids, which we do it now,
two rounds of pumpkin carvings.
That's because we've got a practiced hand.
Oh, yeah.
Oh, I am the best gut scooper.
Are you putting tux on there?
You got a tux pumpkin?
Yeah, what's happening?
That is such a good idea, I can't believe in it.
No, I did an owl pumpkin last week.
Oh.
Yeah, for the little one.
And I didn't even think of this, but Linux Academy
is doing a pumpkin carving contest
if you want to win some gems, which you can cash in for swag.
I think you just hit them up at hashtag jackonlinux.
And oh, that's funny, because we're
going to be doing some jackonlinux stuff.
Jack-o-linux, jack-o-linux.
I'll put a link in the show notes.
If you're carving pumpkins and want to win some swag, why not?
I should have thought of that.
You know what I did?
And you guys can rip this off, and maybe you'll
see some swag, is my middle child wanted
to do a Pinocchio pumpkin.
So we looked up the picture on the phone
and kept it there while we were carving it.
But then the stroke of genius was busted off the stem
off the top of the pumpkin and rammed it in the nose hole,
so it's got a Pinocchio nose from the stem.
It was a pro move.
Also, just one more quick one this week, Chrome OS
in the stable channel is now getting Linux app support.
It seems like a huge deal.
And the folks over at linuxjournal.com
decided, well, let's install Gnome software
and then play around with that.
And they ended up getting that installed.
And so they could just browse Gnome software.
They got GIMP installed.
It is a Chromebook world out there, Wes.
You should get one.
You'd be hip down in Seattle with a Chromebook.
Oh, yes, I would.
Do you actually see many Chromebooks in Seattle?
Not really.
No, I haven't actually ever seen one.
Now that I think about it, I've never seen one.
But you should still get one.
It's weird to see it when you look at them installing it
and it just says, installing Linux.
Yeah.
Like, what a weird message.
But hey, I mean, stable, it's a big deal.
It actually means people might use it now.
Well, speaking of Microsoft, oh, wait.
No, that's just what Google is turning into.
Well, speaking of actual Microsoft,
huge news that everybody's been talking about
is that they contributed 60,000 patents
to the Open Innovation Network.
And I got to say that, as always, the response
has been wide ranging.
But the overall, I think, response has been tremendously
positive.
I have seen, I still am seeing tweets and people
in the chat room and people in the Telegram group
going, wow, they really have changed.
They really have changed.
Wow, this is it right here.
This is the big change.
It is pretty massive.
Have I talked to you all about this?
What are your thoughts on Microsoft contributing
60,000 patents to the Open Innovation Network?
Do you think it changes anything practically?
I mean, I think it had been hanging out there.
It had been a little bit awkward, right?
Because we've seen the Microsoft Loves Linux
campaign for a couple of years now.
We've seen their big open source pushes.
This sort of felt like a little bit of that old management
still there, or the mean corporate Microsoft.
And it's, well, we still got our patent war
and that whole Android situation.
So it kind of just feels like an act of good faith,
as sort of like, we don't need to play on this level anymore.
And let's just compete on software.
Yeah, but Wimpy, isn't this just a long play
to do the embrace part before you extinguish?
No.
All right, very good.
Here we have it.
OK, well, that's settled.
I'm not going to indulge any negativity around this subject.
I think this is remarkable that Microsoft
have contributed so many patents to the OIN
and is the most significant evidence
that we can point to that there is definitely
a cultural change.
Not just happening, but that has happened within Microsoft.
I agree.
These kinds of things inside companies this size
take a lot of people internally to make it happen.
Yeah, exactly.
There were a lot of cogs involved.
I'd be fascinated to know how this started.
Where's the advocacy coming from?
So we were going to ask that.
I did invite a couple of folks on the show.
They both attempted to make it work, but were traveling
and couldn't come on the show today.
I was going to ask them that.
So if I get the opportunity in the future, though,
I think the story is big enough, I
may still try to take them up on that when they're done.
Although, then we're running into holidays.
But it is a hell of a move by a company that was once
considered at war with Linux.
And it is true that it really only protects people
in the open innovation network.
That innovation network is free to join.
And it's a massive statement.
It's really also a messaging to developers
that you can use these core technologies, the core
technologies that, by the way, power Azure,
you can use those to build your devices.
And you can hook them all the way up to the Microsoft tools
chain, and we're not going to come after you.
That's really what the message is here.
And this is how they're signaling it.
That's really what this is about.
It's about signaling.
It's about positioning.
And I welcome it.
I say congratulations.
Huge story to them.
And will they stop going after Android ex-fat use?
Who knows?
Who knows?
But it doesn't really matter.
I think this is a good.
That separate would be great to see them stop doing that.
But separate of that, this is still a great move.
I remember the days when I would talk with Jeremy
from the Samba project.
And he would tell me how paranoid
they were constantly of Microsoft coming after them.
I can only imagine.
And then the monomemory around Mono, the paranoia around Mono.
I had to lose my tomboy over all that.
Tomboy was one of the best note-taking applications
for desktop Linux back in the day.
But it had the one sin of being a Mono-based application.
And then there was that, I don't know,
what would you call it, Popey?
There was like a mandate to rid Mono across Linux, right?
Yep, there was.
And sadly, some of those people worked at Canonical
and celebrated when Mono was removed from the ISO.
That may be very, very sad indeed.
And it was all out of fear of Microsoft's patent aggression.
That's what it was all based out of.
Completely mental.
Yeah, now here we are.
And it never materialized.
And they've contributed 60,000 patents
to a patent consortium that protects people
that use Linux technologies.
Just weird.
It's great, though.
It's great.
What's also great is this week, in just a few hours
from this recording, especially from the release
of this recording, Ubuntu 18.10 will be out.
It's a Cosmic Cuttlefish.
And it's got that brand new theme
we were just talking about and the latest performance
improvements to GNOME and GNOME 3.30.
And I kind of feel like, in a big way,
it's the best-looking, best-performing Ubuntu
I have ever used.
Couldn't believe it when I loaded it up.
And it had been a while since I was using GNOME, too.
So it was also my first back into GNOME.
And oh, man.
Oh, man, if it didn't make me kind of go, this is nice.
You had that same experience.
Oh, yeah.
I mean, it kind of feels like really hitting
the stride after 1804.
And then now things are just getting more polished.
And they fit together better.
And it's faster.
And finally, we're at home in GNOME as much as we can be.
It's really nice.
Super, super smooth, really good-looking.
And there's still a few areas that, long-term, I'd
love to see changed.
But I think it's one of the best implementations.
What are they?
Well, honestly, I'd love to see the installer redone.
I don't know.
I feel like it just feels a little.
It does fine.
But the last part where it's installing packages
and all of that, like the whole terminal box
is cramped and tiny.
The status information is not very useful.
It just feels like it could use a retouch a little bit.
And I don't know.
It's not horrible.
But it feels a little out of date these days,
compared to what some other distro installers look like.
Now, there's a lot of installers that are a lot worse.
So it's not a huge complaint.
Because it's, on the average, pretty good.
I think Ubiquity has stood the test of time.
And everything else is just catching up a bit now.
Yeah.
I think it just needs a little catch-up.
Yeah, exactly.
Also, I think it would be super cool to see a little nod
towards some kind of smartphone integration.
I just think that's a good end user feature, like GS Connect
or something like that in there out of the box
would be pretty, pretty sweet.
Some other features around that, too, I think
would be kind of nice, like integrating
with people's workflows and stuff.
I think Canonical, too, could be in a good position
to work with upstream cloud providers
to have more account integration.
I feel like that's something that would be really nice if I
could easily log in and get my calendar and my contacts
and all of that synced down.
I know it's been a long-term hope thing.
But it'd be really nice to see that.
Because that's something you do get on Chrome OS
or you will get on the Chrome OS tablet and stuff like that.
And you get it with Outlook and whatnot.
More people expect the cloud to be
sort of first class in their operating system.
But out of the box, beautiful, fast.
I didn't really have much more takeaway than that
because not only is it not out yet,
so I don't want to give it the full review,
but I've only had a few days with it.
But damn, really well done.
Wimpy or Popey, is there anything
in particular with the 1810 cycle
that you want to call out?
I'm thinking.
Anything, or anything with Mate too, Ubuntu Mate.
Well, Popey, do you want to answer for Ubuntu?
So from Ubuntu, I'm one of those people
who always try and stick to the LTS.
And then something comes along in the release after the LTS,
and it really makes me want to upgrade.
Yes, yes.
But, and I'm sorry to do this, the fact
that we now have snaps, I generally
don't need to do that because I don't need to upgrade.
I can stay on the LTS, and I can get all the new applications.
So I'm actually definitely staying on the LTS.
I love the work the desktop team are doing,
but I'm sticking with 1804.
Fair enough.
I actually think you could be on 1604 for the most part
and not really feel it these days.
It's kind of funny.
It's totally changed.
It's a different world from two years ago.
This is the lunch conversation that Wes and I had.
Exactly.
Wes was like, yeah, I just don't know
if I want to stick with an LTS because it usually
starts to feel stale.
I'm like, yeah, back in the day, I'd
feel like a distribution was stale three months
after release.
But today, I could be on 1604, and I wouldn't even feel it.
It really is true.
Well, what about that Ubuntu mate there?
Wimp, anything you want to call out for the 18.10 release?
So the 18.10 release, curiously, has really
got an eye on what will become Ubuntu 1804.2.
So one of the things that I've been making representation
for within the Ubuntu project, with the help
of the likes of Will Cook, is to land the necessary drivers
to have a really good AMD GPU experience in 18.10.
Because the hardware stack that exists in 18.10
is what will become the hardware enablement stack in 1804.2.
So we've lined everything up so that that stack
is in a good place.
And therefore, that's what's coming to 1804.2.
And from the mate point of view, all of the work
has been in upstream mate to fix lots of bugs in mate itself,
which all now exist in Ubuntu mate 18.10.
And that's a prerequisite having all of those fixes in 18.10.
You have to have all of your fixes in the current release
in order for them to be candidates for what's
called SRUed back to 1804.
So all of the setup for 18.10 is work
to make an 1804.2 that has got lots of fixes and better
hardware support in it.
Hold on a second here.
Hold on a second here.
So in a way, what you're saying is
you could view the dot, like the intermediary release
between an LTS, like the 18.10 release in this case,
as a cycle to build proper back ports to 1804?
Yes.
And certainly, so 16.04 was my first LTS with Ubuntu mate.
And we didn't do a great job of actually delivering fixes back
to 16.04.
And I've learned from that.
So I've used this 18.10 cycle as a means
to collect up those fixes to then start delivering them back.
Now, I'm not saying you have to wait all the time until 1804.2.
They'll start drip feeding out now.
But by the time 1804.2 comes out in February, all of that stuff
should have been back ported and available.
That's cool.
I love hearing that.
Because that means that if I just
want to stay on the previous install that I'm happy with,
I still get all the goodies that I really care about.
And then for fun, I've, so this is a little look
at how the sausage is made.
I've decided to do a little side project for Ubuntu mate for 18.10.
So as we record this in two days from now, 18.10 is released.
And I will be releasing bespoke images for the GPD Pocket
and the GPD Pocket 2 alongside the official releases.
So you got your hands on the new GPD Pocket.
How does it run on there?
How does everything run?
The GPD Pocket 2 is a huge improvement over the GPD Pocket in every respect.
So in terms of what it has inside it, it's
equivalent to a Mac Air Book in terms of CPU and all the rest of it.
Yeah.
Boy.
Yeah, it's the same.
It's the same CPU package and everything.
Wow.
And the thing that's peculiar about those, if you're not familiar,
these are milled aluminum netbook style devices.
So they're seven inch screens, although ridiculously,
they're 1920 by 1200 displays, seven inch displays.
So effectively, they're high DPI because of the size
of the screen and the pixel density.
So I've prepackaged these with the necessary,
and also the screens are rotated.
So if you don't make any accommodation for the hardware,
you get the screen displayed in the wrong perspective.
So these images have got the necessary rotations for the screen
and also the necessary rotations for the touch display.
Otherwise, where you touch doesn't level up
with the actual display itself.
And things like changing the font size of the console font.
So if you do switch to a TTY, you can actually read it.
And rotating the frame buffer so that when
you're looking at grub, for example,
that sort of stuff is correct.
And I've landed a curious little tweak
in the Ubuntu Marte image, which is
to use some funky features of the X server to do some scaling.
So obviously, 1920 by 1200 on a seven inch display
is teeny tiny.
But if you enable high DPI, it's too big
because you effectively get a 960 by 600 display
effective resolution, which is too small.
So I've used a quirk of the X server to scale that.
So you get something that's representative,
like 1280 by 800 effective resolution.
So it's still big enough to be useful,
but also large enough that you can actually see and use.
And that's hidden just behind the tick box.
So if you don't like that, you can just turn it off
and get the full native resolution.
Oh, that sounds like a really nice setup.
That sounds like it's going to be the best out-of-the-box
experience on this hardware.
Yeah, I like the original one.
But the community around the original GPD Pocket
has sort of fallen by the wayside now.
So that's one of the reasons why I've done this,
is to sort of reinvigorate that to give those people that have
got these devices somewhere to go.
But the GPD Pocket 2 is sort of brand new.
Their backers are just receiving those units now.
And you can buy them on Amazon and all the rest of it.
So I think it's a good time to provide
a good image for that device.
Rough estimation of the battery?
About 12 hours.
No.
No.
Wow.
Yeah.
They must cram a decent battery inside that little thing.
Yeah, it's a good battery, and it sips power.
So it's about 10 hours for the original model
and about 12 for the new one.
I've had both of them on a desk today.
Neither of them have seen a charger all day.
And they've got about 60% battery life left.
Yeah, that CPU is supposed to be pretty low power.
And I guess the keyboard, is it actually usable?
I mean, you can't fit two hands on it.
So in the GPD Pocket, in the original,
the key cap arrangement was just mental.
And the key caps themselves were wobbly,
and they weren't accurate.
And you could strike a key, and it wouldn't register.
And that whole experience was hideous.
Fortunately, although the keyboard arrangement
on the GPD Pocket 2 is still, let's say, quirky,
the keys themselves actually work well.
So it's just a case of learning the peculiar keyboard
arrangement.
But when you strike a key, it does actually
do what you expect it to do.
And having the two side by side, the GPD Pocket 2,
as somebody who does an awful lot on the command line
and with a keyboard, is leaps and bounds more usable
than its predecessor.
Well, I enjoyed your full review on the Ubuntu podcast.
So people should check that out, ubuntupodcast.org.
Rumor has it there will be a full review there very soon.
Check it out there.
In fact, I think it's already out.
So you might just go over there.
And if it's not, just download all of them
until you find it.
Just download all of them.
Keep going.
It was out on Friday last week, so you'd go and listen
to that right now.
Nice.
Well, that is really making me want one.
Well, especially if you're like an on-call engineer or something,
that would just be the perfect guy
to drag around with you, a terminal, wherever you are.
No kidding.
No kidding.
You know we could put Jack Audio on that thing
and make it a podcast, Rick.
You know we could do that.
I wonder how it would hold up.
It has a fan, right, Wimpy?
It has a little fan in there.
So Joe would still yell at me for it.
Yeah, so the original one is a software-controlled fan.
And interestingly, the second-gen one actually
has a hardware fan button.
So you can turn it on and off at will.
It's a bit sort of manual.
But it doesn't need the fan unless you're doing something
really intensive with it.
So you can turn it on and off.
And obviously, you can control the battery endurance
with that as well.
The perfect broadcast, Rick.
You can just flip off the fan.
I think that's perfect.
So there's another set of devices
that are getting an Ubuntu update of a different nature
this week.
The Ubiports project is getting down
a pretty good cadence of releases.
And they have OTA 5, which has finished up
some of the 16.04 LTS support.
You'll remember that phone versions of Ubuntu
are one LTS behind.
That's current for them.
And there's some nice improvements
in this new release.
And so we wanted to chat with Dalton from Ubiports.
Dalton is there.
I asked him what his title was.
And he told me that it was development manager.
So he is their development manager.
And we asked Dalton to tell us about the new release.
Dalton, welcome to the show.
Hey, thanks for having me.
So Dalton, it looks like the big news this week
is Ubuntu Touch OTA 5 is out.
What are the touchstone features in OTA 5?
Yeah, OTA 5 has made a bit of noise.
The big feature we've got out this time
is the new browser, that is the Morph browser.
This brings the Qt Web Engine, replacing the old Oxide Engine.
Both of them are based on Chromium.
But Qt Web Engine is a lot newer.
Oh, yeah.
And it also looks like it's got sort of a more responsive
design to it.
So it scales across different devices and screen sizes
as well, true?
Yep, we've always had the device scaling features
coming in with convergence.
But this just adds a little bit of extra sauce to it.
Yeah, I suppose that probably is true.
Is that particularly tricky with Ubuntu Touch?
Everything you put in has to be scalable to different device
sizes.
One of the tricks of the iOS platform is it's all fixed.
They keep adding to it, and changing it,
and adding notches and whatnot.
But it's essentially all fixed.
You can do dynamic layout, but you almost always
know what you're going to get.
But with Ubuntu Touch, there's really no way for you
as the development team to know, or the key developers,
has that been a challenge?
Or is technology to the point where that's totally doable?
So a lot of developers are getting experience
with this type of design with websites and mobile first.
But it is always kind of a weird paradigm
to get your head around where my app could
be used on any of these all the time, and it could change.
So some of the pinnacles of that design
include Deco2, the browser itself,
and a lot of other apps that we've got in our store.
That makes a lot of sense.
Yeah, right, these sorts of apps are more popular.
We're thinking about this already as people
making apps for end users.
I'm pretty curious.
It looks like from the end user perspective,
getting OTA 5 is pretty easy.
I can just hit Upgrade, get the latest OTA,
reboot, and be in the new environment.
How do you get to that level of QA?
How do you test this stuff so you know you're not
going to break people's phones, especially as a smaller team?
We had a lot of people doing a lot of testing.
I know for my part, I've got several devices here,
including the Nexus 5 and Nexus 7 tablet.
Those were going from 1504 to 1604 daily.
Wow.
It's just a lot of keeping that all straight
and making sure that it's all working.
And we have a great community and an excellent QA team
who is helping us out with that throughout the entire process.
That's great.
We also have the new Setup Wizard,
which helps you once you get onto 1604,
since apps aren't necessarily compatible between the two,
update all of your apps, make sure
that everything's ready to go.
Now, I was reviewing the roadmap on the website,
and it shows that really OTA 6, I think,
is what it's called, that's really
going to be a release that addresses technical debt.
I'm curious, what kind of technical debt?
So with the new browser, of course, it's brand new stuff.
There are issues with it.
So we have problems with if you try to change your home page,
when you click on the box, it flies off the screen
and weird things like that when the keyboard pops up.
Brand new stuff.
Bugs did find their way in.
So what we're trying to do with OTA 6
is just make sure that we take care of all of those.
So all of this work is pretty exciting,
but what are you guys doing?
What are possible approaches to increase awareness
so that more people who might be interested in this project, who
don't already know, might know to try it out
and use this great new release?
So word of mouth is always the most important.
If you do like Ubuntu Touch, get out there and talk about it.
We also have a few different outreach projects
for contributors right now with different channels helping
people get started with development, especially
on Ubuntu Touch.
Or Hacktoberfest is going on right now with DigitalOcean.
So we've got bugs labeled as Hacktoberfest,
which will be nice and easy for people to get started with.
I'm making sure that I put in instructions
on how to do the contribution, how to get started
with the workflow.
DigitalOcean's Hacktoberfest is being
used for a couple of different open source projects.
That's a great way to do it.
So Dalton, do you have a sense of about how many users are
out there in the world using Ubuntu Touch at this point?
Do you have a rough estimate?
One of the things that we put on our banners
while we're at conferences and things is,
we don't know who you are, and we want to keep it that way.
So we deliberately don't take that much data about users.
We do have inklings of information
from our push server, which sends out notifications.
But we don't have terribly hard numbers on that.
What kind of infrastructure does that take?
And is that a cost that is being covered
by a particular sponsor, or is that something
the project is fronting to run the push servers
and the OTA stuff, the back end stuff?
A lot of our server infrastructure
is sponsored by different providers, DigitalOcean,
packet.net, and Scaleway.
So we do have a lot of that covered for us.
The push server itself is actually running
on DigitalOcean's smallest VPS.
Luckily, it is very light and does its work very well.
However, for the larger things like system image, which
actually does the OTA upgrades, it
is a significant bandwidth cost.
So we are appreciative of our sponsors and also people
who support us on Patreon.
Very good.
Patreon sounds like a good way people could directly
support the project.
What's the URL for that?
It is.
If you want to find links to sponsor us via Patreon,
Bitcoin, or a few others, that's ubiports.com slash
donate.
I love it.
Still repping the Bitcoin, even at $6,400 of value.
You're a good man, Dalton.
So Dalton, I've got a couple of links to your GitHub page,
MrUniversalSuperBox, and other things in the show notes,
like the Ubiport site, the news about the new OTA5 release.
Is there a Telegram group or any other communities
you might mention that people are just
starting to get curious about Ubuntu Touch
they could go check out?
Yeah.
You can always join us at at Ubiports on Telegram.
We're Ubiports on most social networks,
including Twitter, Facebook, Mastodon, and just about
anywhere else you'd expect to find us.
Very good, Dalton.
Well, thanks for joining us on the Unplugged program.
Thanks for having me.
I follow the project with some interest
because it seems to me, although there's a few others out there,
you got your Plasma Touches out there
and you got your Purism efforts, I acknowledge.
But I really feel like Ubuntu Touch could
be a great alternative one day for that general purpose Linux
distro that you can get a piece of hardware and load it on.
So it's fascinating to watch the project work this stuff out.
And then from my perspective, I'm like, take your time.
Get it right.
Yeah, I want to come back in, I don't know, a year
and just maybe have a tablet that runs that I leave around
my house and I have on the couch every day.
That'd be perfect.
That would be.
That would be pretty neat, pretty neat.
All right, so speaking of things that are pretty neat,
we have something that we're working on behind the scenes.
This whole production pipeline that we have
is manual labor intensive here at the network.
And now that we're part of Linux Academy,
one of the things that we want to try to do
is give back anything we really can of our process
to the community.
Eventually, perhaps, being able to go,
depending on our time and resources,
be able to go essentially to the level of a guide
you could follow to start podcasting under Linux,
how to record, how to get decent audio, how to publish it,
and then even some tools and scripts
to help you automate some of the trickier parts.
That's sort of our end-to-end goal way down the line
as we build these components.
In some cases, we'll just adapt existing projects.
In other cases, we might create our own.
And we're beginning this project behind the scenes.
It is really an automation project
to make the process of deploying our episodes as error-free
as possible, to take out the human element
as much as possible, and to make it so when whoever edits
the show, like in this case, it'd be Joe,
when he hits the Publish button, it's
immediately available on all of the destination platforms
that we publish in all of the feeds.
It doesn't require any human intervention, which right now,
Joe can publish it.
But then somebody here in the JB office
has to go actually publish it to the feeds,
publish it to the website.
There's a lot more manual.
And it's a lot of copypasta, a lot of filling out feeds.
And eventually, we want to get it
so it automates the encoding, the publishing, and even more.
It's the whole pipeline from going from show notes
to the website.
All of it just is completely automatic.
And this is going to be a modular monster
that we build over time.
And Wes is starting on the first parts of it right now.
And once we start to build this, we'll build it in phases.
We'll build the most time-critical components
that we need automated.
And then we'll start adding on, doing encoding.
We want to circle back eventually.
If you watch our videos on YouTube,
we have automated renders that have the album art
with a waveform that's like 13 frames a second, which
is for file size.
The beautiful thing is those files are like 75, 80 megabytes.
But the downside is the frame rate sucks.
We want to start using the videos
that we use for like Linux Action News, which is manually
artisan handcraft encoded by Joe.
Each and every week.
But we want to automate all that and improve that and make
our process just a little more slicker, a little easier
to get shows out the door.
And then we want to release all of it.
So to start, I have a couple of bits
that I want to draw your attention to.
Number one is we need a name.
We need a name for a system that automatically publishes shows.
And I'd like it to be something we could refer to on Air.
It's like we have JBot, for example.
We have these other components, which
are well-known components because we've named them.
So I'm trying to come up with a good name for this system.
We've got a code name, but I don't even
want to say what it is.
I don't want to even spoil it with the code name.
So we've created a form that we'll
have linked in the show notes, linuxunplugged.com slash 271.
I also just linked it in the IRC room.
And it's just, what's your nickname?
Because you just want to give somebody credit.
And what's your suggestion for the automation system's name?
What should we name it?
And I think if we get a bunch of good ones in there,
we'll take like the top five or something,
and then we'll put it to a vote in the episode
when I get back from EPSD, if I survive all the Linus jokes.
But we need your help.
We can't do the naming and all the work of doing.
We tried, actually.
That's just too much.
We tried, and we already bombed.
We couldn't come up with any names that were catchy that
would be like a good term.
Because the idea is we're going to publish this up
on our GitHub page, and we're going
to make it available for anybody that
wants to make it a system that automates from show notes
to publishing.
And that's a pretty nuanced process, especially one
that involves album art, and tags, and descriptions,
and chapter markers, and videos, and MP3s, and YouTube,
and CDNs, and a lot of different services
that need integration.
Yeah, so there's a lot actually to it that solves problems.
And so we want it to be available,
but we want it to go by a name.
So we're hoping you'll help us name it.
And then we have a bit of a direction change.
And Mumble Room, this is completely
open to your interpretation and your pushback
if you think I'm making the wrong decision here.
So floor is open to dissenters on this next one here.
But I had me a think recently.
It's funny really how this kind of works out.
So Eric, the IT guy, has dutifully
built us a very nice GitLab instance
on a pretty beefy DigitalOcean droplet.
And I bought a cool domain, jupytercode.io, right?
I mean, that's pretty cool.
And we were all pretty hot to trot on this.
And it really came up right around the time
Microsoft announced their purchase of GitHub.
And the infad thing to do was to abandon GitHub
and go grow your own GitLab instance.
And we thought, yeah, we should do that, too.
We should be hosting our own stuff.
And so he built a great one, and we got backups turned on.
I mean, it's really well done.
We've got some projects on there we started with.
And I started having a think last night.
And I was chatting with Wes.
And I was looking at our public GitHub page,
github.com slash jupyterbroadcasting.
Like, you know, there's the caster soundboard on here,
which I'd love for it to get more attention.
There's the Roku app on here.
There's the Kodi plug-in on here.
There's already groups and people that have been involved.
There's open issues.
Like, this page has been cultivating a small community.
And the reason we were standing up a GitLab instance
was because of this anti-Microsoft hysteria.
And I started having this conversation with Wes.
And I'm thinking, is it actually easier for discovery,
for the general public, if we have it on GitHub
when people are looking for this stuff?
Like, if we build a few tools, because this automation system
is one of a few tools we're going to be talking about soon,
we're going to talk about another tool next week
that we're building.
And we're going to also release this open source.
And by the way, we mean GPL.
We want it to be publicly discoverable.
We want it to be something that people can get easy access to.
And so I just asked Wes.
I'm like, pros and cons here, Wes, versus GitLab versus GitHub.
And we had a few back and forth.
Like you mentioned, there's a few tools
we could probably use with GitLab
that we might not use with GitHub.
I don't remember exactly what they were.
I mean, there's a lot of integrated services
with GitLab, right?
There's CI stuff.
There's a lot of tweaking you can do,
because it's a thing you're running yourself.
And GitHub's not that way.
Plus, there's the geek credit of running something yourself
versus using a hosted service.
And it was all open source.
So we were talking about the pros and cons of it.
And sure enough, I go over to RLinux,
because I'm having a chat with Wes in one tab.
And then the other time I go over to RLinux,
I'm just kind of putzing around while waiting for his thoughts.
And I see a thread in there.
And it's all caps, reminder, migrate off of GitHub.
And then it's a thread of over 100
reactionary, knee-jerk, anti-Microsoft comments.
Nobody's giving a good technical reason
why they should migrate off.
Everybody is just knee-jerk reacting
to the Microsoft purchase.
They just hate Microsoft.
And I think I don't want to be part of that anymore.
At what point do we allow for the possibility of change?
Open source and free software should
be as much of a social thing as it is a technical thing.
And at some point, we have to own up
to that social participation factor.
If we don't, we just seem bigoted and stuck in the mud.
And I'm sorry if that comes off as offensive.
But when I read that thread, I was offended.
I couldn't process it anymore.
It was just hate for hate's sake.
There was no logical argument.
Like, the reasons we were bringing up
were like control over our own instance,
integration with external tools, the geek cred
for having itself hosted, being divorced
from a commercial platform.
Like, those were the advantages.
But that thread had none of that.
It was just the Microsoft hate.
And then I felt a little dirty for even taking this endeavor
because of it was just the thing to do.
It was the end thing, the wave to do.
It was like, let's do it.
Let's do it.
And Eric was more than willing to build it for us.
And so we ran.
And then I look back at it now after a cooling off period,
and I thought, we could actually be doing ourselves harm.
There's a community that's already establishing and growing
there.
There's people that have already been submitting issues.
There's developers who are contributing things.
And it's discoverable on a public forum.
And in the end of the day, it just doesn't make it confusing
either shifting everything or having stuff in multiple places
was just more complexity than we were getting benefit out of.
And we constantly have to make decisions over,
when do we use services?
Or when do we roll something ourselves?
And this just isn't a huge part of the stuff.
Like, we're not running a GitLab.
It's just not something that we need to be doing.
And if there's a point in time that we want to,
GitLab's great.
And we would have no problem using it.
It's wonderful that we have that opportunity and that option.
We may even keep a mirror just for our own backup, really.
Something we've been checking.
Well, maybe we might keep it, but just for ourselves.
That's something we could totally do.
By the way, if in next week's episode
we mention the GitLab URL, sorry about that.
We recorded that before Future Chris had
changed his mind on this thing.
So I don't know if that might be confusing.
The show notes will be accurate.
So you can go get actual links, even if we say the wrong thing.
You know what we should do is have Joe go back and just
record over with the right URL, which would be hilarious.
It'll be Joe's voice.
Yes, that would be so good.
No, but really the URL you want to go to
is going to be github.com slash Jupiter Broadcasting.
And there's a couple things that are coming there right now.
There's a new project that's up there that we'll
be talking about next week.
That already has a name, so that's up in public.
And there's a couple of things that I myself
have committed to it that I was so proud.
It's possible because it's all Bash script in that case.
And then Caster Soundboard is back up there again.
And boy, oh boy, I would really love it
if people wanted to take a look at Caster Soundboard.
It could use some love.
It is a great piece of software with a ton of potential.
But the UI has got a lot going on.
And it could really use the ability
to select sound interfaces.
The great thing about it is the changes
and builds that people commit get packaged up as a snap.
And so it is available still as a snap.
So that's actually been something we've
been able to use here in Studio.
It just has a few tweaks.
Like not being able to change the sound interface
is a killer one for us.
But we have projects up there, including Kodi plugins,
all of it.
We're going to try to start coming around to over time.
Our mode of operation right now is
we're going to fix a few things in our own house,
clean up a few things, get that built,
get that up on our GitHub page, and make it available to people.
And then over time, expand out from there, start new projects.
But also, we want to start contributing in other ways
to other projects, maybe not just in code,
but in other ways.
So that'll all be stuff down the road.
But for right now, it starts with you helping
us name our automation system.
We'll have a link, linuxunplug.com, slash 271.
Or I'll drop it in the IRC again if you
want to go submit a name.
And then maybe we'll vote in a couple of weeks
when I get back.
Pretty excited about that.
But what do you guys think in the Mumble Room
as far as abandoning my plan to go to GitLab
and sticking with GitHub for now?
Does anybody have initial thoughts on that?
Well, the thing that I would say is that the GitLab has
a lot of more tools and better issue tracking.
You can switch around issues and everything.
So in that regard, I really like GitLab for that reason,
not because of Microsoft owning whatever,
but because of the tools.
And I would say that Microsoft buying GitHub
was a push to test out other stuff.
But I think the test really proved it valuable.
Yeah, I think that is one of the parts I'm
the most concerned about is I was really dreaming up
some great uses for the issue tracker stuff.
That was an area I thought we could expand quite a bit.
So maybe that's an area we still use it for.
Right.
I mean, this doesn't have to be permanent.
I think the biggest thing is just
I think we realized a little bit that we had some stuff, more
stuff going for us over at GitHub that we realized.
So we can build and grow there.
And if we decide that GitLab is a tool that we really
want to use, well, we already have it.
Yeah, it seems like it's worth keeping around
for other reasons besides just the projects,
but also as sort of like a backup.
And people are right in the chat room
that, yes, GitLab also runs their own service as a website.
So we could go host it over there.
I think that's a little more comparable to just using
GitHub.
Due to that, it's just feature sets
because they're both proprietary services.
It comes back to the same old frustrating argument
that seems to be particularly hard for the open source
community to have, and that is the network effect.
That's why people still log into Skype.
That's why people still use all of these services that
are closed and spy on you is because of the network effect.
And that was the realization I had.
It's not like it's huge over at GitHub,
but it was beginning to roll.
And people were interacting with it,
and it was seeing some success.
And I just thought, it's already starting
to experience that network effect.
Plus, you have the overall network effect
of being on the GitHub site.
People might, in some cases, just
assume that's where you go.
And so to me, that was the cincher.
But I'm not totally convinced.
So it's an area that's open for future consideration.
And the nice thing is, until we get super in-depth with things
like issues or wikis or other formats,
as long as we're just using it for repo hosting,
all of this is easy to change.
Yeah, we have such a cool thing that we're
working on right now that we'll talk to you
about in next week's episode.
But before we get out of here, I wanted
to tell you about this Photoshop for Linux replacement
that I found.
Really, for Linux, that's not fair.
That's not.
I mean, you can use it on Linux.
So that part's true.
You could use it on any desktop.
You sure can.
I'm going to say it's pronounced Photopea.
What about Photopea?
Photopea.
Oh, you're right.
It's probably, god, I'm so proud of that.
Honestly, I read it the same way that you did, though.
I don't know why.
And I don't know how, maybe they don't have guidance.
No, no.
No, no.
There's no reason to pronounce it Photopea now
that you say Photopea.
No, you're completely right.
You're completely right.
It's funny, because you just don't really,
you never know what's going to come out of my head.
You never know what it's going to come up
with when it reads something.
So I just kind of roll with it.
This looks a lot like Photoshop.
And it's in your web browser.
Now, I'm going to just put that out there.
It's in your web browser.
Calm down, because I know about GIMP.
Calm down.
I know about Inkscape.
Calm down.
I know about Corita.
Let me explain myself here.
You see, class, as I switched to Linux a while back,
one really sticking area that I've always been fiddling with
is all of the PSD files that we have.
Every artist who's ever created anything for us ever
has always sent it in a PSD file.
We might get an SVG file.
The only time we've ever received
a logo that wasn't in PSD was the time
that Dan refreshed the user error graphics
and sent us something that was.
That's literally the only time is when Daniel sent us
something.
And I assume because he made it under free software.
I don't actually know what tool it changed.
I don't think he told me.
But anyway.
He ducked out.
It's probably Inkscape, though.
Yeah.
OK.
Thanks, Cassidy.
Anyways, that's literally it and everything else, everything
from any of the shows we've ever had, any of the individual assets.
They're all in PSD files.
And for the most part, anything that
involves complicated text editing really falls down
in GIMP or Corita.
Corita won't even edit the text.
It just doesn't even happen.
It'll display it, but it won't edit it.
GIMP has an extremely hard time.
And initially, I thought I'd be OK with the GIMP support
because most things seem to be working when I would open up in GIMP.
As time went on, I realized, especially as I would go back
to some of the older stuff, it, in some cases, was butchering it.
And I didn't know it until I would render it out and save it.
And then I'd send it to somebody and say, what the hell is this?
It was kind of embarrassing because I sent it to a graphic artist.
And I'm like, what the hell is this?
They're like, what are you talking about?
It's not that bad of a logo.
I mean, I know I think it could use a refresh.
And then they sent it back to me.
So I essentially started down the path of trying
to get Photoshop working under wine, which, boy, is that a backache.
Just a lot of one.
If you can get your hands on Photoshop 7, which I could not.
You know, I don't spend a lot of time checking the backs of trucks
on the internet anymore.
Free Software has dulled my skills of finding Windows, Juarez.
And so I could not find Photoshop 7.
It made me feel like an old man.
And trying to get Creative Cloud installed under Linux is a joke.
So I'm really glad I'm getting the full benefit out
of that Creative Cloud subscription.
Kept digging around for alternatives, trying to figure out if I could just
really what I did is I spent the most time trying to make it work under Kim.
Eventually, though, I came around to Photopea, Photopea.com.
It was a bit of a shaggy dog discovery because I first discovered them
on GitHub as I was going through GitHub looking at different projects
and their PSD support.
And they have some open source projects, which maybe I'll get
Wes to talk about here in a second, but their main core application
is not open source.
It is closed source.
And so I just happened to check out their website for some reason
and discovered that they basically have built Photoshop in the web browser.
And it has full support for PSD files, for GIMP XCF files, for.sketch files,
for any SVG, TIFF, JPEG, PNG, DNG, you name it.
It's got support for it.
And it'll open them up from your local machine.
You don't have to upload it to a cloud storage first.
It'll upload it from your local file system.
Yeah, this all just happens locally.
It's just a JavaScript app running.
There's not a cloud component.
You can actually disconnect your computer from the internet
once this app is loaded.
And as long as you don't close the tab, it will continue to work.
It's pretty great.
And I was able to open up a Photoshop file that has always only worked
under Photoshop.
I'm telling you guys, I was getting so desperate.
I was preparing to do the Mac in the cloud.
Have you heard about this service?
I do.
This is something that Mike told me about on Coda Radio.
This is his solution, because he switched over to elementary OS
as his daily driver.
But he's still got to build and sign iOS applications for his customers.
And you've got to be on a Mac.
So he got a Mac and a cloud subscription, where it's just like a Mac mini
that he gets accelerated remote desktop.
So there's just some racks of Mac minis out there just so people can do them.
Yeah.
And he's able to do it through his web browser on his Linux desktop.
Nice.
So I was thinking, that is a ridiculous way
to get access to all of these legacy PSD files.
But I was starting to consider it, because about once a week,
I need access to something in this catalog.
And I generally need access right away, because it's
somebody asking me for something, or a show needs to go out,
and it needs something.
And I thought, OK, maybe this is one way I could avoid this.
If I can't find Photoshop 7, I was desperate.
So when I came across Photopea, and I opened up that PSD file,
I edited that text field, and then I saved it out as a JPEG,
I signed up for the Pro account.
And I got you in there, and I got Joe in there,
and I got Brent in there.
So that way, we could all try it out and really kind of kick
the tires on this thing.
And before we get into some of the open source projects they're involved in,
I kind of want to hear what Brent thought of it.
Because I got to imagine there's been times, Brent, when
you're working with photos, you've wished that Photoshop
has been available for Linux.
Not that GIMP isn't great, but that's got to have crossed your mind.
And I'm wondering if this scratched that itch a little bit,
or if it fell short for you.
Good question.
My first reaction to this was, well, it's not actually that interesting to me,
because I've been on open source software for such a long time,
and I work basically all in my own little silo.
But then I was thinking about all these little edge cases.
And I remember when I was switching from Photoshop
and those proprietary tools into open source,
it was this strange gray area where a lot of the work that I was doing
was still in PSDs and things like that.
And then I was trying to move over without necessarily having
a license to the software, because I was trying to get away from it.
So then I thought, oh, wait a second.
This actually might be really useful for a lot of people.
And surprisingly, it is fairly functional for, I guess,
what could be described as a web application.
Yeah, I opened up some PDFs in there, opened some various just random images
that I have.
It's pretty nice.
I will also say that they do a good job.
It's fairly responsive, especially for a browser app.
And when you're loading something like a PostScript file or a PDF
and it doesn't have the right fonts, it's very clear about what's happening,
which ones you're missing and what it's substituting.
Yes, thank you for bringing that up.
Because one of the things it will do is it will go out
to various resources on the internet and try to match it.
And if it can't, it'll try to match it with the closest free alternative,
which is pretty neat.
That is nice.
It's a nice system there.
So all in all, Brent, any other impressions you took away from using it?
Did it feel like a decent tool to you?
Or did it feel a little weak?
Yeah, when you asked me to look at this,
I actually ended up taking a whole bunch of notes
because I thought, oh, jeez, this is really interesting.
So my first observation is that I ended up
using a whole bunch of keyboard shortcuts, which
is how I usually use GIMP or Darktable and things like that.
But I ended up about half of them worked in this web UI, which was great.
But then I kept trying to zoom in and stuff, which is just control and scrolling.
And then I ended up, it didn't quite work.
So I took that at first like, oh, that's kind of a bummer.
But then I thought, oh, wait.
I feel so at home in this web app that my brain doesn't even
know the difference between using the web app and a native application.
So I thought, oh, jeez, they're doing a good job here if I can't even,
you know, I forget after 30 seconds.
Yeah, you could wrap it up in a Native Fire script
and get away with thinking it was a local application with layer
palettes and colored settings.
It's a complicated UI.
I mean, it's an impressive little app.
And so they do have a few things they're contributing open source
that you found.
Yeah, they have a GitHub account.
I mean, again, it was easy to find as a result of that.
Just nothing crazy, but they've got some typesetting scripts
to work with OTF or TrueType fonts.
They've got a TIFF decoder.
You can go poke around and see.
It's a lot of gnarly JavaScript.
Yeah, it's some really complicated stuff.
But then again, that's exactly the kind of thing
you want somebody else to do all the hard lifting on.
I was excited, honestly, just for, you know,
there's all kinds of, I know how to convert files, right?
I know how to use GIMP.
Like, if I need to make an ICO or I
need to convert something for someone,
I have the tools to do that.
But if you already have access to this,
it can also be really nice for users when, like,
you can load from a URL, then you
could quickly save out another file
that you needed to convert, even on whatever computer you're at.
So that part seems nice, too.
There's a couple other interesting things about it,
just as we wrap up.
Number one is they offer it as a white label service.
So you can white label this and re-post it.
And then they also offer a decent API.
So you could.
We'll have to play with that.
Yeah, it's a photo editor with an API in the web browser,
Photopea, if you want it, P-E-A, if you want to try it out.
And again, I'm not saying it's replacing your GIMP.
I'm saying it's supplementing when sometimes that PSD
file just won't open.
Or you want something that works a little bit more
like Photoshop 7.
So if your brain knows that Photoshop 7 style layout,
this is pretty much it.
It's like Photoshop Lite a little bit.
Just the stuff you actually used in Photoshop.
There are two other things I really liked about it
that I just want to mention quickly.
One of them, which is I tend to read terms of services
for these things.
And it was nice and short and concise.
But one of the things I loved was one of the first lines
was the content is yours.
These terms, I'm going to read it now.
These terms don't grant us.
And we don't claim any ownership rights on your content,
which some of the other applications,
it's a gray area there.
Yeah, good catch.
Good thinking.
I bet you would check that.
Well, that's an important part of any creative audience.
But then the other part that, Chris, I think
you would really like this is if you end up
logging in with one of the accounts
that they support, which is Google or Facebook or GitHub.
GitHub I thought was interesting.
But they will store your preferences
across different sessions.
So you can be on multiple computers
and still have all of your preferences
synced between all of those, which I thought was great.
I do like that.
I do like that.
That is, this is probably how I will be tweaking show art
while I'm on the road, I think, to meet BSD.
I think this is what I'm going to do.
This is probably it right here.
Well, thank you, Brent, for taking a look.
I like that.
Go get more Popey and Mr. Wimpy and Mark II
over at the Ubuntu podcast.
Wimpy, you know what you ought to do
is you ought to invite that Dan Fore guy on the show.
And you should ask him the really hard questions.
Spoilers.
I'm just saying you should think about it.
Just think about it.
I'm not saying.
Already thought about it.
Oh, OK.
Check back in in two days' time.
Oh, you know.
Are you kidding?
I listen on day one.
I listen the day it comes out.
I will.
Yeah, I listen on Thursday.
Good, good.
And Cassidy, anywhere you want to send folks to check out,
I don't know.
You got a new release.
You got a Patreon page.
You got a lot going on.
You got a machine.
You're raising funds for anything
you want to just give a plug out to.
Give it out there because you've stayed for the whole show.
You deserve it.
I mean, just head to elementary.io to check out Juno.
And there's the release post is linked to from there.
And otherwise, you can find me at Twitter.com
slash CassidyJames or over on the soon-to-be-dead Google
Plus at CassidyJames as well.
Too soon.
Hey, you know what?
By the way, I was following your tweets about the Pixel 3
camera.
You are right.
That is some amazing stuff.
It's pretty bonkers.
It is.
It is.
So Cassidy was calling out some of the tricks they're doing.
It's just incredible.
You're going to make me get one.
Yeah, yeah.
Go read his Twitter feed.
You're going to be pretty impressed.
All right.
Well, I'll mention my Twitter.
I'm at Chris Elias.
He's at Westpane.
You can go get more of him at techsnap.systems.
And of course, everything we talked about today
linked at linuxunplugged.com slash 271,
including your name submissions for our project.
We really do want those.
I'll be out at MeetBSD next week,
but we will have a recorded episode released for you.
And then I'll be back the Tuesday after that
with our regular live show.
So do come back.
Join us in that virtual log.
You can just Google Mumble Jupiter Colony,
and it'll come up.
It's easy peasy.
And then the chat room during the show is irc.geekshed.net
pound hashtag.
Number sign, Jupiter Broadcasting.
You go in there, you chat with us.
We chat with you.
It's a good show.
It's a good time.
But it's even better if you're there.
It's even better.
Thanks for joining us.
And we'll see you right back here next Tuesday.
Take care.
Oh, it's a big show. That's one of our longer ones just happen, and I just told John
I'm gonna try to keep it to an hour 10
You're just trolling a male. You know what's funny is we recorded two Linux unplugs last week
We had the regular show and then we had to make the the makeup show for the week that we're I'm out and we're like
What the hell are we gonna talk about? We're gonna have no show next week. We just did two shows boom
There's a huge show but echo we were talking on the pre show about KX studio a little bit
Which has been helpful and we're gonna talk about that next week a little bit
It's been helpful for us here in the studio
And you were saying that that is a one-person shop over at cake studio, which is mind-blowing. Yeah, it's a fault
Fuck FA out. I forget. He's like super cool in the IRC. He's been really helpful
Although man fuck TX otherwise known as Felipe Kaleo. That is that wow that is amazing a lot of hard work
It's a kick studio is a great set of plugins and repositories and packages to make audio production and real-time audio production
Doable under Linux and it's a big part of what we're using these days. So oh man, that's great
that's it's amazing what one person can do in open source and
At the same time makes you really want to go over there and contribute somehow. It really does

OK, so we haven't come up with a preshow in the meantime.
I think this is the preshow.
No, can't be the preshow.
This can't be the preshow.
Hello, friends, and welcome into Linux Unplugged episode 383.
This episode is brought to you by a cloud guru.
You know, there's so many career possibilities in the cloud and so little time
where cloud gurus' learning paths help you take the right course to prepare for the cloud
to become a developer, an admin, or more.
Get hired, get certified, get learning at a cloud.guru.
My name is Chris.
My name is Wes.
And this is Linux Unplugged.
And it's a big show today, Wes. We've got a lot going on.
And I don't know, I thought maybe this could be an episode where we just didn't even have to prepare at all.
Like, we just sit back and let everybody else do the work for us.
Because this is one of those fun ones where we're bringing in different people for different topics.
So, Alex is here from Self Hosted. Hello, Alex.
Hello, there.
Hello, sir. Thank you for joining us.
He's going to be showing us something pretty darn neat that you can do with the Raspberry Pi.
He has turned the Raspberry Pi into a KVM.
You know, the keyboard video mouse kind of KVM.
He's going to tell us about that in a little bit.
So, that should be pretty exciting.
Also, Hector Martin joined me earlier this week.
He's the developer that is looking to port Linux to the Apple M1.
And I asked him some common questions that people have raised
a few of my own concerns and we had a great chat.
And that will be coming up in the show in just a little bit.
But before we get to that, we have community news.
And before we get to that community news, well, it is my duty to say holler over to that virtual hug.
Time appropriate greetings, Mumble Room.
Hello.
Hello.
Howdy.
Good evening.
It's a big crowd today.
A wonderful crowd. Wow. Impressed.
Did you bring enough snacks for all of them?
I better start working on some more.
I think we should keep them for ourselves, Wes.
I would take some more of that smoked Chex Mix that you had the other day.
Takes forever.
Takes forever to smoke the Chex Mix.
Takes forever.
All right.
Well, we have really just one big community news story we're going to get to today.
So, before we dive into that, I want to remind you that you still have a little bit of time left
to cast your nominations for the 2020 Tuxes.
Linux Unplugged is asking you to nominate your favorite projects.
And we kind of use that term loosely in this context.
So, it could be, you know, you could probably include devices in there and web services,
but nominate your favorite devices and projects for the 2020 Tuxes.
And we have a couple of different categories in there, like the best project,
best open source project of 2020, the best new coming project of 2020,
your favorite text editor of 2020, your desktop, your distro, and a few other things in there.
And the idea is we want to collect as many of these as we can.
Then our board will review them, and then we will award the Tuxes to the different categories
at the end of the year, and then give them a special treat with a note from the Unplugged community
thanking them for making something so great.
It's a nice little way to spread some cheer and have some fun and recognize some projects
and maybe get a few awesome projects to try out.
Yeah, we're going to forget all the really good ones unless you guys help us.
We need some good tips.
Not only that, but the submissions are coming in, and I've seen a few.
I was like, I never thought of that.
Exactly. Yeah, so much more creative than we are.
I think I know which one is yours.
I think I can tell.
It might have been Drew, but I think I know it was yours.
There's maybe a slight bias, yeah.
So we'll have a link in the show notes at linuxunplugged.com slash 383, right?
That's the episode, right?
Yeah.
And it'll be at the top of the show notes, and you can go cast your votes.
But we do have to get into the community news today.
And I wanted to get enough time in the community news to kind of give this some room
to let us kind of think about this and air it out,
because it's going to have some ramifications.
And it broke today.
This is CNN Breaking News.
The CentOS project is shifting its focus to CentOS Stream.
CentOS 8 will reach end of life earlier than expected.
It will be shortened from the end of May 2029 to the end of December 2021.
That's a couple of years there, Wes.
Wow.
Yeah, what?
Eight years different?
And I mean, CentOS, it took a little while to show up,
which we kind of talked about on the show, right?
So a lot of people are still just getting on that bandwagon.
Yes.
At the same time, CentOS Stream 8 had its support extended from 2022 to the end of May 2024.
There will be no CentOS Linux 9.
There will be a CentOS Stream 9, but not the traditional CentOS Linux 9
and have conceptualized it.
So you could see how this will be a shift for some who may not want to use the stream CentOS.
We'll get into that in a little bit.
But it's a big announcement.
It's kind of got so many different ramifications and areas to discuss
that I wanted to kind of just sort of start down from the basics here.
So, Carl, I was hoping you could help explain to me again what Stream is,
what it differentiates from what people traditionally thought of CentOS,
and how Stream is maybe not so much like a rolling distro as the name sort of implies.
CentOS Stream is a separate distribution in a way,
and the goal of it was to have a way to develop Red Hat Enterprise Linux out in the open.
In the past, what people traditionally think of with the CentOS project is they think,
okay, this is just a clone of RHEL.
And that works great for a lot of people.
It's what a lot of people want.
That doesn't actually give people any way to contribute to what RHEL looks like in the future.
It's a pure consumption relationship.
So CentOS Stream is a way to change that up.
It's an effort to change the CentOS community from just a community of consumers
into a community of contributors and make it more like an actual open source project.
Right, I've seen some announcement in the announcement from Red Hat today
that CentOS Stream was designed as an upstream development platform
for CentOS community members to actually contribute.
But when we first heard about it, I mean, this was an addition to the existing downstream model of CentOS.
That is correct.
And the downstream-upstream analogy, as much as it gets overused, is really appropriate here.
Originally, in the past, before Stream, we had just, you know, the flow would go from Fedora into RHEL,
and then it would be rebuilt into CentOS.
When we announced CentOS Stream, that changed to the very high level.
There's a lot of details in between, but basically, you'd see updates go from Fedora to CentOS Stream into RHEL
and then into CentOS Linux, which is how we're trying to clarify the difference between the rebuild
versus the one that is the development platform.
Now, what's been announced today is that Red Hat's going to focus all of our efforts onto just CentOS Stream
and discontinue the rebuild to try and help boost that ecosystem and that community there
to get more people developing and contributing to RHEL itself.
And just to clarify, Stream, it's not really rolling as we traditionally think of rolling, right?
Correct, and I've said this in a few places.
The initial messaging around it was that it was a rolling distribution.
That was actually before I got hired on, and I'm sure there are people that said that was a mistake to call it that,
but that's coming up a lot today that it was a mistake to call it that.
In fact, they've actually removed that mention from the website today.
That was one of the live changes that happened, changing it from a rolling release because that already means something
and trying to co-op that term is not working.
They changed it to continuously delivered, I believe is the term they're using now.
And that essentially means that RHEL upgrades or updates sort of are just continuously delivered to Stream.
Right, and that fits how a lot of people already were consuming CentOS.
Not everyone, but many CentOS users, they would just use, okay, I'm using CentOS 8 or CentOS 9.
They didn't really think about what we call our point releases like 8.2 or 7.9.
There are some enterprises that would focus real heavily on those because a lot of the vendors that interact with RHEL,
they certify on specific point releases.
And so that kind of translates through when someone's trying to just have a free clone of RHEL,
they want to have the exact same thing that RHEL is.
And that's basically what's changing and going away.
The Stream is not going to have, doesn't have these point releases.
You're just on Stream 8 or Stream 9 in the future or Stream 10 as we go on down the road.
Right, and I think that has been, so I was participating in the CentOS development IRC chat, which was really lively today.
There's a lot of people that are processing this.
It was nice to see that the VP of RHEL was in there and the lead RHEL architect was also in there answering questions
and taking a lot of heat.
So you've got to respect the fact that they were in there doing that.
And they were answering some of my questions I had about this as well.
It's like where does Fedora fit in all of this?
And so the analogy now really is pretty simple to understand from Fedora where the Fedora does have this phase,
this staging area now for the enterprise-y stuff, so it goes from Fedora to CentOS Stream to RHEL now.
And CentOS Stream is closer to RHEL than say like Fedora 34, where Fedora 34 might be the base of the next RHEL.
Six, nine months from now, it's going to be not nearly as relevant or whenever, I guess it's probably next year,
one of the next RHEL ships, that Fedora version will not be nearly as relevant as CentOS Stream.
And that's where a lot of the development will be taking place.
Yeah, I can definitely confirm that it's not just that maybe Fedora 34 is basically what RHEL 9 is going to be based on.
And CentOS Stream, it sits a heck of a lot closer to actual RHEL.
In fact, if you're using CentOS Stream 8 today, you're basically using RHEL 8.4 content and currently RHEL is on 8.3.
So that's a better way to think of it is how close it sits in relationship to it.
Okay, that makes sense. And then there will be a CentOS Stream 9, which will get six years of support?
Roughly. We're saying five years because one of the things that was announced today that was a big change.
Originally, the different streams like 8 and 9 were only going to overlap by about a year.
And some of the stuff I want to say is going forward, not for 8 just because of how the timing worked out.
Stream 8 actually came out after RHEL 8 and it's been this whole bootstrap effort.
A lot of the things that I'm going to say about this doesn't really apply to 8 yet and it's what we're working towards with 9.
But the original idea was to have Stream 8 and Stream 9 overlap by about a year.
RHEL has announced that they're going to be on a three year lifecycle cadence with a new major version every three years,
meaning that each stream release would only have, you know, once we got into that full cycle, it would only be supported for three years.
Sure.
The CentOS Board and Red Hat have agreed that as part of this, that CentOS Stream can be continued for the entirety of the RHEL full support cycle,
which if you look at the actual definitions of that term on the Red Hat support pages, you'll see that that's a five year period.
Five years of that ten year Red Hat lifecycle.
Basically, when you see point releases, so you'll see eight point, you know, you'll see on up to like eight point ten.
And at that point, there's no more point releases and it's just the critical only bug fixes and security fixes.
That's what's not going to exist in Stream.
By that point, CentOS Stream has been extended out to that point, but not further than that.
Right. So at that point, it'll move on to future development on the next release.
Yeah, it'll give it definitely five years of support, but it'll actually be closer to about six years,
considering that we're expecting CentOS Stream 9 to come out about a year before RHEL 9.
So that'll put it around six years of the lifecycle.
OK, thank you for explaining that to me. It's all kind of changing and new, but I think I've got it now.
I've heard a lot of different takes on this. Wes, I know you were in the IRC with me.
Saw a lot of people saying, you know, this is not going to work for them, that they don't want Stream.
They want they want something that's, you know, essentially free RHEL.
A lot of what boiled down to it, and I know it represents millions of servers out there,
but I think a lot of people today feeling like the game kind of changed on them.
I saw some CentOS 6 admins in there who had just migrated to 8
and now are seeing that they essentially have a year to migrate again.
Yeah, that's maybe one of the trickier aspects.
You know, things change, especially in the Linux world.
So there's one aspect of this that is just the evolution of what CentOS is and is going to be.
But I think that so many folks were just starting to get up and trying out version 8.
It's all still new, right? That was that came out last year and expected that this was going to be the paradigm
that they would continue to support for years on in their career.
It's a lot to take in on a Tuesday.
I've heard all the reactions from, well, how am I supposed to build packages for my open source project
that I know are going to work on a certain version of RHEL?
I've heard that version. I've heard other versions that have been just much more like,
well, OK, I guess this kind of means I'm going to be using RHEL components as a container moving forward.
There's been the whole gamut of reactions, but it does really suck for those CentOS 6 admins
who did just upgrade to 8. I do feel for them.
I got two points of clarification on that that I'd like to share.
So the talking about, you know, getting RHEL for free, there is a program underway
where Red Hat wants to actually give away a lot more free RHEL for personal use
and like universities and development, things like that.
All the details aren't final yet. Let me put this delicately.
A lot of people advise that this announcement should have been delayed until that program was final.
And that's not how it ended up in the end.
But there is a program underway. From what I've heard, it's supposed to be the early part of next year.
There'll be expanded access to free RHEL. And I can say that with all certainty.
The other part that I wanted to talk about was the migrations.
Users that upgrade, say, from CentOS 6 or 7 to CentOS Linux 8 right now,
while they can't just do nothing because the updates for that distribution are going to end at the end of 2021,
upgrading from CentOS Linux 8 to CentOS Stream 8 is really straightforward
and not really any more complicated than upgrading from, say, 8.3 to 8.4,
like they were going to have to do anyways if the distribution kept going.
Right. So Stream is not too far from where it is in general.
Exactly.
There is a documented supported upgrade path from standard CentOS to Stream,
which I think is key to kind of underscore there.
Absolutely.
Yeah, and that's nice because then essentially they just have an updated CentOS 8 installation
and everything will probably just keep working or the chances there.
And for a lot of people, this is an improvement because I know that I've seen people get frustrated in that month,
month and a half time period where RHEL point release has been released
and the CentOS rebuild of it is not final yet.
Now, in this scenario with Stream, you're actually going to have those updates months beforehand.
So it's not even going to be a question.
You're getting the updates before RHEL gets them most of the time rather than after.
I want to let others jump in here in a moment,
but I thought it'd be interesting to go back to 2014, January 7th, 2014, way, way back.
You may remember this as the day that Red Hat announced they were joining forces with CentOS.
Stay a while and listen.
And I thought, well, let's see what they kind of committed to back then.
And reading it now, I remember how dodgy it seemed at the time.
Here's what they say.
With today's announcement, Red Hat extends its commitment to rapid open source technology
and solution developments to deliver – and I thought this is an interesting one on here.
There's three bullet points.
The second bullet point is community integration beyond the operating system.
CentOS, a community supported and produced Linux distribution that draws on Red Hat Enterprise Linux
and other open source technologies to provide a platform that's open to variation.
CentOS provides a base for a community adoption and integration of open source cloud storage
network infrastructure technologies on a Red Hat based platform.
That is super vague.
Like this is one of the few areas where they actually talk about CentOS in this entire announcement.
The rest of the announcement talks about RHEL and Fedora.
That's like the main part where they talk about CentOS.
Then later they say Red Hat and the CentOS project recognize the opportunity to begin a new era
by collaborating to expand the CentOS project to address innovation, community contribution,
which I think you could argue Stream does do that, and participation up the stack beyond the operating system.
With Red Hat's contributions and investments, the CentOS project will be able to expand and accelerate
serving the needs of the community members who require different or faster moving components layered on top of CentOS.
It doesn't in there say that they commit to keeping CentOS as it was originally conceived around forever.
They don't say that.
In fact, in a very sort of corporate-y way, they kind of say, well, we're going to make it easier to contribute
and we're going to make development, quote, faster moving, end quote.
Right. They're already pushing some of those ideas or just at least showing what their priorities are internally.
I read this from January 7th, 2014, and what I read here is this is something,
some kind of change like this has been in the works for a really long time,
making CentOS work for Red Hat, not be competing against Red Hat.
I think that's been the strategy since January of 2014.
And I don't think IBM had anything to do with this decision.
And I've seen a lot of hot takes putting this on the bean counters at IBM.
But this squarely puts it well before the acquisition.
And I think when you read through this corporate lingo, it's obvious.
What they really talk about here is their commitment to Red Hat Enterprise Linux, quote.
In here they say, actually the whole thing is just, they say they hope this acquisition helps Red Hat
deliver more subscriptions and value.
So how are they going to do that when they're giving away the stuff for free, right?
They obviously had to make a change like this.
So I think it's obviously not the IBM thing.
This was sort of in the works for a while.
And I feel bad for some of the system administrators out there.
A lot of people in the chat room were saying, you know, the product I'm building now is essentially dead.
Another one that I saw was that, you know, I'm just going to switch to Ubuntu.
Saw that a few times as well, of course.
People always say those kinds of things.
But I think it's a little unfortunate that this couldn't be pushed until CentOS 9.
I think that's the other thing here is it shows you who kind of had the final say in the room in Red Hat.
And it wasn't necessarily the engineers or the community people I'm suspecting.
Because this clearly seems like something you roll out after you've met your CentOS 8 commitment.
Right. I mean, there's all kinds of different internal departments and pressures and negotiations going on.
But I think you're onto something there that it's, right, there is this pressure to help, you know,
help RHEL and position CentOS to be in the best place to do that and to build the future of RHEL.
But then, yeah, there must be pushback from the community or at least a sense of how do we do this in the best way
that will help our community be prepared for the changes that we are going to make.
And I don't know that this surprise was it.
I think the number one use case for a lot of people using CentOS, perhaps even in the millions of people,
was I need something that matches RHEL so I can test, produce, package, distribute.
But I don't necessarily need to have a support contract for this box.
I need compatibility assurances.
But I don't need a support contract because of whatever calculus I'm making.
But I don't necessarily think that same group of people want something that is not necessarily fixed to a version number.
They want to be able to say it works with RHEL 8.3 or whatever.
They want to be able to certify that on the box and ship it.
And this is an area where in the short term I think Red Hat's going to get some conversions from this.
No doubt about it.
There's going to be some people who decide to buy a support contract and switch it up.
But ultimately I think it's obvious someone else will come along and take this user base that I just talked about.
And it's not going to be Red Hat now.
And that's pretty bad considering they own CentOS.
Somebody else is going to come along like the previous creator of CentOS is going to go create a fork like he's already said he wants to.
Or scientific Linux will get started back up.
Or people will start taking Oracle's unthinkable Linux more seriously.
It's kind of funny in a way that they're going to get short term conversions at long term cost.
And that's generally the game that Red Hat's pretty good at playing.
But it's clear here that it's just the wrong people who are in the room or whatever.
But I've talked on enough.
I know, Neil, you want to get a word in on this.
So what are your thoughts on the announcement here and specifically thoughts on Stream?
I think last year when we were talking, I think it was last year, we were talking about Stream when it was announced.
I came in and said like this is pretty cool because it will open the doors for getting people to be able to be part of the story that makes RHEL great.
And I still believe that today.
If anything about this announcement has told me is that Red Hat doesn't know how to do community PR if it slapped them in the face.
Because any reasonable person who understands what's actually going on here from the mechanics of CentOS Linux becoming CentOS Stream and all these sorts of things.
Anyone who's actually really working with this would actually like this.
Because it gives you a closer relationship with the actual people who are making that code available to you.
Part of this whole process is to open up RHEL development itself, as Carl has said.
But more concretely, what's going to happen is that Red Hat Enterprise Linux development with the engineers maintaining the packages and code and integration testing and all that stuff around Red Hat Enterprise Linux.
That's becoming public.
That's moving to the CentOS project that is CentOS Stream.
CentOS Stream will still reflect RHEL's promises to the community and to their customers because it is being built to be RHEL.
This is the piece I think everyone's missing.
Now, there are certainly some quibbles here that I am not particularly happy about.
I am hopeful somebody will see some light here and reconsider.
But on the balance of things, I think this is actually a good thing.
I think that this could have waited until CentOS 9.
I really, really wish this had.
But I also kind of get why this happened now.
It's not great.
It's certainly going to cause more kerfuffles than was intended.
What would you say is the pressure for it to happen now, just since you say you can see why?
I have been involved as an early contributor to CentOS Stream.
It has been amazingly difficult to bring everything online while Red Hat is splitting the difference between both RHEL and CentOS Linux and adding CentOS Stream in the middle of it.
Refocusing those resources on CentOS Stream will make it easier for them to finish the bring up in the first place because everything's been split down the middle.
And I don't think people realize this, but there's only two people working on CentOS Linux in its entirety for CentOS Linux 8.
Carl, who's been in here, you know, gracious and talking about stuff and being a generally good guy around in the community.
And Brian Stinson, who is the other engineer who works on CentOS Project for CentOS Linux 8.
Don't forget Johnny.
Oh, yeah.
Johnny works on CentOS Linux 7, so I didn't really include him in this bucket.
But when you split it down with three people or two people, really.
So one person works on stream and the other person works on Linux, like that's it's ludicrous.
Like, I don't think people realize how thinly stretched they were.
There was there has been a lot of push and pressure to bring Red Hat and from within Red Hat.
Not even saying from the community from within Red Hat to bring REL engineering into the open so that they can realize the benefits of having the CentOS project to help improve the Red Hat ecosystem.
And the real issue here is the real sticking point is the fact that I as clued in as I was was kind of taken by surprise as much as everyone else was.
And that's that's the more Red Hat is tripping over itself and can't do PR if a fish slapped them in the face over it.
So it's not all bad news, though, because like we mentioned, you can still go to stream eight from the install of CentOS 8.
Other than Oracle busted Linux, like this is you can get five years of support for free.
That's still a really good deal in Linux town.
And the REL sources are still getting pushed to get CentOS dot org.
So if a project did want to come along and start scientific Linux backup or the original CentOS founder who says he wants to build another CentOS is even willing to hire people to do it.
I mean, that could still happen. And so maybe that use case is still available.
And I mean, my final thoughts on this are really that it's a clear sign that things are changing a little bit at Red Hat, that the calculus changes a little bit.
And I saw it expressed in the chat room.
And I have to agree that I think the biggest winner here will probably be AWS in this whole thing and canonical.
I don't think the Red Hat sales team is going to get a huge win out of this other than the early conversions.
And I'm sure there will be plenty of those.
But long term, it's Mark Shuttleworth who's smiling tonight, no doubt about it.
And on top of that, the folks at AWS are more than happy to spin up any workload you'd like.
They'll work with you on it if you're coming from an on-premises CentOS installation.
And oh, by the way, you don't need to use CentOS anymore.
We've got a distro for you. It's based on REL.
Have you tried Amazon Linux?
It will be interesting to follow up on this, though, I think.
What kind of adoption does Stream get? What place does it fill out in the marketplace? Which shops actually choose to adopt it? And which ones jump ship?
I don't know. I mean, I don't think the CentOS name is going anywhere anytime soon. It just might evolve.
Yeah. And as Colonel was asking in the chat room, it's still going to be a good place to learn REL.
It'll still serve that use case just fine.
And in some ways, and I'm not somebody who's putting this in production,
I will actually find the project a little more compelling myself, just from an observer standpoint.
And it would make me more likely to use CentOS.
But I'm also enough of a lunatic where I'll run Arch on a server.
So don't ask me on my opinion on this kind of thing. I'm clearly nuts about this stuff.
I'm not particularly clued in to the CentOS side of things because I work mostly with containers.
I just wonder if this isn't set against the backdrop of REL itself becoming a bit of a legacy platform compared to something like CoreOS.
Just an interesting thought, perhaps.
Well, and it may accelerate those trends is what I think. I think you're going to have those two things converging here.
And maybe ultimately what the team at Red Hat sees is more people running their universal container
than running actual physical rail boxes. I'm sure they must see a future where that's a possibility.
And I think that container in some ways has less restrictions than the current freeways you can get rail.
Now, it sounds like Carl was saying that they're going to expand that rail program.
That would be really interesting to see what, if any, limitations they put on that.
I think it'd be really great if they'd take out restrictions about production use, core use,
because a lot of those things have shifted as the industry has moved on.
Again, I could get Ubuntu or CentOS or whatever that would do it for free.
Right. The current restrictions, I think, are something along the lines of one entitlement for non-production use.
And they're specifically people specifically want to remove the non-production part of that.
And I don't know if they're going to make it a set number or what or what it's going to look like in the future.
But changes are definitely underway.
Yeah. And from my perspective, as someone who who builds and releases and develops to target rail and CentOS simultaneously,
because obviously there's people using both, actually CentOS Stream has been great for me
because whenever I've discovered issues, I have filed bug reports and in some cases even provided patches.
And they've been fairly responsive at taking those things, incorporating them in and pushing them out
in CentOS Stream very quickly for me to verify that they in fact fix things,
which means I can be relatively assured they're not going to break it going forward.
And it's going to land in the next rail point release or wherever the customers are pulling it in.
So in general, from my perspective, I think people aren't seeing where the value is going to start coming from
because by and large, CentOS has been a non-participatory community.
It's been largely consumption oriented because when you're a distribution, which has to rebuild rail and do nothing else,
you can't form opinions. You can't really do anything about it.
This is what you get. No ifs, ands or buts.
Changing this dynamic is going to be extremely painful no matter what we do.
But changing this dynamic is necessary because otherwise I don't think Red Hat Enterprise Linux has a future.
That is my personal opinion.
I believe that if they don't make this change, if they don't make it possible for the greater community to contribute to rail through CentOS,
Red Hat Enterprise Linux itself will die because it has no opportunity to evolve
based on the varied opinions of its community.
And with universal base image and the expanded rail programs for offering Red Hat Enterprise Linux for free for more use cases,
there's some work I've heard from folks that I've been in touch with about making Red Hat Enterprise Linux available as a first class citizen on various CI platforms,
all sorts of things that are going on to make it so that if you want to use rail for any purpose, be it development, testing,
or even in some cases production with low to no cost, that's going to be a thing.
And I'm really excited about that for those people who needed that what previously was served by the regular CentOS Linux,
because to be frank, if it goes the way that I hope it does, it means that Red Hat will have strategically made it possible for people to use rail from beginning to end in those cases.
And they have an easier avenue to convert to paid subscriptions where necessary.
In other cases, it's just going to be people are just going to go, you know, we need stream, we get the fixes, we're contributing to it.
So we're we're replacing money with time and effort, and that's fine with us.
I think that long term is what's got to be the strategy here.
The key to making that work is having rail available in all of those places. And it's just simply not yet.
And it seems like that's the step you make first before you make the radical change to the way it's done now with CentOS.
But it's clearly that just wasn't the priority. But I mean, that's, you know, in a year and a half, two years,
perhaps it will be a detail that we have long forgotten and things will have just shifted.
We will have to wait and see for that, though.
I think there's a lot of people that are going to be affected by this, so I don't want to minimize it.
I think for myself, I actually am going to find it more compelling.
And I know the biggest question now, which is clearly the most important question.
Will it make a super killer workstation OS now, you know?
I'm just kidding. I know. I know. I know. I know. I know. I know. Silver blue.
Linode.com slash unplugged. Go there to get a $100 60-day credit towards a new account and go there to support the show.
Linode is making it possible for this here humble Linux podcast to be delivered to you for free.
And Linode is our cloud server provider. I started with them a couple of years ago.
And then, well, you know, once you start to like something, you just go crazy with it.
And now it runs JB 3.0. That's where we spun up all of our new infrastructure.
And personally, one of the things that I think is great about Linode is all of the distributions they support.
We were just kind of going on about this, but this is an area that's really nice about Linode.
They've got the Alpines, the Arches, the recent CentOS releases, Debian, Fedora, OpenSUSEs.
Of course, they got your important Ubuntu versions. They got it all on there.
And that's really nice. They kind of have built a system that if you are a proud, happy, longtime slash enthusiastic slash
whatever Linux user, you know, somebody who just kind of loves this kind of stuff, you're really going to find Linode appealing.
But even if you're a new user, beginner, the UI is straightforward enough that you're going to get it, you're going to figure it out.
But what I love about them, because I am a longtime Linux user, is their love for Linux and open source,
supporting things like the open source initiatives that I find important, the conferences that I love to go to.
You know, Linode started in 2003 as one of the first companies in cloud computing, three years before AWS.
Three years because they were Linux users.
And I love that. They're dedicated to offering the best virtualized cloud computing.
If it runs on Linux, it runs on Linode.
So go to linode.com slash unplugged.
You support this here podcast. You get that $100 60-day credit.
You make it possible for us to give this here podcast and our other shows away for free.
And that's a big deal, too.
So thanks to Linode for making it possible for us to go to independent.
And thanks to the listeners out there who use our promo code linode.com slash unplugged to get that credit.
All of it. It's like a circle of life podcast ecosystem.
I just think you're all just great.
Linode.com slash unplugged.
All right, Mr. Alex, thank you for joining us.
Sorry we had a little business to attend before we could get to what seems like a pretty awesome way to get an open and cheap IPKVM.
If you just are willing to do a little do-it-yourself magic.
Well, I knew I had to hit you up because there's a Raspberry Pi involved.
Yeah, so I guess if you have a Raspberry Pi to begin with, like a Raspberry Pi 4, does it matter?
Yeah, there's full details over at pikvm.org.
And Pi 4 is good. I think the Pi 0W is a little underpowered, but will work.
So the idea is you take a bog standard Raspberry Pi, you buy a $35 HDMI capture board, which plugs into the CSI interface of the Pi itself.
And then you can use your Raspberry Pi like you would a KVM switch on any system that has HDMI output.
So it captures this HDMI and then puts it into an interface for you to view?
Into a browser. Yeah, this is the really cool part.
You can then log into a browser with a web interface that lets you see the stream in real time up to 30 frames per second.
So if you're a madman, you could watch video that way.
Really? It performs that well in the browser?
Yeah, believe it, buddy.
Sounds like they actually created their very own MJPEG video server written in C, including multi-threading and GPU video encoding just to make that work so damn well. That's awesome.
Wow. Now, the really nice thing for me is I already had a Pi 4 lying around and I didn't really know what to do with it.
But, you know, such is the way with buying Raspberry Pis, you buy them with a future project in mind that one day it will be useful.
And this is the project for me. Now, there's a bunch of different things you can do with it.
You can connect it through a USB-C port to the computer you're controlling to do the keyboard video or to do the keyboard or mouse part video.
Of course, it's the HDMI daughter board.
But there are other mods you can do to this, which will let you control the power and reset buttons on the computer as well using the GPIO pins of the Raspberry Pi.
Oh, brilliant. That's great.
Yeah, that's where this gets really exciting, I think.
So they build this as onboard ATX power control. So that's really cool.
What else does it do?
Yeah, you can add an optional OLED screen. So if you want to be a cool kiddie with a little OLED screen on your Pi, which will display some information about the network status or other desired information, you can do that as well.
Now, the guy behind the project is doing some prototypes right now of a pre-made circuit board, a PCB that you can buy that you just slap onto your Pi like a hat, I suppose.
And that will just do everything that you need.
But I had no issues just doing it the self-hosted route, if you'll pardon the pun, of just buying a board off Amazon for 35 bucks and I was good to go.
Of course, I had to order this HDMI cable that Alex was talking about because my first thought with this, Wes, was what if you could take a Raspberry Pi, you take this HDMI input and then create essentially an IP camera source that we could then feed into OBS.
Oh, I like that line of reasoning.
Right? You just drop it off each one of the machines. Each one gets a Pi with HDMI capture that's sending back like an RTMP stream to OBS. Good to go.
This thing also supports wake on land, which you can imagine is kind of important. Macro scripts, which is kind of awesome. And then the embedded OS that runs this whole thing, of course, it's arch based.
Ding ding. Yes, I'm glad you rang the bell.
How did it get even better? Wow.
So now think about something else that's useful when you want to access a system remotely.
Oh, yeah.
It's quite often that you want to plug in a USB drive or mount an ISO somehow. This Pi KVM project supports that as well. So you can upload the ISO to the SD card of the Pi through the web interface.
Wow. So really, it's almost like a BMC powered by a Pi.
Exactly right. Yeah. I mean, the feature parity is really good compared to proper IPMI implementations on server grade motherboards.
Now, the really nice thing that this is going to let me do for self hosted is I'm now behind me, I've got a project spinning away.
I'm building a NAS around consumer based consumer grade motherboards. So I can use things like Intel QuickSync properly now for Plex transcoding and, you know, consumer grade gear is a lot cheaper, even if you factor in buying a Pi per system.
But my brain is now thinking, well, why don't I get an HDMI matrix, and then wire that in to the GPIO pins on the Pi and then use the Pi to control the input and output on the HDMI matrix.
That's a great way to go.
I don't know if it will work, but I want to try it.
So all in all, it's just what less than $100?
Yeah, if you factor in buying a Pi as well, I don't think you need the much more than the one gig model. But yeah, you could easily do this from under 100.
You don't need a power supply because it's powered through the USB ports on the computer. They do recommend that you get a five volt splitter USB cable wired up, but I haven't found that to be necessary.
I think I paid $15 for the little HDMI capture thingy. It wasn't very much.
I'm sure if you order it through AliExpress, you can get it for that kind of price. I was impatient and went the Amazon route.
Yeah, it was a little bit more on there. You're right. I did look on there first. But it was sold out at the time because I think people are hip to this idea.
So we'll have a link to Pi KVM in the show notes if you're interested. They have all the details and even some diagrams and whatnot in there.
It's a good one, Alex. There's other hot tips like this on that self hosted podcast I hear.
Yeah, we're going to be doing a breakdown of different server power usage amounts this next episode. So make sure to tune in for that. Fascinating.
I'm excited already.
That strikes my fancy. LadyJuice is parked in the woods running off battery right now as we speak.
Hot off the heels of that Helios 64 review.
Yeah, that's right. The ultimate arm powered NAS was just on the latest self hosted. So check that out at self hosted dot show.
Well, cool, Alex. Thanks for telling us about that. That sounds pretty neat. We appreciate it.
I know you love a good slice of pie in the afternoon.
Yeah, everybody knows you're such a big Raspberry Pi guy, right?
Yeah, right.
All right, let's do a little housekeeping. We'll just move right along there.
Wes, you were supposed to tidy it up in here. Geez, I was distracted playing with the Raspberry Pi.
What?
Well, listen, I got a couple of things to tell you about.
Number one, on Linux Action News this Sunday, Michael Larbel from Phronix joined us to do a little overview on the state of Linux hardware in 2020 and his thoughts on getting Apple on the M1.
Also, so go check out Linux Action News because that was nice. It was great to have Michael on.
And Phronix is such a resource for the community. It's good to hear from him.
That's at Linux Action News dot com. I think slash 166.
That's right.
I knew if I just waited a second, you'd confirm.
So then also heads up on Coder Radio time change. We're doing the Coder happy hour.
You know, it's been kind of a rough year and we thought let's create a time, a slice.
Monday suck. So Monday evenings at 5 p.m. Pacific, 8 p.m. Eastern, the Coder Radio live stream will start up.
I'll be out there hanging with the chats, talking about stuff, perhaps having some drinks or some snacks.
And then about a half hour after that, the Coder Radio program will start and it's new 5 p.m.
8 p.m. Eastern time slot at JBLive.TV.
And while we're talking about stuff going on on this live stream, there's one thing that you might be missing if you're only tuning in there.
If you're not a Mumble member, then you well, then you're missing out on the Luplug.
And this Sunday, the Luplug is doing another recorded session about blogging for yourself.
MiniMech, you want to tell us a little bit about that?
I would love to. So we do our last recorded session for the year 2020.
And I can already announce that we will try to make all of our previous recording accessible starting from January next year.
So as you said, the title of our Luplug session will be blog to yourself and we will talk about taking notes.
I mean, you all know the problem. You found a solution to a Linux problem and you forgot to write it down.
And a year later, you don't know the solution anymore.
So we will give you some simple solutions to write down notes and keep them organized.
So we have three parts. We have user West Text Jeff.
He will be talking about the Zim Wiki, which is a GTK solution.
It's all is a file solution for taking notes and organize them.
Then I will be talking about TiddlyWiki, which is a well-known solution for all in one file Wiki.
And maybe once you have a hundred notes, you might want to publish them in a blog.
And there is user PieCrush. He will talk about the Hugo Static Web Generator, which is all is a file solution to create a web page.
So that's all I can say. I hope to see you next Sunday and love to hear from you. Thanks.
Plus one for TiddlyWiki, man. I love that thing.
You could go in and join the love plug on Sundays at noon Pacific, 3 p.m. Eastern. Just got to get mumble set up and we have information about that linked to the top of Linux unplugged dot com.
And then once you have that set up, when you have a Tuesday free, you could join us.
And every now and then you'll find a wild Linux unplugged on that Sunday where we hop on and we just do a show on a Sunday.
And so if you're set up, you're ready to go. And all of that, of course, is listed at Jupiter Broadcasting's calendar, Jupiter broadcasting dot com slash calendar.
And that right there is all of the cleaning up. At least for now, Hector Martin is well, he's known for porting Linux to the PlayStation four.
He also is maybe, if you remember, known for porting the connect to Linux. Do you remember Microsoft's connect? Oh, yeah.
All right. Hector did that work. In fact, that work actually continues on in some universities around around the world.
It's pretty neat. He's been involved in a lot of projects behind the scenes over the years.
And he he joined me really early in the morning from Tokyo to talk about his latest effort, which is to attempt to get Linux up and running on the M1.
And Hector has a bit of a following. So he launched a Patreon and very, very quickly reached the funding levels he was looking for.
So that's where our conversation started when he joined me earlier. Well, Hector, welcome to the show.
And when I first announced you'd be coming on the show, you had just launched the Patreon. How's it going now?
It's going very well. Actually, I just passed over 50 percent on the second goal, which is like sort of the you know, I can work on this full time goal.
So I'm very surprised that I got this kind of reception. Wow.
OK, so assuming maybe you could even get to full time, what do you think is is even a rough, realistic timeline for just figuring out how to do all of this?
Well, I mean, I'm already brainstorming sort of, you know, what approach I would like to use, which is something I have experience with because I've done this in the past for other platforms.
Right. But I mean, I have no idea sort of what the long term time frame is going to be like, because there's no way of guessing that.
But I have a pretty good idea of sort of, you know, what to expect in the short term.
Now, I know you you do have some experience, like with the PlayStation 4, getting Linux up and running on the PlayStation.
Do you feel like that's a translatable skill that that figuring out something like a console that's pretty unique is translatable to something like the M1?
Oh, yeah. So the PS4 has a completely custom Southbridge, which is actually a bizarre thing that has an ARM CPU that then runs separately in like sleep mode.
So you get like weird things like ARM peripherals on X86 and a completely bizarre interrupt system. Wow.
The M1 also has a custom interrupt system and of course, completely new novel peripherals.
So, yeah, like there's a lot of overlap, I think, in the approach.
So you've spent a good portion of your time working on getting Linux running on devices that in probably every case, there was somebody arguing, this would be better spent on an open platform.
This is this is time and energy that could be spent on RISC-V. What is your thoughts there?
Is there is there utility in both? Is there one reason to focus on one over the other?
Well, there's definitely value in both. Right. I mean, you know, I would always like to see like, you know, open platforms take over the world and things like that.
But but, you know, working with the hardware we have and working with the hardware that that performs today, for example, in the case of the M1, it's kind of unique in that front.
I think it's very valuable. And in the end, you know, anyone should be able to use whatever hardware they own or choose for whatever reason, you know, with whatever software they want to use.
So I think there's room for both for both approaches. I really like that answer.
I think you're so right. It's, you know, we are not going to ever exist in a world where there's not going to be Tivo's.
And so as long as there's Tivo's out there, it would be really great if when when we own these devices, if we could have access to them and use them how we choose.
And that's what your work is enabling. So I think it's tremendously important.
Well, I also think the work on the open platforms is tremendously important.
But I want to go back to kind of the difficulty of the task, because I think the other the other common response I get besides the open platform one is, well, there's just no way to get that GPU working under Linux.
Well, I mean, yeah, people say that, but I mean, it's been done before, right? You know, we have NuVol, we have, you know, sort of less less successful, but not, you know, completely failed approaches for other, you know, GPUs in the embedded space.
There's Lima for ARM, there's been some stuff for the Qualcomm GPUs, I think, for Vivado and other things like that.
So was it Vivante was it? Sorry, I forget. But yeah, there's there's been little projects like that and they got stuff working and they got triangles on the screen and NuVol works very well.
So, I mean, I think this is doable. I mean, it's not going to be easy, but I think it's doable.
It would make a huge difference, right? If Apple were to maybe just release some documentation.
Yeah, even, you know, things like, you know, if they use LLVM for any of the shader compiling, just releasing those patches would be very nice or things like that.
So, yeah, we'll see what happens.
What do you think about their use of metal, though? Does that make your job a little trickier if more and more of their hardware is tuned for metal and not really paying any attention to Vulkan and OpenGL?
Well, I mean, they still have OpenGL on top. So obviously that has to work and has to support everything that OpenGL supports.
But I mean, as I understand it, I'm not a graphics programmer. I've done, you know, graphics programming, but I'm not, you know, up to date on all the latest stuff.
But ultimately, metal and Vulkan are kind of taking similar approaches, as I understand it.
And I'd be very surprised if there's literally like, you know, feature set differences that make this very hard.
There is, however, an advantage to Apple doing their thing their own way, which is that, you know, as far as not having legal issues with copying Apple code by accident, if they're doing something completely different, then that sort of forces you to rewrite everything from scratch, whatever, you know, one way or another.
So that's it helps sort of the argument that what I'm doing is effectively clean room equivalent.
Right. I hadn't thought of that, but it by by very nature has to be. So you're not going to get in trouble that way.
Well, thanks, Apple. So do you think success would be measured by booting Linux and being able to get access to, say, an M1 device in a couple of years when Apple has moved on and they've kind of quickly abandoned these first arm versions?
Is that success or is success measured by playing a video game on a MacBook under Linux?
Well, I mean, I think the primary goal of getting Linux booting on the M1 is not going to take that long because Linux is actually very, very easy to port to new platforms.
So the long term goal is the performance kind of thing. I would call it success somewhere in the middle.
I would call it success if you can have a desktop environment running smoothly and have web browsers that can composite using the GPU and play YouTube videos and that kind of thing.
I think that's where I personally would put success, because that's where I would really want to use the computer.
Sure. Is that sort of the aspects of the M1 that have excited you enough to I mean, this is no small task.
Even if you get to your goal of full time on Patreon, it's not like it's a huge paycheck.
You're you're going to be living living pretty lean. So there must be a passion aspect to this.
Oh, definitely. I mean, you know, all other platforms that I've done in the past have all been side projects, you know, basically passion projects.
So, yeah, like this, this is something that really interests me because I really like reverse engineering.
I really like him sort of figuring out puzzles and things like, you know, just kind of poking at the hardware to understand what every little bit in every register does and that kind of stuff.
And sort of, you know, there's this platform that has like no documentation whatsoever that everyone is interested in that would make a great Linux platform.
And it's not even, you know, academic or has a small user base. It's like, you know, a lot of people could use this.
So this is very exciting. It also seems like it's rare in this era of computing where such a completely different platform emerges that is custom built to the work case.
And it just almost immediately has a sizable large user base overnight.
Yeah, like I think this is really unique, like sort of in the combination of it's just, you know, performs really well.
It's completely new and it's open in the way that you can run your own code. And yet, you know, like anyone can buy it and it's all over the place.
Yeah, it is very unique.
Yeah. And you could see they're probably going to have a pretty compelling competitive story for a couple of years.
And so interest is there's there's a lot of interest right now as you're seeing reflected in your Patreon and in our coverage of it.
But it's actually just beginning. They're going to continue to iterate this platform forward.
They're likely going to iterate on a new and interesting hardware designs around it.
And I don't think Linux users are going to want to be left out.
Oh, yeah, absolutely. I'm very curious as to what they're going to do with like the M2 or whatever they call it.
Because, you know, I had a few sort of semi, you know, not really critical, but sort of, you know, like putting people back on Earth,
threads about the M1 before the whole Linux story where people were saying, you know, it's this magical chip that is going to destroy everything else.
And I'm like, well, it's not magic. It's really good. It's competitive. It's like, you know, suddenly ARM is in the x86 space.
But it's not, you know, like 10 times better or something like that. Now, what Apple does after this, I have no idea what they can accomplish.
So that's going to be very interesting. I'm sure they have a long roadmap.
But some of that is going to present challenges for you because the ground is going to be changing underneath while you're still working on getting this part working.
Yeah, that always happens. I'm sort of counting on the general idea that, you know,
when people iterate on these platforms, when when companies and development teams just, you know, move forward,
they usually don't rewrite things from scratch, much like we also don't in the software area.
So there's going to be a lot of overlap. You know, of course, of course, the CPU is the CPU.
I don't expect them to change the intro controller overnight. So, you know, the day the M2 comes out, chances are I can get Linux,
you know, the bare kernel booting in like pretty much no time.
The interesting thing is going to be, you know, what they've done to the GPU, for example, and things like that.
That's where you're going to get the really interesting sort of, you know, how different is it? How how similar is it?
Are they just, you know, will they ever do a major overhaul of the shader architecture?
I'm sure they will eventually. But, you know, will the M2 do that?
Or is it just going to be like, you know, like twice the cores? We don't know.
Right, right. It may also still turn out that some of their Macs will ship with discrete GPUs from vendors like AMD.
We don't actually know that yet. It doesn't seems possibly like that may not happen.
But if something like that were to develop, that must make your job easier.
Yeah, I mean, I would expect open source drivers for, you know, existing GPUs to pretty much just work.
In fact, Apple doesn't support external GPUs on VM ones on paper.
But I would be very surprised if there's literally a hardware reason for that not to work.
So if I end up getting a hold of like a Thunderbolt dock for, you know, sticking a GPU in there,
I pretty much expect the Linux drivers to just work with a fix or two.
There's no real reason for them not to, as far as I can tell.
Yeah, if it's true Thunderbolt, right?
Yeah, it is.
The only thing I was wondering is if that unified memory architecture could potentially make it impossible to have a discrete GPU or an eGPU.
No, I mean, like that's just for the internal GPU, right?
There's no reason why you couldn't have an external GPU and it's going to have as any other PCI device over Thunderbolt, right?
So as long as the driver supports it properly, you know, all the apps are going to be written with support for that in mind because it's what they use on the X86 ones, right?
True. Yeah, I guess so. I guess so. Well, Hector, I think it's bold and I hope that the Patreon continues to get the support
because honestly, for myself, I could see using the efforts of a project like this in a couple of years
when a family member gives me a used MacBook or they need something recovered
and I could imagine if I could boot Linux on that thing and help recover data for them or breathe new life into it.
So I really hope this materializes.
Yeah, actually, I have a personal thing that I'm very curious about, which you might be interested in too, which is how good is it for audio production?
Because one of the main issues that X86 has is that it's such a huge and legacy platform that they have so much stuff going on behind the scenes,
like system management mode that sort of gets in the way of things like having good real time performance
and embedded ARM platforms are great at that. Is the M1 also in that class? I hope so because I also do audio production on Linux.
So I'm really curious as to whether you can get much better performance and fewer buffer underruns and things like that in this kind of environment.
That'd be really nice, too, because they run so quiet.
Yeah, that's right.
Yes, that also would make them nice.
Yeah, I'd love to have the character like gigs and things like that.
Interesting. Well, Hector, thank you very much for coming on and running through some of this.
We'll have a link to the Patreon in our show notes and to your Twitter.
Yeah, thank you so much.
I would say if you're interested in seeing this happen, for like some of the same reasons I am, that Patreon might be worth considering.
What Hector wants to do is upstream all of this code so it is available to all Linux distributions.
And he has done that before. He's upstreamed some of the code he's developed before.
And he's thinking about it from a white room clean perspective, and he's really put a lot of thought into it.
So if you're interested, we will have that link in the show notes.
You know, it's really nice to get him on the program.
Thank you, Hector, for joining us because I know last week we were a little unsure about just how this would go.
But I feel he's somewhat reassured.
You know, he's clearly, if anyone, he's the right person for the job.
You know, I think so, Wes.
He and I had a nice long conversation after that interview.
And he went into more of his background, some of which he can't necessarily share publicly.
And I think he's qualified.
And I wouldn't say that lightly.
And he's seen a lot of support because of some of his past successes that people are aware of, some of which are not as public.
And he's already kind of got a game plan together.
And I think he's got a timeline for when he's going to have Linux booting on that thing.
Oh, geez, I better start budgeting right now.
Maybe we will be at the point where you'll be able to breathe life into it down the road.
And his point about when Apple does release M2s and M3s or M1Xs, they're going to be iterative releases.
And the thing about the way they're built right now is if he figures it out on a Mac mini,
he's essentially solved it for the MacBook Air and the MacBook Pro as well.
And so there's a lot of return on his work right now.
And so I'm going to follow with interest.
I'm going to stay in touch with him and just keep tabs with him and see how it's going and keep an eye on it.
And if anything super interesting develops, I'll let you all know.
But in the meantime, how about a couple of pics to send you on your way?
We've got a couple of fun ones.
I'm going to admit one that I've been using to impress family and one that if you are on Team Red,
yeah, I'm using the lingo now, you'll appreciate.
You AMD Radeon users should check out Radeon Top where you can view your GPU utilization,
both for the total activity and individual blocks in a terminal that I guess is top-esque.
It's kind of like the wrong way going on the page.
I don't know.
But it certainly seems better than scraping through slash dev and trying to pull a bunch of facts out there.
It is nice to get it all visualized for you.
And it looks just fine.
It's just everything's horizontal and that's not the structure of Top.
But it's Radeon Top and we'll have a link in the show notes.
But I'm moving right along to the next one.
Because Wes and I were having a little debate before the show.
We can't actually remember which one of these Top, like super Tops we've talked about
because there's of course Bash Top, there's Go Top.
If there's a Rust one, surely we've talked about it.
Right, right.
But now we're coming full circle and we're talking about a Python Top replacement.
Now stay with me on this one.
It's called, I'm going to say, what do you think, Wes?
B Pytop?
I think so.
B Pytop because it's actually a port of Bash Top to Python.
So you start with one alternative Top and then you go to the next level.
Yeah, and it's no disrespect to the Bash Top project.
But this is way, way cooler, way better, way everything.
And I've been leaving it up on my screen to really impress the family.
You combine this with like Retro Terminal and it doesn't always work right.
And when it does work right, well, it's next level nerdy.
So it's B P Y Top and we'll have a link in the show notes.
It's very easy to install just with pip or whatever.
Pip 3 install, B P Y Top.
That's another thing that really struck me when I started playing with this.
Not only is it pretty, it works really nicely, it's got some nice features,
but it's packaged in a whole bunch of places.
So if you couldn't get Linux running on your M1, well, don't worry,
it's in Homebrew and Mac ports.
It's in the Arch Repos, it's in Debian testing, it's in Fedora 33.
So you don't even have to bother with pip if you don't want to.
But put quite simply, this is the prettiest way I have ever seen my stats
about my machine displayed on a command line or in a graphical application.
Of course, it'll give you your aggregate CPU load, your overall core load.
It'll read your temperatures if you have that stuff installed.
It gives you disk stats, it gives you memory stats,
it gives you network stats, it gives you top process stats.
And it's really interesting thread information about what's taking your main thread,
a great way to display memory usage in general.
And all of them are really just displayed just so nerdily perfect.
It's so great.
And if you just want a great way to put something up on a monitor
and look at how your system's doing, like when you're doing an encode of a video
or something like that, I don't know.
Because I don't know what you do, but you've got to be doing it with bpy top.
You just need a little Python love.
It's all on their GitHub that we have linked.
It's truly one of the prettiest ways to visualize what the crap your box is up to.
And I'm never going back.
Bash top, I love you, but I got a new tool now, tell you what.
Just like everything else, once it gets complicated, you switch from Bash to Python.
Just like I knew I would, Wes, I knew I'd forget to turn off the Black Friday promo code
for the core contributors.
So if you haven't become an unplugged member yet and you'd like to support the show
and get a limited ad feed, you can go to unpluggedcore.com.
Until I probably remember before next episode, I'm going to leave the coupon code
Black Friday going, which will take two bucks off.
It's Black Friday in December.
Get in there while you can before he eventually remembers.
That's right.
Take advantage of Chris having way too much to do to turn off that good deal.
Unpluggedcore.com, just a little bit longer to get access to that.
Plus, you get the option of two separate feeds.
One feed that is the live take, it's a lot more show right now.
Hey, how can I tell?
How can I tell how long the file?
Can I look at the file?
Right now, it's an hour and 41 minute file as I say these words.
That's not how long the release show is.
So there's a lot more show in that feed.
There's also all the times I screw up or if Wes has a dog that barks
or maybe some guest audio doesn't work out, all that's in there too.
It's everything.
It's fully everything.
It's raw and it's naked and it's available for you.
But there's also a limited ad version which is well produced, cleaned up,
tight and just limited ads.
So that's the perks you get for becoming a member.
Plus, you support this here podcast at unpluggedcore.com.
All the ways to listen and you make sure that we'll be here every darn
Tuesday doing it again.
Darn tootin' unless I can come up with a workflow to move the show to Sunday.
Maybe.
And then we'll be here every darn Sunday.
But I don't know, you know, because things like CentOS changing up the
entire way that they manage their distro happen on Tuesdays.
They don't happen on Sundays, you know.
That's the gosh darn truth of it, Wes.
See you next week.
Same bad time, same bad station.
So we keep it at Tuesday for now.
We keep it at Tuesday for now.
You can get the show on Twitter at Linux Unplugged if you want to get like,
I don't know, release announcements that way.
You can get all the ways to subscribe to the podcast at LinuxUnplugged.com
slash subscribe.
He's at Wes Payne.
I'm at Chris Lass.
Go get some more Alex at the self-hosted show at selfhosted.show.
And I just want to say thank you again.
Thank you to everybody who listens and shares the show with your friends
or takes advantage of one of our sponsors or becomes a supporter.
We really appreciate you just for doing all of that.
Downloading the show and listening, we appreciate you.
And I can't wait to go out to some events and send my near future and see
y'all.
See you next Tuesday.
Okay, JBtitles.com.
Let's go boat.
Also, don't forget that the nominations are still open for the Unplugged
Tuxes.
You can get a link to that in the show notes.
The Unplugged Tuxes for just a little bit longer.
I'll drop a link in the IRC right now.
Get your votes in while it's hot, folks.
Well, I'm out in the woods again.
It's been nice, you know, doing the whole off-grid thing.
Putting the whole system through the tests, the whole new cellular system.
You don't need no civilization.
Ha!
Except when you get hungry later.
That's true.
We have some supplies.
What is it, Neil?
What is it?
This has been such a terrible day.
You need to go to the woods.
Take a big nap.
I want to go away and I want to take a nap and I want to just hide from the
world for a while.
Well, first go vote.
JBtitles.com.
And then go to the woods and take a nap.
Well, I would if JBtitles would load.
You just got to give it a refresh a couple times sometimes.
But not too fast.
Don't overwork the bot.
Yeah, you got to do it just right.
I don't know if I feel bad about killing an Arch server.
Well, what about an old Arch server?
It's like the underdog, you know?
It hasn't been properly maintained.
Don't you have some sympathy for it?
It tries so hard, you know?
It's like that straggling CentOS 8 box that never got updated to stream.
Yeah.
Oh, no.
That hurts too much.
Sorry, too soon.

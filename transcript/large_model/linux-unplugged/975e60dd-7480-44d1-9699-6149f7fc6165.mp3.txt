Wes found something that might change my life
for this week's episode.
Game changer.
The peak of the show, right here,
is a Raspberry Pi-powered grocery bot.
You take it with you, it's like a Raspberry Pi companion.
It's built into a case, it has a handle,
it has a mustache, it has a camera.
What a mustache.
It is a great mustache, actually.
Why don't more Raspberry Pi cases have mustaches?
And anyways, get this thing.
It's basically got like one of those little barcode scanners
and a buzzer, and it helps you keep track of the groceries
that you need and have picked up.
And you just take it with you and scan the barcodes,
and you can add them to your grocery list,
and then you can get the report on your mobile device
when you're at the grocery store.
So you have this thing in your kitchen,
you pull, oh, I'm out of milk,
and you scan the barcode, it adds it to your list,
and then the next time you're at the grocery store,
you have all the items, the exact item, the specific item.
Buy a barcode, I mean, yeah, right?
How great is this?
It seems really nice.
Because take it to the next level.
Imagine that Beard here, right?
Beard gets online deliveries all the time.
I've done it a little bit myself
with our local Safeway grocery store, it's great.
It's so the way to go, yeah?
Yeah.
And imagine now taking that to the next level
where you could have this thing next to the fridge,
and you scan the barcode, it adds it to a list,
and then when you're done, you just hit send,
it sends the whole list off to the grocery delivery service,
and in a couple of days,
a whole new batch of grocery shows up at your door.
You would totally use this, come on.
I would, the thing I would like to see more
is AI integration to suggest new groceries to me.
Oh, like based on your grocery profile.
Yeah.
Ha ha ha.
This is Linux Unplugged episode 225
for November 28th, 2017.
Oh, welcome to Linux Unplugged,
your weekly Linux talk show that honestly,
a little meat drunk this week.
My name is Chris.
My name is Wes.
Hello, Wes, and Wes, as luck would have it,
the beard's here too.
Hello, beard.
Happy half birthday to me.
Okay.
Indeed, dude.
That's random, that's random,
but it's gonna be, you know what?
A day of celebration here on the Unplugged program.
That's right.
He looks good for his half age too.
He does, doesn't he?
Nominally this week, we're gonna talk about DRM,
about sort of the historical impact
I think it's gonna have,
and how Linux users could take a small
but important step today to make a change.
We'll talk about that later on in the show,
but before then, we got some news.
We got some community news we're gonna get into,
and we've got a Gentoo challenge.
How's it going over there, by the way, Wes?
Are you getting the virtual machine fired up?
Yes, I am.
So as the show progresses, Wes will be installing Gentoo
from a stage three install.
That's right.
Getting a base system running,
and then throughout the future weeks
of the Unplugged program, each episode,
another piece of the Gentoo puzzle will be clicked
into place, and we'll see how many episodes it takes
to get Wes Payne to a fully functional Gentoo system.
I'm excited.
So starting off right now with episode one.
So 2.25 marks episode one of the Gentoo challenge.
Right now, right here.
We're gonna need to get a jingle for this.
We're gonna need a Gentoo challenge jingle.
So if you have any ideas, send us one.
And we're gonna, in the background,
we'll be doing that as we go through the news,
and we'll check in with you towards the end of the show
and just see how far you got, okay?
Are you good with that?
You feel kumskies?
You kumskies with that?
I'm totally kumskies.
All right, well then before we go any further,
then you know what we gotta do.
We gotta bring in that virtual lug.
Time appropriate greetings, Mumble Room.
Hello.
Hello, hey.
Oh, oh, hello.
Oh, hello, everybody.
It is good to see you.
Thank you for being here.
Now, we got so much to talk about this week.
There's a big story.
It's one of these licensing stories
that makes like a lot of headlines
and a lot of people glaze over when it comes out,
but I think it's definitely worth talking about.
Today, breaking news, ladies and gentlemen.
This is CNN Breaking News.
Press release from Red Hat over at redhat.com.
Facebook and Google, IBM, and Red Hat
have committed to providing a clause
to their GPL2 software that they ship.
And this clause has some familiar elements to it.
You may have heard us recently discuss
the Software Conservancy's agreement they got
with about 200 Linux kernel copyright holders
to try to work out with companies.
Yeah, right.
Smooth things out before you sue them.
We'll try all other avenues before we sue.
It was essentially this agreement
that took some clauses from the GPL3
and applied them in a signing statement
to the GPL2 software.
Well, now Red Hat and Facebook and Googs
and IBM have taken it a step further.
Red Hat writes on their blog,
this is gonna provide greater predictability
to users of open-source software.
Red Hat, Facebook, Google, and IBM today
each committed to extending the GPL3 approach
for licensing compliance errors to the software code
that each license under the GPL version two
and GPL, LGPL version two and version 2.1.
They're calling it a common cure rights commitment.
Boy, that's thick.
But what it essentially says is,
we'll try everything else first.
We'll work with you.
And Karen Sandler, she runs the Software Conservancy,
she was quoted in an article from the Register
that says, yeah, she's really thrilled
that companies are doing this,
that they're willing to take on dialogue
and upping their commitment to enforcement
in a way that is gonna actually work long-term.
And in the article from the Register,
they quote Red Hat, saying, Red Hat explained
that legal proceedings generally produce poor results
in the free software and open-source community.
And that litigation should always be avoided.
Why I like this story is because it's a victory
for the nerds, it's a victory for the engineers,
it's a victory for the people who create things
and make things and write software,
it's a victory for the kernel developers,
because this is their preference.
I'm not here to tell you which approach is right.
I'm here to tell you that the kernel developers,
they seem to appear to prefer this approach,
and that's good enough for me, good enough for me.
They wanna work with these companies first
before you try to sue them, because when you sue them,
they react badly, they retract from their involvement
in open-source, and they make shit worse for everybody.
Yeah, right, getting the lawyers involved
doesn't make new things happen
or improve anyone's experience or the software at all,
it just makes it worse.
You're in the legal system.
I felt this way for years.
When we had Greg KH on the Linux Action Show,
and this is something that he and I personally talked about,
it wasn't necessarily in the interview,
but it was something that he and I talked about off air,
was that these discussions take years and years and years,
but generally result in a internal advocacy
for respecting open-source licenses,
and that sort of blossoms into a change of culture
for a company and how they interact with open-source.
They interact with open-source projects,
and when you sue them,
what happens is you smack them in the face,
they retract from their involvement in open-source
because all of a sudden it becomes a business risk,
and you shut them down.
You poison the water.
Say it again? You poison the water.
You poison the water.
And the thing is, I don't really have a dog in this hunt,
but I know that the people that are writing the software do,
and this is the preference they have,
so it's really, really great to see Google and Facebook
and IBM and Red Hat all kind of go this way.
And the elephant in the room is,
well, what about this whole software freedom law center
versus the software conservancy lawsuit that's going on,
which a lot of people thought was sort of brought on
after this big agreement?
I don't know. I don't know.
But I think this is a really great move.
Also, unrelated, fuck the register.
This is a ridiculous stock image
that they have used for this post.
It's some attractive girl staring at her clock,
making some stupid face that you'd make for Instagram,
and they've slapped it on a story about GPL license laws
where they're quoting Karen and they're quoting other...
When you look at the Twitter preview,
it looks like this is a stock image.
This is supposed to be an image of Karen Sandler,
which it's not, and this is a weird image.
It's just inappropriate.
The register recently has been really pissing me off
with inaccurate coverage, and then now this. I don't like it.
I don't like it. I know they're trying to get clicks,
but do a better job. Do a better job.
Anyways, I think this is, plenty enough,
actually looking at the Twitter feed for Karen Sandler,
somebody pointed out what a bizarre stock photo
that the register used.
Because when you look at the preview on Twitter,
it totally looks like that's supposed to be Karen Sandler
because it's coming from the Software Freedom Conservancy
Center, and they're talking about Karen
getting quoted in the article,
and then there's this picture of the stock girl
who is wearing glasses that don't even have lenses in them
and is staring at a watch that's too big for her wrist.
It's just a really obnoxious photo.
Anyways, it's good to see Red Hat
and all those companies work together,
and I bet the real story here is how that happened.
How did those companies wind up in a room together to do this?
And what was the thing that started the conversation?
What was the seed to get Facebook and IBM and Google?
See, that's the thing.
They're big people with their own agendas.
Like if it was, yeah, if it's Twitter and Facebook
or Microsoft and Facebook, but Google and Facebook,
yeah, there's something bigger going on here.
There's a bigger story here that we,
the peeps, don't get to know about.
And hopefully it speaks well to their desire
to continue good relationships with the open source community,
both using and contributing back.
Yeah. Yeah.
I kind of am sick of the licensing stuff,
to be honest with you. I couldn't...
It's important, but it's like, at the end of the day,
that's not what we get excited about, right?
We want to get excited about the software.
It's like exercise. Like I know I need to do it,
and so I have to push through it.
All right, fine, I'll go for a fucking walk.
But I got to tell you, I don't really have any interest
in doing it. Like this licensing stuff,
there needs to be a Groklaw of 2018 that is concise
and needs to tell us why this stuff matters.
So that way I can quote them,
so that way I don't have to read through all this shit
and then tell you guys about it.
Because it's just like slogging.
I know, first world problem, right?
Speaking of first world problem,
how do you finance your open source project?
How do you make money doing open source?
How can you do open source full time?
Well, we found a guide this week.
Did you find this or did I find this?
I'm not sure.
I don't remember either.
I think they have both stumbled upon it.
Maybe, maybe.
This is a handy financial guide for open source projects
and it's up on GitHub.
And in the pre-show, I was talking with Dan
from Elementary OS, and I was telling Dan
that one of the things that I actually really respect
about Elementary OS is that they're brave enough
to ask for money for their hard work.
And I think initially people push back.
I was like, well, what is Elementary OS doing?
What are they doing?
They're just an Ubuntu re-spin.
Obviously misunderstanding all of the hard work
that goes into it, but the people that get it
wanna pay, they wanna support something like this.
But how do you ask for money?
How do you do that in a way that isn't offensive
and in a way that doesn't seem unreasonable
for something that is free by its very license?
And so this is a massive guide.
This is actually legitimately worth your time.
And it breaks us down into 16 different areas.
16 different areas.
Number one would be you can just take a donation button
and you're gonna get the pros and cons
about each one of these.
You can have bounties.
You can have crowdfunding one time.
You can have crowdfunding reoccurring.
You can have merch, books, advertising, sponsorships.
You can get hired by a company to work on a project.
You can start a project while you're currently employed.
You can have grants, consulting services,
software as a service, freemium licenses,
dual licenses, open core foundations, maybe VC.
There's a lot of options.
Yeah, and it shows you examples of all of them too.
So Dan, I know you just had like five minutes
with the article, but did anything jump out at you?
Any warning signs or do you think this is maybe
a solid guide to point people at?
No, I've been poking through it while you guys
have been doing all the rest of the show
and it's really comprehensive.
She does a really good job going through
and saying hey, this is what's good about this,
but this is also what's bad about going this route
and gives a lot of alternatives.
You get a sense of a lot of research.
I mean a lot of research when it's like
she must have gone out there and surveyed
a lot of open source projects and seen how they're doing.
Yeah, absolutely.
But I think one of the things that is kind of glossed over,
I guess, but that I would definitely recommend
for anybody thinking about how to fund
their open source product is to try as many as they can,
as long as it doesn't go against your project goals.
Because she does talk about with advertising and stuff,
maybe that conflicts with your project stances
on how they feel about whatever.
But just try a lot of different things and see what sticks.
Dan, what do you think about this advice
for an open source project is think of your,
asking for contributions not from random strangers,
but from community members you've engaged with.
Which means you're gonna have to up
your community engagement,
you're gonna have to up your community game,
but you're not asking for the drive-by donators.
What you're asking for is people that have
engaged with the project, that become fans,
they're advocates of the project,
they use it themselves, they find importance with it.
Those are really the people you want donations from
because those are the ones that are gonna be motivated
to keep the project alive, right?
Yeah, I mean, I think that's the big,
you're gonna get your recurring stuff from them, right?
So your merchandising or if you're on Patreon
or anything like that, those are definitely the people
that you wanna look at for things like that.
I can tell you though that our number one
method of revenue right now is the pay what you want
on our website.
And it's a lot more than what we get from Patreon.
Really, more than Patreon?
Even though Patreon's reoccurring.
Now, that must be cyclical though.
And that must be tied to release cycles because-
Yes, absolutely.
Yeah, which when you do that, now you have to predict,
you know, what does that money actually mean per month?
Doesn't that make staffing significantly harder?
Like there's so many like hard things to predict
because you don't know if say the elementary OS released
based on 1804 is gonna be a huge hit or not.
Maybe all the attention will be on stock Ubuntu.
Yeah, so in that way, you kind of have to, you know,
look at, you know, what past releases did
and you can only guess, you know,
based on what information you already have.
So if you haven't been fundraising for a few years already,
you don't really have a base to go off of, you know,
it can be scary at first figuring out
how much money do you even really have?
You also have to sort of sum up your worth
and say, how valuable am I versus the other things
that are out there?
That can be, you have to be pretty humble
when you do that, don't you think?
Yeah, and I think that's a huge part of your marketing
as a project is actually pitching your value proposition.
What do users get by supporting you?
Why should they do it?
Why should they do it continually
if you're raising money on something like Patreon?
That's one of the cons that she points out
and this list is on something like Patreon,
it can be unclear.
Why do people wanna continually give you money?
What is it exactly that they're funding?
Yeah, and she points out that it usually taps out,
they're like, there seems to be like sort of a maximum
that you're gonna get there
and that's just about as much saturation as you get.
And I would say too, just been, you know,
doing this now for a while,
and something that I could do a lot, lot better at
and creators like Philip DeFranco are much better at it
than I am, is diversify constantly,
always be looking for new avenues to try merchandise or,
not, and again, and this is something
I think people fuck up a lot,
is don't do it from the standpoint of
how the hell do I milk these people for all they worth?
But think about it from the standpoint of
people who get what I'm doing are my target,
I wanna sell to people who I'm already engaging with
and what is it that would,
and this is a douchebaggy term,
but this is really how you gotta think about it,
what would delight them?
Right, what would get them like,
what would get them like fired up?
Like, yeah, that's a great idea.
Like, could you do something funny with a t-shirt?
Then that's merch that's worth selling.
You know, if you're just gonna put a basic bitch logo
on there and put it over the,
which I've done plenty of times,
you know, why are you bothering?
You know, they could go make that themselves these days
if they really wanted that.
You know, I'll offer something different there
if you're gonna diversify.
And it involves a lot of reflection,
it involves a lot of understanding
of what your target audience wants
and what they're generating value from.
And when you understand those things,
you can tend to sell well to those people.
And it's not because you're selling them,
it's because you're providing something they already want.
And you just have to kind of connect
with where they're at and do that.
And if that may be bugs, it could be a bug,
that could be a bug bounty program.
It doesn't have to necessarily be merchandise.
There's a lot of options there.
So definitely take a look at this guide
because myself, and I bet, of course, Dan feels this way,
but I know a lot of others do too.
I want to see more people making money
from open source than we've ever seen before.
Wouldn't that be a thing, like if by the end of 2018,
it's considered a viable business model
to make a living producing open source software
for independent.
I really, really, really, really think
the next few years are gonna be a great opportunity
for people that can go independent and work for themselves,
be a contractor or be their own business or whatever
that aren't reliant on a standard paycheck.
I think just at least here in the States,
this is obviously a very US centric view,
but I think here in the States,
people that are self employable,
people that can self produce
and generate their own sources of income
and diversify multiple sources of income
are gonna have the best chance going forward.
And there would be a huge benefit to open source
if one of the ways you could make independent living
as somebody who has some software development skills
is by developing open source software.
And this guide could help people figure it out
because it's a bunch of really hard learned lessons
over the last decade, all compiled
into 16 different categories.
And it's stuff that when I read through this
resonates with my personal experience
and resonates with stories I've heard
from developers in open source.
And so it's one of these things where
it's a rare opportunity to get about a decade's worth
of hard learned lessons in one solid read
if you're trying to do this yourself.
And my personal bias is really,
I just wanna see more people making money
developing open source.
Well, I actually would like to see
a little bit of a different approach also taken
because I feel that a lot of projects start
with this concept of just designing the software
that they are passionate about.
Of course, that is all that open source is about,
but I think there's a big difference
between making a business and making what you love.
You can sometimes merge the two.
And unfortunately-
Sometimes you shouldn't really, to be honest.
There's a reason why I don't have a Star Trek podcast.
The whole thing is when you decide to make it a business,
you actually have to come up with a business plan
that is viable.
And this is actually the problem number one
for most people, in my opinion,
when they come up with their open source projects,
they start with the ideas of how can I get donations
as soon as they start seeing the project
getting some traction,
and they're already succumbed into a place
that they can't really charge well for their product.
If you're a business, you need capital first
when you start developing.
You do an investment,
then you expect the return of that investment.
And people don't even contemplate
how much of that investment they're doing themselves
is worth it.
That's why they don't have a way of calculating the price
that they should be charging.
Yes, that's very true.
I've been there myself.
They actually don't look out for how to,
how to actually start seeing, for example,
if there's actually people interested,
the people that are willing to put their money
where their mouth is.
Oftentimes, they go around and ask,
would you like to see that happen?
People say, yeah, I would buy that.
Then it's done and people don't pay.
The developer goes like, oh, I got fooled on this.
Of course, people could get it for free.
They would get it for free.
Bashful Robot, you have some thoughts on sustainability
and some pushback on it.
And then I'll go back to you, dear Devlin.
Go ahead, Bashful.
All I was really gonna say is you look at some people,
like the sustainability loops back
to what you were saying before
with why they're asking for donations.
So that was kind of like one little point
was just that maybe that's the approach to take.
Then the other point was the pushback.
Like, for example, I don't know if you're familiar
with what happened with the Caddy project, but-
No, could you give me a background on that?
Yeah, a little bit.
So Caddy is an HTTP2 server written in Go.
Mark Bates is the author and it was open source.
And he basically started building out
or attempting to build out a business behind it.
And the only form of sponsorship was like an HTTP header
that they just injected in there.
So a lot of people got super PO
that they thought it was gonna be like a closed source thing.
They didn't like the header,
which in some ways I can sort of see,
but then he just basically got raked over the coals
trying to find a way to monetize
and continue on with the work.
And you think there's some entitlement there?
Yeah, I think so because if you look at,
like people get something for free
and you could even take that
and look at it from the point of view of like support.
And a lot of people are doing this in their spare time
and they almost expect you to answer like immediately,
or they expect you to fix the bug immediately
or add the feature set and along those lines.
And it's kind of like now, now, now,
whereas anyone may have like five different things
that they're trying to do.
And it's not necessarily just that one project.
Or if you look at some of the other people,
like even like Wimpy and them who work full-time
for Canonical, they've got certain obligations there.
Plus, he's got Monte and all the other stuff
that he's got his fingers in.
Like he's, I don't know how he does it, to be honest.
Wimpy, you are a machine, that is for sure.
Yeah.
Derek Delvin, I wanted to let you finish your thought though
because I know you were kind of wrapping that up.
So basically it's like actually one of his last point
that is actually also about setting expectations.
And the other thing, unfortunately, that I see happening
is that people often forget
how the GPL was intended to be monetized.
It is the developer gets paid to write code,
not developer gets paid for releases
or for versions or licensing.
And a lot of these models that people come up
with open source is like, oh, I'm about to download
and they, you know, everybody chooses what they want,
but I'm about to download so I give a donation.
It's equivalent of paying for the current version
or current license.
And that is kind of what leads to most of the problems.
So if you actually come with a value proposition
of code gets written upon payment
and this is what it costs to produce these code,
then you could either only invest in it
if you effectively got the money.
And in that way you could support sustainably
your development and it would be like any other contract.
Stallman has talked about these over and over.
The idea is to get developers to get paid to write code
so that then the ownership is true.
The person who paid for the code has ownership over it.
So Dan, do you think as a project,
there is messaging here to that if you just position
the project and make it clear
that these are our resources, this is our availability,
is that the solution to entitlement Dan
or is it deeper than that?
Yeah, I absolutely think messaging is super important.
I mean, you know firsthand that a few years ago
we had some terrible messaging and came on your show
to try to fix it because it was so bad
and had huge pushback and it still burned us to this day.
Yeah, yeah, just recently in a Reddit thread
you and I were talking about somebody brought it up
and it's like, come on.
Yeah. It's just ancient history.
But definitely figuring out how to navigate around
these are not the good ways to communicate
and these are the good ways to communicate
and being able to express to people
about how you want to meet their expectations
and you want to provide the features
and that it isn't that you don't care
because they want to know that you care about them
and that you're trying and to explain
that this is the best that we can do
with the resources we have and if we had these resources
then we would be able to do that thing
and try to make it a negotiation.
You're so right, Dan,
because you guys have been a case study of that.
So, I mean, that is 100% legitimate experience
that you have and I cannot disagree with that.
It's kind of funny if you think about it
because I can't really think of,
I'm gonna give a second before I say this out loud,
but I can't think of two other projects
that are better at explaining
why the hell you should pay for them
than elementary OS and Ubuntu MATE.
So Wimpy's posts, I'll tell you what I like
about Wimpy's posts for the Ubuntu MATE project on Patreon
that have inspired me now for a couple of years
and I still haven't gotten my shit together
on how to do this for Jupiter broadcasting,
but Wimpy will say, we spent $126 to this guy
or whatever to develop this feature
and we spent a hundred and whatever with this project
and we sent this much of your money to this project.
Wimpy, did you have an intentional rationale
behind those posts to specifically say
this is the value you're getting from your contribution?
Was there like some reflection you did to say,
I need to tell people what they're getting
with their contribution?
Is he there?
It was such a good question.
It really was.
It was a great question.
That's okay, it's okay.
Go ahead, Eric.
I know you wanna jump in, so I'll jump to you.
Go ahead.
Yeah, well, I mean, I can speak to a lot of this.
I work full time for an online education company,
but on the side, I own an IT consulting business.
Oh, okay.
And that consulting business recently,
actually day before yesterday, just lost our best client
because even though I took time off from my day job,
like took vacation time in the middle of the day
to go and help with what they considered was an emergency.
It ended up being something fairly simple,
but to them, it was an emergency.
And so I left my day job to go help them out.
And it ended up being Windows 10 Home Edition
was their problem.
They bought a computer that I didn't recommend
and they got Windows 10 Home instead of Windows 10 Pro.
And to be honest, I went into the situation
not having my ducks in a row
because I tried to pitch switching to Linux,
getting away from all the licensing with Microsoft
and that kind of thing and supporting open source.
And they basically fluffed it off as,
well, that Linux thing that's just for nerds.
I've been there.
Yep, I'm really sorry.
That sucks.
Losing a client too is like the worst thing ever,
especially when they don't follow your recommendations.
That is the worst, yeah.
I'm sorry to hear that, Eric.
Wimpy, sounds like you have your situation sorted, sir.
Do you remember my question?
I do, yes.
It always helps to remember
which key you've bound to push to talk.
I love it.
I love it, push to talk.
Well, it's good to hear you and yeah, please run with it.
Yes, my intention with those messages that we send out
is to exactly explain to the patrons
how the money is being spent,
but more importantly, the value that that has to the project.
And oftentimes the way that the money is being used
is to fund development that the teams
that are involved right now
who volunteer their timeframe freely
wouldn't have time to do if they weren't incentivized
or compensated in some way
in order to work on those projects.
Now, do you agree with my assessment
that the way to think about a patron
or some other sort of reoccurring contribution
to an open source project is if you reframe it
as they're your client
and you need to constantly remind your client
why their contribution or their patronage of you is useful.
Like you're communicating to them on an ongoing basis.
It's almost a sales position.
It's really sort of doing sales,
but in a more genuine way.
I don't mean to like douchebag it up a little bit,
but don't you feel like it's kind of like
a client relationship that you're reselling your value to?
It really is.
I mean, there are months when I don't get the time
to post a patron as detailed as I would like
or as regularly as I would like.
And when you get a couple of months off the back like that,
you do see people reining in their support.
So they'll reduce their contributions
or they will opt out entirely.
So it is very much a client management relationship
in that respect for some people at least.
Yeah.
And I don't know, those are just sort of my insights.
And I think Wimpy's and Dan's insights
that if you wanna try to monetize an open source project
or something like that, just things to consider.
And boy, I'd love to see more people be successful.
I try to back as many people as I can on Patreon.
It's getting to be that point.
Absolutely.
But I try to because I really wanna see more people
be successful and wanna see people do this long term.
Sounds like we have more thoughts on this.
So Eric and others, let's take it up in the post-show.
Save it, please.
Don't mind me because I will forget by the time we get there
because right now I gotta stop
and take a moment and thank Linux Academy.
And to be honest with you,
I'm so excited about freaking Linux Academy
that I'm not gonna remember what we wanted to talk about
because it's finally here.
Finally, a platform to learn more about Linux
that's been created by Linux enthusiasts,
has been developed by developers
that really, really know their ass.
Like they can build complicated systems
that match courseware and distros and virtual machines.
And they all bring it together in a platform
that teaches you everything around Linux
to make money and to be more successful in your career.
It's Linux Academy.
Whether you're an experienced sysadmin
or new to the world of Linux, Azure and AWS,
OpenStack and DevOps,
a sharp skillset is an absolute necessity to succeed.
Meet Linux Academy,
an online Linux and cloud training platform
that uses self-paced video courses and hands-on labs
to give you real-world experience
for a wide range of skills.
Train for your certification,
learn the latest DevOps tools
and grow your skillset to do better work.
Linux Academy is not just a video library.
Our scenario-based server labs and quiz system
allow you to learn hands-on.
We also have full-time human instructors
who answer questions and help you earn that certification
or promotion at work.
We add new training every week
so you'll always be up to date on the latest tech.
Sysadmins of every experience level use Linux Academy
to stay on the bleeding edge of the Linux ecosystem.
You should too.
While you're laughing,
the hackers are dropping malware into your system.
Go to linuxacademy.com slash unplug
to get a free seven-day trial and support the show.
Try out their hands-on labs,
their testing for certs, their courseware,
their downloadable comprehensive study guides.
It's amazing, you guys.
Old young, or I should say young Chris
would envy old Chris, which is present Chris.
It's complicated for the Linux Academy.
I mean, it's one of the things
that I just couldn't even imagine
when I was getting started.
linuxacademy.com slash unplugged.
Oh, thank you Linux Academy
for sponsoring the Unplugged program.
So the folks over at ours decided to review Ubuntu 17.10.
It's about time.
Scott Gilbertson posted on November 27th,
just a couple of days ago, at 4.30 in the morning,
his review of Ubuntu 17.10.
Now, who do you suppose that's about?
4.30 in the morning, that's really something.
And I find it to be interesting
to just get like sort of an outside the bubble take
on the Ubuntu 17.10 release.
That's sort of what I thought was fascinating about this,
sort of outside the bubble.
And there's a couple of elements of this review
that jumped out at me.
What was his name?
His name was Scott.
So Scott writes, in light of the gnome switch,
this really seems more like a homecoming
than an entirely new voyage.
More like a homecoming.
Yeah, I kind of agree.
It does kind of feel like more like a return to gnome.
Yeah, it really does.
Yeah, and a return to community-inspired design
and building and packaging, right?
And feature sets.
One of the things that when Dustin Kirkland
was going around and doing the survey
and asking what people wanted on Ubuntu,
the thing that really stood out to me is,
ah, this feels like old Ubuntu.
This feels like old, early days Ubuntu.
The whole entire thing felt like that to me.
So I completely agreed with Scott's take here.
It's like more of a return, really.
He goes on to write a couple other interesting points.
A recent call for community input
on the new Ubuntu desktop theme seems to message a point
about the new Ubuntu desktop,
one that's more community-centric.
And then he writes,
Canonical got rid of most of its design team.
So in one sense, it has no choice
but to farm these things out to the community.
Ha ha!
Pobie, I don't know if you wanted to,
in your personal opinion,
did you want to respond to that particular line
in this review?
Because that's a bold statement right there.
Canonical got rid of the desktop team.
No more designers working on the desktop.
And their only option now is to cheap it out
and go to the community for a theme.
What do you think of that?
Yeah, it's not the first time I've heard people say that.
People have said in the past similar kind of things
about how we don't have a design team
or the design team don't care.
There's always some reason,
there's always some ulterior motive
for why we're asking the community for input.
It can't possibly be that we're just asking them
because we value their opinion as users
and experts in the field.
Like that can't possibly be the reason why we're asking.
Yeah, it does seem to be like there's an assumption,
just an assumption.
Now, would you acknowledge that it does,
I think some of that comes from this recent restructuring
at Canonical where people just kind of,
it's people don't know from the outside.
They don't really know who's left
and who's working on what.
So they just make their assumptions from the outside
that, well, they got rid of the Unity 8 folks,
they got rid of the people working on artwork
and now they just have the core team of people
that we hear about and that's it.
And so they have to do this.
I mean, the perspective seems reasonable to me
just completely from the outside.
To some degree, we did downsize to some degree back in April
and that was a struggle.
And there are people who were lost
through all areas of the business.
So some, yep, certainly some people were lost from design
and some people lost from the desktop team
and some people lost from all other parts of the company.
It wasn't just, if you worked on Unity 8,
you're out the door and that's it.
There were people lost from all over the place
and that was difficult for us.
But the thing about Unity 7 and theming and stuff,
we haven't made a lot of effort in Unity 7 changes
for a number of years.
Like we haven't, it's been mostly maintenance mode
for some time because our focus was on other things
like the phone, for example.
And we spent a lot of time cultivating a community
around the phone and now we're no longer doing that.
We've refocused back on the desktop.
It's not like we stopped asking the community for input.
It's just that our focus was on something else
and yeah, we've refocused.
So his comments about returning home
and coming back to the Ubuntu of old,
that's not unsurprising given that we're no longer working
on things that some people thought we shouldn't
have been working on in the first place.
Right, right.
I think when you look at it in a wider context,
you look at people that are also on the new community site
that are discussing, what do you wanna see from Mir?
What do you think about a Unity 7 remix of 1804?
When you look at the discussions that are taking place
on the new community portal or hub,
what's the, what should I call it, Poppy?
What do I call it?
The new community hub.
When you look at all of the discussions
that are taking place, then the theme discussion fits in
as just one of many wide ranging discussions
that are now taking place.
But when you look at it in, it's in just,
if you look at just the theme discussion,
it looks like, oh, we're tossing it to the community.
And when in reality, you guys are seeking input
on like three or four different topics
that I can think of just off the top of my head right now.
And it's a change, you're right.
What it is, is it's a behavior change
from the last few years.
It's an adjustment to a behavior change.
Yeah, and part of the reason why we changed
and rebooted the community website
was because it didn't lend itself particularly well.
I mean, something I've said to other people recently
is that a lot of this engagement happened
over the last few years.
You just didn't see it.
It just wasn't particularly visible.
It was buried on IRC channels.
There were conversations happening
in an Ubuntu desktop IRC channel on FreeNode,
while the conversation was happening on a mailing list
somewhere, it's public, but nobody found it.
And it wasn't particularly easy to engage with.
Modern projects are using things like Slack,
like discourse to make it easier for members
of the community to get on board and voice their opinion
and say, yeah, I'd like to help.
If the way you get on board is, well, first of all,
you've got to sign up to this mailman mailing list,
then people are gonna be like, no, screw that.
I don't even use email anymore.
Right, and so part of this is planned.
You know, we wanted to make it easier,
the onboarding process, the whole reason
why the Community Hub exists is to make it easier
for that onboarding process so that we can start
having initiatives which are, you know, new design
or get involved in a new flavor,
or what should we do about this feature,
or what should we do about this particular
piece of software?
It's to make it easier for people to engage with us.
And people are engaging, as you've said.
Can I ask you something?
Oh, go ahead, go ahead.
I'd just like to add to that as well.
What makes contributing to the themes so sacred?
Why is it that all of the community members
that contribute translations or file bugs
or submit patches or work on the upstream code
that Ubuntu and many other distributions are made of,
why is it that that kind of contribution is fine,
but suddenly asking people to work on themes
is suddenly taboo and you've sold out,
you've thrown it all to the community,
you don't care anymore?
I guess because the fantasy is that Canonical
has like these super high-end developers
that are secretly using Macs with Adobe Photoshop
to create themes that we don't have.
I don't know.
No, I don't think it's that.
I think it's that for some reason people have it
in their head that design is not a thing
that people contribute for the love
of wanting to contribute.
You have to pay designers.
That's the only way to get good design
is you have to pay them.
Yet software developers, people who provide patches,
people who do translations, people who write documentation,
they can all do it for free for the love of it
in their spare time, but designers, no,
you have to pay them.
And I think it's a ludicrous assertion
that these are entirely separate different people
that have to be paid.
I'm not saying never pay them,
but the assertion that for some reason
we shouldn't be able to ask the community
to give us help in the areas of design
in the same way that we ask people to help us translate,
patch, test ISOs and write documentation,
I think is bizarre.
Okay, all right, that's a pretty good point.
Yeah, it's just a sort of a reframing
of how you think about it.
So Dan, I think you and I would agree on one point,
the biggest point of branding could be the theme.
Like this is where Ubuntu could really kind of be,
you see it and it's obviously Ubuntu.
So it's not really even, it's not a theme,
it's an experience, isn't it?
It's like the Ubuntu experience.
And it seems like owning that is pretty critical
to have a desktop that's truly an Ubuntu feeling,
like it's the heart of Ubuntu.
Yeah, and honestly, I mean, my personal stance is
themes are dead, it doesn't really,
like style sheets are API these days,
they're important for applications.
And I think your style sheet and your icons
are just as important as any other component
of the desktop environment.
You wouldn't say, I mean, when you,
when Canonical decided to stop doing Unity 8,
they didn't say, okay, community,
come up with a new desktop environment, you know?
Right.
Like that's, it's important work
that you just don't hold a contest for.
You know, like there has to be a direction and a vision
and they said, hey, we're gonna go with GNOME
and then took feedback
on how are we gonna present GNOME, right?
And then they didn't leave that up to a vote
or hold a contest or anything like that, right?
It was, well, let's take the feedback into consideration
and let's, you know, do surveys
and there it was much more of a directed effort.
And I think that's probably what people are objecting to
is it kind of seems like, it's like,
ah, you know, we don't care, it's just paint, you know?
Yeah, but what if, and I know this is a long shot,
but what if you can end up with something
that's like 90% there and it's pretty damn good
and you take your own internal team
and you round off that last 10% and you make it great
and then you over the next three LTS releases,
I mean, I'm talking a really long-term scale here,
you make it specifically the Ubuntu branded desktop theme.
And it, but it starts with, the thing that I like
about going to the community about this is,
well, let's get the most modern takes
on what makes the best theme.
Like let's get the Arc people involved,
let's get the Mocha people, let's get everybody,
people that are loving the Pop OS stuff,
let's get everybody involved that's loving all that stuff
and get the best, most modern version
of a Linux desktop theme that we can get
because GTK 3 can be beautiful.
And so let's just see the most latest version of that.
Yeah, but the problem is like, in reality,
what you get is everybody just upvotes
like trendy crap that's broken, you know?
It's like nothing that somebody actually put time into.
I think, you know, the decision that was made
to have Sam do the Suru icons is like a no-brainer,
and like not doing that would be a huge mistake to me.
So what I would, you know, if I were someone
that had power in the Ubuntu canonical realm
is that I would say, hey, you know,
all this great design work that we did for Unity 8,
let's rally a community around building a style sheet
that lives up to that ideal.
And let's build what we all, you know,
invested in, you know, before GTK 3.
That's really a thing, though.
I mean, that's a thing that you gotta take on and maintain
and then really own for years and years and years,
especially when you ship it in an LTS, you know?
And whereas if you start with Edwardia
and then you make Edwardia good and usable by human beings,
you're almost all the way there.
I'll say this, I'm not really, on my machine at home
that I use all day long and all night long
on my non-workdays, it's an Ubuntu LTS 16.04 Unity 7
with the ArcDark theme.
And I forget the icon theme,
but I'm not using the standard one.
But the thing that really strikes me
about the old theme that comes with Unity 7
is it's extremely glance-able.
Like, you can just look at the icons
and you know immediately what they are.
They're large, they're readable, it holds up.
Unity 7's theme today holds up.
It holds up in high DPI even, it holds up.
It holds up better than some current themes hold up.
Surprisingly, it feels dated but it holds up.
And so in some ways, because they sort of,
they did own that and they really kind of took that
under their wing, you know, years later, it still works.
It still holds up, it's just feeling old these days.
So I do follow you, Dan, and I do completely agree
that if you could, you wouldn't just sort of
dump that investment in the Unity 8 design.
You wouldn't just jettison it.
You would somehow incorporate it in the future product.
That is, to me, not as sustainable
as having a light fork of Edwardia
and then over the next, say, two or three releases,
carefully iterating it.
That, to me, seems to be a, I don't know,
a more sustainable approach, you know what I'm saying?
Like something that, it will take longer
but it would work much longer.
It's something that's usable much longer.
Yeah, I think the argument is that
it requires a significant investment
and one of my favorite quotes from a design article
was, you know, design's not something you sprinkle
on the top like a little bit of je ne sais quoi
as a junk grid pissing down an alleyway.
You know, it's just like something you just throw on there
like, ah, whatever.
Yeah, I suppose so, yeah.
It's, you've gotta invest in it and cultivate it
just as much as you care about the actual meat
of the code of the applications.
And I think that's the thing, is people wanna see
that it's invested and cared about
and not like an afterthought.
And I know that those guys actually do really care
about that stuff, I think that it just needs
to be communicated that way.
I suppose, Eric, you have a good point.
Eric in the Mumble Room says, well, look,
this is like the definition of not,
this is the definition of anti-not invented here.
Right, Eric?
Right, I mean, for years, Canonical was that company
that if it's not built here, then we're not using it.
You know, I mean, that's very reminiscent.
Or at least that was, I think, the impression, yeah.
Right, I mean, that's, right, yeah, exactly.
That was the impression.
But I mean, how is reaching out to the community
anything but being like an apple
who embodies that completely?
I mean, here, why don't you be a part of this thing?
Why don't you help us create icon themes
and wallpapers or whatever the case may be
and be a part of this product?
Be a part of, you know, 1804.
Hmm, so I guess we probably really just have
to kind of leave it here, it seems to me,
unless anybody else has any closing thoughts on it.
It seems like we just leave it here
and we just wait and see what happens,
but good point, everybody.
Just one extra point, I think it's because people
often are going a little bit back
on the notion between code or design,
which team should actually get contributions,
is that if you pick up a pen and a little bit of paper,
try to draw something, you'll probably see
that you failed miserably.
And it's hard for you to actually have that notion
when it's about code.
So people often think that they're gonna get crappy design.
And so they tend to value and think that the only way
is by actually acquiring talents
and having the company do so.
And the other point on for recommendations,
like when it's like getting actual feedback
from the community, it has been the inconsistency
that makes Canonical's voice a little bit kind of low.
And in that way, community responds
not with an open heart immediately.
It takes a good amount of time until they actually,
okay, feel more, okay, they are actually being honest here.
It's not just another move.
It's not gonna change in a couple of weeks type of thing.
Yeah, and that could be something that changes over time,
don't you think?
Don't you think that's something
that will ease over time potentially?
I think yes.
As long as the management is done in such a way
that actually fixes problems that existed before.
As a developer, I had once a really bad experience
when I actually spent time investing
in a piece of technology that Canonical did invest in,
and then just bang, disappeared.
And that experience, if you have that over and over,
you don't come back, right?
Yeah, yep.
And it's one of those things, you have to be resilient
and you have to kind of do smooth transitions.
And I think they're doing that now.
I hope they continue with that path.
Well said.
So I wanna move us on because I still wanna talk about DRM
because I think that's sort of a super important topic.
And there's been some major developments this week,
but I do wanna do just a quick bit of followup
and go back to last week's episode, if we could.
And the CEO of, you guys remember we talked about Linus,
the auditing tool last week?
And it was Sysify, is that how we decided?
C-I-S-O-F-Y, Sysify?
Yeah, that sounds right.
Michael is the CEO there, and he pinged me and said,
hey, just a couple of extra bits of information
about Linus, it just hit its 10 year birthday this month
as we happened to just randomly cover it.
That's awesome.
That's super awesome, dude.
And also, Linus can run as an unprivileged user.
In the episode, I decided to run it with sudo.
But he says, if you do that,
if you run it as an unprivileged user,
the report is just stored in slash temp.
And I really appreciate it.
He also said that some of the plugins are completely free,
and there are indeed others that are commercial.
They're built by companies.
He says, also, we advise using a cron job
with daily comparers for easy detection of new findings.
And he linked to a linux-audit.com article for that.
If you didn't catch last week's episode,
I definitely recommend it.
We talked about Linus, a tool where you could
audit your own system and see what's changed,
see what's going on with that.
How's the Gentoo challenge going over there?
I see, I have a whole bunch of things happening
right now on the screen.
I don't even know what these are.
What are we seeing build right now?
What is this?
Right now, we are updating the world set.
So Wes Payne over there, Mr. Wes Payne, son of a bitch.
He's the one that, I don't know if you guys,
if you've caught all of the episodes of Linux Unplugged,
as we were wrapping up, just a couple episodes ago,
it wasn't that long ago,
Wes suggested that we do a Gentoo challenge.
And so what we have done is we have created
a virtual machine here in the studio
that is building Gentoo right now as we record this episode.
And that's what you're looking at
if you're watching the video version right now
of the Unplugged program.
If you're listening to the audio,
AKA if you're the majority of the audience,
just envision a lot of GCC crap going across the screen
and you've basically got it.
So I just wanted to give a mention for two reasons.
One is a completely selfish reason
and the other is because I just love
talking about these events.
And I can't help but talk about them.
Texas Linux Fest is coming up
and they have their call for papers right now.
So it's gonna be in June.
So you got a little bit of time to plan for this.
It's gonna be at the AT&T Conference Center
in Austin, Texas.
And they have a whole range of topics,
but they have their call for papers right now.
This is their eighth year.
And they've never been.
I thought it was-
It seems like a lot of fun.
Could somebody tell me how many people go to this thing?
How many people go to Texas Linux Fest?
And is it June?
Is it worth being in Austin in June?
Like really, be honest with me.
Is it, tweet me, at Chris Elias,
is it worth being in Austin in June?
It just doesn't,
it feels like it's gotta be a really good event
to be in Austin at that time.
And then just a little PSA
before we wrap up the community news segment this week.
You Fedora users, to pay attention just for a moment,
Fedora 25 has entered the end of life status,
aka no more updates for you,
in just about a week from when you hear this episode.
So now would be a really good time
to upgrade to Fedora 26 or maybe Fedora 27.
Yeah.
Fedora 26 should be really solid right about now.
And 27's getting there.
And your upgrade should probably go pretty smooth
if you have a pretty straightforward system.
My upgrades have gone smooth for many releases now.
Fedora 25 will be DOA in just about two weeks.
So upgrade to Fedora 26 or 27 now if you're a Fedora user
because your time is running out.
We need to have like an end of life theme.
Like if somebody wants to make us an end of life clip,
I'll play it on the sound board
for like distros that go end of life.
Because I think we should just have like a segment
like if you're running this version of Linux,
you're no longer getting patches.
If you're running this version of Linux,
you're no longer getting patches.
Yeah, right, you can just follow this show
and know when you need to update.
There's no master list, right?
So we should just put it all out there.
Just let everybody know.
I don't know, then I hear from people, maniacs,
like I think maybe Joe or somebody.
Somebody I know.
I'm not gonna say it's Joe Resington.
I'm not gonna say it's Joe.
But it probably is.
But it's probably Joe.
I run like Ubuntu 14.04 or something.
I know, I know.
Just absolute, absolute animals.
Absolute animals, just animals.
I can't even understand it.
I can't even understand it.
Bashful, you had a comment about the funeral march
towards old distros, go ahead.
I was just gonna say, you wanted a sound clip?
Just run the funeral march.
Oh, I get it.
You know like the brr, brr, brr.
Bingo.
I feel like we need something unique to the show though.
You know, like some podcasts have people
submitting clips all the time.
Sound board stuff.
For sure.
I got an empty sound board right now
and the only thing on the Linux unplugged sound board
is the intro and outro theme and the flashback.
I got the flashback harp, which I feel like is good, right?
That's good.
But I don't have anything more.
So if you wanna help populate the new sound board
for 2018, you can start sending clips
into the unplugged program.
It's gonna be full of.
Is the bell not a part of the sound board?
Well, it depends.
Is that a real bell?
Depends on the show.
It depends on the show.
You know, people ask, should I reveal?
Do you guys feel like I should reveal
if the bell is real or not?
No, keep it a mystery.
I'm gonna keep it a mystery.
Cause I know some people have looked at the audio waveforms
to try to determine if the bell is real or not.
And I don't wanna say.
I don't wanna say.
You'll have to guess yourself.
You can load this up in Audacity.
Load this episode up in Audacity.
And you take a look at it yourself.
Digitalocean.com.
Go over there to support the show, Digitalocean.com
and use our promo code DOUNPLUGED.
One word.
That's it, one word.
You get $10 credit over Digitalocean.com.
Wes Payne is the perfect Digitalocean customer
because every time I have a conversation with you, Wes,
every single time you're like,
you know, I could just do that on a droplet.
Like I kinda had to actually.
You know, that's true.
I kinda had to argue with you
to just load a virtual machine on your laptop
to do the Gentoo challenge.
Whoopsie.
Cause you're like, you know,
we could just do it on a droplet
and then I could use the HTML5 console
and then I could reload one of those rigs with Gentoo.
Like, you had a whole plan.
And I don't know, less than 55 seconds.
Which, ironically, is probably how long
it would take to spin up a droplet.
You like that?
I like that a lot.
Digitalocean.com.
You create your account, you use the promo code DOUNPLUGED,
you get a $10 credit.
Now, the rig that I love, my personal favorite,
three cents an hour.
Let me just let that marinate for a second.
Three cents an hour.
That's like nothing.
That's nothing.
It's like just walking around outside.
I mean, you know, I'm not saying the burger comparison,
I'm not saying the coffee comparison or the heroin or weed,
whatever your habit is.
I don't think people would get that.
And I'm not saying if that's a soundboard bell
or a physical bell.
But what I am saying is you can get a great deal
if you go to digitalocean.com
and you use our promo code DOUNPLUGED.
They got 40 gigabit connections coming into the hypervisors.
Of course, the host machines run
GNU slash Linux running KVM for the virtualizer.
And they got Bloxorg.
If you're basic and you just want something
that shows up as a slash dev slash SD device,
go with the Blox storage.
That's what I do when I wanna have it as my home.
So when I set up a DigitalOcean dropout
that I'm gonna remote into and have like Ubuntu mate,
I use Blox storage for my slash home.
Now if I have a rig that I'm using for like web storage
or additional files or sharing with co-hosts,
that's where I use spaces or object storage
with DigitalOcean.
They have an API so when the machines during,
for our production, I need to spin them up
or shut them down, I do it all through the API.
I don't go to the website.
Love it.
And if you're in a project, if you're like a,
maybe you're like, I don't know,
just randomly gonna put this out there.
Just a crazy idea.
If you're in an open source project,
you're working with some people,
they got team accounts.
Team accounts.
They got team accounts.
You can easily manage your cloud with your team
by inviting others' team accounts.
DigitalOcean.com.
Use our promo code DOUNPLUGGED
and take advantage of a $10 credit
and enjoy spaces.
I wonder, are they still offering that?
Oh shoot, they're still offering, oh shoot.
Oh!
So here's what you can do.
You go to DigitalOcean.com, you create your account,
use our promo code DOUNPLUGGED, you get the $10 credit,
and then you go sign up for a two-month trial
of spaces for free.
It's good stuff.
It really is good stuff.
You know, the thing about DigitalOcean that strikes me,
and maybe they should make this like their slogan
or something, but.
Go, S, go.
It's easy enough for development.
All right.
You can spin it up like you said, API, super simple
dashboard. Seconds.
Right, seconds.
You don't have to think about it.
It's not difficult. Like serious CPU and memory.
There's a big range of integrations.
Bandwidth, seconds.
Yeah. It's crazy.
But it's stable enough for production.
Like when you're ready to go full bore,
putting it out there for the world, boom, no problem.
Oh, boom, no problem.
DigitalOcean.com, use our promo code DOUNPLUGGED,
and Godspeed.
Go create some infrastructure.
You know, I had a good comparison.
That costs less per hour than long distance
used to cost per minute.
Wow.
And also super solid old man reference.
Yeah.
Nice.
DigitalOcean.com, promo code DOUNPLUGGED.
So I used to be one of these guys who was
not so concerned about the DRM.
You just wanted your media.
Then I went and watched a talk by this Cory Doctorow guy.
This son of a bitch totally changed my entire position.
He knows how to speak.
It happened randomly too.
And I have a vlog about it, not to be that guy,
but I have a vlog about it where I went there
and I saw the talk and I went, well shit,
now I completely changed the way I feel about this.
So I wanna frame our discussion here with what hit me
and what I walked away with.
And I think it helps us think about this DRM problem.
There is a lot of inventions throughout humanity
that are really there because they were able to stand
on the shoulders of giants.
We even have a saying for it.
Standing on the shoulders of giants.
And if you look at open source,
I mean that's what all of our open source desktops
are all standing on top of the frameworks
and libraries and kernels and stacks
that everybody else has built.
Everything is standing on the shoulders of giants
that we rely upon.
If you look at the internet, it's the same fucking thing.
It's standing on the shoulders of giants.
And DRM locks it up.
DRM locks up knowledge.
It locks up intellectual property.
It makes it ephemeral.
And it makes it something that's only available in the present
and something that is inaccessible
to future generations of humanity.
It locks up knowledge.
It is the antithesis of the open internet,
of open standards, of open source, of sharing knowledge.
It's the antithesis of what the internet has brought us.
This fundamental communications platform
that humanity can use to educate themselves and grow.
DRM is the opposite of all of that.
And the EFF has been fighting against DRM
and the laws behind it for a decade and a half.
And things are not going well.
So Cory Doctorow, who I think is the premier thinker
on this topic, who holds talks that will change
the way you think about this.
And he writes posts on the EFF's deep links blog
that will really make you think.
And the headline is DRM's Dead Canary,
How We Just Lost the Web, and What We Learned From It,
and What We Have to Do Next, or What We Need to Do Next.
And the thing about DRM is it's not
about copyright protection.
In fact, that's total 100% bullshit.
That's used car salesman bullshit.
Everybody, and this is Cory's words,
everybody on the inside of the industry
secretly knows that DRM technology
is completely irrelevant.
The technology is irrelevant.
It's fundamentally flawed.
And I'll get into why.
But it is fundamentally flawed.
It is impossible to keep DRM safe.
But DRM law is everything.
And this is not a US-specific thing.
The reason companies want DRM has nothing
to do with copyright, nothing to do with copyright at all.
So let's look at Netflix, because it's just
an easy example.
But there's so many other things beyond Netflix.
DRM has so many other implications
besides online media.
But it is the one that we think of.
And it's the easiest one to relate to.
So let's go with Netflix.
They send you an online streaming movie
that's been scrambled.
And they want to be sure that you
can watch it and that you can even maybe save it
to your hard drive and play it back later.
But they want to make sure it's protected.
So they need to give you a way to view the movie at some point.
That means they have to unscramble the movie for you.
And there's only one way to unscramble
a file that's been completely encrypted.
You have to use a decryption key.
So Netflix has to also give you the unscrambling key.
But if you have a key, you can't just
unscramble the Netflix movies and save them to your hard drive.
So how can Netflix give you a key but control how you use it?
Netflix has to hide the key somewhere on your computer,
like in a browser extension, like an encrypted browser media
extension.
Hiding something really good, hiding something well,
is hard.
Hiding something well in a place of equipment
that you give to your adversary to take away with them
and do anything they want to it offline is impossible.
Any tiny flaw in that fragile wrapping around these keys,
any tiny flaw that you can exploit, and they're free.
And once that flaw has been exposed,
anyone can write an app or browser plug-in
that has a Save button that can just exploit it immediately.
And of course, they've seen this over and over
again with all kinds of different schemes.
And Cory is writing this in a way
that maybe people aren't familiar with the situation.
It does a really good job.
But yeah, it's super good.
Once the flaw is exposed, anybody can get access to it.
And this is a fact.
The companies know this.
They can spend millions of dollars developing DRM.
And it gets broken in days by teenagers or hobbyists
with equipment.
And it's not because DRM makers are stupid.
They can have brilliant people making DRM.
It's because the idea is stupid.
Trying to store a decryption key on a system
that your adversary controls is dumb as shit.
It's the dumbest thing you could do in security.
Think about that for a second.
Trying to store the key to your system on a hacker's computer,
that's the stupidest thing you could do.
And that's what DRM is trying to do.
So this is where the law comes in, Uncle Sam's law comes in.
But the best thing is, it goes way beyond Uncle Sam.
It all comes back to your old buddy, your favorite,
the Digital Millennium Copyright Act.
In 1998, Congress passed that son of a bitch.
And Section 1201 provides for felony liability
for anyone commercially engaged in bypassing a DRM system.
And get this, if you're commercially doing it,
you know, like some of these Kodi box manufacturers?
Five years in prison, $500,000 fine for your first offense.
How many Congress people do you think
had actually used the internet when this law was enacted?
I know, right?
98?
Even non-commercial bypass of DRM is subject to liability.
And it also makes just even talking about DRM exploits
legally risky.
And yet, use of Section 1201 of the DMCA
to threaten security researchers who discover flaws
is widely used too.
And the beautiful thing is, thanks
to US trade representatives, I mean, you know,
hurrah everybody, they've convinced other countries
around the world to adopt a version of this rule
as part of our trade policies.
So you want to do trade with us, you
got to protect intellectual property.
We don't even need some of these huge TPPs.
We just, if you want to work with us, you got to respect it.
This is where the W3C comes in.
These sons of bitches over the W3C
have really sunk us all.
And this is where I think Linux users may
be able to eventually, it's not just Linux users, actually,
it's any platform users.
But I think it has to start with Linux users.
Could maybe change the tide, move the dial,
whatever stupid little saying you want to give it.
But the W3C and the implementation
of EME, encrypted media extensions,
is really what enabled all of this.
It was sort of the final straw.
It was the straw that, you know, whatever the fuck.
In 2013, Netflix and a few other media companies
convinced the W3C to start work on a DRM system for the web.
This DRM system, encrypted media extensions,
EME represented a sharp departure
from the W3's normal business practices.
First, the EME would not be a complete standard.
That's a huge deviation.
Second, the organization would specify
an API through which publishers, i.e.
businesses, large corporations, and browser
vendors, Google, Apple, Microsoft, and Mozilla,
would make DRM work.
I want you to think about that for a second,
because that means you have to be on the approved list.
You have to be Google.
You have to be Apple.
You have to be Microsoft to make this work.
The actual content decryption module, the CDM,
wouldn't be defined by the standard.
That means that EME was a standard name only.
If you started a browser company and followed
all of the W3's recommendations, you still
wouldn't be able to play back a Netflix video.
That's the killer.
If you followed all of the W3 standards
today, you wouldn't be able to play the video.
That's not a fucking standard.
It's not an open web.
That's not a standard.
That's not a standard, right?
You have to get Netflix's permission
to play back that video, regardless
of whether it's not a standard.
That's not a standard.
And that is a, oh, man.
What it basically means is you are enshrining
the current browser monopolies, because you can't now
create a competitor to Chrome or Firefox.
Yeah, absolutely.
And play back encrypted media extensions.
It also twists things a little bit.
It's not like you and Netflix establishing a trust
relationship.
It's them and these companies you happen
to use as the middleman.
Right, right.
My middlemans.
Yeah, you're right.
That is also really creepy.
In a web which every publisher gets
to pick and choose which browsers you can visit,
their sites, is very different from the historical web.
I think we should go with the traditional web.
The old days.
Technologies that have stood in the way
of this permissionless interoperability,
for instance, patent-encumbered video,
have been seen as impediments to the idea of open web,
not standardization.
Look at Flash.
Steve Jobs's thoughts on Flash open letter,
iOS's refusal to implement Flash,
the really limp attempts to implement Flash
on Android that never went anywhere.
Flash died not because we don't like it, but because of mobile.
Because mobile wouldn't do Flash.
That's why Flash dies, is dying, right?
And now is essentially gone, is because mobile
refused to implement it.
Because it wasn't a standard.
And now, thanks to mobile, projects like YouTube DL
allow me to download video from over 200 websites
because they're all trying to be mobile compatible
and they've got to serve this shit up as an H.264 file.
And this is the opposite of all of that.
This is actually the op- this is like enshrining Flash forever.
This is not Flash this time.
This time it's encrypted media extensions,
which each manufacturer, Netflix,
Hulu, they all get to brew their own now.
This is the opposite of what the W3C used to be about.
This is the opposite of what we used to expect from an open web.
When the W3C starts making technologies that only work
when they're blessed by a handful of entertainment
companies, they're putting their thumbs,
they're putting their fists on the scale in favor of ensuring
that the current browser giants get the majority
and enjoy a permanent regime.
How many times have you heard somebody say,
well, I use Chrome because it works with Netflix
before Firefox could?
You know, this has a lot of parallels
with the whole net neutrality thing that's going on now, too.
That's interesting, you're right.
It kind of does, doesn't it?
Yeah, it kind of does, only this is worse
because this is locking up intellectual content
and creative things that humanity has created
and wrapping them up in a DRM that is only accessible once
a certain vendor has blessed it.
And it's cute for modern day companies
that want to make a great profit and impress their shareholders,
but what about 45 years from now?
What about 65 years from now when we want
to look back at the classics?
Well, what if all that shit's wrapped up in DRM?
How does that impact humanity?
And I hadn't thought about this.
There seems to be an unavoidable harsh reality to me.
The W3C wouldn't be doing this if it wasn't for WebKit
and Chrome's dominance.
If Mozilla Firefox was the predominant browser,
this is my personal opinion, but if they
were the predominant browser, if they had a 70% market share
right now, would we be getting this W3DRM encrypted media
extension standard rammed down our throats?
Or would they have to do something that was
open to the general web?
Something tells me things would be a lot different.
We're only in this position right now.
We're only getting screwed.
And it's not like we're getting a little screwed.
It's like humanity.
It's like Disney on a whole new scale.
It's Disney for all of the content.
It's Disney's copyright imperialistic behaviors
for all intellectual property.
For as long as the DRM technology is possibly valid
and these companies are around to ping a request,
this DRM is going to work.
And it's going to screw over people
for years and years and years.
And I don't feel like this would be possible if Firefox
had 70% of the market share.
Now, I say this completely understanding
that Firefox supports encrypted media extensions.
And I understand that they are.
But I feel like they had no option.
They didn't.
They really didn't.
So when you think, what can we do, well, part of me
feels like what we could do is we could all
switch to the new Firefox.
It's pretty fucking great.
Firefox Quantum 57, I've been running it since it came out.
It is faster than Chrome.
It just has less load on my system.
Like, I can load up Firefox and have
it load a whole bunch of tabs in the background.
And it doesn't feel like my system is doing anything.
Like, it just feels like, I don't know.
Like, I look at my cores, because I always
have the little system stats up in the bar.
And my cores are just sitting there at nothing.
Meanwhile, I'm blasting through Firefox pages like a maniac.
And all my tabs are loading up.
When I got like 16 tabs, 15, 10 tabs on Chrome that I close
and then it reloads, all my CPUs are pegged for a while.
And I'm like, oh, awesome.
Look at Chrome, man.
Look at that.
It's multi-process, multi-core.
It's so awesome.
Really browse it now.
Yeah, but now when I launch Firefox,
it does the same damn thing.
It uses just a total, total, total, like 70% less
of the CPU.
I think it's getting pretty damn competitive.
And you look at, like, they're so serious about some
of the technologies that they're investing in that, like, Rust
is an ends to a means.
Rust, the programming language, is an ends to a means
to what they're trying to accomplish.
And Rust itself is a technological miracle.
So maybe now is the time, as Linux users,
we make the hard cut.
We start using Firefox, and we start advocating Firefox
like we advocate the Linux desktop.
And I think this is the key piece.
If we can advocate the use of Firefox
like we were able to advocate the use of the Linux desktop,
maybe over time we could start retaking a little bit
of that market share.
And you were so inspired, Wes, by the new release
that you ended up putting that shit on your phone.
I did.
It's true.
You maniac.
Are you going to set it as the default browser?
Right now I'm picking, but I think I will.
I think I will.
I've been kind of fiddling between them, but really.
I might try it.
Really?
Yeah, you get the sync going.
It's a good time.
Mr. Daredevilin, you want to wrap us up on this topic
before we move on?
Yeah, so I actually think Firefox
is a little bit in just as bad position as Chrome
and as Google in here, actually.
They were just as much as pushing for the ORM.
The only big difference is Google
can decide to do whatever they want with Chrome,
and we could potentially attempt to override whatever
is being done in Firefox.
Because of its more open dynamics,
we should be able at least to, by just injecting
contributors over and over, take actually more ownership
of the code and actually get that to a point
that we have to say.
Now, all those cases are difficult.
And this started way before we were talking about DRM.
It started when we started talking about Osm.js,
the WebAssembly.
Because if WebAssembly starts being OK
and people were mostly, oh, because of the performance
was good, it meant that people were
willing to compromise with the ability of the JavaScript
code that runs in their browser in exchange of speed.
That's actually when the problem started.
Not so much DRM and DRM, it's just as a consequence
of that, I think.
And us actually wanting to use those services.
And just as a final point is, well, it comes down
to have a way to the browser work out
a sandbox that is isolated, that does
run these DRM for this company and that other company,
that we can make sure that it's only that one.
At least this should give us the option of, OK,
I want to access this service.
I already compromised to this service.
Now I'm actually allowing them to execute this code.
But at least it's isolated in that context.
That could be an implementation that
would be more OK with than maybe what's actually
been happening now where it uses more of the holistic system
because it requires that for the rendering and everything.
Yes, it sounds like you're advocating for something
more trying to put the user back in control
rather than the system where we're left being, you know.
Absolutely.
Hard-like system is what I would really love to see.
But that day is never coming, at least so far.
I have to just resign to cubes.
That's basically where I find myself.
I feel like Mozilla didn't really
have much of an option in implementing this stuff either
because if they didn't, then they're not
providing what their users want.
And then they're, by consequence,
going to lose market share.
Yeah, no, I think you're right about that.
And I think, Chris, you were spot on just
with the dominance of Chrome and WebKit.
And just like, how used are we to all the proprietary stuff
Chrome bundles in for us?
And we just use it.
And it's like, it's useful.
Oh, yeah, I can cast to my TV, all these things.
But it just really hits home that these
are things that are not open or are not part of the open web.
Well, what I feel like is if there's
anybody that can swallow rough edges or deal
with inadequacies, which really isn't even
fair to prescribe to Firefox.
But if there's anybody that can, it's
Linux users who have come up through the bad years
of the Linux desktop.
And we're kind of like, I know I have.
I will just speak for myself.
But I've spent the last couple of years
just sort of kicking back, my hands behind my head,
leaning back in my seat going, finally, it's here.
I've got the same proprietary crappy application
that everybody else has, no compromises.
I can do everything everybody else can finally
after all these years of the Linux desktop advocacy
and fighting for it, I am on application parity.
And that's what Chrome gave me.
Chrome gave me application parity with all the other mother
effers out there who have had something I haven't
had for all these years.
But the reality is it's like Walmart.
Walmart can be convenient as hell here in the States.
But the reality is you're killing other businesses
by using Walmart.
You know what I mean?
And it's time to start shopping with the independent mom
of pop shops.
And I feel like we as Linux users
are more equipped to do than just about any other type
of computer user.
That's my personal opinion.
I feel like if we could give the market share to Firefox,
even just another 10%, and build and advocate,
you go home on the holidays, maybe
switch people back to Firefox.
Yeah, absolutely.
Is that crazy?
And I've seen a number of relatives
too running older Firefox versions that haven't updated.
So that's also a good time to just go
get them all the new hotness.
And also Firefox seems to be making moves to double down
on privacy concerns.
There is more things coming to Firefox in future versions
that are going to be pretty good,
isolating out tracking to each site gets
their own silo of information and things like that
that I think are going to be compelling,
not in their implementation details,
but in their overall approach.
They're going to kind of take the iPhone approach.
And we don't need to use the cloud services.
We just want to sell the individual product
and protect your data.
And I think that sales pitch could really
sell for the web browser.
Mozilla has a unique relationship with the web
and what their motivations are as a result, especially
compared to someone like Google, who obviously needs the web,
but has other motives in mind.
Mos and Rats, that's all well and good
until Walmart goes and purchases all the small mom and pop
shops.
Dammit, Mos and Rats.
Fair enough.
Shut up.
Dammit.
All right, well, before we get into the Gen 2
challenge for the week, let's take a moment and thank Ting,
talking about voting with your wallet.
This is a better way to do mobile.
In fact, Ting recently posted on their blog
a super concise description of Ting.
Ting is a no-contract carrier that
offers pay-for-what-you-use rates,
as opposed to requiring customers to select a plan.
In this way, mobile isn't a high fixed cost.
A Ting customer's bill can vary with how much
they use each month.
As a result, the average bill on Ting is $23 per month.
And you can get started with a $25 promo code
if you go to linux.ting.com.
And I couldn't say it better than myself.
I've tried to.
In fact, it's so simple to explain
that it almost feels like you have to unexplain the way
the other competitors do it.
It's just a smarter way to do mobile.
You pay for what you use, it has nationwide coverage.
They have a CDMA and a GSM network.
And you can probably guess the towers
that those networks are.
So you just pick the one that works best in your area.
They got a control panel that you turn stuff on and off
as you need it.
They can get a SIM for like $9.
It's even available on Amazon Prime.
I mean, it's just awesome.
linux.ting.com.
It really is a better way to do mobile.
Whether you want to have a security device, my buddy Chase
from Unfilter, he has some Ting mobile devices,
SIM cards in his security cameras.
And they send him like, I don't know, like four pictures
a week.
Well, why would you pay for like 20 gigs of data
That's insane.
When you're maybe using eight megabytes a week, right?
And that's the perfect.
You can get that SIM card, and you
could put it in an Internet of Things device.
You could put it in a phone.
Oh, it's perfect.
You could put it in your daily driver.
The use cases are just all over the place.
Because there's no contracts.
There's no other termination fees.
So if it doesn't work for you, just turn it off.
It's $6 a month for the line.
And then you can manage all the different features
through their dashboard.
I think it's perfect for people who really just,
where that expense is somewhat trivial,
and you just need to get stuff done.
It's just the perfect backup internet connection.
Your main thing goes out.
You still need to go get those files and do stuff.
Boom, Ting.
$6 a month.
If you don't use it, that's all you pay.
When I was doing just 100% IT contracting, I had,
Ting wasn't a thing then.
The dark days.
I remember this.
I had a plan.
I almost won't even admit this.
But you have to understand, I was billing $120 an hour.
So understand that.
I had a plan that was $120 a month that sat in my drawer.
Just for when I was traveling, or when my internet connection
went down, or for when I was at another client that
had crazy firewall rules, or I needed
to do external testing, that I just kept in my laptop bag
all the time, it was always powered on.
And it was probably, I mean, I probably
used no more than one gig a month on that thing.
Wow.
Wow.
I would do it so different now.
So different now.
I got three lines now on Ting.
Linux.Ting.com.
Go there, learn more, save $25 off a device
or off your first month by going to Linux.Ting.com.
Thank you to Ting for sponsoring the Unplugged program.
So Mr. Payne over there has been installing
Gentoo throughout the show.
How's it going so far, Wes?
We're still compiling.
So I'm checking in right now.
What are you building at this moment?
Same position we were from last time.
I'm sorry, what?
Yeah, that's right.
I'm sorry, what?
That's right.
So you're saying I literally have nothing
new to talk about?
That's true.
Yeah, we're just updating the world.
See, but the thing is, Wes, is I plan this whole segment.
This whole segment.
Well, it's gone well.
So we've got all of our file systems formatted right now.
What did you do?
Did you go extend to four?
XFS.
Oh, really?
Atta boy.
Why not?
I mean, I'm not trying to slub it here.
No, XFS is my thing.
I really think that's the way to go.
Good job.
OK, so you went XFS.
Did you do like a home partition, or how did you?
Yeah, I was just keeping it pretty simple here.
So everything's just one partition?
Yeah, just one partition.
Then you have a swap?
I would never run a real system that way.
Do you have a separate boot?
No, not yet.
Really?
We might add that on there, but.
And you have a swap?
No, no swap either.
I didn't give it that much brand.
I wonder if you could do a swap file.
You could do a swap file instead.
I'll probably add a swap file, yeah.
Yeah.
Hmm.
So what do you think, Beard?
Is this sort of unimpressive?
I have an important forward-looking question
that is going to decide how long this process is going to take.
Desktop environment?
Yeah.
Yeah, I think we should talk about that.
That's a good question.
I chose not to do system D as the init system,
so open RC is where we're going with this.
I figured if we were doing the GEN2 challenge,
but just regular C, user land, all that stuff.
Fair enough, fair enough.
So after this, we're going to get our use flags configured,
everything there, compile the kernel,
and configure the rest of the system.
I have a suggestion.
Well, I don't even know if I want to say this out loud.
I feel like we should have talked about this off air,
but I have a suggestion for the desktop.
What do you think about the latest Enlightenment?
Oh.
Yeah.
And what about Wayland and the latest Enlightenment?
Do you want to try it?
That might be interesting.
Is this stupid?
Here's the thing, we have enough time.
So people that are GEN2 users could let us know,
is this completely dumb?
Should we go in latest Enlightenment and latest Wayland
and just roll with that?
That might be fun.
Check it out.
That would be great.
That would be great, but I think we need the feedback
because I don't want to do something
that's almost guaranteed to fail,
especially the thing is, this is in a VM.
What is the VM environment again?
A virtual box.
So that is an important factor here.
We got to remember the fact that we're trying
to do this in virtual box.
Right.
And I don't want the virtual box video driver to.
Now I suppose if we, well, but there's a lot of compiling.
I suppose we could, if we get it compiled,
I could then boot into it from my physical machine
for actually running the desktop.
That might be an option.
What kind of, did you do a VMDK?
What did you do for the disk?
Yeah, so it's, no, it's just a raw VHD.
Oh, so you would like rub that up?
Yeah.
Rub that up.
I like that.
I'm going to use that term.
So, okay, so you would grub that up, boot into that,
and then we could VLC RTMP stream your whole desktop
to the OBS machine.
Yeah, we could do that.
Yeah, I don't see why not.
If we could get enlightenment working,
then we could do enlightenment
with full 3D acceleration on the stream.
That would be pretty cool.
Oh, that would be beautiful, okay.
That kind of seems like.
That seems like the goal to aim for.
That kind of seems like the way we should go.
So where do you want to go with this?
What are you building specifically right now again?
I was updating the world set.
Okay, when you're done, should this be bootable?
No, not yet.
So we're not even.
We're not even going to get.
It's not bootable yet, no.
We're not even going to get bootable in this episode.
No, no, we're not bootable.
Okay.
Come on, Chris, these things take time.
This isn't just a story we're following, it's a saga, Chris.
So this is why people go with these Gen 2.
I was just looking at this branch of different Gen 2 systems,
these remixes of Gen 2.
I think this is why people do this.
I can't believe I used to do this per server back in the day.
This is mind-numbing to think about this.
I mean, I must have had 35 Gen 2 servers back in the day,
maybe 40 servers.
And I used to do this on each one of them?
That's crazy.
Well, the thing is you do them all in parallel,
so it only takes the time of one.
Yeah, and I definitely use the hell out of disk CC.
Disk CC allowed me to distribute the compiling
across multiple systems.
And we are limiting this to one system as we build this,
so I guess that's a disclaimer.
That's true, yeah.
I mean, if you want the classic long,
forever compiling Gen 2 experience.
Not doing Plasma, dude.
Yeah.
No, I'm not doing it.
That will take months.
I knew where you were going, and we're not doing that.
I think Enlightenment or, what else, Wes?
What would be your Enlightenment backup, XFCE?
Open box, nice and light.
That's true.
LXDE?
Yeah, that might be fun.
LXQD.
Yeah, there we go.
I was actually thinking LXQD, yeah.
I was thinking, Mumbler, do you have any suggestions
of super minimal desktops to build on Gen 2?
I3.
I3, I3 would be a good one.
More awesome, yeah.
Yeah, I like I3, or Sway,
if we're talking about doing Wayland.
What about Lumina?
Yes.
Interesting.
I think we should, okay, we need a poll.
It needs to either be Enlightenment or Lumina.
I thought Sway would be interesting,
although we could talk about Sway at any time.
Well, okay, I'm okay with three,
I'm actually pretty open to a three-way
if you wanna do a three-way.
Yeah, we could always do multi-desktop configuration.
Well, no, no, I mean, we could do a three-way vote,
and the audience could decide,
and whatever they pick, let's do that.
So I think we should, I'm gonna embed a straw poll
in the show notes for this week's episode,
and we probably won't get a lot of votes
because we're way into the episode,
but I feel like I'll also drop it
in the chat room for the live stream,
but I feel like we'll do three options.
So it's Enlightenment,
Sway,
and Lumina.
Yeah, well, the only thing I,
the only one I was, the only thing I wanted,
do we want it, instead of, well, no,
I feel like Sway, we should give a serious consideration.
But we could also talk about it in the future.
Yeah, I was just, I'm trying to think about LXQ.
All right, so let's do Enlightenment, Lumina, and Sway,
and we'll do a dedicated thing to LXQ in the future.
That's the way to do it.
I think that's the way to do LXQ.
All right, so we'll put a link in,
or I'll embed it in the show notes.
You go to jupiterbroadcasting.com,
look for episode 225 of The Unplugged Program,
and then vote on which one you want us to go with,
and Wes will try to build that, I guess,
maybe next episode, maybe?
Yeah, maybe.
Do you wanna just leave this build going?
Yeah, I think I will, yeah.
I'm composing the straw poll right now.
It'll be in the show notes,
and if you're gonna stick around for the post-show,
I'll let you guys vote that are listening live.
But I think that's probably where
we should leave it right now.
I'm proud of you, you're going.
I'm watching it right now, you're building the way.
I'm really, you're, how did you do this?
Is this a screen session, or what am I looking at here?
Just, I logged you into the machine with T-MUX.
So you're watching it too over there?
Yep. Ah, cool.
That's right, I am.
Nice, and then we're taking that,
and we're capturing that from an SSH session,
and putting that up on the live capture.
We'll have some better methods in the future.
This was just last-ditch.
Yeah, well, we're actually,
it's actually kind of fun for us internally.
We're coming up with different ways
we could capture your Gentoo build over there,
because it's like, there's no X session.
So there's not a lot of things we can work with
to remotely capture that and put it on a video capture.
What was that terminal sharing thing?
ASCII Cinema, or Paiobu, or screen, or T-MUX, or teleconsole?
Yeah, what was the first one, Pobi?
ASCII Cinema, ASCII Cinema.
Right, right, right, right, right.
That's for recording, not for streaming.
Yeah, it didn't seem to have a live stream option.
Our thinking was we would kind of play
with a couple of different options
on the pre-show next week,
and kind of dial in the one that works the best,
and then just sort of use that.
So if you want to join us live next week,
go to jupyterbroadcasting.com slash calendar for that,
because that's probably what we'll be spending
the live stream doing,
is trying to figure out how to stream
a barely bootstrapped Gentoo system to do a live stream.
Beautiful. Yeah, I know, right?
But in the meantime,
go to linuxunplugged.reddit.com to give us your feedback,
your thoughts, and all of that.
We appreciate that.
And your ideas on the Gentoo Challenge,
and please, please, please go to the show notes
and vote on the desktop environment that Wes should deploy.
We need your votes.
And if you want a little more Wes Payne,
you want a little more beard, you want a little me,
you know, just a little me,
go check out the most recent user error.
Shouldn't disappoint.
If you want a little more poppy,
you want a little more wimpy,
check them out at the Ubuntu podcast,
always delivering a solid performance.
And last but not least,
check out the whole damn network
over at at jupytersignal on the Twitters.
Yeah, I said Twitters.
Deal with it, people, and we'll see you next week.
We'll be right back.
Well, what do we call this one?
What do you call this thing?
What do you call it?
JBtitles.com.
Go there and vote.
And if you're in any of the chat rooms, Discord or IRC, please bang suggest.
But Eric, didn't you have, you had something we wanted to add to the post show, didn't
you?
Eric, did I mute you?
No.
No, you're not muted.
No, it's not my fault this time.
That's okay, dude.
I'm just going to give you your spotlight on a large Linux podcast, and you just go
ahead and totally AFK, it's cool.
JBtitles.com.
We did just keep on talking.
All right, so I need to finish up this poll.
So what should Wes install, right?
Don't you think that's the way to go?
What should Wes install?
What are our options again?
I'm sorry, I'm just-
From architect, you should add DWM to that list.
Fuck you.
From Wes.
Enlightenment, Sway, and-
Yes.
Sway.
Plasma.
Sway.
No, plasma is not a fucking option.
That looks cute.
No, we're going to do that separate.
No, yes, separate.
Although I guess let them decide.
No, no, separate.
No, separate, separate.
Okay.
There was a third one.
BST one.
Luminous.
Oh, luminous.
Yes, yes.
What is it called?
Lumina.
Oh shit, I just hit reload.
What desktop?
This is like Groundhog Day.
Should Wes.
I'm just going to say should Wes build, because that's really what you're doing, right?
Yeah, you do.
No, not Enlightenment.
I hate it.
Sway.
Sway.
Okay.
Illumina.
Is it Illumina?
Yeah.
Illumina.
Illumina.
Illumina.
Illumina.
Yeah, it's Illumina.
Why do I feel like it's not Illumina?
I don't feel like it's Illumina.
No A at the beginning.
Just Illumina.
Illumina.
Illumina.
No, no.
No A at the start.
Just Illumina.
Hmm.
Okay, what do I search for to get that?
Because I'm doing Illumina.
Oh, oh, I see.
No, I'm not doing an A. I'm doing an I. That's what our...
I'm doing...
Yeah, so Illumina.
Oh, I really fucking hate that.
I really don't like that at all.
Okay, so it's Illumina desktop environment.
That would be a good build, though.
That would be a pretty quick build, right?
So that's pretty good.
Okay, so Illumina desktop environment is the appropriate name.
I think we should use the full names.
And we should be specific.
Which version...
Hey, Discord, IRC, can you help me?
Which version of Enlightenment specifically supports Wayland?
Because it has to be that one.
We could have also done Mate.
No, I'm talking about Wayland here.
Oh, yeah.
Is Mate...
The newest version should all support Wayland.
22, 21, shit.
Wait a minute.
Wimpy, I'm like...
Drive by right there?
You got whip braced.
No, it doesn't.
I love it.
I don't know why, but something...
Wimpy, you're so polite.
You know what?
You're...
You obviously...
You know what?
I just love it.
No, no.
No, it doesn't.
Good for you.
Well, okay.
So, if we're just doing Wayland, we shouldn't put Element...
Or...
I guess I got Elementary OS on the mind.
I have been thinking about...
I have been thinking about, instead of going all in on 97...
Dan's evil mission is complete.
Dan showing up here every single week has been making me think, like, oh, fuck, maybe
I should just...
If I'm gonna go LTS, maybe I should just go Elementary OS, because my son's running that
already, and it's working great for him.
It's been working great for him for, like, two and a half years, so...
Yeah.
Damn it.
I blame Dan the rabbit.
Okay, so Elementary OS is not what I'm thinking of.
I'm thinking of...
What is it?
Lumina.
Lumina.
Lumina.
All right.
I don't know why, though.
I get those two confused.
So, we got Lumina desktop, Enlightenment, and...
Sway.
Sway.
Sway.
Sway.

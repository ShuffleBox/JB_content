I'm on the podcast at social,
so I actually do have a Mastodon account.
It's funny, because I was asking people
if they had a Mastodon account,
and they were like, are you gonna set one up?
And I was like, no, I don't think so.
I don't think I'm gonna,
I don't really wanna do any social media.
I'm pretty burned out on social media.
And then I realized I actually already
had a Mastodon account set up,
and that I was using it actively.
But I just didn't think of it as Mastodon,
because I'm just using it to interact
with the Podcasting 2.0 folks in the community over there.
And so I didn't even really consider it Mastodon.
But it totes my goats is, so I am,
see, if you wanna come follow,
I'm really not tweeting much for public consumption.
It's mostly for people that are interested in podcasting,
but I'll put a link to my profile.
It's podcastindex.social, and guess what?
I'm Chris Lass on there.
Oh, hey, I like podcasting.
Yeah, you might wanna, have I sent you an invite?
I don't think so. I wonder if I could.
I'll have to figure that out.
But I got a little picture of Levi on my profile.
I think Brent took that picture, too, I think.
Do you remember when it was taken?
Probably the sprint,
because it's Levi laying on the couch, I think.
I mean, when does Levi not lay on the couch?
That's the thing,
that doesn't really narrow it down, I realize.
Hello, friends, and welcome back
to your weekly Linux talk show.
My name is Chris.
My name is Wes.
And my name is Brent.
Hello, gentlemen, both looking very sharp today, and I-
We had to trade outfits at the last minute, can you tell?
I can, but I like that you guys make the effort.
You know, it's a show day, it's special.
Well, coming up today, if we had a Linux time machine,
what would we change in our Linux past
if we could go back and make one tweak or correction?
Do we have any regrets, something we would do differently,
maybe put us on a better Linux path?
Each one of us will share a bit
of a retrospective lesson today.
Then, of course, we'll round it up with some great boosts
and emails and a lot more, like we always do.
So before we go any further,
let's say a big, hearty welcome to the people
who decided to make it live, to make it special,
time-appropriate greetings, virtual log.
Hello, Mumble Room.
Hello.
Hello, hello, hello.
Hello, Chris.
Hello, Wes, and hello, Brent.
Aw.
Who invited Zoidberg?
Nice of Zoidberg to make it, yeah.
I apologize, you have a sleepy crew here today.
Like, none of us got any sleep last night.
So I don't know how today's show
was even gonna go.
Whatever happens, don't hold us accountable, please.
I wasn't even supposed to be here.
I was gonna be in a small, little beach town in Oregon.
I'm nothing fancy, but a little beach town
celebrating my son's 13th birthday,
which if you've been listening since I started having kids,
how crazy is that?
Because people have been.
I know.
People have been listening since before I had kids.
That's crazy.
And as we were getting ready to head out,
and you know, of course,
I've arranged the entire last week
of all of our recordings
to make sure I could take Friday and Saturday off.
Yeah, you've been planning this for a while,
getting jupe-ship shape.
You know, like a lot of pre-planning to make this happen.
Yep, trying to get parts in,
trying to get her into the shop,
all that kind of stuff.
And of course, Friday morning,
as we were supposed to set out,
we realized Dylan's sick.
And it's the kind of sick, like,
maybe this gets better,
maybe this gets a lot worse.
And the last time we went to this town,
it turned out it was like early January 2020.
It turned out we think D and I had COVID,
but we didn't know it at the time.
And so we were horrendously sick,
and we had locked ourselves into the RV,
and that's how we spent our time in this town.
And we just didn't want the-
You didn't want to do that again.
No, and we didn't want to have Dylan sick on the road.
Fair, yeah.
But canceling this road trip,
he was just totally crushed, right?
And I was super bummed and all of that.
So we decided to kind of do something a little simpler
and just head out to our favorite spot in the woods,
which is only like two hours out, right?
So if anything goes wrong, we're not far away.
You're still near home base.
Yeah.
So we decided, okay, let's do that.
And plus we got a later start in the day and all that.
So this is a better route to go.
And I call up the place we're going to stay and I cancel.
And we start heading out.
And my wife, Hadia, she's chasing the RV in her car.
So she's behind me, right?
She's following us.
And as we hit highway 20, heading east,
heading towards the mountains,
we're doing about 60 miles per hour.
And my wife pings me on the two-way radio.
And she says,
we have some kind of major water leak going on right now.
And I'm like, what, what, what?
She's like, there's water pouring out of the RV.
It's covering my windshield.
I'm running my windshield wipers.
There's so much water coming out right now.
That's insane.
And I'm like, oh my God, right?
I just think, oh no,
if we have another major water leak happen,
this place is wrecked.
We've already had a major spill once.
That's pretty much it.
Yeah, right?
How much more can you withstand?
Game over, man.
Game over, right?
So I go into total disaster mode.
At 60 miles an hour.
Right, and I'm like, Dylan,
help me find a spot to pull over
because he's riding passenger, right?
And he's like, I think that's up there.
I'm like, yeah, okay, we're gonna do it.
And I pull over like super quick.
I don't even know how the RV stopped like that.
And unfortunately, like it was so quick
and it was such a small space,
Adia had to keep going
because there's a whole line of cars behind her.
So she keeps on going down the road.
I pull over and I start the troubleshooting, right?
I head outside and these vehicles,
boom, boom, boom.
They're blasting past me 65, 70 miles per hour.
There's no room on the shoulder,
but of course that's the side,
the driver's side where I was pulled over
that was next to the road.
That's the side where the water bay is at.
And I can just see water pouring out of the water bay.
And I go, God.
So I have to open up the storage bay,
which is like in the road.
It's in the highway.
Cause there's just no room here.
And my phone starts blowing up and I think,
okay, this is Adia.
So I tap on the notification.
I opened up, no, no, of course not.
It was a super nasty telegram.
Something got somebody upset
that someone else said on another JB show.
And I of course had enabled this comment
because they were on the JB airwaves.
And so I was an awful person.
And here I'm just getting like this really nasty message
and I'm standing on the side of the road,
water's pouring out of my RV.
I got a sick kid.
It's his birthday, right?
I'm in full dad mode,
just trying to save a birthday road trip.
I'm getting chewed out for something
someone else said on another show.
And I realized I've screwed up here.
I've made some bad choices.
Like this didn't come in via like the contact form.
It didn't come in like via boost,
not using any of the systems that we've built
to let us manage how and when
like super emotionally charged criticism comes in.
Because the way you do this over the longterm
is you realize I'm not in the head space
to be really criticized right now,
to be told I'm the worst person on the planet.
Maybe I'll put that off, right?
Cause this wasn't the right time.
Yeah, I mean like, you know,
before you go look at one of our videos on YouTube,
like you prepare yourself for that.
Right, yeah.
Yeah, or like I sit down when I'm in the right space
and I read the feedback and I prepare it
and I bring it into the shows and it's a task that I do.
But I way overshot on my availability.
And this moment really brings it in, right?
Cause there's a super emotionally charged message.
There's no way for me to choose
if this is the right time for this or not.
So I gotta make some significant changes in that regard.
I hate to do it.
After 15 years though,
I think I've got to restructure how this is gonna work,
but I'll figure that out later.
I had a problem to solve, right?
I'm on the side of the road.
Vehicles are blasting by me.
I'm like opening up the bay.
I'm looking at what's going wrong.
I'm like trying to troubleshoot it
and radioing my wife to see if I can get her to turn around.
She's already coming on her way back.
And I realized I'm looking at it.
And like what's happening is my water bay,
which is a storage bay in my RV,
is like turning into a bathtub.
And with my pump,
the water pump that takes it from our fresh tank
and supplies it to all the faucets,
the water pump is just like pouring water out of the pump.
And it's like cracked wide open.
And we had just filled up like 75 gallons of water.
So there's a lot of water to go.
And I'm like, oh man, this is a big waste of water.
That's no good.
That really matters to us.
But of course the other big problem was
is we were heading to an off-grid spot.
So we needed this water.
There's no water out there for us to drink.
We wouldn't last a day out there.
A functioning water system was kind of part of the plan.
So I try to get my big ass 40 foot RV
back onto the highway from a dead stop.
I do a quick turnaround in a driveway,
like whipping this thing around like it's a sedan.
And I head back to a friend's house
where they had a driveway I knew we could work in.
And Hadi and I just sort of sat down and decided,
we got to solve this ourselves.
Because every shop is closed.
It's a Saturday.
They won't let us in for months.
We've already tried to, we knew this thing
was starting to have problems.
We tried to get it replaced weeks ago.
Oh, wow.
Everybody's like, well, we could see a mid-June,
early September.
I'm like, no.
No, so we just thought, you know what?
We have got to do the work to replace this thing.
So that's what we did in a driveway.
Thankfully, we already had a spare pump.
It was just a matter of getting it installed.
Come on.
Yeah, there you go.
You got it.
You got it.
Yeah.
Oh, that's good.
Nicely done.
That'll be a lot easier.
Now, we've got to get back in that same spot.
Yeah.
And then somehow fit the drill back in there.
Oh, god.
It's a tight fit.
So we're trying to get a new pump installed
that we thankfully already had, but didn't exactly
plan to do it right now.
And we're trying to improvise and get it installed,
but it doesn't fit.
Like, it's not the same size.
And so, well, we're coming up with solutions on the fly,
as they say.
No time like the present.
We did, ultimately, we got it installed.
What?
Nicely done.
I think the best moment was we had all the tools,
and we'd already owned the pump, so we had that.
So we really, it was just a matter of finding a way
to plug up the tank, so that way the tank didn't completely
drain the remainder all over us while we were swapping.
And so you could actually do the work?
Yeah, right.
And we had just the right sized cap that just perfectly
plugged that hose.
So it was for something else, like a random cap
that was just around the RV?
Yeah.
So it held the water back while we did the work,
so it was way less messy than we were expecting it.
And so, ultimately, we got it all put together.
And I think we got back on the road
and ended up at the campsite in the woods
probably earlier than if we would have made it to Oregon,
you know what I mean?
Like if we'd stuck to the original plan.
So even with everything that went wrong, wow.
Yeah.
And it's been a great time.
I didn't realize, like, oh, I miss
going out to my favorite spot in the woods.
We got a good cell signal, so we can still stay connected.
And it's springtime.
It's fantastic.
There's bears.
There's elk.
There's cows.
There's bunnies.
There's a river.
And the water right now is crystal clear, crystal clear
river water, Wes.
You can see the bottom of the river.
And just the right kind of temperatures, too.
It's not too hot, but you can get a little warm in the sun,
but it's crisp outside.
We probably spent three, four hours outside yesterday.
Got a new grill that we set up.
It turned out to be really, really nice.
So I'm glad we did it.
And it always is a great opportunity
to think about things.
And one of the things that's on our minds right now
is we are rebuilding the Jupiter Broadcasting website.
And we have begun a conversation with the community
in the new Office Hours podcast.
OfficeHours.hair, if you haven't checked that out yet,
that's what was available, OfficeHours.hair.
The episode where we kick this off is New Website Energy.
Myself, Wes, Alex, and Brent sit down,
and we kick around our goals for the new website.
But the great thing that happened,
this is exactly what I was hoping would happen with Office
Hours, is once we opened up to the community,
we started getting new ideas of stuff we never even considered,
which could open up our production and some
of our back end stuff to the community
and help in a way I never even thought about until somebody
suggested something.
So that conversation is just kicking off
on how we're going to rebuild the JB website, what features
it's going to have.
If you want to participate in that,
go check out episode three of OfficeHours.hair,
and then join us for the next live stream.
I'm doing these on Tuesdays as an opportunity
for the community to get together and hang out,
ask questions, and suggest stuff.
So join us on Tuesday the 10th at noon Pacific, 3 PM Eastern.
And we'll cover some of the feedback on that.
See you in the office.
See you in my office.
Yeah, and there is a GitHub that Brent has set up
that has conversations and threads going.
Is there anything we need to let people know about that,
like where to go and stuff, Brent?
Well, I think the best place to go
would just be the Jupyter Broadcasting GitHub,
and we have a little like jupyterbroadcasting.com.
What do you call them, projects?
I'm still new to this.
Yeah, there's a repo, there's a project,
and there's a discussion focused specifically
around OfficeHours episode three.
Oh, thanks, Wes.
Yeah, and there's some great ideas being bounced around
there.
I've been, it's way better than Reddit.
Go there instead.
It's really great stuff.
I want to talk about this new gaming snap that Canonical is
going all in on the gaming experience on Ubuntu.
And we've started building out a team dedicated
to working on just that.
They have a call out for testing on a new Steam
snap, which brings along everything
you need to run Steam games via Proton,
they write, or of course, native Linux games.
You and I both noticed, too, that at the Linux App Summit
that was going on this weekend, Canonical
was definitely mentioning the fact
that they had open positions.
They mentioned it.
Yes, very much so.
Big QR codes up on their slides, go apply here.
I guess it's very exciting to see, right?
It is a great idea.
I am thrilled to see Canonical working on the desktop.
At the same time, I'm just shaking my head.
Like they just had a round of really embarrassing
social media coverage of their archaic hiring process.
And then, of course, this announcement
comes on the heels of everyone being really pissed off
about the Firefox snap.
And it just kind of kills all of the momentum and shine,
in my opinion, of this announcement.
Yeah, it's really a complicated time to try to announce this
and get the kind of response from the community
that I'm sure they were hoping for that I'd like to see.
Because yeah, I mean, Ubuntu is the most popular Linux desktop,
especially around people who might eventually
want to try gaming on there.
So it matters if we can make this default experience really
good.
It's just complicated.
And our chat room is talking about it right now.
They're aware of these things.
So here's what I think happens.
I think Canonical lives within their own little echo chamber.
And I think they tell themselves something kind of like this.
Well, Ubuntu has more desktop market share
than all of the other distributions combined.
So if we just ship something as default on Ubuntu,
then by its very nature, it'll have millions of users.
And it doesn't really matter if the chattering class online
and in social media and on YouTube
don't like it because these millions of, quote unquote,
average users will just use the default, quote unquote.
And you see this pattern of thinking
from Canonical frequently.
Sometimes it serves them.
Sometimes it doesn't.
I think in the case of the Firefox snap,
yeah, that's probably an accurate statement.
I think in the case of gaming, they're kidding themselves.
And it really shows how out of touch they are.
First of all, Linux gamers are the exact type
of user who's willing to use some crappy script to optimize
their system for better games.
And if that script maybe replaces
a snap with a flat pack or a deb,
so that way their launch times are faster,
they're going to do it.
This is the enthusiast market.
This is the kind of market where these things matter.
And I think the other thing that shows
how out of touch Canonical is, especially
with this particular crowd, is they
did this out of the wrong order.
They did this out of order.
I think what they should have done
is they should have got these positions filled first.
Get these people hired.
Imagine applying for a job where the company is already
two miles down the road on the project
you're going to be working on.
And so you just come on board, and you're basically
inheriting whatever they've already started,
even if they don't have any insights
or they aren't doing it right.
And here's an example.
Not only did they launch this snap
without everything complete for it to actually work properly,
but they clearly are not thinking beyond Steam.
There's no accounting for things like Lutris or bottles,
which is another big part of the Linux gaming ecosystem.
But they don't have any plans for that.
They maybe don't even know what those things are.
It's hard to tell.
It does kind of make me wonder, like, yes,
purely on how do we address making gaming the best
in whatever ways are possible for our users?
Or, you know, is it complicated
by some of their own internal directives
and things they're trying to accomplish?
It's like, wait for these hires,
so that way these experts can give you
an informed guidance on how to do this.
But also, get a W, bro.
Get, like, a single W.
Get a single win for snaps in this community's eyes.
Get, you know, we don't care if a snap of one package
has 10X the users of a flat pack.
None of us care.
Get a W, bro.
Get a win.
Fix the launch times.
Fix the launch times.
It's something you need to do anyways.
Show us you're listening.
Get a win.
You get these people hired,
you help them inform the roadmap,
and you get a snap win.
And then you say, by the way, everybody,
we're now launching a gaming snap.
Instead, what they did is they've got this cart
before the horse, before they've even made their hires.
They've made this gaming snap
that wasn't even functional when it first launched,
but thankfully, a former employee of theirs
that was familiar with how snaps work
helped them realize the bits it was missing
to actually function correctly.
You can find a link to that in our show notes.
I think you can probably guess
who one of those employees was.
So they launched this incomplete product.
They don't even have the staff on board.
And then the other question is, why now?
Why in 2022 when these things aren't in place?
Why not three years ago before SteamOS 3 was created
and they pivoted to Arch?
Why do you care now?
Do you care now because all of a sudden Valve
has made something that's not based on Ubuntu
and so this is a reactionary thing?
Help me understand these things.
And this is my last point.
I think Canonical doesn't have the way
to properly advocate for this anymore.
These questions I'm asking,
somebody savvy should have been out ahead of this,
laying the groundwork in the community.
That's how it used to happen.
Strong community interaction.
And because snaps face such a massive headwind
from the community, they gotta get out there
because what's gonna happen is there will be guides,
there will be YouTubes, there will be forum posts,
there will be links on Twitter that tell you
how to undo all of this work
that they are going to invest multiple staff hours into.
Lots of development time.
And by the way, it's not Valve packaging this,
so it's not like they're building
some great relationship with Valve either.
They're packaging it outside of Valve.
It's questionable if we even want that.
So they're gonna do all of this
and they're gonna put it out there
and then because the community hates what they create,
in 35 seconds there will be scripts to replace
and undo all of the work they've done.
So I ask again, why are they doing it now this way?
If this was something that they shoved down
average quote unquote user's throats
and they didn't have any choice like Firefox,
yeah, it would work.
But again, I argue the Linux gaming market
is a little bit different.
They're willing to install extensions
that help set the performance governor on their PC.
They understand what a performance governor is.
Not all of them.
But let's look at the people
that are likely to game on Linux.
If they can grok what Proton is and why they need Proton,
then they can grok what a Bash script is.
Is there a version of this where maybe that's not
who Canonical thinks they're trying to target?
Is it aimed more at the folks
who know that Linux gaming is complicated,
kind of have heard of Proton
but don't wanna figure that out
and are willing to just hit,
I want steam from the snore
and then I'm gonna try to play my games?
Yeah, it's definitely probably gonna be the majority
of who ends up using it, right?
Sort of a stem the tide of those folks
who might otherwise see themselves
as being forced to go to something like Pop or Garuda.
Here's what I think you end up with though,
is the worst of both worlds in that scenario.
You end up for Canonical with just enough users
where now you're forced to maintain this thing,
but not enough users
where you can exert any kind of influence.
There's no influence they can exert over Valve
or the direction of any way this goes.
And now that Valve has their own platform to develop on,
they don't even need anything from Canonical.
So Canonical is always going to be chasing the developments
on SteamOS now to try to bundle it up in a snap.
And again, it just doesn't seem like
they have the insights into the market.
Like what are they gonna do about Lutris here?
It's not a complete gaming picture.
It's not a solution right now.
Are they going to include AMD drivers
and the GUIs to manage AMD cards?
What about Nvidia stuff?
Like where does this go?
I suppose I love the idea
if snaps were better received and launched faster.
Then I'm like, this is a pretty solid idea.
Like at least there is a real good solution
for users of the Ubuntu desktop.
However, I'd also feel a lot better
if it was being created and packaged and maintained by Valve.
Wouldn't this be the great solution?
Like here's a solution for Ubuntu users.
It's like the blessed SteamOS environment all in a snap.
Or at least we felt like there was some involvement,
some handshake or some co-press release,
something to say like,
oh, we're excited to see better support on Ubuntu
or something that made you feel like
it wasn't just a total Canonical move in a vacuum.
Yeah.
I hope that this turns out
at least somewhat positive for them
because like I said at the start of this,
it is exciting to see them put any effort like this
and hire like this for a desktop project.
Yeah, I mean, hiring, head count, that means money.
So you're right, it is exciting.
It's just interesting that this is where
they're doing that investment
and not investing to where the puck is skating, right?
This is now a solved problem
in part because some opportunity was missed
and Valve switched to Arch.
It's not really the problem we need solved now.
I mean, gaming on Linux could always be better,
but it's better than it ever has been.
Wouldn't it be great if they were launching a strike team
to solve another problem on the Linux desktop
that wasn't as well off as gaming was right now?
That seems like there's other problems
that maybe they could address in a way
that they would have some particular leverage in.
Yeah.
And I could come up with a list right off the top of my head.
Things from like pipe wire to fonts to printing,
there's so many areas that we could just really nail
for the end user.
But what we're gonna solve is Linux gaming,
which is already a small niche of the Linux market
and has already been directly addressed
by the primary vendor in the ecosystem.
And then you just add something like Lutris and bottles
and you're pretty much good to go.
I struggle with it, but I'm open to feedback on this.
Send us a boost or go to linuxunplug.com slash contact.
I do feel like we should probably give it a try.
Maybe it's not quite yet ready,
but a little bit down the line
when it's made a little more generally available.
I'll be curious.
You know, I do end up gaming on Pop
at the moment in a fair bit.
And while I still think I would, you know,
kind of like what Pop's been doing lately,
so I might be inclined to install it anyway.
If I could go, you know, just install the latest Ubuntu,
couple of clicks in the store and have steam up and going,
there is something valuable that,
or if I'm trying to convince, save my brother
to finally get off his Windows desktop for gaming.
Maybe, but I don't know.
That's a long road and it needs to launch decently.
Linode.com slash unplugged.
Go there to get $100 in 60 day credit on a new account.
And you go there to support the show.
That's right.
That's how it works.
Linode started in 2003 because they saw that
Linux had this great thing coming called virtualization.
What a concept.
And now 19 years later,
they have built one of the absolute best platforms
for developers, Linux enthusiasts, businesses,
and your everyday users.
And I make that qualification
because if you just want to run a personal portfolio,
they have $5 a month systems.
You want to run your own MumbleBox
or maybe your own Jitsi or GitLab now,
especially with GitLab making some pricing changes.
In fact, Linode has one click GitLab deployments,
which are really, really handy.
But really at the end of the day,
Linode is just about making things simple
and straightforward and accessible.
So if you want to do a one click, you can,
or if you want to deploy some just absolutely
bananas infrastructure that can scale up
to millions of users or at least one busy Synapse server,
you absolutely can do that too.
They just have the best in class experience
and performance and customer support.
There's a lot of places that offer hosting,
but nobody gets the mix right like Linode does.
And then you add that $100 offer,
it's just a great way to try it out and support the show.
They got all the distributions you're going to want to try.
Like they've already got 2204 up there
if you want to give that a go.
They're always rolling out the new Alma's
when those are ready to go.
We run Nextcloud up there like a fricking champ, dude.
It's excellent.
It is the best, most reliable implementation
I've ever had of Nextcloud.
And I'm going to admit part of that is we're using
the object storage that Linode has as our backend storage.
And that's been a game changer for us.
But now we're looking at like all kinds of things
that we might want to use for internal tools,
like a Mattermost server, a Jitsi replacement,
and we can just run it all in the same box
because these things are so fast.
They got MVME storage, they got Epic processors
when you go to the high-end CPU ones,
but they also do have high-end GPU systems.
It's like great, man.
And the interface is so slick that you
can work with any of it.
And then once you've been using it for a while,
you start using things like the command line
tool and the API, and it's just total fire.
I absolutely love it.
And it's so nice to just get in, get out,
get things done super quick, spin things up and try it out,
decide if we want to use it or not, then destroy the box.
I use it for that kind of thing all the time.
Go try it.
Go learn something.
Support the show.
It's super quick to get started, so do it right now
by going to linode.com slash unplugged.
Get that $100 credit, and you support the show.
It's linode.com slash unplugged.
I thought it'd be fun if we busted out that old Linux time
machine.
Is there something you might change
in how you got introduced to Linux,
the things you've played with, the mistakes you've made?
Now, do be careful, though, because it's
powered by a Raspberry Pi, first generation.
Oh, well, here we are back in the late 90s.
So if I had a Linux time machine, which, of course,
I do, obviously.
We just used it.
It's called ZFS.
Yeah, it's a time snapshot.
I like that.
That's what we should have gone with.
I was thinking about this.
Like, if I was to look back, like,
did I ever make a choice that kind of sent me off
on a tangent for the wrong time or something like that?
And I think maybe I probably focused too much on the desktop.
And I know that sounds weird because I love the desktop.
But the server side of Linux is like infinitely,
it's like infinite jobs.
There's so many jobs if you learn the Linux side.
There's so many things you can build.
It's like the equivalent of learning
how to develop software.
You can really build and create things
when you learn the server side.
And not that I haven't, but I think
maybe that would have made me more inclined to look
at things like Nix sooner and stuff like that.
It's been around for a decade.
And I'm just now getting to it.
And so I was looking at that.
Like, why did it take me so long?
But you have tried pretty much every desktop environment
known to humankind.
Exactly.
So I think I did a lot of jumping around with the desktop,
fooling around with my desktop.
When I look back at it, it sort of feels like wasted time.
But I don't really know for sure.
Maybe it was necessary.
I mean, I sure managed to turn it into a lot of content.
But I think overall, it probably wasn't the most efficient use
of my time.
I had a lot of fun, though, so I could still
make an argument for it.
But I would tweak that.
Yeah, I think that's probably it.
I was going to say less distro hopping,
but that was also kind of essential for the show.
So for me, it would have been fine to sit.
I would like sit down with my younger self.
And I'd say, here's the state of affairs, man.
I know this is all looking really good.
But then in a few years, there's going
to be this fork in the road, where this thing called
Unity comes out.
And this KDE goes to KDE 4.
And that's going to be real rough.
And then GNOME, you're not even going
to believe what the GNOME folks do.
And I'm going to say, GNOME, you mean Gnome?
No, no, we call it GNOME now.
Oh, I'm going to say it's weird.
But you're going to just brace yourself,
because that's just the very beginning.
And just keep your head down and build.
And don't get distracted by all that.
I'm imagining you trying to explain also
the rise of mobile and being like,
well, OK, so Linux is on the phone,
but not in a way that your future self is
going to like at all.
It's a complicated future.
And the desktop isn't as relevant as you really
think it's going to be.
That is, I think, the key piece to this.
And I'm really glad you just put words to that is,
that's the other bit I'd have to say to myself.
It's like, the worst part is it's not
going to really matter.
By the time you get to the 2020s,
you could use any distro or really any operating system.
And all of your tools pretty much work,
because everything's going to be in the web.
And I'm going to be like, what?
I hate web apps.
I'm like, no, you still will.
Absolutely, that will not change.
Yes, you still hate web apps, but everything's
in a web browser now.
Pluses and minuses, right?
It's really kind of weird.
But I would also like, I know, to tell myself
about things like process namespaces and containers.
And just honestly, the thing that still blows my mind
the most from back then to today is just
how radically available server resources are.
And if you weren't around in the early 90s and the early aughts
and deploying servers, you really
don't understand, to even get a server going,
well, there was an approval process.
There's a hardware purchase that has to happen,
which means you have to work with a vendor and a sales rep.
And then they spec you something.
You go back and forth on that for a couple of days.
And then you order it.
And then weeks go by.
And depending on the vendor, sometimes the machine back then
didn't even show up assembled.
The parts would arrive separately.
And then you still had to assemble it all together
back then.
And then you had to install rails.
And you had to go put it into a rack.
And these things are heavy.
It's like they made them out of cement.
And then you had to wire it all up and manage the wiring
and provision the switch port.
Do you get where I'm going with this?
It's like a multi-month process.
And then if you were in somebody else's data center,
you not only paid for your bandwidth, the actual amount
of bandwidth that you used, but you actually
paid for the power, all of it.
Like, oh, yeah, screw you if you accidentally
messed up the backup system and all the systems
do an extra backup that night.
You just totally killed your budget.
It was ridiculous.
And now I can spin up servers via an API on the command line.
And it's up on this infrastructure
that's way more powerful than anything
I'd ever have access to.
Right, and we can customize it to run around kernels,
switch it over to NixOS.
It's not like the old days of shared hosting either.
Yeah, and I don't know how I'd even
relay it to my younger self, but you know.
Can you give yourself an SSH session
that goes forward in time?
Yeah, a tunnel through time.
That would be pretty rad, actually.
If I ever figure that out, I'll let you know.
Just go check out, have your past self check out
our matrix box.
You'd be very impressed by the matrix server.
That would be.
All right, let's bring it back to the present.
So it was actually Brent who discovered the Linux time
machine and dusted it off and said,
guys, we've got to go back in time
and save our former selves.
And I said, Brent, if we go back in time,
we're going to undo the shows, right?
Because you never know what could happen.
And Brent, you were the one that was explaining,
we're actually just forking the universe.
So it's just alternate reality that's getting all messed up.
Yeah, it's fine.
There are infinite possibilities anyways, right, guys?
Yeah, so we're just altering one of those infinite possibilities.
Are you ready to go back in time to your former Linux self,
Brent?
Sure.
You know, my younger Linux self didn't actually
grasp onto Linux as soon as I would hope I would have.
So me, the me Linux guy now, I think
sees that I dabbled in Linux quite a lot
before really grabbing onto it.
Many years before I switched my entire business
to open source stuff, I was playing with this stuff
and just as kind of a curiosity, but never really latched on.
And I wish, I think, that I would have said, no, no,
grab this right now.
If you do, it'll really change things for you.
Don't wait the, I don't know, eight or seven years
down the road to do it.
Do it right away.
And who knows where that could have led a Brent these days?
I mean, I think I'm fine with who I am now.
But just imagine you could grasp some of those technologies
maybe eight years sooner.
Maybe, Chris, I'd be almost as experienced or as you
or Wes, perhaps.
And so that being said, I wish that I also
latched onto those communities a little sooner at the same time.
So just thinking going to Linux Fest Northwest
really made things flourish for me
in terms of meeting people, like-minded people.
And so I think the theme for me is just
doing it a little bit sooner.
Do you think there's anything that might have some hurdles
you might have to help your old self overcome?
I'm just thinking maybe if you were starting more
of your photography journey back then,
the tooling probably wasn't quite as good as it is
on modern desktop Linux, amongst a ton of other things.
And I imagine there are probably reasons for the time
that maybe you didn't dive in right away.
I think part of it was complexity, actually,
now that I think about it.
Back then with dependency issues,
I ran into those almost immediately
when I was trying to install some software
and even installing it the way that was intended.
Do you remember those days of the so-called dependency hell?
It made me hate RPM back in the day.
I feel like you're looking back at your younger self.
Thanks for bringing us along in the time machine.
You know what I'm seeing as I look around your room here,
Brent?
I'm seeing a lot going on.
And I'm not seeing a particular problem
you had to solve with Linux.
And I think that's something you can't be so hard on yourself
about.
You didn't really have something you needed Linux to fix
until it was time and then you switched.
And when we as a community think about advocacy
and we think about trying to get other people to switch
to Linux, I think we have to understand and realize
that a lot of times people don't necessarily feel a need
and they don't see a reason because everything's working fine.
They sort of have it good.
And for me, the problems I needed solving
dealt directly with server scaling in the late 90s that
was just a limit of the Windows technology stack back then.
And so I went looking somewhere else to handle the user load
that I was trying to deal with.
And so I discovered Linux that way.
And so a similar thing, like my very, very first use
with Linux, besides the time I deleted my file system,
so my second use with Linux was Microsoft had my school,
I was in high school at the time, they had us pinned down
and they were bullying my school.
And I've shared this story before.
And they didn't have a product that
would solve the really serious networking issues
that we were having and Squid Proxy did.
And so I set up a Debian box and I set up Squid Proxy.
And it was incredible.
And I remember thinking, wow, they can't even do this.
And so Microsoft, sort of a short aside,
Microsoft came while we're back in time,
they came at us because we had a special program with them.
And they said, you basically have an ultimate,
they gave us an ultimatum and they said,
you either try out this Windows NT5 beta thing
and see if you can use the new proxy server
that we have in that.
They hadn't even named it Windows 2000 at this point.
That's how far, that's how long ago this was.
So we want you to try out this new NT5 beta
and see if that doesn't solve the problem for you.
And of course, it didn't.
And so also we weren't going to deploy beta software
for our whole network, for your whole production network.
It was crazy.
So Brent, I had a problem to solve.
And I had a serious emergency problem to solve.
And Windows, we took it to as far as we could
before we ended up looking for somewhere else.
For me, that was like, you know, 98, 99.
But for you, it was just a different time
where you had a problem to solve, right?
I mean, I'm looking around.
I don't think you should be so hard on yourself.
I can understand.
I think that's actually a really good point.
When I did have a problem to solve
and it was the clear solution,
it was very easy to just dive right in.
So I wonder then if we could turn the time machine dial
a little more, maybe closer to the present
and I can present just a little something else.
Oh, was that a hand?
That felt like a hand.
It's close quarters in this time machine.
It's only meant for one.
Oh, I love this thing anyways, though.
It's great.
You know, one thing I've been thinking about lately
is I wonder if my slightly younger self
would want to learn different things.
It feels to me like my self-learning journey,
at least around sort of like sysadmini topics,
you know, like SSHing and doing key pairs
and trying to run a jellyfin server
and all of these things.
It has been at least very easy for me to find the sort of,
don't be insulted anyone,
but I'll call them the old Linux way of setting these up,
you know, like not containers.
Like installing a package
or maybe even running an install script.
App2Get or something.
Yeah, yeah, yeah, yeah.
You see like tons of tutorials,
tons of them with how to do things that way.
And I wish maybe,
and I'm willing to, you know, discuss this as well.
I wish that maybe someone would have said,
hey, by the way,
there are these new ways of doing this stuff
that maybe is a better way to go.
Cause perhaps that's a better investment of your time.
You know, containers and infrastructure as code
and all these great, you know,
the Nixie kind of stuff we're playing with.
I kind of wish I had been introduced to that way sooner.
I think that's probably a common feeling,
but on the flip side,
have you been pretty well served by the existing resources?
I'm just thinking, you know, it's kind of amazing
these days, especially you got a reliable VPS,
your App2Get install a couple,
you know, you got your NGINX web server,
you got your program running,
as many things as you might want to do differently.
And there are many additional patterns like that.
It sure does just work,
especially if you only got a couple of things to manage.
It's certainly well-tested, right?
Yeah, you could build a career out of it.
I think it's served me well,
but only in that I don't know what I've been missing out on.
Well, I mean, you're still young, Brentley, really,
if you think about it, you know,
if you think about it on that timescale,
when you're 50 years old,
you're going to have this stuff under your belt for decades.
I assume Alex has got you setting up
OpenShift clusters already.
Oh, man, we better get him out of there.
We better get him out of there.
It's going to be bad.
Thank you, Alex.
So are you ready?
Do you want to take the wheel on the time machine?
Just be careful.
When Brent drives, he adjusts the seat.
Oh, I've driven with Brent before.
Ah, where are we, Wes?
I'm noticing kind of a different style of clothing,
so it's far enough back.
Well, you might notice, yeah,
different animals around here, too.
It's been a long time.
Yeah, yeah.
All right, tell us where we're at.
Well, I figured we'd go back into a world
where Wes had free time.
Oh, yes.
You know, remember those days?
Yeah, back when I used to play with Gentoo.
So that's what I want to talk,
you said something earlier,
you said something about distro hopping.
Yeah.
You know, I kind of wish I distro hopped less.
I think the opposite.
I wish that I had spent more time distro hopping,
because thinking back on it, like some of the late nights
where I was, you know, first figured out
how to install Arch Linux,
and before I had like, you know,
I had like one netbook and not, you know,
not a lot of fancy computer peripherals or networks
or options besides the instructions I'd written down
from my working installation to get this going.
And just for also a little bit of context,
what kind of internet speeds would you say
we're looking at back then?
Yeah, not great.
Yeah, early DSL, maybe, or yeah.
And I learned so much,
and that was the right time when I was really,
first kind of getting all the ways
you could put a Linux system together.
But I think that would have been a good time
to really go deep into Gentoo
or bother to do Linux from scratch.
Not that you have to, not that I feel like I'm missing out
by not having done it.
And you know, there's a lot going on about a Linux system,
and I don't need to be an expert in.
But I'd like to do those things now.
And that's one reason I've really enjoyed
this NixOS challenge,
is it felt like an excuse to kind of dabble a bit more,
but there's just too many things to learn
besides technology we want to deploy for, you know,
to improve the shows, for work, for my own hobbies.
Like, there's just not that much room.
And because I'm so used to like, you know,
I know my way around enough distros now,
that's just never on the top of my thing to try,
unfortunately.
So you'd go over there and you'd tap yourself,
your former self on the shoulder,
and you'd go, go try out Gentoo for a while,
go distro hop a bit.
You know, it's time, it's slack wear.
Right, you go, you know,
go spread your distro hopping days out
while you can now,
because your time's going to be limited down the road.
I definitely get where you're coming from
because I had years of experience
with Red Hat based systems and Debian based,
well, Debian, before I tried Gentoo.
And I felt like I finally learned Linux
when I started building my Gentoo systems,
because of the way I had to do the partitioning,
the way I had to do the formatting,
the way I had to bless the bootloader
and install the bootloader,
all the stuff that the installers
had always been doing for me since day one.
And including back then,
you had to configure Xorg files.
Oh yeah, right.
And you know, a lot of distributions
where they added value was in the installer
and maybe walking you through setting up X
and walking you through setting up your hardware interfaces
and stuff like that.
Whereas in Gentoo, depending on what stage you did,
and I normally did a stage two install,
you had to learn all that.
And that's really when I started to get it, I think.
And so I agree, you know.
Maybe you're suddenly seeing like the config options
for the kernel for the first time,
and you're like, oh yeah, I can tweak these.
Yeah, you know, that is a great point,
is you really,
learning how you put the whole kernel together
and how you move that, you create that image
and you move things around and like just-
Picking new modules you want built in
or just available on the side.
Even understanding what the difference
between having it built in and having it as a module
was like a huge thing for me.
Like, oh right, that's okay.
I mean, I knew about kernel modules,
but you really got your,
you know, the great thing is you still could do that.
You still could, you know.
So I say, you know, what we ought to do.
Well, here, let's go forward.
Oh, good, indoor plumbing once again.
Wow, we really went back.
I got to say though, I mean, it's not like you,
we don't sit down and get to work and we never go,
geez, I sure wish Wes knew how to use Linux better.
I don't think that's ever been a problem.
So you've managed, you managed just fine.
I suppose so.
Yeah, you did fine.
And there's, you know,
I'm sure there'll be future challenges.
On the show, we'll see what weird distros we can cook up.
Bitwarden.com slash Linux.
Get started with a free trial of teams or enterprise plan
at bitwarden.com slash Linux,
or try it for free as an individual user.
You are talking to some Bitwarden users right here
on the show.
I love it as an individual user,
but then it really took it to the next level
and we started using it as a business for JB.
You can use it to share and sync your sensitive data.
It's not just passwords.
I have other information in there,
including things like some of the different shipping endpoints
for sending stuff to the hosts or authentication,
two factor codes, phrases, like some,
some of my software requires recovery phrases like element.
I'll store that in there.
It's just a nice spot to have all of that.
And you have peace of mind knowing that Bitwarden
is open source.
It's already trusted by millions of individuals.
There's teams out there using it.
There is a large community that's also practicing
self-hosting the Bitwarden stuff.
So you always have that as an option.
I've opted to go for Bitwarden Cloud.
I don't know if it, I must've asked you,
but I've forgotten.
Wes, do you use a Bitwarden Cloud
or are you using local hosting?
You know, I've done both.
Right now I'm using the cloud as well.
I love that there's the self-hosted option,
but I also like that, you know,
I felt the price is super reasonable.
So it's sort of like it's a way that I can fund development
and I don't have, you know, just one less thing
I have to personally host.
But I know if I want to do, I have the option.
Well, check this out.
New feature landing right now.
I think you're gonna love this.
And I can't believe I never thought about this.
They're now adding a username generator.
Oh, that's clever.
Right?
I mean, they've already got that handy password generator,
so why not?
Take it to the next level.
And I don't need the same username.
I out of habit use like the same two usernames everywhere.
But do you care, especially on like, you know,
just the random accounts that you have to have?
Like for like banking stuff or like health site login stuff
for like the health plan for wash.
Like why am I using my NICs that I use
on like public places there?
That's ridiculous.
Because I don't want to have to think of a username
all the time.
It's like what we used to do with passwords.
I never even thought about it.
And like, you think about it now,
like isn't that way better,
say if some service does get compromised
and their username and password database leaks,
if you're using a random password
and a random username stored in Bitwarden for that,
like you're fine.
Yeah, that seems.
It's a total non-issue.
Even you decide, I love that they're adding that.
And if you, this is also really cool.
The generator offers an option
for creating a random plus email address
if your service supports that.
So like Gmail, you know, like username plus
your actual email at gmail.com.
That's super handy.
Yeah, they'll fill that in for the, what?
I know they must have some logic in there that figures out.
It's so great.
They're adding stuff all the time too.
And it's nice just knowing that you have
that kind of security hygiene.
So go try it out and support the show.
It's easy to get started by going to bitwarden.com slash Linux.
Use it for yourself, use it for your business,
or maybe the open source project you're working with.
So go try it out and support the show.
Bitwarden.com slash Linux.
Many of you wrote in this week with feedback.
Thank you very much.
We got a few on the topic of the generic
ARM Linux images that we had, I say talk about,
but it was a micro rant I think that Chris
might have slipped into.
Michael wrote in and suggests,
the problem is that there's no such thing
as a generic ARM system, at least in the same sense as x86.
Every ARM device has its own bootloader system,
device tree, and proprietary drivers and blobs.
As an example of how crazy and nonstandard things are in ARM,
the Raspberry Pi actually uses the GPU
to run the bootloader.
This is why all you can find are images for the Pi
or for individual SOCs like the Pine 64.
Among ARM devices, there's no such thing
as standardized UEFI boot systems, for example,
and no standard way to boot from a USB stick.
In my mind, these are the reasons ARM
has really not made much progress in the desktop
and laptop computer space outside of Apple.
I want to love ARM and I want it to succeed
and be everywhere, I really do,
but not until some basic standardization occurs
and we can get generic Fedora, Ubuntu, Debian, et cetera,
for ARM that can boot on all laptops and desktops.
This is a grade A email, grade A.
Michael nails the problem, but Michael overlooks one thing.
There is a standard generic ARM system
and it's virtualized ARM and it's becoming super common
because more and more ARM boards are capable
of virtualization and additionally,
every MacBook M1 or iMac M1 user out there
now has access to creating generic ARM machines
and it is super common to virtualize Linux
on the Mac OS desktop for all kinds
of development reasons and other reasons.
And when these projects only release Raspberry Pi images
like our friends at Ubuntu MATE
or our friends at Home Assistant,
then these new M1 virtualization platforms,
which are fantastic virtualization machines,
for example, Parallels 17 on Mac OS on the M1
supports vert GPU pass-through.
So you get a full OpenGL accelerated
virtualization experience.
So it's using that vert IO pass-through driver
with Parallels 17 to talk to Metal.
So the actual Linux desktop is rendered
on the Mac client side using the local Metal API,
but on the back side is passing through
the virtual card GPU acceleration stuff.
It's a great experience.
And the fact that we're not releasing ARM images
for general ARM virtualization means that
a bunch of like CI test flows are not possible
and everyone who's on one of these M1 chips
can't virtualize that project.
And I would love to just see projects just target that,
like OpenSUSE has one of these, Fedora has one of these.
You can, there are projects out there
that just release these generic ARM ISOs
and they're not image files.
We're not flashing to an SD card like a child's toy, right?
They're ISO files and we're installing them
like a desktop operating system.
And it makes a difference that it is a micro RAM,
but it matters.
And the ARM platform is becoming more and more prevalent
now thanks to in part Chrome OS and Apple.
But ultimately what Michael is touching on here
where there's like all these different
ARM boards and systems,
and you require all these special kernel drivers and stuff.
It is a mess.
Yeah, right.
And now, so suddenly now this more generic
virtualized one is just one more.
Yeah, it totally is.
And this is why we have followed RISC-V with interest
because it would be so nice to solve this problem.
ARM is not the hero we have been looking for,
but it may be the hero we end up getting stuck with
because of just the industry support around it.
Because you got to understand like that scale
of manufacturing means that there is just
a ton of ARM boards out there,
a ton of ARM code out there.
It's kind of like got momentum as they say.
And now it is time for the boost.
Marcel boosted in with a thousand sats
with a great question.
If Firefox is open source,
how can Mozilla oblige anyone to distribute it
in a particular way?
It's a great question.
Probably something we should have talked about.
So last episode, it came up that Firefox is a snap
and it is something that was worked out
between Mozilla and Canonical at Mozilla's request.
And people were just kind of discovering this as a thing
as they upgraded to the new LTS,
even though it's been a thing for a minute.
Does anybody here know why that is the case?
I have a guess, I don't know for sure,
but I have a pretty strong guess.
Something about redistributing trademarks, et cetera?
Copyright and trademark, right?
And if Canonical wants to put the Firefox name on there
and the Firefox logo, which they would
because they wanna look like a legitimate desktop,
then they need to follow the wishes
of the trademark and copyright owner.
And this is just how sometimes US law is enforced
to maintain the rights of free software for better or worse.
Sometimes we use it to our advantage, right?
The GPL is copyleft.
It's Richard Stallman's troll of copyright law, basically.
He's using copyright law to protect free software.
It's actually very brilliant.
But the other side is you can also use it to dictate terms.
That's why some distros ship things like Iceweasel
and stuff like that.
Neville, you boosts in with a hundred sets.
Imagine if Valve chose to use NixOS
for the Steam Deck instead of Arch.
I'm curious about the rabbit hole of discussion
we could truly go down when pondering this question.
Will Valve gain some benefits
from using NixOS instead of Arch?
Or is Arch a better option
just due to how familiar the community is with it?
This is a great question.
Nev, that is, I wonder, right?
Part of you wonders, did they just not know?
Is there just not enough people out there
talking about how they use Nix?
But I think ultimately from Valve,
tell me what you think, Wes,
but I think it all came from we want upstream drivers
and code as fast as possible.
And when you ask that question to the Linux community,
the answer's Arch, right?
Yeah, and I mean, I guess it kind of depends
on what they're comfortable with,
what their engineers want to work with.
And then, I mean, I could see,
obviously there's a lot of benefits to NixOS,
especially for the system aspect,
but once you get to the Steam piece, less so, right?
Like that's all gonna be outside of the build system
and any of that anyway.
You could, they could totally have a repo.
I mean, like they could totally make it work with Nix,
but you're right.
Like once you get to the Steam client,
the desktop stuff, Proton.
And maybe, I mean, you know,
I'm not saying that if you did go full Nix
with that stuff that there wouldn't be benefits.
I'm sure there would be,
but just is that a realistic goal to add on
or would it be sort of a hodgepodge?
And then if they're not doing that much
with the base system to start with,
maybe there's not, that wasn't the biggest concern.
Well, and here's a wild idea.
What about developers, right?
You want a system that is approachable by developers.
And I think we all remember
that during the Steam Deck developer period,
Valve said, well, if you can't get your hands
on a Steam Deck, here is a machine that specs similar,
just install Manjaro.
Like that's not as easy with NixOS.
There's no Manjaro for NixOS.
And that might play a role as well
as the developer story here.
But it would have meant that Valve didn't have
to concoct their whole imaging read-only file system
solution that they've kind of bolted on top of Arch, right?
That whole, all of that would you just get
that kind of reliability with Nix.
It does maybe, and I suppose perhaps the Flatpak setup
could work in a similar way.
It does maybe make it a little more friendly for tinkering.
Our next boost came in from exception or something like that.
That's a pretty clever username.
Just my two cents about real-time patches for Linux,
because we talked about Ubuntu 22.04, including
real-time patches of Linux with their Ubuntu Advantage service.
But exception writes, it turns out
that Linux is not really a real-time OS.
We can make the OS OK for real-time operations
with the ability of certain latency deadlines
with these real-time patches.
You see, I'm from a generation where
we were told that an OS must be designed from the ground up
for real-time.
I remember that thinking too, actually.
In fact, I until recently thought
that was how it still was.
But exception goes on to say, but we built Linux
so that it was flexible, so that it could be adapted like no OS
before it for all sorts of purposes,
embedded Android server, and we found a way
to make it work with Linux.
Truly open source is the way.
That's great.
That's a great point, that now because of Linux's open nature,
a company could come along and create these real-time patches
who was just recently acquired by Intel
and essentially create these latency deadlines.
Wes, you had a really good explanation recently
of how Linux is real-time or isn't real-time.
Do you recall what it was?
Well, I mean, I think there is still some points here
that you might not use it for all tasks, right?
But it is adding this ability to the kernel
to approach stuff with more deterministic deadlines
so that you do have a little more guarantees
that the tasks that you need to have happen
can happen within a set boundary.
And that is kind of the key of it, right?
Is that this task will execute
within this guaranteed window of time.
Yeah, because on a non-real-time system,
you might have some unpredictable latency
that even if it only happens a tiny percentage of the time,
it could mean that your safety check
for some industrial machine
didn't happen within those tight timeframes.
And so you can, with a real-time kernel,
you're often trading some kind of overall throughput
for the system to keep things within that boundary
so you know the system will predictably keep ticking on.
And this conversation really came up on this show
when we had Tim on from JPL and he was talking about
how the Linux Copter is a real-time kernel
because of these reasons that you just outlined.
And so Exception wanted to write in
and just kind of point out that like,
when we talk about real-time,
that's actually what we're talking about.
That's how it works.
It's sort of these guarantees
that within a certain window of latency of time,
this task will execute.
And when you're in an industrial application,
that's absolutely necessary.
And it's neat because like, I think there, you know,
there's still our specific real-time operating systems
for stuff where that's really important
or you need to build on that base.
This just opens up, you know, for maybe the, you know,
the top tier of those things.
Well, that's a category Linux can play in now.
We got a double boost from Nev this week.
Nev wrote in, I would like to interject for a moment
and comment that this podcast does not contain
any mention of Gen2 nor Emacs.
Ah, we fixed that this week at least.
As such, I publicly challenge the next person
who sends stats to JB to install Gen2 Linux
and daily drive it for one week.
If they can prove, I will directly send them 5,000 stats
with JB getting an additional 5,000 stats
and giving them the right to declare
the next boost challenge.
A boost challenge.
Boost challenge, wow.
Boost challenge declared by Nev.
So, you gotta run Gen2 for a week.
And I think to make this work, you probably have to have,
it has to be a new install of Gen2.
You can't like, cause you know, people.
Yeah, if you're already using it, that doesn't count.
You know, there's like five guys listening right now.
They're like, crap.
But, you gotta have a new install.
And if you can prove it, I don't know,
will you take a picture of your computer
with the newspaper?
I don't know how you prove it.
You come up with something.
You start it with a screenshot with the New York Times up
and you end it with a screenshot with the New York Times up.
I don't know, I don't know.
It's, you know, it's like a,
you got your terminal going with a.
Yeah, like something.
OS release, and then you got like
the front page of Hacker News.
Yeah, okay.
You do it for a week.
You send, and you send us some boosts proving it
and then Neve will send you 5,000 SATs
and send us 5,000 SATs
and then we get to declare a boost challenge.
Which that's what I'm looking forward to.
I got all kinds of ideas.
I like, I like, it's a weird mix
of like an NPR style fundraiser,
but also like the ice bucket challenge from years back.
So I don't know what's going on, but I support it.
Boost to Graham.
Also just want to mention
that you can essentially send me a PM via boost
like a NorCal Linux dad did.
He sent me just a little FYI
so I know about something going on with an upcoming event.
And he knew it would be right in front of my face.
And as I start rethinking how I want to have myself available
I think it's going to be the contact form
and boosts are going to be like the top two ways
to get messages in.
So you can send a direct message to me
who has a boost as well.
And you can actually use,
there's these URLs you can use now.
It's pretty cool.
We're going to go into,
there's all kinds of stuff going on in podcasting
including some new standards that are rolling out.
Ooh, a new cool backend technology that's happening.
Also a super awesome way to,
something I want to talk about after the show,
a super awesome way to generate RSS feeds.
All of that.
So we're covering some of those podcasting developments
in office hours now to kind of keep it out of this show.
So we can stay focused on the Linux here.
There's enough going on.
But it is such an interesting time.
There is some really awesome new stuff being developed.
And when you hear it, you're like, wow,
how have we not had this stuff in podcasting before?
Like podcasting just sort of sat around for a decade
and really did nothing new.
But podcasting 2.0 has a lot of really cool new features.
And I've been playing around with systems
to help us generate transcripts.
Cause that's one of them.
Oh yeah.
Yeah. See, I can just get going forever.
Anyways, we'll put it in office hours from time to time.
So go check that out at officehours.hair.
But if you want more of this show,
you can become a member either with the whole network
and all of the shows and all of their bonus features
at jupyter.party,
or you can become an unplugged core contributor
at unpluggedcore.com and sign up as a member.
And you get access to two different options,
two different perks,
but by far by like a huge margin,
like by 90%, the preference is the live stream.
I could basically stop even mentioning
that we have a ad free version.
People do not care.
They want the live stream version.
That's the one everybody wants.
And that's, you know,
we try to make a lot of extra content
in the pre and post show.
And you get to hear, like,
if we stopped for a pee break and Wes and Brent just,
you know, chew up the, you know, the chat.
So that's unpluggedcore.com
or you can support the entire network at jupyter.party.
The whole thing is if you get a little value
from the show from time to time or frequently,
that's another way you can contribute back.
But another way is to join us live.
We do the show on Sundays at noon Pacific, 3 p.m. Eastern.
Send us an email.
That's also a great way to contribute some value
is give us some feedback,
maybe give us an idea, make a contact,
or we really appreciate it
when you spread the word about the show.
That's a great way to really contribute some value back
because who wants to listen to a podcast just cold?
The podcasts you want to listen to
are the ones you get told about.
Yeah, you know, put it on a speaker
outside your house all day.
Maybe you get driving someone in the car
for an unrelated reason.
Throw Linux Unplugged on.
See you next week.
Same bad time, same bad station.
Oh yeah, of course.
Of course, we should mention, too,
the companion show, linuxactionnews.com.
Lots going on every single week.
Wes and I break it down to linuxactionnews.com.
Links to what we talked about today in this here show
at linuxunplugged.com, slash 456.
You know, we should mention,
Linux Action News is gonna be out
a little bit late this week.
You're right.
Just a little bit, so.
Little bit of a delay.
Just wait.
Yeah, just subscribe.
There's always the all shows feed.
You just get everything.
Like Office Hours, like Linux Action News, and this show.
Anyways, that wraps it up for us.
Thanks so much for joining us
on this week's episode of The Unplugged Program.
See you right back here next week.
This week's episode of The Unplugged Program is brought to you
by Tiny.
Tiny made a good point in the mumble room, too.
Another perk for Valve going with, say, Arch over Nix
is the community has just built a lot of tooling already.
There's a lot there for them to just leverage immediately.
That's a solid point.
And of course, Valve would want to take advantage of that.
Although, I suppose, as Kukuf mentioned in the IRC.
What was that?
I'm sorry?
You heard me.
That, I mean, Nix would probably be pretty great
at generating that read-only image.
That's what, that was my point.
It's like a lot of the work they did
to make Arch consumable by consumers,
they would have just inherited with Nix.
And then they could just set up a few repos
and add a couple of lines to the config and good to go.
And they basically have their own custom OS.
That's what's so slick about it.
We got some other really good feedback on the ARM stuff.
We just didn't have a chance to fit it in the main show.
But Paul wrote in, I think it was Paul, right?
We hit a nerve in the arm, I could say.
You're right.
You could say that.
He writes, when ARM-based platforms became
a thing in the Linux world, nothing
told the OS what processor it ran on
or which peripherals were connected.
And he goes on to talk about how it was just such a mess
early on.
And it got old.
And we needed device reconfigurations.
We had to create that.
There had to be all of this work.
And he says, now, these days, we've sort of figured it out.
And we don't need separate kernels.
But back then, one of the ways they were doing this
was different kernels for different ARM devices.
And we forget it wasn't really that long ago.
It is getting a lot better now.
And we are seeing a lot more support for at least
the Raspberry Pi side.
Paul makes a good point there.
And we've seen all the trouble in Project Treble
over in the Android world.
And he says it's still not great.
He's like, you know, you look at it today,
it's still pretty difficult to support the different boards
with the same kernel.
Because often, there are patches that
can kind of conflict with each other to enable.
Yeah.
You can see that, too, if they have custom video cards or USB
buses or network adapters.
I feel like it's especially painful because we're always
following up on what's coming out in the latest kernel.
And then on those devices, you're
stuck with probably a LTS kernel or something
that they've chosen to, hopefully,
that they've chosen to build for you.
Yeah.
This is why, ultimately, you just
hear us talk more about the Pi on here.
Because that all works now.
That's all upstream in the kernel.
It all works now in the kernel.
And that's a big deal.
When I say ecosystem, that's kind
of what I'm talking about.
It's going to be PIs and Mac Minis.

You remember that old joke about put it in a Beowulf cluster
that used to be the go-to line for every Linux user ever?
That's kind of died off, hasn't it?
You don't happen that much, well,
I think it's because Amazon provides them for you
in the cloud, you just have to pay them.
The Beowulf cluster was this go-to way
to cluster a bunch of machines together.
But also, Wes, you could just put a bunch of CPUs
in a system and then just design the workloads
to spread across a farm, I suppose.
Maybe that's why the Raspberry Pi cluster
might just be the ideal candidate for some.
It's a new system that lets users pack up
to five Raspberry Pi Compute Module 3s
into a single, compact, relatively low-cost,
power-efficient computing cluster.
Yeah, the MiniNode's Raspberry Pi 3 carrier board
is designed to house multiple CM3 boards
for carrying out computation
at the so-called edge of the network.
For instance, building automation,
running a monitoring station,
things like smart traffic lights in a city.
The network connectivity is provided
by an integrated gigabit switch
to connect all of them together, so that's pretty nice.
And it feeds five boards,
which are also like five awesome Raspberry Pis
that have gigabit connections.
That's really nice.
Yeah, they've also got four gigs of flash storage.
Looks like no Wi-Fi or Bluetooth at the moment, though.
Decent processor, 1.2 gigahertz quad-core,
as you probably would expect.
Okay, so prices, it's $259 for the board,
and then each Raspberry Pi Compute Module is 30 bucks.
Yeah, if you look at it, I mean, it is like a bigger board,
and you just sort of slot these other little Pi boards
right into it.
Now we could have a Beowulf cluster of Raspberry Pis.
You know, this is for all that edge work
that you need your Raspberry Pis to do.
I was thinking maybe if you're using Raspberry Pis,
maybe you want a little build farm at home.
Well, there you go.
I feel like we need to have a committee,
and that Jupyter Broadcasting maybe should form it,
and then we can vote if we're gonna allow terms in.
Like, we should have had a vote on hybrid cloud,
and we should have a vote on edge devices,
because you read this article, and it makes my skin crawl.
Here's just one paragraph, edge computing
is becoming increasingly common in situations
where IoT sensor data needs to be processed
with low latency or in near real time,
or it needs to be handled locally for regulatory reasons.
Edge computing is just another way
of saying electronics devices, right?
It's just another way of saying devices
that are in the consumer's home or in the end destination.
An edge device is just something
that is network connected out on the edge.
I don't like this term at all.
It doesn't.
It kind of separates between the compute device
that's batching and processing this data,
and the sensor, which could be an Arduino
or some other low-end microcontroller device.
So for example, there was a company
that were doing a thing where they have cameras
in elevators, and they were taking pictures
of people in the elevator, and then using some intelligence
to scan the picture and figure out
if it looks like the person was a bad guy
from the, I don't know, the look of their face
or facial recognition, or it looked like they may have a gun
under their clothes, or if they get the gun out
or something so it could see that.
But the thing that's connected to the camera
doesn't have the compute power to do that.
And if you had multiple elevators in a building,
you'd have multiple cameras feeding into an edge device
that had the compute capability to do that.
So there's certainly, you've gotta have some term
for the thing that's doing the compute
that isn't the device that's at the very, very end
of the line.
Here's where I think the line should be,
is if it's in your network, on their premises,
you could consider that the very edge of your LAN
or your WAN, you could consider that to be the edge
of your network, but if the device
that you are communicating with is on a separate network,
that's not an edge device.
That's just a node on the internet.
That is just an internet node.
It's not an edge device at that point.
I grok that it could be a sensor collecting data,
transmitting it back to a larger processing system,
but if they're on separate networks,
I feel like edge device is,
it's a dumbification of the term.
Although all of that said, I did get a tweet this last week
from an elevator where that elevator
was doing a file system check.
So I don't know what to call that.
Chris, I think you should just think about it like this.
You gotta have devices to funnel data
to your blockchain based machine learning platform
to analyze it.
Nailed it.
This is Linux Unplugged, episode 278
for December 4th, 2018.
Welcome to Linux Unplugged, your weekly Linux talk show
that's all over the world this week.
My name is Chris.
My name is Wes.
Hello, Mr. Payne, good to be connected with you.
I am in Dallas for, well, for some shenanigans
that you're actually about to join me for
in just a couple of days.
We're gonna have our company party
and now that we're part of Linux Academy,
very excited about that.
But we've put together a show this week
that really looks back and pulls out the best bits.
We've got some great community news
that we're going to go through here
towards the top of the show.
A fascinating look at Android in the cloud.
It is actually a thing.
And then I had a chance to chat with the developer of Ish.
ISH, you might be familiar, is a Linux shell for iOS
and the developer is hard at work
at implementing an entire Linux environment
that iOS users can use.
And so far, Apple hasn't pulled the plug.
I'll talk to him about that, why he's doing it.
I wanted to find out too if he was like a Linux diehard
that was trying to bring Linux to iOS
or if he was an iOS diehard trying to learn about Linux.
So we talk about that and more.
A followup on some crazy issues I've had with my laptop
after connecting that GPU powered dock
and you might run into it as well.
In fact, it impacts more than just GPUs
and then we'll take a little deep dive into Clear Linux,
which has been making more and more news recently
and just refresh their desktop offering.
You could say double down on the desktop offering.
And Wes is gonna kick the tires
and I did a deep dive on the technical side of things
and we'll be taking a look at Clear Linux
towards the end of the show.
But before we go any further,
we have one bit of business we must attend.
We must bring in that virtual log.
Time appropriate greetings, Mumble Room.
Morning.
Howdy, howdy.
Hello.
Hello, Bruce and Popey and Sean and the Silent Drifter.
All of our friends.
It's good to see you.
Yeah, it is nice.
We have a few up in quiet listening and in staging as well.
Mumble Room is cool because you could just listen
in the Mumble Room and then you get like the raw untapped
or I don't even know what the unfettered studio feed
because it's connected to our soundboard.
Anyways, I know I was gonna make that sound really cool
and then I just realized it's not that cool.
It's just an audio interface
that plugs into our soundboard.
But at the end of the day, it is,
I should make it sound like the raw direct feed
from the studio mixer.
That's pretty good, right?
That was great. That's way more hype.
Thank you.
Thank you.
All right, well, let's start with some community news.
A story that I'm a little grumpy about.
And I didn't wanna be, I didn't wanna be.
I wanted to be the guy that came on the air
and said, I think it's time.
It's been 10 years, it's time, but I can't.
And I understand though.
It's just what it is.
The world's moving on and Zubuntu is one of them
and it's official that Zubuntu will stop producing
32-bit ISOs beginning with 1904.
The development team has now decided to go ahead
and eliminate the 32-bit builds moving forward.
The change will affect Zubuntu 1904 and beyond,
but not the current 1804 LTS.
Yeah, the developers announced this this morning
following a team vote.
Interestingly, it was a six out of 10 vote.
So clearly not, you know, it wasn't unanimous.
There's still people out there representing 32-bit,
I would imagine, especially in the Zubuntu following.
This leaves LXDE or LXQT
as the only Ubuntu desktop distribution still offering
32-bit images moving forward.
And there's just no way that's sustainable.
That puts all of the work for testing,
for all of that, for building, all on that project.
And it's not a focus of the project.
The project has, Lubuntu has stated
they wanna focus on more modern hardware.
Now, the common meme here is that 32-bit processors
haven't shipped since the Pentium 4.
But the reality is they have shipped as recently as 2011.
And I grant you, that's not yesterday, but it's also-
True. It's not 10 years ago.
And I don't know, I hate to see,
I hate to see something that seems to have
a well-defined purpose to facilitate really good performance
on hardware that is maybe,
it wouldn't be worth a YouTube video.
You know, maybe it's not a Threadripper.
Maybe it doesn't have the latest and greatest GPU
and the latest and greatest CPU.
Maybe it's, God forbid, even running spinning Rust disks.
Maybe.
Isn't that where ARM is now, though?
If you just have an old 32-bit processor,
shouldn't you just get a nice ARM chip
and probably have a better time?
And we should have distributions focusing on that?
Because Lubuntu has its own things outside of that, right?
I mean, you can have a lean and mean
Lubuntu desktop on just about any system.
Not 32-bit going forward, I guess.
Yeah, you're right.
I guess if you have, you're saying,
if you have a system that old,
you could almost just go get a cheapo ARM box.
That said, I mean, I do appreciate it
because one of those things Linux has been.
Like, it feels like there has been this part of our culture
where it's like, oh, it doesn't matter.
Super old Mac?
Okay, we'll put Linux on it.
Whatever system you have, you could put Linux on it.
And some of that's fallen away.
True, yeah.
And I think part of it for me is this is,
this is something that these distributions were serving.
Like, they were super serving a specific type of user base.
Like, that was the role they played.
And it made room for other distributions
to go hog wild in other areas.
But, you know, that's just my thoughts on it.
Wimpy, I would obviously love to hear your thoughts,
not only as an Ubuntu Mate maintainer,
but also just having years of experience
with ranges of different hardware and distributions.
Yeah, so we obviously made this decision,
or rather I had the final decision for Ubuntu Mate
to end the 32-bit Intel support.
And basically that came down to the fact
that there weren't the people within the team
that had the hardware to test and QA this stuff.
So yes, whilst there may well be devices
that have been produced as little ago as seven years
that have that instruction set and that processor,
you've got to have people out there that are using it
that are maintaining the distribution.
And Wes is also quite correct
that for Intel 32-bit systems of that era,
the ARM platforms these days offer competitive performance
and are inexpensive by comparison.
And just because Anubuntu flavor
is not supporting 32-bit Intel
as a release architecture anymore
doesn't mean that the sky is falling.
There are dozens and dozens of distributions out there
that cater to supporting these, you know,
what are becoming niche hardware platforms
and specialize in that.
And I don't think any of us would be saddened
to see owners of that hardware
go to those niche distributions
where they can be well supported.
Sure, I guess I can't disagree with that.
You're right, it's not like there's not somewhere else
for these users to go.
But what is the role then of Zubuntu and Lubuntu?
I guess if their main advantage is that they have XFCE
or LXQt, I don't know if that seems like enough
of a differentiator.
You can get that anywhere.
Like the focus is sort of what made it a go-to.
Like it put them in a channel for a particular type of user
where the randos on the internet would filter people
into that channel when they're looking for something.
Like it was, in a way, it was part of their brand.
And now the main thing about their brand is going away.
I don't mean to dwell.
I want to give Popeye a chance to jump in too.
I don't think it's the main thing about their brand.
It's a factor that would help you decide
which ISO you were going to download
if you had that old crusty laptop
and you wanted to run software on it, sure.
But what I find frustrating is whenever we announce
the death or depreciation of something,
people come out of the woodwork and tell us
we should continue working on this thing.
And I'm sorry, but you don't get to tell us what we work on.
If you want to work on it, you could volunteer
some of your time to work on it as well.
Like there are plenty of people out there
who will wring their hands when something
is no longer supported.
But they won't step up and help
when people put the call out for it.
And I find that incredibly frustrating.
If you're not going to do anything about it, then shut up.
Yeah, and that is sort of a definite,
it's not the friendliest answer,
but it is definitely a legitimate answer
in the open source world.
It's like, well, the source is there.
If you want to do the work, you can do that work.
And like I say, I think for the most part,
it has been a really long time and the market has moved on.
And the people that are running 32-bit probably don't have to.
I've said that before on this show,
is they don't, they likely don't have to,
but it still seems to me like, you know,
it's like in the world of cars,
when you have a car maker that has something in their cars
that makes them special when they stop doing that thing,
it just sort of takes something from it.
Mr. Drifter, I want to give you a chance to jump in
and then perhaps we will move on.
What do you think?
Well, I agree with Popeye.
I think that there's a lot of responsibility
on the community to get in and kind of start maintaining
those things because I mean, there's only so much space,
even in large corporate offices,
to put all of these old crusty machines
and it's kind of hard to maintain it.
But you had mentioned, or at least asked the question,
what would we use, what is the use case then for these,
like XFCE and these desktops for 64-bit?
And I think that when you go on there
and you just need essentially kind of a jump box
or something that doesn't take a lot of resources,
I still think that these different distributions
are going to really excel in those areas.
Right, and I think at the end of all of this discussion,
you have to keep in mind the project.
And if the project doesn't have the resources
to do the testing and they don't have the passion
to go build 32-bit boxes to make it work,
then they're probably not the right project
to be doing that work.
And it doesn't really matter how you feel about it.
It's just the reality of human nature
and how these kinds of things work.
This next story, I only included this in the show
because just the holy shit factor of it.
It's really surprising.
Microsoft is throwing in the towel with Edge HTML.
And today it's come out that they're instead
building a web browser based around Chromium,
which uses Blink as its rendering engine,
essentially their web kit fork.
This is massive.
Woo-wee, they were also recently spotted,
them being Microsoft engineers,
committing code to the Chromium project
to help get Google Chrome running on ARM.
Perhaps some of that work will translate over
to getting Anaheim running on Windows 10 on ARM too.
I don't know about that, but it is interesting.
I mean, think back to when IE6 was the big thing.
I know.
Is Microsoft done with the browser game?
They're just gonna ship one, kind of phone it in?
I gotta say, not particularly jazzed
about another Chromium-based browser,
but mind blown about the end of Internet Explorer,
essentially.
This is really it.
I realize Edge wasn't IE,
but to me this is really quite surprising
because it is a massive strategic beachhead
to have one of the popular web rendering engines.
But it really seems like Microsoft in all areas right now
is looking at it in a very humble, practical way.
And they're saying, where have we lost?
Where are we just not gonna win
no matter how long we pay a team
to work on something that we think has great battery life
and great performance or whatever they wanna advertise
about Edge?
And they had to go and have that conversation and say,
we gotta just throw in the towel here.
We just gotta ship a Chromium browser.
Now, we don't really know
if this is going to replace Edge fully.
Maybe they're just gonna swap out the ass end of Edge
and never even say anything to the end user.
Maybe it's only gonna be available
on ARM versions of Windows.
Oh. We don't know, do we?
No, I mean, we don't.
There's not a lot of clarity here.
But I just wanna welcome Windows users
to the rest of the internet.
Nice to have you.
And you can find the free stickers over in that corner.
This next story, cue the valve sound link.
Cue the, what is it called?
What's that valve gong or whatever?
Cue that. Cue the valve gong.
Because the Steam Link lives on on the Raspberry Pi.
Last week we talked about
the Steam Link hardware going away.
And I got a couple of notes from several people that said,
I went and bought one.
And then like, they were totally sold out.
I almost did.
I mean, it was very tempting.
They were like 10 bucks for a while.
That's pretty convenient.
Wes, they got down to like 2.99 for a few days.
Oh really?
Yeah. $2.99.
So anyways, there's now a beta to run the Steam Link app
on your Raspberry Pi 3 and 3B Plus
running Raspbian Stretch.
It's a little bit funky.
You have to run it and then it downloads the full app
and creates a desktop shortcut
and then will automatically update as needed from there.
So it's not your traditional package,
but sounds like it's working.
Yeah. Well, you know, we do have a reporter on the scene.
Let's go to him now live on location.
Mr. Popey, what are you learning?
So I tried it out on a new Pi B Plus 3,
wherever the new one is, the fast one.
And I used a Debian Stretch Raspbian image
that I downloaded from the Raspberry Pi website,
chucked it on a stick and then grabbed the Deb,
installed it, ran it, and then connected to another machine
on my network that had Steam installed,
plugged in an Xbox 360 controller into the Raspberry Pi
and streamed a game directly to my Raspberry Pi
from my Steam machine.
And it worked pretty good.
It was okay.
There was a few network stutters,
but other than that, I mean, it's beta quality,
but it worked.
It worked just fine.
How would you rate the quality of your Wi-Fi in your home?
Because it seems like that's a pretty important component.
Yeah.
Wi-Fi in my house is middling to shitty.
And so that wouldn't have helped,
but I did do the test that it does internally
and it said it was fine.
I didn't have a super high frame rate game.
I was playing Ultimate Chicken Horse,
which is a puzzle game and, you know,
but still it's one of these things
where you're standing on a platform
and if you're one pixel off, you fall off.
So yeah, it still could affect gameplay
and it wasn't perfect, but like I say, it's beta quality,
but it's worth trying out
and could be a good opportunity to dedicate Raspberry Pi
to sit underneath the TV and play some games,
streamed from a hulking great loud Steam machine
somewhere else in the house.
Yeah.
Well, if this is part of the strategy,
maybe they're gonna go Netflix on this.
Like when they said that they're gonna rely
on the quote unquote app,
maybe what they really meant was full spectrum domination
of all devices like Netflix did.
Like when Netflix started streaming,
it was called Instant Watch
and it was supplemental and free
if you had a DVD subscription, right?
And then they had the Instant Watch service,
which you could watch in your web browser
if you were on Windows or Mac or something.
I mean, we all remember the dark days.
Yeah, it took years to get on Netflix on Linux
and then there was all these different hacks
and ways you could do it for years.
And in this intervening time between the DVD service
and now where it's at, they launched, well, they didn't,
but in partnership with Roku,
they launched the Netflix box,
which later became the Roku,
which is an entire platform now.
And now everything you buy from toasters to televisions
has a Netflix app built into it, at least in the States.
And if Valve could go somewhere in this direction
and maybe they could get pre-installed
on things like the Nvidia Shield TV or a Roku box,
or maybe even a smart TV, if it's a decent one,
then the death of the Steam link starts
to make a little more sense, doesn't it?
Because they're following the Netflix model at that point,
which seems to have worked.
You don't have to buy a new device.
You just have to install a new app
on the device you already have.
And I guess figure out a way
to have a controller connect to it.
So maybe not every device.
Yeah, there is that.
But really with Bluetooth,
that your options are wider and wider.
And I don't know about you,
but I don't really feel like buying another box.
I may have bought the next Steam link, but probably not.
I don't have a 4K television.
I mean, and that's because you're a niche person
who knows it exists and might have considered it.
It seems like the discoverability of something
in an app store is a little bit better.
And I think people are sick and tired
of buying these set-top boxes
and hooking up another box to their television.
Yeah, and then they have to get a new receiver
because you have so many different things
that you have to plug in to, ugh.
They might be onto something here.
And if they can let you roll it on a few
of your own devices, they integrate it into Steam OS.
So if you build a Steam machine, it's just built in.
You have Raspberry Pi options.
All of a sudden, I'm starting to like their new strategy.
So we'll see where this goes.
And I think I kind of want to try it out.
Kind of want to play around,
maybe compare it to the Steam link one day,
the actual physical hardware.
Why don't we take a moment and say congratulations
to friend of the show, the handsome Barton George,
who is celebrating with his team
six fricking years of Sputnik.
It all started in the beginning of 2012
with Barton's pitch to an internal innovation committee
that they had at Dell.
Like their own internal seed fund
that they could use on a project internally
if somebody had something good.
And then a month after the pitch,
the team or whoever he was pitching to seemed to like it.
The committee gave him the go
for this quote unquote exploratory project
to test out the idea of a developer laptop.
Just test the waters.
Thankfully, I mean, there was an interested
and supportive community.
So with enough support,
people actually said that they wanted this.
It became a real product on November 29th,
way back in 2012.
The first Dell XPS 13 developer edition
was born.
Yeah, I remember the week I got to cover that
in the Linux action news or in the Linux action show.
And man, huge.
What a big day, Dell, a shipping a Linux,
like offered legit Linux laptop.
And it was announced.
And then it was before the orders were available,
people figured out like which Windows version you could buy
that was gonna be the same thing,
both Broadcom wireless and yeah.
But now fast forward,
they're on, they're the seventh generation of laptop.
So it's been six years.
They've done seven generations of that laptop,
shipping it with 1804 by default right now.
And then they've extended that
to the precision workstation line,
which I just recently reviewed,
which I think is a pretty killer system.
And I don't think they're stopping.
In fact, I think they have demonstrated to the market
that this is a viable consumer segment to sell to.
And I personally believe it's played a part
in why you see the subsystem for Linux on Windows 10,
and why you see Linux capabilities on Chrome OS.
And why I think ISH or Ish,
the Linux environment for iOS
is smashingly popular right now.
Like people are going crazy about this.
So I had a chance to chat with the developer of ISH,
and it was just a quick chat.
He was fortunately very accommodating
and willing to join me.
And just, I wanted to talk about why he's doing this.
And I think it all plays a role here.
I think it's all part of a bigger picture
about a common Linux runtime and environment
that developers want, and admins, and system administrators.
So I had a chance to talk to this guy.
His name is Theodore.
And Mr. West, go ahead and play our clip.
So Theodore, welcome to Linux Unplugged,
and congratulations on all the attention ISH is getting.
Yeah, it's been honestly surreal to see it just go
from like 20 stick-up GitHub stars
to a few weeks later, 2,000.
I feel like there's like three podcasts
I listen to right now that are talking about it.
So it's a Linux shell for iOS,
and I thought maybe I kind of wanted to just pick your brain
on this crazy project.
And also, maybe we could start even lower.
Like don't you have to emulate an entire x86 basic system
to pull this off?
Yeah, this took like a year and a half
to get to the stage where I could actually run it
on an iPod, on an iDevice.
Wow.
So yeah, it was a big project.
I mean, the real reason I've been doing this
is to learn everything I can about Linux and x86,
because it's just an interesting topic to me.
Are you by day a Mac user?
You're not already like a Linux user
who's just trying to get Linux on an iOS device.
No, I mean, I'm a Mac user.
I also sometimes use Linux in a VM.
Oh, OK.
Like for at least six months, I was developing-ish under Linux,
and then I ported it to Mac.
Oh, that is really interesting.
Is that phase, the x86 emulation?
That was when I was getting the x86 emulation to work.
This was before it could have all run on an iPad.
Now, is that like QMU under the hood?
How are you doing that?
I wrote my own x86 emulator for this.
Oh, you madman.
Yeah, exactly, which is why it took so long.
But it must have been an interesting experiment.
Oh, yeah.
Yeah, QMU can't run on iOS because of the restrictions
of the sandbox, because it's doing
dynamic binary translation.
The sandbox doesn't let you have any executable code that
didn't come with the app.
So it has to be done with an actual emulator
of the kind that runs each instruction with C code.
To try and make it a little faster,
I decided that I'm going to now write an assembly language
implementation of every instruction,
so that at the end of the assembly language gadget,
I can just make a direct jump to that construction
and hopefully save a little time with decoding.
That's pretty clever.
And so once you got the x86 system working,
you had to pick a Linux base, and you went with Alpine.
That's an interesting choice.
Yeah, that's because it is the smallest Linux distribution
ever created.
The result is that the app is like a three megabyte download.
And it includes an entire Linux distro
that has a package manager and can install anything.
That's a great point.
It is.
It's impressive.
And the only way to really get my hands on it
is to go through TestFlight right now.
And I feel like that maybe we should talk about that.
It seems like that could potentially
be the big elephant in the room, is you
could end up spending, theoretically, what,
two years on this project?
And then Apple just never accepts it to the app store.
I mean, that could happen.
But I've already learned so much about how Linux works
and about how x86 works.
Even if that happens, it's still worth it.
And it seems like you've struck upon a real nerve here,
that there is a bit of a need for a command line
like environment on an iOS device, especially the iPad
Pro.
Yeah, the amount of interest that I've seen on this
has really kind of surprised me, because who wants
to program on an iPad?
But yeah, apparently people do, because Apple
has been telling them that their iPad is essentially a computer.
So they want to now be able to program.
There's all these little edge cases
where you've got a great portable system,
but you just need access to a command line utility.
Maybe it's SSH.
Maybe it's something like YouTube DL.
Who knows?
It's just one of these things.
Everybody's got their edge case.
Yeah, that is true.
There are plenty of nice command line utilities.
There are plenty of things I can do easily on the command line.
But on an iPad, I would have to go searching through the App
Store, maybe find some app that costs $5.99.
I mean, who am I, Theodore?
But if I was sitting at Apple right now
and I was looking at the market, I
would be looking at the success of the Windows subsystem
for Linux on Windows 10.
And I would be looking at Google adding Linux app and command
line capabilities to Chrome OS, which
was always supposed to be the most simple OS out there.
It's just nothing but a web browser.
And now you can get a Debian command line.
And iOS is sort of the oddball out on this.
Yeah, it's like the only OS that doesn't
have a built-in Linux or Unix-like shell.
So yeah, I'm really hoping that Apple
will see the demand on this and realize that it's something
that they should think about.
I mean, the fact that they haven't yanked it
from test flight already is, I guess,
a bit of a positive signal.
Yeah, yeah, that's a good way to look at it.
That's what I was thinking when I installed it.
The fact that they're doing this is a potential signal
because I hope they recognize it might not even
be that people want the command line.
Because I suppose it would never happen, right?
But in theory, Apple could ship a Bash shell app that
would give you access to the Unix
subsystem that may be rolling around underneath iOS.
But they're not likely going to do that, are they?
And people want Linux.
No, I mean, if they shipped a Bash shell with iOS,
that would essentially be a jailbreak.
Right.
Yeah.
I tell you it'd be more shocking than a lot of the other things
Apple has announced.
It's more shocking than USB-C on the iPad Pro.
It would be unheard of.
But at the same time, Theodore, I have to be honest,
the technologist in me cries a little bit
that you have to construct an entire virtual machine
on a mobile device to get a command line.
Yeah.
It's kind of disappointing, honestly.
And it also makes it incredibly slow.
Well, you've got an amazing performance.
And like you mentioned earlier, size out of this, too.
I'm very impressed.
But I wonder if this thing isn't going
to just start growing like crazy.
Because you must be having feature requests coming in
like nuts for everybody's little edge case.
Oh, yeah.
My GitHub issues page is filled with those.
There's an issue that's titled, improve the performance.
Yes, I saw that.
And that's like, oh, thanks.
OK, very helpful.
OK.
I mean, yeah, if anyone has any brilliant ideas
on how to make this faster without jailbreaking
their device, please tell me.
I mean, really, it is just you right now, yeah?
Yeah.
Do you want to keep it that way?
Would you want to actually make this a?
I would love to have contributions.
I've gotten quite a few pull requests, actually,
from people who want to fix this or that system call.
And that's been really great.
So I would, of course, love to have more of that.
And you pronounce it ish, right?
So ish itself, is it GPL, or what is it right now?
It is GPL, GPL version 3, which does probably
a pretty good job of protecting against anyone
who wants to try and sell it.
And you're touching a lot of Linux,
so I think that all makes a lot of sense.
So you are open to the idea of maybe making
this a bit of a larger project.
Of course, I mean, this is a really tricky thing
you're doing here, Theodore.
This is some seriously low-level stuff.
I'm really impressed.
Yeah.
I mean.
I don't know if everybody could pick that up.
You know what I mean?
That's not something that most people
are going to roll in and be able to solve those problems.
Yeah.
Really, again, I say somebody at Apple
ought to just hire you up and make this an official project.
Man, I would love that.
All right, well, if people are listening right now
and they're excited about perhaps getting
a legitimate Linux command line on an iOS device,
we've been talking iPad.
But you can run it on a phone, too, right?
Yeah, it works perfectly fine there.
Or even a touch.
Yeah.
So how can people support you?
The best way to support the development of this thing
is to go to GitHub, find some program that doesn't work,
and take a shot at fixing it yourself.
And that is probably the most valuable thing
you can do to help this project out.
You can also give me money.
I'm not going to say, no, I don't want your money.
But that will motivate me to keep working on it.
But not be as motivating as seeing
people who care about it enough to take time to write code.
Yeah, and I noticed a couple of times
it's really just changing how the application does
input or output.
It's not major code development to get individual apps working.
There are so many programs where the fix is
like one line of code.
Well, Theodore, please keep up the great work.
You're making these devices more valuable.
And I really appreciate your hard work.
Thank you for coming on the show.
And let's chat in the future.
Oh, yeah, yeah.
Thank you for inviting me on.
Now, you can go get your hands on this
if he has enough test pilot licenses still available.
I don't really understand how that system works.
But we'll have a link to his website in the show notes
at linuxunplugged.com slash 278.
So just go there and get a link to that.
And I think this is a really nice idea
that I'd really be bummed if Apple were to shut this down.
Because I think a lot of us have an old iPad somewhere floating
around that would be pretty cool to be able to pull up
a Linux terminal on.
Yeah, and he's gone to such lengths
to try to be compliant.
It's not trying to jailbreak.
It's not trying to flout Apple's rules.
It's just something people want to use computers for.
And I asked him, why not just use QEMU or something?
Why did you build an entire x86 virtual machine?
I mean, hell of a project, but why?
And the answer was so obvious when I asked it.
It made me feel like an idiot.
You can't run QEMU on the A12X.
You're not going to be able to run any virtualizer
on the market right now on the Apple A series processors.
You've got to build for those chips, basically.
And so that's what he's been doing for the last year.
I mean, it does sound like a great project.
Talk about a passion project, right?
I mean, that's one of the things.
And then to turn around and release it all as GPL.
If you take away the iOS, he's been
building a virtual machine for a very specialized series
of ARM processors that millions of people have,
and he's GPLing it all.
That's awesome.
I think it is really cool.
I think that's a pretty neat story.
So thank you to Theodore for coming on the show
and telling us about it.
Now let's shift gears and talk about Android,
but maybe not Android so much in your pocket,
but Android in the cloud.
Now Simon on the Ubuntu blog has posted a really interesting
rundown of how they are enabling Android
to run on Amazon's EC2 A1 instances.
Now those A1 instances are them new fancy AMD, or I'm sorry,
it was almost AMD.
It was almost.
ARM processors.
Yeah.
This is an interesting story though, Wes.
Why don't you tell us the story, what little side tangent
that Amazon just launched ARM servers,
but they were almost AMD ARM servers.
Yeah, up until 2015, Amazon and AMD
were working together on a 64-bit ARM server grade
processor to deploy.
I mean, of course, they want them everywhere in their data
centers.
It's tough to get that to work.
It was a big deal, and of course, the project
fell apart when, according to one well-placed source,
AMD failed at meeting all of Amazon's performance
requirements.
Ouch.
Yeah, in classic Amazon style, they went out and actually
bought someone who had already licensed
from ARM, a system on a chip designer, Annapurna Labs.
And then they just put that team to work building
all the things they wanted, right?
Internet of Things gateways, the Nitro chipset
that they're using.
That's for handling network and storage tasks
that back EC2 machines.
So they've already got a lot going on,
and now they've got this team of talented people
who are designing chips.
They've got it right in house.
So this last week or so, Amazon announced these new rigs,
these A1 instances, that use the custom AWS Graviton processor
based on the ARM architecture.
And when you read through this blog post that's
up on Canonical's blog, blog.abuntu.com,
they talk about using LXD containers
to stream Android games from an EC2 instance to a mobile phone
over the internet.
And they are running a genuine Android environment
and Android applications in the cloud
and then streaming the results down to the phone.
So I dialed up our go-to ARM expert, Mr. Wimpris.
No, Wimpy, you were actually the one that
linked this to me originally.
I didn't see this until you linked it to me.
So I wanted to pick your brain a little bit about some of this.
This seems really far out there over a mobile network
and all of that.
How is this even possible?
Yeah, so this is demonstrating a number of the technologies
that Canonical and Ubuntu have on offer
to model scale-out workloads in the cloud
and then deploy that stack very, very quickly.
So it uses MAS, which is Metal as a Service,
and Juju, which is the orchestration component,
and then LXD containers, which are
containers of all of these Android instances.
So it's kind of proving out all of this capability.
And the applications that run inside those LXD containers
are all snaps and what have you.
So it's kind of demonstrating the whole product
suite working together.
But the reason that we have this capability
is there are actually customers that are interested in running
Android in the cloud.
And this is something that we're actively working on.
And it's unfortunate Simon, due to time zones,
wasn't able to join us this evening.
But he's the tech lead behind this particular group
of technologies.
Now, I'm struggling to understand the use case
for Android in the cloud.
I get game streaming, but I don't quite
see how game streaming seems like it
would be at its fundamental weakness over a mobile network.
There's so many latency issues and variables.
There's a couple of things there.
So game streaming is certainly one of the use cases.
And when you talk about game streaming,
most people think about streaming H.264 video,
a bit like the Steam Link does that we
were talking about earlier on the Raspberry Pi
app, for example.
The technologies here can do one of two things.
They can stream H.264 video, or they
can stream the OpenGL commands.
So in the demonstration that's in the video in the blog post,
that's actually streaming the OpenGL commands from the cloud
to the client device.
So it's rendered client side using the GPU capabilities
on the device.
So that's one kind of distinction.
Now, the other reason is that why game streaming is
attractive to game developers is when you're targeting Android,
you have a number of Android API versions that you can target.
And depending on your generation of Android device
that's on the client depends whether or not
that client has access to that game.
If you have your game or your application deployed
in the cloud against a known API version,
it doesn't actually matter what the client version of Android
is, because now you're doing the compute in the cloud,
and you're just streaming the visuals down
to the client device.
So you can narrow where you focus your development effort
to a known API constraint.
But I think you've also got CI and unit testing and stuff
like that, like spin up 1,000 Android instances
to test it against various versions.
Right, exactly so.
If you want to do testing at scale,
having 100 or 1,000 devices is infeasible, impractical.
But if you want to spin up dozens, tens, hundreds,
thousands of instances in the cloud
to run your automated tests, then that's now something
that you can do relatively inexpensively.
Yeah, that seems like it could be a pretty significant use
case, is development testing.
Yeah, and the other use case is if you
have a sensitive application, let's say a banking
application, if you have that in the cloud,
then it can't be tampered with on the local device.
So if you stream it from the cloud,
it's sandboxed away from the users of the application,
so you can't pull it apart and reverse engineer it.
Silent Drifter, were you thinking along the lines
of development testing when you said you
can see a couple of use cases?
Part of it was development testing,
but my other thought was it would also
be really nice, especially where there's so much hype right
now about the idea of convergence,
that it would be really nice to be
able to put all of that heavy computation in the cloud.
And then you can offer a lot more services
on the application of your phone,
even though it's all running, you're
just kind of sending off the data
to do the heavy crunching for you.
Right.
I could definitely see that as well.
I think this is a pretty cool demonstration.
And if you want to look at the video,
it's about two minutes long, and it's embedded in the blog
post that we'll have linked.
And one of the nice things is it's a single Juju command
to set up the entire Android environment, the containers,
and all of it.
So it is, like Wimpy was saying, it's
a pretty good demonstration of the stack.
Yeah, and all of the network orchestration
that goes on behind it.
And there's another potential upside there
for games developers.
If you've got an MMO, if you have that now deployed
in the cloud and streamed down to the client,
you can have the high speed backbone network
infrastructure that exists in these public cloud providers
brokering the network interactions
between these multiple instances of these games
rather than over your cellular network.
So hopefully less lag and more low latency game interactions.
And I just realized, if it's an MMO,
you've also got instant anti-cheat,
just like with the banking app.
You've got anti-cheat, because in the cloud,
any user can't tamper with it.
Exactly, yeah.
Just like the banking application,
you can't tamper with the local app,
because there is no local app.
That's one way to solve the Android fragmentation problem.
But I think the thing that impresses me the most
is the capability of streaming the OpenGL commands down
to the client and then have the rendering done on the local GPU.
That's pretty slick.
Yeah, that's pretty neat.
Simon's a clever guy.
Maybe sometime soon, he'll be able to come on here
and talk to you about this in more depth.
Oh, I would love that.
But at the moment, this is a developing technology.
We're working alongside a few sort
of business partners in a couple of different areas
and watch this space for more news about this.
And hopefully, it'll come to a cloud new use soon.
Have you had this problem with your external GPUs
that I've run into, where SystemD Udev consumes
an entire core, and it just sits there and runs one of your cores
non-stops after you boot, if you boot up
without your Nvidia graphics card connected?
Have you had this?
I have not.
Oh, well, I have, as a result of trying out the GPU dock.
And it was causing issues with my audio because of the CPU.
We were really scratching our heads about this.
Yeah, it started really with we thought
we were having Jack audio issues, where
Jack was dropping audio.
And we started going through this troubleshooting
and troubleshooting process.
And it wasn't until I got into Texas and was setting up
and I had just bailed on Jack audio
that I realized I still had a problem.
And then I had to start troubleshooting
what was going on.
And I discovered SystemD UdevD consuming 100% of my CPU.
Now, there is bugs everywhere about this,
including there is a bug on Launchpad.
There's a bug on the Manjaro tracker.
I have a couple linked in the show notes.
And it seems to be a bit tricky.
And it doesn't actually seem to be restricted
to just NVIDIA cards.
Although they do appear to be the largest offender,
Bluetooth chipsets have caused this issue
and audio chipsets have caused this issue.
And in short, what it really is is
it's SystemD UdevD trying to connect to devices
and get the right drivers set up and all of these things.
And then it's failing to do so because it
can't find the device so it can't load the driver.
And then it gets caught in a loop.
And it just creates log noise forever.
And it starts with the NVIDIA core is being initialized.
And then it gives it a device number.
And then it says no NVIDIA graphics adapter found.
And the next line in the log is we've
unregistered the NVLink core, major device number.
And then it says the signature is not signed.
Then it says the core is being initialized.
Then it says the adapter can't be found.
Then it says it's being de-initialized.
And then it gives an error message.
And then Udev gives an error message.
And then the whole process, rinse and repeats,
over and over again for as fast as one of your CPU cores
can possibly facilitate it.
And it'll make your laptop heat up.
It'll drain your battery life.
It was really kind of awful.
And I feel like there's probably several ways to fix this.
Obviously, one is I could just get rid of the NVIDIA driver.
But that's sort of a Hail Mary would
prefer to avoid that solution.
I mean, you're trying to use it, right?
Because you have the dock.
That's the point.
Right.
Now when I'm traveling and I'm not hooked up
to the dock at the moment, I need it to be reliable.
And it can't be going to mucking up my audio.
So I did a temporary workaround just
to get system to Udev under control.
And that was just basically doing a system CTL stop system
to Udev and then starting it again.
And if you stop and start it after you've booted,
it behaves itself.
It's just simply after a cold boot
and you haven't stopped and started it,
it just goes nuts.
And you can see different forum posts on the internet
where people are trying to figure this out,
several about Bluetooth adapters.
And it's just essentially across every distro
that seems to have a 4.15 or later kernel.
And it doesn't appear to impact everybody, but it is an issue.
And I was really trying to figure out,
why is my audio so choppy?
What is going on?
And when I looked at it and realized
it was because of system to Udev eating up a bunch of CPU,
I thought, you know what?
The audience might have a way for me
to have my cake and eat it too, where I can still
have the driver installed.
But maybe I run a script.
I don't know, something, some workaround
where I don't have to do this hacky shutting down
of system to Udev.
So if you know, if you've got an idea, tweet me at chrisles
or linuxunplugged.com slash contact.
Do you use the audio interface in the dock?
Yes, I do when it is hooked up.
Yeah, because I have larger speakers that
are plugged into the dock, yeah.
Fine, I shall say no more.
Oh, well, I'll tell you what.
For the purposes of completeness,
in case anyone is listening to this and thinking,
ah, this is my problem, I have multiple audio interfaces.
And I don't use the one in the dock ever.
And I actually have that interface completely turned off,
which is probably why I don't see this issue, because I've
only ever got one audio interface that's
actually enabled.
Well, see, I figure this is going
to become a larger problem as Thunderbolt 3
is on more and more systems.
And more and more people try external GPUs
or external docks.
And that was one of the reasons I wanted to get the GPU dock,
was to actually very much try to discover if something
like this would happen, so that way I could come back on here
and say, maybe don't do it yet.
Or if you do, this is one of the things
you may potentially run into.
And of course, I was really cursing that decision
when I was trying to set up for LAN,
and I had 20 minutes to get on air.
And I thought to myself, why the hell did I make myself
a guinea pig on this?
But I feel like it's going to be something that gets
wider and wider adoption, so we've
got to figure this stuff out now.
And I bet there's somebody out there who already has,
so let me know.
But before we get out of here this week,
we've got to talk about clear Linux, which
seems to be getting more and more hype, more and more buzz,
more and more people talking about it.
And I guess a lot of us have always thought of it
as something that's for containers,
or something that Intel is hoping takes off
in the server industry.
Because it's a distribution that has traditionally
focused on security and performance,
it's got a rolling release model,
and it is really built for customization.
In a sense, they look at it as you fork your own version
of clear Linux and build it, or they have some pre-built
versions for you.
And so I wanted to take a deep dive into clear Linux
for a little bit in this episode.
And Wes had a chance to try it out,
and I had a chance to go dig into some of their docs
and watch a few talks, and thought maybe we could talk
a little about clear Linux.
So Mr. Wes, let's start with your setup, your clear Linux
experience.
You know, clear Linux, it's in a very interesting stage
of evolution.
You're absolutely right.
There's a lot of focus on this well-engineered and
architected distribution that works well
if you have these complicated container
workloads in the cloud.
And I think the technical merits of clear Linux
are some of the things that really stands out.
They have a lot of blog posts about it.
It's very well-communicated.
They've even got this great how to clear tutorial up
on GitHub that kind of teaches you
the unique concepts of things like bundles and mixes
that actually build up how clear Linux forms package sets.
So that's one of the key things is software
is shipped in these bundles.
And the way they do that is you put everything into a bundle,
and all of the dependencies for that bundle
are resolved at build time on the server,
not on the client at install time.
So you don't have a package manager that's figuring out
all the dependencies.
When you install that bundle, they've figured those all out
server-side.
It's kind of similar to package groups in other distributions.
But then one of the things they do to kind of turn this up
to 11 is get ready for this, kids,
is they turn on auto update by default.
And that is generally because they have a really strict
security turnaround policy where they have a team
policy of patching a vulnerability within 24 hours
of a fix being available.
24 hours to get that fix turned around.
So they turn on the automatic updates,
which generally works out to be about nine releases per week,
about twice per business day.
There's a batch of what are generally security updates
for clear Linux.
I mean, it's an interesting sort of to posture.
It does seem very well engineered.
They've thought about it.
They want it to be robust.
There's been a lot of effort put into that before
to even get any of this if you're going to try it.
It's worked as a desktop for a long time.
Originally, that was with XFCE.
They've been transitioning to Gnome Shell.
So that's what I tested out.
And they're starting to roll out support for KDE.
But actually, to get to that experience,
you had to use their longstanding text-based installer.
It's pretty simple, but it required a working internet
connection.
And it didn't offer a lot of customizations around RAID
or encryption or any of that sort of fancy stuff
that people might want.
These days, there's now a beta, a desktop beta.
And actually, it's pretty nice.
It boots right up pretty quick.
One thing I will say is it works offline, but it is chunky.
It's like a solid eight gigs after you extract it
and takes quite a long time to write to that flash drive.
Once you get into it, you've still
got a text-based installer UI.
But honestly, it's a pretty well engineered Curses interface.
I'm a stickler for how to configure disks.
And I didn't find the Clear Linux OS installer's disk
management really the best.
It did kind of mess up the first time I tried it.
And there could just be, thankfully, I mean,
it was on a test system, so it's fine.
But I was trying to put it on one partition,
and it just rewrote the whole partition table on me,
which I didn't expect.
And it doesn't provide you a lot of prompts for things
like, once you've set up a root partition and a boot partition,
then it'll let you install.
But I had mistakenly put slash boot slash EFI
as the mount point.
Didn't tell me anything.
It just didn't let me hit the Confirm button.
There was no error message anywhere.
And you have to be a little bit experienced
to know what you're doing.
So did you lose all the other partitions on that drive?
Not all of them, or either that or just reset up maybe
a couple of them.
It was definitely a different disk layout when I rebooted
and not what I expected.
But it is lean and mean.
It works really well.
It's pretty easy to go configure your mixes
and get everything like what software you want,
how you want it to run.
That part was pretty smooth.
Yeah, their mixes is kind of where I was going with that.
You get your own mix of cleared Linux
is kind of how they look at it.
And so it's fascinating the way they've
kind of made that distinguished.
Once you kind of set it up, it's your own OS in a way.
And then they have this stateless design
that they call it.
And what that really kind of essentially means
is they put default fully functional configs
for when you install software in slash user.
So if you were to start up that service or whatever,
in theory, it should be ready to go, fully functional, not
a half setup config.
We have to go define the port and things like that.
But what's interesting is those go in slash USR.
You can put your own overrides in slash Etsy
or in the home of a user account.
It's another place in your home folder.
That's not too unusual.
But the cool part is you can go in and just wipe out
all of those Etsy configs.
Just go RM them.
Just get rid of them.
And what you're essentially doing
is you're just setting the system back to defaults.
It's essentially like hitting the reset button.
And it's a default Clear Linux config,
because they still have all of the original configs in slash
USR.
That's one of those things is they're
doing things differently and not really like any other distro.
Arch was this new Wellspring that
was building things themselves.
But Clear Linux clearly has different goals.
It's minimalist in some ways, but in a lot of other ways,
they're going above and beyond, things
like their fancy Clear Boot Manager.
That's long been needed, and no one else has pursued that path.
Yeah, this is an interesting piece that I don't really
understand a lot about, the Clear Linux Boot Manager.
I do remember talking to Ikey about it ages ago.
And I think he worked on it to a degree.
And he may be back there working on it again.
It sounds like.
I don't know if this is the role he's playing there.
But this was something that was kind of coveted
by other distributions for a bit.
And I never really fully understood
why other than it was supposedly going
to make system updates like kernel updates rock solid.
Yeah, I mean, a system layered on top of all the other stuff
that's going on at boot to try to make sure
that things wouldn't fail, that it was going to have
a solid, reliable rollback.
And it really also embraced UEFI.
So that's another area where they are targeting
a lot of more modern things.
It's very well optimized for recent Intel processors.
A lot of Ferratics benchmarks keep showing that.
So that's another area where people are doing comparisons
and seeing like, oh, they've spent a lot of time.
They're doing non-trivial extra patches to glibc sometimes.
They're really looking at this.
And I don't think it gets a lot of attention.
It might see some cloud workload.
But if you're a power user, that might be something you want.
Yeah, so they talk a little bit about how
they build the whole stack optimized for the IA processor
architecture, the Intel processor architecture.
And they talk about one of the things
that they've really focused on is anything
that they execute that has a series of dependencies,
they've gone down that dependency tree
and optimized all of that stuff too.
Because they're Intel, right?
So why not make it as bad-ass as possible?
Why not make a Linux that really shows your OS?
And then they're combining that with this solid update
where they have this clear Linux boot manager that's
supposed to protect you from kernel upgrades.
They have that stateless OS where it's easy to revert.
And then they have this mixes concept
where, in their words, you compose
an OS for your specific use case.
They view it as your own Linux in a way
that they're just sort of upstreaming.
You've also now got Flatpak there.
So if you rely on applications provided by Flatpak,
that's another route for software availability.
Did you give that a go?
Did you try installing the apps via Flatpak?
Oh, yeah.
I mean, it works great.
They've already provided some apps that were packaged.
It's installed on the live by ISO and everything.
Really?
Really?
So how would you describe the experience
of using the Gnome Shell desktop and just clear Linux
as a desktop vehicle?
Not bad.
I mean, it's not super far deviated from Gnome defaults.
Honestly, though, I think the website looks good.
A lot of the experience is well thought out.
The background images and some of the theme aspects.
Really, I mean, it's kind of just a plain Gnome desktop.
So if you want that, if you just want to get to work,
if you want a lean, well-architected, technically
thought out distribution, I think
that's probably the space right now that it's playing.
It's not going to be for someone who
wants to try just any old Linux distribution.
You have to want to work to get to clear Linux.
But they're clearly making strides to make that easy.
My question, I think my main question is, is why?
I want to hear more from the team behind clear Linux
about their target audience.
Is this for developers who are using it for server workloads
and they want to run the same machine,
or is there a wider applicability?
You got to wonder if maybe they have eyes on the workstation.
Why shouldn't Intel's own version of Linux
be the premier operating system for an Intel-based workstation?
Seems like that's a slam dunk.
If anybody's going to make an OS that really makes their own hardware shine,
it should be them.
And Linux is a perfectly reasonable workstation desktop
that has been proven successful in many markets
by high-end CPUs.
I kind of see some logic to it, I think.
But I could just be kind of hope casting.
I think I just made that up.
You know, I could see it if we had the software we need.
If we got that all worked out, it might make a nice studio machine.
Yeah, or yeah, like the recording system, something like that.
I think so.
I think so.
Well, thanks for kicking the tires on.
I found the deep dive to be pretty interesting too.
I wondered before we went into this episode,
I thought, well, what is it that really makes Clear Linux cool?
Because I keep hearing cool stuff from the audience.
People love it.
And I'm like, well, what is it?
And there is some really different stuff there.
There is some really different thinking.
Like, I mean, nine releases a week?
Holy crap.
I mean, it's rolling for sure.
Like, that's a pretty intense release schedule.
You're absolutely right.
And I think regardless of if Clear Linux really takes off on the desktop
or not, for whatever value of what that means,
it's one of those distributions that other people in this space
can learn from.
They're pioneering new approaches that I
think will make all distributions better over the long term.
Ooh, I like that, Wes.
I like that.
Well, we'll have links to Clear Linux if you want to give it a go.
Try it out.
They just had a new version.
We talked about it in this week's Linux Action News.
And one of the quote unquote features
would be this new desktop live image that Wes talked about,
as well as that plasma version they're working on now,
which, you know, it gets us excited here.
So yeah, additional coverage on Linux Action News
as well as links to Clear Linux in the show notes.
A pretty neat looking distribution.
Intel's trying to actually do something different there.
And you got to respect that.
Well, Mr. Wes, that brings us to the end of this week's Unplugged.
Thank you to Wimpy and Popey for joining us.
Go check them out at the Ubuntu podcast, which rumor has it another one will be
out this week.
Hey, yo.
And another great episode from those guys, I'm sure.
And go get more Wes Payne at TechSnap.systems.
Wes and I do a systems network and administration podcast.
That's what the SNAP stands for.
Over there at TechSnap.systems.
And a reminder, we have our special recordings coming up soon.
Our Hope Casting, my new term, and our predictions episode
the day after Christmas, so December 26th,
and the day after New Year, so January 2nd.
We're recording one day later, and we're doing a special edition.
And we'd love to have you join our virtual log for that.
And get your predictions in and your Hope Casting.
But that's all for this week's episode.
Thanks so much for joining us.
And we'll see you back here next Tuesday.
Hey.
So I'm doing a ugly sweater party tonight, going to an ugly sweater party, and I'm not
gonna lie, I took the easy route and I went on Amazon and I just searched for ugly sweater.
It's a whole product category now, and there's a lot of ugly sweaters, and the one I got
is like a polyester thick shirt.
I don't really feel like it's a sweater.
I'm worried I'm gonna get called out, and I didn't know because I got it off Amazon.
Thick shirt, is this a technical term now?
I don't know how to put it, Wes.
It feels like a thick, it feels like multi-layer polyester shirt.
I don't know how to describe it, but it's very gaudy.
It's very ugly, and I rush-shipped it on Amazon so that way I'd have it for the trip.
So there I am, just with a bag, because I have the one bag rule.
Just a carry-on, one carry-on, and not even two, you know, a carry-on and a bag, just
anyways.
So I'm stuffing this stupid ugly sweater into the backpack, and I'm just looking at this
and going, what am I doing, and I forgot it at the hotel.
So I'm gonna run back to the hotel, grab my ugly sweater, and then race off to the ugly
sweater party.

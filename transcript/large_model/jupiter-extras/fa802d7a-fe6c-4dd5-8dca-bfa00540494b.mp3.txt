Well, hello, Neil. How are you?
Oh, I'm doing fantastic. How about you, Chris?
Oh, I'm quite good. You guys out there might recognize Neil's voice from Linux Unplugged.
He's often joining in and chiming on many subjects because Neil is involved in many projects out
there. He closely follows the news as well. And often you'll chime in with a fedora fact for us.
So when I saw this news of Peigu, I think you'd sent me the first link I'd ever seen about it.
You were the obvious guy to talk to him. Is it Peigu? And what is it?
I can't say it completely correctly because I'm not a French speaker, but I go with Peigu.
What?
Yeah. Pierre-Yves Chabon, who's the guy who created it,
seems to not cringe when I say it that way. So I call that a win.
I don't think that's how you say it.
But I'm not the expert.
I'm sure there's a recording somewhere that...
Yeah. You know what? We'll play it right now.
Hello, I'm Peigu and I'm pronounced Peigu as Peigu.
Kind of sounds like Peigu. Oh, open source. Anyways, what actually really got my attention
wasn't the name, but it looked like maybe this would be sort of a self-hosted GitLab alternative.
Yeah. So Peigu is very much in the realm of GitHub and GitLab and lighter weight
alternatives like GitTea and GOGS, which are what we like to call forges, which are
Git hosting servers that offer you the ability to self-service, setting up repositories,
managing projects, accepting contributions, things like that.
Peigu is a lightweight forge written in Python built on the PyGit2 library.
If you're a little bit familiar about various things around the Git ecosystem,
the common library people like to interact with Git repos with and integrating with
other projects is LibGit2. PyGit2 is its Python binding.
Okay.
And so we use that for a lot of the features and functionality for operating on Git.
You just dropped the wee bomb. Are you involved in the project?
I'm a contributor to the project. I actually maintain the packages for a wide variety of
distributions. I do a fair bit of testing and stuff like that. Like the last go around,
my most significant contribution was helping bring PyGor to Python 3 back in 2018 for the 5.0 release.
Oh, cool. That's nice. And I understand, too, that the Fedora project leverages it
to some degree. Is that correct?
Fedora and the CentOS project also actually have PyGor instances running
for the Git servers that host all of our package sources.
We also have PyGor I.O., which is a common, free, everyone-can-use Git forge.
But a lot of the Fedora infrastructure projects have also moved there,
as well as a lot of the Fedora organizational tracking project stuff.
We used to run these on a track instance. They all moved to PyGor as well.
And so we use it pretty heavily across the board. And it's really designed with free
software and flexibility and things like that in mind.
Now, what is the high-level advantage to something like this over GitLab that you would host yourself?
The biggest advantage is that it's a very open data system.
It has some features that could be the foundation of federated decentralized development.
One of the core features is that all the project data, so the documentation that you store in there,
the issues of the bugs and issues that you store in the issue tracker, the metadata for pull
requests, those are actually all stored as Git repos associated with the Git repo of the code.
So you can take that code and the issues and all that metadata, and you can clone it out of one
PyGor instance and import it into another or transform it to go into another system
or process it or so on. So, like, you can do all kinds of interesting things here.
This is actually why PyGor is named the way it is. So it refers to a hermit crab.
It's the French word for it, referring to the Latin name Pygoriidae. I cannot say that Latin
word correctly, but that's fine. No, but I'm following you. It's a cute-looking crab.
Right. So the hermit crab is a crab that tends to move from shell to shell. It finds a shell to go
in and habitats on it. So the idea is that code and projects can move from host to host as needed.
Aha. Clever. Okay. So that seems like a nice, clear differentiator,
but there's sort of a network effect around GitHub and GitLab. So if I'm an open source
project, I kind of want to leverage network effects. What's the answer to that here?
Yeah, I don't have a terribly great answer here yet. I mean, one of the nice things
that with the PyGor API and some of the underlying features there, it's actually possible for someone
to say, write a bot that, like, listens on a GitHub or GitLab mirror of the project,
and it can accept pull requests from there because another feature PyGor has that actually,
as far as I know, no other forge has, is the ability to accept pull requests from another
Git server that isn't PyGor. It just has to be a Git server. That's cool. If you have an account
on the PyGor instance, you can, say, create pull requests and, say, create remote pull requests.
And the only thing required is to point it to a public URL, give it the branch name,
and give a description, and it'll create the pull request from that repo to this one.
And that feature can actually be leveraged by the API to do things like, well, you could build a
service bot that listens on GitHub or GitLab mirrors and actually cross-federate all of the
communication and the handling of the pull request or merge request across Git servers.
So if I understand the lineage correctly, it was a project that started back in 2016,
and it came from an individual of the Fedora engineering team, right?
It actually started a few years earlier. It started in 2014 as called ProGit,
and it was renamed because, well, the name was taken for something else. And so
Pierre came up with the clever name PyGor and renamed it accordingly. And in 2016,
we had our 1.0 release, and that's when we put a Fedora Magazine article. And a year later,
we switched over all the Git servers in Fedora to PyGor.
Oh, so it's been years.
Yeah. This project has existed since early 2014 in various forms. Yeah. So
it's been long for a while. So six years now.
So my question was going to be, since it came out of that kind of legacy, does it offer a solution
for developers who like to work via mailing list and traditional tools like command line tools?
Is there solutions there for it?
You can actually do a lot of the workflow without ever interacting with the web interface.
Ah. If you generate a token through the API
or through the web interface, you can put it into one of the command line tools that are available.
One of them that Pierre himself uses that he wrote called peg off, which is offline management of it.
Since PyGor has all of the project data as Git repos, you can actually clone all of it locally,
do all of your work offline, and then push it at the end. And it will actually,
it'll update its state. And then from their perspective, you just did everything all at once.
So you can actually do all kinds of interesting things like that. You could mirror and then do
all the work locally on a local Pager instance, and then push it again later. There are some
integrations for like Emacs and Vim as well for doing these kinds of things.
Project management with Pager through the API and through the Git repos.
What about you? Do you have any kind of tricks for how you interact with it?
So right, I've got a few like little scripts that I do to interact with the API to do certain things
like I keep track of, you know, what stuff, what projects I'm watching and seeing what
new things have happened for some of them, keep track of the pull requests I've got open,
what packages or projects have been most recently updated that I need to take a look at,
things like that. But I don't have anything too fancy. I mostly operate through the web interface.
But, you know, their potential is there to build up all kinds of interesting workflows because
you have the combination of all the data being in Git repos, which means you can build whatever
the hell you want regardless of the API. But also, because the API is there and kind of flexible,
you can actually build all kinds of other interesting things around it.
Okay. So it's really whatever you can dream up.
Yeah, no, it's actually it's important to note that one of the other differentiators,
at least from a development perspective and a hosted instance perspective, is that
Pager is intentionally extensible. It has an extension plugin architecture. It's actually
fully themeable as long as you if you're comfortable with Bootstrap 4, you can make a theme of your own
and completely make your own branded experience.
Oh, that's great for a team.
Yeah.
I don't personally feel this way, but I guess I feel like there might be some in the audience
that are thinking, Python, that's going to be slow. How's that been?
It's not that bad because for the most part, we actually aggressively leverage task queues with
Celery. And so there's a lot of async happening for most of the actions in there. The web UI
rendering is very client oriented rendering. So like syntax highlighting happens in the browser
with a JavaScript library called Highlight.js. And so it's not very expensive for making the
things render. And actually, it handles pretty big renderings very quickly and very efficiently.
In the past, we tried to do a lot more server side rendering, and that turned out to be a bad idea.
And we have shifted to a better balance of client versus server side rendering.
And then, of course, as long as you got a nice, fast workstation,
it'll render right up. So outside of Fedora, what other kind of projects or groups have adopted it?
The Free Software Foundation is in the process of setting up a forge for doing entirely free
software work. And the current plan from them that I've been communicated is that they're going to
launch a Pagar instance for that. And so they're doing some integration work developing their
setup. They're using some different configuration options compared to what the main Fedora Pagar
instance does. And they've sent us some bug reports, and we fixed some issues for them.
And actually, this latest release, 5.9, is actually like a good chunk of the bug fixes
were for issues the Free Software Foundation found when they were working on their configuration.
So it is your understanding that their announcement of a Git alternative or a Git
hub alternative is going to be based on Prager, Pagoo, or whatever?
That's what I currently understand it to be.
That's neat. That could potentially end up being a fairly significant deployment,
even if it was just the FSF projects.
Right. Like Gnu Savannah, which is their current hacker project hosting system. It's got a few
thousand repositories and I think like 20 or 30,000 users. I don't remember exactly. But if
that deployment were replaced with Pagar, it would probably fit pretty well within this. Even just
running it on one server, not even talking about scaling it out. To give you an idea of how well
this has actually managed to perform, the current source, src.fedoraproject.org, which is the Fedora
package sources thing, has somewhere close to, I think, 30-ish thousand projects with somewhere
close to 15,000 forks with 7,000, 8,000 users. That is actually handled pretty well on one box.
That's a pretty significant user base.
A lot of other systems can't handle even a tenth of the load without having to require splitting.
The throw down. Well, I guess people will be hearing a lot more about this project
when the FSF spins that up. Do you have any insights on what their timeline is?
Because I've seen that they've announced it, but I don't recall a date.
So they've been actually talking about this kind of stealthily since about,
I want to say, August or September or so. And then they mentioned it a couple of times in November.
I think they were going to give further details at Libre Planet, but that event got canceled.
And they went online only, but since there wasn't a scheduled talk about this at Libre Planet,
there wasn't going to be a thing about it. I suspect we'll probably see them launch it
closer to the summer. The Free Software Foundation mostly operates on volunteers. I believe they have
like two or three actually employed systems administrators that actually are working on
this project. But the bulk of what the Free Software Foundation does is run by volunteers.
Yeah, fair enough. So they'll get to it when they can, but it's coming soon.
Yeah. It's one of their higher priority things. So it's going to happen soon.
They're very proud about the work that they're doing to do this. And one of the things that
they're very pleased about is that it offers this potential for decentralized development.
Because software freedom is also about the freedom to have your own data as well,
like your own project data and using it how you need to. And being able to have total control
of that is something that a lot of people want to have.
Couldn't have said it better myself, Neil. Thank you. Neil, you'll hear more of him on Linux Unplugged.
He's a software engineer, a Linux systems aficionado, a developer in Fedora, Mangia,
and OpenSUSE. And that's just scratching the surface of what you do, really.
I mean, one last thing I'd like to point out. As of, I think, a couple of weeks ago,
is in almost every single major Linux distribution family in some form. It's available in Fedora.
It's available for CentOS through Fedora Apple. It's available in OpenSUSE Alip since 15.1.
It is available in OpenSUSE Tumbleweed. It's available in Magia since Magia 7.
It's going to be available in Debian in the next release. It's in SID now. It's going to be
available in Ubuntu in a 2004 LTS. And it's available in Arch through the AUR.
It's in all the places.
Yeah, so you can get it and use it pretty easily. And if you want to, you know,
contributing to Pagar is super easy and straightforward. We have a friendly,
small, tight-knit community here. The project page, Pagar.io. We have a mailing list on
Lista Pagar.io and IRC channel Pagar on Freenode. Very good. Neil, thank you.

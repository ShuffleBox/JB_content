Well, hello, everyone. This is Brunch with Brent. I'm joined today by Jim Salter. Jim,
thanks for joining me. How are you doing?
Doing good, Brent. How about you?
I'm doing pretty well. It's such a treat for me to have you on because you and I haven't
necessarily had the chance to connect that much, even though we're both doing some pretty
cool Jupyter broadcasting content on a regular basis. But I wanted to give some people a
little bit of a background on some of what you do. Many will know you as a tech reporter
at Ars Technica. Most will know you probably as being co-host of TechSnap with Wes. You've
been doing that for a little while now, haven't you?
I think we're closing in on a year. I'm not sure. I did several as a guest before they
brought me on, so it gets a little hazy.
But has that deep kind of thinking always been a part of you, or is it something you've
developed out of necessity?
I think that's pretty much always been me. I was the kid that before the internet would
literally just start reading random things out of Encyclopedia Britannica and going from
volume to volume and to see that, to see the other. I want to absorb information, and I
want to think about what you can do with it and what it really means and new things you
might be able to do.
Understanding a concept deeply allows you to interact with it in a way that allows you
to be more creative. I've noticed that certainly, because I tend to be quite slow and deep as
well when I commit to learning something. And I've noticed that it allows me to kind
of make all these connections that I wouldn't if I didn't give it that time. Do you find
that too? Like connecting a whole bunch of different ideas is what keeps you deep diving?
So there's like a really seminal moment in my own personal career progression, right?
So I'm about to turn 48 years old, so obviously there was no internet when I was a kid. Some
people had computers at home, but that wasn't particularly common either. I was kind of
lucky that way, and a lot of people didn't necessarily believe yet that computers were
ever really going to matter much to most people, as weird as that might seem now.
It does, yeah.
But I had been, I mean my hello world was at like age, I don't know, maybe six on a
trash 80. So it didn't take me that long to figure out that I thought computers were
seriously cool. And when I discovered that there was a job, a computer programmer, and
it paid well, I'm like, well, this is obviously going to be my life. And it didn't necessarily
work out all that cleanly.
Life never does, right?
No, it doesn't. But one way or another, I assumed for a good long time that my life
is going to be about writing code and programming computers. But I enlisted in the Navy at age
17, don't recommend, not a good idea. And I thought that I was going into a real high
tech field. I enlisted to be a reactor operator and discovered to my great dismay that that's
not really this amazing high tech thing.
I don't know if you know this, but a nuclear reactor is basically a giant Zippo water.
It gets hot and it boils water. You run steam turbines with that. The same way you would
have it with a coal boiler and a black gang in the late 1800s. You know, they called them
black gangs because all the coal dust and they were literally shoveling chunks of rock
into a fire. That's what a reactor does. And I don't want to get too deep into my deeply
weird Navy career, but like even that didn't end up sticking. And I wound up a whole tech,
which basically means like a welder with some other stuff thrown in and that didn't actually
suit me, but that was my rate and there was no getting around it.
So then I end up in a repair planning department on a large ship and they had IBM PCs in there.
Several of them that they would plan jobs on. The PCs weren't networked. You know,
they were just individual, not connected to any network at all type stuff up on it and
be done. And they ended up needing a pretty massive upgrade that they had no idea how
to accomplish because the repair manual for the Navy had upgraded. It went from the repair
manual mark one to the repair manual mark two. And the folks, the Frank Cable had been
provided this program that somebody had written at the behest and you know, with the money
invested of the Navy that would just barely allow you to design a repair job according
to the repair manual mark one. But this thing, I mean it was terrible. It was like a fill
in the blank kind of a thing. You couldn't copy and paste. You couldn't even non-destructively
backspace. It was horrible and there was absolutely no way to make this limited thing, you know,
output a job that was planned according to the repair manual mark two.
So the repair department is flummoxed. Like they're starting to get yelled at because
their repair jobs aren't compliant with the latest regulation. But they're like, you know,
we can't because our tools only allow us to do the mark one stuff. And the word gets around
is the word, you know, tends to that, you know, this guy, Petty Officer Salter, he's
real good with computer. And so at some point without, you know, no longer knowing what
the hell else to do, these folks asked me, they're like, so if we asked you to, could
you write a program like this one that would allow us to, you know, design these jobs in
accordance with the brand manual mark two? And I took a very careful look at it and I
thought for a day about my answer and I told them the next day, I can, but I shouldn't.
Here's what we should do instead. And I got them on board with a plan instead to use the
MS-DOS version of WordPerfect. I think it was 5.1. And I said, you know, look, we can
design these jobs in WordPerfect. You have all the modern features of writing a document.
You do it basically free form, but you adhere to what you're supposed to do. And I said,
you know, then further, we have a local network file server that everybody's connected to
and we have two drives that everybody can access. We have a working drive that everybody
can read and write to. And then we have an approved job drive. So every time a job has
been done being designed and it's been approved and it's ready to go, then the shop supervisor
copies that over to the approved drive that everybody can read, but nobody but the supervisor
is able to write to. And they know I can copy an old job out of that, know that everything
in that is completely kosher, and I can edit that and adapt it to a new job that's similar.
This basically tripled shop throughput. It allowed them to get jobs done far quicker,
you know, the design phase, than they had been able to do with the old system, as well
as, you know, do it in accordance with the repair manual mark one. And I remember thinking
to myself, you know, after the dust had settled and I had, you know, designed this network
with no kidding, you know, coax in between the machines, you know, old 10 base teeth
in that all this kind of thing. And we, you know, we'd had a month or two and I saw how
well everything was working. Anyway, I remember very specifically thinking to myself, this,
this is how you get things done. You don't just sit down and write a program. Anytime
there's something you want to do, you need to have an awareness of what software is out
there already and what the actual best way to deal with your real workflow is. And it's
not usually going to be right in code from scratch. So that was basically the day that
I knew. No, my ideal job was not computer programmer. It was a sad man.
That also sounds like the beginnings of the, cause I know you're a big open source fan
and it sounds to me like just the way you approached that particular problem took some
of those ideas in there. I don't know if you knew open source at that time, but it sounds
to me like it was like, okay, well some of these tools already exist. Why are we trying
to rewrite them? Maybe we can just implement them in a different way that solves our problems
in the present and also in the future.
It's definitely an adjacent thought process, but I was not aware of open source then. Open
source existed, but not very many people really had it on their radar at this point. This
would have been, I want to say like 1992, maybe 1993. It was definitely not 94.
Yeah, right.
So I wasn't aware of open source. I was familiar with the older, like there were programs that
were in the public domain or then later on there was shareware. Open source hadn't reared
its head to me personally yet. I do know that when a few years later I did discover open
source when I was a civilian again in the mid to late nineties, very rapidly I was like,
this is important. This really means something.
Because the difference between I have to go get approval from a boss to get say Photoshop
or Microsoft Office or whatever, not only for myself, but for any other people that
I want to enable to do something as a computer person, that's frequently a lot harder than
teaching the people or enabling them or getting the thing done, right?
That's why you have so many shadow IT departments where people just surreptitiously do whatever.
But I'm like, when you've got a program, like say compare GIMP to Photoshop, there
are things that Photoshop does considerably better than GIMP, but GIMP is really important
even when it's not as good as Photoshop because it's accessible to everybody. When you can
do the same thing in both programs and you know how to do the same thing in both programs,
that knowledge in GIMP is really important because you can take it with you anywhere
and you can use it anywhere. You don't have to get somebody else's approval to use it.
You don't have to get somebody else's approval to teach somebody else how to use it. It's
just like the whole freaking human race has this thing now and that's amazing.
Yeah. And lowering that barrier of entry is so important for like future creativity and
future sort of thought processes too in someone, especially young people, but anybody who's
learning something new, right?
Yeah, it is. And you know, I mean, there are other awesome things about open source and
I bought onto all of those pretty early as well. You know, once I encountered the concept
of, you know, like the BSDs and I learned about how, you know, at the time the largest
website in the world or the most heavily trafficked, you know, ftp.cdrom.com, I was like, you know,
this is running on commodity desktop machines, running a free operating system and it's
literally serving more traffic than anything in the world. I'm like, okay, I need some
of that.
There must be something here, right?
Yeah. So, you know, then when I read, you know, from the other side of the open source
camp, Eric S. Raymond's, The Cathedral and the Bazaar, you know, his arguments about
how open source produced better code, you know, because of the greater visibility and,
you know, peer review and this and that and the other, I was perfectly willing to believe
and buy into all that. And, you know, I still do. I think it's very true. I also have the
experience of having written proprietary code for purpose myself versus whether it's starting
out to write open source code or converting, you know, what had been a proprietary project,
you know, into something open source and, and, you know, thinking even before anybody
else says anything, just to myself realizing people are going to see this crap I wrote.
It needs to be professional. It needs to be good. Just it works, you know, with the thing
that you do it for that day is not good enough. And, um, I think it's really hard to get that
without open source, you know, I mean you can, you can Institute code reviews within a company
for proprietary code, of course, but I don't really see how over the course of time you
don't eventually end up having standard slip a little bit and they may not get all the
way down to like, well, this is good enough for me. It's the thing I do and it, you know,
doesn't really break off enough to piss me off. Like you can, you can get north of that,
but I don't see how you keep from slipping down to the point where you have this little
insular community and well, it just needs to be good enough for this little insular
community standards. You don't have to be worried that literally anybody in the world
can take a look at this thing that you did that granted it works, but they're like, what
did you do?
I think some of the coolest things that happen with open source is when someone takes a project
and uses it in a completely different way than originally intended and yet still a plausible
application, right? And like perhaps when you wrote the code, you had a certain intention,
but could never imagine its other uses. And how much of a gift is that?
That is a definite gift. Um, you know, that's also, again, that's, that's one of those things
that leads you to writing higher quality code. When you, you really realize people are liable
to use this in ways that I didn't intend. It forces you to write a lot more defensively
and consider a lot more use cases. And sometimes that consideration can lead you to avoid errors
and what would have been a lot of unnecessary rework because you're thinking from the start
with like, okay, how do I make this the most broadly functional and not just functional
in this one specific use case that I have for it?
So what about the challenges then of taking that approach? I would imagine there are some
like that sounds like perhaps more work or more intentional work. What would you say
are the, are the downsides if any?
I don't think there are downsides. I mean, it's, it's quote more work unquote, but you
know, that's like saying, yeah, it's, it's more work to do a job right than to do it,
you know, crappy and half ass. So it's just, it's forcing you to do it right. That's more
work than having done it half ass, but you didn't half ass it. So.
And so take us back to when you are on that ship. Um, like that was clearly a changing
moment for you, but how did things progress for you from there?
That's kind of a rough story. So this was the Navy, um, in the early to mid nineties
post tail hook era. And I'm still very young. And to understand some of it, you have to
understand a little bit of background on like how the Navy works and specific rates work
in the Navy. So I went in as a reactor operator, which the base rate to that as ET electronics
technician, right? And the reason that I was no longer a reactor operator, it boils down
to I pissed off the wrong people. Don't get me wrong. I, I truly meant well and I was
a very earnest person as a young man. Like I wanted to do the right thing as a, as a
person, as a soldier for the Navy, as a whole, my unit, the whole mind, but I wanted to have
a little bit more input into that process than you're really supposed to have is, you
know, like a 19 year old enlisted dude. And that didn't fly. And, um, I disagreed with
some of the things that some of the brass were doing in the, uh, in the prototype, the
reactor prototype that, um, I was completing my two year Naval nuclear power training pipeline
in. And as a result of that, they found a way to get me out of the program to make a
long story short. And I assumed, okay, well I'm going to go to the fleet as an electronics
technician, but that's okay. I'll be out of most of this politics that will probably
suit me better. It'll be electronics. My dad was a broadcast engineer and I always, you
know, like really dug the hole, like, you know, he's over there soldering on circuit
boards and whatever. So that's going to be me now. And I had that a school as part of
my training, so it's going to be great. It'll be fine. But the Navy decided to cross rate
me involuntarily to whole tech, which like I said, is mostly welder. It's a very blue
collar thing. And, um, advancement in the enlisted Navy is based first and foremost
on how well you take written tests. So what do you think? Does the typical welder do a
great job taking written examinations? I would imagine that's not their forte. It is not
their forte. Um, it was my forte, which is, you know, the majority of the reason why at
not quite 20 years old, I was an E five. So that's the rate that was the rank that I got
cross rated into as a whole tech. And I went to a whole tech a school, you know, which
is all of like seven weeks of, you know, learned to weld. And then I'm, you know, unleashed
on the fleet as an E five, you know, theoretically whole tech, but a real HD two, you know, whole
tech second class, that's E five, a real HD two typically started welding, uh, when they
were in high school or junior high school was already really good at it before they
ever joined the Navy. Uh, and then because they're not typically good at all at written
examinations, they'll end up having to retake the tests and, you know, get more points just
for time and service to the point that there probably won't be 30 by the time they hit
E five, but they're pushing 30. So now here's me. I literally just had my 20th birthday
in a school and you know, I'm, I'm an HT two and that does not fly with whole tech.
So that's what gets me into the, you know, the shop with all the computers in it, which
was whole techs and machinist mates, but there's computers here. That's also why finally getting
to answering your, your, your real question, you know, how did things go from there? So
I did this awesome thing and you know, made the, the, uh, planning and repair shop way
more efficient. How'd that go for me? And the answer is I got absolutely terrible performance
valuations because although I had done this great thing with the computers, that wasn't
my job and I wasn't much of a whole tech.
Oh, and so do you feel like that is a problem with such hierarchical structures of that
sort? Is that if you didn't do the specific thing you were designed to do, even though
it was for the greater good that it's seen as a negative?
I think that's a problem that a lot of really capable people have and any, I'm not trying
to puff myself up, but a lot of the people who do go on to change the world, they're
so frequently or, you know, like college dropouts or whatever. I think the reason for that is
that really capable people frequently don't fit well in organizations. You know, organizations
are specifically trying to avoid needing really unusual people because they want to be able
to replace personnel as they retire or leave for a different job or whatever.
So when you have somebody who's really capable, who shows up, if you're running that organization,
if you're an exceptional leader, maybe you can figure out something great to do with
that person and you can figure out kind of a transition in and a transition out where
you use this exceptional person to do an exceptional thing that lasts and can be carried on, you
know, by the people that you can find day in and day out.
If you're not an exceptional leader, then one of two things happens. Either that person
ends up making those changes anyway, but doing it, you know, outside the scope of the organization
and they basically become, I mean, they're kind of a cancer. You know, you ever work
someplace where you're like, oh, you know, you got to talk to Joe back in the back. Like
he's the only one that knows how to do, you know, half these things.
Well, so on the one hand, Joe's probably a really capable person, but on the other hand,
he's cancer to that organization because what happens when Joe's out sick or what happens
when Joe retires or dies or moves on or whatever, the organization's kind of screwed, right?
So you either end up with a Joe and, you know, your people don't really know how to get the
mission accomplished. Or, you know, if again, you know, you're not the great leader and
you don't know what to do with a Joe, Joe just ends up getting fired. You know, you
yell at him all the time. You, you piss him off. Maybe you fire him, maybe he quits, but
you know, it doesn't work. You didn't find a place for Joe in your organization because
there's this like inherent mismatch, right? Yeah. One of you is really bad for the other.
So moving it back to me, I mentioned, you know, I got, uh, the worst eval of my Navy
career immediately after tripling the throughput of this shop. Wow. You want to hear about
the best eval I got in my Navy career? I could just imagine, I'm going to guess at it probably
when you just didn't do very much and wasn't very inspired or. Oh, it is so much more colorful
than that Brent. Oh, please give it to me. So, uh, you know, fast forward a couple of
years and I'm no longer stationed on board Frank Cable. Um, now I'm on the Charleston
Naval base, uh, and the repair division of SEMA, the shore intermediate maintenance activity.
I'm still fixing boats, but now I'm doing it from a building rather than another boat.
And I end up in their, um, automated reports and retrieval system maintenance document
collection. So the acronym doesn't matter. What really matters is what the job of ours
Medco was is, uh, everybody's using these AT&T 3B2 mini computers. Uh, actually they're
not using the mini computer directly. They've got dumb terminals in every shop and on the
dumb terminal, they have an application that they log in, uh, all the, the personnel hours
that were worked on these repair jobs for each shop. Right? So, uh, maybe you got three
E4s and an E5, uh, your shop will be budgeted a certain amount of personnel hours and you
document how you spent them, whether it was on this job or that job or the other job or
training or they took leave. You, you, you enter all this stuff in. So this goes to ours
Medco and ours Medco's job is to analyze this and look for trends, either good or bad,
which ultimately usually just turns into an exercise of the higher ups who direct ours
Medco tell us, look for this particular statistic and we will come down like the hammer of God
on anybody that has too high a number on that statistic. Okay. You remember the, the cartoon
way back in the day, Bugs Bunny with the dam and like he keeps sticking his finger in the
hole and then another hole pops open and the water comes out of there. Yeah. So, I mean,
this is what goes on, right? Like, you know, you've got your bad stat of the week. So all
the shops lie about that bad stat of the week because they've heard which one it is. Um,
and meanwhile they camouflage, you know, all the evidence of not a whole lot of efficiency
going on in something else. So we got all this stuff going on. Uh, the brass doesn't
really have much of any genuine idea of how efficient all the shops are, but everybody's
doing all this active stuff and rah, rah, rah, I'm doing my part to, you know, make
sure everything's efficient. So part of this job, uh, was we would have to take these reports
that were printed out on, you know, wide format, uh, tractor feeds paper, you know, the old
school like alternating green and white rows. Um, all this stuff would be physically printed
out from the 3B2 and in order to analyze it, we would then have to type it back in to a
different application on the same dumb terminal connected to the same 3B2. Oh no. Yeah, it
was fabulous. Um, so, so, you know, we're, we're doing this as what it boils down to.
Um, and you do this at night. Uh, it's like a swing shift, you know, after the normal
working hours are done for all the shops, you get all their time for the day and you
enter their time in one night I'm working with this guy, petty officer Baron. He's also
a second class and an E5 and he's on his way out of the Navy in theory, um, on a, a medical
discharge because his shoulder got hurt. And, uh, Baron was one of these sailors who you
have to demonstrate to him that he has to do something or there will be bad consequences
or he's not going to do it. He's not going to take your word for it. There's going to
be bad consequences. You know, you're going to have to go through the whole cycle with
this guy. So putting him on swing shift with another junior enlisted person and no other
supervision is not the best answer. And, uh, everybody else has left. It's like five o'clock.
Um, people have only been gone for like half an hour. We've got another three, four hours
worth of work, you know, for the two of us together to get done before we can be done
and go home. And, uh, Baron just looks at me and says, well, that's it. I'm done, man.
You look, I'm out. And I'm like, what? No, you're not. You got to do your half of this
crap. Um, and, uh, so Baron just tries to head for the door and, uh, I have already
informed him. Yes, I will physically prevent him from leaving. So we get in a knock down
drag out fight. This is not a fist fight. Nobody threw a punch, but I will say that
I left a dent in the office coffee maker, the exact size and shape of his skull. And
it finally ended up, uh, I will admit he was bigger than, than I was. And, uh, it ended
up with him bending me backwards over a table with one arm behind me and a hammer lock.
And as his thumb went down toward my eyeball, I told him, if you touch my eye, you're going
to have to kill me. And then he let go. And we sat there just like coffin for a few minutes.
Like, have you ever really gotten in a hard fight for awhile? And like, you're just coughing
afterward because you've been exerting yourself. Yeah. So it's that. Wow. So I was a little
bit, I was in considerably better shape than he was. So I was like recovered quicker than
he was. Um, he still kind of, you know, breathing heavy and coughing and he said, all right,
well I'm out of here. And I said, no, you're not. And he's like, what are you talking about?
I won the fight. I said, you ready to do it again? Man, F you Salter. And so we finished
out the night, but you know, in the course of this like 15 minute, uh, barrage of physically
throwing each other around the office, we have shredded like half the paperwork, you
know, under the wheels of the rolling chairs. Like I said, I left a clearly skull shaped
dent in the coffee maker. Um, you know, and you can imagine the rest of the damage, although
we didn't break any equipment to the point of unusability, but it's very obvious. Some,
some crap has gone down the next morning. And, uh, when I roll in at, uh, you know,
about, uh, noon, because again, I'm working the swing shift doing this stuff. Uh, the,
the chief petty officer who also was my chief on board the Frank cable and gave me the terrible,
you know, evaluation there. Oh yeah. Uh, he was like, you know, Salter, what the hell
happened in here last night? And I'm like, Oh man, cause you know, there, there was a
time, uh, that just brawls between sailors and the Navy were openly to be expected. But
that time was in the Vietnam era. It was not post tail hook. And I'm just like, you know,
once I tell chief Millie this, it can't be untold. So I look at him and I maintain eye
contact for a second and say, are you sure you want me to answer that question chief?
And, uh, he is just spit man. He's like, you know, you're, you're F and D and blah, blah,
and right. I want you to answer that question, Salter. And I said, I need to close the door,
chief. He said, all right, everybody out. And the couple other people that were in there,
you know, eagerly anticipating, they, they file out disappointedly. And I go close the
door and I sit back down and I, I explained the whole thing to him. I tell him, you know,
everything that went on. And, uh, he says, all right, I said, so am I okay chief? And
he said, yep, you're fine. Good job. Glad you made him do his work. And I'm just like,
okay. So that eval period, I got a four, four Oh is a perfect eval in the Navy. I got four
Oh across the board, including in leadership, which is a, a, a step that is not normally
measured for an E five. Like that's an optional and it's not normally actually evaluated until
you know, you hit E six. Yeah. I got four Oh across the board, including leadership
for bashing Baron's head into the coffee maker and leaving a debt of that is great. I, I,
I thought maybe this story was going to go into some kind of like efficiency, uh, section,
but clearly you were, uh, enforcing your own dismay with apparently what I was actually
doing is finally I was fitting into the organization. Oh, interesting. And when did you realize
that like for yourself, when did you say, Oh shit, now I actually, I'm one of them.
I don't know if I ever articulated it before right now, honestly, but you know, like I've,
I've had, uh, I've had the thoughts before about how, you know, an inordinately capable
person in an organization can easily end up becoming a cancer to the organization and
how, you know, I have been cancer to organizations in the past myself. And so, you know, just
saying all those things to you at the same time, it's like, it's kind of obviously you'll
okay. Yeah. It was, it's, it's a funny story. And that's what got me the four Oh evals,
but it also fits, you know, into the whole context we've been talking about. I finally
fit into the organization and did it really well. The organization needed me to make this
recalcitrant petty officer do his job. And I did that. And you know, there you go. Here's
your four Oh, interesting. I did notice earlier today, uh, and this will be a slight aside
was totally connected. I ran into a word twice this morning. Uh, and then I was like, okay,
I got to go research what the heck this word means. And so I was looking at, um, a brain
pickings article about Martha Martin Luther King and, uh, the word in specific was gadfly.
And I ran into that word again in your Twitter description. And I was like, all right, I
gotta go look this up. Cause it wasn't a term I had run into. Uh, can you give us a quick
like what a gadfly is? And I think that might just tie into this story a little bit.
A gadfly is just, it's a constant irritant that you just can't quite get to leave you
alone. That just keeps causing problems and you swat at it and swat at it. But you know,
it's still there, still buzzing in your ear.
Yeah. So I, I was doing a deep dive on this word cause it ended up really speaking to
me. And, um, I grabbed that it actually, the first mention of it in that context was from
Socrates. And he said, you know, just to paraphrase stinging people into fury in service of the
truth. And I thought, Oh, that is interesting. And when you were telling this story, I was
thinking about that thinking, yep, that's pretty accurate.
Yeah. Yeah. It's, it's, uh, it it's me.
At least I feel like we need people who are pushing some buttons and asking the hard questions
and doing the deep dives where other people maybe aren't, aren't willing to.
I mean, the positive way to look at being a gadfly is, uh, you know, it's contextual.
It's you need one when you have a negative complacency that needs to be disturbed. And
that's something that, uh, you know, like it or not, I'm really well suited to, I am
that guy that comes into the like, Oh, well, you know, everything's normal and this is
fine, but it's not fine. And just won't leave you alone about like, no, no, no, actually
pick your head up and look around you. This is not good. There are better ways or at the
very least, this is not good. And we need to think about it. I'm, I'm that guy, whether
I like it or not, whether you like it or not, I am that guy. So I might as well find, you
know, positive ways to do it.
I feel like having people like you is definitely a good tool, uh, in keeping everybody in check
to those people looking and looking over our shoulders to keep us doing the good work and
not the bad work. Uh, so thank you from the community for doing that kind of stuff.
You don't always get thanks for being the irritating fly buzzing, but, uh, you're welcome
and thank you.
And that's kind of what's captured in, in that word, right? Is like you're an irritation,
but with the greater good in mind. And that's kind of a tough position to play because you're
the bad guy and the good guy all at once, right?
Yeah, it is.
Does that ever put you down?
Well, to, to, to answer a different question that you didn't actually ask, um, you know,
GADfly is one of those things that for me, it feels comfortable to call myself that because
I feel like there is some humility in it. You know, like you're not saying, Oh, you
know, I'm this awesome person. I'm this great leader. You know, I'm this, uh, influencer.
You're just, you know, I'm the irritating fly that's buzzing around in your ear. I feel
like it's okay to say that about yourself. And then you kind of let everybody else judge
like, okay, well, you know, is this a good irritant or a bad irritant?
That distinction is actually important.
It gets, um, productive irritant.
So like you can strive to be a productive irritant, but I think it's, it's fair to
say I'm an irritant and it's, it's certainly fair to say I strive to be productive, but
you let everybody else judge that. You don't, you don't get to make that call about yourself.
I mean, if you do, that's how you become the person in need of a GADfly yourself, right?
Cause you've sunken into that unproductive complacency of just like, Oh, you know, I'm
awesome.
You know, there's this trope about, uh, you know, Roman emperor supposedly had somebody
on hand, like at all times beside them to just occasionally throughout the day, lean
over and murmur into their ear. You too are mortal. You will die. Uh, you know, to keep
them grounded in the idea that, you know, I am just a person, I'm not a God, you know,
here at the head of the Roman empire.
We all need a, that and B to do what we can ourselves to avoid really obviously needing
that.
Yeah. It sounds to me like there's a little bit of stoic philosophy in there that you
just threw in there is like, we all have faults and all need to be reminded of that and that
we're mortal. And, uh, I guess sometimes it's important to remember that our time here is
pretty short and we should try to do the, the best possible things we can with that
time or those efforts, even if it's a bit challenging.
And also, you know, that we're, we're all part of a society. If you want to talk, you
know, philosophy, then now we're getting into John done, but yeah, no, no person is an island.
We are all part of a greater society and we need to fit into it and we need to be good
and be productive with and for one another as well as for ourselves.
You know, as you were saying that, I was thinking, Oh, doesn't the Navy fit into that too? You
know, there's this interconnected web of people that you don't get to choose those people.
Well, I suppose the Navy does, but true of our greater society too, right? Like we all
have to find a way to create an excellent environment that we all want to be a part
of.
It's, it's so easy to veer into uncomfortable, you know, political directions, but how many
people do you know who aren't wall street stock brokers who just wax enthusiastic about
how lucky we are to have like wall street, you know, stock players among us who are just
flinging around, you know, these stocks several times a day and you know, pocketing changes
in value as they move them around.
Um, you know, I hear arguments about, you know, technically why that supposedly creates
fluidity that, you know, assists business and happening, which all sound kind of dubious,
but uh, you know, at the end of the day, it's like, okay, what are you really doing for
the world? And I feel like if you don't have a clear and cogent answer as to what your
career is doing positive for the world, and it doesn't have to be like amazing, right?
I mean, if you're working at a fast food place and you're making sandwiches, you are accomplishing
a real good for the world. You know, I mean, you are a necessary part in a system that
freaking feeds people. That's great. You go home and you hold your head high, but you
know, if you're making a ton of money, but you're having a lot of trouble putting your
finger on like, okay, you know, what's the thing I do that makes people's lives better?
What's the value you're providing? Yeah. What's the value you're providing? Like if you can't
really answer that solidly, if you can't feel it in your bones, I don't know how to wrap
that up exactly. Other than, you know, that's, it's not, it's not good. So it sounds pretty
important to stop every once in a while and take a look at what you're doing and measure
whether the value you're providing is the kind of value you want to be injecting into
the world. Absolutely. For you, like some of your writing that you're doing, cause you're,
you're clearly doing some for Ars Technica and I think in a few other places, um, what
would you say is like the main motivator then for that kind of writing? What are you trying
to achieve with it? That literally just came up in a comment thread. Give me a second.
Let me look that up. Really? Okay. So, uh, Ars Reader, VFRX wrote, first read through
Jim's articles really seems targeted to techie prosumer people. I'm not saying it's a bad
thing and I'm not saying the sysadmins don't read this site, but this conversation section
and they're referring, you know, to the comments on that article has rarely left me thinking
I'm talking to adults or professionals. So it struck a chord with me and I had to sit
down, like I had to put the phone down and sit down at a computer and apply to it because
I had an answer for that. I'm like, I've actually given some serious thought to this.
My own personal strictly techie blog is focused purely on it professionals or seriously advanced
prosumer types. But when writing for ours, I usually intend my writing to be, and this
is a bulleted list, an appetizer for the technically minded or technically interested general audience,
a dessert for senior it people in or adjacent to the discipline I'm writing about. Finally,
most importantly, last bullet, a hearty meal for larval form or junior it professionals.
So you know, that's, that's my biggest thing is I want to reach the people who are where
I was, you know, when I was in my teens and twenties and didn't quite know, I knew that,
you know, I wanted to do computer stuff and that computer stuff was cool and there were
all these amazing potentials. I kind of sensed out there, but I wasn't quite sure how to
get there. Right? Those are the people that I'm absolutely the most interested in reaching.
I do definitely want to reach, you know, the people who are just kind of interested and
I do want to reach and make my content valuable for my peers. But it's those junior folks
I really, really want to be like, Oh, awesome. Jim wrote about this thing and like that got
me excited about it. And then I went and you know, started getting my hands dirty with
it. Now I can do a thing. That's, that's my big go to.
So inspiring others to, to create good in their own way.
Inspiring them to become more capable. Given what I'm writing about, it's, it's hard to
say that, you know, particularly the technical stuff. I mean, you can talk about, you know,
the good in some ethical sense I might be doing by, you know, pissing off Linus Torvalds
when he gets too shirty. Um, but you know, for the most part, if like if I'm writing
about a VPN or, you know, some mesh networking or whatever, it feels a little too highfalutin
to say, you know, I'm helping people do good. I mean, maybe I am, but ultimately really
what I'm doing is I'm, I'm trying to make people more capable, more self-determined.
Well, maybe simply by giving them the tools, it gives them the option to do whatever they
may with them. But without tools, you can't do very much. Can you?
Without tools and you know, some, some understanding of, you know, what you can do with them and
how. So like I can show somebody what Nebula is, you know, the, uh, Slack engineering's,
uh, VPN mesh product. I can tell somebody what it is and I can tell them how to set
it up and I can, I can point out, you know, some of the like really cool general, very
broad new concepts and capabilities it brings. But like, I don't want to tell somebody like
exactly how to use it necessarily. I want people to know like what this thing is and
like, you know, what, what its shape in the world looks like and, you know, give them
an ability to start getting their hands dirty with it and, you know, really start doing
stuff. And I fully expect that, you know, lots of them will do things that I never thought
of, you know, I mean, but that's, that's the whole point, right?
That's the whole idea of leadership, isn't it? To inspire others.
Leadership and, uh, you know, open source and Unix modular design. Yeah. All of that.
Yeah. It's always been interesting to me how, and I'm not sure which comes first, but we'll
explore that here. Um, I'm always curious how the spirit of open source can be applied
to far more than just software. And what I mean by which came first is like, are the
people who are so passionate about open source, like you and I, are they interested because
that's where their nature is and open source is just a really beautiful way to let that
shine or is it that it inspires people to just look at things differently and to solve
problems in a different way?
I mean, it's going to be different for different people, right? I think I was just about the
most fertile ground possible for the seed of open source to reach because, you know,
the concept of empowerment and the philosophical ideals and the pragmatism of some really impressive
code, like all of that just all came together and every last bit of that is what I was looking
for, right? I mean, open source was firing on all cylinders as far as like how to reach
and impress a larval form, Jim Salter. Right. But, um, you know, there's going to be a lot
of people that, uh, they're affected by the philosophical stuff, but they don't, they
don't really want to think about it. They don't care about it personally. Maybe they
should. They don't, it's not wrong. I mean, I feel like it's kind of a shame that everybody
doesn't see that, but not everybody's going to see things the same way you do. And that's
okay. Right. So some people are just going to be like, well, you know, I don't really
care about GPL or MIT or whatever. I just care that, you know, here's this awesome
software and I want to use it. It's the best software for the use case. And that's okay
too. It's like the pragmatic approach. You know, you'll have people with philosophical
disagreements over, you know, whether the quote correct unquote approach to open source
is, you know, strong copy left or weak permissive. And, um, it's, it's okay to have your own
thoughts about, you know, which one is better for more things. But the most important thing
is to remember that there is no one correct answer. The world actually needs both. You
know, there's, there's kind of this waterfall when it comes to licensing and just the pragmatic
capability of tools, right? If you have a near universal need that can be fulfilled
by software, that need will frequently be fulfilled first by proprietary software, but
proprietary software has its hurdles, right? Like you have to pay money for it and maybe
you don't even care about the money, but maybe dealing with that is a pain in the butt.
Like, you know, you end up, you're running a company and now you're paying somebody 65
grand to be your licensed compliance officer. And you know, it's annoying and getting in
your way and you want to be able to do without it. And you either then are motivated to write
or to find and consume some open source product. And now you've done away with the roadblocks
that proprietary put in your place, but you're still doing the thing you wanted to do. So
there was still the proprietary software didn't fulfill all the motivations to write open
source software to do the same thing, right? So eventually somebody is going to do that.
Once it becomes trivial enough, once it's a well enough understood concept, maybe once
computing resources have become more powerful one way or another, eventually the task that
proprietary software accomplished, somebody is going to do something open source. Now
let's say that the person who did it open source, they wrote a GPL and that's fine and
that's good. And one of the wonderful things about the GPL is that it prevents some really,
you know, well-heeled organization from co-opting your code and turning it proprietary and then
changing it once it's proprietary and choking out your original code base, right?
That's good, but, but it still gets in some people's way. Somebody wants to be able to,
you know, add that library into a proprietary project or a weak permissive license project
or something that doesn't mix and match well with the GPL. To do that, they need a weak
permissive license. So even though now you've got proprietary software that does this thing
and you've got GPL software that does this thing, eventually if it's a strong enough,
universal enough need, somebody is going to be motivated to write and other people are
going to be motivated to consume a weak permissive license version of the thing.
So ultimately everything is flowing downhill towards the most permissive, least restrictive
licensed version of the thing that the absolute most of humanity can use. But there's reasons
for proprietary licenses to make sense. There's obviously reasons for the GPL to make sense
and all my own code is licensed GPL v3. But yeah, I think you have to recognize and realize
that whatever your personal thing you got going on is, all of these are valid approaches
to a problem.
They all have their value in their place somewhere, right?
They do. They absolutely do.
So Jim, if you wanted to put something out to the community, like an ask of the community
or something you'd like them to think about, that kind of thing, what would you like to
send out there?
It's frustrating to me to see the nonstop divisiveness and being jerks to one another.
BSD fans say Linux is terrible and you shouldn't use Linux and you should come use BSD. Linux
fans say BSD is terrible and you shouldn't use that and everything should be GPL or everything
should be Linux. Licensing fans argue about the licenses and sow all this hate about that.
Cut it out. Do your thing. Do a good thing. If you think the world needs a GPL version
of a tool, then develop that thing or find that thing and consume it. Add to its value.
Tell other people about it. File bug reports. Submit patches. Do positive stuff. Don't
spend all your time saying, oh well BSD license version of thing is terrible or anything written
on their cuddle is terrible. No, be positive. We got enough negative in the world. Be positive.
That's coming from a guy that calls himself a gadfly.
Well put. Yeah, we're hearing that often now from a bunch of different people. I certainly
hope that the hope for good there can overwhelm that negativity. Of course, I'm sort of an
optimist. I do want to make one clarification though.
Please. Another thing that I see called for a lot
is oh well if we just didn't have all these desktop environments. We got all these different
things competing. That's what's keeping us down. No, no, no. That is the exact opposite
of how open source works. Open source works because you can do your thing that satisfies
your need and other people can contribute to it and make it better and the best ideas
rise to the top. Neither open source nor software development in general works by telling 50,000
people your job is now to code this one piece of software the way that I want you to code
it. That's not how it works. Please stop. If you think your thing, whether it's you
wrote it or you use it or whatever is great, then promote it in positive ways. Don't neg
everybody else's thing. Don't say everybody else's thing needs to go away. Just promote
your thing.
Yeah. What I find most interesting about some open source projects and the tools that have
risen to the top is that they tend not to rise to the top because someone has paid all
sorts of marketing dollars for it. They rise to the top because they're great innovative
ideas and because other people tend to believe in them. What better reason for that stuff
to float to the top?
Yeah, you accrete mindshare. That's how things float to the top, especially in the open source
world is the accrete mindshare, the accrete developer mindshare, the accrete user mindshare.
They reach the attention of people who do promotion, whether it's professional promotion
or circle of friends or whatever. That's how you get to the top. You get to the top by
making something awesome.
Jim, thank you so much for joining me today. I have learned certainly a lot in this conversation
and hopefully we get to chat together again soon. Thanks.
Thanks for having me, Brent.
It's been a pleasure.

Well, hello, everyone. This is Brunch with Brent. I'm Brent Jerva. And joining me today
is Sri Ramakrishna. Sri, thanks for joining me today.
Thank you.
Sri, some people will know you, well, you've been around for quite some time, I would say.
Some will know you for being quite involved with the Gnome community. How long has that
been since you've been involved with the Gnome community? I think it's been a little while,
right?
I believe I started in 1998. I'm definitely what they would call the part of the old parts
club. Affectionately so.
How has that felt to be, well, called that, but also you, one of the things I'm excited
to dive into is the perspective that you must have gained throughout that time, you know,
as things kind of shift and move in both the open source community, the Linux community
and everything surrounding that. So I would imagine you've seen some changes there.
Oh, yeah, I've seen a lot of changes over time, especially in the Gnome project and
of course, in the open source sector externally. Yeah. Plenty of things have changed.
What's something that kind of sticks out for you as either maybe something positive that's
kind of shifted?
At least in the desktop, or I guess I'm going to relabel that as the apps community. We've
gotten further refined in our engineering. And I think we have this idea that we have
to work much closer with the rest of the other open source communities out there. And I know
in my personal endeavors, it's about building that relationship with the rest of open source,
the other desktop projects, all of that, because only as a singular community, I think, can
we get where we want to go.
And how would you describe then where we want to go? That's a tricky question, I would imagine.
Well, every project has their own path of where they want to go. But I think we could
all agree that we would like to increase our share of the market. And there's a lot of
great things that comes from that. With the greater share of the market, especially in
consumer space, we actually get to drive contributions in the other ecosystems, right? So if everybody's
using a open source or free software desktop, that means consumer hardware is going to also
be forced to support those desktops, which means that good support in drivers needs to
happen in the Linux kernel. And in the past, we've always had a fairly close relationship
with the kernel people, especially during the GNOME 2 days or the KDE 3 days, because
that was the bulk of the engineering that was happening, right? In order to support
things like hardware detection or hot, hot pluggable devices, we had to engineer them
because it wasn't there previously.
And those are things we just take for granted these days. That kind of stuff is essential
for any of us using the software that we do now. But a lot of people put a lot of hard
work into making that possible. It sounds like collaboration was key to doing that.
Yes, absolutely. We were working with each other quite early in the period. And one of
the changes going back to your question about what's happening in the open source field
is I think a lot of companies have been building communities, initially as silos, but to go
further, they need to start interacting with the rest, right? That is where you become
more powerful. So if you're building a config manager system, then you want to work closely
with the Kubernetes community, or you want to work with the open stack community, right?
So it's not just like using config management to do bare metal. Now you want to be working
with the cloud projects, right? So just as a corporate level open source example, in
the same spirit, in the apps community, we want to be working together as well to build
these various standards with each other so that we can present ourselves as a singular
community as well.
You described there some early kind of collaborations. And of course, those have been happening throughout
the history of Linux. That's sort of the spirit of what's making all this possible and the
reason many of us are here. But do you think it's a bit of a misunderstanding then that
there are these sort of silos around certain software or communities that maybe those who
are involved deeply in the software and the hardware there are actually interacting in
the background, but that's not sort of seen by end users necessarily. And I'm thinking
to the, you know, sort of Reddit users that we all sort of despise and things like that.
So do you think there's a disconnect there between what people believe and what's actually
happening?
So I'll make a comment about the Reddit community, which I don't want to characterize that as
being despised. But there is a high amount of tribalism that occurs in forums, right?
So Reddit or Slash That or any of these others, they think these projects that they're a part
of or they use are in contention with the others, right? So we're not really like that.
I think for the most part, we've sort of stayed in our own kind of corners, but only in the
past, I would say a year and a half or so, we've been connecting on different initiatives
that I think has spurred further collaboration. So the Linux App Summit is one. We're doing
some things with community metrics. Some of those things are things I could talk about,
because I'm part of those projects and I'm working with the other communities for that.
In the background, we're still working with each other and there's not contention.
You called yourself sort of one of the old guys in the community, but it seems to me
like the value of long term relationships with anyone who's working on some of these
projects means that as things evolve, as the technology evolves, as the people evolve and
where your interests evolve as well, means that you have all these connections everywhere
that you can sort of build off of. So the tribalism that you sort of described is not
really useful because you may end up in the other tribe or quote unquote tribe at any
point. So it doesn't really make sense to put up some walls. And it seems to me from
what I know of you that lots of your work has been focused on breaking down those walls
or at least putting connections between them all.
That's right. It's interesting that this is sort of what I do for a living is to build
relationships with ecosystems and so forth.
And so that gets me thinking about, you know, you mentioned the Linux App Summit and that
was a bit of an idea of yours that has evolved and become quite an amazing thing. Can you
can you run us through that a little bit?
You know, I came up with the idea like five, six years ago that I saw that we've come to
a point technologically because we have ubiquitous applications as a technology, right? So you
have your snaps or snap craft, you have flat pack and we now have the kind of ability to
change how applications are distributed, right? Based on a runtime of some sort. So we're
taking all the ideas from the containers that's been that's grown so popular and applied that
in the desktop. And I realized that this is something that we could take advantage of
because it's sort of like using a distribution centric model, we can do a more app centric
model. And the difference is that you could scale that, right? An app centric model is
kind of what the Windows and the app and macOS world is. If you use packaging, you know,
everything goes through this process of packaging and a distro. But the complexity involved
of building an application on Linux is so much more. And a lot of times you're not even
in control of your own distribution. But in a flat pack snap world or ubiquitous app world,
we could build an application market. So I had presented that idea with the Gnome Foundation
board and I said, this is a great idea. Let's do this. Now, I spoke from a bit of ignorance
because I've never put on a conference before. Sometimes that's a good thing. I had told
them, oh, yeah, it won't cost us any money. And to do this conference required me to learn
a whole set of new skills. A lot of it around marketing, a lot about fundraising and be
able to put something conceptual that people can digest. And the first one was quite a
test of those abilities. But over time, we're getting better. And the people who came together
to build that team were just simply amazing people. And it's great that I get to keep
working with them every year. But yes, the first one was very exhausting because everything
is done new. Your concepts are new. You have to explain to people what this concept on
before it starts catching hold. And the next iteration is better. And then the third iteration,
now there's more people joining. It's getting more diverse. There are more stakeholders.
And so I think the best part is that we're able to keep expanding on this concept. And
I think people really get it now. And now that four years have passed that apps is important.
How does it feel now considering you had a vision four years ago? But does it feel like
four years is a long time for people to start getting it? And obviously, there were some
early adopters. But do you feel like you've reached your goal? Maybe that's another way
of putting it. We haven't reached it yet. But it's getting there. I told you about solidification
and everything else. But this is a great vehicle to bring us closer to the other ecosystems,
to the other projects. Because apps are not just desktop apps. When we say apps, we're
talking about an application that runs on the Linux platform. And that also means it
could be any applications. It could be your Kubernetes application. I don't know. But
we're not trying to make it very specific. So this allows us to reach out to other communities
around the concept of applications.
And one real success that came from the Linux App Summit, and it's changed names because
of that success, is the collaborations with the KDE community. I know you've been working
with Alish Paul, who I had a chat with here on brunch as well about that. And he touched
on it a little bit. But it sounds like, yeah, there's some real tangible successes that
are coming from bringing all of these great people together.
Absolutely. The last Linux App Summit really brought in a greater closeness and collaborations.
Not only do we work well together, we trust each other. And that's probably one of the
biggest successes to be able to do that. I consider Alish a friend of mine. All of them.
We support each other. And for me, that's a huge success because we're able to get rid
of walls and move something we're all passionate about forward.
You said that one of the most important things was trust. And that's not something we talk
about too often. But I think you're right. That is something that's essential in working
together. And I've been lucky enough to sort of virtually meet some of the people I think
that you're talking about. We mentioned Alish Paul and I have also spoken with Nuritzi Sanchez.
We've had a similar conversation. She's pretty amazing. Heather Ellsworth as well is really
great. And all of these people come from some different backgrounds. And all of that's coming
together into some, I guess, really cool community collaborations, right? And are there a few
others you'd like to mention just to give a shout out?
I think the people working around the Flatpack, the Flat Hub, the GNOME and KDE communities
have been working together. We're building a foundational store for both GNOME and KDE
apps or any other apps out there. I think that's another great place that people are
working on. The Flatpack, I don't know everyone around it. I know that that's a collaboration.
But there are a couple in the Chaos project that we're working on. And this is around
metrics, right? And community metrics for our communities. Because working on our projects
is a little different than, let's say, a corporate-sponsored project because we deal with the public. And
as I was telling you before by Reddit, we have a class of problems that corporate projects
don't have, right? Because we deal with tribalism in every part. I can't speak for KDE, but
for GNOME, it appears in bug reports, feature requests, forums. It's omnipresent for us.
It sounds like an omnipresence of some negativity, right? Is that what you're referring to?
Absolutely. And also positive things too. It's just that when you're building the interface
for your hardware and something changes, it's a very emotional experience for some technologists.
Because they put so much into their workflow. It's the perfect workflow. And when something
changes, it can create rage, right? So I understand where it comes from, but abusing the project
is not a great look. Generally doesn't give the results you're looking for anyways, right?
So that's not really a sound approach. Right. Exactly. But we're building another committee
with Georg Link and Nuritzy as well and Neo from the KDE project and myself. So for the
foundational members for that group. And this is again another way to get out of our silos
and be able to show through metrics what our community is doing, how they're doing, find
out the health of our community and be able to figure, find ways to improve our relationships
with the community at large by a more data-driven approach.
Sounds fascinating and sounds like that work is really important. The more I'm getting
to have conversations with people who are all over different parts of what is our open
source software and communities, the more I'm realizing that, like you're saying, community
building and those non-developer skills are actually some of the more important things
for the longevity of some of these projects. And I mean, it sounds in many ways like you've
dedicated most of your, well, can I say most of your life at this point to making a difference
here? Certainly. You know, I was never a big coder.
So I naturally fit into this space that works for me. And I enjoy building relationships
or connecting people or any of those things. Those are things that really drives me as
a person.
What was it then, you know, in the beginning that kind of attracted you to open source
software in the first place and Linux and GNOME specifically? You know, what has kind
of grabbed you and kept you here?
So I joined GNOME because I started off just like that kind of tribalness. At the time
we started, Linux was coming up. Linux was out there being installed by systems administrators
in secret. It was like a little revolution that was happening. And these desktop projects
started coming up because they were very aspirational. We wanted to build a desktop. And when KD
came out, that was exciting. GNOME came followed after that. I, for some reason, was attracted
more to the GNOME project than I was with the KDE project. And I think part of that
was because I like C more than I like C++. I know it's really a technologist thing, but
that was kind of one of the reasons.
It's part of the preference spectrum, right? So that makes sense to me.
It's sort of funny because I think our prejudice against C++ and the project is what kind of
binds us together. The great thing about GNOME is it's always reinventing itself in some
shape or form, right? The first version of GNOME was terrible software engineering. Maybe
on a blue moon on a certain day, you can get the whole thing to compile. It was full of
bugs and features. And then the next iteration was the real transformational change, right?
We added accessibility. We learned a lot of things. We realized that software engineering
was a really important part and put a lot of controls in, which of course made a lot
of our public upset. And so this whole meme about features being removed actually came
from that era.
Then you get down to the third iteration, and now we've separated the user experience
from the platform, and then we added designers, right? So primarily in the past, it has always
been coders working on it. Now you've changed the workload to add designers. So I find all
of this fascinating because how we work together and trying to build something that works is
just fascinating.
There are still some more challenges out there that kind of keep being there because the
interesting bit now is in order to continue to grow, you actually have to build your non-technical
base up, right? Because scalability is an issue. There are lots of projects that have
high complexity, but they need people to deal with the bugs, triage the bugs, maintain order
in the threads that are out there, and so forth.
I think a lot of that non-technical contributions kind of works because we moved to a much more
modern platform like GitLab, right? So I think it allows for that kind of growth of non-technical
contributors. It's just a continual set of changes as we keep going.
It sounds in many ways like a maturing and sort of natural, organic growth in directions
that are needed, you know, not throwing away the technical, but just sort of supporting
it with all of these aspects around it that sort of create the more human connection,
perhaps.
That's right. And we want to keep evolving because there's just a lot of great stuff
that we need to take advantage of. And I know as a project, I would like to see GNOME work
closely with as many other projects as well, because there's a lot of things we can learn
from each other.
Are you seeing the same kind of energy and hope from other projects in the direction
of GNOME, for instance? Like I know you're describing that sort of hope to reach out
and collaborate, but are you seeing that the other way as well?
I don't know, but when I am interfacing with them, they definitely feel excited about it.
That's a good sign.
I get around more than a lot of the other project members.
And by get around, you mean sort of traveling to other conferences, many conferences and
meeting people and sort of building sort of one to one relationships. Is that what you're
referring to?
Yes, I'm a little bit more exposed to my work, right? Or my work history. I've spent a lot
of time in other ecosystems, like the Linux Foundation ecosystems, corporate open source,
a lot of those things. So I have networks outside of the desktop space, meaning I get
to see various perception role things by watching what other projects do. And I work with a
lot of those people too, in the open source program offices, things like that.
That sounds like a really well rounded perspective.
Yes, I suppose so. Yeah. It's interesting how ecosystem or project works. And I learned
a lot of things and how their contributions happen, how they accept contributions, how
they work and their bugs, which helps me look in and see how, you know, can we adapt some
of those or maybe the other way around? What can we adapt from GNOME or from KDE or from
the desktop projects? So it gives me an opportunity to be an interface that's bidirectional.
It feels almost like a communication of best practices in some way that might, you know,
and you can pick and choose which might fit for a certain purpose, which, yeah, that sounds
really useful, actually, instead of reinventing sort of the processes continuously and in
these little silos, like you were referring to previously.
Right, right. You know, like the Kubernetes community has some really interesting methodology
to use labels for contributions that it looks very interesting to me as an example.
I don't know about that. Can you walk us through that just a little bit?
They have a very automated setup. You know, you put a contribution, there's a series of
steps that happen that is ushered in through various labels that tells you what state the
contribution is at and if you've signed a CLA and, you know, all these other things,
like when a new contribution comes in. And so there's definitely a flow that is, in my
mind, deterministic, right? And it's which I think we lack in Gnome.
Now, again, going back, when you're contributing to Kubernetes, it is a very fixed set of problems.
It's not like in a desktop space where you're essentially looking at infinite ways to do
work, right? Infinite work was because, you know, people always come up with ways to use
their computer as a tool. But Kubernetes has a very fixed set of things that it's used
for. Whereas when you're dealing with humans on our side, it's infinite, right? It's whatever
you come up with.
Sounds like humans are becoming, they are the main challenge and they're always going
to be challenging and there's nothing you can do about that, right?
They will always be challenging. Yeah. And that's one of the most interesting problems
that we have because the tribalism, you get the conspiracy theories, which, you know,
Kubernetes doesn't have that, you know.
That's funny. And yet it can also be beautiful work, right? Like there's lots to celebrate
about the human connection to the work that we do via our computers and all of that. So
I could see why that would keep you interested for sure.
It's never a dull day.
Can you tell me a little bit about where you're working now and what you're doing sort of
on your day-to-day basis professionally?
I work for a company called ITU Renew. They are in circular data centers and my specific
role is a principal ecosystems engineer. And we work primarily with the open compute project.
So I interface with parts of the open compute project, parts of Kubernetes, parts of open
source firmware project. Because ITU Renew is a hardware company and so we use all these
open tools to create an open block, right? So part of open infrastructure.
It sounds like there are many connections there too. You said, you know, parts of this
community, parts of that community. So it sounds like, again, you're a link between
many of those to try to create some neat synergies.
And a lot of times I'm not the subject matter expert. But I'm in news meetings and I surprise
myself from speaking up from time to time. Even though I may not know some of those things.
But you know, there's definitely contributions that I try to make when possible. But it's
challenging to be able to switch from, let's say, something on networking to storage or
to firmware and keep watch on what's happening and keep my company's interests in mind and
my employer's interests in mind.
Yeah, of course. What a balance. Shree, if you wanted to send something out to the community,
a sort of an ask, maybe something you'd like them to try, something you would like us to
think about or to go see, what would be something you would send out there?
I would encourage others to try to build an app application and sort of analyze what is
hard, what is easy, how do you distribute it, that kind of things. And maybe do a write-up
because I think those are interesting things to know what the pain points are. In the aggregate,
having that kind of information is good for us if we want, as a community, to evolve into
something better that can compete with the other operating systems, non-Linux operating
systems.
That sounds like that would necessarily build some empathy as well for the work that goes
on behind most of this software in our open source community and how that works. And I
think maybe another interesting aspect would be to challenge ourselves to shift our thinking
paradigm into the app's perspective instead of the desktop perspective. Would you agree?
The desktop is sort of a... It doesn't have the power it used to have because in this
day and age of web apps, it almost seems like the desktop is the proof of this. And so when
people don't think the desktop is important, they don't believe that it is of interest.
But if we rebrand it as apps or applications, then everybody understands that applications
are important. And by separating an applications community on Linux, it's a much easier ask.
The thing that people should understand is the apps community build an incredible amount
of technology that people use every day. When I was at a Linux Foundation conference, I
would take the time to go through the various booths and I would ask, oh, have you heard
of Gnome or any of these others? And they said no. And so I would bring up Geno with
D-Bus. And they would say yes. They said, well, the apps community came up with D-Bus.
The members of their community was the one who built system D. The very technology that
we build came because we had to find ways to propagate hardware events to the user in
some fashion. And so these are all foundations for all the other technologies that people
are using elsewhere.
That's fascinating. I'm sure you thank you for joining me. If people wanted to get in
contact with you to say hi or to sort of share some thoughts with you, where would they best
contact you?
You can hit me on Twitter. It's S. Ramakrishna. Or you can email me at Sri at Gnome.org.
That sounds great. Sri, thank you so much for your time and really appreciate our chat.
It's been great.

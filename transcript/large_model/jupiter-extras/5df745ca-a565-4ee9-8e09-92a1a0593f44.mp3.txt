Hello, everyone. Welcome to Brunch with Brent. Joining me today is Elish Poli-Gonzalez. Elish,
how are you doing?
Good, good. Very good. How are you?
I'm doing great. Yeah, it's good to be connected with you. You've got a pretty neat spot. Some
people might know you as the president of the board of directors at KDE, which is kind
of neat. How does it feel to have had that position for, what, since September, right?
Yeah, since September. Well, it's good. I've been in this board of directors for five years
and a half now, five years when I became a president. Well, I was vice president before.
In actual terms of the things I do, it hasn't really changed that much. Some people do see
me differently, which feels a bit weird, but life goes on and we keep going.
It's sort of interesting how titles can sometimes change the way we see people even though they're
necessarily the same person they were even a few months ago. You are clearly not new
to the board of directors. For those of us who aren't that familiar with how KDE and
the board of directors interfaces, what kind of things do you do there? How do you collaborate
with other people? How is that important to the KDE projects, for instance?
All right. I know it's not exactly what you asked, but let me give you the distance kind
of answer.
Great.
What is KDE? KDE started a long time ago as a desktop. It's not anymore. Nowadays, KDE
is a community with tons of people that develop a bunch of free software projects, right?
As such, KDE is a community and a community cannot do certain things like having money
or just charge for doing anything, right? At some point, somebody created a foundation
called the KDEV, which is the thing I am president of, right? I am not president of KDE in paper
and in practice, but I am the president of the KDEV, which is this legal organization
that is based in Germany around the KDE project. This organization deals with money and certain
resources that the association have. We try to do the best to support the project and
make sure that the free software gets developed as it should.
How do we work? Well, internally, the board, it's five people. We change every three years.
And some people will have some kind of preferences and they will take these tasks more seriously.
But in general, we try to spread the tasks internally. We try not to have a big hierarchy
inside of our small team anyways.
That's great. Yeah, it sounds like you really end up just playing on your strengths in that
collaboration. And thank you for the background there. I think when it comes to foundations,
at least I speak for myself, it's kind of new to me, learning how it all works and what
pieces are necessary and how they're organized. So that transparency is really fascinating
to me, really, I would say. You also have done a lot of development for KDE. You started
quite a while ago. When did you start developing for KDE? And I imagine that has clearly led
to where you are now.
Actually, I started in KDE before I started in KDE, because I started developing an application.
Well, I don't know, it was 2004 or five, which was or is still K algebra, which is math application
and calculator. I started developing it on my own. And at some point, I was reached out
by KDEedu, the education program within KDE. And they said, have you considered putting
the application in here? And I put it in, right? Like my first commit was the whole
application at once.
Can I just ask, what was it about KDE back then that was curious to you? Because you
were developing this application for yourself, as far as I understand. So how did they sort
of come across it? And how did that come about? I just wonder if that might be a helpful story
or anecdote for someone who might have a good idea and might want to share it with the project.
Well, back then, I was getting interested in computer science. I was just starting university.
And I wanted to play around with certain technologies. So I knew I wanted to do this project. Actually,
I had started to think about it a little bit in the past. In the first versions, it even
resembled a lot another application I had been using when I was in high school. And
there's a lot of topics that are interesting when developing such an application like a
calculator that were interesting to me, like how to write a parser and how to do the plotting
properly and the 3D bits. It was more of a, I know that this was something useful to me
at some point. And then it allowed me to test myself a little bit because, well, I was learning
a lot of things because, well, that's what you do. And I needed to put my learnings into
something. And actually, it shaped a lot how I learned and actually how I ended up deriving
professionally over time.
Do you find then that for you, learning has to be tied to a project? Applying that knowledge
is the way that it integrates for you with the most depth?
There's definitely a component. I'm not going to say it's the only way I can learn, but
Right, of course. But if you had a preference, maybe. The reason I ask is what fascinates
me is sort of how we all get to the places where we are. And I feel like if we discover
or chase the means by which we learn best, you know, sometimes that's collaboratively,
sometimes that's independently, then sometimes we can get to places that are actually really
great in making our strengths possible. So it sounds like in many ways you found that.
Yeah, for sure. Also, a big interesting part about software development is that you can
do badly and the computer is going to tell you. So you don't have to disappoint anyone.
You can see you did wrong and then do it differently. And in the end, if you get the right result,
it might not be through the correct set of steps, but it's still progress to some extent.
And you get to be loved on that.
So there's this feedback loop, this quick feedback loop that you get to sort of iterate
on your ideas and your projects in a way maybe that isn't available to other professions.
Yeah, definitely. It's something that was crucial to me in this approach. And even now
I look at the code that I started to produce back then and I'm not going to say I'm ashamed
of it, but it wasn't good.
It was of a past Elish, right? This is present Elish.
Yeah. Everything I do is from a past Elish.
Right. Fair enough.
But this specific past Elish wasn't that good. But that's fine, right? And I don't know.
Didn't hurt anyone.
No. And that can still be valuable work, even though it may not be at the same caliber that
you're at now.
It has been. I've been having users since the very beginnings. And it's been always
people who have been using the project for some things or others. And they have been
reasonably happy. So, well, there's that, right?
That's important. How have you seen those users change in the last 10 years or so? Does
it feel like the community has shifted or changed or grown in some ways?
Well, in the end, when you get users, you get users for the things you have, right?
They might ask you, I would like to have this thing or this other thing. But in the end,
what they reach out to you about is about the present. So they don't really change that
much. In general, when a user reaches out to you, the process is, hey, I've been using
this project. It's kind of nice, I guess. But, and then they explain you the problem.
That's by email. That's when they reach you out by email. When they reach you out by backtracking
system or chat, they remove the pleasantries and they go directly to the problem.
But yeah, it's hard to tell if people change. I mean, people have definitely changed, right?
Also the competing alternatives to what I've been doing have also exploded in several ways.
So that also has an impact.
Do you find that user feedback to be exhausting in some ways? Because it sounds like a never-ending
flow of people suggesting things are wrong. I mean, they often have the right intentions
in mind of trying to improve and to help find bugs and things like that.
Actually it's one of the hot topics in free software, and it has been for years.
And essential, really.
In free software, we're very open and we're very exposed as developers to what people
want and to their demands. And actually, I would say it's one of the selling points of
free software, right? You can talk to people or you can get someone and convince them to
fix something and they do it, right? So there's no barrier between user and the creation.
But on the other hand, you need to find ways to shield yourself sometimes because, well,
some people have fun being hurtful. I mean, I've been around for a long time, so it means
that it hasn't broken me, but I know many people who have gotten broken by that. And
it's really such part of the whole process, right?
Because it potentially means that we lose good people.
Well, not potentially. Like, literally, it means.
Right. Do you have any advice either for the person on the development side, you know,
the receiving side, or for the people on the giving side, you know, that are reaching out
with some of these bugs and things?
Be nice would be definitely a number one thing, right? Or be empathetic at least. Remember
that you're talking to people. I guess that in the, I would say normal world, we're used
to like, so many layers of communication that you have to try to make an impact so that
your demands go through hierarchy or several steps. And in free software, that is not the
case, right? And you like see people reporting bugs or on mailing lists, demanding people
to work for them because, and this is hurtful, not being hurtful, being positive, being engaging,
explaining why something is a problem for you, and how while it's a problem for you,
like the wall is not going to end. It's always a good way to contextualize this, this kind
of problematic, I would say.
Yeah, I think two things that stood out there for me in that advice you just gave was empathy
was the first one, because I've encountered very few situations where empathy is not a
helpful trait. And also just being collaborative, you know, if you discover a problem, or you
would like something fixed or integrated, I think it sounds like the collaborative approach,
if the software developer is open to that, sounds really beneficial for everyone. As
the person who found the bug, you might get some insight into what the project is dealing
with or where that sits as a priority. And as the developer, you might get someone who
can really make a difference and perhaps a future contributor to.
Every project I've worked on, I've had a couple of, well, I would say, maybe power users or
well, people who will go all the way to help you solve the bugs. And like when a bug report
is properly reported, it's so much easier and faster to solve, right? And this is something
we need to remind ourselves. It's not about like being the loudest, but also as a developer,
be it free software or not, that doesn't matter. You have an amount of time that you're going
to have to spend into solving a problem. If this is less, it's more likely that you will
be able to do it, right?
So there's a big difference between a bug report that says, my application exploded
and a bug report that says, when I do exactly these steps, my application explodes, or I
get this error message, or here's a bug trace with proper debug symbols or not. And obviously,
there's a learning curve for the reporter, and we cannot expect everyone to go all the
way there, because we all have other things to do than reporting bugs. But if you really
care about something and can spend some time into solving it, I think that it's a nice
idea to do so. Because you're not like solving it only for yourself, which you are, but you're
solving it for everyone. And actually, the whole solving it for everyone is one of the
nice things about life, right?
Yeah, one of the strengths of open source, I think, and maybe the reason that many of
us are part of it is that it feels like a collective good that we're doing for the world.
Well, it doesn't feel it. It actually is, right?
There, you catch me again.
Part of the problem that a big part of the world doesn't want to make use of it. But
when they do, they're going to love it.
Yeah, I came across some stats. And of course, there are many sources of these kind of things.
But KD itself, which that includes a lot of different pieces of software. But I think
they're suggesting plasma in this case, like as far as I read, being used heavily in Turkey
and the Turkish government, everywhere from their armed forces, Ministry of Foreign Affairs
and National Defense, the police, it has been used at CERN quite a bit. In Germany, I believe
they have something like 11,000 systems running it used in a NASA Mars mission, etc, etc.
And that doesn't mention the desktop users either. But how does it feel for you to be
kind of have your thumb on or be touching so many users with the work that you're doing?
Well, one of the complex things about how we've been conducting free software, and actually,
it's been one of the turning points of KD is actually the whole defining a vision and
like who are you making your your software for? In general, I haven't been thinking about
like, what will happen when this change happens in NASA, or I don't know, CERN, etc, right?
Like, do you think how do I fix this problem? And then when you talk to the different organizations,
as a president or a representative of the community, well, then you realize that that
this, this software is actually being used in all of these places. I mean, actually,
most of the time, we don't even know that that this is happening.
Of course, one of the challenges really.
Yeah, we only learn through chance, right? Like these announcements that like, they show
a screenshot of somebody working and like, you see, oh, they're using plasma, or they're
using Linux, or they're using Krita, right? It's more anecdotal in practice than actually
it should be, right? I would like to be talking more to these organizations and learning more
about the problems they had. But communication is something that, well, is expensive to humanity,
I guess. And it shows. I remember having long conversations about that with somebody from
Brazil. Like, I think it was around 2010, there was a big deployment of KD software
in Brazil. Well, I was the maintainer, actually, still am, of KD Edu. And I was telling her,
well, how is it that you have so many millions of people running our software, running our
applications, but then we don't get back reports for this software, right? Like, is everything
we make perfect? And she didn't say yes. She said, well, teachers will probably not know
how to report properly, or their English might not be great. I mean, there were reasons why
this didn't happen, right? But in practice, we had, well, millions of users over there.
I don't know, we still have. But the conclusions that they created didn't really reach out
to humanity, which is a bit sad in this regard. But then you realize how it makes a huge difference
when the involved people understand free software properly. We hear very often about how organizations
might be adopting free software or open source solutions. But when there's randomly people
who have been involved in the movement, in the communities, and have the know-how, the
experience will flow much more, well, beautifully for both parts. And I think that this is really
nice when it happens.
Yeah, the big question, I suppose, is how do you encourage it to happen more? I don't
know what that answer is.
I mean, I know that KD has a problem, and probably the Linux desktop does. But how do
you make sure that people can stay around it and be professional about it? The money
flow is a bit spotty and not very clear. We don't have very clear business models either.
And it does have its advantages. We're not really governed by evil corporations or, well,
good corporations. We're not just led by corporations. But on the other hand, there's
people who, well, to live, they have to work on something else. And, well, that's not ideal,
right?
Yeah, I mean, that is the challenge, isn't it? How do you keep the good people around
or allow them to work on the things that they actually feel really empowered to be working
on, like free software? For many of us, we have done a lot just through our hearts, right?
So how do you keep those people around when they need to feed their families and pay the
rent and all of that?
Some of us are lucky enough to be able to do it. Like this is my case. So I feel a bit
bad talking about this problematic when I don't have this problem. While this is a problem,
it also has the advantage that you have when all these big super corporations, because
there's super good free software developers around, right? Like a lot of the best developers
that you will find in the market, well, did open source at some point because it's a great
way to become a good professional. So you will have really senior people in the biggest
corporations that have an open source background and they know how it works. And, well, this
links back a bit with what we were discussing before.
You know, those end up being proponents of free software in some of those larger corporations
around the world. So it sounds like a benefit as well in some ways.
Yeah, it's a matter of people wanting to keeping the flame alive, right?
Yeah, right. It's always a balance. You did mention that you're lucky enough to be sponsored
to be working on KDE full time. Can you talk about that a little bit?
I had been working when I was at university doing free software stuff. I did some contracting,
I did Google Summer of Code, which was nice. But when I was finishing university and I
was doing my master's thesis, I kind of wanted to continue doing it, but I didn't really
know where to look at. And what happened back then was that I saw a tweet, someone saying,
I am looking for KDE developers, contact me. And I did. It was by who nowadays is my boss.
But well, nobody really knew them back then. I actually was the first employee in Blue
Systems and it was all very weird and spotty. But I came through with it because I had to
look for a job anyway. I actually was looking already. I was, I had to like start, I was
finishing university in a month. So I didn't really have that much margin or I didn't want
to give me that much margin anyway. So I said, hi, we had a conversation on an IRC channel.
It seemed to work. I did the first project and then we started creating more things and
the team started growing and it was less weird and spotty and it was more like, OK, we're
doing KDE now, which was a very good thing because we hadn't had that many businesses
back then caring about certain parts of our code base. And we definitely had the opportunity
of doing a lot of really cool stuff and we still do.
That's great. And so originally for Blue Systems that you're talking about, what was their
incentive to increase or at least sponsor someone to work on KDE software? Because that
doesn't seem necessarily like the standard approach. So why was that important to them
and why is it still important?
My boss had, has a distribution called Netrunner Linux and he wanted to improve the GTK application
integration. That was my first assignment, actually. He knew he would want more over
time, but that was the first thing we discussed at least. And he had the money to hire me.
So I guess that all of us, if we had like half a million budget every year to get people
to do stuff for us, we would get to be creative in our own ways.
Yeah, you get all your bugs solved pretty quickly if you had that kind of incentive,
let's call it. But that is a really nice way for people to encourage some creativity in
work and to encourage some work on open source software. If they have a need is to sponsor
that work instead of just, for instance, like we were talking about earlier, just sending
a bug tracker out there and hoping for the best. It sounds like sponsoring a specific
project to do a specific something that would help everybody seems like quite the gift really.
I myself feel very lucky that we, that I had or, and we had these, this opportunity and
still do. It's a touchy topic. It's, it's complex because there's a lot of, well, discussions
that come to the table. And I think that one of the best things that BlueSystem has, BlueSystems
has been able to, to push for is that we have been doing a lot of work to just improve Plasma,
improve KD in many ways, but like with, not with a very hands-on kind of way, but just
actually making it better, right. And making it better for everyone. And actually like
a lot of these developments that we did, for example, to improve that runner Linux or some
issues that have been arranged in the past, they have had an impact on, well, on certain
developers, right. Or, or on developments or in, in, in NASA or wherever, right.
A little bit everywhere, but you don't always know where. Can I talk to you a little bit
about conferences? I know maybe that's a touchy subject these days too, but you've been involved
in a few conferences, clearly as an attendee, but also a little bit on the back end. One
of those I believe is the Linux App Summit. You've had your, your thumb in there. You've
been collaborating with some neat people over the years there. Can you tell us a bit about
that?
Yeah, for sure. I was to the Libre App Summit that Nomorganized in Denver a couple of years
ago. Actually, I had started talking to Sri about it for the year earlier where they had
the first one.
Just to mention quickly, that Sri Ramakrishna of Gnome fame. Go on.
It didn't happen in the end because logistics more than better reasons. But the year after
I went there, I talked a lot with him, with Noritzi. I believe, and I am not the only
one to believe that Linux has a lot of value in the end user space to strengthen this value.
You need to make sure that people can join in and collaborate and do it in a platform
level. They don't need to respond to anyone. We can tell everyone, just join KDE and do
your thing. But I don't know, Spotify is not going to do that or Firefox, right? They want
to do their thing and we need to actually be able to work together to offer something
the ones who we are doing it.
So we decided to work more closely and last year we did it together with Gnome. We actually
changed from Libre App Summit to Linux App Summit, which I think it's an interesting
development. In the end, it was a lot about working together. In this case, I also ended
up being the organizer because I've been also doing Barcelona for software, which is the
organization that ended up organizing the event locally, so to speak. So that was my
involvement over there as well, besides doing a bunch of stuff in the organization team.
So it sounds like your previous connections with the group in Barcelona helped with making
this possible and is continuing to help with collaborations throughout, which sounds really
positive, really exciting, and really quite important too.
We're looking into doing 2020 right now. Like you said, it's a bit delicate.
A bit delicate. That's a nice way to put it.
Yeah. But I think that there's a nice chance of doing it properly. Yeah, I'm excited.
Do you feel like, and I know it's early days and you may not know, but I would imagine
that means looking at how to do the conference a little bit differently, maybe with some
different technologies and reaching some different people to make it possible?
We're going to definitely look into the different alternatives. I can say we have a plan A and
a plan B. So we will do our best. I think that there's a lot of value in putting people
together physically. I mean, yeah, they can share viruses then. We don't want to put people
at risk. If we feel that this is the case, then we won't.
And actually, if you think about it a little bit, it's kind of what separates some projects
from others, right? When you get to talk to people, when you get to discuss things over
a meal or a drink, the connection, the interaction that you have is at a different level. And
I think that it's essential to be able to enforce it. We've been doing it at SKD through
our conference, which is called Academy. And every community is doing that and have been
doing it for decades, right? And NumHas, Guadaic, Linux Foundation has a ton of events, Firefox,
Docker, everyone. And it's about bringing people together and making sure that they
humanize their teammates when they do so, which is related to what we were discussing
earlier about empathizing with who you report your problems to. And when working in a community,
well, you have this kind of problem, but 10 times bigger because it's not about somebody
who just had the idea that the problem is solving, but like you're working with somebody
and you need to know what he feels, where he stands in life. And doing it in person
is a whole different deal.
You mentioned Naritzi, who I had a conversation with here on Brunch with Brent, I guess a
few weeks ago. And she mentioned the same thing of how the face-to-face is essential
in the open source communities and anywhere really. And I think you said it really well
when you mentioned humanizing people. I think often maybe that's one side effect of the
beauty that is the internet, which is that sometimes we forget there's a person on the
other side of any message. And so bringing empathy to that and remembering that sounds
really important, but it never really gets communicated in the same way as when you meet
someone in person. So I imagine that will be a continuous challenge for all of us this
year. But hopefully it doesn't impact too much and we can get back to it somehow.
We will have to find alternatives. Ask AD, we have, for example, already canceled a number
of sprints. One of the big things that Ask AD we do is sponsor meeting of the different
teams so that they can discuss, like we said in person, different, more specific topics
that while Academy, they will probably not have the time or even the attention to be
able to look into them, but they're still important, right? And we need to find ways
so that these teams can work together and do things together that they couldn't because,
well, the current state of things because coronavirus. So it's not to disregard the
alternatives and we will have to invest in them. And actually there's a lot to win, like
not only because of infections, but well, for example, for climate, right? Like it's
not very healthy to be flying people all around the world, well, yearly or monthly, right?
Maybe we can do better there. I don't know.
Hmm. So it allows us in a way to pause and look at what we were doing and see the benefits
of it, but also the challenges sounds like there's an opportunity here.
Telecommunication is inherently rather cold. Like if we were having this conversation we're
having right now in texts, it would be probably, well, more boring.
Very different.
And it's still telematic, right? But for example, I have this friend, like he has been doing
KD since long time and everybody, when he meets him for the first time, they say, you're
much nicer than I expected you to be, right? And he's a super nice person. Well, emails,
chats can be cold over time. And especially when people are trying to like do good and
sometimes you have to say no to people, right? And to tell them this thing you really wanted
to do and you were excited about and you even spend some hours this, this, no, right?
Yeah, I find, you know, one thing that's been suggested is to increase the number of, and
Heather, who I had a chat with as well, who's a friend of yours, Heather Ellsworth, she
mentioned increasing the number of coffee chats that she does. And those are kind of
the at a distance voice or video chats you can do with people around the world that you
know. And I know that that seems inefficient, you know, voice and chatting in real time
is sort of inefficient. If you look at the flow of information compared to text, for
instance, because you both have to be in the same place at the same time. And some people,
you know, maybe conversations just, just take a little longer, but I really feel, and that's
sort of the crux of these conversations that we're recording right now, but they're so
valuable and, and we're not looking for purely just information transfer. There's connection,
there is empathy that gets improved. There's like, you end up diving into topics that you
otherwise never would have imagined you'd connect on. So I would encourage everyone
to see if you can do that, reach out to some people and connect via voice, you know, where
there's so much software to do it. So that, that seems like we could all benefit from
that.
I agree. I completely agree.
Can I ask you a question if you have anything that you would like to send out to the community?
Maybe an ask of the community, something you'd like them to try or go see something to think
about?
In general, I would recommend everyone to think about, especially when thinking about
free software, where they fit and try to see if they are doing what they wanted to do,
right? Like if what you want to do is for example, be a user, are you treating the like
the developers in the bug reports, like, like you expected? What do you think that the others
will be getting from your interaction from them? Or should they? Something that happens
often is users knowing that their problems are important, they assume that everybody
knows that the problem is happening, right? But that's always not the case. So if you
want this problem solved, well, don't get the anger bottled up inside of yourself and
well, get it out with control and a smile on your face or fingertips. If your position
in the community, for example, is to do outreach, for example, well, be mindful of what your
reach actually is. Something I found very interesting from my involvement, for example,
in personal software is that we have been doing a lot of vertical, so to speak, outreach,
like in KDE, we do a lot of stuff like worldwide, right? And Nome does and Linux Foundation
does and LibreOffice. But at the local level, it's like a whole different dimension and
a lot of the things we do, while it might be reaching, well, thousands of people, it
doesn't reach the people locally because, well, thousands actually in the world scale
is tiny. So I think that thinking in terms of what is the local impact of free software,
it's interesting and it's something that all of us, we can do a little bit more of. I have
personally looked at this as a two-dimension kind of thing. It's important to be able to
create great products that are free software, but then you also need to go locally to people
and see what they need and offer it to them. And actually, that's why we ended up creating
a personal office software. And I believe that every city should have their own city
free software, right? Because each city council, how are you going to reach each, well, company
doing software?
Yeah. Tell me a little bit more about Barcelona Free Software. We didn't quite touch on it
earlier, but it sounds like it's a nice local community that is really beneficial for you.
A few years ago, we started with actually KDE Spain. I started in KDE Spain when I was
just starting in KDE because somebody said, we're creating this thing. Are you in? And
I said, sure. I actually was not really sure what I was getting into.
Those are the best things.
It was quite interesting to think of the organizational problems that free software has, but at a
different scale. I was there on the board for eight years. I was the president for four.
And then I went to the KDEV, which I had the impression that it would feel more like I'm
doing the same, but at a higher level, if you wish. And then we had quite a bit of people
from KDE Spain doing things in Barcelona. So we said, how about we do something like
KDE Barcelona, which felt a bit wrong and oddly specific. So yeah, we said, let's do
Barcelona Free Software. Let's talk to the people. We knew that people had been doing
free software in my country, in Catalonia at large, if you want, for more since forever.
But we didn't have these personal humanized interaction with them. We knew where to find
them, that there are different organizations. But it doesn't make a lot of sense that I
had been doing free software for 10 years and people around us didn't know me, didn't
know us, or that it was happening. So we started doing a monthly meetup, which we've been doing
since with different projects. Actually, one would think, well, projects are going to finish
one day or another, but they really don't. They have a to-do list of 20 possible talks
that we could be doing, and it doesn't really seem to end. And it does give me some very
interesting other perspective of free software. How do all these really supposedly great advantages
that we're putting on the table affect the people? We did have very open source prone
government in Barcelona, specifically in the city council. And we did get to talk to quite
a bit of politicians. And we got to hear the things that we wanted to hear, and then we
got to not hear the things we wanted to hear, which was a bit disappointing in the end.
But yeah, we were there, and we did our best.
But it sounds like those are the efforts to try to share free and open source software
that you can only do on the ground talking to people. If you're trying to reach counselors
and things via the internet, it's definitely not as powerful. And you don't get that feedback
as well. So yeah, that sounds really important.
The interesting thing is to actually end up talking to the engineer in the different organizations,
right? You can talk to the politician, and he will talk to you about commitments and
about how it's impossible to do or not, or even they want to do it. For example, in the
city council case, what I got in the end was the engineers telling me, oh, the politicians,
they are keeping us from doing this whole Linux thing, but it's awesome. And on the
other hand, I was talking to politicians.
So I was talking to the engineers at SKD because they were using Plasma on their systems. And
I found one of the engineers that reported about report, and I sent him an email, and
I went all the way as, well, the vice president back then. But I was also the coordinator
of personal office software, and I was in touch with the politicians. And the politicians
were telling me, oh, yeah, the engineers, I mean, we tell them to go Linux, but they
give us all of these problems that it was frustrating because they were blaming each
other.
And the only conclusion was that, well, nobody did anything. Or I mean, they did something
things, just not the things I hoped for.
That sounds like a communication problem, right?
Communication is expensive, like you said.
Well, Aleš, thank you so much for joining me. If people wanted to get in contact with
you, where would they reach you?
You can reach me in my email, for example. It's Aleš Paul. I would say you write it
as you hear it, but if you're an English speaker, that doesn't apply.
Yes.
I guess you can put it in the description or something.
Yeah, it's definitely in the show notes, for sure. We'll share it there.
My name and my family name, at kd.org. It's the same on Twitter, on, I don't know, Facebook,
LinkedIn. I don't really use these that much anymore, but they're there.
Well, thank you so much for joining me. I really appreciated this conversation.
Yeah, thank you for having me and for the talk. It was really nice.
Yeah, let's chat again soon.

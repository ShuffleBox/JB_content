1
00:00:00,000 --> 00:00:01,840
Well, hello, Neil. How are you?

2
00:00:01,840 --> 00:00:04,560
Oh, I'm doing fantastic. How about you, Chris?

3
00:00:04,560 --> 00:00:08,720
Oh, I'm quite good. You guys out there might recognize Neil's voice from Linux Unplugged.

4
00:00:08,720 --> 00:00:13,040
He's often joining in and chiming on many subjects because Neil is involved in many projects out

5
00:00:13,040 --> 00:00:19,520
there. He closely follows the news as well. And often you'll chime in with a fedora fact for us.

6
00:00:19,520 --> 00:00:24,800
So when I saw this news of Peigu, I think you'd sent me the first link I'd ever seen about it.

7
00:00:24,800 --> 00:00:29,280
You were the obvious guy to talk to him. Is it Peigu? And what is it?

8
00:00:29,280 --> 00:00:34,640
I can't say it completely correctly because I'm not a French speaker, but I go with Peigu.

9
00:00:34,640 --> 00:00:35,440
What?

10
00:00:35,440 --> 00:00:38,400
Yeah. Pierre-Yves Chabon, who's the guy who created it,

11
00:00:38,400 --> 00:00:41,600
seems to not cringe when I say it that way. So I call that a win.

12
00:00:42,240 --> 00:00:44,160
I don't think that's how you say it.

13
00:00:46,240 --> 00:00:47,680
But I'm not the expert.

14
00:00:47,680 --> 00:00:49,360
I'm sure there's a recording somewhere that...

15
00:00:50,320 --> 00:00:52,480
Yeah. You know what? We'll play it right now.

16
00:00:52,480 --> 00:00:55,760
Hello, I'm Peigu and I'm pronounced Peigu as Peigu.

17
00:00:55,760 --> 00:01:04,400
Kind of sounds like Peigu. Oh, open source. Anyways, what actually really got my attention

18
00:01:04,400 --> 00:01:09,920
wasn't the name, but it looked like maybe this would be sort of a self-hosted GitLab alternative.

19
00:01:09,920 --> 00:01:18,240
Yeah. So Peigu is very much in the realm of GitHub and GitLab and lighter weight

20
00:01:18,240 --> 00:01:24,400
alternatives like GitTea and GOGS, which are what we like to call forges, which are

21
00:01:24,400 --> 00:01:28,800
Git hosting servers that offer you the ability to self-service, setting up repositories,

22
00:01:28,800 --> 00:01:32,480
managing projects, accepting contributions, things like that.

23
00:01:33,520 --> 00:01:40,000
Peigu is a lightweight forge written in Python built on the PyGit2 library.

24
00:01:40,000 --> 00:01:44,160
If you're a little bit familiar about various things around the Git ecosystem,

25
00:01:44,160 --> 00:01:49,360
the common library people like to interact with Git repos with and integrating with

26
00:01:49,360 --> 00:01:53,200
other projects is LibGit2. PyGit2 is its Python binding.

27
00:01:53,200 --> 00:01:54,000
Okay.

28
00:01:54,000 --> 00:01:59,520
And so we use that for a lot of the features and functionality for operating on Git.

29
00:02:00,080 --> 00:02:03,120
You just dropped the wee bomb. Are you involved in the project?

30
00:02:03,120 --> 00:02:07,920
I'm a contributor to the project. I actually maintain the packages for a wide variety of

31
00:02:07,920 --> 00:02:11,920
distributions. I do a fair bit of testing and stuff like that. Like the last go around,

32
00:02:11,920 --> 00:02:18,880
my most significant contribution was helping bring PyGor to Python 3 back in 2018 for the 5.0 release.

33
00:02:18,880 --> 00:02:24,960
Oh, cool. That's nice. And I understand, too, that the Fedora project leverages it

34
00:02:24,960 --> 00:02:26,480
to some degree. Is that correct?

35
00:02:26,480 --> 00:02:32,160
Fedora and the CentOS project also actually have PyGor instances running

36
00:02:32,160 --> 00:02:35,920
for the Git servers that host all of our package sources.

37
00:02:36,800 --> 00:02:42,800
We also have PyGor I.O., which is a common, free, everyone-can-use Git forge.

38
00:02:42,800 --> 00:02:46,640
But a lot of the Fedora infrastructure projects have also moved there,

39
00:02:46,640 --> 00:02:52,080
as well as a lot of the Fedora organizational tracking project stuff.

40
00:02:52,080 --> 00:02:55,280
We used to run these on a track instance. They all moved to PyGor as well.

41
00:02:56,640 --> 00:03:02,400
And so we use it pretty heavily across the board. And it's really designed with free

42
00:03:02,400 --> 00:03:06,640
software and flexibility and things like that in mind.

43
00:03:07,200 --> 00:03:12,960
Now, what is the high-level advantage to something like this over GitLab that you would host yourself?

44
00:03:12,960 --> 00:03:18,080
The biggest advantage is that it's a very open data system.

45
00:03:19,280 --> 00:03:23,840
It has some features that could be the foundation of federated decentralized development.

46
00:03:25,120 --> 00:03:31,760
One of the core features is that all the project data, so the documentation that you store in there,

47
00:03:32,320 --> 00:03:38,080
the issues of the bugs and issues that you store in the issue tracker, the metadata for pull

48
00:03:38,080 --> 00:03:43,200
requests, those are actually all stored as Git repos associated with the Git repo of the code.

49
00:03:43,200 --> 00:03:49,360
So you can take that code and the issues and all that metadata, and you can clone it out of one

50
00:03:49,360 --> 00:03:53,840
PyGor instance and import it into another or transform it to go into another system

51
00:03:53,840 --> 00:03:58,320
or process it or so on. So, like, you can do all kinds of interesting things here.

52
00:03:58,320 --> 00:04:02,720
This is actually why PyGor is named the way it is. So it refers to a hermit crab.

53
00:04:02,720 --> 00:04:08,160
It's the French word for it, referring to the Latin name Pygoriidae. I cannot say that Latin

54
00:04:08,160 --> 00:04:11,840
word correctly, but that's fine. No, but I'm following you. It's a cute-looking crab.

55
00:04:11,840 --> 00:04:19,600
Right. So the hermit crab is a crab that tends to move from shell to shell. It finds a shell to go

56
00:04:19,600 --> 00:04:26,160
in and habitats on it. So the idea is that code and projects can move from host to host as needed.

57
00:04:26,160 --> 00:04:31,280
Aha. Clever. Okay. So that seems like a nice, clear differentiator,

58
00:04:31,280 --> 00:04:35,920
but there's sort of a network effect around GitHub and GitLab. So if I'm an open source

59
00:04:35,920 --> 00:04:39,920
project, I kind of want to leverage network effects. What's the answer to that here?

60
00:04:39,920 --> 00:04:44,720
Yeah, I don't have a terribly great answer here yet. I mean, one of the nice things

61
00:04:44,720 --> 00:04:50,480
that with the PyGor API and some of the underlying features there, it's actually possible for someone

62
00:04:50,480 --> 00:04:56,480
to say, write a bot that, like, listens on a GitHub or GitLab mirror of the project,

63
00:04:56,480 --> 00:05:00,560
and it can accept pull requests from there because another feature PyGor has that actually,

64
00:05:00,560 --> 00:05:05,440
as far as I know, no other forge has, is the ability to accept pull requests from another

65
00:05:05,440 --> 00:05:11,120
Git server that isn't PyGor. It just has to be a Git server. That's cool. If you have an account

66
00:05:11,120 --> 00:05:16,400
on the PyGor instance, you can, say, create pull requests and, say, create remote pull requests.

67
00:05:16,400 --> 00:05:21,040
And the only thing required is to point it to a public URL, give it the branch name,

68
00:05:21,040 --> 00:05:25,680
and give a description, and it'll create the pull request from that repo to this one.

69
00:05:25,680 --> 00:05:32,320
And that feature can actually be leveraged by the API to do things like, well, you could build a

70
00:05:32,320 --> 00:05:38,080
service bot that listens on GitHub or GitLab mirrors and actually cross-federate all of the

71
00:05:38,080 --> 00:05:44,800
communication and the handling of the pull request or merge request across Git servers.

72
00:05:44,800 --> 00:05:50,400
So if I understand the lineage correctly, it was a project that started back in 2016,

73
00:05:50,400 --> 00:05:54,400
and it came from an individual of the Fedora engineering team, right?

74
00:05:54,400 --> 00:05:59,840
It actually started a few years earlier. It started in 2014 as called ProGit,

75
00:05:59,840 --> 00:06:05,040
and it was renamed because, well, the name was taken for something else. And so

76
00:06:05,920 --> 00:06:10,400
Pierre came up with the clever name PyGor and renamed it accordingly. And in 2016,

77
00:06:10,400 --> 00:06:15,680
we had our 1.0 release, and that's when we put a Fedora Magazine article. And a year later,

78
00:06:15,680 --> 00:06:19,200
we switched over all the Git servers in Fedora to PyGor.

79
00:06:19,200 --> 00:06:20,080
Oh, so it's been years.

80
00:06:20,080 --> 00:06:25,520
Yeah. This project has existed since early 2014 in various forms. Yeah. So

81
00:06:27,200 --> 00:06:29,840
it's been long for a while. So six years now.

82
00:06:29,840 --> 00:06:36,560
So my question was going to be, since it came out of that kind of legacy, does it offer a solution

83
00:06:36,560 --> 00:06:41,200
for developers who like to work via mailing list and traditional tools like command line tools?

84
00:06:41,200 --> 00:06:43,040
Is there solutions there for it?

85
00:06:43,040 --> 00:06:46,640
You can actually do a lot of the workflow without ever interacting with the web interface.

86
00:06:46,640 --> 00:06:49,440
Ah. If you generate a token through the API

87
00:06:49,440 --> 00:06:54,320
or through the web interface, you can put it into one of the command line tools that are available.

88
00:06:54,320 --> 00:06:59,760
One of them that Pierre himself uses that he wrote called peg off, which is offline management of it.

89
00:06:59,760 --> 00:07:04,560
Since PyGor has all of the project data as Git repos, you can actually clone all of it locally,

90
00:07:04,560 --> 00:07:08,960
do all of your work offline, and then push it at the end. And it will actually,

91
00:07:09,840 --> 00:07:14,560
it'll update its state. And then from their perspective, you just did everything all at once.

92
00:07:14,560 --> 00:07:18,800
So you can actually do all kinds of interesting things like that. You could mirror and then do

93
00:07:18,800 --> 00:07:22,720
all the work locally on a local Pager instance, and then push it again later. There are some

94
00:07:22,720 --> 00:07:26,320
integrations for like Emacs and Vim as well for doing these kinds of things.

95
00:07:27,040 --> 00:07:31,040
Project management with Pager through the API and through the Git repos.

96
00:07:31,040 --> 00:07:34,080
What about you? Do you have any kind of tricks for how you interact with it?

97
00:07:34,080 --> 00:07:39,200
So right, I've got a few like little scripts that I do to interact with the API to do certain things

98
00:07:39,200 --> 00:07:43,440
like I keep track of, you know, what stuff, what projects I'm watching and seeing what

99
00:07:43,440 --> 00:07:47,600
new things have happened for some of them, keep track of the pull requests I've got open,

100
00:07:47,600 --> 00:07:52,000
what packages or projects have been most recently updated that I need to take a look at,

101
00:07:52,000 --> 00:07:56,160
things like that. But I don't have anything too fancy. I mostly operate through the web interface.

102
00:07:56,720 --> 00:08:01,280
But, you know, their potential is there to build up all kinds of interesting workflows because

103
00:08:01,280 --> 00:08:04,560
you have the combination of all the data being in Git repos, which means you can build whatever

104
00:08:04,560 --> 00:08:10,160
the hell you want regardless of the API. But also, because the API is there and kind of flexible,

105
00:08:10,160 --> 00:08:13,360
you can actually build all kinds of other interesting things around it.

106
00:08:13,360 --> 00:08:16,400
Okay. So it's really whatever you can dream up.

107
00:08:16,400 --> 00:08:22,960
Yeah, no, it's actually it's important to note that one of the other differentiators,

108
00:08:22,960 --> 00:08:27,760
at least from a development perspective and a hosted instance perspective, is that

109
00:08:27,760 --> 00:08:32,880
Pager is intentionally extensible. It has an extension plugin architecture. It's actually

110
00:08:32,880 --> 00:08:38,000
fully themeable as long as you if you're comfortable with Bootstrap 4, you can make a theme of your own

111
00:08:38,000 --> 00:08:40,560
and completely make your own branded experience.

112
00:08:40,560 --> 00:08:42,320
Oh, that's great for a team.

113
00:08:42,320 --> 00:08:42,880
Yeah.

114
00:08:42,880 --> 00:08:47,120
I don't personally feel this way, but I guess I feel like there might be some in the audience

115
00:08:47,120 --> 00:08:51,840
that are thinking, Python, that's going to be slow. How's that been?

116
00:08:51,840 --> 00:08:57,360
It's not that bad because for the most part, we actually aggressively leverage task queues with

117
00:08:57,360 --> 00:09:03,200
Celery. And so there's a lot of async happening for most of the actions in there. The web UI

118
00:09:03,200 --> 00:09:08,400
rendering is very client oriented rendering. So like syntax highlighting happens in the browser

119
00:09:08,400 --> 00:09:15,680
with a JavaScript library called Highlight.js. And so it's not very expensive for making the

120
00:09:15,680 --> 00:09:20,080
things render. And actually, it handles pretty big renderings very quickly and very efficiently.

121
00:09:20,080 --> 00:09:25,040
In the past, we tried to do a lot more server side rendering, and that turned out to be a bad idea.

122
00:09:25,040 --> 00:09:29,280
And we have shifted to a better balance of client versus server side rendering.

123
00:09:29,280 --> 00:09:31,920
And then, of course, as long as you got a nice, fast workstation,

124
00:09:31,920 --> 00:09:39,200
it'll render right up. So outside of Fedora, what other kind of projects or groups have adopted it?

125
00:09:39,200 --> 00:09:45,440
The Free Software Foundation is in the process of setting up a forge for doing entirely free

126
00:09:45,440 --> 00:09:51,280
software work. And the current plan from them that I've been communicated is that they're going to

127
00:09:51,280 --> 00:09:57,120
launch a Pagar instance for that. And so they're doing some integration work developing their

128
00:09:57,120 --> 00:10:02,320
setup. They're using some different configuration options compared to what the main Fedora Pagar

129
00:10:02,320 --> 00:10:05,840
instance does. And they've sent us some bug reports, and we fixed some issues for them.

130
00:10:05,840 --> 00:10:10,880
And actually, this latest release, 5.9, is actually like a good chunk of the bug fixes

131
00:10:10,880 --> 00:10:16,320
were for issues the Free Software Foundation found when they were working on their configuration.

132
00:10:16,320 --> 00:10:20,320
So it is your understanding that their announcement of a Git alternative or a Git

133
00:10:20,320 --> 00:10:24,640
hub alternative is going to be based on Prager, Pagoo, or whatever?

134
00:10:24,640 --> 00:10:27,920
That's what I currently understand it to be.

135
00:10:27,920 --> 00:10:31,760
That's neat. That could potentially end up being a fairly significant deployment,

136
00:10:31,760 --> 00:10:34,160
even if it was just the FSF projects.

137
00:10:34,160 --> 00:10:41,840
Right. Like Gnu Savannah, which is their current hacker project hosting system. It's got a few

138
00:10:41,840 --> 00:10:48,960
thousand repositories and I think like 20 or 30,000 users. I don't remember exactly. But if

139
00:10:48,960 --> 00:10:54,320
that deployment were replaced with Pagar, it would probably fit pretty well within this. Even just

140
00:10:54,320 --> 00:10:59,120
running it on one server, not even talking about scaling it out. To give you an idea of how well

141
00:10:59,120 --> 00:11:06,400
this has actually managed to perform, the current source, src.fedoraproject.org, which is the Fedora

142
00:11:06,400 --> 00:11:15,440
package sources thing, has somewhere close to, I think, 30-ish thousand projects with somewhere

143
00:11:15,440 --> 00:11:22,960
close to 15,000 forks with 7,000, 8,000 users. That is actually handled pretty well on one box.

144
00:11:22,960 --> 00:11:25,040
That's a pretty significant user base.

145
00:11:25,040 --> 00:11:32,320
A lot of other systems can't handle even a tenth of the load without having to require splitting.

146
00:11:33,840 --> 00:11:38,320
The throw down. Well, I guess people will be hearing a lot more about this project

147
00:11:38,320 --> 00:11:42,080
when the FSF spins that up. Do you have any insights on what their timeline is?

148
00:11:42,080 --> 00:11:45,520
Because I've seen that they've announced it, but I don't recall a date.

149
00:11:45,520 --> 00:11:49,120
So they've been actually talking about this kind of stealthily since about,

150
00:11:49,120 --> 00:11:53,680
I want to say, August or September or so. And then they mentioned it a couple of times in November.

151
00:11:53,680 --> 00:11:59,200
I think they were going to give further details at Libre Planet, but that event got canceled.

152
00:12:00,160 --> 00:12:04,480
And they went online only, but since there wasn't a scheduled talk about this at Libre Planet,

153
00:12:04,480 --> 00:12:09,680
there wasn't going to be a thing about it. I suspect we'll probably see them launch it

154
00:12:09,680 --> 00:12:14,880
closer to the summer. The Free Software Foundation mostly operates on volunteers. I believe they have

155
00:12:14,880 --> 00:12:19,200
like two or three actually employed systems administrators that actually are working on

156
00:12:19,200 --> 00:12:23,680
this project. But the bulk of what the Free Software Foundation does is run by volunteers.

157
00:12:23,680 --> 00:12:27,520
Yeah, fair enough. So they'll get to it when they can, but it's coming soon.

158
00:12:27,520 --> 00:12:32,320
Yeah. It's one of their higher priority things. So it's going to happen soon.

159
00:12:32,320 --> 00:12:36,720
They're very proud about the work that they're doing to do this. And one of the things that

160
00:12:36,720 --> 00:12:42,320
they're very pleased about is that it offers this potential for decentralized development.

161
00:12:42,320 --> 00:12:47,120
Because software freedom is also about the freedom to have your own data as well,

162
00:12:47,120 --> 00:12:53,760
like your own project data and using it how you need to. And being able to have total control

163
00:12:53,760 --> 00:12:56,480
of that is something that a lot of people want to have.

164
00:12:56,480 --> 00:13:01,360
Couldn't have said it better myself, Neil. Thank you. Neil, you'll hear more of him on Linux Unplugged.

165
00:13:01,360 --> 00:13:05,760
He's a software engineer, a Linux systems aficionado, a developer in Fedora, Mangia,

166
00:13:05,760 --> 00:13:13,440
and OpenSUSE. And that's just scratching the surface of what you do, really.

167
00:13:13,440 --> 00:13:18,240
I mean, one last thing I'd like to point out. As of, I think, a couple of weeks ago,

168
00:13:18,240 --> 00:13:23,520
is in almost every single major Linux distribution family in some form. It's available in Fedora.

169
00:13:23,520 --> 00:13:29,040
It's available for CentOS through Fedora Apple. It's available in OpenSUSE Alip since 15.1.

170
00:13:29,040 --> 00:13:34,640
It is available in OpenSUSE Tumbleweed. It's available in Magia since Magia 7.

171
00:13:34,640 --> 00:13:38,240
It's going to be available in Debian in the next release. It's in SID now. It's going to be

172
00:13:38,240 --> 00:13:43,200
available in Ubuntu in a 2004 LTS. And it's available in Arch through the AUR.

173
00:13:43,200 --> 00:13:44,400
It's in all the places.

174
00:13:44,400 --> 00:13:48,160
Yeah, so you can get it and use it pretty easily. And if you want to, you know,

175
00:13:48,160 --> 00:13:52,560
contributing to Pagar is super easy and straightforward. We have a friendly,

176
00:13:52,560 --> 00:13:58,960
small, tight-knit community here. The project page, Pagar.io. We have a mailing list on

177
00:13:58,960 --> 00:14:06,320
Lista Pagar.io and IRC channel Pagar on Freenode. Very good. Neil, thank you.


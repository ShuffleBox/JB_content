Coming up on today's show, we speak to Kevin and Patricia from Trafic.
We also discuss my recent ZFS snafu and wonder if the new Chromecasts can match up to the NVIDIA Shield.
I'm Alex.
And I'm Chris, and this is Self Hosted.
Well, it's been one of those weeks where you and I are both digging around outside setting up cameras.
At last, yes. I bought a couple in January and talked about them on the show.
But they were one of those projects that, you know, you move into a new house,
you're full of gusto and then a pandemic hits and you think, oh, well, I can wait.
So finally, finally, finally, I've put a couple of extra cameras up on my house.
I imagine during the zombie apocalypse, you're going to have like a dashboard up with all camera feeds going.
And you're the character in the movie that sees the zombies coming in the camera, you know.
I've only got three. I've only got three POE cameras.
I've got a couple of Wyze cams as well.
OK, so I do have quite a few.
Yeah. So did you run ethernet to these outdoor cameras?
I did. And what a pain that can be.
There was one particular one out the front of my garage that I was trying to get Catherine to poke up from outside.
The, you know, like the pushy like pulley stick thing, the fishing rods you can get.
I don't know what you call them. Yeah, I got you.
And it was going between two like rafters and I couldn't see it.
So I had to get my multi tool out and cut a small hole in some of the roof.
It sounds really bad. It's not as bad as it sounds. It wasn't a structural thing I cut.
No, it's fine. It's fine. What could go wrong?
The cool trick, if you're ever doing this, is to use your phone with the light to look around the corner and then look at the screen of your phone.
But my phone was too big to get around that particular corner until I took out that quarter of an inch from the bit of plywood.
And then I could see the rod coming through and it was all fine.
Well, I think your setup might be better long term.
My setup was easier because I went with battery powered Wi-Fi cameras because JOOBS is set up to broadcast my Wi-Fi access point out into the yard.
And so I have pretty good Wi-Fi coverage in my yard.
And so I thought I'll just go the easy route, but I'm going to wait and I'll use them for a few weeks and get a feel and see if it's worth talking about before I come on the show and start going on about my setup.
So I think I had an easier time with it. So mine was more like finding spots in the yard to hide cameras.
Yeah. And then they captured something really interesting, right?
Yeah. Actually, just the day after I set them up, I caught some cops coming into the yard.
A truck had come into the yard and hit a power pole and knocked the power lines down.
And this entire ruckus was going on. And I pulled up the camera feed and there's a cop standing in front of my camera.
You know that cop's just thinking you're like Walter White in there in your RV, right?
Oh, yeah. Well, that's what it was. The thing is like checking out the RV.
And it's this weird thing where you're looking and like, wait a minute, that's the outside of my they're out there.
They're looking at me.
All these things start running through your head of what didn't I put away or like.
Oh, yes. You don't mean to break laws, you know, on a day to day basis, but you probably are.
Yeah. Oh, definitely. That's that's my thing. So I'm sitting there doing the math as much as possible, trying to think, what did I leave outside?
What's wrong? But it was all because of the power pole. But quite a quite a surprising first use case for the outdoor cams.
And what we want to see when you put out your camera feed.
Oh, but then I'm sitting there watching the repair crews fix everything.
You know, that part of it was actually kind of great. And it kind of reaffirmed why I have outdoor cams like this is fantastic.
Well, I want to take a moment and thank our sponsor.
This episode is brought to you by the all new a cloud guru, the leader in learning for cloud Linux and other modern tech skills.
Hundreds of courses, thousands of hands on labs get certified, get hired, get learning at a cloud guru dot com.
I obviously didn't sacrifice enough to the CFS gods because I had a problem this weekend.
Oh, data loss problem. I was worried it might be. So imagine this picture.
You wake up on a Saturday morning, you have the whole weekend in front of you.
Beautiful weather. Birds are singing. Yeah. No leaf blowers waking you up early.
Right. It's a perfect Saturday morning. And then I get a text from my sister.
My audio books aren't working. And I think, OK, I was just recently messing with traffic, wasn't I?
Probably I did something with reverse proxy and forgot to set that up again or something. Right. OK, cool.
Logged into book Sonic, took a look and I press play on the book and nothing happens.
I'm like, hmm, that's strange. So I then log into the server through SSH and take a look and go to the audio books directory and it's blank.
The directory is there, but the directory is just totally empty. Correct.
Is this one of those moments you go, oh, now I know what I'm doing with the rest of my day?
Correct. Yes. It's just, you know, it's the peril of self-hosting, right?
You know, it's one of those things that as a server administrator, you see that message of if this error continues, please contact your administrator.
And you go, crap, that's me. So then I went from my audio books to my photos and my drone footage and they were all empty.
And I'm thinking, oh, crap, oh, crap, oh, crap. So then I started rooting around on Google and Twitter and stuff.
And Alan Jude had some nice nuggets to share with me and Wendell and Jim.
That's good. At least some good help.
I had a good backup crew and they were all like, well, it's probably just an empty directory preventing something getting mounted.
And I'm like, well, huh? Yeah. Didn't really understand.
So, you know, after about two or three hours, I just decided, right, I'm going to make the most of this beautiful weather.
I took a step away. I went for a hike with my wife and my dog.
Hey, good for you.
You know, sometimes it's the hardest thing to do when particularly a face with a stressful kind of data loss situation.
Very much.
Came back, then, you know, renewed my Google foo and started looking, you know, some slightly different tweak search terms and came up with a couple of commands I didn't know existed.
So the first one was ZFS get mounts and that listed all the mount points for the various different data sets that I have.
And then the next one was ZFS get mounted.
And what I could see when I did that second one was that half of the data sets were mounted or a third or so.
And the rest were mounted equals no. And I'm like, huh? Why is that then?
And these are the same physical disks underneath it all?
Yeah. I mean, so I have all of my Docker app data. Each app has its own data set, for example.
And so, you know, a third of the containers were mounted and working just fine, but the other two thirds weren't.
And I was like, and I did a look in those directories and there were a bunch of files in there.
So they looked like what I would expect.
So here's what had happened.
I think at some point, Docker had come up before ZFS and very helpfully,
Docker has this feature when you're doing bind mounts where it will go ahead and create the directories on the file system for you if they don't exist.
So what had happened, I think, is Docker had come up first, created those directories.
ZFS had come to try and then claim those directories and, oh, can't do that directory not empty and then just silently failed in the background.
The same exact thing happened to Wes and I here at the studio.
The system would reboot for like an update or something, you know, for whatever reason.
And the services and applications would come online either because the ZFS pool couldn't mount or because it just mounted late.
And so Docker starts up before that.
It creates those directories and then the operating system comes along to mount everything and says, oh, sorry, there's already things here.
I won't touch it. My bad.
And then it just continues on its merry way and your stuff never gets mounted and Docker never generates any messages.
And you're just you're reliant on the different failure states of applications to even notice anything.
And what's tricky about yours, it sounds like, is the application, Booksonic in this case, was up.
It was running. It's just the data was missing.
Correct. Yeah, it was it was a tricky one.
But in the end, no data loss.
And I have a renewed vigor for snapshots in ZFS and that kind of stuff.
I mean, about two months ago, I upgraded from 1804 to 2004.
And we talked about it on the show, but I forgot to reset Sanoid up again, which is what I use for my ZFS snapshots because I hadn't put it in Ansible.
So I'd forgotten it existed.
I need to eat my own dog food sometimes.
And so now I've spent the last few days, you know, just addressing some tech debt there and, you know, putting my Sanoid configuration into Git.
And hopefully this problem will never affect me again.
But it's just one of those things that, you know, you realize how complicated some of this stuff can be under the hood.
And when you're panicking, when you're in that kind of system down, you know, production down, I use the word production loosely, of course.
But you're in that kind of production down situation.
It's kind of like, how do I fix this?
Like, you know, you turn into Tina Belcher all of a sudden.
Yes. Yeah. You kind of lose some of the advanced troubleshooting or even just like that, that ability to kind of just think through it all because you go on that walk and you come back and all of a sudden you're Googling a little bit differently.
You're thinking about the problem a little bit differently, maybe even fair enough to say slightly more rationally.
I don't know exactly.
Yeah. I mean, the first two or three hours, you're just like, what's going on?
Well, in the prospect, because I know your setup and I know in your setup, the stuff that you store on ZFS is like the valuables.
Like you have stuff that isn't on ZFS that would suck to lose, but you wouldn't be upset.
But the data on your ZFS pool, that's like your most important stuff.
I mean, I do have it all replicated to England, so I wasn't too worried that I'd lost anything.
Good. But uploading six terabytes, I know, takes eight weeks.
So I'd just rather not have to go through that, you know.
Something else to reflect on here is that level of panic, if you'll call it that, is even worse when you're hosting like family email or something, you know, like you got away with it.
An outage a little bit on Booksonic or Plex isn't going to be too disruptive to family members.
But your sister may have been a lot more upset if it was her email and it was a workday or she was trying to, say, get a household on a Saturday and then all of a sudden she can't do her email.
Then it really matters.
Indeed, it does. So, talking of stuff that matters, container updates.
I'm a bit allergic to Watchtower.
You know, this is a program that will automatically go and check for updates for you on new versions of containers.
Why is that? Because I don't mind Watchtower.
I was curious, is it just too much for what you want?
Well, I don't like stuff updating if I'm not there to babysit it because of stuff like we just talked about, you know.
Yep.
So, let's say, for example, Plex auto updates.
And for some reason there's a bug in Plex with transcoding, speaking from experience here, where it suddenly just won't transcode and you're like, well, I didn't touch it.
Why would it change?
You know, I haven't done anything.
Because, you know, the first question as a support person you want to ask the customer is, what's changed?
What's changed?
And if you aren't there to kind of marshal those changes, I do have experience of it going bad.
Thus, I never really recommend something like Watchtower to anybody because of that kind of, it's too hands off.
But what I thought was cool as I came across in one of the Discord servers, I mean, I think it was the Linux server one, of this thing called dn, which is a container update notifier.
Yeah.
And also a set of command line tools to help you manage the update states of your containers, which is also very handy.
We both gave this a go.
It's funny because I think we're going to have different takes on this.
I ended up feeling like it wasn't enough and I didn't particularly like it enough to keep using it.
I personally don't see the point.
You know, I will just do a docker compose pull and then I can see the 10 or so containers, all 15 containers that are updating all at once.
Yeah.
And if I care enough, I can go and look at the change logs.
But most of the time I don't run latest anyway, so I don't really worry too much.
I could see this being useful if you didn't have a lot of your setup based around docker compose.
I could see being useful in that scenario.
I, like you, think that it's so much simpler to just get all of this stuff down and docker compose and then manage it that way.
And like you, I like to stay up to date, but I like to be the one doing those updates.
I am such a nerd.
I actually even enjoy doing it.
I enjoy SSHing in and updating Plex and an updating sync thing and updating all of my containers.
I love doing it.
I love watching it.
I love testing it afterwards.
It's almost a form of video games for me.
Go on, admit it.
You're an Arch user at heart, really.
I love updates, man.
I got a few minutes on an Arch box.
I'll sit down there and I'll bring up the terminal and I'll run a Pacman SYU and I'll check for updates.
Me too.
It's like muscle memory.
I'll just sit down and just type yay these days.
I don't know.
There's something about the hands-on approach to updates that I enjoy that I have the luxury of it,
that nothing I'm doing is so critical that I need to automate it or that the scale is so massive that it's not even an option.
I mean, for me, all in across all my systems, I'm probably around 20 containers, right?
We're not talking a massive amount here.
Spread across 47 pies, though.
Yeah.
I don't even find that to be burdensome.
I actually enjoy it.
I just go with Docker Compose and the nice thing about Docker Compose to remember, too,
is you can put a bunch of services in a single compose file, but you can just call that one image.
So for me, I might have five different media services in one Docker compose file,
but sometimes I'll just pull the Plex image and just do that update.
However, if I didn't use that, if that wasn't my approach or if I wanted something to sort of check my math,
then I could see the use of a tool like like Dwyn or Dwyn.
Dion, I think it is.
So it stands for Docker Image Update Notifier, and it's a client application written in Go,
which is delivered as a single executable and or a Docker image.
It's very simple to use.
That part I like about it.
If you've got any containers up before, you can get this thing up and going and use it.
linode.com slash SSH.
Linode is the largest independent cloud provider.
It's who I use to spin up any infrastructure I need.
Alex and I will often mess around with Linode's just for test boxes on this here show.
I'll get email notifications of Alex creating and destroying machines.
Oh, he's doing something for the show again.
And it's just great to have that kind of flexibility.
And if you want something for a personal blog or portfolio, you could absolutely use it for that.
They have pricing around five dollars a month.
It'll make that a snap.
But they also are ready to scale up to millions of users and be the critical business infrastructure you need.
And they have tools to make all of this possible.
Like, of course, their cloud dashboard, the DNS manager.
One of the areas that I find to be surprisingly simple is the storage management.
Either if you're just adding block storage to a machine or if you're going to go with the object storage, which is fantastic.
If you're not familiar with S3 compatible object storage, if you just need file storage up in the quote unquote cloud,
it's maybe something you could generate a public URL for.
But you don't need to go through the hassle of setting up a web server or an FTP server or SFTP into something.
You just need the file storage.
Object storage is great for that.
It's also a great way to power something like a static website, which, again, keeping it simple makes it easy to manage.
And it's great for gamers as well.
With one click, you can deploy a Minecraft server or CSGO server.
And with their five dollar a month machine, it's really easy and not very costly to set up something like an SSH jump post or a wire guard server.
And every plan comes with Linode's amazing human powered customer support.
If you need help, someone will pick up the phone and respond to your email or reply 24 hours a day, seven days a week, 365.
Linode started in 2003 as one of the first companies in cloud computing.
Three years before AWS.
And they're still to this day 30 to 50 percent cheaper than AWS or Google Cloud or Azure.
And their dashboard is infinitely simpler to use while the power is there.
And they still give you full access to everything on the back end.
That's one of the things as a longtime Linux user I really appreciate about Linode.
There's so many things I could go on and on about, but probably the best way to get started is to go to linode.com slash SSH.
Get a one hundred dollar sixty day credit on a new Linode account and get started.
It's a great way to learn. It's a great way to build infrastructure and so much more.
Just go to Linode dot com slash SSH. Get that one hundred dollar sixty day credit for your new account.
And a big thank you to Linode for sponsoring the self hosted program. Linode dot com slash SSH.
Well, Kevin and Patricia, welcome to the self hosted podcast. Hello. Thanks for having us.
Well, hello. So, Kevin, will you kick us off with what's great about the new release of traffic?
Yeah, well, I think we're talking about traffic 2.3 here, which just came out last week.
We are. So the great thing about traffic 2.3 is we've introduced something which the community has been clamoring for.
I'm fairly certain almost three years now, maybe two.
But that is plugins. And that's the idea that when a request comes into traffic and before it goes to the service on the other side of traffic,
that it's that that your instance of traffic is trying to route that that data as it gets passed through a handler or a piece of middleware.
And this could do things like add headers, remove headers, block the request based on some criteria.
And there's all kinds of things that you can do with the request before it gets to its endpoint.
And the users wanted a way to be able to build their own plugins,
install them in the traffic and modify or change their request in some way, shape or form.
Now, the only way you could do that before is that you would literally have to fork traffic and write the plugin yourself and compile traffic
and ship that binary to your server or, you know, wherever you're you're hosting traffic to run in your environment.
But today, now with the release of 2.3, users are able to.
Write their plugin and go host that code in GitHub and instruct their traffic instance to pull that down
and traffic will run that code in an interpreter like a go interpreter so you don't have to compile it and it will execute it.
And you can do all kinds of crazy stuff with it. That's fantastic.
These plugins look super cool. You've got this, I guess, marketplace now for plugins.
Yeah, we called it a marketplace because we didn't necessarily want to call it a store or a or a place.
It's really just a centralized repository for people to be able to go and look up plugins that they may want to install.
And this marketplace is a curated list of plugins because what we end up doing is we scrape GitHub looking for traffic plugin topics.
And as long as the user has uploaded that code to GitHub with the right files and it configured correctly
and traffic pilot can ingest that and validate it, it's going to put that plugin automatically in the marketplace so people can can go and download it.
Now, the other thing that that the marketplace ensures is that the code that was ingested doesn't change.
So when you publish it like a version 1.01 and you tag it in GitHub.
Traffic pilot is going to create a hash of that release, and if it changes, if the 1.01 ever gets that tag gets deleted
and then somebody pushes new code to it under that same tag and that changes, traffic will invalidate that and our pilot will invalidate that.
Sounds very similar to the Docker container char type model, no?
The idea is similar is that once you publish something, you should be able to reference that to a particular version in a hosted repository.
And that way you can be ensured that what you're running is actually what has been published.
It's for security reasons, but that's one of the main reasons we did that.
Declarative versioning is super important, and I think it's often overlooked. A lot of people just run the tag latest for their containers or anything related to them.
So I think that's a really nice feature.
Now, what I'm curious about right now is the difference between a plugin and this concept of middleware that traffic has.
The only difference is terminology. Middlewares is what we refer to as the components in traffic that would mutate or process a request on your behalf within traffic.
A plugin is simply the ability for the end user to build their own middleware and install it into traffic to be able to perform a similar use case.
One of them is I built a plugin to deny access to a service based on an IP list.
So let's say you wanted to block everything from China or from Comcast because what's the difference?
Then you would say, all right, we'll block all these IPs from Comcast and all of a sudden traffic's going to stop any request from making it to your service if somebody makes a request from the Comcast IP block.
That's really interesting. I think Chris, you're on Comcast, aren't you?
Yeah, and I hate it every single day. I mean, at least it's actually been fairly solid, but the performance is never what I want it to be.
Kevin, help me understand how Pilot fits in with all of this.
So one of the biggest issues that we've had historically with traffic over its lifetime is one, we want to better understand how our users are actually using our software.
And to be able to do that, we need to have some kind of basic reporting or checking in ability to say, okay, well, this user is using five instances of traffic, and maybe they're using the Kubernetes provider and the Docker swarm provider.
And there's not many people using the Redis provider, right?
Well, we have no idea how to determine whether or not we should continue development on the Redis provider.
And having that usage data would be critical in helping us better understand how to or where to focus internal development efforts on traffic.
So Pilot is aimed at solving a couple of different problems.
One is how do we entice our users to give us that data?
How can we encourage them and say, hey, please provide us with this really critical information to better understand your environment so we can improve our product?
And in doing so, what can we give you in exchange, right?
So what we decided on was, well, I didn't decide on it.
The engineers and the founder, Emil, decided on was we chose to give end users free monitoring of their traffic instances.
So if any of those instances ever become unavailable, Pilot will email them and notify them about it.
And also we do basic metric collection on the performance of your instances.
So things like what's your average latency, how many connections are being processed every hour,
as well as how many connections are open over the course of that hour.
And we will track metrics over days, weeks and months.
And we do that all for free, but the tradeoff is that you have to connect your traffic instance to Pilot and send us that data so we can better understand how traffic is being used.
So this SaaS offering, it's something in the same space as Prometheus or Datadog or something like that, right?
Obviously, Prometheus being a self-hosted monitoring tool and Datadog being a SaaS service.
Whenever anybody says it's free, you just have to send us your data. That just raises a very small little red flag for me.
What are you planning to do with that data besides everything you just said?
Well, everything is anonymized, so we don't get any information about how your services are configured or how your providers are configured.
We just send the basic metrics around timing as well as open connection counts.
So you can look at the code and see exactly what data we're sending, so we're very transparent about that.
But in terms of how we're going to use that data, there's nothing in that data that is identifiable outside of how we can better improve our product, essentially.
I think the big difference, too, with Datadog and Prometheus is those are highly granular and also they're expensive in a couple of ways.
One, Datadog is expensive and it's going to hit your pocketbook.
And Prometheus is expensive and as soon as you start throwing any kind of scale at Prometheus, it gets complicated and it gets hard to run and scale out.
So our idea is to keep things really basic for the majority of the use cases out there so that, number one, we're not going to be handling a ton of data.
We send data at a very limited rate.
We're not collecting metrics every two seconds or whatever.
I think we're collecting metrics every 10 or 15 minutes or something like that.
And it's not meant to be as a replacement for Datadog or Prometheus.
It's just a tool that helps you monitor your instances for basic availability and for security alerts.
Nice. So it's not a replacement. It's there to augment. Yeah, that's nice.
If I understand correctly, because it's integrated at the traffic level on the host, so it has a particular keen insight, too, on what traffic is going through that machine.
Yeah, I mean, you could say that, yeah, but at the same time, we're not necessarily focused on sending telemetry data around what services are being communicated with or what the endpoints are.
That would, I think, be a little too granular.
So that's where you start getting security concerns because nobody wants to send or publish their endpoints. It's just one area where people could easily misuse that data.
Security through obscurity, right?
So with the announcement, there was some stuff in there about Kubernetes support and K3S support.
Right now, K3S will install traffic 1.7. The problem with 1.7 is that 1.7 is slated for end of life, I think, next year.
And we're not working towards bringing in the latest and greatest Kubernetes objects into that release of traffic.
Things like Kubernetes Ingress and the newer service API that Google is working on is going to be traffic 2.0 only.
That's the direction that Kubernetes is moving is, at first, people were like, yay, CRDs, this is great.
And then all of a sudden, people were like, CRDs are terrible. Who wants to manage all of this?
So what the fine engineers at Google decided to do is work on an upgraded or a better Ingress model for use that abstracts away a lot of what we've done with the CRDs,
which is things like TCP routers, UDP routers, as well as more refined ability to do path operations and regex operations on those objects,
abstract it out to a vendor agnostic, if you will, implementation,
and allow people to not necessarily be reliant upon CRDs or specific annotations that are tied to any individual Ingress type,
but abstract it out into that service API where literally say, I just want to use NGINX now or I want to use a console.
Then you just swap your Ingress provider and you don't have to change annotations. You don't have to install new CRDs and migrate all that.
You just literally change the underlying layer. That's the goal, at least.
Both of you showed up on our radar, not so much because of the news about traffic 2.3, although that did put you on our radar as well, but also because of the community.
So I hear there's ambassadors involved with traffic. Patricia, can you explain to me what the ambassador program is?
The traffic ambassador program, when it comes down to it, is really a way to reward contributors of code content or community,
such as creating meetups or speaking to people about their knowledge of traffic and then bringing them all together so they can share information and become besties.
And so this program was launched about a year and a half ago. If I recall, it was right before KubeCon, one of the KubeCons.
So the way to get involved is basically to if you write content or contribute code or do some speaking spots,
then get in our radar either by emailing me or usually it comes through Twitter, someone on ping. And I also monitor for new content that comes out.
And by the way, this program is like Kevin mentioned, this program is definitely a work in progress,
which with much more that we're creating to refine it and also make clearer offers to more of the community so they know how to get involved.
I'll tell you one of the things that I appreciate about the program is that when you migrated from traffic one to version two,
there was a lot of restructuring how labels had to be applied and some of the terminology changed and stuff like that.
Documentation is hard. We all know this. We all work in software or related technologies and documentation is one of the hardest things.
And I think it's a really smart move what traffic is doing trying to leverage the community like this.
One of our listeners, the real orange one on Discord, he is prolific at writing about traffic and he's just done a 2000 word traffic hello world getting started guide.
So there's all these kind of cool things that the community are doing for you, which I think is really, really neat.
Yes, I agree with you. And I mean, that's actually the foundation of it.
And our goal is to create something that makes it feel rewarding rather than just transactional or extractionary.
That's really where I'm putting a lot of my energy is like not just ways to continue this like machine of community contributed everything, but really to create some value.
So there's a stoke factor there, right? Like meeting each other from around the world.
And also one of the benefits when you have stuff that passes the review section as you're invited to a private Discord server and the benefits of that are, you know, there's often real time help.
And we do offer help in our community forum, but in the private Discord server, you get really like great access to other people who are very passionate about using traffic and our product suite like the real orange one, Jake Howard.
So, yeah, I love to hear your perspective and appreciate that because we are going into V2.0 of the community section here and I want to make it really wonderful for the next phase.
So for someone looking to get started with traffic, what's the best resource you can point them at?
We're constantly curating dozens if not hundreds of articles every month, blog posts and YouTube videos from our community.
And we have a monthly newsletter that we send out. You can sign up to that. We just want to keep you informed about the stuff that's happening in the community.
For instance, we have a hackathon coming up in October 20th. We're giving away gift cards and cool swag.
And all you have to do is come join us and build some plugins. We want to build a library with all this stuff.
I mean, I have a I have a spreadsheet with almost just this year alone, probably three or four hundred blog posts and videos.
I want to be able to upload that somewhere and for our community to be able to search for it and be able to ingest it the way they want, not necessarily have to wait every month for a newsletter.
So if anybody out there who's listening knows of software or tools that will help us do that because I don't have time for that, please let me know, because that's something that we want to we want to get out there for our users.
This is self-hosted, right? So I'm pretty sure some of some of our listeners will have some software in mind around something like an RSS reader or something like that.
Yeah. Well, Kevin and Patricia, it's exciting to watch this kind of grow. Your conversation here has reframed my appreciation of traffic and where it's at.
And it seems like it's it's in a pretty neat space right now and it's growing like crazy.
So thank you both for coming on. We'll have links to the traffic's Twitter in our show notes, as well as the news announcements.
And then what's the best way to get that newsletter?
It would be to sign up if you just go to traffic.io. There's a little spot where you can put in your email to get the newsletter.
And and Chris, by the way, you technically now are eligible to become an ambassador.
So, well, I do like a nice title.
Hey, now, I thought that was just my special title.
We'll both be ambassadors. Oh, we should make that a thing, Alex. I like it.
Oh, listen, I know how to level this up. So I'm going to I'm going to make you chase each other for a while.
So that's pretty clever. All right. Well, thank you both for coming on.
Thank you so much. Thank you for having us.
Cloudfree.shop built by a member of our community and now a place where you can buy a wide range of smart devices that come pre flashed with Tasmota.
No cloud connection ever required. They'll run as long as the hardware functions.
It's the ultimate smart plug for home assistant and a cloud free life.
And this is better than ever because it's getting harder and harder to do some of this flashing.
And if you use the promo code self-hosted at checkout, you can support the show and you get a dollar off per plug.
Go get yourself a smart plug that never requires the cloud. And it's pre flashed with Tasmota.
Cloudfree.shop. Well, I heard you talking about it online.
The new Chromecast, of course, is what I'm talking about. And I managed to get one from Best Buy.
I had to go in person, you know, like a caveman and put my mask on and all that stuff.
But I've actually got one in hand and I thought I'd give you my experiences.
Oh, you mean the new Chromecast with Google TV, Alex?
Yeah, whatever they're calling it this week. I mean, Google's branding and naming. Oh, yeah, it's just so chaotic.
OK, but I'm really glad you got one because I think most of the reviews I'm going to see online are going to be from the perspective of someone who just subscribes to like every frickin streaming service.
Because when I look at this thing from the outside, what I see is something that is built and designed to put forward streaming options.
And as everybody on this show knows, I like to stream my stuff locally over the land. I probably won't be using most of that.
Is it a decent interface for somebody like me who doesn't plan to use those streaming services, at least directly?
Yes, with some caveats. Ah, OK.
Firstly, it's really performant, so I was expecting it to feel a little cheap, you know, like frame rate stutters and, you know, just little things.
The fact that they are charging $50 for the Chromecast and the remote as well.
So for the first time, Chromecast actually have a, you know, a little remote stick that you have in your hand.
Right, so no phone required to actually operate it.
It's kind of like a Roku remote. It feels it's a similar size. It's got a similar number of buttons and all that.
But, you know, it feels cheap. It's made of plastic. It doesn't weigh very much, but it gets the job done.
You can obviously use apps on your phone as well. I was very pleased. It's basically a cheap version of an NVIDIA Shield.
Does it have the Play Store? Yes. Hmm. So were you able to install traditional Android TV apps?
It was. Kodi? Check. MB? Check. Jellyfin? Check. Plex? Check. All of the above.
I haven't managed to get the WireGuard stuff working yet, but I think that's more on me than it is on the Chromecast.
I need that for my iPlayer stuff. So far as I can tell, there is no Ethernet option.
I'm happy to be proved wrong on that, but it's powered by a USB-C plug that goes in.
So there's probably some dongle that you can get that would enable Ethernet. I just haven't found it yet.
Now, huge drawback, in my opinion, of this new model, the old ones you could power exclusively off most TVs' USB ports because they sipped electricity.
Yeah, I noticed this one ships and all of the imagery shows it plugged into a power adapter.
Yeah, I tried it plugged into my TV and it just gave me this boodoodoo noise saying it needs more power.
You know how that Raspberry Pi puts the little lightning bolt in the corner when it's not getting enough juice?
It was basically that except for the fact the Chromecast didn't function.
As soon as I plugged it into the seven and a half watt power brick that comes in the box, we were all good.
But in terms of a travel device, that's now a remote I've got to take with me.
It's a power brick. It's another cable, as well as the Chromecast, compared to the old Chromecast, which was Chromecast and USB cable.
There's a couple of extra things to consider there.
Indeed. Yeah, that actually does limit my use cases for it.
The Google Assistant is very in your face, as you would expect from a modern Google product.
It's got its own dedicated button on the remote.
Voice search works really, really well if you are not using a self-hosted platform like a Plex, like an MB, like a Jellyfin or a Kodi.
If you want to search Amazon Prime, if you want to search Netflix, YouTube, whatever, the voice search is fantastic.
You can say, take me to the latest episode of whatever TV show you're watching and boom, it will just start playing.
But if you want to search Plex, you have to go into Plex to get into that kind of walled garden, which is disappointing.
You do wonder if it's an API Plex could write to with an app update.
I don't know. I mean, I single Plex out, perhaps unfairly.
It's not a Plex limitation, I suspect. It's more of a Google limitation.
Because as you said at the start, as you alluded to, I think the reason they've been able to hit this $50 price point, which is phenomenal, I must say, for this level of performance in a device, it's basically a loss leader. It's got to be.
So the question becomes now, would you buy an NVIDIA Shield after this?
You know, like your main television, would you buy an NVIDIA Shield for that if it were to die or would you just stick with this?
Interesting, because I've got a couple of Shields, one upstairs and one downstairs.
And I think this Chromecast would do great in like a bedroom setting where I'm not interested in like the highest fidelity and I don't necessarily care too much about the fact it doesn't have Ethernet and can't be a Plex server and all that kind of stuff that the Shield can do.
I don't really use my Shields for game streaming and you're not going to be using these Chromecasts for game streaming either because Stadia is not supported at launch.
Nope. Burn. Unbelievable. Just so Google.
The point you made in LAN, you know, about how Google is so siloed is just it's on show for all to see in this product.
Would I buy another Shield? It's an interesting one. I think yes, because I care about codecs and Ethernet and all the things I just listed. I think yes.
I would imagine the Shield must still have a performance advantage. Really?
I wouldn't say it feels like it does. I mean, that really was one of my major first impressions was just how snappy this Chromecast was.
Well, so the Shield then, I think one of the I mean, it has the track record of being a solid supported device by Nvidia for years and getting updates.
But the other area that the Shield is getting a lot of praise that I haven't tested directly is they have a very, very good 4K upscaler.
It's amazing. Yeah. But if you put it on old cartoons and stuff like old Family Guy cartoons or whatever, where, you know, the fidelity of the original source material is very poor.
It's like watching modern South Park. You know, it's it's crisp. It's perfectly, you know, it's it's amazing.
Well, I I'm glad it's decent because, you know, the price point, like you said, is phenomenal. And I think it'll help people that are getting into the space that our show covers.
Get a device that doesn't cost them hundreds of dollars. That's a positive. It's iterative.
This Chromecast is an iterative thing if you're coming from the Shield. But if you're coming from, say, a Roku or original Chromecast original, yeah, it's it's a game changer.
And maybe we'll see updates to apps like MB and Jellyfin and Plex and whatnot that can support this Google TV UI. But at least the apps can still run.
Now, last time we talked about the Home Assistant birthday updates and we talked a little bit about the new Mac app, which lets you do, you know, API level integrations with Home Assistant for things like your webcam on your Mac.
Audio interface state of how useful or like other useful states like if the machine is busy or not, if it's awake, like a lot of really nice things you could build automations around, Alex.
Our community, as wonderful as they always are, have started writing a Linux version.
No, stop it.
Yeah, we're calling it Halcyon app, Home Assistant Linux Companion. We had a little vote on the name in the Discord.
We have a website. It's very, very basic right now. Halcyon.casa, which basically is a link to the GitHub repo.
So if you go to that website and join the Discord, if you're interested, I think we're going to write it in Rust.
I was wondering if you were going to mention that. I love it. That's so great.
Well, this is frickin cool because I had a lot of Mac envy after last episode.
Yeah, we need we need people that can do websites, that can do logos and graphics, that kind of stuff. But we also need people who can actually write the code as well.
So if you're interested in that kind of thing, please join us over on the Discord.
Absolutely. We'll have a link in the show notes for that.
Also, while we're talking about community, thank you to our members, our site reliability engineers, selfhosted.show slash SRE.
If you would like to join, you support the show, you get a limited ad feed and you get extra content, a whole bonus post show for our memberships.
Selfhosted.show slash SRE. Thank you to our members over there helping us go independent.
Alex, are you on the social media? We should give ourselves some plugsies before we get out of here.
Yes, as always, you can find the show at selfhosted.show slash contact for different ways to get in touch with us.
You can find me on Twitter at ironicbadger.
Fact, I'm at Chris Lass and you can find our sponsor, a cloud guru, just slash a cloud guru at YouTube, Twitter or Facebook.
Any of those. It's easy. Just a slash and a cloud guru.
Thanks for listening, everyone. That was selfhosted.show slash 29.

1
00:00:00,000 --> 00:00:04,000
Coming up on today's show, we speak to Kevin and Patricia from Trafic.

2
00:00:04,000 --> 00:00:10,000
We also discuss my recent ZFS snafu and wonder if the new Chromecasts can match up to the NVIDIA Shield.

3
00:00:10,000 --> 00:00:11,000
I'm Alex.

4
00:00:11,000 --> 00:00:14,000
And I'm Chris, and this is Self Hosted.

5
00:00:14,000 --> 00:00:19,000
Well, it's been one of those weeks where you and I are both digging around outside setting up cameras.

6
00:00:19,000 --> 00:00:24,000
At last, yes. I bought a couple in January and talked about them on the show.

7
00:00:24,000 --> 00:00:27,000
But they were one of those projects that, you know, you move into a new house,

8
00:00:27,000 --> 00:00:32,000
you're full of gusto and then a pandemic hits and you think, oh, well, I can wait.

9
00:00:32,000 --> 00:00:37,000
So finally, finally, finally, I've put a couple of extra cameras up on my house.

10
00:00:37,000 --> 00:00:43,000
I imagine during the zombie apocalypse, you're going to have like a dashboard up with all camera feeds going.

11
00:00:43,000 --> 00:00:47,000
And you're the character in the movie that sees the zombies coming in the camera, you know.

12
00:00:47,000 --> 00:00:50,000
I've only got three. I've only got three POE cameras.

13
00:00:50,000 --> 00:00:52,000
I've got a couple of Wyze cams as well.

14
00:00:52,000 --> 00:00:54,000
OK, so I do have quite a few.

15
00:00:54,000 --> 00:00:57,000
Yeah. So did you run ethernet to these outdoor cameras?

16
00:00:57,000 --> 00:00:59,000
I did. And what a pain that can be.

17
00:00:59,000 --> 00:01:06,000
There was one particular one out the front of my garage that I was trying to get Catherine to poke up from outside.

18
00:01:06,000 --> 00:01:11,000
The, you know, like the pushy like pulley stick thing, the fishing rods you can get.

19
00:01:11,000 --> 00:01:13,000
I don't know what you call them. Yeah, I got you.

20
00:01:13,000 --> 00:01:17,000
And it was going between two like rafters and I couldn't see it.

21
00:01:17,000 --> 00:01:24,000
So I had to get my multi tool out and cut a small hole in some of the roof.

22
00:01:24,000 --> 00:01:28,000
It sounds really bad. It's not as bad as it sounds. It wasn't a structural thing I cut.

23
00:01:28,000 --> 00:01:32,000
No, it's fine. It's fine. What could go wrong?

24
00:01:32,000 --> 00:01:38,000
The cool trick, if you're ever doing this, is to use your phone with the light to look around the corner and then look at the screen of your phone.

25
00:01:38,000 --> 00:01:44,000
But my phone was too big to get around that particular corner until I took out that quarter of an inch from the bit of plywood.

26
00:01:44,000 --> 00:01:48,000
And then I could see the rod coming through and it was all fine.

27
00:01:48,000 --> 00:01:50,000
Well, I think your setup might be better long term.

28
00:01:50,000 --> 00:01:59,000
My setup was easier because I went with battery powered Wi-Fi cameras because JOOBS is set up to broadcast my Wi-Fi access point out into the yard.

29
00:01:59,000 --> 00:02:02,000
And so I have pretty good Wi-Fi coverage in my yard.

30
00:02:02,000 --> 00:02:12,000
And so I thought I'll just go the easy route, but I'm going to wait and I'll use them for a few weeks and get a feel and see if it's worth talking about before I come on the show and start going on about my setup.

31
00:02:12,000 --> 00:02:17,000
So I think I had an easier time with it. So mine was more like finding spots in the yard to hide cameras.

32
00:02:17,000 --> 00:02:20,000
Yeah. And then they captured something really interesting, right?

33
00:02:20,000 --> 00:02:25,000
Yeah. Actually, just the day after I set them up, I caught some cops coming into the yard.

34
00:02:25,000 --> 00:02:31,000
A truck had come into the yard and hit a power pole and knocked the power lines down.

35
00:02:31,000 --> 00:02:37,000
And this entire ruckus was going on. And I pulled up the camera feed and there's a cop standing in front of my camera.

36
00:02:37,000 --> 00:02:41,000
You know that cop's just thinking you're like Walter White in there in your RV, right?

37
00:02:41,000 --> 00:02:45,000
Oh, yeah. Well, that's what it was. The thing is like checking out the RV.

38
00:02:45,000 --> 00:02:49,000
And it's this weird thing where you're looking and like, wait a minute, that's the outside of my they're out there.

39
00:02:49,000 --> 00:02:51,000
They're looking at me.

40
00:02:51,000 --> 00:02:55,000
All these things start running through your head of what didn't I put away or like.

41
00:02:55,000 --> 00:02:59,000
Oh, yes. You don't mean to break laws, you know, on a day to day basis, but you probably are.

42
00:02:59,000 --> 00:03:06,000
Yeah. Oh, definitely. That's that's my thing. So I'm sitting there doing the math as much as possible, trying to think, what did I leave outside?

43
00:03:06,000 --> 00:03:14,000
What's wrong? But it was all because of the power pole. But quite a quite a surprising first use case for the outdoor cams.

44
00:03:14,000 --> 00:03:17,000
And what we want to see when you put out your camera feed.

45
00:03:17,000 --> 00:03:20,000
Oh, but then I'm sitting there watching the repair crews fix everything.

46
00:03:20,000 --> 00:03:28,000
You know, that part of it was actually kind of great. And it kind of reaffirmed why I have outdoor cams like this is fantastic.

47
00:03:28,000 --> 00:03:30,000
Well, I want to take a moment and thank our sponsor.

48
00:03:30,000 --> 00:03:36,000
This episode is brought to you by the all new a cloud guru, the leader in learning for cloud Linux and other modern tech skills.

49
00:03:36,000 --> 00:03:43,000
Hundreds of courses, thousands of hands on labs get certified, get hired, get learning at a cloud guru dot com.

50
00:03:43,000 --> 00:03:48,000
I obviously didn't sacrifice enough to the CFS gods because I had a problem this weekend.

51
00:03:48,000 --> 00:03:53,000
Oh, data loss problem. I was worried it might be. So imagine this picture.

52
00:03:53,000 --> 00:03:57,000
You wake up on a Saturday morning, you have the whole weekend in front of you.

53
00:03:57,000 --> 00:04:04,000
Beautiful weather. Birds are singing. Yeah. No leaf blowers waking you up early.

54
00:04:04,000 --> 00:04:09,000
Right. It's a perfect Saturday morning. And then I get a text from my sister.

55
00:04:09,000 --> 00:04:15,000
My audio books aren't working. And I think, OK, I was just recently messing with traffic, wasn't I?

56
00:04:15,000 --> 00:04:20,000
Probably I did something with reverse proxy and forgot to set that up again or something. Right. OK, cool.

57
00:04:20,000 --> 00:04:25,000
Logged into book Sonic, took a look and I press play on the book and nothing happens.

58
00:04:25,000 --> 00:04:35,000
I'm like, hmm, that's strange. So I then log into the server through SSH and take a look and go to the audio books directory and it's blank.

59
00:04:35,000 --> 00:04:41,000
The directory is there, but the directory is just totally empty. Correct.

60
00:04:41,000 --> 00:04:46,000
Is this one of those moments you go, oh, now I know what I'm doing with the rest of my day?

61
00:04:46,000 --> 00:04:50,000
Correct. Yes. It's just, you know, it's the peril of self-hosting, right?

62
00:04:50,000 --> 00:04:59,000
You know, it's one of those things that as a server administrator, you see that message of if this error continues, please contact your administrator.

63
00:04:59,000 --> 00:05:09,000
And you go, crap, that's me. So then I went from my audio books to my photos and my drone footage and they were all empty.

64
00:05:09,000 --> 00:05:17,000
And I'm thinking, oh, crap, oh, crap, oh, crap. So then I started rooting around on Google and Twitter and stuff.

65
00:05:17,000 --> 00:05:21,000
And Alan Jude had some nice nuggets to share with me and Wendell and Jim.

66
00:05:21,000 --> 00:05:23,000
That's good. At least some good help.

67
00:05:23,000 --> 00:05:29,000
I had a good backup crew and they were all like, well, it's probably just an empty directory preventing something getting mounted.

68
00:05:29,000 --> 00:05:33,000
And I'm like, well, huh? Yeah. Didn't really understand.

69
00:05:33,000 --> 00:05:38,000
So, you know, after about two or three hours, I just decided, right, I'm going to make the most of this beautiful weather.

70
00:05:38,000 --> 00:05:41,000
I took a step away. I went for a hike with my wife and my dog.

71
00:05:41,000 --> 00:05:42,000
Hey, good for you.

72
00:05:42,000 --> 00:05:48,000
You know, sometimes it's the hardest thing to do when particularly a face with a stressful kind of data loss situation.

73
00:05:48,000 --> 00:05:49,000
Very much.

74
00:05:49,000 --> 00:06:00,000
Came back, then, you know, renewed my Google foo and started looking, you know, some slightly different tweak search terms and came up with a couple of commands I didn't know existed.

75
00:06:00,000 --> 00:06:09,000
So the first one was ZFS get mounts and that listed all the mount points for the various different data sets that I have.

76
00:06:09,000 --> 00:06:12,000
And then the next one was ZFS get mounted.

77
00:06:12,000 --> 00:06:19,000
And what I could see when I did that second one was that half of the data sets were mounted or a third or so.

78
00:06:19,000 --> 00:06:25,000
And the rest were mounted equals no. And I'm like, huh? Why is that then?

79
00:06:25,000 --> 00:06:28,000
And these are the same physical disks underneath it all?

80
00:06:28,000 --> 00:06:34,000
Yeah. I mean, so I have all of my Docker app data. Each app has its own data set, for example.

81
00:06:34,000 --> 00:06:41,000
And so, you know, a third of the containers were mounted and working just fine, but the other two thirds weren't.

82
00:06:41,000 --> 00:06:46,000
And I was like, and I did a look in those directories and there were a bunch of files in there.

83
00:06:46,000 --> 00:06:49,000
So they looked like what I would expect.

84
00:06:49,000 --> 00:06:50,000
So here's what had happened.

85
00:06:50,000 --> 00:06:57,000
I think at some point, Docker had come up before ZFS and very helpfully,

86
00:06:57,000 --> 00:07:05,000
Docker has this feature when you're doing bind mounts where it will go ahead and create the directories on the file system for you if they don't exist.

87
00:07:05,000 --> 00:07:10,000
So what had happened, I think, is Docker had come up first, created those directories.

88
00:07:10,000 --> 00:07:18,000
ZFS had come to try and then claim those directories and, oh, can't do that directory not empty and then just silently failed in the background.

89
00:07:18,000 --> 00:07:22,000
The same exact thing happened to Wes and I here at the studio.

90
00:07:22,000 --> 00:07:26,000
The system would reboot for like an update or something, you know, for whatever reason.

91
00:07:26,000 --> 00:07:36,000
And the services and applications would come online either because the ZFS pool couldn't mount or because it just mounted late.

92
00:07:36,000 --> 00:07:38,000
And so Docker starts up before that.

93
00:07:38,000 --> 00:07:45,000
It creates those directories and then the operating system comes along to mount everything and says, oh, sorry, there's already things here.

94
00:07:45,000 --> 00:07:47,000
I won't touch it. My bad.

95
00:07:47,000 --> 00:07:52,000
And then it just continues on its merry way and your stuff never gets mounted and Docker never generates any messages.

96
00:07:52,000 --> 00:07:58,000
And you're just you're reliant on the different failure states of applications to even notice anything.

97
00:07:58,000 --> 00:08:04,000
And what's tricky about yours, it sounds like, is the application, Booksonic in this case, was up.

98
00:08:04,000 --> 00:08:07,000
It was running. It's just the data was missing.

99
00:08:07,000 --> 00:08:09,000
Correct. Yeah, it was it was a tricky one.

100
00:08:09,000 --> 00:08:11,000
But in the end, no data loss.

101
00:08:11,000 --> 00:08:17,000
And I have a renewed vigor for snapshots in ZFS and that kind of stuff.

102
00:08:17,000 --> 00:08:23,000
I mean, about two months ago, I upgraded from 1804 to 2004.

103
00:08:23,000 --> 00:08:30,000
And we talked about it on the show, but I forgot to reset Sanoid up again, which is what I use for my ZFS snapshots because I hadn't put it in Ansible.

104
00:08:30,000 --> 00:08:32,000
So I'd forgotten it existed.

105
00:08:32,000 --> 00:08:35,000
I need to eat my own dog food sometimes.

106
00:08:35,000 --> 00:08:44,000
And so now I've spent the last few days, you know, just addressing some tech debt there and, you know, putting my Sanoid configuration into Git.

107
00:08:44,000 --> 00:08:47,000
And hopefully this problem will never affect me again.

108
00:08:47,000 --> 00:08:55,000
But it's just one of those things that, you know, you realize how complicated some of this stuff can be under the hood.

109
00:08:55,000 --> 00:09:04,000
And when you're panicking, when you're in that kind of system down, you know, production down, I use the word production loosely, of course.

110
00:09:04,000 --> 00:09:07,000
But you're in that kind of production down situation.

111
00:09:07,000 --> 00:09:10,000
It's kind of like, how do I fix this?

112
00:09:10,000 --> 00:09:15,000
Like, you know, you turn into Tina Belcher all of a sudden.

113
00:09:15,000 --> 00:09:29,000
Yes. Yeah. You kind of lose some of the advanced troubleshooting or even just like that, that ability to kind of just think through it all because you go on that walk and you come back and all of a sudden you're Googling a little bit differently.

114
00:09:29,000 --> 00:09:35,000
You're thinking about the problem a little bit differently, maybe even fair enough to say slightly more rationally.

115
00:09:35,000 --> 00:09:36,000
I don't know exactly.

116
00:09:36,000 --> 00:09:39,000
Yeah. I mean, the first two or three hours, you're just like, what's going on?

117
00:09:39,000 --> 00:09:45,000
Well, in the prospect, because I know your setup and I know in your setup, the stuff that you store on ZFS is like the valuables.

118
00:09:45,000 --> 00:09:50,000
Like you have stuff that isn't on ZFS that would suck to lose, but you wouldn't be upset.

119
00:09:50,000 --> 00:09:53,000
But the data on your ZFS pool, that's like your most important stuff.

120
00:09:53,000 --> 00:09:59,000
I mean, I do have it all replicated to England, so I wasn't too worried that I'd lost anything.

121
00:09:59,000 --> 00:10:04,000
Good. But uploading six terabytes, I know, takes eight weeks.

122
00:10:04,000 --> 00:10:07,000
So I'd just rather not have to go through that, you know.

123
00:10:07,000 --> 00:10:19,000
Something else to reflect on here is that level of panic, if you'll call it that, is even worse when you're hosting like family email or something, you know, like you got away with it.

124
00:10:19,000 --> 00:10:25,000
An outage a little bit on Booksonic or Plex isn't going to be too disruptive to family members.

125
00:10:25,000 --> 00:10:33,000
But your sister may have been a lot more upset if it was her email and it was a workday or she was trying to, say, get a household on a Saturday and then all of a sudden she can't do her email.

126
00:10:33,000 --> 00:10:35,000
Then it really matters.

127
00:10:35,000 --> 00:10:41,000
Indeed, it does. So, talking of stuff that matters, container updates.

128
00:10:41,000 --> 00:10:43,000
I'm a bit allergic to Watchtower.

129
00:10:43,000 --> 00:10:50,000
You know, this is a program that will automatically go and check for updates for you on new versions of containers.

130
00:10:50,000 --> 00:10:52,000
Why is that? Because I don't mind Watchtower.

131
00:10:52,000 --> 00:10:56,000
I was curious, is it just too much for what you want?

132
00:10:56,000 --> 00:11:02,000
Well, I don't like stuff updating if I'm not there to babysit it because of stuff like we just talked about, you know.

133
00:11:02,000 --> 00:11:03,000
Yep.

134
00:11:03,000 --> 00:11:05,000
So, let's say, for example, Plex auto updates.

135
00:11:05,000 --> 00:11:15,000
And for some reason there's a bug in Plex with transcoding, speaking from experience here, where it suddenly just won't transcode and you're like, well, I didn't touch it.

136
00:11:15,000 --> 00:11:17,000
Why would it change?

137
00:11:17,000 --> 00:11:19,000
You know, I haven't done anything.

138
00:11:19,000 --> 00:11:24,000
Because, you know, the first question as a support person you want to ask the customer is, what's changed?

139
00:11:24,000 --> 00:11:25,000
What's changed?

140
00:11:25,000 --> 00:11:31,000
And if you aren't there to kind of marshal those changes, I do have experience of it going bad.

141
00:11:31,000 --> 00:11:39,000
Thus, I never really recommend something like Watchtower to anybody because of that kind of, it's too hands off.

142
00:11:39,000 --> 00:11:49,000
But what I thought was cool as I came across in one of the Discord servers, I mean, I think it was the Linux server one, of this thing called dn, which is a container update notifier.

143
00:11:49,000 --> 00:11:50,000
Yeah.

144
00:11:50,000 --> 00:11:57,000
And also a set of command line tools to help you manage the update states of your containers, which is also very handy.

145
00:11:57,000 --> 00:11:59,000
We both gave this a go.

146
00:11:59,000 --> 00:12:02,000
It's funny because I think we're going to have different takes on this.

147
00:12:02,000 --> 00:12:07,000
I ended up feeling like it wasn't enough and I didn't particularly like it enough to keep using it.

148
00:12:07,000 --> 00:12:10,000
I personally don't see the point.

149
00:12:10,000 --> 00:12:19,000
You know, I will just do a docker compose pull and then I can see the 10 or so containers, all 15 containers that are updating all at once.

150
00:12:19,000 --> 00:12:20,000
Yeah.

151
00:12:20,000 --> 00:12:22,000
And if I care enough, I can go and look at the change logs.

152
00:12:22,000 --> 00:12:27,000
But most of the time I don't run latest anyway, so I don't really worry too much.

153
00:12:27,000 --> 00:12:33,000
I could see this being useful if you didn't have a lot of your setup based around docker compose.

154
00:12:33,000 --> 00:12:35,000
I could see being useful in that scenario.

155
00:12:35,000 --> 00:12:42,000
I, like you, think that it's so much simpler to just get all of this stuff down and docker compose and then manage it that way.

156
00:12:42,000 --> 00:12:47,000
And like you, I like to stay up to date, but I like to be the one doing those updates.

157
00:12:47,000 --> 00:12:49,000
I am such a nerd.

158
00:12:49,000 --> 00:12:50,000
I actually even enjoy doing it.

159
00:12:50,000 --> 00:12:56,000
I enjoy SSHing in and updating Plex and an updating sync thing and updating all of my containers.

160
00:12:56,000 --> 00:12:57,000
I love doing it.

161
00:12:57,000 --> 00:12:58,000
I love watching it.

162
00:12:58,000 --> 00:12:59,000
I love testing it afterwards.

163
00:12:59,000 --> 00:13:03,000
It's almost a form of video games for me.

164
00:13:03,000 --> 00:13:04,000
Go on, admit it.

165
00:13:04,000 --> 00:13:06,000
You're an Arch user at heart, really.

166
00:13:06,000 --> 00:13:08,000
I love updates, man.

167
00:13:08,000 --> 00:13:10,000
I got a few minutes on an Arch box.

168
00:13:10,000 --> 00:13:15,000
I'll sit down there and I'll bring up the terminal and I'll run a Pacman SYU and I'll check for updates.

169
00:13:15,000 --> 00:13:16,000
Me too.

170
00:13:16,000 --> 00:13:17,000
It's like muscle memory.

171
00:13:17,000 --> 00:13:19,000
I'll just sit down and just type yay these days.

172
00:13:19,000 --> 00:13:20,000
I don't know.

173
00:13:20,000 --> 00:13:26,000
There's something about the hands-on approach to updates that I enjoy that I have the luxury of it,

174
00:13:26,000 --> 00:13:33,000
that nothing I'm doing is so critical that I need to automate it or that the scale is so massive that it's not even an option.

175
00:13:33,000 --> 00:13:39,000
I mean, for me, all in across all my systems, I'm probably around 20 containers, right?

176
00:13:39,000 --> 00:13:41,000
We're not talking a massive amount here.

177
00:13:41,000 --> 00:13:43,000
Spread across 47 pies, though.

178
00:13:43,000 --> 00:13:44,000
Yeah.

179
00:13:44,000 --> 00:13:45,000
I don't even find that to be burdensome.

180
00:13:45,000 --> 00:13:47,000
I actually enjoy it.

181
00:13:47,000 --> 00:13:51,000
I just go with Docker Compose and the nice thing about Docker Compose to remember, too,

182
00:13:51,000 --> 00:13:56,000
is you can put a bunch of services in a single compose file, but you can just call that one image.

183
00:13:56,000 --> 00:14:02,000
So for me, I might have five different media services in one Docker compose file,

184
00:14:02,000 --> 00:14:06,000
but sometimes I'll just pull the Plex image and just do that update.

185
00:14:06,000 --> 00:14:13,000
However, if I didn't use that, if that wasn't my approach or if I wanted something to sort of check my math,

186
00:14:13,000 --> 00:14:17,000
then I could see the use of a tool like like Dwyn or Dwyn.

187
00:14:17,000 --> 00:14:18,000
Dion, I think it is.

188
00:14:18,000 --> 00:14:24,000
So it stands for Docker Image Update Notifier, and it's a client application written in Go,

189
00:14:24,000 --> 00:14:28,000
which is delivered as a single executable and or a Docker image.

190
00:14:28,000 --> 00:14:29,000
It's very simple to use.

191
00:14:29,000 --> 00:14:31,000
That part I like about it.

192
00:14:31,000 --> 00:14:36,000
If you've got any containers up before, you can get this thing up and going and use it.

193
00:14:36,000 --> 00:14:38,000
linode.com slash SSH.

194
00:14:38,000 --> 00:14:41,000
Linode is the largest independent cloud provider.

195
00:14:41,000 --> 00:14:44,000
It's who I use to spin up any infrastructure I need.

196
00:14:44,000 --> 00:14:48,000
Alex and I will often mess around with Linode's just for test boxes on this here show.

197
00:14:48,000 --> 00:14:53,000
I'll get email notifications of Alex creating and destroying machines.

198
00:14:53,000 --> 00:14:55,000
Oh, he's doing something for the show again.

199
00:14:55,000 --> 00:14:57,000
And it's just great to have that kind of flexibility.

200
00:14:57,000 --> 00:15:02,000
And if you want something for a personal blog or portfolio, you could absolutely use it for that.

201
00:15:02,000 --> 00:15:04,000
They have pricing around five dollars a month.

202
00:15:04,000 --> 00:15:05,000
It'll make that a snap.

203
00:15:05,000 --> 00:15:11,000
But they also are ready to scale up to millions of users and be the critical business infrastructure you need.

204
00:15:11,000 --> 00:15:13,000
And they have tools to make all of this possible.

205
00:15:13,000 --> 00:15:17,000
Like, of course, their cloud dashboard, the DNS manager.

206
00:15:17,000 --> 00:15:21,000
One of the areas that I find to be surprisingly simple is the storage management.

207
00:15:21,000 --> 00:15:28,000
Either if you're just adding block storage to a machine or if you're going to go with the object storage, which is fantastic.

208
00:15:28,000 --> 00:15:35,000
If you're not familiar with S3 compatible object storage, if you just need file storage up in the quote unquote cloud,

209
00:15:35,000 --> 00:15:38,000
it's maybe something you could generate a public URL for.

210
00:15:38,000 --> 00:15:44,000
But you don't need to go through the hassle of setting up a web server or an FTP server or SFTP into something.

211
00:15:44,000 --> 00:15:45,000
You just need the file storage.

212
00:15:45,000 --> 00:15:47,000
Object storage is great for that.

213
00:15:47,000 --> 00:15:54,000
It's also a great way to power something like a static website, which, again, keeping it simple makes it easy to manage.

214
00:15:54,000 --> 00:15:56,000
And it's great for gamers as well.

215
00:15:56,000 --> 00:15:59,000
With one click, you can deploy a Minecraft server or CSGO server.

216
00:15:59,000 --> 00:16:07,000
And with their five dollar a month machine, it's really easy and not very costly to set up something like an SSH jump post or a wire guard server.

217
00:16:07,000 --> 00:16:12,000
And every plan comes with Linode's amazing human powered customer support.

218
00:16:12,000 --> 00:16:21,000
If you need help, someone will pick up the phone and respond to your email or reply 24 hours a day, seven days a week, 365.

219
00:16:21,000 --> 00:16:25,000
Linode started in 2003 as one of the first companies in cloud computing.

220
00:16:25,000 --> 00:16:28,000
Three years before AWS.

221
00:16:28,000 --> 00:16:35,000
And they're still to this day 30 to 50 percent cheaper than AWS or Google Cloud or Azure.

222
00:16:35,000 --> 00:16:39,000
And their dashboard is infinitely simpler to use while the power is there.

223
00:16:39,000 --> 00:16:43,000
And they still give you full access to everything on the back end.

224
00:16:43,000 --> 00:16:47,000
That's one of the things as a longtime Linux user I really appreciate about Linode.

225
00:16:47,000 --> 00:16:53,000
There's so many things I could go on and on about, but probably the best way to get started is to go to linode.com slash SSH.

226
00:16:53,000 --> 00:16:57,000
Get a one hundred dollar sixty day credit on a new Linode account and get started.

227
00:16:57,000 --> 00:17:01,000
It's a great way to learn. It's a great way to build infrastructure and so much more.

228
00:17:01,000 --> 00:17:06,000
Just go to Linode dot com slash SSH. Get that one hundred dollar sixty day credit for your new account.

229
00:17:06,000 --> 00:17:13,000
And a big thank you to Linode for sponsoring the self hosted program. Linode dot com slash SSH.

230
00:17:13,000 --> 00:17:17,000
Well, Kevin and Patricia, welcome to the self hosted podcast. Hello. Thanks for having us.

231
00:17:17,000 --> 00:17:23,000
Well, hello. So, Kevin, will you kick us off with what's great about the new release of traffic?

232
00:17:23,000 --> 00:17:28,000
Yeah, well, I think we're talking about traffic 2.3 here, which just came out last week.

233
00:17:28,000 --> 00:17:37,000
We are. So the great thing about traffic 2.3 is we've introduced something which the community has been clamoring for.

234
00:17:37,000 --> 00:17:41,000
I'm fairly certain almost three years now, maybe two.

235
00:17:41,000 --> 00:17:51,000
But that is plugins. And that's the idea that when a request comes into traffic and before it goes to the service on the other side of traffic,

236
00:17:51,000 --> 00:18:01,000
that it's that that your instance of traffic is trying to route that that data as it gets passed through a handler or a piece of middleware.

237
00:18:01,000 --> 00:18:08,000
And this could do things like add headers, remove headers, block the request based on some criteria.

238
00:18:08,000 --> 00:18:13,000
And there's all kinds of things that you can do with the request before it gets to its endpoint.

239
00:18:13,000 --> 00:18:18,000
And the users wanted a way to be able to build their own plugins,

240
00:18:18,000 --> 00:18:25,000
install them in the traffic and modify or change their request in some way, shape or form.

241
00:18:25,000 --> 00:18:34,000
Now, the only way you could do that before is that you would literally have to fork traffic and write the plugin yourself and compile traffic

242
00:18:34,000 --> 00:18:40,000
and ship that binary to your server or, you know, wherever you're you're hosting traffic to run in your environment.

243
00:18:40,000 --> 00:18:46,000
But today, now with the release of 2.3, users are able to.

244
00:18:46,000 --> 00:18:55,000
Write their plugin and go host that code in GitHub and instruct their traffic instance to pull that down

245
00:18:55,000 --> 00:19:04,000
and traffic will run that code in an interpreter like a go interpreter so you don't have to compile it and it will execute it.

246
00:19:04,000 --> 00:19:08,000
And you can do all kinds of crazy stuff with it. That's fantastic.

247
00:19:08,000 --> 00:19:14,000
These plugins look super cool. You've got this, I guess, marketplace now for plugins.

248
00:19:14,000 --> 00:19:22,000
Yeah, we called it a marketplace because we didn't necessarily want to call it a store or a or a place.

249
00:19:22,000 --> 00:19:31,000
It's really just a centralized repository for people to be able to go and look up plugins that they may want to install.

250
00:19:31,000 --> 00:19:44,000
And this marketplace is a curated list of plugins because what we end up doing is we scrape GitHub looking for traffic plugin topics.

251
00:19:44,000 --> 00:19:52,000
And as long as the user has uploaded that code to GitHub with the right files and it configured correctly

252
00:19:52,000 --> 00:20:02,000
and traffic pilot can ingest that and validate it, it's going to put that plugin automatically in the marketplace so people can can go and download it.

253
00:20:02,000 --> 00:20:10,000
Now, the other thing that that the marketplace ensures is that the code that was ingested doesn't change.

254
00:20:10,000 --> 00:20:17,000
So when you publish it like a version 1.01 and you tag it in GitHub.

255
00:20:17,000 --> 00:20:27,000
Traffic pilot is going to create a hash of that release, and if it changes, if the 1.01 ever gets that tag gets deleted

256
00:20:27,000 --> 00:20:37,000
and then somebody pushes new code to it under that same tag and that changes, traffic will invalidate that and our pilot will invalidate that.

257
00:20:37,000 --> 00:20:42,000
Sounds very similar to the Docker container char type model, no?

258
00:20:42,000 --> 00:20:51,000
The idea is similar is that once you publish something, you should be able to reference that to a particular version in a hosted repository.

259
00:20:51,000 --> 00:20:57,000
And that way you can be ensured that what you're running is actually what has been published.

260
00:20:57,000 --> 00:21:00,000
It's for security reasons, but that's one of the main reasons we did that.

261
00:21:00,000 --> 00:21:09,000
Declarative versioning is super important, and I think it's often overlooked. A lot of people just run the tag latest for their containers or anything related to them.

262
00:21:09,000 --> 00:21:12,000
So I think that's a really nice feature.

263
00:21:12,000 --> 00:21:20,000
Now, what I'm curious about right now is the difference between a plugin and this concept of middleware that traffic has.

264
00:21:20,000 --> 00:21:35,000
The only difference is terminology. Middlewares is what we refer to as the components in traffic that would mutate or process a request on your behalf within traffic.

265
00:21:35,000 --> 00:21:46,000
A plugin is simply the ability for the end user to build their own middleware and install it into traffic to be able to perform a similar use case.

266
00:21:46,000 --> 00:21:57,000
One of them is I built a plugin to deny access to a service based on an IP list.

267
00:21:57,000 --> 00:22:03,000
So let's say you wanted to block everything from China or from Comcast because what's the difference?

268
00:22:03,000 --> 00:22:18,000
Then you would say, all right, we'll block all these IPs from Comcast and all of a sudden traffic's going to stop any request from making it to your service if somebody makes a request from the Comcast IP block.

269
00:22:18,000 --> 00:22:21,000
That's really interesting. I think Chris, you're on Comcast, aren't you?

270
00:22:21,000 --> 00:22:31,000
Yeah, and I hate it every single day. I mean, at least it's actually been fairly solid, but the performance is never what I want it to be.

271
00:22:31,000 --> 00:22:35,000
Kevin, help me understand how Pilot fits in with all of this.

272
00:22:35,000 --> 00:22:47,000
So one of the biggest issues that we've had historically with traffic over its lifetime is one, we want to better understand how our users are actually using our software.

273
00:22:47,000 --> 00:23:02,000
And to be able to do that, we need to have some kind of basic reporting or checking in ability to say, okay, well, this user is using five instances of traffic, and maybe they're using the Kubernetes provider and the Docker swarm provider.

274
00:23:02,000 --> 00:23:06,000
And there's not many people using the Redis provider, right?

275
00:23:06,000 --> 00:23:13,000
Well, we have no idea how to determine whether or not we should continue development on the Redis provider.

276
00:23:13,000 --> 00:23:21,000
And having that usage data would be critical in helping us better understand how to or where to focus internal development efforts on traffic.

277
00:23:21,000 --> 00:23:25,000
So Pilot is aimed at solving a couple of different problems.

278
00:23:25,000 --> 00:23:29,000
One is how do we entice our users to give us that data?

279
00:23:29,000 --> 00:23:39,000
How can we encourage them and say, hey, please provide us with this really critical information to better understand your environment so we can improve our product?

280
00:23:39,000 --> 00:23:43,000
And in doing so, what can we give you in exchange, right?

281
00:23:43,000 --> 00:23:48,000
So what we decided on was, well, I didn't decide on it.

282
00:23:48,000 --> 00:24:01,000
The engineers and the founder, Emil, decided on was we chose to give end users free monitoring of their traffic instances.

283
00:24:01,000 --> 00:24:07,000
So if any of those instances ever become unavailable, Pilot will email them and notify them about it.

284
00:24:07,000 --> 00:24:13,000
And also we do basic metric collection on the performance of your instances.

285
00:24:13,000 --> 00:24:20,000
So things like what's your average latency, how many connections are being processed every hour,

286
00:24:20,000 --> 00:24:27,000
as well as how many connections are open over the course of that hour.

287
00:24:27,000 --> 00:24:30,000
And we will track metrics over days, weeks and months.

288
00:24:30,000 --> 00:24:42,000
And we do that all for free, but the tradeoff is that you have to connect your traffic instance to Pilot and send us that data so we can better understand how traffic is being used.

289
00:24:42,000 --> 00:24:48,000
So this SaaS offering, it's something in the same space as Prometheus or Datadog or something like that, right?

290
00:24:48,000 --> 00:24:54,000
Obviously, Prometheus being a self-hosted monitoring tool and Datadog being a SaaS service.

291
00:24:54,000 --> 00:25:03,000
Whenever anybody says it's free, you just have to send us your data. That just raises a very small little red flag for me.

292
00:25:03,000 --> 00:25:07,000
What are you planning to do with that data besides everything you just said?

293
00:25:07,000 --> 00:25:17,000
Well, everything is anonymized, so we don't get any information about how your services are configured or how your providers are configured.

294
00:25:17,000 --> 00:25:26,000
We just send the basic metrics around timing as well as open connection counts.

295
00:25:26,000 --> 00:25:32,000
So you can look at the code and see exactly what data we're sending, so we're very transparent about that.

296
00:25:32,000 --> 00:25:44,000
But in terms of how we're going to use that data, there's nothing in that data that is identifiable outside of how we can better improve our product, essentially.

297
00:25:44,000 --> 00:25:58,000
I think the big difference, too, with Datadog and Prometheus is those are highly granular and also they're expensive in a couple of ways.

298
00:25:58,000 --> 00:26:02,000
One, Datadog is expensive and it's going to hit your pocketbook.

299
00:26:02,000 --> 00:26:14,000
And Prometheus is expensive and as soon as you start throwing any kind of scale at Prometheus, it gets complicated and it gets hard to run and scale out.

300
00:26:14,000 --> 00:26:27,000
So our idea is to keep things really basic for the majority of the use cases out there so that, number one, we're not going to be handling a ton of data.

301
00:26:27,000 --> 00:26:33,000
We send data at a very limited rate.

302
00:26:33,000 --> 00:26:37,000
We're not collecting metrics every two seconds or whatever.

303
00:26:37,000 --> 00:26:42,000
I think we're collecting metrics every 10 or 15 minutes or something like that.

304
00:26:42,000 --> 00:26:48,000
And it's not meant to be as a replacement for Datadog or Prometheus.

305
00:26:48,000 --> 00:26:57,000
It's just a tool that helps you monitor your instances for basic availability and for security alerts.

306
00:26:57,000 --> 00:27:02,000
Nice. So it's not a replacement. It's there to augment. Yeah, that's nice.

307
00:27:02,000 --> 00:27:11,000
If I understand correctly, because it's integrated at the traffic level on the host, so it has a particular keen insight, too, on what traffic is going through that machine.

308
00:27:11,000 --> 00:27:28,000
Yeah, I mean, you could say that, yeah, but at the same time, we're not necessarily focused on sending telemetry data around what services are being communicated with or what the endpoints are.

309
00:27:28,000 --> 00:27:32,000
That would, I think, be a little too granular.

310
00:27:32,000 --> 00:27:44,000
So that's where you start getting security concerns because nobody wants to send or publish their endpoints. It's just one area where people could easily misuse that data.

311
00:27:44,000 --> 00:27:46,000
Security through obscurity, right?

312
00:27:46,000 --> 00:27:54,000
So with the announcement, there was some stuff in there about Kubernetes support and K3S support.

313
00:27:54,000 --> 00:28:06,000
Right now, K3S will install traffic 1.7. The problem with 1.7 is that 1.7 is slated for end of life, I think, next year.

314
00:28:06,000 --> 00:28:16,000
And we're not working towards bringing in the latest and greatest Kubernetes objects into that release of traffic.

315
00:28:16,000 --> 00:28:25,000
Things like Kubernetes Ingress and the newer service API that Google is working on is going to be traffic 2.0 only.

316
00:28:25,000 --> 00:28:33,000
That's the direction that Kubernetes is moving is, at first, people were like, yay, CRDs, this is great.

317
00:28:33,000 --> 00:28:38,000
And then all of a sudden, people were like, CRDs are terrible. Who wants to manage all of this?

318
00:28:38,000 --> 00:28:57,000
So what the fine engineers at Google decided to do is work on an upgraded or a better Ingress model for use that abstracts away a lot of what we've done with the CRDs,

319
00:28:57,000 --> 00:29:11,000
which is things like TCP routers, UDP routers, as well as more refined ability to do path operations and regex operations on those objects,

320
00:29:11,000 --> 00:29:17,000
abstract it out to a vendor agnostic, if you will, implementation,

321
00:29:17,000 --> 00:29:30,000
and allow people to not necessarily be reliant upon CRDs or specific annotations that are tied to any individual Ingress type,

322
00:29:30,000 --> 00:29:40,000
but abstract it out into that service API where literally say, I just want to use NGINX now or I want to use a console.

323
00:29:40,000 --> 00:29:48,000
Then you just swap your Ingress provider and you don't have to change annotations. You don't have to install new CRDs and migrate all that.

324
00:29:48,000 --> 00:29:52,000
You just literally change the underlying layer. That's the goal, at least.

325
00:29:52,000 --> 00:30:01,000
Both of you showed up on our radar, not so much because of the news about traffic 2.3, although that did put you on our radar as well, but also because of the community.

326
00:30:01,000 --> 00:30:07,000
So I hear there's ambassadors involved with traffic. Patricia, can you explain to me what the ambassador program is?

327
00:30:07,000 --> 00:30:17,000
The traffic ambassador program, when it comes down to it, is really a way to reward contributors of code content or community,

328
00:30:17,000 --> 00:30:28,000
such as creating meetups or speaking to people about their knowledge of traffic and then bringing them all together so they can share information and become besties.

329
00:30:28,000 --> 00:30:37,000
And so this program was launched about a year and a half ago. If I recall, it was right before KubeCon, one of the KubeCons.

330
00:30:37,000 --> 00:30:48,000
So the way to get involved is basically to if you write content or contribute code or do some speaking spots,

331
00:30:48,000 --> 00:30:59,000
then get in our radar either by emailing me or usually it comes through Twitter, someone on ping. And I also monitor for new content that comes out.

332
00:30:59,000 --> 00:31:04,000
And by the way, this program is like Kevin mentioned, this program is definitely a work in progress,

333
00:31:04,000 --> 00:31:12,000
which with much more that we're creating to refine it and also make clearer offers to more of the community so they know how to get involved.

334
00:31:12,000 --> 00:31:20,000
I'll tell you one of the things that I appreciate about the program is that when you migrated from traffic one to version two,

335
00:31:20,000 --> 00:31:26,000
there was a lot of restructuring how labels had to be applied and some of the terminology changed and stuff like that.

336
00:31:26,000 --> 00:31:34,000
Documentation is hard. We all know this. We all work in software or related technologies and documentation is one of the hardest things.

337
00:31:34,000 --> 00:31:39,000
And I think it's a really smart move what traffic is doing trying to leverage the community like this.

338
00:31:39,000 --> 00:31:52,000
One of our listeners, the real orange one on Discord, he is prolific at writing about traffic and he's just done a 2000 word traffic hello world getting started guide.

339
00:31:52,000 --> 00:31:57,000
So there's all these kind of cool things that the community are doing for you, which I think is really, really neat.

340
00:31:57,000 --> 00:32:02,000
Yes, I agree with you. And I mean, that's actually the foundation of it.

341
00:32:02,000 --> 00:32:09,000
And our goal is to create something that makes it feel rewarding rather than just transactional or extractionary.

342
00:32:09,000 --> 00:32:21,000
That's really where I'm putting a lot of my energy is like not just ways to continue this like machine of community contributed everything, but really to create some value.

343
00:32:21,000 --> 00:32:26,000
So there's a stoke factor there, right? Like meeting each other from around the world.

344
00:32:26,000 --> 00:32:40,000
And also one of the benefits when you have stuff that passes the review section as you're invited to a private Discord server and the benefits of that are, you know, there's often real time help.

345
00:32:40,000 --> 00:32:55,000
And we do offer help in our community forum, but in the private Discord server, you get really like great access to other people who are very passionate about using traffic and our product suite like the real orange one, Jake Howard.

346
00:32:55,000 --> 00:33:09,000
So, yeah, I love to hear your perspective and appreciate that because we are going into V2.0 of the community section here and I want to make it really wonderful for the next phase.

347
00:33:09,000 --> 00:33:14,000
So for someone looking to get started with traffic, what's the best resource you can point them at?

348
00:33:14,000 --> 00:33:22,000
We're constantly curating dozens if not hundreds of articles every month, blog posts and YouTube videos from our community.

349
00:33:22,000 --> 00:33:32,000
And we have a monthly newsletter that we send out. You can sign up to that. We just want to keep you informed about the stuff that's happening in the community.

350
00:33:32,000 --> 00:33:38,000
For instance, we have a hackathon coming up in October 20th. We're giving away gift cards and cool swag.

351
00:33:38,000 --> 00:33:44,000
And all you have to do is come join us and build some plugins. We want to build a library with all this stuff.

352
00:33:44,000 --> 00:33:53,000
I mean, I have a I have a spreadsheet with almost just this year alone, probably three or four hundred blog posts and videos.

353
00:33:53,000 --> 00:34:03,000
I want to be able to upload that somewhere and for our community to be able to search for it and be able to ingest it the way they want, not necessarily have to wait every month for a newsletter.

354
00:34:03,000 --> 00:34:16,000
So if anybody out there who's listening knows of software or tools that will help us do that because I don't have time for that, please let me know, because that's something that we want to we want to get out there for our users.

355
00:34:16,000 --> 00:34:25,000
This is self-hosted, right? So I'm pretty sure some of some of our listeners will have some software in mind around something like an RSS reader or something like that.

356
00:34:25,000 --> 00:34:37,000
Yeah. Well, Kevin and Patricia, it's exciting to watch this kind of grow. Your conversation here has reframed my appreciation of traffic and where it's at.

357
00:34:37,000 --> 00:34:40,000
And it seems like it's it's in a pretty neat space right now and it's growing like crazy.

358
00:34:40,000 --> 00:34:46,000
So thank you both for coming on. We'll have links to the traffic's Twitter in our show notes, as well as the news announcements.

359
00:34:46,000 --> 00:34:48,000
And then what's the best way to get that newsletter?

360
00:34:48,000 --> 00:34:56,000
It would be to sign up if you just go to traffic.io. There's a little spot where you can put in your email to get the newsletter.

361
00:34:56,000 --> 00:35:02,000
And and Chris, by the way, you technically now are eligible to become an ambassador.

362
00:35:02,000 --> 00:35:05,000
So, well, I do like a nice title.

363
00:35:05,000 --> 00:35:11,000
Hey, now, I thought that was just my special title.

364
00:35:11,000 --> 00:35:14,000
We'll both be ambassadors. Oh, we should make that a thing, Alex. I like it.

365
00:35:14,000 --> 00:35:19,000
Oh, listen, I know how to level this up. So I'm going to I'm going to make you chase each other for a while.

366
00:35:19,000 --> 00:35:23,000
So that's pretty clever. All right. Well, thank you both for coming on.

367
00:35:23,000 --> 00:35:26,000
Thank you so much. Thank you for having us.

368
00:35:26,000 --> 00:35:34,000
Cloudfree.shop built by a member of our community and now a place where you can buy a wide range of smart devices that come pre flashed with Tasmota.

369
00:35:34,000 --> 00:35:39,000
No cloud connection ever required. They'll run as long as the hardware functions.

370
00:35:39,000 --> 00:35:42,000
It's the ultimate smart plug for home assistant and a cloud free life.

371
00:35:42,000 --> 00:35:46,000
And this is better than ever because it's getting harder and harder to do some of this flashing.

372
00:35:46,000 --> 00:35:51,000
And if you use the promo code self-hosted at checkout, you can support the show and you get a dollar off per plug.

373
00:35:51,000 --> 00:35:56,000
Go get yourself a smart plug that never requires the cloud. And it's pre flashed with Tasmota.

374
00:35:56,000 --> 00:36:00,000
Cloudfree.shop. Well, I heard you talking about it online.

375
00:36:00,000 --> 00:36:05,000
The new Chromecast, of course, is what I'm talking about. And I managed to get one from Best Buy.

376
00:36:05,000 --> 00:36:11,000
I had to go in person, you know, like a caveman and put my mask on and all that stuff.

377
00:36:11,000 --> 00:36:14,000
But I've actually got one in hand and I thought I'd give you my experiences.

378
00:36:14,000 --> 00:36:17,000
Oh, you mean the new Chromecast with Google TV, Alex?

379
00:36:17,000 --> 00:36:25,000
Yeah, whatever they're calling it this week. I mean, Google's branding and naming. Oh, yeah, it's just so chaotic.

380
00:36:25,000 --> 00:36:36,000
OK, but I'm really glad you got one because I think most of the reviews I'm going to see online are going to be from the perspective of someone who just subscribes to like every frickin streaming service.

381
00:36:36,000 --> 00:36:45,000
Because when I look at this thing from the outside, what I see is something that is built and designed to put forward streaming options.

382
00:36:45,000 --> 00:36:53,000
And as everybody on this show knows, I like to stream my stuff locally over the land. I probably won't be using most of that.

383
00:36:53,000 --> 00:36:58,000
Is it a decent interface for somebody like me who doesn't plan to use those streaming services, at least directly?

384
00:36:58,000 --> 00:37:02,000
Yes, with some caveats. Ah, OK.

385
00:37:02,000 --> 00:37:12,000
Firstly, it's really performant, so I was expecting it to feel a little cheap, you know, like frame rate stutters and, you know, just little things.

386
00:37:12,000 --> 00:37:18,000
The fact that they are charging $50 for the Chromecast and the remote as well.

387
00:37:18,000 --> 00:37:24,000
So for the first time, Chromecast actually have a, you know, a little remote stick that you have in your hand.

388
00:37:24,000 --> 00:37:27,000
Right, so no phone required to actually operate it.

389
00:37:27,000 --> 00:37:32,000
It's kind of like a Roku remote. It feels it's a similar size. It's got a similar number of buttons and all that.

390
00:37:32,000 --> 00:37:38,000
But, you know, it feels cheap. It's made of plastic. It doesn't weigh very much, but it gets the job done.

391
00:37:38,000 --> 00:37:47,000
You can obviously use apps on your phone as well. I was very pleased. It's basically a cheap version of an NVIDIA Shield.

392
00:37:47,000 --> 00:37:54,000
Does it have the Play Store? Yes. Hmm. So were you able to install traditional Android TV apps?

393
00:37:54,000 --> 00:38:01,000
It was. Kodi? Check. MB? Check. Jellyfin? Check. Plex? Check. All of the above.

394
00:38:01,000 --> 00:38:08,000
I haven't managed to get the WireGuard stuff working yet, but I think that's more on me than it is on the Chromecast.

395
00:38:08,000 --> 00:38:13,000
I need that for my iPlayer stuff. So far as I can tell, there is no Ethernet option.

396
00:38:13,000 --> 00:38:19,000
I'm happy to be proved wrong on that, but it's powered by a USB-C plug that goes in.

397
00:38:19,000 --> 00:38:24,000
So there's probably some dongle that you can get that would enable Ethernet. I just haven't found it yet.

398
00:38:24,000 --> 00:38:35,000
Now, huge drawback, in my opinion, of this new model, the old ones you could power exclusively off most TVs' USB ports because they sipped electricity.

399
00:38:35,000 --> 00:38:39,000
Yeah, I noticed this one ships and all of the imagery shows it plugged into a power adapter.

400
00:38:39,000 --> 00:38:47,000
Yeah, I tried it plugged into my TV and it just gave me this boodoodoo noise saying it needs more power.

401
00:38:47,000 --> 00:38:52,000
You know how that Raspberry Pi puts the little lightning bolt in the corner when it's not getting enough juice?

402
00:38:52,000 --> 00:38:56,000
It was basically that except for the fact the Chromecast didn't function.

403
00:38:56,000 --> 00:39:01,000
As soon as I plugged it into the seven and a half watt power brick that comes in the box, we were all good.

404
00:39:01,000 --> 00:39:06,000
But in terms of a travel device, that's now a remote I've got to take with me.

405
00:39:06,000 --> 00:39:14,000
It's a power brick. It's another cable, as well as the Chromecast, compared to the old Chromecast, which was Chromecast and USB cable.

406
00:39:14,000 --> 00:39:17,000
There's a couple of extra things to consider there.

407
00:39:17,000 --> 00:39:19,000
Indeed. Yeah, that actually does limit my use cases for it.

408
00:39:19,000 --> 00:39:24,000
The Google Assistant is very in your face, as you would expect from a modern Google product.

409
00:39:24,000 --> 00:39:26,000
It's got its own dedicated button on the remote.

410
00:39:26,000 --> 00:39:36,000
Voice search works really, really well if you are not using a self-hosted platform like a Plex, like an MB, like a Jellyfin or a Kodi.

411
00:39:36,000 --> 00:39:43,000
If you want to search Amazon Prime, if you want to search Netflix, YouTube, whatever, the voice search is fantastic.

412
00:39:43,000 --> 00:39:50,000
You can say, take me to the latest episode of whatever TV show you're watching and boom, it will just start playing.

413
00:39:50,000 --> 00:39:57,000
But if you want to search Plex, you have to go into Plex to get into that kind of walled garden, which is disappointing.

414
00:39:57,000 --> 00:40:01,000
You do wonder if it's an API Plex could write to with an app update.

415
00:40:01,000 --> 00:40:04,000
I don't know. I mean, I single Plex out, perhaps unfairly.

416
00:40:04,000 --> 00:40:09,000
It's not a Plex limitation, I suspect. It's more of a Google limitation.

417
00:40:09,000 --> 00:40:23,000
Because as you said at the start, as you alluded to, I think the reason they've been able to hit this $50 price point, which is phenomenal, I must say, for this level of performance in a device, it's basically a loss leader. It's got to be.

418
00:40:23,000 --> 00:40:27,000
So the question becomes now, would you buy an NVIDIA Shield after this?

419
00:40:27,000 --> 00:40:33,000
You know, like your main television, would you buy an NVIDIA Shield for that if it were to die or would you just stick with this?

420
00:40:33,000 --> 00:40:37,000
Interesting, because I've got a couple of Shields, one upstairs and one downstairs.

421
00:40:37,000 --> 00:40:56,000
And I think this Chromecast would do great in like a bedroom setting where I'm not interested in like the highest fidelity and I don't necessarily care too much about the fact it doesn't have Ethernet and can't be a Plex server and all that kind of stuff that the Shield can do.

422
00:40:56,000 --> 00:41:04,000
I don't really use my Shields for game streaming and you're not going to be using these Chromecasts for game streaming either because Stadia is not supported at launch.

423
00:41:04,000 --> 00:41:08,000
Nope. Burn. Unbelievable. Just so Google.

424
00:41:08,000 --> 00:41:15,000
The point you made in LAN, you know, about how Google is so siloed is just it's on show for all to see in this product.

425
00:41:15,000 --> 00:41:26,000
Would I buy another Shield? It's an interesting one. I think yes, because I care about codecs and Ethernet and all the things I just listed. I think yes.

426
00:41:26,000 --> 00:41:31,000
I would imagine the Shield must still have a performance advantage. Really?

427
00:41:31,000 --> 00:41:38,000
I wouldn't say it feels like it does. I mean, that really was one of my major first impressions was just how snappy this Chromecast was.

428
00:41:38,000 --> 00:41:45,000
Well, so the Shield then, I think one of the I mean, it has the track record of being a solid supported device by Nvidia for years and getting updates.

429
00:41:45,000 --> 00:41:54,000
But the other area that the Shield is getting a lot of praise that I haven't tested directly is they have a very, very good 4K upscaler.

430
00:41:54,000 --> 00:42:06,000
It's amazing. Yeah. But if you put it on old cartoons and stuff like old Family Guy cartoons or whatever, where, you know, the fidelity of the original source material is very poor.

431
00:42:06,000 --> 00:42:14,000
It's like watching modern South Park. You know, it's it's crisp. It's perfectly, you know, it's it's amazing.

432
00:42:14,000 --> 00:42:24,000
Well, I I'm glad it's decent because, you know, the price point, like you said, is phenomenal. And I think it'll help people that are getting into the space that our show covers.

433
00:42:24,000 --> 00:42:29,000
Get a device that doesn't cost them hundreds of dollars. That's a positive. It's iterative.

434
00:42:29,000 --> 00:42:39,000
This Chromecast is an iterative thing if you're coming from the Shield. But if you're coming from, say, a Roku or original Chromecast original, yeah, it's it's a game changer.

435
00:42:39,000 --> 00:42:48,000
And maybe we'll see updates to apps like MB and Jellyfin and Plex and whatnot that can support this Google TV UI. But at least the apps can still run.

436
00:42:48,000 --> 00:43:02,000
Now, last time we talked about the Home Assistant birthday updates and we talked a little bit about the new Mac app, which lets you do, you know, API level integrations with Home Assistant for things like your webcam on your Mac.

437
00:43:02,000 --> 00:43:11,000
Audio interface state of how useful or like other useful states like if the machine is busy or not, if it's awake, like a lot of really nice things you could build automations around, Alex.

438
00:43:11,000 --> 00:43:16,000
Our community, as wonderful as they always are, have started writing a Linux version.

439
00:43:16,000 --> 00:43:17,000
No, stop it.

440
00:43:17,000 --> 00:43:24,000
Yeah, we're calling it Halcyon app, Home Assistant Linux Companion. We had a little vote on the name in the Discord.

441
00:43:24,000 --> 00:43:32,000
We have a website. It's very, very basic right now. Halcyon.casa, which basically is a link to the GitHub repo.

442
00:43:32,000 --> 00:43:38,000
So if you go to that website and join the Discord, if you're interested, I think we're going to write it in Rust.

443
00:43:38,000 --> 00:43:43,000
I was wondering if you were going to mention that. I love it. That's so great.

444
00:43:43,000 --> 00:43:48,000
Well, this is frickin cool because I had a lot of Mac envy after last episode.

445
00:43:48,000 --> 00:43:56,000
Yeah, we need we need people that can do websites, that can do logos and graphics, that kind of stuff. But we also need people who can actually write the code as well.

446
00:43:56,000 --> 00:44:00,000
So if you're interested in that kind of thing, please join us over on the Discord.

447
00:44:00,000 --> 00:44:03,000
Absolutely. We'll have a link in the show notes for that.

448
00:44:03,000 --> 00:44:10,000
Also, while we're talking about community, thank you to our members, our site reliability engineers, selfhosted.show slash SRE.

449
00:44:10,000 --> 00:44:19,000
If you would like to join, you support the show, you get a limited ad feed and you get extra content, a whole bonus post show for our memberships.

450
00:44:19,000 --> 00:44:24,000
Selfhosted.show slash SRE. Thank you to our members over there helping us go independent.

451
00:44:24,000 --> 00:44:28,000
Alex, are you on the social media? We should give ourselves some plugsies before we get out of here.

452
00:44:28,000 --> 00:44:34,000
Yes, as always, you can find the show at selfhosted.show slash contact for different ways to get in touch with us.

453
00:44:34,000 --> 00:44:37,000
You can find me on Twitter at ironicbadger.

454
00:44:37,000 --> 00:44:44,000
Fact, I'm at Chris Lass and you can find our sponsor, a cloud guru, just slash a cloud guru at YouTube, Twitter or Facebook.

455
00:44:44,000 --> 00:44:47,000
Any of those. It's easy. Just a slash and a cloud guru.

456
00:44:47,000 --> 00:45:08,000
Thanks for listening, everyone. That was selfhosted.show slash 29.


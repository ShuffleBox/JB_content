1
00:00:00,000 --> 00:00:06,160
Coming up on Self-Hosted 26, we have Mike and Wes join us to discuss the new Docker news.

2
00:00:06,160 --> 00:00:09,120
We talk about freeing your robot vacuum from the cloud.

3
00:00:09,840 --> 00:00:13,600
And Alex really goes for the hard sell on Terraform.

4
00:00:13,600 --> 00:00:14,400
I'm Chris.

5
00:00:14,400 --> 00:00:15,200
And I'm Alex.

6
00:00:15,200 --> 00:00:16,880
And this is Self-Hosted 26.

7
00:00:18,240 --> 00:00:21,680
This episode is brought to you by a cloud guru.

8
00:00:21,680 --> 00:00:23,440
Are you looking to get a high paying career?

9
00:00:23,440 --> 00:00:26,400
Maybe move into the cloud and make some good change?

10
00:00:26,400 --> 00:00:29,840
Well, there's no better place to start than getting a certification.

11
00:00:29,840 --> 00:00:32,960
ACG has helped more than 2 million people scale up on the cloud.

12
00:00:32,960 --> 00:00:35,760
AWS, Azure, and Google Cloud Platform.

13
00:00:36,560 --> 00:00:39,040
Head over to cloudguru.com and get started.

14
00:00:39,040 --> 00:00:43,040
So being a Seattle guy, you probably follow the ins and outs of Microsoft, don't you?

15
00:00:43,680 --> 00:00:44,960
The new Flight Simulator is out.

16
00:00:44,960 --> 00:00:46,080
Oh, is it actually released?

17
00:00:46,080 --> 00:00:48,240
That's why I'm seeing so many screenshots.

18
00:00:48,240 --> 00:00:52,000
I just wasn't sure if it was like extreme hype cycle mode or what.

19
00:00:52,000 --> 00:00:56,000
But I've been seeing people take screenshots of the real world and then compare it to Flight

20
00:00:56,000 --> 00:00:56,800
Simulator.

21
00:00:56,800 --> 00:00:57,920
The hype is real.

22
00:00:57,920 --> 00:01:03,440
They've used Azure and Bing Maps to kind of do machine learning and all this kind of stuff.

23
00:01:03,440 --> 00:01:07,120
And obviously the first thing anybody does in a Flight Simulator is go and try and find

24
00:01:07,120 --> 00:01:08,320
their house, right?

25
00:01:08,320 --> 00:01:13,200
And I'll tell you what, I was able to follow the roads from the local airport near my house,

26
00:01:13,200 --> 00:01:17,680
follow the actual roads, the highways, the small roads, everything, and find my house

27
00:01:17,680 --> 00:01:18,640
in a Flight Simulator.

28
00:01:18,640 --> 00:01:20,720
I could actually see it with my car on the driveway.

29
00:01:20,720 --> 00:01:22,160
It was, it's amazing.

30
00:01:22,160 --> 00:01:24,480
Was it amazing or did it feel slightly creepy?

31
00:01:24,480 --> 00:01:25,760
No, 100% amazing.

32
00:01:25,760 --> 00:01:31,200
Because I remember, you know, Flight Sim 98, 2000, I think 2002 was another one.

33
00:01:32,000 --> 00:01:36,320
And I remember trying to do those things, you know, fly with visual references and stuff

34
00:01:36,320 --> 00:01:40,400
looking out the window and, you know, it was just generated low res garbage.

35
00:01:40,400 --> 00:01:43,760
Whereas now I can actually see and navigate with my eyes.

36
00:01:43,760 --> 00:01:45,520
It's, it's amazing.

37
00:01:45,520 --> 00:01:50,640
Imagine how cool this could be fast forward into the future where cars are driving around

38
00:01:50,640 --> 00:01:55,520
with LiDAR sensors and they're mapping things in real time in a 3D universe.

39
00:01:55,520 --> 00:01:59,760
And then they somehow collected information safely because you know they're going to.

40
00:01:59,760 --> 00:02:02,480
And then they could use that to inform game design.

41
00:02:02,480 --> 00:02:04,400
Now my brain just exploded a bit.

42
00:02:04,400 --> 00:02:06,400
That is in 20 years.

43
00:02:06,400 --> 00:02:12,000
So if you look at the generational leap from Flight Sim 2000 to Flight Sim 2020, Flight

44
00:02:12,000 --> 00:02:14,400
Sim 2040, oh boy.

45
00:02:15,600 --> 00:02:20,720
It's almost as cool as robot vacuums, which I'm wondering how is the robot vacuum life

46
00:02:20,720 --> 00:02:21,520
going for you?

47
00:02:21,520 --> 00:02:22,560
It's great.

48
00:02:22,560 --> 00:02:27,600
You know, there's just a base level of cleanliness that you get from having these machines, these

49
00:02:27,600 --> 00:02:28,720
robots going around.

50
00:02:29,360 --> 00:02:34,640
But what I wanted was the ability to dispatch the robo vac to a specific part of my house,

51
00:02:34,640 --> 00:02:37,040
you know, clean up on aisle five type situation.

52
00:02:37,840 --> 00:02:45,680
And with Valitudo, I've been able to not only free my robo vac from Xiaomi's cloud

53
00:02:45,680 --> 00:02:51,200
clutches, I've also been able to program in some pretty cool stuff like room based

54
00:02:51,200 --> 00:02:52,640
cleanups in Home Assistant.

55
00:02:52,640 --> 00:02:54,400
And it's pretty sweet.

56
00:02:54,400 --> 00:02:55,200
Wow.

57
00:02:55,200 --> 00:02:57,920
I got to see this when we're traveling again.

58
00:02:57,920 --> 00:03:01,280
I have got to see the setup and then I've got to get you to do it at the studio.

59
00:03:02,160 --> 00:03:06,240
Well, lucky for you, Chris, I've written a blog post on this on the topic.

60
00:03:06,240 --> 00:03:06,640
Really?

61
00:03:06,640 --> 00:03:07,920
Well, how lucky is that?

62
00:03:07,920 --> 00:03:10,000
If only there was a place we could link that.

63
00:03:10,000 --> 00:03:11,920
Oh, I know the show notes, Alex.

64
00:03:12,480 --> 00:03:13,680
Yeah, yeah, yeah.

65
00:03:13,680 --> 00:03:14,640
Well, it's pretty cool.

66
00:03:14,640 --> 00:03:17,680
So it uses an open source firmware called Valitudo.

67
00:03:17,680 --> 00:03:24,000
And then you can create in the, it basically turns your robot vacuum into an Ubuntu Linux

68
00:03:24,000 --> 00:03:24,960
computer.

69
00:03:24,960 --> 00:03:27,280
You can SSH into it and all that kind of cool stuff.

70
00:03:27,280 --> 00:03:29,360
But it also presents a web UI.

71
00:03:29,920 --> 00:03:35,360
And that web interface lets you drag certain zones and create and name certain zones based

72
00:03:35,360 --> 00:03:36,080
on coordinates.

73
00:03:36,080 --> 00:03:41,440
And then you can reference those names in Home Assistant automations, create vacuum

74
00:03:41,440 --> 00:03:43,040
cards and with icons and stuff.

75
00:03:43,040 --> 00:03:48,400
So for example, my RoboVac tends to run overnight, but our bedroom doors always closed.

76
00:03:48,400 --> 00:03:50,640
And so what I wanted was, you know, 11 a.m.

77
00:03:50,640 --> 00:03:56,560
or something once we're definitely out of bed and stuff is for it to go and do the bedroom

78
00:03:56,560 --> 00:03:57,840
and 11 a.m.

79
00:03:57,840 --> 00:03:59,760
every morning, it doesn't do the rest of the house.

80
00:03:59,760 --> 00:04:03,840
It literally just goes and finds its way to the bedroom, cleans the bedroom and then goes

81
00:04:03,840 --> 00:04:05,520
back to its charging dock all by itself.

82
00:04:06,960 --> 00:04:07,760
It's so cool.

83
00:04:07,760 --> 00:04:09,520
I love the screenshots in your blog post.

84
00:04:09,520 --> 00:04:11,760
Definitely worth checking out.

85
00:04:11,760 --> 00:04:15,520
We wanted to chat a little bit about Docker today because they've been in the news recently

86
00:04:15,520 --> 00:04:19,440
in a way that impacts the enthusiast and I think the small business market.

87
00:04:19,440 --> 00:04:20,560
And it's something worth chatting.

88
00:04:20,560 --> 00:04:25,440
So we wanted to bring on two prime individuals to discuss this topic.

89
00:04:25,440 --> 00:04:30,640
Mr. Michael Dominic from the recently returned Coder Radio podcast is joining us and Mr.

90
00:04:30,640 --> 00:04:34,960
Wes Payne from Linux Unplugged to help us go through all of this.

91
00:04:34,960 --> 00:04:35,760
Well, hello, gentlemen.

92
00:04:35,760 --> 00:04:37,280
Welcome to the Self-Hosted Podcast.

93
00:04:37,280 --> 00:04:38,400
Thank you for having us.

94
00:04:38,400 --> 00:04:39,040
Thank you.

95
00:04:39,040 --> 00:04:43,600
So let's set this story up, just recap in case people aren't familiar with it.

96
00:04:43,600 --> 00:04:47,920
As of while we were recording about a week ago, Docker announced some pretty significant

97
00:04:47,920 --> 00:04:49,520
changes to their terms of service.

98
00:04:49,520 --> 00:04:55,680
So Docker, everyone knows, world's largest container technology and also image repository

99
00:04:55,680 --> 00:04:56,320
at the Docker Hub.

100
00:04:56,320 --> 00:05:01,840
They currently store more than 15 petabytes of image data.

101
00:05:01,840 --> 00:05:06,640
And they write, after a detailed analysis of the container images stored on Docker Hub,

102
00:05:06,640 --> 00:05:13,120
we found that 4.5 petabytes of the data had not been pushed or pulled within six months

103
00:05:13,120 --> 00:05:14,000
or longer.

104
00:05:14,000 --> 00:05:18,800
We are making this move to optimize operations and make the Docker Hub service even stronger

105
00:05:19,520 --> 00:05:22,800
for developers and development teams around the world.

106
00:05:22,800 --> 00:05:28,400
So the new policy is after a certain amount of time, they will automatically delete your

107
00:05:28,400 --> 00:05:30,080
image from the hub.

108
00:05:30,800 --> 00:05:36,000
So as of this recording, the default retention time for free plans will be six months.

109
00:05:36,000 --> 00:05:38,880
If you don't push or pull within six months, they're deleting it.

110
00:05:38,880 --> 00:05:42,960
And then there's paid plans that have longer retention times, which will probably all change

111
00:05:42,960 --> 00:05:43,440
over time.

112
00:05:43,440 --> 00:05:45,360
So to keep this kind of evergreen, I'll just be vague.

113
00:05:45,360 --> 00:05:48,000
But you can pay to have it retained longer.

114
00:05:48,000 --> 00:05:53,840
So this is upsetting a lot of people who don't frequently update their containers.

115
00:05:53,840 --> 00:05:55,520
I'm curious what your thoughts are, Mike.

116
00:05:55,520 --> 00:05:57,120
Thanks for having me, Chris and Alex.

117
00:05:57,120 --> 00:05:58,640
And Wes, good to hear from you again.

118
00:05:59,520 --> 00:06:04,160
So I have solved this problem in the most neckbeard freedom way by simply hosting my

119
00:06:04,160 --> 00:06:05,680
own Docker container registry.

120
00:06:05,680 --> 00:06:06,480
It's great.

121
00:06:06,480 --> 00:06:08,880
DigitalOcean will give you a droplet for like 20 bucks.

122
00:06:08,880 --> 00:06:09,760
I'm very happy about it.

123
00:06:10,640 --> 00:06:15,680
Having said that, I think there's a little bit of a GitHub problem here where some folks

124
00:06:15,680 --> 00:06:21,120
who are maybe on the business side of things are confusing Docker Hub with Docker, the

125
00:06:21,120 --> 00:06:22,560
technology itself, right?

126
00:06:22,560 --> 00:06:26,160
Docker Hub is just a service to host your Docker images.

127
00:06:26,160 --> 00:06:30,640
And just like you would in Git, be able to easily pull them and update them and whatever,

128
00:06:30,640 --> 00:06:35,280
where there's absolutely no reason you cannot use the open source Docker project, spin up

129
00:06:35,280 --> 00:06:38,640
your own server running there, again, open source software.

130
00:06:38,640 --> 00:06:40,800
And well, frankly, self-host it, right?

131
00:06:40,800 --> 00:06:41,680
It's the name of the show.

132
00:06:42,240 --> 00:06:47,040
I would strongly recommend if you're like me, and for instance, I have a few legacy

133
00:06:47,040 --> 00:06:51,920
containers that are like older versions of Rails that I have for clients that while I

134
00:06:51,920 --> 00:06:57,120
don't use them often, certainly not every six months, I do use them every once in a

135
00:06:57,120 --> 00:06:59,280
while, they want to upgrade their physical servers, right?

136
00:06:59,280 --> 00:07:03,200
And they need a new copy or a new image rather.

137
00:07:03,200 --> 00:07:09,440
So I would strongly suggest, especially the JP audience, it is just not that hard to run

138
00:07:09,440 --> 00:07:11,360
your own Docker registry and go for it.

139
00:07:11,360 --> 00:07:15,840
An interesting angle that you see in a lot of the commentary online is this reproducible

140
00:07:15,840 --> 00:07:16,880
build situation.

141
00:07:17,600 --> 00:07:24,000
And when you look at most of the images that are on Docker Hub, some, not all, I would

142
00:07:24,000 --> 00:07:29,840
say the percentage has increased over the last five years or so, include a Docker file

143
00:07:29,840 --> 00:07:32,800
alongside the image that's been published.

144
00:07:32,800 --> 00:07:39,120
Many people argue that those Docker files represent reproducible builds, but I disagree

145
00:07:39,120 --> 00:07:44,080
quite strongly because the moment you have something like apt-get update or apt-get install

146
00:07:44,080 --> 00:07:50,000
package blah, without pinning it to a specific version, it's not a reproducible build.

147
00:07:50,000 --> 00:07:54,560
And so running that Docker file today will give you a different result than it gave you

148
00:07:54,560 --> 00:07:57,440
six months to 12 months ago and so on.

149
00:07:57,440 --> 00:08:03,200
And I think a lot of the outcry from certainly some of the areas of the community is because

150
00:08:03,200 --> 00:08:06,080
we're losing that kind of historical artifact.

151
00:08:06,640 --> 00:08:10,720
Now that is kind of offset a little bit when you self-host a registry because obviously

152
00:08:10,720 --> 00:08:11,680
you're in full control.

153
00:08:11,680 --> 00:08:17,440
But the lens that I'm looking at this through is my former project, linuxserver.io, where

154
00:08:17,440 --> 00:08:21,440
we have tens of thousands of pulls a day from Docker Hub.

155
00:08:21,440 --> 00:08:26,960
The bandwidth cost alone, even from DigitalOcean, who are very reasonable, it's just not

156
00:08:26,960 --> 00:08:28,960
sustainable for an open source project.

157
00:08:28,960 --> 00:08:33,040
Yeah, I think this is kind of where things get confusing because Docker has been and

158
00:08:33,040 --> 00:08:37,920
still is a lot of different things from the sort of Moby-ish nebulous backends of how

159
00:08:37,920 --> 00:08:40,000
you make containers work at all.

160
00:08:40,000 --> 00:08:45,840
But then also this sort of community aspect, this common area that you could all share

161
00:08:45,840 --> 00:08:46,320
at.

162
00:08:46,320 --> 00:08:49,200
And yes, you can often go rebuild things.

163
00:08:49,200 --> 00:08:52,000
But that's not where people first meet Docker, right?

164
00:08:52,000 --> 00:08:55,600
Sometimes it's go build your first Docker file and build it that way.

165
00:08:55,600 --> 00:08:59,600
But so many people, and Alex, I think you're spot on there, especially coming from Linux

166
00:08:59,600 --> 00:09:02,640
Server, using the great Linux Server images.

167
00:09:02,640 --> 00:09:04,400
Well, I'm just going to go pull down that software.

168
00:09:04,400 --> 00:09:09,680
And it's more of an application packaging format of these binary file system layers

169
00:09:09,680 --> 00:09:13,760
than it is anything about playing a role in a CI-CD system.

170
00:09:13,760 --> 00:09:17,200
And that's where it kind of gets confusing because there's just a lot of stuff under

171
00:09:17,200 --> 00:09:19,040
this one Docker name.

172
00:09:19,040 --> 00:09:19,360
That's true.

173
00:09:19,360 --> 00:09:24,160
And I do think it's hard to divorce Docker's success from Docker Hub.

174
00:09:24,160 --> 00:09:30,080
I think Docker, while obviously it's possible to host your own images and have alternative

175
00:09:30,080 --> 00:09:35,200
hubs and third party repositories, I think it was the combination of Docker and Docker

176
00:09:35,200 --> 00:09:41,200
Hub and being so easy to invoke images from Docker Hub with very little command syntax.

177
00:09:41,200 --> 00:09:45,440
I think it contributed pretty significantly to the success of the project.

178
00:09:45,440 --> 00:09:50,400
Like I often said, what happens to the default matters a lot because it will impact the majority

179
00:09:50,400 --> 00:09:51,200
of users.

180
00:09:51,200 --> 00:09:54,720
And just to clarify for those that aren't really familiar with what Chris is talking

181
00:09:54,720 --> 00:10:02,400
about, when you do Docker pull image, there is some code, basically hard baked into the

182
00:10:02,400 --> 00:10:11,760
Docker software, that substitutes Docker pull image for docker pull docker.io slash image

183
00:10:11,760 --> 00:10:16,400
colon tag, like short code for that default tag is latest.

184
00:10:16,400 --> 00:10:26,000
So by hijacking effectively that root namespace, Docker by default captured so much of the

185
00:10:26,000 --> 00:10:28,240
traffic and they must get absolutely hammered every day.

186
00:10:28,240 --> 00:10:32,560
I mean, what did you say at the beginning, 45 petabytes worth of images.

187
00:10:32,560 --> 00:10:38,800
I mean, that's a huge amount of data and they're storing this stuff on S3 according to my research.

188
00:10:38,800 --> 00:10:41,600
And we know that isn't going to be cheap.

189
00:10:41,600 --> 00:10:47,600
And so from a businessman perspective, I can absolutely understand why they can't continue

190
00:10:47,600 --> 00:10:52,080
giving this away for free, but I look at some of the parallels between this and say GitHub,

191
00:10:52,080 --> 00:10:55,920
for example, and how they used to charge for stuff and isn't docker.com.

192
00:10:55,920 --> 00:10:58,560
What's the purpose of docker.com or the Docker Hub?

193
00:10:58,560 --> 00:11:03,520
I think originally it was kind of that the first hit is free and we'll get people in

194
00:11:03,520 --> 00:11:09,760
to buy stuff for the enterprise and we'll subsidize docker.com and the hub through this

195
00:11:09,760 --> 00:11:13,440
kind of insidious, you know, namespace hijack.

196
00:11:13,440 --> 00:11:20,160
But Docker Inc is now owned by Mirantis, I think, and I'm not even honestly sure who

197
00:11:20,160 --> 00:11:21,200
owns Docker Hub now.

198
00:11:21,200 --> 00:11:23,680
I can't tell you if it's Mirantis or not.

199
00:11:23,680 --> 00:11:28,400
I think you're right about that because it is, you know, there is still Docker contributing,

200
00:11:28,400 --> 00:11:31,040
but they sold off their enterprise business to Mirantis.

201
00:11:31,040 --> 00:11:36,080
And so in some ways, the, you know, the GitHub journey, it's the opposite where now they're

202
00:11:36,080 --> 00:11:37,120
a part of Microsoft.

203
00:11:37,120 --> 00:11:42,720
They've got this big backing of a giant corporation and now Docker Inc is left as this sort of

204
00:11:42,720 --> 00:11:46,960
small progenitor of, you know, the Docker tooling and the ecosystem, but without all

205
00:11:46,960 --> 00:11:51,200
those lucrative enterprise contracts and is apparently just trying to focus more on the

206
00:11:51,200 --> 00:11:52,880
tooling side of things.

207
00:11:52,880 --> 00:11:57,040
But yeah, still has to pay for petabytes and petabytes of storage.

208
00:11:57,040 --> 00:12:01,520
And there's the historical perspective here way back when we had them on Coder, when they

209
00:12:01,520 --> 00:12:06,160
were still dot cloud, Docker was just a way for dot cloud, the business to sell hosting

210
00:12:06,160 --> 00:12:07,760
services, right?

211
00:12:07,760 --> 00:12:11,480
Like they made their money charging you for running your applications.

212
00:12:11,480 --> 00:12:14,680
You know, honestly, Alex, I didn't even think of the open source project perspective because

213
00:12:14,680 --> 00:12:20,040
I'm, you know, I guess still evil, but I'm thinking more of a small ISV where, yeah,

214
00:12:20,040 --> 00:12:21,880
I mean, my images are relatively small.

215
00:12:21,880 --> 00:12:24,400
It's just easy to throw up an instance, right?

216
00:12:24,400 --> 00:12:29,280
It's certainly true that now that their primary business is not in fact hosting your applications

217
00:12:29,280 --> 00:12:33,960
that yeah, these, these petabytes of traffic are gotta be killing them financially.

218
00:12:33,960 --> 00:12:36,800
And you touched on it there and I kind of bring it back to the original story.

219
00:12:36,800 --> 00:12:43,040
I think, I think it is small businesses that are selling some sort of slow moving piece

220
00:12:43,040 --> 00:12:48,400
of business class software to a client or a customer that are going to be hit the worst

221
00:12:48,400 --> 00:12:54,240
by this change because it's entirely possible that a back office piece of software that

222
00:12:54,240 --> 00:13:01,600
runs a small doctor's clinic or an accountant's office may not get changed in three years.

223
00:13:01,600 --> 00:13:04,560
And so it could easily trip the six month window.

224
00:13:04,560 --> 00:13:07,800
And I could see if you're a small shop, you're just packaging things up into a container

225
00:13:07,800 --> 00:13:12,680
for your clients and you're publishing it on Docker hub because it's simpler that way.

226
00:13:12,680 --> 00:13:16,320
Some scenario to that I could see impacting small business pretty significantly, but I

227
00:13:16,320 --> 00:13:21,800
think it's probably pretty easy for Docker to make the argument that if you're using

228
00:13:21,800 --> 00:13:25,720
this for professional services, you should have a paid account.

229
00:13:25,720 --> 00:13:28,000
I think I agree with you.

230
00:13:28,000 --> 00:13:31,840
So to work around this issue, a lot of the online commentary was, okay, I'm just going

231
00:13:31,840 --> 00:13:36,480
to write a cron job, a bash script that's going to pull this image every 5.99 months

232
00:13:36,480 --> 00:13:37,480
or whatever.

233
00:13:37,480 --> 00:13:38,480
Of course.

234
00:13:38,480 --> 00:13:39,480
Love it.

235
00:13:39,480 --> 00:13:44,240
But if you look at the small print towards the end of the announcement, the free tier

236
00:13:44,240 --> 00:13:52,080
limits you to 100 unauthenticated pulls every six hours and 200 every six hours that are

237
00:13:52,080 --> 00:13:53,080
authenticated.

238
00:13:53,080 --> 00:13:55,800
So again, this is coming at it from the Linux server perspective.

239
00:13:55,800 --> 00:14:01,440
If let's say even just a few dozen of those users all ran scripts within that happened

240
00:14:01,440 --> 00:14:06,760
to run the last or the first day of the month or whatever, are you not able to pull images

241
00:14:06,760 --> 00:14:07,760
at all?

242
00:14:07,760 --> 00:14:10,520
Do you just get sorry rate limits exceeded or what happens?

243
00:14:10,520 --> 00:14:16,880
And I think a lot of that fear for me is really centered around open source projects that

244
00:14:16,880 --> 00:14:18,880
rely on Docker Hub.

245
00:14:18,880 --> 00:14:24,040
Because my day job is working in the enterprise on OpenShift, which has built in registries

246
00:14:24,040 --> 00:14:26,860
and everything's hosted behind the firewall.

247
00:14:26,860 --> 00:14:32,600
I'm not really too worried about Docker Hub from a business perspective because like Mike

248
00:14:32,600 --> 00:14:37,880
said, you just spin up your own and it's super simple and it's become the, dare I say it,

249
00:14:37,880 --> 00:14:40,160
the standard packaging format for the server.

250
00:14:40,160 --> 00:14:42,840
Yeah, NGINX's image, that's not going anywhere, right?

251
00:14:42,840 --> 00:14:43,840
There's a company.

252
00:14:43,840 --> 00:14:44,840
But you're right.

253
00:14:44,840 --> 00:14:48,000
I mean, here in the terms of service, they reserve the right to enforce if they want

254
00:14:48,000 --> 00:14:49,000
to.

255
00:14:49,000 --> 00:14:53,040
And that includes stuff like quantity of data, age of data, pull rate and number of image

256
00:14:53,040 --> 00:14:54,040
auto builds.

257
00:14:54,040 --> 00:14:58,120
So it'll be interesting to see which projects they actually choose.

258
00:14:58,120 --> 00:15:02,780
Is this really meant to cull the images that are never used anywhere or will there be large

259
00:15:02,780 --> 00:15:07,200
successful open source projects that have been using Docker Hub as the way to distribute

260
00:15:07,200 --> 00:15:10,840
their project but can't afford a non-free plan?

261
00:15:10,840 --> 00:15:17,600
You have to wonder if this is the beginning of a different, more services based monetization

262
00:15:17,600 --> 00:15:19,120
strategy.

263
00:15:19,120 --> 00:15:22,400
You look at Docker and you look at the history of the project.

264
00:15:22,400 --> 00:15:26,840
So we've been tracking this thing since what, 2013?

265
00:15:26,840 --> 00:15:32,360
And you saw a lot of really rapid innovation and security issues be discovered and fixed

266
00:15:32,360 --> 00:15:38,920
and overall system level changes to accommodate containers happen really between 2013 and

267
00:15:38,920 --> 00:15:40,640
2015.

268
00:15:40,640 --> 00:15:43,480
That's when the OCI launched the Open Container Initiative.

269
00:15:43,480 --> 00:15:46,520
And that was really kind of creating an open standards body for containers.

270
00:15:46,520 --> 00:15:49,600
And we kind of got this normalized approach.

271
00:15:49,600 --> 00:15:55,800
I mean, since really 2015, 2016, there hasn't been massive accomplishments or changes or

272
00:15:55,800 --> 00:15:58,120
innovations in Docker.

273
00:15:58,120 --> 00:15:59,120
They changed the name.

274
00:15:59,120 --> 00:16:00,120
Yeah.

275
00:16:00,120 --> 00:16:02,160
There's been a lot of weird company stuff going on.

276
00:16:02,160 --> 00:16:06,040
But I wonder if this is a bit of a hands up approach saying, well, maybe this is how we're

277
00:16:06,040 --> 00:16:07,040
going to make money.

278
00:16:07,040 --> 00:16:11,000
You know, they were pushing swarm for quite some time, but clearly Kubernetes won that

279
00:16:11,000 --> 00:16:12,000
race.

280
00:16:12,000 --> 00:16:13,000
And that didn't take off.

281
00:16:13,000 --> 00:16:16,700
And so now they're left having to try to make, what's the point of Docker?

282
00:16:16,700 --> 00:16:18,120
We already have these images, right?

283
00:16:18,120 --> 00:16:22,280
We know that there's standards outside of their control and all their sort of retooling

284
00:16:22,280 --> 00:16:23,280
around Moby.

285
00:16:23,280 --> 00:16:28,040
A lot of that was just to also piecemeal things out and use a lot of things like Run C and

286
00:16:28,040 --> 00:16:31,760
Lib Container, all the stuff that's also out there in the community.

287
00:16:31,760 --> 00:16:34,040
So their role is just shrinking and shrinking.

288
00:16:34,040 --> 00:16:35,040
Yeah.

289
00:16:35,040 --> 00:16:40,480
And we know right now, as around the time we're recording this, they're raising money.

290
00:16:40,480 --> 00:16:43,340
They just got a $1.3 billion valuation.

291
00:16:43,340 --> 00:16:46,240
So they're on the market looking for an investor.

292
00:16:46,240 --> 00:16:49,560
I kind of expected Microsoft to buy Docker for quite a long time.

293
00:16:49,560 --> 00:16:50,560
Yes.

294
00:16:50,560 --> 00:16:51,560
Well, maybe.

295
00:16:51,560 --> 00:16:54,360
I mean, if you're buying TikTok, why not?

296
00:16:54,360 --> 00:17:00,680
Sometimes, you know, the trying to raise funds initiative turns into a getting purchased initiative

297
00:17:00,680 --> 00:17:04,000
that has happened in the history of tech companies.

298
00:17:04,000 --> 00:17:07,160
So am I the only one who's maybe a little too simplistic about this?

299
00:17:07,160 --> 00:17:11,160
I mean, when they were at dot cloud and Chris, you and I spoke to them, their business was

300
00:17:11,160 --> 00:17:15,280
hosting your application and making deployment super easy.

301
00:17:15,280 --> 00:17:17,760
Why can that not be the business today?

302
00:17:17,760 --> 00:17:19,260
Right.

303
00:17:19,260 --> 00:17:23,520
Because they waited too long and now there's tons of places to host Docker containers for

304
00:17:23,520 --> 00:17:24,520
cheap.

305
00:17:24,520 --> 00:17:25,520
Sure.

306
00:17:25,520 --> 00:17:26,520
Did Heroku exist back then?

307
00:17:26,520 --> 00:17:29,280
It did, but Heroku was very expensive at that point, right?

308
00:17:29,280 --> 00:17:33,680
It was before Salesforce dumped a wad of money into them and said, lower your prices.

309
00:17:33,680 --> 00:17:38,760
I'd argue that that's probably the biggest one click app competitor to that kind of model.

310
00:17:38,760 --> 00:17:39,760
Absolutely.

311
00:17:39,760 --> 00:17:40,760
Yeah.

312
00:17:40,760 --> 00:17:41,760
And also, Kubernetes wasn't a thing.

313
00:17:41,760 --> 00:17:42,760
Yeah.

314
00:17:42,760 --> 00:17:48,520
And I know I'm probably slightly biased, but people like Red Hat hadn't woken up to Kubernetes

315
00:17:48,520 --> 00:17:52,960
and VMware now have got their own Kubernetes and anybody who's anybody has a Kubernetes

316
00:17:52,960 --> 00:17:57,200
play now and Docker swarm is just not relevant.

317
00:17:57,200 --> 00:18:01,720
And I think if you look at the history of Docker as a company, their largest misstep

318
00:18:01,720 --> 00:18:07,160
was around that kind of 2016 timeframe when they kind of made an enemy of Red Hat and

319
00:18:07,160 --> 00:18:14,720
then Red Hat decided to make Podman and Cryo and basically stop shipping Docker.

320
00:18:14,720 --> 00:18:17,840
We liked your idea, but we'll do it our way.

321
00:18:17,840 --> 00:18:18,840
Yeah.

322
00:18:18,840 --> 00:18:19,840
Alex makes a great point.

323
00:18:19,840 --> 00:18:22,520
I mean, AWS, Red Hat, all the big services.

324
00:18:22,520 --> 00:18:25,120
I think even Asher offers Kubernetes support now, right?

325
00:18:25,120 --> 00:18:26,120
Yeah, they do.

326
00:18:26,120 --> 00:18:27,120
Yeah.

327
00:18:27,120 --> 00:18:28,120
Interesting.

328
00:18:28,120 --> 00:18:31,160
So they're getting an influx of $75 million.

329
00:18:31,160 --> 00:18:33,820
These are all according to people familiar with the matter.

330
00:18:33,820 --> 00:18:38,760
The deal is supposed to close at the end of this month and it looks like they're going

331
00:18:38,760 --> 00:18:48,120
to use the funds to hire salespeople, marketing team, and have them go after corporate clients

332
00:18:48,120 --> 00:18:49,880
according to people familiar with the matter.

333
00:18:49,880 --> 00:18:53,960
So Docker apparently sees the future in corporate.

334
00:18:53,960 --> 00:18:59,040
By the way, what was interesting during this entire process, they've only increased in

335
00:18:59,040 --> 00:19:03,880
a billion valuations since they were last evaluated in 2015.

336
00:19:03,880 --> 00:19:04,880
Interesting.

337
00:19:04,880 --> 00:19:08,120
You know, there's also sort of a lag in a lot of this stuff.

338
00:19:08,120 --> 00:19:12,320
You know, they're still maybe smaller or just lagging behind enterprises that haven't made

339
00:19:12,320 --> 00:19:17,100
the shift fully into the containerized world or just starting to play in that space.

340
00:19:17,100 --> 00:19:22,420
And I wonder, you know, a lot of the developers I know who maybe aren't super into the technology

341
00:19:22,420 --> 00:19:25,480
but need to use these tools, they've recently tried Docker.

342
00:19:25,480 --> 00:19:26,480
They've been using Docker.

343
00:19:26,480 --> 00:19:30,340
I think we'll still see the Docker name being used at least on the command line for a while

344
00:19:30,340 --> 00:19:31,340
to come.

345
00:19:31,340 --> 00:19:35,540
But it'll be interesting to see if, you know, eventually just the other sorts of tools supplant

346
00:19:35,540 --> 00:19:37,040
them as the default.

347
00:19:37,040 --> 00:19:39,440
It's the Kleenex of containers.

348
00:19:39,440 --> 00:19:40,440
Exactly.

349
00:19:40,440 --> 00:19:43,280
So moving on to Terraform, let's have Wes stick around.

350
00:19:43,280 --> 00:19:45,500
Thank you, Mr. Dominic, for joining us.

351
00:19:45,500 --> 00:19:47,200
And shift gears to news.

352
00:19:47,200 --> 00:19:51,640
This is a news-heavy episode and shift gears to Terraform 0.13.

353
00:19:51,640 --> 00:19:56,520
Now most of you are probably wondering why on earth this is even a big deal, 0.13 doesn't

354
00:19:56,520 --> 00:19:57,960
sound that important.

355
00:19:57,960 --> 00:20:03,420
Well Terraform have revolutionized the way that I deploy infrastructure.

356
00:20:03,420 --> 00:20:10,220
So for those that aren't even familiar with what Terraform is, it's a way to declaratively

357
00:20:10,220 --> 00:20:15,880
define infrastructure as code, much like we would do with a piece of software.

358
00:20:15,880 --> 00:20:19,740
We would say, here are our dependencies, here is what, you know, the various different interfaces

359
00:20:19,740 --> 00:20:21,600
we have and stuff like that.

360
00:20:21,600 --> 00:20:23,540
We can do the same with our infrastructure.

361
00:20:23,540 --> 00:20:28,660
We can say, I want this, you know, let's say a droplet, for example, I want this firewall

362
00:20:28,660 --> 00:20:34,280
rule to allow traffic on port 80 to this IP address, et cetera, et cetera, et cetera.

363
00:20:34,280 --> 00:20:39,820
And the benefits of doing this stuff with Terraform is that you can store it as code

364
00:20:39,820 --> 00:20:40,880
in a Git repo.

365
00:20:40,880 --> 00:20:44,020
So you can version everything that's happening.

366
00:20:44,020 --> 00:20:49,980
So let's say that I am part of a development team at work and we want to, you know, change

367
00:20:49,980 --> 00:20:55,840
the size of our default droplets from the $5 to the $10 one, for example, I can go in

368
00:20:55,840 --> 00:21:01,260
and make that change, but I have to commit it to Git in order for that change to be picked

369
00:21:01,260 --> 00:21:05,880
up by my CI pipeline and then push those changes to production.

370
00:21:05,880 --> 00:21:11,600
So it's basically a way of enabling a paper trail for infrastructure changes.

371
00:21:11,600 --> 00:21:17,600
Now the reason that 0.13 got me so excited is because I use it a lot at home for doing

372
00:21:17,600 --> 00:21:21,320
homelab stuff with OpenShift.

373
00:21:21,320 --> 00:21:27,040
And with 0.13, you can do something which doesn't sound like a big deal until you've

374
00:21:27,040 --> 00:21:28,880
tried it.

375
00:21:28,880 --> 00:21:31,720
Terraform has this concept of count.

376
00:21:31,720 --> 00:21:36,740
And what that lets me do is it says, right, I want three web servers, count equals three

377
00:21:36,740 --> 00:21:38,560
on my web servers.

378
00:21:38,560 --> 00:21:41,480
Traditionally, that only worked at the resource level.

379
00:21:41,480 --> 00:21:44,800
So each thing that you create is a resource.

380
00:21:44,800 --> 00:21:46,920
Now I can define a module.

381
00:21:46,920 --> 00:21:51,640
So what that lets me do is reuse different bits of code from across the code base.

382
00:21:51,640 --> 00:21:55,120
Now I've written a blog post about this because some of these concepts are a little abstract

383
00:21:55,120 --> 00:22:01,140
to explain in a podcast without making it sound super duper boring and training-y.

384
00:22:01,140 --> 00:22:02,140
No kidding.

385
00:22:02,140 --> 00:22:05,180
So in the blog post, I talk about count and modules.

386
00:22:05,180 --> 00:22:10,240
And so what this lets me do is write reusable chunks of resource definitions that I can

387
00:22:10,240 --> 00:22:15,000
then call from the parent module.

388
00:22:15,000 --> 00:22:20,360
So I can create one file that defines how all of my droplets are created.

389
00:22:20,360 --> 00:22:25,720
And then I can recall or reuse that piece of code from anywhere else in my code base

390
00:22:25,720 --> 00:22:28,600
and pipe in a bunch of variables in real time.

391
00:22:28,600 --> 00:22:29,860
It's super duper cool.

392
00:22:29,860 --> 00:22:34,920
And if you aren't using Terraform or any kind of automation to create infrastructure, I

393
00:22:34,920 --> 00:22:36,920
highly suggest you take a look.

394
00:22:36,920 --> 00:22:39,560
Now Wes, you use Terraform a little bit, don't you?

395
00:22:39,560 --> 00:22:40,560
I do.

396
00:22:40,560 --> 00:22:45,680
When Terraform first came out, I was so excited because, especially at the time, I was using

397
00:22:45,680 --> 00:22:47,820
a lot of AWS.

398
00:22:47,820 --> 00:22:51,400
And after you have a few people, maybe a couple different generations of teams that have all

399
00:22:51,400 --> 00:22:55,680
gone into the console, which as people who use it now keeps adding more and more and

400
00:22:55,680 --> 00:23:01,100
more buttons to click, you've got this infrastructure that, I mean, yes, you can document it, but

401
00:23:01,100 --> 00:23:05,360
it's a real pain because there's all kinds of different systems, different networks,

402
00:23:05,360 --> 00:23:08,840
different VPCs, how many databases, how many instances did you spin up?

403
00:23:08,840 --> 00:23:10,280
Were those settings the settings you meant to?

404
00:23:10,280 --> 00:23:13,840
Were those just the settings that you applied at the time and they don't make sense anymore?

405
00:23:13,840 --> 00:23:19,240
And with Terraform, you've just got all of that package for you right there, let alone

406
00:23:19,240 --> 00:23:23,680
the advantages you can have because, well, the AWS API is different than the Digital

407
00:23:23,680 --> 00:23:27,200
Ocean one, but it turns out I've got infrastructure on each of those.

408
00:23:27,200 --> 00:23:30,240
I don't want to have to wrap all those API calls up myself.

409
00:23:30,240 --> 00:23:33,700
Well, Terraform took care of that so nicely.

410
00:23:33,700 --> 00:23:37,920
And you're right, I think one of my biggest complaints about it, it's doing a great job

411
00:23:37,920 --> 00:23:41,800
and I like the configuration language, HCL.

412
00:23:41,800 --> 00:23:42,800
It's declarative.

413
00:23:42,800 --> 00:23:46,440
You get to say like, this is what I want and instead of telling the computer how to do

414
00:23:46,440 --> 00:23:51,160
it, well, Terraform has modules, has functionality built into it to go build those things out

415
00:23:51,160 --> 00:23:56,720
for you in the real world, but I have noticed having to repeat myself a little more than

416
00:23:56,720 --> 00:24:01,360
I would like and made me wish that I could reach for a little more full powered language

417
00:24:01,360 --> 00:24:02,360
or something.

418
00:24:02,360 --> 00:24:04,400
So these changes, huge.

419
00:24:04,400 --> 00:24:08,920
It's one of those changes that when it came out or was announced anyway, I was like, oh,

420
00:24:08,920 --> 00:24:10,400
this is the way it should have been.

421
00:24:10,400 --> 00:24:13,160
It's one of those changes that you just think, yes, this is a good one.

422
00:24:13,160 --> 00:24:15,920
This is absolutely needed.

423
00:24:15,920 --> 00:24:21,120
And you touch on one of the most important things about Terraform for me is how it basically

424
00:24:21,120 --> 00:24:24,320
abstracts you away from the underlying infrastructure.

425
00:24:24,320 --> 00:24:31,280
So I can write code that will target VMware and Amazon and Digital Ocean and Linode and

426
00:24:31,280 --> 00:24:34,800
insert all of the other cloud providers as well.

427
00:24:34,800 --> 00:24:38,480
I think KVM recently got some updated stuff for Terraform.

428
00:24:38,480 --> 00:24:41,240
I think Proxmox might have done as well.

429
00:24:41,240 --> 00:24:46,600
So there is no real excuse, in my mind at least, not to be using these kinds of things

430
00:24:46,600 --> 00:24:52,920
to automate infrastructure deployments because let's face it, we've all been there.

431
00:24:52,920 --> 00:24:58,200
We've all installed a server and we're like, how did that get there?

432
00:24:58,200 --> 00:25:00,220
Six months later, how did I deploy this?

433
00:25:00,220 --> 00:25:01,440
Which image did I use?

434
00:25:01,440 --> 00:25:06,680
Which firewall rule applies to this particular thing or whatever?

435
00:25:06,680 --> 00:25:10,300
And by having your infrastructure as code, it's there right in front of you.

436
00:25:10,300 --> 00:25:11,600
The answer is always there.

437
00:25:11,600 --> 00:25:15,760
So what's it going to take to convince Chris to use it though?

438
00:25:15,760 --> 00:25:16,760
That's what I want to know.

439
00:25:16,760 --> 00:25:18,080
That's a good question.

440
00:25:18,080 --> 00:25:19,080
Raspberry Pi support.

441
00:25:19,080 --> 00:25:20,080
I can't help it.

442
00:25:20,080 --> 00:25:21,080
I have to.

443
00:25:21,080 --> 00:25:25,120
Well, the thing is about Terraform is that it's at the infrastructure layer.

444
00:25:25,120 --> 00:25:32,340
So it's more about creating virtual machines and the ancillary stuff that goes around them.

445
00:25:32,340 --> 00:25:36,720
So I would say for configuring the Pi's themselves, Ansible is probably a better bet.

446
00:25:36,720 --> 00:25:40,560
And I tend to use Ansible for configuring the machines once Terraform has brought them

447
00:25:40,560 --> 00:25:41,560
up.

448
00:25:41,560 --> 00:25:42,560
Right.

449
00:25:42,560 --> 00:25:43,560
I see.

450
00:25:43,560 --> 00:25:47,120
We often see a lot of confusion about which tools should I be using because I mean Ansible

451
00:25:47,120 --> 00:25:51,120
technically can do a lot of what Terraform does.

452
00:25:51,120 --> 00:25:56,720
I find personally that the delineation between one tool to create the infrastructure and

453
00:25:56,720 --> 00:26:01,160
another tool to quote unquote, configure the infrastructure, I find that separation quite

454
00:26:01,160 --> 00:26:02,160
helpful.

455
00:26:02,160 --> 00:26:04,600
And the two, you can call them from one another as well.

456
00:26:04,600 --> 00:26:05,600
Yeah.

457
00:26:05,600 --> 00:26:10,040
In a past life, I was managing a system that provisioned a whole bunch of EC2 resources

458
00:26:10,040 --> 00:26:15,160
using entirely Ansible and moving the parts of that that were just infrastructure specific

459
00:26:15,160 --> 00:26:20,360
and not all the OS configuration out to Terraform made it so much clearer.

460
00:26:20,360 --> 00:26:23,600
And it was just simpler because honestly, Terraform does a great job of keeping up with

461
00:26:23,600 --> 00:26:25,560
all the AWS changes.

462
00:26:25,560 --> 00:26:28,000
Oftentimes they've got stuff even before CloudFormation does.

463
00:26:28,000 --> 00:26:29,560
So it's just a better tool.

464
00:26:29,560 --> 00:26:30,720
It's a funny story.

465
00:26:30,720 --> 00:26:36,000
I actually found out that DigitalOcean were releasing VPC support by reading the Terraform

466
00:26:36,000 --> 00:26:38,600
docs before it was announced on DO.

467
00:26:38,600 --> 00:26:41,320
I found it in the Terraform docs, which I thought was quite cool.

468
00:26:41,320 --> 00:26:48,000
Well, I know we got to get going, but before we do, I think you ordered something new and

469
00:26:48,000 --> 00:26:50,240
I think maybe you forgot you got roles swapped here, Alex.

470
00:26:50,240 --> 00:26:54,960
I thought I was the super cool small board computer NAS guy.

471
00:26:54,960 --> 00:27:00,080
Well, don't tell my wife, but I might have impulse bought a single board powered system.

472
00:27:00,080 --> 00:27:03,320
It's the Helios 64 from Kobold.io.

473
00:27:03,320 --> 00:27:07,420
And this thing is the ultimate arm powered NAS.

474
00:27:07,420 --> 00:27:12,560
It has four gigabytes of RAM, a built in battery pack.

475
00:27:12,560 --> 00:27:19,240
It supports five, three and a half inch hard drives, has a USB three type C input.

476
00:27:19,240 --> 00:27:22,320
So you can use it as a DAS as well as a NAS.

477
00:27:22,320 --> 00:27:28,400
And I don't know, like I'm not super duper thrilled about only four gigs of RAM, but

478
00:27:28,400 --> 00:27:33,480
I think for a few media apps and a little bit of file storage here and there should

479
00:27:33,480 --> 00:27:35,120
do the trick really nicely.

480
00:27:35,120 --> 00:27:36,120
What do you think?

481
00:27:36,120 --> 00:27:37,120
Yeah.

482
00:27:37,120 --> 00:27:39,680
I can't wait to buy it from you secondhand after you're done with it.

483
00:27:39,680 --> 00:27:42,480
Yeah, maybe we'll see.

484
00:27:42,480 --> 00:27:46,200
I mean, I saw it and I thought of you cause it's got a couple of gigabit NICs.

485
00:27:46,200 --> 00:27:47,680
It's got a few USB ports.

486
00:27:47,680 --> 00:27:50,200
I think it's got an HDMI out as well.

487
00:27:50,200 --> 00:27:55,680
So one of the screenshots they show on their website is of it running Kodi on your TV.

488
00:27:55,680 --> 00:27:58,400
So that could be an interesting use case.

489
00:27:58,400 --> 00:28:02,800
I like reducing down a little bit, the NAS and the TV box all in one.

490
00:28:02,800 --> 00:28:04,800
You know it's going to play back good in that scenario.

491
00:28:04,800 --> 00:28:05,800
Yeah.

492
00:28:05,800 --> 00:28:09,720
It's also got a USB-C and runs off DC power.

493
00:28:09,720 --> 00:28:13,720
And like you said, that built in battery, that could be really handy too.

494
00:28:13,720 --> 00:28:15,720
I can't wait to hear your thoughts on this.

495
00:28:15,720 --> 00:28:16,800
It ships in August.

496
00:28:16,800 --> 00:28:20,200
So we're still technically in August by a few days here as we record.

497
00:28:20,200 --> 00:28:23,120
So I don't know, come on guys, get it, get mine out the door, please.

498
00:28:23,120 --> 00:28:25,480
I want to get, I want to tell the good self-hosted people.

499
00:28:25,480 --> 00:28:28,400
Well, that brings us to the end of self-hosted.

500
00:28:28,400 --> 00:28:33,640
Well, you can find our sponsor on social media, Cloud Guru is at twitter.com, youtube.com and

501
00:28:33,640 --> 00:28:34,640
facebook.com.

502
00:28:34,640 --> 00:28:36,460
They're all just slash a cloud guru.

503
00:28:36,460 --> 00:28:37,460
Couldn't be easier.

504
00:28:37,460 --> 00:28:38,460
Thank you to Wes.

505
00:28:38,460 --> 00:28:42,720
You can find links to Wes and Mike's Twitter accounts in our show notes.

506
00:28:42,720 --> 00:28:46,160
And of course you can go get more Wes Payne on the Linux unplug.

507
00:28:46,160 --> 00:28:47,400
Anything else you want to mention, Wes?

508
00:28:47,400 --> 00:28:48,400
Thank you for having me.

509
00:28:48,400 --> 00:28:49,400
I'm off to my own web.

510
00:28:49,400 --> 00:28:50,400
Thanks for being here.

511
00:28:50,400 --> 00:28:51,400
All right.

512
00:28:51,400 --> 00:29:18,000
That's self-hosted 26.


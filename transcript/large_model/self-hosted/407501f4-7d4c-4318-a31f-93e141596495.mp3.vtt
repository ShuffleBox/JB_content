WEBVTT

00:00.000 --> 00:03.440
Coming up on Self-Hosted 20, you're not a true self-hoster until you've lost your

00:03.440 --> 00:09.680
entire configuration at least once, right? I'll tell you my tale. Alex has done a deep dive in

00:09.680 --> 00:14.240
your best options for cloud backup, and we try to find the right Wi-Fi solution

00:14.240 --> 00:18.880
for a listener with a real challenge. I'm Chris. I'm Alex, and this is Self-Hosted.

00:20.080 --> 00:23.360
I'm so jealous of you going down at Austin. You're going to get some of that delicious

00:23.360 --> 00:25.760
Terry Black's barbecue, aren't you, and rub my face in it.

00:25.760 --> 00:30.480
Absolutely. I'm going to take pictures of it from all the best angles, and then I'm going to take

00:30.480 --> 00:34.960
it into a photo editor and like, you know, punch it up a little bit, and then I'm going to send

00:34.960 --> 00:40.080
it to you. On your Instagram story? And then I'll also make sure to just sort of

00:40.080 --> 00:44.480
capture my thoughts as I'm enjoying it and send that to you as an audio message.

00:44.480 --> 00:49.280
In detail. Yeah, okay. Yeah, it's going to be a good trip. It's going to be myself,

00:49.280 --> 00:55.520
the wife, and the three kids and the dog all loaded up in lady jupes. I've got now, after

00:56.240 --> 01:02.480
quite the experience, I have got 1.2 terabytes of media for offline consumption.

01:02.480 --> 01:05.520
That's quite a bit. Possibly more than you need.

01:05.520 --> 01:10.160
Yeah, yeah. I wish I would have realized that before I attempted to get it,

01:10.160 --> 01:12.080
because I might have saved myself a lot of trouble.

01:12.080 --> 01:14.800
So what did you get and how did you get it?

01:14.800 --> 01:18.640
Well, I wanted to just add more storage to my home setup. This was a

01:18.640 --> 01:24.320
set up. This was just an innocent voyage. One that I initially considered using Merger FS

01:25.200 --> 01:31.280
for because of your success with it. In fact, I even reread your blog post on the Perfect Media

01:31.280 --> 01:39.040
server. As I was considering doing this, I was reminded by a friendly member of our community

01:39.040 --> 01:47.920
that Butter FS has a very nice feature built into it that makes adding additional storage

01:47.920 --> 01:54.240
to a mount point super simple and adding mismatched drive sizes of all types is really easy.

01:54.960 --> 02:00.640
It really comes down to something as simple as like Butter FS, volume, add, then you specify

02:00.640 --> 02:06.000
the device and you specify the mount point. And with one command, you can take a brand new,

02:06.000 --> 02:12.320
perfectly formatted Butter FS disk and just add it to an existing mount point. And it just expands

02:12.320 --> 02:17.200
the storage available there. And then there's a balance command that'll spread the data across

02:17.200 --> 02:21.520
all the drives in the background, which you do have to do manually. If you don't run that

02:21.520 --> 02:26.960
command, it won't happen. But the idea is that you can kind of come along and just add additional

02:26.960 --> 02:33.280
storage and Butter FS add this volume to this mount point as much as you'd like, as long as

02:33.280 --> 02:37.600
you have appropriate data protections in place. Balancing is one of those things that I often

02:37.600 --> 02:43.760
think, yeah, I want that. But then you think about what it's doing and you're reading data

02:43.760 --> 02:50.720
from a bunch of disks and writing a data to a bunch of disks for what potential gain. So far

02:50.720 --> 02:55.920
as I see it with balancing, there's only risk. You're increasing wear and tear on the drives

02:55.920 --> 03:04.000
for what purpose? I think it's for my own personal, well, look at this, all my drives are at 65% now,

03:04.800 --> 03:07.520
as opposed to anything actually useful. What do you think?

03:07.520 --> 03:13.920
You're kind of spreading the load out in the sense of reads could potentially be faster if you had

03:13.920 --> 03:19.600
a controller that wasn't the USB bus. But say you had a pretty fast interface for these individual

03:19.600 --> 03:23.200
drives and then you spread the data out. When you're reading from multiple drives, you can

03:23.200 --> 03:28.080
potentially get some really fast read speeds. All valid if you're a data center. Yeah. Are

03:28.080 --> 03:34.000
you a data center? Nope, nope. I'm calling it my server cabinet at this point. Actually,

03:34.000 --> 03:39.200
I should say, Alex, I should back this up a couple of steps. I began a project because

03:39.200 --> 03:45.200
I put a sensor in the dinette where I have all the Raspberry Pis. I put a little Z-Wave sensor

03:45.200 --> 03:49.200
in there reporting back to Home Assistant. And when I started to see the temperatures

03:49.920 --> 03:55.680
that that little cabinet, if you'll allow it, was getting up to in the middle of the day when it's

03:55.680 --> 04:00.400
only 70 degrees. And here I'm going to Austin where it's going to be 100 degrees during the

04:00.400 --> 04:05.200
day while I'm there. And while I'm up in the Pacific Northwest, this thing's getting to about

04:05.200 --> 04:12.320
83 degrees. This is the inside of your dinette seat. Yeah. What I'm now calling my server cabinet.

04:12.320 --> 04:17.840
Server seat. Oh, server seat is great. Thank you. Yeah. So in the server seat, it's getting up to

04:17.840 --> 04:23.440
83 degrees. So what I realized I needed to do is I needed, first of all, I needed to check the

04:23.440 --> 04:28.800
thermals of the actual Raspberry Pis, which were high, but they're not dangerously high,

04:28.800 --> 04:33.200
but they were high. And then I needed to reduce hardware. I've been meaning to do this anyways.

04:33.200 --> 04:38.640
I wanted to shut down two of them and just reduce power draw and reduce heat output.

04:38.640 --> 04:44.400
So six minus two, that still leaves you with four Raspberry Pi 4s in there though, right?

04:44.400 --> 04:48.400
Not all of them are in the RV. I have a couple of Raspberry Pis here at the studio now too.

04:48.400 --> 04:49.280
Oh, okay. Okay. Yeah.

04:51.200 --> 04:54.240
So this was all an innocent goal, but in order to accomplish this,

04:54.240 --> 05:00.640
I needed to move some of my containers and all of my Plex media over to a different Raspberry Pi.

05:00.640 --> 05:04.880
This is where I started thinking I could take the drive that's attached to the pie. I'm shutting

05:04.880 --> 05:12.560
down, connect it to the Raspberry Pi I'm keeping and utilize merger FS to enjoy the storage across

05:12.560 --> 05:19.200
both these discs because I needed more than the terabyte that I had. That's that probably would

05:19.200 --> 05:25.280
have worked probably should have been the route I went, but it was not what I ended up doing.

05:25.280 --> 05:33.520
Instead, I got the wild idea. Now understand that it's, it's technically actually not that crazy,

05:33.520 --> 05:39.440
but I got the wild idea to convert the extended four file system on that drive. I was taking away

05:39.440 --> 05:44.240
from the pie. I was decommissioning and I would plug it into the new pie. And when I plugged it

05:44.240 --> 05:49.120
in before I mounted it, before I did anything in production, before I started up any containers,

05:50.000 --> 05:55.760
I converted it to butter FS. Now that isn't actually that crazy of a process.

05:56.640 --> 06:02.160
Unless you disconnect from your server in the middle of the conversion because it's too late

06:02.160 --> 06:08.560
at night and you are just an idiot. You're just a dumb idiot. You disconnect your SSH session

06:08.560 --> 06:14.960
while that session is running a butter FS convert and you didn't use screen or Tmux because you're

06:14.960 --> 06:23.600
a dumb idiot. Then, then you can really muck up your file system and be in a data loss situation,

06:23.600 --> 06:29.040
which is where I found myself. I've heard a lot of different situations in which data loss is

06:29.040 --> 06:35.040
possible with butter FS and your experiences is just adding to that list. Unfortunately,

06:35.040 --> 06:42.400
with merger FS, there's no configuration file. It's just a line in your FS tab. So to add a new

06:42.400 --> 06:48.800
disk, you have, you know, slash mount slash disk one, colon slash mount slash disk two,

06:49.280 --> 06:55.680
and that's it. It's done. It supports drives which already have files on them. It supports

06:55.680 --> 07:01.200
pretty much any underlying file system. There's no striping. There's no magic essentially. It's

07:01.200 --> 07:10.160
just merging files that live somewhere else in the fuse user space, like file layer, super simple,

07:10.160 --> 07:17.440
supports USB drives, hot plugging of stuff as well. And it just works, you know, I've been

07:17.440 --> 07:23.840
using it for throughout five years now, I think, and zero complaints. Not what you want to hear

07:23.840 --> 07:34.240
right now, I'm sure. Well, you know, it's I have a bias against that kind of stuff in user space.

07:34.240 --> 07:39.600
For me, this should all be kernel level stuff and file system level stuff like deep down in the OS,

07:39.600 --> 07:48.800
it should I look at the systems out there. Apple has a PFS BSD has ZFS and Linux for a built in

07:48.800 --> 07:54.560
file system that's supported at the kernel level, and also a decent candidate for low end hardware.

07:55.360 --> 08:00.800
Your options are narrowed down to butter FS. And I think when I looked at that volume add

08:00.800 --> 08:06.400
capability, and I thought the idea that I could add more storage like this with mismatched disks

08:07.200 --> 08:12.560
to this volume that I have my media on, and it will just perpetually grow. Well, that's sort of

08:12.560 --> 08:19.360
the drobo promise, I can now have a drobo like promise in a Raspberry Pi file server.

08:19.920 --> 08:23.600
And it'll be supported down at the OS level. And then just the other thing is,

08:24.400 --> 08:31.760
much like a ZFS does, I wanted a more robust file system that had a good set of user space tools

08:31.760 --> 08:38.160
to check my data and validate my data and take snapshots and do checksums. And I wanted to copy

08:38.160 --> 08:42.640
on right for certain things, but I wanted to disable copy on right for other things. And these

08:42.640 --> 08:49.840
were all features that butter FS gives me outside of the storage pooling. And so I opted even after

08:49.840 --> 08:56.800
I had to rebuild the system and restore data, I opted to go with butter FS again. So what's

08:56.800 --> 09:02.720
the lesson here then? I would have thought it would be don't use butter FS, but clearly you

09:02.720 --> 09:08.000
feel differently. Well, I mean, don't always do as Chris does the Raspberry Pis themselves are a bit

09:08.000 --> 09:13.920
of an experiment in using this platform for serious work. And I think in that vein, it needs

09:13.920 --> 09:19.600
to have a file system that's serious. I'm not butter FS biggest advocate, but I do think it

09:19.600 --> 09:27.120
does offer certain functionality, like SSD trim support that will add long term life to my storage

09:27.120 --> 09:32.960
and I'm hesitant to advocate for it. But I am interested in experimenting with it. I do think

09:32.960 --> 09:38.160
there was lessons learned in this. It may end up being ultimately don't use butter FS. I'm not

09:38.160 --> 09:44.000
willing to make that call yet, but I should have just taken a backup of everything before I started.

09:44.000 --> 09:48.000
We're going to talk about cloud backup storage in a moment and I'll talk about where mine

09:48.000 --> 09:54.240
really horribly failed me. But the bad was on me for not going there right before I started and

09:54.240 --> 09:59.440
taking a backup. I should have checked backups regardless, even if I didn't take one. I should

09:59.440 --> 10:04.800
have checked my backups before I started. And ultimately, I should have used screen or TMUX

10:04.800 --> 10:11.600
whenever I was doing something as critical as a file system conversion over an SSH session.

10:11.600 --> 10:17.280
Even if I had Ethernet, etc, etc, it doesn't matter. I should have been more cautious with

10:17.280 --> 10:22.080
that kind of thing. That's a sacred task you're performing. And I think if I hadn't been using

10:22.080 --> 10:26.480
my computer for other things, i.e. web browsing at the same time, I wouldn't have made that mistake.

10:26.480 --> 10:33.520
Yeah, you go into full details on Linux Unplug episode 355, a lot more detail than this actually

10:33.520 --> 10:39.520
about the mechanics of what you were doing and everything. But one of the things that you raised

10:39.520 --> 10:47.840
that just made my heart go out to you was you'd started taking notes and documentation and applying

10:47.840 --> 10:53.200
some craftsmanship to this stuff and you've effectively lost your entire configuration

10:53.200 --> 11:00.000
going back until March. Yeah, this is really a lesson learned and something that people maybe

11:00.000 --> 11:04.560
can think about for their own backup strategies. But you guys probably if you've been listening

11:04.560 --> 11:10.080
to the show recall that I had a whole series of markdown notes using a web front end. And I had

11:10.080 --> 11:16.640
smoke ping and sync thing and I had the speed the Libre speed test app and I had a couple of other

11:16.640 --> 11:22.160
little tools I used to just monitor things in the RV. And all of this was running on this Raspberry

11:22.160 --> 11:26.960
Pi and the configuration for all of that was being backed up with duplicati, which I love.

11:27.680 --> 11:32.800
And that was being saved off site with AES encryption to Google Drive because I've paid

11:32.800 --> 11:37.360
for a terabyte of Google Drive storage for a long time. And that was happening at 3 a.m.

11:37.360 --> 11:42.160
And that's one of those things where for months I check on it regularly. And every time I check on

11:42.160 --> 11:48.080
it. Yep, it was there. Good, good, good. And then I had this little job that said also then now save

11:48.080 --> 11:52.800
a copy off to Dropbox. Another, you know, just spread it across two cloud storage providers

11:52.800 --> 11:59.120
that I have storage on and it's AES encrypted locally so I'm good to go. And I stopped checking

11:59.120 --> 12:05.920
on it. Well back in March, beginning of March, my debit card expired. And the way Google works is

12:05.920 --> 12:10.960
you have to go back in and re-enable each service that you subscribe for. So I added payment for

12:10.960 --> 12:17.440
YouTube TV and YouTube Premium and I just kind of daftly assumed that my Google account now had the

12:17.440 --> 12:23.040
payment information and so billing would resume. That was a critical mistake that I made. So if

12:23.040 --> 12:27.200
you're using cloud storage, and we always talk about using the cloud carefully, well this was

12:27.200 --> 12:31.920
an area where I wasn't very clever. I have not really dug through my inbox to see if I have any

12:31.920 --> 12:38.000
alerts from Google. I may. But what ended up happening is I had nearly 900 gigs of storage

12:38.000 --> 12:44.160
on Google Drive and they had reverted me back to the free tier. So Alex, I was using like nearly

12:44.160 --> 12:51.200
880 gigs or 890 gigs out of 15 gigabytes. It's pretty impressive. So obviously Google Drive

12:51.200 --> 12:56.800
wasn't accepting any new files and that had been that way since March. So Duplicati had been failing

12:56.800 --> 13:00.720
and I actually never logged into Duplicati to check the logs there because it's gone. It's

13:00.720 --> 13:07.280
gone now. So my backups are only as good as of March, which is the bulk of my documentation,

13:07.280 --> 13:11.680
but not all of my documentation. When I immigrated, I had a very similar situation

13:11.680 --> 13:16.240
to the point where I now have a Todoist reminder once a month to go in and manually check on

13:16.240 --> 13:21.280
Duplicati. That's a good idea. I should do that too. A recurring reminder to just check in on

13:21.280 --> 13:27.040
the backups. Thanks. Five minutes. And what's also good about doing that is you can go in with

13:27.040 --> 13:34.080
Duplicati or say drone footage backup last ran yesterday took eight minutes, but I spotted today

13:34.080 --> 13:41.600
that my container app data back up to Google Drive took four hours last night. And I sort of think,

13:41.600 --> 13:46.320
huh, what's going on? So I went and looked at the ZFS data sets that I have. Turns out that

13:46.320 --> 13:52.880
music brains mirror is something like 15 or 20 gig a day. And obviously with copy on write,

13:52.880 --> 13:58.560
that space is being consistently used, you know, after snapshot after snapshot. So yeah,

13:58.560 --> 14:05.440
just something to watch out for if you are going to do that self hosted music brains mirror.

14:05.440 --> 14:09.920
Jeez, man. You know, you're not on fiber anymore. You know that, right? Yeah, I know.

14:11.360 --> 14:15.920
Yeah, I think maybe I was a little cavalier with using Google Drive. Not that there's really

14:15.920 --> 14:23.440
anything necessarily wrong with it, but I do not use Google Drive regularly. Like I have used

14:23.440 --> 14:29.280
services that utilize Google Drive and save data there, but I'm not a frequent drive user myself

14:29.280 --> 14:35.360
should be a last resort. Yeah. And so what ended up happening was I just didn't check it. And so

14:35.360 --> 14:40.160
I didn't notice for over a month and change that it wasn't it wasn't current that the subscription

14:40.160 --> 14:45.760
wasn't current. And then I only I only found out when I went to log in to go recover the backups.

14:45.760 --> 14:52.000
I think in retrospect, I probably should have used a better tool for me. And that would probably be

14:52.000 --> 14:56.640
something like backblaze. Although I know you kind of did a deep dive into the services recently. So

14:56.640 --> 15:02.000
maybe you'd recommend something else. But as I'm rebuilding, that's my top candidate right now.

15:02.000 --> 15:07.120
Yeah, backblaze looks pretty good. So yeah, let's let's break it down a little bit. There are two

15:07.120 --> 15:13.200
types of cloud backup strategies that you can adopt really. One is a service, you know,

15:13.200 --> 15:20.800
like backblaze or glacier or our sync.net. And the other is to use some tools that plug into

15:20.800 --> 15:26.400
generic storage providers like duplicati or restic. And so, you know, we've talked a little

15:26.400 --> 15:33.680
bit about duplicati just now, and we both use it plugged into Google Drive. Now, there is a hack

15:33.680 --> 15:40.640
over on the data hoarder subreddit, where if you have G suite for your domain, per user,

15:40.640 --> 15:45.440
officially in the T's and C's, there is a one terabyte per user limit to your Google Drive.

15:45.440 --> 15:53.520
But I have about three terabytes in mind, and it's been just fine for a year plus. If you get

15:53.520 --> 16:00.800
to five users officially, Google will remove that one terabyte per user cap, and everybody becomes

16:00.800 --> 16:07.520
unlimited. The nice thing here is that with the G suite thing and a single user on the domain,

16:07.520 --> 16:14.160
they don't enforce the one terabyte limit anyway. So effectively, I'm using 3.5 terabytes of one

16:14.160 --> 16:19.360
terabyte. So with one user, you're pretty much good to go, or with five or more users.

16:19.360 --> 16:24.240
It just works. And it works with rClone, which is another wonderful tool that lets you treat

16:24.240 --> 16:30.080
Google Drive effectively as a remote file system. Now, another tool, this one actually came onto

16:30.080 --> 16:37.760
my radar as part of the Home Lab OS review that we did. And this one's called restic. And again,

16:37.760 --> 16:46.160
the cost of this solution depends on the back end. So it supports local storage, SFTP, S3 endpoints,

16:46.160 --> 16:52.560
Google, et cetera, et cetera. I mean, the list is long for both duplicati and restic.

16:53.280 --> 17:01.200
But restic is a single, no dependency binary written in Go, which allows you to do backups

17:01.200 --> 17:05.920
with snapshots and tagging as well. It's all command line driven. I don't believe a web

17:05.920 --> 17:12.240
interface like there is for duplicati. So depends which floats your boat as to which one you prefer.

17:12.240 --> 17:18.880
I think they both have their pros and cons. Those are the two primary tools that I have looked into

17:18.880 --> 17:25.360
and are basically bring your own storage. But if you're looking for a service, somebody that's

17:25.360 --> 17:31.760
going to provide that storage for you, Backblaze is probably for most of us, home users, it's

17:31.760 --> 17:36.560
probably the big juggernaut in this space. Actually, when I went to their website earlier

17:36.560 --> 17:42.240
on my Linux desktop, it came up, hello, Linux user, do you want to go to our how to backup

17:42.240 --> 17:47.040
your server or backup your Linux machine page automatically, which I thought was kind of nice.

17:47.680 --> 17:53.360
And they recommend that you use something called duplicity, which is kind of similar to duplicati

17:53.360 --> 17:56.640
in name. And it took me a while to figure out they were actually two different tools.

17:56.640 --> 18:02.560
So duplicity is the tool that Backblaze recommend that you use to interface with this

18:02.560 --> 18:09.040
service from Linux. It's very appealing, you know, Backblaze is backup as a service, really.

18:09.040 --> 18:17.040
They have very simple pricing, $60 per year per computer, which led me to the obvious conclusion,

18:17.040 --> 18:23.920
given that I have a big NAS in my house. If I just back up all of my computers to my NAS,

18:23.920 --> 18:29.760
surely I can back up my NAS to Backblaze. And then I only have to pay the $60 and not, you know,

18:29.760 --> 18:32.480
five or six times $60 a year.

18:32.480 --> 18:37.760
Right. That's the model I think is appealing to me, especially with the big NAS here at the studio.

18:37.760 --> 18:43.680
That could be my local source of truth. And then using duplicity, which is, by the way,

18:43.680 --> 18:48.960
a great tool, because not only does this work Backblaze, but every single cloud storage you

18:48.960 --> 18:56.320
could conceive of, from Dropbox to FTP to even using IMAP as a storage back end. It's everything.

18:56.320 --> 18:58.880
IMAP. That's cool.

18:58.880 --> 19:04.800
It's just wild, isn't it? And it uses LibRsync for incremental archives. So it's essentially

19:04.800 --> 19:12.720
using Rsync to do the Delta and GnuPG to do the encryption. So it's pretty solid and it's

19:12.720 --> 19:14.720
sending up essentially encrypted TARs.

19:14.720 --> 19:20.640
That's very cool. Now, another service that I've used in the past, this one was from my mom,

19:20.640 --> 19:26.560
actually. She has a two bay Synology NAS that she stores all of her photos on, which lives under

19:26.560 --> 19:33.600
her stairs. And they have a plugin for Amazon's Glacier service, which is, there's some conjecture

19:33.600 --> 19:37.280
on the internet as to whether it's tape based or whether it's hard drive based, or whether it's

19:37.760 --> 19:43.600
robots pulling hard drives out of servers and storing them in different places. I have no idea

19:43.600 --> 19:50.800
how it actually works. All I know is it's very, very cheap for long term storage until, and this

19:50.800 --> 19:55.600
is where you have to be super duper careful with Glacier, the retrieval costs can be extremely

19:55.600 --> 20:01.120
steep. So that's just something to bear in mind. If you need that data quickly after a failure,

20:01.120 --> 20:06.000
Glacier might not be the best option for you. If you're willing to wait and download, I forget

20:06.000 --> 20:09.760
what the limits are exactly, but they have a daily limit of what you can download under a

20:09.760 --> 20:16.000
certain tier, like Amazon loves to nickel and dime people in their cloud services. It just

20:16.000 --> 20:20.560
silently works and gets on with the job as part of a Synology plugin. There are other ways to

20:20.560 --> 20:25.680
interface with Glacier as well. The final service that I wanted to mention, and it's an honorable

20:25.680 --> 20:32.800
mention because it's very expensive for mere mortals like us, is rsync.net. They base all of

20:32.800 --> 20:40.480
their storage, the advertiser is being built on top of ZFS. The main selling point here is that

20:40.480 --> 20:46.320
rsync.net has been around for a very long time. And whilst they're quite pricey at two cents per

20:46.320 --> 20:53.360
gigabyte per month, you can interface with it using rsync, obviously hence the name, or ZFS

20:53.360 --> 20:59.120
send and receive, or any other tool that you can pretty much think of that runs on the Linux

20:59.120 --> 21:06.080
command line. It's run by a bunch of extremely knowledgeable Linux-y people and comes very

21:06.080 --> 21:11.040
highly recommended whenever you look on rsysadmin or the more nerdy subreddits.

21:11.040 --> 21:16.800
I'm going to give a plug for Tarsnap for those of you who are truly paranoid. This is how Alan

21:16.800 --> 21:22.640
Jude backs up his taxes. He doesn't back up everything, but the stuff that is really important

21:22.640 --> 21:28.160
that isn't very large, but you want offsite, Tarsnap is the way to go. It's not the cheap

21:28.160 --> 21:34.960
but it is truly the one that has stood the test of time in terms of security. I'll put a link to

21:34.960 --> 21:40.240
that or it's tarsnap.com. That's like small scale offsite backup and you'll have to learn how to

21:40.240 --> 21:44.640
integrate with it because it is a little particular, but it might be the right fit for some

21:44.640 --> 21:49.680
of you for limited types of backups. All right, shall we follow up on the Home Assistant situation

21:49.680 --> 21:53.520
from last time? Yeah, I mean, I think they've listened. I think we can stand down from red

21:53.520 --> 22:01.760
alert and continue course because it appears the quote-unquote Home Assistant supervised method of

22:01.760 --> 22:08.320
putting Home Assistant with the supervisor on a generic Linux system via containers will be

22:08.320 --> 22:13.520
officially supported and documented. Hallelujah. Yeah, there are more name changes, but I think

22:13.520 --> 22:18.560
it's really great to see such a positive response to the community's feedback since our last

22:18.560 --> 22:24.800
episode. There is a blog post linked in the show notes, which covers all of the name changes. I

22:24.800 --> 22:28.080
picked up some changes in philosophy and how they're going to actually interface with the

22:28.080 --> 22:34.000
community moving forward instead of, I really felt like in the post that we talked about last week,

22:34.000 --> 22:39.680
the community was this big beast that they were trying to tame. Whereas in this post here, they're

22:39.680 --> 22:44.560
embracing it and I'm so happy to see that. I thought it was really great that they listened and

22:44.560 --> 22:48.640
yeah, great job Home Assistant. Yeah, I do recommend you go through and read the supported

22:48.640 --> 22:53.920
installation methods, even if it's just to learn the vernacular. Home Assistant now refers to the

22:53.920 --> 23:00.400
all-inclusive home automation system with their OS, either via VM or some other method. Home

23:00.400 --> 23:06.560
Assistant container is now the new name for Home Assistant core, which is just the core of Home

23:06.560 --> 23:12.240
Assistant running in a container. It does not have the supervised experience. It's a new name.

23:12.240 --> 23:18.240
It was previously Home Assistant core on Docker. It's now just Home Assistant container. And then

23:18.240 --> 23:24.800
there's Home Assistant supervised. That is the method previously known as has IO on generic

23:24.800 --> 23:30.800
Linux. It is now the full Home Assistant experience with supervisor on the regular Linux operating

23:30.800 --> 23:36.640
system, the method that Alex and I use and love. And then Home Assistant core is just running the

23:36.640 --> 23:43.440
application directly on Python on a Linux box. No container, no VM, it's just your Linux install

23:43.440 --> 23:48.400
running the Python application that is now known as Home Assistant core. But it's probably better

23:48.400 --> 23:52.800
to read everything because it'll sink in more. But now when you hear us refer to these things,

23:53.440 --> 23:57.600
that's what we're talking about. This is a little joke for the UK listeners. It's the

23:57.600 --> 24:03.200
Ronseal naming strategy does exactly what it says on the tin. Home Assistant container. You don't

24:03.200 --> 24:07.600
need to explain what that does. It just it's obvious. So great, great job. Home Assistant

24:07.600 --> 24:12.560
supervised. You know, I'm running it on a Linux box with containers and it's supervised. Easy.

24:13.120 --> 24:18.080
So yeah, Alex, I think overall I agree with you. I kind of have one thing to say about all of this

24:18.080 --> 24:25.360
and it's whoo. Yeah, thank goodness. Yeah, thank goodness. I was getting a little upset. Why don't

24:25.360 --> 24:30.960
we do a little wiki follow up? It's been a minute. It has. Yeah. Today we were watching the

24:30.960 --> 24:36.720
SpaceX launch get scrubbed, unfortunately. And whilst we were doing so, I was talking with

24:36.720 --> 24:44.320
somebody on the Discord about wikis and it came to my attention that we were talking about Tiddly

24:44.320 --> 24:48.800
Wiki and I was busy, you know, telling them just how much I love it. And we last talked about

24:48.800 --> 24:56.560
wikis on episode 12. And I wanted to just let you all know how much I love Tiddly Wiki after that

24:56.560 --> 25:02.480
time. It's fantastic. And I saw the long term review follow up. It seems that's great. Well,

25:02.480 --> 25:07.280
kind of. I mean, yeah. What? What? Three or four months in 2020. Three or four months feels like

25:07.280 --> 25:13.440
three or four years. But yeah, exactly. So you're still you're still in the love phase. Have you

25:13.440 --> 25:17.680
actually been using it on the regular then? I've been trying to use it whenever I start googling

25:17.680 --> 25:24.080
something more than two or three times. For example, my low power PF sense x86 build I talked

25:24.080 --> 25:29.920
about in the previous episode, I was constantly looking for that server builds.net forum post

25:29.920 --> 25:34.160
over and over and over. So I thought, why don't I just create a wiki entry, put the link in there,

25:34.160 --> 25:38.960
and then every time I need it, I just go to my wiki and find it. And then I can obviously include

25:39.600 --> 25:44.240
the content of that forum post in the wiki. So I don't even actually need to go to the forum

25:44.240 --> 25:50.640
anymore. It just speeds things up for me. No end. Yeah, it does. I've done that recently myself.

25:50.640 --> 25:56.960
That's how I did some of my documentation, but even just doing this rebuild, as I was reusing

25:56.960 --> 26:01.040
some of the same butter fs commands over and over again, I just started a new document up. All

26:01.040 --> 26:04.480
right, let's start documenting these commands I use frequently, because it's a little different

26:04.480 --> 26:09.360
over here in butter land, create a personalized ZFS cheat sheet. That's something I've done. And

26:10.080 --> 26:13.840
I was thinking about trying to make it public. But then there's an awful lot of stuff in there

26:13.840 --> 26:19.120
that is actually personal. And so unfortunately, I don't think I can really find a way without

26:19.120 --> 26:24.320
hosting a second, you know, sanitized wiki, which is just, it's a lot of work for me personally to

26:24.320 --> 26:31.040
do. We are still working on the wiki.selfhosted.show wiki. So if you're interested in contributing to

26:31.040 --> 26:36.800
that, head over to selfhosted.show slash discord. And, you know, you can talk to us about how to

26:36.800 --> 26:42.480
contribute. But going back to tiddly wiki a little bit, a couple of key plugins that have made it

26:42.480 --> 26:48.560
really great for me is spending the time to configure the table of contents plus the

26:48.560 --> 26:55.440
contents plugin as I would like it. And this is really for me, the key thing that makes tiddly

26:55.440 --> 27:00.800
wiki work so well for me personally. And I'm aware that you know, picking a wiki is like picking a

27:00.800 --> 27:05.920
pair of shoes. It's very personal type thing. I can't tell you what pair of shoes works for you,

27:05.920 --> 27:10.960
you just have to figure it out for yourself. But the reason I love tiddly wiki so much is that if

27:10.960 --> 27:16.160
I have an article, and let's take for example, something about home automation, flashing

27:16.160 --> 27:20.480
with Tasmota, for example, you could probably think of five or six different categories that

27:20.480 --> 27:25.040
that article could live in. It could live in home automation, it could live in Tasmota,

27:25.040 --> 27:32.480
it could live in Shelly's, IoT devices, whatever, right. And in a normal hierarchical note structure,

27:33.120 --> 27:37.520
you'd have to pick one and stick with it, or duplicate the article and put it in two or

27:37.520 --> 27:44.240
three different places. With tiddly wiki, I can set a tag on that tiddler, I hate that name,

27:44.240 --> 27:49.920
but I can set a tag on that tiddler. And it will show up automagically in those three or four

27:49.920 --> 27:55.520
different categories that I set in the table of contents. So it just works in the same way that

27:55.520 --> 28:02.400
my brain does. And I find that incredibly powerful. Jog my memory, Alex, are these all text files

28:02.400 --> 28:06.960
on the back end? Because through this whole catastrophe, I was so grateful that I had the

28:06.960 --> 28:12.480
original markdown files on my file system. So I could just use my built in OS search to look

28:12.480 --> 28:17.680
stuff up. I didn't have to use the app. Yes, they are. I am happy to report. There's a couple of

28:17.680 --> 28:22.000
different formats that tiddly wiki uses. One is markdown. If you use the markdown plugin,

28:22.000 --> 28:27.200
it just ends up as a regular dot MD file with a bit of front loaded, you know, metadata at the

28:27.200 --> 28:33.120
front. It's got five or six lines of metadata that tiddly wiki uses, but the actual content is

28:33.120 --> 28:39.120
completely, you know, unruined and untouched. It's vanilla markdown. And the nice thing about

28:39.120 --> 28:44.560
that is it means I can use tools in Emacs like deft, for example, or I can grip the files or I

28:44.560 --> 28:49.440
can open them in vim or I can, I can do whatever I want because it's just a plain text file.

28:50.080 --> 28:55.920
The only downside to that is it means adding images is still a little bit clunky. I have to

28:55.920 --> 29:00.960
add the image as a separate tiddler and then link to that tiddler from the one I'm writing.

29:00.960 --> 29:06.560
So it's a two or three step process instead of a one or two step process. That's the only negative

29:06.560 --> 29:12.560
I would say about tiddly wiki is images are a bit of a pain, but once they're in and you

29:12.560 --> 29:17.920
figure out the workflow, it's absolutely not a showstopper at all. So the other format that

29:17.920 --> 29:24.480
they use is a.tid file, a.tid file. And again, that's largely just plain text with a little bit

29:24.480 --> 29:30.320
of front loaded metadata in it. Well, thank you, Alex. I really like the idea of us doing

29:30.320 --> 29:34.640
long-term check-ins of different lengths as we try these things and coming back with our

29:34.640 --> 29:39.200
experience after having used them for a bit, because that's often a lot different than when

29:39.200 --> 29:42.880
you first implement something, but it sounds like it's working for you. So that's cool.

29:42.880 --> 29:49.040
Let's do a hashtag ask SSH. Mark from New Hampshire writes in with a question about

29:49.040 --> 29:54.720
wifi. He says a local charity are looking to outfit a property with solid wifi, both indoors

29:54.720 --> 30:01.120
and outdoors. My obvious go-to recommendation was Unifi, but tell us what else is there?

30:01.120 --> 30:06.480
Here are some requirements, and they're pretty extensive with some of them being pretty doable,

30:06.480 --> 30:11.280
some of them not. 300 foot radius, two feet thick external stone walls. There's a lot of

30:11.280 --> 30:16.880
information in here, Alex. There's some areas where there's some water. They'd like support

30:16.880 --> 30:21.680
for multiple networks and VLANs, so they can have a caretaker network, a sensor network,

30:21.680 --> 30:26.880
a public network. Of course, it's going to need DHCP, bandwidth throttling on the public network,

30:26.880 --> 30:32.000
and some external remote management would be a plus because can't always be on site to manage

30:32.000 --> 30:38.320
this thing. It's a tricky one. He asked me through the Discord server, what should I buy? And I

30:38.320 --> 30:43.440
thought to myself, this would make a perfect ask SSH because there's so many facets to this

30:43.440 --> 30:51.280
particular question. Some of the outbuildings don't have power, for example. So even running POE is

30:51.280 --> 30:55.680
going to be tricky because they're two or 300 feet away. So you'd have to dig a trench and bury it

30:55.680 --> 31:00.880
in a conduit and it's not really feasible. So what we were looking for in terms of an answer for this

31:00.880 --> 31:08.400
was if the answer is Unifi, which particular Unifi gear should they buy? Remember, this is a charity,

31:08.400 --> 31:16.880
so don't go crazy with super expensive enterprise gear. And if it isn't Unifi, what else is there

31:16.880 --> 31:23.200
that would fill these needs? So I think the price is an interesting one. I know that Young Chris

31:23.200 --> 31:29.600
would have reflashed some cheaper consumer routers off of eBay and distributed them around. I mean,

31:29.600 --> 31:37.920
I have done that and then use WDS as a network extender. Oh, yeah. Also try the trick of just

31:37.920 --> 31:44.960
buying a bunch of cheap, same exact routers and naming the SSIDs all the same and just distributing

31:44.960 --> 31:49.680
them sort of at the edge of each other's ranges. I have done that as well, but those are not

31:49.680 --> 31:53.760
centrally manageable. They're not going to give you multiple networks and VLANs. They're not going

31:53.760 --> 31:57.840
to give you, in some cases, bandwidth prioritization, although in some cases they actually will.

31:58.640 --> 32:07.040
So I think it's a question of how much Unifi gear to buy versus a total DIY Wi-Fi setup,

32:07.040 --> 32:12.640
which I just wouldn't recommend anymore. Or even these days, mesh. Is a mesh network a good idea?

32:12.640 --> 32:18.240
The cost there, though, that's what the trick is. And if you want a mesh network that really

32:18.240 --> 32:23.680
performs, your best route is to go with an Ethernet backhaul. That sounds like it's tricky

32:23.680 --> 32:31.920
in this scenario. Yeah, it's a historical reenactment society. And therefore, they have

32:31.920 --> 32:38.320
some requirements around stringing cables. Not very easy for them. If we were like Mythbusters

32:38.320 --> 32:43.600
or the top gear of self-hosting podcasts, maybe in 20 years, Alex, when everybody's watching,

32:43.600 --> 32:49.200
you know what I would love to try is taking extension cords and running them out at these

32:49.200 --> 32:55.520
events and putting power over Ethernet adapters on different ends of the extension cords and seeing

32:55.520 --> 33:01.440
if you could actually use an extension cord as essentially an Ethernet cable. Wouldn't that

33:01.440 --> 33:05.280
be a fun experiment? I bet you it wouldn't work. Haven't you just described Powerline?

33:05.280 --> 33:08.960
Yeah, exactly. Powerline Ethernet. Yes, I'm talking about it. But just take the extension

33:08.960 --> 33:14.640
cord and run it out to the yard with a Powerline Ethernet adapter on either side. It's the ugly

33:14.640 --> 33:20.320
uncle in this situation. Unfortunately for Mark, I don't believe that the remote buildings have

33:20.320 --> 33:24.640
any power. But that would be an interesting one. If Powerline was an option, that would solve

33:25.680 --> 33:29.840
something. When we get our self-hosted YouTube channel going, we'll do these kinds of experiments,

33:29.840 --> 33:35.760
right? Yeah. In the meantime, I do think because of that central management and the support from

33:35.760 --> 33:41.040
multiple networks, you're going to want APs that can have multiple SSIDs and probably have multiple

33:41.040 --> 33:46.240
channels. For example, one of the things I do with my guest networks is I just 2.4 those.

33:47.120 --> 33:52.720
IoT devices and public guest networks, just 2.4 and I reserve the higher bandwidths,

33:52.720 --> 34:00.640
the higher frequencies. All of my little ESP8266 boards only support 2.4 gigahertz, which helps.

34:00.640 --> 34:07.760
There's that too. I have a dedicated IoT SSID which only broadcasts on 2.4. So there's no

34:07.760 --> 34:13.600
question, right? All of these devices are on 2.4. I save the 5 gigahertz for the good stuff.

34:13.600 --> 34:18.400
I've got to be streaming my Plex at full bandwidth. That's exactly it. That's how I do it.

34:18.400 --> 34:24.640
And I make sure that the public network does not have any way to talk to the other networks. It

34:24.640 --> 34:31.120
just routes out to the internet and that is it. But I think to put a cap on Mark's question, I

34:31.120 --> 34:36.000
would look at trying to run power out to the barn and then use the barn as a redistribution point

34:36.000 --> 34:41.600
when you look at his setup here and try to just get it down to three APs with a controller. And

34:41.600 --> 34:46.000
I think you're probably going to just find that the Unifi products are the best for that. Let us

34:46.000 --> 34:50.720
know how it goes, Mark. In fact, if you have a question or maybe you have a suggestion for Mark,

34:50.720 --> 34:58.320
go to selfhosted.show slash contact or hit us up on Twitter with the hashtag ask SSH and we'll try

34:58.320 --> 35:01.360
to get it into a future show. We love doing those. Still trying to figure out what the

35:01.360 --> 35:05.440
other S stands for. Yeah, maybe they could tweet us and let us know. Give us a suggestion for that

35:05.440 --> 35:10.880
extra S. You know, while we were talking about merger FS today, Alex, I remembered that it was

35:11.760 --> 35:15.840
kind of a while ago, but there is an extra you did with the merger FS developer.

35:15.840 --> 35:23.440
Correct. That is extras.show slash 28 if you're interested in that. Myself, Brent and Drew sit

35:23.440 --> 35:28.880
down with Antonio, who's the developer, and we talk through the motivations behind creating

35:28.880 --> 35:33.680
merger FS along with a bunch of other stuff as well. So if you're interested in that one, extras.show

35:33.680 --> 35:40.760
slash 28. You can find me on Twitter at ironic badger. I'm at Chris LAS. The show is at self

35:40.760 --> 35:46.480
hosted show and the network is at Jupiter signal. That's a lot of Twitter handles.

35:46.480 --> 35:48.240
It's too many Twitter handles, Alex.

35:48.240 --> 35:51.520
We need to write a bot that will iterate over an array of Twitter handles for us and just

35:51.520 --> 35:52.720
spout it out on air.

35:52.720 --> 35:56.400
We need Twitter raid. That's what we need. Redundant array of Twitter handles.

35:57.920 --> 35:59.040
What does that even mean?

35:59.040 --> 36:10.560
And so thanks for listening, everyone. That was self hosted dot show slash 20.


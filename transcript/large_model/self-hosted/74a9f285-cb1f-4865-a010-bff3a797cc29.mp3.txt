Coming up on today's show, we get fancy with traffic labels and then gush over
some of the new home assistant features while we save our data from certain
failure.
I'm Chris and I'm Alex, and this is self hosted.
I'm so excited.
Autumn is here.
The fall is here.
I'm wearing jeans today for the first time in five months.
Yeah.
I'm wearing pants too.
And I don't typically podcast with pants.
I love that.
That's a thing.
I don't typically podcast with pants.
It's too warm.
You know, a gentleman wants to be comfortable, so that way his
analysis is comfortable.
You got nothing.
You're just thinking back over all the episodes, pantless.
Hey, I didn't say I'm not wearing shorts, Alex.
You know, I'm not saying I was thinking that you do what you're thinking with
your dick, so you've got to keep that at the correct temperature.
And well, let's just say I can't think if it's too warm, but then thought
that probably wasn't, wasn't radio appropriate.
No, of course not.
No, of course not, no, no, of course not.
You know, what we ought to do is, uh, maybe not talk about our pants and
instead talk about, you know, self-hosting things.
Maybe this episode is brought to you by a cloud guru.
Are you looking to get a high paying career, maybe move into the cloud
and make some good change?
Well, there's no better place to start than getting a certification.
ACG has helped more than 2 million people scale up on the cloud, AWS, Azure,
and Google cloud platform head over to cloud guru.com and get started.
So let's crack things off with a public service announcement.
All right.
The Linux server to IO team have made some changes to their reverse proxy.
So for many, many years, they've released a let's encrypt container.
Now they've been contacted by let's encrypt to enforce their trademarks.
So they've had to rename it.
They've renamed it swag for secure web application gateway.
Oh, okay.
I thought it was going to be security. We all get, it could be.
I mean, it's an acronym.
It can be whatever you want, right?
I like to think so.
It's a drop in replacement for the existing let's encrypt container.
And there is a blog post linked in the show notes.
So if you're running the old one, it's going to stop being updated
in favor of this new one.
Just go ahead and update your compose file or whatever you're doing.
Well, you know, big congratulations to Linux server.io for getting large enough
that they showed up on the trademark radar of let's encrypt.
That's a milestone. I think they're at about 12 billion pulls these days.
So that they're doing pretty well.
Ooh, we, I know I'm one of them.
I just pulled down, uh, my new images for plex, sync thing, and a few other very
handy backend services that are Linux server, IO, Docker images.
So I have a link to that, like, like Alex said, self-hosted dot show slash two eight.
We'll talk a little bit more about some new Linux server image
that's been released this week.
But first I've been experimenting with traffic, uh, it's spelled T R a E F I K.
So traffic is kind of how it's spelled, but I think everybody just says it traffic.
Yeah.
We've talked about it a little bit before on the show.
Now in the last episode, I mentioned Lychee, which by the way, if you're
American is pronounced leechy and if you're from the UK is pronounced Lychee.
I went on Wikipedia and checked.
Oh, that's, that's not confusing at all.
Okay.
Potato, potato anyway, right?
So I started building out some infrastructure using our new sponsor Linode.
I was using Ansible and Terraform to do this.
And one of the things that I like to do is use ginger templating
to create my Docker compose files.
This means I can store all of my container variables in Ansible, run it
through the ginger templating engine, and it spits out a Docker compose
file on the other side.
Now, when I was using engine X as my reverse proxy, I was using
engine X as my reverse proxy.
It meant I had to also have an Ansible role that copied across and installed
the relevant engine X configuration files.
And for anybody that's ever worked with those files, they can be a little
bit picky and a little bit cryptic.
The best thing, the single best thing about traffic is that all of the
configuration now for my reverse proxy lives alongside each container as a label.
Yeah.
Talk about this label thing because I'm not a traffic expert, but that's
my essential understanding is that it sort of assigns what you
can do based on your label.
Correct.
I'm still wrapping my head around it.
Right.
And it's something I've been using for about a month now.
I had a lot of help with some of the guys on discord in particular.
I know I seem to mention discord every week, but it's a lot going on over there.
That's where the fun is.
So I've, I've put together a kind of beginner's guide to traffic,
but not as a blog post for once.
What I've actually done is I've just put a, a compose file in my infrastructure repo.
Oh, okay.
I'll put on GitHub.
And a link to that of course is in the show notes.
And in there, what you can hopefully see is just how simple this thing is to configure.
So you define a series of routers and services.
And as part of those routers and services, you define the host name and
the entry point you want to use.
So for, for me, I use Cloudflare for my DNS.
So traffic will automatically talk to Cloudflare as part of the ACME process to
get my TLS certificates from Let's Encrypt.
So I tell each container to use that particular certificate resolver, Cloudflare.
And then from there, I tell the router which service to use.
So for example, for NGINX, if I'm running that as a container behind traffic would
be on port 80 or Plex would be on three to 400, for example, and it's just super simple.
And where are you defining this?
Where does that information get stored?
What, what mechanism?
That's the best part.
So with NGINX, for example, it would be in a Docker volume that I would mount
through a bind mount system to my container, and then those reverse proxy
configuration files need to persist on my host, right with traffic.
It's a label that lives in the Docker compose file.
So right next to where I'm saying, I want to run, you know, Linux
server slash Plex, for example, I then have a label section with five lines
in it that says traffic enable true use this host name, so Plex dot KTZ dot
whatever use this entry point of web secure.
So HTTPS, for example, and then use the cert resolver of Cloudflare.
This is the fourth line.
And then the fifth line is use port three to 400.
And it's just right there.
It's simple.
It's easy to read YAML that's just in the Docker compose file.
And I think that's the part that really has to be underscored.
And it's so tidy because it's right there with all of the other
information about that container.
It's easy to read, easy to replicate and associated and attached with that container.
And because it's in that single file, if I commit that single file to get, I have
a history forever until the end of time, exactly what my configuration parameters
worth for that specific container.
Whereas if I'm relying on a bunch of different files that are on my file
system in different directories and stuff like that, who's to say that my Ansible
role don't have a bug in it that doesn't overwrite that particular file when I
changed the name of the container or whatever it is, there's just a whole bunch
of edge case scenarios that this solves for me and I absolutely love it.
How are you choosing what gets committed to Git?
Are you, is it every config file?
Are you hand committing certain config files?
What's the system there?
Well, I have a blog post about working with Ansible and secrets.
The short version of that is I use the Ansible vault functionality to encrypt
a couple of files in my repo, all of the secret source lives in that encrypted
file, Ansible then interpolates through its templating engines, those variables
into the playbooks when it runs, Ansible looks for a specific variable.
If it can't find it in a decrypted file, it will go to the encrypted
file and look for it.
And so for me, I generally tend to go with the appropriate
tend to go with the approach that anything that's personally identifiable,
like an IP address or a serial number or an API key, obviously is secret.
Just anything that I would rather somebody else didn't know, I tend to put
in the vault file and then use my Ansible roles to decrypt.
Now, the downside of that is it means it has to live in plain
text on disk somewhere, but the reality of being a sysadmin is that at
some point somewhere, something's got to be in clear text.
Somebody has to have the ultimate password somewhere.
Even if it's in your brain, encryption is, is great, but at some, some point
somewhere, somebody needs the key to that vault.
Well, that's pretty cool, Alex.
I like that I can just go in here and read this.
And that also makes it very easy for me to get started because this, being able
to actually see this example here, which we'll have linked in the show notes.
Really makes it click for me.
Like the, cause the other thing we haven't even talked about is the
user front end web UI to traffic and all of that stuff, but fully understanding
how I label stuff in Docker compose kind of completes my understanding.
And now I really kind of see why people are talking about traffic.
It looks really nice.
It was a big change in how traffic defined their routers and services
and front ends and back ends between V1 and V2.
Now we're talking about V2, the current release.
Now in V1 times that I just wrote them off as cluttering my doc compose file.
I didn't want that.
I didn't want that clutter in my, in my file, but as I've kind of matured
my approach to, you know, configuring all these different systems, I now
have my personal server at home.
I have a cloud instance that I configure that runs all my websites, you know,
my blog and stuff like that, and some stuff for my family as well.
I then have the self-hosted infrastructure and a couple of
other things I also look after.
By the time I'm scaling this to five, six, seven different sites, it's
just really nice to have one single source of truth be that compose file.
Yep.
Amen to that.
That's how I feel too.
Well, you heard Alex mentioned it.
We use it.
We love it.
Linode, linode.com slash SSH, get a $100 60 day credit on new accounts.
And here's a little pro tip.
Linode just posted a guide on using object storage as a backend storage
mechanism for next cloud, where you can kind of just have unlimited space, but
you also take advantage of their crazy fast storage and it's what we use.
It's how we do it here at Jupiter broadcasting.
And so I'm going to put a link to this in the show notes because Linode is
simple cloud infrastructure that you can spin up for anything you need.
A shared host is something with dedicated GPUs or CPUs.
Everything's priced really reasonable and they have a cloud management
UI to take care of all of it.
You just get started by going to linode.com slash SSH.
You mentioned Alex, that you were deploying some systems
with Terraform on Linode.
What's that process like?
It's been really, really easy.
Actually, the documentation up on Terraform providers website is very
well-written, very well-documented.
And if you would like to see a full example, of course, there's a link
in the show notes to the self-hosted infrastructure repo that I'm using.
Uh, and in there it's, it's just been really simple, really
straightforward to get started.
That's nice.
That is really nice because you can plug it in with an orchestrated
and orchestration switch you're already using or take advantage
of the tools that they have.
And what's great about Linode is they're the largest independent open cloud
provider in the world with 11 global data centers.
Linode has been around for about as long as user mode Linux has been around.
Their founder saw the opportunity and built something that was accessible
for just about everyone, just about everywhere.
So go to linode.com slash SSH to get started and then check out
the app marketplace, for example.
An easy way to self-host your own applications and get started
with their stack scripts.
Another nice way to build a quick and easy system, reproducible, easy system.
I just recently decided I'm going to set up a dedicated SSH jump host.
At first it sounds kind of crazy, but then I realized at $5 a month, I can
really go all in on the security on this box, maybe even kind of as a
learning opportunity, and it'll be my jump host system to get
around wherever I need to go.
That's a great use for the $5 a month system.
But our matrix box that runs the Jupiter broadcasting matrix server.
That's a little more powerful.
We went ahead and did a dedicated CPU for that one because there's hundreds
of users using that system.
And that's the great thing about Linode.
They've been around for a long time.
They're the largest independent open cloud provider, and they've got a great
pricing structure and a very competitive dashboard.
You got to go check them out.
Linode.com slash SSH and a big thank you to Linode for sponsoring
the self-hosted program.
Last week, we celebrated our birthday and this week it's home assistant's birthday.
Yeah.
Only we get the presents.
How great is that?
We get all the new stuff.
This is one of those things like before the show, Alex and I were like, how do we
cover this because we could probably, I bet you make two episodes out of just
the updates in this one release.
This was a really big one.
So we thought maybe instead we'd just pull out like two or three of like the
heavy hitters and just talk about those and then link you to the resources.
For those of you that haven't listened to the show for a while, Alex and
I, big home assistant users.
In fact, I use it more than ever these days.
I don't know about you.
I think you too, Alex, right?
Huge.
Continual.
Huge.
I love the home assistant.
Well, the home assistant has the new release and I think probably the thing
you're excited about, the thing I'm looking forward to is NFC tag support.
I think that's going to be a big deal.
Mm-hmm.
It's really, really easy.
It's really, really easy as well.
So they've updated the companion apps that run on iOS and Android.
So you can actually write the NFC tags directly from the app on your phone.
And then as soon as you scan it, you can assign automations to it.
So as part of this release this week, the automation engine
has had a complete overhaul.
So now the YAML based automation stuff is a lot better than it used to be.
And so one of the things I've decided to do is stick an NFC tag on the outside of
my house so I can tap my phone to the outside of my house and have it open
my garage door, for example.
Can't tell you the number of times I've been outside my house without my keys
thinking I need to get in, but my keys are on the inside and the only door
that's open is the back door, but I want to go in the front door right now.
And this should be a solved problem.
And I want to be lazy, dang it.
No, I, I completely agree.
So the, the mixer I have here, the Behringer X32 has a built-in
spot for your cell phone.
It's weird.
I've never seen a mixer that does this, but it actually has a little spot for
you to place your cell phone on the mixer.
And that's because it has, I think a mobile app where you can control
some of the mixer settings.
You know what I did put a little NFC tag right in that spot.
So when I set my phone down in its holder on the mixer, it turns on my
lights, it changes the colors.
It just sort of gets things ready to go.
So I don't have to come in here and, you know, I don't even have to speak to
the, to a, to an echo or anything.
It just put it right down there and it communicates with the home assistant
we have here at the studio.
I love this feature and I'm going to do the same thing.
I'm going to put a little tag outside.
I'd like to find a black colored NFC tag.
All the ones I have right now are white stickers.
I found some heavy duty outdoor grade ones.
Oh, really?
They're about a buck each.
So they're quite expensive for NFC tags.
It's okay.
It's got to survive going down the road and in the rain.
So I'll put a link in the show notes.
Okay.
That'd be great.
Yeah.
That's the kind of thing I think I want to do is put something outside and
just turn lights on and whatnot.
You know, I came up with quite a fun thing to automate in this house.
My wife loves classical music and I love sort of rock music, you know, like tool
and green day and stuff like that.
And so when we're cooking, we both generally want the opposite person's
playlist to never be in existence.
And so I've 3d printed a violin and a guitar, and I've put the NFC tags on the
back of these 3d printed things.
I just tap the thing that I want and it plays it through Spotify,
through my Google home in the kitchen.
That is a clever idea.
I like the use of the 3d icon really to drive it home.
Makes it a physical thing you're touching.
Yeah.
And then the other thing I've done is when it's been day, we have a little
picture of a, a bin, which I've 3d printed again and put next to the bins in the
kitchen.
So we tap that and it turns all the lights in the whole house on so we can walk
around for 20 minutes, empty all the bins.
Uh, but then it also turns on the driveway lights, opens the garage door.
Uh, so you don't have to do anything.
The house is just ready for you to go out.
Cause you know what?
When you're in the, emptying the bins, you know what you're going to do.
You're going to walk around, empty the bins, then go outside, put it in the big
plastic ones outside, put them at the end of your driveway and then come back in
again.
Yeah, that's fantastic.
I have a series of like outdoor lights and a couple of other things that I need
to quickly take down and pack up.
And what I have to do now is that when I'm outside, I have to bring out
my phone and I re I load the home assistant UI, and then I tap them off
before I unplug them all.
So that way they're in an off state when I remove them from the network and I
could just put an NFC tag out there and just totally do it that way.
You totally could.
Yeah.
The magic part is with this bin automation.
I'm very proud of this one is when it starts, it takes like a snapshot of the
current scene of the house.
So all the lights that are currently on are stored to a temporary state.
If you're like a temporary scene 20 minutes later, when the bin automation
finishes, that scene gets recalled on the house, just returns to how it was before.
Oh, so the previous state is restored.
That's great.
That is nice.
That's a real, that's see, now you're getting fancy with the automations with
the 3d printing and the restoring the previous state.
Like that's next level stuff there.
Guy gets bored, particularly in lockdown.
Yeah.
And we love ourselves some home assistance.
So the other thing that, uh, is noteworthy for Mac users and perhaps an indication
of the knock-on effects of the upcoming Apple ecosystem with ARM processors in
the Macs too, but home assistant companion app for the Mac is now a reality.
It's early, it's rough, but the thing that's neat here, and I'd like to put a
call out to the audience to see if we can pull this off for Linux is one of the
many things this companion app can do on the Mac OS is observe the state of the
Mac cause the Mac has several conditions in use idle screensaver sleeping, and it
could turn those into sensors into home assistant among other things.
There's other things that it's monitoring as well as sensor inputs to home
assistant to help automate things around when you're using your computer.
I love this idea and I'd like to apply it to other desktops.
It can detect which Mike, which webcam is in use when you're on a particular
zoom call or something, you could have a light outside of your office that turns
red that says, I am on the phone, be quiet, stop making noise or, you know, like me.
I mean, I'm that guy, but I have like lights and stuff in the background for
my zoom calls, you know, I try to make it look presentable.
You could have that stuff turn on when the mic activates.
Is there a word for that?
I feel like it's going to be added to the dictionary soon.
It's like peacocking, but on zoom, do you know what I mean?
Yeah.
Like zoom fronting, backgrounding.
That'd be better zoom backgrounding.
Yeah.
Of course, most people these days just go with the virtual backgrounds.
So that's, that's neat.
It's a, it's an official release from the, from the project, but you know, just
as an aside and maybe ultimately more important for new users, cause I played
around with this and it's pretty powerful.
There is a new feature that allows you to add Lovelace cards, which is the dashboard
UI of home assistant by entity.
And what that means is you can select a sensor or a camera feed or power source
or power switch and home assistant will suss out what the functionality of that
is supposed to be and automatically generate you a dashboard card for it.
And so you don't have to appreciate or understand how these are constructed
anymore.
You just look at your entities like myself.
I've never built dashboard entries for my seismic sensors.
I just never got around to it.
I knew the data was getting logged.
I was happy with that.
However, I thought, well, why, why not?
I never really quite knew how to do that.
So I went in by entity, selected my seismic sensors and home assistant just
generated me a brilliant dashboard widget for it, a Lovelace card.
And it's great.
And you can do the same thing with new integrations just to get an idea of what
home assistant thinks you might be able to do with them.
I did that with the ring camera, which has limited functionality if you don't
pay for the service, but it's still useful integrating into home assistant.
And I didn't really know what you could do there.
So I just added that entity and let it generate one for me.
Yeah.
I think we should talk more about that ring stuff in the future.
There's a whole world of cloud connected stuff.
It's actually pretty cool that we don't touch on that often.
Yeah, I agree.
Some of that cloud stuff is expensive.
Like the ring products themselves, not a cheap product longterm, but they
have a pretty low upfront cost and initial indications are they integrate
pretty well with home assistant.
If you guys are out there experimenting with that, let us know, because I do feel
like it's a blind spot of ours a little bit big congratulations to the home
assistant for their seventh birthday release.
Huge, huge amount of work must be going into this project.
I'm so glad that it exists because it just makes so many things that you would
have had to buy proprietary stuff for possible.
I'm so thankful.
So thank you home assistant.
Now let's talk about scrutiny.
This is a project that could help bring visibility to something that I often
forget to check in on.
You think you're so smart.
Oh yeah.
Well, at least my hard drives do, but of course, what does it matter if nobody's
ever checking their smart status?
Correct.
Yes.
So one of our community members, Analog J has released a new tool called scrutiny.
And this is designed to monitor your hard drive smart metrics, but
here's the really cool part.
It uses the real world failure rates published by black blaze to tell you
whether that is in line with what other people who have those hard drives are
seeing.
Yes.
And it puts it all together in a very easy to read dashboard with a brilliant
layout.
So it's super easy to consume the information.
This is a great idea, Alex.
Yeah, it is.
And I nearly lost my freaking mind when I first saw this on Reddit.
Analog J was asking for 25 sponsors before he made this public and open source.
And he got there last week.
And as soon as he went open source, one of the Linux server devs reached out to me
and said, Hey, do you think we could release this as a container?
So I put those two people together and they put the PB and the J in the sandwich.
And there's now a Linux server container for scrutiny.
Oh, so I could put this easy peasy on the studio NAS.
I need to as well.
Cause those drives are getting a few years old, like they're getting in that
zone.
So being able to compare that to the mean from black blaze, well, that's either
going to make me accelerate my plan to replace them or give me some comfort.
I'm not sure.
Now it's still early days with the project.
You know, there's still a few buttons and knobs and widgets that don't work yet.
And he's adding to it all the time, but, uh, if you find it useful, go open some
issues, give him some feedback, come find him in the discord, tell him what you
want to see, because I think something like this is sorely needed for those of
us that aren't running on raid or free NAS or something like that.
And, uh, it just looks like a really great project.
The UI is beautiful and the information it provides is really, really useful.
So yeah, and it's using smart D on the backend.
So it's getting tried and true information from smart D also, we're going to
mention again this week, cloudfree.shop.
Now cloudfree.shop has a wide range of smart home devices.
This is a community members project that are pre flashed with Tasmota.
And that means no cloud connection is ever required.
It means you can just plug it in and guarantee that as long as that device
operates and runs, it is under your control.
There is no service that will turn it off and check this out.
This is pretty great.
If you use the code self-hosted to check out, you support the show.
So that's pretty nice.
And do they get anything special when they use that?
Yeah.
Since last time we've negotiated that the audience will get a dollar off per plug.
Oh, per plug.
So buy a whole bunch.
Yeah, right.
That's great.
Cloudfree.shop is something that Alex and I had talked about on air.
It's like, why doesn't somebody just sell these devices preloaded with Tasmota?
Yeah, this is just really cool.
Cloudfree.shop, Alex and I have talked about it before and wondered,
why isn't somebody doing this?
Get these things pre flashed with Tasmota and sell it.
And it's pretty good price too.
All right.
Time for some feedback, I think.
So Alex C writes in in the one is non episode when you were converting
from ext four to butterfs Chris.
I was wondering why you don't use Mosh or something like Tmux or screen.
The reason I like Mosh is that it covers you if your network connection
drops, or if you're roaming between wifi and mobile internet.
And, and I think Alex maybe might have Mosh and Tmux slightly confused
if, uh, when you read the full email, but it's a good question because a lot
of mistakes were made that night, Alex, a lot of mistakes.
So I generally always do use Mosh.
I don't think of it typically when I'm on the land as the same machine
that I'm connecting to, although I really should always just be in practice.
But I think my bigger mistake honestly was not using Tmux.
See Tmux would keep that session persistent, even if I completely
disconnected, right, where Mosh is going to help smooth out disconnects and
interruptions and changing of IP addresses.
So it would have helped, but Tmux would have been the better solution.
But that night I just wasn't thinking, I bet you my laptop wasn't even plugged in.
I mean, I was just in a bad state.
It was too late.
I knew I shouldn't be doing it like in the back of my mind, but I pushed forward
because I had ran out of time and I needed to get this done before we left
for a trip, if I recall, and made the mistake of not taking the proper process,
not taking the proper steps to make sure an SSH remote connection is absolutely
as rock solid as possible when doing a major file system operation.
And that's just the fundamental mistake.
I know better.
I knew better.
Thankfully, you know, in the end I was able to recover everything.
I remember Alex, how that compounded with an issue where my Google drive
payment had expired because my credit card got shut down due to fraud at the
same time.
Oh my God, that was a nightmare.
It was like the perfect storm of data loss.
It was a nightmare.
So like I have learned from that.
I constantly check in on that stuff now because I'm, I'm
paranoid that that's going to get shut down and fricking fraud happened again.
Just about a month ago, my credit card was shut down again, somewhere on one
of my trips, I guess somebody had copied it and then waited quite a while in
Texas to try to use it, but they did eventually try to use it.
So the bank cut that off and I had to go through the process all over again, but
this time I made sure that Google drive was paid for.
Fool me once, right?
Right.
Exactly.
Yeah.
Mosh is pretty cool.
I've, I've used it a few times.
Mostly when I was a consultant traveling around on the trains and stuff in England
a lot, perfect for that, relying on, you know, three, three G four G connections
all the time and the reason Mosh feels so nice to use is because all the key
strokes are local and then it sort of sends them quietly in the background.
So obviously you might, if you know, you go through a dead patch, you might
have to wait for the screen to update on the result of your command.
But in terms of what you're typing, which is kind of the biggest indicator
of latency, it just feels really responsive and just really nice.
Well, it is it's local echo.
So it's, it's locally echoing back to you and then buffering it, which is so clever.
That is really pretty nice.
Since then, I am like so good about it.
I don't know if it'll last forever, but it sort of renewed my best practices
when it comes to this stuff.
I was like, Oh, you know, that was the, that was my moment.
That was my lesson.
I managed to pull out of it, but I never want that to happen again.
Absolutely.
Yeah.
I mean, the downside of something like Mosh is that you've got to type
Mosh instead of SSH and at this point, SSH is muscle memory for me.
I guess I could use a bash alias, but it also requires Mosh to be installed
on the remote system, which isn't always the case.
Not too hard to do.
You know, it's not a whole bunch of stuff, but it is, but you have
to have it on both ends.
That is very true.
I think Tmux, if you're not familiar with Tmux, it's worth looking into.
It's a real neat trick to connect into a server, get a set, get a session running,
get a whole bunch of stuff going, and then you can just disconnect and it keeps
running.
It's a great way to pair program as well, because if you open two Tmux
sessions on two different systems, they will both update in real time with the
same thing.
Yeah, that's pretty nice.
Um, we actually even just use it just recently, Wes and I were messing around
with recording audio from the command line and we just use it for working on
that kind of stuff.
It's great. So I, I know better anyways, I will, I won't, it won't happen again.
I promise.
But if it does, I will admit it to you guys.
I will come clean on the show.
Yeah, yeah, sure.
In future episodes, we're going to take a look at some container dashboards and
maybe a look at Caddy, which is another alternative to traffic as a reverse
proxy.
But in the meantime, I think it's time we thanked our site reliability engineers.
Don't you, Chris?
Yep.
Last episode, we launched the self-hosted site reliability engineers membership.
The folks that help keep this show sustainable, reliable, and fully
operational.
I think we still have some early bird SSH codes too.
If you use the promo code SSH, it takes a little bit of money off.
So the membership is even, I think a dollar cheaper and you can go to self
hosted.show slash SRE to get there and just put the promo code SSH in there.
We've got more show for our members.
We're doing a bonus to post show with every single episode, and we're also
doing a limited ad feed for that episode.
So it gives you a whole new RSS feed for the show, a fully produced limited
ad with additional bonus content.
And that's a thank you to the site reliability engineers who are keeping
the show going.
So big thank you to everybody out there.
And Alex and I are already cooking up new ideas for future membership
content as well.
Self-hosted.show slash SRE.
Thank you.
Everybody it's pretty cool, Alex.
You know, it's pretty nice seeing that come in because going independent
again is scary, but also awesome at the same time.
And it's, it's a great representation of audience support too, but we totally
understand not everybody can afford a membership.
That's totally cool.
Just listening to the show.
And if maybe a sponsor seems like the right fit or there's somebody you
think you could share the show with.
We really appreciate that support too.
Word of mouth is the best marketing.
There is it's like the only marketing that works for me.
It's the only marketing that works for podcasts.
It really is.
Mm-hmm.
Quick follow up from last episode where Chris, you talked about having to run
home to pull in your awning because it got too windy.
We had a few recommendations from the audience.
Yeah.
A couple of people.
And I think you and I thought of this right after we wrapped up recommended
the Shelly that crossed our mind as well.
But Brian Davenport wrote in with a neat idea of essentially a little wind
gauge that would transmit on the 433 megahertz band and it would send the
speed to a decoder device that decoder device would monitor the speed.
And when it reached a certain percentage or whatever, a certain speed
number, it would then trigger a whole sensor switch and close that, which
would then retract it.
The other idea that I had was just check the weather in the morning.
Come on.
I know.
No, it's not good enough.
Well, and you know, what's funny Alex is today as we're recording a
construction truck backed up into the pole that has our power transformer
and knocked it over.
And now we have no power, which is fine because we've got plenty of
battery and solar.
The thing is, is nobody's home.
We may have left the air conditioning set to automatically kick in and that'll
drain the batteries pretty quick.
And so I got thinking, it's like, you know, what I need is I need the system
to know when it's in a limited power state.
And I go back to, I know we have a couple of audience members out there
who are pulling this state information from their Victron devices and feeding
it into home assistant.
And I remember somebody hooked up a Raspberry Pi to pull in the information
and then essentially MQTT it to home assistance.
But I don't recall the details, but all this started flooding back to me
when I think about, is there anything I could do to tell the system, Hey,
now you're in battery mode.
Why don't you turn some crap off?
Seems so obvious.
It seems like you need to have your air conditioning on a remote
control as a, as a starting point.
Yeah, I do.
And it's tricky because I don't think it's like a household air conditioner,
right?
It's a furnace, a fan and AC.
And I imagine it's all DC wiring.
So I'm not, I'm not sure what my options are there either.
You know, it's just one of those things.
I think the step one is take the panel off the wall and see what the wires are.
You know, when we launched this show, the world was still normal and I was planning
to come out and see you in April.
And we were going to do a whole bunch of these projects.
Yeah.
Yeah.
Oh, I just want to come out and do half of this stuff for you.
I know it would be great because we could record it.
You know, I can learn a bunch from you.
You could see how I do some of my crazy setups and the things I'm trying to solve
for.
It would be a lot of fun.
We could try and not get pulled over in the mountains.
We definitely could do that.
That would be a lot of fun.
In the meantime, thank you to everyone who sent in some suggestions.
If you have Leet Victron knowledge, I would like to pick your brain.
So maybe that's my next ask, because we just have the best community ever.
Self hosted dot show slash contact, or if you'd like to jump on the discord, self
hosted dot show slash discord.
Victron always sounds like it should be like a transformer or something.
It is pretty cool equipment.
And the neat thing is I kind of made a bet on this and wasn't sure cause I'd never
used any of their equipment before, but I got to say very, very, very satisfied
with the purchase.
It it's an inverter, charge controller and converter, and it is so smooth.
I can switch between multiple different power sources and nothing blips.
All of my gear stays on.
It's great.
It's really clean and smooth.
It produces clean power.
Just very happy.
Well, now that we're at the end of the show, I'll mention my website, Chris last
dot com Alex's website, blog dot KTZ dot me.
Well, you can find our sponsor on social media too.
A cloud guru is at twitter.com, youtube.com and facebook.com.
They're all just slash a cloud guru couldn't be easier.
And the podcast here is also on Twitter self-hosted show.
I'm at ironic Badger and that was self-hosted dot show slash 28.

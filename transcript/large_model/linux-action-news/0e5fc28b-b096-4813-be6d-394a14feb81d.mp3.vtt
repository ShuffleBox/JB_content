WEBVTT

00:00.000 --> 00:11.120
Hello and welcome to Linux Action News, episode 241, recorded on May 17, 2022. I'm Chris.

00:11.120 --> 00:12.120
And I'm Wes.

00:12.120 --> 00:17.300
Hello, Wes from a possibly noisy remote location. Let's do the news.

00:17.300 --> 00:24.000
We start this week with what Google is calling Assured Open Source. It's a program they're

00:24.000 --> 00:31.080
launching that curates open source software using Google's own in-house testing tooling.

00:31.080 --> 00:35.440
In the announcement, Google states that, quote, the Assured Open Source software service will

00:35.440 --> 00:42.040
extend the benefits of Google's extensive software auditing experience to cloud customers.

00:42.040 --> 00:46.760
They say all open source packages made available through the service, Google Cloud, will also

00:46.760 --> 00:52.520
be the ones that are used internally by Google. So what it seems they're announcing here is

00:52.520 --> 00:57.120
the open source packages you probably already know and use when you're on Google Cloud,

00:57.120 --> 01:03.000
will now be checked against their own set of internal tools as a type of a service for

01:03.000 --> 01:05.040
Google Cloud customers.

01:05.040 --> 01:12.000
You can find the list of the so far 550 major open source libraries that Google's testing

01:12.000 --> 01:17.160
on GitHub and as a link in our show notes. And of course, you can just go look these

01:17.160 --> 01:22.360
up and then download them independently of Google. Honestly, it's a list of really good

01:22.360 --> 01:28.600
teams and they're open source packages, right? Go get them. What Google's adding with Assured

01:28.600 --> 01:35.000
Open Source is specific audited versions that have been run through their test suite and

01:35.000 --> 01:41.280
then distributed directly through Google Cloud. And something else we noticed from the company

01:41.280 --> 01:46.800
recently was the formation of an open source maintenance crew, a team that would aim to

01:46.800 --> 01:52.760
work upstream with maintainers of popular libraries directly in an effort to improve

01:52.760 --> 01:54.460
security.

01:54.460 --> 01:59.820
Now that I like to see the open source maintainers crew, huh? Okay, all right, going upstream,

01:59.820 --> 02:05.060
I'm all about that. I think that's really great to see. So the curated service here,

02:05.060 --> 02:10.040
the Assured Open Source program, that's just an early testing right now, but it should

02:10.040 --> 02:16.740
be available for more Google Cloud customers in quarter three of 2022. So far, the biggest

02:16.740 --> 02:22.140
pushback I've seen online is that some people say that Google is basically monetizing security

02:22.140 --> 02:27.140
issues in open source instead of fixing the root of the problem, at least for everything

02:27.140 --> 02:32.840
we have announced today. I don't know, Wes, there is only so much one company can do.

02:32.840 --> 02:34.840
What do you think of that criticism?

02:34.840 --> 02:41.960
I do get it. I think the sort of distribution to Google Cloud customers in some senses rubs

02:41.960 --> 02:48.280
me the wrong way. Makes me feel a little uncomfortable. But I don't know, it's a mixed bag. On one

02:48.280 --> 02:52.460
hand, they're kind of doing the right thing in that, you know, the library, the tooling,

02:52.460 --> 02:56.000
the testing tooling, that's all open source, they've got a repo, go pull it down, they've

02:56.000 --> 03:01.280
got docs to help you run it on your own infrastructure. But that's kind of as far as it goes. And

03:01.280 --> 03:06.320
you have to go do that work yourself, unless you're a Google paying customer. And that's

03:06.320 --> 03:10.520
fine for you know, some of the other big players. But it means you know, if you or I wanted

03:10.520 --> 03:14.480
to do it, we'd have to go pull all this stuff kind of get scripts up and going, we have

03:14.480 --> 03:18.800
to set up the infrastructure to run it and then actually run it and pick versions and

03:18.800 --> 03:23.440
then do the publishing ourselves. So that's that's kind of the offering they're doing,

03:23.440 --> 03:29.240
whether or not you think that's a fair value add on top. I could see either way. But I

03:29.240 --> 03:32.640
do think you're right, you know, you got to balance whatever grossness you see there with

03:32.640 --> 03:39.520
their efforts to do this testing to share that tooling, their efforts with project zero,

03:39.520 --> 03:44.720
and then actually, just recently, Google, along with the Open Source Security Foundation

03:44.720 --> 03:51.040
and the Linux Foundation, met up at the White House to discuss open source security. And

03:51.040 --> 03:55.640
it seems there was an attempt to kind of expand that bring in other groups, folks like Amazon,

03:55.640 --> 04:02.080
Intel, Microsoft, and get them all together, shell out some money and focus on improving

04:02.080 --> 04:04.480
this mess.

04:04.480 --> 04:08.860
That seems good, right? I mean, it seems like this is what we've been asking for is pay

04:08.860 --> 04:14.080
attention to this stuff. This stuff is infrastructure, you should treat it as infrastructure like

04:14.080 --> 04:19.240
you do roads and bridges. So yeah, I think it's good. I just I have a very mixed reaction

04:19.240 --> 04:24.320
myself. It seems like something limited to Google Cloud is only going to have so much

04:24.320 --> 04:28.280
reach, it's only going to have so much impact. And I think I've just been looking at this

04:28.280 --> 04:34.240
problem of underfunding free software and underfunding key libraries for so long, it

04:34.240 --> 04:39.440
feels like for over 20 years. And I'm just kind of losing faith that any of these companies

04:39.440 --> 04:43.920
are going to solve this. I mean, maybe that's changing with this, it definitely seems like

04:43.920 --> 04:47.960
they're getting more serious. But it just still seems like it's always going to be limited

04:47.960 --> 04:54.480
in reach, limited in impact. And I hate to say it, but probably also only survives as

04:54.480 --> 04:58.280
long as there's an advocate at Google that's pushing for this program. You know, I think

04:58.280 --> 05:04.720
about Linux, that was a community solution to a problem that the commercial interest

05:04.720 --> 05:10.400
at the time, just we're not willing to solve. And I feel like now we need a community driven

05:10.400 --> 05:16.920
solution to address free software funding, at least an effort that improves the baseline,

05:16.920 --> 05:21.880
maybe we're not going to give full time wages to all these developers. But if we could improve

05:21.880 --> 05:26.480
the baseline of their lives, make it worth their time, incentivize them to keep working

05:26.480 --> 05:33.880
on it, that would be tremendous. And we have the technology, we just seem to not have the

05:33.880 --> 05:35.880
will.

05:35.880 --> 05:44.400
Well, it looks like the Software Freedom Conservancy might just be about to land a major win for

05:44.400 --> 05:48.360
the right to repair and our beloved GPL.

05:48.360 --> 05:55.460
Yes, after attempting to work with Vizio, the TV manufacturer since 2018 to get them

05:55.460 --> 06:01.800
to comply with the GPL, because of some software that they ship on some of their televisions,

06:01.800 --> 06:09.560
the SFC decided to file a lawsuit in the state of California back in October of 2021. So

06:09.560 --> 06:14.560
they worked with them since 2018. The lines of communication kind of go dead in 2020.

06:14.560 --> 06:21.920
They file a lawsuit in October of 2021. And then in December of 2021, Vizio tries to get

06:21.920 --> 06:24.280
this lawsuit kicked out of California.

06:24.280 --> 06:31.880
Yeah, Vizio basically argued that no, no, these claims should be superseded by copyright

06:31.880 --> 06:38.400
and therefore handled in a federal copyright case, not in the jurisdiction of California.

06:38.400 --> 06:44.240
But what happened this week is a ruling stating that the claim from the Software Freedom Conservancy

06:44.240 --> 06:50.520
succeeded in the quote, extra element test, which holds that state law claims are not

06:50.520 --> 06:56.520
preempted by copyright, if the state law claim at issue has one or more qualitatively different

06:56.520 --> 07:03.120
elements from a normal copyright claim. And that's important in particular for this case,

07:03.120 --> 07:08.320
because the qualitatively different elements here are those extra rights granted to us

07:08.320 --> 07:09.800
by the GPL.

07:09.800 --> 07:15.480
Yes. And this also would be historic, not only because of that, but because it's the

07:15.480 --> 07:22.600
customer suing Vizio, not a copyright holder. That means you and me users of GPL software

07:22.600 --> 07:28.680
could have a win here. The SFC notes the ruling is a watershed moment in the history of copyleft

07:28.680 --> 07:34.280
licensing. They say this ruling shows that the GPL agreements function as both copyright

07:34.280 --> 07:38.560
license and as a contractual agreement.

07:38.560 --> 07:44.200
Now that's just great on its own, right, especially for us free software lovers. But we're also

07:44.200 --> 07:49.760
folks who buy electronic devices and televisions and want to maintain them. And this is also

07:49.760 --> 07:54.400
good news for the right to repair, quote, this claim is central to the right to software

07:54.400 --> 07:59.820
repair, as it allows users to exercise the right to copy, share, modify, and reinstall

07:59.820 --> 08:05.360
the software on the devices that they receive. And you could totally see how, you know, this

08:05.360 --> 08:09.920
ruling and actually enforcing compliance with the GPL might just help some efforts down

08:09.920 --> 08:15.120
the line to help maintain some of these no longer supported televisions or other electronic

08:15.120 --> 08:16.120
systems.

08:16.120 --> 08:21.520
Absolutely. I just really think that itself could be some great precedent. But I think

08:21.520 --> 08:27.480
you also when you just read through the details here, you get the sense that the Conservancy

08:27.480 --> 08:32.700
has played this really savvy, like they've been really smart in how they have maneuvered.

08:32.700 --> 08:36.960
And this could actually be a big win for all of us. And this is great to see because I

08:36.960 --> 08:43.040
think anybody listening to this can just see the obviousness of all of this on its face.

08:43.040 --> 08:47.680
Giant company used free software for a fancy feature they wanted because it would sell

08:47.680 --> 08:52.680
more televisions. But they don't want to follow the rules of the free code. That's just not

08:52.680 --> 08:55.800
how it works. If they don't want to follow the rules, then they should have written the

08:55.800 --> 08:59.860
code from scratch themselves. They didn't want to do that. They want to take advantage

08:59.860 --> 09:05.600
of something that somebody else already created. And now they have to respect the rules of

09:05.600 --> 09:10.640
that license. And that's how it should be. We don't have final decisions here, but we

09:10.640 --> 09:16.600
are in the right direction now.

09:16.600 --> 09:23.400
Sometimes life on the rolling edge can have a few paper cuts. That definitely happened

09:23.400 --> 09:31.880
to Arch users recently, a little tricky transition with pipeline. Now, a little background, Arch

09:31.880 --> 09:37.640
has been shipping pipeline for years now, but there are a few complications. Much like

09:37.640 --> 09:43.480
in the world of Jack, the actual pipeline daemon, it doesn't do any of the connection

09:43.480 --> 09:47.280
logic to route all of your audio. It does the parts where it's interfacing with the

09:47.280 --> 09:52.600
lower level kernel and user space components and talking to your devices. But you need

09:52.600 --> 09:59.640
to tell it where everything should go. The burden of doing that, well, that's on a component

09:59.640 --> 10:05.640
called the session manager. And right now there's kind of two there's the default sort

10:05.640 --> 10:10.160
of baseline testing. Here's an example of how to make a session manager, which is called

10:10.160 --> 10:16.120
pipeline media session. And then there's the new wire plumber, which is the fancier fully

10:16.120 --> 10:23.680
featured scriptable solution that will be the future. Arch had just started attempting

10:23.680 --> 10:31.400
rolling out wire plumber, but ran into a few problems. Yeah, started is right. They did

10:31.400 --> 10:37.480
have to roll it back. It seems like it's kind of one of those snags you do hit in the arch

10:37.480 --> 10:42.680
land. So we want to let you guys know about it this week. If you had a situation where

10:42.680 --> 10:47.200
you decided you still wanted to use pulse audio or also on your arch system, and then

10:47.200 --> 10:52.440
wire plumber comes down as an update. That was causing you some problems sometimes because

10:52.440 --> 10:58.120
it would grab all of the audio input for pipewire because it would just assume that you were

10:58.120 --> 11:04.880
going full pipewire on that box. Yeah, that's kind of the tricky bit here. You know, arch

11:04.880 --> 11:08.560
arch isn't fedora. There's no one decree in that, you know, we're gonna target Wayland,

11:08.560 --> 11:13.440
we're gonna switch everything to pipewire. arch is a lot more all the cart, right? You

11:13.440 --> 11:18.680
got to assemble your system yourself. And well, audio nerds like you and I, Chris, well,

11:18.680 --> 11:22.200
we've been jumping on full pipewire systems, basically, the minute it wouldn't crash our

11:22.200 --> 11:27.400
laptops. But some folks don't really have a problem with pulse audio, or you know, they've

11:27.400 --> 11:30.680
got devices that they have set up, and they don't really need to switch everything out.

11:30.680 --> 11:34.440
Or they just want pipewire to work with the you know, fancy screen recording under Wayland

11:34.440 --> 11:39.680
and all the nice new stuff that pipewire has. So I get it. And that's just the thing about

11:39.680 --> 11:44.620
arch, right? You are on the bleeding edge. And you're kind of sort of building your own

11:44.620 --> 11:52.160
distro at least a little bit. Sometimes that means a little bit of pain. Don't worry, though,

11:52.160 --> 11:57.480
the fix, if you did run into it, it's pretty darn easy. Details and commands in the show

11:57.480 --> 12:01.840
notes.

12:01.840 --> 12:06.840
linode.com slash LAN go there to get $100 in 60 day credit on a new account. And you

12:06.840 --> 12:11.780
go there to support the show. Linode is really the Linux geeks cloud. You know what I mean?

12:11.780 --> 12:15.840
When you're working with a company and you can tell they really get Linux, that's Linode.

12:15.840 --> 12:19.900
And they've got 11 data centers around the world. They've been working hard at making

12:19.900 --> 12:26.600
this the best way to run applications on Linux for nearly 19 years. They've built it up from

12:26.600 --> 12:31.440
the ground up based on customer requests. And it really shows because they have the

12:31.440 --> 12:38.000
best support in the business. Super fast systems. They've just added MVME storage and a great

12:38.000 --> 12:42.360
interface. Plus, they have a bunch of back end features that I personally just use the

12:42.360 --> 12:49.520
crap out of things like s3 compatible object storage, a powerful DNS manager, DDoS protection,

12:49.520 --> 12:54.400
load firewalls, super fast networking. They have infrastructure management support, a

12:54.400 --> 12:59.400
really clean, useful API. I mean, that stuff's just, you know, top of my list that I use

12:59.400 --> 13:03.120
all the time on a daily. But of course, I've been using for like two and a half years.

13:03.120 --> 13:06.600
What really got me though, was the pricing and the performance. That's what got me to

13:06.600 --> 13:11.040
stick around. They're 30 to 50% cheaper than the hyperscalers that want to lock you into

13:11.040 --> 13:16.520
their platforms. And they're just screaming fast. They're just absolutely screaming fast.

13:16.520 --> 13:20.000
We run all of our stuff for the last couple years up there. Go try it out and get $100

13:20.000 --> 13:24.080
while you support the show. Go build a website. Go run something for the back end on your

13:24.080 --> 13:29.080
company. I don't know. Maybe go click something. One boom, click deploy. And you're done. You

13:29.080 --> 13:33.900
got like Nextcloud going. That's how great it is. It's so nice. And you get $100 to play

13:33.900 --> 13:40.240
around and try it out. Just go to lino.com slash lan. Get $100 for 60 days on a new account

13:40.240 --> 13:47.640
and you support the show. lino.com slash lan.

13:47.640 --> 13:52.880
Linux.ting.com and a big thank you to Ting for also sponsoring this here podcast. If

13:52.880 --> 13:57.320
you're sick of overpaying for cell service, if you're ready to save a little bit of money,

13:57.320 --> 14:01.880
go to Ting and see how much you could save and take 25 bucks off of your device or get

14:01.880 --> 14:08.080
$25 in credit. Ting is a mobile virtual network operator that rides on top of the big nationwide

14:08.080 --> 14:15.720
carriers with LTE and 5G, but you're interfacing with Ting, who focuses on customer support,

14:15.720 --> 14:21.280
who focuses on simple plans that are easy to understand and easy to afford. And Ting

14:21.280 --> 14:26.440
Mobile was recently named the number one carrier by Consumer Reports in 2021. Ting's plans are

14:26.440 --> 14:30.840
simple and straightforward and there's no contract. There's really no better way to

14:30.840 --> 14:36.360
do mobile. That's why I've been a customer since 2013. Ting plans started unbelievable

14:36.360 --> 14:40.640
prices and they work great for the individual. They have plans that work great for your family.

14:40.640 --> 14:45.400
If it's time to start giving your kids some mobile service, that's the situation I'm looking

14:45.400 --> 14:50.280
at. Of course I'm going to use Ting. There's just no better way to save money every single

14:50.280 --> 14:54.860
month for me right now than just taking some of these low hanging fruits like my overly

14:54.860 --> 14:59.600
expensive monthlies and replacing them with something that's much better priced. And in

14:59.600 --> 15:03.640
the case of Ting, give me the same service. It's so simple to switch to Ting. Pretty much

15:03.640 --> 15:09.000
any phone's going to work. So just start by going to linux.ting.com. Check your phone,

15:09.000 --> 15:13.560
create an account and pick the plan that's right for you. You'll save 25 bucks when you

15:13.560 --> 15:19.720
go to linux.ting.com.

15:19.720 --> 15:26.760
Listeners of this show know we've been following BKeshFS for years now, always keeping an eye

15:26.760 --> 15:34.000
on where things are at. Well, this week, LWN did a fantastic job at summarizing a recent

15:34.000 --> 15:38.760
progress report from the Linux Storage Summit at the start of May.

15:38.760 --> 15:42.000
This storage summit sounds like it must have been quite the party and Kent Overstreet,

15:42.000 --> 15:47.840
the project creator of BKeshFS gave a talk where we got all kinds of updates, some of

15:47.840 --> 15:52.540
the most details we've gotten in a while, and Overstreet answered some questions from

15:52.540 --> 15:54.300
his fellow developers.

15:54.300 --> 16:00.520
One of the first ones that stood out to us was, what's the use case for BKeshFS exactly?

16:00.520 --> 16:05.720
You know, we've already got a bunch of file systems. I really liked Kent's answer though.

16:05.720 --> 16:12.000
Quote, the answer is everything. What does that mean? Well, his longstanding goal has

16:12.000 --> 16:18.800
been to be, quote, reliable and robust enough to be the XFS replacement.

16:18.800 --> 16:25.600
I mean, think about that. This is a file system with the same snapshot interface as ButterFS

16:25.600 --> 16:30.920
with sub volumes with all kinds of fancy features, but that's also being designed at the same

16:30.920 --> 16:36.400
time to be as robust and reliable as one of our old time favorites. I really want this

16:36.400 --> 16:37.400
to happen.

16:37.400 --> 16:44.280
Yeah, really. I love XFS, used it forever, and I have a lot of hopes that I'll use BKeshFS

16:44.280 --> 16:49.040
in a lot of those places. Like on a Raspberry Pi, this could be killer to have something

16:49.040 --> 16:54.640
like this. And BKeshFS has had a lot of hard work going into it recently. The allocator

16:54.640 --> 17:00.560
was recently rewritten. It's been tested on 50 terabytes storage arrays. There is all

17:00.560 --> 17:05.840
kinds of lessons that are getting at least considered from ButterFS, which I think is

17:05.840 --> 17:11.400
good to see. Overstreet said that the to-do list is always expanding, but the quote, really

17:11.400 --> 17:15.720
big pain points have mostly been dealt with at this point.

17:15.720 --> 17:21.680
Another interesting question that popped up was, is BKeshFS being used in production anywhere?

17:21.680 --> 17:26.120
And Overstreet did note that he definitely didn't have an exhaustive list of which companies

17:26.120 --> 17:29.760
and mostly found out about it with people asked for help or questions on the mailing

17:29.760 --> 17:36.400
list. But he did point out that several video production companies have been using it because

17:36.400 --> 17:42.080
they need to deal with multiple 4K streams for editing multi-camera setups, say. They've

17:42.080 --> 17:46.000
actually been using it for several years now, which is kind of saying something considering

17:46.000 --> 17:51.680
BKeshFS has been developed on a lot and has changed significantly over the last few years.

17:51.680 --> 17:56.960
Apparently, BKeshFS was chosen because it had better performance, but similar features

17:56.960 --> 18:02.680
as ButterFS. And at the time, had some unique features that other file systems couldn't

18:02.680 --> 18:03.680
quite match.

18:03.680 --> 18:08.760
So then the other question was, well, like, what's holding back BKeshFS? Why isn't it

18:08.760 --> 18:14.760
upstream yet? And Overstreet said that he is concerned about the amount of bug reports

18:14.760 --> 18:20.200
that will come in once it's just in the hands of more users. So he wants to make sure that

18:20.200 --> 18:24.680
there's some bigger development projects that just get taken care of, get handled before

18:24.680 --> 18:30.080
it gets to that point. He did point, though, to the documentation coming along pretty well

18:30.080 --> 18:35.000
in the principles of operation document, at least as a starting point for new users, which

18:35.000 --> 18:41.040
might be you out there, probably a lot of us for BKeshFS. So the principles of operations

18:41.040 --> 18:45.500
document will be linked in the show notes. It's up to 25 pages at this point, and it's

18:45.500 --> 18:51.000
organized by features. And it's probably going to get even more details, get a little more

18:51.000 --> 18:53.680
fleshed out soon, too.

18:53.680 --> 18:59.960
One developer wondered, when might the Rust rewrite be happening exactly? And okay, I

18:59.960 --> 19:05.000
kind of assumed that might have just been a joke question. But no, Overstreet said that

19:05.000 --> 19:10.520
there's actually already some user space Rust code in the repo. And as soon as Rust support

19:10.520 --> 19:17.160
lands in the kernel, he's ready to use it, saying, quote, so many little quality of life

19:17.160 --> 19:20.680
improvements in Rust.

19:20.680 --> 19:23.560
It sounds like some other people chimed up and said, you know, there's a few of us waiting

19:23.560 --> 19:27.440
for that Rust support in the kernel. And then Overstreet suggested that, well, if you're

19:27.440 --> 19:32.060
waiting for Rust support, maybe make some noise about that. Let the kernel devs know

19:32.060 --> 19:35.160
there's some of us out here that really want to see this.

19:35.160 --> 19:41.960
Yeah, it almost seems that maybe Rust support and BKeshFS are in something of a little race

19:41.960 --> 19:47.680
to see which lands in the kernel first. And of course, that was one of the big questions

19:47.680 --> 19:54.380
many folks were asking. When is mainlining happening? What's your timetable, Kent? Well,

19:54.380 --> 20:01.440
the answer, he'd like to see it happen within the next six months. And based on recent bug

20:01.440 --> 20:06.120
reports, he actually thinks that is a realistic goal.

20:06.120 --> 20:11.320
You know, six months, I could get behind that. I'd love to see where this goes. Of course,

20:11.320 --> 20:16.380
we'll keep an eye on this and everything else going on in the world of Linux and free software.

20:16.380 --> 20:20.520
So be sure you get every episode by going to linuxactionnews.com slash subscribe for

20:20.520 --> 20:26.400
all the ways to get the new episodes. And linuxactionnews.com slash contact to ask us

20:26.400 --> 20:32.640
all the BKeshFS questions you want. Don't miss episode 458 of Linux Unplugged. We've

20:32.640 --> 20:38.200
got some more details on the NVIDIA GPU drivers that are now free software and an interview

20:38.200 --> 20:42.760
with one of the co-founders of Tailscale, Varian Lightning. As for this show, well,

20:42.760 --> 20:48.880
we'll be back next week with the latest Linux and open source news. Thanks for joining us.

20:48.880 --> 20:50.800
And that's all the news for this week.


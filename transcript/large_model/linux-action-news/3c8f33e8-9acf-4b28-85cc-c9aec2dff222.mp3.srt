1
00:00:00,000 --> 00:00:09,440
Hello, and welcome to Linux Action News, episode 162, recorded on November 8, 2020.

2
00:00:09,440 --> 00:00:10,440
I'm Chris.

3
00:00:10,440 --> 00:00:11,440
And I'm Wes.

4
00:00:11,440 --> 00:00:12,440
Hello, Wes.

5
00:00:12,440 --> 00:00:13,440
Let's do the news.

6
00:00:13,440 --> 00:00:20,560
And let's start with the Raspberry Pi 400, the $70 Linux desktop PC that's essentially

7
00:00:20,560 --> 00:00:24,560
an updated Raspberry Pi 4 in a keyboard form factor.

8
00:00:24,560 --> 00:00:28,360
Over at Horace Technica, Jim Salter has a great breakdown, and he notes that the new

9
00:00:28,360 --> 00:00:32,640
form factor, which apparently has been in the works ever since the introduction of the

10
00:00:32,640 --> 00:00:38,200
official Raspberry Pi keyboard, addresses and enthusiastically supports the Pi 4's growing

11
00:00:38,200 --> 00:00:43,600
use case as a replacement, or at least alternative to, the traditional desktop PC.

12
00:00:43,600 --> 00:00:49,000
Now, isn't this interesting because it really kind of shows you what their game plan is.

13
00:00:49,000 --> 00:00:54,760
We speculated when the Pi 4 came out that they're kind of positioning this as a desktop,

14
00:00:54,760 --> 00:00:57,560
but now we have it all in a form factor.

15
00:00:57,560 --> 00:01:02,680
The Pi 400 is special because it takes what is sort of famously the Raspberry Pi keyboard

16
00:01:02,680 --> 00:01:08,720
and sticks a Raspberry Pi 4 in here, but it's not just a straight Pi 4 in a box.

17
00:01:08,720 --> 00:01:14,520
They've built a custom motherboard, a custom heating solution, and they've managed to keep

18
00:01:14,520 --> 00:01:16,520
the GPIO pins on the back.

19
00:01:16,520 --> 00:01:17,960
I actually, I got one.

20
00:01:17,960 --> 00:01:24,680
I got the kit, which includes, of course, the unit itself, a micro SD card slot preloaded

21
00:01:24,680 --> 00:01:31,960
with Raspberry Pi OS, a power brick, an HDMI cord, an SD card adapter, and a really nice

22
00:01:31,960 --> 00:01:32,960
book.

23
00:01:32,960 --> 00:01:33,960
Wow.

24
00:01:33,960 --> 00:01:34,960
So basically, you just need a monitor.

25
00:01:34,960 --> 00:01:35,960
Yeah.

26
00:01:35,960 --> 00:01:39,600
And that kit is $100, and it arrived at middle of the week.

27
00:01:39,600 --> 00:01:43,760
So I've had it for a few days, and I really kind of put it through its paces.

28
00:01:43,760 --> 00:01:48,840
And I have to say, I am happy with the end result.

29
00:01:48,840 --> 00:01:52,400
It kind of makes a big difference having a Pi 4 just ready to go.

30
00:01:52,400 --> 00:01:57,400
I don't have to carry my crash bag kit around anymore with an HDMI monitor and a keyboard

31
00:01:57,400 --> 00:02:00,440
and a mouse and a cord in there and all the power adapters.

32
00:02:00,440 --> 00:02:01,440
Right.

33
00:02:01,440 --> 00:02:06,120
I mean, you're a heavily adopter, I think, of the Raspberry Pi platform, and this is

34
00:02:06,120 --> 00:02:07,120
just all the more convenient.

35
00:02:07,120 --> 00:02:11,260
Now, maybe space is a premium for you, but in my home office, I wouldn't mind just having

36
00:02:11,260 --> 00:02:15,680
this on a shelf running as a server somewhere with easy access to a monitor if I need it.

37
00:02:15,680 --> 00:02:17,720
You totally could do that.

38
00:02:17,720 --> 00:02:20,520
This thing is surprisingly well built.

39
00:02:20,520 --> 00:02:24,440
It feels very solid, and I'm really happy to say, even when you're putting it under

40
00:02:24,440 --> 00:02:27,280
significant load, it doesn't get hot to the touch.

41
00:02:27,280 --> 00:02:29,120
I didn't get, like, heat coming off the keyboard.

42
00:02:29,120 --> 00:02:30,120
Oh, that's nice.

43
00:02:30,120 --> 00:02:32,200
Yeah, like a laptop does that, right?

44
00:02:32,200 --> 00:02:34,640
And this doesn't have that problem.

45
00:02:34,640 --> 00:02:36,800
It doesn't have a headphone jack.

46
00:02:36,800 --> 00:02:37,960
Well, that's too bad.

47
00:02:37,960 --> 00:02:40,480
It does have two micro HDMI ports.

48
00:02:40,480 --> 00:02:41,480
Is that what those are?

49
00:02:41,480 --> 00:02:42,480
Yeah.

50
00:02:42,480 --> 00:02:45,240
So you could drive dual 4K displays with this thing.

51
00:02:45,240 --> 00:02:46,240
Fancy.

52
00:02:46,240 --> 00:02:47,680
I only was pushing 1080p.

53
00:02:47,680 --> 00:02:50,500
I'm very happy with that, and it performs really well there.

54
00:02:50,500 --> 00:02:55,640
It has three USB ports on there, two are USB 3.0, and one is USB 2, which you could use

55
00:02:55,640 --> 00:03:01,160
for, like, your mouse, and then one of those I just use as a USB audio interface.

56
00:03:01,160 --> 00:03:02,160
That's how I go about it.

57
00:03:02,160 --> 00:03:04,480
Gigabit Ethernet is really nice to have.

58
00:03:04,480 --> 00:03:07,720
The power is delivered over USB-C. Great.

59
00:03:07,720 --> 00:03:12,280
It doesn't have a power switch, so you are plugging or unplugging, or, like, Canna Kit

60
00:03:12,280 --> 00:03:15,680
and others, they sell little switches that you plug your USB power cord into, and then

61
00:03:15,680 --> 00:03:19,560
you plug that into the Pi, and you can use that as a power switch.

62
00:03:19,560 --> 00:03:22,480
Probably old-fashioned, but I'd love to have a power button on this thing.

63
00:03:22,480 --> 00:03:25,960
But I suppose it does keep things simple and maybe the cost down.

64
00:03:25,960 --> 00:03:26,960
Yeah.

65
00:03:26,960 --> 00:03:33,760
So this really harkens back to, like, my first computer was all inside a keyboard, and I

66
00:03:33,760 --> 00:03:39,400
hooked it up to the back of a television screen, and there was no mouse to speak of, and it

67
00:03:39,400 --> 00:03:41,520
had somewhat of a command line interface.

68
00:03:41,520 --> 00:03:45,400
And when I saw this, it reminded me just when I started using it, even, and plugging things

69
00:03:45,400 --> 00:03:47,040
into it.

70
00:03:47,040 --> 00:03:50,560
And when my son asked me, hey, can you plug that into a TV, I was like, yes, you could.

71
00:03:50,560 --> 00:03:52,120
Let me tell you a story, son.

72
00:03:52,120 --> 00:03:53,120
Right?

73
00:03:53,120 --> 00:03:55,400
I mean, it just seems like a very versatile platform.

74
00:03:55,400 --> 00:03:56,480
It's easy to get started with.

75
00:03:56,480 --> 00:04:01,120
It comes with basically everything you need, including a pretty impressive guidebook.

76
00:04:01,120 --> 00:04:03,240
Yeah, it's the fourth edition of that.

77
00:04:03,240 --> 00:04:06,120
They've included it with other kits, but this is an updated one.

78
00:04:06,120 --> 00:04:13,080
I'm also happy to report that it boots right from USB 3 storage.

79
00:04:13,080 --> 00:04:18,920
So if you don't want to use the microSD and you want to boot off of, like, a USB 3.0 SSD,

80
00:04:18,920 --> 00:04:21,080
nothing required to configure it.

81
00:04:21,080 --> 00:04:26,160
You can flash a Raspberry Pi image to that SSD and then just plug it in over USB 3, and

82
00:04:26,160 --> 00:04:27,160
it'll boot right off that.

83
00:04:27,160 --> 00:04:30,280
Oh, that is great, and should make things a lot easier if you want to try out different

84
00:04:30,280 --> 00:04:31,280
distros.

85
00:04:31,280 --> 00:04:32,280
Which I did.

86
00:04:32,280 --> 00:04:37,120
I started, of course, with Raspberry Pi OS, which runs from the SD card, because I got

87
00:04:37,120 --> 00:04:38,120
the kit.

88
00:04:38,120 --> 00:04:41,040
And you can tell they've really eked out decent performance.

89
00:04:41,040 --> 00:04:46,240
It's got a minimal desktop and a Debian base and has tools to configure the Raspberry Pi.

90
00:04:46,240 --> 00:04:47,680
It feels like it's native OS.

91
00:04:47,680 --> 00:04:50,800
They've done a really good job there, and I think it's going to be plenty for a lot

92
00:04:50,800 --> 00:04:51,800
of people.

93
00:04:51,800 --> 00:04:52,800
But not for I, Wes.

94
00:04:52,800 --> 00:04:53,800
Not for I.

95
00:04:53,800 --> 00:04:56,040
I first started out with, of course, Ubuntu 2010.

96
00:04:56,040 --> 00:04:57,040
Naturally.

97
00:04:57,040 --> 00:05:00,400
I decided to go with the full GNOME desktop, because that's something that the team put

98
00:05:00,400 --> 00:05:01,400
a lot of effort into.

99
00:05:01,400 --> 00:05:04,240
Well, and it's always interesting to see, you know, is the pie up for what you might

100
00:05:04,240 --> 00:05:06,280
consider a standard Linux desktop these days?

101
00:05:06,280 --> 00:05:08,280
I mean, it's totally usable.

102
00:05:08,280 --> 00:05:14,360
And I think it really underscores that what now holds back the Raspberry Pi platform is

103
00:05:14,360 --> 00:05:16,360
their storage medium.

104
00:05:16,360 --> 00:05:22,380
I just I'm not I'm not 100% comfortable recommending this to friends and family and then have them

105
00:05:22,380 --> 00:05:26,680
run everything off of an SD card because I know that a micro SD card has a limited write

106
00:05:26,680 --> 00:05:27,680
lifespan.

107
00:05:27,680 --> 00:05:31,680
It's cheap, easy to get started with, available, but also it's just not going to last that

108
00:05:31,680 --> 00:05:33,360
long and it's slow.

109
00:05:33,360 --> 00:05:42,440
And because you have so few types of IO, USB is really the primary IO on the Raspberry Pi,

110
00:05:42,440 --> 00:05:47,200
dedicating one of those ports to your storage kind of stinks because you're also dedicating

111
00:05:47,200 --> 00:05:48,720
the USB-C port to power.

112
00:05:48,720 --> 00:05:52,080
So you're burning multiple ports.

113
00:05:52,080 --> 00:05:58,040
What it really underscores is what we need is some way for storage that is a conventional

114
00:05:58,040 --> 00:06:03,520
storage, maybe MVME disk like on the Pine, but some kind of storage that I can plug into

115
00:06:03,520 --> 00:06:08,280
this thing that's fast and built into the motherboard and on the bus off of USB is really

116
00:06:08,280 --> 00:06:10,080
what's got to come next for these things.

117
00:06:10,080 --> 00:06:14,240
Because you could put eight gigs of RAM in the Pi 400 and that would be lovely.

118
00:06:14,240 --> 00:06:20,560
And you could even put a much faster ARM CPU, that'd be great and be a noticeable improvement.

119
00:06:20,560 --> 00:06:23,920
But it's still massively hindered by the storage choices.

120
00:06:23,920 --> 00:06:24,920
It's really unfortunate.

121
00:06:24,920 --> 00:06:31,480
You know, I put a very high-end Samsung MVME SSD and I'm still limited by what USB 3.0

122
00:06:31,480 --> 00:06:32,480
can do for me.

123
00:06:32,480 --> 00:06:34,800
And I'm burning one of my valuable ports too at the same time.

124
00:06:34,800 --> 00:06:35,800
Right.

125
00:06:35,800 --> 00:06:38,840
I think it works well at the low end of the market, but clearly there's folks who have

126
00:06:38,840 --> 00:06:44,240
nice peripherals or using it for server-related tasks and you want to have access to these.

127
00:06:44,240 --> 00:06:47,680
Maybe it's empty by default and then just an add-on later would also be nice if it was

128
00:06:47,680 --> 00:06:48,680
fit right on the board.

129
00:06:48,680 --> 00:06:50,160
So it would keep that handy form factor.

130
00:06:50,160 --> 00:06:57,600
Yeah, and I think in IoT and in server work cases where IO isn't super intense, a really

131
00:06:57,600 --> 00:07:01,200
fast SD card gets the job done.

132
00:07:01,200 --> 00:07:08,540
Or in like a large cluster environment, you might use NetBoot and run off of network storage.

133
00:07:08,540 --> 00:07:12,240
But when you're talking about the desktop and you're talking about getting it as a desktop

134
00:07:12,240 --> 00:07:13,240
kit, $100...

135
00:07:13,240 --> 00:07:19,080
Think about it, there's a $100 Linux PC that's well-built, well-supported and is really stable.

136
00:07:19,080 --> 00:07:22,280
It's really a great proposition.

137
00:07:22,280 --> 00:07:25,780
The only downside is, is, oh, by the way, that storage probably has about a year to

138
00:07:25,780 --> 00:07:29,640
lifespan max, depending on your usage, and it's going to be real slow when you're loading

139
00:07:29,640 --> 00:07:30,640
applications.

140
00:07:30,640 --> 00:07:34,080
Yeah, that does bring the question of, this is someone's first Linux experience.

141
00:07:34,080 --> 00:07:37,200
How far does the caveat of the Raspberry Pi go, especially if they're not really familiar

142
00:07:37,200 --> 00:07:38,200
with their options?

143
00:07:38,200 --> 00:07:40,600
We want Linux users to have a good first impression.

144
00:07:40,600 --> 00:07:41,600
Yeah.

145
00:07:41,600 --> 00:07:48,560
And I really, really could see myself using this long-term as a studio desktop machine

146
00:07:48,560 --> 00:07:52,920
that's always ready to go with SSH, that always has like my email program on it, that has

147
00:07:52,920 --> 00:07:56,680
a web browser that I'm logged into so I can get into stuff really quick.

148
00:07:56,680 --> 00:08:00,040
It's low power, it's low heat, it's silent.

149
00:08:00,040 --> 00:08:04,000
Seems natural for any kind of like kiosk, always available display setup.

150
00:08:04,000 --> 00:08:10,220
I also put a Manjaro Plasma Edition on this, and I felt like, and I kind of suspected this

151
00:08:10,220 --> 00:08:16,040
might be the case, and it seems to bear out in my testing, Plasma is a pretty good experience.

152
00:08:16,040 --> 00:08:21,720
KWin is pretty clever about scaling down to different hardware.

153
00:08:21,720 --> 00:08:26,400
And Raspberry Pi with Manjaro is a nice combination.

154
00:08:26,400 --> 00:08:27,760
They go good together.

155
00:08:27,760 --> 00:08:31,760
Lots of available software, a desktop environment that is certainly first class.

156
00:08:31,760 --> 00:08:34,880
Modern CPU with some of the latest drivers.

157
00:08:34,880 --> 00:08:42,560
And so I was able to use OpenGL accelerated graphics under KWin on the Pi 400, and I felt

158
00:08:42,560 --> 00:08:43,960
like performance was really good.

159
00:08:43,960 --> 00:08:48,040
We sometimes have, maybe it doesn't, isn't the smoothest at resizing Windows and stuff

160
00:08:48,040 --> 00:08:52,740
like that, but man, when you combine that with the price tag, $70 if you don't need

161
00:08:52,740 --> 00:08:59,440
the kit, 70 bucks, native Linux device, and silent, it's really nice.

162
00:08:59,440 --> 00:09:03,000
And the experience for getting Ubuntu on this is first class.

163
00:09:03,000 --> 00:09:06,000
I have to really give props to the Ubuntu team.

164
00:09:06,000 --> 00:09:10,360
When you go to download the Raspberry Pi version, they have really nice pictures that show you

165
00:09:10,360 --> 00:09:14,400
every Raspberry Pi that they support, and they already have updated with the Pi 400

166
00:09:14,400 --> 00:09:15,400
on there.

167
00:09:15,400 --> 00:09:16,400
That's nice.

168
00:09:16,400 --> 00:09:20,000
So I found the picture of the Pi 400 and downloaded the ARM image, and that was that.

169
00:09:20,000 --> 00:09:21,840
It was that easy.

170
00:09:21,840 --> 00:09:27,440
This has got to be one of the nicest, most streamlined pre-built Linux boxes I've ever

171
00:09:27,440 --> 00:09:28,440
seen.

172
00:09:28,440 --> 00:09:32,760
Because silence and low power is big for me.

173
00:09:32,760 --> 00:09:33,820
Those are big attributes.

174
00:09:33,820 --> 00:09:39,840
And having gigabit ethernet means, at least in my use case, I'll have this thing just

175
00:09:39,840 --> 00:09:41,440
set up as a terminal station.

176
00:09:41,440 --> 00:09:45,320
We can jump on fake NAS, and we can do arch updates, and all kinds of stuff whenever we

177
00:09:45,320 --> 00:09:46,320
need now.

178
00:09:46,320 --> 00:09:47,640
I mean, I think it's just a great machine.

179
00:09:47,640 --> 00:09:50,080
I thought I was going to give it away as a gift, but it's too nice.

180
00:09:50,080 --> 00:09:51,080
It's too unique.

181
00:09:51,080 --> 00:09:52,080
I'm keeping it.

182
00:09:52,080 --> 00:09:53,080
I'm very happy with it.

183
00:09:53,080 --> 00:09:56,520
I hope that means that we'll see this form factor stick around, because the Pis have

184
00:09:56,520 --> 00:10:01,080
just been getting better and better, more available RAM, more horsepower.

185
00:10:01,080 --> 00:10:05,080
And I could see maybe in the next, maybe a couple generations down the road, this might

186
00:10:05,080 --> 00:10:06,080
be enough.

187
00:10:06,080 --> 00:10:10,160
If you do a lot of things on your phone, you just occasionally need a desktop, it might

188
00:10:10,160 --> 00:10:11,160
be enough.

189
00:10:11,160 --> 00:10:12,160
Yeah, absolutely.

190
00:10:12,160 --> 00:10:17,240
And I'll say this, the kit is going to make a great holiday gift.

191
00:10:17,240 --> 00:10:21,760
If your use cases aren't high performance, if you don't need more than a couple of applications

192
00:10:21,760 --> 00:10:24,880
at a time, and everything you need is ARM compatible.

193
00:10:24,880 --> 00:10:26,560
So those are the big caveats right now.

194
00:10:26,560 --> 00:10:30,960
But if you're comfortable with all those caveats, it's a big recommend.

195
00:10:30,960 --> 00:10:35,680
Speaking of Linux hardware, it looks like Dell is set to add webcam and microphone kill

196
00:10:35,680 --> 00:10:37,400
switches in future versions.

197
00:10:37,400 --> 00:10:41,600
Now, this is interesting because I think we're all pretty familiar with some privacy oriented

198
00:10:41,600 --> 00:10:45,920
niche devices out there like the Librem notebooks and Librem 5, where they have physical hardware

199
00:10:45,920 --> 00:10:48,240
switches on the side.

200
00:10:48,240 --> 00:10:51,920
But this might be something a little different because we're getting these details on what

201
00:10:51,920 --> 00:10:59,560
could be landing in future Dell products, say in 2021, by source code in the Linux kernel.

202
00:10:59,560 --> 00:11:02,660
Yeah, Michael Airbolt over at Ferronix got wind of this.

203
00:11:02,660 --> 00:11:07,520
That's the Dell privacy driver sent out on Tuesday to the Linux kernel mailing list.

204
00:11:07,520 --> 00:11:11,760
And really, it's all about manipulating the relevant LEDs and tracking the status of the

205
00:11:11,760 --> 00:11:16,480
hardware based controls, whereas the actual toggling of the audio and video support is

206
00:11:16,480 --> 00:11:18,000
handled by the hardware.

207
00:11:18,000 --> 00:11:22,280
Yeah, so instead of like cutting out holes in the side of the laptop and having physical

208
00:11:22,280 --> 00:11:27,160
toggle switches, which would never be waterproof, and you know me, Wes, I dream of a waterproof

209
00:11:27,160 --> 00:11:28,160
laptop one day.

210
00:11:28,160 --> 00:11:29,520
You sure do.

211
00:11:29,520 --> 00:11:34,720
But instead, it is hardware controlled kill switches via an interface provided by the

212
00:11:34,720 --> 00:11:39,180
kernel that is manipulated by keyboard combinations in the user space.

213
00:11:39,180 --> 00:11:44,560
So you hit a key combo that signals to the kernel to then message to the hardware to

214
00:11:44,560 --> 00:11:47,000
actually do the kill switching.

215
00:11:47,000 --> 00:11:51,340
So it's not a software kill switch, it's a messaging system to signal the hardware kill

216
00:11:51,340 --> 00:11:52,340
switch.

217
00:11:52,340 --> 00:11:53,340
Yeah, this seems pretty clever.

218
00:11:53,340 --> 00:11:56,000
You know, the kernel is just there sitting and passing messages back and forth.

219
00:11:56,000 --> 00:11:58,200
And it seems like a good way to implement this.

220
00:11:58,200 --> 00:12:04,040
Yeah, you wonder if it makes it somewhat possible, because if it's in user space, then potentially

221
00:12:04,040 --> 00:12:07,880
a malicious application in user space could send those same signals.

222
00:12:07,880 --> 00:12:11,880
But I would first of all, I would imagine Dell is probably engineered for that.

223
00:12:11,880 --> 00:12:16,880
But second of all, I wonder if that wouldn't be a decent compromise, because think about

224
00:12:16,880 --> 00:12:21,320
how niche down that is that, you know, you'd have to be going after a Dell model running

225
00:12:21,320 --> 00:12:25,640
a certain version of this software stack on a certain version of the kernel for certain

226
00:12:25,640 --> 00:12:26,640
hardware devices.

227
00:12:26,640 --> 00:12:28,320
And that's really niche down.

228
00:12:28,320 --> 00:12:30,800
That's like nation state level niche down for a vulnerability.

229
00:12:30,800 --> 00:12:32,760
So maybe it's not a bad compromise.

230
00:12:32,760 --> 00:12:36,360
And it also seems looking at the source code that Veronica called this out, there's some

231
00:12:36,360 --> 00:12:41,280
indication that Dell is working on a privacy screen under this driver.

232
00:12:41,280 --> 00:12:45,500
And it's not quite clear, but it seems this privacy screen would reduce the horizontal

233
00:12:45,500 --> 00:12:48,520
and vertical viewing angles of the display.

234
00:12:48,520 --> 00:12:52,640
So that onlookers couldn't clearly see the content of your screen like those privacy

235
00:12:52,640 --> 00:12:57,160
screens that they have at banks, only built in and then enabled by the user with a key

236
00:12:57,160 --> 00:12:58,160
combo.

237
00:12:58,160 --> 00:12:59,160
Interesting.

238
00:12:59,160 --> 00:13:00,160
Yeah.

239
00:13:00,160 --> 00:13:01,160
Toggle this on or off.

240
00:13:01,160 --> 00:13:02,160
Maybe adjust the viewing angles.

241
00:13:02,160 --> 00:13:03,160
Interesting.

242
00:13:03,160 --> 00:13:06,120
These future Dell Linux machines could be very competitive in multiple ways.

243
00:13:06,120 --> 00:13:11,040
And it's interesting to see Dell pursue privacy as one of those ways to differentiate and

244
00:13:11,040 --> 00:13:12,360
be competitive.

245
00:13:12,360 --> 00:13:13,720
Clearly they think there's a market for it.

246
00:13:13,720 --> 00:13:14,720
Yeah.

247
00:13:14,720 --> 00:13:18,200
Well, I think they might be onto something, Wes.

248
00:13:18,200 --> 00:13:23,200
Linode.com slash LAN, you go there to get a $100 60 day credit towards a new account

249
00:13:23,200 --> 00:13:25,360
and you support the show.

250
00:13:25,360 --> 00:13:27,960
Linode is our server provider of choice.

251
00:13:27,960 --> 00:13:33,500
If we need to deploy a server for anything, even if it's just a test or learn a new skill,

252
00:13:33,500 --> 00:13:34,660
we use Linode.

253
00:13:34,660 --> 00:13:40,540
They started in 2003 as one of the first companies in cloud computing, three years before AWS,

254
00:13:40,540 --> 00:13:44,480
because they were Linux users themselves and they saw where things were going.

255
00:13:44,480 --> 00:13:46,720
We're about to have a story towards the end of the show.

256
00:13:46,720 --> 00:13:51,160
That's a great example of when you are tapped into the Linux scene, you see where things

257
00:13:51,160 --> 00:13:53,760
are going before the rest of the market does.

258
00:13:53,760 --> 00:13:54,760
And that was Linode.

259
00:13:54,760 --> 00:13:59,680
I've been using them exclusively for a couple of years, but I have followed them forever.

260
00:13:59,680 --> 00:14:03,420
They're always at the same events I go to, like Linux Fest Northwest, they're sponsors

261
00:14:03,420 --> 00:14:04,520
of the Kubuntu project.

262
00:14:04,520 --> 00:14:08,400
In fact, they provide infrastructure for a lot of open source projects.

263
00:14:08,400 --> 00:14:12,440
If you need to run something on Linux, you can probably run it on Linode.

264
00:14:12,440 --> 00:14:15,380
They give you access to the backend infrastructure.

265
00:14:15,380 --> 00:14:22,360
There's even guides, just this last week, I did this crazy setup where I reflashed a

266
00:14:22,360 --> 00:14:27,120
production Linode to a custom distribution using their own tutorial.

267
00:14:27,120 --> 00:14:28,120
Wow.

268
00:14:28,120 --> 00:14:29,120
Yeah.

269
00:14:29,120 --> 00:14:33,240
And it really worked, you know, they walked me through how to create a custom rescue boot

270
00:14:33,240 --> 00:14:39,120
environment and then boot into that and then reflash the host disk using DD and they gave

271
00:14:39,120 --> 00:14:43,000
you all the steps to do it because they're not afraid of giving you access to the backend

272
00:14:43,000 --> 00:14:45,120
because they're Linux users themselves.

273
00:14:45,120 --> 00:14:49,080
But if you're just a beginner, the UI is so simple and straightforward, you're gonna have

274
00:14:49,080 --> 00:14:50,840
no problem getting started.

275
00:14:50,840 --> 00:14:56,080
And they also have other services beyond servers, like load balancers and S3 compatible object

276
00:14:56,080 --> 00:14:58,800
storage, which can be a real trick.

277
00:14:58,800 --> 00:15:01,600
There are cloud provider and the price is great.

278
00:15:01,600 --> 00:15:06,880
It starts at $5 a month, it's 30 to 50% cheaper than the big cloud providers out there.

279
00:15:06,880 --> 00:15:10,120
So go check out Linode, linode.com slash LAN.

280
00:15:10,120 --> 00:15:13,400
They're independently owned and they're founded on a love for Linux and now they're making

281
00:15:13,400 --> 00:15:17,440
your humble podcast network right here, Jupiter Broadcasting possible.

282
00:15:17,440 --> 00:15:20,960
And also a big thank you to everybody who goes to linode.com slash LAN.

283
00:15:20,960 --> 00:15:25,520
You get that $100 60 day credit towards a new account and you let Linode know you heard

284
00:15:25,520 --> 00:15:32,240
about it right here on Linux Action News, linode.com slash LAN.

285
00:15:32,240 --> 00:15:36,200
There's big changes coming to Let's Encrypt's root certificate and they're warning that

286
00:15:36,200 --> 00:15:40,240
as a result, about a third of Android devices could stumble next year.

287
00:15:40,240 --> 00:15:44,640
Yeah, the register has a great write up on this, which we'll link to in the show notes,

288
00:15:44,640 --> 00:15:46,080
but I just love the opening paragraph.

289
00:15:46,080 --> 00:15:47,480
So I wanted to just read it for you.

290
00:15:47,480 --> 00:15:53,040
Let's encrypt a certificate authority that puts the S into HTTPS for about 220 million

291
00:15:53,040 --> 00:15:59,380
domains has issued a warning to users of older Android devices that their web surfing may

292
00:15:59,380 --> 00:16:02,280
get choppy next year.

293
00:16:02,280 --> 00:16:04,200
Uh oh.

294
00:16:04,200 --> 00:16:05,840
Now what does all of this mean?

295
00:16:05,840 --> 00:16:10,360
Okay, well to get a certificate authority started, you have to get some folks to trust

296
00:16:10,360 --> 00:16:12,680
you, and it takes time to do that.

297
00:16:12,680 --> 00:16:17,400
So from the start, Let's Encrypt had some support from Iden Trust who sort of cross

298
00:16:17,400 --> 00:16:21,280
signed everything Let's Encrypt was doing, made it so that existing browsers, existing

299
00:16:21,280 --> 00:16:25,760
computers, existing trust stores would accept these brand new Let's Encrypt certificates.

300
00:16:25,760 --> 00:16:26,760
So they have like a co-signer.

301
00:16:26,760 --> 00:16:27,760
Exactly.

302
00:16:27,760 --> 00:16:28,760
Okay.

303
00:16:28,760 --> 00:16:31,440
Like you might have on your home loan because well, no one trusts you.

304
00:16:31,440 --> 00:16:34,960
Dad had to sign for, had to co-sign on my first car, I had no credit.

305
00:16:34,960 --> 00:16:39,040
So naturally the next step was they made their own root certificate and applied for it to

306
00:16:39,040 --> 00:16:42,040
be trusted with all the major software platforms.

307
00:16:42,040 --> 00:16:48,120
And actually by July of 2018, their root certificate had been accepted by Microsoft, Google, Apple,

308
00:16:48,120 --> 00:16:51,680
Mozilla, Oracle, and yes, even Blackberry.

309
00:16:51,680 --> 00:16:56,300
And so it was no longer really necessary to have Iden Trust's root certificate vouch for

310
00:16:56,300 --> 00:16:57,800
Let's Encrypt's character.

311
00:16:57,800 --> 00:17:02,720
I love how this isn't an issue for Blackberry users, but of course the problem is that Android

312
00:17:02,720 --> 00:17:05,360
devices are slow to update.

313
00:17:05,360 --> 00:17:12,280
And so next year on September 1st, 2021, this root certificate that Let's Encrypt was initially

314
00:17:12,280 --> 00:17:16,800
using, it relied on cross signing like Wes explained, and that's going to be wrapped

315
00:17:16,800 --> 00:17:21,780
up and done, which means new certificates that have been issued since those Android

316
00:17:21,780 --> 00:17:27,640
devices were built and shipped and presumably last updated, won't trust the certificates

317
00:17:27,640 --> 00:17:30,040
from Let's Encrypt in this new era.

318
00:17:30,040 --> 00:17:34,400
And so they just may not connect or they may issue some sort of error in their web browser.

319
00:17:34,400 --> 00:17:39,500
And most notably, this includes version of Android prior to 7.11.

320
00:17:39,500 --> 00:17:43,480
So that's actually a fair amount of them, it seems.

321
00:17:43,480 --> 00:17:48,640
That lapse in trust will hit actually about a third of Android devices currently operating.

322
00:17:48,640 --> 00:17:54,880
And with more than 2.5 billion active Android users, that impact could be noticeable, although

323
00:17:54,880 --> 00:18:00,520
hopefully not by too many, those aging Android devices account for only about 1 to 5% of

324
00:18:00,520 --> 00:18:01,520
internet traffic.

325
00:18:01,520 --> 00:18:04,040
Yeah, I mean, it's maybe notable worth talking about.

326
00:18:04,040 --> 00:18:08,200
And we could take action as as maybe the tech people in the family, I think you are and

327
00:18:08,200 --> 00:18:11,640
I, a lot of us probably in the audience play that role too.

328
00:18:11,640 --> 00:18:14,760
If we have family members that are on older Android devices, and they're just in a position

329
00:18:14,760 --> 00:18:18,640
not to upgrade, one thing you could do that would help them is get them on Firefox.

330
00:18:18,640 --> 00:18:19,880
It won't be affected by this issue.

331
00:18:19,880 --> 00:18:21,380
Mozilla's all up to date.

332
00:18:21,380 --> 00:18:24,080
They're going to be good to go if they put Firefox on their Android device.

333
00:18:24,080 --> 00:18:25,080
Problem solved.

334
00:18:25,080 --> 00:18:29,760
While it won't help you right now, Chrome will soon have its own dedicated certificate

335
00:18:29,760 --> 00:18:30,960
root store.

336
00:18:30,960 --> 00:18:35,800
Google has announced plans to run its own certificate root program for Chrome in a major

337
00:18:35,800 --> 00:18:38,280
architectural shift for the company's web browser program.

338
00:18:38,280 --> 00:18:43,420
Now, if you're not familiar, a root program or a root store is a list of root certificates

339
00:18:43,420 --> 00:18:48,220
that operating systems and applications use to verify the integrity of a software program

340
00:18:48,220 --> 00:18:50,680
during its installation routine.

341
00:18:50,680 --> 00:18:54,920
Users like Chrome use root stores to check the validity of an HTTPS connection.

342
00:18:54,920 --> 00:18:58,680
They do this by looking at the website's TLS certificate and checking if the root certificate

343
00:18:58,680 --> 00:19:03,640
that was used to generate the TLS cert is included in the local root or program store.

344
00:19:03,640 --> 00:19:09,720
And the notable thing here is that since Chrome's launch in 2009, it was using the underlying

345
00:19:09,720 --> 00:19:11,560
platform's root store.

346
00:19:11,560 --> 00:19:14,480
So that was always the root source.

347
00:19:14,480 --> 00:19:19,220
But now according to a Wiki page, Google has announced plans to create their own store

348
00:19:19,220 --> 00:19:21,880
named the Chrome root program.

349
00:19:21,880 --> 00:19:25,840
And it will ship on all versions of Chrome on all platforms except for one.

350
00:19:25,840 --> 00:19:27,080
Can you guess which platform?

351
00:19:27,080 --> 00:19:28,960
Oh, something tells me it's iOS.

352
00:19:28,960 --> 00:19:29,960
Yes, it's iOS.

353
00:19:29,960 --> 00:19:33,960
It probably would get them kicked from the app store.

354
00:19:33,960 --> 00:19:35,960
It's currently in the very early stages.

355
00:19:35,960 --> 00:19:39,140
So that's why Wes said it's not going to solve your problem for now.

356
00:19:39,140 --> 00:19:40,920
But you got to look at the market share of Chrome here.

357
00:19:40,920 --> 00:19:47,200
And you know, by some estimations, 60% to 65%, it's the gateway to the internet.

358
00:19:47,200 --> 00:19:51,840
And so these kinds of changes are going to have big impacts.

359
00:19:51,840 --> 00:19:56,080
And you've got to assume Google's going to be more up to date with their root store than

360
00:19:56,080 --> 00:20:00,240
some of these older platforms, some of these older OSs that users decide not to abandon.

361
00:20:00,240 --> 00:20:04,400
Yeah, I mean, in some ways, it's just adding more control to the browser environment.

362
00:20:04,400 --> 00:20:08,240
You can be sure that you've got the right up to date list of certs, kind of in the same

363
00:20:08,240 --> 00:20:12,360
way that there's been a big push to DNS over HTTPS, you know, we're going to manage that

364
00:20:12,360 --> 00:20:13,360
ourselves too.

365
00:20:13,360 --> 00:20:15,840
We're not going to rely on whatever ancient DNS servers you're using.

366
00:20:15,840 --> 00:20:18,840
It's funny you say that, because that's kind of also been the biggest source of pushback

367
00:20:18,840 --> 00:20:23,040
again, is from enterprises, that same argument, where they say, well, hold on here.

368
00:20:23,040 --> 00:20:26,980
We manage this very carefully at the enterprise level with a lot of intention.

369
00:20:26,980 --> 00:20:29,360
And now you're just going to go bypass all of our hard work?

370
00:20:29,360 --> 00:20:31,440
Like, we've put a lot of effort into this.

371
00:20:31,440 --> 00:20:35,960
And this is kind of the ongoing battle as web browsers become more and more self-contained.

372
00:20:35,960 --> 00:20:43,120
I mean, would it be that crazy to see a future where by default, Google just uses 8.8.8.8

373
00:20:43,120 --> 00:20:47,400
for its DNS resolution and doesn't even bother using what's on your OS?

374
00:20:47,400 --> 00:20:49,400
I could absolutely see a future where that happens.

375
00:20:49,400 --> 00:20:53,520
And I could see enterprise IT admins hating that change.

376
00:20:53,520 --> 00:20:54,880
I would hate that change.

377
00:20:54,880 --> 00:20:58,680
I, on all of my lands, run a local DNS cache.

378
00:20:58,680 --> 00:21:00,880
I know, I'm that guy.

379
00:21:00,880 --> 00:21:02,540
But it just makes things faster.

380
00:21:02,540 --> 00:21:05,400
And I like having machine names and all that kind of stuff.

381
00:21:05,400 --> 00:21:09,000
I like naming my computers and being able to SSH to them by their name.

382
00:21:09,000 --> 00:21:10,000
That's just good fun.

383
00:21:10,000 --> 00:21:17,640
Or, you know, their URL and those kinds of changes, they rob you of that functionality.

384
00:21:17,640 --> 00:21:20,560
But you hope maybe they'll make it opt-in.

385
00:21:20,560 --> 00:21:25,200
Yeah, you know, if I can add some automation, some scripts that will install my custom certs

386
00:21:25,200 --> 00:21:27,960
into their new store, I can handle it.

387
00:21:27,960 --> 00:21:32,120
I think it's pretty easy, though, to see why they're doing something like this.

388
00:21:32,120 --> 00:21:35,800
You can kind of understand and appreciate why Google feels like this is necessary in

389
00:21:35,800 --> 00:21:37,560
light of the Android situation.

390
00:21:37,560 --> 00:21:41,800
We kind of created the problem, and now this is sort of a weird way to fix it.

391
00:21:41,800 --> 00:21:43,400
But you can see the logic.

392
00:21:43,400 --> 00:21:45,160
It's still early days, though.

393
00:21:45,160 --> 00:21:50,100
Google has published rules for their new root program and is asking people to start applying

394
00:21:50,100 --> 00:21:54,720
to their whitelist now so that down the road, when they eventually do adopt this new program,

395
00:21:54,720 --> 00:21:56,960
there will be a seamless transition.

396
00:21:56,960 --> 00:21:59,480
I want you to explain this next one to us.

397
00:21:59,480 --> 00:22:02,880
There's a lot of hype around BPF and eBPF.

398
00:22:02,880 --> 00:22:09,080
eBPF is technology in the kernel that lets programmers execute custom bytecode within

399
00:22:09,080 --> 00:22:15,240
the Linux kernel without having to change the kernel or load kernel modules.

400
00:22:15,240 --> 00:22:19,800
And some people are talking about it like the core technology that's going to fuel a

401
00:22:19,800 --> 00:22:26,440
billion dollar tool industry, and it appears it just got a lot easier to use.

402
00:22:26,440 --> 00:22:32,720
Yeah, right now there are already many eBPF based startups building networking, security,

403
00:22:32,720 --> 00:22:34,560
and performance products.

404
00:22:34,560 --> 00:22:40,280
Yet all of them basically require customers to install LLVM, Clang, and the kernel header

405
00:22:40,280 --> 00:22:41,280
dependencies.

406
00:22:41,280 --> 00:22:46,640
And often that can be over 100 megs of storage just to get started using any of this.

407
00:22:46,640 --> 00:22:50,480
And if you're looking at like router devices, edge devices, or even just tooling devices,

408
00:22:50,480 --> 00:22:51,480
that's not insignificant.

409
00:22:51,480 --> 00:22:54,800
And you know, one more layer to have to pull in your image.

410
00:22:54,800 --> 00:23:01,640
So two new technologies, BTF and CoRE, eliminate these dependencies at runtime.

411
00:23:01,640 --> 00:23:06,080
So not only making BPF more practical for embedded Linux environments, just as you're

412
00:23:06,080 --> 00:23:09,720
talking about, but really just for adoption everywhere.

413
00:23:09,720 --> 00:23:13,840
Now all right, those were acronyms before, but first we've got BTF.

414
00:23:13,840 --> 00:23:16,640
Little confusing because it's the BPF type format.

415
00:23:16,640 --> 00:23:18,400
Oh, it's got an acronym inside it.

416
00:23:18,400 --> 00:23:19,400
I like that.

417
00:23:19,400 --> 00:23:20,400
That's right.

418
00:23:20,400 --> 00:23:24,720
And this provides struct information so that you can avoid needing to have Clang or the

419
00:23:24,720 --> 00:23:25,720
kernel headers.

420
00:23:25,720 --> 00:23:27,960
You've already got that struct information available to you.

421
00:23:27,960 --> 00:23:28,960
Yeah.

422
00:23:28,960 --> 00:23:29,960
Okay.

423
00:23:29,960 --> 00:23:37,000
So that was CoRE, that's BPF Compile Once Run Everywhere, which allows compiled BPF bytecode

424
00:23:37,000 --> 00:23:41,400
to be relocatable, avoiding the need for recompilation by LLVM.

425
00:23:41,400 --> 00:23:42,400
Yeah.

426
00:23:42,400 --> 00:23:43,400
Now, okay.

427
00:23:43,400 --> 00:23:48,560
So imagine this as somebody who's trying to use BPF in their project, in their product.

428
00:23:48,560 --> 00:23:52,520
Instead of requiring customers to install various heavyweight and sometimes brittle

429
00:23:52,520 --> 00:23:59,280
dependencies, a BPF agent or some tool may now be just a single tiny little binary, a

430
00:23:59,280 --> 00:24:05,280
tinary that works on the kernel, any kernel that has this BTF support.

431
00:24:05,280 --> 00:24:11,000
So it seems like it means the job just got a lot simpler for developers, but additionally,

432
00:24:11,000 --> 00:24:14,720
end users, consumers of the tools, it'll be a lot simpler of a dependency chain, just

433
00:24:14,720 --> 00:24:17,200
a much simpler way to package, deliver, this kind of thing.

434
00:24:17,200 --> 00:24:18,200
Yeah, exactly.

435
00:24:18,200 --> 00:24:21,600
I mean, before you were recompiling stuff, you were building kernel modules, you were

436
00:24:21,600 --> 00:24:24,360
making sure that all of this stuff could actually get loaded into your kernel.

437
00:24:24,360 --> 00:24:27,720
You had to have all the dependencies set up and maintained.

438
00:24:27,720 --> 00:24:31,720
And if you're just trying to add some product onto your Kubernetes infrastructure, that

439
00:24:31,720 --> 00:24:33,720
might not be what you signed up for.

440
00:24:33,720 --> 00:24:34,880
Yeah, that's right.

441
00:24:34,880 --> 00:24:40,240
And Google has been using eBPF to run their data plane for the Google Kubernetes engine.

442
00:24:40,240 --> 00:24:43,700
It's used at Facebook, it's used at Netflix.

443
00:24:43,700 --> 00:24:47,320
This technology is, I think, relevant and there will be a lot of tools, maybe network

444
00:24:47,320 --> 00:24:49,920
analyzers and whatnot that are built off of it.

445
00:24:49,920 --> 00:24:53,120
So it's worth learning and it's one of those things we wanted to talk about now so that

446
00:24:53,120 --> 00:24:56,920
way down the road, when future products are built on top of it, you know what's behind

447
00:24:56,920 --> 00:24:57,920
the scenes.

448
00:24:57,920 --> 00:25:02,180
If you want a whole bunch more information about eBPF and related technologies, just

449
00:25:02,180 --> 00:25:04,360
check out Linux Unplugged, episode 293.

450
00:25:04,360 --> 00:25:08,560
Yeah, I think it's a really cool technology and it's worth paying attention to and it's

451
00:25:08,560 --> 00:25:12,440
just one listen away, linuxunplugged.com slash 293.

452
00:25:12,440 --> 00:25:15,760
Well, that does bring us to the end of this week's Linux Action News.

453
00:25:15,760 --> 00:25:20,080
Check out linuxactionnews.com slash subscribe for all the ways to get new episodes.

454
00:25:20,080 --> 00:25:24,320
And linuxactionnews.com slash contact for ways to get in touch.

455
00:25:24,320 --> 00:25:26,720
You know, join us during the Apple event this week if you're around.

456
00:25:26,720 --> 00:25:31,000
The week this publishes over jblive.tv we'll have live event coverage and then we'll roll

457
00:25:31,000 --> 00:25:32,000
right into Coder Radio.

458
00:25:32,000 --> 00:25:37,120
We'll be back next Monday with our weekly take on the latest Linux and open source news.

459
00:25:37,120 --> 00:25:57,280
Thanks for joining us and we'll see you next week.


WEBVTT

00:00.000 --> 00:16.360
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

00:16.360 --> 00:21.880
This is episode 108, recorded on June 2nd, 2019. I'm Chris.

00:21.880 --> 00:22.880
And I'm Joe.

00:22.880 --> 00:26.560
Hello, Joe. Good to be connected with you. I'm fresh off of Texas Linux Fest, and I think

00:26.560 --> 00:31.240
I even managed to avoid the Fest hangover this time. I'm getting good at this, Joe.

00:31.240 --> 00:34.720
What do you say we kick things off with hidden wasp, some Linux malware?

00:34.720 --> 00:39.340
Yeah, this is quite an unusual bit of Linux malware in that it's not a crypto miner,

00:39.340 --> 00:45.200
and it's not just a botnet that's designed to do DDoSs and stuff. It seems to be fairly

00:45.200 --> 00:49.880
targeted and designed to take over machines completely.

00:49.880 --> 00:54.600
Yeah, it's not really about mining crypto. It's more about command and control. And I

00:54.600 --> 00:58.720
think one of the interesting things about this one, it's like three different projects

00:58.720 --> 01:04.040
mashed together into one Frankenstein piece of malware. That's not something we've seen

01:04.040 --> 01:08.280
a lot of. And some of it's from like open public code, and some of it's from some well-known

01:08.280 --> 01:15.960
malware. And despite the fact that it's this Frankenstein based on known malware, most

01:15.960 --> 01:18.960
detection systems haven't been catching it.

01:18.960 --> 01:22.000
This is not really one of those stories where you have to worry about your box being vulnerable.

01:22.000 --> 01:26.440
I mean, I suppose theoretically it's possible. But generally, according to initial research

01:26.440 --> 01:32.080
so far, it seems that the systems are already compromised in some way. And then this is

01:32.080 --> 01:39.600
left behind to use it, to manipulate it, to control it, and not necessarily used to like

01:39.600 --> 01:44.880
steal CPU cycles or route mail or anything like that. And it's really kind of early days

01:44.880 --> 01:48.960
right now, because we've only gotten a couple of files to look at, some bash scripts and

01:48.960 --> 01:50.560
whatnot.

01:50.560 --> 01:55.640
And they think that the main way that the malware is used is really just to kind of

01:55.640 --> 02:01.640
keep control of the systems that have already been ransacked, which I think is fascinating.

02:01.640 --> 02:04.720
And it doesn't seem very professional either, does it? Because they've just mashed all these

02:04.720 --> 02:08.440
different things together to create this new hybrid beast.

02:08.440 --> 02:13.100
Well, isn't that the spirit of open source? Take existing stuff and put it together to

02:13.100 --> 02:14.240
make something better?

02:14.240 --> 02:20.080
I agree. It's just the article that we've linked in ours sort of tries to really kind

02:20.080 --> 02:25.920
of point the finger at China as a state-sponsored attack. But it doesn't really seem like it's

02:25.920 --> 02:30.000
very sophisticated, like a state wouldn't necessarily just mash something like this

02:30.000 --> 02:33.920
together. They'd probably create one unified piece of attack code.

02:33.920 --> 02:37.120
At least traditionally, that's the case. Who knows? I mean, I'm just sitting here speculating

02:37.120 --> 02:41.300
because it's just one of these fascinating stories where it's not a big threat, but it's

02:41.300 --> 02:46.460
a weird beast that's going by undetected. And a lot of times that's the case with these

02:46.460 --> 02:51.660
vulnerabilities is people are chaining a series of vulnerabilities together. So you get onto

02:51.660 --> 02:55.640
the box, and you get what you need. But then how do you retain control, right? Each one

02:55.640 --> 03:00.640
of those is an individual problem, getting into the box, executing what you need done,

03:00.640 --> 03:04.400
and then retaining control, three separate problems. And this is solving just the latter

03:04.400 --> 03:05.400
one.

03:05.400 --> 03:09.480
Well, it wasn't the only security issue this week. There was also yet another vulnerability

03:09.480 --> 03:10.480
in Docker.

03:10.480 --> 03:13.680
In the show notes, we'll have a link to a great write up by Dennis Fisher, who breaks

03:13.680 --> 03:18.820
down both sides of the argument here. You have the researchers case, and then you have

03:18.820 --> 03:23.240
Docker responding, and I'll get to both of it too briefly. But from a high level, the

03:23.240 --> 03:29.600
flaw is a weakness that results in a race condition in Docker. And there's already a

03:29.600 --> 03:34.640
fix that's in the works, but there's also a workaround you could already take advantage

03:34.640 --> 03:39.960
of. And like our previous story, you already have to be on the box to take advantage of

03:39.960 --> 03:45.120
this flaw. And I think that's really key here, because with this particular flaw, and the

03:45.120 --> 03:50.240
last one we just discussed with the malware, if somebody's already on your system and executing

03:50.240 --> 03:56.120
that code and has access to these things, you're already messed up. A line has been

03:56.120 --> 03:59.000
already crossed.

03:59.000 --> 04:02.560
So it's funny too, because this is like the simplest thing to check this out. It's a bug

04:02.560 --> 04:07.280
that's a result of the way Docker handles symbolic links. And it was discovered by security

04:07.280 --> 04:14.000
researchers that in some situations, an attacker can insert their own symlink into a path during

04:14.000 --> 04:19.600
a very short time window. I'm saying like in some cases, a millisecond or so of a time

04:19.600 --> 04:25.120
window between the time that the path has been resolved, and then the time that it's

04:25.120 --> 04:29.240
operated on. So this is a tiny, tiny fraction of time in there. An attacker could add that

04:29.240 --> 04:34.080
link to something that's on the root file system of the host, and get out of containment

04:34.080 --> 04:38.200
and get access to something on there. This happens when somebody executes Docker CP.

04:38.200 --> 04:42.960
That's when this opportunity comes up. Because when you run Docker CP, it's giving you read

04:42.960 --> 04:49.360
write access to the host file system. The obvious and super easy solution is, A, make

04:49.360 --> 04:54.440
sure your containers are secure, and B, pause the container when you use Docker CP. And

04:54.440 --> 04:55.720
that solves the problem.

04:55.720 --> 04:58.640
But that's not always possible when those containers are in production.

04:58.640 --> 05:03.600
Yeah, I suppose so. And that's definitely not ideal. I think Docker plans later on to

05:03.600 --> 05:09.840
upstream this as the default behavior in future releases of Docker, even later this year.

05:09.840 --> 05:13.680
And what they'll do is it'll just be a very, very brief pause. You execute the copy command,

05:13.680 --> 05:18.560
it pauses for a few microseconds, and then it completes, or however long it takes, and

05:18.560 --> 05:19.560
then it unpauses.

05:19.560 --> 05:24.800
But Docker doesn't seem to think this is that serious, because it's such an edge case. And

05:24.800 --> 05:29.040
that's why they were kind of willing to let this vulnerability go out there into the wild

05:29.040 --> 05:31.040
before they had a fix ready for it.

05:31.040 --> 05:34.400
Yeah, the Docker official said in a statement that the attack scenario needed to exploit

05:34.400 --> 05:41.320
this vulnerability is quote, rare, slash unlikely. And that in the next monthly update, they'll

05:41.320 --> 05:45.640
have the fix merged. In the meantime, use Docker pause, and in the future release, they'll

05:45.640 --> 05:47.480
have Docker pause automatically.

05:47.480 --> 05:51.880
Well this week saw a release of a bit of software that I have been using since the very beginning

05:51.880 --> 05:57.840
of my Linux journey. And I can't believe that after 15 years, it is finally getting to a

05:57.840 --> 06:00.400
1.0 release. And that is G parted.

06:00.400 --> 06:06.760
Such great software. Really have so much appreciation for this team. And it is so cool to see this

06:06.760 --> 06:12.480
happen after 15 years. And which, I don't know, at this point, it almost feels like

06:12.480 --> 06:18.680
a meme. This release completes the migration to GTK 3.

06:18.680 --> 06:19.680
Yeah.

06:19.680 --> 06:24.900
There's a couple other things besides just switching to GTK 3, though, that jumped out

06:24.900 --> 06:28.320
at me. I thought this was one of the features that was already in there. Maybe I was running

06:28.320 --> 06:33.400
an early build, but they've added the ability to save your partition layout to an HTML file,

06:33.400 --> 06:35.680
which is really nice for documentation purposes.

06:35.680 --> 06:41.260
There's a couple of other noteworthy changes in here. Number one is they've improved the

06:41.260 --> 06:47.400
refresh of NTFS file systems. They say it's a fix for slow refreshing of NTFS. And then

06:47.400 --> 06:53.800
in the bug fix section of the release notes, they note, we've removed support for the ButterFS

06:53.800 --> 06:58.800
Progues utilities to manage the ButterFS file system. So it appears that they've removed,

06:58.800 --> 07:05.200
even if the underlying distribution has BTRFS Progues installed, they don't support it in

07:05.200 --> 07:08.800
G parted 1.0 anymore. I think that's what I'm reading here, Joe.

07:08.800 --> 07:13.800
Yeah, it certainly looks that way. But then again, who's using ButterFS these days? Oh

07:13.800 --> 07:15.800
yeah. I'm Sousa.

07:15.800 --> 07:21.880
Besides, everybody knows the future is BcacheFS. Everybody knows that. Actually, I think the

07:21.880 --> 07:27.560
reality is, at least for future technologies, Unity is looking really strong. And they have

07:27.560 --> 07:31.000
a brand new announcement for Linux users.

07:31.000 --> 07:35.480
We're not talking about the desktop environment for Ubuntu here. We're talking about the game

07:35.480 --> 07:42.000
engine. And they've announced that the Linux version of Unity editor has got official Linux

07:42.000 --> 07:43.000
support now.

07:43.000 --> 07:48.600
I struggle to be excited because I've been underwhelmed by more Unity based games that

07:48.600 --> 07:54.480
I have been excited by them. But it's also one of those Electron style compromises. And

07:54.480 --> 08:00.280
I don't mean to ascribe the performance comparisons there. I'm just talking about, it's a bit

08:00.280 --> 08:04.560
of a, what do you call it? Common denominator? Is that the right term? A common denominator

08:04.560 --> 08:09.840
where it's, you can't really go all in because you're not writing natively for that platform.

08:09.840 --> 08:14.360
You're kind of targeting a common problem set. And that's sometimes good though, because

08:14.360 --> 08:19.840
it means it opens up the door to a lot more games. And it means that people can actually

08:19.840 --> 08:25.480
now do some of that game production on a Linux desktop, which means more desktop users. But

08:25.480 --> 08:29.360
it also means these games might be just a little more refined under Linux now. It's

08:29.360 --> 08:33.240
probably not going to take off like Wildfire, but it appears they're doing this based on

08:33.240 --> 08:35.920
customer demand, which is a great sign, Joe.

08:35.920 --> 08:41.440
It is a good sign. And they have offered experimental and unofficial builds for quite a long time.

08:41.440 --> 08:48.080
But now it's good to see that because of commercial pressures, they're actually going official

08:48.080 --> 08:53.040
with it and they're going to properly support it. But it's not just for games, is it? There

08:53.040 --> 09:01.640
are other industries that can utilize the engine for various 3D stuff. Things like the

09:01.640 --> 09:08.440
automotive industry and of course the movie industry and even some manufacturing and stuff.

09:08.440 --> 09:14.640
And so it goes to show that even if gaming on Linux isn't massively big, those other

09:14.640 --> 09:19.640
industries are adopting Linux across the board. And they've been using it on the server for

09:19.640 --> 09:23.960
a long time, but maybe more and more so on the desktop.

09:23.960 --> 09:27.920
So let's look at these desktop specs they have here. They want you to run either Ubuntu

09:27.920 --> 09:33.740
16.04 or 18.04. So you need to be on one of the LTSs for the supported configuration.

09:33.740 --> 09:41.440
Your mileage may vary. Or CentOS 7 is acceptable. It needs to be the x86-64 architecture. And

09:41.440 --> 09:47.480
here's an interesting requirement. GNOME Desktop is a requirement running on X. No Wayland

09:47.480 --> 09:53.440
for you and no plasma if you want, again, a supported configuration. And then they require

09:53.440 --> 10:00.800
you to use either the NVIDIA official proprietary graphics or the AMD Mesa graphics driver.

10:00.800 --> 10:06.800
And they recommend a full desktop form factor running on a device or slash hardware with

10:06.800 --> 10:13.500
no emulation or compatibility layers. So my PCIe pass-through setup is out.

10:13.500 --> 10:19.320
I'm sure that XFC would be fine with this. Of course.

10:19.320 --> 10:26.100
But realistically, they have to set some standards here and say these are the supported configurations

10:26.100 --> 10:28.440
and these are what we recommend for a best experience.

10:28.440 --> 10:33.000
Yeah, it's kind of impressive. It's not just Ubuntu 16.04. End of sentence.

10:33.000 --> 10:39.360
Yeah, that's true. And it sounds like it is going to work perfectly well on other systems,

10:39.360 --> 10:44.760
but they just have to set some standards, don't they? They can't support every last

10:44.760 --> 10:47.720
Linux distro and desktop environment and configuration.

10:47.720 --> 10:52.800
Oh, you said standards, Joe. You know how that triggers me these days. The browser vendors

10:52.800 --> 10:58.520
are applying more and more leverage over W3C, the folks that are supposed to be setting

10:58.520 --> 11:03.440
the standards for the World Wide Web. But of course, without the browser vendors being

11:03.440 --> 11:08.160
on board, they don't really have much leverage, do they? You can't really set a standard if

11:08.160 --> 11:10.400
the people that would implement them aren't on board.

11:10.400 --> 11:15.240
Well, yeah. And this goes back years, the Web Hypertext Application Technology Working

11:15.240 --> 11:18.680
Group or how would you say the acronym?

11:18.680 --> 11:19.680
Woodwig.

11:19.680 --> 11:27.120
Woodwig, yeah. That's been around since 2004 and has almost been battling with the W3C.

11:27.120 --> 11:32.960
You've got the browser vendors on one side trying to set the standards and W3C on the

11:32.960 --> 11:38.020
other side. And it's kind of gone back and forth. And now it seems the W3C is just kind

11:38.020 --> 11:44.120
of folded on this and just accepted the reality that they are going to be dictated to by the

11:44.120 --> 11:45.780
browser manufacturers.

11:45.780 --> 11:50.540
This has been a long time brewing, like you said. I mean, I don't know how else it could

11:50.540 --> 11:57.160
have gone down because if you've got Apple, Mozilla, and Opera and generally Google working

11:57.160 --> 12:01.520
outside of what the... I'll give you an example, actually. So this is one of the better examples.

12:01.520 --> 12:06.180
The W3C really wanted to kind of convert the web over to XHTML so everything would have

12:06.180 --> 12:10.840
an XML-like structure, which then the browsers would render for you. But they hated the idea.

12:10.840 --> 12:16.100
The browser vendors hated the idea. And from that rebellion against that idea, this is

12:16.100 --> 12:21.520
Chris paraphrasing here, we got the HTML5 standard, which then later on, the W3C later

12:21.520 --> 12:26.640
formally approved as the next major iteration of the HTML web standard to sort of make nice

12:26.640 --> 12:30.860
with the browser vendors because they were putting the support behind it and things were

12:30.860 --> 12:32.460
going in the right direction.

12:32.460 --> 12:40.080
But this week, things have taken a major shift. In a press release, the W3C and the Wodawig

12:40.080 --> 12:46.580
announced that they were finally putting their differences aside and signed a new, quote,

12:46.580 --> 12:48.980
memorandum of understanding.

12:48.980 --> 12:50.900
That's certainly one way to put it, yeah.

12:50.900 --> 12:55.920
Yeah. They say, per this new agreement, the W3C is officially giving up publishing of

12:55.920 --> 13:05.460
future HTML and DOM standards in favor of Wodawig, again, that's W-H-A-T-W-G, that group

13:05.460 --> 13:10.300
effectively giving them full control, which really means the browser vendors having full

13:10.300 --> 13:11.300
control.

13:11.300 --> 13:14.320
Which ultimately means Google having most of that control.

13:14.320 --> 13:21.060
I do wonder about that. I do wonder if we'll look back in 2025 and look back at May 28th,

13:21.060 --> 13:27.860
2019 is the day where something major shifted and the standards, but that body, that group

13:27.860 --> 13:32.300
also, Microsoft sits on there, Apple sits on there, Mozilla's in there, Opera's in that

13:32.300 --> 13:38.580
conversation. Really, isn't the solution now just to open that group up a little more?

13:38.580 --> 13:42.160
Because at the end of the day, if they're the ones writing the software, they always

13:42.160 --> 13:47.180
had ultimate control. The W3C has just sort of been a, I mean, it's a theater piece in

13:47.180 --> 13:51.700
a way. They can make good suggestions, but if Firefox and Google alone decide not to

13:51.700 --> 13:54.420
do it, it's like they're effectively powerless.

13:54.420 --> 13:59.980
Well, yeah, and the market will just go to whatever the most popular browser is. Already

13:59.980 --> 14:05.980
we're in a situation where some sites just don't work without Chrome. Source Connect,

14:05.980 --> 14:11.900
for example, is a web app that we sometimes use in production that requires Chrome. It's

14:11.900 --> 14:15.660
just got that hard requirement. And I don't really understand why all that underlying

14:15.660 --> 14:22.140
technology ought to work in a standards compliant browser like Firefox, but it just doesn't.

14:22.140 --> 14:26.180
There's some interesting parallels here with the free desktop standards and the conversations

14:26.180 --> 14:31.780
going on around the desktop and theming for Linux. In fact, I bet you a listener out there

14:31.780 --> 14:36.420
knows the perfect XKCD comic they could tweet me at Chris LAS that it's like we set these

14:36.420 --> 14:39.980
standards and then we get all the support behind them and then everybody goes off and

14:39.980 --> 14:43.220
does their own thing. And then we all decide the standards need to be redone completely

14:43.220 --> 14:49.940
all over again. And I don't, it's almost like what's the effing point? I mean, not to curse

14:49.940 --> 14:53.700
on your show, Joe, but what is the effing point of it all? At the end of the day, it's

14:53.700 --> 14:58.060
like people just want to sit around and make stuff up and then people go off into their

14:58.060 --> 15:02.100
own corners and do their own thing anyways. I find it frustrating.

15:02.100 --> 15:05.780
Yeah. 927, by the way, is that XKCD you're thinking of.

15:05.780 --> 15:06.780
Oh, okay.

15:06.780 --> 15:07.780
How standards proliferate.

15:07.780 --> 15:11.300
Yeah. Oh, that's a good one. But I feel like there's another one where we all go off and

15:11.300 --> 15:14.900
make standards and then throw them out. And I'm not talking about a standard for our standards

15:14.900 --> 15:18.380
either. That's not what we need here.

15:18.380 --> 15:21.260
So tell me about Texas Linux Fest then. How's that been going?

15:21.260 --> 15:25.700
Yeah, Texas Linux Fest was two days here in Irving, Texas, Irving, which is kind of nice

15:25.700 --> 15:29.220
because it's only about 30 or 40 minutes from the Linux Academy office. So I was able to

15:29.220 --> 15:35.500
shoot over here to do the show today. It was good. Friday was kind of slow. It is typically,

15:35.500 --> 15:38.860
you know, when it's a work day, like that first day is usually a little slow going.

15:38.860 --> 15:43.820
But by the second day, it's all the people you saw on Friday, plus a new batch of people.

15:43.820 --> 15:49.460
And they kicked off with, I think it was Thomas Cameron is his name, I believe. He's a local

15:49.460 --> 15:55.340
log number here and just gave a killer keynote. Both Elle and I just looked at each other

15:55.340 --> 15:58.740
after the keynote and was like, that's one of the best talks we've ever attended at any

15:58.740 --> 16:03.500
conference ever. It was really good. And we got the audio for it. So I'm going to see

16:03.500 --> 16:07.460
if we can release it. And we got some video of it for them too. So we're going to try

16:07.460 --> 16:10.740
to help them release it on their own channels as well.

16:10.740 --> 16:16.540
And it was at the same time, you know, there was a few bumps here and there. But as far

16:16.540 --> 16:22.500
as a community event goes, there's something kind of special around the 300 number because

16:22.500 --> 16:29.260
you see the same faces five or six, seven times over a weekend. And by day two, everybody

16:29.260 --> 16:33.900
kind of loosens up a little bit because you've been around each other. You've kind of gotten

16:33.900 --> 16:37.580
all the social awkwardness out of the way. And so day two is really casual and it's sort

16:37.580 --> 16:44.440
of a very friendly atmosphere. And so I just I really enjoyed the heck out of day two.

16:44.440 --> 16:49.500
And we got a hell of a thunderstorm here. It was raining and lightning like, like only

16:49.500 --> 16:55.140
Texas can provide. It was quite the show. And we had some great meetups, got to get

16:55.140 --> 16:59.660
some good beers and good food, some good company. So all in all, I'm very, very glad I made

16:59.660 --> 17:05.380
it down. And I hope they keep growing. I think they might try to go back to Austin possibly.

17:05.380 --> 17:09.000
But I hope they keep it up because it's like, it's like that plucky little conference you

17:09.000 --> 17:10.460
want to see keep going and grow.

17:10.460 --> 17:14.900
And what was the kind of topic trend there then? Was it all about cloud and hybrid cloud

17:14.900 --> 17:18.820
and corporate stuff? Or was it much more community desktop type stuff?

17:18.820 --> 17:21.820
Hmm, good question. You know, I hadn't really I hadn't really kind of thought about it.

17:21.820 --> 17:24.940
But as you're asking, I kind of went through it all. And I'd say my first my first hot

17:24.940 --> 17:32.140
take on that question would be it was fairly container focused and cloud focused, but not

17:32.140 --> 17:38.540
in like the buzzy, commercial cloud sense, but in the I'll give you an example, like

17:38.540 --> 17:42.760
the first talk that was really well attended of the day was about going from a total noob

17:42.760 --> 17:47.340
with ansible to going to brilliant. And it was a workshop talk. So about halfway through

17:47.340 --> 17:52.700
the talk, the author takes a 10 minute break puts up the download URLs for virtual machines

17:52.700 --> 17:56.760
and to get configuration files going. And then for the rest of the talk, you work along

17:56.760 --> 18:00.860
with the presenter and get ansible working by the end of the talk. And so it was that

18:00.860 --> 18:06.260
kind of stuff. And there was several of those workshops each day, which are very valuable.

18:06.260 --> 18:10.520
And there was a there was a really good message underneath it all. And that is, you could

18:10.520 --> 18:15.860
be a Linux admin today. And that's that's a really good living and you've probably got

18:15.860 --> 18:22.060
like a good solid 10 years where that's going to be a great living. But at some point, the

18:22.060 --> 18:27.600
Linux admin is going to go the way of the Unix admin. And that is to say not going away

18:27.600 --> 18:32.440
completely but becoming much, much more of a niche job. And what is going to take over

18:32.440 --> 18:38.820
is a cloud admin. Now, what does that mean? That's a lot of things. That's understanding

18:38.820 --> 18:43.160
networking, that's understanding Linux basics, that's understanding storage and network storage,

18:43.160 --> 18:46.820
that's understanding network fundamentals, that's understanding how data centers work,

18:46.820 --> 18:50.480
that's understanding how these services work and how to interface with them. It's a very

18:50.480 --> 18:56.020
complex job. But the awesome thing is, is if you're already a Linux admin, or you're

18:56.020 --> 18:59.700
even if you have a basic understanding of Linux, you're in a really good position to

18:59.700 --> 19:03.540
leverage that knowledge to pick up those other skill sets and have a really complete skill

19:03.540 --> 19:07.340
set resume. And so you're in a good position for the next 10 years, you just have to act

19:07.340 --> 19:09.260
on it and learn and train yourself up.

19:09.260 --> 19:12.940
It sounds like a really cool conference, then I might have to try and make it over for

19:12.940 --> 19:13.940
next year.

19:13.940 --> 19:18.820
Especially if you like to eat, because there's always really good food in Texas Joe. As my

19:18.820 --> 19:24.020
stomach will tell you, it's just a little bit bigger now.

19:24.020 --> 19:28.420
So there's a bit of breaking news that we don't have much info on it's happening as

19:28.420 --> 19:33.180
we record. This seems to happen every every Sunday when we record, doesn't it? And that's

19:33.180 --> 19:35.420
the Google Cloud seems to be down.

19:35.420 --> 19:41.220
Yeah, which is affecting things in weird ways on the internet right now. So of course, it's

19:41.220 --> 19:45.460
a big topic of conversation. But at the moment, we just have Google status page, not a lot

19:45.460 --> 19:49.100
of information about what's caused the outage or exactly how widespread it is. But what

19:49.100 --> 19:54.000
we do know is I'm in Texas and Joe's in London, and we're both impacted by the outage right

19:54.000 --> 19:55.000
now.

19:55.000 --> 19:59.340
The document that we used to do this show has been kind of connecting and not working.

19:59.340 --> 20:04.540
It's working right now, but it's been hit and miss. So yes, not sure how bad this is

20:04.540 --> 20:08.900
yet. But if it does turn out to be a bad one, then maybe you can follow up on Linux Unplugged

20:08.900 --> 20:09.900
on Tuesday.

20:09.900 --> 20:12.980
Yeah, if we find out something interesting, I will do that. I will do that. You know,

20:12.980 --> 20:17.740
Joe, sometimes it's just worth self hosting these kinds of things. Maybe this is our lesson.

20:17.740 --> 20:20.660
I know Nextcloud is starting to look more and more attractive to me.

20:20.660 --> 20:23.900
Well, we'll keep an eye on all kinds of things throughout the week and report them here for

20:23.900 --> 20:28.100
you. Check out linuxactionnews.com slash subscribe for all the ways to get new episodes.

20:28.100 --> 20:31.360
And linuxactionnews.com slash contact for ways to get in touch with us.

20:31.360 --> 20:36.220
And speaking of getting trained up, we've released the Don't Be Famous Learning Kubernetes

20:36.220 --> 20:40.740
and Securing Your Cluster talk, which is up on our YouTube channel, youtube.com slash

20:40.740 --> 20:45.420
Jupiter Broadcasting. A great introduction to getting Kubernetes secured away and an

20:45.420 --> 20:47.740
information packed talk in general.

20:47.740 --> 20:51.660
We'll be back next Monday with our weekly take on the latest Linux and open source news.

20:51.660 --> 20:53.420
I'm at Chris LAS.

20:53.420 --> 20:55.060
I'm at Joe Rissington.

20:55.060 --> 20:57.420
Thanks for joining us. And we will see you next week.

20:57.420 --> 21:24.420
See you later.


1
00:00:00,000 --> 00:00:08,700
Hello, and welcome to Linux Action News, episode 165, recorded on November 29th, 2020.

2
00:00:08,700 --> 00:00:09,700
I'm Chris.

3
00:00:09,700 --> 00:00:10,700
And I'm Wes.

4
00:00:10,700 --> 00:00:11,700
Hello, Wes.

5
00:00:11,700 --> 00:00:12,700
Let's do the news.

6
00:00:12,700 --> 00:00:18,080
And let's start with this prolonged AWS outage that took down a big chunk of the internet

7
00:00:18,080 --> 00:00:19,560
and I think a lot of us felt.

8
00:00:19,560 --> 00:00:24,940
Yeah, it was the addition of some new servers to AWS's backend that triggered a cascading

9
00:00:24,940 --> 00:00:29,440
set of errors that caused a whole bunch of problems in their Northern Virginia region.

10
00:00:29,440 --> 00:00:35,760
Yeah, based on the scale of outages and the number of services and applications impacted,

11
00:00:35,760 --> 00:00:40,980
you would may have thought it was all of AWS that was down.

12
00:00:40,980 --> 00:00:46,340
But it was just this one aspect, this area in the Northern Virginia region.

13
00:00:46,340 --> 00:00:50,440
The company was attempting to add a modest amount of new capacity to its Amazon Kinesis

14
00:00:50,440 --> 00:00:56,220
service that customers use to process things like real time data, including video, audio,

15
00:00:56,220 --> 00:00:58,960
or even application logs.

16
00:00:58,960 --> 00:01:04,060
To get over this, well, of course, you gotta go implement the fix and then restart a bunch

17
00:01:04,060 --> 00:01:05,060
of servers.

18
00:01:05,060 --> 00:01:09,340
In Amazon's case, a relatively small piece of their system they described as many thousands

19
00:01:09,340 --> 00:01:10,960
because Amazon.

20
00:01:10,960 --> 00:01:12,760
And that's a small number for them.

21
00:01:12,760 --> 00:01:13,760
Indeed.

22
00:01:13,760 --> 00:01:18,680
Ah, the real problem here is that, well, Amazon uses Amazon services, right?

23
00:01:18,680 --> 00:01:21,940
I mean, if you have AWS, you're going to use AWS.

24
00:01:21,940 --> 00:01:27,160
And so other services relied on Kinesis to get their work done, things like their Cognito

25
00:01:27,160 --> 00:01:28,520
authentication offering.

26
00:01:28,520 --> 00:01:34,520
Oh, also, there was some some kind of shenanigans going on with the status dashboard, which

27
00:01:34,520 --> 00:01:37,180
wasn't really giving us clear information at the time.

28
00:01:37,180 --> 00:01:43,200
And there's various conversations online that seem to be kind of implying its internal politics

29
00:01:43,200 --> 00:01:48,440
that were maybe de-incentivizing employees from properly updating the dashboard.

30
00:01:48,440 --> 00:01:52,580
Yeah, it does seem like there's a pattern sometimes due to technical reasons, like at

31
00:01:52,580 --> 00:01:56,540
least this time sounds like Cognito since they're using Kinesis, well, Cognito is used

32
00:01:56,540 --> 00:01:58,800
to log in and update the dashboard.

33
00:01:58,800 --> 00:02:03,760
So it might be some technical reasons, but in general, I'd say AWS is never quick to

34
00:02:03,760 --> 00:02:04,760
update their status.

35
00:02:04,760 --> 00:02:09,940
I mean, you could see how that if you're a staffer in AWS infrastructure, and you have

36
00:02:09,940 --> 00:02:15,680
to change your dashboard status to offline, that very likely triggers a whole series of

37
00:02:15,680 --> 00:02:20,960
events and processes that put your department and you in particular in the minutia for quite

38
00:02:20,960 --> 00:02:21,960
a while.

39
00:02:21,960 --> 00:02:25,400
And you just want to avoid that, I can imagine you don't need another target on your back,

40
00:02:25,400 --> 00:02:27,160
even if it's the right thing to do.

41
00:02:27,160 --> 00:02:28,160
Yeah.

42
00:02:28,160 --> 00:02:34,080
This also, every time this happens, it's like this huge deal, like, oh, my gosh, most of

43
00:02:34,080 --> 00:02:35,080
the web is offline.

44
00:02:35,080 --> 00:02:38,440
And there was one of these articles that we have linked in the show notes that just had

45
00:02:38,440 --> 00:02:42,320
a long litany of apps and services that were offline.

46
00:02:42,320 --> 00:02:46,460
And every time this happens, it seems like it affects us more and more like we never

47
00:02:46,460 --> 00:02:48,880
learned the lessons from the last outage.

48
00:02:48,880 --> 00:02:49,880
Right.

49
00:02:49,880 --> 00:02:53,900
I mean, we're not we're still not relying on less cloud services, right?

50
00:02:53,900 --> 00:03:01,200
One of the services and companies that was really affected badly is those Roomba vacuums

51
00:03:01,200 --> 00:03:05,560
that the whole service and the management, all of it goes through that region.

52
00:03:05,560 --> 00:03:09,400
And so you have people tweeting that they literally couldn't vacuum their house because

53
00:03:09,400 --> 00:03:10,520
AWS was down.

54
00:03:10,520 --> 00:03:13,520
That's 2020 for you.

55
00:03:13,520 --> 00:03:19,160
I also admit it affected me not only some of the services I use, but I will shamefully

56
00:03:19,160 --> 00:03:25,760
admit to you right here that I rely on the echo here in the studio for the Amazon Guard

57
00:03:25,760 --> 00:03:26,760
service.

58
00:03:26,760 --> 00:03:27,760
Are you familiar with this?

59
00:03:27,760 --> 00:03:28,760
Oh, yeah.

60
00:03:28,760 --> 00:03:29,760
They're a little security offering, right?

61
00:03:29,760 --> 00:03:30,760
Yeah.

62
00:03:30,760 --> 00:03:34,440
It turns each echo into like a listening station that listens for glass breaking or doors opening

63
00:03:34,440 --> 00:03:38,880
or people talking or smoke detectors or CO2 alarms going off.

64
00:03:38,880 --> 00:03:40,880
And if they go off, it will alert you.

65
00:03:40,880 --> 00:03:43,560
But additionally, you can build routines and automations around that.

66
00:03:43,560 --> 00:03:48,640
So when I arrive at the studio and I tell the echo that I'm home, it turns on a series

67
00:03:48,640 --> 00:03:49,640
of lights.

68
00:03:49,640 --> 00:03:53,360
It turns off all of the cameras and it stops the listening.

69
00:03:53,360 --> 00:03:56,920
And when I'm leaving, I tell it that and it resumes all of those functions.

70
00:03:56,920 --> 00:04:01,680
And I like that because when I'm gone or especially when I'm traveling, there can be no one at

71
00:04:01,680 --> 00:04:02,680
the studio for days.

72
00:04:02,680 --> 00:04:04,160
And so I like to keep an eye on how things are going.

73
00:04:04,160 --> 00:04:05,160
Nice to have a, yeah, right.

74
00:04:05,160 --> 00:04:11,380
And this guard is just kind of like an extra layer of nice to know supplemental security.

75
00:04:11,380 --> 00:04:14,420
It's not like what I rely on, but it's just nice to have that monitoring.

76
00:04:14,420 --> 00:04:19,640
When I arrived at the studio Wednesday morning and I invoked the echo to turn off the guarding

77
00:04:19,640 --> 00:04:22,800
service and it waits and it waits.

78
00:04:22,800 --> 00:04:30,600
And then I get this hilarious air in retrospect that says, sorry, I can't stop guarding.

79
00:04:30,600 --> 00:04:35,560
And I look around and all of the, they have these, they have like this sentry flashing

80
00:04:35,560 --> 00:04:38,800
light ring on them when they're monitoring the house.

81
00:04:38,800 --> 00:04:43,960
And so they have like this Cylon ring that goes around and around.

82
00:04:43,960 --> 00:04:45,720
And I look around and they're still doing it.

83
00:04:45,720 --> 00:04:46,720
And they were doing it all day.

84
00:04:46,720 --> 00:04:47,720
I couldn't get them to stop.

85
00:04:47,720 --> 00:04:50,140
And the problem is some events trigger alarms.

86
00:04:50,140 --> 00:04:53,960
So if you start speaking, you don't know if it's going to suddenly turn back on and start.

87
00:04:53,960 --> 00:04:57,600
And occasionally I do speak in the studio, so you start speaking and it detects speaking.

88
00:04:57,600 --> 00:05:03,300
So then it sets off the alarm, but then you can't, you can't tell it to stop because the,

89
00:05:03,300 --> 00:05:04,300
the data center was down.

90
00:05:04,300 --> 00:05:06,020
Plus you can't tell it to stop recording you.

91
00:05:06,020 --> 00:05:09,440
You can't, I mean, it's a good thing this thing isn't the one opening the door lock

92
00:05:09,440 --> 00:05:10,440
for you.

93
00:05:10,440 --> 00:05:11,440
Right.

94
00:05:11,440 --> 00:05:12,440
Right.

95
00:05:12,440 --> 00:05:14,840
So it affected them for a huge portion of the day.

96
00:05:14,840 --> 00:05:19,120
It, I thought within, you know, when it first happened with, Oh, I'll try again in 10 minutes.

97
00:05:19,120 --> 00:05:21,880
And then when that didn't work, I thought, well, it'll be working within an hour.

98
00:05:21,880 --> 00:05:23,480
And then when that didn't work, I thought, well, what am I going to do?

99
00:05:23,480 --> 00:05:26,520
I had to unplug one of them.

100
00:05:26,520 --> 00:05:31,120
Do we just have to accept maybe at this point that that's the level of reliability we're

101
00:05:31,120 --> 00:05:32,120
okay with?

102
00:05:32,120 --> 00:05:33,120
Like we all make a fuss about it.

103
00:05:33,120 --> 00:05:34,120
We don't like it.

104
00:05:34,120 --> 00:05:38,080
Obviously it's kind of embarrassing for Amazon when this happens, but it both doesn't happen

105
00:05:38,080 --> 00:05:40,520
that often and happens with some regularity.

106
00:05:40,520 --> 00:05:45,760
So we know that it happens and we're still taking the design route of designing, assuming

107
00:05:45,760 --> 00:05:50,200
we will basically have an always on connection to the cloud and we're still buying the products

108
00:05:50,200 --> 00:05:51,200
based on those things.

109
00:05:51,200 --> 00:05:52,200
Right.

110
00:05:52,200 --> 00:05:56,120
And like in my case, I don't actually seriously consider that a security system, but it's

111
00:05:56,120 --> 00:05:57,720
a nice to have addition.

112
00:05:57,720 --> 00:06:01,420
And because of this somewhat failure rate and the one I just experienced, I'll never

113
00:06:01,420 --> 00:06:04,160
rely on it as my only security system.

114
00:06:04,160 --> 00:06:06,560
It's just never, I'm never going to take it that seriously.

115
00:06:06,560 --> 00:06:12,600
And I think there is that calculus when you, like even for JB as a business, if we're going

116
00:06:12,600 --> 00:06:17,100
to host a service, it will occasionally those services may have outages and I have to weigh

117
00:06:17,100 --> 00:06:22,360
that outage against, well, what if I was running it myself and would I be, would I be just

118
00:06:22,360 --> 00:06:23,360
as reliable?

119
00:06:23,360 --> 00:06:27,320
Would I have, would I struggle during updates to actually even achieve their uptime and

120
00:06:27,320 --> 00:06:28,840
what, where do I land on that math?

121
00:06:28,840 --> 00:06:32,000
And I think we all have to kind of make that judgment.

122
00:06:32,000 --> 00:06:35,800
But you have to figure like for companies like Roomba and all the other services, Roomba

123
00:06:35,800 --> 00:06:38,960
was kind of the joke example, but all the other services that were down, including some

124
00:06:38,960 --> 00:06:43,640
banking infrastructure, it's a pretty significant risk.

125
00:06:43,640 --> 00:06:49,480
And maybe it, maybe it will lead to a hybrid cloud future because the way the obvious solution

126
00:06:49,480 --> 00:06:52,040
here is to have some redundant hosting.

127
00:06:52,040 --> 00:06:57,960
Like I joked on our pre-show discussion, but if AWS was hosting their status dashboard

128
00:06:57,960 --> 00:07:00,440
on say Linode, they could have at least updated.

129
00:07:00,440 --> 00:07:06,880
And there is some sound reasoning to use multiple providers or to mix self-hosting with cloud

130
00:07:06,880 --> 00:07:07,880
hosting.

131
00:07:07,880 --> 00:07:13,820
And I think if you, if reliability and control are high priorities, you've got to make a,

132
00:07:13,820 --> 00:07:15,000
you've got to make a decision there.

133
00:07:15,000 --> 00:07:19,020
And I think you would think every time there's something like this happens, it would reinforce

134
00:07:19,020 --> 00:07:20,020
that.

135
00:07:20,020 --> 00:07:22,940
But as I said at the beginning of this, it clearly hasn't more things were affected than

136
00:07:22,940 --> 00:07:24,640
ever before this time.

137
00:07:24,640 --> 00:07:29,080
And maybe some services like Netflix learned their lesson, but a whole bunch of new services

138
00:07:29,080 --> 00:07:31,160
and applications came online that didn't learn that lesson.

139
00:07:31,160 --> 00:07:33,080
They have to figure it out all over again.

140
00:07:33,080 --> 00:07:34,080
Yeah.

141
00:07:34,080 --> 00:07:37,680
That's, that's a bit unfortunate because there is such a better way to design this.

142
00:07:37,680 --> 00:07:43,200
I mean, the nature of the internet and TCP IP actually really, really plays to the strength

143
00:07:43,200 --> 00:07:44,760
of reliability and reroutability.

144
00:07:44,760 --> 00:07:50,900
But when you silo up everything like this, it just sort of negates some of those inherent

145
00:07:50,900 --> 00:07:52,860
benefits of the way the internet is architected.

146
00:07:52,860 --> 00:07:54,520
You're kind of giving some of those benefits up.

147
00:07:54,520 --> 00:07:58,000
Well, I guess we'll just be here to report on the next time it happens.

148
00:07:58,000 --> 00:08:04,160
Well, speaking of the cloud, Canonical has published a series of LTS Docker images.

149
00:08:04,160 --> 00:08:09,800
They're calling it a portfolio of curated secure Ubuntu based container applications

150
00:08:09,800 --> 00:08:13,160
on, well, what else, Docker Hub.

151
00:08:13,160 --> 00:08:18,280
And they come with up to 10 years of extended security support from Canonical.

152
00:08:18,280 --> 00:08:22,520
I guess it might be worth mentioning, not necessarily all of these are free though.

153
00:08:22,520 --> 00:08:27,320
Yeah, there will be several images available from this new set that will be free, at least

154
00:08:27,320 --> 00:08:31,340
during the normal sort of five year standard security maintenance period.

155
00:08:31,340 --> 00:08:37,480
But there will also be images available exclusively to paying Canonical customers, but still served

156
00:08:37,480 --> 00:08:38,480
through Docker Hub.

157
00:08:38,480 --> 00:08:39,560
That's interesting.

158
00:08:39,560 --> 00:08:43,560
It's like you get it and then license it kind of model.

159
00:08:43,560 --> 00:08:45,920
And could be a good revenue source for Canonical.

160
00:08:45,920 --> 00:08:49,560
There's also a bit of a nice get for them in this deal.

161
00:08:49,560 --> 00:08:53,080
They essentially now own the LTS namespace on Docker Hub.

162
00:08:53,080 --> 00:08:54,080
Yeah.

163
00:08:54,080 --> 00:08:58,520
You know, you want to go just pull the latest developer focused Ubuntu release on Docker,

164
00:08:58,520 --> 00:09:01,880
Docker run Ubuntu slash Redis, say you're running a Redis container.

165
00:09:01,880 --> 00:09:07,080
Well, if you want the LTS version of that, once these are out and available, that's just

166
00:09:07,080 --> 00:09:09,360
going to be LTS slash Redis.

167
00:09:09,360 --> 00:09:14,160
And hey, that's a pretty prominent namespace, at least for the developer crowd.

168
00:09:14,160 --> 00:09:15,160
Yeah, really.

169
00:09:15,160 --> 00:09:17,680
And who isn't going to want to build off the LTS if it's that easy?

170
00:09:17,680 --> 00:09:22,000
And then also a bit of a note about rate limiting, which we'd covered previously on the show.

171
00:09:22,000 --> 00:09:26,800
Yeah, you know, in the start of November, Docker fully implemented the rate limiting

172
00:09:26,800 --> 00:09:30,960
that they'd been talking about doing before where, you know, if you're an anonymous user,

173
00:09:30,960 --> 00:09:33,380
there will now be rate limits.

174
00:09:33,380 --> 00:09:36,040
These images, well, they'll all be excluded from that.

175
00:09:36,040 --> 00:09:40,080
I guess Canonical is footing the bill for this one.

176
00:09:40,080 --> 00:09:41,560
lino.com slash land.

177
00:09:41,560 --> 00:09:45,960
Go there to get a $100 60 day credit towards your new account.

178
00:09:45,960 --> 00:09:51,280
Simplify your cloud infrastructure with our hosting provider, lino.com slash land.

179
00:09:51,280 --> 00:09:57,640
We're the largest independent cloud for anyone, developers, new users, or seasoned admins.

180
00:09:57,640 --> 00:10:03,480
They started in 2003 as one of the first companies in cloud computing, three years before AWS.

181
00:10:03,480 --> 00:10:04,480
That's right.

182
00:10:04,480 --> 00:10:05,480
That's right.

183
00:10:05,480 --> 00:10:07,640
Because they loved Linux and they saw where it was going.

184
00:10:07,640 --> 00:10:11,400
And as they grew as a company, they began to support more and more open source initiatives

185
00:10:11,400 --> 00:10:12,960
and that put them on my radar.

186
00:10:12,960 --> 00:10:16,400
So a couple of years ago, I had an opportunity to try out Linode.

187
00:10:16,400 --> 00:10:19,680
I started setting up my infrastructure there and I got hooked.

188
00:10:19,680 --> 00:10:24,920
And now that's where we build out all of our business infrastructure and my personal infrastructure.

189
00:10:24,920 --> 00:10:28,920
And with 11 data centers worldwide, you're going to find just the right spot to deploy

190
00:10:28,920 --> 00:10:31,120
for you or your clients.

191
00:10:31,120 --> 00:10:34,880
And you'll rest easily knowing that Linode's built in monitoring tools have you covered.

192
00:10:34,880 --> 00:10:36,680
You'll get email alerts if something goes wrong.

193
00:10:36,680 --> 00:10:39,880
There's dashboards that give you metrics you can check to see what's been going on with

194
00:10:39,880 --> 00:10:40,880
performance.

195
00:10:40,880 --> 00:10:43,400
Oh, and speaking of their dashboard, this is pretty nice.

196
00:10:43,400 --> 00:10:47,800
They have a cloud firewall that's in beta and they're looking for users to test and

197
00:10:47,800 --> 00:10:50,240
provide feedback on the cloud firewall.

198
00:10:50,240 --> 00:10:53,480
So if you're already a Linode customer, check it out.

199
00:10:53,480 --> 00:10:56,040
It's active in the Sydney and Mumbai data centers.

200
00:10:56,040 --> 00:10:58,640
So perhaps you could spin up a Linode and try it.

201
00:10:58,640 --> 00:11:02,000
Their cloud firewall works on an allow list with an implicit deny rule.

202
00:11:02,000 --> 00:11:06,220
So when it's enabled, it blocks all the inbound traffic by default.

203
00:11:06,220 --> 00:11:11,260
Only network traffic that meets the parameters of your configuration will pass through.

204
00:11:11,260 --> 00:11:12,960
You could also do outbound rules if you'd like.

205
00:11:12,960 --> 00:11:16,000
So go bang on a form, let it know.

206
00:11:16,000 --> 00:11:18,880
Like it started by going to linode.com slash land.

207
00:11:18,880 --> 00:11:25,080
Get that $100 60 day credit, $100 is going to get you really far because you'd be surprised

208
00:11:25,080 --> 00:11:28,080
how much you can do with just a $5 a month Linode.

209
00:11:28,080 --> 00:11:29,160
You know what I like about it?

210
00:11:29,160 --> 00:11:33,000
They've got backups available if you need that because I don't know that I trust you

211
00:11:33,000 --> 00:11:34,240
to always do the backups.

212
00:11:34,240 --> 00:11:35,240
I don't have to.

213
00:11:35,240 --> 00:11:36,240
I trust Linode.

214
00:11:36,240 --> 00:11:37,240
I know.

215
00:11:37,240 --> 00:11:40,840
And that is trusted as well placed because those backups have come in handy.

216
00:11:40,840 --> 00:11:45,520
And unlike entry level service providers, Linode doesn't try to lock you into the backend

217
00:11:45,520 --> 00:11:48,800
where you can't get access to certain things that you need to get the job done.

218
00:11:48,800 --> 00:11:54,240
I have re-imaged a box from the ground up using their instructions and they let you

219
00:11:54,240 --> 00:11:58,080
get in there, give you full backend access to customize and control your server to fit

220
00:11:58,080 --> 00:11:59,080
your needs.

221
00:11:59,080 --> 00:12:01,400
And of course they integrate with infrastructure management tools.

222
00:12:01,400 --> 00:12:06,600
So if you do infrastructure by code, they've got you covered and their S3 compatible object

223
00:12:06,600 --> 00:12:12,640
storage is fast and super convenient, especially when you use their command line tools to upload

224
00:12:12,640 --> 00:12:13,680
and manage files.

225
00:12:13,680 --> 00:12:15,120
It's really great.

226
00:12:15,120 --> 00:12:16,120
That's the whole package.

227
00:12:16,120 --> 00:12:18,940
So try it out at linode.com slash land.

228
00:12:18,940 --> 00:12:21,600
See why that's where we build all of our infrastructure now.

229
00:12:21,600 --> 00:12:27,400
Linode.com slash land and a big thanks to Linode for sponsoring Linux Action News.

230
00:12:27,400 --> 00:12:31,340
There's an exciting new mail client coming to the Linux desktop.

231
00:12:31,340 --> 00:12:34,760
One catch though, it's actually the Vivaldi web browser.

232
00:12:34,760 --> 00:12:37,960
Well, okay, exciting is one way to put it.

233
00:12:37,960 --> 00:12:42,040
Potential, I would say maybe, I did give it a go.

234
00:12:42,040 --> 00:12:47,400
The Vivaldi browser has been promising a mail client since like 2015.

235
00:12:47,400 --> 00:12:52,600
The founder came from Opera and was a big fan of their whole integrated mail client

236
00:12:52,600 --> 00:12:57,720
and they since 2015 said it would be a robust, efficient, lightweight and good looking email

237
00:12:57,720 --> 00:12:58,720
client.

238
00:12:58,720 --> 00:13:03,000
Back then they were calling it M3 and it would be integrated into Vivaldi.

239
00:13:03,000 --> 00:13:06,920
Well, we waited patiently and it has arrived, Mr. Payne.

240
00:13:06,920 --> 00:13:12,280
Yeah, the name M3 may be a tribute to the long abandoned Opera mail client known as

241
00:13:12,280 --> 00:13:15,640
M2 and this is a technical preview.

242
00:13:15,640 --> 00:13:21,760
It's not a separate standalone application, but it's built right into Vivaldi itself.

243
00:13:21,760 --> 00:13:25,080
Don't make the same mistake I did though, you can't just go download the regular version

244
00:13:25,080 --> 00:13:26,200
of Vivaldi.

245
00:13:26,200 --> 00:13:32,040
Getting it working requires downloading a specific snapshot version or higher, 2115.4

246
00:13:32,040 --> 00:13:35,120
at least at the time of this article.

247
00:13:35,120 --> 00:13:39,400
Get the browser, then you have to go to Vivaldi colon slash slash experiments, type that in

248
00:13:39,400 --> 00:13:44,740
a little magic Vivaldi URL in the URL bar, there you have a toggle to enable the new

249
00:13:44,740 --> 00:13:45,740
web client.

250
00:13:45,740 --> 00:13:51,000
That last step was the bit that got me for a little bit because I went in, so when you're

251
00:13:51,000 --> 00:13:54,540
reading on Vivaldi's website, they have a download link that just automatically gets

252
00:13:54,540 --> 00:13:58,300
placed at the bottom of your web browser, often like cookie warnings, only there it's

253
00:13:58,300 --> 00:14:02,080
download Vivaldi and I thought, well, this must be the release they're talking about.

254
00:14:02,080 --> 00:14:03,680
Yes, I did the same.

255
00:14:03,680 --> 00:14:07,320
No, no, that's the stable version, you want the snapshot, so I went and got that and then

256
00:14:07,320 --> 00:14:12,400
I turned on the Vivaldi experiments and mail and it's also an RSS reader.

257
00:14:12,400 --> 00:14:18,160
It's a feed reader too, it's not just email and it's a straight up basic IMAP pop three

258
00:14:18,160 --> 00:14:23,720
client right now, but with some serious potential like filters, specific support for being on

259
00:14:23,720 --> 00:14:28,220
mailing lists and managing some of the mail you get as a mailing list subscriber.

260
00:14:28,220 --> 00:14:34,820
It has things that are kind of table stakes for a classic IMAP email client and it looks

261
00:14:34,820 --> 00:14:35,880
all right.

262
00:14:35,880 --> 00:14:43,620
The problem is, is there a bit of a situation where Google has in an effect limited the

263
00:14:43,620 --> 00:14:50,000
amount of people that can log in using Vivaldi Mail to Google services and so not only does

264
00:14:50,000 --> 00:14:54,400
the Vivaldi Mail client itself not support Google apps with a custom domain very well,

265
00:14:54,400 --> 00:14:59,920
it just fails at auto detection on that completely, but when you plug in an at Gmail address,

266
00:14:59,920 --> 00:15:04,280
you can't log in and go through the setup because Google has blocked account sign-ins

267
00:15:04,280 --> 00:15:08,840
from that and the request has been pending from Vivaldi for like something like nine

268
00:15:08,840 --> 00:15:13,140
months and Google just hasn't addressed it and so now you get greeted with this rather

269
00:15:13,140 --> 00:15:15,000
nasty error message.

270
00:15:15,000 --> 00:15:19,120
So when you get the typical Google sign on screen, but then after you give it your password,

271
00:15:19,120 --> 00:15:22,800
after you do your two factor, you go through the whole rigamarole, you get an error message

272
00:15:22,800 --> 00:15:26,960
screen that says, sign in with Google is temporarily disabled for this app.

273
00:15:26,960 --> 00:15:31,320
This app has not been verified yet by Google in order to use Google sign-in.

274
00:15:31,320 --> 00:15:32,320
Thanks.

275
00:15:32,320 --> 00:15:35,440
I mean, that's just got to hurt any potential adoption.

276
00:15:35,440 --> 00:15:39,280
I mean, I have other accounts than Gmail accounts, but I also have some Gmail accounts I need

277
00:15:39,280 --> 00:15:40,280
to check.

278
00:15:40,280 --> 00:15:41,280
Yeah.

279
00:15:41,280 --> 00:15:42,280
I mean, Gmail is just a monster these days.

280
00:15:42,280 --> 00:15:46,200
If you're on Fastmail or another IMAP provider, it's going to work great.

281
00:15:46,200 --> 00:15:53,520
It's going to be no problem and you will get a really table stakes email client.

282
00:15:53,520 --> 00:15:58,080
There's just no way in, there's no reason for someone like me to switch right now.

283
00:15:58,080 --> 00:16:05,480
My daily email drivers are Geary, Thunderbird and web Gmail and it just doesn't beat those

284
00:16:05,480 --> 00:16:12,480
and Thunderbird as of release 78 no longer requires an extension to do GPG encryption

285
00:16:12,480 --> 00:16:14,640
and that's a massive feature for me.

286
00:16:14,640 --> 00:16:19,560
So Thunderbird is looking more attractive than ever and it's beyond just a table stakes.

287
00:16:19,560 --> 00:16:20,560
It's advanced.

288
00:16:20,560 --> 00:16:21,560
Oh yeah.

289
00:16:21,560 --> 00:16:22,560
I mean, yeah, certainly.

290
00:16:22,560 --> 00:16:30,180
And then for just easy, super simple, quick and manages a giant inbox, Geary continues

291
00:16:30,180 --> 00:16:32,480
to be a real champ for me.

292
00:16:32,480 --> 00:16:37,600
And the wonderful thing about Geary is when you configure your Google account in GNOME

293
00:16:37,600 --> 00:16:40,600
online accounts, it automatically sets Geary up.

294
00:16:40,600 --> 00:16:41,600
Just picks that up, right?

295
00:16:41,600 --> 00:16:44,840
So you just launched Geary and it's already configured and it's already downloading your

296
00:16:44,840 --> 00:16:45,840
email.

297
00:16:45,840 --> 00:16:46,840
You've never had to do a thing.

298
00:16:46,840 --> 00:16:47,840
It's so beautiful, Wes.

299
00:16:47,840 --> 00:16:48,840
It's so beautiful.

300
00:16:48,840 --> 00:16:51,040
I don't think we're supposed to have things like that on the Linux desktop.

301
00:16:51,040 --> 00:16:55,960
So then you go over to Vivaldi Mail to no fault of their own, but because of the way

302
00:16:55,960 --> 00:17:01,000
the Google fortress works, you get like the exact opposite experience where you go through

303
00:17:01,000 --> 00:17:04,760
all the rigmarole and then it completely fails and then the developers, because they have

304
00:17:04,760 --> 00:17:07,700
no choice, they're like shrug, nothing we can do, hope it changes.

305
00:17:07,700 --> 00:17:11,800
But if you use regular IMAP, you're good, which is kind of a rough thing when you're

306
00:17:11,800 --> 00:17:13,400
launching your technical preview.

307
00:17:13,400 --> 00:17:15,360
But at the same time, what are they supposed to do?

308
00:17:15,360 --> 00:17:16,360
Sit around.

309
00:17:16,360 --> 00:17:17,360
It works.

310
00:17:17,360 --> 00:17:18,360
The technical part works.

311
00:17:18,360 --> 00:17:19,360
Yeah.

312
00:17:19,360 --> 00:17:21,800
And until they ship, it probably won't put enough pressure on Google to fix it.

313
00:17:21,800 --> 00:17:24,420
But I did use the browser again for a bit.

314
00:17:24,420 --> 00:17:29,400
And if you haven't given the Vivaldi browser a go on Linux and you've been using the web

315
00:17:29,400 --> 00:17:32,240
for a few years, it's pretty fun.

316
00:17:32,240 --> 00:17:34,400
It is a power user's web browser.

317
00:17:34,400 --> 00:17:40,200
From everything from mouse gesture support to a bunch of really fun, nitty, gritty kind

318
00:17:40,200 --> 00:17:43,680
of support for things that people that have been on the web forever would love.

319
00:17:43,680 --> 00:17:47,120
But then additionally, it has nice features like notes and all of that.

320
00:17:47,120 --> 00:17:50,380
It feels like a lot to me.

321
00:17:50,380 --> 00:17:55,740
It is a complicated, packed application, but it still often remains snappy and quick.

322
00:17:55,740 --> 00:17:58,160
So it's a pleasant browsing experience.

323
00:17:58,160 --> 00:18:02,640
Also it's nice to see that they've got Linux support for both ARM32 and ARM64.

324
00:18:02,640 --> 00:18:04,200
So hey, run it over there too.

325
00:18:04,200 --> 00:18:08,800
Well actually, I think it's worth just underscoring is one of the things that has impressed me

326
00:18:08,800 --> 00:18:13,880
about Vivaldi is they have been really dedicated to supporting Linux and targeting advanced

327
00:18:13,880 --> 00:18:17,720
features in Linux and supporting GPU acceleration.

328
00:18:17,720 --> 00:18:23,480
They have released this snapshot for multiple Linux distros with multiple build ARM32 64

329
00:18:23,480 --> 00:18:24,480
bit.

330
00:18:24,480 --> 00:18:26,520
It is first class Linux support.

331
00:18:26,520 --> 00:18:29,960
And there really is space for a good mail client.

332
00:18:29,960 --> 00:18:34,280
And if the technical preview is looking this solid, if you can already say it's a table

333
00:18:34,280 --> 00:18:39,600
stakes email client, a technical preview, then what's version two going to look like?

334
00:18:39,600 --> 00:18:41,360
And what about version three?

335
00:18:41,360 --> 00:18:44,100
And it's going to get more and more compelling, no doubt about it.

336
00:18:44,100 --> 00:18:48,000
And if it's a passion of the founder, then it's likely going to get a lot of investment

337
00:18:48,000 --> 00:18:49,260
as a project.

338
00:18:49,260 --> 00:18:54,000
And so within a year or two, we may have an extremely competent mail client on Linux

339
00:18:54,000 --> 00:18:55,880
through the Vivaldi browser.

340
00:18:55,880 --> 00:19:01,300
And it harkens me back to like the Netscape communicator era where everything was bundled

341
00:19:01,300 --> 00:19:02,300
like that.

342
00:19:02,300 --> 00:19:03,300
Right.

343
00:19:03,300 --> 00:19:04,560
This is just your portal to the wider internet.

344
00:19:04,560 --> 00:19:05,560
Do you remember that?

345
00:19:05,560 --> 00:19:06,560
I mean, that's how it started.

346
00:19:06,560 --> 00:19:11,760
That's how it was for a long period of time as network or I'm sorry, Netscape communicator

347
00:19:11,760 --> 00:19:12,940
came with a feed reader.

348
00:19:12,940 --> 00:19:15,620
It came with an email client and it came with a web browser.

349
00:19:15,620 --> 00:19:18,160
And that was the communicator suite.

350
00:19:18,160 --> 00:19:22,200
And for a while, Internet Explorer was linked very closely to Outlook Express.

351
00:19:22,200 --> 00:19:24,400
They were kind of a pair.

352
00:19:24,400 --> 00:19:28,080
And then as the web browser matured, we kind of lost that model.

353
00:19:28,080 --> 00:19:33,620
And maybe some of the anti-compete stuff around Internet Explorer maybe pushed that too.

354
00:19:33,620 --> 00:19:39,060
And now here we are looking into 2021 and 2022 thinking maybe one of the best ways to

355
00:19:39,060 --> 00:19:42,120
deliver a brand new email client to Linux is through a web browser.

356
00:19:42,120 --> 00:19:45,580
Well just skip the step where you package it as a separate electron application and

357
00:19:45,580 --> 00:19:46,580
build it right in.

358
00:19:46,580 --> 00:19:51,720
I mean, it clearly is using a lot of the same features and technologies web browser.

359
00:19:51,720 --> 00:19:55,000
And the feed reader is not a table stakes feed reader.

360
00:19:55,000 --> 00:20:02,520
It is a very basic, minimal feed reader that's obviously using a lot of the same inbox tech.

361
00:20:02,520 --> 00:20:06,500
And it's not even really adequate.

362
00:20:06,500 --> 00:20:10,060
But if you have very minimal feed needs, only one or two or three RSS feeds and you only

363
00:20:10,060 --> 00:20:14,640
want to use one application to do it all, it would do that job.

364
00:20:14,640 --> 00:20:19,760
That breaking change coming to SystemD that we warned you about two episodes ago, well,

365
00:20:19,760 --> 00:20:22,860
it's been released with SystemD 247.

366
00:20:22,860 --> 00:20:27,120
This is really only going to impact you if you have custom Udev rules.

367
00:20:27,120 --> 00:20:32,920
Your distribution of choice is likely going to fix this before it ever lands on your box.

368
00:20:32,920 --> 00:20:37,060
But if you have made some customized changes to Udev, you may want to look into that.

369
00:20:37,060 --> 00:20:41,500
But with the bad in 247, there's also quite a bit of good.

370
00:20:41,500 --> 00:20:45,740
We'll link to the release notes in our show notes because there's a ton in there.

371
00:20:45,740 --> 00:20:48,980
But a couple that jumped out at us we thought would be worth talking about.

372
00:20:48,980 --> 00:20:53,600
And one of them is SystemD OOMD.

373
00:20:53,600 --> 00:20:58,660
This is a new service that's added for monitoring resource allocation.

374
00:20:58,660 --> 00:21:06,860
And OOMD, which stands for out of memory daemon, that will kill processes when memory and swap

375
00:21:06,860 --> 00:21:11,860
pressure is above defined limits where your machine starts to really feel like trash.

376
00:21:11,860 --> 00:21:14,940
Now it is an experimental feature right now, so don't worry.

377
00:21:14,940 --> 00:21:18,300
It's not going to just start killing processes on your box.

378
00:21:18,300 --> 00:21:21,100
It's not enabled unless you're in developer mode, and it's going to be quite a bit before

379
00:21:21,100 --> 00:21:22,200
everything's refined.

380
00:21:22,200 --> 00:21:25,840
But we have seen some distributions play with these, and now we see something happening

381
00:21:25,840 --> 00:21:28,080
at the SystemD level, which we expected.

382
00:21:28,080 --> 00:21:32,300
But it's nice to see it arriving, and it seems like a lot of thought was put into it.

383
00:21:32,300 --> 00:21:36,360
It's neat, too, because it's using the PSI or pressure stall information, which is like

384
00:21:36,360 --> 00:21:41,780
a new heuristic metric that Facebook got added to the kernel to try to figure out these out-of-memory

385
00:21:41,780 --> 00:21:42,780
situations.

386
00:21:42,780 --> 00:21:44,980
And look at all the fruit that that's been born, right?

387
00:21:44,980 --> 00:21:48,780
Yeah, it's also made me start watching my machine memory more, just as we've talked

388
00:21:48,780 --> 00:21:49,780
about these stories.

389
00:21:49,780 --> 00:21:52,580
I've been kind of curious, how much memory do I actually use?

390
00:21:52,580 --> 00:21:54,700
But there's a couple other nice things landing, too.

391
00:21:54,700 --> 00:21:58,220
Yeah, this is pretty small, but I thought it was a nice sort of set the mood for some

392
00:21:58,220 --> 00:22:03,580
of the work going on here, which is that SystemD has done some work to limit the runtime dependencies

393
00:22:03,580 --> 00:22:04,900
and how you can bring those in.

394
00:22:04,900 --> 00:22:10,660
So some stuff for working with QR codes or for setting up encrypted disks, those have

395
00:22:10,660 --> 00:22:13,060
all been changed to rely on DLOpen.

396
00:22:13,060 --> 00:22:17,660
And so if that's installed on the system, at runtime, SystemD will try to open that

397
00:22:17,660 --> 00:22:19,900
dependency, load the code, and use that library.

398
00:22:19,900 --> 00:22:22,260
But if not, it just fails gracefully.

399
00:22:22,260 --> 00:22:26,300
And really, this is supposed to be useful for general purpose distributions so that

400
00:22:26,300 --> 00:22:27,940
you can pull in fewer dependencies.

401
00:22:27,940 --> 00:22:31,540
Like if you're never going to use those features, before this, you still had to bring those

402
00:22:31,540 --> 00:22:35,040
in even at runtime, not just for building it.

403
00:22:35,040 --> 00:22:37,880
After this, well, if you're not going to use them, you don't ever have to install them.

404
00:22:37,880 --> 00:22:44,700
Are we starting to see a bit of modularizing coming to SystemD, where everybody kind of...

405
00:22:44,700 --> 00:22:48,660
I think the top complaint for SystemD is this giant monolith that you put on my box that's

406
00:22:48,660 --> 00:22:52,860
responsible for all these things, but this almost sounds like they're trying to break

407
00:22:52,860 --> 00:22:55,300
it up a little bit and modularize it.

408
00:22:55,300 --> 00:22:56,300
Is that the goal?

409
00:22:56,300 --> 00:22:59,900
Well, I think at least just maybe refining some of those boundaries, right?

410
00:22:59,900 --> 00:23:04,500
That you can determine a set of things that you really need for essential behavior and

411
00:23:04,500 --> 00:23:09,000
features and some things that are nice to have, maybe essential for some activities,

412
00:23:09,000 --> 00:23:11,580
but don't necessarily need to be loaded by the core.

413
00:23:11,580 --> 00:23:14,900
And this is refining those boundaries.

414
00:23:14,900 --> 00:23:16,260
Linux.ting.com.

415
00:23:16,260 --> 00:23:20,660
There has never been a better time to try Ting Mobile.

416
00:23:20,660 --> 00:23:22,560
Everything has just gotten better about Ting.

417
00:23:22,560 --> 00:23:24,940
It's the next generation of Ting Mobile.

418
00:23:24,940 --> 00:23:28,260
So if you've been on the fence, if you've been thinking it's time to upgrade your mobile

419
00:23:28,260 --> 00:23:30,080
game, we'll try them out.

420
00:23:30,080 --> 00:23:31,380
You will be impressed.

421
00:23:31,380 --> 00:23:37,820
Get talk and text for just $10 a month and then data plans starting at $15 and unlimited

422
00:23:37,820 --> 00:23:39,900
from $45 a month.

423
00:23:39,900 --> 00:23:44,160
So if you're two gigs or you need 20 gigs or whatever it is, there's now a perfect Ting

424
00:23:44,160 --> 00:23:46,140
plan for you and your family.

425
00:23:46,140 --> 00:23:47,920
And no need to worry.

426
00:23:47,920 --> 00:23:51,260
The only thing that's changed is a lower monthly phone bill.

427
00:23:51,260 --> 00:23:57,020
You still get access to Ting's award-winning customer service with nationwide LTE and 5G

428
00:23:57,020 --> 00:24:00,100
coverage, plus no contracts ever.

429
00:24:00,100 --> 00:24:02,140
And you guys know that I love that.

430
00:24:02,140 --> 00:24:06,300
And Ting Mobile customers can now choose from three different plans based on their data

431
00:24:06,300 --> 00:24:07,300
needs.

432
00:24:07,300 --> 00:24:09,480
And it's so simple to switch to Ting.

433
00:24:09,480 --> 00:24:11,460
It's such an easy process.

434
00:24:11,460 --> 00:24:13,980
And then you start saving right away.

435
00:24:13,980 --> 00:24:16,840
And pretty much any phone is going to work on Ting now.

436
00:24:16,840 --> 00:24:18,520
You just go to linux.ting.com.

437
00:24:18,520 --> 00:24:19,700
You check your current phone.

438
00:24:19,700 --> 00:24:20,700
You create an account.

439
00:24:20,700 --> 00:24:22,020
You pick a plan that's right for you.

440
00:24:22,020 --> 00:24:25,480
And when you go to linux.ting.com, you're going to get $25 to work with.

441
00:24:25,480 --> 00:24:28,900
And if everything works out and your current phone works, Ting will just send you a SIM

442
00:24:28,900 --> 00:24:29,900
card.

443
00:24:29,900 --> 00:24:33,420
You can go in in minutes, or you can look at some brand new phones, some really good

444
00:24:33,420 --> 00:24:36,060
deals on phones from Ting directly, too.

445
00:24:36,060 --> 00:24:38,980
Cutting your phone bill in half has never been easier with Ting Mobile.

446
00:24:38,980 --> 00:24:41,200
They got brand new plans, and they really rock.

447
00:24:41,200 --> 00:24:43,040
It's the next generation of Ting Mobile.

448
00:24:43,040 --> 00:24:50,300
It's here, and you should go see how much you can save and get $25 off by going to linux.ting.com.

449
00:24:50,300 --> 00:24:55,100
There has never been a better time to be a Ting customer or try out Ting.

450
00:24:55,100 --> 00:24:56,940
Thanks to Ting for sponsoring Linux Action News.

451
00:24:56,940 --> 00:25:02,160
And thanks to everybody who visits linux.ting.com.

452
00:25:02,160 --> 00:25:07,900
Just a quick note that Paragon, the authors of the original closed source NTFS Fuse driver,

453
00:25:07,900 --> 00:25:12,580
have been working on an open source read write driver for the Linux kernel.

454
00:25:12,580 --> 00:25:17,020
That's now in its 13th iteration as a patch set, and hopes are looking up that it might

455
00:25:17,020 --> 00:25:18,960
actually get merged.

456
00:25:18,960 --> 00:25:24,860
What I like about this story is it is a great demonstration of how a company can start to

457
00:25:24,860 --> 00:25:30,020
work to try to gain the trust of the kernel team and eventually reach inclusion in the

458
00:25:30,020 --> 00:25:31,020
Linux kernel.

459
00:25:31,020 --> 00:25:34,480
We don't know if that's going to happen yet, but the chances are looking pretty good because

460
00:25:34,480 --> 00:25:39,060
they've really been working on this thing, and they've also committed to long term support

461
00:25:39,060 --> 00:25:41,260
of the code base and feature improvements.

462
00:25:41,260 --> 00:25:47,800
And they already have a roadmap of features they want, which means we are going to potentially

463
00:25:47,800 --> 00:25:54,180
have a future where we have excellent read write NTFS support on Linux to the point where

464
00:25:54,180 --> 00:25:58,980
you could have slash bin and program files on the same disk.

465
00:25:58,980 --> 00:25:59,980
The same partition.

466
00:25:59,980 --> 00:26:00,980
Wow.

467
00:26:00,980 --> 00:26:01,980
All right.

468
00:26:01,980 --> 00:26:02,980
NTFS on route.

469
00:26:02,980 --> 00:26:03,980
Here we come.

470
00:26:03,980 --> 00:26:08,500
While we are talking about Microsoft, it appears they are working on a software solution that

471
00:26:08,500 --> 00:26:14,080
would allow Android app developers to package up whole cloth their Android app, ship it

472
00:26:14,080 --> 00:26:19,260
on the Windows Store, and then allow Windows 10 desktop users to run it.

473
00:26:19,260 --> 00:26:21,460
This is ringing awful familiar, Wes.

474
00:26:21,460 --> 00:26:27,180
The new initiative is called Project Latte, and it appears to be in the works right now.

475
00:26:27,180 --> 00:26:30,020
And I think it's utilizing some interesting WSL technology.

476
00:26:30,020 --> 00:26:34,640
Yeah, it's kind of fascinating because while Project Latte uses some tech invented for

477
00:26:34,640 --> 00:26:39,260
the second generation of the Windows subsystem for Linux, the Windows subsystem for Linux

478
00:26:39,260 --> 00:26:45,060
itself actually got its start in an unreleased project known as Project Astoria, which was

479
00:26:45,060 --> 00:26:49,840
aiming to bring Android applications to run on Windows 10 mobile way back in the day.

480
00:26:49,840 --> 00:26:51,900
So it's come full circle.

481
00:26:51,900 --> 00:26:52,900
It really has.

482
00:26:52,900 --> 00:26:53,900
That's funny.

483
00:26:53,900 --> 00:26:57,540
But of course, the biggest obstacle here with running Android apps would be the graphical

484
00:26:57,540 --> 00:27:01,280
elements and getting those into the Windows environment.

485
00:27:01,280 --> 00:27:06,340
But in WSL 2, Microsoft begun working on a project that's named WSL G.

486
00:27:06,340 --> 00:27:07,340
Right.

487
00:27:07,340 --> 00:27:08,340
Are you following me so far?

488
00:27:08,340 --> 00:27:09,340
WSL?

489
00:27:09,340 --> 00:27:10,340
Yeah, got it.

490
00:27:10,340 --> 00:27:15,140
It's a lot of WSL, but it stands for WSL Graphics Architecture, and it utilizes a built-in

491
00:27:15,140 --> 00:27:17,980
Wayland display server to run Linux GUI apps.

492
00:27:17,980 --> 00:27:21,900
I have a bit of audio here from one of the developers of Microsoft, Steve Provenost,

493
00:27:21,900 --> 00:27:24,100
and he discusses a little bit of how it works.

494
00:27:24,100 --> 00:27:29,500
In a nutshell, what we're doing is we're taking Westin, we're taking this RDP backend, and

495
00:27:29,500 --> 00:27:34,300
we're extending it to teach it how to basically do remote application.

496
00:27:34,300 --> 00:27:39,440
So instead of remoting the desktop, we remote individual window, and then we can take those

497
00:27:39,440 --> 00:27:42,980
window and integrate them with the rest of the Windows desktop.

498
00:27:42,980 --> 00:27:48,060
And some of the architectural changes they made to WSL in WSL 2 allow for this thing

499
00:27:48,060 --> 00:27:51,300
that they call a system distribution.

500
00:27:51,300 --> 00:27:58,140
And we're introducing this concept of the system distro, which is essentially a distro

501
00:27:58,140 --> 00:28:01,540
that we package together that has all the components we need.

502
00:28:01,540 --> 00:28:07,260
So it has Westin and X-Wayland and Pulse Audio, and it has all the dependencies that it needs,

503
00:28:07,260 --> 00:28:11,380
but it runs kind of isolated from the user distro.

504
00:28:11,380 --> 00:28:15,660
And we just project like the virus socket and environment variable, et cetera, the user

505
00:28:15,660 --> 00:28:18,820
distro needs in order to connect to it.

506
00:28:18,820 --> 00:28:22,540
It's sort of like a container, except that we don't actually use a kind of container

507
00:28:22,540 --> 00:28:24,940
like a Docker container or something like this.

508
00:28:24,940 --> 00:28:28,340
We're really running in like an isolated, like mountain bit space.

509
00:28:28,340 --> 00:28:32,300
And this is the tech that allows you to run all kinds of different distros right next

510
00:28:32,300 --> 00:28:35,300
to each other at the same time on the same box.

511
00:28:35,300 --> 00:28:39,140
And you could see how they could extend this to pretty easily run Android if they just

512
00:28:39,140 --> 00:28:42,780
get a supported kernel in there and build the right distro environment.

513
00:28:42,780 --> 00:28:43,980
Very clever.

514
00:28:43,980 --> 00:28:48,460
And this seems to be like another notch in Microsoft's unwillingness to allow Chromebooks

515
00:28:48,460 --> 00:28:49,460
to cede any ground.

516
00:28:49,460 --> 00:28:54,620
You know, if Chromebooks can run Linux apps and run Android apps, then by God, Windows

517
00:28:54,620 --> 00:28:55,620
10 will too.

518
00:28:55,620 --> 00:28:57,180
And it just seems to be this cat and mouse game.

519
00:28:57,180 --> 00:28:58,180
Yeah.

520
00:28:58,180 --> 00:29:01,460
I mean, long gone are the days where you were focused solely on native Windows apps.

521
00:29:01,460 --> 00:29:03,340
Now it's like, okay, we'll take anything.

522
00:29:03,340 --> 00:29:04,580
Just run it on Windows.

523
00:29:04,580 --> 00:29:08,380
Well, you know, we've always seen this just be a smashing success.

524
00:29:08,380 --> 00:29:09,660
These mobile apps on desktop.

525
00:29:09,660 --> 00:29:10,940
So I'm sure it'll be great.

526
00:29:10,940 --> 00:29:15,660
Well, the question is, Chris, would you rather have a virtualized Android app or an Electron

527
00:29:15,660 --> 00:29:16,660
app?

528
00:29:16,660 --> 00:29:17,900
Hmm.

529
00:29:17,900 --> 00:29:20,380
That is a that is a question for the ages, Mr. Payne.

530
00:29:20,380 --> 00:29:21,380
That's what that is.

531
00:29:21,380 --> 00:29:24,880
That's a that's a rock and a hard place right there.

532
00:29:24,880 --> 00:29:27,280
That brings us to the end of today's episode.

533
00:29:27,280 --> 00:29:32,020
Check out LinuxActionNews.com slash subscribe for all the ways to get new episodes.

534
00:29:32,020 --> 00:29:35,700
And LinuxActionNews.com slash contact for all the ways to get in touch.

535
00:29:35,700 --> 00:29:40,860
And if you haven't yet upgraded the ultimate J.B. experience and get the all shows feed.

536
00:29:40,860 --> 00:29:45,640
We'll be back next Monday with our weekly take on the latest Linux and open source news.

537
00:29:45,640 --> 00:29:46,640
Thanks for joining us.

538
00:29:46,640 --> 00:30:05,780
We'll see you next week.


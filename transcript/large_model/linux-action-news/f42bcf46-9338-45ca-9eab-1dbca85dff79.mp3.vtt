WEBVTT

00:00.000 --> 00:15.880
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

00:15.880 --> 00:20.680
This is episode 35, recorded on January 7th, 2018.

00:20.680 --> 00:21.680
I'm Chris.

00:21.680 --> 00:22.680
And I'm Joe.

00:22.680 --> 00:23.680
Hello, Joe.

00:23.680 --> 00:24.840
Happy 2018.

00:24.840 --> 00:28.440
Let's kick off our first episode of the new year with some positive news.

00:28.440 --> 00:31.200
Yeah, UbiPorts are still going strong.

00:31.200 --> 00:36.260
They released during the holiday break OTA 3 for quite a lot of their devices.

00:36.260 --> 00:42.320
And even more exciting, they are working on Android support using Andbox.

00:42.320 --> 00:46.080
And this is something that I'm really happy to see.

00:46.080 --> 00:52.180
It's I think the major thing that Canonical got wrong with Ubuntu Touch was not working

00:52.180 --> 00:56.440
towards getting Android apps working and being quite stubborn about it and saying, no, we're

00:56.440 --> 00:58.240
a different platform.

00:58.240 --> 01:01.560
And there are a lot of philosophical reasons why they chose to do that.

01:01.560 --> 01:04.400
And I suppose there are technological arguments as well.

01:04.400 --> 01:07.040
Andbox wasn't as well developed back then.

01:07.040 --> 01:08.500
But enough of that.

01:08.500 --> 01:11.000
Looking forward, we're going to get Android apps on Ubuntu Touch.

01:11.000 --> 01:15.840
And suddenly, it's looking like a much better prospect to me in terms of something that

01:15.840 --> 01:18.280
I could actually use as a daily driver.

01:18.280 --> 01:24.380
Now in 2018, it seems obvious that you have to have solid Android app support.

01:24.380 --> 01:28.960
And this looks really good because it's not your old kind of Android app support.

01:28.960 --> 01:34.200
It's the new container version of Android app support where things run much faster.

01:34.200 --> 01:37.360
No longer do you have to emulate the entire hardware stack.

01:37.360 --> 01:39.280
So this is a new version.

01:39.280 --> 01:40.280
And it's a pretty cool project.

01:40.280 --> 01:42.600
So I'm really glad to see this land.

01:42.600 --> 01:44.140
This is also a general maintenance update.

01:44.140 --> 01:47.200
It's not just about early days of Android support.

01:47.200 --> 01:51.420
The updates also changed things over to using DuckDuckGo for search.

01:51.420 --> 01:53.980
They removed the Ubuntu store from the app scope.

01:53.980 --> 01:59.960
There's a lot of other nice little tidying changes that just keep the thing moving.

01:59.960 --> 02:03.460
And keeping it moving is really their best option right now.

02:03.460 --> 02:09.840
It's based on Ubuntu 15.10, which as you probably know, because of math, is no longer supported.

02:09.840 --> 02:15.000
So they're really doing tidying, winter cleaning, and getting things ready to move the entire

02:15.000 --> 02:18.880
project forward to a more sustainable version of their Ubuntu base.

02:18.880 --> 02:24.360
Yeah, this Anbox stuff and also Snaps that they're working on, they are both only going

02:24.360 --> 02:30.480
to be available in the 16.04 version of it, which is getting there.

02:30.480 --> 02:31.960
It's still pretty unstable.

02:31.960 --> 02:38.680
I've tried 16.04 and a Nexus 5 and it's not usable yet, but they don't claim that it is.

02:38.680 --> 02:41.200
And this is all very much work in progress.

02:41.200 --> 02:46.520
But as you say, the 15.04 version, this latest OTA of theirs, that is solid.

02:46.520 --> 02:48.320
It is working well.

02:48.320 --> 02:54.360
But it still has the problems that it had before for me.

02:54.360 --> 02:56.320
I'm much more positive about it now.

02:56.320 --> 03:01.440
It's a community project and it's not being sold as this consumer-ready operating system

03:01.440 --> 03:03.440
because they don't claim that, do they?

03:03.440 --> 03:09.500
They claim that it's still for developers, enthusiasts, and that's kind of how I've always

03:09.500 --> 03:10.500
seen it.

03:10.500 --> 03:11.500
I agree.

03:11.500 --> 03:12.500
And that's the sweet spot.

03:12.500 --> 03:17.620
And those of us who have things like the Nexus 5 or the Fairphone 2 or some of the BQ devices

03:17.620 --> 03:21.680
or even a Nexus 4, we can inject new life into these devices.

03:21.680 --> 03:26.760
My Nexus 5 is a great device and it's sort of a shame that Android has left it behind.

03:26.760 --> 03:32.880
And I love, love, love that projects like this give me something to play around with

03:32.880 --> 03:37.580
this old device that's now super easy to mod, it's super easy to get control of, I can find

03:37.580 --> 03:43.120
all kinds of extra parts for, I can buy them on eBay, the entire Nexus 5 for really cheap.

03:43.120 --> 03:48.200
It's a great playground device and if UbiPorts didn't do much more than just give new life

03:48.200 --> 03:53.920
to this phone, I'd be pretty happy just as a geek and maybe there's a market there.

03:53.920 --> 03:59.600
Maybe people like me represent a large enough market now that a community project can continue

03:59.600 --> 04:00.600
on.

04:00.600 --> 04:04.700
Yeah, don't forget the OnePlus One, of course, which was a really popular phone at the time.

04:04.700 --> 04:09.920
I've now moved on to a 3T, but I've still got my old OnePlus One and that is a perfect

04:09.920 --> 04:11.000
device to use with it.

04:11.000 --> 04:14.940
It's got three gigabytes of RAM, it's got a really powerful processor and there's no

04:14.940 --> 04:18.080
reason why it won't be able to run this and box stuff.

04:18.080 --> 04:22.400
And that I think is probably where I'm going to be testing it also on the Nexus 5 that

04:22.400 --> 04:23.400
I've got.

04:23.400 --> 04:25.000
But yeah, I'm really looking forward to this.

04:25.000 --> 04:30.520
Now just a quick note, as I wax on poetically about getting life into old devices, Project

04:30.520 --> 04:36.500
Andbox, which is the Android in a box project, doesn't necessarily work on all of the older

04:36.500 --> 04:41.480
devices like some of the BQ devices that were the lower-end BQ devices that supported Ubuntu

04:41.480 --> 04:42.480
Touch.

04:42.480 --> 04:45.480
You might not actually be able to run the Project Andbox stuff, which gives you Android

04:45.480 --> 04:46.480
apps.

04:46.480 --> 04:47.480
So keep that in mind.

04:47.480 --> 04:50.900
There is sort of a cutoff of usefulness if you want to be able to run Android apps on

04:50.900 --> 04:52.240
future Ubuntu Touch builds.

04:52.240 --> 04:56.000
Yeah, if you look at their website, anything that is a legacy device is not going to run

04:56.000 --> 04:58.520
this interesting stuff, unfortunately.

04:58.520 --> 05:02.000
Now this is interesting, giving life to your old routers.

05:02.000 --> 05:07.120
OpenWRT, it's a brand name at this point, and we have good news this week, the name

05:07.120 --> 05:09.520
itself is not going away.

05:09.520 --> 05:15.040
But there is a big merger coming between OpenWRT and LEDE.

05:15.040 --> 05:16.600
I think you mean routers.

05:16.600 --> 05:22.280
And I've always said it as lead, I don't know, it all encapsulates LEDE, but it doesn't really

05:22.280 --> 05:27.240
matter anymore because that is going away, that branding, and it's going back to OpenWRT,

05:27.240 --> 05:28.240
which is good.

05:28.240 --> 05:31.540
They've been talking about doing this since I think June of last year.

05:31.540 --> 05:36.920
So it's taken a long time to get all the details worked out, but now finally this is happening

05:36.920 --> 05:42.160
and they can all concentrate on code and making it work well instead of all this politics

05:42.160 --> 05:47.000
stuff that really just distracted from what they should have been doing, I think.

05:47.000 --> 05:52.640
Yeah, now if you used OpenWRT or LEDE, go check the link in the show notes so you get

05:52.640 --> 05:56.640
the details on how long you can expect your version to be supported.

05:56.640 --> 05:58.960
But here is the high level takeaway.

05:58.960 --> 06:04.560
They are merging projects, the name OpenWRT will remain sort of the forward facing project

06:04.560 --> 06:08.480
name, but the code base will really be based on LEDE.

06:08.480 --> 06:12.960
It's sort of a pretty good solid base and they list a whole bunch of reasons on the

06:12.960 --> 06:15.100
wiki why they're going to rebase on LEDE.

06:15.100 --> 06:18.840
So the name will be OpenWRT, but under the hood, it's LEDE.

06:18.840 --> 06:24.960
Yeah, it seems that when that split happened, most of the top developers went over to LEDE,

06:24.960 --> 06:25.960
didn't they?

06:25.960 --> 06:29.600
So it's not a surprise that that code base is in a better shape than the original OpenWRT

06:29.600 --> 06:30.600
one.

06:30.600 --> 06:31.600
Yeah, I agree.

06:31.600 --> 06:35.080
And I appreciate that they're sticking though with the OpenWRT name because routers are

06:35.080 --> 06:40.820
in that fringe where some people who are not necessarily followers of all of this stuff

06:40.820 --> 06:45.240
kind of get interested in this market and they want to reflash their router to make

06:45.240 --> 06:51.200
it more secure, to add functionality, whatever reason, and they go for things that they know

06:51.200 --> 06:56.340
the name of like DDWRT or OpenWRT or Tomato Router.

06:56.340 --> 06:59.980
There's just these names that have sort of populated out there and that's what they go

06:59.980 --> 07:01.120
search for.

07:01.120 --> 07:06.020
And so if you introduce another name at this point, the average consumer is never going

07:06.020 --> 07:07.020
to find you.

07:07.020 --> 07:12.280
And this sort of humble recognition on the open source project standpoint to say this

07:12.280 --> 07:17.300
is the brand that the average consumer recognizes and we're going to stick with it, even though

07:17.300 --> 07:22.360
the code base is LEED, I think it shows some cunning and cleverness.

07:22.360 --> 07:23.360
Well, yeah.

07:23.360 --> 07:25.320
Look at LibreOffice, for example.

07:25.320 --> 07:30.280
How many people, normals, not Linux geeks, install OpenOffice still?

07:30.280 --> 07:31.280
Oh, yeah.

07:31.280 --> 07:36.080
I know a ton of people because that brand is so strong and you can't just expect people

07:36.080 --> 07:38.160
to forget a brand that's quite well known.

07:38.160 --> 07:43.400
And as you say, no one really, well, a few people know about LEED, but OpenWRT, everyone

07:43.400 --> 07:44.400
knows.

07:44.400 --> 07:46.720
So yeah, I think it was the right decision, definitely.

07:46.720 --> 07:50.960
Now something not many of us know about, but we're learning more this week is Google's

07:50.960 --> 07:53.000
experimental Fuchsia OS.

07:53.000 --> 07:57.200
Yeah, the potential replacement for Android at some point.

07:57.200 --> 08:03.600
And it's not Linux based, there's no GPL inside, it's all nice and permissively licensed.

08:03.600 --> 08:07.040
It's very early days still, but there's a device that you can actually run it on if

08:07.040 --> 08:09.360
you've got $1,000 to drop on a Pixelbook.

08:09.360 --> 08:14.440
Yeah, it's Google's Pixelbook and you say it's an Android replacement, but they've actually

08:14.440 --> 08:20.040
been minimizing the ARM work and the Android UI work and they've been doubling down on

08:20.040 --> 08:23.200
supporting the latest version of the Pixel.

08:23.200 --> 08:25.120
So make of that as you will.

08:25.120 --> 08:26.960
I don't know what to make of it myself.

08:26.960 --> 08:32.020
Google's third operating system, which comes after Chrome and Android, documents describe

08:32.020 --> 08:36.080
it as targeting modern phones and modern personal computers.

08:36.080 --> 08:39.280
The OS, as Joe said, doesn't use a Linux kernel at all.

08:39.280 --> 08:44.700
It's got its own Google developed microkernel, which is called Magenta, and then they have

08:44.700 --> 08:48.920
different versions and the current version is called Zircon right now.

08:48.920 --> 08:54.800
And it uses Vulkan for the graphics layer and it uses Flutter for the SDK.

08:54.800 --> 08:59.440
And they say that if you write an app for Fuchsia OS, it'll run on Android or iOS potentially

08:59.440 --> 09:00.440
as well.

09:00.440 --> 09:03.200
It sounds an awful lot like Convergence to me.

09:03.200 --> 09:10.120
So right now they're supporting the Pixelbook as well as the Acer Switch Alpha 12 and old

09:10.120 --> 09:13.000
NUCs from 2015.

09:13.000 --> 09:17.960
And if you have one of those devices and you have a USB device that you're willing to quote

09:17.960 --> 09:21.440
unquote sacrifice, you can try out Fuchsia.

09:21.440 --> 09:26.640
And apparently when you flash Fuchsia installer to a USB thumb drive, it damages in a way

09:26.640 --> 09:29.320
that is irrecoverable.

09:29.320 --> 09:33.000
Really I was reading about that and I think it might just be a miscommunication because

09:33.000 --> 09:37.320
as far as I can see, it just DDs the image over it and destroys the partitioned layout

09:37.320 --> 09:38.320
and everything.

09:38.320 --> 09:39.320
That would make sense, right?

09:39.320 --> 09:42.400
But in Google's documentation, it says it's destructive to the USB device.

09:42.400 --> 09:45.000
So you have to take that warning.

09:45.000 --> 09:49.440
I might have to try this with a really cheap old USB device and see if I can format it

09:49.440 --> 09:53.520
again afterwards because that seems very odd to me that it would literally destroy it.

09:53.520 --> 09:54.520
All right.

09:54.520 --> 09:57.860
Well, let's talk about the thing that's on my mind is that Fuchsia's install process

09:57.860 --> 10:01.260
doesn't support any ARM based targets right now.

10:01.260 --> 10:06.320
So this whole thing about smartphones and tablets seems like a line to me because what

10:06.320 --> 10:10.240
it works on right now is x86 devices like old NUCs.

10:10.240 --> 10:12.460
Isn't that just easier to develop for?

10:12.460 --> 10:17.080
Because if you're going to develop on an x86 device and compile everything, it just makes

10:17.080 --> 10:22.000
it that bit easier and quicker to do while you're in this early development stage and

10:22.000 --> 10:25.400
then they can compile it for ARM later.

10:25.400 --> 10:26.400
I don't know.

10:26.400 --> 10:33.360
I mean, it is a shift in focus, but surely they can't be looking to x86 devices when

10:33.360 --> 10:35.640
ARM is just everywhere.

10:35.640 --> 10:40.700
We'll take this for what it is, but they originally were packaging the system UI as an APK to

10:40.700 --> 10:44.760
run on top of an Android phone for people to try out and they just kind of bailed on

10:44.760 --> 10:45.760
that.

10:45.760 --> 10:48.520
And now they're just working on the x86 like full desktop version of it.

10:48.520 --> 10:52.640
Well, it's always felt like a hedge, hasn't it, from Google because they've got Chrome

10:52.640 --> 10:56.160
OS that is really well developed at this stage.

10:56.160 --> 10:58.680
It is really well developed.

10:58.680 --> 11:02.720
It's just a hedge against the GPL, isn't it, really?

11:02.720 --> 11:06.840
That is what some people have suggested, is that this is Google's hedge against the GPL,

11:06.840 --> 11:10.880
specifically the GPL 3, and that this could just end up being a Chrome runtime.

11:10.880 --> 11:15.480
But there's not much danger of the kernel being re-licensed as GPL v3, is there?

11:15.480 --> 11:16.480
Not from what I've seen.

11:16.480 --> 11:19.800
It seems especially now with this new signing statement that we covered a few weeks ago,

11:19.800 --> 11:22.180
the GPL 2 is fairly locked in for the Linux kernel.

11:22.180 --> 11:24.600
That's why I don't really buy that it's GPL hedging.

11:24.600 --> 11:26.240
It feels like something else is happening.

11:26.240 --> 11:29.880
Well, is it not just that Google have got plenty of R&D money and they have to throw

11:29.880 --> 11:30.880
it at something?

11:30.880 --> 11:31.880
Who knows?

11:31.880 --> 11:33.120
It's all speculation, Joe.

11:33.120 --> 11:34.120
Here's mine.

11:34.120 --> 11:35.240
It's an Android killer.

11:35.240 --> 11:40.160
It's a project that was born to address all of the fundamental performance issues with

11:40.160 --> 11:43.240
Android that people like me see constantly.

11:43.240 --> 11:46.000
And they said, well, if we were going to fix all of this stuff, what kind of OS would we

11:46.000 --> 11:47.000
build?

11:47.000 --> 11:48.000
And it's this.

11:48.000 --> 11:52.840
In my estimation, Fuchsia OS is designed to sort of solve all of the Android problems,

11:52.840 --> 11:54.320
and they're going to see where it can go.

11:54.320 --> 11:55.320
But who knows?

11:55.320 --> 11:56.880
It's all rampant speculation.

11:56.880 --> 12:02.400
I think that sounds reasonable, and I think that a happy byproduct of how they're developing

12:02.400 --> 12:09.720
this is that it will probably be able to replace Chrome OS as well.

12:09.720 --> 12:11.000
Last.ting.com.

12:11.000 --> 12:12.420
It's a smarter way to do mobile.

12:12.420 --> 12:16.360
If you just want to do something simple with your mobile plan, Ting's the way to go.

12:16.360 --> 12:18.720
If you want to do something a little more complicated, well, stay tuned.

12:18.720 --> 12:20.220
I actually have advice for you, too.

12:20.220 --> 12:25.600
The average Ting bill for one device is about $23 a month per phone.

12:25.600 --> 12:28.840
It's $6 a month, and then your usage on top of that.

12:28.840 --> 12:32.440
Whatever Uncle Sam takes in your area, there's that to factor in, too, but it's $6 for the

12:32.440 --> 12:33.440
line.

12:33.440 --> 12:38.800
Now, $23 is like you, just you, which is lovely, but what if you have a family?

12:38.800 --> 12:39.800
What if you have a business?

12:39.800 --> 12:42.240
It's $6 per line after that.

12:42.240 --> 12:45.440
$6 for the line, and then just your usage on top of that.

12:45.440 --> 12:46.440
Last.ting.com.

12:46.440 --> 12:53.760
You can go there and get $25 off a device or $25 in service credits if you bring a Ting-compatible

12:53.760 --> 12:54.760
device.

12:54.760 --> 12:59.680
Now, they have CDMA and GSM networks, so go check their BYOD page.

12:59.680 --> 13:04.280
You may already be set, because then you get $25 in service credit, like I said, it's $23

13:04.280 --> 13:08.720
on average for a line, so you just paid for your first month.

13:08.720 --> 13:10.800
Oh, last.ting.com.

13:10.800 --> 13:15.440
Pay for what you use, nationwide coverage, no contracts, nor the termination fees.

13:15.440 --> 13:17.000
Now, here's another idea for Ting.

13:17.000 --> 13:21.240
If you have a security system or a monitoring system or something that's using just a little

13:21.240 --> 13:25.640
bit of data here and there, you can go get a $9 SIM card from Ting.

13:25.640 --> 13:26.640
Last.ting.com.

13:26.640 --> 13:32.580
$9 SIM card and then $25 in service credits means that you might be able to monitor something

13:32.580 --> 13:37.980
or check in on a camera feed or remotely connect to a system for months without having to pay

13:37.980 --> 13:39.360
anything out of pocket.

13:39.360 --> 13:40.960
That's how my buddy Chase does it.

13:40.960 --> 13:41.960
Last.ting.com.

13:41.960 --> 13:47.680
Okay, so there's no way we can ignore Meltdown and Spectre.

13:47.680 --> 13:49.360
We have to talk about this.

13:49.360 --> 13:53.920
Two major bugs, well, it's actually three major bugs with CPUs that affect all operating

13:53.920 --> 13:59.600
systems and pretty much all devices, apart from the Raspberry Pi, which is nice.

13:59.600 --> 14:00.980
Where do we start with it?

14:00.980 --> 14:06.440
I think there's no point talking about Windows and Mac OS and stuff, but with Linux, it's

14:06.440 --> 14:08.400
pretty big news for us, isn't it?

14:08.400 --> 14:13.320
Yeah, this is probably one of the biggest stories of 2018 right off the bat.

14:13.320 --> 14:14.320
So let's break it down.

14:14.320 --> 14:16.560
You've got Meltdown and you've got Spectre.

14:16.560 --> 14:21.520
Meltdown breaks the most fundamental isolation between user applications and the operating

14:21.520 --> 14:22.520
system.

14:22.520 --> 14:27.600
So the Meltdown attack allows a program to access memory and thus also things like your

14:27.600 --> 14:32.540
keys and your passwords and other elements of the programs you might be running and the

14:32.540 --> 14:33.600
operating system.

14:33.600 --> 14:34.600
That's Meltdown.

14:34.600 --> 14:35.600
And then there's Spectre.

14:35.600 --> 14:41.040
Now Spectre is the one we're going to be hearing a lot more throughout 2018, I suspect.

14:41.040 --> 14:44.480
Spectre breaks the isolation between different applications.

14:44.480 --> 14:50.560
It allows an attacker to trick otherwise error-free, bug-free programs, which may have followed

14:50.560 --> 14:53.920
best practices, into leaking their secrets.

14:53.920 --> 14:58.680
The safety checks of some of those best practices actually even make the situation worse.

14:58.680 --> 15:04.440
And it could come down to a fundamental design flaw that future processors will have to correct.

15:04.440 --> 15:07.700
Now Meltdown is being patched actively.

15:07.700 --> 15:13.880
Spectre doesn't necessarily have an upstream patch as of the recording of this program.

15:13.880 --> 15:18.980
There are different distributions that are shipping potential fixes to Spectre, but none

15:18.980 --> 15:22.820
of those have been upgraded into Linus's tree.

15:22.820 --> 15:26.900
And it's not even clear if those patches are going to work at this stage.

15:26.900 --> 15:31.280
With Meltdown, that seems quite clear that it is going to work.

15:31.280 --> 15:35.640
You're going to have a performance hit with certain workloads, especially data center

15:35.640 --> 15:38.440
workloads, not necessarily on the desktop.

15:38.440 --> 15:40.920
But with Spectre, we just don't know.

15:40.920 --> 15:44.120
It's not really patchable, is it?

15:44.120 --> 15:47.400
It's mitigation rather than full patches.

15:47.400 --> 15:53.560
And I suppose eventually there'll be workarounds to make us immune to it to some extent.

15:53.560 --> 15:59.480
But as you say, this is a fundamental problem with processors and how they work.

15:59.480 --> 16:05.320
The things that have made these processors so fast in the first place are being exploited.

16:05.320 --> 16:08.200
And it's fundamental, there's no other word for it.

16:08.200 --> 16:12.160
Briefly, one of the things that I find really fascinating about this story, and I'll go

16:12.160 --> 16:18.600
into a lot more detail in a future episode of TechSnap, but the core issues were discovered

16:18.600 --> 16:25.320
independently by two different Project Zero researchers who were not communicating initially.

16:25.320 --> 16:31.900
And Spectre and Meltdown were discovered independently, so they were sort of converging in on these

16:31.900 --> 16:32.900
different vulnerabilities.

16:32.900 --> 16:36.880
And that sort of adds to the confusion because they're similar, they were discovered around

16:36.880 --> 16:41.740
the same time, both of which were discovered by Project Zero engineers.

16:41.740 --> 16:49.120
But the core issues have been known to Intel and Project Zero since June of 2017.

16:49.120 --> 16:53.840
Now Google immediately started working with Intel, and Intel started researching the problem,

16:53.840 --> 16:55.800
trying to determine what the issue was.

16:55.800 --> 17:00.420
But what we know at this point is that some companies weren't brought into loop until

17:00.420 --> 17:03.920
Christmas Day, and some a little bit before that.

17:03.920 --> 17:10.400
And that initial disclosure wasn't planned until January 9th, which is several days from

17:10.400 --> 17:11.400
now.

17:11.400 --> 17:17.560
And so some companies, like Canonical, were caught off guard with the early public disclosures.

17:17.560 --> 17:20.360
But to be fair, that is not going to be the case for much longer.

17:20.360 --> 17:24.120
They said Tuesday the 9th is when they were planning to, they're going to try and do it

17:24.120 --> 17:25.120
before then.

17:25.120 --> 17:27.060
But if not, they'll definitely hit that deadline.

17:27.060 --> 17:30.280
So as you're listening to this, it's probably only one day away.

17:30.280 --> 17:31.560
But it's still not good.

17:31.560 --> 17:36.160
You'd hope that these companies would all work together a little more closely and a

17:36.160 --> 17:37.560
little earlier than this.

17:37.560 --> 17:42.000
I don't know why Canonical was left out of the loop for so long, because it seems Red

17:42.000 --> 17:43.000
Hat weren't, were they?

17:43.000 --> 17:46.100
Because their patches are all ready to go.

17:46.100 --> 17:48.720
If you're running a distro kernel, you might be covered already.

17:48.720 --> 17:51.680
But Greg Kh says in a post recently, check it for yourself.

17:51.680 --> 17:55.440
He's a little skeptical of some of these distro-conceived solutions.

17:55.440 --> 17:59.800
And he notes, at least for Spectre, nothing's actually been integrated upstream.

17:59.800 --> 18:03.600
But I want to go back in time a little bit to November 15th.

18:03.600 --> 18:05.560
And I want to talk about Kaiser.

18:05.560 --> 18:13.680
Now Kaiser was a set of patches that was being presented as early as November to solve side

18:13.680 --> 18:17.920
channel attacks with Intel devices and other types of devices.

18:17.920 --> 18:22.000
All told, the discussion around Kaiser was some of the early signs back in November that

18:22.000 --> 18:24.360
maybe something big was coming.

18:24.360 --> 18:27.860
Because everybody was all of a sudden on board, Linus and Greg.

18:27.860 --> 18:32.520
This whole set of patches that was going to reduce performance was being fast-tracked

18:32.520 --> 18:34.040
by the kernel developers.

18:34.040 --> 18:38.300
And nobody really talked about why or gave public time frames.

18:38.300 --> 18:40.540
But everybody was on board with Kaiser.

18:40.540 --> 18:45.880
And you can see some discussions at LWN.net on November 15th about some suggestions for

18:45.880 --> 18:51.580
hiding the kernel from user space, which were really the early groundwork for fixing this

18:51.580 --> 18:52.580
big problem.

18:52.580 --> 18:54.280
So it's been in development for months now.

18:54.280 --> 18:57.760
Yeah, and they redacted some comments from the code and everything, didn't they?

18:57.760 --> 19:01.840
Which was very unusual because it's usually so openly developed.

19:01.840 --> 19:06.840
Not only that, but there was also Linux kernel mailing lists post from an AMD developer that

19:06.840 --> 19:11.860
was talking about some vulnerability that AMD wasn't quite as susceptible to, that implied

19:11.860 --> 19:13.480
Intel was.

19:13.480 --> 19:17.600
And if you connected the dots, you could start to realize there's probably something big

19:17.600 --> 19:18.600
here.

19:18.600 --> 19:20.060
And that's exactly what the register did.

19:20.060 --> 19:23.920
And they ran with the story that said, hey, there could be a huge vulnerability here.

19:23.920 --> 19:26.980
And that pushed everybody's timetables up.

19:26.980 --> 19:29.960
Now I've seen some performance charts.

19:29.960 --> 19:38.120
And it really is obvious that once these patches for Meltdown are put in place, you get this

19:38.120 --> 19:42.200
immediate hit in performance for a lot of workloads.

19:42.200 --> 19:50.240
And you're talking about maybe 5%, maybe 10%, maybe as much as 30% extra compute power needed,

19:50.240 --> 19:54.800
which if you're running a lot of applications, if you're running a big company, that is a

19:54.800 --> 19:58.040
lot more money you're going to have to spend because of this.

19:58.040 --> 20:00.000
And it's all Intel's fault, isn't it?

20:00.000 --> 20:03.680
And there's talk of class action lawsuits.

20:03.680 --> 20:06.960
Could this be really serious for Intel, I wonder?

20:06.960 --> 20:10.960
It really gets down into the nuance because, of course, the kernel developers are making

20:10.960 --> 20:14.760
some assumptions that the processor will provide them for certain protections.

20:14.760 --> 20:17.920
So they take certain shortcuts for performance benefits.

20:17.920 --> 20:20.660
So where does the fault really lie?

20:20.660 --> 20:25.320
If you depend on the processor all the time, then you could say, well, that's a bad assumption

20:25.320 --> 20:26.400
to make.

20:26.400 --> 20:30.220
But of course, you could say that the processor should be designed fundamentally to protect

20:30.220 --> 20:33.160
against these sort of side channel attacks.

20:33.160 --> 20:36.800
I don't know if the lawsuits are going to get very far because they could get really

20:36.800 --> 20:39.260
marred down in semantics.

20:39.260 --> 20:41.200
It's early days right now.

20:41.200 --> 20:45.140
But if you follow Twitter and you just do a few searches on Meltdown, you'll start to

20:45.140 --> 20:50.280
see people that are tweeting about performance dropping through the floor, screenshots for

20:50.280 --> 20:54.920
login servers and database servers that are just totally tanking.

20:54.920 --> 20:58.000
It appears to be sort of a conflux of issues.

20:58.000 --> 21:04.160
If your workload stresses the network subsystem and the disk subsystem, then you really notice

21:04.160 --> 21:05.160
it.

21:05.160 --> 21:10.400
If you really need to nail the processor or nail the GPU, you don't really seem to have

21:10.400 --> 21:11.960
a big performance impact.

21:11.960 --> 21:16.040
But when it's multiple subsystems, that's really when things come to their knees.

21:16.040 --> 21:20.880
And I've been involved in some AWS customer support forums where essentially people are

21:20.880 --> 21:26.080
saying I have to completely upgrade to a whole new category of AWS hardware now.

21:26.080 --> 21:30.040
It's going to cost me way more money than I projected for 2018.

21:30.040 --> 21:31.440
And they're pretty upset about it.

21:31.440 --> 21:33.200
And rightfully so.

21:33.200 --> 21:39.120
If you suddenly have to do all your maths again for your projected revenue and spending

21:39.120 --> 21:45.560
and everything because of this, it's going to cost companies millions of dollars potentially.

21:45.560 --> 21:47.320
And it's all Intel's fault.

21:47.320 --> 21:52.160
You say there's nuance there and maybe the kernel people should have known about this.

21:52.160 --> 21:55.160
And yeah, I suppose there is that argument to be made.

21:55.160 --> 22:00.000
But for me, the hardware is at fault here.

22:00.000 --> 22:03.320
And the blame lies with Intel as far as I'm concerned.

22:03.320 --> 22:06.760
Well I'm going to dig more into speculative execution and all of that kind of stuff in

22:06.760 --> 22:08.200
the TechSnap program.

22:08.200 --> 22:10.480
And I suggest people stay tuned for that.

22:10.480 --> 22:16.040
But I agree, a lot of this is on Intel, especially the meltdown aspect of it, which is predominantly

22:16.040 --> 22:17.120
on Intel.

22:17.120 --> 22:21.280
But there are ARM and AMD systems that are potentially vulnerable to anything that does

22:21.280 --> 22:22.280
speculative execution.

22:22.280 --> 22:23.280
Yeah, that's true.

22:23.280 --> 22:25.820
So I suppose it isn't completely Intel's fault.

22:25.820 --> 22:33.000
It's just the industry's fault, I suppose, for trying to push on too fast and not stopping

22:33.000 --> 22:36.200
to think about the potential consequences of what they're doing.

22:36.200 --> 22:39.880
Well speaking of not fully thinking through of the consequences, Evan's war against the

22:39.880 --> 22:42.600
Software Freedom Conservancy just got a bit dirtier.

22:42.600 --> 22:48.320
Yeah, at first it seemed like the law center was offering an olive branch to Conservancy

22:48.320 --> 22:51.160
by saying that they were going to kind of drop the case.

22:51.160 --> 22:55.920
But they were going to do that by offering them a license to use the trademark by pretty

22:55.920 --> 23:00.040
much saying, it is our trademark, you are in the wrong, but we'll let you get away with

23:00.040 --> 23:01.040
it.

23:01.040 --> 23:03.240
And that didn't go down very well, did it?

23:03.240 --> 23:06.480
It really makes this whole thing way more complicated.

23:06.480 --> 23:12.320
I think a lot of us in the bleachers were hoping for something simple, a quick dismissal.

23:12.320 --> 23:16.240
And now with this fraud claim, that's just simply not going to happen.

23:16.240 --> 23:17.560
And I knew this was going to happen.

23:17.560 --> 23:19.800
I knew that Evan has been around for a while.

23:19.800 --> 23:22.720
He wouldn't just simply roll over.

23:22.720 --> 23:26.920
We knew it was going to be harder than this, but boy, at least myself and I think a lot

23:26.920 --> 23:29.960
of others were hoping just for a quick, easy dismissal.

23:29.960 --> 23:30.960
I'll say this.

23:30.960 --> 23:35.360
One thing that I find interesting in this whole spat is the Software Freedom Conservancy

23:35.360 --> 23:37.920
is much more verbose about what's going on.

23:37.920 --> 23:39.920
They're pretty quick with the blog post.

23:39.920 --> 23:46.240
They're pretty clear in their language and in linking to legal documents what's going

23:46.240 --> 23:47.660
on.

23:47.660 --> 23:55.100
It does make the Software Freedom Law Center feel like the aggressor and the Conservancy

23:55.100 --> 23:56.160
as the victim.

23:56.160 --> 23:59.160
And they're clearly just trying to document what's happening to them.

23:59.160 --> 24:03.640
Well, in the initial blog posts, Bradley, I think, said that they are very committed

24:03.640 --> 24:04.960
to transparency.

24:04.960 --> 24:09.700
And it is good to see that at least on one side, we're getting that transparency here.

24:09.700 --> 24:13.080
Let's take the last few moments of the show to talk about something that has been particularly

24:13.080 --> 24:16.080
difficult for Joe and I in the last couple of weeks.

24:16.080 --> 24:20.760
And that's the crazy ass price of Bitcoin in regards to our prediction recently.

24:20.760 --> 24:22.080
Yeah.

24:22.080 --> 24:28.280
So we recorded that prediction show quite a long time before it was aired.

24:28.280 --> 24:32.080
And Bitcoin was riding pretty high at that point.

24:32.080 --> 24:37.480
And then immediately after we recorded it, pretty much, it took a tumble down and down

24:37.480 --> 24:38.520
and down.

24:38.520 --> 24:43.660
And I had predicted that it wouldn't drop below 15,000 this year.

24:43.660 --> 24:46.840
And at the stroke of midnight, it was around 13,000.

24:46.840 --> 24:48.360
So I'm immediately wrong.

24:48.360 --> 24:52.680
To be fair, we did say that it's volatile and that it could go either way.

24:52.680 --> 24:54.040
But we're wrong.

24:54.040 --> 24:58.020
Another interesting thing when I listened back, you had said that you thought the high

24:58.020 --> 24:59.360
would be 100,000.

24:59.360 --> 25:03.360
And then you thought that the price on December 1 would be 103,000.

25:03.360 --> 25:06.640
So that kind of didn't make sense either.

25:06.640 --> 25:10.240
But this is the thing with Bitcoin, you can never really predict it, can you?

25:10.240 --> 25:18.280
And as I said last year, we could be facing, in December, 100,000, or we could be facing

25:18.280 --> 25:19.280
under 1,000.

25:19.280 --> 25:21.360
And there's just no way to know that.

25:21.360 --> 25:24.280
There's really two versions of me when it comes to this issue.

25:24.280 --> 25:26.880
Version one is the enthusiast.

25:26.880 --> 25:29.280
I just want to see cryptocurrencies succeed.

25:29.280 --> 25:32.700
And then version two is the Bitcoin investor.

25:32.700 --> 25:38.740
Now the Bitcoin investor in me thinks that Bitcoin long term is doomed unless they solve

25:38.740 --> 25:43.680
some fundamental issues, which Noah addresses in Ask Noah 42, The End of Bitcoin.

25:43.680 --> 25:47.680
Unless they address fundamental issues, Bitcoin is getting too expensive to operate.

25:47.680 --> 25:53.400
If you have like $20 or less in Bitcoin, you can't do anything with it.

25:53.400 --> 25:55.620
It's dark matter money.

25:55.620 --> 25:59.120
Because the transaction fees are becoming so expensive on the Bitcoin network that it

25:59.120 --> 26:01.480
costs about $20 to move a dollar.

26:01.480 --> 26:03.360
Yeah, but those issues can be fixed.

26:03.360 --> 26:09.360
You talked about last year about potentially caching stuff with databases.

26:09.360 --> 26:11.520
I think there are technical workarounds for that.

26:11.520 --> 26:17.320
And the blockchain technology itself is so fundamentally solid that I think that you're

26:17.320 --> 26:18.960
being too pessimistic here.

26:18.960 --> 26:23.760
I think that it might turn out to be a bubble, and it might turn out to be only worth 1,000

26:23.760 --> 26:24.760
or a few hundred or whatever.

26:24.760 --> 26:27.020
But I can't see it just being worth nothing.

26:27.020 --> 26:28.020
It's a negative outlook.

26:28.020 --> 26:30.280
I'll have a negative outlook until they address the issues.

26:30.280 --> 26:36.300
Once they address the issues, which they could do fairly simply, then my outlook will change.

26:36.300 --> 26:41.400
But I think Bitcoin is going to struggle, and the price will reflect that struggle until

26:41.400 --> 26:42.400
they solve these problems.

26:42.400 --> 26:46.560
Yeah, well, we'll keep an eye on it, and we'll report any major events that happen in the

26:46.560 --> 26:47.560
Bitcoin world.

26:47.560 --> 26:52.600
Yeah, and of course, the big lesson here is that the open source world is much, much,

26:52.600 --> 26:55.380
much larger than just Bitcoin.

26:55.380 --> 27:00.840
And you can get all of the news every single week at linuxactionnews.com slash subscribe.

27:00.840 --> 27:04.000
And you can go there for all of the ways to get every single episode.

27:04.000 --> 27:08.200
Yeah, and you can go to linuxactionnews.com slash contact for ways to get in touch with

27:08.200 --> 27:09.200
us.

27:09.200 --> 27:13.400
And you can support the entire network at patreon.com slash Jupiter signal, or go to

27:13.400 --> 27:18.320
Jupiter broadcasting.com slash stickers and get yourself a Linux action news sticker.

27:18.320 --> 27:20.680
Yeah, I've got one on my desktop machine.

27:20.680 --> 27:22.180
Looks pretty cool.

27:22.180 --> 27:26.200
So we'll be back next Monday with our weekly take on the latest Linux and open source news.

27:26.200 --> 27:27.760
I'm at Chris LAS.

27:27.760 --> 27:29.280
I'm at Joe Rissington.

27:29.280 --> 27:31.440
Thank you for joining us, and we'll see you next week.

27:31.440 --> 27:54.240
See you later.


WEBVTT

00:00.000 --> 00:16.400
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

00:16.400 --> 00:21.000
This is episode 29, recorded on November 26th, 2017.

00:21.000 --> 00:22.000
I'm Chris.

00:22.000 --> 00:23.000
And I'm Joe.

00:23.000 --> 00:24.000
Hello, Joe.

00:24.000 --> 00:25.000
I was surprised.

00:25.000 --> 00:29.160
I thought maybe we'd have no news with the holiday week here in the States, but no, it

00:29.160 --> 00:32.160
turns out we do have a few things to talk about this week.

00:32.160 --> 00:36.800
One of them, probably not too surprising to most of those in our audience.

00:36.800 --> 00:42.920
Yeah, so Google have been collecting location data from Android users who don't even know

00:42.920 --> 00:43.920
about it.

00:43.920 --> 00:48.000
So even if you've got location turned off, and even if you've got no SIM card in your

00:48.000 --> 00:51.360
device, they're still collecting location data.

00:51.360 --> 00:56.640
Yeah, this is actually a result of some legitimate journalism that courts.com did.

00:56.640 --> 01:00.000
And they discovered that even if you have your SIM device removed, even if you have

01:00.000 --> 01:08.080
all location services disabled, every time your phone registers a cell tower nearby,

01:08.080 --> 01:13.440
with whatever means it does that, I suppose, it logs in a database, and then batch uploads

01:13.440 --> 01:17.280
it to Google next time it has an internet connection, say when you're on Wi-Fi.

01:17.280 --> 01:21.820
Now I think maybe the most surprising element was, even if you don't have a SIM card part,

01:21.820 --> 01:25.320
and Google says, we were never really using this data for anything significant.

01:25.320 --> 01:28.000
We were discarding it almost immediately.

01:28.000 --> 01:31.440
It was just helping us get push notifications to you a little faster.

01:31.440 --> 01:32.720
Yeah, that's what I'd say.

01:32.720 --> 01:35.860
Yeah, it seemed a little too typical of a response.

01:35.860 --> 01:41.400
And it was also odd because the cellular network is responsible for routing the data on the

01:41.400 --> 01:42.740
cellular network.

01:42.740 --> 01:44.640
So they keep track of which towers you're next to.

01:44.640 --> 01:47.680
I don't really know why Google would need to.

01:47.680 --> 01:52.840
It's not like they can influence the TCP IP network of AT&T or Verizon.

01:52.840 --> 01:54.960
And it's worth pointing out that it's not just phones here.

01:54.960 --> 01:56.900
We're talking about tablets as well.

01:56.900 --> 01:57.900
And a lot of them.

01:57.900 --> 02:03.240
They push us out across a range of devices back in January, modern devices, quote unquote.

02:03.240 --> 02:06.120
So they must be doing this through the Play Services API.

02:06.120 --> 02:08.140
That would be my speculation completely.

02:08.140 --> 02:12.800
The Quartz article and the pocketnow.com article we have linked don't actually go into how

02:12.800 --> 02:18.200
Google managed to successfully push this code out to all these Android users and then is

02:18.200 --> 02:20.400
going to successfully turn it off.

02:20.400 --> 02:23.400
They must be using the Play Services, but that would be an assumption.

02:23.400 --> 02:25.640
Well, I can't see any other way to do it.

02:25.640 --> 02:29.680
Well, then does that mean your device has it if you put the Google Apps and Play Services

02:29.680 --> 02:32.200
on an alternative ROM?

02:32.200 --> 02:34.180
Almost certainly, yes.

02:34.180 --> 02:35.180
Which is quite scary, really.

02:35.180 --> 02:39.560
It makes me want to maybe think about just going F-Droid only, but I don't think I'm

02:39.560 --> 02:40.920
ready to do that just yet.

02:40.920 --> 02:45.720
But you know, this whole thing is not a surprise to me at all because Android is all about

02:45.720 --> 02:47.960
location.

02:47.960 --> 02:51.740
Everything you do on the phone, it asks you to enable location.

02:51.740 --> 02:56.800
Now most people I think just have it on by default and don't think about it, but I disabled

02:56.800 --> 02:58.640
my location whenever possible.

02:58.640 --> 03:02.600
I only enable it when I need to do GPS basically with my phone.

03:02.600 --> 03:06.800
I'm not interested in sites knowing my location.

03:06.800 --> 03:12.200
One of the most annoying things is in Chrome on Android, it pops up, this site needs your

03:12.200 --> 03:13.200
location.

03:13.200 --> 03:14.200
No, it doesn't need it.

03:14.200 --> 03:16.880
It wants my location because it wants that data.

03:16.880 --> 03:21.360
And every time you open maps, it wants you to enable location.

03:21.360 --> 03:26.160
And the thing is that it's so easy to enable it, but it's quite difficult to turn it off.

03:26.160 --> 03:30.740
You can't turn it off with a widget, for example, but you can turn it on.

03:30.740 --> 03:35.360
And so it's all weighted to try and get as much location data as possible, which is not

03:35.360 --> 03:40.280
a huge surprise because that data is really valuable to an advertising company like Google.

03:40.280 --> 03:41.280
Right.

03:41.280 --> 03:42.960
I don't really think any of us are too surprised.

03:42.960 --> 03:46.080
And this is sort of what Android is meant to do.

03:46.080 --> 03:51.880
But that niggly thing in the back of our minds is we all know that Google is an advertising

03:51.880 --> 03:52.880
company.

03:52.880 --> 03:56.160
And that's where it gets a little uncomfortable because we're all getting a little wigged

03:56.160 --> 03:59.520
out by this, and it's just becoming a little too much.

03:59.520 --> 04:02.120
And Google just keeps accidentally doing this.

04:02.120 --> 04:07.320
I bet a lot of us thought back to the Wi-Fi snooping that they got caught driving around,

04:07.320 --> 04:13.460
wholesaling, TCP dumping people's Wi-Fi data, and then, oh, sorry, we left that turned on.

04:13.460 --> 04:18.000
That thing that takes up tons and tons of storage and dumps traffic from the interface

04:18.000 --> 04:20.520
to the hard drive, we accidentally left that turned on.

04:20.520 --> 04:24.580
Yeah, they must have had huge disk arrays in those cars because if you drive around

04:24.580 --> 04:27.200
all day every day, that's a lot of data, isn't it?

04:27.200 --> 04:28.200
Yeah.

04:28.200 --> 04:29.200
You build for that.

04:29.200 --> 04:30.200
Exactly.

04:30.200 --> 04:31.200
Yeah.

04:31.200 --> 04:35.280
It just feels very shady from them.

04:35.280 --> 04:38.160
Not this cool company anymore, are they?

04:38.160 --> 04:41.600
They're just a big, evil advertising company at the end of the day.

04:41.600 --> 04:42.600
Well, no.

04:42.600 --> 04:43.880
It's a big, evil company's alphabet.

04:43.880 --> 04:44.880
Google's still great.

04:44.880 --> 04:45.880
We love Google.

04:45.880 --> 04:48.340
Just look online at all the comments.

04:48.340 --> 04:49.560
I'm not a big Google hater.

04:49.560 --> 04:54.440
I am a little skeptical sometimes of some of their actions, and I apply Google cautiously

04:54.440 --> 04:55.440
in my life.

04:55.440 --> 04:59.580
And this is why I opted not to be an Android user, is I just sort of assumed this stuff

04:59.580 --> 05:00.980
is going on.

05:00.980 --> 05:05.220
And in the meantime, I'm waiting for the best free phone possible, and I'll jump to that

05:05.220 --> 05:06.680
when it's available.

05:06.680 --> 05:10.900
And some of you may remember during this whole free phone initiative that Canonical was taking

05:10.900 --> 05:16.240
on a few years ago, a project was born, a project named Mirror, which may have its relevancy

05:16.240 --> 05:17.840
now on the desktop.

05:17.840 --> 05:22.300
Yeah, we thought that it was going to die when they made the announcement about ditching

05:22.300 --> 05:23.800
the phone and everything.

05:23.800 --> 05:29.000
But it seems to have lived on as part of the Wayland stack on Ubuntu.

05:29.000 --> 05:33.600
And now they're reaching out to the community for input on exactly how that is going to

05:33.600 --> 05:34.600
work.

05:34.600 --> 05:40.040
So even if you're not an Ubuntu user, or ever going to be a Mirror user, or even a Wayland

05:40.040 --> 05:47.880
user, this post is worth reading, simply because it illustrates a couple of major design philosophies

05:47.880 --> 05:52.440
that people are kicking around for rebuilding desktops for Wayland.

05:52.440 --> 05:58.120
Major architecture changes, and they're sort of seeking input on the pros and cons for

05:58.120 --> 05:59.740
each architecture.

05:59.740 --> 06:07.440
One is sort of a monolithic, everything is one big process, it's non-modular at all,

06:07.440 --> 06:13.000
it's from top to bottom, it's a server, compositor, and window manager, the panels, the dock,

06:13.000 --> 06:19.520
the desktop, it's all a single glorious process, which means it's nice and secure, it's impossible

06:19.520 --> 06:24.120
for apps to learn or manipulate the shell in unexpected ways, it also means a single

06:24.120 --> 06:27.140
thing can take the whole damn thing down.

06:27.140 --> 06:32.760
Now there are some desktops today, some major desktops, that are building their Wayland

06:32.760 --> 06:33.840
support this way.

06:33.840 --> 06:39.400
It may perform well, and it solves having to create a sophisticated IPC system, but

06:39.400 --> 06:43.320
it also means single points of failure for your entire desktop.

06:43.320 --> 06:49.400
So then they toss out the highly modular desktop, which is the server, a compositor, a window

06:49.400 --> 06:55.040
manager, each panel and dock and desktop are all individual processes.

06:55.040 --> 07:00.480
You can mix and match different components with this approach, there's less likely for

07:00.480 --> 07:05.160
one component to crash and take down the whole system, but it's very complex.

07:05.160 --> 07:10.000
It relies on an IPC system, an inner process communication system, to sync state between

07:10.000 --> 07:15.600
all the separate processes, which can risk race conditions and add delay, and security

07:15.600 --> 07:20.160
is compromised, because you can potentially have maybe a man in the middle there, or something

07:20.160 --> 07:24.240
like that that can listen in on another application, but that's generally how X applications work

07:24.240 --> 07:26.040
today, the former there.

07:26.040 --> 07:29.680
And they're seeking input on what the community wants, and there's been some good discussion

07:29.680 --> 07:30.680
already.

07:30.680 --> 07:35.760
I really don't know where I stand on this, because as an XFCE user, modularity and customization

07:35.760 --> 07:40.480
and everything is key to the whole XFCE desktop.

07:40.480 --> 07:47.760
But I do understand these cons, this security issue, and the fact that X is horribly insecure.

07:47.760 --> 07:53.800
So I just don't know, I don't really want to have a desktop that will potentially crash

07:53.800 --> 07:54.800
that easily.

07:54.800 --> 07:55.800
Yeah.

07:55.800 --> 07:56.800
I'm thinking of your OBS machine.

07:56.800 --> 07:57.800
Me too.

07:57.800 --> 07:58.800
Yep.

07:58.800 --> 08:01.000
I'm looking at it right now.

08:01.000 --> 08:05.600
I think the question that has to be answered here is, what's the final role of MIR going

08:05.600 --> 08:06.740
to be here?

08:06.740 --> 08:13.900
Is MIR going to be a set of stable APIs that different desktop projects can target to implement

08:13.900 --> 08:15.460
their Wayland support?

08:15.460 --> 08:21.520
So instead of them inventing the ability to be a compositor, and creating all of this

08:21.520 --> 08:22.520
stuff to do...

08:22.520 --> 08:24.360
Because remember, Wayland is a protocol, it's not a server.

08:24.360 --> 08:28.120
There's not some server that I3 can just be rebuilt to talk to.

08:28.120 --> 08:31.780
No, they have to rebuild I3, and that's where Sway is coming from.

08:31.780 --> 08:36.480
These are massive re-buildings of some of these projects, and not all of them are going

08:36.480 --> 08:39.240
to want to write their own Sway.

08:39.240 --> 08:43.540
You can check that out if you want to, just go Google Sway desktop.

08:43.540 --> 08:44.620
It's a major problem.

08:44.620 --> 08:50.260
And MIR could come along to projects like XFCE, Cinnamon even, and say, here's a way

08:50.260 --> 08:52.800
to support Wayland out of the box.

08:52.800 --> 08:57.920
And if that is going to be MIR's final role, then it seems like the modular approach is

08:57.920 --> 09:03.000
the most obvious, because different projects could select the components that they want,

09:03.000 --> 09:06.460
or build their own components to make a better snap in.

09:06.460 --> 09:11.380
And if it's all one big monolithic process, all big one monolith, that's going to be less

09:11.380 --> 09:16.400
attractive to some of these more modular open source projects like XFCE, or Cinnamon, just

09:16.400 --> 09:18.320
as a random example.

09:18.320 --> 09:22.500
And so what do you think about Ubuntu and Canonical reaching out to the community like

09:22.500 --> 09:24.400
this and asking for their input?

09:24.400 --> 09:26.500
Well, it's gone better than I expected.

09:26.500 --> 09:32.040
When I first saw it, I thought, probably not going to be very productive.

09:32.040 --> 09:35.560
I don't know why, my bias was just, this seems like one of those things where you just kind

09:35.560 --> 09:39.600
of have to have a technical understanding of the market, what technical deficiencies

09:39.600 --> 09:43.460
are out there, and what your product can do that's not currently being solved, and build

09:43.460 --> 09:44.460
for that.

09:44.460 --> 09:47.080
And that seems the way you build something like this.

09:47.080 --> 09:51.800
But now having this opened up for input, you're seeing some good conversations in here, specifically

09:51.800 --> 09:55.920
like from one of the Sway developers about some of the things they considered, people

09:55.920 --> 10:00.800
who are thinking about theming, people that are in here representing KWIN, I mean, it's

10:00.800 --> 10:03.180
actually a pretty productive conversation.

10:03.180 --> 10:06.840
So now, having seen the results, I'm actually kind of glad they did it.

10:06.840 --> 10:14.480
Well, I think that if it's going to be used by the community at large, and not just Ubuntu,

10:14.480 --> 10:16.920
then they need to get community involvement, don't they?

10:16.920 --> 10:19.660
So this is definitely the right approach to it.

10:19.660 --> 10:25.240
As you say, if it's going to work for the likes of XFCE, then they can't expect to just

10:25.240 --> 10:30.000
invent it themselves, and make all the decisions, and then have other people adopt it.

10:30.000 --> 10:31.800
So I think it is a good idea.

10:31.800 --> 10:37.080
But at the same time, it does show a change in Ubuntu, doesn't it?

10:37.080 --> 10:42.000
And canonical, that they used to just make all the decisions, make the thing, and push

10:42.000 --> 10:45.060
it out there as free software, take it or leave it.

10:45.060 --> 10:49.760
Whereas now, they're going for more of this community engagement approach, which I suppose

10:49.760 --> 10:50.760
has got to be better.

10:50.760 --> 10:54.540
I think my closing thoughts on this would be, this process now being out in the open,

10:54.540 --> 11:00.320
may give us real indications if there's community demand for this project in the first place.

11:00.320 --> 11:01.640
I sure hope there is.

11:01.640 --> 11:08.000
Because I could see a future where a desktop project could say, we support mere Wayland

11:08.000 --> 11:09.320
version 1.0.

11:09.320 --> 11:12.920
And that means you get real VNC support remote desktop.

11:12.920 --> 11:17.760
That means you get Vulkan graphics that don't screw up on your machine.

11:17.760 --> 11:21.420
It means you can have copy and paste between applications.

11:21.420 --> 11:23.680
You know you get a certain feature set.

11:23.680 --> 11:27.200
And when the next version comes out, you get the next set of features.

11:27.200 --> 11:32.120
That would be the best way as an end user, me personally, selfishly here, that would

11:32.120 --> 11:36.000
be the best way for me to wrap my head around these transitions we're about to hit with

11:36.000 --> 11:40.600
different desktop projects having different levels of support for different basic desktop

11:40.600 --> 11:41.600
functionality.

11:41.600 --> 11:46.400
Well, as long as I never, ever have to see screen tearing again, I'm happy.

11:46.400 --> 11:48.600
All in the name of screen tearing, eh, Joe?

11:48.600 --> 11:49.600
Yeah.

11:49.600 --> 11:50.600
All right.

11:50.600 --> 11:52.920
So the Raspberry Pi Foundation have got a new magazine.

11:52.920 --> 11:55.140
So I thought we'd just have a quick mention of this.

11:55.140 --> 11:58.400
It's free, as in beer, and it's also Creative Commons.

11:58.400 --> 11:59.680
So that's all good.

11:59.680 --> 12:03.320
Or you can pay for a hard copy of it, a paper copy.

12:03.320 --> 12:05.020
It's called Hack Space.

12:05.020 --> 12:12.360
And as the name suggests, it's all about making and building and creating things.

12:12.360 --> 12:16.440
Obviously Raspberry Pi focused, and most of the stuff in there is going to involve Linux.

12:16.440 --> 12:19.720
So hopefully it's going to spread Linux that little bit further.

12:19.720 --> 12:21.960
Yeah, it's really well done.

12:21.960 --> 12:23.440
Exceptionally good photography.

12:23.440 --> 12:27.200
They also have apps in the iOS and Play stores.

12:27.200 --> 12:31.280
If you check it out, just go grab the free PDF from the link we have in the show notes.

12:31.280 --> 12:33.080
It really has a very well done feeling.

12:33.080 --> 12:36.320
There's a couple of very interesting articles in there.

12:36.320 --> 12:39.960
I read through a couple of them before the show this morning, and I'm going back to it

12:39.960 --> 12:41.140
afterwards to keep reading them.

12:41.140 --> 12:42.140
I was impressed.

12:42.140 --> 12:45.600
Well, it's not a surprise that it's well put together, because if you look at who's involved

12:45.600 --> 12:51.860
in it, there's a couple of the guys from Linux Voice, Andrew Gregory and Ben Everard.

12:51.860 --> 12:54.320
So it's great to see them working on another magazine.

12:54.320 --> 13:01.920
And yeah, do check it out if you're interested in making in the Raspberry Pi.

13:01.920 --> 13:02.920
DigitalOcean.com.

13:02.920 --> 13:06.240
Go create an account and then use our promo code, here's the thing.

13:06.240 --> 13:09.880
All one word, you smush it together and you get a $10 credit.

13:09.880 --> 13:13.600
Now everything you deploy at DigitalOcean, you can get launched in under a minute, and

13:13.600 --> 13:16.840
it's all backed by brilliant, fast SSDs.

13:16.840 --> 13:19.600
They have 40 gigabit connections coming into the hypervisor.

13:19.600 --> 13:23.080
They have just about every Linux distribution you'd ever want to run on a server available,

13:23.080 --> 13:24.280
and free BSD.

13:24.280 --> 13:27.840
They have all kinds of dynamic storage options, where you can add more storage as you need

13:27.840 --> 13:29.600
it, add more RAM or CPU.

13:29.600 --> 13:34.520
I love the block storage system, just shows up as a Dev SDA device, like a dev device.

13:34.520 --> 13:37.560
And object storage is the way to go now.

13:37.560 --> 13:39.220
It feels like the future has arrived.

13:39.220 --> 13:42.280
They can make this all so simple through their dashboard.

13:42.280 --> 13:45.700
If you've never worked with anything like this, you can get started today.

13:45.700 --> 13:48.680
And if you're a pro, you've been working with this for years, you're going to be impressed

13:48.680 --> 13:52.160
with their straightforward API and how powerful that dashboard is.

13:52.160 --> 13:56.520
Tons of backend features, but I want to point you this week to an introduction to machine

13:56.520 --> 13:58.080
learning.

13:58.080 --> 13:59.200
It's a big buzzword.

13:59.200 --> 14:01.520
You hear Google talking about it constantly.

14:01.520 --> 14:03.840
You hear it's integrated into all of the products these days.

14:03.840 --> 14:05.600
Well, what the heck is it?

14:05.600 --> 14:07.080
DigitalOcean has a fantastic write-up.

14:07.080 --> 14:11.080
Go to digitalocean.com, create your account, use our promo code, here's the thing.

14:11.080 --> 14:14.860
And then while you're there, check out their community section and get an introduction

14:14.860 --> 14:19.400
to machine learning, digitalocean.com, promo code, here's the thing.

14:19.400 --> 14:25.800
Okay, let's talk about the kernel and the kernel mailing list and what Linus has been

14:25.800 --> 14:27.240
getting up to this week.

14:27.240 --> 14:32.120
Yeah, it really gets everybody's attention when Linus gives someone a public dressing

14:32.120 --> 14:33.920
down on the mailing list.

14:33.920 --> 14:37.280
We'll cut through some of the drama and get to the technical argument here.

14:37.280 --> 14:41.720
There's a Google Pixel security team member who's been advocating for a change in the

14:41.720 --> 14:46.240
Linux kernel and he's been advocating it kind of at a bad time during the development cycle

14:46.240 --> 14:49.600
to essentially kill processes when a condition is met.

14:49.600 --> 14:51.920
And Linus wasn't having any of this.

14:51.920 --> 14:56.520
At the core of this argument, I believe what we're seeing develop, and this is my opinion

14:56.520 --> 15:00.920
here, but you're seeing an old-school approach to software development where all software

15:00.920 --> 15:02.060
problems are bugs.

15:02.060 --> 15:06.680
If it's a security issue, if it's a crash issue, if it's a spelling issue, they're all

15:06.680 --> 15:07.680
bugs.

15:07.680 --> 15:09.920
You can have different degree of severity, but it's a bug.

15:09.920 --> 15:14.080
There's a more modern school of thought where security issues are an extreme kind of bug

15:14.080 --> 15:16.200
that get absolute priority.

15:16.200 --> 15:19.200
They're treated differently than other types of software development.

15:19.200 --> 15:23.360
And I think you're seeing a collision of these two different viewpoints in the Linux kernel.

15:23.360 --> 15:27.480
And some of these software developers, like this Pixel team member, are specifically hired

15:27.480 --> 15:32.280
to work on security issues and have a security opinion on how things should be designed.

15:32.280 --> 15:35.040
And so you're seeing a butting of heads there on the two different approaches.

15:35.040 --> 15:39.520
Well, there are two arguments for treating all bugs equally.

15:39.520 --> 15:43.880
One of them, of course, is that any bug could be a security bug because you never know,

15:43.880 --> 15:48.460
it could be exploited in some way that's unexpected.

15:48.460 --> 15:53.920
And the other argument is about the whole user experience, in that if you deal with

15:53.920 --> 16:00.360
security problems in a way that affects the overall experience by killing processes, then

16:00.360 --> 16:05.320
the average user who doesn't really understand what's happening is going to have a degraded

16:05.320 --> 16:06.320
experience.

16:06.320 --> 16:11.000
And that is not good because the first rule of the kernel development is don't break user

16:11.000 --> 16:12.000
space.

16:12.000 --> 16:14.080
Yeah, Linus says, let's take a more rational approach.

16:14.080 --> 16:16.200
He says, let's find where there's a problem.

16:16.200 --> 16:18.280
Let's warn about what looks dangerous.

16:18.280 --> 16:21.280
And then once we've warned for a long time, and we're confident we've caught all of the

16:21.280 --> 16:24.840
normal cases, then we can start taking more drastic measures.

16:24.840 --> 16:29.440
We have to stop going for a shoot first, then ask questions approach, he says.

16:29.440 --> 16:33.120
I know you're not particularly interested in the whole politics of it all.

16:33.120 --> 16:40.480
And Linus shouting and swearing on the mailing list, but that represents a very different

16:40.480 --> 16:46.900
approach to what the Linux Foundation wants to be about as well.

16:46.900 --> 16:51.000
They want to be all corporate, and they've got all these corporate sponsors and everything,

16:51.000 --> 16:54.080
and it kind of doesn't look good for them.

16:54.080 --> 16:55.920
And they're not really very happy about it.

16:55.920 --> 16:59.240
And that's why this has come up many, many times.

16:59.240 --> 17:02.040
It depends on who is observing.

17:02.040 --> 17:07.080
If it's the chattering class chattering on about his rough language and toxic workplace,

17:07.080 --> 17:08.080
then you're right.

17:08.080 --> 17:09.380
It doesn't look good.

17:09.380 --> 17:15.840
If I'm a CTO, if I'm an IT person, and I'm looking at Linus Torvalds defend the stability

17:15.840 --> 17:20.520
of user space, and if I'm looking at him giving an accurate dressing down to the security

17:20.520 --> 17:23.720
researcher who was trying to ram something in last minute in a development cycle that

17:23.720 --> 17:29.340
kills processes, my takeaway is Linus is protecting the stability of the Linux kernel, and they

17:29.340 --> 17:34.080
have the right person at the helm there for the kernel I want to run on my production

17:34.080 --> 17:35.080
systems.

17:35.080 --> 17:38.000
So really, the messaging I take away from this is he's doing his job, and he's doing

17:38.000 --> 17:39.000
it well.

17:39.000 --> 17:40.000
Well, yeah, I agree.

17:40.000 --> 17:44.040
He is doing his job well, but you have to think to the future and what happens when

17:44.040 --> 17:47.160
he's no longer around for whatever reason.

17:47.160 --> 17:51.200
Whoever replaces him, are they going to be as strong a figurehead?

17:51.200 --> 17:56.400
Are they going to have the chops to say, no, we're not having this thing in?

17:56.400 --> 17:57.640
Well, I have two answers for you.

17:57.640 --> 18:01.080
The short answer is just die before Linus does, problem solved.

18:01.080 --> 18:07.160
The second answer is I wouldn't be surprised if this is the nature of the beast.

18:07.160 --> 18:13.240
When you are working on a project with this level of scale and importance, this just might

18:13.240 --> 18:15.480
be what a person turns into.

18:15.480 --> 18:20.120
In fact, the guy he was yelling at, this Pixel developer fellow, he even copped to it and

18:20.120 --> 18:25.140
said, I think my main flaw in helping bring these defenses to the kernel has been thinking

18:25.140 --> 18:28.960
they can be fully tested during a single development cycle.

18:28.960 --> 18:33.160
And this mistake was made quite clear this cycle, which is why I made the adjustments

18:33.160 --> 18:34.160
I did.

18:34.160 --> 18:37.560
He says, I'd like to think that I did learn something since I fixed this up before you

18:37.560 --> 18:41.920
yelled at me, and I'll make further adjustments and try again for 4.16.

18:41.920 --> 18:46.560
Well Case Cook backed down on that aspect of it, but he got into a bit of a bind with

18:46.560 --> 18:53.560
GR security and acted in what can only be described as a very bizarre way.

18:53.560 --> 19:00.160
Childish, Reckless, Case Cook, and Brad Sprengler from GR Security are trying to one-up each

19:00.160 --> 19:04.280
other by dropping zero-day links on Twitter for vulnerabilities they've discovered.

19:04.280 --> 19:09.500
So that way they can each measure each other and see who is the bigger man, apparently.

19:09.500 --> 19:14.120
And this is the definition of reckless behavior in the security research industry.

19:14.120 --> 19:16.480
This is how you devastate a reputation.

19:16.480 --> 19:24.960
Yeah I would kind of expect it from GR Security, because they've kind of got not a great reputation.

19:24.960 --> 19:29.640
But from Case Cook, he's got quite a good reputation and working for Google and stuff,

19:29.640 --> 19:33.000
I'm just really surprised to see him do this.

19:33.000 --> 19:37.840
My takeaway message from these stories, it's a sad state of the security research industry.

19:37.840 --> 19:41.520
Something that I used to hold a lot of respect for, a lot of hard work in the security research

19:41.520 --> 19:42.520
industry.

19:42.520 --> 19:46.120
And now we see people one-upping each other and trying to ram code into big projects like

19:46.120 --> 19:48.160
the Linux kernel just to get a name for themselves.

19:48.160 --> 19:49.480
It's a sad state, Joe.

19:49.480 --> 19:53.720
It is a sad state, but hopefully while people like Linus are around, he'll keep them in

19:53.720 --> 19:55.560
check for now.

19:55.560 --> 20:00.400
And at least all that stuff is open source so we can see what's happening with it, unlike

20:00.400 --> 20:02.400
the Intel management engine.

20:02.400 --> 20:07.560
Yeah, back in the news after just talking about it recently, Intel I guess noticed,

20:07.560 --> 20:09.880
hey, everybody's talking about the management engine.

20:09.880 --> 20:14.600
So they decided to do a little audit, and another company got involved called Positive

20:14.600 --> 20:18.600
Technologies Research, who we've talked about once before on the show, and they discovered

20:18.600 --> 20:23.920
that remote attackers could launch commands on a host of an Intel-based computer, including

20:23.920 --> 20:28.520
laptops and desktops that were shipped with Intel Core processors since 2015.

20:28.520 --> 20:32.200
Most of the vulnerabilities require physical access to the targeted devices, but one of

20:32.200 --> 20:35.520
them does allow remote attacks with administrative access.

20:35.520 --> 20:37.800
What is going on here?

20:37.800 --> 20:44.760
How can we have this running in so many machines and have no idea what it's doing?

20:44.760 --> 20:50.920
I suppose we live in a world where most people still run Windows on their laptops, but we're

20:50.920 --> 20:53.560
talking about servers as well.

20:53.560 --> 20:58.200
Surely this has to be a catalyst for Intel to be forced to open source it.

20:58.200 --> 20:59.200
Hmm.

20:59.200 --> 21:00.200
I hadn't thought of that.

21:00.200 --> 21:02.280
I'm doubtful of that because of reasons.

21:02.280 --> 21:03.280
They'll have all kinds of reasons.

21:03.280 --> 21:04.280
Oh, of course.

21:04.280 --> 21:09.440
We've got all sorts of corporate reasons, but at least we've got to pressure them into

21:09.440 --> 21:11.000
doing something about it.

21:11.000 --> 21:17.400
I wonder if that pressure might result in a ME-free Intel chip, like a motherboard with

21:17.400 --> 21:19.800
an Intel CPU that doesn't have a management engine.

21:19.800 --> 21:25.040
And maybe it's not like an enterprise grade, but it could be an option for consumers.

21:25.040 --> 21:30.400
I've been speculating about that, and even that I'm doubtful of, Joe, and that seems

21:30.400 --> 21:31.660
like a baby step.

21:31.660 --> 21:37.440
I wonder if it would even be possible to have a Intel processor that's working properly

21:37.440 --> 21:39.040
without the management engine.

21:39.040 --> 21:45.000
I'm skeptical about that, or maybe with some reduced functionality or something, but I

21:45.000 --> 21:46.520
think there is a big market for it.

21:46.520 --> 21:48.920
I think especially in the data center.

21:48.920 --> 21:54.280
We talked, I think last week or the week before, about the rise of ARM servers, and the thing

21:54.280 --> 22:00.480
is if Intel don't do something about this, they're going to start losing out on contracts

22:00.480 --> 22:02.320
to supply big data centers.

22:02.320 --> 22:11.120
Because if you are the architect of a huge system with multiple machines, and you read

22:11.120 --> 22:16.240
about stuff like this, you're thinking, hmm, let's have another look at that ARM situation,

22:16.240 --> 22:17.240
maybe.

22:17.240 --> 22:21.640
You also have projects like Google's project to just disable it on all of their servers.

22:21.640 --> 22:26.160
So this is going to be processors from the sixth and seventh and eighth generation of

22:26.160 --> 22:27.240
Intel processors.

22:27.240 --> 22:32.840
So since about 2015, your Skylakes, your Kabylakes, and your Coffee Lake families of processors

22:32.840 --> 22:38.280
on the desktop side, and then there's a larger line of Intel Xeon processors, which you can

22:38.280 --> 22:39.880
check the link in the show notes.

22:39.880 --> 22:44.680
So if you have anything older than Skylake, you don't have the Minix version of the management

22:44.680 --> 22:45.680
engine.

22:45.680 --> 22:48.960
Doesn't mean it doesn't have vulnerabilities, it's just not getting poked at as much right

22:48.960 --> 22:49.960
now.

22:49.960 --> 22:53.960
Some of these are pretty significant, some of them are minor, HP, Dell, and other vendors

22:53.960 --> 22:58.000
are pushing out their respective firmwares, and I'd be curious how you Linux users are

22:58.000 --> 23:01.480
going to patch your Intel ME firmware.

23:01.480 --> 23:05.080
Are you booting into some sort of free DOS, are you doing it from Linux, tweet me at Chris

23:05.080 --> 23:07.120
LAS, how are you going to patch against this?

23:07.120 --> 23:10.080
Maybe some of us can just load up GNOME software and do an update.

23:10.080 --> 23:14.480
But in the meantime, check out linuxactionnews.com slash subscribe for all the ways to get new

23:14.480 --> 23:15.480
episodes.

23:15.480 --> 23:19.160
And go to linuxactionnews.com slash contact for ways to get in touch.

23:19.160 --> 23:24.240
And you can support the whole network at our Patreon page, patreon.com slash jupitersignal.

23:24.240 --> 23:28.320
We'll be back next Monday with our weekly take on the latest Linux and open source news.

23:28.320 --> 23:30.080
I'm at Chris LAS.

23:30.080 --> 23:31.760
I'm at Joe Rissington.

23:31.760 --> 23:34.360
Thank you for joining us, and we'll see you next week.

23:34.360 --> 23:52.880
Until then, have a great day, and we'll see you later.


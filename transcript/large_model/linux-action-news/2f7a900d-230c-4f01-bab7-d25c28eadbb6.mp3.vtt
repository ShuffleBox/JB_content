WEBVTT

00:00.000 --> 00:09.000
Hello, and welcome to Linux Action News, episode 209, recorded on October 3rd, 2021.

00:09.000 --> 00:10.000
I'm Chris.

00:10.000 --> 00:11.000
And I'm Wes.

00:11.000 --> 00:12.000
Hello, Wes.

00:12.000 --> 00:13.000
Let's do the news.

00:13.000 --> 00:18.880
On Tuesday, Linus Torvalds sat down for the now-annual check-in at the Open Source Summit

00:18.880 --> 00:20.440
in North America.

00:20.440 --> 00:25.760
He took questions from Dirk Hondl, an early Linux contributor, and the chief open source

00:25.760 --> 00:29.240
officer and vice president at VMware.

00:29.240 --> 00:34.480
It was clear from the beginning, the recent milestone of Linux's 30th birthday would be

00:34.480 --> 00:36.240
a theme for the night.

00:36.240 --> 00:37.360
How could it not?

00:37.360 --> 00:38.880
It's a major milestone.

00:38.880 --> 00:42.800
It started, and it's a good chat, we'll have a link to the full details in the show notes,

00:42.800 --> 00:48.000
but it started with Linus's memories of the first hours of the operating systems release.

00:48.000 --> 00:54.560
In fact, he recalls that he intended to call it Freaks, but that was changed by a stern

00:54.560 --> 00:55.840
FTP admin.

00:55.840 --> 01:00.600
Linus says, quote, I had already been told that the FTP site that I put it on, that I

01:00.600 --> 01:04.320
did not maintain, had a directory called Linux.

01:04.320 --> 01:10.800
So I had actually changed the name in the kernel main makefile to be Linux at that point.

01:10.800 --> 01:14.240
Sometimes it's easier to change the name of your project rather than convince that mean

01:14.240 --> 01:16.320
FTP admin.

01:16.320 --> 01:21.840
He went on to say, I am eternally grateful for two other people having much better taste

01:21.840 --> 01:22.840
than I did.

01:22.840 --> 01:25.360
I got to say, I do like the name Linux better than Freaks.

01:25.360 --> 01:26.360
No kidding.

01:26.360 --> 01:29.360
I would hate to go around saying I'm a Freaks user.

01:29.360 --> 01:35.440
Among a range of other topics, longevity of the Linux community itself came up with Torvald

01:35.440 --> 01:42.320
saying, I think that's a testament to how good the community on the whole has been,

01:42.320 --> 01:44.280
and how much fun it's been.

01:44.280 --> 01:48.440
Yeah, it's pretty wild, too, when you consider that when the project started in 1991, it

01:48.440 --> 01:50.760
was a tiny collection of people.

01:50.760 --> 01:54.680
And now that's just exploded to this worldwide phenomenon.

01:54.680 --> 01:56.760
It's making history every day that it exists.

01:56.760 --> 02:01.160
And Linus made it clear that he still considers that one of the building blocks of Linux and

02:01.160 --> 02:04.780
its community is, quote, just for fun.

02:04.780 --> 02:07.600
He said it's part of what he still strives for.

02:07.600 --> 02:08.720
And just think of that for a moment.

02:08.720 --> 02:12.280
If you're a Linux user out there that just uses it for fun, that's literally one of the

02:12.280 --> 02:14.880
intentions that Linus has in mind.

02:14.880 --> 02:19.480
And it was within that context, too, that the topic of Rust in the kernel came up.

02:19.480 --> 02:24.200
And addressing that, Linus said, quote, from a technical angle, does it make sense?

02:24.200 --> 02:25.200
Who knows?

02:25.200 --> 02:26.200
That's not the point.

02:26.200 --> 02:30.480
The point is for a project to stay interesting and to stay fun.

02:30.480 --> 02:31.920
You have to play with it.

02:31.920 --> 02:36.720
As for where it's going, Torvalds noted that people have been talking about Rust in the

02:36.720 --> 02:41.560
kernel for a long-ish time now, and it's still not done yet.

02:41.560 --> 02:43.160
So we'll see.

02:43.160 --> 02:48.680
Probably next year, we'll see the first Intrepid modules being written in Rust and maybe being

02:48.680 --> 02:50.160
integrated in mainline.

02:50.160 --> 02:52.560
Yeah, he still seems slightly skeptical.

02:52.560 --> 02:55.040
He notes that people have been talking about this for a long time.

02:55.040 --> 02:56.600
We haven't seen it yet.

02:56.600 --> 02:58.720
That seems like a reasonable timeline to me.

02:58.720 --> 03:02.920
He then ended the chat looking forward a bit, and when he was asked to sort of project out

03:02.920 --> 03:07.380
for the next 30 years, Linus joked and said that, like the Linux kernel, he doesn't make

03:07.380 --> 03:09.440
plans more than six months out.

03:09.440 --> 03:14.600
And although he said he's been very happy working on the Linux kernel for the last 30

03:14.600 --> 03:20.960
years, he somehow doesn't see himself working on the kernel when he's 70.

03:20.960 --> 03:25.400
This week, the Pipewire team updated us on their next major series of goals.

03:25.400 --> 03:29.440
Pipewire from the start was designed around handling the needs of both audio and video

03:29.440 --> 03:31.000
streams on Linux.

03:31.000 --> 03:35.480
And while Pipewire is already in use for screencasting and recording, especially now with Wayland

03:35.480 --> 03:40.440
and recently we even saw OBS add support, recently much of the development's actually

03:40.440 --> 03:43.480
been focused on addressing audio issues.

03:43.480 --> 03:49.400
But now that the audio support is in reasonably good shape, Red Hat will be working on a fresh

03:49.400 --> 03:56.080
round of video feature work for Pipewire, led by its founder, Wim Taymans, and working

03:56.080 --> 03:59.360
on improving video capture support on Linux in particular.

03:59.360 --> 04:03.840
Yeah, now this is interesting, and man, do we just love watching this team go.

04:03.840 --> 04:10.020
They understand that getting community buy-off is the difference between a smooth transition

04:10.020 --> 04:13.680
and fighting uphill for every single win.

04:13.680 --> 04:17.280
And instead of reinventing the wheel, they're going to work with existing software stacks

04:17.280 --> 04:23.220
where it seems to make sense, like maturing GStreamer elements to use Pipewire appropriately.

04:23.220 --> 04:26.480
And then also integrate Lib Camera into Pipewire.

04:26.480 --> 04:32.240
Now Lib Camera is an open source stack and framework for Linux, Android, and Chrome OS.

04:32.240 --> 04:35.360
That means we could see a lot of developers that already understand how to work with that.

04:35.360 --> 04:39.040
Now the current state of video capture on Linux is not great.

04:39.040 --> 04:42.760
Usually you're using a webcam, but it can be professional devices in some cases.

04:42.760 --> 04:46.480
And that will use the Video for Linux 2 Kernel API.

04:46.480 --> 04:52.240
Now this Linux for Video API is only meant for a single application at a time, much like

04:52.240 --> 04:58.100
how also audio only used to allow a single application to use the audio device at a time.

04:58.100 --> 05:02.000
But more so than audio devices, making things even more challenging with cameras is they

05:02.000 --> 05:06.480
are just getting more and more complex and feature rich at a really rapid pace.

05:06.480 --> 05:10.720
And that means that the bar for an application developer just trying to use these APIs to

05:10.720 --> 05:13.800
write a desktop Linux app is pretty gosh darn high.

05:13.800 --> 05:17.720
They have to worry about working with other apps on the system and about the security

05:17.720 --> 05:20.200
issues of direct kernel access.

05:20.200 --> 05:21.680
No thanks.

05:21.680 --> 05:26.880
Christian Schaller made this point on a blog this week about these new goals, saying, quote,

05:26.880 --> 05:30.480
there's no need to rely on the kernel API anymore.

05:30.480 --> 05:34.080
We have GStreamer and Pipewire plugins for Video for Linux 2.

05:34.080 --> 05:38.720
You can just use GStreamer or Pipewire's API instead.

05:38.720 --> 05:40.840
And really that's the point here.

05:40.840 --> 05:45.840
Most of what is needed for Pipewire to solve these problems is here or close to here, or

05:45.840 --> 05:50.920
we have some ideas, just need some more work from Wim and for developers to be willing

05:50.920 --> 05:56.000
to adopt the Pipewire API or the GStreamer API as a better solution going forward.

05:56.000 --> 05:57.520
Yeah, that's it, Wes.

05:57.520 --> 06:02.400
So the idea here really to take the big takeaway from this is developers will start targeting

06:02.400 --> 06:07.600
Pipewire and GStreamer to get access to video devices on Linux.

06:07.600 --> 06:11.480
Under the hood, Pipewire will use Lib Camera and Video for Linux.

06:11.480 --> 06:13.560
It'll manage that aspect of it.

06:13.560 --> 06:18.360
The end result is you get the ability for many applications at once to use a video device

06:18.360 --> 06:24.720
and you prevent these applications from using a kernel API directly, both for end users

06:24.720 --> 06:25.760
and developers.

06:25.760 --> 06:29.920
It's really just going to be Pipewire and GStreamer that we're interfacing with.

06:29.920 --> 06:33.040
Just like how these days, for the most part, I only worry about PulseAudio.

06:33.040 --> 06:35.720
I don't have to think about also.

06:35.720 --> 06:39.680
This new focus is also important because when you look at the trends going on in the Linux

06:39.680 --> 06:45.680
desktop right now, adoption of this Pipewire approach for access to video devices should

06:45.680 --> 06:51.040
also allow both sandboxed and non-sandbox applications to share those resources in a

06:51.040 --> 06:53.400
way that doesn't blow up your system.

06:53.400 --> 06:58.560
Yeah, it means we will have, regardless if it's a snap, a flat pack or an application

06:58.560 --> 07:04.520
installed from your repository, we are going to have a truly unified video and audio API

07:04.520 --> 07:09.440
for Linux, something honestly that before the Pipewire project launched, I truly thought

07:09.440 --> 07:11.240
we would never have.

07:11.240 --> 07:14.480
And I kind of was a little sad about it as a content producer.

07:14.480 --> 07:17.640
I really felt like this was something truly missing.

07:17.640 --> 07:22.200
And to see the project refocus now on video and come at it in a way where they're looking

07:22.200 --> 07:25.880
from the very beginning for community adoption and they're going to reuse components where

07:25.880 --> 07:30.200
it makes sense today, I just think this is a fantastic approach.

07:30.200 --> 07:32.720
Developers should be able to get started pretty quickly too because they'll be able to take

07:32.720 --> 07:37.520
advantage of the well-established and documented Gstreamer, which will just now have a Pipewire

07:37.520 --> 07:38.780
plugin.

07:38.780 --> 07:44.800
And just doing that, developers will be able to take advantage of a modern, fully unified

07:44.800 --> 07:48.960
multimedia subsystem that runs on a free operating system.

07:48.960 --> 07:54.660
And for us end users, hopefully this all just means that our audio and video applications

07:54.660 --> 07:57.180
just work as we expect.

07:57.180 --> 08:01.600
And for AV dorks like you and I, Chris, hopefully it means our modern and professional gear

08:01.600 --> 08:06.200
will also find some better support.

08:06.200 --> 08:10.520
Docker Compose, a tool that lets you simply set up one or many applications in a container

08:10.520 --> 08:15.320
via an easy to read YAML file, got its first major update in quite a while.

08:15.320 --> 08:22.080
The big change with version 2.0 is Docker Compose is no longer a standalone package

08:22.080 --> 08:24.360
or application.

08:24.360 --> 08:30.240
Compose has been entirely rewritten in Go and it's now just a Docker plugin.

08:30.240 --> 08:33.520
For end users, not much is really changing.

08:33.520 --> 08:38.260
When you execute it now on the command line, instead of executing docker-compose, you're

08:38.260 --> 08:41.160
now just going to run docker-compose.

08:41.160 --> 08:46.240
As for how you're going to get it, well, you can't install it from pip anymore, but we

08:46.240 --> 08:50.980
do expect distros to package it with Docker or maybe change their existing Docker Compose

08:50.980 --> 08:53.880
package to install the new plugin.

08:53.880 --> 08:54.880
I don't know.

08:54.880 --> 08:58.900
It's not yet fully clear exactly how they're going to pass this change on, but we should

08:58.900 --> 09:03.120
note that Docker has a transition tool out there, a little helper alias script that kind

09:03.120 --> 09:06.080
of bridges the gap between 1.x and 2.0.

09:06.080 --> 09:08.760
So maybe distributions will just ship that.

09:08.760 --> 09:12.760
You know, as somebody who doesn't use this tooling on the daily, and I have to figure

09:12.760 --> 09:17.840
there's a few in the audience out there like this too, I maybe use it a few times a month.

09:17.840 --> 09:22.620
From where I sit, my perspective as a Docker user is it feels like they're constantly changing

09:22.620 --> 09:24.640
and messing with the tooling a little bit.

09:24.640 --> 09:25.960
I know you use it a lot more.

09:25.960 --> 09:28.720
So do you get that sense as a daily user?

09:28.720 --> 09:29.720
Yes.

09:29.720 --> 09:35.000
And no, I would say no for the core technology, you know, like the actual Docker daemon and

09:35.000 --> 09:36.000
command line.

09:36.000 --> 09:39.920
Yes, there have been some changes, but from an end user perspective, nothing too crazy.

09:39.920 --> 09:44.520
But for Docker desktop, you know, that Mac and Windows application and for some of the

09:44.520 --> 09:45.520
Compose stuff.

09:45.520 --> 09:46.520
Yes.

09:46.520 --> 09:49.900
I mean, I think we kind of had to expect some of it after they sold off their enterprise

09:49.900 --> 09:55.680
business and started focusing more on the developer experience side of the story.

09:55.680 --> 09:59.640
And Compose has kind of been an awkward stepchild from the start, you know, it was this third

09:59.640 --> 10:04.640
party extra edition on the side, sure, you know, it was from the same people, but I never

10:04.640 --> 10:07.760
really got a great sense of just how integral the project really treated it.

10:07.760 --> 10:10.100
So in that sense, I think this is a step forward.

10:10.100 --> 10:11.600
But you're right, it is a change.

10:11.600 --> 10:13.080
Yeah, I totally agree.

10:13.080 --> 10:15.680
It never really made sense as a separate package.

10:15.680 --> 10:20.340
And it felt like this isn't like a core part of the project.

10:20.340 --> 10:24.960
And so even a change like this that makes sense, and I'm glad they're making this change,

10:24.960 --> 10:31.400
actually it seems sensible, it leaves me feeling like maybe long term Podman is in my future

10:31.400 --> 10:36.280
because that tooling is using a lot of established stuff already built into Linux that doesn't

10:36.280 --> 10:39.120
change as much and it feels like long term.

10:39.120 --> 10:44.500
For my use case, that's a more stable tooling trajectory, I guess we'll just have to see.

10:44.500 --> 10:50.120
Just a quick note for you Raspberry Pi four fans out there, self hosted guest and active

10:50.120 --> 10:56.160
YouTuber Jeff Geerling recently noticed that the Raspberry Pi 400's very slightly upgraded

10:56.160 --> 11:01.440
CPU has now made its way to the standard Pi four.

11:01.440 --> 11:06.920
This low key spec bump changes the amount of memory addressable by the eMMC and the

11:06.920 --> 11:14.640
PCIe bus, and that means extra memory addressing space, a big boon for those eight gig Pi four

11:14.640 --> 11:15.640
users.

11:15.640 --> 11:20.480
Also, the CPU revision is known for running slightly cooler.

11:20.480 --> 11:24.800
Jeff suggested the Compute Module four remains the best option for those wanting to mess

11:24.800 --> 11:34.080
around with PCIe peripherals, however, we'll have a link to his post in the show notes.

11:34.080 --> 11:39.640
Hello listeners, please do excuse this out of time clip from a very near future.

11:39.640 --> 11:47.880
I'm out here working on a physical box and it reminds me of how I got started in IT.

11:47.880 --> 11:53.480
When I deployed a server, that meant working with a vendor to spec a box and getting a

11:53.480 --> 12:00.600
PO quote, taking that to management and having them approve that purchase, and then I would

12:00.600 --> 12:06.160
go back to my representative and order it, a couple of weeks would go by and I'd get

12:06.160 --> 12:11.960
a chassis, an empty chassis, and then I'd get the CPU and the memory and the disk and

12:11.960 --> 12:17.920
the network controller and the SCSI controller and all of it in separate boxes, then I would

12:17.920 --> 12:26.360
assemble that server, like it might have been an HP Proliant or we did some IBM servers

12:26.360 --> 12:32.320
for a while and Dells, the power edges, lots of Dells, and then we would put them in a

12:32.320 --> 12:39.140
rack and that meant carrying this heavy box and installing rails into a rack and then

12:39.140 --> 12:43.120
mounting the thing into those rails, which there was different rail systems all the time

12:43.120 --> 12:47.440
so each one was unique, in fact some of the racks couldn't even be compatible with other

12:47.440 --> 12:52.320
rails, it was very frustrating, then you had to run the power and the KVM so you could

12:52.320 --> 12:56.200
get access to the console and the networking and then you had to provision that hardware

12:56.200 --> 12:59.280
and it would basically do one application.

12:59.280 --> 13:04.240
And today when I think about how easy it is to deploy infrastructure on Leno, it just

13:04.240 --> 13:10.640
completely blows my mind, like I in just a few clicks can have access to power that even

13:10.640 --> 13:18.460
if I had an unlimited budget as one guy, I couldn't have access to the networking infrastructure,

13:18.460 --> 13:24.480
they are their own ISP and I just would never be able to do that, and you know the great

13:24.480 --> 13:28.640
thing about Leno too, it's like what they focused on forever, so now they are the world's

13:28.640 --> 13:33.600
largest independent cloud provider and they're just investing in making it better and better,

13:33.600 --> 13:39.120
they just recently upgraded their block storage to have faster PCIe NVMe drives and here I'm

13:39.120 --> 13:43.480
sitting here thinking like how am I going to get all these disks in this physical box

13:43.480 --> 13:46.960
and of course I can't transition these disks to the new server I'm going to be putting

13:46.960 --> 13:51.720
in here because they're a totally different size, not to mention I'm not even sure if

13:51.720 --> 13:57.400
the interface is the same, oh man it's so much simpler with Leno and you know they're

13:57.400 --> 14:01.680
30 to 50% cheaper than the major hyperscalers that are just trying to lock you in all the

14:01.680 --> 14:07.720
time, Leno has things like S3 compatible object storage, cloud firewalls, DDoS protection,

14:07.720 --> 14:13.800
a powerful DNS manager and then on top of it they just run really great servers, if

14:13.800 --> 14:18.440
you want it to run on Linux and you want it to run great, just put it on Leno, I don't

14:18.440 --> 14:24.520
know man, these old physical boxes, that's for the blokes working in data centers now,

14:24.520 --> 14:30.000
linode.com slash LAN, go there, get $100 in 60 day credit on a new account and you support

14:30.000 --> 14:34.720
the show, linode.com slash LAN.

14:34.720 --> 14:40.400
And thank you to Ting for sponsoring this episode of Linux Action News, linux.ting.com,

14:40.400 --> 14:44.880
Ting is a mobile virtual network operator, in short what that means is instead of spending

14:44.880 --> 14:48.920
their money digging holes in the ground to stand up a tower, they can focus on building

14:48.920 --> 14:54.200
out excellent customer service and figuring out where they can add true value and differentiate

14:54.200 --> 14:56.080
from the duopoly out there.

14:56.080 --> 15:01.240
And that means you get better prices but get access to the big carrier networks, Ting Mobile

15:01.240 --> 15:06.800
has nationwide coverage, a great mix of plans and they have LTE and 5G data.

15:06.800 --> 15:11.480
And something I really appreciate since being a customer since 2003, Ting's plans are simple

15:11.480 --> 15:17.080
and easy to understand, they're just a smarter choice, I would encourage you to go to linux.ting.com

15:17.080 --> 15:23.520
and see how much you could save and then take $25 off by visiting linux.ting.com.

15:23.520 --> 15:29.160
They have plans that literally start at $10 and top out around $55 and they have great

15:29.160 --> 15:35.000
family plans where you can share a pool of data and have unlimited calls and texts and

15:35.000 --> 15:40.240
of course all of the plans, all of the plans get access to LTE and 5G where it's at.

15:40.240 --> 15:44.080
But I think maybe the best thing about Ting and ironically maybe one of the reasons I've

15:44.080 --> 15:48.920
stayed with them as long as I have, they have no contracts, no contracts ever.

15:48.920 --> 15:52.640
So not only is it super simple to switch to Ting and they have multiple network support

15:52.640 --> 15:57.080
so most phones work but you also never get locked into a contract.

15:57.080 --> 16:01.240
Just go see how easy and simple it is to switch by going to linux.ting.com, check out your

16:01.240 --> 16:04.720
current phone, create an account, you pick the plan that's just right for you.

16:04.720 --> 16:07.780
Once everything looks good to go Ting will send you a SIM card, you pop that in your

16:07.780 --> 16:11.720
phone and then you're going to get activated in minutes and like I always say, they have

16:11.720 --> 16:15.360
a clean beautiful dashboard that sets the bar for the industry.

16:15.360 --> 16:18.880
So much of what you're going to want to get done when it comes to your account and your

16:18.880 --> 16:21.560
service you can do it through the dashboard.

16:21.560 --> 16:25.560
So go check out the Ting website by going to linux.ting.com and while you're there visit

16:25.560 --> 16:29.480
the blog, that's where they do giveaways and kind of tech tips and all that kind of stuff.

16:29.480 --> 16:34.260
Cutting your phone bill in half has never been easier with Ting's brand new plans.

16:34.260 --> 16:39.800
Go to linux.ting.com, it's the next generation of Ting Mobile, it's never been a better time

16:39.800 --> 16:41.360
to become a customer.

16:41.360 --> 16:49.200
So go to linux.ting.com, see how much you could save and take 25 bucks off that, linux.ting.com.

16:49.200 --> 16:56.080
It caught our eye this week that an experimental open-source self-hosted SnapStore server

16:56.080 --> 17:03.200
with the name LOL has been released for testing on most distributions that support Snap.

17:03.200 --> 17:09.600
In addition, back in June, Project Kebe was announced another open-source SnapStore implementation.

17:09.600 --> 17:15.200
Yeah, not just one but two of them, I mean that's good to see, I suppose the question

17:15.200 --> 17:22.360
I have is why now, this has always been possible and I just wonder if it isn't just more buy-off

17:22.360 --> 17:25.600
on the concept of universal sandboxed applications.

17:25.600 --> 17:29.440
We touched on this recently when we mentioned Firefox would be shipping as a Snap on Ubuntu

17:29.440 --> 17:31.840
and there just wasn't a big reaction to it.

17:31.840 --> 17:36.760
Now we see maybe another data point that these are just becoming a little more accepted as

17:36.760 --> 17:41.200
a way to distribute software and I've also heard from folks that are using universal

17:41.200 --> 17:46.560
packages in production and enterprise environments that snaps tend to work, well just do work

17:46.560 --> 17:51.520
in headless and server environments but major enterprise providers are going to want to

17:51.520 --> 17:56.820
host these repositories locally, something they can't really do with Snap today but perhaps

17:56.820 --> 17:59.280
that's driving some of these projects.

17:59.280 --> 18:03.480
I'm not sure but if you have an idea out there, dear audience, let us know, linuxactionnews.com

18:03.480 --> 18:04.520
slash contact.

18:04.520 --> 18:10.400
Why are we just now seeing self-hosted SnapStores?

18:10.400 --> 18:15.400
We like to keep a close eye on major moves in the cloud market, after all, the cloud

18:15.400 --> 18:22.440
is powered by Linux and if we're being honest, it's also what pays the bills for Linux.

18:22.440 --> 18:28.120
So that's why we need to talk about Cloudflare's recent announcement of R2, an S3 compatible

18:28.120 --> 18:35.480
object storage service that has no egress cost and can sit in front of Amazon S3.

18:35.480 --> 18:41.440
And while Amazon S3's prices have come down over the years, it's definitely not free.

18:41.440 --> 18:46.560
R2 can really sit in front of any S3 compatible object storage, which that could have some

18:46.560 --> 18:51.520
seriously interesting ramifications when you're looking at using multiple cloud providers.

18:51.520 --> 18:57.040
But going to the Amazon example here because that's clearly going to be the big impact,

18:57.040 --> 18:58.120
Cloudflare has been pretty clever.

18:58.120 --> 19:03.480
You can layer this in front of Amazon S3, pull the files out of S3 once, store them

19:03.480 --> 19:09.560
on R2 and then serve them there with no egress costs ongoing besides the service costs.

19:09.560 --> 19:13.360
That's really going to shake up the lower end of the market and AWS has made a bit of

19:13.360 --> 19:19.640
an empire on being cheap to get files into S3 and then costly to get them out.

19:19.640 --> 19:27.480
Yeah, it seems very clear that R2, notably one less than S3, is going directly at a cost

19:27.480 --> 19:34.560
sensitive market, an area their CEO has been focused on since their launch in 2010.

19:34.560 --> 19:39.360
Here's Matthew Prince at TechCrunch Disrupt 2010 during a Q&A that asked him how he could

19:39.360 --> 19:42.080
prevent Amazon from eating his lunch.

19:42.080 --> 19:47.600
So from a competitive standpoint, obviously, you're intruding on some of the stuff that

19:47.600 --> 19:52.760
the bigger boys are doing and they've been at this for a long time.

19:52.760 --> 19:56.480
What's to stop them from coming in and sort of replicating your model?

19:56.480 --> 20:01.120
Yeah, there are companies that are doing things at the high end of the market and they make

20:01.120 --> 20:04.320
very fat margins doing them.

20:04.320 --> 20:07.960
I'm really a big fan of Clay Christensen, he was a business school professor of mine

20:07.960 --> 20:10.920
and I like the idea of businesses that come in from below.

20:10.920 --> 20:15.700
So the big incumbents have an innovators dilemma trying to come down and deal with a company

20:15.700 --> 20:19.920
like ours but we welcome the competition, we think we make a really great product, it's

20:19.920 --> 20:24.140
designed for a certain type of users that's very different from the users that a larger

20:24.140 --> 20:26.800
company might be trying to attract.

20:26.800 --> 20:31.400
Just as Amazon leveraged their infrastructure that they were building to support their e-commerce

20:31.400 --> 20:36.220
business, Cloudflare can leverage the DDoS absorption network that they've built out,

20:36.220 --> 20:42.020
the boxes they have at ISPs and all the network links that they've already paid for.

20:42.020 --> 20:46.840
Since their launch in 2010, Prince has said that their goal is to become the number four

20:46.840 --> 20:47.840
cloud provider.

20:47.840 --> 20:52.800
No matter how you slice it though, the cloud market has massive ramifications for Linux

20:52.800 --> 20:53.800
and Linux adoption.

20:53.800 --> 20:57.160
We'll keep an eye on everything and all the stories in the world of Linux and open source

20:57.160 --> 21:02.160
so be sure you go to linuxactionnews.com slash subscribe for all the ways to get new episodes.

21:02.160 --> 21:06.400
And linuxactionnews.com slash contact for ways to keep in touch.

21:06.400 --> 21:11.800
And be sure to check out Linux Unplugged 425, we cover our recent server crash and the big

21:11.800 --> 21:13.680
upgrades we have planned.

21:13.680 --> 21:18.340
As for us, we'll be back next Monday with our weekly take on the latest Linux and open

21:18.340 --> 21:19.520
source news.

21:19.520 --> 21:38.520
Thanks for joining us and that's all the news for this week.


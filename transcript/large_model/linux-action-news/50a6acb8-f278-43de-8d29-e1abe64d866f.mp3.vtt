WEBVTT

00:00.000 --> 00:10.000
Hello, and welcome to Linux Action News, episode 116, recorded on July 28th, 2019.

00:10.000 --> 00:11.000
I'm Chris.

00:11.000 --> 00:12.000
And I'm Joe.

00:12.000 --> 00:13.000
Hello, Joe.

00:13.000 --> 00:14.000
Good to be connected with you.

00:14.000 --> 00:17.760
We start this week with the introduction of Fedora Core OS.

00:17.760 --> 00:20.400
The core is back, and this time it's better than ever, Joe.

00:20.400 --> 00:25.060
Yeah, this is the first preview release, and it's very much a successor to Fedora Atomic

00:25.060 --> 00:30.240
Host and also Core OS, which Red Hat bought last year.

00:30.240 --> 00:34.800
And we've been wondering where Core OS was going to fit in with CentOS and Fedora, and

00:34.800 --> 00:35.800
now we know.

00:35.800 --> 00:41.360
Fedora Core OS combines the provisioning tools, the automatic update model, and the philosophy

00:41.360 --> 00:47.320
of containers with packaging technology, with SE Linux baked into all of it.

00:47.320 --> 00:50.620
That's essentially the Fedora Core OS proposition.

00:50.620 --> 00:55.160
The idea is the isolation that's provided by those containers means that the host OS

00:55.160 --> 01:03.880
can be really tiny and potentially, like Fedora Core OS, automatically updated without regular

01:03.880 --> 01:05.440
admin interaction.

01:05.440 --> 01:09.960
So the idea being that you don't actually run anything on the host system, you run everything

01:09.960 --> 01:11.140
in containers.

01:11.140 --> 01:14.280
Which is becoming more and more of a common practice as it is.

01:14.280 --> 01:19.340
It's essentially for 99% of everything we now host here at the studio, it's all in containers

01:19.340 --> 01:24.600
with NetData being the only application we run on the physical host.

01:24.600 --> 01:29.080
And in the case of Core OS, even the installation process of the OS is pretty different.

01:29.080 --> 01:32.000
It provisions itself with a tool called Ignition.

01:32.000 --> 01:37.160
It runs containers with Red Hat's Podman and Mobi and updates itself automatically with

01:37.160 --> 01:39.800
RPM OS tree.

01:39.800 --> 01:44.420
Core OS is really the stab at an immutable operating system.

01:44.420 --> 01:49.160
Immutable infrastructure is this idea that you could blow away stuff and rebuild without

01:49.160 --> 01:51.160
any real losses.

01:51.160 --> 01:56.060
And containers get you close, just like VMs do, that both are really good solutions.

01:56.060 --> 02:01.140
This is for folks that are focusing more on the container side of those solutions.

02:01.140 --> 02:06.680
So when it first boots up, it uses Ignition to provision the system, and then it reads

02:06.680 --> 02:09.720
a config file from a remote URL.

02:09.720 --> 02:15.300
It uses the information in that config file to create the disk partitions, the file systems,

02:15.300 --> 02:20.840
the users, creates a system to units, and then you have a box that you SSH into and

02:20.840 --> 02:23.720
start standing up containers and running applications.

02:23.720 --> 02:27.420
And then the host operating system just sort of runs itself, self-updates.

02:27.420 --> 02:29.600
You can roll back if there's an issue.

02:29.600 --> 02:33.820
It's a really solid proposition for workloads that work well in containers.

02:33.820 --> 02:39.560
When you need a solid base OS that is secure and maintained to run those, it's a really

02:39.560 --> 02:40.560
solid product.

02:40.560 --> 02:45.840
And I'm really glad to see we're kind of getting the results of that acquisition of CoreOS.

02:45.840 --> 02:48.800
I don't think this is really targeted for anyone on the desktop yet.

02:48.800 --> 02:51.120
That's going to be more of Silverblue's role.

02:51.120 --> 02:55.120
But on the server, I could see within a year or two this being something that we migrate

02:55.120 --> 02:56.680
our Fedora servers over to.

02:56.680 --> 02:57.680
I don't know.

02:57.680 --> 03:02.560
It seems to me that it's designed to run more at scale rather than on individual machines.

03:02.560 --> 03:07.520
It's supposed to be sort of managed by Kubernetes or Ansible or something, rather than something

03:07.520 --> 03:12.200
that you're going to install on one physical box in your garage like you.

03:12.200 --> 03:18.840
I would agree, with the exception that managing systems with maybe not just one system, but

03:18.840 --> 03:23.040
if you have more than one system, managing them with something like Ansible is becoming

03:23.040 --> 03:24.040
the common practice.

03:24.040 --> 03:29.140
And that's how Red Hat's really directing a lot of future trainees is to manage their

03:29.140 --> 03:32.100
systems with Ansible and deploy with these tools.

03:32.100 --> 03:37.040
So it's becoming more common to use those tools even for really small infrastructure.

03:37.040 --> 03:42.440
And in our case, we've got a Fedora server here in the studio that does quite a bit of

03:42.440 --> 03:43.440
work for us.

03:43.440 --> 03:46.760
And then we've got a couple of Fedora servers up in the cloud.

03:46.760 --> 03:50.420
And you could use one tool to manage all three of those systems.

03:50.420 --> 03:54.720
And Fedora Core OS would be a perfectly good solution for what we do, with the exception

03:54.720 --> 03:55.780
of NetData right now.

03:55.780 --> 03:57.720
But that's a solvable problem.

03:57.720 --> 04:02.200
So they're going to have three editions of this, testing, next, and stable.

04:02.200 --> 04:05.360
And they've only got testing available at the moment.

04:05.360 --> 04:07.440
And they don't recommend it for production.

04:07.440 --> 04:14.140
The idea is that you'd have a few instances of testing so that you can then find the bugs

04:14.140 --> 04:15.840
and report them.

04:15.840 --> 04:20.120
But the majority of your workloads would be running on the stable edition.

04:20.120 --> 04:21.160
And something jumped out at me.

04:21.160 --> 04:25.600
They said that Fedora Atomic Host will be maintained until the end of life of Fedora

04:25.600 --> 04:29.720
29, which is expected in late November.

04:29.720 --> 04:36.080
But they also say that they expect the preview period to continue for about six months for

04:36.080 --> 04:37.120
Fedora Core OS.

04:37.120 --> 04:42.120
So there's not going to be much time to migrate your production systems over if you're running

04:42.120 --> 04:43.560
Atomic Host.

04:43.560 --> 04:49.280
However, assuming you've set up things correctly, moving containers to a new system shouldn't

04:49.280 --> 04:55.800
be that risky because the state should be saved outside the container and the configuration

04:55.800 --> 04:56.880
as well.

04:56.880 --> 05:00.940
And then you just have the application and its resources inside the container.

05:00.940 --> 05:04.560
You move them, reconnect them with the configuration of state, and you should be good in theory.

05:04.560 --> 05:06.400
Of course, I get to say that.

05:06.400 --> 05:08.400
I'm not the one that have to do it.

05:08.400 --> 05:10.080
But yeah, that is really tight.

05:10.080 --> 05:14.160
And it seems right now it's not just Atomic Host, but also Core OS container Linux users

05:14.160 --> 05:16.160
also have to migrate.

05:16.160 --> 05:20.120
Six months after Fedora Core OS is declared stable, which who knows when that is.

05:20.120 --> 05:22.520
But they also will be facing that same transition.

05:22.520 --> 05:27.120
Yeah, but they'll have six months of stable to play with, whereas Fedora Core OS users

05:27.120 --> 05:28.120
won't.

05:28.120 --> 05:33.440
But then I suppose Fedora generally has always been aimed at more agile shops.

05:33.440 --> 05:39.200
If you've got real infrastructure at scale, the chances are you'll be using Red Hat rather

05:39.200 --> 05:40.200
than Fedora.

05:40.200 --> 05:41.200
Yeah.

05:41.200 --> 05:46.780
It seems like agile shops like ours where we can just say, well, let's go fix it, please.

05:46.780 --> 05:48.240
It makes more sense to use Fedora.

05:48.240 --> 05:51.520
So it's probably not going to be a huge problem for that many people.

05:51.520 --> 05:53.240
But I know it might trip some people up.

05:53.240 --> 05:57.280
You know, I'll tell you, Joe, there was a time in my career where I really took every

05:57.280 --> 06:02.800
opportunity I could to migrate every RHEL and CentOS server to Debian or Ubuntu.

06:02.800 --> 06:08.640
If the client was even passively interested, I would seize that opportunity because I hated

06:08.640 --> 06:12.420
working on RPM based distributions as servers.

06:12.420 --> 06:16.960
Drove me crazy, especially ones that got to be about three or four years old, or the ones

06:16.960 --> 06:20.940
that were so old, they were no longer under support at all, which is a really long time

06:20.940 --> 06:21.940
for RHEL systems.

06:21.940 --> 06:23.680
I hated it.

06:23.680 --> 06:28.360
And now I'm the guy on the team that's saying, let's put Fedora on everything.

06:28.360 --> 06:31.560
And that makes the sysadmin in me just go crazy thinking about it because Fedora is

06:31.560 --> 06:35.160
a short term distribution, et cetera, et cetera, et cetera, moves too fast, new, blah, blah,

06:35.160 --> 06:36.160
blah.

06:36.160 --> 06:37.160
I don't like new.

06:37.160 --> 06:41.760
But the reality is it's become a very viable platform.

06:41.760 --> 06:46.200
And that group has worked on upgrades and they have worked on making the packaging system

06:46.200 --> 06:47.800
fast and tidy and safe.

06:47.800 --> 06:53.060
It is a stellar distribution now amongst many great distributions.

06:53.060 --> 06:57.360
If they could ease the pain of automatic updates so that we are always rolling to the next

06:57.360 --> 07:00.880
version of Fedora, that could be brilliant.

07:00.880 --> 07:04.240
And if down the road you could pick the pace, it's what you want.

07:04.240 --> 07:06.480
Maybe you wanted something that was more stable.

07:06.480 --> 07:08.920
Maybe you wanted something that's a little more cutting edge.

07:08.920 --> 07:10.640
That could have a lot of potential.

07:10.640 --> 07:15.040
But now imagine what this will be like when it's manifested as RHEL.

07:15.040 --> 07:21.720
Because if it's Fedora now, it's likely upstream to a RHEL project in the future.

07:21.720 --> 07:26.360
We could end up having a version of RHEL where you can turn the knob and have a really hyper

07:26.360 --> 07:29.980
current almost Fedora style RHEL, but it's still genuine RHEL.

07:29.980 --> 07:34.100
Or you turn that knob down and it's more like a traditional enterprise Linux.

07:34.100 --> 07:37.140
And that could be a really nice improvement for RHEL.

07:37.140 --> 07:40.700
It really would ease those old pain points I used to run into in systems that were three

07:40.700 --> 07:44.280
or four years old and people are trying to deploy modern web applications.

07:44.280 --> 07:46.040
Yeah, and other applications as well.

07:46.040 --> 07:49.920
You can really see Red Hat's kind of long term play here, can't you?

07:49.920 --> 07:52.440
Becoming more modern and keeping up with the market.

07:52.440 --> 07:57.840
There's a reason why they're the market leader, because they are forward thinking like this.

07:57.840 --> 08:00.360
And they're testing this all out now with Fedora.

08:00.360 --> 08:04.300
And yeah, it's almost certainly the best of it is going to go into RHEL at some point.

08:04.300 --> 08:09.320
It might be a year or two, and they'll be in a very good market position there once

08:09.320 --> 08:10.320
they do it.

08:10.320 --> 08:15.340
But even the whole IBM Red Hat acquisition and their focus on the hybrid cloud right

08:15.340 --> 08:20.520
now, I could also see a scenario where this is realized as a RHEL product, but not as

08:20.520 --> 08:27.320
a traditional RHEL Linux release, but something that's perhaps folded into OpenShift or something

08:27.320 --> 08:30.000
that they expand upon with the universal base image.

08:30.000 --> 08:36.480
Fedora Core OS to me feels like a very important chess piece in a wider strategy that Red Hat

08:36.480 --> 08:41.440
is playing towards with their quote unquote hybrid cloud strategy that involves OpenShift

08:41.440 --> 08:47.180
containers and infrastructure management deployment across on premises and public clouds.

08:47.180 --> 08:50.580
And they are now really focusing on multiple public clouds.

08:50.580 --> 08:55.760
Core OS will likely be that very important software glue that ties everything together

08:55.760 --> 08:58.000
along with OpenShift pulling all of the strings.

08:58.000 --> 09:03.520
Yeah, I can't disagree with that, but I can disagree with some of the reporting of a VLC

09:03.520 --> 09:04.580
story this week.

09:04.580 --> 09:08.880
I'm really glad we took the time to look into this one and didn't run with your VLC is busted.

09:08.880 --> 09:14.520
Your VLC is busted, but widespread reports of a quote critical security issue that supposedly

09:14.520 --> 09:20.520
impacted users of VLC media player was debunked this week by the VLC developers.

09:20.520 --> 09:25.840
It all started when a German computer engineer response team, part of the Federal Office

09:25.840 --> 09:31.800
for Information Security, pushed out an advisory warning network administrators and other users

09:31.800 --> 09:35.760
of a high impact vulnerability in VLC.

09:35.760 --> 09:43.280
It seems the advisory can be tracked back to a ticket that was opened on VLC in their

09:43.280 --> 09:46.280
public tracker about four weeks ago.

09:46.280 --> 09:52.200
It was allegedly a heat based buffer overflow flaw that the user discovered and then reported

09:52.200 --> 09:54.280
not through the traditional channels.

09:54.280 --> 09:57.080
And then these folks picked up and sounded the alarm.

09:57.080 --> 10:01.640
And then Videoland, the makers of VLC, hit back saying, well, hang on, no, we patched

10:01.640 --> 10:04.140
this over a year ago.

10:04.140 --> 10:05.560
And there's no problem.

10:05.560 --> 10:08.600
This is someone who's obviously running an old version or something.

10:08.600 --> 10:10.720
But it's actually a little bit more nuanced than that.

10:10.720 --> 10:11.720
Right.

10:11.720 --> 10:17.460
The issue really exists in one of the many under lying libraries that VLC depends on.

10:17.460 --> 10:23.400
In this case, it was lib ebml, which is a library to parse ebml files, which kind of

10:23.400 --> 10:26.840
comes into play with MKV files often.

10:26.840 --> 10:31.280
The flaw existed there in the distribution the user was on.

10:31.280 --> 10:36.280
So thus it impacted VLC, but it wasn't actually VLC's fault.

10:36.280 --> 10:40.680
And it turns out that I guess upstream developers didn't really know that there was a security

10:40.680 --> 10:41.680
issue in this library.

10:41.680 --> 10:45.760
I mean, they knew there was a bug, but it wasn't clear that it was a security issue.

10:45.760 --> 10:50.120
Yeah, because the version number got ramped by the upstream.

10:50.120 --> 10:54.440
But Ubuntu didn't patch it in 1804 because it was considered a new version and there

10:54.440 --> 10:56.760
was no security advisory.

10:56.760 --> 11:01.000
And so it sat there unpatched with this potential security vulnerability.

11:01.000 --> 11:06.240
And so it was only when it came to this week that Ubuntu patched it, added a dash two to

11:06.240 --> 11:09.180
the version number, and the problem is solved.

11:09.180 --> 11:14.200
And so really it comes down to the maintainer of that library not flagging up that there

11:14.200 --> 11:15.760
was a security issue there.

11:15.760 --> 11:16.760
Right.

11:16.760 --> 11:17.760
And VLC is a tricky one.

11:17.760 --> 11:19.640
It touches a lot of different things on the web.

11:19.640 --> 11:24.180
It has a lot of power, I guess you could say, and it does depend on a lot of libraries.

11:24.180 --> 11:26.360
In this case, though, it wasn't really VLC's fault.

11:26.360 --> 11:31.720
In fact, Videoland president John Baptiste was having a bit of a riff on this issue.

11:31.720 --> 11:34.040
This is kind of like the funny side tangent story here.

11:34.040 --> 11:36.160
I like this poll quote right here.

11:36.160 --> 11:42.000
If you report a security issue, at least update your Linux distribution.

11:42.000 --> 11:43.000
That was good.

11:43.000 --> 11:44.000
That was good.

11:44.000 --> 11:47.980
And also they were quite annoyed that they submitted to the public list and not the actual

11:47.980 --> 11:49.320
private security list.

11:49.320 --> 11:50.800
Yeah, that wasn't done properly.

11:50.800 --> 11:54.920
But to be fair, you could have been on a fully up to date 1804 and had this issue when it

11:54.920 --> 11:55.920
was reported.

11:55.920 --> 11:56.920
Yeah.

11:56.920 --> 11:57.920
Because Ubuntu didn't know about it.

11:57.920 --> 12:02.600
It does kind of show you how tricky it is to do legitimately good security reporting

12:02.600 --> 12:06.040
in an open source ecosystem with lots of libraries like this.

12:06.040 --> 12:13.160
You need to be really careful where you're assigning blame and all of your due diligence.

12:13.160 --> 12:14.320
You have to make sure you're up to date.

12:14.320 --> 12:18.080
You have to make sure your distribution has properly packaged those things.

12:18.080 --> 12:22.240
Then once you've got all of those things checked off, you can then move upstream to the project.

12:22.240 --> 12:24.940
And then you need to figure out how to work with that individual project.

12:24.940 --> 12:27.720
Because if you do it in the wrong way, you're going to aggravate them.

12:27.720 --> 12:31.320
And because this was on a public list, an entirely different entity, one that is well

12:31.320 --> 12:35.360
respected in the space, was able to take this and run with it.

12:35.360 --> 12:39.740
And it really caused quite a bit of stink for VLC and some really aggressive headlines

12:39.740 --> 12:46.880
were out there, like bad ones, VLC plagued by unpatched critical remote execution flaw.

12:46.880 --> 12:51.480
And that's bad PR for a project like VLC that has a lot of competition in this space now.

12:51.480 --> 12:53.920
I can understand why they got frustrated and annoyed.

12:53.920 --> 12:57.920
What's funny is that I actually switched back to VLC this week because GNOME MPV was starting

12:57.920 --> 13:01.600
to drop frames later on in videos.

13:01.600 --> 13:03.400
And I thought there was something wrong with the hardware at first.

13:03.400 --> 13:06.620
I was like, let me just try VLC and it works fine.

13:06.620 --> 13:08.940
So I think I'm converted back.

13:08.940 --> 13:12.680
But there's a video of a talk that I watched recently from Jean-Baptiste.

13:12.680 --> 13:20.260
And he really goes on about the nightmare that it is to be VLC, having so many people

13:20.260 --> 13:22.960
reporting bugs to them.

13:22.960 --> 13:28.360
Things as stupid as your source code is available, as if people think that's a bug and it just

13:28.360 --> 13:31.440
it does sound like a nightmare to run a project of that size.

13:31.440 --> 13:35.100
And he talks about some of the numbers, I just could not believe that the number of

13:35.100 --> 13:40.000
people downloading it, I suppose mostly for Windows.

13:40.000 --> 13:45.440
But it is still a very, very popular, I mean, is the de facto for a lot of people.

13:45.440 --> 13:50.960
I know we've moved over to GNOME MPV, a lot of us in the Linux world, but yeah, VLC is

13:50.960 --> 13:51.960
still massive.

13:51.960 --> 13:57.200
I've been shopping around a little bit, trying out different media players like Parole.

13:57.200 --> 14:02.240
I like Dragon Player on Plasma, but VLC is a classic go to.

14:02.240 --> 14:06.240
And at this point, I know it so well, like I know all the different config options.

14:06.240 --> 14:07.400
I just I love it.

14:07.400 --> 14:08.960
It's such a great project.

14:08.960 --> 14:13.300
MPV is also really fantastic if you are looking for an alternative.

14:13.300 --> 14:17.880
When Certbun, the people that published the report from the public posting, I was contacted

14:17.880 --> 14:19.760
asking for some clarification.

14:19.760 --> 14:25.080
This is what they sent back, quote, as far as we know, initial attribution to us was

14:25.080 --> 14:30.400
by Softpedia, who wrongly referenced the public post.

14:30.400 --> 14:33.760
So they're kind of throwing Softpedia under the bus and not taking responsibility for

14:33.760 --> 14:36.280
double checking themselves in that statement.

14:36.280 --> 14:37.280
But I'll pass it along.

14:37.280 --> 14:38.760
I thought that was interesting.

14:38.760 --> 14:43.800
Well, another security issue that came up this week is that Android phones might well

14:43.800 --> 14:46.560
be vulnerable to something called spear phone.

14:46.560 --> 14:50.400
This might be my favorite vulnerability in the last couple of years.

14:50.400 --> 14:55.240
So we'll link to a post by Terra Seals on threat post that goes into more details.

14:55.240 --> 14:58.420
But yeah, it's called spear phone.

14:58.420 --> 15:02.920
Researchers discovered that essentially any audio content that comes through the speakers

15:02.920 --> 15:04.700
when used in speakerphone mode.

15:04.700 --> 15:08.680
So say you're playing a podcast or you're on a speakerphone or you're talking to an

15:08.680 --> 15:17.120
assistant, that audio can be picked up by the accelerometers in the phone as a sound

15:17.120 --> 15:18.120
wave.

15:18.120 --> 15:22.720
It picks up on the reverberations and is able to reproduce sound waves.

15:22.720 --> 15:27.380
And because the accelerometers are always on and don't require any special permissions

15:27.380 --> 15:31.900
in Android to access, any app can read them.

15:31.900 --> 15:36.560
Even web pages can listen to the vibrations going into your phone.

15:36.560 --> 15:38.360
And there's a surprising amount of data.

15:38.360 --> 15:42.880
They can get not only can they put words back together in entire sentences, but they can

15:42.880 --> 15:47.640
even in some cases detect the gender of the speaker.

15:47.640 --> 15:50.240
And it appears to impact multiple Android devices.

15:50.240 --> 15:54.920
Yeah, they tested some LG and Samsung phones, but there's not really any reason why this

15:54.920 --> 16:01.480
wouldn't affect any Android phone unless the accelerometers and speaker properly separated.

16:01.480 --> 16:07.080
But these days, phones are so small and so tightly packed in that seems a virtually impossible

16:07.080 --> 16:08.440
task to me.

16:08.440 --> 16:09.600
This is really something.

16:09.600 --> 16:18.340
It's the vibrations of the phone's body housing being picked up by these sensors, which are

16:18.340 --> 16:20.820
incredibly sensitive.

16:20.820 --> 16:25.840
It's actually a great form of recording because you're not actually capturing live waveform

16:25.840 --> 16:29.680
data, but you're just capturing accelerometer data and then recomposing it.

16:29.680 --> 16:32.400
So it's actually very transmittable, very portable data.

16:32.400 --> 16:37.920
Well, good luck trying to do this to me because even trying to turn my screen to landscape

16:37.920 --> 16:41.600
mode, I have to really shake it sometimes and then to get it back, I have to bang it

16:41.600 --> 16:42.600
on the table and stuff.

16:42.600 --> 16:45.040
So yeah, I don't think mine's too accurate.

16:45.040 --> 16:48.080
I wonder if maybe you got some dust in there.

16:48.080 --> 16:50.920
I was thinking too, how are you going to mitigate this?

16:50.920 --> 16:56.360
The researchers say the Android platform could implement some stricter access control policies

16:56.360 --> 16:57.440
to access the sensors.

16:57.440 --> 17:00.960
That would definitely help, but probably bypassable.

17:00.960 --> 17:05.640
And then the other solution they had was the internal build of the smartphone could be

17:05.640 --> 17:10.440
such that the motion sensors are better isolated from all of the vibrations.

17:10.440 --> 17:15.080
But then the question is, is that even possible with, like you said, how thin and small phones

17:15.080 --> 17:16.240
are now?

17:16.240 --> 17:20.120
And the other question is, would that make them less capable, less sensitive?

17:20.120 --> 17:23.440
They'd be more like your phone where they're really hard to detect movement.

17:23.440 --> 17:25.120
It seems like a lose lose here.

17:25.120 --> 17:26.560
This is a bad one.

17:26.560 --> 17:28.440
And also at the same time, great.

17:28.440 --> 17:34.320
I love it because it's so low tech and so high tech and potentially really hard to solve.

17:34.320 --> 17:35.320
Yeah.

17:35.320 --> 17:39.080
I think there will be a solution to it, but as usual, that's going to be in a future version

17:39.080 --> 17:40.300
of Android probably.

17:40.300 --> 17:42.540
And so most people will never get it.

17:42.540 --> 17:43.540
Motion dampening.

17:43.540 --> 17:44.540
You know what they ought to call it?

17:44.540 --> 17:46.680
They ought to call it the internal dampening field.

17:46.680 --> 17:49.600
Just for me, I would really appreciate that.

17:49.600 --> 17:53.720
Samsung and LG did not immediately respond to a request for comment on the findings.

17:53.720 --> 17:59.360
I would imagine my assumption is they're sitting there going, holy crap, we didn't even think

17:59.360 --> 18:00.360
about that.

18:00.360 --> 18:02.600
Somebody go test that.

18:02.600 --> 18:05.240
It seems so obvious in retrospect, but it's just one of those things.

18:05.240 --> 18:11.520
It's like I heard that using a laser on someone's laptop screen, even through a window of a

18:11.520 --> 18:17.020
hotel or whatever, you can tell what they're typing because each key kind of vibrates the

18:17.020 --> 18:19.800
screen that tiny bit differently and stuff.

18:19.800 --> 18:20.800
No way.

18:20.800 --> 18:21.800
Oh yeah.

18:21.800 --> 18:22.800
That was years ago that I heard that.

18:22.800 --> 18:23.800
Wow.

18:23.800 --> 18:24.800
That is really something.

18:24.800 --> 18:27.080
Well, I guess the other alternative could be switch to Sailfish.

18:27.080 --> 18:28.080
Yeah.

18:28.080 --> 18:30.560
And they had a big release this week, version 3.1.

18:30.560 --> 18:33.840
And it's the first release for about a year.

18:33.840 --> 18:39.320
And there's nothing hugely exciting about it, but it's kind of a spit and polish release.

18:39.320 --> 18:44.080
It shows to me that Sailfish is really starting to mature at this point.

18:44.080 --> 18:45.760
It looks really good.

18:45.760 --> 18:51.200
It looks good enough that if I could get my hands on an Xperia XA2 for a decent price

18:51.200 --> 18:56.120
right now, I found it for about $130 on Amazon, I'd be pretty tempted to pick it up so I could

18:56.120 --> 18:59.280
have a flagship Sailfish OS device.

18:59.280 --> 19:03.480
They've redesigned a lot of their core apps, their people app, phone messages, the clock

19:03.480 --> 19:05.120
app, email calendar.

19:05.120 --> 19:09.600
They now implemented dual SIM card information so you can actually manage dual SIMs in one

19:09.600 --> 19:11.000
of these devices.

19:11.000 --> 19:15.320
They've rolled out file system encryption, which seems huge.

19:15.320 --> 19:20.640
They've implemented a sane and functional API for fingerprint reading.

19:20.640 --> 19:26.380
This is like really taking it to the commercial operating systems now.

19:26.380 --> 19:30.080
And you've got to wonder if maybe there's some motivation with all the recent Huawei

19:30.080 --> 19:35.440
stuff going on that perhaps there's been a new found interest in getting Sailfish OS

19:35.440 --> 19:36.440
up to snuff.

19:36.440 --> 19:37.440
Well, yeah, that and Russia.

19:37.440 --> 19:40.880
There's a lot of Russian money going into Sailfish OS now.

19:40.880 --> 19:45.800
And that's because, well, in that country, there's tensions with the US and they don't

19:45.800 --> 19:49.920
want to be completely dependent on US technology.

19:49.920 --> 19:54.480
Like Chinese companies like Huawei found themselves suddenly cut off.

19:54.480 --> 19:58.080
What strikes me about this story is if you go back in time, you would have seen them

19:58.080 --> 20:04.720
most likely implement their own wacky, totally homebrew OS, maybe be a fork or a rip off

20:04.720 --> 20:09.120
of some commercial operating system even, loaded up with backdoors and government tools

20:09.120 --> 20:13.440
and then it would never go beyond their borders and it would be an irrelevant operating system.

20:13.440 --> 20:15.800
You look back at history, that's been the case.

20:15.800 --> 20:18.000
But something has shifted in the last few years.

20:18.000 --> 20:22.800
And now it's like the free software versions are too good to be ignored.

20:22.800 --> 20:27.560
Even if it's something they have to implement their own solutions on top of, the hardest

20:27.560 --> 20:31.400
problems now are being solved by open source software.

20:31.400 --> 20:33.440
And that's a big shift.

20:33.440 --> 20:37.440
And it might mean that all of these weird geopolitical things that are going on right

20:37.440 --> 20:42.120
now could leave us with an operating system that's better for all of us to use.

20:42.120 --> 20:43.120
We'll see.

20:43.120 --> 20:49.360
I'm really not going to switch to Sailfish anytime soon, but this update, 3.1, this really

20:49.360 --> 20:52.960
looks like from a graphical perspective and from an app functionality perspective, they're

20:52.960 --> 20:56.680
getting on par now with the commercial operating systems.

20:56.680 --> 21:01.280
Their people's app, I feel like is better than anything that's on Android or iOS.

21:01.280 --> 21:06.520
Well, don't forget that although it is based on Linux Sailfish OS, it does have some proprietary

21:06.520 --> 21:10.560
elements so they could probably slip those backdoors in quite easily if they wanted to.

21:10.560 --> 21:13.800
I'm a bit of a pragmatist with it when it comes to this kind of stuff.

21:13.800 --> 21:15.760
I don't know if we're ever going to have a perfect solution for mobile.

21:15.760 --> 21:16.760
Yeah.

21:16.760 --> 21:22.320
And it does seem that of all of the alternatives to Android and iOS, Sailfish is by far the

21:22.320 --> 21:25.080
most well-developed and mature at this stage.

21:25.080 --> 21:29.840
Mozilla caught our attention again this week when they debuted their implementation of

21:29.840 --> 21:34.560
the WebThings Gateway, which essentially is an open source router firmware.

21:34.560 --> 21:35.560
Yeah.

21:35.560 --> 21:39.740
This is based on OpenWRT and it's available on GitHub, but it is still an experimental

21:39.740 --> 21:40.740
build at this stage.

21:40.740 --> 21:41.740
Yeah.

21:41.740 --> 21:42.740
Very much so.

21:42.740 --> 21:45.720
It really is only supporting one mainstream router that's kind of hard to get your hands

21:45.720 --> 21:52.240
on and there is a test build that's compatible with the Raspberry Pi 4, which will probably

21:52.240 --> 21:53.960
be how I try this out.

21:53.960 --> 21:57.160
So for those of you that don't recall, we've talked about it a little bit, but the WebThings

21:57.160 --> 22:02.640
Gateway is like Joe said, an OpenWRT Linux based operating system that's aimed at embedded

22:02.640 --> 22:09.600
devices and is intended to support off the shelf consumer routers and will act as a Wi-Fi

22:09.600 --> 22:10.600
access point.

22:10.600 --> 22:14.160
But there's another bit of this that is really cool.

22:14.160 --> 22:18.000
Internet of Things devices are really great when you get to automation.

22:18.000 --> 22:19.320
That's really where they get nice.

22:19.320 --> 22:23.080
Turn lights on when you're not home, turn a water heater on or off.

22:23.080 --> 22:27.920
There's all kinds of things that once you get into automation are really quite fantastic,

22:27.920 --> 22:30.120
but you need a system to orchestrate all of that.

22:30.120 --> 22:34.200
So maybe you have a temperature sensor and when the room gets to 75 degrees, you want

22:34.200 --> 22:36.680
it to automatically turn on the fan.

22:36.680 --> 22:39.960
Everything has to trigger those actions and that's to take in the sensor data and then

22:39.960 --> 22:42.600
trigger an event based on that data.

22:42.600 --> 22:44.400
WebThings will play that role.

22:44.400 --> 22:50.240
It'll have sets of rules and outputs that you can use to manage devices that trigger

22:50.240 --> 22:53.480
different actions or send emails and reports.

22:53.480 --> 22:58.520
It'll be a central hub to manage all of this stuff that we really don't have right now.

22:58.520 --> 23:03.160
Home assistants allow you to turn lights on and off and they have some rudimentary routine

23:03.160 --> 23:10.220
support but this sensor driven data where event A triggers event B and then notifies

23:10.220 --> 23:16.160
person A, that kind of thing is not really fully here yet without implementing something

23:16.160 --> 23:18.120
more advanced.

23:18.120 --> 23:23.080
This promises to not only be backed by Mozilla, but just run it on your router, which kind

23:23.080 --> 23:24.760
of makes sense anyways for a lot of home users.

23:24.760 --> 23:28.360
They don't have anything really server wise or infrastructure wise in their home.

23:28.360 --> 23:30.640
They got a router and they got some devices.

23:30.640 --> 23:36.520
This seems to me like a solid open source foundation on which people will then build

23:36.520 --> 23:41.360
other ways of interacting with it and interacting with all of your devices.

23:41.360 --> 23:47.140
It feels like the beginning of the dream of being able to use Internet of Things devices

23:47.140 --> 23:52.480
and do home automation without relying on proprietary third party services and sending

23:52.480 --> 23:54.480
all your data off to the cloud.

23:54.480 --> 23:55.640
That's the idea.

23:55.640 --> 24:00.680
They're working, Mozilla is working with the W3C to write this all up.

24:00.680 --> 24:05.380
They're drafting these as standards for interaction and methods of communicating with devices

24:05.380 --> 24:11.200
that don't require proprietary cloud services and don't require going off your land.

24:11.200 --> 24:15.300
And I am just so all about that because there is real utility, especially for those that

24:15.300 --> 24:19.360
have disabilities or have special needs, perhaps are motion limited.

24:19.360 --> 24:22.880
There's a lot of advantages to some of these types of tools in those situations.

24:22.880 --> 24:26.880
I have a family member in that situation and it's been a game changer for them.

24:26.880 --> 24:30.680
So I would love to see the ability to do that stuff, but to keep it private.

24:30.680 --> 24:31.680
Yeah.

24:31.680 --> 24:34.840
And for all of the criticism that we throw at Mozilla from time to time, they are the

24:34.840 --> 24:39.360
organization that I would trust most to do this because they've got the resources and

24:39.360 --> 24:44.840
they've got the fundamental mission to actually do this properly.

24:44.840 --> 24:47.560
And so I've got real high hopes for this.

24:47.560 --> 24:48.560
Right.

24:48.560 --> 24:52.640
And not to mention, they have relationships established with the standards bodies that

24:52.640 --> 24:56.240
are necessary to make this an industry wide thing.

24:56.240 --> 25:00.200
And they're producing real results that end users can start messing around with soon.

25:00.200 --> 25:02.400
I can't wait to try down a Raspberry Pi 4.

25:02.400 --> 25:08.120
I've got lots of old IoT devices here that I use for testing and security auditing and

25:08.120 --> 25:09.720
for automation.

25:09.720 --> 25:12.240
And it'd be a perfect, perfect thing to try with this.

25:12.240 --> 25:13.680
So I'm very excited about it.

25:13.680 --> 25:16.920
I'll be watching it because just like you, I think they're the right group to do it.

25:16.920 --> 25:21.400
Well, something that I've been watching for a long time is RISC-V and we've seen various

25:21.400 --> 25:23.080
advances there.

25:23.080 --> 25:31.400
But Alibaba this week announced a 16 core RISC-V chip that could actually be pretty

25:31.400 --> 25:32.400
powerful.

25:32.400 --> 25:38.040
Yeah, they're claiming it runs at 2.5 gigahertz on a 12 nanometer processor node.

25:38.040 --> 25:42.280
And they're claiming it's 40 percent more powerful than any RISC-V processor produced

25:42.280 --> 25:43.280
to date.

25:43.280 --> 25:49.640
They're going to offer it as its own system on a chip as well.

25:49.640 --> 25:50.920
Get ready for this.

25:50.920 --> 25:57.320
They plan to release the code as open source on GitHub, they claim around September of

25:57.320 --> 25:58.320
this year.

25:58.320 --> 26:00.240
Yeah, at least some of it will be open source.

26:00.240 --> 26:01.660
So we'll have to see about that.

26:01.660 --> 26:06.020
But what jumped out at me is that this is potentially the first RISC-V processor with

26:06.020 --> 26:08.900
an out of order operation pipeline.

26:08.900 --> 26:14.200
So it might even have a bit of the old Spectrum meltdown with it.

26:14.200 --> 26:17.600
I mean, it is what they're claiming to be part of their secret sauce.

26:17.600 --> 26:22.080
They say it enables up to eight instructions to be loaded into each cycle, which is massive.

26:22.080 --> 26:26.580
Of course, they do have to do some caching to store that information between cores.

26:26.580 --> 26:29.040
So it could be.

26:29.040 --> 26:31.040
Would that be a feature, Joe?

26:31.040 --> 26:36.720
Well, for certain workloads, Spectrum meltdown don't really affect you.

26:36.720 --> 26:40.280
So I don't know what we'll have to see on that one.

26:40.280 --> 26:46.800
But this does illustrate something about RISC-V that is an open instruction set architecture.

26:46.800 --> 26:50.000
However, it is permissively licensed.

26:50.000 --> 26:53.480
And so you can just take that and make your own proprietary thing, add your secret source

26:53.480 --> 26:59.120
to it, and then never release it, or at least charge people to license it.

26:59.120 --> 27:01.900
And so it's something to be wary of.

27:01.900 --> 27:05.840
And I don't know, I'm not hopeful that we're all going to get the source code for this.

27:05.840 --> 27:07.520
Yeah, I'm a little skeptical too.

27:07.520 --> 27:11.880
We might get bits of it, which would be beneficial, but not perfect.

27:11.880 --> 27:16.380
The other interesting element of this story besides that will we get all the code element

27:16.380 --> 27:19.820
is how the Chinese media is covering it.

27:19.820 --> 27:24.080
They're reporting this as a major step in enabling local companies to get easy access

27:24.080 --> 27:29.340
to quote, locally developed processor architectures, end quote.

27:29.340 --> 27:32.440
And they know that's especially important in light of restrictions that were put on

27:32.440 --> 27:37.480
again, Huawei, and the uncertainty that's created for the market down the road.

27:37.480 --> 27:40.640
There's a real market opportunity over in China for this type of processor.

27:40.640 --> 27:45.820
Well, yeah, in a lot of places as well, as people realize that being completely dependent

27:45.820 --> 27:52.960
on one country isn't a great idea, because that country's leadership can change.

27:52.960 --> 27:56.160
And that can be unfavorable to you.

27:56.160 --> 27:58.440
And it might change back again or whatever.

27:58.440 --> 28:02.560
But I think this has been a real wake up call, this whole trade war thing.

28:02.560 --> 28:08.720
And it's making people invest in stuff like RISC-V, which ultimately, hopefully will benefit

28:08.720 --> 28:09.720
us all.

28:09.720 --> 28:12.320
But at least it makes things a bit more interesting.

28:12.320 --> 28:16.840
Well, here we are, not even really intentionally, but here's another story where geopolitics

28:16.840 --> 28:21.560
are pushing forward an open solution for the market.

28:21.560 --> 28:26.400
Open source specs and open source software are kind of a great enabler.

28:26.400 --> 28:28.240
I guess Richard was right after all.

28:28.240 --> 28:31.320
Well, I stopped Clocksprite twice a day, eh?

28:31.320 --> 28:32.320
Oh, no.

28:32.320 --> 28:33.320
Oh, no.

28:33.320 --> 28:36.440
Anyways, it is a very fascinating story.

28:36.440 --> 28:40.560
And maybe you'll finally get your RISC-based desktop sooner than later, thanks to Alibaba

28:40.560 --> 28:41.560
Joe.

28:41.560 --> 28:42.960
You never know.

28:42.960 --> 28:47.760
Now check out linuxactionnews.com slash subscribe for all the ways to get new episodes.

28:47.760 --> 28:52.120
It's a quick way to get the open source on Linux news in 30 minutes or so every single

28:52.120 --> 28:53.120
week.

28:53.120 --> 28:54.120
Linuxactionnews.com slash subscribe.

28:54.120 --> 28:58.860
And you can go to linuxactionnews.com slash contact for ways to get in touch with us.

28:58.860 --> 29:00.920
And did you know that Linux Academy is hiring?

29:00.920 --> 29:01.920
Come work with us.

29:01.920 --> 29:06.440
Go to linuxacademy.com slash careers and go check out all of the positions, many of which

29:06.440 --> 29:10.960
are remote, full time, full benefits, some of which are based out of the office.

29:10.960 --> 29:11.960
They have a big selection.

29:11.960 --> 29:14.620
The company's growing fast and it's a great team.

29:14.620 --> 29:17.200
Go check that at linuxacademy.com slash careers.

29:17.200 --> 29:21.640
We'll be back next Monday with our weekly take on the latest Linux and open source news.

29:21.640 --> 29:23.520
I'm at Chris LAS.

29:23.520 --> 29:25.100
I'm at Troy Wessington.

29:25.100 --> 29:27.620
Thank you for joining us and we will see you next week.

29:27.620 --> 29:45.680
Until then, have a great day and I'll talk to you later.


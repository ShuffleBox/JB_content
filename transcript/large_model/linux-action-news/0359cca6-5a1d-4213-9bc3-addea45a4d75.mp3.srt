1
00:00:00,000 --> 00:00:09,380
Hello, and welcome to Linux Action News, episode 236, recorded on April 13th, 2022.

2
00:00:09,380 --> 00:00:10,380
I'm Chris.

3
00:00:10,380 --> 00:00:11,380
And I'm Wes.

4
00:00:11,380 --> 00:00:12,380
Hello, Wes.

5
00:00:12,380 --> 00:00:14,000
Let's do the news.

6
00:00:14,000 --> 00:00:21,280
It's been a long four years now since the introduction of SUSE Linux Enterprise 15,

7
00:00:21,280 --> 00:00:24,240
and many are wondering, what's next?

8
00:00:24,240 --> 00:00:30,640
Well, it seems SUSE does have some plans for a next-generation operating system in the

9
00:00:30,640 --> 00:00:38,720
works, dubbed Adaptable Linux Platform, or ALP, and it's expected that this new skunkworks

10
00:00:38,720 --> 00:00:43,960
effort will eventually become the successor to SUSE Linux Enterprise.

11
00:00:43,960 --> 00:00:46,800
This is Stefan Billard noted in today's announcement.

12
00:00:46,800 --> 00:00:53,600
SLEE 15 is a great general purpose operating system, yet challenges with some use cases,

13
00:00:53,600 --> 00:00:58,560
now places of deployment, and the type of enhancement requests show that it's time

14
00:00:58,560 --> 00:01:00,400
for a successor.

15
00:01:00,400 --> 00:01:07,000
You see terms like radical changes sprinkled in the announcement, but as for what all those

16
00:01:07,000 --> 00:01:12,840
changes might actually entail, SUSE is still being a little bit tight-lipped on that, at

17
00:01:12,840 --> 00:01:15,000
least publicly.

18
00:01:15,000 --> 00:01:18,760
We really didn't get much, but they did give us a little hint in their announcement where

19
00:01:18,760 --> 00:01:26,160
they noted, quote, another important point is that we intend to split what was more generic.

20
00:01:26,160 --> 00:01:31,200
Everything is closely intertwined into two parts, one smaller hardware enabling piece,

21
00:01:31,200 --> 00:01:37,720
a kind of host OS, and the layer and supporting applications, which will be containers and

22
00:01:37,720 --> 00:01:38,720
VM-based.

23
00:01:38,720 --> 00:01:43,320
If that sounds appealing to you, well, thankfully, it doesn't sound like we're going to have

24
00:01:43,320 --> 00:01:46,680
to wait too long to find out a bit more.

25
00:01:46,680 --> 00:01:51,520
SUSE is pledging to do the development of this new effort all out in the open and say

26
00:01:51,520 --> 00:01:58,440
they're going to share some more details in the upcoming weeks.

27
00:01:58,440 --> 00:02:03,880
Well up until now, all installs of Raspberry Pi OS have had a little problem, a default

28
00:02:03,880 --> 00:02:09,180
user called Pi, and probably like a lot of you out there, I never really liked this.

29
00:02:09,180 --> 00:02:14,600
Even just knowing a valid user ID on a system is just not ideal from a security standpoint.

30
00:02:14,600 --> 00:02:19,120
With this, among several other issues that some of which still remain, I've never really

31
00:02:19,120 --> 00:02:23,960
been comfortable recommending the official Pi OS to our audience.

32
00:02:23,960 --> 00:02:29,560
But with the latest release of Raspberry Pi OS, that default Pi user is finally being

33
00:02:29,560 --> 00:02:30,560
removed.

34
00:02:30,560 --> 00:02:34,560
Instead, you'll be able to create a user the first time you boot a newly flashed Raspberry

35
00:02:34,560 --> 00:02:36,420
Pi OS image.

36
00:02:36,420 --> 00:02:41,360
In fact, that previously dismissible first run wizard, well, that's now mandatory so

37
00:02:41,360 --> 00:02:43,360
you can create your new account.

38
00:02:43,360 --> 00:02:48,100
And don't worry if you're a headless Raspberry Pi user like myself, that Raspberry Pi imager

39
00:02:48,100 --> 00:02:52,420
tool that's so famous out there, well, that actually lets you pre-configure a user now

40
00:02:52,420 --> 00:02:56,440
that will get written to the image before you write it to the SD card.

41
00:02:56,440 --> 00:03:02,840
The good news is, if you don't use the imager like me, you can also pre-configure the user

42
00:03:02,840 --> 00:03:08,800
account by just adding a text file to the boot folder on the SD card that'll just define

43
00:03:08,800 --> 00:03:09,800
that information.

44
00:03:09,800 --> 00:03:11,800
We'll have the details in the link in the show notes.

45
00:03:11,800 --> 00:03:16,120
It's a small inconvenience really, I think, for a much-needed security improvement.

46
00:03:16,120 --> 00:03:20,600
And it's also nice to see Bluetooth is in better shape for early setup.

47
00:03:20,600 --> 00:03:25,860
And now users have the ability to try out Mudder running on Wayland if they'd like to

48
00:03:25,860 --> 00:03:31,960
test that configuration.

49
00:03:31,960 --> 00:03:37,480
We don't cover every pipeline release, but we do always love a good excuse to talk about

50
00:03:37,480 --> 00:03:38,480
it.

51
00:03:38,480 --> 00:03:44,240
This week, Pipewire 0.3.50 gave us just that reason.

52
00:03:44,240 --> 00:03:49,320
Among the batch of your always-nice-to-see bug fixes and minor improvements, one item

53
00:03:49,320 --> 00:03:54,480
in particular opens up Pipewire to more advanced audio editing workflows.

54
00:03:54,480 --> 00:04:01,000
Yeah, it seems like a silly, maybe even simple thing on the surface, but without this, audio

55
00:04:01,000 --> 00:04:05,800
editors on Linux were limited in some critical ways with the audio effect plugins they could

56
00:04:05,800 --> 00:04:08,640
use while using a Pipewire backend.

57
00:04:08,640 --> 00:04:14,640
Previously, Wine applications that were talking to Jack would crash, and now that has been

58
00:04:14,640 --> 00:04:16,400
fixed with this Pipewire release.

59
00:04:16,400 --> 00:04:21,040
And while this has a lot of perks for many types of users, including gamers out there,

60
00:04:21,040 --> 00:04:26,600
it opens up Windows-based VST plugins to Linux audio editors that are using the Pipewire

61
00:04:26,600 --> 00:04:27,600
stack.

62
00:04:27,600 --> 00:04:33,080
Why, you might ask, is this Linux-based show talking about Windows plugins?

63
00:04:33,080 --> 00:04:39,080
Well, that's because, unfortunately, in the land of content production, a really good

64
00:04:39,080 --> 00:04:46,160
plugin can sometimes be the difference between a lost episode or a saved episode, an inaudible

65
00:04:46,160 --> 00:04:50,080
interview or a really great guest.

66
00:04:50,080 --> 00:04:53,520
And in some cases, you don't even have to go to Windows.

67
00:04:53,520 --> 00:04:59,440
It's surprisingly usable to run some of those Windows plugins right on Linux directly in

68
00:04:59,440 --> 00:05:03,160
your audio editor, routed through Wine.

69
00:05:03,160 --> 00:05:07,200
Something we've been doing for a couple years now, at least when we have to.

70
00:05:07,200 --> 00:05:11,680
Yeah, only when we have to, but it's so great to have that.

71
00:05:11,680 --> 00:05:18,040
And that has meant for us, we've kept Pipewire out of our Jack-based audio workflow on our

72
00:05:18,040 --> 00:05:19,280
editing systems.

73
00:05:19,280 --> 00:05:23,080
But with this version of Pipewire, that may be changing.

74
00:05:23,080 --> 00:05:28,240
And realistically, it's just great to see these kinds of improvements because previous

75
00:05:28,240 --> 00:05:34,660
audio systems on Linux really took a lot longer to get these kinds of features that made pro

76
00:05:34,660 --> 00:05:35,960
workflows doable.

77
00:05:35,960 --> 00:05:40,520
It maybe even took eight, 10 years before some of these features landed.

78
00:05:40,520 --> 00:05:45,200
And we're seeing these kinds of things be addressed much earlier in the Pipewire cycle.

79
00:05:45,200 --> 00:05:50,600
That's really exciting to see.

80
00:05:50,600 --> 00:05:54,240
OpenSSH 9.0 has been released.

81
00:05:54,240 --> 00:06:00,360
This build is primarily a bug fix release, but it also switches to a new quantum computer

82
00:06:00,360 --> 00:06:07,800
proof key exchange protocol by default and includes a number of SFTP changes.

83
00:06:07,800 --> 00:06:14,020
Most notably of which, SCP has finally been switched from using its old vulnerable legacy

84
00:06:14,020 --> 00:06:17,280
protocol to using SFTP on the backend.

85
00:06:17,280 --> 00:06:23,120
This is good news, but do be aware, it's not entirely backwards compatible.

86
00:06:23,120 --> 00:06:26,680
It really is just nice to see these bug fixes and these porting updates.

87
00:06:26,680 --> 00:06:31,800
I think I and maybe some of us take for granted that OpenSSH works just about everywhere,

88
00:06:31,800 --> 00:06:33,760
but that actually takes a lot of maintenance.

89
00:06:33,760 --> 00:06:36,360
It takes a lot of work to keep this thing secure.

90
00:06:36,360 --> 00:06:41,240
And if that quantum computer proof key exchange protocol caught your attention like it did

91
00:06:41,240 --> 00:06:44,260
mine, we'll have more information about that in the show notes.

92
00:06:44,260 --> 00:06:48,320
It's sort of as you might suspect, the idea by the project is to kind of figure this stuff

93
00:06:48,320 --> 00:06:54,400
out now and be prepared by the time a sufficiently advanced quantum computer is available, at

94
00:06:54,400 --> 00:06:59,640
best case scenario, maybe even have quantum resistant software already deployed out in

95
00:06:59,640 --> 00:07:00,640
the wild.

96
00:07:00,640 --> 00:07:09,680
It's pretty interesting stuff, sci-fi stuff, link in the show notes.

97
00:07:09,680 --> 00:07:13,840
While the talk lately around riser FS has been about deprecating the older code from

98
00:07:13,840 --> 00:07:34,000
the Linux kernel, it seems riser development is actually continuing on.

99
00:07:34,000 --> 00:07:39,680
One of the standout features of riser 5 is a new method for parallel scale out of the

100
00:07:39,680 --> 00:07:40,680
file system.

101
00:07:40,680 --> 00:07:45,120
According to Shishkin, this capability is inspired more from networked file systems

102
00:07:45,120 --> 00:07:48,280
rather than traditional RAID storage arrays.

103
00:07:48,280 --> 00:07:52,480
It's still early days and this latest update provides a few numbers on what the performance

104
00:07:52,480 --> 00:07:54,120
might be like.

105
00:07:54,120 --> 00:07:57,280
Not sure where it's going to go, it's certainly interesting research.

106
00:07:57,280 --> 00:08:06,560
And also makes me think, perhaps the rumors of riser's death have been greatly exaggerated.

107
00:08:06,560 --> 00:08:11,280
You might have seen some tantalizing NVIDIA Linux headlines going by this week, including

108
00:08:11,280 --> 00:08:15,880
reports of a brand new open source NVIDIA driver.

109
00:08:15,880 --> 00:08:21,080
And it's true, but with a big catch.

110
00:08:21,080 --> 00:08:26,280
You see, in NVIDIA's latest Linux for Tegra code drop, some interested parties discovered

111
00:08:26,280 --> 00:08:32,000
a new open source kernel driver that had never previously been published.

112
00:08:32,000 --> 00:08:36,940
This driver isn't based on the existing nouveau driver, but rather appears to be derived from

113
00:08:36,940 --> 00:08:42,400
an internal code base with some references going all the way back to the 90s.

114
00:08:42,400 --> 00:08:49,400
Yeah, 1993, it seems, that's something we've always speculated that NVIDIA had these complicated

115
00:08:49,400 --> 00:08:52,560
license deals with third parties in their code that just went back years.

116
00:08:52,560 --> 00:08:56,160
Well, this would kind of seem to maybe confirm that suspicion.

117
00:08:56,160 --> 00:09:01,300
Now, before we get too excited, at least for now, this kernel driver appears to be limited

118
00:09:01,300 --> 00:09:03,560
to their Tegra graphics hardware.

119
00:09:03,560 --> 00:09:08,000
If you try to load this module for a desktop NVIDIA graphics card, well, you're just going

120
00:09:08,000 --> 00:09:09,380
to get errors.

121
00:09:09,380 --> 00:09:14,000
But Michael Larble over at Ferronix noted that when you do look at the driver's source

122
00:09:14,000 --> 00:09:19,480
code, there's actually references in there to many desktop GPUs and, well, other GPUs

123
00:09:19,480 --> 00:09:23,240
that are just outside the Tegra context altogether.

124
00:09:23,240 --> 00:09:25,720
Who knows what that means.

125
00:09:25,720 --> 00:09:30,960
Also making a few waves this week, was NVIDIA finally publishing the signed firmware images

126
00:09:30,960 --> 00:09:34,420
for their RTX 30 Ampere graphics processors.

127
00:09:34,420 --> 00:09:39,340
This is big news because those signed images are required if you want to enable better

128
00:09:39,340 --> 00:09:44,960
hardware support and you're using the free NUVO driver.

129
00:09:44,960 --> 00:09:50,360
NVIDIA first introduced the GeForce 30 series back in September of 2020 and their hardware

130
00:09:50,360 --> 00:09:55,280
has been built in such a way that it requires this signed firmware to just even unlock certain

131
00:09:55,280 --> 00:09:57,960
functionality from the free graphics driver.

132
00:09:57,960 --> 00:10:02,860
So even if the NUVO driver project has the support, it doesn't matter unless NVIDIA

133
00:10:02,860 --> 00:10:07,140
unlocks it from this firmware standpoint.

134
00:10:07,140 --> 00:10:12,380
And even with these signed images now available, there's still complications around reclocking

135
00:10:12,380 --> 00:10:16,440
the GPU because it starts with some rather low boot clock frequencies and you've got

136
00:10:16,440 --> 00:10:20,280
to do a complicated dance to get higher ones enabled.

137
00:10:20,280 --> 00:10:24,960
And those complications around power management in the context of signed firmware images have

138
00:10:24,960 --> 00:10:30,860
meant that the GTX 900 series and newer hasn't been able to operate with the open source

139
00:10:30,860 --> 00:10:34,960
driver at those optimal clock frequencies.

140
00:10:34,960 --> 00:10:40,640
And that means, to date, the best open source driver support remains with the GTX 700 Kepler

141
00:10:40,640 --> 00:10:46,620
series as well as the GTX 750 Maxwell graphics cards that don't happen to have these firmware

142
00:10:46,620 --> 00:10:49,040
restrictions.

143
00:10:49,040 --> 00:10:53,260
It's also worth noting, unfortunately, that after a year and a half of waiting for these

144
00:10:53,260 --> 00:10:58,580
signed firmware images to be published, we're now just a few months away from NVIDIA releasing

145
00:10:58,580 --> 00:11:01,640
the GeForce RTX 40 series.

146
00:11:01,640 --> 00:11:06,880
And then this process has to start all over again.

147
00:11:06,880 --> 00:11:35,600
This is just not good enough

148
00:11:35,600 --> 00:11:51,140
in

149
00:11:51,140 --> 00:12:04,240
the long run.

150
00:12:04,240 --> 00:12:05,960
support the show.

151
00:12:05,960 --> 00:12:08,480
Linode.com slash LAN.

152
00:12:08,480 --> 00:12:13,960
It's Linode.com slash LAN to get $100 in 60 day credit on a new account and Linode.com

153
00:12:13,960 --> 00:12:17,440
slash LAN to support the show and kick the tires.

154
00:12:17,440 --> 00:12:23,040
Linode.com slash LAN.

155
00:12:23,040 --> 00:12:24,760
And a Linux sized thank you to Ting.

156
00:12:24,760 --> 00:12:26,480
Linux dot Ting dot com.

157
00:12:26,480 --> 00:12:30,640
If you're sick of overpaying for cell service, go see how much you can save and then take

158
00:12:30,640 --> 00:12:34,000
$25 off of that at Linux dot Ting dot com.

159
00:12:34,000 --> 00:12:38,740
Ting's been my mobile service provider since 2013 and it's obvious.

160
00:12:38,740 --> 00:12:44,240
They got the big nationwide coverage, multiple networks, LTE and 5G, nation to nation networks,

161
00:12:44,240 --> 00:12:50,140
you know what I'm talking about, but at great prices and unbeatable customer service.

162
00:12:50,140 --> 00:12:51,720
That's the Ting secret recipe.

163
00:12:51,720 --> 00:12:57,960
They're an MVNO, so they get to focus on you, not building towers and relationships with

164
00:12:57,960 --> 00:13:01,240
legal people in the local jurisdictions.

165
00:13:01,240 --> 00:13:05,320
It's a whole mind shit for them and so they get to focus on things like customer service,

166
00:13:05,320 --> 00:13:09,720
innovative plans, combining multiple networks, making sure you could do everything from their

167
00:13:09,720 --> 00:13:15,280
dashboard and every single plan gets access to Ting's award winning customer service and

168
00:13:15,280 --> 00:13:18,760
nationwide LTE and 5G service.

169
00:13:18,760 --> 00:13:23,520
Ting was also named the number one carrier by Consumer Reports in 2021 because they have

170
00:13:23,520 --> 00:13:25,480
this great combination.

171
00:13:25,480 --> 00:13:29,440
It's simple to switch to Ting, start saving money right now because pretty much any phone

172
00:13:29,440 --> 00:13:33,960
will work so you can likely take your existing phone or you can pick up a new one for a great

173
00:13:33,960 --> 00:13:38,040
price and take 25 bucks off by visiting Linux dot Ting dot com.

174
00:13:38,040 --> 00:13:42,440
Go check your phone, create an account and pick the plan that's right for you.

175
00:13:42,440 --> 00:13:47,760
Linux dot Ting dot com.

176
00:13:47,760 --> 00:13:52,360
For our last story today, we thought we'd take a look at the Debian Project's efforts

177
00:13:52,360 --> 00:13:55,660
to implement the User Merge.

178
00:13:55,660 --> 00:14:01,520
If you don't regularly dive into the Linux file system layout, well here's a little refresher.

179
00:14:01,520 --> 00:14:08,080
The User Merge is a plan initially popularized by Leonard Pottering back in 2012 that aims

180
00:14:08,080 --> 00:14:13,320
to simplify the file system layout of Linux distributions and increase their compatibility

181
00:14:13,320 --> 00:14:16,680
with other Unix-like operating systems.

182
00:14:16,680 --> 00:14:19,540
At its core, it's a pretty straightforward plan.

183
00:14:19,540 --> 00:14:23,880
The basic idea is you take any files that you have under slash bin and you move all

184
00:14:23,880 --> 00:14:27,240
of them to slash user slash bin.

185
00:14:27,240 --> 00:14:31,760
Then you turn slash bin itself into just a symbolic link that points at slash user slash

186
00:14:31,760 --> 00:14:32,760
bin.

187
00:14:32,760 --> 00:14:37,800
That way, regardless of which location a program is trying to find the binary, it's gonna find

188
00:14:37,800 --> 00:14:38,800
it.

189
00:14:38,800 --> 00:14:45,400
You can just do the same thing for other top-level directories like slash sbin or slash lib.

190
00:14:45,400 --> 00:14:51,200
But ever since this idea got introduced to the Debian Project some six years ago, it

191
00:14:51,200 --> 00:14:56,160
has turned into a point of contention within the community.

192
00:14:56,160 --> 00:15:01,440
Some recent events have maybe prolonged that pain, but perhaps the end is in sight.

193
00:15:01,440 --> 00:15:06,120
Fedora, Arch, Ubuntu, and many other distros have made this change already.

194
00:15:06,120 --> 00:15:07,280
And made it a while ago.

195
00:15:07,280 --> 00:15:11,080
Fedora 17 made this change in 2012.

196
00:15:11,080 --> 00:15:13,900
Arch made this change in 2013.

197
00:15:13,900 --> 00:15:18,500
But the Debian Project has taken a more incremental approach and seemingly run into issues at

198
00:15:18,500 --> 00:15:20,240
every step of the way.

199
00:15:20,240 --> 00:15:23,240
This is kind of a classic Debian story in a way.

200
00:15:23,240 --> 00:15:26,960
Their technical committee has chosen a direction for the distribution, decided we're gonna

201
00:15:26,960 --> 00:15:33,720
have it in this release, but has actually no authority to quote-unquote force these

202
00:15:33,720 --> 00:15:36,360
developers to spend their time working on it.

203
00:15:36,360 --> 00:15:41,120
In fact, the Debian Constitution does not allow the committee to override a developer's

204
00:15:41,120 --> 00:15:42,120
decision.

205
00:15:42,120 --> 00:15:46,000
So if they decide for a packaging reason or some legitimate reason this isn't gonna work,

206
00:15:46,000 --> 00:15:48,320
they can't make them do the work.

207
00:15:48,320 --> 00:15:53,440
It's also a classic Debian story in the sense that Debian just seems to really be struggling

208
00:15:53,440 --> 00:15:59,600
to do something that other distributions pulled off ages ago, and I get no joy in saying this.

209
00:15:59,600 --> 00:16:03,120
And just like many times before, like you dig into the issue, it's like, okay, there's

210
00:16:03,120 --> 00:16:05,520
some pretty understandable reasons here.

211
00:16:05,520 --> 00:16:07,900
They've run into some problems, I get it.

212
00:16:07,900 --> 00:16:10,880
But at the end of the day, you can't help just think to yourself, I wish they could

213
00:16:10,880 --> 00:16:14,120
just get more done because other people have solved this problem.

214
00:16:14,120 --> 00:16:17,400
Yeah, I definitely feel your pain there.

215
00:16:17,400 --> 00:16:22,480
I think maybe the flip side is it highlights how different Debian is as a project than

216
00:16:22,480 --> 00:16:25,720
many of the distributions that we otherwise use.

217
00:16:25,720 --> 00:16:29,460
There isn't a giant commercial interest behind it that can kind of just pull the strings

218
00:16:29,460 --> 00:16:35,800
or hire developers to get the things they want to see implemented done.

219
00:16:35,800 --> 00:16:39,960
And if you compare it to something like Arch, well, Arch is just simple, they usually don't

220
00:16:39,960 --> 00:16:44,480
have problems sort of taking things or making changes and just forcing users to adapt.

221
00:16:44,480 --> 00:16:47,560
But Debian takes a different approach.

222
00:16:47,560 --> 00:16:51,960
They have a lot of stakeholders, they have a huge deployment base, and they take the

223
00:16:51,960 --> 00:16:55,500
time to flush these things out in the open.

224
00:16:55,500 --> 00:17:00,760
And that, much like democracy, can take a really long time.

225
00:17:00,760 --> 00:17:06,400
But I think maybe one of the advantages here is, even though it sucks that there's disagreements

226
00:17:06,400 --> 00:17:10,760
and there's people with strong opinions about which way this should go, it does mean that

227
00:17:10,760 --> 00:17:14,640
there's still a very passionate base of Debian developers.

228
00:17:14,640 --> 00:17:19,280
They might be slowing things down here, but at least for the long-term play, I'm glad

229
00:17:19,280 --> 00:17:20,280
they exist.

230
00:17:20,280 --> 00:17:24,800
Yeah, the process can add a lot of time and maybe even be a little messy, a little organic

231
00:17:24,800 --> 00:17:26,480
at times.

232
00:17:26,480 --> 00:17:33,240
I think in the back of my mind, I worry that perhaps where the idea originated has played

233
00:17:33,240 --> 00:17:36,280
a factor in people's acceptance of the idea.

234
00:17:36,280 --> 00:17:43,420
It came out of the SystemD community back in 2012, and back in 2012, anything that came

235
00:17:43,420 --> 00:17:49,240
out of the SystemD community or Lenart Potter indirectly was really controversial.

236
00:17:49,240 --> 00:17:53,440
And so I kind of wonder if that didn't maybe set things off in the wrong direction.

237
00:17:53,440 --> 00:17:57,440
What ends up happening here, Wes, is the technical committee just looks sort of silly.

238
00:17:57,440 --> 00:18:01,240
You know, they set a goal for Debian 10, it doesn't happen.

239
00:18:01,240 --> 00:18:03,440
They set a goal for Debian 11, it's not going to happen.

240
00:18:03,440 --> 00:18:07,240
Debian 12 is not going to happen, and now they're thinking, well, maybe we can get it

241
00:18:07,240 --> 00:18:10,640
done in Debian 13 Trixie when that starts.

242
00:18:10,640 --> 00:18:14,720
It's sort of just completely ineffective.

243
00:18:14,720 --> 00:18:17,520
There needs to be what seems like some sort of compromise, right?

244
00:18:17,520 --> 00:18:22,280
Some kind of line that says, okay, we've decided this, and this is what we're going to do,

245
00:18:22,280 --> 00:18:24,840
and if you're not on board, you kind of move on.

246
00:18:24,840 --> 00:18:28,320
But there's no mechanism in this kind of democracy setup.

247
00:18:28,320 --> 00:18:32,120
What they need, Wes, is a ruler with an iron fist.

248
00:18:32,120 --> 00:18:33,960
I'm kidding, obviously.

249
00:18:33,960 --> 00:18:40,280
Or maybe as Jake Edge over at LWI, who did some great reporting on this story, suspects

250
00:18:40,280 --> 00:18:43,840
it seems like maybe some sort of project elder, you know, someone who's been a long time,

251
00:18:43,840 --> 00:18:48,200
could maybe shepherd this, do a little evangelizing, try to do some organization.

252
00:18:48,200 --> 00:18:51,720
That might be the thing we need in a kind of democracy.

253
00:18:51,720 --> 00:18:52,720
I don't know.

254
00:18:52,720 --> 00:18:57,520
I'm disappointed too, but I think we'll just have to wait and see.

255
00:18:57,520 --> 00:18:58,920
That's an interesting insight, isn't it?

256
00:18:58,920 --> 00:19:02,720
Maybe somebody who could own this thing and drive it and advocate for it.

257
00:19:02,720 --> 00:19:04,520
Yeah, I could see that working.

258
00:19:04,520 --> 00:19:08,580
And if you look back over Debian's history, those kinds of initiatives that have had an

259
00:19:08,580 --> 00:19:12,880
owner like that, had an advocate like that, somebody who can communicate the benefits

260
00:19:12,880 --> 00:19:19,360
and respond to people who have concerns in an open way, in a non-hostile way, has generally

261
00:19:19,360 --> 00:19:22,060
proved to be the most successful route in Debian.

262
00:19:22,060 --> 00:19:26,920
But as of now, it seems like maybe we'll see it land in Debian 13.

263
00:19:26,920 --> 00:19:30,720
Maybe we're starting to see things get addressed, but I think if you're a Debian user and you

264
00:19:30,720 --> 00:19:33,800
are concerned about these kinds of things and you just like to understand the process

265
00:19:33,800 --> 00:19:37,020
a little better, we'll have a link in the show notes for you.

266
00:19:37,020 --> 00:19:41,060
But isn't this just an interesting contrast to have, like you said, just different distributions

267
00:19:41,060 --> 00:19:42,780
that serve different roles.

268
00:19:42,780 --> 00:19:49,160
You have Fedora implementing this in Fedora 17 back in 2012, and here we are in 2022 and

269
00:19:49,160 --> 00:19:53,080
we're still watching Debian debate how they're going to implement it.

270
00:19:53,080 --> 00:19:57,640
Maybe we're not still having this discussion in 2032.

271
00:19:57,640 --> 00:19:58,640
No kidding.

272
00:19:58,640 --> 00:20:02,900
Stay tuned to find out by going to LinuxActionNews.com slash subscribe for this story and all the

273
00:20:02,900 --> 00:20:06,220
other stories we'll cover today and into the future.

274
00:20:06,220 --> 00:20:11,200
And LinuxActionNews.com slash contact Royce to get in touch.

275
00:20:11,200 --> 00:20:13,940
Get a new podcast app, newpodcastapps.com.

276
00:20:13,940 --> 00:20:17,360
Grab one that supports Boost and send a message into the show.

277
00:20:17,360 --> 00:20:23,320
And we'll be back next week with our take on the latest Linux and open source news.

278
00:20:23,320 --> 00:20:24,360
Thanks for joining us.

279
00:20:24,360 --> 00:20:49,400
And that's all the news for this week.


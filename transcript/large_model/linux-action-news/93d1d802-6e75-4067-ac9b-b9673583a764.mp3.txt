Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.
This is episode 68, recorded on August 26, 2018.
I'm Chris.
And I'm Joe.
Hello, Joe.
It's great to be connected with you.
We have some major milestones to get into this week, and let's start with Flatpak hitting
version 1.0.
Yes, talk about a major milestone.
This is them setting their stall out, isn't it?
Saying that Flatpak is ready for mainstream adoption now, mainstream use.
It's 1.0.
There's nowhere for them to hide now.
This is the successor to the 0.10x series, which was first introduced in October of 2017.
And there are many new features, which we will have linked in the show notes.
But I wanted to call out a couple of my personal favorites, the new portals that allow apps
to create sandboxes and then restart themselves so they've been maybe updated or they have
new permissions.
They'll be smarter about that and more on those portals in a moment.
Apps can now also use D-Bus services better by giving specific names to the applications
on the D-Bus rather than just trying to guess what the application ID means.
And one of the cooler ones, apps can now request access to the host SSH agent to securely get
access to a remote server or maybe even like a Git repository.
There's a whole bunch of stuff in there, including one of my favorite ones, like Flatpak no longer
requiring file systems that support extended attributes, hello Dropbox.
And those portals, those portals are going to be great because they're more separated
now from Flatpak and they've been moved to the XDG desktop portal project and they're
working with snaps as well.
And this is going to grant users the ability to say, deny access to my camera or allow
access to my camera to a completely containerized secure application.
It's great stuff.
One thing that struck me about this is quite how many new features they've got in this
1.0 release.
And you do have to wonder, does this mean now they're at 1.0, they're going to slow
down a bit or are they just going to keep adding more and more features all the time?
It's nearly a weekly basis that I see some new use for Flatpak inside the larger GNOME
project as well.
And I bet a lot of the features that are being driven in Flatpak are coming from that tight
integration.
And I imagine that's going to continue.
And you mentioned snaps there.
I mean, that's kind of the elephant in the room here, isn't it?
Snaps are progressing at a really, really fast pace.
Canonical have thrown a lot of resources at snap.
And so is this 1.0 a kind of response to that?
Is it them saying, look, we're just as relevant too?
Yeah, we've really seen a lot of wins for snap packages this entire year.
I think almost on a weekly basis, you see some new project that everybody loves or some
new commercial application that's now a snap package.
What I find fascinating about this is this not really like this head-to-head dogfight
over two different package formats, because they're both kind of working together.
Snaps will be taking advantage of this XDG portal stuff.
Poppy and I got into this a little bit on last week's Linux Unplugged.
There's really a lot of cross-pollination happening here.
And it's not the kind of head-to-head battle that you might see blogs sort of frame it
as.
There is a bit of friendly competition there.
And you see them kind of spurring each other on and matching each other feature for feature.
And that's the good thing about open source, they can collaborate while also being in competition
with each other.
And because all the code is out there in open source, you can take bits from each other
and certainly inspiration from each other.
And ultimately, everybody benefits as a result.
And like I said, last time we talked about this, there's not going to be one winner.
We're going to end up with snaps being great and flat packs being great and systems using
a mixture of both.
Well, congratulations to them, 1.0 is a major milestone.
And now let's move to the petro coin.
Joe's always looking for these stories that validate real world use cases for blockchain
technology.
You found a zinger this week, Joe.
Yeah, it's certainly a real world implementation, but I'm not sure how much value it has.
And so this is Venezuela.
Now they have had economic problems for quite some time now.
And their currency, their fiat currency has been going through hyperinflation.
And so in an attempt to kind of stabilize that, they have introduced a state backed
cryptocurrency and tied their fiat currency to it.
Yeah, it's called the petro and it's based itself on like their oil basket of assets.
And so their currency is pegged to a crypto coin, which is then pegged to a basket of
oil assets.
It's supposed to be a liquid asset reflective of the price of oil.
And of course, there's a white paper on it, which you can go read and it will tell you
basically nothing because this whole thing is an idea out of the president's office.
But it bakes down to an attempt to lend some credibility and stability to the country's
currency.
And this crypto coin is how they're doing it, including apps for mobile devices to help
do conversions and math.
And it is kind of working right now, but it's very early days.
The crypto coins really only existed since March.
It is on some exchanges as of right now, but not many.
And there is a lot of seeding, quote unquote, going on where people are investing, quote
unquote, with currency that the government set aside and kept for itself.
We'll see where all this goes.
But it is it's happening.
You have a country that is attempting to use a crypto coin and they're talking about it
to their citizens.
That seems like a big story, at least the beginning of one.
Yeah, I've been watching this for months now and I've seen nothing but skepticism about
it.
But I thought it was finally worth mentioning because this is something new.
This is a precedent being set here.
This is the first government actually implementing a state backed cryptocurrency.
This is not just people within a country using it and it becoming popular.
This is officially sanctioned.
And you wonder if this experiment goes badly, is that going to reflect badly on the rest
of the whole cryptocurrency and blockchain world or will people chalk it off?
I mean, I'm assuming it's going to go badly.
I mean, just from what I've read, I've read nothing but skepticism.
Nobody seems to be positive about it.
No, they don't.
I don't think it will spell doom for all crypto, though, because so many times I've seen these
one off crazy ideas and they blow up and then they fizzle away.
In the end, it's really hard to know how successful this thing is going to be.
What do we know?
Yeah, this is not our area of expertise.
There's a couple of details of this that I would love to just have looked at further.
The fact that they've pegged the value of a crypto coin to a physical asset is fascinating.
So Bitcoin, you know, we often refer to Bitcoin as its value compared to the dollar.
So it's pinned to the dollar.
A Bitcoin is worth six thousand six hundred and eighty nine dollars right now as we record.
It's pegged to the dollar's value.
But the petro coin being pegged to this basket of oil assets, that's interesting.
And then the fact that their fiat currency is pegged to the value of the cryptocurrency
is also new territory.
And those things, regardless of this whole shebang is successful or not, I'd love for
people to look at those things particularly because it seems like, for better or worse,
it gives the government full control over their own currency backed by a real physical
asset.
And again, I'm a Linux user, not an economist, but that seems worth studying.
Yeah, well, it's definitely going to be one to keep an eye on.
What is it about this time of year that means we have so many birthdays in the Linux and
open source world?
Is it that people launch a lot of stuff at the end of summer?
They've been working throughout summer and then it was time to launch it?
Yeah, maybe it's those final summer projects, the last days of summer, you're doing your
code drop.
Here it is.
Here's my announcement.
And we have a couple of great ones.
This week is Linux's 27th birthday.
And yes, Linux has two birthdays.
Yeah, but this is the official one for my money.
Yeah, you think so?
So you have, okay, some people say it's October 5th, 1991, because that's when the original
code was dropped.
But then others say, like yourself, that it's really August 25th, 1991 is the actual birthday
because that's when the announcement took place on the mailing list where Linus introduced
his humble operating system that would only work on 386s and would only work with ATH
clones.
Yeah, and it wouldn't be big and professional like GNU and all that stuff.
That for me is like the real milestone.
And I think that's when we should really celebrate the birthday.
Yeah.
But 27 years, eh?
Yeah.
It's a long time.
Yeah.
And yet, I think there's still quite a future ahead of it.
Something else even older this week, IRC hit 30.
And yet we're kind of still using it.
I use it occasionally, not as much as I used to, but there are some people and some projects.
Okay, a lot of people have gone to things like Slack and Mattermost and whatever, but
IRC is still going strong.
There's often bridges to IRC, aren't there, from everything, from Matrix and everything.
Oh yeah.
IRC is actually really my favorite.
It's not the one I use the most these days, but it's still my favorite.
Something else that's interesting about some of these is these are born out of universities
back then.
That's where a lot of these projects came from, were universities.
Whereas now, we see a lot of the stuff coming out of corporations, Googles and Amazons.
You see these big projects like Kubernetes and whatnot that started at Google, where
in the past, they were starting at universities like IRC did.
Yeah, I think I'd be inclined to use IRC a bit more if they had Taylor Swift stickers
like Telegraph.
Yeah, T-Swift stickers makes everything better.
And just recently, last week, Debian turned 25, announced by Ian Murdoch on August 16th,
1993.
And he was just looking for something better than the competition, something better than
soft landing Linux system, which was founded by Peter MacDonald in May of 92.
Yeah, and it was almost around the same time as Slackware, but Slackware has been around
for just that little bit longer.
We talked about that recently.
And then last but not least on our list for this week, Gnome marks 21 years.
They're celebrating their 21st birthday, and they're doing it by releasing Gnome 3.29.91,
which is a second beta leading up to Gnome 3.30.
Yeah, that looks like it's shaping up to be a pretty decent release with improvements
to Network Manager, and they're also starting to talk about GTK4.
Last.ting.com.
Ting is smarter than unlimited.
If you use less, you just pay for less.
You don't have to try to guess how many minutes or messages you might use.
You just pay for the ones you use.
It's $6 to have a line, and then it's your minutes, your messages, and your megabytes,
however much you talk, text, and data you use is what you pay.
It's a system that's worked for me for over four years.
I've been a happy Ting customer with three lines now for a long time because it's $6.
I can have a phone, and I have two MiFis, one on CDMA and one on GSM, and I just keep
them active.
I could use the Ting control panel and turn services off when I don't want them, but it's
$6 a month.
The value there to have them available when I need data on either GSM or CDMA networks
is worth that $6.
And that's what I love about Ting.
They got you covered nationwide.
They have two different networks you get to choose from.
There's no contract if you do want to turn stuff off for a bit, and it's all manageable
through a great control panel where you can see your usage at a glance.
You can take complete control of any individual aspects.
And if you got kids, some of them might be kind of handy, is you can set usage alerts.
Maybe when they get to like 5 or 10 gigs of data, get a usage about that.
Hey, kid, go turn your Wi-Fi back on.
That's usually what it is for my kid.
And the thing I love about Ting is they have radically different customer service.
It's better than anybody else's out there.
And if you go to last.ting.com, not only are you supporting the show, but you're also going
to get $25 off a device or $25 in service credit if you bring a device.
They have a BYOD page where you can check your own.
Now there's also a limited time back-to-school promo where you can get a $100 Ting credit
when you get a Moto G6, which is a great phone, and they have details up on their blog.
It's just $250 for this phone, and then you own it outright with no contract.
There's no experience that Ting wants to flash on there.
You can just get updates when they push updates.
It's got a bright, beautiful screen for $250.
And as a back-to-school promo, you can get $100 credit for $23 per month phone on average.
That's $100 credit is going to last you for a long time.
Now, if you don't qualify for a back-to-school promo, don't worry.
If you go to last.ting.com, you still get a $25 service credit, which is likely going
to pay for more than your first month of Ting service.
That's how economical it is.
And you got a bunch of devices you can buy directly or you can bring your own.
Just get started by going to last.ting.com.
Okay, let's talk about Intel and their microcode updates, and specifically the license that
they released them under this week, but then changed their mind after quite a lot of pressure.
After getting called out by Debian in particular on one of them and many others, there was
a licensing term that got applied to the new microcode, amongst many things, like the fifth
new provision in there was.
You cannot publish or provide any software benchmark or comparison test results for anything
at least that used microcode.
Well, that would pretty much include all benchmarks for everything because microcode is running
for every single instruction on the system.
So it would have been a massive restriction on the entire benchmarking community if there
is such a thing.
And that rule applied to anything that used microcode.
And since every instruction on your system uses microcode, it seemed to apply to everything.
And people responded very strongly.
Debian immediately refused to distribute that to their credit.
And Intel thought about it a bit and looks like have changed things.
The question I think that first pops into the mind, though, is how does this happen?
How does language like this just show up in these microcode updates?
Like it isn't anything really flashy either.
It was a text file that gets added to the whole bundle and you just had to like read
the included text files.
Thankfully the people that are responsible for this stuff did.
And in there is where you see this restriction.
It's not up like on some new blog post where Intel's talking about a change in stance on
benchmarks or anything like that.
It's just this little text file that somehow a lawyer in Intel got included with the bundle
of microcode that goes to distributors.
How does that happen?
Well, why it happened was clearly because they're worried about people benchmarking
the difference before and after.
Because these speculative execution workarounds and mitigations do have a fairly significant
performance impact and they wanted to try and hush that.
But how that managed to happen, how it went through legal and PR and stuff, it just beggars
belief because clearly you're going to have a Streisand effect here.
Yeah, exactly.
And I think you nailed it.
I think it was a fear that these series of microcode updates are going to lead to worsening
and worsening performance and perhaps maybe even if we could speculate for a moment, there's
more in the future that are going to worsen performance even more.
But Intel wouldn't have been able to unilaterally apply this to all benchmarks.
So this would have been a tool that they would have selectively used against certain individuals
that they wanted to silence.
That's a, I grant you an extreme take, but it seems like the most likely use for this
tool that they were creating themselves.
I've seen a lot of discussion about this over the last week and even before that about how
if you look at someone like DigitalOcean, clearly they need to be applying these updates
because of VMs and people breaking out of that into other VMs and stuff.
But if you're just running this on your own machine, say your own laptop, there are people
who say you don't really need to install this proprietary code and take the performance
hit because the security risk is not that great.
I mean, I do not subscribe to that.
I will just update everything that I can.
Just why not?
It's better to be safe than sorry, but how do you feel?
Are you doing these updates where available?
I really have two thoughts on it.
Number one, I don't consider these to be just security updates.
Maybe some of these microcode updates are, but I generally consider these low-level firmware
updates to be improvements, security, and maybe even fixes to stuff that could actually
be really bad.
I kind of look at it as like a vendor recalling a flaw in the core logic inside my machine.
Sometimes they can make a mistake again, but sometimes they're trying to fix something
that they've now identified since something's been out in the field for a while.
So I try to look at microcode updates as a complex thing.
And then the second part of it is I also have to be aware that there's a lot more computer
in these individual chips than there used to be.
These are getting to be very sophisticated chips with some of them even having their
own operating systems and their own environments in there that need to be tended to.
And I don't like that, but if I neglect them, the system may suffer for it.
It's not as simple as it used to be, I guess is what I'm trying to say.
And so when I consider all of those factors, I do tend to be pretty religious about applying
these microcode updates and firmware updates.
If I saw an MV and eDrive update come down, thanks to LVFS in the future, I would do a
backup and then I would apply it because I am assuming that's a pretty important update
to make sure that my disk is safe long-term.
And that's just kind of my general outlook on these things.
But I do understand wanting to avoid all of that and just assume if it's working, it's
working.
If it's broken, don't fix it.
And you got to draw the line somewhere.
It's one thing to keep your desktop OS up to date, but the individual components inside
your PC?
Where do we draw the line?
I'd like to ask the audience to linuxactionnews.com slash contact.
All right.
Well, let's talk about the biggest story of the week.
And again, this is proprietary software, but it's got a lot of people excited.
We teased it last week, but now it's official.
You're going to be able to play some at least Windows games on Steam for Linux officially.
And they're calling it Steam Play, and they say it's powered by Proton.
Now Proton is a wrapping up of Wine and other tools, some of them which we talked about
last week, like DXVK, all into one subproject that then the Steam client sits on top of.
So what many people speculated last week, including myself, that DXVK was going to be
sort of at the core of this, turns out it's even more than that.
Not only is it the core of Steam Play, it has been funded by Valve.
They actually employed the DXVK developers since February of this year.
And on top of that, they also help fund VKD3D, which is a direct 3D12 implementation based
on Vulkan.
And they've been contributing towards OpenVR.
So the big question is why?
Why are they doing this?
We speculated that they started the whole Steam on Linux and Steam OS thing in the first
place because of potential changes to Windows and moving to an App Store only software installation
level.
That turned out not to be the case.
And so for a while, we've been thinking that Steam OS was pretty much dead.
The market share for Linux in Steam hasn't been growing significantly.
It kind of hovers around, what, 1%, if that.
And so why are they putting these resources into this?
It kind of doesn't make that much sense unless they see another potential change with Windows
coming.
Yeah, I follow you.
I mean, some people have even said this is going to hurt native game development now.
Developers will not be incentivized to release a Linux version anymore because they can just
use Steam Play, as if developers were just on the edge of their seat to release a whole
bunch of new games.
I think this is part of a bigger strategy.
I don't think it's 100% about Steam OS, and I don't think it's 100% about hedging against
Windows going to ARM or Windows locking everything down to a store.
I think it's about Valve having a store that when you buy a Steam game, you can play it
on any of your devices.
And it really kind of fits in with Steam Home Streaming as well.
I kind of see all of this stuff as one and the same.
With Steam Home Streaming, you could have a Windows PC in a closet that streams the
game to the Steam client on your Linux box or on your Chromebook even.
It's really just an H.264 video stream.
And they also do that with a Steam link, so you could have them on your TV with a controller
streaming off of a Windows PC or a Linux PC in your closet.
And that's not about advancing any one particular agenda either.
It's about you buy a game and you can play it across any platform, be it console, your
desktop, your Linux box, your Mac, all of it.
Because this also is being worked on on the Mac side too, by the way.
I don't think we've mentioned that.
But this stuff is also, they have a Mac build, haven't tested it, have tested the Linux version.
And when I tested the Linux version, the impression I got is, this is about your games
everywhere.
It's not even really about Steam OS.
And what was the performance like then?
Presumably you've tried Windows games with Wine and stuff before.
Is this significantly building on top of that?
So it's been pretty good.
I wouldn't say the performance blows me away, but the ease of use is great.
When this landed, I went and bought Age of Empires.
I don't own Age of Empires because I've never really been able to get it to work very well
on Linux.
And Microsoft's not going to re-release a game from the 90s on Linux.
That's not happening.
So I took this as an opportunity to buy it, because now I can finally play it reliably
from my Steam library.
I just install Steam, I switch over to the beta, I install Age of Empires, and I can
play now.
It's really straightforward and simple, and that matters.
And that's the kind of market where I think this is going to be great for.
The games that were never going to come to Linux anyways, I don't really care if it's
not the best performance.
I don't really need that for a game from the 90s.
I can play it now.
Well, that sounds like exactly what you need, yet more distractions.
And more things from the 90s.
Speaking of distractions and things from the 90s, there is now Windows 95 running inside
an Electron app.
The full thing.
Yeah, this has done the rounds on Twitter and stuff this week.
Everyone's talking about it, and it's funny that the developer apologizes everywhere he
can.
He's like, I'm sorry, I just had to do this, I couldn't resist.
And it really is a blast from the past, isn't it?
Although it does make you look at Windows 95 and think, well, certainly me.
I'm looking at XFCE.
It's really not very different from what I'm running as my desktop now, to be honest.
It's not that much different.
When you start getting into it, this is basically where we've been for a long time.
And you can kind of understand why there's been some open source projects that have tried
to throw the whole thing out and start over.
And by the way, for those of you who grabbed this when it first started making the rounds,
it's been updated a couple of times.
And there's a couple of nice improvements.
The ability to mount external disks, some more stats, a little bit of a code tweak.
Everything seemed a little snappier, so you can grab it again.
And then just download this Electron app and play around with Windows 95.
Yeah, it's obviously been Electron.
It's cross-platform as well.
So if you can run it on Windows 10, if you want, or a Mac even.
But it's funny that I swear I'd remembered this from before.
And I looked it up, and sure enough, I found the link.
Because this is based on JavaScript, I think it was the same as this web version before.
So you don't even need an Electron app.
You can just run it in the browser.
We'll stick a link to that in the show notes.
But that was from a good couple of years ago.
But it is a bit of fun, isn't it?
I don't think it's much more than that.
And I've seen a bit of talk about how this is clearly copyright infringement.
And so I would say grab it while you can, because it may well get pulled down.
Yeah, I'm surprised Microsoft hasn't taken action yet.
Maybe they'll be good about this.
It really is a tribute.
Nobody is using this to make it rich selling copies.
It's a Windows 95 bundled in Electron app.
Yeah, it's a bit of computer history, isn't it really?
And it's a way to preserve that history.
I would like something for Linux, like early GNOME desktops and KDE desktops all wrapped
up in a system in an Electron app.
The idea is actually valid.
I don't know about a JavaScript virtual machine, maybe something else for the virtual machine.
But the idea itself as a way to revisit historical software, I think kind of works.
Yeah, but I would definitely disable the network because a lot of the old software is pretty
riddled with security holes.
No network and no access to the local file system by default.
Yeah, yeah.
All right, well check out linuxactionnews.com slash subscribe for all the ways to get new
episodes where we'll be covering Linux, free software, the open source world, and more
in future episodes.
And go to linuxactionnews.com slash contact for ways to get in touch.
And you can support the whole network effort over at our Patreon page, patreon.com slash
Jupiter signal.
We'll be back next Monday with our weekly take on the latest Linux and open source news.
I'm at Chris LAS.
I'm at Joel Rissington.
Thank you for joining us.
We will see you next week.
Until then, I'm Joel Rissington and I'll talk to you later.

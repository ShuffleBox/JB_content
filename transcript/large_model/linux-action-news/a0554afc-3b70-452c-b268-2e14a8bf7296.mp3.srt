1
00:00:00,000 --> 00:00:09,180
Hello, and welcome to Linux Action News, episode 199, recorded on July 25th, 2021.

2
00:00:09,180 --> 00:00:10,180
I'm Chris.

3
00:00:10,180 --> 00:00:11,180
And I'm Wes.

4
00:00:11,180 --> 00:00:12,180
Hello, Wes.

5
00:00:12,180 --> 00:00:13,180
Let's do the news.

6
00:00:13,180 --> 00:00:17,400
We wanted to start this week with a story you might have seen circulating around.

7
00:00:17,400 --> 00:00:22,540
And that's a recently disclosed denial of service vulnerability in SystemD.

8
00:00:22,540 --> 00:00:26,760
So what's been disclosed here is a SystemD bug that allows any unprivileged user on your

9
00:00:26,760 --> 00:00:32,100
local system to exploit a vulnerability that crashes SystemD and then causes your kernel

10
00:00:32,100 --> 00:00:33,100
to panic.

11
00:00:33,100 --> 00:00:34,100
Yikes.

12
00:00:34,100 --> 00:00:38,920
What makes matters a little bit worse is that this vulnerability was introduced in SystemD

13
00:00:38,920 --> 00:00:44,080
version 2.20, released way back in April of 2015.

14
00:00:44,080 --> 00:00:47,920
So I think it's fair to say it's been widely deployed at this point.

15
00:00:47,920 --> 00:00:52,560
Thankfully, though, the Qualys team reports that once they found this vulnerability, they

16
00:00:52,560 --> 00:00:55,620
pretty much immediately began working with upstream.

17
00:00:55,620 --> 00:00:57,940
It's fascinating looking at the disclosure timeline.

18
00:00:57,940 --> 00:01:02,880
It seems that they sent a CV advisory to Red Hat on June 9th of this year, and then Red

19
00:01:02,880 --> 00:01:03,880
Hat got to work.

20
00:01:03,880 --> 00:01:08,920
But the notes don't really indicate that they sent out a notice to any other Linux distribution,

21
00:01:08,920 --> 00:01:13,840
which because it's SystemD, maybe that wasn't necessarily needed in this case.

22
00:01:13,840 --> 00:01:19,100
For their part, Red Hat product security and SystemD's developers have pretty much immediately

23
00:01:19,100 --> 00:01:21,220
patched the whole.

24
00:01:21,220 --> 00:01:24,980
Looking at that timeline, they seem to be on it, at least this time.

25
00:01:24,980 --> 00:01:29,100
Now here's the reality and why we wanted to talk about this at the top of the show.

26
00:01:29,100 --> 00:01:30,320
It's making a lot of headlines.

27
00:01:30,320 --> 00:01:31,660
It's making a lot of news.

28
00:01:31,660 --> 00:01:33,340
It's not necessarily a huge deal.

29
00:01:33,340 --> 00:01:35,240
And we just wanted you to have the facts.

30
00:01:35,240 --> 00:01:40,780
It's an exploit that requires that local attacker has to mount a file system at an extremely

31
00:01:40,780 --> 00:01:42,840
long path that messes with SystemD.

32
00:01:42,840 --> 00:01:46,340
And while yes, it is an issue and you should check for updates, testing seems to indicate

33
00:01:46,340 --> 00:01:49,540
that the vulnerability is not present in all Linux distros.

34
00:01:49,540 --> 00:01:53,740
It does seem to be in Debian 10, Red Hat derivatives, and Ubuntu derivatives.

35
00:01:53,740 --> 00:01:56,460
So it covers a lot, so check for updates.

36
00:01:56,460 --> 00:02:00,580
Well soon, you can just upgrade right to Debian 11.

37
00:02:00,580 --> 00:02:04,820
This week, the team announced their release date for the much anticipated new version.

38
00:02:04,820 --> 00:02:07,060
Indeed, it's known as Bullseye.

39
00:02:07,060 --> 00:02:11,100
Debian 11 has been set for an August 14th release.

40
00:02:11,100 --> 00:02:13,680
You know what's also kind of news with this story?

41
00:02:13,680 --> 00:02:15,220
The speed of everything.

42
00:02:15,220 --> 00:02:16,220
Right.

43
00:02:16,220 --> 00:02:22,300
With the Debian 11 full freeze just last week, I don't think we expected a firm date to be

44
00:02:22,300 --> 00:02:24,240
set point so soon.

45
00:02:24,240 --> 00:02:25,240
No way.

46
00:02:25,240 --> 00:02:26,240
No.

47
00:02:26,240 --> 00:02:30,420
Prior Debian releases, just for context, have taken up to a few months past the freeze point

48
00:02:30,420 --> 00:02:31,900
before they were released.

49
00:02:31,900 --> 00:02:33,780
Yeah, that's kind of what I was thinking.

50
00:02:33,780 --> 00:02:36,500
Like, okay, all right, you guys are really on it.

51
00:02:36,500 --> 00:02:39,060
And it does look like a really good release, Wes.

52
00:02:39,060 --> 00:02:43,460
Debian 11 is going to have a lot of goodies, Linux 5.10, and that's the LTS version of

53
00:02:43,460 --> 00:02:44,460
the Linux kernel.

54
00:02:44,460 --> 00:02:48,120
And of course, you got all the package improvements and updates since Debian 10 launched about

55
00:02:48,120 --> 00:02:49,120
two years ago.

56
00:02:49,120 --> 00:02:52,900
So, of course, we'll cover the release here in the show.

57
00:02:52,900 --> 00:02:57,140
And then when Debian 11 does release, we will cover that right here in Linux Action News

58
00:02:57,140 --> 00:03:02,420
and we will have a review of the release in Linux Unplugged.

59
00:03:02,420 --> 00:03:07,160
While we don't have much to share on this, we did want to give you a brief update on

60
00:03:07,160 --> 00:03:09,300
Audacity this week.

61
00:03:09,300 --> 00:03:14,300
Muse Group, the new owners of the free software audio editor, published an updated privacy

62
00:03:14,300 --> 00:03:17,260
policy and an apology.

63
00:03:17,260 --> 00:03:18,260
An apology, huh?

64
00:03:18,260 --> 00:03:20,020
Well, that's interesting, I suppose.

65
00:03:20,020 --> 00:03:23,460
The update itself addresses the main points of criticism leveled against the previous

66
00:03:23,460 --> 00:03:25,300
version of the privacy policy.

67
00:03:25,300 --> 00:03:29,280
And in particular, there's several points that were changed.

68
00:03:29,280 --> 00:03:34,340
That provision about being 13 years or older to use Audacity, that's just been completely

69
00:03:34,340 --> 00:03:35,460
removed.

70
00:03:35,460 --> 00:03:39,680
They've added a broader explanation for air reporting and the update checking functionality

71
00:03:39,680 --> 00:03:40,680
to the policy.

72
00:03:40,680 --> 00:03:45,180
They also clarified that the full IP address is never stored, not even like a hashed version

73
00:03:45,180 --> 00:03:49,340
of it, and that the collecting personal data for law enforcement paragraph makes it clear

74
00:03:49,340 --> 00:03:52,700
that no additional data is collected.

75
00:03:52,700 --> 00:03:55,300
So problem solved, I guess, Wes?

76
00:03:55,300 --> 00:04:01,460
I think it remains to be seen if this revised privacy policy and the apology itself will

77
00:04:01,460 --> 00:04:04,500
result in a calming down of the situation.

78
00:04:04,500 --> 00:04:07,740
Only time will tell.

79
00:04:07,740 --> 00:04:10,120
We have a couple of hardware stories this week.

80
00:04:10,120 --> 00:04:12,300
First up, some follow up on the Steam Deck from last week.

81
00:04:12,300 --> 00:04:16,300
We now know that all models feature socketed M.2 storage.

82
00:04:16,300 --> 00:04:20,620
Valve notes that it's not necessarily user accessible or replaceable.

83
00:04:20,620 --> 00:04:24,840
But I mean, you can't help but wonder how long until some user out there buys the lowest

84
00:04:24,840 --> 00:04:29,580
tier storage deck and puts like two terabytes of storage or some crazy amount of storage

85
00:04:29,580 --> 00:04:30,580
in there.

86
00:04:30,580 --> 00:04:31,580
It seems like it's going to happen.

87
00:04:31,580 --> 00:04:35,380
Stop putting ideas in my head, you.

88
00:04:35,380 --> 00:04:39,700
And while we're speaking of storage, a Valve designer clarified that the videos you've

89
00:04:39,700 --> 00:04:45,940
maybe seen from IGN with the Steam Deck playing actual games, well, all of those were apparently

90
00:04:45,940 --> 00:04:48,060
done off a micro SD card.

91
00:04:48,060 --> 00:04:52,980
Yeah, I think Valve's trying to make a statement that they have a really fast SD card reader

92
00:04:52,980 --> 00:04:53,980
in there.

93
00:04:53,980 --> 00:04:56,220
So if you put a high speed SD card in there, you're going to have an OK time.

94
00:04:56,220 --> 00:04:57,580
And you think about that.

95
00:04:57,580 --> 00:05:01,100
That's like demoing it to the press for the first time and they were OK running it off

96
00:05:01,100 --> 00:05:02,100
an SD card.

97
00:05:02,100 --> 00:05:05,580
That feels like a statement or an act of desperation.

98
00:05:05,580 --> 00:05:09,260
I guess we'll know once we see the deck.

99
00:05:09,260 --> 00:05:12,600
That same designer on Twitter also made it clear that the Steam Deck could just play

100
00:05:12,600 --> 00:05:17,800
games off of an external SSD because it is just a PC after all.

101
00:05:17,800 --> 00:05:22,180
But how did we get to that handheld PC running Linux?

102
00:05:22,180 --> 00:05:29,580
It all started back in July 2012 when Valve's Gabe Newell mentioned his concerns about Windows

103
00:05:29,580 --> 00:05:36,200
8, stating he felt it would be a catastrophe for everyone in the PC space.

104
00:05:36,200 --> 00:05:41,260
Their concerns over the Windows 8 App Store and the new Windows UI kicked off something

105
00:05:41,260 --> 00:05:43,660
of a revolution inside Valve.

106
00:05:43,660 --> 00:05:45,980
I can't believe it was July of 2012.

107
00:05:45,980 --> 00:05:49,500
I clearly, clearly remember the moment.

108
00:05:49,500 --> 00:05:51,660
It's just crystallized in my memory.

109
00:05:51,660 --> 00:05:56,820
And in that spirit, Liam over at Gaming on Linux has an impressive write up of the rise

110
00:05:56,820 --> 00:05:58,300
of Steam on Linux.

111
00:05:58,300 --> 00:06:02,140
And it is quite literally a timeline that is worth your time.

112
00:06:02,140 --> 00:06:03,140
Indeed.

113
00:06:03,140 --> 00:06:09,140
It's been a long and fascinating nine plus years now for Valve and for Linux.

114
00:06:09,140 --> 00:06:11,660
And Liam nailed it in that write up.

115
00:06:11,660 --> 00:06:13,700
I did mention we have two hardware stories.

116
00:06:13,700 --> 00:06:17,180
The second hardware story this week is the Framework laptop.

117
00:06:17,180 --> 00:06:20,900
It is now shipping and the press reviews have started to hit the internet.

118
00:06:20,900 --> 00:06:24,500
So we've done a little bit of a meta analysis of the coverage.

119
00:06:24,500 --> 00:06:30,620
If you don't recall, the Framework is a fully modular laptop that you can put together yourself

120
00:06:30,620 --> 00:06:33,520
starting at 750 USD.

121
00:06:33,520 --> 00:06:37,420
And it seems to have been a hit overall in the reviews.

122
00:06:37,420 --> 00:06:42,720
Gizmodo noted the performance was on par with other laptops of its same class, although

123
00:06:42,720 --> 00:06:45,860
with shorter battery life than most.

124
00:06:45,860 --> 00:06:47,340
Seemed like by quite a bit.

125
00:06:47,340 --> 00:06:50,860
CNET reviewers noted though that they loved being able to switch the side that a given

126
00:06:50,860 --> 00:06:53,980
port is on based on where they needed to attach a cable.

127
00:06:53,980 --> 00:06:55,620
I think that's a fantastic idea.

128
00:06:55,620 --> 00:06:59,700
Wow, I already have too many laptops that have different ports from different sides

129
00:06:59,700 --> 00:07:00,700
and I can't keep it straight.

130
00:07:00,700 --> 00:07:01,700
I need this.

131
00:07:01,700 --> 00:07:02,700
I know this right there.

132
00:07:02,700 --> 00:07:03,980
I'm like, yes, I love that idea.

133
00:07:03,980 --> 00:07:07,660
Just as a concept, no more having to fish that cable around.

134
00:07:07,660 --> 00:07:12,860
They also note over at CNET that each Framework part has a QR code on it and a short URL to

135
00:07:12,860 --> 00:07:16,800
take you to all of the info you need about it and the grand plan is here hopefully one

136
00:07:16,800 --> 00:07:21,120
day to have replacement parts and upgrade parts and Frameworks even talked about a market

137
00:07:21,120 --> 00:07:24,760
where you could trade these parts on and upgrade and exchange.

138
00:07:24,760 --> 00:07:29,580
And it's partially for that reason I think that PC World called it the ultimate write

139
00:07:29,580 --> 00:07:31,860
to repair laptop.

140
00:07:31,860 --> 00:07:37,320
So it really does seem initial impressions have been fairly good, although it is still

141
00:07:37,320 --> 00:07:39,700
definitely early days for the hardware.

142
00:07:39,700 --> 00:07:43,460
Don't worry though, we'll be keeping an eye on it.

143
00:07:43,460 --> 00:07:55,660
Might even just opt to pick one up for an in-studio review someday.

144
00:07:55,660 --> 00:07:57,540
Leno.com slash LAN.

145
00:07:57,540 --> 00:08:02,180
Go there to get $100 in 60 day credit towards a new account and go there to support the

146
00:08:02,180 --> 00:08:03,180
show.

147
00:08:03,180 --> 00:08:04,980
You know, Leno is our cloud server provider.

148
00:08:04,980 --> 00:08:08,940
They started in 2003 as one of the very first companies in cloud computing.

149
00:08:08,940 --> 00:08:16,100
Now 18 years later, Leno is the largest independent open cloud provider in the world with 11 global

150
00:08:16,100 --> 00:08:21,260
data centers serving nearly a million customers and businesses around the globe.

151
00:08:21,260 --> 00:08:23,980
But Leno's mission remains unchanged.

152
00:08:23,980 --> 00:08:28,540
Since the day it started, their mission has been to make cloud computing simple, affordable

153
00:08:28,540 --> 00:08:30,180
and accessible to all.

154
00:08:30,180 --> 00:08:34,620
And that's led to a best in class experience and why we host everything on Leno.

155
00:08:34,620 --> 00:08:35,620
It's easy to use, of course.

156
00:08:35,620 --> 00:08:41,260
It has a very powerful clean cloud dashboard, but they also offer things like S3 compatible

157
00:08:41,260 --> 00:08:48,020
object storage, a powerful DNS manager, lock storage, of course, Kubernetes support, one

158
00:08:48,020 --> 00:08:51,100
click application deployments and super fast networking.

159
00:08:51,100 --> 00:08:54,980
In fact, Leno owns the connections between their data centers.

160
00:08:54,980 --> 00:08:56,860
They are their own ISP.

161
00:08:56,860 --> 00:09:01,500
And with pricing 30 to 50 percent cheaper than other major cloud providers, it's worth

162
00:09:01,500 --> 00:09:02,500
checking out.

163
00:09:02,500 --> 00:09:06,780
And you know, 66 percent of companies save money working with a mix of alternative cloud

164
00:09:06,780 --> 00:09:10,660
providers instead of just relying on one hyperscaler.

165
00:09:10,660 --> 00:09:12,620
Leno can be part of your multi cloud strategy.

166
00:09:12,620 --> 00:09:16,660
And if you ever run into any trouble getting anything set up, Leno comes with amazing 24

167
00:09:16,660 --> 00:09:19,220
seven customer support by phone or ticket.

168
00:09:19,220 --> 00:09:23,180
And Leno is making our Jupiter Colony reunion road trip possible with meet ups in Salt Lake

169
00:09:23,180 --> 00:09:27,380
City, Denver and more all along the way powered by Leno.

170
00:09:27,380 --> 00:09:32,180
So go use our one hundred dollars to test your system to build something or to learn.

171
00:09:32,180 --> 00:09:35,660
You got to go check out Leno for yourself and take advantage of that special offer.

172
00:09:35,660 --> 00:09:38,500
They're dedicated to offering the best in virtualized cloud computing.

173
00:09:38,500 --> 00:09:51,700
If it runs on Linux, it runs on Leno at Leno dot com slash land.

174
00:09:51,700 --> 00:09:53,180
Linux dot ting dot com.

175
00:09:53,180 --> 00:09:57,020
If you're sick of overpaying for cell service, go see how much you could save and then take

176
00:09:57,020 --> 00:10:02,660
twenty five off that at Linux dot ting dot com ting is an MBNO or a mobile virtual network

177
00:10:02,660 --> 00:10:03,660
operator.

178
00:10:03,660 --> 00:10:08,140
And what that really means is the ting mobile customers get access to the big carrier networks,

179
00:10:08,140 --> 00:10:11,460
but with way better customer service at a lower cost.

180
00:10:11,460 --> 00:10:16,300
With ting mobile, you get the same coast to coast coverage as you would with the big guys.

181
00:10:16,300 --> 00:10:17,460
You just pay less.

182
00:10:17,460 --> 00:10:20,940
That's why I've been a ting customer since 2013.

183
00:10:20,940 --> 00:10:25,420
Ting has stayed flexible and nimble with my various patterns of usage over the years like

184
00:10:25,420 --> 00:10:27,620
no carrier could ever dream of.

185
00:10:27,620 --> 00:10:32,980
And Ting's plans are simple and straightforward, like their new set 12 plan, 12 gigs of data,

186
00:10:32,980 --> 00:10:35,860
unlimited talk and text for thirty five bucks a month.

187
00:10:35,860 --> 00:10:40,460
And if you follow Ting on Twitter at Ting FTW, they're giving away five hundred dollars

188
00:10:40,460 --> 00:10:43,300
in gift cards for use of either Best Buy or Amazon.

189
00:10:43,300 --> 00:10:47,340
So go follow them at Ting FTW for more details and get access to that.

190
00:10:47,340 --> 00:10:51,100
Now, if you need two gigs or 20 gigs or a lot more than that, Ting's got a perfect plan

191
00:10:51,100 --> 00:10:52,100
for you.

192
00:10:52,100 --> 00:10:57,140
Every plan gets access to Ting's award winning customer service with nationwide LTE and 5G

193
00:10:57,140 --> 00:10:58,140
coverage.

194
00:10:58,140 --> 00:11:04,100
But the best thing about Ting, never any contracts, no contracts, no contracts.

195
00:11:04,100 --> 00:11:06,940
It's simple to switch to Ting, too, pretty much any phone will work.

196
00:11:06,940 --> 00:11:11,260
So just head to Linux.ting.com, check out your current phone, create an account, pick

197
00:11:11,260 --> 00:11:12,260
the plan that's right for you.

198
00:11:12,260 --> 00:11:14,580
Once everything is set, Ting will send you a SIM card.

199
00:11:14,580 --> 00:11:15,580
You pop that in your phone.

200
00:11:15,580 --> 00:11:17,380
You get activated in minutes.

201
00:11:17,380 --> 00:11:21,220
Cutting your phone bill in half has never been easier with Ting's brand new plans.

202
00:11:21,220 --> 00:11:23,260
It truly is the next generation of Ting mobile.

203
00:11:23,260 --> 00:11:24,260
It's here.

204
00:11:24,260 --> 00:11:26,900
Go see how much you could save and then take twenty five bucks off that.

205
00:11:26,900 --> 00:11:29,900
Linux.ting.com.

206
00:11:29,900 --> 00:11:35,860
We've been keeping an eye on Google's Fuchsia project for years now, and it seems with Fuchsia

207
00:11:35,860 --> 00:11:40,840
out in the open, Google's becoming a bit more relaxed about their engineers talking

208
00:11:40,840 --> 00:11:43,980
more freely about the OS.

209
00:11:43,980 --> 00:11:49,420
To that end, Rubber Duck Engineering, a weekly web show hosted by Fuchsia software engineer

210
00:11:49,420 --> 00:11:55,720
Adam Barth, and Flutter engineer Eric Seidel recorded a dedicated episode about the current

211
00:11:55,720 --> 00:11:57,620
state of Fuchsia.

212
00:11:57,620 --> 00:12:00,780
You'll have links to the entire chat in our show notes.

213
00:12:00,780 --> 00:12:02,860
But of course, we grabbed a few clips for you all.

214
00:12:02,860 --> 00:12:06,300
We thought maybe these clips would shed light on aspects of Fuchsia that are a little more

215
00:12:06,300 --> 00:12:12,660
noteworthy to us Linux users, including the unique way that Fuchsia acquires software.

216
00:12:12,660 --> 00:12:14,660
Here's Adam Barth on that point.

217
00:12:14,660 --> 00:12:16,660
So over here, I just put this thing up.

218
00:12:16,660 --> 00:12:17,660
I'm going to run LS.

219
00:12:17,660 --> 00:12:21,900
So what's interesting is not what happened in this window, but what happened in this

220
00:12:21,900 --> 00:12:22,900
window.

221
00:12:22,900 --> 00:12:23,900
OK.

222
00:12:23,900 --> 00:12:30,740
So this prior to me running LS, this system did not have LS on it.

223
00:12:30,740 --> 00:12:38,180
It just in the time I hit enter, it discovered an implementation of LS and basically installed

224
00:12:38,180 --> 00:12:39,540
it on the device.

225
00:12:39,540 --> 00:12:41,100
And now I have LS.

226
00:12:41,100 --> 00:12:46,660
It seems Fuchsia has a new way of managing software, applying some of the concepts and

227
00:12:46,660 --> 00:12:49,260
lessons learned from the web.

228
00:12:49,260 --> 00:12:51,320
It's more like a cache and an install.

229
00:12:51,320 --> 00:12:58,540
So in other operating systems, installation is a pull, like a push mechanism, right?

230
00:12:58,540 --> 00:13:01,460
You like type app get install a thing, right?

231
00:13:01,460 --> 00:13:03,020
And then you got it.

232
00:13:03,020 --> 00:13:05,560
And if you want to get rid of it, you say uninstall the thing.

233
00:13:05,560 --> 00:13:10,900
So here the idea is the entire universe of software is available to you at your fingertips.

234
00:13:10,900 --> 00:13:15,400
All you need to do is mention it, then it'll come and run on your device.

235
00:13:15,400 --> 00:13:19,740
And when it's done, it'll or you run out of space in your cache, it'll disappear and float

236
00:13:19,740 --> 00:13:20,740
away.

237
00:13:20,740 --> 00:13:22,940
And when you run it again, it'll come back when you need it.

238
00:13:22,940 --> 00:13:25,300
It's a concept of ephemeral software.

239
00:13:25,300 --> 00:13:29,260
Another way Fuchsia differs from Linux is the security model around its kernel known

240
00:13:29,260 --> 00:13:30,940
as Zircon.

241
00:13:30,940 --> 00:13:33,880
Another thing is like the kernel has no notion of user.

242
00:13:33,880 --> 00:13:40,700
So in Windows, there's a very elaborate access control system where every object is associated

243
00:13:40,700 --> 00:13:45,260
with a security identifier, an access control list, and there's a thing.

244
00:13:45,260 --> 00:13:49,580
Linux every process has a user ID and a group ID and the kernel makes lots of like checks

245
00:13:49,580 --> 00:13:50,580
against that.

246
00:13:50,580 --> 00:13:55,700
So Zircon just has none of that, has no concept of user whatsoever.

247
00:13:55,700 --> 00:13:58,900
The way it does access checks is just do you have a handle to this thing?

248
00:13:58,900 --> 00:13:59,900
If so, great.

249
00:13:59,900 --> 00:14:01,900
If not, no way.

250
00:14:01,900 --> 00:14:06,700
And never missing an opportunity to make it easy to bring your existing software stack

251
00:14:06,700 --> 00:14:11,460
to Fuchsia, Google has plumbed in Wayland support.

252
00:14:11,460 --> 00:14:16,020
We have a Wayland adapter so we can run software that knows how to speak to Wayland.

253
00:14:16,020 --> 00:14:18,580
But it's not like we have a separate Wayland server running.

254
00:14:18,580 --> 00:14:22,820
That thing just knows how to tell Scenic what the thing wanted to do in Wayland.

255
00:14:22,820 --> 00:14:25,740
And does that Wayland adapter run separate from Scenic?

256
00:14:25,740 --> 00:14:26,740
Yeah.

257
00:14:26,740 --> 00:14:30,700
So you sort of imagine like a service-oriented architecture.

258
00:14:30,700 --> 00:14:35,100
So on one end it exposes Wayland and then on the other end it just talks to Scenic just

259
00:14:35,100 --> 00:14:36,780
like any other client talks to Scenic.

260
00:14:36,780 --> 00:14:40,380
And if Wayland support's not enough for you, it seems that porting your existing applications

261
00:14:40,380 --> 00:14:44,980
from Linux to Fuchsia could actually be very straightforward, especially if your application

262
00:14:44,980 --> 00:14:46,940
already runs on Windows.

263
00:14:46,940 --> 00:14:53,340
The good rule of thumb is if the program knows how to run both on Linux and on Windows, then

264
00:14:53,340 --> 00:14:55,740
porting it to Fuchsia is relatively easy.

265
00:14:55,740 --> 00:15:01,500
If it only knows how to run on Linux, then depending on what it's doing, it can be a

266
00:15:01,500 --> 00:15:02,540
little tricky.

267
00:15:02,540 --> 00:15:08,020
So we have a compatibility layer we call POSIX Lite, which contains the parts of POSIX that

268
00:15:08,020 --> 00:15:13,900
we think don't negatively impact security, and then we provide that interface on top

269
00:15:13,900 --> 00:15:16,420
of the underlying Fuchsia primitives.

270
00:15:16,420 --> 00:15:22,380
And our favorite moment from the stream, when a live viewer asked if Fuchsia could one day

271
00:15:22,380 --> 00:15:24,940
replace desktop Linux.

272
00:15:24,940 --> 00:15:28,040
But I also think it's important to realize that people always want to look at these things

273
00:15:28,040 --> 00:15:33,500
in a zero-sum fixed way, like is this going to replace X, like is this going to replace

274
00:15:33,500 --> 00:15:35,180
Linux on the desktop or whatever.

275
00:15:35,180 --> 00:15:39,140
I think even more in a, there's like more to be had, right?

276
00:15:39,140 --> 00:15:43,300
If you have a system that's different than Linux, it's maybe different for other things,

277
00:15:43,300 --> 00:15:47,220
and maybe there's new things that you could do with it that are either difficult to do

278
00:15:47,220 --> 00:15:51,280
with Linux or awkward, or you might benefit from a different application.

279
00:15:51,280 --> 00:15:55,580
And so I think it's more useful to think about like, what are the new things that you could

280
00:15:55,580 --> 00:15:59,660
do with this that are possibly additive as opposed to replace it?

281
00:15:59,660 --> 00:16:01,140
I think that really nails it right there.

282
00:16:01,140 --> 00:16:03,120
What are the new things that it could do additive?

283
00:16:03,120 --> 00:16:06,740
Because Fuchsia truly feels like a lessons learned project for Google.

284
00:16:06,740 --> 00:16:10,360
In the Skunk Works, the engineers wanted to build something that they learned a little

285
00:16:10,360 --> 00:16:13,660
bit from Linux, they learned a little bit from Windows, they learned from deploying

286
00:16:13,660 --> 00:16:16,740
software on the web, and they wanted to bring it all into one place.

287
00:16:16,740 --> 00:16:20,180
And notable how easy it is to move software over to Fuchsia.

288
00:16:20,180 --> 00:16:24,340
Yeah, that's a little bit surprising, but I guess you got to have something to run on

289
00:16:24,340 --> 00:16:25,340
there.

290
00:16:25,340 --> 00:16:26,340
Yeah, you need software, right?

291
00:16:26,340 --> 00:16:30,100
And get a little Wayland support, some basic POSIX support, and you're pretty much good

292
00:16:30,100 --> 00:16:31,100
to go.

293
00:16:31,100 --> 00:16:32,100
We'll see where it goes.

294
00:16:32,100 --> 00:16:35,560
You never know, but there's so much going on every single week, and we try to distill

295
00:16:35,560 --> 00:16:38,100
it down for you in a very consumable way.

296
00:16:38,100 --> 00:16:42,740
So make sure you get every single episode by going to linuxactionnews.com slash subscribe

297
00:16:42,740 --> 00:16:44,980
for all the ways to get them new episodes.

298
00:16:44,980 --> 00:16:48,860
And linuxactionnews.com slash contact to let us know how we're doing.

299
00:16:48,860 --> 00:16:50,640
Hey, maybe share the show.

300
00:16:50,640 --> 00:16:54,380
If you know someone who works in IT and needs to stay up to date, send them a link to a

301
00:16:54,380 --> 00:16:56,220
recent episode that you really liked.

302
00:16:56,220 --> 00:17:01,100
Join us for meetups in Salt Lake City and Denver coming up soon.

303
00:17:01,100 --> 00:17:03,760
Meetup.com slash Jupiter Broadcasting.

304
00:17:03,760 --> 00:17:08,340
As for us, we'll be back next Monday with our weekly take on the latest Linux and open

305
00:17:08,340 --> 00:17:09,340
source news.

306
00:17:09,340 --> 00:17:35,380
Thanks for joining us, and we will see you next week.


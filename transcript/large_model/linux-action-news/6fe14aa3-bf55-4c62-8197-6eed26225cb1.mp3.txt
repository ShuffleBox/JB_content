Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.
This is episode 29, recorded on November 26th, 2017.
I'm Chris.
And I'm Joe.
Hello, Joe.
I was surprised.
I thought maybe we'd have no news with the holiday week here in the States, but no, it
turns out we do have a few things to talk about this week.
One of them, probably not too surprising to most of those in our audience.
Yeah, so Google have been collecting location data from Android users who don't even know
about it.
So even if you've got location turned off, and even if you've got no SIM card in your
device, they're still collecting location data.
Yeah, this is actually a result of some legitimate journalism that courts.com did.
And they discovered that even if you have your SIM device removed, even if you have
all location services disabled, every time your phone registers a cell tower nearby,
with whatever means it does that, I suppose, it logs in a database, and then batch uploads
it to Google next time it has an internet connection, say when you're on Wi-Fi.
Now I think maybe the most surprising element was, even if you don't have a SIM card part,
and Google says, we were never really using this data for anything significant.
We were discarding it almost immediately.
It was just helping us get push notifications to you a little faster.
Yeah, that's what I'd say.
Yeah, it seemed a little too typical of a response.
And it was also odd because the cellular network is responsible for routing the data on the
cellular network.
So they keep track of which towers you're next to.
I don't really know why Google would need to.
It's not like they can influence the TCP IP network of AT&T or Verizon.
And it's worth pointing out that it's not just phones here.
We're talking about tablets as well.
And a lot of them.
They push us out across a range of devices back in January, modern devices, quote unquote.
So they must be doing this through the Play Services API.
That would be my speculation completely.
The Quartz article and the pocketnow.com article we have linked don't actually go into how
Google managed to successfully push this code out to all these Android users and then is
going to successfully turn it off.
They must be using the Play Services, but that would be an assumption.
Well, I can't see any other way to do it.
Well, then does that mean your device has it if you put the Google Apps and Play Services
on an alternative ROM?
Almost certainly, yes.
Which is quite scary, really.
It makes me want to maybe think about just going F-Droid only, but I don't think I'm
ready to do that just yet.
But you know, this whole thing is not a surprise to me at all because Android is all about
location.
Everything you do on the phone, it asks you to enable location.
Now most people I think just have it on by default and don't think about it, but I disabled
my location whenever possible.
I only enable it when I need to do GPS basically with my phone.
I'm not interested in sites knowing my location.
One of the most annoying things is in Chrome on Android, it pops up, this site needs your
location.
No, it doesn't need it.
It wants my location because it wants that data.
And every time you open maps, it wants you to enable location.
And the thing is that it's so easy to enable it, but it's quite difficult to turn it off.
You can't turn it off with a widget, for example, but you can turn it on.
And so it's all weighted to try and get as much location data as possible, which is not
a huge surprise because that data is really valuable to an advertising company like Google.
Right.
I don't really think any of us are too surprised.
And this is sort of what Android is meant to do.
But that niggly thing in the back of our minds is we all know that Google is an advertising
company.
And that's where it gets a little uncomfortable because we're all getting a little wigged
out by this, and it's just becoming a little too much.
And Google just keeps accidentally doing this.
I bet a lot of us thought back to the Wi-Fi snooping that they got caught driving around,
wholesaling, TCP dumping people's Wi-Fi data, and then, oh, sorry, we left that turned on.
That thing that takes up tons and tons of storage and dumps traffic from the interface
to the hard drive, we accidentally left that turned on.
Yeah, they must have had huge disk arrays in those cars because if you drive around
all day every day, that's a lot of data, isn't it?
Yeah.
You build for that.
Exactly.
Yeah.
It just feels very shady from them.
Not this cool company anymore, are they?
They're just a big, evil advertising company at the end of the day.
Well, no.
It's a big, evil company's alphabet.
Google's still great.
We love Google.
Just look online at all the comments.
I'm not a big Google hater.
I am a little skeptical sometimes of some of their actions, and I apply Google cautiously
in my life.
And this is why I opted not to be an Android user, is I just sort of assumed this stuff
is going on.
And in the meantime, I'm waiting for the best free phone possible, and I'll jump to that
when it's available.
And some of you may remember during this whole free phone initiative that Canonical was taking
on a few years ago, a project was born, a project named Mirror, which may have its relevancy
now on the desktop.
Yeah, we thought that it was going to die when they made the announcement about ditching
the phone and everything.
But it seems to have lived on as part of the Wayland stack on Ubuntu.
And now they're reaching out to the community for input on exactly how that is going to
work.
So even if you're not an Ubuntu user, or ever going to be a Mirror user, or even a Wayland
user, this post is worth reading, simply because it illustrates a couple of major design philosophies
that people are kicking around for rebuilding desktops for Wayland.
Major architecture changes, and they're sort of seeking input on the pros and cons for
each architecture.
One is sort of a monolithic, everything is one big process, it's non-modular at all,
it's from top to bottom, it's a server, compositor, and window manager, the panels, the dock,
the desktop, it's all a single glorious process, which means it's nice and secure, it's impossible
for apps to learn or manipulate the shell in unexpected ways, it also means a single
thing can take the whole damn thing down.
Now there are some desktops today, some major desktops, that are building their Wayland
support this way.
It may perform well, and it solves having to create a sophisticated IPC system, but
it also means single points of failure for your entire desktop.
So then they toss out the highly modular desktop, which is the server, a compositor, a window
manager, each panel and dock and desktop are all individual processes.
You can mix and match different components with this approach, there's less likely for
one component to crash and take down the whole system, but it's very complex.
It relies on an IPC system, an inner process communication system, to sync state between
all the separate processes, which can risk race conditions and add delay, and security
is compromised, because you can potentially have maybe a man in the middle there, or something
like that that can listen in on another application, but that's generally how X applications work
today, the former there.
And they're seeking input on what the community wants, and there's been some good discussion
already.
I really don't know where I stand on this, because as an XFCE user, modularity and customization
and everything is key to the whole XFCE desktop.
But I do understand these cons, this security issue, and the fact that X is horribly insecure.
So I just don't know, I don't really want to have a desktop that will potentially crash
that easily.
Yeah.
I'm thinking of your OBS machine.
Me too.
Yep.
I'm looking at it right now.
I think the question that has to be answered here is, what's the final role of MIR going
to be here?
Is MIR going to be a set of stable APIs that different desktop projects can target to implement
their Wayland support?
So instead of them inventing the ability to be a compositor, and creating all of this
stuff to do...
Because remember, Wayland is a protocol, it's not a server.
There's not some server that I3 can just be rebuilt to talk to.
No, they have to rebuild I3, and that's where Sway is coming from.
These are massive re-buildings of some of these projects, and not all of them are going
to want to write their own Sway.
You can check that out if you want to, just go Google Sway desktop.
It's a major problem.
And MIR could come along to projects like XFCE, Cinnamon even, and say, here's a way
to support Wayland out of the box.
And if that is going to be MIR's final role, then it seems like the modular approach is
the most obvious, because different projects could select the components that they want,
or build their own components to make a better snap in.
And if it's all one big monolithic process, all big one monolith, that's going to be less
attractive to some of these more modular open source projects like XFCE, or Cinnamon, just
as a random example.
And so what do you think about Ubuntu and Canonical reaching out to the community like
this and asking for their input?
Well, it's gone better than I expected.
When I first saw it, I thought, probably not going to be very productive.
I don't know why, my bias was just, this seems like one of those things where you just kind
of have to have a technical understanding of the market, what technical deficiencies
are out there, and what your product can do that's not currently being solved, and build
for that.
And that seems the way you build something like this.
But now having this opened up for input, you're seeing some good conversations in here, specifically
like from one of the Sway developers about some of the things they considered, people
who are thinking about theming, people that are in here representing KWIN, I mean, it's
actually a pretty productive conversation.
So now, having seen the results, I'm actually kind of glad they did it.
Well, I think that if it's going to be used by the community at large, and not just Ubuntu,
then they need to get community involvement, don't they?
So this is definitely the right approach to it.
As you say, if it's going to work for the likes of XFCE, then they can't expect to just
invent it themselves, and make all the decisions, and then have other people adopt it.
So I think it is a good idea.
But at the same time, it does show a change in Ubuntu, doesn't it?
And canonical, that they used to just make all the decisions, make the thing, and push
it out there as free software, take it or leave it.
Whereas now, they're going for more of this community engagement approach, which I suppose
has got to be better.
I think my closing thoughts on this would be, this process now being out in the open,
may give us real indications if there's community demand for this project in the first place.
I sure hope there is.
Because I could see a future where a desktop project could say, we support mere Wayland
version 1.0.
And that means you get real VNC support remote desktop.
That means you get Vulkan graphics that don't screw up on your machine.
It means you can have copy and paste between applications.
You know you get a certain feature set.
And when the next version comes out, you get the next set of features.
That would be the best way as an end user, me personally, selfishly here, that would
be the best way for me to wrap my head around these transitions we're about to hit with
different desktop projects having different levels of support for different basic desktop
functionality.
Well, as long as I never, ever have to see screen tearing again, I'm happy.
All in the name of screen tearing, eh, Joe?
Yeah.
All right.
So the Raspberry Pi Foundation have got a new magazine.
So I thought we'd just have a quick mention of this.
It's free, as in beer, and it's also Creative Commons.
So that's all good.
Or you can pay for a hard copy of it, a paper copy.
It's called Hack Space.
And as the name suggests, it's all about making and building and creating things.
Obviously Raspberry Pi focused, and most of the stuff in there is going to involve Linux.
So hopefully it's going to spread Linux that little bit further.
Yeah, it's really well done.
Exceptionally good photography.
They also have apps in the iOS and Play stores.
If you check it out, just go grab the free PDF from the link we have in the show notes.
It really has a very well done feeling.
There's a couple of very interesting articles in there.
I read through a couple of them before the show this morning, and I'm going back to it
afterwards to keep reading them.
I was impressed.
Well, it's not a surprise that it's well put together, because if you look at who's involved
in it, there's a couple of the guys from Linux Voice, Andrew Gregory and Ben Everard.
So it's great to see them working on another magazine.
And yeah, do check it out if you're interested in making in the Raspberry Pi.
DigitalOcean.com.
Go create an account and then use our promo code, here's the thing.
All one word, you smush it together and you get a $10 credit.
Now everything you deploy at DigitalOcean, you can get launched in under a minute, and
it's all backed by brilliant, fast SSDs.
They have 40 gigabit connections coming into the hypervisor.
They have just about every Linux distribution you'd ever want to run on a server available,
and free BSD.
They have all kinds of dynamic storage options, where you can add more storage as you need
it, add more RAM or CPU.
I love the block storage system, just shows up as a Dev SDA device, like a dev device.
And object storage is the way to go now.
It feels like the future has arrived.
They can make this all so simple through their dashboard.
If you've never worked with anything like this, you can get started today.
And if you're a pro, you've been working with this for years, you're going to be impressed
with their straightforward API and how powerful that dashboard is.
Tons of backend features, but I want to point you this week to an introduction to machine
learning.
It's a big buzzword.
You hear Google talking about it constantly.
You hear it's integrated into all of the products these days.
Well, what the heck is it?
DigitalOcean has a fantastic write-up.
Go to digitalocean.com, create your account, use our promo code, here's the thing.
And then while you're there, check out their community section and get an introduction
to machine learning, digitalocean.com, promo code, here's the thing.
Okay, let's talk about the kernel and the kernel mailing list and what Linus has been
getting up to this week.
Yeah, it really gets everybody's attention when Linus gives someone a public dressing
down on the mailing list.
We'll cut through some of the drama and get to the technical argument here.
There's a Google Pixel security team member who's been advocating for a change in the
Linux kernel and he's been advocating it kind of at a bad time during the development cycle
to essentially kill processes when a condition is met.
And Linus wasn't having any of this.
At the core of this argument, I believe what we're seeing develop, and this is my opinion
here, but you're seeing an old-school approach to software development where all software
problems are bugs.
If it's a security issue, if it's a crash issue, if it's a spelling issue, they're all
bugs.
You can have different degree of severity, but it's a bug.
There's a more modern school of thought where security issues are an extreme kind of bug
that get absolute priority.
They're treated differently than other types of software development.
And I think you're seeing a collision of these two different viewpoints in the Linux kernel.
And some of these software developers, like this Pixel team member, are specifically hired
to work on security issues and have a security opinion on how things should be designed.
And so you're seeing a butting of heads there on the two different approaches.
Well, there are two arguments for treating all bugs equally.
One of them, of course, is that any bug could be a security bug because you never know,
it could be exploited in some way that's unexpected.
And the other argument is about the whole user experience, in that if you deal with
security problems in a way that affects the overall experience by killing processes, then
the average user who doesn't really understand what's happening is going to have a degraded
experience.
And that is not good because the first rule of the kernel development is don't break user
space.
Yeah, Linus says, let's take a more rational approach.
He says, let's find where there's a problem.
Let's warn about what looks dangerous.
And then once we've warned for a long time, and we're confident we've caught all of the
normal cases, then we can start taking more drastic measures.
We have to stop going for a shoot first, then ask questions approach, he says.
I know you're not particularly interested in the whole politics of it all.
And Linus shouting and swearing on the mailing list, but that represents a very different
approach to what the Linux Foundation wants to be about as well.
They want to be all corporate, and they've got all these corporate sponsors and everything,
and it kind of doesn't look good for them.
And they're not really very happy about it.
And that's why this has come up many, many times.
It depends on who is observing.
If it's the chattering class chattering on about his rough language and toxic workplace,
then you're right.
It doesn't look good.
If I'm a CTO, if I'm an IT person, and I'm looking at Linus Torvalds defend the stability
of user space, and if I'm looking at him giving an accurate dressing down to the security
researcher who was trying to ram something in last minute in a development cycle that
kills processes, my takeaway is Linus is protecting the stability of the Linux kernel, and they
have the right person at the helm there for the kernel I want to run on my production
systems.
So really, the messaging I take away from this is he's doing his job, and he's doing
it well.
Well, yeah, I agree.
He is doing his job well, but you have to think to the future and what happens when
he's no longer around for whatever reason.
Whoever replaces him, are they going to be as strong a figurehead?
Are they going to have the chops to say, no, we're not having this thing in?
Well, I have two answers for you.
The short answer is just die before Linus does, problem solved.
The second answer is I wouldn't be surprised if this is the nature of the beast.
When you are working on a project with this level of scale and importance, this just might
be what a person turns into.
In fact, the guy he was yelling at, this Pixel developer fellow, he even copped to it and
said, I think my main flaw in helping bring these defenses to the kernel has been thinking
they can be fully tested during a single development cycle.
And this mistake was made quite clear this cycle, which is why I made the adjustments
I did.
He says, I'd like to think that I did learn something since I fixed this up before you
yelled at me, and I'll make further adjustments and try again for 4.16.
Well Case Cook backed down on that aspect of it, but he got into a bit of a bind with
GR security and acted in what can only be described as a very bizarre way.
Childish, Reckless, Case Cook, and Brad Sprengler from GR Security are trying to one-up each
other by dropping zero-day links on Twitter for vulnerabilities they've discovered.
So that way they can each measure each other and see who is the bigger man, apparently.
And this is the definition of reckless behavior in the security research industry.
This is how you devastate a reputation.
Yeah I would kind of expect it from GR Security, because they've kind of got not a great reputation.
But from Case Cook, he's got quite a good reputation and working for Google and stuff,
I'm just really surprised to see him do this.
My takeaway message from these stories, it's a sad state of the security research industry.
Something that I used to hold a lot of respect for, a lot of hard work in the security research
industry.
And now we see people one-upping each other and trying to ram code into big projects like
the Linux kernel just to get a name for themselves.
It's a sad state, Joe.
It is a sad state, but hopefully while people like Linus are around, he'll keep them in
check for now.
And at least all that stuff is open source so we can see what's happening with it, unlike
the Intel management engine.
Yeah, back in the news after just talking about it recently, Intel I guess noticed,
hey, everybody's talking about the management engine.
So they decided to do a little audit, and another company got involved called Positive
Technologies Research, who we've talked about once before on the show, and they discovered
that remote attackers could launch commands on a host of an Intel-based computer, including
laptops and desktops that were shipped with Intel Core processors since 2015.
Most of the vulnerabilities require physical access to the targeted devices, but one of
them does allow remote attacks with administrative access.
What is going on here?
How can we have this running in so many machines and have no idea what it's doing?
I suppose we live in a world where most people still run Windows on their laptops, but we're
talking about servers as well.
Surely this has to be a catalyst for Intel to be forced to open source it.
Hmm.
I hadn't thought of that.
I'm doubtful of that because of reasons.
They'll have all kinds of reasons.
Oh, of course.
We've got all sorts of corporate reasons, but at least we've got to pressure them into
doing something about it.
I wonder if that pressure might result in a ME-free Intel chip, like a motherboard with
an Intel CPU that doesn't have a management engine.
And maybe it's not like an enterprise grade, but it could be an option for consumers.
I've been speculating about that, and even that I'm doubtful of, Joe, and that seems
like a baby step.
I wonder if it would even be possible to have a Intel processor that's working properly
without the management engine.
I'm skeptical about that, or maybe with some reduced functionality or something, but I
think there is a big market for it.
I think especially in the data center.
We talked, I think last week or the week before, about the rise of ARM servers, and the thing
is if Intel don't do something about this, they're going to start losing out on contracts
to supply big data centers.
Because if you are the architect of a huge system with multiple machines, and you read
about stuff like this, you're thinking, hmm, let's have another look at that ARM situation,
maybe.
You also have projects like Google's project to just disable it on all of their servers.
So this is going to be processors from the sixth and seventh and eighth generation of
Intel processors.
So since about 2015, your Skylakes, your Kabylakes, and your Coffee Lake families of processors
on the desktop side, and then there's a larger line of Intel Xeon processors, which you can
check the link in the show notes.
So if you have anything older than Skylake, you don't have the Minix version of the management
engine.
Doesn't mean it doesn't have vulnerabilities, it's just not getting poked at as much right
now.
Some of these are pretty significant, some of them are minor, HP, Dell, and other vendors
are pushing out their respective firmwares, and I'd be curious how you Linux users are
going to patch your Intel ME firmware.
Are you booting into some sort of free DOS, are you doing it from Linux, tweet me at Chris
LAS, how are you going to patch against this?
Maybe some of us can just load up GNOME software and do an update.
But in the meantime, check out linuxactionnews.com slash subscribe for all the ways to get new
episodes.
And go to linuxactionnews.com slash contact for ways to get in touch.
And you can support the whole network at our Patreon page, patreon.com slash jupitersignal.
We'll be back next Monday with our weekly take on the latest Linux and open source news.
I'm at Chris LAS.
I'm at Joe Rissington.
Thank you for joining us, and we'll see you next week.
Until then, have a great day, and we'll see you later.

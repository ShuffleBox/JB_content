1
00:00:00,000 --> 00:00:09,100
Hello, and welcome to Linux Action News, episode 149, recorded on March 14th, 2020.

2
00:00:09,100 --> 00:00:10,100
I'm Joe.

3
00:00:10,100 --> 00:00:11,100
I'm Drew.

4
00:00:11,100 --> 00:00:12,100
And I'm Wes.

5
00:00:12,100 --> 00:00:16,560
Yeah, while Chris is driving his house across the country, I thought, do I want to do this

6
00:00:16,560 --> 00:00:17,560
with Wes or Drew?

7
00:00:17,560 --> 00:00:19,200
And I thought, why not both?

8
00:00:19,200 --> 00:00:22,060
So thank you both for joining me, it's much appreciated.

9
00:00:22,060 --> 00:00:23,060
You're very welcome.

10
00:00:23,060 --> 00:00:24,340
Double the fun.

11
00:00:24,340 --> 00:00:27,700
So let's start with Firefox 74, which has been released.

12
00:00:27,700 --> 00:00:34,440
Yeah, and while it seems like it's a pretty boring release on the outside, there actually

13
00:00:34,440 --> 00:00:39,960
is a lot going on on the inside that really does need to be discussed.

14
00:00:39,960 --> 00:00:46,360
The biggest change to my eye is the removal of TLS 1.0 and 1.1, which has been announced

15
00:00:46,360 --> 00:00:50,720
since October 2018, and is finally happening in modern browsers.

16
00:00:50,720 --> 00:00:55,280
Yeah, they say on the Mozilla hacks blog, you'll need to make sure your web server supports

17
00:00:55,280 --> 00:00:58,620
TLS 1.2 or 1.3 going forward.

18
00:00:58,620 --> 00:01:04,960
But they also say note for a couple of release cycles and longer for Firefox ESR, the secure

19
00:01:04,960 --> 00:01:10,060
connection failed error page will feature an override button allowing you to enable

20
00:01:10,060 --> 00:01:15,660
TLS 1.0 and 1.1 in cases where your server is not yet upgraded, but you won't be able

21
00:01:15,660 --> 00:01:17,840
to rely on it for too long.

22
00:01:17,840 --> 00:01:21,600
And you know, I really think this is a good way of going about it.

23
00:01:21,600 --> 00:01:27,280
It's a little conservative in that it still allows these older protocols to be used.

24
00:01:27,280 --> 00:01:31,480
But it also gives some time for people to complain to the websites that are posting

25
00:01:31,480 --> 00:01:34,720
these errors to say, hey, maybe you should upgrade.

26
00:01:34,720 --> 00:01:38,840
To be fair, even pretty old installations at this point support TLS 1.2.

27
00:01:38,840 --> 00:01:41,600
So it's not going to affect that many servers, is it?

28
00:01:41,600 --> 00:01:46,720
Well, to be honest, I've been running Firefox 74 for a few days now, and I haven't come

29
00:01:46,720 --> 00:01:49,960
across a single page that I've had this error with.

30
00:01:49,960 --> 00:01:55,080
So it seems to me like we're not going to have a huge amount of breakage across the

31
00:01:55,080 --> 00:01:56,080
web with this.

32
00:01:56,080 --> 00:01:59,040
Lazy sys admins, you know who you are.

33
00:01:59,040 --> 00:02:03,080
The other big change with Firefox 74 is with add-ons.

34
00:02:03,080 --> 00:02:07,440
And from now on, add-ons can only be installed by the user.

35
00:02:07,440 --> 00:02:10,280
They can't be installed by an application.

36
00:02:10,280 --> 00:02:14,960
So say you install Skype, installs its Firefox extension, well, it's not going to be able

37
00:02:14,960 --> 00:02:18,400
to do that anymore, which is a welcome change.

38
00:02:18,400 --> 00:02:23,400
In addition, you can now manage those sideloaded extensions right in the regular extensions

39
00:02:23,400 --> 00:02:24,400
menu.

40
00:02:24,400 --> 00:02:29,800
Yeah, this is a huge change that I really think is a great direction for them to be

41
00:02:29,800 --> 00:02:37,320
going in, partially because there are plenty of malicious apps out there that can put in

42
00:02:37,320 --> 00:02:39,620
some pretty nasty stuff.

43
00:02:39,620 --> 00:02:44,620
And this really goes a long way in sidestepping that kind of issue.

44
00:02:44,620 --> 00:02:49,020
But it is worth noting that companies who install extensions by default can still do

45
00:02:49,020 --> 00:02:51,240
it through policy.

46
00:02:51,240 --> 00:02:52,760
That hasn't been removed yet.

47
00:02:52,760 --> 00:02:53,760
Yeah.

48
00:02:53,760 --> 00:02:57,760
And they say on the Mozilla add-ons blog that Linux distros will be able to continue to

49
00:02:57,760 --> 00:03:04,240
deploy extensions to users and that they will continue to support self-distributed extensions.

50
00:03:04,240 --> 00:03:10,560
So it doesn't require developers to put their extensions in the addons.mozilla.org repository.

51
00:03:10,560 --> 00:03:14,660
And users can install extensions from other sites if they want to.

52
00:03:14,660 --> 00:03:18,360
So it's not like they're completely locking it down, they're just tightening things up

53
00:03:18,360 --> 00:03:19,360
a bit.

54
00:03:19,360 --> 00:03:22,760
I've been impressed with that approach from Mozilla for a while, including with their

55
00:03:22,760 --> 00:03:27,720
response to DNS over HTTPS, where they're trying to make some changes that really respect

56
00:03:27,720 --> 00:03:33,400
the privacy of individual users, but they're clearly also thinking about these large enterprise

57
00:03:33,400 --> 00:03:34,400
deployment scenarios.

58
00:03:34,400 --> 00:03:36,960
But come on, we've really buried the lead here.

59
00:03:36,960 --> 00:03:41,440
The main new feature is that they've now made it easy to import your bookmarks and history

60
00:03:41,440 --> 00:03:43,340
from Microsoft Edge.

61
00:03:43,340 --> 00:03:47,400
That's a browser I still have yet to try out, but hey, at least they're keeping up with

62
00:03:47,400 --> 00:03:48,400
the times.

63
00:03:48,400 --> 00:03:49,400
Yeah.

64
00:03:49,400 --> 00:03:53,000
I mean, I was kind of joking, but then there are potentially quite a lot of Edge users.

65
00:03:53,000 --> 00:03:55,240
And yeah, it is Firefox keeping up with the times.

66
00:03:55,240 --> 00:03:56,620
So yeah, well done.

67
00:03:56,620 --> 00:03:59,720
And Edge is due to arrive on Linux sometime soon.

68
00:03:59,720 --> 00:04:02,520
Yeah, I'm really looking forward to trying it.

69
00:04:02,520 --> 00:04:05,760
I got it running in Wine when it was Windows only and it worked all right.

70
00:04:05,760 --> 00:04:07,800
I mean, it's just like Chromium, you know?

71
00:04:07,800 --> 00:04:08,800
Yeah.

72
00:04:08,800 --> 00:04:14,880
And as we've talked about before on the show, who do you trust more, Microsoft or Google?

73
00:04:14,880 --> 00:04:17,360
It's kind of a coin toss at this point, I think.

74
00:04:17,360 --> 00:04:21,340
Another little addition for the Firefox here before we leave this topic is that they've

75
00:04:21,340 --> 00:04:24,080
made some changes to their Facebook container.

76
00:04:24,080 --> 00:04:29,680
You can actually now add exceptions for specific sites that you want to be able to connect

77
00:04:29,680 --> 00:04:35,440
to your Facebook instance, which I actually got to use just last night while ordering

78
00:04:35,440 --> 00:04:36,440
a pizza.

79
00:04:36,440 --> 00:04:39,280
Oh, now you're making me hungry, Drew.

80
00:04:39,280 --> 00:04:43,320
Presumably while you were eating your pizza, you were checking out Gnome 3.36 then.

81
00:04:43,320 --> 00:04:48,480
Yeah, actually I downloaded a copy of the Rawhide edition of Silverblue just to kind

82
00:04:48,480 --> 00:04:54,840
of check it out and loaded it on my test laptop and gave it a little spin.

83
00:04:54,840 --> 00:05:00,360
First of all, the changes that they've made to Adwaita are fantastic.

84
00:05:00,360 --> 00:05:08,480
I think that the whole desktop, the new icons, the new dropdown menus, everything is really

85
00:05:08,480 --> 00:05:13,680
looking very modern, very slick, and just downright pretty.

86
00:05:13,680 --> 00:05:20,440
But the real thing that is making the headlines here is how fast it is.

87
00:05:20,440 --> 00:05:24,020
Gnome 3.36 is so fast.

88
00:05:24,020 --> 00:05:29,280
And it's really evident anytime that you have an animation running, like bringing up all

89
00:05:29,280 --> 00:05:36,320
of your applications from the tray, that is so smooth and so fast that you could be forgiven

90
00:05:36,320 --> 00:05:39,320
for thinking that you were on something like XFCE.

91
00:05:39,320 --> 00:05:40,320
You know, I have to agree.

92
00:05:40,320 --> 00:05:46,200
I've been trying this out on the Ubuntu 2004 daily, so my experience was not quite stock.

93
00:05:46,200 --> 00:05:53,320
But both the new slick login screen really impressed me, and they finally fixed the hidden

94
00:05:53,320 --> 00:05:58,580
suspend option where you had to hold shift to actually be able to suspend your computer.

95
00:05:58,580 --> 00:05:59,580
It's all fixed up.

96
00:05:59,580 --> 00:06:02,840
It really feels like the most polished release of Gnome yet.

97
00:06:02,840 --> 00:06:05,480
There's a new Gnome extensions app then.

98
00:06:05,480 --> 00:06:08,740
Yeah, actually, and it's a pretty nice little app.

99
00:06:08,740 --> 00:06:14,160
And it's really making it harder for me to justify installing the Gnome tweaks application,

100
00:06:14,160 --> 00:06:19,120
because one of the biggest reasons to do that was to manage your extensions.

101
00:06:19,120 --> 00:06:24,560
Well, with this new extensions app having been blessed by the Gnome developers, you

102
00:06:24,560 --> 00:06:27,020
no longer even really need to do that.

103
00:06:27,020 --> 00:06:31,940
Not that I use very many extensions anyways, but it is nice to have them all in one place.

104
00:06:31,940 --> 00:06:36,320
Though I do wonder why they didn't just integrate that in the settings panel.

105
00:06:36,320 --> 00:06:41,200
One change I did appreciate in settings is that the privacy section now lists applications

106
00:06:41,200 --> 00:06:44,920
that have been granted permission to access things like location services, your camera

107
00:06:44,920 --> 00:06:46,800
and microphone.

108
00:06:46,800 --> 00:06:50,480
Access can be revoked on a per app basis, which is nice to see, especially when we're

109
00:06:50,480 --> 00:06:52,680
already used to things like this from mobile devices.

110
00:06:52,680 --> 00:06:54,760
Yeah, that is very nice to see.

111
00:06:54,760 --> 00:06:59,400
And Jory over at OMG Ubuntu has done a nice write up for this release, which we'll link

112
00:06:59,400 --> 00:07:04,240
to in the show notes, which is at linuxactionnews.com slash 149.

113
00:07:04,240 --> 00:07:08,280
Now it's a shame Chris isn't here because we could have our own version of Rustwatch.

114
00:07:08,280 --> 00:07:13,120
Let's talk about Bottle Rocket, which is Amazon's new free and open source Linux based operating

115
00:07:13,120 --> 00:07:15,400
system meant for hosting containers.

116
00:07:15,400 --> 00:07:20,440
Yeah, they finally got with the times and tried to build a simpler operating system

117
00:07:20,440 --> 00:07:25,400
and one that comes with a single step update mechanism, which is similar to technology

118
00:07:25,400 --> 00:07:28,720
we've seen in things like Project Atomic and CoreOS.

119
00:07:28,720 --> 00:07:33,040
Yeah, on the GitHub page it says rather than a package manager that updates individual

120
00:07:33,040 --> 00:07:38,360
pieces of software, Bottle Rocket downloads a full file system image and reboots into

121
00:07:38,360 --> 00:07:39,360
it.

122
00:07:39,360 --> 00:07:44,640
It can automatically roll back if boot failures occur and workload failures can trigger manual

123
00:07:44,640 --> 00:07:45,940
rollbacks.

124
00:07:45,940 --> 00:07:51,280
This really does feel a lot like CoreOS and what used to be Project Atomic and now that

125
00:07:51,280 --> 00:07:57,240
those two have merged, you know, ContainerOS from Red Hat, but with some interesting tricks

126
00:07:57,240 --> 00:08:02,340
that I'm kind of intrigued to see how they work in practice.

127
00:08:02,340 --> 00:08:08,000
It does seem like this competition space is getting a little warmer than I expected it

128
00:08:08,000 --> 00:08:09,000
to be.

129
00:08:09,000 --> 00:08:13,320
I was a little put off at first, I'll admit, because a lot of the default configuration

130
00:08:13,320 --> 00:08:19,760
is very Amazon specific, I mean, it is an Amazon project after all, but in their charter

131
00:08:19,760 --> 00:08:26,320
they stress Bottle Rocket is open because the best OS can only be built through collaboration.

132
00:08:26,320 --> 00:08:29,440
It's not a Kubernetes distro, nor an Amazon distro.

133
00:08:29,440 --> 00:08:35,860
Yeah, it is MIT licensed, but I do wonder how much this will be used outside of Amazon

134
00:08:35,860 --> 00:08:36,860
services.

135
00:08:36,860 --> 00:08:42,960
Yeah, as an example of that, Bottle Rocket does not come with an SSH server in the image.

136
00:08:42,960 --> 00:08:47,280
It does have a control container sitting outside that, but right now the only one that exists

137
00:08:47,280 --> 00:08:50,440
is integrated with AWS SSM management.

138
00:08:50,440 --> 00:08:56,820
But you can run your own control or admin container and that can be where the SSH server

139
00:08:56,820 --> 00:08:57,820
is running.

140
00:08:57,820 --> 00:09:01,000
Yeah, it is nice to see that they've thought of some of these things and they've really

141
00:09:01,000 --> 00:09:06,800
tried to make Bottle Rocket simple so that if other cloud providers or open source organizations

142
00:09:06,800 --> 00:09:09,560
try to adopt it, it's ready to go.

143
00:09:09,560 --> 00:09:15,040
Now one nice thing for people who are running this on AWS is Amazon is providing three years

144
00:09:15,040 --> 00:09:21,480
of support for any of the Bottle Rocket builds that they provide, which I think is a pretty

145
00:09:21,480 --> 00:09:22,480
nice offering.

146
00:09:22,480 --> 00:09:27,540
Really, my main takeaway is everyone seems to be recognizing that containers are basically

147
00:09:27,540 --> 00:09:32,800
the default way to build and ship applications and you want a minimal OS that's focused on

148
00:09:32,800 --> 00:09:33,800
running them.

149
00:09:33,800 --> 00:09:40,320
One hugely popular technology for those containers is Docker, but Docker the company have struggled

150
00:09:40,320 --> 00:09:45,640
historically to make any money, but they've come out this week with a new plan.

151
00:09:45,640 --> 00:09:51,780
And this comes hot off the heels of Docker shedding its enterprise division over to Mirantis.

152
00:09:51,780 --> 00:09:59,760
So this is them trying to improve the Docker tooling and improve Docker Hub to become sort

153
00:09:59,760 --> 00:10:07,560
of a one-stop shop to keep things moving quickly from you developing it on your local workstation

154
00:10:07,560 --> 00:10:09,200
and then putting it in the cloud.

155
00:10:09,200 --> 00:10:13,620
Well, at the time of that sale to Mirantis, they talked about how they wanted to focus

156
00:10:13,620 --> 00:10:19,080
on the developer and it was almost like Steve Ballmer style, developers, developers, developers.

157
00:10:19,080 --> 00:10:22,440
And they haven't really fully outlined their plan.

158
00:10:22,440 --> 00:10:26,920
This is more of a kind of sketch of a plan, I think, of how they're going to do that.

159
00:10:26,920 --> 00:10:31,140
Interestingly, they actually have published their roadmap for the first time and it's

160
00:10:31,140 --> 00:10:34,120
over on GitHub and publicly accessible.

161
00:10:34,120 --> 00:10:38,160
It's just a little Kanban board, but it shows you what they're focusing on, which I think

162
00:10:38,160 --> 00:10:39,840
is a good step.

163
00:10:39,840 --> 00:10:44,040
Speaking of GitHub, this whole thing kind of reminds me of Microsoft's play buying

164
00:10:44,040 --> 00:10:45,040
GitHub.

165
00:10:45,040 --> 00:10:49,840
I think Docker really wants to be a go-to tool at dev time and, you know, selling off

166
00:10:49,840 --> 00:10:55,080
the enterprise business to Mirantis is maybe a recognition that, oh, that whole operational

167
00:10:55,080 --> 00:10:56,080
thing.

168
00:10:56,080 --> 00:10:57,080
We kind of lost that game.

169
00:10:57,080 --> 00:11:01,920
Everyone's already using Kubernetes or a number of other options and Swarm, it never really

170
00:11:01,920 --> 00:11:03,320
took off.

171
00:11:03,320 --> 00:11:07,520
But the best part about Docker has always been how easy it is to onboard people and

172
00:11:07,520 --> 00:11:09,800
get developers building containers.

173
00:11:09,800 --> 00:11:14,760
Yeah, Justin Graham writing on the Docker blog this week asked the question, how are

174
00:11:14,760 --> 00:11:15,760
they going to do this?

175
00:11:15,760 --> 00:11:19,660
And he answered it by saying, by focusing on the developer experience through Docker

176
00:11:19,660 --> 00:11:25,680
desktop, partnering with the ecosystem and making Docker Hub the nexus for all integrations,

177
00:11:25,680 --> 00:11:30,760
configuration and management of the application components which constitute your apps and

178
00:11:30,760 --> 00:11:32,320
microservices.

179
00:11:32,320 --> 00:11:36,680
And he also said, we will expand Docker Hub to help you manage all the application components

180
00:11:36,680 --> 00:11:40,200
you generate as part of development and deployment.

181
00:11:40,200 --> 00:11:45,520
So yeah, the plan is to offer a monthly software as a service subscription model that will

182
00:11:45,520 --> 00:11:50,920
take everything from code all the way up to deployment in the cloud.

183
00:11:50,920 --> 00:11:53,240
I liked the focus on the CLI.

184
00:11:53,240 --> 00:11:56,760
He went on to write, we also want you to be able to access and interact with services

185
00:11:56,760 --> 00:12:01,240
upstream, things like registry, continuous integration and deployment without having

186
00:12:01,240 --> 00:12:02,960
to leave the CLI.

187
00:12:02,960 --> 00:12:07,240
Although I think that really means without having to stop using the Docker CLI.

188
00:12:07,240 --> 00:12:12,560
Well, with them also trying to make Docker Hub, quote, the central point for the ecosystem

189
00:12:12,560 --> 00:12:17,120
of tools to partner with us in delivering you a great experience.

190
00:12:17,120 --> 00:12:18,120
That makes sense.

191
00:12:18,120 --> 00:12:22,380
They want you to be within their ecosystem as much as possible.

192
00:12:22,380 --> 00:12:28,760
And I think the Docker CLI and the Docker Hub aspects are probably going to be a big

193
00:12:28,760 --> 00:12:30,680
part of this play.

194
00:12:30,680 --> 00:12:36,640
They want to try to have you publishing to their platform directly from their platform

195
00:12:36,640 --> 00:12:38,000
as easily as possible.

196
00:12:38,000 --> 00:12:42,900
It all sounds nice in theory, but I do wonder how successful this will be when there is

197
00:12:42,900 --> 00:12:44,880
plenty of competition in this space.

198
00:12:44,880 --> 00:12:50,880
I suppose Docker is a big name, but to what extent are they going to be able to monetize

199
00:12:50,880 --> 00:12:51,880
it?

200
00:12:51,880 --> 00:12:54,440
I don't know, but I suppose we'll see.

201
00:12:54,440 --> 00:12:57,760
Once you've got a bunch of containers up and running, you're going to want to host them

202
00:12:57,760 --> 00:12:58,760
somewhere.

203
00:12:58,760 --> 00:13:01,680
And it looks like VMware wants to be the company to do that for you.

204
00:13:01,680 --> 00:13:07,400
They've got their new Tanzu Kubernetes grid and a lot of new features in vSphere 7 to

205
00:13:07,400 --> 00:13:12,560
drive people towards hosting containers directly rather than doing the traditional kind of

206
00:13:12,560 --> 00:13:16,160
virtual machine hosting that they've been so good at for many years.

207
00:13:16,160 --> 00:13:23,380
Yeah, included in this is a major re-architecture of vSphere with vSphere 7, which finally has

208
00:13:23,380 --> 00:13:26,700
Kubernetes and containers right at the heart of it.

209
00:13:26,700 --> 00:13:32,200
So you can manage your traditional VM infrastructure and your new fashioned container infrastructure

210
00:13:32,200 --> 00:13:36,040
side by side with the same interface and same APIs.

211
00:13:36,040 --> 00:13:40,960
And really, I think this is a recognition on the part of VMware that Kubernetes, while

212
00:13:40,960 --> 00:13:46,760
super useful, it's honestly a bit too low level for a lot of business organizations.

213
00:13:46,760 --> 00:13:51,200
And they want helpful tooling that can tie in with whatever they're already using and

214
00:13:51,200 --> 00:13:54,200
manage that across environments or across clouds.

215
00:13:54,200 --> 00:13:59,760
Yes, it really feels kind of like the one tool to tie everything together.

216
00:13:59,760 --> 00:14:03,520
Not only can it handle Kubernetes clusters that you're running in the cloud, but you

217
00:14:03,520 --> 00:14:06,800
can also manage things that are running on bare metal.

218
00:14:06,800 --> 00:14:11,320
Realistically, this is the kind of orchestration platform that I think a lot of people have

219
00:14:11,320 --> 00:14:12,600
been waiting for.

220
00:14:12,600 --> 00:14:17,040
This just screams hybrid cloud to me, and that seems to be at least what IBM thinks

221
00:14:17,040 --> 00:14:18,040
is the future.

222
00:14:18,040 --> 00:14:23,120
Yeah, I think there are still a lot of quote unquote legacy businesses out there that do

223
00:14:23,120 --> 00:14:28,040
have on premises deployments, but are looking to effectively leverage cloud services.

224
00:14:28,040 --> 00:14:32,440
And unless you're a tech company directly, you might not have all the staff and DevOps

225
00:14:32,440 --> 00:14:37,720
engineers on hand to integrate Kubernetes and your deployment software and your software

226
00:14:37,720 --> 00:14:41,000
to manage your project management and something like JIRA.

227
00:14:41,000 --> 00:14:44,480
All of that is pretty complicated and you either have to pay people to make it work

228
00:14:44,480 --> 00:14:47,200
for you or pay VMware.

229
00:14:47,200 --> 00:14:53,640
Now one other thing that they're launching is the new Tanzu application catalog, which

230
00:14:53,640 --> 00:14:58,300
interestingly is pulling in a lot of open source software from Bitnami as something

231
00:14:58,300 --> 00:15:02,240
that you can do as a prepackaged deployment.

232
00:15:02,240 --> 00:15:07,080
The service has been around for a little while, and it started out as Project Galleon back

233
00:15:07,080 --> 00:15:09,760
in August of last year.

234
00:15:09,760 --> 00:15:13,000
But now it seems like they're rolling it into the Tanzu brand.

235
00:15:13,000 --> 00:15:16,600
Yeah, I think this is another play to sort of simplify and standardize.

236
00:15:16,600 --> 00:15:20,960
You don't have to custom create deployments in Kubernetes or even the Docker containers

237
00:15:20,960 --> 00:15:21,960
themselves.

238
00:15:21,960 --> 00:15:26,000
If you're using this catalog of apps, you know that as long as you're using the catalog,

239
00:15:26,000 --> 00:15:30,040
whichever of your many teams that are using it, they'll all be running the same software,

240
00:15:30,040 --> 00:15:32,520
which has the same supportability.

241
00:15:32,520 --> 00:15:37,180
Well one thing's for sure, I think VMware is really making a play to try to hang on

242
00:15:37,180 --> 00:15:44,100
to its existing customers that do still have those on-premise deployments and bring them

243
00:15:44,100 --> 00:15:49,740
into the hybrid cloud and get them to integrate with Kubernetes since that is the new big

244
00:15:49,740 --> 00:15:55,100
buzzword and a lot of people really are looking to leverage that technology.

245
00:15:55,100 --> 00:16:01,920
This could be a really good play for VMware and a really good way for them to stay relevant

246
00:16:01,920 --> 00:16:04,720
as more and more stuff moves up into the cloud.

247
00:16:04,720 --> 00:16:10,440
Yeah, I think VMware are acutely aware that they are in danger of becoming a legacy company,

248
00:16:10,440 --> 00:16:13,320
and so this is their play to stay relevant.

249
00:16:13,320 --> 00:16:20,020
Well speaking of legacy, you guys remember Firefox OS, that phone operating system that

250
00:16:20,020 --> 00:16:22,840
Mozilla had created way back when?

251
00:16:22,840 --> 00:16:28,560
Well it never quite really died, it became something called KaiOS and now Mozilla is

252
00:16:28,560 --> 00:16:32,480
getting back in the game to help KaiOS thrive.

253
00:16:32,480 --> 00:16:39,320
KaiOS is based on Gecko, the same engine that powers the Firefox browser, and this new partnership

254
00:16:39,320 --> 00:16:43,800
means they can improve things like security and performance that frankly have kind of

255
00:16:43,800 --> 00:16:44,800
been lagging.

256
00:16:44,800 --> 00:16:51,000
Yeah, they're looking at it trying to optimize the OS performance across the board and they're

257
00:16:51,000 --> 00:16:56,140
also trying to get it up to date with newer technologies, like making sure that it can

258
00:16:56,140 --> 00:16:59,380
connect to things like TLS 1.3.

259
00:16:59,380 --> 00:17:03,480
Now I've actually had hands on with the KaiOS phone and it is quite an impressive operating

260
00:17:03,480 --> 00:17:05,360
system for feature phones.

261
00:17:05,360 --> 00:17:11,940
They're kind of calling it smart feature phones, which is that kind of gray area where it's

262
00:17:11,940 --> 00:17:16,940
kind of a dumb phone but it does have some internet capabilities.

263
00:17:16,940 --> 00:17:21,920
And what jumped out at me was that Google and Facebook were interested in this insofar

264
00:17:21,920 --> 00:17:26,280
as you had some Google apps on there and you had WhatsApp as well.

265
00:17:26,280 --> 00:17:31,720
And with these big players being involved and with them having shipped 120 million devices

266
00:17:31,720 --> 00:17:36,720
running KaiOS, you can see why Mozilla are now interested again because they're kind

267
00:17:36,720 --> 00:17:41,000
of looking at this thinking, well, if they're going to be using technology that we developed,

268
00:17:41,000 --> 00:17:43,840
maybe we should help them keep it up to date and secure and everything.

269
00:17:43,840 --> 00:17:49,240
If this takes off, it's not really a great look for Mozilla, them using an outdated Gecko.

270
00:17:49,240 --> 00:17:52,720
But it's good to see that things will remain open source.

271
00:17:52,720 --> 00:17:58,200
Joe Hildebrand, Mozilla's vice president of web platform said, this partnership will

272
00:17:58,200 --> 00:18:02,880
ensure KaiOS remains a robust and secure web platform by bringing their version of Gecko

273
00:18:02,880 --> 00:18:08,160
more up to date and keeping it up to date with the latest features, website compatibility

274
00:18:08,160 --> 00:18:10,120
and security fixes.

275
00:18:10,120 --> 00:18:14,560
And KaiOS say that all changes and improvements will be open sourced under Mozilla's public

276
00:18:14,560 --> 00:18:15,920
license.

277
00:18:15,920 --> 00:18:18,760
So all the help that Mozilla is going to give them isn't just going to disappear into a

278
00:18:18,760 --> 00:18:20,440
proprietary black hole.

279
00:18:20,440 --> 00:18:22,360
Open source at its best.

280
00:18:22,360 --> 00:18:25,820
While staying on the mobile topic, there was some pretty bad news for the Android custom

281
00:18:25,820 --> 00:18:27,800
ROM community this week.

282
00:18:27,800 --> 00:18:32,320
And that is that Magisk may no longer be able to hide bootloader unlocking from apps.

283
00:18:32,320 --> 00:18:37,240
If you're not familiar with Magisk, it's a little piece of magic software that basically

284
00:18:37,240 --> 00:18:43,360
applies to Google's safety net attestation API and can sit a level below the Google Play

285
00:18:43,360 --> 00:18:48,200
framework and tell any app that asks that, no, your phone's not rooted.

286
00:18:48,200 --> 00:18:49,960
It's totally trustworthy.

287
00:18:49,960 --> 00:18:55,800
Unfortunately, it seems like Google has slowly started to rely on the hardware roots of trust

288
00:18:55,800 --> 00:18:59,920
it's mandated in recent Android phones to get around this.

289
00:18:59,920 --> 00:19:03,320
Which is something that we knew could well be coming.

290
00:19:03,320 --> 00:19:08,220
And now it seems that it has happened, at least for most phones, it seems that some

291
00:19:08,220 --> 00:19:10,720
phones don't implement it properly.

292
00:19:10,720 --> 00:19:15,120
And so there are some workarounds, specifically some OnePlus phones.

293
00:19:15,120 --> 00:19:21,920
But it seems that ultimately, we are headed for a future where you won't be able to use

294
00:19:21,920 --> 00:19:28,600
some banking apps, and some other things like Pokemon Go, if your phone is rooted, or even

295
00:19:28,600 --> 00:19:31,320
if it has the bootloader unlocked.

296
00:19:31,320 --> 00:19:35,400
I found with some banking apps, they won't work, some will work.

297
00:19:35,400 --> 00:19:37,920
And that's without using Magisk.

298
00:19:37,920 --> 00:19:41,840
And so I'm kind of glad that I've developed a workflow where I haven't tried to hide the

299
00:19:41,840 --> 00:19:44,160
fact that my phone's rooted.

300
00:19:44,160 --> 00:19:48,320
But I kind of always thought that, well, Magisk is there.

301
00:19:48,320 --> 00:19:53,640
And with specifically the Magisk hide option, I could potentially use some apps that I can't

302
00:19:53,640 --> 00:19:54,640
now.

303
00:19:54,640 --> 00:19:59,200
But I think this quote from John Woo, the developer of Magisk says it all, he says,

304
00:19:59,200 --> 00:20:01,520
let's face it, fun is over, guys.

305
00:20:01,520 --> 00:20:07,880
Yeah, and what this really means for regular people out there is that some apps which do

306
00:20:07,880 --> 00:20:15,020
check this will fail to work, things like banking apps, and possibly even some things

307
00:20:15,020 --> 00:20:21,360
like mobile device management that companies use, which anybody who works for a company

308
00:20:21,360 --> 00:20:29,720
that has a bring your own device policy might suddenly get flagged as an unsafe employee,

309
00:20:29,720 --> 00:20:36,520
which can create some friction with the employer, and may require them to essentially unroot

310
00:20:36,520 --> 00:20:42,120
their device and go back to using regular old Android releases, which is never really

311
00:20:42,120 --> 00:20:43,120
what you want.

312
00:20:43,120 --> 00:20:46,140
Well, I think it's what most people want and use.

313
00:20:46,140 --> 00:20:51,400
I think very few people in the grand scheme of things do root their phones, but people

314
00:20:51,400 --> 00:20:56,160
who want complete control over it, like me, are the ones who are going to be affected

315
00:20:56,160 --> 00:20:57,720
by this.

316
00:20:57,720 --> 00:21:06,320
And this is once again, Android becoming more locked down and more like the iPhone, really.

317
00:21:06,320 --> 00:21:09,960
It's becoming less of a tinkerers operating system.

318
00:21:09,960 --> 00:21:14,860
Remember back in the nexus days where you could buy a phone blessed by Google and run

319
00:21:14,860 --> 00:21:20,000
whatever you wanted on it, whereas they're making it that little bit harder and harder

320
00:21:20,000 --> 00:21:21,000
as time goes by.

321
00:21:21,000 --> 00:21:23,840
And I don't think it's them deliberately doing that.

322
00:21:23,840 --> 00:21:30,000
I think it's them making Android more secure and sort of just not really caring about the

323
00:21:30,000 --> 00:21:31,540
customer community.

324
00:21:31,540 --> 00:21:34,200
It's not them trying to make it difficult.

325
00:21:34,200 --> 00:21:36,560
It's just them not trying to make it easy.

326
00:21:36,560 --> 00:21:37,560
Right.

327
00:21:37,560 --> 00:21:41,760
I mean, when you live in a world and have to compete against iOS, what else are you

328
00:21:41,760 --> 00:21:42,760
going to do?

329
00:21:42,760 --> 00:21:43,760
You already have the hardware chips.

330
00:21:43,760 --> 00:21:48,520
I'm sure application developers are out there asking, why aren't you using them?

331
00:21:48,520 --> 00:21:53,000
John Woo seems pretty disheartened by this and even put up a Twitter poll asking if people

332
00:21:53,000 --> 00:21:59,360
were still willing to use Magisk and it was 84% yes, because Magisk is not just about

333
00:21:59,360 --> 00:22:03,600
hiding root and hiding the fact that you've got an unlocked bootloader.

334
00:22:03,600 --> 00:22:07,440
It has a lot more features and root in of itself is useful.

335
00:22:07,440 --> 00:22:12,680
So it's good to see the community encouraging him to continue development.

336
00:22:12,680 --> 00:22:18,660
It does look like Magisk hide will be disabled by default now because it's pretty much pointless,

337
00:22:18,660 --> 00:22:20,160
but it is still an option.

338
00:22:20,160 --> 00:22:23,240
So you can try it at least maybe it will work on your phone.

339
00:22:23,240 --> 00:22:29,580
Well, WSL conf has been in the news this week going on as a virtualized conference amid

340
00:22:29,580 --> 00:22:31,680
the COVID-19 outbreak.

341
00:22:31,680 --> 00:22:36,720
And one of the big things that's come up is how Linux kernel updates are going to work

342
00:22:36,720 --> 00:22:37,720
in WSL2.

343
00:22:37,720 --> 00:22:45,760
Yeah, WSL2 will soon be officially available as part of Windows 10 version 2004, but as

344
00:22:45,760 --> 00:22:49,920
part of that change, Microsoft has decided to remove the Linux kernel from being integrated

345
00:22:49,920 --> 00:22:56,440
into the underlying Windows operating system and instead deliver it using Windows update.

346
00:22:56,440 --> 00:23:02,680
So hang on, are you telling me that I'll be able to get kernel updates, Linux kernel updates

347
00:23:02,680 --> 00:23:07,400
for the Windows subsystem for Linux 2 through Windows update?

348
00:23:07,400 --> 00:23:09,720
That is just absurd.

349
00:23:09,720 --> 00:23:12,440
You know, I was of two minds on this, Joe.

350
00:23:12,440 --> 00:23:17,800
The first and probably because I'll admit I did attend WSL conf was, oh, yeah, you know,

351
00:23:17,800 --> 00:23:18,800
that makes sense.

352
00:23:18,800 --> 00:23:22,340
They've already got this update infrastructure, why not ship it that way?

353
00:23:22,340 --> 00:23:24,880
But then I remembered, this is Windows.

354
00:23:24,880 --> 00:23:30,920
Yeah, this is Microsoft distributing Linux kernels via Windows update.

355
00:23:30,920 --> 00:23:35,840
And it's absurd for two reasons, one, just the sheer fact that we've just come this far

356
00:23:35,840 --> 00:23:42,400
now that Microsoft is so invested in Linux that they are distributing kernels via Windows

357
00:23:42,400 --> 00:23:43,400
update.

358
00:23:43,400 --> 00:23:47,740
And the other is that there are just better ways to update a Linux kernel.

359
00:23:47,740 --> 00:23:51,080
It's something that we've had cracked for quite some time on our side, haven't we?

360
00:23:51,080 --> 00:23:55,080
I wonder if part of the change here is because of the legacy of the Windows subsystem for

361
00:23:55,080 --> 00:23:59,480
Linux, you know, in version one, they weren't shipping a kernel, they were actually relying

362
00:23:59,480 --> 00:24:03,280
on a translation layer in Windows itself.

363
00:24:03,280 --> 00:24:07,480
And I think that meant that the distributions that were targeting the subsystem for Linux

364
00:24:07,480 --> 00:24:11,640
didn't concern themselves with the kernel at all, it was all user land.

365
00:24:11,640 --> 00:24:14,600
Maybe this is a play to sort of keep that in shape.

366
00:24:14,600 --> 00:24:19,400
There's also an argument to be made that isn't the Windows update mechanism kind of a package

367
00:24:19,400 --> 00:24:20,400
manager?

368
00:24:20,400 --> 00:24:21,560
Well, I suppose so.

369
00:24:21,560 --> 00:24:26,120
But surely it would make more sense to update the kernel within the VM.

370
00:24:26,120 --> 00:24:28,320
It's all a Hyper-V VM these days.

371
00:24:28,320 --> 00:24:33,080
So there's not really any reason why you couldn't just use the Linux distros package manager

372
00:24:33,080 --> 00:24:35,080
to update it, is there?

373
00:24:35,080 --> 00:24:39,520
I think the main reason is that as far as I know, these are all running Microsoft compiled

374
00:24:39,520 --> 00:24:40,520
kernels.

375
00:24:40,520 --> 00:24:44,920
So that might mean more integration with those various distros build systems where here Microsoft's

376
00:24:44,920 --> 00:24:47,240
got it all in their control.

377
00:24:47,240 --> 00:24:57,400
Well that and the idea, I believe, is for these WSL2 running VMs to have deep hooks

378
00:24:57,400 --> 00:24:59,280
into the host.

379
00:24:59,280 --> 00:25:05,360
So in that sense, it does kind of make sense to have the guest really rely on what the

380
00:25:05,360 --> 00:25:11,000
host is providing as far as the kernel, just to avoid having some other kernel slip in

381
00:25:11,000 --> 00:25:13,280
that's not going to talk correctly.

382
00:25:13,280 --> 00:25:18,640
It all just seems too bizarre to me, the fact that you can run a proper Linux kernel, or

383
00:25:18,640 --> 00:25:23,040
at least something close to it in Windows, I don't think I'll ever get over that.

384
00:25:23,040 --> 00:25:26,560
But we'll keep watching how that develops and how everything else does in the Linux

385
00:25:26,560 --> 00:25:31,920
and open source world, and you can go to linuxactionnews.com slash subscribe for all the ways to get new

386
00:25:31,920 --> 00:25:32,920
episodes.

387
00:25:32,920 --> 00:25:37,000
And the linuxactionnews.com slash contact for ways to get in touch.

388
00:25:37,000 --> 00:25:40,720
We'll be back next Monday with our weekly take on the latest Linux and open source news.

389
00:25:40,720 --> 00:25:42,240
I'm at Drew Rissington.

390
00:25:42,240 --> 00:25:44,080
I'm at Drew of Doom.

391
00:25:44,080 --> 00:25:45,080
And I'm at Westpane.

392
00:25:45,080 --> 00:26:00,840
See you later.


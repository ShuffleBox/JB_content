WEBVTT

00:00.000 --> 00:11.320
Hello, and welcome to Linux Action News. Episode 254, recorded on August 17, 2022. I'm Chris.

00:11.320 --> 00:12.320
And I'm Wes.

00:12.320 --> 00:15.020
Hello, Wes. Let's do the news.

00:15.020 --> 00:21.880
We start with Android 13. Once the makings of a big news cycle, these days Android has

00:21.880 --> 00:28.080
matured to the point that yet another release is a fairly standard affair. Combine that

00:28.080 --> 00:33.400
with the limited uptake of a new Android release, and sometimes, a new version goes totally

00:33.400 --> 00:41.120
unnoticed by most. But, as we record, Android 13 is rolling out to Pixel devices, and then

00:41.120 --> 00:46.860
soon to Samsung Galaxy devices, Asus, OnePlus, and others.

00:46.860 --> 00:51.760
And most importantly, at least I think, it's landing upstream in AOSP right now, so that's

00:51.760 --> 00:56.640
great to see. Actually, there's some stuff in here that is really good, including multi-language

00:56.640 --> 01:02.280
support for apps, but also one I like to see a lot landing in Android 13, is official built-in

01:02.280 --> 01:08.320
support for Bluetooth LE audio, so developers can now start using LE capabilities on compatible

01:08.320 --> 01:13.080
devices. That means battery life on some of these Bluetooth LE devices is just going to

01:13.080 --> 01:17.540
be mind-blowing. It's great to see that built in now. We're also seeing the beginning of

01:17.540 --> 01:21.840
a new feature that's coming to Android, and developers need access to it now so they can

01:21.840 --> 01:26.880
start baking support in, hopefully, to future versions of their apps. And this caught my

01:26.880 --> 01:32.960
attention. It's called predictive back gesture. So, in Android 13, they've introduced a new

01:32.960 --> 01:39.280
API where your app can tell the system how it's going to handle back events in advance.

01:39.280 --> 01:44.080
In practice, they call it the ahead of time model. They say this new approach is part

01:44.080 --> 01:50.280
of a multi-year effort to help prepare your apps to support the new predictive back gesture,

01:50.280 --> 01:54.680
which is available in testing right now if you turn on the developer options. Another

01:54.680 --> 02:00.920
headline feature this time around is tablet support. Google says 13 has been optimized

02:00.920 --> 02:06.520
for large screen layouts, though, honestly, the implication in the release announcement

02:06.520 --> 02:12.120
is a lot more work needs to be done around the tooling. Notification permissions and

02:12.120 --> 02:17.240
photo library access are now more in line with the iOS style of asking the user for

02:17.240 --> 02:24.040
permission first. Oh, I like that. I also like that application performance has got

02:24.040 --> 02:30.520
a big boost in Android 13, thanks to some updates to the art runtime. And the good news

02:30.520 --> 02:35.920
there is Google plans to ship those improvements to other versions of Android through Google

02:35.920 --> 02:42.680
Play updates. It's great for those of you who use the Play services. And overall Android

02:42.680 --> 02:47.480
13 looks like a really nice update, perhaps what Android 12 just should have been all

02:47.480 --> 02:52.960
along. Google is asking developers to start testing now. And I think hopefully, since

02:52.960 --> 02:57.240
this isn't really a life changing upgrade, we'll see a significant uptake from the hardware

02:57.240 --> 03:02.120
vendors out there.

03:02.120 --> 03:07.520
Just when we thought Linux was entering an era of gaming utopia, rolling release Linux

03:07.520 --> 03:12.960
users discovered some bad news I'm afraid we're all going to have to deal with sometime

03:12.960 --> 03:13.960
soon.

03:13.960 --> 03:20.420
And it really touches on what should be the upstream responsibility for long term compatibility

03:20.420 --> 03:24.880
and stable ABIs. And unfortunately, for some users, they're finding themselves trapped

03:24.880 --> 03:30.360
right in the middle of that debate as their anti cheat enabled games began breaking after

03:30.360 --> 03:37.560
recently updating to glibc version 2.36. The breakage stems from the DT underscore hash

03:37.560 --> 03:41.440
section being dropped in the GNU C library altogether.

03:41.440 --> 03:47.800
The GNU C library or glibc as it's often known, has traditionally supported two ways to get

03:47.800 --> 03:55.460
your hash on DT underscore hash and the newer GNU underscore DT underscore hash. Now these

03:55.460 --> 04:01.160
days most consider the GNU version to be better structured and DT GNU hash has been around

04:01.160 --> 04:06.820
for a decade and a half at this point. But as you're probably already guessing since

04:06.820 --> 04:12.180
we're talking about this, makers of anti cheat software are still relying on the old

04:12.180 --> 04:14.080
non GNU version.

04:14.080 --> 04:19.080
Yep, and once rolling Linux users like Arch users began updating their system, they got

04:19.080 --> 04:25.600
that new version of glibc, the one that only has the GNU hash section. And well, understand

04:25.600 --> 04:29.880
it's not just anti cheat games that are getting broken, other Linux apps are as well such

04:29.880 --> 04:35.880
as lib strangle, but really anything that relies on the traditional DT underscore hash

04:35.880 --> 04:40.760
section is breaking with glib 2.36 due to this change.

04:40.760 --> 04:44.760
Over the past week and a half, this issue has been discussed pretty darn thoroughly

04:44.760 --> 04:50.000
on Valve's Proton bug tracker. Thankfully for those on Arch Linux where the problem

04:50.000 --> 04:57.300
was first reported, glibc 2.36-2 is currently in testing and reverts the earlier change

04:57.300 --> 05:03.280
so both styles of hash are still included. And being those rolling release maniacs, Arch

05:03.280 --> 05:08.520
users have already tested that testing package and confirmed that anti cheat enabled games

05:08.520 --> 05:11.720
are once again working correctly.

05:11.720 --> 05:17.320
As far as getting the fix upstream for this issue, or maybe just rolling the change back

05:17.320 --> 05:22.480
upstream, well, it's not really clear what's going to happen right now. A Proton developer

05:22.480 --> 05:28.160
at Valve says that the upstream glibc discussion on DT underscore hash isn't coming out in

05:28.160 --> 05:33.440
the direction of prioritizing compatibility with pre-existing applications. They added

05:33.440 --> 05:39.820
in a tweet thread, quote, every such instance contributes to damaging the idea of desktop

05:39.820 --> 05:44.400
Linux as a viable target for third party developers.

05:44.400 --> 05:50.600
I can definitely appreciate that. I mean, I don't want my games to break. But as ever

05:50.600 --> 05:57.080
in Linux, there's multiple parties, multiple projects and multiple developers involved.

05:57.080 --> 06:00.920
On the glibc side, there's definitely been some discussion about how best to address

06:00.920 --> 06:07.180
this issue going forward. Carlos O'Donnell, a glibc steward said, quote, what I would

06:07.180 --> 06:13.160
like to see is more feedback from the anti cheat teams about exactly what they need.

06:13.160 --> 06:18.840
He also pointed out that, quote, depending on DT hash and specific loader semantics is

06:18.840 --> 06:23.280
going to break at some point. To make this issue a little more complicated, although

06:23.280 --> 06:29.000
perhaps also a potential avenue for a fix, is that the old style of hash is still marked

06:29.000 --> 06:36.080
as required in the upstream specification. So a change at that layer might at least signal

06:36.080 --> 06:41.120
to downstream consumers like anti cheat software that they really shouldn't rely on just the

06:41.120 --> 06:48.160
old style of hash sticking around. And of course, because this is Linux, right now,

06:48.160 --> 06:53.880
a lot of the control rests in the hands of distributions. Carlos also emphasized that

06:53.880 --> 07:00.640
DT underscore GNU underscore hash was added way back in 2006, and has kind of been the

07:00.640 --> 07:06.720
standard on Linux for the last 16 years. Also, this most recent glibc change was made to

07:06.720 --> 07:13.080
allow distributions to choose how backwards compatible they want to be. So really, at

07:13.080 --> 07:18.540
least from some perspectives in the glibc camp, the choice to have DT hash or not is

07:18.540 --> 07:23.160
with distributions. If this breaks specific applications, then those developers need to

07:23.160 --> 07:28.400
engage with those distribution ecosystems or adapt their software.

07:28.400 --> 07:32.400
Yeah, it's stories like these, Wes, where I think the Valve developers are thinking

07:32.400 --> 07:36.800
to themselves, well, I'm glad we built SteamOS because they're clearly going to mitigate

07:36.800 --> 07:41.200
this at the distribution level, and other distribution makers are going to have to make

07:41.200 --> 07:45.960
the same decision. There is some good news out there this week for Linux gamers, though.

07:45.960 --> 07:51.600
Proton 7.0.4 shipped just a couple of days ago, and it brings a whole batch of new Windows

07:51.600 --> 07:57.240
games to the Linux fun. It's not just better game compatibility, though. There's an exciting

07:57.240 --> 08:04.560
lower-level improvement shipping with Proton 7.0.4. It's support for file system copy-on-write

08:04.560 --> 08:11.440
behavior, at least for supported file systems like our dear ButterFS. The goal here is to

08:11.440 --> 08:17.400
reduce space used by game prefixes, which is really nice to see for some of us on smaller

08:17.400 --> 08:23.640
NVMe drives like me.

08:23.640 --> 08:28.240
Linus Torvalds released the first release candidate of Linux 6.0 this week, officially

08:28.240 --> 08:34.760
making this current cycle the big 6.0. But if you want to call this release 5.20 or whatever,

08:34.760 --> 08:38.480
Linus said you can, quote, go right ahead.

08:38.480 --> 08:44.320
Fun games aside, it is kind of nice to have that settled. Or, well, at least as settled

08:44.320 --> 08:50.200
as anything is in the world of Linux. But, you know, we've talked a lot about how many

08:50.200 --> 08:55.960
features are getting packed into this release, and there are a ton. But one of the things

08:55.960 --> 09:02.120
that seems to have missed the RC window is Rust. Torvalds lamented about that a bit in

09:02.120 --> 09:06.800
the release notes, writing, quote, I actually was hoping that we'd get some of the first

09:06.800 --> 09:15.240
Rust infrastructure and the multigen LRU VM, but neither of them happened this time around.

09:15.240 --> 09:18.880
He did emphasize, though, that, quote, there's always more releases.

09:18.880 --> 09:24.320
Indeed, I hope so at least. I kind of find it a riot, though, to just watch the metastory

09:24.320 --> 09:30.940
develop around Linux 6.0 and also to watch Linus consistently try to tamp down expectations

09:30.940 --> 09:36.040
and just call this not a big deal constantly. But the media outlets, they're all in. They've

09:36.040 --> 09:39.760
been playing all kinds of games this week, and I think you could be forgiven for actually

09:39.760 --> 09:44.440
thinking the final version of Linux 6.0 had actually shipped. The headlines going around

09:44.440 --> 09:48.480
are just totally detached from reality now. Here's a couple of examples from just the

09:48.480 --> 09:54.120
last few days. ZDNet's headline, quote, Linux 6.0 arrives with performance improvements

09:54.120 --> 10:01.600
and more Rust coming. The register also had a doozy. Linux 6.0 debuts missing some rusty

10:01.600 --> 10:06.840
bits, making it sound like it's a shipped product. I assume just to get the clicks.

10:06.840 --> 10:11.200
Maybe it's been a slow new cycle over the summer. I don't know. But none of it really

10:11.200 --> 10:15.920
matters, I would guess, at least not to Linus. He wrote himself, quote, the kernel version

10:15.920 --> 10:21.760
numbers are really entirely made up and have no intrinsic meaning. I don't know. I mean,

10:21.760 --> 10:26.680
there is something to like. The numbers sure seem to matter to some people. He can keep

10:26.680 --> 10:32.040
hammering that point away. But alas, I'm not sure it's really going to change everyone's

10:32.040 --> 10:39.080
minds. This release cycle also left the kernel just 50 patches away from real time support

10:39.080 --> 10:44.640
finally being integrated. But there appear to still be some roadblocks that kept those

10:44.640 --> 10:50.880
patches out of the tree, at least for the 6.0 RC1 release. Yeah, unfortunately that

10:50.880 --> 10:54.720
was one of the other big headline features for this release. But I think the other way

10:54.720 --> 11:01.120
to look at that is we're just about 50 patches or so from this actually landing. So hopefully

11:01.120 --> 11:09.960
this real time work will manage to cross the finish line later this year with Linux 6.1.

11:09.960 --> 11:18.840
August 16th was Debian's 29th anniversary. So we wanted to send them a big happy birthday

11:18.840 --> 11:24.400
from all of us here at Jupiter Broadcasting. The project is helping local Debian groups

11:24.400 --> 11:30.240
worldwide plan Debian Day celebrations. If you're interested, we'll have a link to the

11:30.240 --> 11:43.560
local Debian groups page in the notes.

11:43.560 --> 12:03.840
Great way to support the show, Linode is fast, reliable cloud hosting with the best support

12:03.840 --> 12:14.200
over the last 19 years. Nobody has them matched in this area. And they're 30-50% cheaper than

12:14.200 --> 12:15.200
the hyperscalers that want to lock you into their crazy platforms and try to upsell you

12:15.200 --> 12:18.320
every single day on all their little services that they all have to have cute little esoteric

12:18.320 --> 12:24.040
names for. And by cute I mean horrible. But on top of that, Linode has the best performance.

12:24.040 --> 12:28.720
They've got 11 data centers around the world you can choose from. And of course their interface

12:28.720 --> 12:34.680
is simple, straightforward and easy to understand with great documentation and an API that lets

12:34.680 --> 12:39.560
you do everything. And then they have a bunch of great features on top of that. Object storage,

12:39.560 --> 12:45.040
cloud firewall, simple elegant backups, Kubernetes and Terraform and Ansible support and so much

12:45.040 --> 12:49.100
more. And if you're a performance hound, your application needs a lot of throughput, go

12:49.100 --> 12:55.460
check out Linode's MVME storage and dedicated AMD EPYC CPU rigs. So go build something,

12:55.460 --> 13:00.240
go learn something, try it for yourself and support the show. You just go to linode.com

13:00.240 --> 13:06.120
slash LAN. That gets you the $100 so you can really try the service. You can get a genuine

13:06.120 --> 13:10.760
idea of what it's like to use it, what the performance is, what the feature set is and

13:10.760 --> 13:15.200
you can get that for 60 days. Go lock it in and kick the tires. Go to linode.com slash

13:15.200 --> 13:23.360
LAN. One more time, support the show, linode.com slash LAN.

13:23.360 --> 13:28.680
Linode.com slash LAN. Collide is endpoint security that uses the most powerful untapped

13:28.680 --> 13:33.440
resource in your entire organization, the end users. You know, when you're trying to

13:33.440 --> 13:37.200
achieve security goals, maybe it's an internal goal, maybe it's one for a third party auditor.

13:37.200 --> 13:41.680
I had to do that for years. Maybe it's just something the boss wants done. The traditional

13:41.680 --> 13:47.260
approach is treating every device like it's Fort Knox. With old school tools like MDMs

13:47.260 --> 13:52.500
that force disruptive agents onto employees' devices, Rex Performance makes the machines

13:52.500 --> 13:57.760
feel like they're five years older than they really are and it turns IT admins and users

13:57.760 --> 14:03.500
into enemies. Plus, a lot of these tools create their own security problems. Let's be real,

14:03.500 --> 14:08.400
Collide does things differently. Instead of forcing changes on users, Collide sends them

14:08.400 --> 14:14.640
security recommendations via Slack. Collide will automatically notify your team when their

14:14.640 --> 14:20.180
device is insecure and it'll give them step-by-step instructions on how to solve those problems.

14:20.180 --> 14:24.420
By reaching out to employees via a friendly Slack DM and educating them about company

14:24.420 --> 14:30.320
policies, Collide can help you build a culture in which everyone contributes to security

14:30.320 --> 14:35.820
because everyone understands how and why to do it. And for IT admins, Collide provides

14:35.820 --> 14:40.560
a single dashboard that lets you monitor the security of your entire fleet. Maybe they're

14:40.560 --> 14:44.400
on a Mac, maybe they're on Windows, or maybe they're on Linux. Doesn't matter. You can

14:44.400 --> 14:48.200
see it all with a glance. See which employees have used disk encryption, which ones have

14:48.200 --> 14:52.900
kept their OS up to date, if they have a password manager installed, it really makes it easy

14:52.900 --> 14:57.960
to prove compliance to the auditors, to your customers, to leadership, whoever it be. So

14:57.960 --> 15:05.080
that's Collide. User-centered, cross-platform, endpoint security for teams, Slack. You can

15:05.080 --> 15:11.500
meet your compliance goals by putting users first. Visit collide.com slash LAN to find

15:11.500 --> 15:14.420
out and when you go there, they're going to hook you up with a goody bag that includes

15:14.420 --> 15:21.020
a free t-shirt just for activating a free trial. How great is that? So go to K-O-L-I-D-E

15:21.020 --> 15:29.020
dot com slash L-A-N. That's collide.com slash LAN.

15:29.020 --> 15:35.160
John Deere has famously been at the center of the right to repair fight for years now,

15:35.160 --> 15:40.540
locking their farmers out of their own equipment, forcing the use of company service options.

15:40.540 --> 15:47.660
Well, a new jailbreak announced at DEFCON by SICK codes might just tip the balance of

15:47.660 --> 15:54.100
power in favor of the equipment owners. Under pressure from the right to repair movement,

15:54.100 --> 15:58.880
John Deere had already announced some plans to open up some of its software to owners

15:58.880 --> 16:05.600
of the equipment, but many had emphasized that this was just too little, too late.

16:05.600 --> 16:09.660
And now the next shoe has dropped and surprise, surprise everyone. John Deere's embedded

16:09.660 --> 16:16.460
systems, they're running old versions of Linux and Windows CE. So to develop this jailbreak,

16:16.460 --> 16:21.020
SICK codes got his hands on numerous generations of John Deere tractor control touchscreen

16:21.020 --> 16:26.380
consoles. He ultimately decided to just focus on a few models and SICK codes then decided

16:26.380 --> 16:32.300
to solder controllers directly onto the circuit boards and eventually was able to bypass system

16:32.300 --> 16:37.580
protections, even protections that John Deere had tried to recently update. Once set up,

16:37.580 --> 16:42.100
he used an attack on a reboot check to restore the device as if it was being accessed by

16:42.100 --> 16:47.380
a certified dealer. He found that when the system was in this mode, it would offer more

16:47.380 --> 16:52.460
than 1.5 gigabytes worth of logs. And of course, this log data revealed the path to another

16:52.460 --> 16:57.980
potential timing attack that he could use to get even deeper into the system.

16:57.980 --> 17:03.540
And boy did it. Not only did SICK codes find that all the firmware's code is running as

17:03.540 --> 17:08.300
root because of course it is, but it also turned out that once you were able to get

17:08.300 --> 17:13.300
your own software onto the equipment, it would just accept whatever code you put on there

17:13.300 --> 17:19.820
and happily execute it. SICK codes emphasized saying, the main bug is that nothing's encrypted

17:19.820 --> 17:23.980
or checks on properly or anything like that.

17:23.980 --> 17:30.260
It's impressive how fragile this empire is. This empire of service repair and locking

17:30.260 --> 17:36.900
farmers out wasn't really that well protected once you got physical access to it. Kyle Waynes,

17:36.900 --> 17:43.860
the CEO of iFixit and also a right to repair advocate himself, he attended SICK codes presentation

17:43.860 --> 17:50.180
and he recounted the experience on Twitter saying, SICK codes has jailbroken a John Deere

17:50.180 --> 17:55.740
and this is just the beginning. Turns out our entire food system is built on outdated

17:55.740 --> 18:00.860
unpatched Linux and Windows CE hardware with LTE modems.

18:00.860 --> 18:07.460
Yikes. Also, we should note that there's no patching around this flaw, so we suspect

18:07.460 --> 18:11.380
this is really just the beginning for people who want to repair their tractors and other

18:11.380 --> 18:17.700
farm equipment themselves. Also, now that we know with certainty that GPL software is

18:17.700 --> 18:23.300
used on their equipment, you've got to wonder if John Deere has been in compliance with

18:23.300 --> 18:25.820
the terms of that license.

18:25.820 --> 18:30.920
I suspect we may find out in time. And yes, dear listener, they've already got doom running

18:30.920 --> 18:34.140
on these devices. You have to wonder what else they're going to get running on these

18:34.140 --> 18:38.220
John Deere tractors. What other functionality could they bring to these tractors? Could

18:38.220 --> 18:43.580
we one day see an updated Linux distribution for tractors? Who knows, but the possibilities

18:43.580 --> 18:47.780
are pretty endless, just like so many other things in the world of Linux and open source.

18:47.780 --> 18:51.980
So we'll keep an eye on all of it. Be sure you go to linuxactionnews.com slash subscribe

18:51.980 --> 18:56.700
for all the ways to get new episodes so you don't miss a thing. And linuxactionnews.com

18:56.700 --> 19:01.340
slash contact for ways to get in touch. And be sure to go check out our buddy Alex from

19:01.340 --> 19:07.560
Self Hosted on episode 190 of Late Night Linux recorded during the recent London Meetup.

19:07.560 --> 19:12.060
As for us, well, we'll be back next week with our take on the latest Linux and open

19:12.060 --> 19:32.460
source news. Thanks for joining us. And that's all the news for this week.


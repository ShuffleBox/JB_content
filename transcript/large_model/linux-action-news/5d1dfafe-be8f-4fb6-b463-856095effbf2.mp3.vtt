WEBVTT

00:00.000 --> 00:08.640
Hello and welcome to Linux Action News, episode 219 recorded on December 11th, 2021.

00:08.640 --> 00:09.640
I'm Chris.

00:09.640 --> 00:10.640
And I'm Wes.

00:10.640 --> 00:11.640
Hello, Wes.

00:11.640 --> 00:12.640
Let's do the news.

00:12.640 --> 00:16.200
We start this week with good news for GNOME users.

00:16.200 --> 00:21.760
Just recently landing in GNOME 42's development branch is a long awaited feature.

00:21.760 --> 00:23.520
So here's the deal, Wes.

00:23.520 --> 00:28.160
Up until now, GNOME has been making a compromise of sorts.

00:28.160 --> 00:32.280
It's been compressing pointer motion events so that they are synchronized to the monitor

00:32.280 --> 00:37.720
refresh rate, which can be anywhere from 30 hertz to 144 events per second.

00:37.720 --> 00:39.860
It depends on your particular display.

00:39.860 --> 00:44.600
Some of my monitors are 144, a couple of them are 30, and that would set the compression

00:44.600 --> 00:45.600
rate.

00:45.600 --> 00:49.960
So you could really only get as many motion pointer events as your monitor was supporting.

00:49.960 --> 00:52.080
That was the limiting factor.

00:52.080 --> 00:56.880
But to better handle software rendering at rates higher than the native refresh rate

00:56.880 --> 01:01.360
of your monitor, GNOME 42 is changing things up for the better.

01:01.360 --> 01:03.560
Yeah, especially depending on your application, Wes.

01:03.560 --> 01:09.000
So what has changed now is in version 42 and forward, GNOME will allow input events to

01:09.000 --> 01:13.040
happen at their full input rate, regardless of the monitor refresh setting.

01:13.040 --> 01:17.600
Now, of course, not all applications on the desktop will benefit from this change.

01:17.600 --> 01:22.640
But applications that use the device input velocity, like as a measurement, like drawing

01:22.640 --> 01:25.600
applications, they need as much granularity as possible.

01:25.600 --> 01:30.760
And when events are compressed, that actually tampers with the application's calculations

01:30.760 --> 01:36.920
of velocity, or really any application that just might render faster than say a 60 hertz

01:36.920 --> 01:38.440
or 30 hertz monitor.

01:38.440 --> 01:43.900
So without this change, those types of applications would spend multiple cycles, multiple frames

01:43.900 --> 01:47.120
without seeing a motion event.

01:47.120 --> 01:51.440
Obviously here games are another big application type that's going to benefit from this.

01:51.440 --> 01:56.080
To keep the required calculations to a minimum, though, Mudder now caches a set of rectangles

01:56.080 --> 02:01.200
that approximates the visible uncovered area of the actor beneath the pointer.

02:01.200 --> 02:05.600
Now these are in the same coordinate space as input events, so comparisons are direct.

02:05.600 --> 02:10.120
And if the pointer moves outside the expressed region, or the cache is dropped by some other

02:10.120 --> 02:15.280
means, the actor is just looked up again, and then that new area added back to the cache.

02:15.280 --> 02:21.080
What's landing in GNOME 42 may or may not end up being the final fix for all this, though.

02:21.080 --> 02:25.400
The applied fix is pretty robust, but unfortunately still temporary.

02:25.400 --> 02:30.860
A better solution is being proposed at the Wayland Library level, but, well, that's unlikely

02:30.860 --> 02:33.280
to be ready before GNOME 42.

02:33.280 --> 02:35.560
I'll take even a temporary fix for right now.

02:35.560 --> 02:39.720
Carlos has done some good work here, and I'd be really interested to know, Carlos, if this

02:39.720 --> 02:43.680
work was inspired by perhaps, oddly enough, the Steam Deck.

02:43.680 --> 02:48.960
I'm wondering if things like this perhaps played a role in Valve's choice to go with

02:48.960 --> 02:53.760
Plasma instead of GNOME, which would be a bit simpler for new users.

02:53.760 --> 02:58.800
I don't know, but perhaps Carlos could reach out at linuxactionnews.com slash contact and

02:58.800 --> 02:59.920
let us know.

02:59.920 --> 03:03.640
But we did want to take a moment and mention that our friends over at the FreeBSD Project

03:03.640 --> 03:06.440
released version 12.3 this week.

03:06.440 --> 03:11.000
This is the fourth release of the Stable 12 branch, and some of the highlights include

03:11.000 --> 03:16.000
updates to various networking drivers, several updates to upstream contributed software,

03:16.000 --> 03:21.680
and several user applications getting improvements, and of course, those great kernel bug fixes.

03:21.680 --> 03:25.560
Though we do realize that many of you have already moved on to FreeBSD 13, we wanted

03:25.560 --> 03:30.340
to note the 12.3 milestone here on the show.

03:30.340 --> 03:36.040
Systemd 250 is gearing up for release near the Christmas holiday this year, and this

03:36.040 --> 03:41.520
week the first release candidate shipped packed full of new great gifts.

03:41.520 --> 03:46.240
Systemd homed will now default to ButterFS's Zstandard compression, and this is a change

03:46.240 --> 03:51.320
inspired by Fedora's recent decision to switch to Zstandard by default.

03:51.320 --> 03:56.720
And quite excitingly, Systemd homed now makes use of UID mapped mounts.

03:56.720 --> 04:02.880
Well, if the kernel and the file system underneath support it, files will now be internally owned

04:02.880 --> 04:08.080
by the nobody user and then dynamically mapped to the UID used locally on the system via

04:08.080 --> 04:12.720
that fancy new UID mapping mount logic that was added in recent kernels, something we've

04:12.720 --> 04:15.320
talked about here on Linux Action News.

04:15.320 --> 04:20.360
There's also support for encrypted and authenticated credentials, a whole bunch of new settings

04:20.360 --> 04:25.680
for unit files, such as network interface restrictions, and just a whole lot more.

04:25.680 --> 04:30.240
We'll have a link to the release notes and a write up by Michael Horrible in the show

04:30.240 --> 04:39.480
notes.

04:39.480 --> 04:41.320
Linode is fast and reliable cloud hosting.

04:41.320 --> 04:42.720
You've got to try it for your next project.

04:42.720 --> 04:46.840
It's what I've used for years, especially now that Linode has been rolling out these

04:46.840 --> 04:49.440
MVME PCI storage upgrades on their rigs.

04:49.440 --> 04:52.300
Oh, it's time to try it, right?

04:52.300 --> 04:56.000
The nice thing too about Linode is it does give you that extra safety layer.

04:56.000 --> 05:01.040
So if, like a lot of my friends out there this week, you had to do some surprise patches

05:01.040 --> 05:05.940
on your systems, I have a little bit of like extra insurance with Linode because not only

05:05.940 --> 05:10.160
can I manually create a snapshot, but I have just turned on the auto backup.

05:10.160 --> 05:14.560
And the thing that I really appreciate about Linode's UI is that auto backup stuff is really

05:14.560 --> 05:18.280
easy to just kind of suss out and see what the state of your system's backups are.

05:18.280 --> 05:24.080
Like when it was last taken, how many backups you can go back, all of that is made super

05:24.080 --> 05:27.880
easy to see, super easy to understand when you log in.

05:27.880 --> 05:31.880
And that kind of peace of mind and information makes it easier for me to proceed.

05:31.880 --> 05:36.640
Of course, the ability to just like click snapshot right now is super great as well.

05:36.640 --> 05:40.920
And the nice thing about Linode is the dashboard's fast, the machines are fast, everything's

05:40.920 --> 05:41.920
really quick.

05:41.920 --> 05:46.480
So that little extra time you'll take to go into the dashboard and create that snapshot,

05:46.480 --> 05:47.760
it's totally worth it.

05:47.760 --> 05:50.240
And the nice thing is their API is fantastic.

05:50.240 --> 05:55.080
You can do a lot of this stuff programmatically, or if you just like to go my route a little

05:55.080 --> 05:59.720
lazier, use their command line tool for this kind of stuff.

05:59.720 --> 06:00.860
Seriously think about it.

06:00.860 --> 06:03.840
You could even have the command line tool on the server you're managing.

06:03.840 --> 06:07.720
So you fire off the snapshot from that box and then you proceed.

06:07.720 --> 06:13.480
There's a lot of ways and a lot of places and a lot of different types of hosting out

06:13.480 --> 06:14.480
there.

06:14.480 --> 06:18.880
But nobody gets it like Linode with 11 data centers around the world, 40 gigabit connections

06:18.880 --> 06:24.000
coming into the hypervisors and 18 years plus now of doing this.

06:24.000 --> 06:27.760
I mean, they just keep getting better and better and they've really stepped it up over

06:27.760 --> 06:30.040
the last few years and they blew me away.

06:30.040 --> 06:31.880
And now they've got a customer for life.

06:31.880 --> 06:35.120
I want you to try it and take advantage of that $100 offer.

06:35.120 --> 06:41.040
Go to linode.com slash LAN, get $100 for 60 days on a new account and you really do support

06:41.040 --> 06:42.120
the show.

06:42.120 --> 06:46.440
It makes a big difference for me, it makes a big difference for you and everybody wins.

06:46.440 --> 06:49.800
linode.com slash LAN.

06:49.800 --> 06:53.100
And thank you to Ting, linux.ting.com.

06:53.100 --> 06:57.040
If you're sick of overpaying for cell service, go see how much you could save and then get

06:57.040 --> 07:01.440
$25 off of that by going to linux.ting.com.

07:01.440 --> 07:06.480
I've been a customer since 2013 and it's just a smarter way to do mobile.

07:06.480 --> 07:10.840
It's how mobile should have to be done in the US if we had some decent regulations or

07:10.840 --> 07:12.440
some real competition out there.

07:12.440 --> 07:16.960
But because we got a duopoly, you really don't get to see these kind of features unless you

07:16.960 --> 07:20.460
have somebody that comes along and brings it all together.

07:20.460 --> 07:21.460
That's what Ting does.

07:21.460 --> 07:24.780
They're an MVNO or a mobile virtual network operator.

07:24.780 --> 07:29.280
They get access to the big carrier networks, but they get to layer on their superior customer

07:29.280 --> 07:32.940
service and their superior pricing model because they don't have to pay for digging the holes

07:32.940 --> 07:35.040
in the ground to stand up those towers.

07:35.040 --> 07:40.360
And this Christmas marks the first year one of my kids gets a cell phone.

07:40.360 --> 07:44.160
It's one of those things I've debated a lot about, but now that they are getting into

07:44.160 --> 07:50.280
after school events and sports and all these kinds of things, it's becoming more and more

07:50.280 --> 07:51.760
necessary.

07:51.760 --> 07:54.280
And there's just no other way I'm going to go than Ting.

07:54.280 --> 07:55.780
I love Ting's simplicity.

07:55.780 --> 08:00.520
You can get plans to start at $10 a month, plans with unlimited talk and text and just

08:00.520 --> 08:02.200
the right amount of data that you need.

08:02.200 --> 08:06.920
And every plan gets access to Ting's award winning customer service with nationwide LTE

08:06.920 --> 08:10.640
and 5G coverage, plus the freedom of no contracts ever.

08:10.640 --> 08:12.520
It's simple to switch to Ting and it's quick.

08:12.520 --> 08:14.240
So go to linux.ting.com.

08:14.240 --> 08:17.240
See if your current phone will work, it probably will create an account and pick the plan that's

08:17.240 --> 08:18.240
right for you.

08:18.240 --> 08:22.400
And then Ting's going to send you a SIM card and you're going to get active in minutes.

08:22.400 --> 08:28.520
Go see how simple it is and take 25 bucks off linux.ting.com.

08:28.520 --> 08:34.200
And now we wanted to take a few moments to talk about the biggest news story this week.

08:34.200 --> 08:39.840
The new vulnerability that's been found in the popular open source project, Log4j.

08:39.840 --> 08:44.480
Any Java application that takes advantage of Log4j and uses the official JVM version

08:44.480 --> 08:47.040
11 or older is impacted.

08:47.040 --> 08:51.840
Putting that another way, it's just a huge amount of software.

08:51.840 --> 08:56.240
Initially discovered as a Minecraft exploit, researchers have demonstrated that many popular

08:56.240 --> 08:59.040
products and services are vulnerable.

08:59.040 --> 09:03.600
Maybe the most infamous is simply just changing the name of one's iPhone to exploit this issue

09:03.600 --> 09:04.960
on iCloud.

09:04.960 --> 09:06.120
That's pretty bad.

09:06.120 --> 09:11.200
Of course, some of us also recall the Apache Foundation tweeted that Log4j is being used

09:11.200 --> 09:13.720
on the Mars Linux copter.

09:13.720 --> 09:16.040
Not an easy patch, I imagine.

09:16.040 --> 09:21.600
Thankfully though, I don't think there are too many remote connections on Mars just yet.

09:21.600 --> 09:26.880
In short, this vulnerability stems from the fact that Log4j supports evaluating certain

09:26.880 --> 09:30.040
lookup values before it actually writes to the log.

09:30.040 --> 09:35.800
The most dangerous of these performs a remote JNDI lookup on a user-controlled value.

09:35.800 --> 09:40.560
Yeah, that stands for the Java Naming and Directory Interface.

09:40.560 --> 09:45.320
It provides an API for applications to interact with remote objects like, say, a remote lookup

09:45.320 --> 09:46.880
in an LDAP server.

09:46.880 --> 09:52.840
So if your application logged user-provided strings and this lookup functionality is enabled,

09:52.840 --> 09:58.120
after a few steps, an attacker can successfully execute arbitrary code on the remote host.

09:58.120 --> 10:00.320
Yeah, here's how that might work.

10:00.320 --> 10:05.080
First, an attacker sends in some malicious data with one of these lookup values encoded

10:05.080 --> 10:06.080
in it.

10:06.080 --> 10:11.160
Then, if the server logs that data in a request, which is super common, I mean, you gotta log

10:11.160 --> 10:14.720
user input when you're trying to track down bugs and issues later on.

10:14.720 --> 10:19.400
Well, that malicious payload directs the server to perform a remote lookup at an attacker-controlled

10:19.400 --> 10:20.400
address.

10:20.400 --> 10:24.160
And yeah, LDAP is a big one you see in a lot of these example attacks that have been put

10:24.160 --> 10:25.780
up on GitHub.

10:25.780 --> 10:30.720
That triggers the vulnerability, log4j, the library, goes out and makes that request.

10:30.720 --> 10:35.020
And because it's an attacker-controlled server, well, the response from that server contains

10:35.020 --> 10:37.320
a path to a Java class file.

10:37.320 --> 10:43.200
Well, that gets downloaded and then injected into the running server process, which, boom,

10:43.200 --> 10:45.160
remote code execution right there.

10:45.160 --> 10:46.160
Boom, indeed.

10:46.160 --> 10:50.360
I'm just picturing the process the researchers went through to kind of piece all this together.

10:50.360 --> 10:53.560
Clearly, they had some good insights on how this works.

10:53.560 --> 10:54.560
But it's a rough one.

10:54.560 --> 10:56.560
I mean, there's patches out, right?

10:56.560 --> 10:57.880
But we all know this.

10:57.880 --> 10:58.880
I hate it.

10:58.880 --> 10:59.880
You hate it.

10:59.880 --> 11:00.880
Everybody hates it.

11:00.880 --> 11:03.280
But a lot of services are going to be impacted by this.

11:03.280 --> 11:09.560
And it is versions of JVM that have been out since 2006, which means a lot of old enterprise

11:09.560 --> 11:12.160
software is going to be impacted by it.

11:12.160 --> 11:15.660
And I was hearing from friends and listeners all weekend that they were rushing to patch

11:15.660 --> 11:17.520
this up over their Saturday.

11:17.520 --> 11:21.080
Unfortunately, it's also present in a whole bunch of products that have been around for

11:21.080 --> 11:22.080
a long time.

11:22.080 --> 11:27.240
But Java is just everywhere, and we know those things don't get updated very regularly, if

11:27.240 --> 11:28.240
at all.

11:28.240 --> 11:29.240
No, no.

11:29.240 --> 11:34.000
I think it's one of those situations where people just think of it as part of the infrastructure

11:34.000 --> 11:36.800
and they build their applications on top of it and why ever touch it.

11:36.800 --> 11:41.080
Even though we're only talking Java 11 here, that was from 2019.

11:41.080 --> 11:42.960
That's actually not that long ago.

11:42.960 --> 11:47.160
This whole thing is also about open source funding, right?

11:47.160 --> 11:52.360
I mean, here we are again, with multiple billion dollar companies being exposed because some

11:52.360 --> 11:58.280
small little piece of open source infrastructure hasn't really been getting funding or attention.

11:58.280 --> 12:02.080
Yeah, this is one of those where the memes kind of put it in perspective, oddly enough.

12:02.080 --> 12:06.680
So we'll link to a repo that collected some of the best and there's a lot of them, but

12:06.680 --> 12:12.120
it's like these little bits of open source software that can just topple an entire empire.

12:12.120 --> 12:17.320
And there have been several high profile examples of this one just recently in NPM.

12:17.320 --> 12:22.720
And I actually think we're getting to a point where some of these companies like your Googles

12:22.720 --> 12:26.080
and your Microsofts and your Apples and your Samsungs, they're actually willing to pay

12:26.080 --> 12:29.120
developers to fix this stuff.

12:29.120 --> 12:31.000
But it's tricky.

12:31.000 --> 12:35.240
We've experienced this just on our own little small scale here at JB, that when you try

12:35.240 --> 12:39.560
to pay open source developers for their time, it's not just a simple thing.

12:39.560 --> 12:43.240
There's often international things you got to sort through.

12:43.240 --> 12:48.760
And some developers, a lot more than you'd expect, are very picky or very restricted

12:48.760 --> 12:50.340
in how they can get paid.

12:50.340 --> 12:54.440
And some of them have moral obligations about what companies they will or will not work

12:54.440 --> 12:55.440
with.

12:55.440 --> 12:59.600
A lot of times PayPal is on the list of companies that open source developers, especially the

12:59.600 --> 13:02.680
free software developers, just refuse to work with.

13:02.680 --> 13:08.560
And additionally, Google and Amazon, they're not going to go and log for Jay's Patreon

13:08.560 --> 13:11.800
and become a Patreon supporter in one of their tiers, right?

13:11.800 --> 13:14.920
That's not how these massive companies work.

13:14.920 --> 13:21.760
They live in the land of invoices, POs, and ACH payments, not PayPal payments, not Patreon

13:21.760 --> 13:24.320
payments, not GitHub sponsors.

13:24.320 --> 13:26.720
That's just not what these companies do.

13:26.720 --> 13:28.200
They have finance departments.

13:28.200 --> 13:32.700
They don't have individuals that have PayPal accounts that go support some developer.

13:32.700 --> 13:41.040
So we need a way that's not a big foundation or some law firm, but some platform that lets

13:41.040 --> 13:46.200
developers get paid in the language, in the means that these companies want to do it.

13:46.200 --> 13:50.480
And I know this sounds odd, but I can tell you from being on this end, there has been

13:50.480 --> 13:54.840
multiple situations where we're like, we don't have a way to pay this guy because he doesn't

13:54.840 --> 13:59.160
want to work with PayPal or there's this restriction because of the country he's in.

13:59.160 --> 14:02.400
And it's so much more complicated than just send them a tip.

14:02.400 --> 14:06.720
And it gets even more complicated when you have these companies with policies and procedures

14:06.720 --> 14:11.040
and they're used to interfacing with other businesses, not individuals.

14:11.040 --> 14:12.960
It's a really hard problem to solve.

14:12.960 --> 14:14.600
Yeah, you're right about that.

14:14.600 --> 14:18.760
And you point out that sometimes foundations, maybe some sort of nonprofit, sometimes that

14:18.760 --> 14:23.560
can work, but it also comes with its whole host of own challenges.

14:23.560 --> 14:25.800
And it doesn't seem like it's scaled successfully.

14:25.800 --> 14:31.600
It's those have been reactionary moves when we discover something like openness, self-vulnerability,

14:31.600 --> 14:35.560
then we'll set up some sort of foundational structure that provides a support infrastructure.

14:35.560 --> 14:38.640
But in the meantime, there's thousands of different open source projects out there that

14:38.640 --> 14:43.520
aren't on anyone's radar that go along for a decade and never get any funding, just like

14:43.520 --> 14:44.520
this one.

14:44.520 --> 14:51.360
I'm not sure there is an easy answer, unfortunately, although, hmm, maybe, what if we start making

14:51.360 --> 14:53.360
these patches NFTs?

14:53.360 --> 14:59.280
There you go, NFT for a pull request, or you know what, it could be even simpler, Wes.

14:59.280 --> 15:00.840
It could just be like a screenshot.

15:00.840 --> 15:01.840
Yeah.

15:01.840 --> 15:02.840
Screenshot of the get diff.

15:02.840 --> 15:03.840
Perfect.

15:03.840 --> 15:08.000
Yeah, they'll make 70, 80K and their whole year of development will be funded.

15:08.000 --> 15:09.720
Why didn't they think of that?

15:09.720 --> 15:10.720
I don't know.

15:10.720 --> 15:14.620
Maybe until the NFT thing comes along, maybe you'd like to join a network wide membership

15:14.620 --> 15:19.120
that we now have here, which includes every episode of Linux Action News ad free.

15:19.120 --> 15:21.260
We're just getting that added to the feed right now.

15:21.260 --> 15:25.400
If you go to Jupiter.party, you can sign up and for a limited time, I'm applying a holiday

15:25.400 --> 15:28.960
discount that takes $2 off the price for a year.

15:28.960 --> 15:33.400
It's just the price of two show memberships, but you get access to all the special feeds

15:33.400 --> 15:36.080
for all the shows we produce here at Jupiter Broadcasting.

15:36.080 --> 15:39.600
And it's the only way to get Linux Action News ad free.

15:39.600 --> 15:42.160
So go to Jupiter.party and sign up for a membership.

15:42.160 --> 15:46.400
And also you can give the gift of a Jupiter membership.

15:46.400 --> 15:48.880
We have a gift membership option there, brand new.

15:48.880 --> 15:49.880
We've got it all worked out.

15:49.880 --> 15:54.000
You select the date range and you can give the gift of a Jupiter Broadcasting membership

15:54.000 --> 15:56.300
or pick one up for yourself and take two bucks off.

15:56.300 --> 15:59.760
It's already preloaded when you hit the link at Jupiter.party.

15:59.760 --> 16:03.120
You've asked for it and we're finally delivering a membership.

16:03.120 --> 16:04.640
Thank you for everyone who supports us.

16:04.640 --> 16:05.900
We really do appreciate it.

16:05.900 --> 16:09.300
And even if you're not in a position to support us with a network membership, we still appreciate

16:09.300 --> 16:11.660
every single time you download the show and listen.

16:11.660 --> 16:16.400
So be sure you go to linuxactionnews.com slash subscribe for all the ways to get new episodes.

16:16.400 --> 16:20.780
And linuxactionnews.com slash contact for ways to keep in touch.

16:20.780 --> 16:25.880
Check out JupiterGarage.com, just a few rando swag bags remaining.

16:25.880 --> 16:28.420
Go grab them while you can at JupiterGarage.com.

16:28.420 --> 16:30.520
And hey, check us out again next Monday.

16:30.520 --> 16:35.200
We'll be back with our weekly take on the latest Linux and open source news.

16:35.200 --> 16:36.200
Thanks for joining us.

16:36.200 --> 16:56.280
And that's all the news for this week.


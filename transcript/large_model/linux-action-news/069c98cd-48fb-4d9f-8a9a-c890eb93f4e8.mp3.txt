Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.
This is episode 55, recorded on May 27th, 2018.
I'm Chris.
And I'm Joe.
Hello, Joe.
We have so many things to get into, including some game changing technologies.
When's the last time you heard me say that?
Well, we're going to start this week with some good old releases.
Yeah, OpenSUSE Leap 15 is being released, hot on the heels of version 42.3.
What?
That naming system doesn't make any sense.
Yeah, well, release numbers aside, this is the next major release of OpenSUSE Leap.
This is version 15, as Joe just said, and it's based on the enterprise grade SLES.
And it brings in that new partitioner, and it also moves to firewall D, as well as introduces
a new system role, a classic server or a transactional server role.
Here's what's really neat.
When you go transactional server, you go to a read only root file system.
And when you're booting Leap up, say maybe you're troubleshooting, there is an option
now to boot Leap in read only mode.
Yeah, I was only kind of joking about the numbers there.
It's the reason that it's changed to 15 is to sync it up with the enterprise version
SLES, which is going to be coming out in a few months, and that's going to be 15.
And what jumped out at me as being the most significant change is that you're going to
be able to upgrade from OpenSUSE 15 to SUSE Linux Enterprise 15 if you want to start paying
them.
So it's kind of like giving you the first hit free and getting you sucked in with OpenSUSE,
and then now it's going to be trivial to upgrade to the enterprise version, which I think is
a pretty good strategy from them.
I think this might be a better take on the CentOS Red Hat Enterprise model.
So I've been in situations myself where I went in for a client, and they had a bunch
of CentOS servers they installed, and over time they ended up becoming very valuable
to the business.
And now the conversation starts, how do we sneaky upgrade these things to RHEL and then
get support for them?
And you start looking at swapping out repositories, and it is possible, but it's dodgy.
And now you have from SUSE an official path, hey, you want to try out Leap as a really
powerful SLE based workstation, and now you've decided that either on your server or your
workstation that it's worth paying for.
Here is an official upgrade path to the enterprise supported, we'll give you a support contract
version of SUSE.
That's a good strategy.
Embrace that behavior of your users.
Yeah, and I like the fact that there's only one installation image, and you can just pick
whether you want a desktop version or the server version or the new transactional update
server.
I gave Leap 15 a kick of the old tires for this episode of Linux Action News, and I was
both impressed and a little surprised by a couple of things.
I'll start with the things that I was a little lukewarm on.
The installer, while competent, feels to me of a bygone era.
It probes my FireWire devices.
Before I go anywhere in the installer, I have to configure my network interface.
I feel like the installer is making me do tasks that the kernel's already figured out
and done the work for.
Yet we're still giving me a UI to manage it.
It's obviously detected my network interface.
It obviously is detecting my FireWire and USB ports.
Why do we need to set them all up and probe them?
Try to get an IP address.
If the IP address isn't assigned by a DHCP server, then prompt the user to configure
the network interface.
But instead it starts with that.
When I open up the update manager, the first thing I get is an error message about my missing
CD ISO image or media.
It's awkward.
It's Linux of the past.
But then there's a bunch of forward-thinking things that are built in, like the way it
manages your disk.
It uses XFS and ButterFS pretty intelligently, and it's mixed throughout.
And you will not find a more polished from boot to desktop experience.
Nobody nails it like SUSE.
Before the grub menu selection even comes up, they've beat everyone else at the game.
And then the little loading bar that comes up for loading your kernel and the entire
boot process is so, so slick.
And there's little things they've thought of, little edge cases that they've covered
in Yast and other places that really kind of make you smile.
So it's a kind of a mixed bag for me when it comes to SUSE.
I feel the legacy of a Linux distribution that's been around since before Xorg was
automatically configured and before network cards were automatically configured.
I feel that legacy.
But I also can see a future-looking distribution that's thought of things that other distributions
haven't implemented yet.
So with Leap 15, I'm left kind of in this sort of awkward position, but I could definitely
see it working as a great workstation for a lot of SUSE users and for people that want
something they can install once and keep using for years.
Well, one thing that we will almost certainly be using in the future is LXQt.
And this week LXQt 0.13 was released.
And for me, this is the release that makes it absolutely usable.
It was kind of getting there before, but there were a few little things that annoyed me about
it, but they seem to have all been fixed.
And now I can just add it to the list of desktops that I would be happy to use.
Yeah, the other thing that's great about LXQt 0.13.0 is it's now ready for Qt 5.11, which
is a modern version of the Qt toolkit.
And something else they've done that's going to make it easy for distribution maintainers
to sort of add their own polish is they've moved some of the default configs to user
share LXQt, and now distributions can override default settings by putting their configurations
in slash XE slash LXQt.
It seems like a small change, but that's the little seed that gets planted for distributions
to build a great desktop around LXQt.
Well, one of those distributions is Lubuntu, and they are going to be using this by default
in 18.10.
And the daily image that I tried today was working absolutely fine.
I was really surprised by that.
It's so early on in the cycle, but it already feels ready to me.
And I would highly recommend that you check it out, even if it's only live, because this
is potentially going to be a great alternative to Plasma in the Qt world.
And if you want just a very simple workstation desktop environment that's a classic paradigm,
shall we say, then definitely check it out.
I'm more and more interested in minimal desktop setups these days, not necessarily for my
main workstation, but for some of my work systems that just run a couple of applications
24-7.
It feels like a minimal desktop environment that's based on some modern toolkit technology
is the way to go.
But that all said, I am not 100% yet sold on LXQt.
I think it's a great project.
I think it's remarkable the progress they've made.
But having loaded Plasma Desktop, like the full-fledged Plasma Desktop on really old
hardware that really has no right to perform at all under modern desktop Linux, full Plasma
Desktop did fine.
And I'm going to throw in behind what Jonathan Riddle said in his interview with you in the
recent Late Night Linux Extra.
I think it's surprisingly low resources.
And I think it is a myth from years gone by that the Plasma Desktop is bloated.
And I would actually challenge people to load the Plasma Desktop on old hardware and sit
back and watch how it gracefully degrades itself to a state that you won't even notice
it's degraded.
It still seems like you're getting great features.
It's a modern desktop.
But yet, the CPU and memory usage is surprisingly low.
Well, yeah, that is true.
But competition is always a good thing, isn't it?
And hopefully, if LXQt gains some traction, it will drive Plasma to be even better than
it is already.
Yeah.
And like I said, for some systems, like my studio production systems, I want my desktop
environment doing as little as possible.
But I still want it to be modern and have decent features.
And I think LXQt, more than any other project right now, could be hitting that sweet spot.
Well, I don't know about you, but my init system is missing one crucial feature.
And that is the ability to run containerized services.
Well, good news, Joe.
And this might be the big news of the week.
A new functionality is coming to systemd, as well as a new utility, Portable CTL.
And portable services are going to be an incremental improvement, as Lenart puts it, over traditional
system services, making two new facets of container management actually possible that
you didn't know you needed until you heard it.
Number one, the bundling of applications, i.e. packaging up multiple services, their
binaries and all of their dependencies into a single image, and then running them directly.
Now, this isn't a Docker container.
We're talking about system services here.
It'll have stricter default policies.
This is number two.
And it will be sandboxed.
The primary tool for interfacing with portable services will be the new Portable CTL program.
It's currently shipped in user lib systemd portable CTL.
It's not in your path.
If you have current version of systemd, it's not yet considered officially part of the
systemd interfaces.
It is a preview.
Now, don't get too concerned, because portable services are not actually bringing anything
inherently new to the table.
All they're doing is really putting together a set of known concepts in a nicer way that
addresses specific user cases.
So what technically is a portable service, you're going to be hearing more about this.
And it's ultimately just an OS tree inside of a directory tree inside of a raw disk image
containing a Linux file system.
That's it.
Now, the tree is called an image, and it can be, quote, attached or detached from a system.
When it is attached, the specific systemd units from the image are made available on
the host system.
Then it pretty much just behaves exactly like a locally installed system service.
When it is detached, these units are then removed from the host, and they leave no artifacts
around other than like logs and run commands and all your traditional metrics.
Now that image, that OS tree image, it can really be created with any standard Linux
tool.
There's nothing proprietary.
You just need a little image with some metadata, and you're done.
The portable services concept ultimately will not provide a fully isolated environment like
a VM or a potential container does.
Instead, from the beginning, they're more like regular system services that can be controlled
with the same tools and are exposed in the same way that all the infrastructure is.
So that's great, because that means they can be used with the same management utilities
that already exist, which is huge for enterprise.
The main difference is that they use a different root directory than the rest of the system.
So the intention is not to run code in a different isolated world from the host, like a container
or a VM would, but to run in the same world, in the same environment as the rest of the
system, but with simply stricter access controls on what the service can see and do.
And lastly, really, the big point of differentiation between a container and a portable service
is they're just regular services.
They will not be running as PID 1 like a Docker container does, but they're just a normal
process on your system.
Well, I've seen a lot of criticism and debate about this.
Feature creep is something that keeps coming up.
A lot of people keep saying that.
Don't you think that this is kind of a bit beyond what an init system should be doing?
And SystemD is growing beyond just an init system and taking over too much of the Linux
stack here.
I've heard people joking about SystemD slash Linux instead of GNU slash Linux.
And this kind of feels more towards that to me.
Yeah, that could be an argument that could be made.
I would say, though, this is getting really back to its core functionality.
This is really about portable inits.
The only thing this is really adding is the ability to have init scripts that are contained
within an image that you can attach and detach with a SystemD command.
That's what's happening here.
It's like when you launch a snap, it's mounting the file system.
It runs the application.
When you're done, it goes away.
When you attach this portable service, those system files, those SystemD service files,
they just become available to your SystemD installation.
And when you detach it, they go away.
It's just now instead of having to have everything in one directory, you can attach these images.
So it's kind of more back to its core duty.
I don't know, man.
First he came for my audio stack and I said nothing.
And then he came for my init.
And now he's just coming for even more.
It just...
Hey, you know, actually, PulseAudio is pretty good these days.
Yeah, to be fair, Pulse has improved dramatically since it was prematurely introduced into most
distros.
LinuxAcademy.com.
Go there to support the Linux Action News program and sign up for a free seven-day trial
of a platform that is built to learn more about Linux.
And not just give you the hard data, but to also help you develop skills and encourage
critical thinking.
That's why they have hands-on, self-paced, in-depth courses that spin up cloud servers
as you need them.
Scenario-based labs give you experience on real servers, and they have full-time instructors
that can help you whenever you get stuck.
I'm packing after this show, and I'm heading down to Texas.
Number one on my list...
Well, it's Texas Linux Fest now, but number two on my list is hanging out.
Maybe number 1.2, and it's in there, is going to Linux Academy.
I'm very, very excited to stop by Linux Academy's home base and shake some hands, meet some
folks and install some Linux, because this is a company that truly cares about Linux.
That's why I'm making the trip in the first place.
And you can see it throughout.
That's why they're paying for full-time human beings to answer your questions.
That's why they're currently and constantly building new stuff and updating their old
content, always making your subscription more and more valuable.
One of the things I love is that they've created a flashcard system that's forkable by the
community.
They can make flashcards that are better and better and better within the community, and
they share all of it.
It's such a cool system, and it's full of Jupyter Broadcasting members, so go check
it out.
LinuxAcademy.com.
It's been a pretty bad week for Essential.
That's the company that was founded by Andy Rubin, who, of course, was one of the co-founders
of Android.
They put out one phone last year.
It didn't do excellently.
There were promises of other devices, like a home assistant and add-ons for the phone,
clip-on cameras, that sort of thing.
And now it looks like the next phone that they were going to bring out has been canceled,
and maybe the company's going to go up for sale.
And obviously, they're putting on a brave face and trying to say that everything's fine.
Don't worry.
But it doesn't look good for them, does it?
No, it really doesn't.
In fact, two different media outlets are reporting this.
Essential is kind of denying with a non-denial.
But Bloomberg, the one we have linked in the show notes, linuxactionnews.com 55, says that
current discussions are focused on a sale of the entire company, including its patent
portfolio, hardware products, like the original smartphone and the upcoming smartphone device,
and the camera attachment for the phone that had been teased since the first phone.
All of that to be sold.
You have to ask the question, what does this mean for startups in the Android world?
Have they just done it wrong?
I mean, you look at something like OnePlus, and they are going from strength to strength.
They've recently put out their OnePlus 6, and that seems to be getting really good reviews
and everything.
Did he just start out with too much hype in the first place with Essential?
Is that what has caused this problem?
Yeah, I think that is definitely true.
I reserve judgment still on the OnePlus.
I would love to get some real numbers on how they're doing as a company.
And it seems like everybody, like yourself, always says the OnePlus is such a great product.
And then I'm in several Telegram groups, and I'll hear people talk about how, oh, yeah,
the camera never works, or this has always been a problem with mine.
Or it seems like there's a lot of little quality control issues that are never surfaced in
these reviews.
But when you own a OnePlus for more than a year, little things seem to creep up.
And I've just heard a lot of reports of that.
Her own one and myself could be completely wrong, but I've definitely heard a lot of
that.
And when I look at how the Essential phone did it, I can't think of anybody else doing
it right.
We have this love letter over on xtadevelopers.com to the Essential, and they talk about some
of the things Essential got right.
And it looks like they nailed it.
A, be updating, yes.
Full trouble support, yes.
Direct unlock sales from Essential or Amazon, boom, right when you buy it.
No obnoxious branding on the device.
And you can even get early builds of the OS before they've shipped them, if you want to
run them, directly from Essential.
How more can you nail it for a high-end Android phone for the enthusiast?
Yeah, it's kind of like the old Nexus phones, isn't it?
It's pretty much stock Android, very developer-friendly.
You'd think that they would have sold just hundreds of thousands, millions of these,
but they just haven't sold those numbers.
And don't forget that this was the first phone that shipped with the notch, which now you're
going to struggle to buy a high-end phone without a notch this year.
Right.
And honestly, I wouldn't be surprised if Apple or Samsung started shipping one of their flagship
phones with ceramic very soon, and the Essential beat them to it by years.
If you recall, it's made out of ceramic and titanium.
I mean, the thing is designed beautifully.
It's got Andy Rubin behind it, and yet it appears they may have only sold 20,000 devices.
Yeah, I would have thought they would have sold a lot more than that, but I suppose it
was quite expensive when it came out, although the price did drop after a few months significantly.
And so again, I thought they would have sold more then, but maybe people just don't really
want to take a chance on the first generation of these things.
So we'll definitely have to keep an eye on this one, I think, because I think over the
next week or two, we're going to see a lot more details coming out about this and whether
they're actually going to be able to sell the company.
The next few weeks will be the most revealing.
What happens to Essential?
And I think this is a good moment to just ask, is there much of an enthusiast market?
Because low cost devices with great distribution are selling.
Yeah, those low end phones do seem to sell in pretty well.
But if a vast are to be believed, then some of them are being shipped with malware pre
installed on them, which is pretty terrible, including ZTE phones.
And as we know, ZTE are not in great shape at the moment, thanks to the US government.
Yeah, also Arcos and my phone.
And this doesn't surprise me at all.
I wish it did.
We've seen this a lot.
And it almost always goes down like this.
It's a two part app.
First of all, it consists of just the dropper part, just this small part that just looks
normal.
There's nothing malicious about it.
It goes out to the internet, it checks on some HTTP servers, maybe, but that's it.
No big deal.
So it passes automated scans.
And then once the system's active, and the smart ones, they wait a little while.
But once the system's active by the end user, it launches in the background, and it downloads
the payload.
And the payloads all kinds of fun things, perhaps something that exploits the latest
flaw in Android, which the latest flaw could be something that's three years old.
Or perhaps it's something that downloads a crypto miner, and it tries to burn through
your battery life to mine Monero.
It's a range of functionality that these things do.
And they often are almost undetectable by the user, they might not be in the launcher.
And the only way you could even see if they're installed is if you go into the system settings,
and you actually look at the applications through that view.
And a lot of times on the system, there's nothing really left behind that seems too
obvious because they'll name them something after like a game asset file, or an image
file.
So you can't really tell even by browsing your file system.
From time to time, they'll leave little XML manifest files around that contain information
about what URL to download from.
And in the case of the malware that was shipping on the ZTE, Arcos, and my phones, the author
had actually hard coded the URL to get the payload, which is like the laziest, most basic
way to do this kind of thing.
But Avast found that, and they were able to build some metrics around that.
And then from that, they were able to find it on a bunch of these phones.
What it really comes down to is just a lack of quality control from these companies because
they pump them out so cheaply, the margins are so small, that they just don't have time
to check all the code that they're getting from third parties, which you do get, you
would hope at least, with the higher end flagship phones.
And it's not really surprising at this low end.
You just kind of wish that the phone industry would have learned the lessons of the PC industry
because we've seen this same thing happen there with Windows devices that are racing
to the bottom for price.
Even recently, Lenovo had the Superfish exploit that was shipped on thousands of computers
that essentially had malware built in.
This is a continuing problem that the industry knew about, but yet continues to replicate
those mistakes because, I suppose, the economics of the industry.
It does remind us all, though, that if you can, if you're technically capable of, it
might just be best to replace those images that these devices come with with something
that you trust.
Well, that's exactly what I did with my old Chromebook.
I installed gallium OS, but maybe I won't need to run gallium OS in the future in order
to run Linux applications on this old Chromebook of mine.
After Google I.O., we thought that this was going to be limited to really high end Chromebooks.
And they said available on pixels soon and things like that.
But thanks to an issue that was found on Chromium's public bug tracker, it appears that this new
Linux apps on Chrome OS functionality won't be limited to just the newest highest end
devices.
Now, there was some grounds for us thinking it might be because the Linux apps on Chrome
OS require Linux kernel 4.4.
But in this issue on Chromium's bug tracker, we see work is being done to back work features
from 4.4 and some of the modules, specifically VSOC, which is required for all of this to
work, to Linux kernel 3.14, which happens to be the kernel that a couple of popular
Samsung Chromebooks run.
Apparently, Samsung wants in on the Linux app goodness on their Chromebooks.
And so work has begun on Google's part to back port the stuff from 4.4 to 3.14.
So if your Chromebook runs kernel 3.14 or newer, perhaps possibly, it may also get access
to these Linux apps.
You may not have to buy a thousand dollar pixel book.
That's suddenly going to make the used market for those Chromebooks more appealing, isn't
it?
Yeah, definitely.
I mean, we don't really know the extent of the back porting.
So we'll have to figure out what that is.
Some kernel modules or platform generations just may not make the cut because they just
are not fast enough or they can't run the right kernel.
But nonetheless, this news does mean that older Chromebooks will not necessarily suffer
from obsolescence just yet.
So that used market did just get a little more valuable.
It's just not quite time to pull the trigger on a Chromebook yet, I think.
Yeah, it's going to be a while, as we talked about last week.
But as always, when that news lands or anything like it in Linux or the open source world,
we'll tell you about it right here on the show.
Go to LinuxActionNews.com slash subscribe for all the ways to get new episodes.
I'll be in Texas June 8th through the 9th.
If you're in the Austin area, you're going to Texas Linux Fest.
Let me know.
And we have a telegram group for all the folks in the area, JupiterBroadcasting.com slash
Texas.
Yeah, and go to LinuxActionNews.com slash contact for ways to get in touch with us.
And please consider supporting the entire network and everything we do to spread the
word about Linux and open source at Patreon.com slash Jupiter Signal.
We'll be back next Monday with our weekly take on the latest Linux and open source news.
I'm at Chris LAS.
I'm at Joe Ressington.
Thank you for joining us, and we will see you next week.
Have a great day, guys.

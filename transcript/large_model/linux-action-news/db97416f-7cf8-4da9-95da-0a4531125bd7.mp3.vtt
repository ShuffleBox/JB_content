WEBVTT

00:00.000 --> 00:08.700
Hello, and welcome to Linux Action News, episode 165, recorded on November 29th, 2020.

00:08.700 --> 00:09.700
I'm Chris.

00:09.700 --> 00:10.700
And I'm Wes.

00:10.700 --> 00:11.700
Hello, Wes.

00:11.700 --> 00:12.700
Let's do the news.

00:12.700 --> 00:18.080
And let's start with this prolonged AWS outage that took down a big chunk of the internet

00:18.080 --> 00:19.560
and I think a lot of us felt.

00:19.560 --> 00:24.940
Yeah, it was the addition of some new servers to AWS's backend that triggered a cascading

00:24.940 --> 00:29.440
set of errors that caused a whole bunch of problems in their Northern Virginia region.

00:29.440 --> 00:35.760
Yeah, based on the scale of outages and the number of services and applications impacted,

00:35.760 --> 00:40.980
you would may have thought it was all of AWS that was down.

00:40.980 --> 00:46.340
But it was just this one aspect, this area in the Northern Virginia region.

00:46.340 --> 00:50.440
The company was attempting to add a modest amount of new capacity to its Amazon Kinesis

00:50.440 --> 00:56.220
service that customers use to process things like real time data, including video, audio,

00:56.220 --> 00:58.960
or even application logs.

00:58.960 --> 01:04.060
To get over this, well, of course, you gotta go implement the fix and then restart a bunch

01:04.060 --> 01:05.060
of servers.

01:05.060 --> 01:09.340
In Amazon's case, a relatively small piece of their system they described as many thousands

01:09.340 --> 01:10.960
because Amazon.

01:10.960 --> 01:12.760
And that's a small number for them.

01:12.760 --> 01:13.760
Indeed.

01:13.760 --> 01:18.680
Ah, the real problem here is that, well, Amazon uses Amazon services, right?

01:18.680 --> 01:21.940
I mean, if you have AWS, you're going to use AWS.

01:21.940 --> 01:27.160
And so other services relied on Kinesis to get their work done, things like their Cognito

01:27.160 --> 01:28.520
authentication offering.

01:28.520 --> 01:34.520
Oh, also, there was some some kind of shenanigans going on with the status dashboard, which

01:34.520 --> 01:37.180
wasn't really giving us clear information at the time.

01:37.180 --> 01:43.200
And there's various conversations online that seem to be kind of implying its internal politics

01:43.200 --> 01:48.440
that were maybe de-incentivizing employees from properly updating the dashboard.

01:48.440 --> 01:52.580
Yeah, it does seem like there's a pattern sometimes due to technical reasons, like at

01:52.580 --> 01:56.540
least this time sounds like Cognito since they're using Kinesis, well, Cognito is used

01:56.540 --> 01:58.800
to log in and update the dashboard.

01:58.800 --> 02:03.760
So it might be some technical reasons, but in general, I'd say AWS is never quick to

02:03.760 --> 02:04.760
update their status.

02:04.760 --> 02:09.940
I mean, you could see how that if you're a staffer in AWS infrastructure, and you have

02:09.940 --> 02:15.680
to change your dashboard status to offline, that very likely triggers a whole series of

02:15.680 --> 02:20.960
events and processes that put your department and you in particular in the minutia for quite

02:20.960 --> 02:21.960
a while.

02:21.960 --> 02:25.400
And you just want to avoid that, I can imagine you don't need another target on your back,

02:25.400 --> 02:27.160
even if it's the right thing to do.

02:27.160 --> 02:28.160
Yeah.

02:28.160 --> 02:34.080
This also, every time this happens, it's like this huge deal, like, oh, my gosh, most of

02:34.080 --> 02:35.080
the web is offline.

02:35.080 --> 02:38.440
And there was one of these articles that we have linked in the show notes that just had

02:38.440 --> 02:42.320
a long litany of apps and services that were offline.

02:42.320 --> 02:46.460
And every time this happens, it seems like it affects us more and more like we never

02:46.460 --> 02:48.880
learned the lessons from the last outage.

02:48.880 --> 02:49.880
Right.

02:49.880 --> 02:53.900
I mean, we're not we're still not relying on less cloud services, right?

02:53.900 --> 03:01.200
One of the services and companies that was really affected badly is those Roomba vacuums

03:01.200 --> 03:05.560
that the whole service and the management, all of it goes through that region.

03:05.560 --> 03:09.400
And so you have people tweeting that they literally couldn't vacuum their house because

03:09.400 --> 03:10.520
AWS was down.

03:10.520 --> 03:13.520
That's 2020 for you.

03:13.520 --> 03:19.160
I also admit it affected me not only some of the services I use, but I will shamefully

03:19.160 --> 03:25.760
admit to you right here that I rely on the echo here in the studio for the Amazon Guard

03:25.760 --> 03:26.760
service.

03:26.760 --> 03:27.760
Are you familiar with this?

03:27.760 --> 03:28.760
Oh, yeah.

03:28.760 --> 03:29.760
They're a little security offering, right?

03:29.760 --> 03:30.760
Yeah.

03:30.760 --> 03:34.440
It turns each echo into like a listening station that listens for glass breaking or doors opening

03:34.440 --> 03:38.880
or people talking or smoke detectors or CO2 alarms going off.

03:38.880 --> 03:40.880
And if they go off, it will alert you.

03:40.880 --> 03:43.560
But additionally, you can build routines and automations around that.

03:43.560 --> 03:48.640
So when I arrive at the studio and I tell the echo that I'm home, it turns on a series

03:48.640 --> 03:49.640
of lights.

03:49.640 --> 03:53.360
It turns off all of the cameras and it stops the listening.

03:53.360 --> 03:56.920
And when I'm leaving, I tell it that and it resumes all of those functions.

03:56.920 --> 04:01.680
And I like that because when I'm gone or especially when I'm traveling, there can be no one at

04:01.680 --> 04:02.680
the studio for days.

04:02.680 --> 04:04.160
And so I like to keep an eye on how things are going.

04:04.160 --> 04:05.160
Nice to have a, yeah, right.

04:05.160 --> 04:11.380
And this guard is just kind of like an extra layer of nice to know supplemental security.

04:11.380 --> 04:14.420
It's not like what I rely on, but it's just nice to have that monitoring.

04:14.420 --> 04:19.640
When I arrived at the studio Wednesday morning and I invoked the echo to turn off the guarding

04:19.640 --> 04:22.800
service and it waits and it waits.

04:22.800 --> 04:30.600
And then I get this hilarious air in retrospect that says, sorry, I can't stop guarding.

04:30.600 --> 04:35.560
And I look around and all of the, they have these, they have like this sentry flashing

04:35.560 --> 04:38.800
light ring on them when they're monitoring the house.

04:38.800 --> 04:43.960
And so they have like this Cylon ring that goes around and around.

04:43.960 --> 04:45.720
And I look around and they're still doing it.

04:45.720 --> 04:46.720
And they were doing it all day.

04:46.720 --> 04:47.720
I couldn't get them to stop.

04:47.720 --> 04:50.140
And the problem is some events trigger alarms.

04:50.140 --> 04:53.960
So if you start speaking, you don't know if it's going to suddenly turn back on and start.

04:53.960 --> 04:57.600
And occasionally I do speak in the studio, so you start speaking and it detects speaking.

04:57.600 --> 05:03.300
So then it sets off the alarm, but then you can't, you can't tell it to stop because the,

05:03.300 --> 05:04.300
the data center was down.

05:04.300 --> 05:06.020
Plus you can't tell it to stop recording you.

05:06.020 --> 05:09.440
You can't, I mean, it's a good thing this thing isn't the one opening the door lock

05:09.440 --> 05:10.440
for you.

05:10.440 --> 05:11.440
Right.

05:11.440 --> 05:12.440
Right.

05:12.440 --> 05:14.840
So it affected them for a huge portion of the day.

05:14.840 --> 05:19.120
It, I thought within, you know, when it first happened with, Oh, I'll try again in 10 minutes.

05:19.120 --> 05:21.880
And then when that didn't work, I thought, well, it'll be working within an hour.

05:21.880 --> 05:23.480
And then when that didn't work, I thought, well, what am I going to do?

05:23.480 --> 05:26.520
I had to unplug one of them.

05:26.520 --> 05:31.120
Do we just have to accept maybe at this point that that's the level of reliability we're

05:31.120 --> 05:32.120
okay with?

05:32.120 --> 05:33.120
Like we all make a fuss about it.

05:33.120 --> 05:34.120
We don't like it.

05:34.120 --> 05:38.080
Obviously it's kind of embarrassing for Amazon when this happens, but it both doesn't happen

05:38.080 --> 05:40.520
that often and happens with some regularity.

05:40.520 --> 05:45.760
So we know that it happens and we're still taking the design route of designing, assuming

05:45.760 --> 05:50.200
we will basically have an always on connection to the cloud and we're still buying the products

05:50.200 --> 05:51.200
based on those things.

05:51.200 --> 05:52.200
Right.

05:52.200 --> 05:56.120
And like in my case, I don't actually seriously consider that a security system, but it's

05:56.120 --> 05:57.720
a nice to have addition.

05:57.720 --> 06:01.420
And because of this somewhat failure rate and the one I just experienced, I'll never

06:01.420 --> 06:04.160
rely on it as my only security system.

06:04.160 --> 06:06.560
It's just never, I'm never going to take it that seriously.

06:06.560 --> 06:12.600
And I think there is that calculus when you, like even for JB as a business, if we're going

06:12.600 --> 06:17.100
to host a service, it will occasionally those services may have outages and I have to weigh

06:17.100 --> 06:22.360
that outage against, well, what if I was running it myself and would I be, would I be just

06:22.360 --> 06:23.360
as reliable?

06:23.360 --> 06:27.320
Would I have, would I struggle during updates to actually even achieve their uptime and

06:27.320 --> 06:28.840
what, where do I land on that math?

06:28.840 --> 06:32.000
And I think we all have to kind of make that judgment.

06:32.000 --> 06:35.800
But you have to figure like for companies like Roomba and all the other services, Roomba

06:35.800 --> 06:38.960
was kind of the joke example, but all the other services that were down, including some

06:38.960 --> 06:43.640
banking infrastructure, it's a pretty significant risk.

06:43.640 --> 06:49.480
And maybe it, maybe it will lead to a hybrid cloud future because the way the obvious solution

06:49.480 --> 06:52.040
here is to have some redundant hosting.

06:52.040 --> 06:57.960
Like I joked on our pre-show discussion, but if AWS was hosting their status dashboard

06:57.960 --> 07:00.440
on say Linode, they could have at least updated.

07:00.440 --> 07:06.880
And there is some sound reasoning to use multiple providers or to mix self-hosting with cloud

07:06.880 --> 07:07.880
hosting.

07:07.880 --> 07:13.820
And I think if you, if reliability and control are high priorities, you've got to make a,

07:13.820 --> 07:15.000
you've got to make a decision there.

07:15.000 --> 07:19.020
And I think you would think every time there's something like this happens, it would reinforce

07:19.020 --> 07:20.020
that.

07:20.020 --> 07:22.940
But as I said at the beginning of this, it clearly hasn't more things were affected than

07:22.940 --> 07:24.640
ever before this time.

07:24.640 --> 07:29.080
And maybe some services like Netflix learned their lesson, but a whole bunch of new services

07:29.080 --> 07:31.160
and applications came online that didn't learn that lesson.

07:31.160 --> 07:33.080
They have to figure it out all over again.

07:33.080 --> 07:34.080
Yeah.

07:34.080 --> 07:37.680
That's, that's a bit unfortunate because there is such a better way to design this.

07:37.680 --> 07:43.200
I mean, the nature of the internet and TCP IP actually really, really plays to the strength

07:43.200 --> 07:44.760
of reliability and reroutability.

07:44.760 --> 07:50.900
But when you silo up everything like this, it just sort of negates some of those inherent

07:50.900 --> 07:52.860
benefits of the way the internet is architected.

07:52.860 --> 07:54.520
You're kind of giving some of those benefits up.

07:54.520 --> 07:58.000
Well, I guess we'll just be here to report on the next time it happens.

07:58.000 --> 08:04.160
Well, speaking of the cloud, Canonical has published a series of LTS Docker images.

08:04.160 --> 08:09.800
They're calling it a portfolio of curated secure Ubuntu based container applications

08:09.800 --> 08:13.160
on, well, what else, Docker Hub.

08:13.160 --> 08:18.280
And they come with up to 10 years of extended security support from Canonical.

08:18.280 --> 08:22.520
I guess it might be worth mentioning, not necessarily all of these are free though.

08:22.520 --> 08:27.320
Yeah, there will be several images available from this new set that will be free, at least

08:27.320 --> 08:31.340
during the normal sort of five year standard security maintenance period.

08:31.340 --> 08:37.480
But there will also be images available exclusively to paying Canonical customers, but still served

08:37.480 --> 08:38.480
through Docker Hub.

08:38.480 --> 08:39.560
That's interesting.

08:39.560 --> 08:43.560
It's like you get it and then license it kind of model.

08:43.560 --> 08:45.920
And could be a good revenue source for Canonical.

08:45.920 --> 08:49.560
There's also a bit of a nice get for them in this deal.

08:49.560 --> 08:53.080
They essentially now own the LTS namespace on Docker Hub.

08:53.080 --> 08:54.080
Yeah.

08:54.080 --> 08:58.520
You know, you want to go just pull the latest developer focused Ubuntu release on Docker,

08:58.520 --> 09:01.880
Docker run Ubuntu slash Redis, say you're running a Redis container.

09:01.880 --> 09:07.080
Well, if you want the LTS version of that, once these are out and available, that's just

09:07.080 --> 09:09.360
going to be LTS slash Redis.

09:09.360 --> 09:14.160
And hey, that's a pretty prominent namespace, at least for the developer crowd.

09:14.160 --> 09:15.160
Yeah, really.

09:15.160 --> 09:17.680
And who isn't going to want to build off the LTS if it's that easy?

09:17.680 --> 09:22.000
And then also a bit of a note about rate limiting, which we'd covered previously on the show.

09:22.000 --> 09:26.800
Yeah, you know, in the start of November, Docker fully implemented the rate limiting

09:26.800 --> 09:30.960
that they'd been talking about doing before where, you know, if you're an anonymous user,

09:30.960 --> 09:33.380
there will now be rate limits.

09:33.380 --> 09:36.040
These images, well, they'll all be excluded from that.

09:36.040 --> 09:40.080
I guess Canonical is footing the bill for this one.

09:40.080 --> 09:41.560
lino.com slash land.

09:41.560 --> 09:45.960
Go there to get a $100 60 day credit towards your new account.

09:45.960 --> 09:51.280
Simplify your cloud infrastructure with our hosting provider, lino.com slash land.

09:51.280 --> 09:57.640
We're the largest independent cloud for anyone, developers, new users, or seasoned admins.

09:57.640 --> 10:03.480
They started in 2003 as one of the first companies in cloud computing, three years before AWS.

10:03.480 --> 10:04.480
That's right.

10:04.480 --> 10:05.480
That's right.

10:05.480 --> 10:07.640
Because they loved Linux and they saw where it was going.

10:07.640 --> 10:11.400
And as they grew as a company, they began to support more and more open source initiatives

10:11.400 --> 10:12.960
and that put them on my radar.

10:12.960 --> 10:16.400
So a couple of years ago, I had an opportunity to try out Linode.

10:16.400 --> 10:19.680
I started setting up my infrastructure there and I got hooked.

10:19.680 --> 10:24.920
And now that's where we build out all of our business infrastructure and my personal infrastructure.

10:24.920 --> 10:28.920
And with 11 data centers worldwide, you're going to find just the right spot to deploy

10:28.920 --> 10:31.120
for you or your clients.

10:31.120 --> 10:34.880
And you'll rest easily knowing that Linode's built in monitoring tools have you covered.

10:34.880 --> 10:36.680
You'll get email alerts if something goes wrong.

10:36.680 --> 10:39.880
There's dashboards that give you metrics you can check to see what's been going on with

10:39.880 --> 10:40.880
performance.

10:40.880 --> 10:43.400
Oh, and speaking of their dashboard, this is pretty nice.

10:43.400 --> 10:47.800
They have a cloud firewall that's in beta and they're looking for users to test and

10:47.800 --> 10:50.240
provide feedback on the cloud firewall.

10:50.240 --> 10:53.480
So if you're already a Linode customer, check it out.

10:53.480 --> 10:56.040
It's active in the Sydney and Mumbai data centers.

10:56.040 --> 10:58.640
So perhaps you could spin up a Linode and try it.

10:58.640 --> 11:02.000
Their cloud firewall works on an allow list with an implicit deny rule.

11:02.000 --> 11:06.220
So when it's enabled, it blocks all the inbound traffic by default.

11:06.220 --> 11:11.260
Only network traffic that meets the parameters of your configuration will pass through.

11:11.260 --> 11:12.960
You could also do outbound rules if you'd like.

11:12.960 --> 11:16.000
So go bang on a form, let it know.

11:16.000 --> 11:18.880
Like it started by going to linode.com slash land.

11:18.880 --> 11:25.080
Get that $100 60 day credit, $100 is going to get you really far because you'd be surprised

11:25.080 --> 11:28.080
how much you can do with just a $5 a month Linode.

11:28.080 --> 11:29.160
You know what I like about it?

11:29.160 --> 11:33.000
They've got backups available if you need that because I don't know that I trust you

11:33.000 --> 11:34.240
to always do the backups.

11:34.240 --> 11:35.240
I don't have to.

11:35.240 --> 11:36.240
I trust Linode.

11:36.240 --> 11:37.240
I know.

11:37.240 --> 11:40.840
And that is trusted as well placed because those backups have come in handy.

11:40.840 --> 11:45.520
And unlike entry level service providers, Linode doesn't try to lock you into the backend

11:45.520 --> 11:48.800
where you can't get access to certain things that you need to get the job done.

11:48.800 --> 11:54.240
I have re-imaged a box from the ground up using their instructions and they let you

11:54.240 --> 11:58.080
get in there, give you full backend access to customize and control your server to fit

11:58.080 --> 11:59.080
your needs.

11:59.080 --> 12:01.400
And of course they integrate with infrastructure management tools.

12:01.400 --> 12:06.600
So if you do infrastructure by code, they've got you covered and their S3 compatible object

12:06.600 --> 12:12.640
storage is fast and super convenient, especially when you use their command line tools to upload

12:12.640 --> 12:13.680
and manage files.

12:13.680 --> 12:15.120
It's really great.

12:15.120 --> 12:16.120
That's the whole package.

12:16.120 --> 12:18.940
So try it out at linode.com slash land.

12:18.940 --> 12:21.600
See why that's where we build all of our infrastructure now.

12:21.600 --> 12:27.400
Linode.com slash land and a big thanks to Linode for sponsoring Linux Action News.

12:27.400 --> 12:31.340
There's an exciting new mail client coming to the Linux desktop.

12:31.340 --> 12:34.760
One catch though, it's actually the Vivaldi web browser.

12:34.760 --> 12:37.960
Well, okay, exciting is one way to put it.

12:37.960 --> 12:42.040
Potential, I would say maybe, I did give it a go.

12:42.040 --> 12:47.400
The Vivaldi browser has been promising a mail client since like 2015.

12:47.400 --> 12:52.600
The founder came from Opera and was a big fan of their whole integrated mail client

12:52.600 --> 12:57.720
and they since 2015 said it would be a robust, efficient, lightweight and good looking email

12:57.720 --> 12:58.720
client.

12:58.720 --> 13:03.000
Back then they were calling it M3 and it would be integrated into Vivaldi.

13:03.000 --> 13:06.920
Well, we waited patiently and it has arrived, Mr. Payne.

13:06.920 --> 13:12.280
Yeah, the name M3 may be a tribute to the long abandoned Opera mail client known as

13:12.280 --> 13:15.640
M2 and this is a technical preview.

13:15.640 --> 13:21.760
It's not a separate standalone application, but it's built right into Vivaldi itself.

13:21.760 --> 13:25.080
Don't make the same mistake I did though, you can't just go download the regular version

13:25.080 --> 13:26.200
of Vivaldi.

13:26.200 --> 13:32.040
Getting it working requires downloading a specific snapshot version or higher, 2115.4

13:32.040 --> 13:35.120
at least at the time of this article.

13:35.120 --> 13:39.400
Get the browser, then you have to go to Vivaldi colon slash slash experiments, type that in

13:39.400 --> 13:44.740
a little magic Vivaldi URL in the URL bar, there you have a toggle to enable the new

13:44.740 --> 13:45.740
web client.

13:45.740 --> 13:51.000
That last step was the bit that got me for a little bit because I went in, so when you're

13:51.000 --> 13:54.540
reading on Vivaldi's website, they have a download link that just automatically gets

13:54.540 --> 13:58.300
placed at the bottom of your web browser, often like cookie warnings, only there it's

13:58.300 --> 14:02.080
download Vivaldi and I thought, well, this must be the release they're talking about.

14:02.080 --> 14:03.680
Yes, I did the same.

14:03.680 --> 14:07.320
No, no, that's the stable version, you want the snapshot, so I went and got that and then

14:07.320 --> 14:12.400
I turned on the Vivaldi experiments and mail and it's also an RSS reader.

14:12.400 --> 14:18.160
It's a feed reader too, it's not just email and it's a straight up basic IMAP pop three

14:18.160 --> 14:23.720
client right now, but with some serious potential like filters, specific support for being on

14:23.720 --> 14:28.220
mailing lists and managing some of the mail you get as a mailing list subscriber.

14:28.220 --> 14:34.820
It has things that are kind of table stakes for a classic IMAP email client and it looks

14:34.820 --> 14:35.880
all right.

14:35.880 --> 14:43.620
The problem is, is there a bit of a situation where Google has in an effect limited the

14:43.620 --> 14:50.000
amount of people that can log in using Vivaldi Mail to Google services and so not only does

14:50.000 --> 14:54.400
the Vivaldi Mail client itself not support Google apps with a custom domain very well,

14:54.400 --> 14:59.920
it just fails at auto detection on that completely, but when you plug in an at Gmail address,

14:59.920 --> 15:04.280
you can't log in and go through the setup because Google has blocked account sign-ins

15:04.280 --> 15:08.840
from that and the request has been pending from Vivaldi for like something like nine

15:08.840 --> 15:13.140
months and Google just hasn't addressed it and so now you get greeted with this rather

15:13.140 --> 15:15.000
nasty error message.

15:15.000 --> 15:19.120
So when you get the typical Google sign on screen, but then after you give it your password,

15:19.120 --> 15:22.800
after you do your two factor, you go through the whole rigamarole, you get an error message

15:22.800 --> 15:26.960
screen that says, sign in with Google is temporarily disabled for this app.

15:26.960 --> 15:31.320
This app has not been verified yet by Google in order to use Google sign-in.

15:31.320 --> 15:32.320
Thanks.

15:32.320 --> 15:35.440
I mean, that's just got to hurt any potential adoption.

15:35.440 --> 15:39.280
I mean, I have other accounts than Gmail accounts, but I also have some Gmail accounts I need

15:39.280 --> 15:40.280
to check.

15:40.280 --> 15:41.280
Yeah.

15:41.280 --> 15:42.280
I mean, Gmail is just a monster these days.

15:42.280 --> 15:46.200
If you're on Fastmail or another IMAP provider, it's going to work great.

15:46.200 --> 15:53.520
It's going to be no problem and you will get a really table stakes email client.

15:53.520 --> 15:58.080
There's just no way in, there's no reason for someone like me to switch right now.

15:58.080 --> 16:05.480
My daily email drivers are Geary, Thunderbird and web Gmail and it just doesn't beat those

16:05.480 --> 16:12.480
and Thunderbird as of release 78 no longer requires an extension to do GPG encryption

16:12.480 --> 16:14.640
and that's a massive feature for me.

16:14.640 --> 16:19.560
So Thunderbird is looking more attractive than ever and it's beyond just a table stakes.

16:19.560 --> 16:20.560
It's advanced.

16:20.560 --> 16:21.560
Oh yeah.

16:21.560 --> 16:22.560
I mean, yeah, certainly.

16:22.560 --> 16:30.180
And then for just easy, super simple, quick and manages a giant inbox, Geary continues

16:30.180 --> 16:32.480
to be a real champ for me.

16:32.480 --> 16:37.600
And the wonderful thing about Geary is when you configure your Google account in GNOME

16:37.600 --> 16:40.600
online accounts, it automatically sets Geary up.

16:40.600 --> 16:41.600
Just picks that up, right?

16:41.600 --> 16:44.840
So you just launched Geary and it's already configured and it's already downloading your

16:44.840 --> 16:45.840
email.

16:45.840 --> 16:46.840
You've never had to do a thing.

16:46.840 --> 16:47.840
It's so beautiful, Wes.

16:47.840 --> 16:48.840
It's so beautiful.

16:48.840 --> 16:51.040
I don't think we're supposed to have things like that on the Linux desktop.

16:51.040 --> 16:55.960
So then you go over to Vivaldi Mail to no fault of their own, but because of the way

16:55.960 --> 17:01.000
the Google fortress works, you get like the exact opposite experience where you go through

17:01.000 --> 17:04.760
all the rigmarole and then it completely fails and then the developers, because they have

17:04.760 --> 17:07.700
no choice, they're like shrug, nothing we can do, hope it changes.

17:07.700 --> 17:11.800
But if you use regular IMAP, you're good, which is kind of a rough thing when you're

17:11.800 --> 17:13.400
launching your technical preview.

17:13.400 --> 17:15.360
But at the same time, what are they supposed to do?

17:15.360 --> 17:16.360
Sit around.

17:16.360 --> 17:17.360
It works.

17:17.360 --> 17:18.360
The technical part works.

17:18.360 --> 17:19.360
Yeah.

17:19.360 --> 17:21.800
And until they ship, it probably won't put enough pressure on Google to fix it.

17:21.800 --> 17:24.420
But I did use the browser again for a bit.

17:24.420 --> 17:29.400
And if you haven't given the Vivaldi browser a go on Linux and you've been using the web

17:29.400 --> 17:32.240
for a few years, it's pretty fun.

17:32.240 --> 17:34.400
It is a power user's web browser.

17:34.400 --> 17:40.200
From everything from mouse gesture support to a bunch of really fun, nitty, gritty kind

17:40.200 --> 17:43.680
of support for things that people that have been on the web forever would love.

17:43.680 --> 17:47.120
But then additionally, it has nice features like notes and all of that.

17:47.120 --> 17:50.380
It feels like a lot to me.

17:50.380 --> 17:55.740
It is a complicated, packed application, but it still often remains snappy and quick.

17:55.740 --> 17:58.160
So it's a pleasant browsing experience.

17:58.160 --> 18:02.640
Also it's nice to see that they've got Linux support for both ARM32 and ARM64.

18:02.640 --> 18:04.200
So hey, run it over there too.

18:04.200 --> 18:08.800
Well actually, I think it's worth just underscoring is one of the things that has impressed me

18:08.800 --> 18:13.880
about Vivaldi is they have been really dedicated to supporting Linux and targeting advanced

18:13.880 --> 18:17.720
features in Linux and supporting GPU acceleration.

18:17.720 --> 18:23.480
They have released this snapshot for multiple Linux distros with multiple build ARM32 64

18:23.480 --> 18:24.480
bit.

18:24.480 --> 18:26.520
It is first class Linux support.

18:26.520 --> 18:29.960
And there really is space for a good mail client.

18:29.960 --> 18:34.280
And if the technical preview is looking this solid, if you can already say it's a table

18:34.280 --> 18:39.600
stakes email client, a technical preview, then what's version two going to look like?

18:39.600 --> 18:41.360
And what about version three?

18:41.360 --> 18:44.100
And it's going to get more and more compelling, no doubt about it.

18:44.100 --> 18:48.000
And if it's a passion of the founder, then it's likely going to get a lot of investment

18:48.000 --> 18:49.260
as a project.

18:49.260 --> 18:54.000
And so within a year or two, we may have an extremely competent mail client on Linux

18:54.000 --> 18:55.880
through the Vivaldi browser.

18:55.880 --> 19:01.300
And it harkens me back to like the Netscape communicator era where everything was bundled

19:01.300 --> 19:02.300
like that.

19:02.300 --> 19:03.300
Right.

19:03.300 --> 19:04.560
This is just your portal to the wider internet.

19:04.560 --> 19:05.560
Do you remember that?

19:05.560 --> 19:06.560
I mean, that's how it started.

19:06.560 --> 19:11.760
That's how it was for a long period of time as network or I'm sorry, Netscape communicator

19:11.760 --> 19:12.940
came with a feed reader.

19:12.940 --> 19:15.620
It came with an email client and it came with a web browser.

19:15.620 --> 19:18.160
And that was the communicator suite.

19:18.160 --> 19:22.200
And for a while, Internet Explorer was linked very closely to Outlook Express.

19:22.200 --> 19:24.400
They were kind of a pair.

19:24.400 --> 19:28.080
And then as the web browser matured, we kind of lost that model.

19:28.080 --> 19:33.620
And maybe some of the anti-compete stuff around Internet Explorer maybe pushed that too.

19:33.620 --> 19:39.060
And now here we are looking into 2021 and 2022 thinking maybe one of the best ways to

19:39.060 --> 19:42.120
deliver a brand new email client to Linux is through a web browser.

19:42.120 --> 19:45.580
Well just skip the step where you package it as a separate electron application and

19:45.580 --> 19:46.580
build it right in.

19:46.580 --> 19:51.720
I mean, it clearly is using a lot of the same features and technologies web browser.

19:51.720 --> 19:55.000
And the feed reader is not a table stakes feed reader.

19:55.000 --> 20:02.520
It is a very basic, minimal feed reader that's obviously using a lot of the same inbox tech.

20:02.520 --> 20:06.500
And it's not even really adequate.

20:06.500 --> 20:10.060
But if you have very minimal feed needs, only one or two or three RSS feeds and you only

20:10.060 --> 20:14.640
want to use one application to do it all, it would do that job.

20:14.640 --> 20:19.760
That breaking change coming to SystemD that we warned you about two episodes ago, well,

20:19.760 --> 20:22.860
it's been released with SystemD 247.

20:22.860 --> 20:27.120
This is really only going to impact you if you have custom Udev rules.

20:27.120 --> 20:32.920
Your distribution of choice is likely going to fix this before it ever lands on your box.

20:32.920 --> 20:37.060
But if you have made some customized changes to Udev, you may want to look into that.

20:37.060 --> 20:41.500
But with the bad in 247, there's also quite a bit of good.

20:41.500 --> 20:45.740
We'll link to the release notes in our show notes because there's a ton in there.

20:45.740 --> 20:48.980
But a couple that jumped out at us we thought would be worth talking about.

20:48.980 --> 20:53.600
And one of them is SystemD OOMD.

20:53.600 --> 20:58.660
This is a new service that's added for monitoring resource allocation.

20:58.660 --> 21:06.860
And OOMD, which stands for out of memory daemon, that will kill processes when memory and swap

21:06.860 --> 21:11.860
pressure is above defined limits where your machine starts to really feel like trash.

21:11.860 --> 21:14.940
Now it is an experimental feature right now, so don't worry.

21:14.940 --> 21:18.300
It's not going to just start killing processes on your box.

21:18.300 --> 21:21.100
It's not enabled unless you're in developer mode, and it's going to be quite a bit before

21:21.100 --> 21:22.200
everything's refined.

21:22.200 --> 21:25.840
But we have seen some distributions play with these, and now we see something happening

21:25.840 --> 21:28.080
at the SystemD level, which we expected.

21:28.080 --> 21:32.300
But it's nice to see it arriving, and it seems like a lot of thought was put into it.

21:32.300 --> 21:36.360
It's neat, too, because it's using the PSI or pressure stall information, which is like

21:36.360 --> 21:41.780
a new heuristic metric that Facebook got added to the kernel to try to figure out these out-of-memory

21:41.780 --> 21:42.780
situations.

21:42.780 --> 21:44.980
And look at all the fruit that that's been born, right?

21:44.980 --> 21:48.780
Yeah, it's also made me start watching my machine memory more, just as we've talked

21:48.780 --> 21:49.780
about these stories.

21:49.780 --> 21:52.580
I've been kind of curious, how much memory do I actually use?

21:52.580 --> 21:54.700
But there's a couple other nice things landing, too.

21:54.700 --> 21:58.220
Yeah, this is pretty small, but I thought it was a nice sort of set the mood for some

21:58.220 --> 22:03.580
of the work going on here, which is that SystemD has done some work to limit the runtime dependencies

22:03.580 --> 22:04.900
and how you can bring those in.

22:04.900 --> 22:10.660
So some stuff for working with QR codes or for setting up encrypted disks, those have

22:10.660 --> 22:13.060
all been changed to rely on DLOpen.

22:13.060 --> 22:17.660
And so if that's installed on the system, at runtime, SystemD will try to open that

22:17.660 --> 22:19.900
dependency, load the code, and use that library.

22:19.900 --> 22:22.260
But if not, it just fails gracefully.

22:22.260 --> 22:26.300
And really, this is supposed to be useful for general purpose distributions so that

22:26.300 --> 22:27.940
you can pull in fewer dependencies.

22:27.940 --> 22:31.540
Like if you're never going to use those features, before this, you still had to bring those

22:31.540 --> 22:35.040
in even at runtime, not just for building it.

22:35.040 --> 22:37.880
After this, well, if you're not going to use them, you don't ever have to install them.

22:37.880 --> 22:44.700
Are we starting to see a bit of modularizing coming to SystemD, where everybody kind of...

22:44.700 --> 22:48.660
I think the top complaint for SystemD is this giant monolith that you put on my box that's

22:48.660 --> 22:52.860
responsible for all these things, but this almost sounds like they're trying to break

22:52.860 --> 22:55.300
it up a little bit and modularize it.

22:55.300 --> 22:56.300
Is that the goal?

22:56.300 --> 22:59.900
Well, I think at least just maybe refining some of those boundaries, right?

22:59.900 --> 23:04.500
That you can determine a set of things that you really need for essential behavior and

23:04.500 --> 23:09.000
features and some things that are nice to have, maybe essential for some activities,

23:09.000 --> 23:11.580
but don't necessarily need to be loaded by the core.

23:11.580 --> 23:14.900
And this is refining those boundaries.

23:14.900 --> 23:16.260
Linux.ting.com.

23:16.260 --> 23:20.660
There has never been a better time to try Ting Mobile.

23:20.660 --> 23:22.560
Everything has just gotten better about Ting.

23:22.560 --> 23:24.940
It's the next generation of Ting Mobile.

23:24.940 --> 23:28.260
So if you've been on the fence, if you've been thinking it's time to upgrade your mobile

23:28.260 --> 23:30.080
game, we'll try them out.

23:30.080 --> 23:31.380
You will be impressed.

23:31.380 --> 23:37.820
Get talk and text for just $10 a month and then data plans starting at $15 and unlimited

23:37.820 --> 23:39.900
from $45 a month.

23:39.900 --> 23:44.160
So if you're two gigs or you need 20 gigs or whatever it is, there's now a perfect Ting

23:44.160 --> 23:46.140
plan for you and your family.

23:46.140 --> 23:47.920
And no need to worry.

23:47.920 --> 23:51.260
The only thing that's changed is a lower monthly phone bill.

23:51.260 --> 23:57.020
You still get access to Ting's award-winning customer service with nationwide LTE and 5G

23:57.020 --> 24:00.100
coverage, plus no contracts ever.

24:00.100 --> 24:02.140
And you guys know that I love that.

24:02.140 --> 24:06.300
And Ting Mobile customers can now choose from three different plans based on their data

24:06.300 --> 24:07.300
needs.

24:07.300 --> 24:09.480
And it's so simple to switch to Ting.

24:09.480 --> 24:11.460
It's such an easy process.

24:11.460 --> 24:13.980
And then you start saving right away.

24:13.980 --> 24:16.840
And pretty much any phone is going to work on Ting now.

24:16.840 --> 24:18.520
You just go to linux.ting.com.

24:18.520 --> 24:19.700
You check your current phone.

24:19.700 --> 24:20.700
You create an account.

24:20.700 --> 24:22.020
You pick a plan that's right for you.

24:22.020 --> 24:25.480
And when you go to linux.ting.com, you're going to get $25 to work with.

24:25.480 --> 24:28.900
And if everything works out and your current phone works, Ting will just send you a SIM

24:28.900 --> 24:29.900
card.

24:29.900 --> 24:33.420
You can go in in minutes, or you can look at some brand new phones, some really good

24:33.420 --> 24:36.060
deals on phones from Ting directly, too.

24:36.060 --> 24:38.980
Cutting your phone bill in half has never been easier with Ting Mobile.

24:38.980 --> 24:41.200
They got brand new plans, and they really rock.

24:41.200 --> 24:43.040
It's the next generation of Ting Mobile.

24:43.040 --> 24:50.300
It's here, and you should go see how much you can save and get $25 off by going to linux.ting.com.

24:50.300 --> 24:55.100
There has never been a better time to be a Ting customer or try out Ting.

24:55.100 --> 24:56.940
Thanks to Ting for sponsoring Linux Action News.

24:56.940 --> 25:02.160
And thanks to everybody who visits linux.ting.com.

25:02.160 --> 25:07.900
Just a quick note that Paragon, the authors of the original closed source NTFS Fuse driver,

25:07.900 --> 25:12.580
have been working on an open source read write driver for the Linux kernel.

25:12.580 --> 25:17.020
That's now in its 13th iteration as a patch set, and hopes are looking up that it might

25:17.020 --> 25:18.960
actually get merged.

25:18.960 --> 25:24.860
What I like about this story is it is a great demonstration of how a company can start to

25:24.860 --> 25:30.020
work to try to gain the trust of the kernel team and eventually reach inclusion in the

25:30.020 --> 25:31.020
Linux kernel.

25:31.020 --> 25:34.480
We don't know if that's going to happen yet, but the chances are looking pretty good because

25:34.480 --> 25:39.060
they've really been working on this thing, and they've also committed to long term support

25:39.060 --> 25:41.260
of the code base and feature improvements.

25:41.260 --> 25:47.800
And they already have a roadmap of features they want, which means we are going to potentially

25:47.800 --> 25:54.180
have a future where we have excellent read write NTFS support on Linux to the point where

25:54.180 --> 25:58.980
you could have slash bin and program files on the same disk.

25:58.980 --> 25:59.980
The same partition.

25:59.980 --> 26:00.980
Wow.

26:00.980 --> 26:01.980
All right.

26:01.980 --> 26:02.980
NTFS on route.

26:02.980 --> 26:03.980
Here we come.

26:03.980 --> 26:08.500
While we are talking about Microsoft, it appears they are working on a software solution that

26:08.500 --> 26:14.080
would allow Android app developers to package up whole cloth their Android app, ship it

26:14.080 --> 26:19.260
on the Windows Store, and then allow Windows 10 desktop users to run it.

26:19.260 --> 26:21.460
This is ringing awful familiar, Wes.

26:21.460 --> 26:27.180
The new initiative is called Project Latte, and it appears to be in the works right now.

26:27.180 --> 26:30.020
And I think it's utilizing some interesting WSL technology.

26:30.020 --> 26:34.640
Yeah, it's kind of fascinating because while Project Latte uses some tech invented for

26:34.640 --> 26:39.260
the second generation of the Windows subsystem for Linux, the Windows subsystem for Linux

26:39.260 --> 26:45.060
itself actually got its start in an unreleased project known as Project Astoria, which was

26:45.060 --> 26:49.840
aiming to bring Android applications to run on Windows 10 mobile way back in the day.

26:49.840 --> 26:51.900
So it's come full circle.

26:51.900 --> 26:52.900
It really has.

26:52.900 --> 26:53.900
That's funny.

26:53.900 --> 26:57.540
But of course, the biggest obstacle here with running Android apps would be the graphical

26:57.540 --> 27:01.280
elements and getting those into the Windows environment.

27:01.280 --> 27:06.340
But in WSL 2, Microsoft begun working on a project that's named WSL G.

27:06.340 --> 27:07.340
Right.

27:07.340 --> 27:08.340
Are you following me so far?

27:08.340 --> 27:09.340
WSL?

27:09.340 --> 27:10.340
Yeah, got it.

27:10.340 --> 27:15.140
It's a lot of WSL, but it stands for WSL Graphics Architecture, and it utilizes a built-in

27:15.140 --> 27:17.980
Wayland display server to run Linux GUI apps.

27:17.980 --> 27:21.900
I have a bit of audio here from one of the developers of Microsoft, Steve Provenost,

27:21.900 --> 27:24.100
and he discusses a little bit of how it works.

27:24.100 --> 27:29.500
In a nutshell, what we're doing is we're taking Westin, we're taking this RDP backend, and

27:29.500 --> 27:34.300
we're extending it to teach it how to basically do remote application.

27:34.300 --> 27:39.440
So instead of remoting the desktop, we remote individual window, and then we can take those

27:39.440 --> 27:42.980
window and integrate them with the rest of the Windows desktop.

27:42.980 --> 27:48.060
And some of the architectural changes they made to WSL in WSL 2 allow for this thing

27:48.060 --> 27:51.300
that they call a system distribution.

27:51.300 --> 27:58.140
And we're introducing this concept of the system distro, which is essentially a distro

27:58.140 --> 28:01.540
that we package together that has all the components we need.

28:01.540 --> 28:07.260
So it has Westin and X-Wayland and Pulse Audio, and it has all the dependencies that it needs,

28:07.260 --> 28:11.380
but it runs kind of isolated from the user distro.

28:11.380 --> 28:15.660
And we just project like the virus socket and environment variable, et cetera, the user

28:15.660 --> 28:18.820
distro needs in order to connect to it.

28:18.820 --> 28:22.540
It's sort of like a container, except that we don't actually use a kind of container

28:22.540 --> 28:24.940
like a Docker container or something like this.

28:24.940 --> 28:28.340
We're really running in like an isolated, like mountain bit space.

28:28.340 --> 28:32.300
And this is the tech that allows you to run all kinds of different distros right next

28:32.300 --> 28:35.300
to each other at the same time on the same box.

28:35.300 --> 28:39.140
And you could see how they could extend this to pretty easily run Android if they just

28:39.140 --> 28:42.780
get a supported kernel in there and build the right distro environment.

28:42.780 --> 28:43.980
Very clever.

28:43.980 --> 28:48.460
And this seems to be like another notch in Microsoft's unwillingness to allow Chromebooks

28:48.460 --> 28:49.460
to cede any ground.

28:49.460 --> 28:54.620
You know, if Chromebooks can run Linux apps and run Android apps, then by God, Windows

28:54.620 --> 28:55.620
10 will too.

28:55.620 --> 28:57.180
And it just seems to be this cat and mouse game.

28:57.180 --> 28:58.180
Yeah.

28:58.180 --> 29:01.460
I mean, long gone are the days where you were focused solely on native Windows apps.

29:01.460 --> 29:03.340
Now it's like, okay, we'll take anything.

29:03.340 --> 29:04.580
Just run it on Windows.

29:04.580 --> 29:08.380
Well, you know, we've always seen this just be a smashing success.

29:08.380 --> 29:09.660
These mobile apps on desktop.

29:09.660 --> 29:10.940
So I'm sure it'll be great.

29:10.940 --> 29:15.660
Well, the question is, Chris, would you rather have a virtualized Android app or an Electron

29:15.660 --> 29:16.660
app?

29:16.660 --> 29:17.900
Hmm.

29:17.900 --> 29:20.380
That is a that is a question for the ages, Mr. Payne.

29:20.380 --> 29:21.380
That's what that is.

29:21.380 --> 29:24.880
That's a that's a rock and a hard place right there.

29:24.880 --> 29:27.280
That brings us to the end of today's episode.

29:27.280 --> 29:32.020
Check out LinuxActionNews.com slash subscribe for all the ways to get new episodes.

29:32.020 --> 29:35.700
And LinuxActionNews.com slash contact for all the ways to get in touch.

29:35.700 --> 29:40.860
And if you haven't yet upgraded the ultimate J.B. experience and get the all shows feed.

29:40.860 --> 29:45.640
We'll be back next Monday with our weekly take on the latest Linux and open source news.

29:45.640 --> 29:46.640
Thanks for joining us.

29:46.640 --> 30:05.780
We'll see you next week.


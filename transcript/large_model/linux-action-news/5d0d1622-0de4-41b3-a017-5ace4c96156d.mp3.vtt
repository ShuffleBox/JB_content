WEBVTT

00:00.000 --> 00:10.240
Hello, and welcome to Linux Action News, episode 174, recorded on January 31st, 2021. I'm Chris.

00:10.240 --> 00:11.240
And I'm Wes.

00:11.240 --> 00:13.000
Hello, Wes. Let's do the news.

00:13.000 --> 00:18.560
And we start with Google suspending the Element app from the Play Store, without notice to

00:18.560 --> 00:24.040
the team behind the Matrix chat client. Early on, the Element developers received a generic

00:24.040 --> 00:29.100
update from the Google Play policy team, citing that the app had been removed due to content

00:29.100 --> 00:33.360
which contravenes their terms of use. Not exactly clear.

00:33.360 --> 00:37.480
No. And within a short period of time, the Element developers submitted a detailed appeal

00:37.480 --> 00:43.680
to reiterate that Element is a generic chat app for connecting to a global Matrix communication

00:43.680 --> 00:49.840
network, just as Chrome is a generic web browser for connecting to the web, and Google does

00:49.840 --> 00:55.000
not control the content on the web, Element does not control the content on Matrix. You

00:55.000 --> 00:56.800
think Google might understand that?

00:56.800 --> 00:58.080
You would think.

00:58.080 --> 01:02.720
Back over on their blog, the Element team noted that, to enforce our terms of use on

01:02.720 --> 01:08.680
the Matrix servers we run, as the Element team behind Element, we have a formal trust

01:08.680 --> 01:14.320
and safety team hired full time who are dedicated to investigating and tracking abuse reports.

01:14.320 --> 01:18.940
So I think that means they take these things seriously, even if perhaps they miss some,

01:18.940 --> 01:20.280
as happens time to time.

01:20.280 --> 01:27.120
I think one can't help but take in the context in which this is happening. Applications are

01:27.120 --> 01:32.100
seeing huge growth in this area, ginormous growth right now. And there's also groups

01:32.100 --> 01:38.200
like the Wall Street Bets folks that are moving to platforms that are decentralized, that

01:38.200 --> 01:43.200
have been targeted on platforms like Discord and are moving around. But the user base for

01:43.200 --> 01:48.720
Matrix and Element, a client for Matrix, has grown to include open source projects, nonprofit

01:48.720 --> 01:52.960
groups, even governments. The German and French government authorities currently use Element

01:52.960 --> 01:57.380
to communicate as do parts of the US and UK governments, if you can believe it.

01:57.380 --> 02:01.900
So this impact was felt beyond just the Wall Street Bets folks or a few open source projects.

02:01.900 --> 02:06.360
It was felt pretty significantly. And I can't help but see Google's moves here as a bit

02:06.360 --> 02:12.540
sinister. Not only do they compete in the enterprise chat landscape, so they are essentially

02:12.540 --> 02:17.140
a competitor with Element, which makes this a little precarious, but one can't help but

02:17.140 --> 02:22.520
wonder if maybe the goal here was just a slow adoption of Element a bit. They've had a fivefold

02:22.520 --> 02:29.440
increase in user signups recently. And I recently read about a sysadmin at American Airlines

02:29.440 --> 02:34.240
who was in the process of testing Matrix and Element for internal use at American Airlines.

02:34.240 --> 02:38.880
And as they put it, quote, there are big players with clout that take issue to instability

02:38.880 --> 02:44.840
such as this. He goes on to say, how can I rely on my company using Element when it gets

02:44.840 --> 02:50.100
pulled? Not cool, Google. It creates this doubt around this application and it kind

02:50.100 --> 02:51.100
of creates a label.

02:51.100 --> 02:55.440
Yeah, absolutely. I mean, you just can't imagine this happening with one of the more established

02:55.440 --> 03:00.200
platforms. And that makes it feel like Google didn't really take the time or is acting sort

03:00.200 --> 03:04.800
of ignorantly of what Element and Matrix is, even though, you know, the folks at Google

03:04.800 --> 03:08.960
are highly technical. And I'm sure many of them have a deep understanding of these, which

03:08.960 --> 03:10.680
just adds more confusion.

03:10.680 --> 03:17.360
Yeah, indeed, indeed. And it was sort of this non-communicado situation as well. It happens

03:17.360 --> 03:22.960
on a Friday and then they just piss off for the weekend. And time goes by while this thing's

03:22.960 --> 03:25.120
just not in the apps for more than 24 hours.

03:25.120 --> 03:30.000
Thankfully, we do have an update, though. After more than a day of nothing but silence

03:30.000 --> 03:35.440
from Google, the Element developers received a phone call from a Google VP who explained

03:35.440 --> 03:40.100
the suspension was triggered by a report of extremely abusive content accessible on the

03:40.100 --> 03:42.920
main matrix.org server.

03:42.920 --> 03:48.120
This trust and safety team had already acted on it before they even talked to Google, though,

03:48.120 --> 03:53.440
does appear that Google Play moderation squad is now in contact with the matrix.org team.

03:53.440 --> 03:58.560
Hopefully that keeps communication lines open and keeps this from happening again. I can

03:58.560 --> 04:01.660
appreciate that that can be sometimes tricky, you know, just like it's often unfortunately

04:01.660 --> 04:05.640
difficult to report security vulnerabilities to the right place. Perhaps Google didn't

04:05.640 --> 04:08.800
know where to look, although I imagine it's not that hard to find.

04:08.800 --> 04:15.240
Well, and it's not clear to me what an app store's role is in moderating a chat network

04:15.240 --> 04:21.520
like Matrix. It's never been the case that email clients must be moderated for the types

04:21.520 --> 04:28.100
of emails that can be found on Gmail. IRC clients don't have the same restrictions put

04:28.100 --> 04:34.880
on them. Telegram? Signal? I mean, the list goes on and on. So it's really kind of unclear

04:34.880 --> 04:39.840
why Element would be abused here to begin with. Now, as of the morning of this recording,

04:39.840 --> 04:43.740
the app is back on the Play Store. But, you know, you said it, Wes, and I think it shows

04:43.740 --> 04:47.480
the fact that this escalated from a ticket where they tried to send more information

04:47.480 --> 04:54.000
in to silence until a VP calls out of the blue. I think that's significant, but I think

04:54.000 --> 04:59.080
the long-term damage has been done. Element has lost an unknown amount of users during

04:59.080 --> 05:03.720
an intense amount of signup time for them, but it's Google's reputation, I think, that's

05:03.720 --> 05:07.960
going to suffer the most long-term because everybody's watching this situation really

05:07.960 --> 05:14.480
closely right now with what's going on with Wall Street Bets and privacy. And this is

05:14.480 --> 05:21.620
a really, really closely watched situation. And Google did this in front of all of us.

05:21.620 --> 05:24.640
In front of all of us, we've been watching this happen, watching them delete bad reviews

05:24.640 --> 05:30.280
of the Robinhood app. And now we're watching them, Google, the tech company that's supposedly

05:30.280 --> 05:35.560
smarter than any other with the most data in the world, accidentally pull down one of

05:35.560 --> 05:40.160
the communication tools with the most potential in our lifetime. I mean, Matrix is a powerful

05:40.160 --> 05:43.200
thing, and Element's going to harness that. And I think ultimately that's what I love

05:43.200 --> 05:47.300
about this Wall Street Bets and GameStop story. The average non-techie people are learning

05:47.300 --> 05:52.180
about the control the platform owners like Google or YouTube have. And I think they're

05:52.180 --> 05:57.020
learning the value as a result of that of open distributed systems. It's like a lesson

05:57.020 --> 06:02.040
for the normies who couldn't care less about this stuff before. And I think this is a trend

06:02.040 --> 06:06.140
that will serve Linux well because ultimately when you boil down, you want a platform under

06:06.140 --> 06:10.880
your control where people can't revoke applications or prevent you from trading or whatever it

06:10.880 --> 06:16.400
might be, it's going to be distributed and open source systems and a Linux desktop. And

06:16.400 --> 06:19.960
I think it's an interesting trend that ultimately will probably lead to more Linux users.

06:19.960 --> 06:24.520
You know, I think that's just right. I was feeling very grateful that, you know, Android

06:24.520 --> 06:28.700
has F-Droid in this instance, and hopefully some more folks found out about that. For

06:28.700 --> 06:31.460
a while, maybe it hadn't been an issue. We didn't have to care that there were only a

06:31.460 --> 06:34.760
couple of places to get these things because for the most part, you could get whatever

06:34.760 --> 06:40.300
you want. Sure, they might disappear occasionally. These days, that seems to be changing. And

06:40.300 --> 06:44.560
I'm glad that there are options like Linux and F-Droid where you can still find the applications

06:44.560 --> 06:49.780
that you want to use regardless of what Google or Apple thinks that you might want to run.

06:49.780 --> 06:55.080
Next up in security news, a now fixed sudo vulnerability allowed any local user to gain

06:55.080 --> 07:00.940
root privileges on Linux and other Unix-like operating systems without requiring authentication.

07:00.940 --> 07:06.280
This is big news because what sudo does is at the heart of system administration on many

07:06.280 --> 07:11.180
Linux distributions and Unix-based systems because effectively, sudo allows a user to

07:11.180 --> 07:16.880
run a program as another user, most commonly the root user. And anytime you're giving out

07:16.880 --> 07:19.320
root access, it's a big deal.

07:19.320 --> 07:23.700
This week, a serious heap-based buffer overflow was disclosed for sudo. And it's been given

07:23.700 --> 07:28.360
the name Baron SameEdit by its discoverer. The bug can be leveraged to elevate privileges

07:28.360 --> 07:32.300
to root even if you're not in the sudoers file. And of course, as I mentioned, user

07:32.300 --> 07:37.020
authentication is not required to exploit the bug. The fruit hangs low.

07:37.020 --> 07:44.200
The vulnerability is tracked as CVE-2021-3156 and was discovered by security researchers

07:44.200 --> 07:49.480
from Qualys who disclosed it on January 13th and did a good job this time making sure that

07:49.480 --> 07:54.000
patches were available before going public, which is quite important.

07:54.000 --> 07:57.400
The Baron SameEdit bug can be exploited by an attacker who has gained access to a low

07:57.400 --> 08:00.980
privileged account, which is what makes this such a big deal and why we're talking about

08:00.980 --> 08:06.700
it now. And the CVE notes that a bug in the code that removes the escape characters will

08:06.700 --> 08:13.040
read beyond the last character of a string if it ends with an unescaped backslash character.

08:13.040 --> 08:16.340
Under normal circumstances, the bug would be harmless since sudo has escaped all the

08:16.340 --> 08:22.520
backslashes in the command's arguments. However, due to a different bug, this time in the command

08:22.520 --> 08:28.560
line parsing code, it is possible to run sudo edit with either the dash s or dash i options,

08:28.560 --> 08:33.800
setting a flag that indicates shell mode is enabled. Uh oh, because a command is not actually

08:33.800 --> 08:39.920
being run, sudo does not escape special characters. Finally, a code that decides whether to remove

08:39.920 --> 08:44.480
the escape characters did not check whether a command is actually being run, just that

08:44.480 --> 08:49.760
the shell flag is set. This inconsistency is what makes the bug exploitable.

08:49.760 --> 08:57.440
Yeah, and making matters kind of worse here and more serious is this bug has a long tail.

08:57.440 --> 09:04.320
The vulnerability was introduced to sudo almost nine years ago in July of 2011, and it essentially

09:04.320 --> 09:09.080
affects all default configurations of the stable version. Using these exploits, the

09:09.080 --> 09:13.720
researchers were able to obtain full root privileges on multiple Linux distributions,

09:13.720 --> 09:19.980
even current ones like Debian 10, Ubuntu 2004, and Fedora 33. And like I said, it goes all

09:19.980 --> 09:24.000
the way back. It goes back nine years. So this is kind of a serious one that people

09:24.000 --> 09:26.200
are going to have to patch for.

09:26.200 --> 09:31.720
Yikes. Though it only allows escalation of privilege and not remote code execution, which

09:31.720 --> 09:37.040
is important to point out, one could see how this could be leveraged in an attack. If botnet

09:37.040 --> 09:41.880
operators say brute force low level service accounts, the vulnerability could be abused

09:41.880 --> 09:46.720
in the second stage of an attack to help intruders easily gain root access and then full control

09:46.720 --> 09:51.420
over a hacked server. Thankfully, the pseudo contributors have fixed the vulnerability

09:51.420 --> 09:58.800
in version 1.9.5 patch 2. And this is one basically everyone needs to patch for.

09:58.800 --> 10:02.120
Yeah, special thank you to Bleeping Computer for their help in this reporting. We'll have

10:02.120 --> 10:06.040
a link to their write up in the show notes.

10:06.040 --> 10:11.040
Linode.com slash LAN. Go there to receive a $100 60 day credit towards your new account

10:11.040 --> 10:15.800
and you support the show. Linode is our cloud hosting provider. They make cloud computing

10:15.800 --> 10:20.760
simple, affordable, and accessible for anyone. Simplify your cloud infrastructure with Linode's

10:20.760 --> 10:26.280
Linux virtual machines and tools to make it all possible. Now, you know, we run all of

10:26.280 --> 10:31.920
our back end infrastructure for any of the new stuff we built for JB 3.0 on Linode. But

10:31.920 --> 10:36.240
something I don't talk a lot about is how I personally use Linode and I use Linode myself

10:36.240 --> 10:40.720
because well, quite frankly, it costs 30 to 50% less than any other major cloud provider.

10:40.720 --> 10:46.000
So why would Knights based on a company that founded a real passion for Linux and its technology

10:46.000 --> 10:50.360
that made it possible for virtual machines to even be a thing. They saw that back in

10:50.360 --> 10:54.080
2003 before anybody else really was in the market before it was even really called cloud

10:54.080 --> 10:59.560
computing. So I grok that because we've been following Linux's journey for about the same

10:59.560 --> 11:03.820
amount of time. But I also really like that they give me the tools to make it possible

11:03.820 --> 11:08.680
to do things that get me going quick. Like I set up a rust server recently. No, not not

11:08.680 --> 11:13.880
that rust, the game rust, where you can have a persistent world online and I want something

11:13.880 --> 11:17.720
my kids and their friends can play on that I know is safe. And they have a one click

11:17.720 --> 11:21.760
deployment in their app marketplace. You set a cap for how many players are allowed and

11:21.760 --> 11:25.580
any of the other customizations you might want for the game server, all in the deployment

11:25.580 --> 11:31.600
screen. And then you hit deploy and it's up and running. It's so slick. It is so quick.

11:31.600 --> 11:35.140
And now we have a place to hang out together online. Even when I'm on the road, I'll be

11:35.140 --> 11:39.200
able to play with my kids on our own rust instance. And there's a lot of other applications

11:39.200 --> 11:43.960
back end infrastructure tools, other games that are just one click away in their app

11:43.960 --> 11:49.980
marketplace. So get started by going to leno.com slash LAN, get that $100 credit and then start

11:49.980 --> 11:55.440
deploying applications or your own bare servers and build it up on your own. But you get started

11:55.440 --> 12:00.960
at leno.com slash LAN. That's leno.com slash LAN. A big thanks to Linode for sponsoring

12:00.960 --> 12:04.540
Linux Action News. And thanks to everybody who supports the show and makes it possible

12:04.540 --> 12:11.240
for us to give it away free by visiting leno.com slash LAN.

12:11.240 --> 12:16.520
An update on Rocky Linux this week. Parts of the puzzle to make that project sustainable

12:16.520 --> 12:22.600
have recently fallen into place. Gregory Kurtzer, co-founder of the CentOS Linux distribution,

12:22.600 --> 12:28.540
has founded a new startup called ControlIQ, which will act as a sponsoring company for

12:28.540 --> 12:33.320
Rocky Linux. We should be clear here, though, that Rocky Linux is to be the beneficiary

12:33.320 --> 12:36.320
of ControlIQ's revenue, not its source.

12:36.320 --> 12:41.540
Yeah, the company describes itself as suppliers of a full technology stack, integrating the

12:41.540 --> 12:47.480
key capabilities of enterprise, hyperscale, cloud computing and high performance computing.

12:47.480 --> 12:52.400
When you dig through their website, it seems like they have a particular focus on HPC deployment.

12:52.400 --> 12:57.960
But when asked by Jim Salter at Ars Technica about the relationship between ControlIQ and

12:57.960 --> 13:03.840
Rocky Linux, a representative of ControlIQ responded that Rocky was community based and

13:03.840 --> 13:08.760
that ControlIQ was supplying the initial capital for expenses, legal and other startup costs.

13:08.760 --> 13:14.160
Yeah, really, ControlIQ is one of three current tier one sponsors identified by the Rocky

13:14.160 --> 13:19.760
Linux project, along with Amazon Web Services and Mattermost. Rocky Linux is generally expected

13:19.760 --> 13:26.420
to be widely available in Q2 2021 with a first release candidate expected sometime at the

13:26.420 --> 13:27.420
end of March.

13:27.420 --> 13:31.040
ControlIQ is an interesting company. You can see how their interests would align with a

13:31.040 --> 13:38.000
distribution like Rocky Linux, but it's early still. Nothing's really established where

13:38.000 --> 13:43.200
Cloud Linux has an organization that's been doing this for years behind them.

13:43.200 --> 13:46.700
Sure, right. Yeah, they were already shipping their own sort of rail derivative. Whereas

13:46.700 --> 13:51.260
I think at this point, you know, some of the work in the HPC sector and Gregory's work,

13:51.260 --> 13:55.840
they were consuming the old centos. So they're starting fresh.

13:55.840 --> 13:58.860
But with a lot of momentum. I mean, they're really getting things rolling. And they're

13:58.860 --> 14:05.520
talking about their first release. And I think there is demand or appetite. I think there's

14:05.520 --> 14:10.360
a market for something like this, an enterprise distribution that's community driven. That's

14:10.360 --> 14:14.600
one of the things that I think people really like about Debian and why they deploy Debian

14:14.600 --> 14:18.840
on their servers, is there's not a corporation that's going to mess around or meddle with

14:18.840 --> 14:19.840
things.

14:19.840 --> 14:20.840
It's a neutral, open organization.

14:20.840 --> 14:26.400
Yeah, I think that is appealing in itself. And that gives Rocky an edge. Plus, you know,

14:26.400 --> 14:32.960
Gregory being the original co-founder of centos, trying to remember to say centos, it matters,

14:32.960 --> 14:33.960
I think.

14:33.960 --> 14:39.240
Yeah, you know, it adds that flame from before and I think adds an air of credibility about

14:39.240 --> 14:44.080
the nature of it being community based and driven. But on this one, only time will tell.

14:44.080 --> 14:49.320
Now, I'm wondering, Chris, did you see that interesting article over at the Register this

14:49.320 --> 14:54.560
week, The Killing of Centos, where they had an interview with a Centos board member who

14:54.560 --> 14:56.120
shared some interesting perspectives?

14:56.120 --> 14:59.900
Yeah, how could I not with a title like that? We'll put a link to that in the show notes.

14:59.900 --> 15:03.720
It's definitely worth a read. You know what jumped out at me about that article? Because

15:03.720 --> 15:07.900
there's nothing too new in there. But what the Register did is they did a really good

15:07.900 --> 15:15.280
job of demonstrating the duality of Red Hat's position with Centos Stream. In there, they

15:15.280 --> 15:19.680
get the board member to clearly state that RHEL is for production. If you're running

15:19.680 --> 15:24.720
in production, you should be using RHEL. But then just a couple of paragraphs later, they

15:24.720 --> 15:29.360
get the same person to defend the Stream, say, no, Stream is for production. No, Stream's

15:29.360 --> 15:34.200
totally fine. You know, I guess for you. It just shows that this isn't a cohesive decision

15:34.200 --> 15:39.360
that's been made. And there's some, I think there's probably the most frank answers we've

15:39.360 --> 15:43.020
seen about any of this stuff are in some of their answers.

15:43.020 --> 15:50.800
That interview is linked in our show notes, linuxactionnews.com slash 174. Well, thinking

15:50.800 --> 15:56.520
long term, Linux kernel maintainer Greg Croa Hartman has responded to complaints that the

15:56.520 --> 16:02.880
current promise of two years of stability for the Linux kernel 5.10 release is not enough,

16:02.880 --> 16:08.240
complaining that support is not automatic but requires commercial help. Version 5.10

16:08.240 --> 16:12.680
of the kernel was released back in December and designated a long term maintenance release,

16:12.680 --> 16:18.200
which generally means six years of support with important bug fixes and security patches.

16:18.200 --> 16:25.080
That complaining came from Broadcom's Scott Brandon. He spotted the release table and

16:25.080 --> 16:30.000
he had questions he sent into the mailing list about the support lifecycle. I think

16:30.000 --> 16:31.640
that's what set all this off. Did you see that?

16:31.640 --> 16:37.320
Yeah, he wrote, the 5.10 LTS kernel being officially LTS supported for two years presents

16:37.320 --> 16:43.520
a problem. Why would anyone select a 5.10 kernel with two year LTS when the 5.4 kernel

16:43.520 --> 16:49.640
has a six year LTS? A two year declaration is just not LTS anymore.

16:49.640 --> 16:55.020
Now this is Greg's area, you see. So he's not going to have this. First, he refuted

16:55.020 --> 16:59.480
the idea that two years is not LTS. He says a normal stable kernel is dropped after the

16:59.480 --> 17:04.460
next release happens, making their lifespan about four months long. So two years is much

17:04.460 --> 17:10.100
longer than four months. So thereby, it is a long term supported kernel. Second, he said

17:10.100 --> 17:14.800
that every year they go through the same thing. The support is likely to be increased, but

17:14.800 --> 17:20.200
only after companies pledge to back it. He's got to see companies put in or else it's just

17:20.200 --> 17:21.280
not worth his time.

17:21.280 --> 17:27.400
He went on to explain that I want to see companies using the kernel and most importantly, updating

17:27.400 --> 17:33.200
their devices with it to know if it is worth keeping around for longer than two years.

17:33.200 --> 17:38.560
I also hopefully want to see those companies will help me out in the testing and maintenance

17:38.560 --> 17:43.600
of that kernel version in order to make supporting it for six years actually possible.

17:43.600 --> 17:48.340
Greg also said that, you know, Samsung could be a little bit better in this area. He basically

17:48.340 --> 17:52.480
said it. He added that he doesn't recommend using a single kernel version for more than

17:52.480 --> 17:56.520
two years on systems that you're going to actively support and maintain. And he blamed

17:56.520 --> 18:03.040
customer unfriendly SOC vendors for providing millions of lines of out of tree code that

18:03.040 --> 18:10.680
is specific to one kernel. So the question is, will 510 get six years of LTS support?

18:10.680 --> 18:16.400
Well, Greg explained that so far the jury is still out for 510 and asked, are you willing

18:16.400 --> 18:21.240
to help me with this? If not, why are you willing to hope that others are going to do

18:21.240 --> 18:22.960
your work for you?

18:22.960 --> 18:27.640
I'm talking to some companies, but I'm not yet willing to commit to anything in public

18:27.640 --> 18:29.640
because no one has committed to me.

18:29.640 --> 18:35.600
Yeah, I think that's fair. And it's a tricky situation because everybody wants the benefits,

18:35.600 --> 18:38.940
but it doesn't seem like they particularly want to put the work in. And how can they

18:38.940 --> 18:43.360
really do this without vendors like Samsung and some of the other SOC manufacturers on

18:43.360 --> 18:44.360
board?

18:44.360 --> 18:48.040
When you think about it, this is a great deal of work. I mean, the rest of the kernel community

18:48.040 --> 18:51.440
in many ways has moved on to the next release, as you pointed out, right? It's there for

18:51.440 --> 18:56.360
four months and then you go on to the next release and work on that. Having to keep up,

18:56.360 --> 18:59.780
do all these backports, making sure those get done correctly, sometimes having to do

18:59.780 --> 19:04.160
significant changes when kernel structures have changed. That's not work that should

19:04.160 --> 19:05.160
be done for free.

19:05.160 --> 19:09.720
Now, it really, it makes me realize that when it's safe to go back out into public and we

19:09.720 --> 19:14.840
can go to community events again, it's all of our duty to buy Greg a beer when we see

19:14.840 --> 19:20.200
him or whatever beverage of his choice. You know, this is, he is doing the people's work

19:20.200 --> 19:25.400
with these LTS kernels. And even to get something that's two years, you know, a two year stability

19:25.400 --> 19:30.560
window in terms of ABI whatnot, that is a big, big deal. If we could get it to six years

19:30.560 --> 19:33.920
by getting some vendors on board, I think that could have some, some really positive

19:33.920 --> 19:38.520
ramifications for people that are building devices and new technology platforms off the

19:38.520 --> 19:39.520
Linux kernel.

19:39.520 --> 19:43.240
It also feels more natural in that, you know, we should do it if there's interest because

19:43.240 --> 19:47.520
folks need it and will use it and kind of establish that first and then you can justify

19:47.520 --> 19:48.520
the work.

19:48.520 --> 19:53.040
That's what the takeaway is by Greg a beer. Definitely. And of course, check out linuxactionnews.com

19:53.040 --> 19:58.000
slash subscribe for all the ways to get new episodes and linuxactionnews.com slash contact

19:58.000 --> 20:02.880
for ways to get in touch. Hey, you can help us test. Join the coder happy hour this Monday,

20:02.880 --> 20:08.960
5 PM Pacific, 8 PM Eastern. We're going to test out our recently improved PeerTube live

20:08.960 --> 20:13.400
stream setup and we could use your help. We need to build out a bit of the peer to peer

20:13.400 --> 20:18.160
network. So join me over there at jblive.tv and we'll have more details. Help test the

20:18.160 --> 20:23.600
new revolution in video streaming. All you have to do is show up and watch. Don't worry.

20:23.600 --> 20:28.000
We'll be back next Monday with our weekly take on the latest Linux and open source news.

20:28.000 --> 20:48.600
Thanks for joining us and we'll see you right back here next week.


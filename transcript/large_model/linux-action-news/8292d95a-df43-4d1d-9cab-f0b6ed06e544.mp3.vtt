WEBVTT

00:00.000 --> 00:08.960
Hello, and welcome to Linux Action News, episode 184, recorded on April 11th, 2021.

00:08.960 --> 00:09.960
I'm Chris.

00:09.960 --> 00:10.960
And I'm Wes.

00:10.960 --> 00:11.960
Hello, Wes.

00:11.960 --> 00:12.960
Let's do the news.

00:12.960 --> 00:17.540
There's been some impressive progress towards an important milestone for getting Linux up

00:17.540 --> 00:25.680
and running on the Apple M1, and some indications that full desktop support might be achievable.

00:25.680 --> 00:31.640
But last week, the co-maintainer of the ARM SoC kernel tree merged the Apple M1 branch

00:31.640 --> 00:37.060
into Linux Next, which is the staging area for code expected to land in the next kernel

00:37.060 --> 00:38.200
merge window.

00:38.200 --> 00:42.460
And that also means that it's not yet accepted by Linus.

00:42.460 --> 00:46.120
And it's months from shipping if he does accept it.

00:46.120 --> 00:50.760
But at this time, as we record, there is no indication or reason to suspect that Linus

00:50.760 --> 00:51.760
will reject this.

00:51.760 --> 00:54.980
In fact, it seems quite the opposite that he will accept it.

00:54.980 --> 00:59.440
And it's a mind bending initial set of patchwork that's been contributed by Hector Martin

00:59.440 --> 01:03.120
and his team at Asahi Linux.

01:03.120 --> 01:04.720
I think that's how you say it.

01:04.720 --> 01:09.000
This new branch includes basics to get the Apple M1 systems booting.

01:09.000 --> 01:14.400
But also in there is that brand new bootloader the team built to make this possible that

01:14.400 --> 01:19.160
accommodates USB oddities and whatnot that we covered in a previous episode of Linux

01:19.160 --> 01:20.160
Action News.

01:20.160 --> 01:25.560
Now don't get too excited once you've got it booted up, Asahi's environment only has

01:25.560 --> 01:29.320
a serial and frame buffer console for access right now.

01:29.320 --> 01:34.180
But this is important work to actually get future drivers developed.

01:34.180 --> 01:36.920
We reached out to Hector Martin for comment.

01:36.920 --> 01:37.920
And he said,

01:37.920 --> 01:42.480
I want to emphasize that what we upstream just gives you a serial console, but it represents

01:42.480 --> 01:48.220
figuring out a lot of deep platform details about the ports, changes to core kernel code

01:48.220 --> 01:52.760
and settle several technical questions that required a lot of back and forth, including

01:52.760 --> 01:58.160
things like what the bootloader is responsible for versus what Linux is responsible for.

01:58.160 --> 02:02.360
As we've talked about before, there's a lot of work and conversation that has to go in

02:02.360 --> 02:05.120
before you get this kind of stuff merged.

02:05.120 --> 02:08.600
Asked about the next steps for M1 support, Hector said,

02:08.600 --> 02:13.160
So the next step is drivers and I expect that it will get a lot quicker than most people

02:13.160 --> 02:17.920
might think after we spent three months on just getting a serial console working.

02:17.920 --> 02:22.920
Hector Martin is already sending in the M1 IOMMU driver for review and we are working

02:22.920 --> 02:29.400
on PCIe bring up and we found Linux code that matches the controllers in other SOCs.

02:29.400 --> 02:35.240
Hector also relate to us that he and the team are dedicated to shaving all the required

02:35.240 --> 02:39.240
YACs to get this thing to be a high quality port.

02:39.240 --> 02:40.560
Clearly they care a lot about this.

02:40.560 --> 02:43.740
There's a lot of pride, I think, involved in the work and they want to see the shine

02:43.740 --> 02:44.740
if it's possible.

02:44.740 --> 02:50.360
Yeah, he pointed to a couple of examples of abandoned Android platforms where they have

02:50.360 --> 02:55.320
just created this unmaintainable code dump that is just essentially a fork of Linux.

02:55.320 --> 02:57.080
That's not what they're going for at all here.

02:57.080 --> 03:01.840
They want something that's long term and maintainable and I think they're going to get there at

03:01.840 --> 03:02.840
this stage.

03:02.840 --> 03:04.360
I'm cautiously optimistic.

03:04.360 --> 03:09.880
I'm confident that we're going to get a text based Linux booting on this thing that you

03:09.880 --> 03:13.680
could use to say rescue hardware and do data recovery and security forensics.

03:13.680 --> 03:17.280
I think we're really close to that and that's going to be valuable just as Apple begins

03:17.280 --> 03:21.740
to sell millions of these devices and professionals need these tools available to them.

03:21.740 --> 03:24.960
So Hector Martin and his team are going to do a service, even if they never get the graphical

03:24.960 --> 03:27.920
environment going here, it will be a use case.

03:27.920 --> 03:31.720
But I am actually getting cautiously optimistic they're going to go all the way.

03:31.720 --> 03:35.680
I mean, it's obviously not time to buy an M1 Mac right now with the intention of running

03:35.680 --> 03:39.800
Linux on it, but it seems like it's going to be possible more than ever right now.

03:39.800 --> 03:44.000
Yeah, I mean, for his part, Hector Martin seems pretty confident that he's going to

03:44.000 --> 03:49.680
be able to get a fully working desktop on the M1 sometime this year.

03:49.680 --> 03:54.240
In response to Michael Larable over at Ferronix, who had doubted the project would reach that

03:54.240 --> 03:59.740
milestone, Hector responded with just challenge accepted.

03:59.740 --> 04:05.400
And what might also be a positive sign with this is that as the Asahi team has moved along,

04:05.400 --> 04:11.440
they don't really seem to be running into a lot of artificial barriers from Apple.

04:11.440 --> 04:15.320
Maybe I'm wrong, but it kind of seems that in some respects, like how firmware gets loaded,

04:15.320 --> 04:21.280
how much stuff is handled in the hardware, it might be simpler to get this going on the

04:21.280 --> 04:24.880
ARM side than it was on the on the x86 version.

04:24.880 --> 04:25.880
Isn't that funny?

04:25.880 --> 04:29.720
And the opposite of what you would expect is in some cases, the hardware is doing the

04:29.720 --> 04:34.400
like the firmware blob loading for you, the OS doesn't even have to touch it.

04:34.400 --> 04:41.260
And you almost wonder if there if there isn't some fire to the smoke about rumors that Apple

04:41.260 --> 04:46.740
is running Linux in the bowels to internally test hardware in the early development stages.

04:46.740 --> 04:51.720
Apple very well may have a few M1 test systems running Linux in-house because it seems like

04:51.720 --> 04:53.720
they haven't gone out of their way to lock this out at all.

04:53.720 --> 04:57.940
In fact, they just simply haven't done anything to make it work, but they also haven't tried

04:57.940 --> 04:58.940
to prevent it.

04:58.940 --> 05:02.980
And if you think about it, if Apple was running Linux down in the skunk labs, would they say

05:02.980 --> 05:07.440
a word about it or would they keep mum so that way people didn't ask them GPL questions?

05:07.440 --> 05:13.040
But additionally, if I were Apple and I saw the roadmap of the M platform, I think I'd

05:13.040 --> 05:16.560
want to run these in my own iCloud data center.

05:16.560 --> 05:20.520
There's got to be obvious efficiencies to some of the ML stuff that's built into the

05:20.520 --> 05:25.280
chip, but also just running their own gear in their own hardware and having more confidence

05:25.280 --> 05:30.180
in supply chain security and also the performance and power savings when you're running your

05:30.180 --> 05:33.520
data center off a solar system, which they do with their Nevada data center.

05:33.520 --> 05:38.520
And I know they use Azure and they use AWS and they use Akamai quite a bit, but they

05:38.520 --> 05:42.640
also have a ginormous data center with actual physical hardware in it.

05:42.640 --> 05:45.520
And you'd think they'd want to rack up their own M systems instead of continuing to buy

05:45.520 --> 05:46.520
x86 boxes.

05:46.520 --> 05:49.320
And if they're going to run that in a data center, it's probably going to be running

05:49.320 --> 05:50.720
Linux, at least on some of them.

05:50.720 --> 05:51.720
Yeah.

05:51.720 --> 05:56.360
I mean, Amazon, Microsoft, Google that are all already building their own custom ARM

05:56.360 --> 05:57.720
systems for the data center.

05:57.720 --> 06:01.400
You could really understand why Apple might want to do the same.

06:01.400 --> 06:06.680
Really though, this story is just getting started before Linux 513 comes out with these

06:06.680 --> 06:09.800
initial patches, which should be sometime around June.

06:09.800 --> 06:16.740
You can expect kernel 512 as early as this week or sometime in late April or early May.

06:16.740 --> 06:18.640
We'll see either way.

06:18.640 --> 06:23.600
It's got loads of exciting new features and we'll have those details whenever it ships.

06:23.600 --> 06:30.800
Well speaking of Linux 513, also very likely for inclusion in that release is a new PCIe

06:30.800 --> 06:37.280
host controller driver for the much anticipated Psi 5 High 5 unmatched board system.

06:37.280 --> 06:39.360
The unmatched has 16 gigs of RAM.

06:39.360 --> 06:41.520
It has USB 3.2.

06:41.520 --> 06:50.800
It has one PCI express 16 slot that is operating at 8x speed and one MVME slot and gigabit

06:50.800 --> 06:52.000
ethernet.

06:52.000 --> 06:54.920
And might you be able to get your hands on one of these?

06:54.920 --> 07:00.200
Well, the pre-order page from Mouser Electronics, which will be one of the potential suppliers

07:00.200 --> 07:06.480
anyway, is currently indicating they're expecting the High 5 unmatched to arrive sometime around

07:06.480 --> 07:08.120
the end of May.

07:08.120 --> 07:14.120
And that means that by the time people actually start receiving those units, this new PCIe

07:14.120 --> 07:17.920
host controller driver will be shipping pretty soon.

07:17.920 --> 07:21.840
Or maybe already have shipped to end users.

07:21.840 --> 07:23.000
That's pretty exciting.

07:23.000 --> 07:30.400
And if you want to take part and try this thing out, the pricing remains at $665.

07:30.400 --> 07:32.480
Linode dot com slash LAN.

07:32.480 --> 07:37.200
Go there to get a $100 60 day credit towards your new account and of course support the

07:37.200 --> 07:38.200
show.

07:38.200 --> 07:39.200
It's easy.

07:39.200 --> 07:40.200
Linode dot com slash LAN.

07:40.200 --> 07:43.280
$100 means you can actually kick the tires.

07:43.280 --> 07:46.000
Linode is the largest independent cloud computing provider.

07:46.000 --> 07:51.040
It's where we host everything for JB 3.0 and they make it easy no matter what skill level

07:51.040 --> 07:53.160
you're at to get up and going.

07:53.160 --> 07:56.880
And they have all the different distros you could possibly want to choose from to host

07:56.880 --> 07:57.880
on.

07:57.880 --> 08:03.680
If you run into any trouble as well, Linode has outstanding, amazing 24-7 customer support

08:03.680 --> 08:05.720
by phone or ticket.

08:05.720 --> 08:08.880
All with hundreds of guides and tutorials to help you get started.

08:08.880 --> 08:14.880
In fact, in the notes, I'll link a guide to covering how to secure PHP MyAdmin.

08:14.880 --> 08:15.880
I get it.

08:15.880 --> 08:18.740
It's a useful tool and I've worried about it too.

08:18.740 --> 08:20.200
That's what's great about their guides.

08:20.200 --> 08:23.920
They give you some peace of mind running this stuff in production.

08:23.920 --> 08:28.540
Linode is easy to use and has a powerful cloud dashboard and you can kind of grok if you're

08:28.540 --> 08:33.640
a longtime Linux user that the people that run and build Linode are Linux users too.

08:33.640 --> 08:37.680
And their S3 compatible object storage is so useful you'll find hundreds of uses for

08:37.680 --> 08:38.680
it.

08:38.680 --> 08:42.400
And then they have great features like cloud firewall, simple one click application deployment,

08:42.400 --> 08:47.040
super fast networking and much, much more.

08:47.040 --> 08:48.880
That's why you just got to go check it out for yourself.

08:48.880 --> 08:52.640
Try one of those one click app deployments, something like that and just see what we've

08:52.640 --> 08:57.240
been talking about, because Linode is truly fantastic and the only way I would host things

08:57.240 --> 08:58.240
today.

08:58.240 --> 09:01.120
So sign up today at linode.com slash LAN.

09:01.120 --> 09:06.000
Get a $100 60 day credit towards your new Linode account and of course support the show.

09:06.000 --> 09:10.160
That's linode.com slash LAN.

09:10.160 --> 09:16.820
When Firefox 88 is released later this month, it'll finally be making the long anticipated

09:16.820 --> 09:22.360
switch to using Web Render as the default rendering engine on Linux.

09:22.360 --> 09:27.880
This is that final piece of all of the performance we were promised with Project Quantum back

09:27.880 --> 09:31.200
in like Firefox 67 timeframe.

09:31.200 --> 09:36.320
This is though, this is one of those updates where it's impressive depending on how you

09:36.320 --> 09:41.080
have your system configured and the kind of hardware that you might have in your box.

09:41.080 --> 09:46.660
Interestingly, Web Render actually comes out of Mozilla's work on Servo and first made

09:46.660 --> 09:53.400
an appearance in Firefox way back in Firefox 67, which was released on May 21st, 2019.

09:53.400 --> 09:57.720
But of course, this was behind a config option and was not the default.

09:57.720 --> 10:03.980
You had to go into about config and set gfx.webrender.all to true before you could play with any of this

10:03.980 --> 10:05.560
new shiny.

10:05.560 --> 10:11.120
And Chris, you'll be pleased because of that Servo heritage, yes, Web Render is written

10:11.120 --> 10:12.120
in Rust.

10:12.120 --> 10:13.120
That's right.

10:13.120 --> 10:18.080
A lot of our, a lot of Rust and its progress is actually kind of tied back to Servo.

10:18.080 --> 10:20.420
So it's, it all comes together.

10:20.420 --> 10:24.880
And also kind of in the Firefox vein, we have a link in the show notes for you.

10:24.880 --> 10:29.240
Have you ever noticed that extensions just seem to work better under the Fox?

10:29.240 --> 10:34.800
Well, it turns out there actually may be several technical reasons why extensions are better

10:34.800 --> 10:36.280
under Firefox.

10:36.280 --> 10:43.040
The uBlock Origin developer wrote a post that kind of goes over some of these highlights,

10:43.040 --> 10:44.920
and a couple of them stood out to us.

10:44.920 --> 10:49.880
Yeah, one of the reasons that uBlock Origin just kind of does better on Firefox is it

10:49.880 --> 10:54.800
has a better ability to unclog third party servers that use CNames to make it look like

10:54.800 --> 11:01.160
their first party, so called CName unclogging, but really just means uBlock Origin is better

11:01.160 --> 11:05.280
able to figure out where you're going and then if it needs to, it can block it, which

11:05.280 --> 11:07.320
means you get more blocked sites.

11:07.320 --> 11:12.860
There's just a whole list, like the ability to filter HTML before it's passed and parsed

11:12.860 --> 11:17.740
by the browser, improvements about the way Firefox brings extensions up.

11:17.740 --> 11:22.240
But the one that struck me, because I'm sure this affects a lot of extension developers,

11:22.240 --> 11:28.000
is the Firefox version of uBlock Origin makes use of WebAssembly code for like the core

11:28.000 --> 11:30.240
filtering paths.

11:30.240 --> 11:35.840
That's just not the case with the Chromium based ones, simply just because of creating

11:35.840 --> 11:41.040
a smoother user experience in the Chrome Web Store, and if they wanted to use WebAssembly

11:41.040 --> 11:46.840
code for the filtering code pass, they'd have to ask for an additional permission at install.

11:46.840 --> 11:51.200
It would reduce the amount of deployments they get because other plugins don't do this,

11:51.200 --> 11:55.120
and so they don't do it, and it takes a slower path on Chrome, and it's just kind of an example

11:55.120 --> 12:00.040
of something that's both technical and political that makes it just not as ideal to develop

12:00.040 --> 12:01.840
an extension for Chrome.

12:01.840 --> 12:05.760
It's just because there's so many dang users that people do it, but I have noticed this

12:05.760 --> 12:06.760
with the Fox.

12:06.760 --> 12:11.720
I've noticed it seems like extensions that I use in both browsers do work better in Firefox,

12:11.720 --> 12:13.040
and it's got to be some of this.

12:13.040 --> 12:18.940
Yeah, you know, Mozilla has a long history of being the extension forward browser vendor,

12:18.940 --> 12:21.540
so I think they've just figured out some of the things that you need, where the right

12:21.540 --> 12:27.120
hooks should go, but really this is just the excuse maybe you needed to give Firefox a

12:27.120 --> 12:28.120
try again.

12:28.120 --> 12:31.320
We'll talk about more future desktop Linux stuff.

12:31.320 --> 12:35.200
One of the challenges about our Wayland futures, it means sometimes we're actually introducing

12:35.200 --> 12:40.280
fragmentation and multiple implementations to do something, and that is exactly what's

12:40.280 --> 12:46.820
happening around extended display identification data, which is information that Linux can

12:46.820 --> 12:52.680
use to learn more about monitors that are connected, and currently there's no de facto

12:52.680 --> 12:58.640
EDID parsing library for Linux, and so what we've ended up with, as you are probably fearing

12:58.640 --> 13:03.920
right now, is multiple implementations, and most Wayland compositors are just rolling

13:03.920 --> 13:05.760
their own solution.

13:05.760 --> 13:09.720
Now this extended display identification data, that's the good stuff that the kernel needs

13:09.720 --> 13:14.040
to learn everything about your monitor or monitors, and then it passes that along to

13:14.040 --> 13:19.360
user space and offers various metadata for the different tools to set up your displays.

13:19.360 --> 13:23.520
But the problem that we have today is the various tools that we do have in user space,

13:23.520 --> 13:24.520
they need more information.

13:24.520 --> 13:29.440
They need metadata about high dynamic range, refresh rate, all kinds of additional things,

13:29.440 --> 13:34.120
and so they're implementing their own solutions to this, and it's not consistent.

13:34.120 --> 13:39.040
A prominent Wayland developer is suggesting that instead of exposing all of that parsed

13:39.040 --> 13:44.760
information from the kernel directly, there should instead be a unified Linux EDID parsing

13:44.760 --> 13:51.760
library, that hypothetically at least would be a free desktop.org hosted project, MIT

13:51.760 --> 13:56.640
licensed, offer, you know, a way to use it from C of course, and probably just take one

13:56.640 --> 14:01.720
of the existing EDID parsing libraries, sort of flesh it out, make it work, and hopefully

14:01.720 --> 14:02.720
the standard.

14:02.720 --> 14:06.260
That I think is the clever aspect to this, is take something that already exists that

14:06.260 --> 14:10.440
people are kind of comfortable with, and then modify it as needed to solve the remaining

14:10.440 --> 14:17.240
edge cases, and this would cut down on code duplication across Wayland compositors, and

14:17.240 --> 14:22.480
really solve differences that might end up being frustrating to end users, and kind of

14:22.480 --> 14:24.660
make it a more unified experience.

14:24.660 --> 14:28.000
This is early, the call was made on the Wayland mailing list just recently, and is currently

14:28.000 --> 14:31.480
up for discussion, but we'll keep an eye on this one.

14:31.480 --> 14:37.680
Before we leave the world of graphics, and with the crazy high prices of GPUs right now,

14:37.680 --> 14:42.640
we wanted to pass along a neat little tool that might help you get a lot more out of

14:42.640 --> 14:45.600
your existing NVIDIA cards.

14:45.600 --> 14:49.760
It's called VGPU Unlock, and what does it unlock?

14:49.760 --> 14:57.480
Well VGPUs, or virtual GPUs, which normally are only supported on a few Tesla cards, but

14:57.480 --> 15:02.480
if you happen to have the right GeForce or Quadro card that shares the same underlying

15:02.480 --> 15:09.440
physical chip as the Tesla, it turns out that's just a software limitation, and now there's

15:09.440 --> 15:12.320
software that tries to fix this.

15:12.320 --> 15:18.220
And really, it's a fascinating deep dive into how NVIDIA pulled this off, and how these

15:18.220 --> 15:22.680
intrepid hackers worked around NVIDIA's handcuffs.

15:22.680 --> 15:27.800
If you'd like to learn more and get the technical nitty gritty details, we'll have a link in

15:27.800 --> 15:33.280
the show notes.

15:33.280 --> 16:02.480
Thanks

16:02.480 --> 16:07.040
20 gigs a month there's a perfect ting plan for you and every ting plan gets

16:07.040 --> 16:12.280
access to tings award-winning customer service with nationwide multiple LTE and

16:12.280 --> 16:17.880
5g networks for you to choose from and the freedom of no contracts ever and

16:17.880 --> 16:20.800
with these three great networks you can choose from you pick the one that has

16:20.800 --> 16:24.680
the best coverage in your area but it also means likely the phone you got

16:24.680 --> 16:28.400
today will work with ting if you like your phone bring it ting will give you

16:28.400 --> 16:32.680
$25 in service credit when you go to linux.ting.com check your current phone

16:32.680 --> 16:35.680
create an account and pick the plan that's right for you they got a wizard

16:35.680 --> 16:39.120
that guides you through all of it and then boom ting sends you a SIM card you

16:39.120 --> 16:42.840
pop that in your device and you're rocking on ting in minutes you'd be

16:42.840 --> 16:45.840
amazed how much you can just manage through tings dashboard and all through

16:45.840 --> 16:49.480
their website and cutting your phone bill has never been easier with ting

16:49.480 --> 16:56.960
mobile's brand new plans get it all at linux.ting.com back in January we told

16:56.960 --> 17:00.920
you about the challenges the KDE community was facing with the release of

17:00.920 --> 17:06.640
Qt 6 but if you don't recall the important detail is that Qt projects

17:06.640 --> 17:11.560
licensing model means long-term supported releases and updates to those

17:11.560 --> 17:16.960
well those go commercial only once there's a new development release out

17:16.960 --> 17:22.240
that meant Qt 5 support in particular went proprietary and behind a paywall

17:22.240 --> 17:27.320
when Qt 6 was released now you might think what's the problem here just jump

17:27.320 --> 17:32.000
ship and start using Qt 6 but unfortunately Qt 6 is still a work in

17:32.000 --> 17:36.520
progress in missing some essential features which makes any porting efforts

17:36.520 --> 17:42.480
kind of difficult and that is why most if not all KDE applications are still

17:42.480 --> 17:47.680
using Qt 5 that's why back in January we did hear that news we went well how is

17:47.680 --> 17:53.200
this going to impact all of KDE and in particular my beloved plasma desktop how

17:53.200 --> 17:56.520
are they gonna manage this because clearly they still need time before

17:56.520 --> 18:00.820
plasma desktop and all of the other KDE projects and lots of Qt applications

18:00.820 --> 18:05.840
are ready for Qt 6 there's still work they need to do with Qt 5 but as time

18:05.840 --> 18:10.640
goes on with Qt 5 there's gonna be security fixes that need to be patched

18:10.640 --> 18:15.720
in or just general bugs that have to be fixed and the Qt company will not be

18:15.720 --> 18:20.360
releasing those so what were they going to do that was really the big question

18:20.360 --> 18:25.340
we were left with and now we have an answer because this week the KDE project

18:25.340 --> 18:31.720
announced their Qt 5 patch collection quote as Qt 5 support is drawing to a

18:31.720 --> 18:37.080
close and we shift to Qt 6 we need to ensure that KDE products are as reliable

18:37.080 --> 18:41.920
as ever to this end KDE will be maintaining a set of patches with

18:41.920 --> 18:47.320
security and functional fixes so that we can enjoy good KDE software still based

18:47.320 --> 18:53.560
on Qt 5 until our software is reliably based on Qt 6 it's good to see the KDE

18:53.560 --> 18:59.080
project do this because it kind of is smoothing out the nuances if you will of

18:59.080 --> 19:03.920
Qt licensing in a way that doesn't really impact the wider community I

19:03.920 --> 19:07.680
think they're I think they're going out of their way to be intentional about

19:07.680 --> 19:13.120
calling this a a patch collection don't call it a fork it's not a fork of Qt 5

19:13.120 --> 19:18.120
it's a it's a gentle collection of patches that will just maintain alongside

19:18.120 --> 19:22.960
of Qt 5 and that's that's a smart way to go about it because it kind of keeps

19:22.960 --> 19:28.040
this on the DL it's not this bold statement that we're going our own way

19:28.040 --> 19:32.840
it's just this simple humble we're gonna have our own nice little collection I

19:32.840 --> 19:37.360
mean it's a complicated relationship to manage here right KDE and plasma they're

19:37.360 --> 19:41.800
big users of the Qt framework and that is a relationship they have to keep

19:41.800 --> 19:44.860
managing they want to keep benefiting from the open source but here they're

19:44.860 --> 19:48.600
also kind of stepping up because you know many open source developers

19:48.600 --> 19:51.360
themselves including they can't afford to pay that paywall there's no budget

19:51.360 --> 19:55.780
for that they got to do something and here's the band-aid before we go a quick

19:55.780 --> 20:00.400
update on that adorable Linux powered helicopter on Mars named ingenuity we

20:00.400 --> 20:05.380
were expecting a possible test flight today as we record followed by about a

20:05.380 --> 20:10.200
13-hour delay in finding out the results of that test flight unfortunately

20:10.200 --> 20:15.040
however NASA has chosen to reschedule the ingenuity Mars helicopters first

20:15.040 --> 20:21.400
experimental flight to no earlier than April 14th that's because during a

20:21.400 --> 20:25.880
high-speed spin test on the rotors on Friday the command sequence controlling

20:25.880 --> 20:31.120
the test ended early due to a watchdog timer expiration you know these things

20:31.120 --> 20:34.480
go wrong it's experimental that's true I mean that's what they're trying to

20:34.480 --> 20:38.120
catch right now yeah this occurred just as they were transitioning from the

20:38.120 --> 20:42.960
flight computer to the pre-flight flight mode and so there's this watchdog timer

20:42.960 --> 20:46.600
that oversees the command sequence and then alerts the system to any potential

20:46.600 --> 20:50.840
issues it detects yeah really it just helps the system stay safe by not

20:50.840 --> 20:55.160
proceeding if an issue is observed and working as planned and you need those

20:55.160 --> 20:59.600
kinds of fail-safe when you're a million miles from home right now the helicopter

20:59.600 --> 21:02.920
team is reviewing the telemetry they've got to see if they can diagnose and

21:02.920 --> 21:08.200
understand what went wrong following that we'll get a rescheduled full-speed

21:08.200 --> 21:12.640
test yep nobody ever said space travel was easy but we'll be keeping an eye on

21:12.640 --> 21:16.620
that story because we're nerds and love the idea of a Linux powered helicopter

21:16.620 --> 21:21.400
flying on the surface of Mars so be sure to get every episode because you don't

21:21.400 --> 21:24.760
want to miss that go to Linux action news comm slash subscribe for all the

21:24.760 --> 21:28.400
ways to get new episodes like what we're doing or want to let us know about a

21:28.400 --> 21:32.840
Linux news story we missed hey just head on over to Linux action news comm slash

21:32.840 --> 21:38.600
contact for ways to get in touch and don't miss your celebratory 400 beer

21:38.600 --> 21:43.720
Stein for Linux unplugged we have a special beer mug at la plug dot beer for

21:43.720 --> 21:48.600
a limited time we'll be back next Monday beers in hand with our weekly take on

21:48.600 --> 21:52.820
the latest Linux and open source news thanks for joining us and we will see

21:52.820 --> 22:11.240
you next week


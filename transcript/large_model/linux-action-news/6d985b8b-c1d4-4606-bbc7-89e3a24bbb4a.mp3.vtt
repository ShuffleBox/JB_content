WEBVTT

00:00.000 --> 00:09.860
Hello, and welcome to Linux Action News, episode 251, recorded on July 26th, 2022.

00:09.860 --> 00:10.860
I'm Chris.

00:10.860 --> 00:11.860
And I'm Wes.

00:11.860 --> 00:12.860
Hello, Wes.

00:12.860 --> 00:14.920
Let's do the news.

00:14.920 --> 00:18.920
Last week, we found out Red Hat was getting a new boss.

00:18.920 --> 00:24.080
And this week, we're hearing about the company's next steps from comments made by that new

00:24.080 --> 00:25.560
CEO, Matt Hicks.

00:25.560 --> 00:30.920
For context, you need to know that Hicks' comments were made shortly after IBM shares

00:30.920 --> 00:36.320
fell the most in almost 9 months, after the tech company lowered its forecasts for free

00:36.320 --> 00:39.680
cash flow this year.

00:39.680 --> 00:45.580
But one area of growth IBM did see was its hybrid cloud division.

00:45.580 --> 00:52.560
Red Hat's sales grew by 12%, which is maybe not fantastic for Red Hat, but by most standards

00:52.560 --> 00:54.960
is quite reasonably good growth.

00:54.960 --> 00:59.360
Indeed, just a couple of years into this merger, Red Hat's already playing a significant

00:59.360 --> 01:00.600
positive role.

01:00.600 --> 01:05.100
So can Hicks keep things going in the right direction?

01:05.100 --> 01:09.900
In an interview, Hicks recently said, quote, we'll keep using the same core fundamentals

01:09.900 --> 01:12.980
that we built 20 plus years ago.

01:12.980 --> 01:18.360
He goes on to say that Red Hat's particular combination of open source software and support

01:18.360 --> 01:23.800
on top, quote, continues to play in new markets, whether that's the shift to cloud and cloud

01:23.800 --> 01:26.440
services or to edge computing.

01:26.440 --> 01:31.360
In the next couple of quarters, we'll just focus on executing.

01:31.360 --> 01:35.600
There's great momentum right now around the open hybrid cloud.

01:35.600 --> 01:40.200
And really, not just the cloud, although that is what gets all of the headlines.

01:40.200 --> 01:43.600
We've spoken with folks behind the scene that tell us the automotive industry could be a

01:43.600 --> 01:48.200
significant area for growth for Red Hat over the next few years.

01:48.200 --> 01:54.000
In fact, I believe we have that growth to thank for pipewire and the problems that the

01:54.000 --> 01:57.700
automotive companies needed to solve for their infotainment systems.

01:57.700 --> 02:02.320
We don't really see much reporting on this because most of these car companies want to

02:02.320 --> 02:04.560
be super secretive.

02:04.560 --> 02:10.420
Hicks did speak publicly about working with GM, though, saying, quote, we're also working

02:10.420 --> 02:16.520
with General Motors on UltiFi, GM's end to end software platform.

02:16.520 --> 02:21.520
And two days ago, we announced a partnership with ABB, one of the world's leading manufacturing

02:21.520 --> 02:23.960
automation companies.

02:23.960 --> 02:29.700
He goes on to say, quote, it's pretty cool to see Linux and open source technologies

02:29.700 --> 02:33.720
being pulled into these totally new markets in the industry.

02:33.720 --> 02:34.720
I agree.

02:34.720 --> 02:40.560
And he concluded with, quote, so my job is not to change anything, but to keep us executing

02:40.560 --> 02:43.240
and capturing the opportunities ahead.

02:43.240 --> 02:44.400
All right.

02:44.400 --> 02:49.880
I take that as CEOs speak to mean he's really not going to change anything too radically.

02:49.880 --> 02:54.160
He also had positive statements to make about the new CentOS development model, saying he

02:54.160 --> 02:58.520
believes that the contribution cycle wasn't really working in the previous model and that's

02:58.520 --> 03:04.900
now been corrected.

03:04.900 --> 03:12.440
After what feels like 100 darn years, the preempt RT patch set might finally get mainlined

03:12.440 --> 03:15.680
in the Linux 5.20 development cycle.

03:15.680 --> 03:21.600
Now if you're unfamiliar, the preempt RT patches turn the kernel into a near real time kernel

03:21.600 --> 03:27.520
by replacing various locking primitives with preemptible priority inheritance aware versions,

03:27.520 --> 03:33.440
enforcing interrupt threading and introducing mechanisms to break up long non preemptible

03:33.440 --> 03:34.440
sections.

03:34.440 --> 03:35.440
Right.

03:35.440 --> 03:40.520
And when you put all that together, it makes the kernel with a few low level exceptions

03:40.520 --> 03:46.000
fully preemptible and brings most execution context under the scheduler's control.

03:46.000 --> 03:51.560
For years now, there has been talk of these preempt RT patches coming to the mainline

03:51.560 --> 03:55.280
kernel, but it just never panned out.

03:55.280 --> 03:59.120
But there was a significant change earlier this year.

03:59.120 --> 04:04.160
Intel acquired the consulting firm behind the preempt RT patch set, Linutronics, and

04:04.160 --> 04:08.360
now they've been working more aggressively to get these mainlined.

04:08.360 --> 04:11.800
Kind of makes sense that you might need a little company backing for this.

04:11.800 --> 04:16.800
I mean it's a large set of patches and a lot of possible objections that could come

04:16.800 --> 04:19.080
from the existing kernel community.

04:19.080 --> 04:25.880
But fast forward a few months and now we seem to be down to just the two final blockers,

04:25.880 --> 04:30.480
which might just get sorted out in the next week or so with some of that work already

04:30.480 --> 04:32.400
underway.

04:32.400 --> 04:38.000
But ultimately we'll have to wait and find out in about two weeks if the patches actually

04:38.000 --> 04:43.420
make it into Linux 5.20, and that's assuming of course that there's no last minute objections

04:43.420 --> 04:50.680
from Linus or anyone else.

04:50.680 --> 04:54.020
From the Never Too Many Projects file this week, Google has announced what they hope

04:54.020 --> 04:59.560
is the eventual successor to C++, the Carbon programming language.

04:59.560 --> 05:06.000
Yeah, so far they're calling it quote, an experimental successor to C++.

05:06.000 --> 05:11.560
The hope here is that Carbon is a more natural migration path from C++ than to some of the

05:11.560 --> 05:15.720
other alternatives like, say, Rust.

05:15.720 --> 05:21.040
Carbon aims for performance that matches C++, seamless bi-directional interoperability with

05:21.040 --> 05:29.880
existing C++ codebases, an easier learning curve for C++ developers, comparable expressivity,

05:29.880 --> 05:32.440
and scalable migration.

05:32.440 --> 05:36.380
And Google's no slouch here, people tend to like the languages they create, they know

05:36.380 --> 05:37.920
what they're doing.

05:37.920 --> 05:43.540
And Carbon is built on top of the LLVM compiler stack, and aims to work for performance critical

05:43.540 --> 05:49.480
software and have easily understandable code and offer practical safety.

05:49.480 --> 05:53.680
I suppose the big question in my mind is, Carbon too late?

05:53.680 --> 06:00.280
I mean, we're seeing Rust support almost everywhere now, including maybe the kernel.

06:00.280 --> 06:05.400
Could so many existing modern languages already provide a really nice developer experience,

06:05.400 --> 06:08.360
and of course, have larger ecosystems?

06:08.360 --> 06:09.360
I agree, Wes.

06:09.360 --> 06:12.920
I did a little bit of digging around, tried to get an idea of where Google was coming

06:12.920 --> 06:19.000
from on this and read their GitHub and their announcement and some of their documentations.

06:19.000 --> 06:24.520
And what I took away from it is that Google seems to be arguing that C++ is just such

06:24.520 --> 06:25.680
a huge market.

06:25.680 --> 06:31.280
It is such a dominant language in the performance critical software arena.

06:31.280 --> 06:34.240
And that that user base isn't slowing down at all.

06:34.240 --> 06:38.920
Google believes that user base is continuing to grow at a large pace.

06:38.920 --> 06:43.340
So reading through their materials, I think that's their target is not necessarily developers

06:43.340 --> 06:47.960
using one of these modern languages like, you know, maybe Go.

06:47.960 --> 06:53.200
But they're looking for something that really appeals to existing C++ developers.

06:53.200 --> 06:55.680
Yeah, that does kind of make sense, right?

06:55.680 --> 06:59.520
If you're an existing C++ developer, maybe you're an enthusiast, maybe you're taken

06:59.520 --> 07:02.640
by Rust, but it's quite a different language.

07:02.640 --> 07:06.400
And if you're just trying to get your day job done, you might not have a bunch of time

07:06.400 --> 07:11.000
to learn a radically different language and still hit your product deadlines.

07:11.000 --> 07:15.040
And that's maybe why Google isn't really looking at Rust as competition.

07:15.040 --> 07:19.760
They're looking at folks who are already using C++ in their day to day life, and trying to

07:19.760 --> 07:23.720
make carbon an easy migration path so they can gradually shift things over.

07:23.720 --> 07:25.920
That's where that easy interoperability comes in, right?

07:25.920 --> 07:29.840
So you can sort of have some of your code base in carbon, and the rest of it in C++,

07:29.840 --> 07:32.980
at least until you have time to move it over.

07:32.980 --> 07:38.440
They really stress that carbon is taking a quote, successor language approach.

07:38.440 --> 07:40.040
We'd like to know your thoughts, though.

07:40.040 --> 07:42.160
Is Google onto something with carbon?

07:42.160 --> 07:49.600
Send us your feedback or send us a boost.

07:49.600 --> 07:54.500
Well I never thought I'd say this in a million years, but ByteDance, the Chinese company

07:54.500 --> 08:00.640
behind TikTok, has been working on a number of Linux kernel optimizations for the past

08:00.640 --> 08:01.640
few years.

08:01.640 --> 08:08.880
And, well, their most recent work almost seems purpose-built for one man, Wes Payne.

08:08.880 --> 08:10.860
What are these mysterious improvements?

08:10.860 --> 08:14.120
It's faster KExec rebooting, of course.

08:14.120 --> 08:18.840
Now my love of KExec aside, really this makes sense when you think about how modern data

08:18.840 --> 08:20.760
centers run Linux.

08:20.760 --> 08:25.780
When you have a fleet of thousands of servers, shaping off even a few milliseconds off the

08:25.780 --> 08:29.120
reboot time can make a huge difference.

08:29.120 --> 08:35.640
Now ByteDance, like many other large organizations, or, you know, myself, rely on KExec reboots

08:35.640 --> 08:41.080
to move to a new kernel, either for security, maintenance, or optimization.

08:41.080 --> 08:46.920
By using KExec, they avoid the significant downtime of those servers posting and doing

08:46.920 --> 08:49.560
all the pre-kernel boot-up steps.

08:49.560 --> 08:53.840
That stuff does seem like it takes forever, but even when you're using KExec to switch

08:53.840 --> 08:58.640
to a new kernel and avoid all the hardware initialization and bootloader stuff, in its

08:58.640 --> 09:03.840
current form, that can be too dang slow when you've got thousands of servers.

09:03.840 --> 09:09.080
And that's what's so great about this, quote, faster KExec reboot patch series that aims

09:09.080 --> 09:14.080
to reduce the current 500 millisecond timeline down to just 15.

09:14.080 --> 09:18.200
Wow, I mean, that really, when you think about it at scale, is significant.

09:18.200 --> 09:21.960
So how do they manage to squeeze out all that performance?

09:21.960 --> 09:28.640
Well, they did it by optimizing everywhere they could, just like a few areas, to just

09:28.640 --> 09:30.840
give you an example.

09:30.840 --> 09:35.260
They looked at using uncompressed kernel images to speed up the boot process to avoid the

09:35.260 --> 09:39.720
time of having to decompress the kernel, and then they made optimizations for how that

09:39.720 --> 09:44.040
gets copied around in memory, and then they have a patch in there for reusing the crash

09:44.040 --> 09:47.820
kernel reserved memory for normal KExec operations.

09:47.820 --> 09:53.040
And they note that when they enabled the uncompressed kernel on x86 systems alone, that shaved off

09:53.040 --> 09:55.120
150 milliseconds right there.

09:55.120 --> 09:57.120
That's a huge return.

09:57.120 --> 10:04.060
It did mean, though, their kernel image went from 8.5 megabytes to 53 megabytes.

10:04.060 --> 10:06.480
But all in all, the patch itself is small.

10:06.480 --> 10:09.960
It's only 100 lines of code that need to be added to the Linux kernel.

10:09.960 --> 10:15.040
And well, ByteDance hopes to have all of that upstreamed in the near future.

10:15.040 --> 10:20.080
And I guess this story just tells us that thanks to the GPL, even something good can

10:20.080 --> 10:25.880
come out of TikTok.

10:25.880 --> 10:31.880
A very special acknowledgement to This Week in GNOME for recently reaching one full year

10:31.880 --> 10:37.160
of weekly publications on the developments going on in the GNOME world.

10:37.160 --> 10:42.040
Curated by Felix Hocker, if you're a GNOME fan, it's a great time to catch these weekly

10:42.040 --> 10:43.040
developments.

10:43.040 --> 10:49.080
With the first alpha of GNOME 43 just out, and really, a generally impressive amount

10:49.080 --> 10:51.840
of things happening right now.

10:51.840 --> 10:55.600
Don't worry though, if you're a Plasma fan, we've also got a link to Nate's excellent

10:55.600 --> 11:02.120
This Week in KDE in the show notes.

11:02.120 --> 11:04.160
Linode.com slash LAN.

11:04.160 --> 11:09.840
Linode offers options for developers and businesses that don't want the complexities of hyperscalers,

11:09.840 --> 11:11.680
and you don't need their endless options.

11:11.680 --> 11:16.360
They just make it simple, affordable, and accessible to deploy and manage your projects

11:16.360 --> 11:19.720
or your customers' projects in the cloud.

11:19.720 --> 11:22.680
And Linode does it for a better price and better performance.

11:22.680 --> 11:24.920
I've tried them all and Linode does it the best.

11:24.920 --> 11:29.560
That's why we run everything we've built for the last few years on Linode.

11:29.560 --> 11:33.240
I mean, if you're like us too, as a Linux user, you kind of can tell that they love

11:33.240 --> 11:34.240
Linux too.

11:34.240 --> 11:37.360
Like, you know how Linux users, we just can tell when there's like another Linux user

11:37.360 --> 11:41.200
that especially when it's a product like Linode where you're dealing with the system, and

11:41.200 --> 11:45.040
you can hit a button and they give you the actual commands to run and I really appreciate

11:45.040 --> 11:47.720
that that it permeates everything they've done over the years.

11:47.720 --> 11:48.800
It's why they got into this.

11:48.800 --> 11:52.640
And now they have some of the best support, some of the best performance, 11 data centers

11:52.640 --> 11:57.960
for you to choose from, great features like object storage, cloud firewall, nice, easy

11:57.960 --> 12:02.240
to understand backups that are going to make you feel confident your data and your systems

12:02.240 --> 12:05.840
are completely backed up, and so much more.

12:05.840 --> 12:06.840
So go try it.

12:06.840 --> 12:10.320
Go learn something, go build something and get $100 and it's a great way to support the

12:10.320 --> 12:11.560
show too.

12:11.560 --> 12:19.640
Kick the tires and support the show, linode.com slash LAN.

12:19.640 --> 12:23.920
And thank you to Kalyde, Kalyde.com slash LAN.

12:23.920 --> 12:27.480
Kalyde is an endpoint security solution that uses the most powerful untapped resource in

12:27.480 --> 12:29.160
IT, the end users.

12:29.160 --> 12:32.880
You know, when you're trying to achieve security goals, maybe it's for yourself or a third

12:32.880 --> 12:37.000
party audit, I used to work for a bank, we had certain things we just had to follow in

12:37.000 --> 12:39.080
order to be FDIC insured.

12:39.080 --> 12:44.480
Old school device management like MDMs, they force disruptive agents that end users hate.

12:44.480 --> 12:48.280
That kind of creates this dynamic between end users and IT that's no good.

12:48.280 --> 12:51.080
I have been on both sides of it.

12:51.080 --> 12:56.560
It also creates other little side problems and sometimes security problems as well.

12:56.560 --> 12:58.640
Kalyde does things differently.

12:58.640 --> 13:04.000
Instead of forcing changes on users, Kalyde sends them security recommendations via Slack.

13:04.000 --> 13:08.280
Kalyde will automatically notify your team when devices are insecure, and then it gives

13:08.280 --> 13:12.200
them a step by step instruction on how to solve that problem.

13:12.200 --> 13:16.080
And by reaching out to employees with a friendly Slack DM, and then educating them about company

13:16.080 --> 13:22.200
policies, Kalyde can help you build a culture in which everyone contributes to security,

13:22.200 --> 13:26.840
because everyone understands why and how to do it.

13:26.840 --> 13:31.280
For IT admins, Kalyde provides just a single dashboard, a beautiful dashboard, as you might

13:31.280 --> 13:34.560
say, that lets you monitor the security of your entire fleet.

13:34.560 --> 13:37.280
You can be on a Mac, Windows or Linux, it's all going to work.

13:37.280 --> 13:42.320
And you can see at a glance which employees have their disencrypted OS up to date, password

13:42.320 --> 13:47.740
managers installed, you know, that kind of stuff, make it easy for audits, for leadership,

13:47.740 --> 13:48.960
and just for yourself.

13:48.960 --> 13:54.860
So that's Kalyde, user-centered cross-platform endpoint security for teams that Slack.

13:54.860 --> 13:59.560
You can meet your compliance goals by putting users first.

13:59.560 --> 14:02.640
Visit Kalyde.com slash land to find out how.

14:02.640 --> 14:06.080
And you go there, you're also going to get hooked up with a goody bag that includes a

14:06.080 --> 14:10.440
free t-shirt just for activating a free trial.

14:10.440 --> 14:22.280
So that's K-O-L-I-D-E dot com slash land, Kalyde dot com slash land.

14:22.280 --> 14:27.620
The BUNNERFS file system has many advanced features, and it's seen a significant amount

14:27.620 --> 14:31.080
of development in just the last few years.

14:31.080 --> 14:36.880
But one feature it still lacks is native file system encryption.

14:36.880 --> 14:42.400
Fortunately though, there are patches in development right now that aim to provide exactly that

14:42.400 --> 14:44.080
functionality.

14:44.080 --> 14:49.540
Now sure, you might say, BUNNERFS can already run off dmcrypt, lux, encrypted partition,

14:49.540 --> 14:52.800
or make use of some tool like eCryptFS.

14:52.800 --> 14:57.720
But this in-progress patch set is leveraging the native encryption framework already present

14:57.720 --> 15:26.560
in the kernel known as FSCrypt.

15:26.560 --> 15:32.160
Now it appears that this work actually started sometime last year, but just now it's finally

15:32.160 --> 15:35.760
in a state that the developer wants to get some feedback.

15:35.760 --> 15:40.760
Writing in the draft, quote, my goal in sending out this RFC is to get feedback on whether

15:40.760 --> 15:44.040
these are going in a reasonable direction.

15:44.040 --> 15:49.160
While there are a couple of additional parts, they are fundamentally minor compared to this.

15:49.160 --> 15:53.440
And all of this is early code obviously, so it means not everything is fully implemented

15:53.440 --> 15:57.880
yet, such as encryption for inline data extents and compressed data.

15:57.880 --> 16:01.760
There's also going to need to be some work on adding additional file system tests that

16:01.760 --> 16:07.520
can properly run BUNNERFS through its paces with the new encryption built in.

16:07.520 --> 16:12.440
But really, the remaining work is pretty darn minor compared to what the developer has already

16:12.440 --> 16:13.440
accomplished.

16:13.440 --> 16:14.720
Yeah, it's pretty great to see this.

16:14.720 --> 16:20.620
I have had BUNNERFS in production for several years now, and I remain quite convinced it's

16:20.620 --> 16:24.280
one of the best file systems for my Raspberry Pi 4 servers.

16:24.280 --> 16:30.520
But even on our bigger boxes, a root file system with transparent file system compression,

16:30.520 --> 16:36.240
copy on write support, and snapshots all with just built in kernel support, that has proven

16:36.240 --> 16:38.800
to be extremely useful.

16:38.800 --> 16:40.720
It really has.

16:40.720 --> 16:46.240
And you know, with ZFS just somewhat recently adding native encryption itself, I mean, we

16:46.240 --> 16:50.000
got to keep up with those BSDs, right?

16:50.000 --> 16:54.860
So soon, you'll have that native encryption added to the list of great BUNNERFS features

16:54.860 --> 17:00.140
that you just get for free with a standard kernel.

17:00.140 --> 17:03.760
And you know, Chris, it seems like it might actually make a ton of sense for your Pi's

17:03.760 --> 17:09.240
because it's a pretty darn easy device for someone to walk away with.

17:09.240 --> 17:13.560
Having an even better way to encrypt your data, it's going to be a nice upgrade and

17:13.560 --> 17:16.600
totally worth the price.

17:16.600 --> 17:21.440
The price of one free kernel, and you can see this scenario on laptops too, a single

17:21.440 --> 17:27.440
SSD, BUNNERFS can make a lot of sense, and why not have the best protection possible?

17:27.440 --> 17:29.320
All you had to do was install Linux.

17:29.320 --> 17:32.260
So of course, we're going to keep an eye on this development, and we'll give it a spin

17:32.260 --> 17:34.040
when it ships and tell you what we think.

17:34.040 --> 17:37.600
So don't miss a single episode of Linux Action News.

17:37.600 --> 17:42.880
Be sure you go to LinuxActionNews.com slash subscribe for all the ways to get new episodes.

17:42.880 --> 17:48.440
And LinuxActionNews.com slash contact to tell us why we should just be using CFS, darn it.

17:48.440 --> 17:52.640
And we'll have a link in the show notes to the podcasting 2.0 episode 94, Bell's Out.

17:52.640 --> 17:58.400
I joined Dave and Adam to talk about the podcasting industry, advertising, where things are going,

17:58.400 --> 18:00.520
Spotify, and so much more.

18:00.520 --> 18:04.360
As for this year's podcast, well, don't worry, we'll be back next week with our take on the

18:04.360 --> 18:07.600
latest Linux and open source news.

18:07.600 --> 18:08.600
Thanks for joining us.

18:08.600 --> 18:24.760
And that's all the news for this week.


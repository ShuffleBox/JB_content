Hello, and welcome to Linux Action News, Episode 234, recorded on March 30th, 2022.
I'm Chris.
And I'm Wes.
Hello, Wes.
Let's do the news.
And we start with the story that was sent into the show by far the most this week.
The recently refreshed Rolling Remix of the Ubuntu Desktop, codenamed Rolling Rhino.
This new Remix builds on the work our friend Martin Wimperis kicked off, although that
was mostly on a lark, if I recall, right, Chris?
It seemed.
So, you know, Wimpy was really on this a little while ago.
Others have talked about this.
I mean, I actually kind of feel like this idea of a rolling Ubuntu has been popping
up in one form or another for years, maybe since 1804 shipped.
I feel like it's been in the conversation, at least in the background.
I think this idea just appeals to some hardcore Ubuntu users who love Ubuntu as a base, love
that environment, but they just want the freshest package as possible.
Maybe they're an enthusiast, maybe they're a developer, something like that.
The Rolling Rhino website describes the project as the following, quote, Rolling Rhino Remix
is an unofficial Ubuntu flavor which converts the Ubuntu operating system into a rolling
Linux distribution that tracks the development series.
The project also highlights the primary tool they've created to help smooth this whole
new rolling process out, quote, the main tool we've created is Rhino Dash Update.
It will ensure that system updates are ran smoothly and extends the capabilities of what
apt is able to provide.
Well, that sounds fascinating.
And yeah, at this point, apt might need a little help if it's going to be doing some
radical new package promises.
Yeah, yeah.
Huh.
That's a good point.
I wonder what's this is probably something I'm going to throw in a VM to be honest with
you.
I was debating it up until this point.
And then when I saw that tool, I'm like, hmm, nope, gonna give this a go because it sounds
really handy.
It's also nice to see that this has the blessing of our buddy Wimpy.
He's been helping with this renewed effort, it seems filing some bug reports, responding
to team questions, obviously, giving the okay to use the project name.
So you know what, I'm all for this.
I think this is great to see.
I'm really glad this has a couple of developers behind it.
Now I hope they continue and I hope that team grows.
And even though I don't suspect that I'm the target user, because I like probably a lot
of Ubuntu users, I've just kind of adapted to that release model.
So if I deploy Ubuntu on a system, that's probably a box, I don't expect is going to
change very often.
So the end user that I see this is probably going to be the most suitable for would be
a developer, a developer who's likely trying to target the next iteration of the Ubuntu
platform.
And in that scenario, I could see this being a very handy release, and potentially one
that's worth keeping around in a VM by us enthusiasts, just to see where Ubuntu is going.
I use Rhino, by the way.
Continuing off my remarks from the last chapter, and maybe I should be running it on AMD hardware,
at least at this rate, Michael Larble over at Ferronix continues to be hot on the trail
of new AMD Linux positions, writing this week that AMD is recruiting more engineers to better
support the Linux platform, and also develop support for Compute Express Link under Linux.
We've really been watching AMD kind of take a whole corporate level commitment, like the
entire corporate stack, a commitment to Linux and Linux support over the last year and a
bit.
And this is good to see because AMD is part of the Compute Express Link organization,
part of that group that is pushing that standard.
So it's kind of important that some of the key members of that standard are putting their
money where their mouth is and supporting Linux development.
And that's exactly what we're seeing with these new AMD positions.
And by the way, if you're not familiar, the Compute Express Link is an industry supported
cache coherent interconnect for CPUs, memory expanders and accelerators, you know, basically
all the plumbing you might need to make things go fast.
And it's backed by the CXL Consortium, which calls itself an open industry standard group.
Don't you just love it when a good thing keeps getting better?
Wire Plumber 0.4.9 is now out.
And it properly exposes surround sound support to those Linux games that support Dolby 5.1.
Yeah, a little disappointed if you go and invest in that surround sound system and then
Linux breaks it.
It looks like actually the fix landed in Wire Plumber approximately a month or so ago.
And it was the relaxation of format parsing within the SI audio adapter module that actually
appears to be the thing that fixed the issue.
This latest release has a whole lot more than that though.
I mean, there's the sort of usual crash stability improvements, but it also addressed a kind
of nasty race condition within the Zoom desktop app, which could have resulted in your audio
sharing to fail, which that's never a great impression.
It also adds Brave and Edge and Vivaldi and Telegram all to the Bluetooth auto switch
application list, which should be a pretty smooth little experience.
But then there's just a whole bunch of other fixes and improvements.
Linode.com slash LAN.
Go there to get $100 in 60 day credit on a new account and you go there to support the
show.
Linode is cloud computing made simple, affordable and accessible to all.
It's what we use for everything we've built in the last two and a half years and it constantly
gets better.
I just did a free upgrade to their new MVME storage and it's blazing fast.
So take advantage of our $100 offer and deploy Linode on your own and experience what it
can do.
Kick the tires and support the show.
Linode.com slash LAN.
And thanks to Ting.
Linux.ting.com.
I've been a Ting customer since 2013 because they offer great nationwide coverage on the
big duopoly carrier networks, but at a price and with customer support, nobody can touch.
Ting was recently named the number one carrier by Consumer Reports in 2021.
There's a plan for everybody starting around $10 a month and up from there and every plan
gets access to Ting's award-winning customer service and nationwide LTE and 5G coverage
and no contracts ever.
So go to linux.ting.com.
And we wrap things up this week with a series of impressive updates from the Linux kernel
team.
Let's start with a problem that I'm sure impacts just about everyone listening.
You have gosh darn so many NVMe disks that Linux takes too long to shut down.
Well apparently some people do have that problem, including the folks at Google who wrote into
the mailing list, quote,
Some of our machines are configured with many NVMe devices and are validated for strict
shutdown time requirements.
Each NVMe device plugged into the system typically takes about 4.5 seconds to shut down.
So a system with 16 such devices takes approximately 80 seconds to shut down and reboot.
It's rough, you know, 16 NVMe disks, it's just rough.
The register actually does give us some context on this problem they write.
The problem is that the kernel's drive shutdown function is synchronous.
For each drive it waits for the shutdown command to complete before carrying on to the next.
The new kernel patch does exactly the same thing, but changes the way that the calls
are issued to be asynchronous.
It issues the call to the first drive, then immediately moves on to the next, and it works
its way down the list when they all return the desired status, the job is done.
Well while we save up to buy some more NVMe disks, let's take a look at the upcoming
Linux 5.18 release, which is shaping up to be another barn burner.
And one area that's getting a kick in the pants is 64-bit ARM support, adding a shadow
call stack, thanks to the work of Alibaba.
Yeah, the shadow call stack is an instrumentation pass, that's what they call it, and it's
currently only implemented for ART64 systems, but it protects programs against the return
address overwrites, which is essentially, I guess, a stack buffer overflow.
Yeah, it works something like this, when the compiler sees code that's calling into
another function, it first emits code that creates a separate, quote, shadow call stack,
and then saves the function's return address to that shadow call stack before continuing
on.
Once whatever function that was being called is complete and has done its work, the compiler
ignores whatever return address is on the real call stack, and instead uses that value
it sneakily stored on the shadow stack to jump back to the calling original function.
Why bother to go through all this work?
Well, the idea is that if anyone malicious on the system tampered with the real call
stack, which, you know, that's the first place you'd look, it doesn't actually interfere
with the intended control flow.
Sticking with 5.18 for just a bit longer, support for Intel's hardware feedback interface
landed in the thermal subsystem, and the Linux 5.18 power management updates that have landed
look noteworthy.
Yeah, it seems that both AMD and Intel have received important piece-date improvements
this time around.
And in conjunction with some other bits of work, this should give the OS more governance
over the power state the system is in, as well as the idle states of the CPU, all of
which should work together to provide more efficient power usage, and hey, maybe better
battery life to boot.
Now, it's not all good news in 5.18.
It seems our collective cries to save the once great Ryzer FS have not been heard.
Or there were just no calls.
Either way, it seems there is now consensus among the upstream kernel developers to deprecate
Ryzer FS.
Given that there are no notable users of it any longer, the code is barely maintained,
and it's hard to come up with a single legitimate reason to keep it, especially when you have
modern alternatives like ButterFS and XFS.
So the plan is to treat it as deprecated and then formally remove it from the mainline
kernel in 2025.
So long Ryzer FS.
Don't worry though, it's not all bad file system news.
There's some good news this time around, at least for XFS users.
We hope.
The XFS file system changes.
Now it's not actually in 5.18, those changes are mostly bug fixes, important as those are.
But after the 5.18 cycle is complete, it seems that there are some major changes potentially
planned.
Yeah, this came to light after a comment by the XFS maintainer Derek Wong.
He writes, Dave Chinner will be taking over as the XFS maintainer for one release cycle,
starting from the day 5.18 RC1 drops until 5.19 RC1 is tagged, so that way Derek can
focus on starting a massive design review for the online repair feature.
That could be pretty big, so we'll have more details on that when it gets closer.
Our final story today is one we've been following for a bit of time, with an excellent update
this week from LWN.
Back in mid-February, LWN first reported on the plan to unite the two kernel devices that
provide random numbers, effectively making one just a pointer to the other.
And that change made it as far as the mainline during Linux 5.18's merge window, but it was
actually quickly reverted when problems were found.
So it may be possible, LWN reports, that this unification work will continue someday, as
they put it, but for now there's just production environments that need their random numbers
early on in the boot process and can't wait for the entropy to be available or rely on
that Linus jitter dance.
What is the Linus jitter dance, you ask?
Well, fair question.
Well, for several years now, it's a procedure that's been used during boot time to take
advantage of CPU execution time differences to initialize the pool of random numbers in
less than a second.
It basically uses difference in code execution speed of repetitive operations due to just
the sort of inherent unpredictability in modern CPUs, you know, from things like caches, branch
prediction, that kind of thing.
That actually sounds really clever, but a day after the code was merged, a bug report
came rolling in reporting, quote, a large number of QMU boot test failures for various
architectures, and the submitter noted that the common denominator in those boot hangs
was one error message, and it read, quote, saving random seed.
During the user's troubleshooting, they tracked the issue down to that new unified random
number device generator and noted that when they reverted that change, the problems went
away.
You know, it can be tricky on things in data centers or yeah, especially virtualized situations
where you just don't have access to a lot of real physical devices with unpredictable
behavior.
So for now, the kernel team is keeping things the way they've always been, and the generator
unification must wait for another day.
But all that said, it does seem like there's more thought and work going into Linux is
random number generation systems these days, and that's got to be a good thing.
I am impressed with the amount of energy and focus all these different deep layers of the
kernel are getting and we've been talking about device drivers rewritten in rust, critical
power support for the different primary CPU platforms, this AMD stuff coming in the file
system improvements.
Every level in there seems like it's getting some attention right now.
And that's just so impressive for a project the age and size of the Linux kernel.
We'll keep an eye on all those developments and everything else happening in the world
of Linux and open source news and keep you posted.
So make sure you get every single episode by going to linuxactionnews.com slash subscribe
for all the ways to get new episodes.
And don't forget linuxactionnews.com slash contact for ways to get in touch.
If you'd like to get Linux action news ad free become a member at Jupiter.party and
get all of the network shows ad free with all of their extra special content.
Either way, we'll be back next week with our take on the latest Linux and open source news.
Thanks for joining us.
And that's all the news for this week.

WEBVTT

00:00.000 --> 00:08.920
Hello, and welcome to Linux Action News, episode 255, recorded on August 24th, 2022.

00:08.920 --> 00:10.120
I'm Chris.

00:10.120 --> 00:11.120
And I'm Wes.

00:11.120 --> 00:12.120
Hello, Wes.

00:12.120 --> 00:13.360
Let's do the news.

00:13.360 --> 00:19.440
We start this week with a story for those of us with just too dang many CPU cores and

00:19.440 --> 00:21.640
not enough time.

00:21.640 --> 00:27.720
Multiple efforts are now underway to improve the boot time for ARM or RISC-V systems that

00:27.720 --> 00:30.560
use Kexec.

00:30.560 --> 00:34.840
Every now and then we have a story that I feel like was custom written for Wes Payne.

00:34.840 --> 00:40.240
We recently even covered another effort underway by the folks at TikTok to optimize how the

00:40.240 --> 00:45.040
kernel image compression is handled during a Kexec boot or shutdown.

00:45.040 --> 00:49.560
But now there's new work seemingly underway from either an individual or at least a small

00:49.560 --> 00:51.580
group sharing a Gmail account.

00:51.580 --> 00:58.200
And this new set of patches allows the kernel to bring down CPU cores in parallel.

00:58.200 --> 01:04.320
Before we get into the details, a little background for those of you maybe not Kexec enthusiasts.

01:04.320 --> 01:10.060
It's an abbreviation for kernel execute, and it allows an admin to reboot or boot into

01:10.060 --> 01:16.520
an entirely different new kernel without going through the usual posting process of a typical

01:16.520 --> 01:17.520
startup.

01:17.520 --> 01:23.960
So, this lets you perform faster system reboots, get to skip all that slow hardware initialization,

01:23.960 --> 01:29.720
or you can boot into a very different kernel perhaps to perform a function like crash recovery.

01:29.720 --> 01:38.900
Now, currently carrying out a Kexec reboot on RISC-V or a 64bit ARM system, well it can

01:38.900 --> 01:44.560
be a little bit painful, at least if you're lucky enough to have a high core count system,

01:44.560 --> 01:51.920
since each CPU core is shut down one at a time, one after another.

01:51.920 --> 01:56.680
To underscore that point, the patch author points out that with this new work, an 80

01:56.680 --> 02:01.080
core ARM server can do a Kexec reboot in just one second.

02:01.080 --> 02:03.840
Previously, that took almost 15 seconds.

02:03.840 --> 02:07.760
Yeah, now you add that up like across infrastructure like AWS.

02:07.760 --> 02:12.000
Oh man, now you're talking a real savings.

02:12.000 --> 02:15.060
That's a game changer for some of these big cloud providers.

02:15.060 --> 02:20.040
And other architectures like x86-64 and Power, well yeah, no surprise there.

02:20.040 --> 02:23.760
They've already solved this a little while ago when using Kexec, so they're not currently

02:23.760 --> 02:27.880
bottlenecked by that serialized style of shutdown of the CPU cores.

02:27.880 --> 02:33.000
So with a bit of luck, these 10 patches could soon be mainlined, and well, at least our

02:33.000 --> 02:35.240
Westpane will be delighted about it.

02:35.240 --> 02:40.600
But one thing that I'd like a little more clarity about is if these two efforts have

02:40.600 --> 02:42.000
any connection at all.

02:42.000 --> 02:47.480
It seemed on first pass they didn't, but I think I'd like more details there.

02:47.480 --> 02:50.220
Yeah, it is a little bit curious.

02:50.220 --> 02:55.120
Why all this work on Kexec just right now?

02:55.120 --> 02:59.160
Perhaps it's the intersection of some of these new architectures really gaining in popularity

02:59.160 --> 03:04.420
lately, and then perhaps also a bit of Kexec being viewed as something of a curiosity,

03:04.420 --> 03:08.080
at least by us desktop dominant folks at times.

03:08.080 --> 03:13.560
But I suspect it may see more use in production than we really give it credit for.

03:13.560 --> 03:18.680
But as always, if you have more details, or heck, if you're using Kexec in production,

03:18.680 --> 03:26.920
let us know in our matrix room or linuxactionnews.com slash contact.

03:26.920 --> 03:31.320
And speaking of RISC-V devices, Star 5 Tech out of Shenzhen, China has launched their

03:31.320 --> 03:37.440
first Kickstarter to fund a small board computer in the spirit of a Raspberry Pi, but loaded

03:37.440 --> 03:39.440
with a RISC-V chip.

03:39.440 --> 03:46.120
And I have to say, it's been a really long time since a crowd funder sucked me in and

03:46.120 --> 03:47.760
I funded anything.

03:47.760 --> 03:54.760
But the Vision 5 II got me, I have backed a unit that claims it will ship in November.

03:54.760 --> 04:04.540
At the core of that unit, well, it's the Star 5 64-bit CPU, featuring quad Si5 1.5GHz cores.

04:04.540 --> 04:10.200
And in a larger change from the Vision 5 II's predecessor, this thing's got an Imagination

04:10.200 --> 04:16.040
BXE432 graphics processing unit, which should do some of the heavy lifting if you're using

04:16.040 --> 04:18.600
this for desktop or graphical workloads.

04:18.600 --> 04:24.480
Yeah, so the device itself, it's in a rough footprint of a Raspberry Pi, I'll say.

04:24.480 --> 04:32.880
But unlike the Pi, the Vision 5 II also has eMMC on board and an M.2 keyslot for an SSD.

04:32.880 --> 04:42.160
As well as a standard 40-pin GPIO header, HDMI, multiple USB, and two, yes two, ethernet

04:42.160 --> 04:43.160
ports.

04:43.160 --> 04:49.440
Now, the Kickstarter is offering a super early bird special version which has different ethernet

04:49.440 --> 04:50.560
ports.

04:50.560 --> 04:55.280
One supports 10 or 100 megabits, while the other is gigabit only.

04:55.280 --> 04:58.680
But all other aspects remain the same.

04:58.680 --> 05:05.320
Impressively, the Kickstarter has already reached its goal and within 24 hours to boot.

05:05.320 --> 05:16.680
Aiming to hit 28k from the start, the campaign has raised nearly 40k as we record.

05:16.680 --> 05:19.720
Just a quick note to let you know about an important election coming up.

05:19.720 --> 05:24.580
The 2022 election for members of the Linux Foundation's Technical Advisory Board, known

05:24.580 --> 05:29.400
as TAB, will be held during the Linux Plumbers Conference coming up on September 12th to

05:29.400 --> 05:30.960
the 14th.

05:30.960 --> 05:36.720
The TAB represents the kernel development community to the Linux Foundation and beyond,

05:36.720 --> 05:40.440
and holds a seat on the Foundation's Board of Directors.

05:40.440 --> 05:44.040
The call for nominees for this year's election has already gone out.

05:44.040 --> 05:51.060
The deadline for nominations is September 12th.

05:51.060 --> 06:09.360
And yes, it's still mainly written in Perl.

06:09.360 --> 06:13.360
As you might expect, Webmin 2.0 has been in the works for years.

06:13.360 --> 06:18.160
Initially, the goal of the 2.0 release was focused on removing the legacy support that

06:18.160 --> 06:21.560
had built up over the many years of development.

06:21.560 --> 06:27.520
But as time has gone on, Webmin 2.0 has become more of an incremental update over the 1 series.

06:27.520 --> 06:31.440
There are some nice visual improvements for sure, support for multiple versions of Webmin

06:31.440 --> 06:38.340
installed on a system with SystemD, and it's great to see support for AMD CPU temperatures.

06:38.340 --> 06:45.080
You know, just in general, it's impressive to see a project continue on after 25 years.

06:45.080 --> 06:47.560
It's still developed, it's still in use.

06:47.560 --> 06:50.720
We should just take a moment to acknowledge that this is providing a lot of value to folks

06:50.720 --> 06:52.200
out there.

06:52.200 --> 06:57.440
In this particular release, the project seems to be focusing on enforcing HTTP strict transport

06:57.440 --> 07:04.240
security as well as adding better HTTP to HTTPS redirects when you've got SSL enabled.

07:04.240 --> 07:10.320
That's a good thing to see on your remote web interface to admin your box.

07:10.320 --> 07:12.040
I'm really glad they enabled that.

07:12.040 --> 07:15.680
I also though, I'm just really happy to see the project continue.

07:15.680 --> 07:18.520
And it's not like they haven't had any releases over the years, we're having a bit of fun

07:18.520 --> 07:19.520
here.

07:19.520 --> 07:25.360
In fact, their previous release, version 1.999-2 was released on August 4th, and the release

07:25.360 --> 07:29.280
before that, July 25th, and July 13th before that.

07:29.280 --> 07:34.480
So really the 1.0 series has seen many updates over the years.

07:34.480 --> 07:37.360
It's just not something I use anymore.

07:37.360 --> 07:42.960
But there was a time in the early 2000s when Webmin helped me bridge that gap in a world

07:42.960 --> 07:47.320
where I had Windows and Linux servers and I needed to transition, especially when I

07:47.320 --> 07:51.720
was learning Linux service management and things like XynetD and Apache virtual hosts

07:51.720 --> 07:54.080
and the basics of Samba.

07:54.080 --> 07:59.000
Webmin gave me a UI to figure that stuff out, and having a standard tool I could load on

07:59.000 --> 08:08.240
my Red Hat boxes, my Debian machines, and my Mandrake systems was really valuable.

08:08.240 --> 08:12.520
The Latpack 1.14.0 is out this week.

08:12.520 --> 08:16.800
It's the culmination of several months of work by dozens of people, and it brings a

08:16.800 --> 08:22.120
variety of lower level improvements, as well as correcting an issue that could lead to

08:22.120 --> 08:23.120
memory corruption.

08:23.120 --> 08:25.520
Well, that's always good to see.

08:25.520 --> 08:29.920
You know, there's a lot in 1.14, but I think what our listeners are going to find most

08:29.920 --> 08:33.440
interesting are the improvements to the command line tools.

08:33.440 --> 08:37.520
I've always sort of personally felt that the command line interface to Flatpak wasn't quite

08:37.520 --> 08:42.640
as good as it could be, and did not always expose all of the information that the user

08:42.640 --> 08:43.640
needed.

08:43.640 --> 08:49.320
So now with 1.14, the command line interface has seen many improvements, a couple of them

08:49.320 --> 08:50.960
I think are essential.

08:50.960 --> 08:56.000
One is the user will now be properly informed of apps that are using an end of life runtime

08:56.000 --> 08:57.000
extension.

08:57.000 --> 09:00.000
That's good for security reasons, obviously.

09:00.000 --> 09:05.340
And when the user uses the uninstall command, it will now ask for confirmation before removing

09:05.340 --> 09:10.400
a runtime or runtime extension that another Flatpak is depending on.

09:10.400 --> 09:14.840
Yeah, that's a pretty big deal right there.

09:14.840 --> 09:20.320
But really, maybe the bigger picture with Flatpaks is, I think we've hit the era of

09:20.320 --> 09:21.320
polish.

09:21.320 --> 09:26.800
You know, the base technology of delivering containerized applications, that's basically

09:26.800 --> 09:27.800
solved.

09:27.800 --> 09:32.720
At this point, we can ship just about any application in one of these universal formats,

09:32.720 --> 09:36.200
even something as complicated as, say, Steam.

09:36.200 --> 09:40.380
And Flatpak seems to have wider and wider community adoption just about every single

09:40.380 --> 09:42.520
week it seems these days.

09:42.520 --> 09:43.760
I think you're right, Wes.

09:43.760 --> 09:52.000
I think the challenges that still need to be solved now are social ones.

09:52.000 --> 09:56.720
We rarely draw attention to individual releases of web browsers.

09:56.720 --> 10:02.560
But with Firefox 104, released on August 23rd, there was a feature we thought you might like

10:02.560 --> 10:04.760
to know about.

10:04.760 --> 10:08.880
Among a few others, like commercial desktops getting the ability to measure the actual

10:08.880 --> 10:14.800
power usage of a website, one thing we're all getting is a new feature for the Firefox

10:14.800 --> 10:16.720
UI itself.

10:16.720 --> 10:20.720
Or maybe I should say, it's a lack of features?

10:20.720 --> 10:26.000
Starting with version 104, when Firefox is hidden under another window or minimized,

10:26.000 --> 10:31.960
the entire UI will be throttled for performance and for improved battery impact.

10:31.960 --> 10:35.400
Much like how idle background tabs get throttled already.

10:35.400 --> 10:40.200
Overall, Firefox has had a string of excellent releases lately.

10:40.200 --> 10:49.360
And if you haven't checked it out for a bit, it really might be time to revisit the Fox.

10:49.360 --> 10:51.440
Linode.com slash LAN.

10:51.440 --> 10:55.400
Go there to get $100 in 60-day credit on a new account, and it's just a great way to

10:55.400 --> 10:57.720
support the show while trying something great out.

10:57.720 --> 11:01.680
This here show is made possible by you taking advantage of our sponsors, and Linode is one

11:01.680 --> 11:06.200
that we can enthusiastically endorse here on the show.

11:06.200 --> 11:10.640
They started in 2003 as one of the few companies that saw where Linux and its virtualization

11:10.640 --> 11:15.420
capabilities are going, and now, nearly 19 years later, they're the best place to host

11:15.420 --> 11:21.240
your application, your data, and to run your service or website, game, whatever it might

11:21.240 --> 11:22.240
be.

11:22.240 --> 11:23.600
Linode's always adding new features.

11:23.600 --> 11:25.160
They recently added Kali Linux.

11:25.160 --> 11:27.560
Maybe you want to do a little remote audit.

11:27.560 --> 11:29.840
That's actually a great idea, by the way.

11:29.840 --> 11:33.200
People used to pay me good money to go and do remote audits of their network.

11:33.200 --> 11:34.640
How do you think I did it back in the day?

11:34.640 --> 11:36.760
I'll tell you how I did it, like an animal.

11:36.760 --> 11:40.680
I had an actual physical server in a rack at a data center, and I was paying for the

11:40.680 --> 11:41.680
power.

11:41.680 --> 11:43.440
I was paying for the internet connection.

11:43.440 --> 11:46.360
It was awful when I had to go in there and fix the server, too.

11:46.360 --> 11:49.840
It's so funny how Linode has completely changed the game and made infrastructure that's fast

11:49.840 --> 11:54.760
and reliable and well-priced so accessible.

11:54.760 --> 11:57.920
And they've done everything they can over the years to just lower the barriers of entry

11:57.920 --> 12:03.760
so anybody who's never even set up a server, or pros who were racking and stacking 20 years

12:03.760 --> 12:06.320
ago, they all can use Linode.

12:06.320 --> 12:07.920
They've really struck that balance.

12:07.920 --> 12:10.840
And if you need the more advanced stuff, they've got it.

12:10.840 --> 12:12.000
They've got VLAN support.

12:12.000 --> 12:13.280
They've got cloud firewalls.

12:13.280 --> 12:15.080
They've got S3 compatible object storage.

12:15.080 --> 12:21.080
They've got an elegant API, but something that they've got that nobody else has got.

12:21.080 --> 12:25.400
And I was actually talking to a friend in another company in the Linux ecosystem, and

12:25.400 --> 12:33.080
they said to me, our goal is to get our community game as half as good as Linode's.

12:33.080 --> 12:35.480
They went on to say, we see Linode at every community event.

12:35.480 --> 12:38.680
We see Linode sponsoring projects and not going out there and making a big deal about

12:38.680 --> 12:39.680
it.

12:39.680 --> 12:40.680
They're just helping a project out with infrastructure.

12:40.680 --> 12:46.000
You know, like here at JB, they're making it possible for our West Coast road tour.

12:46.000 --> 12:49.000
Now, you know, yeah, we make a big stink about it, but it's not like Linode goes and puts

12:49.000 --> 12:50.000
out on blast.

12:50.000 --> 12:52.560
Oh, look what we're doing over here.

12:52.560 --> 12:56.080
They do it because it's an investment in the community, and that community pays dividends

12:56.080 --> 12:57.080
for them for years.

12:57.080 --> 12:58.960
They've seen it for 19 years.

12:58.960 --> 12:59.960
They get it.

12:59.960 --> 13:01.800
And on top of that, they're just super fast.

13:01.800 --> 13:06.100
They have 11 data centers around the world, and they're 30 to 50% cheaper than the major

13:06.100 --> 13:07.840
hyperscalers out there.

13:07.840 --> 13:08.840
So go get $100.

13:08.840 --> 13:09.840
Support the show.

13:09.840 --> 13:10.840
Kick the tires.

13:10.840 --> 13:11.840
Really try it.

13:11.840 --> 13:12.840
That's what you can do with that $100.

13:12.840 --> 13:14.320
So go take advantage of it.

13:14.320 --> 13:17.560
Sign up today, linode.com slash LAN.

13:17.560 --> 13:19.320
Get that $100, support the show.

13:19.320 --> 13:27.200
One more time, support the show at linode.com slash L-A-N.

13:27.200 --> 13:32.280
And a big warm thank you to Kalyde, Kalyde.com slash LAN.

13:32.280 --> 13:37.240
Kalyde is endpoint security solutions that use the most powerful untapped resource in

13:37.240 --> 13:38.800
all of IT.

13:38.800 --> 13:41.240
No, it is not kryptonite.

13:41.240 --> 13:42.800
It is end users.

13:42.800 --> 13:46.640
And if you're trying to achieve security goals just for your own internal reasons, maybe

13:46.640 --> 13:51.040
you have an audit, maybe you got a new boss, maybe you just like to know where things stand.

13:51.040 --> 13:56.360
Well, the traditional way has been get an agent on every machine, run some sort of network-wide

13:56.360 --> 13:57.360
audit.

13:57.360 --> 14:01.920
And these things would always bring their own security issues with them, inevitably.

14:01.920 --> 14:03.800
They always do.

14:03.800 --> 14:06.380
And they also slow down the user's machine.

14:06.380 --> 14:08.560
They pit IT against the end user.

14:08.560 --> 14:13.160
It is a very uncomfortable dynamic, and I have been on both ends of it.

14:13.160 --> 14:15.760
Kalyde does things differently.

14:15.760 --> 14:22.240
Instead of forcing changes on users, Kalyde sends them security recommendations via Slack.

14:22.240 --> 14:26.620
Kalyde will automatically notify your team when their device is insecure, and it'll give

14:26.620 --> 14:30.280
them step-by-step instructions on how to solve the problem.

14:30.280 --> 14:35.400
And by reaching out to employees via friendly Slack DM and educating them about company

14:35.400 --> 14:40.260
policies, Kalyde actually helps you build a culture where everyone contributes to security

14:40.260 --> 14:45.160
because everyone understands it and why they're doing it.

14:45.160 --> 14:48.280
You're reasonable humans, just tell them.

14:48.280 --> 14:52.280
And for IT admins, Kalyde provides a single dashboard that lets you monitor the security

14:52.280 --> 14:53.640
of your entire fleet.

14:53.640 --> 14:57.440
Maybe it's a Mac, maybe it's Windows, hopefully it's Linux.

14:57.440 --> 14:58.440
Kalyde supports it all.

14:58.440 --> 15:03.120
And you can see it at a glance which employees have their disks encrypted, all their OS updates

15:03.120 --> 15:06.600
installed, and a password manager installed as well.

15:06.600 --> 15:11.120
Makes it easy to prove compliance to your auditors, to yourself, to customers, leadership,

15:11.120 --> 15:12.400
whoever it need be.

15:12.400 --> 15:13.800
So that's Kalyde.

15:13.800 --> 15:18.060
User-centered cross-platform endpoint security for teams that slack.

15:18.060 --> 15:21.480
You can meet your compliance goals by putting users first.

15:21.480 --> 15:25.240
So visit Kalyde.com slash LAN to find out how.

15:25.240 --> 15:29.760
When you go there, they'll hook you up with a goodie bag including a free t-shirt just

15:29.760 --> 15:32.360
for activating a free trial.

15:32.360 --> 15:42.400
That's Kalyde, so go check it out, K-O-L-I-D-E dot com slash L-A-N.

15:42.400 --> 15:48.960
We end this week with an update on the journey to a fully OpenGL accelerated Linux desktop

15:48.960 --> 15:52.120
on the Apple M-series hardware.

15:52.120 --> 15:57.040
Alyssa Rosenzweig has been involved with the Asahi Linux project for nearly two years,

15:57.040 --> 16:02.240
working on reverse engineering Apple M-series graphics support, has shared a new status

16:02.240 --> 16:03.240
update.

16:03.240 --> 16:08.640
And it seems something of a milestone has been reached.

16:08.640 --> 16:14.520
Neverball West, the old classic Neverball game in all of its OpenGL glory, rendered

16:14.520 --> 16:17.200
on the open source Mesa Asahi driver.

16:17.200 --> 16:21.320
Now understand that this OpenGL driver is actually running on Mac OS while using the

16:21.320 --> 16:24.520
standard proprietary Mac OS kernel driver.

16:24.520 --> 16:30.040
The hope here is that once the Apple Silicon kernel graphics driver for Linux begins taking

16:30.040 --> 16:36.040
shape, this Mesa OpenGL driver will, with just a little bit of work, start functioning

16:36.040 --> 16:41.440
under Linux rather than only being functional on Mac OS.

16:41.440 --> 16:46.200
And make no mistake, this is still quite the achievement.

16:46.200 --> 16:50.400
In our most recent update, Rosenzweig writes about the process of reverse engineering the

16:50.400 --> 16:56.680
behavior of Apple's Metal driver, since, of course, Apple provides no hardware documentation.

16:56.680 --> 17:02.560
No, and surprise, surprise, the documentation for Metal, well, according to Rosenzweig,

17:02.560 --> 17:05.760
is really kind of two versions out there.

17:05.760 --> 17:10.360
They say they have one version for the public developers to consume that documents things

17:10.360 --> 17:12.960
for a developer targeting the App Store.

17:12.960 --> 17:19.040
But she believes there's a second version inside Apple that is, quote, an internal API

17:19.040 --> 17:22.760
adding back features that Apple doesn't want you using.

17:22.760 --> 17:27.520
And while Apple does not publish those features or any kind of documentation on those internal

17:27.520 --> 17:33.520
APIs, the team found a, quote, glimpse behind the curtain.

17:33.520 --> 17:38.160
The undocumented classes and methods making up Apple's internal Metal API, of course,

17:38.160 --> 17:41.680
are still available in the production Metal binaries.

17:41.680 --> 17:46.680
To use them, a developer only needs the missing headers, and fortunately, Objective-C symbols

17:46.680 --> 17:51.900
contain enough information to reconstruct the header files, allowing Rosenzweig to experiment

17:51.900 --> 17:58.080
with undocumented methods that have extra functionality inherited from OpenGL.

17:58.080 --> 18:01.920
Now all of this is very exciting, but we should probably be clear.

18:01.920 --> 18:06.620
First engineering a driver stack requires years of work.

18:06.620 --> 18:11.000
You gamers out there should probably be prepared to wait a few more years before you'll really

18:11.000 --> 18:13.720
be satisfied with GPU driver performance.

18:13.720 --> 18:20.120
Yep, and the Asahi developers will be the first to tell us, temper our expectations.

18:20.120 --> 18:24.520
But for those of us who would be satisfied with enough functionality for an accelerated

18:24.520 --> 18:31.000
desktop environment, a working web browser, and maybe a few older games, Rosenzweig thinks

18:31.000 --> 18:37.440
they might be there by the end of this year, saying, quote, I'm optimistic I will have

18:37.440 --> 18:42.600
native OpenGL 2.1 in Asahi Linux by the end of the year.

18:42.600 --> 18:45.800
That's enough to accelerate your desktop environment and browser.

18:45.800 --> 18:49.720
It's also enough to play older games like Neverball.

18:49.720 --> 18:55.220
Even without fancy features, GPU acceleration means smooth animations and better battery

18:55.220 --> 18:56.720
life.

18:56.720 --> 19:00.160
That'd be a heck of a thing to see, especially if they do it by the end of the year.

19:00.160 --> 19:04.480
That would be really impressive, and in my opinion, pretty much the best case scenario

19:04.480 --> 19:05.880
for work like this, I'd say.

19:05.880 --> 19:09.200
I mean, I'd be blown away, honestly.

19:09.200 --> 19:13.320
And I wouldn't be surprised if the project doesn't make a funding push to try to hire

19:13.320 --> 19:18.400
Rosenzweig full time so she can really get this thing across the finish line.

19:18.400 --> 19:19.400
Well keep an eye on it.

19:19.400 --> 19:23.080
Keep an eye on everything else going on in the world of Linux and open source, so don't

19:23.080 --> 19:24.080
miss a single episode.

19:24.080 --> 19:30.480
Go to linuxactionnews.com slash subscribe for all the ways to get every single release.

19:30.480 --> 19:35.520
And linuxactionnews.com slash contact for ways to get in touch.

19:35.520 --> 19:36.840
Did we miss a story this week?

19:36.840 --> 19:40.800
Boost in with a new podcast app and tell us what you'd like to have heard us cover.

19:40.800 --> 19:46.360
We'll be back next week with our take on the latest Linux and open source news.

19:46.360 --> 19:47.520
Thanks for joining us.

19:47.520 --> 20:05.120
And that's all the news for this week.


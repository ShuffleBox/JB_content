WEBVTT

00:00.000 --> 00:09.680
Hello, and welcome to Linux Action News, episode 179, recorded on March 7th, 2021. I'm Chris.

00:09.680 --> 00:10.680
And I'm Wes.

00:10.680 --> 00:12.660
Hello, Wes. Let's do the news.

00:12.660 --> 00:17.520
We start this week with a story that might have been passed over by some, but could end

00:17.520 --> 00:23.780
up having a big impact on future Linux desktop apps. During the Flutter Engage live event

00:23.780 --> 00:29.860
on March 3rd, Google announced Flutter 2, with tons of new updates. It includes Flutter's

00:29.860 --> 00:36.400
web support being upgraded from beta to stable, and among many other things, expanded Linux

00:36.400 --> 00:42.720
support. For those not in the know, Flutter is an open source UI SDK created by Google

00:42.720 --> 00:47.720
to help those who want to build quick and modern applications for a wide range of operating

00:47.720 --> 00:54.800
systems, including Android, Linux, Mac, iOS, Windows, Google's own Fuchsia, and the web.

00:54.800 --> 00:59.840
And if the title of the show didn't clue you, what we are interested in is how this impacts

00:59.840 --> 01:05.600
Linux. And it seems, it seems there could be some long term impacts. This week, Canonical's

01:05.600 --> 01:11.560
engineering manager for the Ubuntu desktop at Canonical joined Google during that Flutter

01:11.560 --> 01:12.560
event.

01:12.560 --> 01:17.020
Hello, I'm Ken Van Dyne, engineering manager for Ubuntu desktop at Canonical.

01:17.020 --> 01:20.640
And Ken wanted to give a bit of context for the level of commitment that Canonical was

01:20.640 --> 01:26.720
making to Flutter. So Ken gives us an insight into the work that Canonical has done so far

01:26.720 --> 01:28.700
to bring Flutter to the Linux desktop.

01:28.700 --> 01:33.660
When desktop application support in Flutter was announced, we saw an exciting opportunity

01:33.660 --> 01:39.200
to make Linux distributions, including Ubuntu, an attractive target platform for Flutter

01:39.200 --> 01:44.800
app developers. Flutter's native multiplatform story is growing rapidly, and we wanted to

01:44.800 --> 01:50.940
be at the vanguard. We worked with the Flutter team to bring desktop Linux support to Flutter.

01:50.940 --> 01:56.180
It's still early days, but Canonical is working on improving Flutter's Linux support.

01:56.180 --> 02:01.800
To do so, we will work to bring full multi-windows support to Flutter for desktop across all

02:01.800 --> 02:06.860
the desktop platforms that Flutter supports. We are working with the Flutter team at Google

02:06.860 --> 02:11.400
on the specification now, and we will start the engineering work very soon.

02:11.400 --> 02:15.880
Of course, plugins are an essential part of the Flutter app ecosystem as well. We are

02:15.880 --> 02:21.240
working on enabling popular Flutter plugins for Linux, including Flutter support for Firebase,

02:21.240 --> 02:25.600
Bluetooth, network connectivity, desktop notifications, and more.

02:25.600 --> 02:31.620
And it's pretty clear Canonical is not messing around here. They see the future of desktop

02:31.620 --> 02:37.160
Linux applications as being Flutter-based, and Ken says that's why they chose to build

02:37.160 --> 02:42.660
their new Ubuntu installer in Flutter. It's a statement of their commitment.

02:42.660 --> 02:46.900
Now that we have enabled Flutter for Linux, for other app developers, it's time to further

02:46.900 --> 02:52.200
our commitment by building our own Linux apps with Flutter. As we've already announced,

02:52.200 --> 02:57.500
we are developing our next-generation Ubuntu desktop installer in Flutter. Soon, every

02:57.500 --> 03:03.160
user who installs Ubuntu desktop will be doing so with our new installer built in Flutter

03:03.160 --> 03:08.220
using the Yaru style. Choosing the installer as our first app written in Flutter is a bold

03:08.220 --> 03:13.440
move to say the least. It's the first thing our users see, and as everyone knows, that

03:13.440 --> 03:15.760
first impression is critical.

03:15.760 --> 03:20.520
And they're not stopping with the installer. Canonical is planning to use Flutter for all

03:20.520 --> 03:22.640
future desktop apps they make.

03:22.640 --> 03:27.200
The desktop team had not only worked to make Linux a first-class citizen in Flutter. Flutter

03:27.200 --> 03:32.040
is the default choice for future desktop and mobile apps created by Canonical.

03:32.040 --> 03:36.780
I think the community is having a bit of a challenge at processing this information.

03:36.780 --> 03:40.880
I think some don't know if they should just dismiss it. Others worry that it's not invented

03:40.880 --> 03:46.320
here syndrome all over again. Why don't they just use a good old classic native Linux application

03:46.320 --> 03:53.320
that's GTK, etc, etc, etc. But it turns out that is actually one of the advantages of

03:53.320 --> 03:58.280
Flutter and might be one of the things that is attracting Canonical. It's actually the

03:58.280 --> 04:02.460
opposite of not invented here because it's Google that invented it, and it's Canonical

04:02.460 --> 04:08.440
hitching themselves to Google's wagon. And then when Flutter builds, when a Flutter app

04:08.440 --> 04:14.640
builds, it builds to a native Linux application. So unlike Electron, which is running inside

04:14.640 --> 04:19.920
a Chromium runtime, your application like Slack, Flutter apps are actually native Linux

04:19.920 --> 04:23.840
desktop applications and quite quick. We played around with building one before the show.

04:23.840 --> 04:29.160
Yeah, I think that's maybe one of the good ways to frame this is Electron apps fill a

04:29.160 --> 04:32.520
lot of the space from, you know, commercially designed applications, proprietary stuff,

04:32.520 --> 04:36.800
but even a lot of open source applications, especially if they're cross-platform. Electron

04:36.800 --> 04:41.680
is a nice value to be able to just port it there instantly. But Electron is kind of a

04:41.680 --> 04:46.680
clue, right? We just bottled up a web browser, people knew JavaScript anyway. Whereas Flutter

04:46.680 --> 04:52.200
and the Dart language underneath, it's all been designed for this purpose and therefore

04:52.200 --> 04:54.320
it can be a lot faster and leaner.

04:54.320 --> 04:59.320
Yeah, and as you touched on earlier, it's still kind of early days. Dart itself is not

04:59.320 --> 05:05.560
necessarily ideal on Linux. There is still a lot of work to be done to make these applications

05:05.560 --> 05:11.600
feel like full-fledged desktop Linux application, multi-window support being one of them, themes

05:11.600 --> 05:15.880
support and just overall performance improvements. But those are all areas that Canonical has

05:15.880 --> 05:21.480
committed to Google that they're going to work on directly. And their statement of basing

05:21.480 --> 05:26.160
their installer on this is their way of saying, this is something that's going to stick around

05:26.160 --> 05:31.320
for many years. We're going to ship this in LTSs, which means we have decades ahead of

05:31.320 --> 05:32.960
us of working with Flutter.

05:32.960 --> 05:39.000
So if you're a Linux desktop application developer and you want to target our desktop, you can

05:39.000 --> 05:45.120
ship in Flutter. It will be Yaru themed. It will be a GTK application, but yet you get

05:45.120 --> 05:51.040
all the development kind of perks, a lot of the development perks of electron development.

05:51.040 --> 05:56.360
You can, when you're building a Flutter application, it's kind of like a real time thing. You can

05:56.360 --> 06:01.360
make an update and immediately see how the application responds. It's running in a VM

06:01.360 --> 06:02.520
while you develop it.

06:02.520 --> 06:06.380
Yeah, you get a lot of the modern workflow that people come to expect for developing

06:06.380 --> 06:11.100
from the web or developing mobile applications, but you get it for basically the whole range

06:11.100 --> 06:14.840
of things Flutter supports. That's nice.

06:14.840 --> 06:18.760
And we're not necessarily trying to advocate one thing over another, but when something

06:18.760 --> 06:23.240
comes along that offers a lot of the benefits of building an electron app, but with the

06:23.240 --> 06:28.880
benefits of native on Linux and also Windows, Mac OS, Android, and iOS.

06:28.880 --> 06:34.120
Well, yeah, I think part of this too is, we like to complain about not having native apps

06:34.120 --> 06:38.720
or Linux or not enough of them, but it's just a different platform, right? People have to

06:38.720 --> 06:44.720
use that. We almost have to have a sales pitch to developers of like, how do you do this?

06:44.720 --> 06:48.000
Flutter is going to be something people use for all kinds of other stuff. They might be

06:48.000 --> 06:51.920
making web apps, they might be using it to make a mobile app at work, and they can just

06:51.920 --> 06:56.400
transfer those skills to make Linux apps that maybe we won't hate. I'm not sure. It's very

06:56.400 --> 07:01.280
much early days. It's still in beta really. So this could all not work out, but it's interesting

07:01.280 --> 07:02.280
to watch.

07:02.280 --> 07:06.280
How do you think Canonical is doing this? I mean, it seems pretty obvious why Google

07:06.280 --> 07:10.640
would do it. There's a lot of competitive reasons for Google to do this, but why is

07:10.640 --> 07:17.320
Canonical getting so into this? Like they're developing resources to improve Google's product

07:17.320 --> 07:20.360
essentially. What do you suppose the advantage for them is?

07:20.360 --> 07:25.280
I think part of it must be just, there's a lot of resources they can leverage. If they

07:25.280 --> 07:29.240
can add some of their expertise, and it does make me a little more confident having a bunch

07:29.240 --> 07:33.280
of Canonical involved here managing some of these Linux implementations rather than say

07:33.280 --> 07:38.000
Google doing it themselves directly. I mean, they know what they're doing in this space,

07:38.000 --> 07:43.360
they have experience. I think what they might be getting out of it is just that they can

07:43.360 --> 07:47.040
have developers, they can hire people that don't necessarily have to be specifically

07:47.040 --> 07:50.880
skilled targeting the Linux platform, help them bridge that gap, but get access to all

07:50.880 --> 07:52.320
the experience they have.

07:52.320 --> 07:55.560
Just the brief playing around we did before the show to get some experience with it was

07:55.560 --> 07:59.760
clear there's a lot of tooling advantages. Flutter is very modern. They've taken a lot

07:59.760 --> 08:01.200
of ideas from different places.

08:01.200 --> 08:06.480
You get fancy type hints, it works with like IntelliJ, your IDEs people are already using

08:06.480 --> 08:07.480
in the field.

08:07.480 --> 08:13.560
Yeah. And so it could be, yeah, it's just a tool that makes sense for them from an organizational

08:13.560 --> 08:20.160
standpoint. I think there's the other element of this is Canonical has really become a multi-vendor

08:20.160 --> 08:25.040
player here. They've got a pretty tight relationship with Microsoft and Azure. We talked about

08:25.040 --> 08:30.880
that sales channel that they have. Plus they have WSL, that relationship there. Then we've

08:30.880 --> 08:37.240
also seen that Canonical has a good relationship with AWS for deploying Canonical supported

08:37.240 --> 08:43.920
Ubuntu images on AWS. And now here we see Canonical buddying up with Google to work

08:43.920 --> 08:44.920
with Flutter.

08:44.920 --> 08:49.320
Now, obviously there's some in the community, they're going to go, God, that's gross. But

08:49.320 --> 08:53.640
there's others in the community that go, that's the thing, you need somebody to make those

08:53.640 --> 08:55.640
interfaces with these giants.

08:55.640 --> 09:00.400
In some ways they're sort of representing a big chunk of the Linux using world.

09:00.400 --> 09:04.260
And who else really could do it? They're in a unique competitive position where they can

09:04.260 --> 09:08.400
interface with all of these different vendors who are competitors with each other and sort

09:08.400 --> 09:10.160
of play the neutral player part.

09:10.160 --> 09:14.100
Yes. They're a sort of independent entity. They've got expertise in a sort of a specific

09:14.100 --> 09:18.940
layer of the stack, which isn't necessarily where those other people are directly competing.

09:18.940 --> 09:19.940
Just makes sense.

09:19.940 --> 09:22.800
Keeps things friendly with the big players as well. So that's got to be a part of why

09:22.800 --> 09:23.800
they're choosing Flutter.

09:23.800 --> 09:29.040
But then I think there's a third reason outside the tooling, outside the relationships. Ken

09:29.040 --> 09:35.280
says something in his little bit in the keynote, and he says that Canonical is going to base

09:35.280 --> 09:41.080
all of their future applications on Flutter. And that I think is maybe a more telling statement

09:41.080 --> 09:42.960
than it seems like at first.

09:42.960 --> 09:47.880
They must have some, this is strategy. They must have something they're building, something

09:47.880 --> 09:52.480
they've identified that needs to be deployed on the desktop. That's a Canonical creation.

09:52.480 --> 09:58.000
Because when you think about it, they make their installer, they make their welcome screen.

09:58.000 --> 10:02.400
I mean, there's not a lot of graphical tools. There's a lot of software Canonical writes.

10:02.400 --> 10:03.400
Snap store, I guess.

10:03.400 --> 10:08.100
But there's not a lot of desktop applications Canonical makes. And Ken said in that keynote

10:08.100 --> 10:14.880
that future Canonical Ubuntu desktops will be based, desktop apps will be based on Flutter.

10:14.880 --> 10:18.100
So there's got to be something they have in the works and they've identified this is the

10:18.100 --> 10:23.080
tooling chain that they want to use. And so I think it's these three strategic reasons

10:23.080 --> 10:28.760
coming together, the relationship, the fact that this will be a native application that

10:28.760 --> 10:34.120
looks good on Linux. It's very accessible to developers. That's all got to be playing

10:34.120 --> 10:41.680
a role here. But I don't see it necessarily equaling great success in the Linux ecosystem.

10:41.680 --> 10:49.120
I think it's tied to Dart. Its connections to Google will not make it like the default

10:49.120 --> 10:55.000
go-to solution for Linux developers. But for people who are trying to write high-performant

10:55.000 --> 10:58.600
multi-platform applications, I could definitely see it being a contender.

10:58.600 --> 11:03.800
And I'd say it's definitely one of those still in the interesting to watch stage technologies.

11:03.800 --> 11:08.160
Flutter and Dart haven't yet taken over everything. Google's putting a lot of work behind it.

11:08.160 --> 11:12.200
It seems like there are folks that are interested and more and more apps are being made with

11:12.200 --> 11:15.680
it. I don't know that we've crested that hill yet. I think that is just going to be

11:15.680 --> 11:19.720
a huge part of it too. If Flutter really takes off, maybe this is more of a success. Otherwise,

11:19.720 --> 11:25.060
it might just be a niche tool set that Canonical chooses to use. And if it works, that's fine.

11:25.060 --> 11:28.840
It could end up being that. I think Google would like to see it go otherwise. If you

11:28.840 --> 11:35.120
had a Magic West wand, what would you have them use instead of Flutter or Electron? Is

11:35.120 --> 11:38.600
there something else that comes to mind that would solve this problem?

11:38.600 --> 11:43.960
Not immediately. At least that offers the same stuff. The elementary folks have come

11:43.960 --> 11:50.300
closer in their own ways with Vala and their own tool set. But it's still kind of a niche

11:50.300 --> 11:54.340
Linux technology. You're not going to get exposed to that if you're not specifically

11:54.340 --> 11:59.280
targeting desktop apps or even those distributions. That's the main thing that it offers. And

11:59.280 --> 12:02.880
that's what's happening with Electron. It's pretty rare that you see something that's

12:02.880 --> 12:08.880
cross-platform. Maybe GTK and Qt can do that, but then you are riding all those hooks yourselves

12:08.880 --> 12:12.400
to interface at the lower levels. You just don't worry about that as much with something

12:12.400 --> 12:13.400
like Flutter.

12:13.400 --> 12:20.120
Yep, for sure. My kind of irrational, really no-facts-back-this-up worry about this is

12:20.120 --> 12:25.760
that Flutter is a hit. What do I know? I got it up and running with your help, but what

12:25.760 --> 12:26.760
do I know?

12:26.760 --> 12:27.760
You're a Flutter developer now.

12:27.760 --> 12:31.760
I built an app. And I thought, oh yeah, okay, that was actually pretty painless. I could

12:31.760 --> 12:36.200
see this being successful. And then we build all these Flutter apps, and then Fuchsia comes

12:36.200 --> 12:42.440
along and says, oh, by the way, Flutter? Just one click to run your apps on Fuchsia OS.

12:42.440 --> 12:44.040
Part right over from Linux in one click.

12:44.040 --> 12:48.200
I guess Ubuntu will become a Fuchsia distribution.

12:48.200 --> 12:53.200
Linode.com slash LAN. Go there to get a $100 60-day credit, and of course you support the

12:53.200 --> 12:58.080
show. Linode makes cloud computing simple, affordable, and accessible. They're our cloud

12:58.080 --> 13:02.320
hosting provider of choice, and a lot of you have tried them out by going to linode.com

13:02.320 --> 13:07.280
slash LAN. And a very common bit of feedback I get, besides how exceptional their support

13:07.280 --> 13:11.800
is, is it seems like their network is just a bit faster than anybody else you've ever

13:11.800 --> 13:12.800
tried before.

13:12.800 --> 13:18.200
Well, this is one of the advantages of being around forever in cloud computing. They started

13:18.200 --> 13:24.480
in 2003 as one of the first businesses in this gig. And that meant that they had time

13:24.480 --> 13:31.400
to build things up and make great deals. And in 2016, they went all in on controlling their

13:31.400 --> 13:37.840
network future. They became their own ISP and built out a global network, which gave

13:37.840 --> 13:41.760
them tons of benefits, including having full control over where their network goes in the

13:41.760 --> 13:46.720
future, strategic buying opportunities for multiple providers, and obviously the best

13:46.720 --> 13:51.400
peering agreements they could get. And it set a foundation for them to tackle a global

13:51.400 --> 13:55.820
data center network. And now they have 11 data centers worldwide. But this kind of thinking

13:55.820 --> 14:02.120
radiates the entire Linode service. And it's exceptional. From $5 a month rigs to super

14:02.120 --> 14:07.200
powerful and fast systems that can do GPU compute, check them out and get that $100

14:07.200 --> 14:11.540
60 day credit and see what works for you. Try out object storage, check out their cloud

14:11.540 --> 14:17.320
management dashboard, their API, which is fantastic, their documentation, which is extensive,

14:17.320 --> 14:21.680
all of it. Linode.com slash LAN and a big thank you to everybody who goes there and

14:21.680 --> 14:28.920
supports the show. Linode.com slash LAN. Google announced they're tweaking the release

14:28.920 --> 14:34.040
cycle of Chrome to make it a bit faster. They note on their blog, as we've improved our

14:34.040 --> 14:38.760
testing and release processes for Chrome, and deployed bi weekly security updates to

14:38.760 --> 14:43.700
improve our patch gap became clear that we could shorten our release cycle and deliver

14:43.700 --> 14:50.360
new features more quickly. Not surprised to see this at all. It was towards the end of

14:50.360 --> 14:57.040
2019 that Mozilla started shifting the Firefox release cycle to four weeks. And well, Google,

14:57.040 --> 15:00.480
you know, they can't be undone. They have to have the big version numbers and the fast

15:00.480 --> 15:06.640
releases as well. But I don't know, Wes, maybe it's the old sys admin in me. But it seems

15:06.640 --> 15:11.400
like web browsers are getting developed at a breakneck pace. I really can't can hardly

15:11.400 --> 15:14.660
keep track of even the version numbers anymore. Well, they are some of the most important

15:14.660 --> 15:19.600
applications we use on a day to day basis. And both Mozilla and Google cite that users

15:19.600 --> 15:26.400
want features faster, more features faster. It does sound like me. And the browser has

15:26.400 --> 15:31.920
kind of just become more like a back end service. It's not really a classic versioned application.

15:31.920 --> 15:37.660
It's being developed almost continually and deployed almost often. If that makes you nervous,

15:37.660 --> 15:41.320
there is some good news in this post, which we will have a link to this in the show notes

15:41.320 --> 15:45.900
they say that they're going to add a new extended stable option, which kind of reminds me of

15:45.900 --> 15:52.440
Firefox's ESR release. It'll have a milestone update every eight weeks. Extended stable

15:52.440 --> 15:57.000
will be available to enterprise administrators and chromium and betters. But they also note

15:57.000 --> 16:03.460
that security updates on the extended stable version will be released every two weeks.

16:03.460 --> 16:08.080
So you're still going to see some updates coming, but they're not feature changes. They're

16:08.080 --> 16:12.880
just security fixes. And then of course, Chrome OS, a bit of a question mark in all of this

16:12.880 --> 16:17.360
as well. They say that they plan to support multiple stable release options and that they're

16:17.360 --> 16:21.480
going to have more information for Chrome OS users and administrators soon. But the

16:21.480 --> 16:27.840
core issue that Google's really dealing with and honestly Firefox as well, is the web is

16:27.840 --> 16:32.720
not standing still. It is constantly a moving target. Well, because the rest of the web

16:32.720 --> 16:37.640
is an online, you know, there's not versioned different webs. It's all the web that's live

16:37.640 --> 16:42.160
all the time. And so a browser has to have some of those elements in some ways, right?

16:42.160 --> 16:45.240
It does have features that, you know, might change between versions, but fundamentally

16:45.240 --> 16:49.800
it's connected to the real world as it exists right now. Yeah, I guess I don't really have

16:49.800 --> 16:55.760
a problem per se with software updating super frequently. I mean, I love rolling distributions.

16:55.760 --> 17:02.840
I like new software. But if something's going to get updated on a really regular basis,

17:02.840 --> 17:07.680
I strongly prefer it's managed by a distro package manager. I'll give you an example

17:07.680 --> 17:12.440
where I draw the line. So Reaper, which we use to record and produce this show, the audio

17:12.440 --> 17:17.600
editor, it has updates every so often. And so it's not a big deal to go get the tar file

17:17.600 --> 17:21.720
and download and extract it and essentially quote unquote, install it. I don't mind that

17:21.720 --> 17:25.960
being a manual process from time to time, but if my web browser is going to update once

17:25.960 --> 17:30.800
a month and I have two browsers that are updating once a month and they're a pretty crucial

17:30.800 --> 17:37.120
piece of software, like you say, I just trust that to be done by the package manager. I

17:37.120 --> 17:41.760
have had experiences even recently that were like the worst of the Windows days where I

17:41.760 --> 17:46.400
took an old MacBook and I dusted it off. I cracked it open for the first time. It had

17:46.400 --> 17:52.520
legitimately been a little while. And if I maybe in being generous here with 10 minutes,

17:52.520 --> 17:57.120
it may have even been 20 minutes that that thing just sat there burning CPU. I sent you

17:57.120 --> 18:02.320
screenshots. It's just burning CPU doing app updates. And every time I'd launch an app,

18:02.320 --> 18:06.200
I'd get an update prompt asking me if I want to quit and relaunch when I'm in the middle

18:06.200 --> 18:12.080
of just trying to get something done. And it's just this hodgepodge mess on the Mac.

18:12.080 --> 18:17.640
It's not so bad if you run a Mac 24 seven. But if you just visit occasionally and you

18:17.640 --> 18:22.440
fire it up, it's it's a crap experience now because all of these updates that are frequently

18:22.440 --> 18:27.360
happening and each update is being managed by the developer directly. And it sounds good

18:27.360 --> 18:33.560
in principle, but the end result as a user is a real, real crappy 10, 20 minutes when

18:33.560 --> 18:38.400
you turn a box on for the first time in a few weeks. And that's where I just trust a

18:38.400 --> 18:42.040
distribution package manager to handle this stuff a lot smarter.

18:42.040 --> 18:43.880
That at least gives you control.

18:43.880 --> 18:49.080
Yeah, it's on my terms. It's not what I'm just trying to do something. And Chrome, Chrome

18:49.080 --> 18:54.200
does that on the Mac, on the Mac and on Windows, I think, too. It self-updates and it just

18:54.200 --> 18:58.560
sort of does it in the background without any warning or any prompting. And while I

18:58.560 --> 19:02.600
get the idea and it's important to get those updates down to end users, I don't like not

19:02.600 --> 19:06.480
having any control over when it just all of a sudden demands a lot of resources from my

19:06.480 --> 19:07.480
machine.

19:07.480 --> 19:12.480
Well, it's a good thing you're not running Windows then. And really, this problem in

19:12.480 --> 19:17.600
a larger context is something the Linux Mint distribution is also struggling with right

19:17.600 --> 19:24.080
now. And in upcoming releases, developers may insist that users install some of those

19:24.080 --> 19:25.320
darn patches.

19:25.320 --> 19:30.960
This is a big change. And in what has turned into a series of blog posts, we've learned

19:30.960 --> 19:35.800
that Linux Mint server side statistics give us an indication that around 30% of users

19:35.800 --> 19:42.220
apply updates in about less than a week, 30%. And then it's kind of a drop off after that.

19:42.220 --> 19:48.540
But even more concerning is that their stats indicate around five to 30. And Clem says

19:48.540 --> 19:53.880
it's not super clear. They don't have great data here. But around five to 30% of their

19:53.880 --> 20:00.360
users are still running Linux Mint 17, which was end of life in April of 2019.

20:00.360 --> 20:06.080
Yeah, that's a big range. And it's kind of hard to put these numbers into context without

20:06.080 --> 20:10.840
some data to compare it to other distributions. And I guess, ideally, some more and better

20:10.840 --> 20:15.400
data. But it's clear that the Mint Devs think this is an issue.

20:15.400 --> 20:21.080
Yeah, I mean, they've written a post that just says update your computer exclamation

20:21.080 --> 20:25.960
mark. I mean, they're really trying to address this. I think they've realized there's been

20:25.960 --> 20:30.720
an issue that's kind of become the culture of Mint users, I think, to avoid updates.

20:30.720 --> 20:36.680
And the part of the challenge, it seems, for the developers to really solve this is they

20:36.680 --> 20:41.920
don't have a great set of data to work with. Clem says in the next release, the update

20:41.920 --> 20:47.580
manager won't just look for available updates, but will also keep track of particular metrics

20:47.580 --> 20:53.720
and be able to detect cases where updates are overlooked. In some cases, the update

20:53.720 --> 20:59.080
manager will be able to remind you that you should probably apply these updates. And in

20:59.080 --> 21:04.160
certain cases, it sounds like it's going to kind of insist that you install the updates.

21:04.160 --> 21:09.000
You know, I'm not really clear what that means. But the component of this where it's going

21:09.000 --> 21:13.560
to provide better, more complete information, reminders that there are updates that are

21:13.560 --> 21:17.880
available and that you might need to install for security reasons, that seems like a good

21:17.880 --> 21:19.680
thing or at least a good intention.

21:19.680 --> 21:26.080
Yeah, it'll be one to watch because I think Linux Mint made a little bit of hay out of

21:26.080 --> 21:31.040
trying to create an environment that didn't change more than it needs to. And one of the

21:31.040 --> 21:36.160
ways that that was accomplished was by assigning sort of a number level to updates. You're

21:36.160 --> 21:37.520
probably familiar with the Mint updater.

21:37.520 --> 21:38.520
I remember this.

21:38.520 --> 21:44.280
Yeah, you get these different numbers. And it kind of is an implicit statement that some

21:44.280 --> 21:50.420
updates are less important than others. When you have kind of a more complex situation

21:50.420 --> 21:55.480
when it comes to software on a Linux distribution where so many things are linked to other things,

21:55.480 --> 22:00.420
you kind of have to update everything and keep it all up to date. And I think by calling

22:00.420 --> 22:05.280
some updates out and saying, this is a level one update, this is a level four update, it

22:05.280 --> 22:11.920
sort of set an acceptance among users that it's okay to skip certain updates. And I think

22:11.920 --> 22:15.160
that bears out in this data that's been released here is that there's a bit of a culture of

22:15.160 --> 22:20.280
skipping updates and some users even consider that potentially a feature of Mint. And so

22:20.280 --> 22:25.640
to now try to move that culture towards one that's more accepting of updates is going

22:25.640 --> 22:29.760
to be a tricky thing for the project to pull off, not only from a cultural standpoint,

22:29.760 --> 22:33.520
but from a technology standpoint, too. They got to build the tools that their users are

22:33.520 --> 22:36.000
going to find appealing to use.

22:36.000 --> 22:38.980
Yeah, it's kind of the start of a new conversation.

22:38.980 --> 22:41.760
He does point out timeshift is available.

22:41.760 --> 22:45.160
For the most part, these updates should just work. And if they don't, well, they need to

22:45.160 --> 22:49.080
figure that out. Also, they have to get fixed one way or another.

22:49.080 --> 22:50.080
Snapshots are your friend.

22:50.080 --> 22:53.440
You know, I can certainly appreciate why they want this to happen, though, when you're doing

22:53.440 --> 22:56.840
all the hard work to get those updates shipped, especially if they're important, they might,

22:56.840 --> 23:00.040
you know, fix some of the bugs your users are complaining about, or it might be an important

23:00.040 --> 23:05.000
security update. It kind of sucks to have people not using them. Like, for example,

23:05.000 --> 23:06.720
that recent Cinnamon update.

23:06.720 --> 23:11.280
That's a great example. So users are having this problem where the memory usage on their

23:11.280 --> 23:17.080
system just keeps going up and up and up. Clem writes that they expect the desktop,

23:17.080 --> 23:22.120
a clean Mint desktop to take somewhere between 80 megabytes of RAM, and maybe a gigabyte,

23:22.120 --> 23:25.800
but users are seeing two, four, six gigs of RAM. And some of these systems are not very

23:25.800 --> 23:30.020
high end boxes. And Clem writes they don't know what's causing these Cinnamon desktop

23:30.020 --> 23:34.560
memory leaks yet, but they have a workaround that essentially watches to see free memory

23:34.560 --> 23:38.140
and will just restart Cinnamon for you. It's kind of a clunker, but I guess it's better

23:38.140 --> 23:42.680
than your whole system locking up from a low memory condition. But if people are not installing

23:42.680 --> 23:46.960
these updates, they can't get the workaround.

23:46.960 --> 23:52.160
Linux.ting.com. I understand you've got a lot of subscriptions. There's a lot of things

23:52.160 --> 23:57.580
to pay for these days. A crazy expensive mobile bill shouldn't be one of them. And if you

23:57.580 --> 24:02.520
know how to sync your podcast or your music or just take advantage of being on Wi-Fi before

24:02.520 --> 24:07.640
you hit the road, you can save a ton of money with Ting. It's never been a better time to

24:07.640 --> 24:12.620
join Ting. Now they have plans for anybody at any data size or usage, but Ting has some

24:12.620 --> 24:17.360
really clever plans right now. If you can be strategic about how you use your data,

24:17.360 --> 24:22.320
you can save just a substantial amount of money. What I love about Ting is they have

24:22.320 --> 24:28.000
three nationwide networks to choose from. I mostly bounce between AT&T and Verizon,

24:28.000 --> 24:32.760
but I love that flexibility. And they even have 5G coverage where it's available. But

24:32.760 --> 24:38.460
the great thing about Ting is no contract. And if you use two gigs, 20 gigs or more,

24:38.460 --> 24:42.860
there's a perfect plan for you now over at Ting. And every single plan gets access to

24:42.860 --> 24:48.400
Ting's award-winning customer service. With nationwide LTE and 5G coverage, you're going

24:48.400 --> 24:53.720
to have coverage wherever anyone has coverage. That's a really nice piece of mind thing

24:53.720 --> 24:59.200
about Ting. And with the plan to fit every user and three great networks to choose from,

24:59.200 --> 25:04.000
it's really simple to switch to Ting because just about every darn phone is supported now.

25:04.000 --> 25:07.200
You can figure out if your phone works and you can just bring it right over by going

25:07.200 --> 25:14.000
to linux.ting.com. Take a look. If it does, they're going to give you $25 in service credits.

25:14.000 --> 25:18.520
That might just pay for your first month. That's how good of a deal Ting is. Now if

25:18.520 --> 25:23.240
you need a new phone, they'll sell one to you and you can take our linux.ting.com $25

25:23.240 --> 25:27.520
and apply to that as well. But I'm going to make a bet that if you have a kind of a modern

25:27.520 --> 25:31.880
phone and you're on one of the major carriers now, Ting's going to work. They'll just send

25:31.880 --> 25:35.040
you a SIM card and you'll be up and going in minutes once you receive it in the mail.

25:35.040 --> 25:40.960
That's awesome. And cutting your phone bill in half has literally never been easier. I've

25:40.960 --> 25:46.000
been a Ting customer forever and I can tell you these brand new plans are spicy. Go check

25:46.000 --> 25:49.960
them out right now. The next generation of Ting mobile is here. See how much you could

25:49.960 --> 25:55.760
save and get $25 off at linux.ting.com.

25:55.760 --> 26:01.040
In one of my favorite moments this week, Linus Torvalds wrote on the Linux kernel mailing

26:01.040 --> 26:08.280
list, hey peeps, hey Linus. He went on and it only gets worse from here unfortunately.

26:08.280 --> 26:14.280
Some of you may have already noticed that in my public git tree, the 512 RC1 tag has

26:14.280 --> 26:19.600
magically been renamed to 512 RC1 don't use.

26:19.600 --> 26:26.320
Don't use? It turns out there was a severe data corruption bug that hit systems that

26:26.320 --> 26:31.840
use a swap file rather than a dedicated swap partition.

26:31.840 --> 26:37.280
Linus went on to say, as far as I know, all the normal distributions set things up with

26:37.280 --> 26:43.200
swap partitions, not files, because honestly, swap files tend to be slower and have various

26:43.200 --> 26:44.840
other complexity issues.

26:44.840 --> 26:50.040
That might be true, but if that smells a little funny to you, I agree. I mean, just top of

26:50.040 --> 26:56.520
mind, Ubuntu has been using swap files by default for a long time. But this reminds

26:56.520 --> 27:00.840
us really of the role that distributions play. This is a bug that we never really have to

27:00.840 --> 27:05.560
worry about. It's managed by the distribution and these kind of kernel updates are specifically

27:05.560 --> 27:08.600
watched by the people putting the distributions together.

27:08.600 --> 27:13.520
So really, we kind of get the best of both worlds. We get to sit back and watch this

27:13.520 --> 27:18.600
really kind of remarkable piece of software be created and and watch the team respond

27:18.600 --> 27:22.400
with really no immediate consequences to us as users.

27:22.400 --> 27:28.000
Yeah, and Linus was very clear to point out this was caught in the RC stage during, you

27:28.000 --> 27:34.880
know, mostly normal testing. But to me, his tone seemed a little bit sheepish. I mean,

27:34.880 --> 27:39.600
I think this is a little embarrassing for the kernel. And perhaps rightfully so. They

27:39.600 --> 27:45.360
take data integrity seriously and having swap just spraying all over your file system. It's

27:45.360 --> 27:51.040
kind of embarrassing. As he put it, I want everybody to be aware of this because if it

27:51.040 --> 27:55.800
bites you, it bites you hard. You can end up with a file system that is essentially

27:55.800 --> 28:03.200
overwritten by random swap data. This is what we in the industry call double on good.

28:03.200 --> 28:09.840
Indeed. Well, a quick PSA before we go. The container plumbing days is just around the

28:09.840 --> 28:13.880
corner as we are recording this. So save the date March 9, through the 10th. It's a two

28:13.880 --> 28:19.680
day event that investigates, discusses hacks and learns and celebrates the lower level

28:19.680 --> 28:24.000
of open source container technologies. If this is something you've wanted to learn,

28:24.000 --> 28:27.800
well, this could be your chance to do it. Here's a taste of some of the topics being

28:27.800 --> 28:35.640
explored container runtimes, security and isolation, virtualization inside containers,

28:35.640 --> 28:42.040
and of course, Linux c groups, namespaces and other kernel features that power containers.

28:42.040 --> 28:46.360
Our plumbing days is sponsored by Red Hat. It's never really too late to learn or get

28:46.360 --> 28:50.320
a refresher, right? And while you're doing that, don't worry. We'll keep you updated

28:50.320 --> 28:54.600
on the latest Linux news that you should know about just go to Linux action news.com slash

28:54.600 --> 29:00.160
subscribe for all the ways to get new episodes and Linux action news.com slash contact for

29:00.160 --> 29:05.220
ways to get in touch. If you're considering a last pass alternative right now check out

29:05.220 --> 29:10.560
self hosted.show slash 39 we run down our favorites and the ones that we self host.

29:10.560 --> 29:15.680
We'll be back next Monday with our weekly take on the latest Linux and open source news.

29:15.680 --> 29:41.800
Thanks for joining us and we will see you next week.


1
00:00:00,000 --> 00:00:16,400
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

2
00:00:16,400 --> 00:00:21,000
This is episode 29, recorded on November 26th, 2017.

3
00:00:21,000 --> 00:00:22,000
I'm Chris.

4
00:00:22,000 --> 00:00:23,000
And I'm Joe.

5
00:00:23,000 --> 00:00:24,000
Hello, Joe.

6
00:00:24,000 --> 00:00:25,000
I was surprised.

7
00:00:25,000 --> 00:00:29,160
I thought maybe we'd have no news with the holiday week here in the States, but no, it

8
00:00:29,160 --> 00:00:32,160
turns out we do have a few things to talk about this week.

9
00:00:32,160 --> 00:00:36,800
One of them, probably not too surprising to most of those in our audience.

10
00:00:36,800 --> 00:00:42,920
Yeah, so Google have been collecting location data from Android users who don't even know

11
00:00:42,920 --> 00:00:43,920
about it.

12
00:00:43,920 --> 00:00:48,000
So even if you've got location turned off, and even if you've got no SIM card in your

13
00:00:48,000 --> 00:00:51,360
device, they're still collecting location data.

14
00:00:51,360 --> 00:00:56,640
Yeah, this is actually a result of some legitimate journalism that courts.com did.

15
00:00:56,640 --> 00:01:00,000
And they discovered that even if you have your SIM device removed, even if you have

16
00:01:00,000 --> 00:01:08,080
all location services disabled, every time your phone registers a cell tower nearby,

17
00:01:08,080 --> 00:01:13,440
with whatever means it does that, I suppose, it logs in a database, and then batch uploads

18
00:01:13,440 --> 00:01:17,280
it to Google next time it has an internet connection, say when you're on Wi-Fi.

19
00:01:17,280 --> 00:01:21,820
Now I think maybe the most surprising element was, even if you don't have a SIM card part,

20
00:01:21,820 --> 00:01:25,320
and Google says, we were never really using this data for anything significant.

21
00:01:25,320 --> 00:01:28,000
We were discarding it almost immediately.

22
00:01:28,000 --> 00:01:31,440
It was just helping us get push notifications to you a little faster.

23
00:01:31,440 --> 00:01:32,720
Yeah, that's what I'd say.

24
00:01:32,720 --> 00:01:35,860
Yeah, it seemed a little too typical of a response.

25
00:01:35,860 --> 00:01:41,400
And it was also odd because the cellular network is responsible for routing the data on the

26
00:01:41,400 --> 00:01:42,740
cellular network.

27
00:01:42,740 --> 00:01:44,640
So they keep track of which towers you're next to.

28
00:01:44,640 --> 00:01:47,680
I don't really know why Google would need to.

29
00:01:47,680 --> 00:01:52,840
It's not like they can influence the TCP IP network of AT&T or Verizon.

30
00:01:52,840 --> 00:01:54,960
And it's worth pointing out that it's not just phones here.

31
00:01:54,960 --> 00:01:56,900
We're talking about tablets as well.

32
00:01:56,900 --> 00:01:57,900
And a lot of them.

33
00:01:57,900 --> 00:02:03,240
They push us out across a range of devices back in January, modern devices, quote unquote.

34
00:02:03,240 --> 00:02:06,120
So they must be doing this through the Play Services API.

35
00:02:06,120 --> 00:02:08,140
That would be my speculation completely.

36
00:02:08,140 --> 00:02:12,800
The Quartz article and the pocketnow.com article we have linked don't actually go into how

37
00:02:12,800 --> 00:02:18,200
Google managed to successfully push this code out to all these Android users and then is

38
00:02:18,200 --> 00:02:20,400
going to successfully turn it off.

39
00:02:20,400 --> 00:02:23,400
They must be using the Play Services, but that would be an assumption.

40
00:02:23,400 --> 00:02:25,640
Well, I can't see any other way to do it.

41
00:02:25,640 --> 00:02:29,680
Well, then does that mean your device has it if you put the Google Apps and Play Services

42
00:02:29,680 --> 00:02:32,200
on an alternative ROM?

43
00:02:32,200 --> 00:02:34,180
Almost certainly, yes.

44
00:02:34,180 --> 00:02:35,180
Which is quite scary, really.

45
00:02:35,180 --> 00:02:39,560
It makes me want to maybe think about just going F-Droid only, but I don't think I'm

46
00:02:39,560 --> 00:02:40,920
ready to do that just yet.

47
00:02:40,920 --> 00:02:45,720
But you know, this whole thing is not a surprise to me at all because Android is all about

48
00:02:45,720 --> 00:02:47,960
location.

49
00:02:47,960 --> 00:02:51,740
Everything you do on the phone, it asks you to enable location.

50
00:02:51,740 --> 00:02:56,800
Now most people I think just have it on by default and don't think about it, but I disabled

51
00:02:56,800 --> 00:02:58,640
my location whenever possible.

52
00:02:58,640 --> 00:03:02,600
I only enable it when I need to do GPS basically with my phone.

53
00:03:02,600 --> 00:03:06,800
I'm not interested in sites knowing my location.

54
00:03:06,800 --> 00:03:12,200
One of the most annoying things is in Chrome on Android, it pops up, this site needs your

55
00:03:12,200 --> 00:03:13,200
location.

56
00:03:13,200 --> 00:03:14,200
No, it doesn't need it.

57
00:03:14,200 --> 00:03:16,880
It wants my location because it wants that data.

58
00:03:16,880 --> 00:03:21,360
And every time you open maps, it wants you to enable location.

59
00:03:21,360 --> 00:03:26,160
And the thing is that it's so easy to enable it, but it's quite difficult to turn it off.

60
00:03:26,160 --> 00:03:30,740
You can't turn it off with a widget, for example, but you can turn it on.

61
00:03:30,740 --> 00:03:35,360
And so it's all weighted to try and get as much location data as possible, which is not

62
00:03:35,360 --> 00:03:40,280
a huge surprise because that data is really valuable to an advertising company like Google.

63
00:03:40,280 --> 00:03:41,280
Right.

64
00:03:41,280 --> 00:03:42,960
I don't really think any of us are too surprised.

65
00:03:42,960 --> 00:03:46,080
And this is sort of what Android is meant to do.

66
00:03:46,080 --> 00:03:51,880
But that niggly thing in the back of our minds is we all know that Google is an advertising

67
00:03:51,880 --> 00:03:52,880
company.

68
00:03:52,880 --> 00:03:56,160
And that's where it gets a little uncomfortable because we're all getting a little wigged

69
00:03:56,160 --> 00:03:59,520
out by this, and it's just becoming a little too much.

70
00:03:59,520 --> 00:04:02,120
And Google just keeps accidentally doing this.

71
00:04:02,120 --> 00:04:07,320
I bet a lot of us thought back to the Wi-Fi snooping that they got caught driving around,

72
00:04:07,320 --> 00:04:13,460
wholesaling, TCP dumping people's Wi-Fi data, and then, oh, sorry, we left that turned on.

73
00:04:13,460 --> 00:04:18,000
That thing that takes up tons and tons of storage and dumps traffic from the interface

74
00:04:18,000 --> 00:04:20,520
to the hard drive, we accidentally left that turned on.

75
00:04:20,520 --> 00:04:24,580
Yeah, they must have had huge disk arrays in those cars because if you drive around

76
00:04:24,580 --> 00:04:27,200
all day every day, that's a lot of data, isn't it?

77
00:04:27,200 --> 00:04:28,200
Yeah.

78
00:04:28,200 --> 00:04:29,200
You build for that.

79
00:04:29,200 --> 00:04:30,200
Exactly.

80
00:04:30,200 --> 00:04:31,200
Yeah.

81
00:04:31,200 --> 00:04:35,280
It just feels very shady from them.

82
00:04:35,280 --> 00:04:38,160
Not this cool company anymore, are they?

83
00:04:38,160 --> 00:04:41,600
They're just a big, evil advertising company at the end of the day.

84
00:04:41,600 --> 00:04:42,600
Well, no.

85
00:04:42,600 --> 00:04:43,880
It's a big, evil company's alphabet.

86
00:04:43,880 --> 00:04:44,880
Google's still great.

87
00:04:44,880 --> 00:04:45,880
We love Google.

88
00:04:45,880 --> 00:04:48,340
Just look online at all the comments.

89
00:04:48,340 --> 00:04:49,560
I'm not a big Google hater.

90
00:04:49,560 --> 00:04:54,440
I am a little skeptical sometimes of some of their actions, and I apply Google cautiously

91
00:04:54,440 --> 00:04:55,440
in my life.

92
00:04:55,440 --> 00:04:59,580
And this is why I opted not to be an Android user, is I just sort of assumed this stuff

93
00:04:59,580 --> 00:05:00,980
is going on.

94
00:05:00,980 --> 00:05:05,220
And in the meantime, I'm waiting for the best free phone possible, and I'll jump to that

95
00:05:05,220 --> 00:05:06,680
when it's available.

96
00:05:06,680 --> 00:05:10,900
And some of you may remember during this whole free phone initiative that Canonical was taking

97
00:05:10,900 --> 00:05:16,240
on a few years ago, a project was born, a project named Mirror, which may have its relevancy

98
00:05:16,240 --> 00:05:17,840
now on the desktop.

99
00:05:17,840 --> 00:05:22,300
Yeah, we thought that it was going to die when they made the announcement about ditching

100
00:05:22,300 --> 00:05:23,800
the phone and everything.

101
00:05:23,800 --> 00:05:29,000
But it seems to have lived on as part of the Wayland stack on Ubuntu.

102
00:05:29,000 --> 00:05:33,600
And now they're reaching out to the community for input on exactly how that is going to

103
00:05:33,600 --> 00:05:34,600
work.

104
00:05:34,600 --> 00:05:40,040
So even if you're not an Ubuntu user, or ever going to be a Mirror user, or even a Wayland

105
00:05:40,040 --> 00:05:47,880
user, this post is worth reading, simply because it illustrates a couple of major design philosophies

106
00:05:47,880 --> 00:05:52,440
that people are kicking around for rebuilding desktops for Wayland.

107
00:05:52,440 --> 00:05:58,120
Major architecture changes, and they're sort of seeking input on the pros and cons for

108
00:05:58,120 --> 00:05:59,740
each architecture.

109
00:05:59,740 --> 00:06:07,440
One is sort of a monolithic, everything is one big process, it's non-modular at all,

110
00:06:07,440 --> 00:06:13,000
it's from top to bottom, it's a server, compositor, and window manager, the panels, the dock,

111
00:06:13,000 --> 00:06:19,520
the desktop, it's all a single glorious process, which means it's nice and secure, it's impossible

112
00:06:19,520 --> 00:06:24,120
for apps to learn or manipulate the shell in unexpected ways, it also means a single

113
00:06:24,120 --> 00:06:27,140
thing can take the whole damn thing down.

114
00:06:27,140 --> 00:06:32,760
Now there are some desktops today, some major desktops, that are building their Wayland

115
00:06:32,760 --> 00:06:33,840
support this way.

116
00:06:33,840 --> 00:06:39,400
It may perform well, and it solves having to create a sophisticated IPC system, but

117
00:06:39,400 --> 00:06:43,320
it also means single points of failure for your entire desktop.

118
00:06:43,320 --> 00:06:49,400
So then they toss out the highly modular desktop, which is the server, a compositor, a window

119
00:06:49,400 --> 00:06:55,040
manager, each panel and dock and desktop are all individual processes.

120
00:06:55,040 --> 00:07:00,480
You can mix and match different components with this approach, there's less likely for

121
00:07:00,480 --> 00:07:05,160
one component to crash and take down the whole system, but it's very complex.

122
00:07:05,160 --> 00:07:10,000
It relies on an IPC system, an inner process communication system, to sync state between

123
00:07:10,000 --> 00:07:15,600
all the separate processes, which can risk race conditions and add delay, and security

124
00:07:15,600 --> 00:07:20,160
is compromised, because you can potentially have maybe a man in the middle there, or something

125
00:07:20,160 --> 00:07:24,240
like that that can listen in on another application, but that's generally how X applications work

126
00:07:24,240 --> 00:07:26,040
today, the former there.

127
00:07:26,040 --> 00:07:29,680
And they're seeking input on what the community wants, and there's been some good discussion

128
00:07:29,680 --> 00:07:30,680
already.

129
00:07:30,680 --> 00:07:35,760
I really don't know where I stand on this, because as an XFCE user, modularity and customization

130
00:07:35,760 --> 00:07:40,480
and everything is key to the whole XFCE desktop.

131
00:07:40,480 --> 00:07:47,760
But I do understand these cons, this security issue, and the fact that X is horribly insecure.

132
00:07:47,760 --> 00:07:53,800
So I just don't know, I don't really want to have a desktop that will potentially crash

133
00:07:53,800 --> 00:07:54,800
that easily.

134
00:07:54,800 --> 00:07:55,800
Yeah.

135
00:07:55,800 --> 00:07:56,800
I'm thinking of your OBS machine.

136
00:07:56,800 --> 00:07:57,800
Me too.

137
00:07:57,800 --> 00:07:58,800
Yep.

138
00:07:58,800 --> 00:08:01,000
I'm looking at it right now.

139
00:08:01,000 --> 00:08:05,600
I think the question that has to be answered here is, what's the final role of MIR going

140
00:08:05,600 --> 00:08:06,740
to be here?

141
00:08:06,740 --> 00:08:13,900
Is MIR going to be a set of stable APIs that different desktop projects can target to implement

142
00:08:13,900 --> 00:08:15,460
their Wayland support?

143
00:08:15,460 --> 00:08:21,520
So instead of them inventing the ability to be a compositor, and creating all of this

144
00:08:21,520 --> 00:08:22,520
stuff to do...

145
00:08:22,520 --> 00:08:24,360
Because remember, Wayland is a protocol, it's not a server.

146
00:08:24,360 --> 00:08:28,120
There's not some server that I3 can just be rebuilt to talk to.

147
00:08:28,120 --> 00:08:31,780
No, they have to rebuild I3, and that's where Sway is coming from.

148
00:08:31,780 --> 00:08:36,480
These are massive re-buildings of some of these projects, and not all of them are going

149
00:08:36,480 --> 00:08:39,240
to want to write their own Sway.

150
00:08:39,240 --> 00:08:43,540
You can check that out if you want to, just go Google Sway desktop.

151
00:08:43,540 --> 00:08:44,620
It's a major problem.

152
00:08:44,620 --> 00:08:50,260
And MIR could come along to projects like XFCE, Cinnamon even, and say, here's a way

153
00:08:50,260 --> 00:08:52,800
to support Wayland out of the box.

154
00:08:52,800 --> 00:08:57,920
And if that is going to be MIR's final role, then it seems like the modular approach is

155
00:08:57,920 --> 00:09:03,000
the most obvious, because different projects could select the components that they want,

156
00:09:03,000 --> 00:09:06,460
or build their own components to make a better snap in.

157
00:09:06,460 --> 00:09:11,380
And if it's all one big monolithic process, all big one monolith, that's going to be less

158
00:09:11,380 --> 00:09:16,400
attractive to some of these more modular open source projects like XFCE, or Cinnamon, just

159
00:09:16,400 --> 00:09:18,320
as a random example.

160
00:09:18,320 --> 00:09:22,500
And so what do you think about Ubuntu and Canonical reaching out to the community like

161
00:09:22,500 --> 00:09:24,400
this and asking for their input?

162
00:09:24,400 --> 00:09:26,500
Well, it's gone better than I expected.

163
00:09:26,500 --> 00:09:32,040
When I first saw it, I thought, probably not going to be very productive.

164
00:09:32,040 --> 00:09:35,560
I don't know why, my bias was just, this seems like one of those things where you just kind

165
00:09:35,560 --> 00:09:39,600
of have to have a technical understanding of the market, what technical deficiencies

166
00:09:39,600 --> 00:09:43,460
are out there, and what your product can do that's not currently being solved, and build

167
00:09:43,460 --> 00:09:44,460
for that.

168
00:09:44,460 --> 00:09:47,080
And that seems the way you build something like this.

169
00:09:47,080 --> 00:09:51,800
But now having this opened up for input, you're seeing some good conversations in here, specifically

170
00:09:51,800 --> 00:09:55,920
like from one of the Sway developers about some of the things they considered, people

171
00:09:55,920 --> 00:10:00,800
who are thinking about theming, people that are in here representing KWIN, I mean, it's

172
00:10:00,800 --> 00:10:03,180
actually a pretty productive conversation.

173
00:10:03,180 --> 00:10:06,840
So now, having seen the results, I'm actually kind of glad they did it.

174
00:10:06,840 --> 00:10:14,480
Well, I think that if it's going to be used by the community at large, and not just Ubuntu,

175
00:10:14,480 --> 00:10:16,920
then they need to get community involvement, don't they?

176
00:10:16,920 --> 00:10:19,660
So this is definitely the right approach to it.

177
00:10:19,660 --> 00:10:25,240
As you say, if it's going to work for the likes of XFCE, then they can't expect to just

178
00:10:25,240 --> 00:10:30,000
invent it themselves, and make all the decisions, and then have other people adopt it.

179
00:10:30,000 --> 00:10:31,800
So I think it is a good idea.

180
00:10:31,800 --> 00:10:37,080
But at the same time, it does show a change in Ubuntu, doesn't it?

181
00:10:37,080 --> 00:10:42,000
And canonical, that they used to just make all the decisions, make the thing, and push

182
00:10:42,000 --> 00:10:45,060
it out there as free software, take it or leave it.

183
00:10:45,060 --> 00:10:49,760
Whereas now, they're going for more of this community engagement approach, which I suppose

184
00:10:49,760 --> 00:10:50,760
has got to be better.

185
00:10:50,760 --> 00:10:54,540
I think my closing thoughts on this would be, this process now being out in the open,

186
00:10:54,540 --> 00:11:00,320
may give us real indications if there's community demand for this project in the first place.

187
00:11:00,320 --> 00:11:01,640
I sure hope there is.

188
00:11:01,640 --> 00:11:08,000
Because I could see a future where a desktop project could say, we support mere Wayland

189
00:11:08,000 --> 00:11:09,320
version 1.0.

190
00:11:09,320 --> 00:11:12,920
And that means you get real VNC support remote desktop.

191
00:11:12,920 --> 00:11:17,760
That means you get Vulkan graphics that don't screw up on your machine.

192
00:11:17,760 --> 00:11:21,420
It means you can have copy and paste between applications.

193
00:11:21,420 --> 00:11:23,680
You know you get a certain feature set.

194
00:11:23,680 --> 00:11:27,200
And when the next version comes out, you get the next set of features.

195
00:11:27,200 --> 00:11:32,120
That would be the best way as an end user, me personally, selfishly here, that would

196
00:11:32,120 --> 00:11:36,000
be the best way for me to wrap my head around these transitions we're about to hit with

197
00:11:36,000 --> 00:11:40,600
different desktop projects having different levels of support for different basic desktop

198
00:11:40,600 --> 00:11:41,600
functionality.

199
00:11:41,600 --> 00:11:46,400
Well, as long as I never, ever have to see screen tearing again, I'm happy.

200
00:11:46,400 --> 00:11:48,600
All in the name of screen tearing, eh, Joe?

201
00:11:48,600 --> 00:11:49,600
Yeah.

202
00:11:49,600 --> 00:11:50,600
All right.

203
00:11:50,600 --> 00:11:52,920
So the Raspberry Pi Foundation have got a new magazine.

204
00:11:52,920 --> 00:11:55,140
So I thought we'd just have a quick mention of this.

205
00:11:55,140 --> 00:11:58,400
It's free, as in beer, and it's also Creative Commons.

206
00:11:58,400 --> 00:11:59,680
So that's all good.

207
00:11:59,680 --> 00:12:03,320
Or you can pay for a hard copy of it, a paper copy.

208
00:12:03,320 --> 00:12:05,020
It's called Hack Space.

209
00:12:05,020 --> 00:12:12,360
And as the name suggests, it's all about making and building and creating things.

210
00:12:12,360 --> 00:12:16,440
Obviously Raspberry Pi focused, and most of the stuff in there is going to involve Linux.

211
00:12:16,440 --> 00:12:19,720
So hopefully it's going to spread Linux that little bit further.

212
00:12:19,720 --> 00:12:21,960
Yeah, it's really well done.

213
00:12:21,960 --> 00:12:23,440
Exceptionally good photography.

214
00:12:23,440 --> 00:12:27,200
They also have apps in the iOS and Play stores.

215
00:12:27,200 --> 00:12:31,280
If you check it out, just go grab the free PDF from the link we have in the show notes.

216
00:12:31,280 --> 00:12:33,080
It really has a very well done feeling.

217
00:12:33,080 --> 00:12:36,320
There's a couple of very interesting articles in there.

218
00:12:36,320 --> 00:12:39,960
I read through a couple of them before the show this morning, and I'm going back to it

219
00:12:39,960 --> 00:12:41,140
afterwards to keep reading them.

220
00:12:41,140 --> 00:12:42,140
I was impressed.

221
00:12:42,140 --> 00:12:45,600
Well, it's not a surprise that it's well put together, because if you look at who's involved

222
00:12:45,600 --> 00:12:51,860
in it, there's a couple of the guys from Linux Voice, Andrew Gregory and Ben Everard.

223
00:12:51,860 --> 00:12:54,320
So it's great to see them working on another magazine.

224
00:12:54,320 --> 00:13:01,920
And yeah, do check it out if you're interested in making in the Raspberry Pi.

225
00:13:01,920 --> 00:13:02,920
DigitalOcean.com.

226
00:13:02,920 --> 00:13:06,240
Go create an account and then use our promo code, here's the thing.

227
00:13:06,240 --> 00:13:09,880
All one word, you smush it together and you get a $10 credit.

228
00:13:09,880 --> 00:13:13,600
Now everything you deploy at DigitalOcean, you can get launched in under a minute, and

229
00:13:13,600 --> 00:13:16,840
it's all backed by brilliant, fast SSDs.

230
00:13:16,840 --> 00:13:19,600
They have 40 gigabit connections coming into the hypervisor.

231
00:13:19,600 --> 00:13:23,080
They have just about every Linux distribution you'd ever want to run on a server available,

232
00:13:23,080 --> 00:13:24,280
and free BSD.

233
00:13:24,280 --> 00:13:27,840
They have all kinds of dynamic storage options, where you can add more storage as you need

234
00:13:27,840 --> 00:13:29,600
it, add more RAM or CPU.

235
00:13:29,600 --> 00:13:34,520
I love the block storage system, just shows up as a Dev SDA device, like a dev device.

236
00:13:34,520 --> 00:13:37,560
And object storage is the way to go now.

237
00:13:37,560 --> 00:13:39,220
It feels like the future has arrived.

238
00:13:39,220 --> 00:13:42,280
They can make this all so simple through their dashboard.

239
00:13:42,280 --> 00:13:45,700
If you've never worked with anything like this, you can get started today.

240
00:13:45,700 --> 00:13:48,680
And if you're a pro, you've been working with this for years, you're going to be impressed

241
00:13:48,680 --> 00:13:52,160
with their straightforward API and how powerful that dashboard is.

242
00:13:52,160 --> 00:13:56,520
Tons of backend features, but I want to point you this week to an introduction to machine

243
00:13:56,520 --> 00:13:58,080
learning.

244
00:13:58,080 --> 00:13:59,200
It's a big buzzword.

245
00:13:59,200 --> 00:14:01,520
You hear Google talking about it constantly.

246
00:14:01,520 --> 00:14:03,840
You hear it's integrated into all of the products these days.

247
00:14:03,840 --> 00:14:05,600
Well, what the heck is it?

248
00:14:05,600 --> 00:14:07,080
DigitalOcean has a fantastic write-up.

249
00:14:07,080 --> 00:14:11,080
Go to digitalocean.com, create your account, use our promo code, here's the thing.

250
00:14:11,080 --> 00:14:14,860
And then while you're there, check out their community section and get an introduction

251
00:14:14,860 --> 00:14:19,400
to machine learning, digitalocean.com, promo code, here's the thing.

252
00:14:19,400 --> 00:14:25,800
Okay, let's talk about the kernel and the kernel mailing list and what Linus has been

253
00:14:25,800 --> 00:14:27,240
getting up to this week.

254
00:14:27,240 --> 00:14:32,120
Yeah, it really gets everybody's attention when Linus gives someone a public dressing

255
00:14:32,120 --> 00:14:33,920
down on the mailing list.

256
00:14:33,920 --> 00:14:37,280
We'll cut through some of the drama and get to the technical argument here.

257
00:14:37,280 --> 00:14:41,720
There's a Google Pixel security team member who's been advocating for a change in the

258
00:14:41,720 --> 00:14:46,240
Linux kernel and he's been advocating it kind of at a bad time during the development cycle

259
00:14:46,240 --> 00:14:49,600
to essentially kill processes when a condition is met.

260
00:14:49,600 --> 00:14:51,920
And Linus wasn't having any of this.

261
00:14:51,920 --> 00:14:56,520
At the core of this argument, I believe what we're seeing develop, and this is my opinion

262
00:14:56,520 --> 00:15:00,920
here, but you're seeing an old-school approach to software development where all software

263
00:15:00,920 --> 00:15:02,060
problems are bugs.

264
00:15:02,060 --> 00:15:06,680
If it's a security issue, if it's a crash issue, if it's a spelling issue, they're all

265
00:15:06,680 --> 00:15:07,680
bugs.

266
00:15:07,680 --> 00:15:09,920
You can have different degree of severity, but it's a bug.

267
00:15:09,920 --> 00:15:14,080
There's a more modern school of thought where security issues are an extreme kind of bug

268
00:15:14,080 --> 00:15:16,200
that get absolute priority.

269
00:15:16,200 --> 00:15:19,200
They're treated differently than other types of software development.

270
00:15:19,200 --> 00:15:23,360
And I think you're seeing a collision of these two different viewpoints in the Linux kernel.

271
00:15:23,360 --> 00:15:27,480
And some of these software developers, like this Pixel team member, are specifically hired

272
00:15:27,480 --> 00:15:32,280
to work on security issues and have a security opinion on how things should be designed.

273
00:15:32,280 --> 00:15:35,040
And so you're seeing a butting of heads there on the two different approaches.

274
00:15:35,040 --> 00:15:39,520
Well, there are two arguments for treating all bugs equally.

275
00:15:39,520 --> 00:15:43,880
One of them, of course, is that any bug could be a security bug because you never know,

276
00:15:43,880 --> 00:15:48,460
it could be exploited in some way that's unexpected.

277
00:15:48,460 --> 00:15:53,920
And the other argument is about the whole user experience, in that if you deal with

278
00:15:53,920 --> 00:16:00,360
security problems in a way that affects the overall experience by killing processes, then

279
00:16:00,360 --> 00:16:05,320
the average user who doesn't really understand what's happening is going to have a degraded

280
00:16:05,320 --> 00:16:06,320
experience.

281
00:16:06,320 --> 00:16:11,000
And that is not good because the first rule of the kernel development is don't break user

282
00:16:11,000 --> 00:16:12,000
space.

283
00:16:12,000 --> 00:16:14,080
Yeah, Linus says, let's take a more rational approach.

284
00:16:14,080 --> 00:16:16,200
He says, let's find where there's a problem.

285
00:16:16,200 --> 00:16:18,280
Let's warn about what looks dangerous.

286
00:16:18,280 --> 00:16:21,280
And then once we've warned for a long time, and we're confident we've caught all of the

287
00:16:21,280 --> 00:16:24,840
normal cases, then we can start taking more drastic measures.

288
00:16:24,840 --> 00:16:29,440
We have to stop going for a shoot first, then ask questions approach, he says.

289
00:16:29,440 --> 00:16:33,120
I know you're not particularly interested in the whole politics of it all.

290
00:16:33,120 --> 00:16:40,480
And Linus shouting and swearing on the mailing list, but that represents a very different

291
00:16:40,480 --> 00:16:46,900
approach to what the Linux Foundation wants to be about as well.

292
00:16:46,900 --> 00:16:51,000
They want to be all corporate, and they've got all these corporate sponsors and everything,

293
00:16:51,000 --> 00:16:54,080
and it kind of doesn't look good for them.

294
00:16:54,080 --> 00:16:55,920
And they're not really very happy about it.

295
00:16:55,920 --> 00:16:59,240
And that's why this has come up many, many times.

296
00:16:59,240 --> 00:17:02,040
It depends on who is observing.

297
00:17:02,040 --> 00:17:07,080
If it's the chattering class chattering on about his rough language and toxic workplace,

298
00:17:07,080 --> 00:17:08,080
then you're right.

299
00:17:08,080 --> 00:17:09,380
It doesn't look good.

300
00:17:09,380 --> 00:17:15,840
If I'm a CTO, if I'm an IT person, and I'm looking at Linus Torvalds defend the stability

301
00:17:15,840 --> 00:17:20,520
of user space, and if I'm looking at him giving an accurate dressing down to the security

302
00:17:20,520 --> 00:17:23,720
researcher who was trying to ram something in last minute in a development cycle that

303
00:17:23,720 --> 00:17:29,340
kills processes, my takeaway is Linus is protecting the stability of the Linux kernel, and they

304
00:17:29,340 --> 00:17:34,080
have the right person at the helm there for the kernel I want to run on my production

305
00:17:34,080 --> 00:17:35,080
systems.

306
00:17:35,080 --> 00:17:38,000
So really, the messaging I take away from this is he's doing his job, and he's doing

307
00:17:38,000 --> 00:17:39,000
it well.

308
00:17:39,000 --> 00:17:40,000
Well, yeah, I agree.

309
00:17:40,000 --> 00:17:44,040
He is doing his job well, but you have to think to the future and what happens when

310
00:17:44,040 --> 00:17:47,160
he's no longer around for whatever reason.

311
00:17:47,160 --> 00:17:51,200
Whoever replaces him, are they going to be as strong a figurehead?

312
00:17:51,200 --> 00:17:56,400
Are they going to have the chops to say, no, we're not having this thing in?

313
00:17:56,400 --> 00:17:57,640
Well, I have two answers for you.

314
00:17:57,640 --> 00:18:01,080
The short answer is just die before Linus does, problem solved.

315
00:18:01,080 --> 00:18:07,160
The second answer is I wouldn't be surprised if this is the nature of the beast.

316
00:18:07,160 --> 00:18:13,240
When you are working on a project with this level of scale and importance, this just might

317
00:18:13,240 --> 00:18:15,480
be what a person turns into.

318
00:18:15,480 --> 00:18:20,120
In fact, the guy he was yelling at, this Pixel developer fellow, he even copped to it and

319
00:18:20,120 --> 00:18:25,140
said, I think my main flaw in helping bring these defenses to the kernel has been thinking

320
00:18:25,140 --> 00:18:28,960
they can be fully tested during a single development cycle.

321
00:18:28,960 --> 00:18:33,160
And this mistake was made quite clear this cycle, which is why I made the adjustments

322
00:18:33,160 --> 00:18:34,160
I did.

323
00:18:34,160 --> 00:18:37,560
He says, I'd like to think that I did learn something since I fixed this up before you

324
00:18:37,560 --> 00:18:41,920
yelled at me, and I'll make further adjustments and try again for 4.16.

325
00:18:41,920 --> 00:18:46,560
Well Case Cook backed down on that aspect of it, but he got into a bit of a bind with

326
00:18:46,560 --> 00:18:53,560
GR security and acted in what can only be described as a very bizarre way.

327
00:18:53,560 --> 00:19:00,160
Childish, Reckless, Case Cook, and Brad Sprengler from GR Security are trying to one-up each

328
00:19:00,160 --> 00:19:04,280
other by dropping zero-day links on Twitter for vulnerabilities they've discovered.

329
00:19:04,280 --> 00:19:09,500
So that way they can each measure each other and see who is the bigger man, apparently.

330
00:19:09,500 --> 00:19:14,120
And this is the definition of reckless behavior in the security research industry.

331
00:19:14,120 --> 00:19:16,480
This is how you devastate a reputation.

332
00:19:16,480 --> 00:19:24,960
Yeah I would kind of expect it from GR Security, because they've kind of got not a great reputation.

333
00:19:24,960 --> 00:19:29,640
But from Case Cook, he's got quite a good reputation and working for Google and stuff,

334
00:19:29,640 --> 00:19:33,000
I'm just really surprised to see him do this.

335
00:19:33,000 --> 00:19:37,840
My takeaway message from these stories, it's a sad state of the security research industry.

336
00:19:37,840 --> 00:19:41,520
Something that I used to hold a lot of respect for, a lot of hard work in the security research

337
00:19:41,520 --> 00:19:42,520
industry.

338
00:19:42,520 --> 00:19:46,120
And now we see people one-upping each other and trying to ram code into big projects like

339
00:19:46,120 --> 00:19:48,160
the Linux kernel just to get a name for themselves.

340
00:19:48,160 --> 00:19:49,480
It's a sad state, Joe.

341
00:19:49,480 --> 00:19:53,720
It is a sad state, but hopefully while people like Linus are around, he'll keep them in

342
00:19:53,720 --> 00:19:55,560
check for now.

343
00:19:55,560 --> 00:20:00,400
And at least all that stuff is open source so we can see what's happening with it, unlike

344
00:20:00,400 --> 00:20:02,400
the Intel management engine.

345
00:20:02,400 --> 00:20:07,560
Yeah, back in the news after just talking about it recently, Intel I guess noticed,

346
00:20:07,560 --> 00:20:09,880
hey, everybody's talking about the management engine.

347
00:20:09,880 --> 00:20:14,600
So they decided to do a little audit, and another company got involved called Positive

348
00:20:14,600 --> 00:20:18,600
Technologies Research, who we've talked about once before on the show, and they discovered

349
00:20:18,600 --> 00:20:23,920
that remote attackers could launch commands on a host of an Intel-based computer, including

350
00:20:23,920 --> 00:20:28,520
laptops and desktops that were shipped with Intel Core processors since 2015.

351
00:20:28,520 --> 00:20:32,200
Most of the vulnerabilities require physical access to the targeted devices, but one of

352
00:20:32,200 --> 00:20:35,520
them does allow remote attacks with administrative access.

353
00:20:35,520 --> 00:20:37,800
What is going on here?

354
00:20:37,800 --> 00:20:44,760
How can we have this running in so many machines and have no idea what it's doing?

355
00:20:44,760 --> 00:20:50,920
I suppose we live in a world where most people still run Windows on their laptops, but we're

356
00:20:50,920 --> 00:20:53,560
talking about servers as well.

357
00:20:53,560 --> 00:20:58,200
Surely this has to be a catalyst for Intel to be forced to open source it.

358
00:20:58,200 --> 00:20:59,200
Hmm.

359
00:20:59,200 --> 00:21:00,200
I hadn't thought of that.

360
00:21:00,200 --> 00:21:02,280
I'm doubtful of that because of reasons.

361
00:21:02,280 --> 00:21:03,280
They'll have all kinds of reasons.

362
00:21:03,280 --> 00:21:04,280
Oh, of course.

363
00:21:04,280 --> 00:21:09,440
We've got all sorts of corporate reasons, but at least we've got to pressure them into

364
00:21:09,440 --> 00:21:11,000
doing something about it.

365
00:21:11,000 --> 00:21:17,400
I wonder if that pressure might result in a ME-free Intel chip, like a motherboard with

366
00:21:17,400 --> 00:21:19,800
an Intel CPU that doesn't have a management engine.

367
00:21:19,800 --> 00:21:25,040
And maybe it's not like an enterprise grade, but it could be an option for consumers.

368
00:21:25,040 --> 00:21:30,400
I've been speculating about that, and even that I'm doubtful of, Joe, and that seems

369
00:21:30,400 --> 00:21:31,660
like a baby step.

370
00:21:31,660 --> 00:21:37,440
I wonder if it would even be possible to have a Intel processor that's working properly

371
00:21:37,440 --> 00:21:39,040
without the management engine.

372
00:21:39,040 --> 00:21:45,000
I'm skeptical about that, or maybe with some reduced functionality or something, but I

373
00:21:45,000 --> 00:21:46,520
think there is a big market for it.

374
00:21:46,520 --> 00:21:48,920
I think especially in the data center.

375
00:21:48,920 --> 00:21:54,280
We talked, I think last week or the week before, about the rise of ARM servers, and the thing

376
00:21:54,280 --> 00:22:00,480
is if Intel don't do something about this, they're going to start losing out on contracts

377
00:22:00,480 --> 00:22:02,320
to supply big data centers.

378
00:22:02,320 --> 00:22:11,120
Because if you are the architect of a huge system with multiple machines, and you read

379
00:22:11,120 --> 00:22:16,240
about stuff like this, you're thinking, hmm, let's have another look at that ARM situation,

380
00:22:16,240 --> 00:22:17,240
maybe.

381
00:22:17,240 --> 00:22:21,640
You also have projects like Google's project to just disable it on all of their servers.

382
00:22:21,640 --> 00:22:26,160
So this is going to be processors from the sixth and seventh and eighth generation of

383
00:22:26,160 --> 00:22:27,240
Intel processors.

384
00:22:27,240 --> 00:22:32,840
So since about 2015, your Skylakes, your Kabylakes, and your Coffee Lake families of processors

385
00:22:32,840 --> 00:22:38,280
on the desktop side, and then there's a larger line of Intel Xeon processors, which you can

386
00:22:38,280 --> 00:22:39,880
check the link in the show notes.

387
00:22:39,880 --> 00:22:44,680
So if you have anything older than Skylake, you don't have the Minix version of the management

388
00:22:44,680 --> 00:22:45,680
engine.

389
00:22:45,680 --> 00:22:48,960
Doesn't mean it doesn't have vulnerabilities, it's just not getting poked at as much right

390
00:22:48,960 --> 00:22:49,960
now.

391
00:22:49,960 --> 00:22:53,960
Some of these are pretty significant, some of them are minor, HP, Dell, and other vendors

392
00:22:53,960 --> 00:22:58,000
are pushing out their respective firmwares, and I'd be curious how you Linux users are

393
00:22:58,000 --> 00:23:01,480
going to patch your Intel ME firmware.

394
00:23:01,480 --> 00:23:05,080
Are you booting into some sort of free DOS, are you doing it from Linux, tweet me at Chris

395
00:23:05,080 --> 00:23:07,120
LAS, how are you going to patch against this?

396
00:23:07,120 --> 00:23:10,080
Maybe some of us can just load up GNOME software and do an update.

397
00:23:10,080 --> 00:23:14,480
But in the meantime, check out linuxactionnews.com slash subscribe for all the ways to get new

398
00:23:14,480 --> 00:23:15,480
episodes.

399
00:23:15,480 --> 00:23:19,160
And go to linuxactionnews.com slash contact for ways to get in touch.

400
00:23:19,160 --> 00:23:24,240
And you can support the whole network at our Patreon page, patreon.com slash jupitersignal.

401
00:23:24,240 --> 00:23:28,320
We'll be back next Monday with our weekly take on the latest Linux and open source news.

402
00:23:28,320 --> 00:23:30,080
I'm at Chris LAS.

403
00:23:30,080 --> 00:23:31,760
I'm at Joe Rissington.

404
00:23:31,760 --> 00:23:34,360
Thank you for joining us, and we'll see you next week.

405
00:23:34,360 --> 00:23:52,880
Until then, have a great day, and we'll see you later.


WEBVTT

00:00.000 --> 00:09.380
Hello, and welcome to Linux Action News, episode 236, recorded on April 13th, 2022.

00:09.380 --> 00:10.380
I'm Chris.

00:10.380 --> 00:11.380
And I'm Wes.

00:11.380 --> 00:12.380
Hello, Wes.

00:12.380 --> 00:14.000
Let's do the news.

00:14.000 --> 00:21.280
It's been a long four years now since the introduction of SUSE Linux Enterprise 15,

00:21.280 --> 00:24.240
and many are wondering, what's next?

00:24.240 --> 00:30.640
Well, it seems SUSE does have some plans for a next-generation operating system in the

00:30.640 --> 00:38.720
works, dubbed Adaptable Linux Platform, or ALP, and it's expected that this new skunkworks

00:38.720 --> 00:43.960
effort will eventually become the successor to SUSE Linux Enterprise.

00:43.960 --> 00:46.800
This is Stefan Billard noted in today's announcement.

00:46.800 --> 00:53.600
SLEE 15 is a great general purpose operating system, yet challenges with some use cases,

00:53.600 --> 00:58.560
now places of deployment, and the type of enhancement requests show that it's time

00:58.560 --> 01:00.400
for a successor.

01:00.400 --> 01:07.000
You see terms like radical changes sprinkled in the announcement, but as for what all those

01:07.000 --> 01:12.840
changes might actually entail, SUSE is still being a little bit tight-lipped on that, at

01:12.840 --> 01:15.000
least publicly.

01:15.000 --> 01:18.760
We really didn't get much, but they did give us a little hint in their announcement where

01:18.760 --> 01:26.160
they noted, quote, another important point is that we intend to split what was more generic.

01:26.160 --> 01:31.200
Everything is closely intertwined into two parts, one smaller hardware enabling piece,

01:31.200 --> 01:37.720
a kind of host OS, and the layer and supporting applications, which will be containers and

01:37.720 --> 01:38.720
VM-based.

01:38.720 --> 01:43.320
If that sounds appealing to you, well, thankfully, it doesn't sound like we're going to have

01:43.320 --> 01:46.680
to wait too long to find out a bit more.

01:46.680 --> 01:51.520
SUSE is pledging to do the development of this new effort all out in the open and say

01:51.520 --> 01:58.440
they're going to share some more details in the upcoming weeks.

01:58.440 --> 02:03.880
Well up until now, all installs of Raspberry Pi OS have had a little problem, a default

02:03.880 --> 02:09.180
user called Pi, and probably like a lot of you out there, I never really liked this.

02:09.180 --> 02:14.600
Even just knowing a valid user ID on a system is just not ideal from a security standpoint.

02:14.600 --> 02:19.120
With this, among several other issues that some of which still remain, I've never really

02:19.120 --> 02:23.960
been comfortable recommending the official Pi OS to our audience.

02:23.960 --> 02:29.560
But with the latest release of Raspberry Pi OS, that default Pi user is finally being

02:29.560 --> 02:30.560
removed.

02:30.560 --> 02:34.560
Instead, you'll be able to create a user the first time you boot a newly flashed Raspberry

02:34.560 --> 02:36.420
Pi OS image.

02:36.420 --> 02:41.360
In fact, that previously dismissible first run wizard, well, that's now mandatory so

02:41.360 --> 02:43.360
you can create your new account.

02:43.360 --> 02:48.100
And don't worry if you're a headless Raspberry Pi user like myself, that Raspberry Pi imager

02:48.100 --> 02:52.420
tool that's so famous out there, well, that actually lets you pre-configure a user now

02:52.420 --> 02:56.440
that will get written to the image before you write it to the SD card.

02:56.440 --> 03:02.840
The good news is, if you don't use the imager like me, you can also pre-configure the user

03:02.840 --> 03:08.800
account by just adding a text file to the boot folder on the SD card that'll just define

03:08.800 --> 03:09.800
that information.

03:09.800 --> 03:11.800
We'll have the details in the link in the show notes.

03:11.800 --> 03:16.120
It's a small inconvenience really, I think, for a much-needed security improvement.

03:16.120 --> 03:20.600
And it's also nice to see Bluetooth is in better shape for early setup.

03:20.600 --> 03:25.860
And now users have the ability to try out Mudder running on Wayland if they'd like to

03:25.860 --> 03:31.960
test that configuration.

03:31.960 --> 03:37.480
We don't cover every pipeline release, but we do always love a good excuse to talk about

03:37.480 --> 03:38.480
it.

03:38.480 --> 03:44.240
This week, Pipewire 0.3.50 gave us just that reason.

03:44.240 --> 03:49.320
Among the batch of your always-nice-to-see bug fixes and minor improvements, one item

03:49.320 --> 03:54.480
in particular opens up Pipewire to more advanced audio editing workflows.

03:54.480 --> 04:01.000
Yeah, it seems like a silly, maybe even simple thing on the surface, but without this, audio

04:01.000 --> 04:05.800
editors on Linux were limited in some critical ways with the audio effect plugins they could

04:05.800 --> 04:08.640
use while using a Pipewire backend.

04:08.640 --> 04:14.640
Previously, Wine applications that were talking to Jack would crash, and now that has been

04:14.640 --> 04:16.400
fixed with this Pipewire release.

04:16.400 --> 04:21.040
And while this has a lot of perks for many types of users, including gamers out there,

04:21.040 --> 04:26.600
it opens up Windows-based VST plugins to Linux audio editors that are using the Pipewire

04:26.600 --> 04:27.600
stack.

04:27.600 --> 04:33.080
Why, you might ask, is this Linux-based show talking about Windows plugins?

04:33.080 --> 04:39.080
Well, that's because, unfortunately, in the land of content production, a really good

04:39.080 --> 04:46.160
plugin can sometimes be the difference between a lost episode or a saved episode, an inaudible

04:46.160 --> 04:50.080
interview or a really great guest.

04:50.080 --> 04:53.520
And in some cases, you don't even have to go to Windows.

04:53.520 --> 04:59.440
It's surprisingly usable to run some of those Windows plugins right on Linux directly in

04:59.440 --> 05:03.160
your audio editor, routed through Wine.

05:03.160 --> 05:07.200
Something we've been doing for a couple years now, at least when we have to.

05:07.200 --> 05:11.680
Yeah, only when we have to, but it's so great to have that.

05:11.680 --> 05:18.040
And that has meant for us, we've kept Pipewire out of our Jack-based audio workflow on our

05:18.040 --> 05:19.280
editing systems.

05:19.280 --> 05:23.080
But with this version of Pipewire, that may be changing.

05:23.080 --> 05:28.240
And realistically, it's just great to see these kinds of improvements because previous

05:28.240 --> 05:34.660
audio systems on Linux really took a lot longer to get these kinds of features that made pro

05:34.660 --> 05:35.960
workflows doable.

05:35.960 --> 05:40.520
It maybe even took eight, 10 years before some of these features landed.

05:40.520 --> 05:45.200
And we're seeing these kinds of things be addressed much earlier in the Pipewire cycle.

05:45.200 --> 05:50.600
That's really exciting to see.

05:50.600 --> 05:54.240
OpenSSH 9.0 has been released.

05:54.240 --> 06:00.360
This build is primarily a bug fix release, but it also switches to a new quantum computer

06:00.360 --> 06:07.800
proof key exchange protocol by default and includes a number of SFTP changes.

06:07.800 --> 06:14.020
Most notably of which, SCP has finally been switched from using its old vulnerable legacy

06:14.020 --> 06:17.280
protocol to using SFTP on the backend.

06:17.280 --> 06:23.120
This is good news, but do be aware, it's not entirely backwards compatible.

06:23.120 --> 06:26.680
It really is just nice to see these bug fixes and these porting updates.

06:26.680 --> 06:31.800
I think I and maybe some of us take for granted that OpenSSH works just about everywhere,

06:31.800 --> 06:33.760
but that actually takes a lot of maintenance.

06:33.760 --> 06:36.360
It takes a lot of work to keep this thing secure.

06:36.360 --> 06:41.240
And if that quantum computer proof key exchange protocol caught your attention like it did

06:41.240 --> 06:44.260
mine, we'll have more information about that in the show notes.

06:44.260 --> 06:48.320
It's sort of as you might suspect, the idea by the project is to kind of figure this stuff

06:48.320 --> 06:54.400
out now and be prepared by the time a sufficiently advanced quantum computer is available, at

06:54.400 --> 06:59.640
best case scenario, maybe even have quantum resistant software already deployed out in

06:59.640 --> 07:00.640
the wild.

07:00.640 --> 07:09.680
It's pretty interesting stuff, sci-fi stuff, link in the show notes.

07:09.680 --> 07:13.840
While the talk lately around riser FS has been about deprecating the older code from

07:13.840 --> 07:34.000
the Linux kernel, it seems riser development is actually continuing on.

07:34.000 --> 07:39.680
One of the standout features of riser 5 is a new method for parallel scale out of the

07:39.680 --> 07:40.680
file system.

07:40.680 --> 07:45.120
According to Shishkin, this capability is inspired more from networked file systems

07:45.120 --> 07:48.280
rather than traditional RAID storage arrays.

07:48.280 --> 07:52.480
It's still early days and this latest update provides a few numbers on what the performance

07:52.480 --> 07:54.120
might be like.

07:54.120 --> 07:57.280
Not sure where it's going to go, it's certainly interesting research.

07:57.280 --> 08:06.560
And also makes me think, perhaps the rumors of riser's death have been greatly exaggerated.

08:06.560 --> 08:11.280
You might have seen some tantalizing NVIDIA Linux headlines going by this week, including

08:11.280 --> 08:15.880
reports of a brand new open source NVIDIA driver.

08:15.880 --> 08:21.080
And it's true, but with a big catch.

08:21.080 --> 08:26.280
You see, in NVIDIA's latest Linux for Tegra code drop, some interested parties discovered

08:26.280 --> 08:32.000
a new open source kernel driver that had never previously been published.

08:32.000 --> 08:36.940
This driver isn't based on the existing nouveau driver, but rather appears to be derived from

08:36.940 --> 08:42.400
an internal code base with some references going all the way back to the 90s.

08:42.400 --> 08:49.400
Yeah, 1993, it seems, that's something we've always speculated that NVIDIA had these complicated

08:49.400 --> 08:52.560
license deals with third parties in their code that just went back years.

08:52.560 --> 08:56.160
Well, this would kind of seem to maybe confirm that suspicion.

08:56.160 --> 09:01.300
Now, before we get too excited, at least for now, this kernel driver appears to be limited

09:01.300 --> 09:03.560
to their Tegra graphics hardware.

09:03.560 --> 09:08.000
If you try to load this module for a desktop NVIDIA graphics card, well, you're just going

09:08.000 --> 09:09.380
to get errors.

09:09.380 --> 09:14.000
But Michael Larble over at Ferronix noted that when you do look at the driver's source

09:14.000 --> 09:19.480
code, there's actually references in there to many desktop GPUs and, well, other GPUs

09:19.480 --> 09:23.240
that are just outside the Tegra context altogether.

09:23.240 --> 09:25.720
Who knows what that means.

09:25.720 --> 09:30.960
Also making a few waves this week, was NVIDIA finally publishing the signed firmware images

09:30.960 --> 09:34.420
for their RTX 30 Ampere graphics processors.

09:34.420 --> 09:39.340
This is big news because those signed images are required if you want to enable better

09:39.340 --> 09:44.960
hardware support and you're using the free NUVO driver.

09:44.960 --> 09:50.360
NVIDIA first introduced the GeForce 30 series back in September of 2020 and their hardware

09:50.360 --> 09:55.280
has been built in such a way that it requires this signed firmware to just even unlock certain

09:55.280 --> 09:57.960
functionality from the free graphics driver.

09:57.960 --> 10:02.860
So even if the NUVO driver project has the support, it doesn't matter unless NVIDIA

10:02.860 --> 10:07.140
unlocks it from this firmware standpoint.

10:07.140 --> 10:12.380
And even with these signed images now available, there's still complications around reclocking

10:12.380 --> 10:16.440
the GPU because it starts with some rather low boot clock frequencies and you've got

10:16.440 --> 10:20.280
to do a complicated dance to get higher ones enabled.

10:20.280 --> 10:24.960
And those complications around power management in the context of signed firmware images have

10:24.960 --> 10:30.860
meant that the GTX 900 series and newer hasn't been able to operate with the open source

10:30.860 --> 10:34.960
driver at those optimal clock frequencies.

10:34.960 --> 10:40.640
And that means, to date, the best open source driver support remains with the GTX 700 Kepler

10:40.640 --> 10:46.620
series as well as the GTX 750 Maxwell graphics cards that don't happen to have these firmware

10:46.620 --> 10:49.040
restrictions.

10:49.040 --> 10:53.260
It's also worth noting, unfortunately, that after a year and a half of waiting for these

10:53.260 --> 10:58.580
signed firmware images to be published, we're now just a few months away from NVIDIA releasing

10:58.580 --> 11:01.640
the GeForce RTX 40 series.

11:01.640 --> 11:06.880
And then this process has to start all over again.

11:06.880 --> 11:35.600
This is just not good enough

11:35.600 --> 11:51.140
in

11:51.140 --> 12:04.240
the long run.

12:04.240 --> 12:05.960
support the show.

12:05.960 --> 12:08.480
Linode.com slash LAN.

12:08.480 --> 12:13.960
It's Linode.com slash LAN to get $100 in 60 day credit on a new account and Linode.com

12:13.960 --> 12:17.440
slash LAN to support the show and kick the tires.

12:17.440 --> 12:23.040
Linode.com slash LAN.

12:23.040 --> 12:24.760
And a Linux sized thank you to Ting.

12:24.760 --> 12:26.480
Linux dot Ting dot com.

12:26.480 --> 12:30.640
If you're sick of overpaying for cell service, go see how much you can save and then take

12:30.640 --> 12:34.000
$25 off of that at Linux dot Ting dot com.

12:34.000 --> 12:38.740
Ting's been my mobile service provider since 2013 and it's obvious.

12:38.740 --> 12:44.240
They got the big nationwide coverage, multiple networks, LTE and 5G, nation to nation networks,

12:44.240 --> 12:50.140
you know what I'm talking about, but at great prices and unbeatable customer service.

12:50.140 --> 12:51.720
That's the Ting secret recipe.

12:51.720 --> 12:57.960
They're an MVNO, so they get to focus on you, not building towers and relationships with

12:57.960 --> 13:01.240
legal people in the local jurisdictions.

13:01.240 --> 13:05.320
It's a whole mind shit for them and so they get to focus on things like customer service,

13:05.320 --> 13:09.720
innovative plans, combining multiple networks, making sure you could do everything from their

13:09.720 --> 13:15.280
dashboard and every single plan gets access to Ting's award winning customer service and

13:15.280 --> 13:18.760
nationwide LTE and 5G service.

13:18.760 --> 13:23.520
Ting was also named the number one carrier by Consumer Reports in 2021 because they have

13:23.520 --> 13:25.480
this great combination.

13:25.480 --> 13:29.440
It's simple to switch to Ting, start saving money right now because pretty much any phone

13:29.440 --> 13:33.960
will work so you can likely take your existing phone or you can pick up a new one for a great

13:33.960 --> 13:38.040
price and take 25 bucks off by visiting Linux dot Ting dot com.

13:38.040 --> 13:42.440
Go check your phone, create an account and pick the plan that's right for you.

13:42.440 --> 13:47.760
Linux dot Ting dot com.

13:47.760 --> 13:52.360
For our last story today, we thought we'd take a look at the Debian Project's efforts

13:52.360 --> 13:55.660
to implement the User Merge.

13:55.660 --> 14:01.520
If you don't regularly dive into the Linux file system layout, well here's a little refresher.

14:01.520 --> 14:08.080
The User Merge is a plan initially popularized by Leonard Pottering back in 2012 that aims

14:08.080 --> 14:13.320
to simplify the file system layout of Linux distributions and increase their compatibility

14:13.320 --> 14:16.680
with other Unix-like operating systems.

14:16.680 --> 14:19.540
At its core, it's a pretty straightforward plan.

14:19.540 --> 14:23.880
The basic idea is you take any files that you have under slash bin and you move all

14:23.880 --> 14:27.240
of them to slash user slash bin.

14:27.240 --> 14:31.760
Then you turn slash bin itself into just a symbolic link that points at slash user slash

14:31.760 --> 14:32.760
bin.

14:32.760 --> 14:37.800
That way, regardless of which location a program is trying to find the binary, it's gonna find

14:37.800 --> 14:38.800
it.

14:38.800 --> 14:45.400
You can just do the same thing for other top-level directories like slash sbin or slash lib.

14:45.400 --> 14:51.200
But ever since this idea got introduced to the Debian Project some six years ago, it

14:51.200 --> 14:56.160
has turned into a point of contention within the community.

14:56.160 --> 15:01.440
Some recent events have maybe prolonged that pain, but perhaps the end is in sight.

15:01.440 --> 15:06.120
Fedora, Arch, Ubuntu, and many other distros have made this change already.

15:06.120 --> 15:07.280
And made it a while ago.

15:07.280 --> 15:11.080
Fedora 17 made this change in 2012.

15:11.080 --> 15:13.900
Arch made this change in 2013.

15:13.900 --> 15:18.500
But the Debian Project has taken a more incremental approach and seemingly run into issues at

15:18.500 --> 15:20.240
every step of the way.

15:20.240 --> 15:23.240
This is kind of a classic Debian story in a way.

15:23.240 --> 15:26.960
Their technical committee has chosen a direction for the distribution, decided we're gonna

15:26.960 --> 15:33.720
have it in this release, but has actually no authority to quote-unquote force these

15:33.720 --> 15:36.360
developers to spend their time working on it.

15:36.360 --> 15:41.120
In fact, the Debian Constitution does not allow the committee to override a developer's

15:41.120 --> 15:42.120
decision.

15:42.120 --> 15:46.000
So if they decide for a packaging reason or some legitimate reason this isn't gonna work,

15:46.000 --> 15:48.320
they can't make them do the work.

15:48.320 --> 15:53.440
It's also a classic Debian story in the sense that Debian just seems to really be struggling

15:53.440 --> 15:59.600
to do something that other distributions pulled off ages ago, and I get no joy in saying this.

15:59.600 --> 16:03.120
And just like many times before, like you dig into the issue, it's like, okay, there's

16:03.120 --> 16:05.520
some pretty understandable reasons here.

16:05.520 --> 16:07.900
They've run into some problems, I get it.

16:07.900 --> 16:10.880
But at the end of the day, you can't help just think to yourself, I wish they could

16:10.880 --> 16:14.120
just get more done because other people have solved this problem.

16:14.120 --> 16:17.400
Yeah, I definitely feel your pain there.

16:17.400 --> 16:22.480
I think maybe the flip side is it highlights how different Debian is as a project than

16:22.480 --> 16:25.720
many of the distributions that we otherwise use.

16:25.720 --> 16:29.460
There isn't a giant commercial interest behind it that can kind of just pull the strings

16:29.460 --> 16:35.800
or hire developers to get the things they want to see implemented done.

16:35.800 --> 16:39.960
And if you compare it to something like Arch, well, Arch is just simple, they usually don't

16:39.960 --> 16:44.480
have problems sort of taking things or making changes and just forcing users to adapt.

16:44.480 --> 16:47.560
But Debian takes a different approach.

16:47.560 --> 16:51.960
They have a lot of stakeholders, they have a huge deployment base, and they take the

16:51.960 --> 16:55.500
time to flush these things out in the open.

16:55.500 --> 17:00.760
And that, much like democracy, can take a really long time.

17:00.760 --> 17:06.400
But I think maybe one of the advantages here is, even though it sucks that there's disagreements

17:06.400 --> 17:10.760
and there's people with strong opinions about which way this should go, it does mean that

17:10.760 --> 17:14.640
there's still a very passionate base of Debian developers.

17:14.640 --> 17:19.280
They might be slowing things down here, but at least for the long-term play, I'm glad

17:19.280 --> 17:20.280
they exist.

17:20.280 --> 17:24.800
Yeah, the process can add a lot of time and maybe even be a little messy, a little organic

17:24.800 --> 17:26.480
at times.

17:26.480 --> 17:33.240
I think in the back of my mind, I worry that perhaps where the idea originated has played

17:33.240 --> 17:36.280
a factor in people's acceptance of the idea.

17:36.280 --> 17:43.420
It came out of the SystemD community back in 2012, and back in 2012, anything that came

17:43.420 --> 17:49.240
out of the SystemD community or Lenart Potter indirectly was really controversial.

17:49.240 --> 17:53.440
And so I kind of wonder if that didn't maybe set things off in the wrong direction.

17:53.440 --> 17:57.440
What ends up happening here, Wes, is the technical committee just looks sort of silly.

17:57.440 --> 18:01.240
You know, they set a goal for Debian 10, it doesn't happen.

18:01.240 --> 18:03.440
They set a goal for Debian 11, it's not going to happen.

18:03.440 --> 18:07.240
Debian 12 is not going to happen, and now they're thinking, well, maybe we can get it

18:07.240 --> 18:10.640
done in Debian 13 Trixie when that starts.

18:10.640 --> 18:14.720
It's sort of just completely ineffective.

18:14.720 --> 18:17.520
There needs to be what seems like some sort of compromise, right?

18:17.520 --> 18:22.280
Some kind of line that says, okay, we've decided this, and this is what we're going to do,

18:22.280 --> 18:24.840
and if you're not on board, you kind of move on.

18:24.840 --> 18:28.320
But there's no mechanism in this kind of democracy setup.

18:28.320 --> 18:32.120
What they need, Wes, is a ruler with an iron fist.

18:32.120 --> 18:33.960
I'm kidding, obviously.

18:33.960 --> 18:40.280
Or maybe as Jake Edge over at LWI, who did some great reporting on this story, suspects

18:40.280 --> 18:43.840
it seems like maybe some sort of project elder, you know, someone who's been a long time,

18:43.840 --> 18:48.200
could maybe shepherd this, do a little evangelizing, try to do some organization.

18:48.200 --> 18:51.720
That might be the thing we need in a kind of democracy.

18:51.720 --> 18:52.720
I don't know.

18:52.720 --> 18:57.520
I'm disappointed too, but I think we'll just have to wait and see.

18:57.520 --> 18:58.920
That's an interesting insight, isn't it?

18:58.920 --> 19:02.720
Maybe somebody who could own this thing and drive it and advocate for it.

19:02.720 --> 19:04.520
Yeah, I could see that working.

19:04.520 --> 19:08.580
And if you look back over Debian's history, those kinds of initiatives that have had an

19:08.580 --> 19:12.880
owner like that, had an advocate like that, somebody who can communicate the benefits

19:12.880 --> 19:19.360
and respond to people who have concerns in an open way, in a non-hostile way, has generally

19:19.360 --> 19:22.060
proved to be the most successful route in Debian.

19:22.060 --> 19:26.920
But as of now, it seems like maybe we'll see it land in Debian 13.

19:26.920 --> 19:30.720
Maybe we're starting to see things get addressed, but I think if you're a Debian user and you

19:30.720 --> 19:33.800
are concerned about these kinds of things and you just like to understand the process

19:33.800 --> 19:37.020
a little better, we'll have a link in the show notes for you.

19:37.020 --> 19:41.060
But isn't this just an interesting contrast to have, like you said, just different distributions

19:41.060 --> 19:42.780
that serve different roles.

19:42.780 --> 19:49.160
You have Fedora implementing this in Fedora 17 back in 2012, and here we are in 2022 and

19:49.160 --> 19:53.080
we're still watching Debian debate how they're going to implement it.

19:53.080 --> 19:57.640
Maybe we're not still having this discussion in 2032.

19:57.640 --> 19:58.640
No kidding.

19:58.640 --> 20:02.900
Stay tuned to find out by going to LinuxActionNews.com slash subscribe for this story and all the

20:02.900 --> 20:06.220
other stories we'll cover today and into the future.

20:06.220 --> 20:11.200
And LinuxActionNews.com slash contact Royce to get in touch.

20:11.200 --> 20:13.940
Get a new podcast app, newpodcastapps.com.

20:13.940 --> 20:17.360
Grab one that supports Boost and send a message into the show.

20:17.360 --> 20:23.320
And we'll be back next week with our take on the latest Linux and open source news.

20:23.320 --> 20:24.360
Thanks for joining us.

20:24.360 --> 20:49.400
And that's all the news for this week.


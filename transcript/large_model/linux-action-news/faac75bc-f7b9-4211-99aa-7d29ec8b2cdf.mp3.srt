1
00:00:00,000 --> 00:00:09,680
Hello, and welcome to Linux Action News, episode 179, recorded on March 7th, 2021. I'm Chris.

2
00:00:09,680 --> 00:00:10,680
And I'm Wes.

3
00:00:10,680 --> 00:00:12,660
Hello, Wes. Let's do the news.

4
00:00:12,660 --> 00:00:17,520
We start this week with a story that might have been passed over by some, but could end

5
00:00:17,520 --> 00:00:23,780
up having a big impact on future Linux desktop apps. During the Flutter Engage live event

6
00:00:23,780 --> 00:00:29,860
on March 3rd, Google announced Flutter 2, with tons of new updates. It includes Flutter's

7
00:00:29,860 --> 00:00:36,400
web support being upgraded from beta to stable, and among many other things, expanded Linux

8
00:00:36,400 --> 00:00:42,720
support. For those not in the know, Flutter is an open source UI SDK created by Google

9
00:00:42,720 --> 00:00:47,720
to help those who want to build quick and modern applications for a wide range of operating

10
00:00:47,720 --> 00:00:54,800
systems, including Android, Linux, Mac, iOS, Windows, Google's own Fuchsia, and the web.

11
00:00:54,800 --> 00:00:59,840
And if the title of the show didn't clue you, what we are interested in is how this impacts

12
00:00:59,840 --> 00:01:05,600
Linux. And it seems, it seems there could be some long term impacts. This week, Canonical's

13
00:01:05,600 --> 00:01:11,560
engineering manager for the Ubuntu desktop at Canonical joined Google during that Flutter

14
00:01:11,560 --> 00:01:12,560
event.

15
00:01:12,560 --> 00:01:17,020
Hello, I'm Ken Van Dyne, engineering manager for Ubuntu desktop at Canonical.

16
00:01:17,020 --> 00:01:20,640
And Ken wanted to give a bit of context for the level of commitment that Canonical was

17
00:01:20,640 --> 00:01:26,720
making to Flutter. So Ken gives us an insight into the work that Canonical has done so far

18
00:01:26,720 --> 00:01:28,700
to bring Flutter to the Linux desktop.

19
00:01:28,700 --> 00:01:33,660
When desktop application support in Flutter was announced, we saw an exciting opportunity

20
00:01:33,660 --> 00:01:39,200
to make Linux distributions, including Ubuntu, an attractive target platform for Flutter

21
00:01:39,200 --> 00:01:44,800
app developers. Flutter's native multiplatform story is growing rapidly, and we wanted to

22
00:01:44,800 --> 00:01:50,940
be at the vanguard. We worked with the Flutter team to bring desktop Linux support to Flutter.

23
00:01:50,940 --> 00:01:56,180
It's still early days, but Canonical is working on improving Flutter's Linux support.

24
00:01:56,180 --> 00:02:01,800
To do so, we will work to bring full multi-windows support to Flutter for desktop across all

25
00:02:01,800 --> 00:02:06,860
the desktop platforms that Flutter supports. We are working with the Flutter team at Google

26
00:02:06,860 --> 00:02:11,400
on the specification now, and we will start the engineering work very soon.

27
00:02:11,400 --> 00:02:15,880
Of course, plugins are an essential part of the Flutter app ecosystem as well. We are

28
00:02:15,880 --> 00:02:21,240
working on enabling popular Flutter plugins for Linux, including Flutter support for Firebase,

29
00:02:21,240 --> 00:02:25,600
Bluetooth, network connectivity, desktop notifications, and more.

30
00:02:25,600 --> 00:02:31,620
And it's pretty clear Canonical is not messing around here. They see the future of desktop

31
00:02:31,620 --> 00:02:37,160
Linux applications as being Flutter-based, and Ken says that's why they chose to build

32
00:02:37,160 --> 00:02:42,660
their new Ubuntu installer in Flutter. It's a statement of their commitment.

33
00:02:42,660 --> 00:02:46,900
Now that we have enabled Flutter for Linux, for other app developers, it's time to further

34
00:02:46,900 --> 00:02:52,200
our commitment by building our own Linux apps with Flutter. As we've already announced,

35
00:02:52,200 --> 00:02:57,500
we are developing our next-generation Ubuntu desktop installer in Flutter. Soon, every

36
00:02:57,500 --> 00:03:03,160
user who installs Ubuntu desktop will be doing so with our new installer built in Flutter

37
00:03:03,160 --> 00:03:08,220
using the Yaru style. Choosing the installer as our first app written in Flutter is a bold

38
00:03:08,220 --> 00:03:13,440
move to say the least. It's the first thing our users see, and as everyone knows, that

39
00:03:13,440 --> 00:03:15,760
first impression is critical.

40
00:03:15,760 --> 00:03:20,520
And they're not stopping with the installer. Canonical is planning to use Flutter for all

41
00:03:20,520 --> 00:03:22,640
future desktop apps they make.

42
00:03:22,640 --> 00:03:27,200
The desktop team had not only worked to make Linux a first-class citizen in Flutter. Flutter

43
00:03:27,200 --> 00:03:32,040
is the default choice for future desktop and mobile apps created by Canonical.

44
00:03:32,040 --> 00:03:36,780
I think the community is having a bit of a challenge at processing this information.

45
00:03:36,780 --> 00:03:40,880
I think some don't know if they should just dismiss it. Others worry that it's not invented

46
00:03:40,880 --> 00:03:46,320
here syndrome all over again. Why don't they just use a good old classic native Linux application

47
00:03:46,320 --> 00:03:53,320
that's GTK, etc, etc, etc. But it turns out that is actually one of the advantages of

48
00:03:53,320 --> 00:03:58,280
Flutter and might be one of the things that is attracting Canonical. It's actually the

49
00:03:58,280 --> 00:04:02,460
opposite of not invented here because it's Google that invented it, and it's Canonical

50
00:04:02,460 --> 00:04:08,440
hitching themselves to Google's wagon. And then when Flutter builds, when a Flutter app

51
00:04:08,440 --> 00:04:14,640
builds, it builds to a native Linux application. So unlike Electron, which is running inside

52
00:04:14,640 --> 00:04:19,920
a Chromium runtime, your application like Slack, Flutter apps are actually native Linux

53
00:04:19,920 --> 00:04:23,840
desktop applications and quite quick. We played around with building one before the show.

54
00:04:23,840 --> 00:04:29,160
Yeah, I think that's maybe one of the good ways to frame this is Electron apps fill a

55
00:04:29,160 --> 00:04:32,520
lot of the space from, you know, commercially designed applications, proprietary stuff,

56
00:04:32,520 --> 00:04:36,800
but even a lot of open source applications, especially if they're cross-platform. Electron

57
00:04:36,800 --> 00:04:41,680
is a nice value to be able to just port it there instantly. But Electron is kind of a

58
00:04:41,680 --> 00:04:46,680
clue, right? We just bottled up a web browser, people knew JavaScript anyway. Whereas Flutter

59
00:04:46,680 --> 00:04:52,200
and the Dart language underneath, it's all been designed for this purpose and therefore

60
00:04:52,200 --> 00:04:54,320
it can be a lot faster and leaner.

61
00:04:54,320 --> 00:04:59,320
Yeah, and as you touched on earlier, it's still kind of early days. Dart itself is not

62
00:04:59,320 --> 00:05:05,560
necessarily ideal on Linux. There is still a lot of work to be done to make these applications

63
00:05:05,560 --> 00:05:11,600
feel like full-fledged desktop Linux application, multi-window support being one of them, themes

64
00:05:11,600 --> 00:05:15,880
support and just overall performance improvements. But those are all areas that Canonical has

65
00:05:15,880 --> 00:05:21,480
committed to Google that they're going to work on directly. And their statement of basing

66
00:05:21,480 --> 00:05:26,160
their installer on this is their way of saying, this is something that's going to stick around

67
00:05:26,160 --> 00:05:31,320
for many years. We're going to ship this in LTSs, which means we have decades ahead of

68
00:05:31,320 --> 00:05:32,960
us of working with Flutter.

69
00:05:32,960 --> 00:05:39,000
So if you're a Linux desktop application developer and you want to target our desktop, you can

70
00:05:39,000 --> 00:05:45,120
ship in Flutter. It will be Yaru themed. It will be a GTK application, but yet you get

71
00:05:45,120 --> 00:05:51,040
all the development kind of perks, a lot of the development perks of electron development.

72
00:05:51,040 --> 00:05:56,360
You can, when you're building a Flutter application, it's kind of like a real time thing. You can

73
00:05:56,360 --> 00:06:01,360
make an update and immediately see how the application responds. It's running in a VM

74
00:06:01,360 --> 00:06:02,520
while you develop it.

75
00:06:02,520 --> 00:06:06,380
Yeah, you get a lot of the modern workflow that people come to expect for developing

76
00:06:06,380 --> 00:06:11,100
from the web or developing mobile applications, but you get it for basically the whole range

77
00:06:11,100 --> 00:06:14,840
of things Flutter supports. That's nice.

78
00:06:14,840 --> 00:06:18,760
And we're not necessarily trying to advocate one thing over another, but when something

79
00:06:18,760 --> 00:06:23,240
comes along that offers a lot of the benefits of building an electron app, but with the

80
00:06:23,240 --> 00:06:28,880
benefits of native on Linux and also Windows, Mac OS, Android, and iOS.

81
00:06:28,880 --> 00:06:34,120
Well, yeah, I think part of this too is, we like to complain about not having native apps

82
00:06:34,120 --> 00:06:38,720
or Linux or not enough of them, but it's just a different platform, right? People have to

83
00:06:38,720 --> 00:06:44,720
use that. We almost have to have a sales pitch to developers of like, how do you do this?

84
00:06:44,720 --> 00:06:48,000
Flutter is going to be something people use for all kinds of other stuff. They might be

85
00:06:48,000 --> 00:06:51,920
making web apps, they might be using it to make a mobile app at work, and they can just

86
00:06:51,920 --> 00:06:56,400
transfer those skills to make Linux apps that maybe we won't hate. I'm not sure. It's very

87
00:06:56,400 --> 00:07:01,280
much early days. It's still in beta really. So this could all not work out, but it's interesting

88
00:07:01,280 --> 00:07:02,280
to watch.

89
00:07:02,280 --> 00:07:06,280
How do you think Canonical is doing this? I mean, it seems pretty obvious why Google

90
00:07:06,280 --> 00:07:10,640
would do it. There's a lot of competitive reasons for Google to do this, but why is

91
00:07:10,640 --> 00:07:17,320
Canonical getting so into this? Like they're developing resources to improve Google's product

92
00:07:17,320 --> 00:07:20,360
essentially. What do you suppose the advantage for them is?

93
00:07:20,360 --> 00:07:25,280
I think part of it must be just, there's a lot of resources they can leverage. If they

94
00:07:25,280 --> 00:07:29,240
can add some of their expertise, and it does make me a little more confident having a bunch

95
00:07:29,240 --> 00:07:33,280
of Canonical involved here managing some of these Linux implementations rather than say

96
00:07:33,280 --> 00:07:38,000
Google doing it themselves directly. I mean, they know what they're doing in this space,

97
00:07:38,000 --> 00:07:43,360
they have experience. I think what they might be getting out of it is just that they can

98
00:07:43,360 --> 00:07:47,040
have developers, they can hire people that don't necessarily have to be specifically

99
00:07:47,040 --> 00:07:50,880
skilled targeting the Linux platform, help them bridge that gap, but get access to all

100
00:07:50,880 --> 00:07:52,320
the experience they have.

101
00:07:52,320 --> 00:07:55,560
Just the brief playing around we did before the show to get some experience with it was

102
00:07:55,560 --> 00:07:59,760
clear there's a lot of tooling advantages. Flutter is very modern. They've taken a lot

103
00:07:59,760 --> 00:08:01,200
of ideas from different places.

104
00:08:01,200 --> 00:08:06,480
You get fancy type hints, it works with like IntelliJ, your IDEs people are already using

105
00:08:06,480 --> 00:08:07,480
in the field.

106
00:08:07,480 --> 00:08:13,560
Yeah. And so it could be, yeah, it's just a tool that makes sense for them from an organizational

107
00:08:13,560 --> 00:08:20,160
standpoint. I think there's the other element of this is Canonical has really become a multi-vendor

108
00:08:20,160 --> 00:08:25,040
player here. They've got a pretty tight relationship with Microsoft and Azure. We talked about

109
00:08:25,040 --> 00:08:30,880
that sales channel that they have. Plus they have WSL, that relationship there. Then we've

110
00:08:30,880 --> 00:08:37,240
also seen that Canonical has a good relationship with AWS for deploying Canonical supported

111
00:08:37,240 --> 00:08:43,920
Ubuntu images on AWS. And now here we see Canonical buddying up with Google to work

112
00:08:43,920 --> 00:08:44,920
with Flutter.

113
00:08:44,920 --> 00:08:49,320
Now, obviously there's some in the community, they're going to go, God, that's gross. But

114
00:08:49,320 --> 00:08:53,640
there's others in the community that go, that's the thing, you need somebody to make those

115
00:08:53,640 --> 00:08:55,640
interfaces with these giants.

116
00:08:55,640 --> 00:09:00,400
In some ways they're sort of representing a big chunk of the Linux using world.

117
00:09:00,400 --> 00:09:04,260
And who else really could do it? They're in a unique competitive position where they can

118
00:09:04,260 --> 00:09:08,400
interface with all of these different vendors who are competitors with each other and sort

119
00:09:08,400 --> 00:09:10,160
of play the neutral player part.

120
00:09:10,160 --> 00:09:14,100
Yes. They're a sort of independent entity. They've got expertise in a sort of a specific

121
00:09:14,100 --> 00:09:18,940
layer of the stack, which isn't necessarily where those other people are directly competing.

122
00:09:18,940 --> 00:09:19,940
Just makes sense.

123
00:09:19,940 --> 00:09:22,800
Keeps things friendly with the big players as well. So that's got to be a part of why

124
00:09:22,800 --> 00:09:23,800
they're choosing Flutter.

125
00:09:23,800 --> 00:09:29,040
But then I think there's a third reason outside the tooling, outside the relationships. Ken

126
00:09:29,040 --> 00:09:35,280
says something in his little bit in the keynote, and he says that Canonical is going to base

127
00:09:35,280 --> 00:09:41,080
all of their future applications on Flutter. And that I think is maybe a more telling statement

128
00:09:41,080 --> 00:09:42,960
than it seems like at first.

129
00:09:42,960 --> 00:09:47,880
They must have some, this is strategy. They must have something they're building, something

130
00:09:47,880 --> 00:09:52,480
they've identified that needs to be deployed on the desktop. That's a Canonical creation.

131
00:09:52,480 --> 00:09:58,000
Because when you think about it, they make their installer, they make their welcome screen.

132
00:09:58,000 --> 00:10:02,400
I mean, there's not a lot of graphical tools. There's a lot of software Canonical writes.

133
00:10:02,400 --> 00:10:03,400
Snap store, I guess.

134
00:10:03,400 --> 00:10:08,100
But there's not a lot of desktop applications Canonical makes. And Ken said in that keynote

135
00:10:08,100 --> 00:10:14,880
that future Canonical Ubuntu desktops will be based, desktop apps will be based on Flutter.

136
00:10:14,880 --> 00:10:18,100
So there's got to be something they have in the works and they've identified this is the

137
00:10:18,100 --> 00:10:23,080
tooling chain that they want to use. And so I think it's these three strategic reasons

138
00:10:23,080 --> 00:10:28,760
coming together, the relationship, the fact that this will be a native application that

139
00:10:28,760 --> 00:10:34,120
looks good on Linux. It's very accessible to developers. That's all got to be playing

140
00:10:34,120 --> 00:10:41,680
a role here. But I don't see it necessarily equaling great success in the Linux ecosystem.

141
00:10:41,680 --> 00:10:49,120
I think it's tied to Dart. Its connections to Google will not make it like the default

142
00:10:49,120 --> 00:10:55,000
go-to solution for Linux developers. But for people who are trying to write high-performant

143
00:10:55,000 --> 00:10:58,600
multi-platform applications, I could definitely see it being a contender.

144
00:10:58,600 --> 00:11:03,800
And I'd say it's definitely one of those still in the interesting to watch stage technologies.

145
00:11:03,800 --> 00:11:08,160
Flutter and Dart haven't yet taken over everything. Google's putting a lot of work behind it.

146
00:11:08,160 --> 00:11:12,200
It seems like there are folks that are interested and more and more apps are being made with

147
00:11:12,200 --> 00:11:15,680
it. I don't know that we've crested that hill yet. I think that is just going to be

148
00:11:15,680 --> 00:11:19,720
a huge part of it too. If Flutter really takes off, maybe this is more of a success. Otherwise,

149
00:11:19,720 --> 00:11:25,060
it might just be a niche tool set that Canonical chooses to use. And if it works, that's fine.

150
00:11:25,060 --> 00:11:28,840
It could end up being that. I think Google would like to see it go otherwise. If you

151
00:11:28,840 --> 00:11:35,120
had a Magic West wand, what would you have them use instead of Flutter or Electron? Is

152
00:11:35,120 --> 00:11:38,600
there something else that comes to mind that would solve this problem?

153
00:11:38,600 --> 00:11:43,960
Not immediately. At least that offers the same stuff. The elementary folks have come

154
00:11:43,960 --> 00:11:50,300
closer in their own ways with Vala and their own tool set. But it's still kind of a niche

155
00:11:50,300 --> 00:11:54,340
Linux technology. You're not going to get exposed to that if you're not specifically

156
00:11:54,340 --> 00:11:59,280
targeting desktop apps or even those distributions. That's the main thing that it offers. And

157
00:11:59,280 --> 00:12:02,880
that's what's happening with Electron. It's pretty rare that you see something that's

158
00:12:02,880 --> 00:12:08,880
cross-platform. Maybe GTK and Qt can do that, but then you are riding all those hooks yourselves

159
00:12:08,880 --> 00:12:12,400
to interface at the lower levels. You just don't worry about that as much with something

160
00:12:12,400 --> 00:12:13,400
like Flutter.

161
00:12:13,400 --> 00:12:20,120
Yep, for sure. My kind of irrational, really no-facts-back-this-up worry about this is

162
00:12:20,120 --> 00:12:25,760
that Flutter is a hit. What do I know? I got it up and running with your help, but what

163
00:12:25,760 --> 00:12:26,760
do I know?

164
00:12:26,760 --> 00:12:27,760
You're a Flutter developer now.

165
00:12:27,760 --> 00:12:31,760
I built an app. And I thought, oh yeah, okay, that was actually pretty painless. I could

166
00:12:31,760 --> 00:12:36,200
see this being successful. And then we build all these Flutter apps, and then Fuchsia comes

167
00:12:36,200 --> 00:12:42,440
along and says, oh, by the way, Flutter? Just one click to run your apps on Fuchsia OS.

168
00:12:42,440 --> 00:12:44,040
Part right over from Linux in one click.

169
00:12:44,040 --> 00:12:48,200
I guess Ubuntu will become a Fuchsia distribution.

170
00:12:48,200 --> 00:12:53,200
Linode.com slash LAN. Go there to get a $100 60-day credit, and of course you support the

171
00:12:53,200 --> 00:12:58,080
show. Linode makes cloud computing simple, affordable, and accessible. They're our cloud

172
00:12:58,080 --> 00:13:02,320
hosting provider of choice, and a lot of you have tried them out by going to linode.com

173
00:13:02,320 --> 00:13:07,280
slash LAN. And a very common bit of feedback I get, besides how exceptional their support

174
00:13:07,280 --> 00:13:11,800
is, is it seems like their network is just a bit faster than anybody else you've ever

175
00:13:11,800 --> 00:13:12,800
tried before.

176
00:13:12,800 --> 00:13:18,200
Well, this is one of the advantages of being around forever in cloud computing. They started

177
00:13:18,200 --> 00:13:24,480
in 2003 as one of the first businesses in this gig. And that meant that they had time

178
00:13:24,480 --> 00:13:31,400
to build things up and make great deals. And in 2016, they went all in on controlling their

179
00:13:31,400 --> 00:13:37,840
network future. They became their own ISP and built out a global network, which gave

180
00:13:37,840 --> 00:13:41,760
them tons of benefits, including having full control over where their network goes in the

181
00:13:41,760 --> 00:13:46,720
future, strategic buying opportunities for multiple providers, and obviously the best

182
00:13:46,720 --> 00:13:51,400
peering agreements they could get. And it set a foundation for them to tackle a global

183
00:13:51,400 --> 00:13:55,820
data center network. And now they have 11 data centers worldwide. But this kind of thinking

184
00:13:55,820 --> 00:14:02,120
radiates the entire Linode service. And it's exceptional. From $5 a month rigs to super

185
00:14:02,120 --> 00:14:07,200
powerful and fast systems that can do GPU compute, check them out and get that $100

186
00:14:07,200 --> 00:14:11,540
60 day credit and see what works for you. Try out object storage, check out their cloud

187
00:14:11,540 --> 00:14:17,320
management dashboard, their API, which is fantastic, their documentation, which is extensive,

188
00:14:17,320 --> 00:14:21,680
all of it. Linode.com slash LAN and a big thank you to everybody who goes there and

189
00:14:21,680 --> 00:14:28,920
supports the show. Linode.com slash LAN. Google announced they're tweaking the release

190
00:14:28,920 --> 00:14:34,040
cycle of Chrome to make it a bit faster. They note on their blog, as we've improved our

191
00:14:34,040 --> 00:14:38,760
testing and release processes for Chrome, and deployed bi weekly security updates to

192
00:14:38,760 --> 00:14:43,700
improve our patch gap became clear that we could shorten our release cycle and deliver

193
00:14:43,700 --> 00:14:50,360
new features more quickly. Not surprised to see this at all. It was towards the end of

194
00:14:50,360 --> 00:14:57,040
2019 that Mozilla started shifting the Firefox release cycle to four weeks. And well, Google,

195
00:14:57,040 --> 00:15:00,480
you know, they can't be undone. They have to have the big version numbers and the fast

196
00:15:00,480 --> 00:15:06,640
releases as well. But I don't know, Wes, maybe it's the old sys admin in me. But it seems

197
00:15:06,640 --> 00:15:11,400
like web browsers are getting developed at a breakneck pace. I really can't can hardly

198
00:15:11,400 --> 00:15:14,660
keep track of even the version numbers anymore. Well, they are some of the most important

199
00:15:14,660 --> 00:15:19,600
applications we use on a day to day basis. And both Mozilla and Google cite that users

200
00:15:19,600 --> 00:15:26,400
want features faster, more features faster. It does sound like me. And the browser has

201
00:15:26,400 --> 00:15:31,920
kind of just become more like a back end service. It's not really a classic versioned application.

202
00:15:31,920 --> 00:15:37,660
It's being developed almost continually and deployed almost often. If that makes you nervous,

203
00:15:37,660 --> 00:15:41,320
there is some good news in this post, which we will have a link to this in the show notes

204
00:15:41,320 --> 00:15:45,900
they say that they're going to add a new extended stable option, which kind of reminds me of

205
00:15:45,900 --> 00:15:52,440
Firefox's ESR release. It'll have a milestone update every eight weeks. Extended stable

206
00:15:52,440 --> 00:15:57,000
will be available to enterprise administrators and chromium and betters. But they also note

207
00:15:57,000 --> 00:16:03,460
that security updates on the extended stable version will be released every two weeks.

208
00:16:03,460 --> 00:16:08,080
So you're still going to see some updates coming, but they're not feature changes. They're

209
00:16:08,080 --> 00:16:12,880
just security fixes. And then of course, Chrome OS, a bit of a question mark in all of this

210
00:16:12,880 --> 00:16:17,360
as well. They say that they plan to support multiple stable release options and that they're

211
00:16:17,360 --> 00:16:21,480
going to have more information for Chrome OS users and administrators soon. But the

212
00:16:21,480 --> 00:16:27,840
core issue that Google's really dealing with and honestly Firefox as well, is the web is

213
00:16:27,840 --> 00:16:32,720
not standing still. It is constantly a moving target. Well, because the rest of the web

214
00:16:32,720 --> 00:16:37,640
is an online, you know, there's not versioned different webs. It's all the web that's live

215
00:16:37,640 --> 00:16:42,160
all the time. And so a browser has to have some of those elements in some ways, right?

216
00:16:42,160 --> 00:16:45,240
It does have features that, you know, might change between versions, but fundamentally

217
00:16:45,240 --> 00:16:49,800
it's connected to the real world as it exists right now. Yeah, I guess I don't really have

218
00:16:49,800 --> 00:16:55,760
a problem per se with software updating super frequently. I mean, I love rolling distributions.

219
00:16:55,760 --> 00:17:02,840
I like new software. But if something's going to get updated on a really regular basis,

220
00:17:02,840 --> 00:17:07,680
I strongly prefer it's managed by a distro package manager. I'll give you an example

221
00:17:07,680 --> 00:17:12,440
where I draw the line. So Reaper, which we use to record and produce this show, the audio

222
00:17:12,440 --> 00:17:17,600
editor, it has updates every so often. And so it's not a big deal to go get the tar file

223
00:17:17,600 --> 00:17:21,720
and download and extract it and essentially quote unquote, install it. I don't mind that

224
00:17:21,720 --> 00:17:25,960
being a manual process from time to time, but if my web browser is going to update once

225
00:17:25,960 --> 00:17:30,800
a month and I have two browsers that are updating once a month and they're a pretty crucial

226
00:17:30,800 --> 00:17:37,120
piece of software, like you say, I just trust that to be done by the package manager. I

227
00:17:37,120 --> 00:17:41,760
have had experiences even recently that were like the worst of the Windows days where I

228
00:17:41,760 --> 00:17:46,400
took an old MacBook and I dusted it off. I cracked it open for the first time. It had

229
00:17:46,400 --> 00:17:52,520
legitimately been a little while. And if I maybe in being generous here with 10 minutes,

230
00:17:52,520 --> 00:17:57,120
it may have even been 20 minutes that that thing just sat there burning CPU. I sent you

231
00:17:57,120 --> 00:18:02,320
screenshots. It's just burning CPU doing app updates. And every time I'd launch an app,

232
00:18:02,320 --> 00:18:06,200
I'd get an update prompt asking me if I want to quit and relaunch when I'm in the middle

233
00:18:06,200 --> 00:18:12,080
of just trying to get something done. And it's just this hodgepodge mess on the Mac.

234
00:18:12,080 --> 00:18:17,640
It's not so bad if you run a Mac 24 seven. But if you just visit occasionally and you

235
00:18:17,640 --> 00:18:22,440
fire it up, it's it's a crap experience now because all of these updates that are frequently

236
00:18:22,440 --> 00:18:27,360
happening and each update is being managed by the developer directly. And it sounds good

237
00:18:27,360 --> 00:18:33,560
in principle, but the end result as a user is a real, real crappy 10, 20 minutes when

238
00:18:33,560 --> 00:18:38,400
you turn a box on for the first time in a few weeks. And that's where I just trust a

239
00:18:38,400 --> 00:18:42,040
distribution package manager to handle this stuff a lot smarter.

240
00:18:42,040 --> 00:18:43,880
That at least gives you control.

241
00:18:43,880 --> 00:18:49,080
Yeah, it's on my terms. It's not what I'm just trying to do something. And Chrome, Chrome

242
00:18:49,080 --> 00:18:54,200
does that on the Mac, on the Mac and on Windows, I think, too. It self-updates and it just

243
00:18:54,200 --> 00:18:58,560
sort of does it in the background without any warning or any prompting. And while I

244
00:18:58,560 --> 00:19:02,600
get the idea and it's important to get those updates down to end users, I don't like not

245
00:19:02,600 --> 00:19:06,480
having any control over when it just all of a sudden demands a lot of resources from my

246
00:19:06,480 --> 00:19:07,480
machine.

247
00:19:07,480 --> 00:19:12,480
Well, it's a good thing you're not running Windows then. And really, this problem in

248
00:19:12,480 --> 00:19:17,600
a larger context is something the Linux Mint distribution is also struggling with right

249
00:19:17,600 --> 00:19:24,080
now. And in upcoming releases, developers may insist that users install some of those

250
00:19:24,080 --> 00:19:25,320
darn patches.

251
00:19:25,320 --> 00:19:30,960
This is a big change. And in what has turned into a series of blog posts, we've learned

252
00:19:30,960 --> 00:19:35,800
that Linux Mint server side statistics give us an indication that around 30% of users

253
00:19:35,800 --> 00:19:42,220
apply updates in about less than a week, 30%. And then it's kind of a drop off after that.

254
00:19:42,220 --> 00:19:48,540
But even more concerning is that their stats indicate around five to 30. And Clem says

255
00:19:48,540 --> 00:19:53,880
it's not super clear. They don't have great data here. But around five to 30% of their

256
00:19:53,880 --> 00:20:00,360
users are still running Linux Mint 17, which was end of life in April of 2019.

257
00:20:00,360 --> 00:20:06,080
Yeah, that's a big range. And it's kind of hard to put these numbers into context without

258
00:20:06,080 --> 00:20:10,840
some data to compare it to other distributions. And I guess, ideally, some more and better

259
00:20:10,840 --> 00:20:15,400
data. But it's clear that the Mint Devs think this is an issue.

260
00:20:15,400 --> 00:20:21,080
Yeah, I mean, they've written a post that just says update your computer exclamation

261
00:20:21,080 --> 00:20:25,960
mark. I mean, they're really trying to address this. I think they've realized there's been

262
00:20:25,960 --> 00:20:30,720
an issue that's kind of become the culture of Mint users, I think, to avoid updates.

263
00:20:30,720 --> 00:20:36,680
And the part of the challenge, it seems, for the developers to really solve this is they

264
00:20:36,680 --> 00:20:41,920
don't have a great set of data to work with. Clem says in the next release, the update

265
00:20:41,920 --> 00:20:47,580
manager won't just look for available updates, but will also keep track of particular metrics

266
00:20:47,580 --> 00:20:53,720
and be able to detect cases where updates are overlooked. In some cases, the update

267
00:20:53,720 --> 00:20:59,080
manager will be able to remind you that you should probably apply these updates. And in

268
00:20:59,080 --> 00:21:04,160
certain cases, it sounds like it's going to kind of insist that you install the updates.

269
00:21:04,160 --> 00:21:09,000
You know, I'm not really clear what that means. But the component of this where it's going

270
00:21:09,000 --> 00:21:13,560
to provide better, more complete information, reminders that there are updates that are

271
00:21:13,560 --> 00:21:17,880
available and that you might need to install for security reasons, that seems like a good

272
00:21:17,880 --> 00:21:19,680
thing or at least a good intention.

273
00:21:19,680 --> 00:21:26,080
Yeah, it'll be one to watch because I think Linux Mint made a little bit of hay out of

274
00:21:26,080 --> 00:21:31,040
trying to create an environment that didn't change more than it needs to. And one of the

275
00:21:31,040 --> 00:21:36,160
ways that that was accomplished was by assigning sort of a number level to updates. You're

276
00:21:36,160 --> 00:21:37,520
probably familiar with the Mint updater.

277
00:21:37,520 --> 00:21:38,520
I remember this.

278
00:21:38,520 --> 00:21:44,280
Yeah, you get these different numbers. And it kind of is an implicit statement that some

279
00:21:44,280 --> 00:21:50,420
updates are less important than others. When you have kind of a more complex situation

280
00:21:50,420 --> 00:21:55,480
when it comes to software on a Linux distribution where so many things are linked to other things,

281
00:21:55,480 --> 00:22:00,420
you kind of have to update everything and keep it all up to date. And I think by calling

282
00:22:00,420 --> 00:22:05,280
some updates out and saying, this is a level one update, this is a level four update, it

283
00:22:05,280 --> 00:22:11,920
sort of set an acceptance among users that it's okay to skip certain updates. And I think

284
00:22:11,920 --> 00:22:15,160
that bears out in this data that's been released here is that there's a bit of a culture of

285
00:22:15,160 --> 00:22:20,280
skipping updates and some users even consider that potentially a feature of Mint. And so

286
00:22:20,280 --> 00:22:25,640
to now try to move that culture towards one that's more accepting of updates is going

287
00:22:25,640 --> 00:22:29,760
to be a tricky thing for the project to pull off, not only from a cultural standpoint,

288
00:22:29,760 --> 00:22:33,520
but from a technology standpoint, too. They got to build the tools that their users are

289
00:22:33,520 --> 00:22:36,000
going to find appealing to use.

290
00:22:36,000 --> 00:22:38,980
Yeah, it's kind of the start of a new conversation.

291
00:22:38,980 --> 00:22:41,760
He does point out timeshift is available.

292
00:22:41,760 --> 00:22:45,160
For the most part, these updates should just work. And if they don't, well, they need to

293
00:22:45,160 --> 00:22:49,080
figure that out. Also, they have to get fixed one way or another.

294
00:22:49,080 --> 00:22:50,080
Snapshots are your friend.

295
00:22:50,080 --> 00:22:53,440
You know, I can certainly appreciate why they want this to happen, though, when you're doing

296
00:22:53,440 --> 00:22:56,840
all the hard work to get those updates shipped, especially if they're important, they might,

297
00:22:56,840 --> 00:23:00,040
you know, fix some of the bugs your users are complaining about, or it might be an important

298
00:23:00,040 --> 00:23:05,000
security update. It kind of sucks to have people not using them. Like, for example,

299
00:23:05,000 --> 00:23:06,720
that recent Cinnamon update.

300
00:23:06,720 --> 00:23:11,280
That's a great example. So users are having this problem where the memory usage on their

301
00:23:11,280 --> 00:23:17,080
system just keeps going up and up and up. Clem writes that they expect the desktop,

302
00:23:17,080 --> 00:23:22,120
a clean Mint desktop to take somewhere between 80 megabytes of RAM, and maybe a gigabyte,

303
00:23:22,120 --> 00:23:25,800
but users are seeing two, four, six gigs of RAM. And some of these systems are not very

304
00:23:25,800 --> 00:23:30,020
high end boxes. And Clem writes they don't know what's causing these Cinnamon desktop

305
00:23:30,020 --> 00:23:34,560
memory leaks yet, but they have a workaround that essentially watches to see free memory

306
00:23:34,560 --> 00:23:38,140
and will just restart Cinnamon for you. It's kind of a clunker, but I guess it's better

307
00:23:38,140 --> 00:23:42,680
than your whole system locking up from a low memory condition. But if people are not installing

308
00:23:42,680 --> 00:23:46,960
these updates, they can't get the workaround.

309
00:23:46,960 --> 00:23:52,160
Linux.ting.com. I understand you've got a lot of subscriptions. There's a lot of things

310
00:23:52,160 --> 00:23:57,580
to pay for these days. A crazy expensive mobile bill shouldn't be one of them. And if you

311
00:23:57,580 --> 00:24:02,520
know how to sync your podcast or your music or just take advantage of being on Wi-Fi before

312
00:24:02,520 --> 00:24:07,640
you hit the road, you can save a ton of money with Ting. It's never been a better time to

313
00:24:07,640 --> 00:24:12,620
join Ting. Now they have plans for anybody at any data size or usage, but Ting has some

314
00:24:12,620 --> 00:24:17,360
really clever plans right now. If you can be strategic about how you use your data,

315
00:24:17,360 --> 00:24:22,320
you can save just a substantial amount of money. What I love about Ting is they have

316
00:24:22,320 --> 00:24:28,000
three nationwide networks to choose from. I mostly bounce between AT&T and Verizon,

317
00:24:28,000 --> 00:24:32,760
but I love that flexibility. And they even have 5G coverage where it's available. But

318
00:24:32,760 --> 00:24:38,460
the great thing about Ting is no contract. And if you use two gigs, 20 gigs or more,

319
00:24:38,460 --> 00:24:42,860
there's a perfect plan for you now over at Ting. And every single plan gets access to

320
00:24:42,860 --> 00:24:48,400
Ting's award-winning customer service. With nationwide LTE and 5G coverage, you're going

321
00:24:48,400 --> 00:24:53,720
to have coverage wherever anyone has coverage. That's a really nice piece of mind thing

322
00:24:53,720 --> 00:24:59,200
about Ting. And with the plan to fit every user and three great networks to choose from,

323
00:24:59,200 --> 00:25:04,000
it's really simple to switch to Ting because just about every darn phone is supported now.

324
00:25:04,000 --> 00:25:07,200
You can figure out if your phone works and you can just bring it right over by going

325
00:25:07,200 --> 00:25:14,000
to linux.ting.com. Take a look. If it does, they're going to give you $25 in service credits.

326
00:25:14,000 --> 00:25:18,520
That might just pay for your first month. That's how good of a deal Ting is. Now if

327
00:25:18,520 --> 00:25:23,240
you need a new phone, they'll sell one to you and you can take our linux.ting.com $25

328
00:25:23,240 --> 00:25:27,520
and apply to that as well. But I'm going to make a bet that if you have a kind of a modern

329
00:25:27,520 --> 00:25:31,880
phone and you're on one of the major carriers now, Ting's going to work. They'll just send

330
00:25:31,880 --> 00:25:35,040
you a SIM card and you'll be up and going in minutes once you receive it in the mail.

331
00:25:35,040 --> 00:25:40,960
That's awesome. And cutting your phone bill in half has literally never been easier. I've

332
00:25:40,960 --> 00:25:46,000
been a Ting customer forever and I can tell you these brand new plans are spicy. Go check

333
00:25:46,000 --> 00:25:49,960
them out right now. The next generation of Ting mobile is here. See how much you could

334
00:25:49,960 --> 00:25:55,760
save and get $25 off at linux.ting.com.

335
00:25:55,760 --> 00:26:01,040
In one of my favorite moments this week, Linus Torvalds wrote on the Linux kernel mailing

336
00:26:01,040 --> 00:26:08,280
list, hey peeps, hey Linus. He went on and it only gets worse from here unfortunately.

337
00:26:08,280 --> 00:26:14,280
Some of you may have already noticed that in my public git tree, the 512 RC1 tag has

338
00:26:14,280 --> 00:26:19,600
magically been renamed to 512 RC1 don't use.

339
00:26:19,600 --> 00:26:26,320
Don't use? It turns out there was a severe data corruption bug that hit systems that

340
00:26:26,320 --> 00:26:31,840
use a swap file rather than a dedicated swap partition.

341
00:26:31,840 --> 00:26:37,280
Linus went on to say, as far as I know, all the normal distributions set things up with

342
00:26:37,280 --> 00:26:43,200
swap partitions, not files, because honestly, swap files tend to be slower and have various

343
00:26:43,200 --> 00:26:44,840
other complexity issues.

344
00:26:44,840 --> 00:26:50,040
That might be true, but if that smells a little funny to you, I agree. I mean, just top of

345
00:26:50,040 --> 00:26:56,520
mind, Ubuntu has been using swap files by default for a long time. But this reminds

346
00:26:56,520 --> 00:27:00,840
us really of the role that distributions play. This is a bug that we never really have to

347
00:27:00,840 --> 00:27:05,560
worry about. It's managed by the distribution and these kind of kernel updates are specifically

348
00:27:05,560 --> 00:27:08,600
watched by the people putting the distributions together.

349
00:27:08,600 --> 00:27:13,520
So really, we kind of get the best of both worlds. We get to sit back and watch this

350
00:27:13,520 --> 00:27:18,600
really kind of remarkable piece of software be created and and watch the team respond

351
00:27:18,600 --> 00:27:22,400
with really no immediate consequences to us as users.

352
00:27:22,400 --> 00:27:28,000
Yeah, and Linus was very clear to point out this was caught in the RC stage during, you

353
00:27:28,000 --> 00:27:34,880
know, mostly normal testing. But to me, his tone seemed a little bit sheepish. I mean,

354
00:27:34,880 --> 00:27:39,600
I think this is a little embarrassing for the kernel. And perhaps rightfully so. They

355
00:27:39,600 --> 00:27:45,360
take data integrity seriously and having swap just spraying all over your file system. It's

356
00:27:45,360 --> 00:27:51,040
kind of embarrassing. As he put it, I want everybody to be aware of this because if it

357
00:27:51,040 --> 00:27:55,800
bites you, it bites you hard. You can end up with a file system that is essentially

358
00:27:55,800 --> 00:28:03,200
overwritten by random swap data. This is what we in the industry call double on good.

359
00:28:03,200 --> 00:28:09,840
Indeed. Well, a quick PSA before we go. The container plumbing days is just around the

360
00:28:09,840 --> 00:28:13,880
corner as we are recording this. So save the date March 9, through the 10th. It's a two

361
00:28:13,880 --> 00:28:19,680
day event that investigates, discusses hacks and learns and celebrates the lower level

362
00:28:19,680 --> 00:28:24,000
of open source container technologies. If this is something you've wanted to learn,

363
00:28:24,000 --> 00:28:27,800
well, this could be your chance to do it. Here's a taste of some of the topics being

364
00:28:27,800 --> 00:28:35,640
explored container runtimes, security and isolation, virtualization inside containers,

365
00:28:35,640 --> 00:28:42,040
and of course, Linux c groups, namespaces and other kernel features that power containers.

366
00:28:42,040 --> 00:28:46,360
Our plumbing days is sponsored by Red Hat. It's never really too late to learn or get

367
00:28:46,360 --> 00:28:50,320
a refresher, right? And while you're doing that, don't worry. We'll keep you updated

368
00:28:50,320 --> 00:28:54,600
on the latest Linux news that you should know about just go to Linux action news.com slash

369
00:28:54,600 --> 00:29:00,160
subscribe for all the ways to get new episodes and Linux action news.com slash contact for

370
00:29:00,160 --> 00:29:05,220
ways to get in touch. If you're considering a last pass alternative right now check out

371
00:29:05,220 --> 00:29:10,560
self hosted.show slash 39 we run down our favorites and the ones that we self host.

372
00:29:10,560 --> 00:29:15,680
We'll be back next Monday with our weekly take on the latest Linux and open source news.

373
00:29:15,680 --> 00:29:41,800
Thanks for joining us and we will see you next week.


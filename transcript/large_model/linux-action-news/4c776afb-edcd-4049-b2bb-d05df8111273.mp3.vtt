WEBVTT

00:00.000 --> 00:08.540
Hello, and welcome to Linux Action News, episode 230, recorded on March 2nd, 2022.

00:08.540 --> 00:09.540
I'm Chris.

00:09.540 --> 00:10.540
And I'm Wes.

00:10.540 --> 00:11.540
Hello, Wes.

00:11.540 --> 00:13.420
Let's do the news.

00:13.420 --> 00:17.860
We start this week with a quick state of the deck.

00:17.860 --> 00:24.020
Valve's team held a series of interviews, and during one chat with IGN, Valve's Lawrence

00:24.020 --> 00:30.120
Yang touched on the overall production of the deck, mentioning, quote, in production

00:30.120 --> 00:32.480
terms, it'll ramp up very quickly.

00:32.480 --> 00:36.080
In the first month, very quickly, we'll be in the tens of thousands.

00:36.080 --> 00:39.760
By the second month, we'll be in the hundreds of thousands.

00:39.760 --> 00:43.200
And beyond that, it'll grow even quicker.

00:43.200 --> 00:48.680
Woohoo, here come the decks, and here come the OS updates, which are still landing, as

00:48.680 --> 00:50.960
you maybe might expect.

00:50.960 --> 00:56.040
Viewers on Reddit reported some rather nasty thumbstick drift, which is an issue that has

00:56.040 --> 00:58.000
impacted many controllers over the years.

00:58.000 --> 01:03.240
However, this one seemed to be caused by a regression in a recent firmware update, and

01:03.240 --> 01:05.320
Valve has now corrected that issue.

01:05.320 --> 01:09.560
Unfortunately, it's not all bug fixes and good news.

01:09.560 --> 01:12.280
We've gotten some bad news as well.

01:12.280 --> 01:17.760
Bungie, makers of the popular game Destiny 2, have threatened to ban players who attempt

01:17.760 --> 01:21.560
to bypass compatibility requirements on the deck.

01:21.560 --> 01:24.120
Okay, maybe that doesn't sound so bad.

01:24.120 --> 01:33.000
Until you realize that those compatibility requirements, well, they mandate Windows.

01:33.000 --> 01:34.000
This is such a shame.

01:34.000 --> 01:41.760
You know, Bungie has a long history, and their start was in supporting platforms that didn't

01:41.760 --> 01:43.720
necessarily have mainstream support.

01:43.720 --> 01:45.360
So it's a shame to see this.

01:45.360 --> 01:50.040
But they updated their help page to give us all a hand so we can sort ourselves out, and

01:50.040 --> 01:54.160
the new section is titled Steam Deck and Destiny 2.

01:54.160 --> 01:57.840
And I'll just read a little bit to help everybody get on the same page.

01:57.840 --> 02:03.640
It reads, Destiny 2 is not supported for play on the Steam Deck or any system utilizing

02:03.640 --> 02:07.880
Steam Play's Proton unless Windows is installed and running.

02:07.880 --> 02:12.680
Players who attempt to launch Destiny 2 on the Steam Deck through SteamOS or Proton will

02:12.680 --> 02:18.760
be unable to enter the game and will be returned to the game library after a short time.

02:18.760 --> 02:27.040
Players who attempt to bypass Destiny 2's incompatibility will be met with a game ban.

02:27.040 --> 02:31.700
And man, what a shame, because speaking for myself, I'm very disappointed.

02:31.700 --> 02:35.880
For one reason, this is like the number one game I wanted to play on the deck.

02:35.880 --> 02:41.800
I really kind of fell in love with Destiny 2 when I tried it out on Stadia.

02:41.800 --> 02:43.960
And that's my other point in all this.

02:43.960 --> 02:49.020
I don't really understand even why Bungie is doing this, because I played Destiny 2

02:49.020 --> 02:51.760
on Stadia, which runs on Linux.

02:51.760 --> 02:54.720
So they have a Linux port of Destiny 2.

02:54.720 --> 03:01.920
So it's clearly just like a lazy, heavy-handed way to ensure that their malware-styled anti-cheat

03:01.920 --> 03:04.420
crap still works.

03:04.420 --> 03:08.840
They don't even really seem to give deck owners a full answer here.

03:08.840 --> 03:12.660
I mean, yeah, okay, they tell you what's going to happen, but they don't make it clear

03:12.660 --> 03:15.320
why or what the issue is.

03:15.320 --> 03:18.520
We're left to just assume it's anti-cheat related, because historically that's been

03:18.520 --> 03:23.520
one of the issues with Proton support for a variety of games, despite all of Valve and

03:23.520 --> 03:26.240
Collabra's hard work in this area.

03:26.240 --> 03:31.180
I suppose one plausible interpretation that is maybe a little more charitable is to suggest

03:31.180 --> 03:36.600
that Bungie might be buying some time to get that Stadia Linux version actually working

03:36.600 --> 03:37.600
on the Deck.

03:37.600 --> 03:43.080
And they don't really want users trying to half-ass the game support in another way in

03:43.080 --> 03:46.360
the meantime, and perhaps having a bad experience.

03:46.360 --> 03:49.260
If that's true, just tell us.

03:49.260 --> 03:52.880
I'm sure Valve and Collabra will be happy to help.

03:52.880 --> 03:53.880
Right.

03:53.880 --> 03:54.880
Great point.

03:54.880 --> 03:55.880
Yeah, they've offered.

03:55.880 --> 04:01.680
You know, speaking of Collabra, we did get a little more insight into what they did to

04:01.680 --> 04:06.200
get the Deck where it is in collaboration with Valve in a blog post on their website,

04:06.200 --> 04:07.280
which we will have linked.

04:07.280 --> 04:12.500
They go into some detail about all of this, and they talk about specifically the AB update

04:12.500 --> 04:18.140
system they had to create for SteamOS 3, which is now Arch-based.

04:18.140 --> 04:25.240
They also note in that post that the active operating system, it's a read-only partition.

04:25.240 --> 04:30.400
They also go into some juicy details about just exactly how those updates work.

04:30.400 --> 04:35.560
Quote, when upgrading, a new operating system image is written to whichever partition is

04:35.560 --> 04:41.240
not currently in use before rebooting the system.

04:41.240 --> 04:47.220
Then a specialized bootloader module automatically selects the newest operating system and boots

04:47.220 --> 04:48.880
into it.

04:48.880 --> 04:53.840
If that upgrade went successfully, you can continue to just use that new OS, and the

04:53.840 --> 04:57.520
old system partition is going to be used for the next upgrade.

04:57.520 --> 05:03.280
But if the upgraded version does not successfully boot, the bootloader automatically falls back

05:03.280 --> 05:08.760
to the previous system partition, and you can try that update again later.

05:08.760 --> 05:14.480
And maybe most interesting of all, they write, of course, new operating system images are

05:14.480 --> 05:22.120
downloaded with block-based deltas, so only the changed parts need to be redownloaded.

05:22.120 --> 05:23.760
That's super cool.

05:23.760 --> 05:27.160
I love that kind of stuff that's going to save you download time, especially when you're

05:27.160 --> 05:29.880
just trying to get this thing going and you want to play a game.

05:29.880 --> 05:32.360
You don't want to wait for all the updates to download, but you also don't want to get

05:32.360 --> 05:33.360
far behind.

05:33.360 --> 05:35.740
You know, really, we're just following the highlights here.

05:35.740 --> 05:39.840
But Liam over at Gaming on Linux has been really keeping his ear to the ground, doing

05:39.840 --> 05:44.640
great work capturing the day-to-day developments, as well as Michael Larable over at Ferronik.

05:44.640 --> 05:49.480
So those are two resources to check on the daily if you're interested in that level of

05:49.480 --> 05:51.680
developments around this device.

05:51.680 --> 05:54.840
But otherwise, we're going to keep an eye out for any major updates, any of the big

05:54.840 --> 06:00.240
picture macro stuff, but I suspect at this point, we're going to see incremental things,

06:00.240 --> 06:05.200
theme updates, compatibility improvements, that sort of stuff, and the next big news

06:05.200 --> 06:09.920
items will land when consumers actually start getting these things into their hands at some

06:09.920 --> 06:10.920
actual scale.

06:10.920 --> 06:15.040
But we'll keep an eye on it for you.

06:15.040 --> 06:20.120
Most of the time on this program, we're busy getting excited about some hot new file system

06:20.120 --> 06:22.800
that might be entering the kernel.

06:22.800 --> 06:25.480
Think BcashFS, perhaps?

06:25.480 --> 06:28.160
But this week, it's a little different.

06:28.160 --> 06:34.200
Consumers actually talk of removing a file system, a relatively rare event for the kernel.

06:34.200 --> 06:36.360
The file system in question?

06:36.360 --> 06:39.880
Our old friend, RiserFS.

06:39.880 --> 06:46.000
Now this isn't due to some bug that was recently caught in RiserFS, no, there haven't actually

06:46.000 --> 06:50.640
been any user-spotted bugs since at least 2019.

06:50.640 --> 06:54.040
The issue is one of maintenance.

06:54.040 --> 07:00.720
Code has costs, as has been observed by many kernel developers over the years, and RiserFS

07:00.720 --> 07:06.240
is preventing some maintenance and modification, using some ancient API calls that nothing

07:06.240 --> 07:07.560
else still is.

07:07.560 --> 07:09.840
Oh, they hate that, don't they?

07:09.840 --> 07:11.820
They don't like those old API calls.

07:11.820 --> 07:16.520
So I guess if RiserFS support matters, you better speak up now.

07:16.520 --> 07:20.560
But I'm wondering, and I'm hoping, I know this sounds weird, but I'm actually hoping

07:20.560 --> 07:27.040
they find a middle ground here and just maybe keep read-only mode for a while.

07:27.040 --> 07:30.400
I don't think I have any disk formatted in RiserFS.

07:30.400 --> 07:35.880
But there was a time, Wes, back in the day, where RiserFS was actually, it was a go-to

07:35.880 --> 07:37.080
file system for me.

07:37.080 --> 07:42.800
See, I had this situation where we had like two terabytes of disk to deal with, which

07:42.800 --> 07:47.680
was an astronomical amount of space in like 2002, 2003.

07:47.680 --> 07:49.520
It was a lot.

07:49.520 --> 07:53.260
And we had just transitioned to a check imaging system.

07:53.260 --> 07:58.280
So we were a bank, and we would process people's checks, and we would get an image of every

07:58.280 --> 07:59.280
check.

07:59.280 --> 08:02.200
And it's like a 100 kilobyte JPEG.

08:02.200 --> 08:06.040
And we had to store hundreds of thousands of these little files.

08:06.040 --> 08:12.280
And that was an area where RiserFS really excelled, was when you needed a lot of little

08:12.280 --> 08:13.280
files.

08:13.280 --> 08:14.440
And it had a few tricks for that.

08:14.440 --> 08:19.920
And on top of that, especially on SUSE back then, it was one of the few file systems that

08:19.920 --> 08:21.960
supported extended attributes.

08:21.960 --> 08:25.400
So you could support NTFS-style file permissions.

08:25.400 --> 08:30.760
And I could expose the checks to users as needed on Windows boxes with the correct permissions

08:30.760 --> 08:35.520
to make sure that only a very certain group could get access to these files.

08:35.520 --> 08:41.200
And RiserFS, back in the day, was really the only file system on Linux that offered this.

08:41.200 --> 08:45.600
XFS also had some of the extended attribute support, but not all of the small file tricks

08:45.600 --> 08:48.040
that RiserFS had.

08:48.040 --> 08:51.600
And otherwise, it was like extended to.

08:51.600 --> 08:56.380
So I could definitely see some old installations out there, so maybe some disks that are still

08:56.380 --> 09:01.560
archived in corporate America or in old banks that are formatted in RiserFS that they may

09:01.560 --> 09:05.240
one day like to fire up and retrieve the data from.

09:05.240 --> 09:09.440
So get in like a read-only kind of support, because I think the big bug and the issue

09:09.440 --> 09:13.320
they're running into with the old APIs, it really comes down to just write support.

09:13.320 --> 09:16.040
It seems like that'd be a good compromise.

09:16.040 --> 09:17.040
Just read-only.

09:17.040 --> 09:22.080
Yeah, read-only support has been proposed on the mailing list.

09:22.080 --> 09:28.040
Actually a user of RiserFS showed up to say, hey, I'm still using the latest kernels and

09:28.040 --> 09:30.080
still using this old file system.

09:30.080 --> 09:34.760
I figured I'd still have time since it's not quite the year 2038 yet.

09:34.760 --> 09:38.520
That's another factor here is the kernel is actively considering some maintenance to try

09:38.520 --> 09:44.320
and drop some of these file systems that aren't year 2038 compliant, which some of the maintainers

09:44.320 --> 09:47.520
like Dave Chinner were quick to point out, look, we already did that for some of the

09:47.520 --> 09:48.520
XFS stuff.

09:48.520 --> 09:49.520
That's been removed.

09:49.520 --> 09:51.120
We do this all the time.

09:51.120 --> 09:56.200
But aside from the conversation around benefits to maintainers versus benefits to users, we

09:56.200 --> 09:59.520
should just note that don't worry, it's not going away right now.

09:59.520 --> 10:03.960
Turns out there are still some RiserFS developers out there because one of them contributed

10:03.960 --> 10:10.520
a patch for the immediate annoyance that surfaced this week.

10:10.520 --> 10:16.800
An area we should probably be talking about a little more is Linux in the automotive industry.

10:16.800 --> 10:21.120
And a little while ago, the CentOS folks set up the Automotive Special Interest Group.

10:21.120 --> 10:26.440
Well this week they announced the Automotive Stream AutoSD Linux distribution.

10:26.440 --> 10:31.760
Okay, so it's really pretty much CentOS, but the idea is the Automotive Stream distribution

10:31.760 --> 10:38.240
will be upstream to what eventually will be a official Red Hat automotive product.

10:38.240 --> 10:43.880
Yeah, rather than just stuffing plain old CentOS into cars or having to carry a bunch

10:43.880 --> 10:49.800
of patches themselves, well, this special interest group and now this distribution is

10:49.800 --> 10:51.880
kind of copying the stream model, right?

10:51.880 --> 10:55.480
There'll be this open collaborative space that anyone really interested in developing

10:55.480 --> 10:57.600
this can contribute to.

10:57.600 --> 11:01.560
And then at the same time, it gives a nice base that can be customized for this, well,

11:01.560 --> 11:05.720
special interest that RHEL can develop a stable product based on.

11:05.720 --> 11:10.080
An example of where things might diverge is, well, the Linux kernel.

11:10.080 --> 11:15.560
They've got a special kernel automotive package planned rather than relying on CentOS Stream's

11:15.560 --> 11:21.120
stock kernel, which, hey, in industrial use cases, might be a good idea.

11:21.120 --> 11:26.240
Beyond the nerdy specifics of exactly what technical changes one wants to make trying

11:26.240 --> 11:31.620
to adapt Linux to cars, I think this development is also worth following just as commentary

11:31.620 --> 11:36.480
on the larger change to CentOS Stream and the new models of developing RHEL and RHEL

11:36.480 --> 11:38.800
based products that we've seen.

11:38.800 --> 11:42.040
It's one thing to have a special interest group, several of those exist now.

11:42.040 --> 11:50.320
It's another to take a step towards advancing a product and having a custom distribution.

11:50.320 --> 11:51.880
Linode.com slash LAN.

11:51.880 --> 11:56.760
Go there to get $100 and 60-day credit on a new account so you can really try Linode

11:56.760 --> 11:58.760
and you can support the show.

11:58.760 --> 12:00.520
Linode is fast, reliable cloud hosting.

12:00.520 --> 12:02.280
You got to try it out for your next project.

12:02.280 --> 12:07.280
It's worth giving it a go because if you haven't tried Linode yet, you're missing something

12:07.280 --> 12:12.160
special and they're always rolling out improvements to their infrastructure, so Linode's constantly

12:12.160 --> 12:13.160
getting better.

12:13.160 --> 12:16.760
They have 11 data centers around the world, so you'll find something near you or your

12:16.760 --> 12:17.760
customers.

12:17.760 --> 12:22.640
It's been nearly 19 years, so they really know what they're doing.

12:22.640 --> 12:27.200
They have the absolute best customer service in the industry, comes up over and over again

12:27.200 --> 12:30.680
from Linux Action News listeners who have made the switch to Linode.

12:30.680 --> 12:34.680
They're always blown away because you build something, something goes sideways, you got

12:34.680 --> 12:35.880
some questions.

12:35.880 --> 12:39.320
It makes all the difference in the world to have an expert there who doesn't try to escalate

12:39.320 --> 12:41.000
you to some other tier.

12:41.000 --> 12:42.520
They just take care of it.

12:42.520 --> 12:46.720
They know customer support is critical, so they've invested in having the best in the

12:46.720 --> 12:50.600
business, and that even extends to documentation.

12:50.600 --> 12:56.800
Just a couple of days ago, they did a big update, a big update in documentation around

12:56.800 --> 13:01.600
deep learning frameworks, documentations for new Linux utility guides, just a whole bunch

13:01.600 --> 13:02.600
of stuff.

13:02.600 --> 13:07.240
They highlight that kind of stuff on their blog, it's just such a great resource too

13:07.240 --> 13:11.740
if you want to get into something like machine learning or you want to learn a particular

13:11.740 --> 13:17.480
thing like, you know, awk or sed or grep.

13:17.480 --> 13:21.200
I suppose you could go dig into some training guides somewhere, but Linode has some great

13:21.200 --> 13:25.520
documentation too, and it's just a great platform to use to learn as well.

13:25.520 --> 13:31.360
It's my R&D lab all the time, and then I flip it into production, and it's built for huge

13:31.360 --> 13:36.280
enterprise scale uses or individual uses, and their pricing is 30 to 50% less than the

13:36.280 --> 13:40.400
major hyperscalers out there that are just going to try to lock you into their platform.

13:40.400 --> 13:43.640
Linode's also a fantastic part of a multi-cloud strategy.

13:43.640 --> 13:51.920
Go check it out, get $100 in credit and really kick the tires, linode.com slash lan.

13:51.920 --> 13:54.980
And a big thank you to Ting, linux.ting.com.

13:54.980 --> 13:59.400
If you're sick of overpaying for self-service, go see how much you could save and then get

13:59.400 --> 14:03.400
25 bucks off that by going to linux.ting.com.

14:03.400 --> 14:07.600
Ting is what mobile should be, it's a smarter, simpler way to do mobile.

14:07.600 --> 14:12.160
They ride on top of the large carrier networks, but instead of having to interface with those

14:12.160 --> 14:17.520
monopolies, you get to interface with Ting who focuses on value.

14:17.520 --> 14:22.600
They focus on customer service, and they focus on multi-network compatibility.

14:22.600 --> 14:26.880
They really have rates that nobody can touch because Ting doesn't have to dig holes in

14:26.880 --> 14:28.160
the ground, right?

14:28.160 --> 14:32.000
That's not their aspect, they focus on you, and that's why they were named the number

14:32.000 --> 14:35.380
one carrier by Consumer Reports in 2021.

14:35.380 --> 14:40.720
It also means they have multiple nationwide networks for you to choose, great plans, great

14:40.720 --> 14:44.380
mix of 5G or LTE, it's just a lot of perks.

14:44.380 --> 14:47.600
That's why I've been a customer since 2013.

14:47.600 --> 14:51.720
They got plans to start around $10 a month, plans with unlimited messaging, unlimited

14:51.720 --> 14:56.660
text, all kinds of data options, and every single plan gets access to Ting's award-winning

14:56.660 --> 14:58.240
customer service.

14:58.240 --> 15:01.480
And of course, no contract ever.

15:01.480 --> 15:05.300
It's simple to switch to Ting, and pretty much any phone's gonna work with Ting because

15:05.300 --> 15:07.560
they do support so many networks.

15:07.560 --> 15:12.520
So just head to linux.ting.com, go check your current phone out, create an account, and

15:12.520 --> 15:14.320
pick a plan that's right for you.

15:14.320 --> 15:18.040
What'll happen is, once you get all your information, you figure out what your phone's compatible

15:18.040 --> 15:21.720
with, Ting's gonna send you a SIM card that works great in your area.

15:21.720 --> 15:24.700
You pop that in your phone, and you get activated in minutes.

15:24.700 --> 15:27.780
It's impressive how much you can just do from their beautiful dashboard.

15:27.780 --> 15:31.600
The first time I signed up for Ting, it was like, I don't know, 10, 11 o'clock at night,

15:31.600 --> 15:35.960
something like that, everybody had gone to bed, and I just decided I was sick of overpaying

15:35.960 --> 15:41.120
for cell service, and I did it all online in one night.

15:41.120 --> 15:43.780
So just get started, and cut your phone bill in half.

15:43.780 --> 15:45.360
It's never been easier.

15:45.360 --> 15:46.360
Go to linux.ting.com.

15:46.360 --> 15:56.640
Recently, the Core Boot Camp has raised some awareness about an issue facing the future

15:56.640 --> 16:03.720
of Intel-based systems that might make them less friendly to open-source firmware.

16:03.720 --> 16:09.780
Core Boot developer Philipp Deppenweis, CEO of German-based security firm Immune and founder

16:09.780 --> 16:15.120
of Nine Elements Security, through which he's heavily involved in the open-source firmware

16:15.120 --> 16:19.080
space, shared some concerns on Twitter this week.

16:19.080 --> 16:26.160
Yeah, he drew attention to the new Intel FSP 3.0 next-gen firmware support package,

16:26.160 --> 16:29.960
along with what they call their universal scalable firmware.

16:29.960 --> 16:36.040
And he says, basically, this is just going fully closed-source on the firmware side forever.

16:36.040 --> 16:41.320
And when you combine these types of firmware changes that Intel is working with, along

16:41.320 --> 16:46.840
with ideas like software-defined silicon, which it seems the kernel team is already

16:46.840 --> 16:53.080
on board with, it just really reminds me how freaking badly we need an open-source processor.

16:53.080 --> 16:59.720
But I have to say, I look over at RISC-V, and now that we're in Q1 of 2022, and there's

16:59.720 --> 17:07.440
still no RISC-V Pi-like board that you could buy and try, I'm honestly losing hope that

17:07.440 --> 17:10.900
RISC-V is ever going to be a consumer solution.

17:10.900 --> 17:16.000
I think if we don't have Raspberry Pi-type systems by now, it's probably never going

17:16.000 --> 17:18.520
to happen for us consumers.

17:18.520 --> 17:19.520
There's a few.

17:19.520 --> 17:20.520
I should make it clear.

17:20.520 --> 17:22.680
There are some, right?

17:22.680 --> 17:24.680
You can find some.

17:24.680 --> 17:27.200
I'm talking like an ecosystem, right?

17:27.200 --> 17:31.680
I'm talking about something more than just for software developers that are maybe building

17:31.680 --> 17:33.960
a RISC system in the future.

17:33.960 --> 17:38.280
We've definitely been fairly excited about RISC-V for a while now, at least looking at

17:38.280 --> 17:39.840
the Linux action news.

17:39.840 --> 17:41.840
Tags for episodes that include RISC-V?

17:41.840 --> 17:43.320
Yeah, it comes up a lot.

17:43.320 --> 17:47.960
And there's a lot to like about it, an open architecture, some open-source implementations

17:47.960 --> 17:48.960
out there.

17:48.960 --> 17:51.240
But you're right.

17:51.240 --> 17:55.640
We talk about it a lot, but we haven't really got to play with it yet.

17:55.640 --> 17:59.080
And it's kind of frustrating, it's kind of disappointing.

17:59.080 --> 18:05.600
And as we see continued wide-scale adoption of ARM, I can see why you're worried.

18:05.600 --> 18:12.600
Yeah, I think if I zoom out long, long term, it still feels like the slow adoption of RISC-V

18:12.600 --> 18:17.520
into other areas of computing is probably inevitable.

18:17.520 --> 18:24.040
But at least with a lot of consumer devices like laptops and desktops, and Chromebook

18:24.040 --> 18:29.000
type systems, I think ARM is really the winner for a while.

18:29.000 --> 18:32.360
And obviously, the momentum that x86 will continue.

18:32.360 --> 18:38.320
But I just have kind of, about two years ago, I was still holding out hope pretty strongly

18:38.320 --> 18:42.200
that in a few years, I'd have a RISC-V laptop.

18:42.200 --> 18:44.320
Now pretty much all that hope has collapsed.

18:44.320 --> 18:50.000
And I think where I kind of went wrong is it's a very frequent and common occurrence

18:50.000 --> 18:56.440
in free software news and coverage to kind of go all the way to the natural, logical

18:56.440 --> 19:02.160
conclusion of how far this technology could possibly go and write about it from that perspective.

19:02.160 --> 19:07.360
And maybe not pay as much attention to the actual market demands for such a product,

19:07.360 --> 19:11.720
how the actual market's going to use that thing, that piece of software, that hardware

19:11.720 --> 19:12.720
device.

19:12.720 --> 19:16.480
But when you look at the actual market reality behind RISC-V, it's pretty understandable

19:16.480 --> 19:20.320
that it's people that are building specialist systems, people that need the integration

19:20.320 --> 19:26.120
of the software and the CPU for a particular kind of workload that they're doing.

19:26.120 --> 19:29.380
There isn't a big consumer application for it.

19:29.380 --> 19:31.840
Maybe it just wasn't super obvious initially.

19:31.840 --> 19:35.800
And maybe it just took a couple of years to realize that's where this is going.

19:35.800 --> 19:38.160
Or maybe it was there all along.

19:38.160 --> 19:39.600
Maybe it was always obvious, Wes.

19:39.600 --> 19:40.600
What do you think?

19:40.600 --> 19:45.440
Well, on one hand, I'm not sure it was obvious that RISC-V would have gotten as far as it

19:45.440 --> 19:46.440
has today.

19:46.440 --> 19:50.680
I mean, we are talking about it, we've seen, you know, Intel and many other folks show

19:50.680 --> 19:55.960
interest in it, especially compared to stuff like OpenPower, OpenSpark, OpenRisk, you know,

19:55.960 --> 20:00.120
there's a long history of various public domain or open architectures.

20:00.120 --> 20:03.560
But you're right, there's not been a lot of exposure to it.

20:03.560 --> 20:08.200
And so far, the things we have heard, well, they're Western Digital using them in their

20:08.200 --> 20:09.200
hard drives.

20:09.200 --> 20:13.500
They're just customized AI chips that are probably running proprietary models.

20:13.500 --> 20:17.400
And I think we tend to see something like, you know, free or open source.

20:17.400 --> 20:22.240
And in the Linux ecosystem, our minds jump immediately to how this can enable the freedom

20:22.240 --> 20:26.840
and self control of someone using a Linux desktop, say.

20:26.840 --> 20:31.680
But at least right now, the real selling point for RISC-V, like the reason you might use

20:31.680 --> 20:36.480
it over something like an ARM chip that's, you know, probably better optimized, it's

20:36.480 --> 20:41.040
been around longer that might have more vendors already, is because of that flexibility, because

20:41.040 --> 20:43.680
you need to do something custom.

20:43.680 --> 20:48.320
In some ways, there are parallels with, you know, some of the tooling on Linux.

20:48.320 --> 20:53.360
If you want to go put yourself in customized arch based system, you can get something really

20:53.360 --> 20:54.360
great.

20:54.360 --> 20:57.600
But it's not necessarily going to be super useful for someone else who has different

20:57.600 --> 20:58.840
use cases.

20:58.840 --> 21:03.480
And that's the stage of adoption and use and interest in RISC-V right now.

21:03.480 --> 21:08.120
The tooling that's being developed around this open instruction set, around reinvigorating

21:08.120 --> 21:12.440
sort of these open designs, and for folks that are trying to design this, or developers

21:12.440 --> 21:15.320
in that space, really exciting.

21:15.320 --> 21:20.640
But for those of us who just want a new desktop that isn't powered by proprietary architecture,

21:20.640 --> 21:23.160
yeah, I don't know.

21:23.160 --> 21:25.520
I know, I know.

21:25.520 --> 21:26.680
You're totally right.

21:26.680 --> 21:31.200
And it's also like Linus Torvalds said, like even back in 2016, Linus said that it's not

21:31.200 --> 21:36.520
so much the instruction set, it's everything else around the CPU that really matters.

21:36.520 --> 21:42.160
And you got to have the entire ecosystem around the CPU, the entire platform matters before

21:42.160 --> 21:45.200
you're going to see mass adoption in something like a PC.

21:45.200 --> 21:46.200
And he's right.

21:46.200 --> 21:52.080
And you know, with these types of open source things, it is a very slow burn, as the industry

21:52.080 --> 21:56.160
is often five, 10, 15 years out on some of their design plans, right?

21:56.160 --> 22:01.160
It's entire life cycles that they have to go through before they start looking at retooling.

22:01.160 --> 22:04.120
But we do have some great resources in the show notes, if you're curious about where

22:04.120 --> 22:08.360
Intel is going with their software to find silicon, or their new firmware stuff, or even

22:08.360 --> 22:12.000
a recent update on RISC-V, we have links to all of that in the show notes.

22:12.000 --> 22:14.880
And of course, Linux Action News is back every single week.

22:14.880 --> 22:20.120
So be sure you go to linuxactionnews.com slash subscribe for all the ways to get new episodes.

22:20.120 --> 22:24.680
And linuxactionnews.com slash contact for ways to get in touch.

22:24.680 --> 22:28.080
Hey, we have an East Coast Meetup coming on April 9.

22:28.080 --> 22:32.520
That's a Saturday, details at meetup.com slash Jupiter Broadcasting, we would love to see

22:32.520 --> 22:33.520
you there.

22:33.520 --> 22:38.680
But don't worry if you can't make it, we'll be here for you every single week with our

22:38.680 --> 22:42.400
take on the latest Linux and open source news.

22:42.400 --> 22:43.400
Thanks for joining us.

22:43.400 --> 22:59.000
And that's all the news for this week.


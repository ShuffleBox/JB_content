1
00:00:00,000 --> 00:00:09,220
Hello, and welcome to Linux Action News, episode 194, recorded on June 20th, 2021.

2
00:00:09,220 --> 00:00:10,220
I'm Chris.

3
00:00:10,220 --> 00:00:11,220
And I'm Wes.

4
00:00:11,220 --> 00:00:12,220
Hello, Wes.

5
00:00:12,220 --> 00:00:13,220
Let's do the news.

6
00:00:13,220 --> 00:00:18,020
The recently announced proposal to make the Rust programming language one of two main

7
00:00:18,020 --> 00:00:23,500
languages for the Linux kernel is getting a significant boost thanks to Google and the

8
00:00:23,500 --> 00:00:30,240
Internet Security Research Group, or ISRG, better known as the group behind Let's Encrypt.

9
00:00:30,240 --> 00:00:35,640
The main goal of the push to bring Rust to Linux is to wipe out an entire class of memory-related

10
00:00:35,640 --> 00:00:38,680
security bugs in the kernel.

11
00:00:38,680 --> 00:00:40,160
Memory-related bugs are a big deal.

12
00:00:40,160 --> 00:00:43,900
They're a huge deal on the Windows platform, and they're likely a very significant deal

13
00:00:43,900 --> 00:00:45,360
on the Linux platform.

14
00:00:45,360 --> 00:00:49,360
You might recall we talked about Linus's warming to the idea of Rust in the kernel,

15
00:00:49,360 --> 00:00:53,040
especially starting with device drivers a few months ago.

16
00:00:53,040 --> 00:00:56,780
But rewriting the kernel is not even on the table here, and no one is suggesting such

17
00:00:56,780 --> 00:00:57,860
a thing should be done.

18
00:00:57,860 --> 00:01:02,400
But what it does seem like is happening is a consensus is forming that parts of the Linux

19
00:01:02,400 --> 00:01:05,120
kernel should be rewritten in Rust.

20
00:01:05,120 --> 00:01:08,840
And maybe some areas make a lot of sense to be rewritten in Rust.

21
00:01:08,840 --> 00:01:11,340
Yeah, you can start with things like device drivers.

22
00:01:11,340 --> 00:01:14,700
And once you've got all the tooling figured out, processes in place, then yeah, maybe

23
00:01:14,700 --> 00:01:18,200
you can make some more inroads into places where memory safety is key in the kernel,

24
00:01:18,200 --> 00:01:20,960
or it's just kind of confusing right now and needs a rewrite anyway.

25
00:01:20,960 --> 00:01:22,880
That might be a great time to shift things over.

26
00:01:22,880 --> 00:01:24,640
Or modernize, perhaps.

27
00:01:24,640 --> 00:01:25,640
Exactly.

28
00:01:25,640 --> 00:01:30,620
For their part, though, Google blogged about its plans to back Rust in the kernel back

29
00:01:30,620 --> 00:01:32,040
in April, actually.

30
00:01:32,040 --> 00:01:36,560
And so far, that initiative's been led by developer Miguel Oieda.

31
00:01:36,560 --> 00:01:42,520
He's been working on contract with ISRG's Prosimo project for memory safety right now,

32
00:01:42,520 --> 00:01:45,300
and Google has funded that early work.

33
00:01:45,300 --> 00:01:50,520
But now, my group has hired him to work full time on the project.

34
00:01:50,520 --> 00:01:56,280
Yeah, whenever you see a company do this and step up to bring a developer on full time

35
00:01:56,280 --> 00:02:01,140
to develop something for the kernel, you almost know it's like, okay, they've done some behind

36
00:02:01,140 --> 00:02:02,880
the scenes conversations.

37
00:02:02,880 --> 00:02:07,320
They know people are on board, so they're willing to take this step, and it's happening.

38
00:02:07,320 --> 00:02:12,240
Dan Lorenk, a software engineer at Google, who's been helping coordinate this Rust Linux

39
00:02:12,240 --> 00:02:17,400
project, noted, Google has found time after time that large efforts to eliminate entire

40
00:02:17,400 --> 00:02:21,600
classes of security issues are the best investment at scale.

41
00:02:21,600 --> 00:02:27,040
We understand that work in something is widely used and critical as a Linux kernel takes

42
00:02:27,040 --> 00:02:32,180
time, but we're thrilled to be able to help the ISRG support Miguel's work dedicated

43
00:02:32,180 --> 00:02:36,200
to improving the memory safety of the kernel for everyone.

44
00:02:36,200 --> 00:02:41,120
Now of course, this is still very early days for Rust in the kernel, but with the group

45
00:02:41,120 --> 00:02:46,280
behind Let's Encrypt leading the way, and now some of Google's money, it seems like

46
00:02:46,280 --> 00:02:49,800
a Rusty kernel is a sure bet.

47
00:02:49,800 --> 00:02:53,640
Open ZFS's founding developer, Matthew Ahrens, announced one of the most sought after features

48
00:02:53,640 --> 00:02:58,480
in ZFS history, RAID-Z Expansion, at the FreeBSD Developer Summit.

49
00:02:58,480 --> 00:02:59,480
I'm Matt Ahrens.

50
00:02:59,480 --> 00:03:03,240
I'm here to talk to you about ZFS RAID-Z Expansion.

51
00:03:03,240 --> 00:03:07,020
I work for Delphix, and this work is sponsored by the FreeBSD Foundation.

52
00:03:07,020 --> 00:03:12,400
This would allow a ZFS user to expand the size of a single RAID-Z VDEV, adding new fundamental

53
00:03:12,400 --> 00:03:16,480
features to ZFS that it has been missing since Go.

54
00:03:16,480 --> 00:03:22,960
We're big fans of ZFS here at Jupiter Broadcasting, and we recognize and want to convey that ZFS

55
00:03:22,960 --> 00:03:26,040
is beautiful because it's more than just a file system.

56
00:03:26,040 --> 00:03:28,680
It's a storage array and a volume manager.

57
00:03:28,680 --> 00:03:33,960
When you live in the world of ZFS, gone are the days of hardware RAID.

58
00:03:33,960 --> 00:03:37,640
We now manage everything with the Zettabyte file system.

59
00:03:37,640 --> 00:03:41,320
But with all the things that we do love about ZFS, and there's a lot of them, one of the

60
00:03:41,320 --> 00:03:48,320
major and kind of expensive pain points around ZFS has been the lack of support for expanding

61
00:03:48,320 --> 00:03:50,380
storage of an existing setup.

62
00:03:50,380 --> 00:03:55,200
The unofficial answer has always kind of been, well, ZFS tries to protect your data and not

63
00:03:55,200 --> 00:03:56,200
be cheap.

64
00:03:56,200 --> 00:03:58,240
And there is some truth to that.

65
00:03:58,240 --> 00:04:02,320
It was created by Sun Microsystems after all, and they wanted something robust for

66
00:04:02,320 --> 00:04:03,320
the enterprise.

67
00:04:03,320 --> 00:04:06,960
And it has been a challenge for those of us maybe running in simpler setups.

68
00:04:06,960 --> 00:04:11,880
And that fundamental trade-off with ZFS is now changing.

69
00:04:11,880 --> 00:04:17,880
Now open ZFS, or just ZFS as we call it, is complicated.

70
00:04:17,880 --> 00:04:23,280
So if you're new to all this stuff, we'll link you to Jim Salter's excellent ZFS 101

71
00:04:23,280 --> 00:04:27,540
article on Ars Technica, which has a great breakdown of pretty much everything you might

72
00:04:27,540 --> 00:04:29,200
need to know about ZFS.

73
00:04:29,200 --> 00:04:32,040
Including some of the terms we're about to drop down on you.

74
00:04:32,040 --> 00:04:33,400
Exactly.

75
00:04:33,400 --> 00:04:38,280
But let's see if we can give you just what you need for this story today.

76
00:04:38,280 --> 00:04:41,360
You've got to start at the heart of ZFS, the zpool.

77
00:04:41,360 --> 00:04:49,000
A zpool is made up of VDEVs, and it's those VDEVs that contain your real hard drives.

78
00:04:49,000 --> 00:04:55,180
In the standard hardware or software raid world outside of fancy file systems like ZFS,

79
00:04:55,180 --> 00:04:58,040
they don't really share the pool concept.

80
00:04:58,040 --> 00:05:02,840
But they do offer the ability to expand an array in place.

81
00:05:02,840 --> 00:05:07,440
For example, you might add a single disk to a four disk raid six array, thereby turning

82
00:05:07,440 --> 00:05:10,000
it into a five disk raid six array.

83
00:05:10,000 --> 00:05:11,640
That's an operation you're allowed to do.

84
00:05:11,640 --> 00:05:16,400
Now you might not want to because after you make that change, you'd sit around for a while,

85
00:05:16,400 --> 00:05:21,960
wait while your raid array was expanded, all while the performance of that array had tanked.

86
00:05:21,960 --> 00:05:28,200
That performance hit, I suspect, was the reason why the ZFS team just really didn't prioritize

87
00:05:28,200 --> 00:05:30,500
this particular expansion feature.

88
00:05:30,500 --> 00:05:33,840
It is true, ZFS was just developed for large business uses.

89
00:05:33,840 --> 00:05:39,520
And in those scenarios, often reshaping or expanding your array live in production is

90
00:05:39,520 --> 00:05:41,220
just kind of a non-starter.

91
00:05:41,220 --> 00:05:46,640
The performance hit degrades the entire enterprise's use of the file system.

92
00:05:46,640 --> 00:05:51,860
And often, just when you look at payroll costs and the downtime, it's cheaper for the business

93
00:05:51,860 --> 00:05:54,320
just to buy a new set of disks.

94
00:05:54,320 --> 00:05:58,320
But that is certainly not the case for all of us, including your humble podcasters right

95
00:05:58,320 --> 00:06:00,120
here who use ZFS.

96
00:06:00,120 --> 00:06:08,040
And that's what gets us to the new feature today, which is pull request 12,225, which

97
00:06:08,040 --> 00:06:16,560
allows disks to be added one at a time to a RAID-Z VDEV, expanding its capacity incrementally.

98
00:06:16,560 --> 00:06:21,040
And yeah, Chris, as you say, this feature isn't really that useful for folks who, you

99
00:06:21,040 --> 00:06:25,120
know, they have access to big arrays, SAS expanders, the ability to add more disks as

100
00:06:25,120 --> 00:06:26,240
they need to.

101
00:06:26,240 --> 00:06:29,900
But for those of us that are a little cheaper or just didn't really know what our data usage

102
00:06:29,900 --> 00:06:33,920
was when we built our array, this kind of flexibility is great.

103
00:06:33,920 --> 00:06:38,420
It's really nice to see it because it's going to change how we use ZFS.

104
00:06:38,420 --> 00:06:42,820
And I acknowledge and the ZFS developers acknowledge that it's always going to be the more performant

105
00:06:42,820 --> 00:06:46,140
way to add disks and not do an expansion like this.

106
00:06:46,140 --> 00:06:49,800
But small businesses like JB, we're in a position where, you know, if it takes three days to

107
00:06:49,800 --> 00:06:52,480
expand the array, that's not going to be the end of the world.

108
00:06:52,480 --> 00:06:55,860
And of course, a small business might not have cash on hand to be able to buy the number

109
00:06:55,860 --> 00:06:57,320
of disks that you might need.

110
00:06:57,320 --> 00:07:01,480
I mean, before this change, you couldn't just add a disk to a VDEV, right?

111
00:07:01,480 --> 00:07:04,560
You had to add a whole new VDEV to the pool.

112
00:07:04,560 --> 00:07:08,240
And with RAID configurations, that might mean doubling the number of disks that you have.

113
00:07:08,240 --> 00:07:12,660
And I don't know about you, but we don't have space or probably budget for the JB server

114
00:07:12,660 --> 00:07:13,660
right now.

115
00:07:13,660 --> 00:07:16,320
Yeah, especially if the price of these disks don't start coming down.

116
00:07:16,320 --> 00:07:20,040
So the way this works is a bit more clever than, say, trying to do an expansion with

117
00:07:20,040 --> 00:07:21,360
traditional RAID.

118
00:07:21,360 --> 00:07:25,080
That would shuffle things around, and then it would recalculate the parity data, and

119
00:07:25,080 --> 00:07:26,080
that would take forever.

120
00:07:26,080 --> 00:07:31,140
And don't get me wrong, ZFS is still reflowing your data, but ZFS' approach avoids having

121
00:07:31,140 --> 00:07:36,520
to recalculate the parity or adjust the parity to data ratio of the existing data.

122
00:07:36,520 --> 00:07:40,400
It just moves the data around so it's on that new disk.

123
00:07:40,400 --> 00:07:45,880
As a practical example, if you added a fourth disk to a three disk RAID Z1 pool, you'd

124
00:07:45,880 --> 00:07:49,100
start out with two blocks for data and one block for parity.

125
00:07:49,100 --> 00:07:53,980
For data written after the expansion, you'd have three blocks for data and one block for

126
00:07:53,980 --> 00:07:54,980
parity.

127
00:07:54,980 --> 00:08:00,000
The downside is you don't get better efficiency for your old data, but this approach is safer.

128
00:08:00,000 --> 00:08:01,000
It's much safer.

129
00:08:01,000 --> 00:08:05,840
You never lose the guarantees of the ZFS file system, which I think enterprises are all

130
00:08:05,840 --> 00:08:06,840
about.

131
00:08:06,840 --> 00:08:11,720
New data is stored with the more efficient ratio, and of course, you're now able to expand,

132
00:08:11,720 --> 00:08:12,960
which you could never do before.

133
00:08:12,960 --> 00:08:15,080
So overall, that's a pretty huge upside.

134
00:08:15,080 --> 00:08:18,680
Matthew Aaron suggested in his talk about this that you're going to see a conversion

135
00:08:18,680 --> 00:08:23,480
time around like six hours to a terabyte, but we'll wait and see how performance is

136
00:08:23,480 --> 00:08:27,240
impacted and we'll test this feature in-house when it does ship, which we expect will be

137
00:08:27,240 --> 00:08:29,200
sometime in 2022.

138
00:08:29,200 --> 00:08:32,080
If this sounds interesting to you at all, though, Matthew Aaron's did a presentation

139
00:08:32,080 --> 00:08:37,020
on this June 11th during the FreeBSD Developer Summit, and we will link right to his part

140
00:08:37,020 --> 00:08:40,960
in the talk, which includes nice visuals and everything that explains some of this.

141
00:08:40,960 --> 00:08:47,080
Well, speaking of the enterprise world's favorite pieces of software, it's time for a system

142
00:08:47,080 --> 00:08:48,080
D update.

143
00:08:48,080 --> 00:08:53,760
The first release candidate of system D 2.49 is now out for testing.

144
00:08:53,760 --> 00:08:58,520
You know, a new release comes out every four months with the last being system D 2.48 on

145
00:08:58,520 --> 00:08:59,520
March 30th.

146
00:08:59,520 --> 00:09:05,080
Lennart Potterine's post to the new section of the system D GitHub repository lists it's

147
00:09:05,080 --> 00:09:07,020
a ton of new features.

148
00:09:07,020 --> 00:09:12,400
We counted like 76 that they were drawing special attention to, but it's pretty great.

149
00:09:12,400 --> 00:09:19,080
Clearly, system D 2.49 is going to be another big summertime update to our favorite Linux

150
00:09:19,080 --> 00:09:20,720
in its system.

151
00:09:20,720 --> 00:09:25,800
Some of the items that jumped out at us from that list include summer blockbuster items

152
00:09:25,800 --> 00:09:30,720
like system D first boot now supports querying various parameters via the credential subsystem.

153
00:09:30,720 --> 00:09:34,000
Now at first it's like kind of boring sounding, but think about it.

154
00:09:34,000 --> 00:09:38,460
You're deploying systems, images, perhaps preset up in the past.

155
00:09:38,460 --> 00:09:42,760
You maybe had to sneak passwords and security credentials in those images.

156
00:09:42,760 --> 00:09:47,480
This will allow you to initialize important system parameters on that first boot on previously

157
00:09:47,480 --> 00:09:52,120
unprovisioned images, which means less passwords baked into these configurations.

158
00:09:52,120 --> 00:09:53,120
That's a good thing.

159
00:09:53,120 --> 00:09:54,780
I also like information.

160
00:09:54,780 --> 00:09:57,200
That's why I love the Etsy OS release file.

161
00:09:57,200 --> 00:10:00,560
And one of the things they're doing is extending some of the metadata things you can pop in

162
00:10:00,560 --> 00:10:05,180
there, like among other things, your image version, your image ID, and just another one

163
00:10:05,180 --> 00:10:09,000
of those really handy features for people who are deploying multiple images of Linux

164
00:10:09,000 --> 00:10:10,000
at scale.

165
00:10:10,000 --> 00:10:11,760
Sure sounds handy to me.

166
00:10:11,760 --> 00:10:14,500
You're SSHed into a server troubleshooting a fire.

167
00:10:14,500 --> 00:10:18,240
You want to know what image version and ID this is so you can go back to say GitLab and

168
00:10:18,240 --> 00:10:20,440
figure out what went wrong.

169
00:10:20,440 --> 00:10:24,480
Now of course, I wouldn't be super excited about this release if there wasn't a little

170
00:10:24,480 --> 00:10:26,600
eBPF in here.

171
00:10:26,600 --> 00:10:27,600
There is.

172
00:10:27,600 --> 00:10:28,600
BPF program.

173
00:10:28,600 --> 00:10:32,400
It's a new setting that's been added to service files.

174
00:10:32,400 --> 00:10:35,720
Once you provide a path to a loaded eBPF program.

175
00:10:35,720 --> 00:10:40,840
So you still have to manage loading these things yourself outside of system D. But once

176
00:10:40,840 --> 00:10:44,900
you've done that, this will make it really easy to hook them up into basically any old

177
00:10:44,900 --> 00:10:45,900
system D service.

178
00:10:45,900 --> 00:10:49,480
I hadn't thought about this feature, but it seems so clearly needed if you are dabbling

179
00:10:49,480 --> 00:10:50,480
in eBPF land.

180
00:10:50,480 --> 00:10:52,520
Well, here's another one you'll like.

181
00:10:52,520 --> 00:10:57,720
A new Udev hardware database has been added for Firewire.

182
00:10:57,720 --> 00:11:01,320
Finally, Wes, Firewire.

183
00:11:01,320 --> 00:11:03,400
When I looked into this, we're like, why now?

184
00:11:03,400 --> 00:11:04,560
Why now, Firewire?

185
00:11:04,560 --> 00:11:09,720
And it seems mostly it originated from someone who's trying to get support for audio devices.

186
00:11:09,720 --> 00:11:14,060
Yeah, this is stuff that's already supported by the kernel, but might need a few Udev tweaks

187
00:11:14,060 --> 00:11:16,480
to really operate optimally.

188
00:11:16,480 --> 00:11:22,440
When you go through these notes, some of these jump out as basic building blocks for an operating

189
00:11:22,440 --> 00:11:23,440
system.

190
00:11:23,440 --> 00:11:25,120
And you kind of go like, how did we do this before?

191
00:11:25,120 --> 00:11:27,700
Some of the some of the things that it's solving, yeah, we had an answer.

192
00:11:27,700 --> 00:11:32,840
But some of it we never had solved before in Linux and something that's that's really

193
00:11:32,840 --> 00:11:37,600
often missing from the system D discussion in our community, but is made painfully obvious

194
00:11:37,600 --> 00:11:39,200
in their release notes.

195
00:11:39,200 --> 00:11:42,740
System D is solving problems for enterprise Linux.

196
00:11:42,740 --> 00:11:45,440
There are goodies we get on the desktop to be sure.

197
00:11:45,440 --> 00:11:48,840
But whenever you hear that old system D debate fire up in our community again, try to keep

198
00:11:48,840 --> 00:11:50,800
that in perspective.

199
00:11:50,800 --> 00:11:56,640
Most of what system D is doing is solving problems in Linux at a large scale, like thousands

200
00:11:56,640 --> 00:11:58,240
of servers.

201
00:11:58,240 --> 00:12:02,920
Keeping our focus on the enterprise for one more story.

202
00:12:02,920 --> 00:12:10,400
Cloud Linux, now best known for its CentOS clone, Alma Linux, is releasing Uchecker,

203
00:12:10,400 --> 00:12:13,920
its Linux server security scanner.

204
00:12:13,920 --> 00:12:19,600
This newly open sourced program, part of the company's Tuxcare Security Services, scans

205
00:12:19,600 --> 00:12:25,280
Linux servers from out of date libraries, both on disk and in memory.

206
00:12:25,280 --> 00:12:30,360
But Linux claims that unlike other similar tools, Uchecker finds false negatives by reporting

207
00:12:30,360 --> 00:12:35,120
on vulnerable libraries running in memory that might be missed by other scanners.

208
00:12:35,120 --> 00:12:39,200
This story is important not just because it sounds like kind of a handy tool in their

209
00:12:39,200 --> 00:12:40,260
wheelhouse.

210
00:12:40,260 --> 00:12:46,320
But I think it sets a context, it gives us a great example of how some of the different

211
00:12:46,320 --> 00:12:52,480
CentOS clones are gonna stand out, right, cloud Linux is leveraging their already advanced

212
00:12:52,480 --> 00:12:56,000
position in the market, where they're already building these tools, and now they can pick

213
00:12:56,000 --> 00:12:59,240
and choose what they're gonna open source and make available now.

214
00:12:59,240 --> 00:13:05,040
And they can kind of create a very tempting suite of services that you can wrap around

215
00:13:05,040 --> 00:13:06,400
Alma Linux.

216
00:13:06,400 --> 00:13:11,760
Uchecker itself is an abbreviation for User Space Checker, and it works with most modern

217
00:13:11,760 --> 00:13:16,960
Linux distributions, not just the RHEL family and its license under GPL version two.

218
00:13:16,960 --> 00:13:22,020
What you could expect is a detailed actionable report on applications that are using vulnerable

219
00:13:22,020 --> 00:13:23,020
libraries.

220
00:13:23,020 --> 00:13:26,920
The program will also present you with the relevant process ID and the process name.

221
00:13:26,920 --> 00:13:32,680
As we touched on earlier, Uchecker is really part of a larger suite of live patching tooling

222
00:13:32,680 --> 00:13:34,160
over at kernelcare.com.

223
00:13:34,160 --> 00:13:39,160
How do you actually take advantage of those process IDs and names?

224
00:13:39,160 --> 00:13:43,500
Well, to update, there's the traditional way, of course, just head to your local package

225
00:13:43,500 --> 00:13:48,160
manager, run an app to get upgrade and restart the server.

226
00:13:48,160 --> 00:13:52,880
Now of course, if this is a production box, maybe that's making you a little uncomfortable.

227
00:13:52,880 --> 00:13:58,160
You could, of course, go by hand and try to restart all the processes which are affected.

228
00:13:58,160 --> 00:14:03,400
That's also error prone though, so there might be, at least to Cloud Linux's mind, a better

229
00:14:03,400 --> 00:14:04,480
way.

230
00:14:04,480 --> 00:14:09,660
You can use Tuck's care library care service for live patching and apply security patches

231
00:14:09,660 --> 00:14:14,800
to open SSL, GLib C, and the kernel without having to reboot.

232
00:14:14,800 --> 00:14:17,500
People love the live patching stuff.

233
00:14:17,500 --> 00:14:24,160
And so this whole Tuck's care suite of services, it's an umbrella security support offering.

234
00:14:24,160 --> 00:14:25,660
It's a lot of things.

235
00:14:25,660 --> 00:14:29,520
There's some support stuff in here that's just like test standard technical support

236
00:14:29,520 --> 00:14:31,920
and this live patching, it's a whole suite.

237
00:14:31,920 --> 00:14:37,600
And their whole idea here is, know us for our Alma Linux and our Cloud Linux offering,

238
00:14:37,600 --> 00:14:41,320
and once you like us for that, you can add this to the mix.

239
00:14:41,320 --> 00:14:44,200
Practically speaking here, you can really use it on just about anything, so you grab

240
00:14:44,200 --> 00:14:47,480
their Python script and run it on your box to see if it's compatible.

241
00:14:47,480 --> 00:14:50,120
They'll just do a little check to let you know if you can use this U-checker and then

242
00:14:50,120 --> 00:14:51,480
analyze your machine.

243
00:14:51,480 --> 00:14:56,580
Ironically though, their documentation suggests that you pipe curl into pseudo, a suggestion

244
00:14:56,580 --> 00:15:00,280
that will make a lot of security minded folks a little uncomfortable.

245
00:15:00,280 --> 00:15:06,720
But then again, I'm sure you'd check that Python script before you ran it anyways, right?

246
00:15:06,720 --> 00:15:11,640
Now we should note that this isn't the only Linux program that enables you to live patch.

247
00:15:11,640 --> 00:15:17,520
There's Oracle's ksplice, Red Hat and CentOS's kpatch, Canonical's livepatch, and of course,

248
00:15:17,520 --> 00:15:19,380
SUSE's kgraft.

249
00:15:19,380 --> 00:15:24,400
All of those however, well, they only work on whichever distro is making it, right?

250
00:15:24,400 --> 00:15:28,040
I mean, Canonical's not making a patching service for Red Hat.

251
00:15:28,040 --> 00:15:33,880
Cloud Linux's programs however, support CentOS, Red Hat, Oracle, Debian, Ubuntu, and a few

252
00:15:33,880 --> 00:15:34,880
others.

253
00:15:34,880 --> 00:15:37,200
That's kind of impressive.

254
00:15:37,200 --> 00:15:41,880
Beyond the technical merits, it's just interesting to watch Cloud Linux's strategy coming a

255
00:15:41,880 --> 00:15:44,520
little more into focus.

256
00:15:44,520 --> 00:15:55,120
It kind of seems like the CentOS changes happened at just the right time for some of their plans.

257
00:15:55,120 --> 00:15:56,540
Linode.com slash LAN.

258
00:15:56,540 --> 00:16:00,640
Go there to get $100 in 60 day credit on your new Linode account.

259
00:16:00,640 --> 00:16:02,960
And of course, you support the show.

260
00:16:02,960 --> 00:16:04,520
Linode is our cloud provider.

261
00:16:04,520 --> 00:16:12,320
They are the largest independent cloud computing provider, and this month they turned 18, 18

262
00:16:12,320 --> 00:16:13,320
years old.

263
00:16:13,320 --> 00:16:14,480
Congratulations to Linode.

264
00:16:14,480 --> 00:16:20,480
Much has changed in the industry in 18 years, but Linode has focused on making the absolute

265
00:16:20,480 --> 00:16:22,840
best cloud computing experience.

266
00:16:22,840 --> 00:16:26,160
This year alone, they've released custom images to general availability, making it easier

267
00:16:26,160 --> 00:16:30,760
for customers to create, store, and deploy one image across multiple machines.

268
00:16:30,760 --> 00:16:35,720
They added two free security solutions, including the Cloud Firewall and Private VLANs, and

269
00:16:35,720 --> 00:16:40,320
for developers, they've extended the tools to support Kubernetes, Terraform, and Ansible

270
00:16:40,320 --> 00:16:46,200
modules, all while having one of the cleanest and easiest to use UIs in the business.

271
00:16:46,200 --> 00:16:51,140
Linode lets you turn any idea into something you can actually bring to life on the web.

272
00:16:51,140 --> 00:16:55,640
And if you ever get in any trouble, well, they have the best support team.

273
00:16:55,640 --> 00:17:01,840
Their support team won five Stevie Awards, including the coveted People's Choice Award.

274
00:17:01,840 --> 00:17:03,560
There's nobody that doesn't like Linode.

275
00:17:03,560 --> 00:17:07,080
They have hundreds of guides and tutorials to help you get started as well, then once

276
00:17:07,080 --> 00:17:11,280
you're up and running, you can take advantage of those advanced features like S3-compatible

277
00:17:11,280 --> 00:17:15,720
object storage and their super fast SSDs.

278
00:17:15,720 --> 00:17:20,320
Linode was recently reviewed by Cloud Spectator as having the fastest CPUs in the industry.

279
00:17:20,320 --> 00:17:25,600
I mean, they compared all of the major cloud providers, and Linode beat them all.

280
00:17:25,600 --> 00:17:29,600
Their one-click Minecraft server lets you specify features like NPCs, game mode, and

281
00:17:29,600 --> 00:17:33,760
critical game specifications with a simple one-click deployment.

282
00:17:33,760 --> 00:17:38,680
So go to linode.com slash LAN and get that $100 60-day credit on your new account, and

283
00:17:38,680 --> 00:17:39,680
you support the show.

284
00:17:39,680 --> 00:17:41,520
It's a great way to learn, too.

285
00:17:41,520 --> 00:17:45,320
If you want to try something, you could do a nice side-by-side comparison, kick it off

286
00:17:45,320 --> 00:17:52,760
on Linode, and pick the winner, linode.com slash LAN.

287
00:17:52,760 --> 00:17:55,200
Linux dot ting dot com.

288
00:17:55,200 --> 00:17:57,280
Are you sick of overpaying for self-service?

289
00:17:57,280 --> 00:17:58,280
Because you should be.

290
00:17:58,280 --> 00:18:03,240
The duopoly out there has wrecked the market, so Ting's here to bring us all a breath of

291
00:18:03,240 --> 00:18:04,240
fresh air.

292
00:18:04,240 --> 00:18:08,900
In fact, for a limited time, you can sign up for Ting's unlimited plan.

293
00:18:08,900 --> 00:18:12,320
Just pay $25 a month for the first three months.

294
00:18:12,320 --> 00:18:16,520
That's $20 off the standard unlimited plan, and it's quite the offer.

295
00:18:16,520 --> 00:18:18,280
Of course, there's a plan for everybody.

296
00:18:18,280 --> 00:18:23,480
Ting's set 12 plan gives you 12 gigs of data with unlimited talk and text for just $35

297
00:18:23,480 --> 00:18:24,480
a month.

298
00:18:24,480 --> 00:18:28,560
No, I know a good family plan is hard to find, and Ting's got you covered there.

299
00:18:28,560 --> 00:18:33,100
If you use 2 gigs, or if you use 20 gigs, there's a perfect Ting plan for you, and every

300
00:18:33,100 --> 00:18:39,080
plan gets access to Ting's award-winning customer service with nationwide LTE and 5G coverage,

301
00:18:39,080 --> 00:18:43,660
plus the freedom of no contracts ever.

302
00:18:43,660 --> 00:18:44,660
That's awesome.

303
00:18:44,660 --> 00:18:47,880
And there's three great networks to choose from, so it's simple to switch to Ting.

304
00:18:47,880 --> 00:18:50,520
Pretty much any phone will work with Ting.

305
00:18:50,520 --> 00:18:53,040
You just start by going to linux.ting.com.

306
00:18:53,040 --> 00:18:57,480
You get $25 off, and you can check your current phone, see if it's compatible, create an account,

307
00:18:57,480 --> 00:19:00,980
pick the plan that's right for you, and then Ting will send you a SIM card that you pop

308
00:19:00,980 --> 00:19:03,320
in your phone, and you get activated in minutes.

309
00:19:03,320 --> 00:19:06,040
Their dashboard makes it simple, makes it straightforward.

310
00:19:06,040 --> 00:19:07,240
It sets the bar.

311
00:19:07,240 --> 00:19:12,320
And cutting your phone bill in half has never been easier with Ting's brand new plans.

312
00:19:12,320 --> 00:19:15,440
Go check out the new Shiny and save $25.

313
00:19:15,440 --> 00:19:17,280
It's the next generation of Ting Mobile.

314
00:19:17,280 --> 00:19:19,440
It's here, and it's awesome.

315
00:19:19,440 --> 00:19:25,200
Linux.ting.com Following up on a story we covered a couple

316
00:19:25,200 --> 00:19:31,960
months ago, it seems Steam on Chrome OS is getting rather close.

317
00:19:31,960 --> 00:19:38,320
According to Linux Steam watch site BoilingSteam.com, there are now QA testers being hired to work

318
00:19:38,320 --> 00:19:45,380
on the, quote, Chrome OS Steam Launch Team to triage games, find defects, and test the

319
00:19:45,380 --> 00:19:49,080
performance of games under specific configurations.

320
00:19:49,080 --> 00:19:51,800
Sure sounds like a tough job of playing video games to me.

321
00:19:51,800 --> 00:19:54,080
Yeah, I'd love to land that job, Wes.

322
00:19:54,080 --> 00:19:58,600
That's probably as close to any kind of confirmation we're going to get from Google or from Valve

323
00:19:58,600 --> 00:19:59,820
on this story.

324
00:19:59,820 --> 00:20:04,040
This seems like one of those kind of stories that you'd want to kind of sit and keep low

325
00:20:04,040 --> 00:20:07,320
until you're ready for the hardware-software combo announcement.

326
00:20:07,320 --> 00:20:09,360
Make some sort of big splash.

327
00:20:09,360 --> 00:20:13,320
Also Wes, I think it's kind of notable here that Google and Valve didn't focus on like

328
00:20:13,320 --> 00:20:17,960
a Steam Link style solution where you would just stream using the existing Steam streaming

329
00:20:17,960 --> 00:20:19,140
solutions.

330
00:20:19,140 --> 00:20:21,400
It seems like that's a big thing for Google too.

331
00:20:21,400 --> 00:20:26,800
But instead they went for fully native games, which does add more credence to those rumors

332
00:20:26,800 --> 00:20:31,920
that we're going to be seeing more powerful Chromebooks with faster processors, faster

333
00:20:31,920 --> 00:20:35,160
disks and faster GPUs in the works.

334
00:20:35,160 --> 00:20:37,080
I think I'm confused.

335
00:20:37,080 --> 00:20:40,160
Just what about a Chromebook isn't a regular computer at this point?

336
00:20:40,160 --> 00:20:44,080
I guess the GPU parts, they're going to make them even better.

337
00:20:44,080 --> 00:20:48,160
Wouldn't it be something if Google came along and introduced a couple of Chromebooks, one

338
00:20:48,160 --> 00:20:53,000
that's on the x86 line of things and one that's on the ARM line, like maybe this new Onyx

339
00:20:53,000 --> 00:20:56,720
processor that Samsung's working on that's supposed to be a screamer, and they come out

340
00:20:56,720 --> 00:21:01,360
with these Chromebooks that are running Linux under the hood and maybe offering a decent

341
00:21:01,360 --> 00:21:04,640
competitive solution to Apple's M1.

342
00:21:04,640 --> 00:21:07,840
In the case of these machines, they could say, hey, we can even play Steam games.

343
00:21:07,840 --> 00:21:12,520
It does seem like to compete you need deep pockets and some hardware expertise.

344
00:21:12,520 --> 00:21:14,840
So yeah, maybe that would work out.

345
00:21:14,840 --> 00:21:19,600
It does make me feel a little bit uncomfortable with all of the advantages Chrome OS is having

346
00:21:19,600 --> 00:21:24,320
compared to, say, our tried and true trusty Linux desktops.

347
00:21:24,320 --> 00:21:29,120
But if you do frame it in terms of the M1 or the Windows platform, I mean, Chrome OS

348
00:21:29,120 --> 00:21:33,120
is Linux, and it's only kind of gotten more Linux-y, right?

349
00:21:33,120 --> 00:21:38,140
Between Android apps and actual Linux apps, maybe this is OK.

350
00:21:38,140 --> 00:21:41,320
One platform that can run Linux applications, it can run those Android apps, like you said,

351
00:21:41,320 --> 00:21:46,600
it runs that Chrome browser, and now it can run these Steam games as well as it now has

352
00:21:46,600 --> 00:21:47,600
access to local storage.

353
00:21:47,600 --> 00:21:53,640
I mean, it really is becoming like a full-fledged desktop, and it kind of makes me worry a little

354
00:21:53,640 --> 00:21:59,520
bit that Chrome OS is just going to become the undisputed Linux desktop of the future.

355
00:21:59,520 --> 00:22:03,600
When you look at it, you've got all of these vendors behind it.

356
00:22:03,600 --> 00:22:07,040
Each one of my kids was provided a Chromebook from their school.

357
00:22:07,040 --> 00:22:08,940
You've got Google behind it.

358
00:22:08,940 --> 00:22:12,520
You've got, now, Valve working towards making a more viable desktop platform.

359
00:22:12,520 --> 00:22:16,560
And how many times have we heard gaming is a big key to being successful on the desktop?

360
00:22:16,560 --> 00:22:19,960
Yeah, up to this point, I think the Chromebook was sort of a secondary device, right?

361
00:22:19,960 --> 00:22:22,920
For education, part of the day, the thing you have on the couch while you're watching

362
00:22:22,920 --> 00:22:23,920
TV.

363
00:22:23,920 --> 00:22:27,040
And part of that is because there are limitations about what you can do with it, but as you

364
00:22:27,040 --> 00:22:31,400
keep knocking those down, well, if you already have a Chromebook, why do you need anything

365
00:22:31,400 --> 00:22:32,400
else?

366
00:22:32,400 --> 00:22:35,480
Yeah, you can just keep notching up the hardware capabilities, keep notching up the software

367
00:22:35,480 --> 00:22:36,800
capabilities.

368
00:22:36,800 --> 00:22:39,880
All this stuff with Steam on Chrome OS, I mean, it may not actually happen, remember.

369
00:22:39,880 --> 00:22:42,920
I mean, it's really only official until it's been announced.

370
00:22:42,920 --> 00:22:45,960
Until then, we're just going to keep an eye on it.

371
00:22:45,960 --> 00:22:50,080
Well, speaking of software for the people, the world's best command line text editor

372
00:22:50,080 --> 00:22:52,560
got even better this week, somehow.

373
00:22:52,560 --> 00:22:57,680
Oh yes, the small warrior-like editor for the terminal, heroically, already supports

374
00:22:57,680 --> 00:23:02,280
syntax highlights, spell checking, and paying respect to its elders.

375
00:23:02,280 --> 00:23:05,840
But now, the bar has risen yet again.

376
00:23:05,840 --> 00:23:13,480
Hero 5.8 was released this week, and now sports, setting the color of the mini bar, yes, really,

377
00:23:13,480 --> 00:23:19,680
and can't top this one, the color name for gray can now be used instead of the name light

378
00:23:19,680 --> 00:23:20,680
black.

379
00:23:20,680 --> 00:23:26,540
5.8, you're a beast, and it may just be the very best text editor in the whole wide world.

380
00:23:26,540 --> 00:23:29,680
And I'll leave it up as an exercise to the audience to figure out if I'm trolling them

381
00:23:29,680 --> 00:23:32,880
or not, but you can go to linuxactionnews.com slash subscribe.

382
00:23:32,880 --> 00:23:33,880
That I do know.

383
00:23:33,880 --> 00:23:36,740
That's where you can get all the new episodes every single week.

384
00:23:36,740 --> 00:23:41,040
And linuxactionnews.com slash contact for ways to get in touch.

385
00:23:41,040 --> 00:23:44,520
And if you're looking for your next thing to listen to, go to selfhosted.show slash

386
00:23:44,520 --> 00:23:50,560
47, where I have gone over and finally found, I think, my ultimate team viewer replacement.

387
00:23:50,560 --> 00:23:54,880
It's open source, and yeah, it runs on Linux, selfhosted.show slash 47.

388
00:23:54,880 --> 00:24:00,800
We'll be back next Monday with our weekly take on the latest Linux and open source news.

389
00:24:00,800 --> 00:24:04,240
Thanks for joining us, and we will see you next week.


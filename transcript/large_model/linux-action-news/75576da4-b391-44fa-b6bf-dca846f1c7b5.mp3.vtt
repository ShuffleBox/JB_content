WEBVTT

00:00.000 --> 00:08.620
Hello, and welcome to Linux Action News, episode 202, recorded on August 15, 2021.

00:08.620 --> 00:09.620
I'm Chris.

00:09.620 --> 00:10.620
And I'm Wes.

00:10.620 --> 00:11.620
Hello, Wes.

00:11.620 --> 00:17.620
Live from a very flat and very warm golf course in Nebraska, let's do the news.

00:17.620 --> 00:25.740
After two years, one month, and nine days of development, Debian 11 is here with support

00:25.740 --> 00:30.640
for the next five years and a total of nine architectures.

00:30.640 --> 00:35.400
Debian can now be installed in 76 languages, with most of them available in both the text

00:35.400 --> 00:38.520
based and graphical user interfaces.

00:38.520 --> 00:42.540
And of course, a new release of Debian is notable because of the distribution's wider

00:42.540 --> 00:47.500
impact on the Linux community and all of the projects that are downstream of it.

00:47.500 --> 00:51.820
And we all kind of know that when a package ships in Debian, you know it has been tried,

00:51.820 --> 00:58.540
it has been tested, and this release contains over 11,294 new packages.

00:58.540 --> 01:05.560
It also has official exFAT support, and finally, persistent journal functionality.

01:05.560 --> 01:10.480
And along with all of that, it ships Linux 5.10, the LTS kernel, and Debian 11 Bullseye

01:10.480 --> 01:17.980
comes ready to install some kind of not so fresh desktops, I have to be honest.

01:17.980 --> 01:25.280
It has GNOME 3.38, it has Plasma 5.20, Mate 124, and XFCE 4.16.

01:25.280 --> 01:31.480
And with GNOME 41 on the horizon, that makes 3.38 look a little old.

01:31.480 --> 01:34.640
But for those of you out there looking for something that's going to be supported for

01:34.640 --> 01:40.200
a while and ships with that older paradigm, perhaps this is a great solution for you.

01:40.200 --> 01:45.360
Something that's a little more fresh is that the live image now includes the calamaris

01:45.360 --> 01:49.460
independent installer as well as the standard Debian one.

01:49.460 --> 01:54.960
But going in the opposite direction, Bullseye will soon be available on physical media.

01:54.960 --> 02:01.080
Yeah, that's right, DVDs, CD-ROMs, and even Blu-rays if you want.

02:01.080 --> 02:07.420
And of course, work has already started on the next release, Debian 12 Bookworm, which

02:07.420 --> 02:10.880
should arrive sometime in 2023.

02:10.880 --> 02:15.900
Well another item that we'll be anticipating over the next few years is an increased investment

02:15.900 --> 02:17.840
in eBPF.

02:17.840 --> 02:22.120
That's the in-kernel virtual machine, and it has been solving more and more problems

02:22.120 --> 02:25.000
and that has not gone unnoticed.

02:25.000 --> 02:29.680
The Linux Foundation along with Microsoft and other partners are now forming, you guessed

02:29.680 --> 02:32.960
it, the eBPF Foundation.

02:32.960 --> 02:36.200
Another foundation, who would have thought?

02:36.200 --> 02:41.660
Debian members this time around include Facebook, Google, ISOvalent, yes Microsoft, and of course

02:41.660 --> 02:42.660
Netflix.

02:42.660 --> 02:48.680
They're all using eBPF for something, and in some cases, many somethings.

02:48.680 --> 02:55.280
Facebook is using eBPF as the primary software-defined load balancer in its data centers, and Google

02:55.280 --> 03:02.200
is using Cilium to bring eBPF-based networking and security to its managed Kubernetes offerings.

03:02.200 --> 03:07.080
And speaking of those cats over at Facebook, Alexei Starovoitov, the co-creator and maintainer

03:07.080 --> 03:13.520
of eBPF and a kernel developer at Facebook, was quoted as saying this in the announcement,

03:13.520 --> 03:19.040
eBPF is a revolutionary technology that allows us to modify the operating system behavior

03:19.040 --> 03:24.700
in real time without risky or expensive kernel code changes.

03:24.700 --> 03:29.800
It has a remarkable impact on our ability to iterate quickly on everything from networking

03:29.800 --> 03:34.960
to security and containerization, where once you might have had to compile a custom driver

03:34.960 --> 03:40.040
or even build your own kernel, now you can just do it at runtime with eBPF.

03:40.040 --> 03:45.200
And while originally all this only worked in the Linux kernel, Microsoft has been bringing

03:45.200 --> 03:51.840
eBPF to Windows, and eBPF continues to be adapted for a wide array of other environments

03:51.840 --> 03:52.840
too.

03:52.840 --> 03:57.400
According to the Linux Foundation's press release, the eBPF Foundation will expand the

03:57.400 --> 04:02.220
significant level of contributions already being made to extend the powerful capabilities

04:02.220 --> 04:07.360
of eBPF and help it grow beyond Linux.

04:07.360 --> 04:10.680
Grow beyond Linux.

04:10.680 --> 04:13.240
That's a weird sentence coming from the Linux Foundation.

04:13.240 --> 04:15.040
I wonder if that was their intention.

04:15.040 --> 04:20.720
It almost reads like the Linux Foundation is being used to funnel free software innovations

04:20.720 --> 04:23.640
into the pockets of their corporate donors.

04:23.640 --> 04:27.840
And maybe this is one of those moments that shows us what the real incentive is for rich

04:27.840 --> 04:32.280
companies like Microsoft to kick money to the Linux Foundation every year.

04:32.280 --> 04:36.200
They get some fantastic code that makes their commercial products even better, and they

04:36.200 --> 04:39.220
get labeled as a friend of Linux while doing it.

04:39.220 --> 04:44.160
For better or worse, you know, these foundations are really a way for them to contribute, yes,

04:44.160 --> 04:47.640
but also influence these projects and the code bases.

04:47.640 --> 04:53.040
I think we just have to hope and kind of bet that at the end of the day, their agenda also

04:53.040 --> 04:54.440
benefits the wider community.

04:54.440 --> 05:00.280
I mean, either way, it does seem like more resources are going to go towards eBPF.

05:00.280 --> 05:04.600
And there is an eBPF summit coming up this next Wednesday and Thursday.

05:04.600 --> 05:09.640
It's a virtual event targeted at DevOps, SecOps, platform architects and developers.

05:09.640 --> 05:13.880
And a friend of the show, Brandon Gregg, will be there and plenty of other eBPF wizards.

05:13.880 --> 05:17.640
And the talks are guaranteed to be absolutely fascinating.

05:17.640 --> 05:20.440
eBPF talks always are.

05:20.440 --> 05:27.080
And speaking of fantastic Linux kernel technologies, going on for more than one year now is the

05:27.080 --> 05:33.480
effort to bring KVM virtualization to the RISC-V architecture, something that's critical

05:33.480 --> 05:36.640
there's ever going to be future enterprise adoption.

05:36.640 --> 05:42.120
The patch set is up to its 19th revision already, but it's not clear if it's actually ready

05:42.120 --> 05:43.120
for mainline.

05:43.120 --> 05:47.200
If I asked you to guess who was sponsoring this work to port KVM to RISC-V, would you

05:47.200 --> 05:52.560
guess Western Digital because that's who is leading this effort and really for a while

05:52.560 --> 05:53.560
now.

05:53.560 --> 05:57.720
And it makes sense when you realize that there's RISC-V chips even in their hard drives.

05:57.720 --> 06:00.280
So they've really got an invested interest here.

06:00.280 --> 06:04.380
However, to put things in perspective, there's still some major technical hurdles that have

06:04.380 --> 06:05.380
to be tackled.

06:05.380 --> 06:08.120
So we're really going to have to wait some time before we see this.

06:08.120 --> 06:11.480
I mean, it is a new architecture after all.

06:11.480 --> 06:17.160
In the meantime, though, Western Digital has also been working on porting KVM tool to RISC-V.

06:17.160 --> 06:22.800
And really, this is just for demonstrating the sort of initial working version, but it's

06:22.800 --> 06:27.280
also there as an early testing ground for developers who might want to try it.

06:27.280 --> 06:31.120
Listeners of this show know another area of kernel development that we have been keeping

06:31.120 --> 06:37.040
an eye on is support for Apple's M1 system on a chip and its future iterations.

06:37.040 --> 06:41.640
The ASHI Linux team has been leading that charge and their most recent progress report

06:41.640 --> 06:44.600
has some significant milestones they seem to have reached.

06:44.600 --> 06:48.960
And Hector Martin, the founder of the project, has also been live streaming his adventures

06:48.960 --> 06:54.720
in real time porting to the M1, recently recapping a lot of information.

06:54.720 --> 06:58.000
Welcome to the hypervisor recap stream.

06:58.000 --> 07:06.400
And so in this stream, I'll be going over what I did over the past 13 streams, which

07:06.400 --> 07:08.240
were basically me writing a hypervisor.

07:08.240 --> 07:15.120
So I'm going to explain why I did that and how it all works.

07:15.120 --> 07:22.280
They're building a hypervisor, mostly in Python, with some C, of course, in order to snoop

07:22.280 --> 07:27.280
on macOS and learn how it interacts with the hardware.

07:27.280 --> 07:32.080
Like Alyssa and some of the other Mesa folks have been working on the user space side.

07:32.080 --> 07:39.000
So they've been working on figuring out the shaders, how the draw commands work, how to

07:39.000 --> 07:41.680
make the GPU do different things.

07:41.680 --> 07:42.880
But all of that is in user space.

07:42.880 --> 07:50.480
So in macOS, they're looking at how the libraries, the metal libraries in macOS work, how they

07:50.480 --> 07:51.480
talk to the hardware.

07:51.480 --> 07:54.280
But then there's the kernel side that has to take those commands from the user space

07:54.280 --> 07:58.720
and actually send them to the hardware and also initialize the GPU and deal with virtual

07:58.720 --> 08:02.140
memory and context switching and all that.

08:02.140 --> 08:04.000
And so that's what the hypervisor is for.

08:04.000 --> 08:08.600
So now that we have this, the next step is going to be starting to write those MIO tracers

08:08.600 --> 08:10.860
that are specific to the GPU things.

08:10.860 --> 08:14.160
Think of the amount of work they're doing here before they even really get started.

08:14.160 --> 08:18.440
They're building a hypervisor for the M1 platform.

08:18.440 --> 08:23.120
That's like the pre-work before they can even get to their work and figure out how to write

08:23.120 --> 08:27.720
these drivers for the Apple hardware without looking at the Mac driver code.

08:27.720 --> 08:31.300
And that can be tricky because you could see how looking at the code could give you some

08:31.300 --> 08:33.060
good insights.

08:33.060 --> 08:36.320
But Hector Martin points out that's not always the best route to go.

08:36.320 --> 08:40.220
So they have built this hypervisor layer that sits between macOS and the hardware.

08:40.220 --> 08:43.600
So they are in fact not attempting to run Linux in the hypervisor.

08:43.600 --> 08:45.280
No, no, no, no.

08:45.280 --> 08:48.080
They are running macOS in the hypervisor.

08:48.080 --> 08:51.080
So that way they can sit between and see how it behaves.

08:51.080 --> 08:53.240
Basically what we can do is one of two things.

08:53.240 --> 09:00.680
We can either reverse engineer the software that Apple wrote, which would be like decompiler

09:00.680 --> 09:07.560
and disassembling the macOS source code, sorry, the macOS drivers.

09:07.560 --> 09:09.200
Some of it is open source, but very little.

09:09.200 --> 09:11.080
Most of the drivers are closed source.

09:11.080 --> 09:13.220
Only the core kernel is open source.

09:13.220 --> 09:16.580
So that doesn't help us with all the interesting hardware.

09:16.580 --> 09:21.420
So we'd have to decompile or disassemble the actual drivers, but that runs into legal issues.

09:21.420 --> 09:27.520
And honestly, it's not a lot of fun because usually the information that you need to figure

09:27.520 --> 09:33.420
out how hardware works is a small part of what the driver is doing.

09:33.420 --> 09:34.520
There's going to be a lot of code.

09:34.520 --> 09:35.940
There's going to be a lot of complexity.

09:35.940 --> 09:40.540
There's going to be a lot of stuff that doesn't really get to the point basically.

09:40.540 --> 09:45.220
It doesn't, you know, you have to read through pages and pages of code to understand how

09:45.220 --> 09:47.020
it's doing one little thing.

09:47.020 --> 09:53.200
Hypervisor still has an unofficial goal of getting the GPU going by the end of the year.

09:53.200 --> 09:57.560
The user space side of the video driver is already passing 90% of the tests.

09:57.560 --> 10:01.880
So right now it's really just the kernel side that's missing.

10:01.880 --> 10:06.440
But with this new hypervisor and those neat snooping capabilities, the team feels that

10:06.440 --> 10:10.100
that goal isn't actually as far off as it might seem.

10:10.100 --> 10:13.860
One of the interesting things about the M1 platform so far, and you just learn so much

10:13.860 --> 10:18.700
by reading what the Ashi Linux team is writing or watching Hector's streams, it's remarkable

10:18.700 --> 10:20.660
and it's so much detail.

10:20.660 --> 10:25.240
And what they have discovered is Apple has put a lot of the functionality that would

10:25.240 --> 10:29.540
typically be in software in the operating system via a driver, and they've baked it

10:29.540 --> 10:34.900
into the firmware, essentially making it simpler to run alternative operating systems on the

10:34.900 --> 10:40.380
M1 hardware because the driver software has to do a lot less.

10:40.380 --> 10:44.620
It also means, though, they have to be very careful about how they manage firmware on

10:44.620 --> 10:49.100
the M1 platform because Apple has the luxury of just blasting out the latest firmware and

10:49.100 --> 10:50.940
requiring that macOS use that.

10:50.940 --> 10:55.340
But in Linux land, we like to separate out kernel and firmware so you can go ahead and

10:55.340 --> 10:59.260
upgrade your kernel without having to also upgrade your firmware at the same time.

10:59.260 --> 11:01.020
It's a totally different way of working.

11:01.020 --> 11:02.820
They have to solve that problem.

11:02.820 --> 11:06.340
But additionally, it's not just video card and booting, right?

11:06.340 --> 11:10.380
There's a lot of other hardware inside that machine that has to get up and working.

11:10.380 --> 11:16.760
And the good news is the M1 PCIe driver is now under review in the Linux kernel.

11:16.760 --> 11:21.300
It's very early days, but this driver was created by both the Corellium and Ashi Linux

11:21.300 --> 11:24.540
team and it's bringing up aspects of the system.

11:24.540 --> 11:29.860
Yeah, once this driver gets merged, assuming it does, Linux should see support for USB

11:29.860 --> 11:34.220
type A ports as well as Ethernet on the M1 family.

11:34.220 --> 11:38.620
It also helps a long support for Wi-Fi and Bluetooth, we're going to need that, although

11:38.620 --> 11:42.340
more work is still needed before there's real support.

11:42.340 --> 11:46.100
And we should just say, don't expect these updates too soon.

11:46.100 --> 11:51.260
This new PCIe driver is blocked by a GPIO driver that's still considered very much a

11:51.260 --> 11:52.980
work in progress.

11:52.980 --> 12:08.260
So for now, the PCIe driver is just a request for comments.

12:08.260 --> 12:09.700
Linode.com slash LAN.

12:09.700 --> 12:12.620
Go there to get $100 in credit and support the show.

12:12.620 --> 12:16.580
No matter what skill level you're at or what technology stack you use, Linode can help

12:16.580 --> 12:19.260
your ideas come to life on the web.

12:19.260 --> 12:23.900
And if you ever have any trouble, Linode has the best customer support in the business.

12:23.900 --> 12:27.820
Awarded by the people and along with hundreds of guides and tutorials, you're going to get

12:27.820 --> 12:29.980
up and going in no time.

12:29.980 --> 12:31.700
Linode feels like part of our team.

12:31.700 --> 12:35.220
Behind the scenes, it's what makes JB possible.

12:35.220 --> 12:38.780
If it weren't for these spots, you'd never know that Linode is making all this infrastructure

12:38.780 --> 12:40.300
hum because it just runs.

12:40.300 --> 12:44.220
It's fast, it's reliable, and it's making your experience great.

12:44.220 --> 12:47.640
Linode's been easy to use and has a powerful cloud dashboard.

12:47.640 --> 12:52.660
With S3 compatible object storage, cloud firewalls, and simple one click application deployments

12:52.660 --> 12:57.660
with their super fast networking, they are their own ISP, and so much more, you'll find

12:57.660 --> 13:00.300
there's tons of uses of that $100 credit.

13:00.300 --> 13:05.280
So go over there to Linode.com slash LAN and get that credit and support the show.

13:05.280 --> 13:10.300
Their one click Minecraft server lets you specify features like NPCs, game mode, all

13:10.300 --> 13:15.000
the critical little things you need to set up all in one nice easy to use screen.

13:15.000 --> 13:20.180
And you know, 66% of companies save money working with a mix of alternative cloud providers

13:20.180 --> 13:23.100
instead of just relying on one big old hyperscaler.

13:23.100 --> 13:25.620
Linode can be part of your multi cloud strategy.

13:25.620 --> 13:27.620
That's why you got to check it out for yourself.

13:27.620 --> 13:37.300
Linode.com slash LAN.

13:37.300 --> 13:38.300
Linux.ting.com.

13:38.300 --> 13:42.040
Thank you to Ting for sponsoring this episode of the Linux Action News.

13:42.040 --> 13:46.060
If you're sick of overpaying for cell service, go see how much you could save and then take

13:46.060 --> 13:50.020
25 bucks off of that at Linux.ting.com.

13:50.020 --> 13:52.960
Ting is an MVNO or a mobile virtual network operator.

13:52.960 --> 13:58.960
That means Ting mobile customers get the same access as the customers of say, the big networks,

13:58.960 --> 14:01.840
but with better customer service and at a lower cost.

14:01.840 --> 14:06.260
With Ting mobile, you get the same coast to coast coverage as you would with the big guys,

14:06.260 --> 14:08.380
but you just pay less for it.

14:08.380 --> 14:11.180
And Ting's plans are way simpler and straightforward.

14:11.180 --> 14:16.040
In fact, I love their new set 12 plan, which gives you 12 gigs of data with unlimited talk

14:16.040 --> 14:18.760
and text for just 35 bucks a month.

14:18.760 --> 14:22.940
And a good family plan is hard to find, but with Ting's flex plans, they address this

14:22.940 --> 14:25.740
particular pain point in a way only Ting can.

14:25.740 --> 14:30.300
You add as many lines to your account as you need, you just pay 10 bucks per line.

14:30.300 --> 14:34.900
Every line gets unlimited texts and calls and every line shares that same pool of data.

14:34.900 --> 14:39.740
And if you need two, 20 or a lot more gigs, Ting's got a perfect plan for you.

14:39.740 --> 14:44.320
And every plan gets access to Ting's award winning customer service with nationwide LTE

14:44.320 --> 14:49.540
and 5G coverage, plus the freedom of no contracts ever.

14:49.540 --> 14:52.700
It's simple to switch to Ting, pretty much any phone works on Ting, so just head over

14:52.700 --> 14:57.260
to linux.ting.com, check your current phone, create an account, pick the plan that's right

14:57.260 --> 14:58.260
for you.

14:58.260 --> 15:02.140
And then Ting will send you a SIM card, you pop that in, you get activated in minutes.

15:02.140 --> 15:05.740
Cutting your phone bill in half has never been easier with Ting's brand new plans.

15:05.740 --> 15:07.980
The next generation of Ting mobile is here.

15:07.980 --> 15:15.780
So see how much you could save and then take 25 bucks off of that at linux.ting.com.

15:15.780 --> 15:26.060
After 484 days since the release of Ubuntu 2004, elementary OS 6 Odin was announced this

15:26.060 --> 15:27.060
week.

15:27.060 --> 15:33.500
Now, we don't typically talk about desktop distribution releases in Linux action news.

15:33.500 --> 15:39.500
But with version 6, we really think elementary OS is a serious workstation contender.

15:39.500 --> 15:45.100
And even though it's been a while since Ubuntu 2004's release, with elementary's unique take,

15:45.100 --> 15:52.060
their clean and sharp UI, and now the use of flat packs, this latest release is actually

15:52.060 --> 15:53.820
a pragmatic work machine.

15:53.820 --> 15:57.340
And of course, with every major release, there's been some really nice improvements and they

15:57.340 --> 15:59.260
really nail it every time.

15:59.260 --> 16:03.140
Wes and I gave the new release a spin and a few things jumped out at us.

16:03.140 --> 16:06.700
And I have to start with the visual stuff because this is an area the team puts a lot

16:06.700 --> 16:08.100
of attention into.

16:08.100 --> 16:13.420
And with this release, we now see a system wide dark theme that works in a way that respects

16:13.420 --> 16:19.020
application developers theming choices, and also includes accent colors that you can choose

16:19.020 --> 16:23.860
when you're choosing dark theme and just make the important UI elements really pop out to

16:23.860 --> 16:24.860
you.

16:24.860 --> 16:26.100
So your eyeball goes right to them.

16:26.100 --> 16:29.500
And man, if that doesn't just kind of add up over time, as you're working through the

16:29.500 --> 16:33.340
interface, it starts just saving you just slices of time here and there.

16:33.340 --> 16:36.920
And the new notifications redesign also kind of plays into that.

16:36.920 --> 16:39.340
And now they are including a new task app.

16:39.340 --> 16:41.780
I've actually gotten my hands on this app previously.

16:41.780 --> 16:46.060
And one of the things I like about it is it's a native GTK app that syncs with the Todoist

16:46.060 --> 16:51.020
service, which is kind of nice because the quote unquote native or I guess you could

16:51.020 --> 16:54.080
say vendor made Todoist app is an electron app.

16:54.080 --> 16:56.100
So having a native GTK app syncs with it.

16:56.100 --> 16:59.340
Well, man, if that isn't just diamonds, I don't know what is.

16:59.340 --> 17:03.780
Also, LVFS firmware support now baked in to their system settings.

17:03.780 --> 17:06.860
So you can update your devices, rewritten mail.

17:06.860 --> 17:10.100
You remember this started as Geary and they have redesigned this.

17:10.100 --> 17:14.740
And I've also been watching this project as it's been developed and it's come so far.

17:14.740 --> 17:20.060
If you need a nice, clean, totally, totally simple email client, it's a great one for

17:20.060 --> 17:21.060
that.

17:21.060 --> 17:22.540
And then there's also been improvements to their terminal.

17:22.540 --> 17:26.300
I always like seeing that kind of stuff and some smart paste protection, which I like

17:26.300 --> 17:31.740
because I put family members on elementary OS, better keyboard shortcuts and also terminal

17:31.740 --> 17:35.580
now has better integration with the notification settings.

17:35.580 --> 17:39.940
With this release, you can also take easy screenshots of a window from its title bar,

17:39.940 --> 17:42.300
which I just think is a great idea.

17:42.300 --> 17:43.300
Love that.

17:43.300 --> 17:46.620
And there's a desktop context menu when you give a right click on your desktop that lets

17:46.620 --> 17:50.100
you configure both your desktop and your display right there.

17:50.100 --> 17:54.020
I think this is a great balance between design and available options in the menu where you

17:54.020 --> 17:58.020
can configure what makes sense without giving you every option.

17:58.020 --> 18:03.260
They've also changed their philosophy around installation, saying now every install is

18:03.260 --> 18:04.260
an OEM install.

18:04.260 --> 18:05.900
What does that mean?

18:05.900 --> 18:11.820
Well, user creation and customization, that's all handled after you've installed and rebooted.

18:11.820 --> 18:14.100
It's a really clean, straightforward installation.

18:14.100 --> 18:16.000
It's an area the team worked a lot on.

18:16.000 --> 18:20.220
So I went through it this time and paid a lot of attention to each screen.

18:20.220 --> 18:22.940
And I don't know if I've ever seen a better done installer, period.

18:22.940 --> 18:27.580
And I like the way they handle everything from installing the base OS to trying it to

18:27.580 --> 18:30.280
encrypting your user directory and setting up your user account.

18:30.280 --> 18:32.020
It's all really nice.

18:32.020 --> 18:38.260
Another shift they've made in elementary OS 6 is accessibility features are just features

18:38.260 --> 18:39.660
of the operating system.

18:39.660 --> 18:43.440
And I think that's a mind shift that the community needs to make in general.

18:43.440 --> 18:48.100
And elementary OS 6 also includes improved performance just across the desktop in general.

18:48.100 --> 18:49.380
And I don't say that lightly.

18:49.380 --> 18:52.060
I definitely noticed it in my testing.

18:52.060 --> 18:57.380
In fact, it was one of those moments where I went, oh, okay, this is going to be something

18:57.380 --> 19:01.240
I'm really going to have to try out for a while because it seems that their work to

19:01.240 --> 19:06.980
get elementary OS on the Pinebook Pro and Raspberry Pi builds has resulted in net performance

19:06.980 --> 19:08.880
improvements for all of us.

19:08.880 --> 19:10.980
Who would have thought?

19:10.980 --> 19:12.900
Now I should add, I like the installer.

19:12.900 --> 19:13.900
I agree with that.

19:13.900 --> 19:17.180
It's a really good work, but I think you should know it's still a little rough around the

19:17.180 --> 19:18.480
edges in a few places.

19:18.480 --> 19:23.940
I had some random leg spikes and I was kind of surprised to see that the advanced partitioning,

19:23.940 --> 19:27.380
if you go that route, it actually just spawns Gparted.

19:27.380 --> 19:28.380
Yeah.

19:28.380 --> 19:30.060
That part does feel a little bit of like hands up.

19:30.060 --> 19:31.060
All right.

19:31.060 --> 19:33.500
If you're hitting the advanced button, we're just going to assume you know what you're

19:33.500 --> 19:34.500
doing.

19:34.500 --> 19:35.500
Have Gparted.

19:35.500 --> 19:36.500
Here you go.

19:36.500 --> 19:37.500
Yeah.

19:37.500 --> 19:38.500
I was kind of torn.

19:38.500 --> 19:39.500
On one hand, it looked a little bit off.

19:39.500 --> 19:43.820
It didn't quite match the clean UI they have and actually the theming support didn't quite

19:43.820 --> 19:45.740
play nicely with it at times.

19:45.740 --> 19:49.420
But on the other hand, honestly, especially if I'm installing something like Fedora with

19:49.420 --> 19:54.020
Anaconda, I just skip using the built in stuff and use Gparted anyway.

19:54.020 --> 19:56.620
So I think at the end of the day, it's just a practical choice.

19:56.620 --> 19:57.620
Yeah.

19:57.620 --> 20:01.060
And I could see them just opting to go that route for now instead of investing a lot of

20:01.060 --> 20:04.620
time into an area that probably most of their users aren't taking advantage of.

20:04.620 --> 20:07.820
I bet most are just using the basic partitioning built in.

20:07.820 --> 20:12.620
I would have led with gesture support being probably my favorite thing that they've done

20:12.620 --> 20:16.260
because I'm really getting into gesture support on all of my desktop environments.

20:16.260 --> 20:20.000
I even bought a trackpad to do that for my desktop.

20:20.000 --> 20:26.680
But instead, I'm going to give like the MVP, like the award of this release to what they've

20:26.680 --> 20:28.600
done with Flatpaks.

20:28.600 --> 20:33.180
When they decided to integrate Flatpaks, they did it at a level no other distribution I've

20:33.180 --> 20:34.340
ever seen has done.

20:34.340 --> 20:40.260
And what I'm talking about here is they have one spot in your system settings where you

20:40.260 --> 20:44.780
can go and see all of the portal permissions that different Flatpaks have and you can turn

20:44.780 --> 20:47.900
off access to different things in one spot.

20:47.900 --> 20:52.920
Every app is listed with what they can do in one place for the user to interact with.

20:52.920 --> 20:53.920
And it's brilliant.

20:53.920 --> 20:58.500
And in a way, it's one of those things that once you see you go, Oh, this is obvious.

20:58.500 --> 20:59.500
Everybody should be doing this.

20:59.500 --> 21:04.180
And I would not be surprised at all to see something like this land in GNOME system settings

21:04.180 --> 21:06.860
eventually, or maybe it's already on its way.

21:06.860 --> 21:10.420
It really is impressive, and it's the kind of thoughtfulness and high level integration

21:10.420 --> 21:13.940
work that we've come to expect from the team behind elementary.

21:13.940 --> 21:18.680
I also really appreciated that while flat hub is not enabled out of the box, it's really

21:18.680 --> 21:21.700
easy to sideload whatever Flatpak app you might want.

21:21.700 --> 21:25.340
And it even offers to clean up the Flatpak ref file for you.

21:25.340 --> 21:26.980
So they put thought in there.

21:26.980 --> 21:30.200
And then your sideloaded apps just show up in the app center anyway.

21:30.200 --> 21:31.700
So it's all a nice experience.

21:31.700 --> 21:35.720
Yeah, you don't feel like you're being penalized for going outside the app center.

21:35.720 --> 21:40.760
And that's a good thing right now because the software center is, it's a bit empty right

21:40.760 --> 21:42.900
now as we wait for developers to update their apps.

21:42.900 --> 21:47.740
So having easy access to flat hub and easy access to sideloaded Flatpaks and then integrating

21:47.740 --> 21:51.540
them thoughtfully bridges that gap right now and kind of speaks to what you and I were

21:51.540 --> 21:56.380
saying when you add all of these things up, the clean UI, the GTK based desktop that isn't

21:56.380 --> 22:01.500
GNOME shell, the Flatpak integration, the performance improvements, the new usability

22:01.500 --> 22:06.020
features and accessibility features, it really is just like this great work machine that

22:06.020 --> 22:09.340
you can just sit down and start busting through your work really fast.

22:09.340 --> 22:12.980
And you know, I think it won't be long until you start seeing developers update their apps

22:12.980 --> 22:17.100
and that software center starts filling up with apps that are native Linux apps for elementary

22:17.100 --> 22:18.100
OS 6.

22:18.100 --> 22:22.900
Now, if you're interested, but you want a little bit more tweakability, we kind of suggest

22:22.900 --> 22:26.120
that maybe you check out Pantheon tweaks.

22:26.120 --> 22:28.860
Just don't tell Dan and Cass we told you to.

22:28.860 --> 22:33.460
I mean, sometimes the guy just needs a minimize button, but don't tell him we said it.

22:33.460 --> 22:37.340
In the meantime, get every episode of Linux action news go to linuxactionnews.com slash

22:37.340 --> 22:42.020
subscribe for all the ways to get those new episodes and the linuxactionnews.com slash

22:42.020 --> 22:45.820
contact to let us know which tweaks you use.

22:45.820 --> 22:52.660
Today we're recording in Nebraska, but tomorrow who knows follow our road trip live at colonytracker.live

22:52.660 --> 22:56.220
and hit that micro meetup link if we are going to be in your area.

22:56.220 --> 22:58.340
We do have some swag on board after all.

22:58.340 --> 23:04.340
And don't forget, join us for the upcoming Denver meetup this Friday, meetup.com slash

23:04.340 --> 23:06.100
Jupiter broadcasting.

23:06.100 --> 23:08.120
If you can't make it, though, don't worry.

23:08.120 --> 23:13.680
This show will be back next Monday with our weekly take on the latest Linux and open source

23:13.680 --> 23:15.180
news.

23:15.180 --> 23:16.380
Thanks for joining us.

23:16.380 --> 23:33.620
And that's all the news for this week.


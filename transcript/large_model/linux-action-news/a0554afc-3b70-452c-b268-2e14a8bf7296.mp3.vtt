WEBVTT

00:00.000 --> 00:09.180
Hello, and welcome to Linux Action News, episode 199, recorded on July 25th, 2021.

00:09.180 --> 00:10.180
I'm Chris.

00:10.180 --> 00:11.180
And I'm Wes.

00:11.180 --> 00:12.180
Hello, Wes.

00:12.180 --> 00:13.180
Let's do the news.

00:13.180 --> 00:17.400
We wanted to start this week with a story you might have seen circulating around.

00:17.400 --> 00:22.540
And that's a recently disclosed denial of service vulnerability in SystemD.

00:22.540 --> 00:26.760
So what's been disclosed here is a SystemD bug that allows any unprivileged user on your

00:26.760 --> 00:32.100
local system to exploit a vulnerability that crashes SystemD and then causes your kernel

00:32.100 --> 00:33.100
to panic.

00:33.100 --> 00:34.100
Yikes.

00:34.100 --> 00:38.920
What makes matters a little bit worse is that this vulnerability was introduced in SystemD

00:38.920 --> 00:44.080
version 2.20, released way back in April of 2015.

00:44.080 --> 00:47.920
So I think it's fair to say it's been widely deployed at this point.

00:47.920 --> 00:52.560
Thankfully, though, the Qualys team reports that once they found this vulnerability, they

00:52.560 --> 00:55.620
pretty much immediately began working with upstream.

00:55.620 --> 00:57.940
It's fascinating looking at the disclosure timeline.

00:57.940 --> 01:02.880
It seems that they sent a CV advisory to Red Hat on June 9th of this year, and then Red

01:02.880 --> 01:03.880
Hat got to work.

01:03.880 --> 01:08.920
But the notes don't really indicate that they sent out a notice to any other Linux distribution,

01:08.920 --> 01:13.840
which because it's SystemD, maybe that wasn't necessarily needed in this case.

01:13.840 --> 01:19.100
For their part, Red Hat product security and SystemD's developers have pretty much immediately

01:19.100 --> 01:21.220
patched the whole.

01:21.220 --> 01:24.980
Looking at that timeline, they seem to be on it, at least this time.

01:24.980 --> 01:29.100
Now here's the reality and why we wanted to talk about this at the top of the show.

01:29.100 --> 01:30.320
It's making a lot of headlines.

01:30.320 --> 01:31.660
It's making a lot of news.

01:31.660 --> 01:33.340
It's not necessarily a huge deal.

01:33.340 --> 01:35.240
And we just wanted you to have the facts.

01:35.240 --> 01:40.780
It's an exploit that requires that local attacker has to mount a file system at an extremely

01:40.780 --> 01:42.840
long path that messes with SystemD.

01:42.840 --> 01:46.340
And while yes, it is an issue and you should check for updates, testing seems to indicate

01:46.340 --> 01:49.540
that the vulnerability is not present in all Linux distros.

01:49.540 --> 01:53.740
It does seem to be in Debian 10, Red Hat derivatives, and Ubuntu derivatives.

01:53.740 --> 01:56.460
So it covers a lot, so check for updates.

01:56.460 --> 02:00.580
Well soon, you can just upgrade right to Debian 11.

02:00.580 --> 02:04.820
This week, the team announced their release date for the much anticipated new version.

02:04.820 --> 02:07.060
Indeed, it's known as Bullseye.

02:07.060 --> 02:11.100
Debian 11 has been set for an August 14th release.

02:11.100 --> 02:13.680
You know what's also kind of news with this story?

02:13.680 --> 02:15.220
The speed of everything.

02:15.220 --> 02:16.220
Right.

02:16.220 --> 02:22.300
With the Debian 11 full freeze just last week, I don't think we expected a firm date to be

02:22.300 --> 02:24.240
set point so soon.

02:24.240 --> 02:25.240
No way.

02:25.240 --> 02:26.240
No.

02:26.240 --> 02:30.420
Prior Debian releases, just for context, have taken up to a few months past the freeze point

02:30.420 --> 02:31.900
before they were released.

02:31.900 --> 02:33.780
Yeah, that's kind of what I was thinking.

02:33.780 --> 02:36.500
Like, okay, all right, you guys are really on it.

02:36.500 --> 02:39.060
And it does look like a really good release, Wes.

02:39.060 --> 02:43.460
Debian 11 is going to have a lot of goodies, Linux 5.10, and that's the LTS version of

02:43.460 --> 02:44.460
the Linux kernel.

02:44.460 --> 02:48.120
And of course, you got all the package improvements and updates since Debian 10 launched about

02:48.120 --> 02:49.120
two years ago.

02:49.120 --> 02:52.900
So, of course, we'll cover the release here in the show.

02:52.900 --> 02:57.140
And then when Debian 11 does release, we will cover that right here in Linux Action News

02:57.140 --> 03:02.420
and we will have a review of the release in Linux Unplugged.

03:02.420 --> 03:07.160
While we don't have much to share on this, we did want to give you a brief update on

03:07.160 --> 03:09.300
Audacity this week.

03:09.300 --> 03:14.300
Muse Group, the new owners of the free software audio editor, published an updated privacy

03:14.300 --> 03:17.260
policy and an apology.

03:17.260 --> 03:18.260
An apology, huh?

03:18.260 --> 03:20.020
Well, that's interesting, I suppose.

03:20.020 --> 03:23.460
The update itself addresses the main points of criticism leveled against the previous

03:23.460 --> 03:25.300
version of the privacy policy.

03:25.300 --> 03:29.280
And in particular, there's several points that were changed.

03:29.280 --> 03:34.340
That provision about being 13 years or older to use Audacity, that's just been completely

03:34.340 --> 03:35.460
removed.

03:35.460 --> 03:39.680
They've added a broader explanation for air reporting and the update checking functionality

03:39.680 --> 03:40.680
to the policy.

03:40.680 --> 03:45.180
They also clarified that the full IP address is never stored, not even like a hashed version

03:45.180 --> 03:49.340
of it, and that the collecting personal data for law enforcement paragraph makes it clear

03:49.340 --> 03:52.700
that no additional data is collected.

03:52.700 --> 03:55.300
So problem solved, I guess, Wes?

03:55.300 --> 04:01.460
I think it remains to be seen if this revised privacy policy and the apology itself will

04:01.460 --> 04:04.500
result in a calming down of the situation.

04:04.500 --> 04:07.740
Only time will tell.

04:07.740 --> 04:10.120
We have a couple of hardware stories this week.

04:10.120 --> 04:12.300
First up, some follow up on the Steam Deck from last week.

04:12.300 --> 04:16.300
We now know that all models feature socketed M.2 storage.

04:16.300 --> 04:20.620
Valve notes that it's not necessarily user accessible or replaceable.

04:20.620 --> 04:24.840
But I mean, you can't help but wonder how long until some user out there buys the lowest

04:24.840 --> 04:29.580
tier storage deck and puts like two terabytes of storage or some crazy amount of storage

04:29.580 --> 04:30.580
in there.

04:30.580 --> 04:31.580
It seems like it's going to happen.

04:31.580 --> 04:35.380
Stop putting ideas in my head, you.

04:35.380 --> 04:39.700
And while we're speaking of storage, a Valve designer clarified that the videos you've

04:39.700 --> 04:45.940
maybe seen from IGN with the Steam Deck playing actual games, well, all of those were apparently

04:45.940 --> 04:48.060
done off a micro SD card.

04:48.060 --> 04:52.980
Yeah, I think Valve's trying to make a statement that they have a really fast SD card reader

04:52.980 --> 04:53.980
in there.

04:53.980 --> 04:56.220
So if you put a high speed SD card in there, you're going to have an OK time.

04:56.220 --> 04:57.580
And you think about that.

04:57.580 --> 05:01.100
That's like demoing it to the press for the first time and they were OK running it off

05:01.100 --> 05:02.100
an SD card.

05:02.100 --> 05:05.580
That feels like a statement or an act of desperation.

05:05.580 --> 05:09.260
I guess we'll know once we see the deck.

05:09.260 --> 05:12.600
That same designer on Twitter also made it clear that the Steam Deck could just play

05:12.600 --> 05:17.800
games off of an external SSD because it is just a PC after all.

05:17.800 --> 05:22.180
But how did we get to that handheld PC running Linux?

05:22.180 --> 05:29.580
It all started back in July 2012 when Valve's Gabe Newell mentioned his concerns about Windows

05:29.580 --> 05:36.200
8, stating he felt it would be a catastrophe for everyone in the PC space.

05:36.200 --> 05:41.260
Their concerns over the Windows 8 App Store and the new Windows UI kicked off something

05:41.260 --> 05:43.660
of a revolution inside Valve.

05:43.660 --> 05:45.980
I can't believe it was July of 2012.

05:45.980 --> 05:49.500
I clearly, clearly remember the moment.

05:49.500 --> 05:51.660
It's just crystallized in my memory.

05:51.660 --> 05:56.820
And in that spirit, Liam over at Gaming on Linux has an impressive write up of the rise

05:56.820 --> 05:58.300
of Steam on Linux.

05:58.300 --> 06:02.140
And it is quite literally a timeline that is worth your time.

06:02.140 --> 06:03.140
Indeed.

06:03.140 --> 06:09.140
It's been a long and fascinating nine plus years now for Valve and for Linux.

06:09.140 --> 06:11.660
And Liam nailed it in that write up.

06:11.660 --> 06:13.700
I did mention we have two hardware stories.

06:13.700 --> 06:17.180
The second hardware story this week is the Framework laptop.

06:17.180 --> 06:20.900
It is now shipping and the press reviews have started to hit the internet.

06:20.900 --> 06:24.500
So we've done a little bit of a meta analysis of the coverage.

06:24.500 --> 06:30.620
If you don't recall, the Framework is a fully modular laptop that you can put together yourself

06:30.620 --> 06:33.520
starting at 750 USD.

06:33.520 --> 06:37.420
And it seems to have been a hit overall in the reviews.

06:37.420 --> 06:42.720
Gizmodo noted the performance was on par with other laptops of its same class, although

06:42.720 --> 06:45.860
with shorter battery life than most.

06:45.860 --> 06:47.340
Seemed like by quite a bit.

06:47.340 --> 06:50.860
CNET reviewers noted though that they loved being able to switch the side that a given

06:50.860 --> 06:53.980
port is on based on where they needed to attach a cable.

06:53.980 --> 06:55.620
I think that's a fantastic idea.

06:55.620 --> 06:59.700
Wow, I already have too many laptops that have different ports from different sides

06:59.700 --> 07:00.700
and I can't keep it straight.

07:00.700 --> 07:01.700
I need this.

07:01.700 --> 07:02.700
I know this right there.

07:02.700 --> 07:03.980
I'm like, yes, I love that idea.

07:03.980 --> 07:07.660
Just as a concept, no more having to fish that cable around.

07:07.660 --> 07:12.860
They also note over at CNET that each Framework part has a QR code on it and a short URL to

07:12.860 --> 07:16.800
take you to all of the info you need about it and the grand plan is here hopefully one

07:16.800 --> 07:21.120
day to have replacement parts and upgrade parts and Frameworks even talked about a market

07:21.120 --> 07:24.760
where you could trade these parts on and upgrade and exchange.

07:24.760 --> 07:29.580
And it's partially for that reason I think that PC World called it the ultimate write

07:29.580 --> 07:31.860
to repair laptop.

07:31.860 --> 07:37.320
So it really does seem initial impressions have been fairly good, although it is still

07:37.320 --> 07:39.700
definitely early days for the hardware.

07:39.700 --> 07:43.460
Don't worry though, we'll be keeping an eye on it.

07:43.460 --> 07:55.660
Might even just opt to pick one up for an in-studio review someday.

07:55.660 --> 07:57.540
Leno.com slash LAN.

07:57.540 --> 08:02.180
Go there to get $100 in 60 day credit towards a new account and go there to support the

08:02.180 --> 08:03.180
show.

08:03.180 --> 08:04.980
You know, Leno is our cloud server provider.

08:04.980 --> 08:08.940
They started in 2003 as one of the very first companies in cloud computing.

08:08.940 --> 08:16.100
Now 18 years later, Leno is the largest independent open cloud provider in the world with 11 global

08:16.100 --> 08:21.260
data centers serving nearly a million customers and businesses around the globe.

08:21.260 --> 08:23.980
But Leno's mission remains unchanged.

08:23.980 --> 08:28.540
Since the day it started, their mission has been to make cloud computing simple, affordable

08:28.540 --> 08:30.180
and accessible to all.

08:30.180 --> 08:34.620
And that's led to a best in class experience and why we host everything on Leno.

08:34.620 --> 08:35.620
It's easy to use, of course.

08:35.620 --> 08:41.260
It has a very powerful clean cloud dashboard, but they also offer things like S3 compatible

08:41.260 --> 08:48.020
object storage, a powerful DNS manager, lock storage, of course, Kubernetes support, one

08:48.020 --> 08:51.100
click application deployments and super fast networking.

08:51.100 --> 08:54.980
In fact, Leno owns the connections between their data centers.

08:54.980 --> 08:56.860
They are their own ISP.

08:56.860 --> 09:01.500
And with pricing 30 to 50 percent cheaper than other major cloud providers, it's worth

09:01.500 --> 09:02.500
checking out.

09:02.500 --> 09:06.780
And you know, 66 percent of companies save money working with a mix of alternative cloud

09:06.780 --> 09:10.660
providers instead of just relying on one hyperscaler.

09:10.660 --> 09:12.620
Leno can be part of your multi cloud strategy.

09:12.620 --> 09:16.660
And if you ever run into any trouble getting anything set up, Leno comes with amazing 24

09:16.660 --> 09:19.220
seven customer support by phone or ticket.

09:19.220 --> 09:23.180
And Leno is making our Jupiter Colony reunion road trip possible with meet ups in Salt Lake

09:23.180 --> 09:27.380
City, Denver and more all along the way powered by Leno.

09:27.380 --> 09:32.180
So go use our one hundred dollars to test your system to build something or to learn.

09:32.180 --> 09:35.660
You got to go check out Leno for yourself and take advantage of that special offer.

09:35.660 --> 09:38.500
They're dedicated to offering the best in virtualized cloud computing.

09:38.500 --> 09:51.700
If it runs on Linux, it runs on Leno at Leno dot com slash land.

09:51.700 --> 09:53.180
Linux dot ting dot com.

09:53.180 --> 09:57.020
If you're sick of overpaying for cell service, go see how much you could save and then take

09:57.020 --> 10:02.660
twenty five off that at Linux dot ting dot com ting is an MBNO or a mobile virtual network

10:02.660 --> 10:03.660
operator.

10:03.660 --> 10:08.140
And what that really means is the ting mobile customers get access to the big carrier networks,

10:08.140 --> 10:11.460
but with way better customer service at a lower cost.

10:11.460 --> 10:16.300
With ting mobile, you get the same coast to coast coverage as you would with the big guys.

10:16.300 --> 10:17.460
You just pay less.

10:17.460 --> 10:20.940
That's why I've been a ting customer since 2013.

10:20.940 --> 10:25.420
Ting has stayed flexible and nimble with my various patterns of usage over the years like

10:25.420 --> 10:27.620
no carrier could ever dream of.

10:27.620 --> 10:32.980
And Ting's plans are simple and straightforward, like their new set 12 plan, 12 gigs of data,

10:32.980 --> 10:35.860
unlimited talk and text for thirty five bucks a month.

10:35.860 --> 10:40.460
And if you follow Ting on Twitter at Ting FTW, they're giving away five hundred dollars

10:40.460 --> 10:43.300
in gift cards for use of either Best Buy or Amazon.

10:43.300 --> 10:47.340
So go follow them at Ting FTW for more details and get access to that.

10:47.340 --> 10:51.100
Now, if you need two gigs or 20 gigs or a lot more than that, Ting's got a perfect plan

10:51.100 --> 10:52.100
for you.

10:52.100 --> 10:57.140
Every plan gets access to Ting's award winning customer service with nationwide LTE and 5G

10:57.140 --> 10:58.140
coverage.

10:58.140 --> 11:04.100
But the best thing about Ting, never any contracts, no contracts, no contracts.

11:04.100 --> 11:06.940
It's simple to switch to Ting, too, pretty much any phone will work.

11:06.940 --> 11:11.260
So just head to Linux.ting.com, check out your current phone, create an account, pick

11:11.260 --> 11:12.260
the plan that's right for you.

11:12.260 --> 11:14.580
Once everything is set, Ting will send you a SIM card.

11:14.580 --> 11:15.580
You pop that in your phone.

11:15.580 --> 11:17.380
You get activated in minutes.

11:17.380 --> 11:21.220
Cutting your phone bill in half has never been easier with Ting's brand new plans.

11:21.220 --> 11:23.260
It truly is the next generation of Ting mobile.

11:23.260 --> 11:24.260
It's here.

11:24.260 --> 11:26.900
Go see how much you could save and then take twenty five bucks off that.

11:26.900 --> 11:29.900
Linux.ting.com.

11:29.900 --> 11:35.860
We've been keeping an eye on Google's Fuchsia project for years now, and it seems with Fuchsia

11:35.860 --> 11:40.840
out in the open, Google's becoming a bit more relaxed about their engineers talking

11:40.840 --> 11:43.980
more freely about the OS.

11:43.980 --> 11:49.420
To that end, Rubber Duck Engineering, a weekly web show hosted by Fuchsia software engineer

11:49.420 --> 11:55.720
Adam Barth, and Flutter engineer Eric Seidel recorded a dedicated episode about the current

11:55.720 --> 11:57.620
state of Fuchsia.

11:57.620 --> 12:00.780
You'll have links to the entire chat in our show notes.

12:00.780 --> 12:02.860
But of course, we grabbed a few clips for you all.

12:02.860 --> 12:06.300
We thought maybe these clips would shed light on aspects of Fuchsia that are a little more

12:06.300 --> 12:12.660
noteworthy to us Linux users, including the unique way that Fuchsia acquires software.

12:12.660 --> 12:14.660
Here's Adam Barth on that point.

12:14.660 --> 12:16.660
So over here, I just put this thing up.

12:16.660 --> 12:17.660
I'm going to run LS.

12:17.660 --> 12:21.900
So what's interesting is not what happened in this window, but what happened in this

12:21.900 --> 12:22.900
window.

12:22.900 --> 12:23.900
OK.

12:23.900 --> 12:30.740
So this prior to me running LS, this system did not have LS on it.

12:30.740 --> 12:38.180
It just in the time I hit enter, it discovered an implementation of LS and basically installed

12:38.180 --> 12:39.540
it on the device.

12:39.540 --> 12:41.100
And now I have LS.

12:41.100 --> 12:46.660
It seems Fuchsia has a new way of managing software, applying some of the concepts and

12:46.660 --> 12:49.260
lessons learned from the web.

12:49.260 --> 12:51.320
It's more like a cache and an install.

12:51.320 --> 12:58.540
So in other operating systems, installation is a pull, like a push mechanism, right?

12:58.540 --> 13:01.460
You like type app get install a thing, right?

13:01.460 --> 13:03.020
And then you got it.

13:03.020 --> 13:05.560
And if you want to get rid of it, you say uninstall the thing.

13:05.560 --> 13:10.900
So here the idea is the entire universe of software is available to you at your fingertips.

13:10.900 --> 13:15.400
All you need to do is mention it, then it'll come and run on your device.

13:15.400 --> 13:19.740
And when it's done, it'll or you run out of space in your cache, it'll disappear and float

13:19.740 --> 13:20.740
away.

13:20.740 --> 13:22.940
And when you run it again, it'll come back when you need it.

13:22.940 --> 13:25.300
It's a concept of ephemeral software.

13:25.300 --> 13:29.260
Another way Fuchsia differs from Linux is the security model around its kernel known

13:29.260 --> 13:30.940
as Zircon.

13:30.940 --> 13:33.880
Another thing is like the kernel has no notion of user.

13:33.880 --> 13:40.700
So in Windows, there's a very elaborate access control system where every object is associated

13:40.700 --> 13:45.260
with a security identifier, an access control list, and there's a thing.

13:45.260 --> 13:49.580
Linux every process has a user ID and a group ID and the kernel makes lots of like checks

13:49.580 --> 13:50.580
against that.

13:50.580 --> 13:55.700
So Zircon just has none of that, has no concept of user whatsoever.

13:55.700 --> 13:58.900
The way it does access checks is just do you have a handle to this thing?

13:58.900 --> 13:59.900
If so, great.

13:59.900 --> 14:01.900
If not, no way.

14:01.900 --> 14:06.700
And never missing an opportunity to make it easy to bring your existing software stack

14:06.700 --> 14:11.460
to Fuchsia, Google has plumbed in Wayland support.

14:11.460 --> 14:16.020
We have a Wayland adapter so we can run software that knows how to speak to Wayland.

14:16.020 --> 14:18.580
But it's not like we have a separate Wayland server running.

14:18.580 --> 14:22.820
That thing just knows how to tell Scenic what the thing wanted to do in Wayland.

14:22.820 --> 14:25.740
And does that Wayland adapter run separate from Scenic?

14:25.740 --> 14:26.740
Yeah.

14:26.740 --> 14:30.700
So you sort of imagine like a service-oriented architecture.

14:30.700 --> 14:35.100
So on one end it exposes Wayland and then on the other end it just talks to Scenic just

14:35.100 --> 14:36.780
like any other client talks to Scenic.

14:36.780 --> 14:40.380
And if Wayland support's not enough for you, it seems that porting your existing applications

14:40.380 --> 14:44.980
from Linux to Fuchsia could actually be very straightforward, especially if your application

14:44.980 --> 14:46.940
already runs on Windows.

14:46.940 --> 14:53.340
The good rule of thumb is if the program knows how to run both on Linux and on Windows, then

14:53.340 --> 14:55.740
porting it to Fuchsia is relatively easy.

14:55.740 --> 15:01.500
If it only knows how to run on Linux, then depending on what it's doing, it can be a

15:01.500 --> 15:02.540
little tricky.

15:02.540 --> 15:08.020
So we have a compatibility layer we call POSIX Lite, which contains the parts of POSIX that

15:08.020 --> 15:13.900
we think don't negatively impact security, and then we provide that interface on top

15:13.900 --> 15:16.420
of the underlying Fuchsia primitives.

15:16.420 --> 15:22.380
And our favorite moment from the stream, when a live viewer asked if Fuchsia could one day

15:22.380 --> 15:24.940
replace desktop Linux.

15:24.940 --> 15:28.040
But I also think it's important to realize that people always want to look at these things

15:28.040 --> 15:33.500
in a zero-sum fixed way, like is this going to replace X, like is this going to replace

15:33.500 --> 15:35.180
Linux on the desktop or whatever.

15:35.180 --> 15:39.140
I think even more in a, there's like more to be had, right?

15:39.140 --> 15:43.300
If you have a system that's different than Linux, it's maybe different for other things,

15:43.300 --> 15:47.220
and maybe there's new things that you could do with it that are either difficult to do

15:47.220 --> 15:51.280
with Linux or awkward, or you might benefit from a different application.

15:51.280 --> 15:55.580
And so I think it's more useful to think about like, what are the new things that you could

15:55.580 --> 15:59.660
do with this that are possibly additive as opposed to replace it?

15:59.660 --> 16:01.140
I think that really nails it right there.

16:01.140 --> 16:03.120
What are the new things that it could do additive?

16:03.120 --> 16:06.740
Because Fuchsia truly feels like a lessons learned project for Google.

16:06.740 --> 16:10.360
In the Skunk Works, the engineers wanted to build something that they learned a little

16:10.360 --> 16:13.660
bit from Linux, they learned a little bit from Windows, they learned from deploying

16:13.660 --> 16:16.740
software on the web, and they wanted to bring it all into one place.

16:16.740 --> 16:20.180
And notable how easy it is to move software over to Fuchsia.

16:20.180 --> 16:24.340
Yeah, that's a little bit surprising, but I guess you got to have something to run on

16:24.340 --> 16:25.340
there.

16:25.340 --> 16:26.340
Yeah, you need software, right?

16:26.340 --> 16:30.100
And get a little Wayland support, some basic POSIX support, and you're pretty much good

16:30.100 --> 16:31.100
to go.

16:31.100 --> 16:32.100
We'll see where it goes.

16:32.100 --> 16:35.560
You never know, but there's so much going on every single week, and we try to distill

16:35.560 --> 16:38.100
it down for you in a very consumable way.

16:38.100 --> 16:42.740
So make sure you get every single episode by going to linuxactionnews.com slash subscribe

16:42.740 --> 16:44.980
for all the ways to get them new episodes.

16:44.980 --> 16:48.860
And linuxactionnews.com slash contact to let us know how we're doing.

16:48.860 --> 16:50.640
Hey, maybe share the show.

16:50.640 --> 16:54.380
If you know someone who works in IT and needs to stay up to date, send them a link to a

16:54.380 --> 16:56.220
recent episode that you really liked.

16:56.220 --> 17:01.100
Join us for meetups in Salt Lake City and Denver coming up soon.

17:01.100 --> 17:03.760
Meetup.com slash Jupiter Broadcasting.

17:03.760 --> 17:08.340
As for us, we'll be back next Monday with our weekly take on the latest Linux and open

17:08.340 --> 17:09.340
source news.

17:09.340 --> 17:35.380
Thanks for joining us, and we will see you next week.


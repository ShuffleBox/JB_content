WEBVTT

00:00.000 --> 00:09.080
Hello, and welcome to Linux Action News, episode 175 recorded on February 6th, 2021.

00:09.080 --> 00:10.080
I'm Chris.

00:10.080 --> 00:11.080
And I'm Wes.

00:11.080 --> 00:12.080
Hello, Wes.

00:12.080 --> 00:13.080
Let's do the news.

00:13.080 --> 00:16.720
And let's start with some chatter you might have heard this week regarding Raspberry Pi

00:16.720 --> 00:21.080
OS and a secret Microsoft repository.

00:21.080 --> 00:25.920
It turned into a bit of a storm in a teacup, so we wanted to give you some context.

00:25.920 --> 00:32.120
In a recent update to Raspberry Pi OS, previously known as Raspbian, a Microsoft hosted app

00:32.120 --> 00:37.700
repository was installed on all machines currently running the OS without the administrator's

00:37.700 --> 00:40.180
knowledge or explicit permission.

00:40.180 --> 00:44.760
By all accounts, this change was made to make it easier for users to get access to VS code,

00:44.760 --> 00:49.020
which is their recommended IDE for the Pi Pico.

00:49.020 --> 00:53.400
But something that's curled a few eyebrows is you're even going to get this installed

00:53.400 --> 00:57.720
if you use Raspberry Pi headless as a server.

00:57.720 --> 01:03.080
And it also means that every time you do an apt update on your Pi, you're pinging a Microsoft

01:03.080 --> 01:04.080
server.

01:04.080 --> 01:09.680
Additionally, it means that a Microsoft GPG key used to sign the packages in the repository

01:09.680 --> 01:12.880
was added and now trusted by the system.

01:12.880 --> 01:17.320
As you can imagine, some Linux users were just not happy about that.

01:17.320 --> 01:21.960
Though I think it's probably safe to assume that most users, especially the ones Raspberry

01:21.960 --> 01:28.160
Pi OS targets, care more about easily getting access to VS code than Microsoft collecting

01:28.160 --> 01:29.900
some metadata.

01:29.900 --> 01:35.180
For comparison, how would you feel about this repo coming pre-installed on, say, a new Dell

01:35.180 --> 01:37.760
developer laptop?

01:37.760 --> 01:40.840
I don't think that would surprise me.

01:40.840 --> 01:44.640
I don't know if I would love that, but ultimately I think I would end up installing VS code

01:44.640 --> 01:47.080
myself, regardless.

01:47.080 --> 01:50.820
And if I'm on an Ubuntu system, I probably would use their dev which adds the repo.

01:50.820 --> 01:53.240
So I'd actually probably just do this to myself.

01:53.240 --> 01:56.560
But honestly, if I could choose, my preference would be that, say, a company like Dell ship

01:56.560 --> 01:58.840
it as a Snap or a Flatpak.

01:58.840 --> 02:00.240
That I think would be even better.

02:00.240 --> 02:03.940
But to your point, I would not be surprised.

02:03.940 --> 02:09.000
And it's something that Windows OEMs have done to an extreme for years.

02:09.000 --> 02:11.200
I think consumers have actually normalized it for so long.

02:11.200 --> 02:16.600
And we have to remember, they're both the OEM, like, you know, a Dell, and they're also

02:16.600 --> 02:18.160
the Microsoft in this comparison.

02:18.160 --> 02:19.440
They're also the ones creating the OS.

02:19.440 --> 02:21.000
They're fulfilling both roles.

02:21.000 --> 02:26.240
Yeah, to that end, my other tempering thought on this, and not to say I don't understand

02:26.240 --> 02:28.000
why people are upset.

02:28.000 --> 02:30.760
This was a change that could be concerning for a lot of folks.

02:30.760 --> 02:34.400
But the Pi is designed as an educational device.

02:34.400 --> 02:38.440
And to this end, Linux is kind of just an implementation detail.

02:38.440 --> 02:42.480
Windows also runs on the Pi, and it certainly also runs VS code.

02:42.480 --> 02:46.160
We could have been living in a world where the Pi platform was built on Windows.

02:46.160 --> 02:49.640
I'm glad that's not what's happening.

02:49.640 --> 02:50.640
Yeah, okay.

02:50.640 --> 02:53.400
Yeah, it could be worse, I guess is what you're saying.

02:53.400 --> 02:55.600
I think, though, it's two things.

02:55.600 --> 03:00.840
I think the community has higher expectations for systems that ship with Linux.

03:00.840 --> 03:05.320
Just because Windows OEMs got away with something, it doesn't really mean we should repeat those

03:05.320 --> 03:07.320
sins.

03:07.320 --> 03:11.560
And I think there's also an issue around transparency about this change.

03:11.560 --> 03:16.160
It didn't end up in the changelog until a couple of weeks after it was shipping.

03:16.160 --> 03:20.620
When the community noticed the change, it was already done.

03:20.620 --> 03:22.300
It was already final.

03:22.300 --> 03:24.720
There was no upfront heads up about this.

03:24.720 --> 03:26.840
That could have gone a long way.

03:26.840 --> 03:32.480
And when the community did find out and respond, the conversation was shut down really hard.

03:32.480 --> 03:34.000
Threads were closed.

03:34.000 --> 03:37.220
There wasn't really much entertaining of the conversation at all.

03:37.220 --> 03:40.440
And you're right, I get this is the vocal minority.

03:40.440 --> 03:44.480
But I feel like that minority is also the most passionate fan base or the group that's

03:44.480 --> 03:47.920
often pushing the products forward to be better.

03:47.920 --> 03:50.320
They're the ones that are telling companies you need to do better and they're telling

03:50.320 --> 03:52.720
foundations you have to do better.

03:52.720 --> 03:56.840
And when they do that, they also end up being their biggest advocates.

03:56.840 --> 04:01.660
So I think they're a demographic that, while might not be the key target, is probably still

04:01.660 --> 04:03.680
worth listening to for market signals.

04:03.680 --> 04:04.680
Yes.

04:04.680 --> 04:09.800
Well, and just also perhaps in some of the technical advice, say.

04:09.800 --> 04:12.800
Because like you mentioned before, you get this even if you're running on a headless

04:12.800 --> 04:13.800
server.

04:13.800 --> 04:16.920
Maybe there were some other options that if the community had been consulted, you could

04:16.920 --> 04:20.480
have worked this out in some sort of first boot experience that lets you easily check

04:20.480 --> 04:22.680
and add VS code if that was something you're interested in.

04:22.680 --> 04:23.680
I don't know.

04:23.680 --> 04:26.800
The Linux community is very creative and probably could have considered some better options

04:26.800 --> 04:27.800
for this.

04:27.800 --> 04:30.860
This story, though, there's a few things that are notable about it for me.

04:30.860 --> 04:36.280
One of them being, I am not a big proponent of people actually using Raspberry Pi OS on

04:36.280 --> 04:39.720
their Raspberry Pis if they are a general Linux user.

04:39.720 --> 04:44.140
If you're brand new to the category, yeah, they do some stuff in there that make it easier.

04:44.140 --> 04:49.360
If you've run Linux for a couple of years, I think the Raspberry Pi OS might not be the

04:49.360 --> 04:51.160
best OS out there to look at.

04:51.160 --> 04:56.120
And I think it's in part because there's this disconnect between the expectations and priorities

04:56.120 --> 05:00.720
of a Linux enthusiast and the priorities of companies or foundations that are utilizing

05:00.720 --> 05:02.320
Linux for a product.

05:02.320 --> 05:05.120
The foundation, like you say, really just wants something for a kid.

05:05.120 --> 05:09.600
They want something that is approachable by schools, that's approachable by everyday people

05:09.600 --> 05:14.160
and that's a really noble goal.

05:14.160 --> 05:17.200
But it's not quite in line with what Linux users want.

05:17.200 --> 05:21.680
Linux users want an OS that frees people from surveillance, among many other things.

05:21.680 --> 05:23.960
I think that's why this strikes such a chord.

05:23.960 --> 05:28.760
Yeah, it's always tricky when diverse communities come together on the same thing but with somewhat

05:28.760 --> 05:30.680
different objectives.

05:30.680 --> 05:34.920
But thankfully, the Pi is an excellent general purpose Linux device and it's quite easy to

05:34.920 --> 05:35.920
switch out your distro.

05:35.920 --> 05:40.880
Indeed, I've had a lot of success with Ubuntu and Arch on my Pis, but this week, another

05:40.880 --> 05:44.240
flavor of Ubuntu was updated that features Pi support.

05:44.240 --> 05:47.400
Canonical released Ubuntu Core 20.

05:47.400 --> 05:53.160
Ubuntu Core is a trimmed down version of Ubuntu and with this latest version has been rebased

05:53.160 --> 05:56.340
to Ubuntu 2004 LTS.

05:56.340 --> 06:01.080
This release also adds support for full disk encryption, secure device recovery and other

06:01.080 --> 06:04.580
features particularly focused around increased security.

06:04.580 --> 06:07.160
And of course, it's all built on SNAPs.

06:07.160 --> 06:12.040
Even the root file system itself is actually a SNAP that can be upgraded or downgraded.

06:12.040 --> 06:16.400
You could see how useful that is in the context of a product OEM.

06:16.400 --> 06:19.100
It's a version of Ubuntu that's more interchangeable.

06:19.100 --> 06:22.720
It's designed to be supported by hardware manufacturers for many years.

06:22.720 --> 06:27.280
Helped by that is that Canonical provides 10 years of maintenance for Ubuntu Core, which

06:27.280 --> 06:30.760
as you can imagine, pairs nicely with the SNAP system because you can keep running the

06:30.760 --> 06:34.800
same underlying operating system, SNAPs ship their own dependencies built right in so you

06:34.800 --> 06:38.420
can run the latest applications and keep the underlying base the same.

06:38.420 --> 06:42.840
For their part, Canonical says that there are already tens of thousands of industrial

06:42.840 --> 06:47.040
and consumer IoT devices from the likes of Dell, Bosch and others.

06:47.040 --> 06:51.480
Yeah, I know when I was down at Dell a couple of years ago even, they were working on an

06:51.480 --> 06:53.640
earlier version of this for their devices.

06:53.640 --> 06:58.040
They seemed to like it a lot and I think they've just doubled down on that effort.

06:58.040 --> 07:02.880
And speaking of that Pi support, Ubuntu Core also supports the new Raspberry Pi compute

07:02.880 --> 07:06.160
module to boot.

07:06.160 --> 07:07.920
Linode.com slash LAN.

07:07.920 --> 07:13.000
You go to that URL to get a $100 60-day credit towards your new account.

07:13.000 --> 07:16.880
Linode is the largest independent cloud and they're our cloud provider.

07:16.880 --> 07:19.740
We run all of our new infrastructure on Linode.

07:19.740 --> 07:22.640
They are perfect because they have a good mix of technology and price.

07:22.640 --> 07:29.200
They're about 30 to 50% less than the other major cloud providers like AWS or Google.

07:29.200 --> 07:33.200
Have you ever thought about maybe setting up a desktop in the cloud?

07:33.200 --> 07:35.080
Linode totally embraces that.

07:35.080 --> 07:39.140
They have a document on their website that I'll link in the show notes that walks you

07:39.140 --> 07:45.000
through setting up the HTML5 Guacamole VNC client and XFCE and even doing the whole thing

07:45.000 --> 07:46.380
with an SSL certificate.

07:46.380 --> 07:49.180
So everything is nice and secure.

07:49.180 --> 07:51.580
On top of that, on their YouTube channel, they have a video that walks you through how

07:51.580 --> 07:52.580
to do it.

07:52.580 --> 07:56.600
They're on board with you using Linode however you want.

07:56.600 --> 08:01.580
And that's great for me because I have a custom VPN system I had to set up that works with

08:01.580 --> 08:02.880
my LTE router.

08:02.880 --> 08:09.080
It's this crazy custom Linux OS and Linode has a guide on how to get something like that

08:09.080 --> 08:10.900
on a Linode server.

08:10.900 --> 08:14.640
They make it really easy to use if you've never managed a server before with their cloud

08:14.640 --> 08:15.640
dashboard.

08:15.640 --> 08:19.620
But if you know what you're doing, if you want to get under the hood, they're totally

08:19.620 --> 08:21.040
are on board with that.

08:21.040 --> 08:22.340
They're Linux users themselves.

08:22.340 --> 08:27.220
That's how they got into the business back in 2003 before it was even called cloud computing.

08:27.220 --> 08:29.100
They saw where Linux was going.

08:29.100 --> 08:30.320
They use the technology.

08:30.320 --> 08:32.020
They love the technology.

08:32.020 --> 08:33.020
And I really click with that.

08:33.020 --> 08:37.660
On top of that, they've been a big supporter of the community for a long time, making events

08:37.660 --> 08:40.020
like Linux Fest Northwest possible.

08:40.020 --> 08:45.860
And now they're sponsoring independent Linux media and making it possible for a whole group

08:45.860 --> 08:49.060
of creators to give their content away for free.

08:49.060 --> 08:52.740
And you can get in on that action with a $100 60 day credit.

08:52.740 --> 08:55.380
Just go to linode.com slash LAN.

08:55.380 --> 08:56.420
See what Linode is capable of.

08:56.420 --> 09:01.020
With that $100 credit, you can try out object storage, dedicated CPU rigs, GPUs, etc.

09:01.020 --> 09:05.380
I mean, there's a lot you can mess around with and learn and then deploy as your back

09:05.380 --> 09:11.220
end infrastructure, linode.com slash LAN.

09:11.220 --> 09:16.340
This week, Docker announced it has contributed its Docker distribution project to the Cloud

09:16.340 --> 09:18.340
Native Computing Foundation.

09:18.340 --> 09:22.700
If you're not familiar, Docker distribution is the open source code behind the Docker

09:22.700 --> 09:25.940
hub container registry and many other registries.

09:25.940 --> 09:31.020
Yeah, that Docker hub back end became known as the Docker distribution after the team

09:31.020 --> 09:36.660
took on a major rewrite of the original registry code, which was written in Python and it was

09:36.660 --> 09:38.820
a really early rough design.

09:38.820 --> 09:43.820
This new version is written in Go and it's been designed to be an extensible library

09:43.820 --> 09:44.820
of sorts.

09:44.820 --> 09:48.460
Different back ends and subsystems could be designed to use it.

09:48.460 --> 09:50.500
So why is Docker doing this?

09:50.500 --> 09:55.580
Well, they address that in their announcement and say that there are now many registries

09:55.580 --> 10:00.460
out there with a lot of different companies and organizations providing registries internally

10:00.460 --> 10:02.580
or offering them as a service.

10:02.580 --> 10:08.180
Essentially, it's just become a confusing mixture of different Docker registry forks.

10:08.180 --> 10:12.680
Many of these are based on the code in Docker distribution, but have small forks and changes

10:12.680 --> 10:16.360
that they were not contributing back upstream.

10:16.360 --> 10:20.520
Docker hopes to make the project an industry wide collaboration with this move.

10:20.520 --> 10:24.160
This is also why they chose to host it in the Cloud Native Computing Foundation, known

10:24.160 --> 10:29.220
as the CNCF and is sort of a neutral place for cloud tooling used across different companies.

10:29.220 --> 10:35.800
Yeah, and you also kind of have to assume this is a play to stay relevant, right?

10:35.800 --> 10:38.700
We're looking at a lot of different ways to run containers now.

10:38.700 --> 10:43.920
It's sort of become table stakes for a lot of different application deployment scenarios.

10:43.920 --> 10:49.780
So what do you do when your secret sauce is now built into every sandwich Linux sells,

10:49.780 --> 10:50.780
right?

10:50.780 --> 10:51.780
Like, what do you do as Docker?

10:51.780 --> 10:54.700
I think this is sort of a continuation of the next phase of Docker.

10:54.700 --> 10:57.900
They're no longer necessarily leading the pack and are just trying to stay relevant

10:57.900 --> 10:59.580
and are one of the many players.

10:59.580 --> 11:02.980
I think hoping that this way, at least the code that they've designed can be out there

11:02.980 --> 11:05.740
and useful, even if it's not just in their sandbox.

11:05.740 --> 11:10.260
Well, and you could see how they still have some influence in this capacity.

11:10.260 --> 11:15.140
They still have name recognition, they're still recognized for having some really good

11:15.140 --> 11:18.440
thought and ideas in this space.

11:18.440 --> 11:21.540
So I think this is something that plays well to that strength.

11:21.540 --> 11:26.740
The project is going to drop the Docker moniker and just be called distribution and it's going

11:26.740 --> 11:27.740
to be available on GitHub.

11:27.740 --> 11:30.460
Of course, we'll have a link in our show notes.

11:30.460 --> 11:36.100
And as of now, the distribution project has been accepted into the CNCF sandbox, but they

11:36.100 --> 11:39.420
know what they're doing and they consider the project to be pretty mature.

11:39.420 --> 11:41.700
They're hoping it just moves to incubation shortly.

11:41.700 --> 11:45.380
It's got these stages it has to go through.

11:45.380 --> 11:49.840
We learned this week that Google is funding a project at the Internet Security Research

11:49.840 --> 11:54.900
Group, the folks behind Let's Encrypt, to port a crucial component of the Apache web

11:54.900 --> 11:57.300
server from C to Rust.

11:57.300 --> 11:58.660
Oh yeah, of course.

11:58.660 --> 12:00.700
This plan here is it's looking pretty good.

12:00.700 --> 12:04.740
They're going to develop a module called mod TLS, nice and simple.

12:04.740 --> 12:10.100
It'll be based on Rust TLS, which is an open source Rust library developed as an alternative

12:10.100 --> 12:12.660
to the C based open SSL project.

12:12.660 --> 12:17.460
Yeah, Apache strikes me as a pretty good candidate for this work since it's got a modular design

12:17.460 --> 12:21.420
already and that should hopefully make it possible to just easily replace those individual

12:21.420 --> 12:25.180
components and modules without having to rewrite the whole dang thing.

12:25.180 --> 12:29.300
But all the Rust hype aside, this actually does seem like a great fit.

12:29.300 --> 12:33.260
Rust was designed as a memory safe programming language and it comes with protections against

12:33.260 --> 12:38.300
memory management issues that have often resulted in security flaws, which that sounds like

12:38.300 --> 12:42.500
a that sounds like great protections for a TLS library.

12:42.500 --> 12:46.500
And memory safety vulnerabilities have dominated the security field for the past decade.

12:46.500 --> 12:48.380
They've been no joke.

12:48.380 --> 12:52.820
They've been used to take over entire systems, desktops, IoT devices and so on.

12:52.820 --> 12:57.160
I mean, a great example of that is the pseudo vulnerability we were just talking about last

12:57.160 --> 12:58.160
episode.

12:58.160 --> 12:59.160
Yep.

12:59.160 --> 13:03.600
And just to put a little more data behind that, Microsoft said in 2019 that the percentage

13:03.600 --> 13:10.880
of memory safety issues patched in its own software had hovered around 70% of all security

13:10.880 --> 13:14.340
bugs for the past 12 years.

13:14.340 --> 13:15.340
That's just huge.

13:15.340 --> 13:16.340
That's damning.

13:16.340 --> 13:18.540
Overall, this is a pretty interesting experiment.

13:18.540 --> 13:20.300
I mean, it's a good test candidate.

13:20.300 --> 13:21.300
See how it works.

13:21.300 --> 13:22.860
TLS is a good fit.

13:22.860 --> 13:27.780
And if it goes well, I mean, I would expect to see more module conversions in the near

13:27.780 --> 13:28.780
future.

13:28.780 --> 13:33.980
I mean, I'm starting to wonder if this isn't some sort of slow rolling Rust takeover.

13:33.980 --> 13:38.160
There's even some great arguments for just writing kernel modules in Rust.

13:38.160 --> 13:42.500
And of course, it can never seem to get enough love over on the Coder Radio show.

13:42.500 --> 13:44.780
It also seems borne out by the data.

13:44.780 --> 13:50.220
Last year, Rust broke into the Teobi index top 20 list of the most popular programming

13:50.220 --> 13:54.380
languages, and it's already been voted the most loved programming language on the Stack

13:54.380 --> 13:59.940
Overflow Developer Survey for the last five years.

13:59.940 --> 14:02.060
Linux.ting.com.

14:02.060 --> 14:05.700
Today's episode is brought to you by an all new Ting.

14:05.700 --> 14:07.340
Ting is now a smarter choice for everyone.

14:07.340 --> 14:12.400
I've been a customer forever, and it's never been a better time to switch to Ting.

14:12.400 --> 14:13.460
It's a smarter choice.

14:13.460 --> 14:16.940
You can get talk, text and data for just $10 a month.

14:16.940 --> 14:20.420
Limited plans starting at $15 and unlimited plans at $45.

14:20.420 --> 14:26.100
And if you use two gigs or 20 gigs, there's a perfect Ting plan for you and the fam.

14:26.100 --> 14:30.780
And no need to worry, even with all these changes, the only thing that's really going

14:30.780 --> 14:34.100
to be noticeable to you is a lower monthly phone bill.

14:34.100 --> 14:39.220
You still get access to Ting's award winning customer service with nationwide LTE and 5G

14:39.220 --> 14:43.020
coverage, and no contracts ever.

14:43.020 --> 14:48.580
Ting mobile customers can now choose from three different plans based on your data needs.

14:48.580 --> 14:53.640
And with three nationwide networks to choose from, I'm currently on Verizon, it's never

14:53.640 --> 14:55.780
been a better time or simpler to switch to Ting.

14:55.780 --> 14:59.580
Pretty much any phone will work with Ting with those different networks.

14:59.580 --> 15:05.460
So start by going to linux.ting.com, check out your current phone, create an account

15:05.460 --> 15:07.820
and pick the plan that's just right for you.

15:07.820 --> 15:12.620
Ting will then send you a SIM card that you pop in your phone and activate within minutes.

15:12.620 --> 15:16.900
Cutting your phone bill in half has never been easier with Ting's mobile plans.

15:16.900 --> 15:19.420
Get talk, text and data for only $10 a month.

15:19.420 --> 15:22.820
If you're like me and you can use Wi Fi to sync your podcasts and your music, this could

15:22.820 --> 15:24.800
be an incredible way to save time.

15:24.800 --> 15:26.660
The next generation of Ting mobile is here.

15:26.660 --> 15:27.660
See how much you could save.

15:27.660 --> 15:29.940
Go to linux.ting.com.

15:29.940 --> 15:33.740
And a big thank you to Ting for sponsoring Linux Action News.

15:33.740 --> 15:40.540
In a milestone of sorts, Alma Linux, the open source enterprise level Linux distribution

15:40.540 --> 15:46.500
created as an alternative to CentOS, has been released in beta with most Red Hat Enterprise

15:46.500 --> 15:47.980
Linux packages available.

15:47.980 --> 15:51.060
Indeed, this is one of the first ones of these out of the gate.

15:51.060 --> 15:54.460
And Alma Linux is binary compatible with RHEL.

15:54.460 --> 15:57.020
You'll recall that they're backed by Cloud Linux.

15:57.020 --> 16:01.380
They've infused the project with a $1 million annual sponsorship.

16:01.380 --> 16:05.300
As promised, the main development and maintenance were done by the Cloud Linux team.

16:05.300 --> 16:09.900
And now we appeal to the community for its contributions, writes Cloud Linux's founder

16:09.900 --> 16:12.180
and CEO, Igor Seletski.

16:12.180 --> 16:13.900
Yeah, I can understand.

16:13.900 --> 16:16.500
I mean, it's a big undertaking.

16:16.500 --> 16:20.300
This is named after the project, is named after the Latin word for soul.

16:20.300 --> 16:22.900
So it's Alma Linux, is that what it is?

16:22.900 --> 16:23.900
I believe so.

16:23.900 --> 16:24.900
Yeah.

16:24.900 --> 16:28.020
And they're kind of just coming, they're just kind of saying now to the community, come

16:28.020 --> 16:29.020
on in.

16:29.020 --> 16:30.660
We've created this thing.

16:30.660 --> 16:33.820
Come on in and let's work together on it.

16:33.820 --> 16:37.020
I think that's probably a good message.

16:37.020 --> 16:41.140
It's interesting, though, because Rocky Linux is starting from that position, that before

16:41.140 --> 16:45.140
there's even a distribution shipping of any sort, they're starting with the community

16:45.140 --> 16:46.140
position.

16:46.140 --> 16:47.140
Right.

16:47.140 --> 16:50.220
Whereas this effort is more of a let's hurry up, get some up over the wall, and then we'll

16:50.220 --> 16:52.420
slowly let the community in.

16:52.420 --> 16:55.220
And there's probably valid reasons to do both of them.

16:55.220 --> 16:59.940
But as we watch these different CentOS alternatives emerge, these are going to be the interesting

16:59.940 --> 17:00.940
differences.

17:00.940 --> 17:03.980
And like you said, it is a milestone of sorts that they were the first.

17:03.980 --> 17:08.560
We should note that the finalized source code is not yet available, though that's expected

17:08.560 --> 17:13.620
to arrive once there's actually a stable release after some feedback from the community.

17:13.620 --> 17:15.980
I'm actually thinking I'm going to throw this in a VM.

17:15.980 --> 17:20.340
I almost did it before the show, but I think I'll throw it in a VM afterwards after we

17:20.340 --> 17:23.100
get done tonight and then just get a sense of it.

17:23.100 --> 17:26.420
I'm not expecting much difference, but might as well start looking now.

17:26.420 --> 17:28.300
Well, you know, you should write this down.

17:28.300 --> 17:30.100
They have their own bug tracker set up.

17:30.100 --> 17:33.440
So if you do run into any issues, there'll be a link in the show notes and you can go

17:33.440 --> 17:37.220
report them and hopefully get them addressed before that stable release.

17:37.220 --> 17:41.620
While you're going through those notes, check out a link to Hector Martin's patch.

17:41.620 --> 17:47.100
It's a series of patches that bring up initial support for Linux on the Apple M1 SoC that's

17:47.100 --> 17:52.620
used in the mini MacBook Pro and MacBook Air models in 2020.

17:52.620 --> 17:56.460
Something that really strikes me about this, Wes, is there was some esoteric hardware challenges

17:56.460 --> 17:57.460
he had to solve for.

17:57.460 --> 18:01.300
And that's really what is worth reading if people are interested at all in this.

18:01.300 --> 18:04.540
Yeah, I mean, it's both a patch set to try to get this stuff working and also something

18:04.540 --> 18:06.460
of an explorer's notes, right?

18:06.460 --> 18:10.340
He's got his hands on this hardware, started playing with it and figuring out what is Apple

18:10.340 --> 18:11.540
actually doing in there?

18:11.540 --> 18:14.260
Yeah, and there's some interesting discoveries.

18:14.260 --> 18:16.340
This is going to be a long process.

18:16.340 --> 18:21.060
But what struck me about the way Hector Martin has put all this together is he knows what

18:21.060 --> 18:22.060
he's doing here.

18:22.060 --> 18:28.220
He knows how to send a series of patches and information upstream to the maintainers.

18:28.220 --> 18:30.940
And he's got a lot of source documentation.

18:30.940 --> 18:34.940
He talks a little bit about their project and it's just packaged really well.

18:34.940 --> 18:35.940
Nicely broken down.

18:35.940 --> 18:38.420
Yeah, you can tell he's gone through this process before.

18:38.420 --> 18:41.380
And of course, part of the battle is actually making the stuff work.

18:41.380 --> 18:45.660
But the other half, maybe more than half sometimes, is getting that working code into a shape

18:45.660 --> 18:48.900
that's acceptable to the upstream kernel community because they're going to be the ones helping

18:48.900 --> 18:51.260
to maintain it in the future if it gets merged.

18:51.260 --> 18:54.380
Yeah, and we wonder where Corelian will fit in with all of this.

18:54.380 --> 18:58.620
But ultimately, this is the beautiful thing about free software is it's all going to go

18:58.620 --> 19:00.460
upstream.

19:00.460 --> 19:03.000
And that's where the support will land, ultimately.

19:03.000 --> 19:07.060
They can stage this in their downstream projects, that's something Hector's doing, and they're

19:07.060 --> 19:08.440
doing that pretty successfully.

19:08.440 --> 19:11.800
But ultimately, the goal is for mainstream support.

19:11.800 --> 19:13.580
And we've waffled a bit on this show.

19:13.580 --> 19:14.980
Is it a good idea or a bad idea?

19:14.980 --> 19:17.280
Like I think a lot of our listeners have.

19:17.280 --> 19:23.740
But at the end of the day, I'm always a fan of Linux being able to breathe life into older

19:23.740 --> 19:25.020
hardware.

19:25.020 --> 19:28.700
Even if this becomes something where he's chasing support, although Hector thinks once

19:28.700 --> 19:32.300
he gets the M1 figured out, it's not like the M2 is going to be some radically different

19:32.300 --> 19:33.300
CPU.

19:33.300 --> 19:35.600
It's probably going to be a lot of similarities there.

19:35.600 --> 19:39.020
Hector's actually feeling very positive about future support.

19:39.020 --> 19:45.280
But even if we could just get legacy support and pump life into an old machine or get somebody's

19:45.280 --> 19:49.320
data off of a failed box, I feel like it's a worthwhile project.

19:49.320 --> 19:54.020
My only question is how many of these patches have to get merged before we see you picking

19:54.020 --> 19:55.620
up an M1?

19:55.620 --> 19:58.500
It's got to be a pretty smooth experience.

19:58.500 --> 20:04.000
Although I am somebody who really does appreciate performance and a smooth system, and that's

20:04.000 --> 20:07.340
like the number one thing people say when they write into the speaking to Koda radio,

20:07.340 --> 20:11.360
when they write into Koda radio, they're always telling me about how smooth and fast everything

20:11.360 --> 20:12.360
is.

20:12.360 --> 20:13.460
I could really get down on that.

20:13.460 --> 20:14.980
I think that'd be wonderful.

20:14.980 --> 20:19.940
For me, I think I can get most of the way there with technology available to us today.

20:19.940 --> 20:27.180
You know, Ryzen system, maybe a 120, 140 Hertz screen, dedicated GPU, a fast disk.

20:27.180 --> 20:29.220
And I can have pretty good performance.

20:29.220 --> 20:34.180
I'm not really feeling the need to get an M1 box to have ultimate performance.

20:34.180 --> 20:41.520
That's one of the things I kind of like about X86 and that ecosystem is you could today

20:41.520 --> 20:43.880
build a box that's faster than an M1 Mac.

20:43.880 --> 20:46.580
You could do it for a couple thousand dollars.

20:46.580 --> 20:51.020
Most laptops and desktops are maybe just, maybe not like these performance machines,

20:51.020 --> 20:54.820
but you could really build a monster X86 system.

20:54.820 --> 20:55.900
I always liked that capability.

20:55.900 --> 20:58.260
Yeah, you can put whatever you want in there.

20:58.260 --> 20:59.260
Choose how much RAM.

20:59.260 --> 21:00.260
No, no limits.

21:00.260 --> 21:01.260
Yeah.

21:01.260 --> 21:02.260
Isn't that crazy?

21:02.260 --> 21:03.260
Isn't that crazy?

21:03.260 --> 21:07.660
So it's not really calling to me just yet, but I could definitely see one day loving

21:07.660 --> 21:12.380
the fact that system rescue CD boots on this thing and I can recover files from my mom.

21:12.380 --> 21:15.180
That actually is the totally reasonable use case for me.

21:15.180 --> 21:19.320
The other part I like about all this is that Hector Martin's been doing some coding live

21:19.320 --> 21:20.980
streams over on YouTube.

21:20.980 --> 21:24.080
And if you're at all interested in seeing the setup, you know, he's using a lot of plasma

21:24.080 --> 21:26.540
technology in his day-to-day dev flow.

21:26.540 --> 21:30.900
So that's just neat to see and it's an interesting, you know, access to this sort of stuff that

21:30.900 --> 21:32.900
only happens in open source.

21:32.900 --> 21:35.980
It's an interesting journey that we've been following and that probably is the other reason

21:35.980 --> 21:39.800
why I would maybe suggest checking out the link in the show notes because we follow this

21:39.800 --> 21:43.680
from concept now to upstream patch submission.

21:43.680 --> 21:45.280
That's pretty cool.

21:45.280 --> 21:48.380
That's one of the things I love about covering these stories and covering open source in

21:48.380 --> 21:50.380
general is we can actually follow something like that.

21:50.380 --> 21:55.320
So go to LinuxActionNews.com slash subscribe for all the ways to get new episodes every

21:55.320 --> 21:56.460
single week.

21:56.460 --> 21:59.740
And don't be a stranger LinuxActionNews.com slash contact.

21:59.740 --> 22:03.300
And if you're looking for your next podcast to listen to check out JupiterBroadcasting.com

22:03.300 --> 22:04.860
for all the great shows.

22:04.860 --> 22:09.740
We'll be back next Monday with our weekly take on the latest Linux and open source news.

22:09.740 --> 22:25.580
Thanks for joining us and we will see you next week.


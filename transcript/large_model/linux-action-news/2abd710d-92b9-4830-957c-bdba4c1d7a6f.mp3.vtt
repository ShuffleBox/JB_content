WEBVTT

00:00.000 --> 00:16.560
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

00:16.560 --> 00:21.720
This is episode 90, recorded on January 27th, 2019. I'm Chris.

00:21.720 --> 00:22.720
And I'm Joe.

00:22.720 --> 00:28.240
Hello, Joe. It's good to be connected with you and on a particularly busy week for you.

00:28.240 --> 00:33.760
Yeah, we launched a new show this week hosted by me and Jason Evangelo called Choose Linux.

00:33.760 --> 00:39.280
Congratulations, Joe and Jason. This show has already received a ton of great feedback.

00:39.280 --> 00:42.640
And I think listener Jacob summed it up beautifully. He said it isn't just a new show.

00:43.280 --> 00:49.920
It's a fresh take on a great subject. And you mixed with Jason is an excellent pairing because

00:49.920 --> 00:54.160
Jason's coming into this fresh. He recently switched to Linux about six months ago. And of

00:54.160 --> 00:58.000
course, you've been using Linux for more than a decade. You're sort of set in your way. So

00:58.000 --> 01:05.920
it's it's optimist versus, we'll say pragmatist. That's one way to put it. Yeah. But it's really

01:05.920 --> 01:10.160
blended well, it's not confrontational. And for somebody like me, who's been using Linux for a

01:10.160 --> 01:16.240
really long time, it's actually really beneficial to hear these fresh perspectives, especially since

01:16.240 --> 01:21.120
Linux has changed so much since I joined. So I really enjoyed episode one choose Linux show,

01:21.120 --> 01:23.760
if you guys want to check it out. And congratulations, Joe.

01:23.760 --> 01:26.960
Yeah, thanks. It was a lot of fun that first episode and we'd be doing it every two weeks.

01:26.960 --> 01:31.040
So yeah, choose Linux dot show, check it out. Well, and speaking of Jason Evangelo,

01:31.040 --> 01:36.320
he starts off the news this week with a story about steam for Linux now letting you play

01:36.320 --> 01:41.360
other Windows games that are outside of steam. So wrap your head around this for a moment.

01:41.360 --> 01:48.640
You grab a game from gog.com. You can now execute it using steam to play the game with proton.

01:49.360 --> 01:52.240
If you're new to the show, that sentence probably doesn't make any sense.

01:52.240 --> 01:57.280
Yeah, I suppose we should back up and explain that proton is this compatibility tool that

01:57.280 --> 02:02.560
valve paid to have developed that's based on wine that allows you to play Windows versions

02:02.560 --> 02:08.160
of steam games. Now being able to play games that are not coming from steam, that seems very strange

02:08.160 --> 02:13.680
to me that they would enable this. It's good. It's excellent for gamers who want to play Windows

02:13.680 --> 02:19.040
games that aren't available natively on Linux. But it just seems like a very strange play from

02:19.040 --> 02:23.840
valve to allow this to happen. Yeah, it is a bit unexpected, isn't it? Maybe after all,

02:23.840 --> 02:28.960
it's their investment into proton. And so it could be their secret sauce that only

02:28.960 --> 02:34.160
they make user friendly. But it was possible for on the command line, you just kind of had to go

02:34.160 --> 02:38.800
dig around. I even linked to a tutorial weeks ago and Linux unplugged that would let you run games

02:38.800 --> 02:45.920
and office apps and things like that using proton. So it wasn't a momentous amount of work. It is an

02:45.920 --> 02:50.640
indication, I think, that they're trying to make an overall investment in Linux as a gaming platform.

02:51.200 --> 02:55.680
And at the end of the day, it means you're still opening up steam and you're still in that steam

02:55.680 --> 02:59.920
ecosystem. Yeah, that is true. And it'd be the same of steam OS if that ever makes a comeback.

02:59.920 --> 03:05.200
So I can see why they've done it from that point of view. But this really is just the perfect time

03:05.200 --> 03:10.960
to get into Linux. You can see why people like Jason have got this enthusiasm. There just seem

03:10.960 --> 03:17.120
to be fewer and fewer barriers now to get into Linux. And it goes back to over a year ago when

03:17.120 --> 03:23.040
you were talking about the difference between the pragmatists and the idealists. This is really

03:23.040 --> 03:28.480
pragmatic stuff. This is not free software we're talking about here. But people who are getting

03:28.480 --> 03:34.480
into Linux for the first time, probably don't really care about that. And I'd prefer people

03:34.480 --> 03:38.640
to be using Linux and proprietary software on top of that than to be running a completely

03:38.640 --> 03:43.520
proprietary stack in Windows or Mac OS. Oh, absolutely. And if you think about it,

03:43.520 --> 03:48.960
it is open source software that is enabling this proton and wine. That's all open source.

03:49.520 --> 03:56.880
And Vulkan is a standard, an open standard. So it might be commercial games that are running on top

03:56.880 --> 04:02.480
of this stack. But the stack itself is open source. And I know that when I switched to Linux,

04:02.480 --> 04:09.440
the very first applications I needed to run were Microsoft Office, like Outlook and Word and Excel.

04:09.440 --> 04:14.960
So that way I could keep up with the other people in the office. And it wasn't until later that I

04:14.960 --> 04:19.520
started to appreciate that it was all free software underneath that was making it possible for me to

04:19.520 --> 04:24.880
do that. And later on, when I did make that connection, I had an enormous amount of

04:24.880 --> 04:29.120
appreciation and respect for that free software because I understood what they were enabling.

04:29.120 --> 04:33.920
So at least in my case, that kind of backwards way into the free software world ended up giving

04:33.920 --> 04:38.400
me a really deep appreciation for free software once it all clicked. Yeah, hopefully that'll be

04:38.400 --> 04:43.840
the case for people like Jason. And with the new Wine 4.0 release, it's going to be even easier to

04:43.840 --> 04:52.080
run Windows applications. Wine is really moving now. 4.0, it's been about a year of development,

04:52.080 --> 05:00.960
6000 individual changes, including Vulkan support, Direct3D 12 support, official full fledged game

05:00.960 --> 05:06.800
controller support. And for Android users that are attempting to use Wine, there's now high DPI

05:06.800 --> 05:11.040
support. And that's just that's just really skimming the surface. We have the full release

05:11.040 --> 05:14.400
notes linked in the show notes. Yeah, looking through those notes, it seemed to be a lot of

05:14.400 --> 05:20.080
graphical stuff and a lot of gaming related development there, which isn't a huge surprise,

05:20.080 --> 05:24.880
really, given that that is one of the primary uses of it these days. Well, I think we're seeing some

05:24.880 --> 05:30.560
of those Proton fixes and upstream code getting integrated back into mainline Wine, like this

05:30.560 --> 05:36.400
Vulkan support, I'm sure is in part at least due to the work on Proton. And that's, again,

05:36.400 --> 05:41.120
just the beauty of free software. Well, speaking of Windows and Microsoft, there was a story that

05:41.120 --> 05:48.400
came out of a fairly unlikely source this week that surprised a lot of us. If this story pans out,

05:48.400 --> 05:54.000
this could be one of the biggest stories in Microsoft's history. And it's linked because

05:54.000 --> 05:58.640
someone inside the company wanted to update their social profile on LinkedIn. It's just,

05:59.200 --> 06:04.880
I love 2019 already. And the profile in question was a security program manager that was tasked

06:04.880 --> 06:12.000
with, quote, the security of Windows Core OS from malicious actors and code. All right,

06:12.000 --> 06:18.560
so stop right there. We haven't seen any official announcements of any actually of any capacity,

06:18.560 --> 06:24.960
unofficial or official or teases from Microsoft that use the word and branding Windows Core OS.

06:24.960 --> 06:29.760
The core branding has been what Microsoft has used as they've moved their projects to open source

06:29.760 --> 06:34.960
.NET Core, PowerShell Core. So we have seen that branding used before, but we've never seen

06:34.960 --> 06:40.720
Windows Core. Now, moving on from that, that same security program manager then said in his profile

06:40.720 --> 06:46.400
update to, quote, improve the security posture of Windows open source components through initiatives

06:46.400 --> 06:51.600
that investigate vulnerabilities found and establish a process for remediation. So if you connect the

06:51.600 --> 06:56.640
dots between the two, you start to have reason to suspect that Windows Core OS will rely on some

06:56.640 --> 07:02.320
open source components, which brings us to this rumor that there could be some kind of open source

07:02.320 --> 07:06.320
Windows Core. Now, maybe that would be a new project in the case of the other core projects,

07:06.320 --> 07:11.520
or maybe it would be a bundling of existing components. That much isn't clear, but it does

07:11.520 --> 07:17.680
seem like maybe something is in the works here, and it lines up with rumors that have been

07:17.680 --> 07:23.440
circulating for about two years or so. Well, I know it's a bit late in the year to be doing

07:23.440 --> 07:29.200
predictions, but I can almost guarantee that it's not going to be called Windows Core OS because

07:30.080 --> 07:35.280
Red Hat would have some serious words with them if they use the Core OS branding. So I think just

07:35.280 --> 07:41.200
Windows Core, probably. Yeah, maybe. Yeah, I hadn't thought of that. That is a good point.

07:41.200 --> 07:46.480
And what would this be? Would this be the basis of a future version of Windows? Would this be the

07:46.480 --> 07:52.240
basis of Windows Server and Windows Desktop for the next release? There's a lot of questions you

07:52.240 --> 07:56.720
have with that. And what license would they use? MIT, Apache, some weird Microsoft license?

07:56.720 --> 08:02.080
Definitely not GPL. No, I would say the chances of a copy left are very slim. I think almost

08:02.080 --> 08:07.600
certainly some sort of permissive license because there's going to be huge chunks of proprietary

08:07.600 --> 08:12.480
code in there as well. Unless they do come out and completely surprise us and have a completely

08:12.480 --> 08:18.880
open source version of Windows and then just try and sell services on top of that, you never know.

08:18.880 --> 08:24.320
Right. And then there's the whole moral quandary. For people that use open source software and free

08:24.320 --> 08:32.800
software for the moral reasons, what happens when Windows starts to get based on an open core? Maybe

08:32.800 --> 08:38.400
it's just as open to say as a BSD. And what do you do in that scenario if you're using open source

08:38.400 --> 08:43.040
software for moral reasons? That's a question I posed our virtual lug in Linux Unplugged on

08:43.040 --> 08:47.360
episode 285. I asked them, I said, what would you do? And we have Brent who's a professional

08:47.360 --> 08:52.560
photographer. He uses Linux to do photography. And I said, if you could run an open source Windows

08:52.560 --> 08:57.360
desktop and then run proprietary Adobe applications on top of that, would that be tempting? And I want

08:57.360 --> 09:02.160
to turn that around and ask that to you, Joe. Just theoretically, if you could just say this is 10

09:02.160 --> 09:05.760
years down the road, you could install an open source Windows desktop where everything that

09:05.760 --> 09:11.840
shipped off of the ISO image is open source, but then you could install commercial Adobe applications.

09:12.640 --> 09:14.800
Would that be a tempting desktop to you?

09:14.800 --> 09:20.400
Well, I'd have to try it out. And I don't think that it would be necessarily something that I

09:20.400 --> 09:26.800
wouldn't use just because it was Microsoft. If it was properly open source, then obviously people

09:26.800 --> 09:32.560
would be all over it looking for backdoors and problems with it because it just be a great scoop

09:32.560 --> 09:37.680
to find that stuff. So I would trust it if it was properly open source. And then I'd just assess it

09:37.680 --> 09:44.560
on its merits, compare it with Ubuntu and Arch and the various other Linux distros. And if there

09:44.560 --> 09:48.400
was good software support for it, then I would consider switching to it definitely.

09:48.400 --> 09:52.000
Yeah, I think I'm somewhere in between there. I think I am. I think I definitely have to give it

09:52.000 --> 09:58.560
a go and try it and see what they'd come up with. But they'd also have to have iterated the UI

09:58.560 --> 10:03.920
quite a bit for me to like it. I know it works great for some people, but for me personally,

10:03.920 --> 10:10.320
it reminds me of my days doing IT support. And I find it to be a little old school and cumbersome

10:10.320 --> 10:16.400
and like a mix of different UI styles and resolutions and I just don't like it. So it would

10:16.400 --> 10:22.240
also need some iteration there. You know what would be great is the Plasma desktop. And if I could

10:22.240 --> 10:27.200
have everything GPL and maybe if I could have Bash for the terminal prompt, then I'm good to go.

10:29.520 --> 10:33.600
Well, it's all speculation. And I think the chances are that this is much more likely to be sort of

10:33.600 --> 10:41.600
IoT stuff because there's too much legacy with the Windows desktop and the NT kernel. There's so much

10:41.600 --> 10:46.960
software. You can run versions of Photoshop or just all sorts of software from 10 plus years ago,

10:46.960 --> 10:51.840
and it works fine on Windows 10. And to just throw all of that away seems very unlikely unless they

10:51.840 --> 10:57.920
had some sort of wine like compatibility layer, which is not beyond the realms of possibility,

10:57.920 --> 11:03.360
given that they're doing this Windows on ARM thing, which uses translation layers and stuff. So

11:03.360 --> 11:09.440
who knows? You can also see this going the iOS route where they sort of do a reset with Windows

11:09.440 --> 11:16.560
core. And just like you said, it focuses on IoT and ARM type devices at first. And then as the

11:16.560 --> 11:22.880
operating system becomes more feature rich and ARM processors get faster, it could eventually become

11:22.880 --> 11:27.600
the desktop component as well. Like it just it just assumes more roles and responsibilities and

11:27.600 --> 11:33.120
the core remains the same and you build the user land on top of that sort of like it works in Linux

11:33.120 --> 11:39.520
actually. And I could definitely see it going that direction if the industry overall starts switching

11:39.520 --> 11:45.040
to ARM processors for laptops and desktops. You could see them just taking this OS and growing

11:45.040 --> 11:49.920
it over time and not necessarily a full reboot of the Windows code, but a pretty big reset,

11:50.720 --> 11:58.000
maybe a little bit of a house cleaning. It could be long term, the future Windows, or it could just

11:58.000 --> 12:01.600
be absolutely nothing. And if it is the future, then them switching over to blink is the base of

12:01.600 --> 12:06.720
edge means that pretty much all the applications we're going to get will be electrons. So it'll be

12:06.720 --> 12:13.280
pretty much the same as Linux. Man, that stings in like five different ways. But let's bring it

12:13.280 --> 12:18.080
back to the present. Stop talking about the future. And the present is running Ubuntu VMs on

12:18.080 --> 12:22.080
Windows if you want a decent command line experience. Yes, of course, there is the Windows

12:22.080 --> 12:27.360
subsystem for Linux. But now my friends, there's something even a little more powerful. And it's

12:27.360 --> 12:32.880
being brought to you by Canonical's multipass. Yeah, there's now a third way to run Ubuntu on

12:32.880 --> 12:39.760
Windows 10, which is quite strange. And multipass is kind of somewhere in between the subsystem for

12:39.760 --> 12:46.160
Linux, which is not really Linux because there's no Linux kernel. But it's all command line or

12:46.160 --> 12:52.560
hyper V, which is VMs with a GUI. Whereas multipass uses hyper V, but it's all command line

12:52.560 --> 12:57.680
based. So it's much easier to script. But it does have the full kernel, including snaps and things

12:57.680 --> 13:04.960
right, multi pass is using hyper V. So it's a whole proper VM. But it's designed around being

13:04.960 --> 13:09.760
managed from the command line. And you could script it with PowerShell even if you wanted to.

13:09.760 --> 13:15.920
So you really isn't it kind of weird, like Windows 10, it you got three different ways now to enjoy

13:15.920 --> 13:22.320
your Ubuntu. So the subsystem for Linux is fine, unless you need things that the Linux kernel

13:22.320 --> 13:26.320
exposes. That's where we're virtualization comes in. And then it's like, well, what kind of

13:26.320 --> 13:30.560
virtualization do you need? Are you running GUI applications, then you probably want to run this

13:30.560 --> 13:35.840
optimized version of hyper V that's in the store, that canonical worked with Microsoft to integrate

13:35.840 --> 13:41.280
and make the mouse work nice and all that kind of stuff. But if you want to emulate at the command

13:41.280 --> 13:45.920
line to do server side development and things like that, well, that's where multi pass comes in. You're

13:45.920 --> 13:50.320
doing some cloud based development with some CI and CD. That's where multi pass comes in. And it's

13:50.320 --> 13:55.280
just strange that there are three now different ways to use Ubuntu, not to mention you could

13:55.280 --> 14:00.960
install Ubuntu on the PC. So there's, there's really four. The actual tell here is that there

14:00.960 --> 14:05.680
must be a market for it. Because it's not like Microsoft and canonical are just going to jointly

14:05.680 --> 14:11.200
decide to waste time doing this. Like, hey, hey, hey, Mark, how could we burn a few hours? Like,

14:11.200 --> 14:16.480
that's not what's going on here, right? They must be seeing customer demand and saying, okay, well,

14:16.480 --> 14:22.240
let's invest in this area, which means that not only is there a market for the subsystem on

14:22.240 --> 14:27.120
windows, which we weren't even totally sure of at the time, but now looking at it seems obvious,

14:27.120 --> 14:32.240
but there's a market for multiple types of virtualization of Ubuntu on windows.

14:32.240 --> 14:37.760
There obviously is. Don't forget, you can also have VMware or virtual box as well. So you've

14:37.760 --> 14:39.600
just got almost unlimited options now.

14:39.600 --> 14:43.120
Unless you're on Windows S, then you don't get any of this. You can go screw yourself.

14:44.160 --> 14:48.720
You gotta love how they differentiate the products with these fake registry entries and whatnot.

14:49.760 --> 14:53.840
Yeah, well, I've heard it's pretty easy to hack that if you know what you're doing. Of course,

14:53.840 --> 15:00.080
multi pass was available already on Linux and even Mac OS. So it's almost a bit late to the

15:00.080 --> 15:06.160
party with Windows, but there must have been the demand there. And it's just more pragmatism from

15:06.160 --> 15:12.800
canonical. They just seem to be getting closer and closer to Microsoft and more and more ties there

15:12.800 --> 15:18.160
and making my predictions come even closer to becoming true, I think.

15:18.160 --> 15:23.600
Of course, that's where you go. Of course. You know, it is that pragmatism, though. This is

15:23.600 --> 15:28.960
the result of that refocusing is work where you've got leverage. If you've got a

15:28.960 --> 15:34.560
if you've got a large market doing development for cloud servers running Ubuntu on Windows,

15:34.560 --> 15:38.800
you go to where that market's at. The same thing is happening with Ubuntu Core, which has seen

15:38.800 --> 15:44.000
a pretty big update. Ubuntu Core 18 has been released. And like the name implies, it's based

15:44.000 --> 15:50.640
on Ubuntu 18.04 LTS. But the interesting tell in this press release by canonical

15:50.640 --> 15:53.920
is how much they've worked in hand with Dell to develop this.

15:53.920 --> 15:57.120
Yeah, this was actually kind of soft released back in December.

15:57.120 --> 16:01.760
It was released for testing as stable, but now they're making a big song and dance about it as

16:01.760 --> 16:07.440
being the proper release announcement, I suppose. Right. And it might be that Dell just got to

16:07.440 --> 16:11.680
certifying Ubuntu Core for all of their edge gateway platforms. So now is the chance to

16:11.680 --> 16:16.080
announce it now that that milestone has been reached. Yeah, that seems pretty likely. But

16:16.080 --> 16:20.400
they've also said that it's going to be supported for 10 years, asterisk, if you're willing to pay.

16:20.400 --> 16:25.280
Right. So it's kind of in line with the standard 18.04. This is another confirmation that we're

16:25.280 --> 16:30.480
going to see full 10 year support for 18.04, because if they're offering it here on the

16:30.480 --> 16:35.840
Ubuntu Core 18 release, which is based on 18.04, well, the way they accomplish that is by

16:35.840 --> 16:40.160
maintaining 18.04. So while we don't have specifics on how that program is going to work and

16:40.800 --> 16:44.720
fair enough to canonical, we've got a few years, so we don't need specifics yet.

16:44.720 --> 16:49.440
It looks like this is more confirmation. And the wording they use around it, I think, is choice.

16:49.440 --> 16:56.240
I want to read the quote from their press release. It says, Ubuntu Core 18 will receive 10 years

16:56.240 --> 17:02.800
low cost security maintenance. Low cost, Joe. Yeah, low cost. I think it's a case of if you

17:02.800 --> 17:07.280
have to ask, then, you know, you can't afford it. Yeah. And then there was a poll quote in here

17:07.280 --> 17:14.960
they have from Dell's vice president of global IoT and embedded sales. And it goes, we see enormous

17:14.960 --> 17:20.880
interest in customers wanting to take advantage of the built in app store infrastructure to securely

17:20.880 --> 17:25.440
maintain and deliver new functionality at the edge. So the one of the things that really makes

17:25.440 --> 17:31.360
the Ubuntu Core product stand out is it's a very super minimal Ubuntu install. And then the

17:31.360 --> 17:36.960
application and server functionality is mostly provided via snaps. So if you're an IoT vendor,

17:36.960 --> 17:42.720
you bundle your applications that are your secret sauce or your special offering in a snap,

17:42.720 --> 17:47.680
you publish that and then you update these devices via snap packages. So you get the containment,

17:47.680 --> 17:53.920
you get the publishing features of the snap store. But it does mean you're using canonical snap store

17:54.480 --> 17:59.920
to manage your IoT device applications, as far as I know, because there is no open source,

17:59.920 --> 18:05.280
self hosted version of the snap store. So that's the kind of catch to this, I think. But if you're

18:05.280 --> 18:10.240
comfortable as a publisher, publishing through canonical snap store, you're good to go. And I

18:10.240 --> 18:14.480
would think in most cases, commercial vendors are just fine doing that. They prefer having

18:15.040 --> 18:17.760
a commercial contract with a business in place, I would imagine.

18:17.760 --> 18:21.920
Well, yeah, that's the whole point of this. It's a completely managed solution for IoT and edge

18:21.920 --> 18:28.080
devices, that you can just stick them out in the wild. And they'll self update with these snaps.

18:28.080 --> 18:32.000
And if anything goes wrong, they've got rollback functionality that automatically happens.

18:32.800 --> 18:39.120
And so it's just set it and forget it almost. Right. And what jumped out at me was that they're

18:39.120 --> 18:43.200
only using strictly confined snaps here. So it's not like the desktop where you've got classic

18:43.200 --> 18:48.000
confinement, which is just no confinement. This is all about security.

18:48.000 --> 18:52.000
This is a really good package. They've got they've got more going on here than I think any

18:52.000 --> 18:57.920
other Linux vendor does because you've got the ubiquity of Ubuntu. So you have a huge development

18:57.920 --> 19:02.960
community that's already writing software for that platform. It's the most widely deployed Linux in

19:02.960 --> 19:07.360
the world. As far as I know, I know that there's a lot of Red Hat installs. But when you when you

19:07.360 --> 19:12.880
start adding up containers and VPS, I don't think anybody beats Ubuntu. You get support from

19:12.880 --> 19:18.400
Canonical for the release. You get them managing the store. You get the convenience of shipping

19:18.400 --> 19:24.800
software in Snap. So imagine your Backblaze, for example, and you want to offer reliable backup

19:24.800 --> 19:31.040
appliances. You could base it on Ubuntu Core 18. You could deliver the the Backblaze applications

19:31.040 --> 19:36.240
via a snap that you can continuously update. And then you could snap up that same Backblaze

19:36.240 --> 19:42.160
backup client for all of the other appliances in the world based on Ubuntu and Ubuntu desktops.

19:42.160 --> 19:48.400
If you want, you can get a big fat support contract with Canonical and you get 10 years

19:48.400 --> 19:55.360
of OS support. And it's from how you publish the software to the developer bits to how you ship it

19:55.360 --> 20:02.160
is all laid out for you. It's a pretty compelling package. And the alternative is that you have every

20:02.160 --> 20:08.880
single vendor rolling their own system, your TP links, your remote plugs, your iHome systems.

20:08.880 --> 20:14.720
They're all rolling their own Linux with their own application delivery system with their own

20:14.720 --> 20:20.320
package management system complete their own. They're just reinventing almost the entire

20:20.320 --> 20:26.160
distribution for every single one of these IOT devices. And it's not their core competency.

20:26.160 --> 20:30.400
I just it's it's one of these things where I wish I could take these IOT vendors and shake them and

20:30.400 --> 20:38.240
say, look at this, you know? Yeah, if only. It really does go to show that Shotworth has really

20:38.880 --> 20:44.160
focused now on profitability. This is just a further proof of it. As far as I can see,

20:44.160 --> 20:49.920
he's kind of stopped messing around with his own custom desktop, the phone's convergence and all

20:49.920 --> 20:56.880
of that stuff. He's using Grome upstream with some tweaks to be fair on the desktop, but he's

20:56.880 --> 21:02.800
made that job considerably easier and there's still money being made from that. But the focus

21:02.800 --> 21:10.320
has really been on snaps for a long time. And this is why you can just see that this is potentially

21:11.040 --> 21:16.720
a huge growth market for them. And it feels like the other Linux vendors are somewhat missing the

21:16.720 --> 21:23.200
boat here, whereas Canonical have really been putting the work in and getting the underpinnings

21:23.200 --> 21:30.960
right for the last couple of years. And now, as more and more and more of these IOT devices and

21:30.960 --> 21:37.040
edge devices get made and these companies realize that a solution like this actually does make

21:37.040 --> 21:43.120
sense for them to pay money for, then it starts to look very good for Canonical in the kind of

21:43.120 --> 21:48.880
medium term. Well, speaking of upstream for Ubuntu, Debian was in the news in the last week

21:48.880 --> 21:57.520
for a flaw in apt. And as quickly as the flaw got attention, a fix has been released. Yeah,

21:57.520 --> 22:02.480
I thought this was worth mentioning because Debian reacted very quickly here with the fix,

22:02.480 --> 22:08.800
but not only that, they also rerolled the images, which is quite an unusual step for a security fix.

22:08.800 --> 22:14.800
It goes to show how important this was and how critical a security hole we were facing here.

22:14.800 --> 22:20.560
And so they respond all of the images with just that one fix. I really liked Wes's breakdown in

22:20.560 --> 22:27.600
Linux Unplugged 285, linuxunplugged.com slash 285, because we also jumped into the HTTPS stuff a

22:27.600 --> 22:35.760
little bit too. Why? Why does Debian use HTTP and all of that? And Wes is so good at just deep diving

22:35.760 --> 22:38.640
into some of these particular topics. I mean, that's why he's on TechSnap, right? That's what

22:38.640 --> 22:42.480
TechSnap is all about. But so I just basically said, Hey, Wes, go TechSnap on this for me.

22:42.480 --> 22:50.320
And it was good. So I mean, now to see a fix out there. Well, I have a lot of appreciation

22:50.320 --> 22:56.400
for Debian. And I do wonder if the HTTPS thing doesn't stick around, if that conversation doesn't

22:56.400 --> 23:01.040
continue now that this fix is out there. Yeah, I've been reading about this and I do see why

23:02.080 --> 23:08.400
they have chosen to go the non HTTPS route. But I think that ultimately they're going to

23:08.400 --> 23:13.440
have to do that. They do have other mechanisms in place with GPG signing and everything. But

23:14.400 --> 23:18.800
why take the risk? Why not go belt and braces with it? And at least have it as default,

23:18.800 --> 23:22.640
maybe have the option there to turn it off if it's going to cause problems. But I think that

23:22.640 --> 23:27.120
ultimately that's probably the way they're going to go with it. Well, Joe, speaking of knowing the

23:27.120 --> 23:33.440
way things were going to go, ultimately, who didn't see this one coming? It appears that Google

23:33.440 --> 23:38.400
will be making adjustments to the Chromium project to make it harder to block ads. Yeah,

23:38.400 --> 23:43.520
there's been a big stink about this on the internet this week. And I think there's been

23:43.520 --> 23:48.880
quite a lot of click baity headlines and videos saying that it's Google definitely doing this,

23:48.880 --> 23:54.960
whereas in reality, it's a proposal at this stage. It seems fairly likely that it will happen,

23:54.960 --> 23:59.760
but it may not. So I don't think we should be jumping to too many conclusions. And the long

23:59.760 --> 24:04.800
and the short of it is that the way plugins are handled in Chromium, and therefore Chrome,

24:05.840 --> 24:11.680
is going to be tightened up. And that means that ad blockers, less so with adblock plus,

24:11.680 --> 24:17.680
but much more so with ublock origin, they're just not going to work properly. And it's going to be

24:17.680 --> 24:23.360
very difficult for the devs of those projects to make those plugins actually block ads.

24:23.360 --> 24:27.920
And so obviously, everyone's jumping to this conclusion of, well, Google's an ad company,

24:27.920 --> 24:32.560
and therefore they don't want to block ads. They did add a bit of ad blocking to Chrome

24:33.120 --> 24:38.560
fairly recently, but that's very selective blocking. But I don't necessarily believe that

24:38.560 --> 24:43.360
that is the motivation here. Maybe I'm being naive, but I genuinely think it is about making

24:43.360 --> 24:49.760
the browser more secure. And I think that you potentially got just different departments,

24:49.760 --> 24:54.880
and they're not even necessarily thinking about the advertising revenue and everything. I think

24:54.880 --> 25:00.160
it's maybe, maybe, maybe I'm being naive, but I think it is just them wanting to make the browser

25:00.160 --> 25:07.680
better. I think you got two issues going on here. Number one is the way the extensions worked before

25:08.320 --> 25:14.320
in brief is they could intercept network traffic and manage that network traffic before it was

25:14.320 --> 25:20.160
handed off to the Chrome render engine. That causes delay and obviously introduces security

25:20.160 --> 25:27.360
risks because not every Chrome extension is respecting of your privacy. And the flip side

25:27.360 --> 25:31.360
of that is that they can eliminate things from the network stream before it even hits the render

25:31.360 --> 25:36.400
engine. But that also means the render engine is waiting on these plugins to sift through the

25:36.400 --> 25:41.120
network traffic. The Google engineers are looking at this and they're saying to themselves, this is

25:41.120 --> 25:46.560
obviously insecure. Obviously, the way we need to do this is the render engine receives the network

25:46.560 --> 25:51.920
traffic first, and then it hands it off to a plugin. The catch is these plugins, when we hand

25:51.920 --> 25:57.600
them the traffic, they can only have a list of 30,000 items they check for. And after that, we're

25:57.600 --> 26:01.120
going to cut them off because that takes too long. And of course, when you consider the web and

26:01.120 --> 26:05.440
advertising, the list is much, much longer than that. And then to kind of really drill it in,

26:05.440 --> 26:09.920
they said, and we're also not going to let you use this web URL hook that we had where you could

26:09.920 --> 26:15.760
update your list. You can't do that anymore either because of privacy, but that they weren't so clear

26:15.760 --> 26:21.040
on. So you have that happening. And I completely agree with the engineers. It is frankly, a

26:21.040 --> 26:26.400
horrible design to have the traffic be intercepted by the plugins first, because you could have God

26:26.400 --> 26:33.280
knows what in your plugins that could be injecting ads, malware, you name it. Intercepting traffic

26:33.280 --> 26:40.480
goes on and on. Obviously, that's clear. But that was a decision they made seven years ago.

26:40.480 --> 26:45.920
And that's not like they accidentally designed the system that way. They didn't just oops,

26:45.920 --> 26:52.240
this is how it turned out. It was a clear engineering decision. And there are entire

26:52.240 --> 26:57.760
projects and companies now based around that engineering decision. And now Google is going

26:57.760 --> 27:03.280
back to the drawing board and saying, we're redoing the plumbing on this. And you've lost your tap.

27:03.280 --> 27:08.720
Yeah, but sometimes you make bad decisions and then come to regret them. And that's clearly what

27:08.720 --> 27:14.640
has happened here. And is it not fair enough for them to decide, well, actually, maybe we shouldn't

27:14.640 --> 27:19.760
be doing it like this? Yeah, I think it actually is. It absolutely is. And it's probably a step

27:19.760 --> 27:27.120
that they should take for security reasons. I feel like though, I got to tell you, Joe,

27:27.680 --> 27:35.280
I am still not super thrilled about it because we have entered now a realm where so many downstream

27:35.280 --> 27:41.920
projects are based on Blink. And if they make a massive change in Blink, it changes so many

27:41.920 --> 27:49.360
other projects. Opera, Vivaldi, Edge. I mean, it's like the ramifications now are at a whole

27:49.360 --> 27:56.320
other level. And it seems awful damn convenient that they decided to engineer this one way when

27:56.320 --> 28:01.760
they needed as much market share as possible. So yeah, your crazy ad blocking plugins that

28:01.760 --> 28:06.640
fundamentally undermine our revenue model, they're fine. Like who didn't think this was going to

28:06.640 --> 28:11.840
change? Who didn't think one day if Google got enough market share, they were going to flip this

28:11.840 --> 28:17.120
lever the other direction and kick out the ad blockers? I've been expecting this for years

28:17.120 --> 28:22.400
since they launched the browser. I expected this change. And I guess I'm just I'm a little

28:22.400 --> 28:27.200
disappointed and a little bummed out that it actually is coming to fruition. It's actually

28:27.200 --> 28:32.880
happening because it's just the beginning of Google applying the massive leverage they have

28:32.880 --> 28:37.280
now. Are you saying it's a bit like Amazon driving all of the bookstores out of business and then

28:37.280 --> 28:43.440
opening up their own? Yes, it's it's it's exactly like that. That's what's happening here. And all

28:43.440 --> 28:48.320
of us that downloaded and installed Chrome, I'm one of them. I think we all knew deep down what

28:48.320 --> 28:53.840
we were what we were enabling. Yeah. Well, I'm still looking at Firefox. I've got crime installed

28:53.840 --> 28:58.080
for the other thing that means it. But yeah, I got to say you you have one of the most levelheaded

28:58.080 --> 29:03.440
takes on this story. And you are a committed Firefox user. Yeah, because I don't really care.

29:03.440 --> 29:07.120
It's the bottom line. Yeah. And it's somebody who bounces between Firefox and Chrome on a daily

29:07.120 --> 29:12.240
basis. Like I'm a I'm a dual brow. I'm actually a three browser guy. I always have a third browser

29:12.240 --> 29:17.040
on every platform. It's usually gnome web or, you know, epiphany or something like that. But I or

29:17.040 --> 29:24.080
opera or Vivaldi, like I've always got a third browser. So I'm kind of hedging my bets. But at

29:24.080 --> 29:29.360
the same time, I actually think Google should make this change. Not only do we need to lie in the bed

29:29.360 --> 29:34.000
that we've made for ourselves, that's just we that's that's what that's the situation we have

29:34.000 --> 29:39.840
now. But also, this is a proper security change that the former tech snap co host in me can't

29:39.840 --> 29:47.280
help but notice that having plugins intercept web traffic is extremely bad. We should change that.

29:47.280 --> 29:51.520
But as well having multiple browsers, you need to learn to use private windows, man, you can at least

29:51.520 --> 29:57.040
have two Google accounts locked in or whatever. Yeah, if you have a private window open. Mm hmm.

29:57.040 --> 30:01.440
Yeah, I think it's because I used computers back before we had like multitasking and proper like

30:01.440 --> 30:07.600
protected memory and all of that. So I over the many, many decades now that I've been using PCs,

30:07.600 --> 30:12.640
I've I've just ingrained in myself that if something's really important, it has its own

30:12.640 --> 30:18.320
dedicated process. It has like something else can completely collapse. But that thing I'm working on,

30:18.320 --> 30:24.000
that process still lives. And I just I can't get out of that. Even though now web browsers take

30:24.000 --> 30:28.880
many gigs of RAM, I still operate like that. All right, well, let's end with a bit more future

30:28.880 --> 30:34.160
speculation. And it seems that Google are very serious about bringing this to market in one

30:34.160 --> 30:39.680
shape or another. Have you noticed that the future news has accelerated like we're getting more and

30:39.680 --> 30:44.560
more stories about fuchsia, especially when you consider that we first found out about this in

30:44.560 --> 30:49.440
2016. And now we're getting stories like on a weekly basis. And what's developed this week

30:49.440 --> 30:56.400
is Google has hired a 14 year Apple veteran engineer Bill Stevenson, who was rather well

30:56.400 --> 31:03.120
known for being the go to triage and diagnosed person for application framework issues in Mac OS.

31:03.120 --> 31:08.640
He remained in the Mac OS organization for a long stint at Apple. He became the senior engineering

31:08.640 --> 31:14.000
program manager for four years. His responsibilities towards the end of his run was the PM and

31:14.000 --> 31:20.880
technical lead for airplay. Find my Mac iCloud for Mac airdrop and snow leopard. He also worked on the

31:20.880 --> 31:26.880
most recent Mojave release. And he led teams responsible for the build and program management

31:26.880 --> 31:31.280
of Mojave, which is considered to be a fairly decent Mac OS release with all things considered.

31:31.280 --> 31:37.280
So he's somebody who's experienced with shipping large scale operating systems and dealing with

31:37.280 --> 31:42.400
features that have a cloud tie in. Yeah, he seems to be the perfect man for the job, essentially.

31:42.400 --> 31:48.240
And like so many things, LinkedIn is a source of news on this as well. In a post on LinkedIn,

31:48.240 --> 31:52.960
Stevenson specifically said he was joining Google to help bring a new operating system called fuchsia

31:52.960 --> 31:57.520
to market. So that's the phase they're in now. Yeah, it remains to be seen exactly what it's

31:57.520 --> 32:02.960
going to be. It seems much more likely to be like a smart speaker or screen or something than a

32:02.960 --> 32:07.200
phone. But you never know. Yeah, I guess you don't. And something tells me you're going to find out

32:07.200 --> 32:11.360
sooner than later. And we'll let you know. So check back right here. And if you're not subscribed

32:11.360 --> 32:16.080
yet, go to Linux action news.com slash subscribe for all the ways to get new episodes. And you can

32:16.080 --> 32:20.000
go to Linux action news.com slash contact for ways to get in touch with us. And don't forget to

32:20.000 --> 32:25.280
check out the new show go to choose Linux dot show and you can get Episode One there as well as

32:25.280 --> 32:30.800
subscribe to the feeds. And if it's not in your podcast player yet, it will be soon it's populating

32:30.800 --> 32:35.520
in all the different areas. But you can subscribe directly by just putting choose Linux dot show

32:35.520 --> 32:39.840
slash RSS in your favorite podcatcher. We'll be back next Monday with our weekly take on the

32:39.840 --> 32:45.760
latest Linux and open source news. I am at Chris LAS. I'm at Joel Ressington. Thank you for joining

32:45.760 --> 32:58.560
us. And we will see you next week. See you next week.


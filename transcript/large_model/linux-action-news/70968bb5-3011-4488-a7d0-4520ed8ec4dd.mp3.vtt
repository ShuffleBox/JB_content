WEBVTT

00:00.000 --> 00:16.160
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

00:16.160 --> 00:21.920
This is episode 101, recorded on April 14th, 2019. I'm Chris.

00:21.920 --> 00:22.920
And I'm Joe.

00:22.920 --> 00:26.580
Hello, Joe. Good to be connected with you. Let's start things out with a bunch of news

00:26.580 --> 00:29.560
that came out of Google Cloud Next. Let's just bust through some of this.

00:29.560 --> 00:33.680
All right. Let's start with Anthos. I think that's how you say it, which is the new name

00:33.680 --> 00:38.300
of the Google Cloud Services Platform. And it's not just a rebrand, is it?

00:38.300 --> 00:41.780
It's Google Cloud Services Platform, but not as you know it. Google has decided to give

00:41.780 --> 00:48.440
the service a new name, Anthos, but they've also expanded support to AWS and Azure. Yeah,

00:48.440 --> 00:52.980
you heard that right. It's competitors. They have decided that the way to win when you're

00:52.980 --> 00:57.860
the underdog is by supporting the competition. This will allow enterprises to use a single

00:57.860 --> 01:03.640
platform running on Google's cloud to deploy and manage their applications on any other

01:03.640 --> 01:09.140
cloud. The advantage really here is that enterprises get a single bill and have a single dashboard

01:09.140 --> 01:14.920
to manage all of their applications. And surprise, surprise, it's all powered by Kubernetes.

01:14.920 --> 01:18.600
It's Google's attempt at hybrid cloud, isn't it? Maybe they've been looking over at the

01:18.600 --> 01:24.480
IBM Red Hat acquisition thinking, hmm, people don't want to be locked into one particular

01:24.480 --> 01:31.000
cloud service provider. They want to be able to hedge their bets a little bit. And this

01:31.000 --> 01:36.860
seems like a very good strategy to me. It seems like you can't compete with AWS if you

01:36.860 --> 01:40.640
just do the same thing they're doing. You need to do something different. And what better

01:40.640 --> 01:45.120
way than to say, hey, you're not totally locked into us, even though I get the feeling that

01:45.120 --> 01:46.720
you kind of might be.

01:46.720 --> 01:52.720
Well, I mean, if you get hooked on that nice dashboard sauce, I think you would be. Google

01:52.720 --> 01:58.140
says that this is from their Google Cloud CEO, Thomas Korane, I think is how you say

01:58.140 --> 02:02.280
his last name. He said that customers are coming to them and saying, Google, Google,

02:02.280 --> 02:06.720
please give us an integrated solution that solves this problem. It's too much. And let's

02:06.720 --> 02:11.600
be honest, there is probably some truth there because IBM didn't buy Red Hat for no reason

02:11.600 --> 02:18.600
at all. Hybrid, integrated, multi-cloud architectures are supposedly the future. Nobody likes themselves

02:18.600 --> 02:23.960
some lock in unless you're the vendor providing integration across all the services, then

02:23.960 --> 02:28.580
we'll lock into you. That is sort of their pitch here. But they're also kind of enticing

02:28.580 --> 02:33.920
it with a, we're going to have an open source spirit approach to this. And we're going to

02:33.920 --> 02:38.680
deeply integrate products of a number of open source companies and projects. And we're going

02:38.680 --> 02:43.400
to essentially make them first party services, they say. I'll give you an example. Where

02:43.400 --> 02:49.120
AWS has created replacements for some of these, Google is going to integrate the actual product

02:49.120 --> 02:55.880
of MongoDB or Redis Labs or Elasticsearch or many others, Confluent, many others, right

02:55.880 --> 03:01.200
in as first party services. But they're the genuine product that they will be then in

03:01.200 --> 03:05.960
theory creating some sort of financial agreement with and contributing back upstream. And again,

03:05.960 --> 03:11.080
they'll say, you can use us to actually take advantage of these original open source projects

03:11.080 --> 03:16.120
and the multi cloud environment. And you get it all with one bill and one dashboard. Yay,

03:16.120 --> 03:17.120
Google.

03:17.120 --> 03:23.600
And it doesn't leave a bad taste in the community's mouth. Like you have with AWS. Companies like

03:23.600 --> 03:29.440
MongoDB have spoken out very clearly against AWS and some of the practices that they've

03:29.440 --> 03:33.360
been engaging in. And for Google to say, look, we're not going to do that. We're just going

03:33.360 --> 03:38.480
to pay those companies, they're due. And we're going to give you those products exactly as

03:38.480 --> 03:44.560
they are. That just seems a very good strategy. It's probably not from a business point of

03:44.560 --> 03:50.720
view, immediately a good strategy. Otherwise, Amazon would be doing that with AWS. But long

03:50.720 --> 03:57.160
term, it's probably a much better strategy because it just keeps the community on side.

03:57.160 --> 04:02.160
And it really lets Google position this as we are open source first kind of company.

04:02.160 --> 04:06.040
And we're giving back to these projects. You know, it's a it's a good guy Google story.

04:06.040 --> 04:11.840
Yeah, although Anthos itself is not open source, they do mention a lot of open source goodness

04:11.840 --> 04:17.840
there using Kubernetes using all this open source technology. But fundamentally, at least

04:17.840 --> 04:23.920
from what I could find, I couldn't find any source code or license or anything for Anthos.

04:23.920 --> 04:30.000
So it may be made of open source stuff, but ultimately, it itself is not.

04:30.000 --> 04:34.560
What do you think of this name? This Anthos name? You got Azure, of course, you got AWS,

04:34.560 --> 04:40.680
and now you got Anthos. To me, it is. And maybe maybe it's the a name. I'm not sure.

04:40.680 --> 04:46.400
But it just feels like a cheap Azure rip off name. And it's like another version of Google

04:46.400 --> 04:51.920
copying Microsoft. They are the new Microsoft, possibly. I hadn't really thought about it.

04:51.920 --> 04:58.120
It just seemed to be a sort of quite well SEO to name to me. It's not really really

04:58.120 --> 05:03.080
anything else. Really, you don't see the similarity. They're both six letter a names that are for

05:03.080 --> 05:07.680
a generalized cloud platform. Like they couldn't have come up with something else. Google Cloud

05:07.680 --> 05:12.600
Platform, at least then you knew you were getting the Google Enterprise infrastructure.

05:12.600 --> 05:17.040
Like that's awesome. I want that. I want to I want to hire the Google Cloud. That's great.

05:17.040 --> 05:22.160
But now this Anthos. It sounds like a it sounds like a knockoff brand of Azure.

05:22.160 --> 05:29.000
Well, and it also has the same problem that Azure, Azure, Anthos, Anthos.

05:29.000 --> 05:37.560
Oh, good, good. I have heard the most creative pronunciations of Azure, Azure. I mean, all

05:37.560 --> 05:42.480
these kinds of crazy iterations of it. I just try to go by what the people on stage say.

05:42.480 --> 05:43.480
That's what I try to go by.

05:43.480 --> 05:49.400
Well, yeah. And they say Azure, but the word is Azure. But let's not get into that. But

05:49.400 --> 05:54.120
yeah, I suppose it is a bit similar. I hadn't really thought about it. It didn't jump out

05:54.120 --> 05:59.080
at me immediately. But now you've pointed it out. I suppose it is pretty obvious. But

05:59.080 --> 06:03.960
surely the actual service itself is going to do the talking because Azure is something

06:03.960 --> 06:10.000
of an underdog to AWS anyway. And so, you know, they're both fighting for scraps, aren't

06:10.000 --> 06:11.000
they?

06:11.000 --> 06:14.480
Well, I agree with your characterization of their market position. But I would argue with

06:14.480 --> 06:18.800
the scraps thing. Again, I go back to the Red Hat IBM acquisition. I think that was

06:18.800 --> 06:26.240
just such a wake up moment for the community. This is a real thing here. And IBM, I mean,

06:26.240 --> 06:30.960
what the hell do they know, right? But IBM, right? They say 80% of the industry's workload

06:30.960 --> 06:35.000
hasn't moved to the cloud yet. The stuff that's come to the cloud, the 20% of work that's

06:35.000 --> 06:38.740
come to the cloud so far is the easy stuff. Now we've got to move all the hard stuff,

06:38.740 --> 06:43.280
the custom apps, the custom databases, all these really complex things. They've got to

06:43.280 --> 06:48.700
move to the cloud, supposedly. Somebody says that. And that, I guess, is a massively addressable

06:48.700 --> 06:55.880
market. So there could be tons of room for Anthos and Azure and AWS to grow still.

06:55.880 --> 07:00.480
Oh, there's certainly a massive growth potentially in the whole industry. So yeah, I suppose

07:00.480 --> 07:04.800
scraps isn't the right word for it. It was very interesting, though. There's an article

07:04.800 --> 07:10.800
on VentureBeat about how keen Google were to prove that they're very serious and they've

07:10.800 --> 07:17.000
got all these partners who are using their services. And they spent an awful lot of time

07:17.000 --> 07:23.840
on stage talking about these partners. And it feels like they are just trying to prove

07:23.840 --> 07:24.840
their relevance.

07:24.840 --> 07:30.140
Yeah, I think nearly the majority of the time, not quite, but nearly was spent with partners

07:30.140 --> 07:35.120
that were pitching their products, not Google stuff. And I think that's a result of where

07:35.120 --> 07:39.960
Google is at in this entire thing. Now it's their turn to prove that their system and

07:39.960 --> 07:46.320
platform is viable. And one of the best ways to demonstrate that viability is by showcasing

07:46.320 --> 07:51.400
partners that are using them at some large scale. I don't want to give away details,

07:51.400 --> 07:56.400
but I know that there are certain companies out there that Google has contacted and offered

07:56.400 --> 08:02.000
them a very aggressive incentive to switch from AWS to the Google Cloud Platform so they

08:02.000 --> 08:06.840
could use them as a showcase. And it's a very compelling offer. And they're really trying

08:06.840 --> 08:14.000
to establish this baseline of industry adoption. And they wanted to make that case in a big

08:14.000 --> 08:19.480
way. And in typical Google style, they got a little rough on their first try. You give

08:19.480 --> 08:23.480
them a few years, they'll have this thing sorted out. But the first attempt, a little

08:23.480 --> 08:24.480
ham-fisted.

08:24.480 --> 08:29.640
I do wonder what I would pick if I was in that position of having to deploy some serious

08:29.640 --> 08:34.280
infrastructure. I'd probably be more tempted to just use DigitalOcean. I don't know, it

08:34.280 --> 08:40.200
depends how big it was. But AWS is just the name you know. And you know that it's going

08:40.200 --> 08:45.160
to not give you any problems apart from locking, which is the major problem. But if you're

08:45.160 --> 08:49.240
not worried about that, it's just what people go with, isn't it?

08:49.240 --> 08:53.220
I think Google's point, though, is people are worried about that lock-in. And that's

08:53.220 --> 08:57.640
what they're trying to solve here. I mean, this is kind of a big deal in a way. Kubernetes

08:57.640 --> 09:02.960
is allowing them to just create this stitching platform to let you deploy on AWS or let you

09:02.960 --> 09:08.000
deploy on Azure or on their own platform. That's a bigger deal than I think we can fully

09:08.000 --> 09:12.880
appreciate. It's a game changer in a way. It's a market shift, in a sense. And you can

09:12.880 --> 09:17.440
deploy that technology yourself. And by the way, it's all free software. When you take

09:17.440 --> 09:22.380
that all in and what that could mean for future data centers and the way systems are built,

09:22.380 --> 09:23.720
it's a huge deal.

09:23.720 --> 09:28.600
It does feel like something new. And it's certainly a new approach by Google to even

09:28.600 --> 09:34.400
acknowledge Microsoft exists. Like they talked about Azure and they have plugins for VS code

09:34.400 --> 09:37.480
now. That feels new as well.

09:37.480 --> 09:41.560
And probably worth mentioning something not even cloud-related is Android phones will

09:41.560 --> 09:48.180
now act as a security key if you're using Android 7 or above. This is pretty neat. You

09:48.180 --> 09:53.080
can set up now two-factor authentication with your Google account and your Android device,

09:53.080 --> 09:59.340
which will use Bluetooth to provide the authentication token to your PC without having to go through

09:59.340 --> 10:04.000
all of the hassle of creating a Bluetooth connection and pairing it, they claim. Obviously,

10:04.000 --> 10:07.360
they haven't tried this yet. Now, for now, it only works with Chrome, but Google hopes

10:07.360 --> 10:11.680
to turn this into a standard that other browsers and mobile operating system vendors will support.

10:11.680 --> 10:15.160
And the UI is pretty great. The demo that they showed up on stage is you get a two-factor

10:15.160 --> 10:20.960
authentication request, comes down to the Android device, and it prompts you to push

10:20.960 --> 10:25.360
up twice on the volume button. And when you do that, that's your two-factor. It then sends

10:25.360 --> 10:30.600
a token to your PC, which is running Chrome, and logs you into the service. If that actually

10:30.600 --> 10:34.560
took off as a standard and Mozilla was willing to implement it in others, I think that'd

10:34.560 --> 10:39.080
be pretty great. Google has, to their credit, been really forward-thinking on two-factor

10:39.080 --> 10:43.440
authentication for a long time now, pretty much ahead of the rest of the industry.

10:43.440 --> 10:48.120
This comes off the back of Android being certified for the FIDO2 standard. We talked about that

10:48.120 --> 10:53.720
back on episode 95, and we thought that it wouldn't be too long before we saw this stuff,

10:53.720 --> 10:55.920
and here it is only, what, six weeks later.

10:55.920 --> 11:00.560
Yeah, and it's nice that it's like Android 7 and above, so it's available to a good set

11:00.560 --> 11:05.720
of users. Microsoft says that a good set of users are adopting PowerShell, but the growth

11:05.720 --> 11:10.680
is coming on the Linux side of the camp, not PowerShell on Windows.

11:10.680 --> 11:14.360
Yeah, we're talking about PowerShell Core here, and there's a post on the Microsoft

11:14.360 --> 11:21.160
dev blog, and there's a nice chart that makes it look like there's just phenomenal growth

11:21.160 --> 11:28.240
in Linux use. And you look at it and you think, wow, all these Linux users have adopted PowerShell

11:28.240 --> 11:34.000
Core, this is amazing. But then you dig into it a little bit, and it's kind of not quite

11:34.000 --> 11:35.000
true.

11:35.000 --> 11:39.000
Yeah, you know, I even saw a discussion online about, will future distributions ship with

11:39.000 --> 11:44.800
PowerShell as the default shell, replacing Bash? I saw that this week. Well, if you look

11:44.800 --> 11:49.240
at it, there's a couple things going on here. First of all, Windows usage is not growing

11:49.240 --> 11:53.880
as significantly for PowerShell Core because it's simply incompatible with certain scripts

11:53.880 --> 11:58.760
and existing automations that people have written using previous versions of PowerShell

11:58.760 --> 12:05.200
that were unique to Windows. That's why I think Microsoft's going to focus on compatibility,

12:05.200 --> 12:09.680
and it's just going to reunite the products as PowerShell in future versions, but we're

12:09.680 --> 12:15.320
not there yet. But in the meantime, you look at the numbers, and they're nearing 12 million

12:15.320 --> 12:21.040
activations of PowerShell on Linux. Like, that's a real number. There's a lot of people

12:21.040 --> 12:22.040
using this.

12:22.040 --> 12:25.880
I'd say 11 or 12 million is certainly very impressive, and you can see why they want

12:25.880 --> 12:30.800
to tout that, but it's a little bit disingenuous the way they've presented it. It's done well

12:30.800 --> 12:35.760
for them in terms of the PR that they wanted from the Linux and open source community.

12:35.760 --> 12:37.080
So fair play to them.

12:37.080 --> 12:41.800
I could definitely see this as being a godsend. If I was a system administrator of a network

12:41.800 --> 12:45.580
that had a bunch of Windows and Linux machines on the same network, and I wanted to automate

12:45.580 --> 12:50.520
tasks across all of them, PowerShell would be like the best thing ever. And so it doesn't

12:50.520 --> 12:53.960
surprise me that it's getting a bunch of adoption. And I think it's smart of Microsoft to try

12:53.960 --> 12:58.360
to merge those APIs into one common set now. And that's the direction they're going to

12:58.360 --> 13:05.600
take it. In the meantime, Mozilla is focusing on machine learning to triage bugs for Firefox.

13:05.600 --> 13:10.440
Yeah, more good stuff from Mozilla and something really positive to contribute to other projects

13:10.440 --> 13:15.640
as well as sorting out their own. Using machine learning to solve what is quite a big problem

13:15.640 --> 13:21.240
for certainly large open source projects, where you have all of these duplicate bugs,

13:21.240 --> 13:26.920
and they need to be triaged. And that takes so much time for people to do that. And it

13:26.920 --> 13:33.140
doesn't look like it's quite there yet. It's not 100% effective. But it's looking pretty

13:33.140 --> 13:38.000
good, like it's going to get there. And hopefully, it won't be too long before other open source

13:38.000 --> 13:42.200
projects can use this because unlike a lot of machine learning stuff, this doesn't need

13:42.200 --> 13:50.080
tons and tons of GPUs to work. You can get it working with reasonably good CPUs even.

13:50.080 --> 13:53.760
Yeah, just to give you an idea, the training model was just based on two plus years of

13:53.760 --> 13:57.720
bug data, which they've got decades worth. And they said that was around 100,000 bugs,

13:57.720 --> 14:02.280
they did have to go through and massage the data, set it back to a certain state and not

14:02.280 --> 14:06.920
the fixed state and that took some finagling. But around 100,000 bugs was the training set

14:06.920 --> 14:12.720
and that took 40 minutes on a six core machine with 32 gigabytes of RAM. Hey, I've got a

14:12.720 --> 14:18.560
six core machine with 32 gigabytes of RAM. Yeah. Go for Joe, maybe you could feed it

14:18.560 --> 14:24.200
all of your podcast edits over the last decade. I might put myself out of a job better not

14:24.200 --> 14:27.960
do that. Yeah, we'll just do it and don't say anything. That's what you really do. Yeah,

14:27.960 --> 14:32.640
that'd be the promo. So Mozilla says to get this thing rolling, they developed bug bug

14:32.640 --> 14:37.800
a machine learning tool that automatically assigns a product and component for each untried

14:37.800 --> 14:43.200
bug. The whole philosophy here is that if they can get the bugs in front of developers

14:43.200 --> 14:47.240
faster than they get fixed faster. So they send it a whole bunch of data, they trained

14:47.240 --> 14:53.120
it up and it's actually been working decently. They deployed it into production in February

14:53.120 --> 14:59.380
and of this year 2019. And they so far have triaged around 350 bugs. And the thing is

14:59.380 --> 15:03.520
because this is Mozilla, you know it's all open source and that everyone's going to benefit

15:03.520 --> 15:09.000
from it. Apart from pocket, which we're still waiting for, I think they've been pretty good

15:09.000 --> 15:13.680
with this stuff, haven't they? And so they're using all of their money, which I like to

15:13.680 --> 15:17.960
go on about every possible opportunity, but they're using that for something really good

15:17.960 --> 15:22.920
here because I just can't emphasize that enough. It's something that all projects could benefit

15:22.920 --> 15:28.420
from. And the bar isn't like super high here for bug bug. Like there's a few minimum viable

15:28.420 --> 15:32.760
things that it could check off the list that would save developers a ton of time. And Mozilla

15:32.760 --> 15:37.560
is aware of it. Like here's a couple. Identifying duplicate bugs. Think about that. That would

15:37.560 --> 15:42.400
just save so much time. Here's another one. Providing additional automated help for developers

15:42.400 --> 15:47.080
when bug bug detects that things are missing like the steps to reproduce the bug. Saving

15:47.080 --> 15:51.680
them time there. Going back to the user. Getting the steps to reproduce. Or detecting bugs

15:51.680 --> 15:56.160
that might be important. Like something that might be like a very critical thing that needs

15:56.160 --> 16:00.640
addressing immediately and getting it surfaced in front of developers. If bug bug could just

16:00.640 --> 16:05.440
do a few of those things, it would save a considerable amount of administrative work

16:05.440 --> 16:08.400
for bug triaging and developers time.

16:08.400 --> 16:13.480
It's not all been good from Mozilla this week. Well, it depends on your perspective, I suppose.

16:13.480 --> 16:20.200
It looks like they are very much on track to enable DNS over HTTPS by default in Firefox.

16:20.200 --> 16:23.040
But what do you think? Is that a good thing or a bad thing?

16:23.040 --> 16:26.640
Well, I think you're probably one of the few people who thinks it's a bad thing. And I

16:26.640 --> 16:30.320
know why you think it's a bad thing. I don't necessarily disagree. But this has been coming

16:30.320 --> 16:35.240
down the pipe. We knew this was going to happen. We talked about it before. DNS over HTTPS

16:35.240 --> 16:40.760
aims to improve user privacy, security, and the reliability of connections by sending

16:40.760 --> 16:44.120
and receiving DNS using HTTPS.

16:44.120 --> 16:48.480
Yeah, which sounds great, right? Except when you find out who they're partnering up with

16:48.480 --> 16:49.480
to do it.

16:49.480 --> 16:55.600
Yeah, it's been a bit controversial. They are using Cloudflare right now and only Cloudflare.

16:55.600 --> 17:00.360
And this, by the way, will override whatever the DNS is set on your local machine. So your

17:00.360 --> 17:06.400
local host file, any custom DNS you've set up, Firefox will ignore that and use this

17:06.400 --> 17:07.400
service.

17:07.400 --> 17:12.020
Now, the news here this week is Mozilla has published a list of requirements that companies

17:12.020 --> 17:17.640
need to meet if they want to be included as a trusted recursive resolver for Firefox's

17:17.640 --> 17:23.500
new feature. So they are committing to expanding that list. But Cloudflare is the only partner

17:23.500 --> 17:27.840
right now that meets those requirements and will be shipping with this feature, at least

17:27.840 --> 17:28.840
at first.

17:28.840 --> 17:33.760
Well, it's the only partner who says they are meeting those requirements. Color me cynical,

17:33.760 --> 17:38.600
but I just, as I talked about in the recent user error, there's just something about Cloudflare

17:38.600 --> 17:40.280
that rubs me the wrong way.

17:40.280 --> 17:44.040
There's something about not using my local host file that rubs me the wrong way. That's

17:44.040 --> 17:49.080
a quick, simple way for parents to blacklist a few domains on their local computer to make

17:49.080 --> 17:53.640
sure their kids don't go to Facebook or whatever. Just set up Facebook to go to local host in

17:53.640 --> 17:56.400
your host file and problem solved.

17:56.400 --> 18:00.240
You don't need a fancy filtering system that you pay a subscription fee to. And if Firefox

18:00.240 --> 18:05.320
starts ignoring that, well, there goes one of the many tools that parents had on a Linux

18:05.320 --> 18:09.840
system. And that's just one example, because I'm a parent, and there's a lot of... I have

18:09.840 --> 18:13.760
used my host file in the past to set up fake names for my machines when I'm just playing

18:13.760 --> 18:14.760
around with software.

18:14.760 --> 18:19.320
Like, there's all kinds of reasons why the software on my computer should respect whatever

18:19.320 --> 18:23.240
the DNS settings are for my operating system. That's the way computers are built to work.

18:23.240 --> 18:28.520
That's how it should be done. And that's changing, not immediately, but soon, and it will be

18:28.520 --> 18:34.200
the default behavior. They may make a UI setting to turn this off. They haven't yet. But you

18:34.200 --> 18:39.960
can dig around in the config screens, and you can turn it off in there. See, you can

18:39.960 --> 18:44.080
override it, eventually. But it's, you know, it's one more thing now.

18:44.080 --> 18:46.880
Yeah, turn that and smooth scroll off, and I'll be set.

18:46.880 --> 18:49.080
What? Smooth scroll is great. What's your problem with smooth scroll?

18:49.080 --> 18:54.360
Oh, it's just horrible. I can't stand it. First thing I always do when I install Firefox

18:54.360 --> 18:55.360
a new profile, turn that off.

18:55.360 --> 18:59.400
I can't even with you. You're so XFCE. I can't even with you. You turn off all... I actually

18:59.400 --> 19:03.200
kind of see it now. Yeah, it does fit your profile. You turn off all animations, everything.

19:03.200 --> 19:06.200
Yeah. You might be right. You might be right, actually.

19:06.200 --> 19:10.200
Yeah, there are other definitely good things coming to Firefox very soon.

19:10.200 --> 19:13.760
They're taking a stand against fingerprinting, Joe, and crypto mining scripts, like a very

19:13.760 --> 19:18.880
narrow slice of what challenges users today, but important ones. There's a variety of popular

19:18.880 --> 19:23.520
fingerprinting scripts that embed on many web pages out there that are really just designed

19:23.520 --> 19:27.480
to create a fingerprint around your computer and track you. But probably one of the more

19:27.480 --> 19:31.520
popular fun to talk about ones these days are those crypto miner scripts that use your

19:31.520 --> 19:37.200
CPU or your maybe even GPU to mine some currency while you're visiting the old website. Well,

19:37.200 --> 19:42.320
in collaboration with a service called Disconnect, they have embedded in Firefox, or will be

19:42.320 --> 19:48.280
I should say, a compiled list of domains that serve these fingerprinting and crypto mining

19:48.280 --> 19:54.720
scripts. And now in the latest Firefox nightly and beta versions, you can turn this on already.

19:54.720 --> 20:00.080
In Firefox nightly 68 and in beta 67, according to my research, you have that available now.

20:00.080 --> 20:04.320
Yeah, it's been a long time coming, but it's yet another useful feature in Firefox. So

20:04.320 --> 20:06.760
I don't think I can be cynical about this one.

20:06.760 --> 20:10.760
No, not really. It actually does seem like a very good service for average users. And

20:10.760 --> 20:15.760
the language around this, the way Mozilla is talking about it, it sounds like more is

20:15.760 --> 20:19.800
coming. Like there's going to be future expanded blocking that's built into Firefox.

20:19.800 --> 20:24.560
Yeah, always good to see more security and privacy features coming into Firefox. But

20:24.560 --> 20:29.360
security is not something the matrix project can really boast about this week, is it?

20:29.360 --> 20:33.440
That's harsh. That's harsh. Yeah, when you read the public statement, it's like, okay,

20:33.440 --> 20:37.760
not so bad. But then when you dig a little deeper into the story, it's a little more

20:37.760 --> 20:42.140
embarrassing than they're leading on. But the short version is an attacker gained access

20:42.140 --> 20:47.680
to the servers hosting matrix.org. And the intruder had access to the production databases,

20:47.680 --> 20:53.520
which was potentially giving them access to unencrypted message data, password hashes,

20:53.520 --> 20:59.440
and access token. So as a precaution, matrix.org is strongly recommending perhaps forcing you

20:59.440 --> 21:03.280
to change your password. Now, the mistakes that allowed this to happen were fundamental.

21:03.280 --> 21:07.920
I don't think there's any other way to say it. Developers having way more access than

21:07.920 --> 21:14.720
they needed. And basic SSH errors. Well, there's the matrix.org version of the story. And then

21:14.720 --> 21:20.160
there is the bug reports or issues that the attacker actually opened against matrix.org,

21:20.160 --> 21:26.800
which I think totaled in eight. And now they're all deleted. So on their website, matrix writes,

21:26.800 --> 21:30.680
the hacker exploited a vulnerability in our production infrastructure, specifically a

21:30.680 --> 21:36.320
slightly outdated version of Jenkins, home servers other than matrix.org are unaffected.

21:36.320 --> 21:39.640
But when you dig into the story, and we'll have a link in the show notes, you can find

21:39.640 --> 21:44.920
it on archive.org. Still, you will see that the attacker in in in sort of an old school,

21:44.920 --> 21:50.040
almost classy way, although I'm not encouraging this attack, but to the attackers credit,

21:50.040 --> 21:56.360
the individual went and opened issues for all of the different infrastructure vulnerabilities

21:56.360 --> 22:01.280
that they found, including the SSH access, the misconfigured Jenkins stuff, a lot of

22:01.280 --> 22:05.720
the misconfigurations that they documented across the entire network were all listed

22:05.720 --> 22:11.040
out right there in in their GitHub, which they promptly deleted, but we managed to get

22:11.040 --> 22:12.520
a snapshot of before they did.

22:12.520 --> 22:18.120
Yeah, I don't really see any reason to disbelieve them. It all seems quite plausible.

22:18.120 --> 22:22.600
Yeah, and it's common mistakes to make, especially when your focus is on the software, you're

22:22.600 --> 22:26.440
not necessarily infrastructure experts yourself, the infrastructure is a requirement of the

22:26.440 --> 22:30.980
project, not a facilitator of the project. And so sometimes these things just get overlooked.

22:30.980 --> 22:34.880
And I think it's important to keep perspective here on this story. As far as we can tell,

22:34.880 --> 22:40.120
source code and packages have not been impacted. There's still ongoing research to find out

22:40.120 --> 22:43.960
exactly the extent of this. But right now, they're just recommending you change your

22:43.960 --> 22:48.440
passwords. They say no plaintext passwords were leaked, but passwords could still be

22:48.440 --> 22:52.680
cracked because of the hash that they were using. And they also recommend that if you're

22:52.680 --> 22:57.060
using their bridge service, like an IRC bridge, you go change your Nixerv password. There's

22:57.060 --> 23:02.800
no evidence that anything's been breached there. But they recommend changing it.

23:02.800 --> 23:07.280
And they have promised a full postmortem. So I do look forward to reading that. I suspect

23:07.280 --> 23:13.360
it will be a lot of what we already know from these issues that were raised by the attacker.

23:13.360 --> 23:19.720
But it just looks bad for the project. I remember when Linux Mint was compromised, that sort

23:19.720 --> 23:24.600
of really knocked them down in my estimations. And I suppose it shouldn't really because

23:24.600 --> 23:28.280
just because you make a great piece of software doesn't necessarily mean you're good at the

23:28.280 --> 23:32.920
infrastructure stuff. But they kind of go hand in hand in terms of credibility.

23:32.920 --> 23:37.280
Yeah, and you got to imagine it's a tough spot because as a project becomes larger,

23:37.280 --> 23:41.120
it demands more infrastructure, which becomes more complicated, but you don't necessarily

23:41.120 --> 23:46.800
become more of an infrastructure expert. So that's a really rough position to be in. It's

23:46.800 --> 23:47.800
a rock and a hard place.

23:47.800 --> 23:52.520
I think the silver lining here is that once this postmortem comes out, other projects

23:52.520 --> 23:54.880
will be able to read it and learn the lessons.

23:54.880 --> 23:58.480
Too bad the Linux Foundation isn't like spending their money on some sort of like infrastructure

23:58.480 --> 24:03.280
initiative for projects like this, you know? Because this really isn't their core competency.

24:03.280 --> 24:05.640
Yeah, maybe they should put a few quid towards this.

24:05.640 --> 24:09.160
I don't know, Joe, that's not blockchain enough. You got to think Bitcoin here.

24:09.160 --> 24:13.360
Yeah, there's always a solution that involves blockchain. But there's been some potentially

24:13.360 --> 24:18.680
bad news for Bitcoin in the last week, and that is that the Chinese government might

24:18.680 --> 24:20.240
ban mining of it.

24:20.240 --> 24:24.520
Yeah, that would actually be a huge deal for the global Bitcoin community. In recent years,

24:24.520 --> 24:29.440
China has become dominant in not only the manufacturing of the miners, but also in the

24:29.440 --> 24:34.240
operation of the mining pool. Like, buildings dedicated to this. It's a massive operation

24:34.240 --> 24:35.240
over there.

24:35.240 --> 24:40.400
And if this did actually happen, it would have a massive impact on just the whole industry,

24:40.400 --> 24:44.800
I suppose, of Bitcoin. And I saw a lot of articles about this and people getting a bit

24:44.800 --> 24:50.480
excited about it. But if you really dig down into it, China does propose a ban on a lot

24:50.480 --> 24:54.280
of things. And often those things don't actually happen.

24:54.280 --> 25:00.120
Yeah, that's true. In fact, they're just in the seeking public comment phase right now.

25:00.120 --> 25:05.240
However, there have been some recent signs that the Chinese government is souring on

25:05.240 --> 25:11.320
the cryptocurrency sector. In 2017, which was a great year for cryptocurrency, China

25:11.320 --> 25:17.720
banned retail cryptocurrency trading, which did cause some impact on the value of Bitcoin.

25:17.720 --> 25:23.440
And then in January of 2018, the Chinese regulator said that they wanted to see an orderly exit

25:23.440 --> 25:28.580
from the cryptocurrency mining business. I don't actually think this would be a horrible

25:28.580 --> 25:33.120
thing. If we could get some of these people out of the mining market, that would actually

25:33.120 --> 25:37.000
open up opportunities for other people to join in. Maybe it would even lower the difficulty

25:37.000 --> 25:38.880
a bit. It would be really good for Bitcoin.

25:38.880 --> 25:44.480
Yeah, that's what I was wondering, whether it would lower the difficulty or not. Because

25:44.480 --> 25:50.280
maybe it would lower the difficulty temporarily, but then everyone would jump on it. And I

25:50.280 --> 25:53.760
don't know what it would do to the value of it either. I think the value would probably

25:53.760 --> 25:59.720
jump initially, as the difficulty dropped. And it's just there are so many factors with

25:59.720 --> 26:04.000
this. And the thing is, you have to understand that just because you make something illegal

26:04.000 --> 26:06.000
doesn't mean that people don't do it.

26:06.000 --> 26:10.160
That's true. Yeah, we get to watch a real show here with Bitcoin. Not only do we get

26:10.160 --> 26:14.800
to watch people try to figure out how to make money off blockchain, but we get to watch

26:14.800 --> 26:20.720
an open source, math backed cryptocurrency develop around the world. And then we get

26:20.720 --> 26:26.040
to see how all of the different players in the world affected in a way that I don't think

26:26.040 --> 26:31.080
is normally as accessible to us. And the fact that it's all based around free software is

26:31.080 --> 26:32.080
sort of mind blowing.

26:32.080 --> 26:36.880
It is. And the thing that I like about it is that I've got enough of an investment in

26:36.880 --> 26:42.740
it. I think I put 100 pounds in at some point and mined a bit of other cryptocurrency. So

26:42.740 --> 26:50.320
I've invested a tiny bit into it, enough to give me some interest and potentially if it

26:50.320 --> 26:54.960
exploded massively and became worth a million dollars or whatever per Bitcoin, that it would

26:54.960 --> 27:01.260
actually be worth it. But then if it just completely tanks the other way, then you know,

27:01.260 --> 27:05.280
I've wasted a bit of money, but you know, I've spent more than that on nights out.

27:05.280 --> 27:07.440
Yeah, you've got a good show in the meantime.

27:07.440 --> 27:13.020
Yeah, exactly. So either way, it's interesting to me. And I don't know, I think the reality

27:13.020 --> 27:19.000
may well be that it'll just kind of settle somewhere around, I don't know, maybe 10,000

27:19.000 --> 27:23.040
or something. Hang on, am I getting into Bitcoin predictions? I really shouldn't be doing this,

27:23.040 --> 27:24.040
should I?

27:24.040 --> 27:27.120
No. You know, I feel like I got out at a good time. I mostly completely got out. I'm like

27:27.120 --> 27:32.920
you now. I got enough where if it really went crazy, it would be good for me. But if it

27:32.920 --> 27:39.080
completely bottomed out, it would not affect my life. However, I did manage, I feel like,

27:39.080 --> 27:43.360
to strategically spend at the right times. I am in a studio surrounded by equipment that

27:43.360 --> 27:47.320
was all bought with Bitcoin right now. And that was a pretty good investment because

27:47.320 --> 27:52.200
I did not put the amount of money initially in that I spent on all of this stuff. Like

27:52.200 --> 27:57.000
there's a lot of gear in here that is really high end, state of the art stuff that I bought

27:57.000 --> 28:02.160
with Bitcoin. And now I can sit back and continue to use this gear while the value is completely

28:02.160 --> 28:08.240
tanked from when I cashed out. And so that's why I'm really at peace with it now. I got

28:08.240 --> 28:14.360
way more than I initially put into it because I got in around 2011, 2012 and I kind of cashed

28:14.360 --> 28:20.100
out and reinvested that into my business. So I really can't complain. And now I've got

28:20.100 --> 28:25.960
just enough left. Like you say, if it goes up to a million, that's great. If it crashes,

28:25.960 --> 28:29.400
that would be sad, but it's still a hell of an experiment to watch in real time.

28:29.400 --> 28:33.120
Well, we won't spend too much time talking about it, but it's definitely something we're

28:33.120 --> 28:36.560
going to keep an eye on over the coming months and years, I think.

28:36.560 --> 28:40.380
Yeah, we definitely try to find a balance there. But I think looking back at it historically,

28:40.380 --> 28:43.620
it's going to be a fascinating story 10, 15 years from now. So we do want to get it down

28:43.620 --> 28:47.800
on record. Just like every other major story that we'll cover, check out linuxactionnews.com

28:47.800 --> 28:50.760
slash subscribe for all the ways to get new episodes.

28:50.760 --> 28:54.720
And go to linuxactionnews.com slash contact for ways to get in touch.

28:54.720 --> 28:59.700
And great news, the Linux Academy 299 promo for the year is back. Go sign up, lock that

28:59.700 --> 29:04.420
in at linuxacademy.com. It starts the Monday of this week that we're recording.

29:04.420 --> 29:08.120
We'll be back next Monday with our weekly take on the latest Linux and open source news.

29:08.120 --> 29:09.860
I'm at Chris LAS.

29:09.860 --> 29:11.460
I'm at Joe Ressington.

29:11.460 --> 29:13.780
Thank you for joining us and we will see you next week.

29:13.780 --> 29:41.780
See you later.


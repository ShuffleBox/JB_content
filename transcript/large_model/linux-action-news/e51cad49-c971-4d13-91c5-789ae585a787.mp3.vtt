WEBVTT

00:00.000 --> 00:08.960
Hello and welcome to Linux Action News, episode 171 recorded on January 10th, 2021.

00:08.960 --> 00:09.960
I'm Chris.

00:09.960 --> 00:10.960
And I'm Wes.

00:10.960 --> 00:11.960
Hello, Wes.

00:11.960 --> 00:12.960
Let's do the news.

00:12.960 --> 00:17.520
And let's start with a story we previously covered on Linux Action News 143, which is

00:17.520 --> 00:21.600
that LTS versions of Qt aren't going closed source.

00:21.600 --> 00:24.400
Now, it's actually finally happening.

00:24.400 --> 00:28.080
As you might expect, this has gotten a lot of upset in the community, even though we

00:28.080 --> 00:31.080
did know this was coming.

00:31.080 --> 00:32.080
It's kind of important.

00:32.080 --> 00:33.760
Qt has become really important.

00:33.760 --> 00:37.760
I mean, not only is it the basis for the Plasma desktop, but in general, it's an application

00:37.760 --> 00:41.920
framework that's available under an open source and a commercial license.

00:41.920 --> 00:46.980
And it was around a year ago that the Qt company stated its plan to make the LTS releases commercial

00:46.980 --> 00:52.420
only, along with some other changes designed to encourage open source users to contribute

00:52.420 --> 00:54.560
or or buy a license.

00:54.560 --> 01:00.320
Yeah, we learned more about this in a mailing list post from a senior VP over at the Qt

01:00.320 --> 01:06.040
company who wrote that with Qt 6 released and the first patch release coming soon, it's

01:06.040 --> 01:11.980
time to enter the commercial only LTS phase for Qt 5.15 LTS.

01:11.980 --> 01:16.960
All the existing branches remain publicly visible, but they will be closed for new commits.

01:16.960 --> 01:21.680
Now, closing happened on the 5th of January, and they've actually set up a separate internal

01:21.680 --> 01:25.680
repository for any cherry picks and changes that need to go in.

01:25.680 --> 01:28.500
But you'll need a commercial license to get to that.

01:28.500 --> 01:34.880
So in addition to getting the full releases of these additional like 5.15.3 upcoming LTS

01:34.880 --> 01:40.000
patch release, you can also go get individual commits if you need to and if you've paid.

01:40.000 --> 01:44.280
Now, the source code to Qt 5.15 is out there.

01:44.280 --> 01:46.800
It came out in May of 2020.

01:46.800 --> 01:52.480
It remains available for developers to use, but the Qt company themselves won't be making

01:52.480 --> 01:54.640
future additions available for free.

01:54.640 --> 01:59.040
That doesn't mean that open source maintainers can't fix a bug or a security issue that comes

01:59.040 --> 02:00.460
along.

02:00.460 --> 02:06.200
But it does mean until they adopt Qt 6, we essentially have double the work for fixing

02:06.200 --> 02:07.200
bugs.

02:07.200 --> 02:11.660
And I think the core issue here is that essentially Qt 6 doesn't support many of the add on modules

02:11.660 --> 02:14.020
that can be found in 5.15.

02:14.020 --> 02:18.840
There's a lot of cleanup work and refactoring that's still intended to be done for Qt 6

02:18.840 --> 02:19.840
as well.

02:19.840 --> 02:23.160
So it's not really in a state where developers are going to want to adopt it, especially

02:23.160 --> 02:24.800
for something like Plasma.

02:24.800 --> 02:30.600
And much like when Qt 5 came along, it wasn't until like 5.2 or 5.3 that the Plasma desktop

02:30.600 --> 02:32.720
actually started adopting it.

02:32.720 --> 02:34.040
You'll probably see the same thing here.

02:34.040 --> 02:39.540
It's going to take Qt 6.2 or 6.3 before developers are really comfortable maintaining it.

02:39.540 --> 02:42.860
And that means in the meantime, Wes, unless I'm misunderstanding something here, they're

02:42.860 --> 02:47.360
essentially just running on unsupported quote unquote version of Qt.

02:47.360 --> 02:49.000
Well they have to support it themselves at least.

02:49.000 --> 02:50.000
Right.

02:50.000 --> 02:53.400
That's that's the choice is while you're working on getting to the next major release, which

02:53.400 --> 02:56.840
has perhaps some breaking changes, just some new updates, some missing stuff you've got

02:56.840 --> 03:02.440
to provide filler for, you also have to decide, well, am I just not touching anything that

03:02.440 --> 03:03.800
I'm currently running on?

03:03.800 --> 03:05.280
Or are there bugs that need to be fixed?

03:05.280 --> 03:08.940
And if so, that's additional time taken away from development to catch up with the new

03:08.940 --> 03:10.000
major release.

03:10.000 --> 03:13.600
So you've got to wonder, maybe this time around, it'll take even a little longer.

03:13.600 --> 03:16.720
Yeah, so it's not an ideal situation for developers.

03:16.720 --> 03:19.840
For end users, I don't think it's going to really impact you much.

03:19.840 --> 03:23.800
The desktop environment and application developers are going to pretty much insulate you from

03:23.800 --> 03:25.300
this transition.

03:25.300 --> 03:32.600
And one nice thing is Qt 5.15 does a lot of the early work to get your application or

03:32.600 --> 03:35.180
whatever it might be ready for Qt 6.

03:35.180 --> 03:40.120
So if in the meantime, developers spend that time just getting up to Qt 5.15, which is

03:40.120 --> 03:48.060
the current last five series, if they just get in to just decent shape with 5.15, they're

03:48.060 --> 03:52.180
going to be in a really good position to transition to Qt 6 when the community does decide to

03:52.180 --> 03:55.080
make that transition because that early legwork will have been done.

03:55.080 --> 03:56.760
This is all definitely new.

03:56.760 --> 04:00.020
You can tell that in some of the tones on the mailing list and just in the fact that

04:00.020 --> 04:01.540
there are so many unknowns.

04:01.540 --> 04:06.600
Now I'm sure we'll be reporting on this again in future Qt releases.

04:06.600 --> 04:12.280
Switching over to the GNOME and GTK side of the Linux desktop, there's been a lot of feedback

04:12.280 --> 04:15.800
and criticism about changes coming in GNOME Shell 40.

04:15.800 --> 04:20.260
Alan Day has authored a blog post that we will have a link to in the show notes that

04:20.260 --> 04:25.720
addresses a lot of the comments, a lot of the concerns, and shows the latest development

04:25.720 --> 04:27.720
snapshot of what they're working on.

04:27.720 --> 04:31.200
And it's probably worth visiting the show notes for this link if you're interested because

04:31.200 --> 04:33.040
there's a video in bed.

04:33.040 --> 04:37.000
And I think he's really trying to address all of the criticism and kind of explain the

04:37.000 --> 04:39.400
rationale as best he can.

04:39.400 --> 04:41.040
And I think he won me over.

04:41.040 --> 04:46.320
Reading through this, Wes, I feel like the GNOME team is listening and is even kind of

04:46.320 --> 04:49.800
changing what they had planned a little bit to address some of the feedback.

04:49.800 --> 04:55.200
Yeah, I mean, to quote Alan, a good portion of the comments that we've had about the design

04:55.200 --> 04:59.520
reflect concerns about existing workflows being disrupted.

04:59.520 --> 05:04.280
We understand these concerns, and an effort has been made to limit the scale and disruptiveness

05:04.280 --> 05:06.320
of the updated design.

05:06.320 --> 05:10.900
And as a result, the changes that are being introduced are actually quite limited.

05:10.900 --> 05:14.680
Everything about the shell remains the same, except for the overview.

05:14.680 --> 05:15.680
Right.

05:15.680 --> 05:20.840
And he also touches on that they're improving the touchpad gestures, so if you have a laptop

05:20.840 --> 05:26.080
with a touchpad, you'll be able to navigate the GNOME Shell better.

05:26.080 --> 05:29.760
The personalized app grid that's coming, the fact that app icons will be in the window

05:29.760 --> 05:33.840
overview, and they've improved the app titles just in general in GNOME 40, which will show

05:33.840 --> 05:36.800
the full title now when you're hovering over its launcher.

05:36.800 --> 05:40.640
You bring all these improvements together, and I really like what he's talking about.

05:40.640 --> 05:45.640
But here's the fundamental difference between GNOME and Plasma.

05:45.640 --> 05:49.080
If this was a Plasma change, they'd take this feedback in and they'd say, all right, we're

05:49.080 --> 05:51.320
just going to leave both options available.

05:51.320 --> 05:53.400
We're going to default to this new behavior.

05:53.400 --> 05:57.360
But if you already have it set the old way, or you want to set it that way, that's just

05:57.360 --> 05:58.360
fine with us.

05:58.360 --> 06:00.840
And honestly, I think I prefer that.

06:00.840 --> 06:03.800
It is nicer from a user experience perspective.

06:03.800 --> 06:04.800
I get that, right?

06:04.800 --> 06:05.800
You don't have to change.

06:05.800 --> 06:06.800
You don't have to keep up with it.

06:06.800 --> 06:12.520
But on the other side, it can be a major pain, and we also all love to complain when things

06:12.520 --> 06:16.400
go wrong, when things crash, or just when the new features we really do want are delayed

06:16.400 --> 06:21.320
in development, and keeping things nice and trim and, you know, focusing on one way of

06:21.320 --> 06:22.320
doing it.

06:22.320 --> 06:23.560
And that certainly simplifies.

06:23.560 --> 06:25.320
Yeah, I definitely understand.

06:25.320 --> 06:29.680
And it's less like quality testing they have to do and whatnot, because there's different,

06:29.680 --> 06:32.560
you know, there's less code pass, there's less ways for things to be displayed on the

06:32.560 --> 06:33.560
screen.

06:33.560 --> 06:34.560
And it's simpler overall.

06:34.560 --> 06:36.080
I mean, I grok all of that.

06:36.080 --> 06:39.980
But with open source software, I feel like in some cases, we don't always have to make

06:39.980 --> 06:43.500
these dramatic all but all or nothing changes.

06:43.500 --> 06:49.180
If we could rally the support for supporting both ways, and people are willing to contribute

06:49.180 --> 06:53.360
their time, it would be nice if there was a facility or a way for the project to entertain

06:53.360 --> 06:54.360
the idea.

06:54.360 --> 06:58.520
It's not like corporate software development, where everything has to, you know, equal a

06:58.520 --> 06:59.880
certain return on value.

06:59.880 --> 07:02.960
And you can only have so many developers on a project, because otherwise, they're not

07:02.960 --> 07:05.280
getting enough return on that.

07:05.280 --> 07:07.420
And with open source, it's not that way at all.

07:07.420 --> 07:11.240
You could have people that just want to keep something alive, or just want to have a certain

07:11.240 --> 07:12.240
work.

07:12.240 --> 07:15.240
I mean, that's why Maté exists in the first place, right?

07:15.240 --> 07:18.760
And it just seems like we could have that flexibility, and it feels like maybe the plasma

07:18.760 --> 07:21.440
project would be a little more willing to consider that.

07:21.440 --> 07:25.300
But you do open yourselves up to who's going to maintain that, right?

07:25.300 --> 07:30.800
And perhaps if internally, if in the regular contribution community, there were a push

07:30.800 --> 07:33.920
for that, then perhaps you could have that argument.

07:33.920 --> 07:39.320
Right now, Alan notes that, well, they're not planning on supporting keeping it around

07:39.320 --> 07:41.840
the old design at all, mostly because of the work.

07:41.840 --> 07:44.880
So perhaps if people stepped in to contribute that work, that could change.

07:44.880 --> 07:47.840
But there could be community extensions, everyone's favorites.

07:47.840 --> 07:51.940
They do say that they're happy to work with extension developers to help make this happen.

07:51.940 --> 07:56.040
Maybe keep something like a vertical dash of your desktops on the side instead, or where

07:56.040 --> 07:57.840
your icons are.

07:57.840 --> 07:59.680
Those all seem like plausible options.

07:59.680 --> 08:00.940
That's a pretty solid compromise.

08:00.940 --> 08:05.800
If they're willing to be essentially even just non-hostile towards an extension developer,

08:05.800 --> 08:10.240
reverting the behavior, if they don't take that as a slight or an insult to their design,

08:10.240 --> 08:12.240
that's a pretty big win.

08:12.240 --> 08:15.160
And that kind of facilitates what I said, somebody who has the passion could make that

08:15.160 --> 08:17.800
extension and maintain it and problem solved.

08:17.800 --> 08:20.480
I like that they're at least open with the idea.

08:20.480 --> 08:25.240
Also, if you are a crazy user like me and you have a couple of vertical screens, it

08:25.240 --> 08:29.240
appears that they're doing work to make sure all of this new stuff, the overview stuff,

08:29.240 --> 08:31.080
works just fine on vertical displays as well.

08:31.080 --> 08:34.680
I was happy to see that because people have given them a hard time for being so touched

08:34.680 --> 08:35.680
focused.

08:35.680 --> 08:38.560
But when you look at some of these design decisions, it actually seems like it's going

08:38.560 --> 08:41.880
to make it work a lot better as a desktop show.

08:41.880 --> 08:45.940
I think that might be a side benefit of keeping things simple, too, is it's clear here that

08:45.940 --> 08:51.160
they're doing a lot of testing and thinking and exploring and all of that is time constrained.

08:51.160 --> 08:54.140
Where we go from here, though, is they're going to develop this in a branch with the

08:54.140 --> 08:59.680
new design, open it up to testing, have a quote unquote intensive period of bug fixing

08:59.680 --> 09:04.320
and evaluation prior to any UI freeze, somewhere in about a month's time.

09:04.320 --> 09:07.640
So more to come soon.

09:07.640 --> 09:11.720
Linode dot com slash land, go there to get a one hundred dollar 60 day credit towards

09:11.720 --> 09:14.560
a new account and go there to support the show.

09:14.560 --> 09:19.800
Linode is our cloud hosting provider and just this weekend we spun up a brand new instance

09:19.800 --> 09:22.240
and I think this one could have some real mileage.

09:22.240 --> 09:24.840
At first we just wanted to test PeerTube 3.0.

09:24.840 --> 09:25.840
New release came out.

09:25.840 --> 09:29.560
We're going to talk about it in the show and we wanted to have some hands on experience.

09:29.560 --> 09:32.340
Linode makes it so simple to do this kind of thing.

09:32.340 --> 09:37.840
We had an Ubuntu LTS 2004 machine deployed in probably about three minutes and then you're

09:37.840 --> 09:41.000
up and going with an SSH session pretty quick after that.

09:41.000 --> 09:46.520
We deployed the software and within moments, really, from just from idea to execution,

09:46.520 --> 09:47.520
we're done.

09:47.520 --> 09:52.780
And when you start to use it, you start realizing this has some potential and Linode makes it

09:52.780 --> 09:57.520
really easy for even a group like us who may have some traffic on an instance like this

09:57.520 --> 09:58.700
to easily manage it.

09:58.700 --> 10:01.280
They have node balancers to help with the traffic.

10:01.280 --> 10:04.080
Additionally, Linode has object storage.

10:04.080 --> 10:09.040
So we can use object storage with PeerTube to only use as much space as we need to host

10:09.040 --> 10:10.800
the video files we currently have.

10:10.800 --> 10:18.520
Instead of having to carve off like some big 40 gig or 80 gig or let's be honest, terabyte

10:18.520 --> 10:22.600
volume storage and we just pay for it all the time, we can use object storage, which

10:22.600 --> 10:28.280
is a great S3 compatible way to store your files online and of course Linode supports

10:28.280 --> 10:29.280
that.

10:29.280 --> 10:31.840
Linode.com slash LAN.

10:31.840 --> 10:36.000
That gives you the $100 60 day credit and then you can really cook with some gas because

10:36.000 --> 10:40.640
like a basic rig is like five bucks a month and they go all the way up from there to multiple

10:40.640 --> 10:43.000
GPUs and dedicated CPUs.

10:43.000 --> 10:45.180
But every machine has super fast SSDs.

10:45.180 --> 10:47.560
They have 11 data centers around the world.

10:47.560 --> 10:51.480
We chose to deploy in Dallas, so it's a nice central location in the US for our PeerTube

10:51.480 --> 10:52.480
instance.

10:52.480 --> 10:56.500
And I trust Linode because they're the largest independently owned cloud provider.

10:56.500 --> 11:02.880
They started in 2003 as one of the first companies in cloud computing, three years before AWS

11:02.880 --> 11:04.920
and other enterprise providers.

11:04.920 --> 11:08.040
And I love them because they've supported the Linux ecosystem for a long time.

11:08.040 --> 11:12.200
Events, projects and even these here humble podcasts, they're dedicated to offering the

11:12.200 --> 11:13.680
best virtualized cloud computing.

11:13.680 --> 11:16.000
If it runs on Linux, it runs on Linode.

11:16.000 --> 11:19.880
So thanks to Linode for running all of the Jupiter broadcasting workload, our new backend

11:19.880 --> 11:24.000
infrastructure and for hooking our audience up with a $100 60 day credit when they go

11:24.000 --> 11:26.360
to Linode.com slash LAN.

11:26.360 --> 11:32.000
Well, that didn't take long.

11:32.000 --> 11:37.960
Early work is already underway on reverse engineering the Apple M1 GPU.

11:37.960 --> 11:44.080
Alyssa Rosenzweig, who is known for her work on reverse engineering ARM GPUs, and in particular

11:44.080 --> 11:50.140
her work working on Panfrost, the open source driver stack for some Mali GPUs, well, she's

11:50.140 --> 11:54.000
recently taken an interest in Apple's latest graphics chip.

11:54.000 --> 11:59.140
This work is really being focused around the Ashi Linux project, which is Hector Martin

11:59.140 --> 12:04.480
and his team's effort to create a distribution for the Linux that supports the M1 out of

12:04.480 --> 12:05.480
the box.

12:05.480 --> 12:11.440
But ultimately, their goal is to create a Mesa driver for the M1 GPU and upstream all

12:11.440 --> 12:12.560
of their code.

12:12.560 --> 12:14.080
So things would just work?

12:14.080 --> 12:15.800
Wow, that would be nice.

12:15.800 --> 12:16.800
It would.

12:16.800 --> 12:17.800
Yes.

12:17.800 --> 12:19.920
Because could you imagine Linux on that without a GPU?

12:19.920 --> 12:23.280
No, I mean, I guess maybe a server.

12:23.280 --> 12:27.960
Anyway, after getting a Mac OS environment set up that was friendly enough for reverse

12:27.960 --> 12:31.880
engineering, because, you know, turns out the Mac OS kernel, not the Linux kernel, you

12:31.880 --> 12:36.140
got to do things a little bit differently over there, Alyssa was able to get poking

12:36.140 --> 12:38.500
around at shader binaries.

12:38.500 --> 12:44.640
Some early takeaways from that work are that the Apple M1 GPU is scalar for all bit sizes,

12:44.640 --> 12:51.200
hardware scheduling is being used, and that it looks like it is a super scalar architecture.

12:51.200 --> 12:55.960
And that, by and large, most of the cleverness is actually in the hardware design and not

12:55.960 --> 13:01.320
in some super magic optimizing compiler that Apple's got, which hopefully is good news

13:01.320 --> 13:02.320
for her further efforts.

13:02.320 --> 13:03.320
Right.

13:03.320 --> 13:05.680
It doesn't mean they have to come up with all those tricks in software, if they can

13:05.680 --> 13:09.840
just get the hardware working, it should be decent performance.

13:09.840 --> 13:15.400
So that work for the Ashi Linux project is up on GitHub right now.

13:15.400 --> 13:20.280
I was in conversation with Wendell from Level One Techs and of course, Level One Linux recently

13:20.280 --> 13:23.760
about his thoughts on the state of graphics on Linux.

13:23.760 --> 13:29.180
And I wanted to get his take on the effort being put in to get the GPU for the M1 platform

13:29.180 --> 13:30.840
functional under Linux.

13:30.840 --> 13:34.240
This is what he had to say.

13:34.240 --> 13:38.000
I mean, OK, ARM is exciting, but we're jumping the gun here a little bit.

13:38.000 --> 13:39.000
Save that effort.

13:39.000 --> 13:45.400
Just put it in the jar, put it in a bottle and wait until real ARM, not Apple's sort

13:45.400 --> 13:49.460
of beer goggles ARM comes out, because ARM is amazing.

13:49.460 --> 13:54.360
And if Apple did it like I mean, technically, Microsoft did it first, but Apple did it first

13:54.360 --> 13:57.960
correctly, which was we want to build a laptop that's a genuinely good user experience.

13:57.960 --> 13:59.960
Microsoft, I'll tell you exactly what the problem is.

13:59.960 --> 14:02.960
I can sum it up for you because they did ARM first, Windows RT.

14:02.960 --> 14:08.640
The only thing Microsoft was thinking was, wow, we can make a really cheap Windows device.

14:08.640 --> 14:09.720
We can mass produce these.

14:09.720 --> 14:10.880
We can print these like money.

14:10.880 --> 14:12.420
It's going to be great.

14:12.420 --> 14:14.280
They weren't thinking about a good user experience.

14:14.280 --> 14:15.280
Yeah.

14:15.280 --> 14:17.000
And you're saying that's the part Apple got, right?

14:17.000 --> 14:22.000
Yeah, that's the part that Apple was relentlessly focusing on because it's the operating system

14:22.000 --> 14:23.320
tied with ARM.

14:23.320 --> 14:30.720
And so that level of dedication, that zeal, that, you know, insane focus on positive user

14:30.720 --> 14:31.720
experience.

14:31.720 --> 14:36.680
I think once we've got that hardware in ARM for mass consumption, which is coming, good

14:36.680 --> 14:41.780
performant ARM, then the enthusiasts can adopt that and we can build whatever, because it

14:41.780 --> 14:45.960
just seems folly to me to try to reverse engineer something that somebody doesn't want to be

14:45.960 --> 14:49.000
open with because they're constantly going to kneecap you.

14:49.000 --> 14:52.680
They're constantly going to undermine your efforts and it's like, oh, this, you know,

14:52.680 --> 14:53.680
this piece of hardware is amazing.

14:53.680 --> 14:55.360
I want to run my own software on it.

14:55.360 --> 14:59.460
We've seen exactly how hostile Apple is to that in the iPhone ecosystem.

14:59.460 --> 15:00.460
We don't have to guess.

15:00.460 --> 15:02.720
We don't have to hope that they're going to do the right thing.

15:02.720 --> 15:08.560
We already know that they have no interest in participating in the open source ecosystem.

15:08.560 --> 15:13.080
They are open source hostile when you look at licenses like the GPL.

15:13.080 --> 15:19.080
We should not in any way try to do anything with their hardware that, you know, they don't

15:19.080 --> 15:24.000
sanction for that reason because it's, it ultimately potentially is wasted effort.

15:24.000 --> 15:27.440
And if that effort were put towards something better for the ecosystem, something like what,

15:27.440 --> 15:34.920
you know, the pine people are doing, it would be a much better effort for the overall community,

15:34.920 --> 15:35.920
I think.

15:35.920 --> 15:41.240
If you want more Wendell, well then join us for this week's Linux Unplugged episode 388,

15:41.240 --> 15:46.040
where Wendell goes in depth on the future of Linux on the Intel platform.

15:46.040 --> 15:51.200
Speaking of graphics on the Nvidia side of things, it appears Nvidia is getting prepared

15:51.200 --> 15:54.720
to support hardware accelerated X Wayland.

15:54.720 --> 16:02.120
X Wayland is what makes it possible for traditional X11 type applications to run under a Wayland

16:02.120 --> 16:03.280
session.

16:03.280 --> 16:08.520
And now an Nvidia developer has submitted a merge request to the X server GitLab titled

16:08.520 --> 16:12.560
support for hardware accelerated rendering and proprietary Nvidia driver for X Wayland,

16:12.560 --> 16:15.560
which seems to be pretty clear what that is intended to do.

16:15.560 --> 16:21.160
It's two patches that are included in there that also work in tandem with an upcoming

16:21.160 --> 16:23.560
Nvidia proprietary driver.

16:23.560 --> 16:29.520
They'll work to enable GL and Vulkan rendering with X Wayland.

16:29.520 --> 16:34.160
Once that driver is out, this code should just work with that driver and things should

16:34.160 --> 16:37.160
just start working automatically.

16:37.160 --> 16:41.160
It's interesting to see Nvidia's efforts here, you know, they'd previously done some other

16:41.160 --> 16:44.440
work trying to improve Wayland support last December.

16:44.440 --> 16:48.660
And also this month, a different Nvidia engineer made some contributions to Mesa.

16:48.660 --> 16:52.740
So clearly there's stuff going on behind the scenes.

16:52.740 --> 16:56.840
As for the performance of these recent changes, though, well, they expect it to be on par

16:56.840 --> 17:00.920
with native X11, at least based on benchmarks so far.

17:00.920 --> 17:06.400
Although there is an annoying extra copy required for windowed applications, but the impact

17:06.400 --> 17:11.520
doesn't appear to be significant and you shouldn't see it for most full screen applications.

17:11.520 --> 17:12.760
Which covers a lot of games, really.

17:12.760 --> 17:13.760
It sure does.

17:13.760 --> 17:17.400
And so there's that, there's the aspect of being able to play games on Nvidia hardware

17:17.400 --> 17:20.080
under Wayland that obviously matters.

17:20.080 --> 17:26.600
But there's also just the preservation of software, software that maybe has a GPU component

17:26.600 --> 17:31.800
that's designed for X11 that the developers never rewrote to support Wayland or whatever

17:31.800 --> 17:37.380
the case might be, which is probably going to be a considerable amount of applications.

17:37.380 --> 17:42.320
It's really nice to know that Nvidia users with that proprietary GPU driver, some of

17:42.320 --> 17:46.640
whom have to use it for their workloads, will have access to the software with full acceleration

17:46.640 --> 17:47.640
still.

17:47.640 --> 17:49.080
I think this is a really big step.

17:49.080 --> 17:55.960
It's taken a long time for Nvidia to get here, but with probably within between now and the

17:55.960 --> 18:00.880
end of spring or beginning of summer, we're going to have a just works out of the box

18:00.880 --> 18:01.880
experience.

18:01.880 --> 18:04.840
It's great to see it coming.

18:04.840 --> 18:08.280
Datadog.com slash Linux Action News.

18:08.280 --> 18:09.280
Datadog is great.

18:09.280 --> 18:13.840
They're the unified monitoring and analytics platform that gives you comprehensive visibility

18:13.840 --> 18:16.860
into your cloud, hybrid and multi-cloud environments.

18:16.860 --> 18:21.560
You can quickly analyze the performance of your Linux servers in real time with beautiful

18:21.560 --> 18:22.760
customizable dashboards.

18:22.760 --> 18:26.080
In fact, go to their website just so you can see these dashboards.

18:26.080 --> 18:30.200
It makes it easy to troubleshoot Linux issues in seconds with a unified view of your metrics,

18:30.200 --> 18:33.280
images and logs all in one place.

18:33.280 --> 18:38.080
The Datadog clipboard lets you streamline performance and outage investigations by capturing

18:38.080 --> 18:42.560
relevant views of your infrastructure and applications across the entire stack in one

18:42.560 --> 18:43.720
place.

18:43.720 --> 18:47.920
And they have just turnkey integrations for over 400 technologies.

18:47.920 --> 18:52.120
And you can even use Datadog to monitor just key Linux metrics alongside with data from

18:52.120 --> 18:57.440
the rest of your stack to get full visibility into the health and performance of your entire

18:57.440 --> 18:58.600
infrastructure.

18:58.600 --> 19:04.080
So start a Datadog trial today by visiting datadog.com slash Linux Action News.

19:04.080 --> 19:08.940
You start your free trial, you create one dashboard and you'll get a free Datadog t-shirt.

19:08.940 --> 19:12.120
So that's datadog.com slash Linux Action News.

19:12.120 --> 19:17.480
Create that dashboard and get that free t-shirt and go there to support the show and our sponsor.

19:17.480 --> 19:20.220
Keeps our humble podcast free for listeners like you.

19:20.220 --> 19:24.400
So thanks to Datadog for sponsoring the show and thanks to all of our listeners who visit

19:24.400 --> 19:29.880
datadog.com slash Linux Action News.

19:29.880 --> 19:37.460
A free, decentralized, federated and peer-to-peer video platform just had a major release.

19:37.460 --> 19:42.320
That's right, PeerTube version 3 is here and it had one new feature that really caught

19:42.320 --> 19:43.440
our eye.

19:43.440 --> 19:47.140
Very excited to see live stream support officially land.

19:47.140 --> 19:51.440
It's a minimalist and efficient peer-to-peer live stream system that seems to be working

19:51.440 --> 19:52.440
pretty great.

19:52.440 --> 19:58.760
We have test footage live streaming to about a dozen people right now and they're all over

19:58.760 --> 20:00.560
the world.

20:00.560 --> 20:05.440
From right here in the US of A on the West Coast to the Netherlands, people are streaming

20:05.440 --> 20:09.240
this and uploading individual chunks of the stream to each other.

20:09.240 --> 20:10.800
Yeah, it's really quite neat.

20:10.800 --> 20:16.000
It uses web torrents so it takes some pressure off the creator, hey in this case us, so our

20:16.000 --> 20:19.680
upload could be a little bit less and then everyone watching the video can share chunks

20:19.680 --> 20:22.600
with folks who haven't got quite as far as they have.

20:22.600 --> 20:25.380
It's impressive that this all works live.

20:25.380 --> 20:28.880
It's so great too because we haven't thrown a ton of resources at it.

20:28.880 --> 20:34.880
We have a two-core CPU, four gigs of RAM, Linode running this and we were actually able

20:34.880 --> 20:41.520
to sustain two streams, two live streams at the same time, just barely and if you're just

20:41.520 --> 20:46.080
using it as a PeerTube instance on its own, it takes storage for the videos and it takes

20:46.080 --> 20:50.400
the CPU when it's transcoding them to the various formats, but once everything's done

20:50.400 --> 20:53.000
and it's just sitting there, it's not a big impact.

20:53.000 --> 20:59.520
It actually is going to be pretty straightforward for open source projects like Debian to have

20:59.520 --> 21:02.080
a YouTube in a box.

21:02.080 --> 21:03.240
It's like old YouTube.

21:03.240 --> 21:04.720
It's nice, clean and simple.

21:04.720 --> 21:08.560
It has your video feed, it has subscriptions, it has trending videos.

21:08.560 --> 21:15.680
You can even get an RSS feed for your subscriptions and it has all of the basic features of YouTube,

21:15.680 --> 21:20.480
but in this case, it could be DebianTube and it's just Debian stuff and it's their project

21:20.480 --> 21:26.000
videos and past conference videos and talks and maybe even walkthroughs and then when

21:26.000 --> 21:30.960
there's a Debian conf, you know where to go because you go to the DebianTube and it really

21:30.960 --> 21:34.600
is a YouTube in a box and the setup, well, I mean, just a few minutes.

21:34.600 --> 21:35.960
Yeah, not a big deal.

21:35.960 --> 21:40.080
I mean, we were kind of using on what's been our standard in Ubuntu LTS and then pretty

21:40.080 --> 21:43.720
much everything in Docker and while I don't know that it was officially supported, it

21:43.720 --> 21:49.040
was least documented in their community area of documentation, a lot of good documentation

21:49.040 --> 21:50.260
for getting set up.

21:50.260 --> 21:54.360
So there was a Docker compose file pretty much ready to go with a little customization

21:54.360 --> 21:58.920
or they've got some very nice robust docs if you want to go the classic way that's built

21:58.920 --> 22:03.760
on robust technologies like Postgres and Redis and TypeScript.

22:03.760 --> 22:07.240
So it seems like a lot of good things in there.

22:07.240 --> 22:09.480
Comes with a nice configuration with Let's Encrypt, of course.

22:09.480 --> 22:13.560
So really once we got DNS pointed, everything was up and running in no time.

22:13.560 --> 22:17.760
And if you've ever done a live stream on YouTube or even if you haven't, it's pretty straightforward.

22:17.760 --> 22:22.900
You go to publish video and one of the options now is just a live tab.

22:22.900 --> 22:26.200
You click on that and it gives you the RTMP server information.

22:26.200 --> 22:33.360
It gives you the key to use and you put that in, what we did was OBS on Linux and hit start

22:33.360 --> 22:34.360
streaming.

22:34.360 --> 22:39.320
That's really all there is to it and the main difference between using this and something

22:39.320 --> 22:42.800
like Twitch or YouTube besides the fact that it's totally free, decentralized and completely

22:42.800 --> 22:49.080
under your control is that it's a little slower because if you think about how this is working,

22:49.080 --> 22:55.320
the server is doing the bulk of the encoding but then that work is then shared amongst

22:55.320 --> 22:56.320
the client.

22:56.320 --> 23:00.920
So first you have to wait for the server to receive the signal, then the server has to

23:00.920 --> 23:05.420
transcode that and send that out to the clients and then the clients send that out to their

23:05.420 --> 23:10.080
peers and so it just takes slightly longer and the latency can be somewhere in our testing

23:10.080 --> 23:15.880
between 25 seconds to maybe as much as a minute depending on how long the stream has been

23:15.880 --> 23:16.880
going.

23:16.880 --> 23:19.160
You know, honestly, that's not a deal breaker.

23:19.160 --> 23:20.680
It's nice to have low latency.

23:20.680 --> 23:23.360
Maybe that'll be something that improves in future releases.

23:23.360 --> 23:26.960
This is kind of brand new but pretty much no hiccups.

23:26.960 --> 23:29.240
I mean, we had a decent little stream going.

23:29.240 --> 23:34.480
I had several of them right here on my own laptop and I can even change resolutions to

23:34.480 --> 23:38.720
a different transcode, you know, down from 720 to 360.

23:38.720 --> 23:39.720
Worked pretty well.

23:39.720 --> 23:43.760
But again, it features that kind of thing you can do on YouTube where you stream and

23:43.760 --> 23:47.200
then when you're done, the stream is still available for playback automatically.

23:47.200 --> 23:50.320
That's great for talks and all of the conferences that have gone online.

23:50.320 --> 23:54.560
I could see it being useful in all kinds of education sectors, you know, you're delivering

23:54.560 --> 23:55.560
it right now.

23:55.560 --> 23:59.040
Now it's automatically backed up, ready to go for watching later.

23:59.040 --> 24:01.200
Totally could be killer for education in schools.

24:01.200 --> 24:04.480
They could even run it on their own LAN, have it behind the firewall.

24:04.480 --> 24:06.320
It's just their stuff.

24:06.320 --> 24:09.280
You can brand it and you can theme it as a plug-in system.

24:09.280 --> 24:14.480
I mean, I'm really, really impressed with how far they've gotten in just three releases.

24:14.480 --> 24:19.960
Every single release has been really remarkable and this one is just absolutely up there.

24:19.960 --> 24:20.960
We're setting one up.

24:20.960 --> 24:25.280
We're playing with different ideas and how we could use it as a podcast network because

24:25.280 --> 24:29.440
I've got a few ideas, if nothing else, just like a way to have a canonical archive where

24:29.440 --> 24:32.420
things haven't been pulled down by YouTube.

24:32.420 --> 24:36.900
It's pretty exciting because I remember when we first started doing the very early live

24:36.900 --> 24:41.280
streaming at Jupiter Broadcasting, it required that the end users all had flash.

24:41.280 --> 24:43.120
Oh, those were the dark days.

24:43.120 --> 24:47.280
Yeah, and there was so many weird ways to try to get it working.

24:47.280 --> 24:53.100
And now we're at a point in time where you can get a YouTube in a box that also supports

24:53.100 --> 24:56.440
live streaming and it's remarkable.

24:56.440 --> 24:59.640
And really, you don't have to have incredible horsepower to throw at it.

24:59.640 --> 25:02.820
Of course, that's going to scale depending on how many videos and how many users you

25:02.820 --> 25:03.820
have.

25:03.820 --> 25:06.000
But the PeerTube project has knocked it out of the park.

25:06.000 --> 25:07.040
It's really great to see this.

25:07.040 --> 25:11.120
And they say now they're going to focus on refinement in version 4 and they think they

25:11.120 --> 25:14.720
have a few things that they want to make a little more streamlined and they want to bring

25:14.720 --> 25:18.920
a little more user customizing like features in there and stuff like that.

25:18.920 --> 25:24.040
They say centralized platforms give a little power over the display of videos, newest,

25:24.040 --> 25:27.980
most viewed, just that category, the look of the platform.

25:27.980 --> 25:32.160
Those might all be functionalities that we could change in maybe PeerTube v4.

25:32.160 --> 25:33.160
I don't know.

25:33.160 --> 25:34.160
But yeah, you're right.

25:34.160 --> 25:37.720
We could add more branding, make it a little more of our own or change some of the fundamental

25:37.720 --> 25:40.040
behavior of how videos get ranked, say.

25:40.040 --> 25:41.040
You never know.

25:41.040 --> 25:42.760
Maybe one day we'll have a Jupiter tube.

25:42.760 --> 25:44.120
You never know.

25:44.120 --> 25:49.920
But what I know is you should check out LinuxActionNews.com slash subscribe for all the ways to get new

25:49.920 --> 25:51.920
episodes of this here show.

25:51.920 --> 25:56.600
And we love hearing from you, LinuxActionNews.com slash contact for all the ways to get in touch.

25:56.600 --> 26:01.320
Hey, what are you doing on Monday's 5pm Pacific, 8pm Eastern?

26:01.320 --> 26:05.960
Because you should be listening to Coder's Happy Hour, the new time slot, improved time

26:05.960 --> 26:07.920
slot for Coder Radio.

26:07.920 --> 26:09.720
Grab a robe, maybe a beverage.

26:09.720 --> 26:10.720
Join us there.

26:10.720 --> 26:15.000
We'll be back next Monday with our weekly take on the latest Linux and open source news.

26:15.000 --> 26:16.000
Thanks for joining us.

26:16.000 --> 26:33.280
And we will see you next week.


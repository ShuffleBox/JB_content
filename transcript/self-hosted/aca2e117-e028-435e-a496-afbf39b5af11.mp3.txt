Today's episode is a really exciting one for me.
It's the culmination of five years work.
The perfect media server is now,
well, I'll save it for the show.
We also respond to a ton of your feedback.
This is Self-Hosted 35.
Well, Alex, I'll admit it right here on the show.
I set up yet another sync thing server this weekend.
You thought you'd leave 2020 behind in style, hey?
I wanted more speed, Alex.
Actually, it really came down to me doing the math
and realizing, hey, you know, when I switch networks,
it kind of slows the syncing down.
But if I can pull from multiple sync servers,
it kind of makes up for it
and goes even faster in ideal situations.
So I thought, why not set up a sync thing server on Linode
and just sync a small select stuff
that I really wanna move fast?
And it legit works.
It's really nice.
It's like doubles the amount of files
that can be transferred at once too,
from what I can tell in my brief testing.
I'll be honest, I haven't continued with sync thing
after we talked about it a couple of episodes ago.
Just doesn't work for me.
Just doesn't do it, I'm afraid.
But I'm glad it's working for you.
You're a hater, I understand.
I understand, I understand.
I love it.
I think 2020 is the year that I stepped into
a long-term relationship with sync thing.
And it's not like I'm working on files super quick
and I wanna move it between machines
and I wanna edit a file upstairs
and then walk down into the studio
and have that file on my desktop.
It may be able to serve that function,
but I've learned not to expect that.
The one caveat I do have with sync thing
is you gotta let it go at its own pace.
Gotta let it go at its own pace.
And that's why I love online learning too.
And this episode is brought to you
by the all new A Cloud Guru,
the leader in learning for cloud Linux
and other modern tech skills.
Hundreds of courses, thousands of hands-on labs.
Get certified, get hired, get learning
at acloudguru.com.
Well, Alex, I think we should start the show today by,
well, maybe we started by talking about sync thing,
but now we should start talking about a project
in various forms at least you've been working on
for about five years.
And I think if I'm not wrong,
it's like about to reach its ultimate form.
Perhaps, yeah.
Well, I mean, as we record, it's still 2020,
but I think this is gonna come out on new year's morning.
So happy new year, everybody.
Welcome to 2021.
Hopefully it's more prosperous than the last one was.
We're talking about my perfect media server project.
So this was something that when I was involved
with linuxserver.io that actually helped me
kind of form the direction for that site
and the blog and stuff like that.
So on the 2nd of February, 2016,
I wrote a post about what I called
the perfect media server for once for better name.
And it's kind of stuck now.
It's bold, but now you've kind of become
the perfect media server guy.
Yeah, I guess so.
I've toyed with changing the name a few times,
but enough people have seen it.
And I've looked at the analytics
and a lot of people have read that post over the years
that in fact, funnily enough, when I moved to Raleigh,
one of my closest friends now who's also called Alex,
he joined Linux server originally.
He's now one of the Linux server devs.
He joined that website
because he read my perfect media server post.
And so when I came to town, he met up with me
and we had a few beers and stuff like that.
And he was so excited to tell me
that he'd built one as well around Docker
and SnapRaid and MergerFS and all this kind of stuff.
So it's been a really cool thing to share with the world.
Well, you also got a great domain name for it,
perfectmediaserver.com.
Is that new?
Brand new, yes.
I, well, when I say brand new, I mean, I bought it in June.
I've been promising a 2020 version of this article
for rather longer than I would like.
So I released one in 2016, another one in 17
and another one in 19.
And, you know, when you start thinking
about what can I write about
with these perfect media servers
when everything is just so reliable and just works,
there comes a limit when you think,
well, I can't really rehash the same thing again and again.
And so this time I was looking at the three posts
and since I'm no longer involved with Linux server,
I don't have access to edit those blog posts easily anymore.
I mean, I can ask the team to fix things and stuff,
but invariably information goes out of date
and I am a huge advocate of open source
and community contributions and Wikis
and all that kind of stuff.
And so I just thought that this would make much more sense
as a kind of a Wiki type website
with first-class search categories,
walking people through how to do things,
you know, in a step-by-step kind of fashion
and then leave the blog posts
as kind of like an annual opinion piece
alongside this more kind of dry technical Wiki style website
at perfectmediaserver.com.
Okay, that makes a lot of sense.
And I think probably the real value for people to understand
is you're telling people there's a lot of options out there,
but maybe this is a great stack to use.
You can use this stack, I've tested this,
I've refined it over the years
to do really a beyond just okay media setup,
but a great whole media setup.
And instead of saying, oh, there's so many use cases
or the answer which is frequently it depends,
you make some opinionated decisions
and kind of point people in a direction
and then lay out how to do it.
And I think that's maybe for me the real value of the site.
I think as well, a lot of people come to Linux
and I've said this before on the show,
a lot of people come to Linux not through the desktop
but through Plex, through running headless apps
on a Synology or a Raspberry Pi
or something like that.
And once you start having a box in your house
that does everything 24 hours a day,
that is on 24 hours a day,
you think what else could I do with it?
And that single spark is a huge rabbit hole.
And I think one of my primary goals with the site
is to equip those newer people
with the skills that they need to install Ubuntu,
set up merger FS, figure out what an FS tab is
and not be intimidated by wading through
lots of different disparate documentation
across different places on the internet.
It's just all in one place.
And if you wanna have multiple hard drives
in a single box that are of mismatched sizes
with different file systems,
well, here's a solution for you.
You've already got data on these drives,
you don't wanna do RAID, great, cool,
come along and join the party.
Yeah, and honestly, it's a lot of the stack
that we talk about frequently.
You talk about Docker, kind of some of the background
in there, how to get it going,
and you work your way up through
how to manage multiple disks of different sizes,
like you say, but then also, if you wanna go ZFS
and here's also a Proxmox layer you should consider,
any one of those could be broken out
and really have nothing to do
with building a media server.
So it's kind of valuable in that way too, I suppose.
So I mentioned that just for the audience
who's not interested in building a media server,
but does wanna learn more about Docker or MergerFS
or SnapRate or ZFS or Proxmox or hardware,
any of that kind of stack, stuff we talk about on this show
and you wanna read something from Alex on it,
you can find it there too.
I could totally have seen a guy like me,
maybe if I was building my media server setup
for the first time, I'd be thinking, okay,
I know I wanna use containers, but I don't quite know how
and in what way to use them to do this right.
I know about MergerFS, but I don't know
how to deploy it and so having you write something,
having used this stuff in production for five years now,
there's value to that.
So you should be the perfect media server guy.
I think I said good on you.
You be the perfect media server guy
because I endorse this media server build here.
You are Chris and you support this message.
Wonder what the cost is, have you thought about that?
Have you thought about like what the cost would be
for a minimal build of something from this guide?
Well, in terms of hardware.
Yeah, in terms of hardware.
I think QuickSync now for me is a minimum price of entry
after everything we talked about in the last episode.
So a hundred bucks for a CPU,
you can probably find a used motherboard
that will do the trick for a hundred dollars.
Again, RAM is a bit about a hundred
and then hard drives for an eight terabyte hard drive.
Now you can go to Best Buy and pick one up
for around 130, 140.
So I don't know, let's say 140.
140, what's that?
It's like $1,100 or so for hard drives.
I don't know, 1,500.
I think all in would get you five, eight terabyte drives
of 40 terabytes of storage for $1,500 all in
and you own it forever.
I mean, Synology make a great product.
So do QNAP and Unraid's also great,
but it's not open source.
FreeNAS requires learning ZFS,
which I know I talk about in Perfect Media Server,
but it's kind of orthogonal to the main content.
It's not required learning,
whereas with a TrueNAS or a FreeNAS product, it is.
It's just the most flexible thing for most people.
And I think when you start looking at putting together
one of these servers,
$1,500 isn't a small upfront investment.
And you think, right, well, where can I cut some cost?
And the obvious answer is the hard drives.
Rather than buying five, let's only buy a couple, right?
And then I'll add the other three
over the next year or two.
MergerFS lets me do that.
It lets me add drives as my collection grows
without having to re-silver a ZFS array
or rebuild a RAID setup or anything like that.
It just grows as I do and it changes and matures.
And because it's just Linux,
it's open and I can go and tinker as deep
as I want under the hood.
Or again, because it's Linux, it will just work.
It's just reliable.
It's battle tested and hardened everywhere.
So I really do think that if you're willing
to put the time in and learn a little bit of this stuff
with the information that's provided here for you,
for free, I might add,
I don't make a penny off of this stuff.
Anyway, I never have.
I just wanted to give this information
back to the community.
I don't think there's a better solution really
if you're willing to put the effort in.
And I'll just give one more mention
because as you were talking there,
I was just also reviewing your QuickSync
and Proxmox page and damn, you put some work into this.
But I also, I think it's pretty clever
that you embedded the relevant JB content
where we've talked about a lot of this stuff in depth
when it still holds up.
So not only do you get a lot of the written stuff
and the visual examples,
but you've got like a video from Wendell in here too.
And so you add the supplemental media content.
I could see us linking this to a lot of people
that write into the show
and ask questions about this stuff.
If I were gonna contribute one area,
I just thought to troll you,
I'd probably contribute using ButterFS
because literally everything you just said about MergerFS
is why I use ButterFS.
Seriously, like word for word.
So on the ZFS page,
there's a whole section about what about ButterFS.
So-
Okay, good, you've addressed it, I can see.
Well, a little bit.
And my conclusion was that using ButterFS
would probably be easier than ZFS
simply because it shipped as part of the Linux kernel.
But I've invested in ZFS mentally,
but also I've synced six, seven terabytes worth of data
across the ocean to the UK.
And I don't wanna have to spend another six or seven weeks
doing that again if I switch.
Well, ironically, it's more about how you use MergerFS.
However, I think both are great.
And if MergerFS is working for you,
I'm really not, I'm just more of teasing.
But it did strike me that being able to join mismatched disks
and add them as it grows
and be able to remove them easily
is why I switched to using ButterFS
on my Raspberry Pi media servers
because I needed some extra data
in my media servers because I needed something
that essentially was no cost.
Since ButterFS is built into the kernel
and it also doesn't have a high,
it's a very efficient file system.
There's not a big performance penalty.
I don't need a lot of RAM.
It meant that I didn't have to install
any additional software at all.
And actually no additional config files or anything.
There's no config, it's just,
it's all just with volume management on the command line.
And it's very simple.
It's like ButterFS add volume and you give it the path
and you tell it what volume to add to
you're done and then remove.
And as long as you have enough space,
it sinks everything off and you can remove it.
And I actually have not tested that.
I could imagine it being tricky.
But I think there's different ways to solve all of these.
And what you've done here with this is said,
well, these are ways that not only
are very sensible solutions, but ones that I've tested.
And that's the value again.
Like, yeah, I could add something about ButterFS,
but there's limited value in it.
It's my experience.
And this is something that you've worked at for a long time.
So I think it's, yeah,
I think MergerFS is a great solution
for that kind of stuff.
And, you know, things like ZFS and SnapRaid,
depending on what your needs are,
also can be appropriate solutions.
So I've built this site around MKDocs,
which happens to be the same project
that we're using for the self-hosted Wiki,
which I've also put some work into this week
over the Christmas break.
So please go ahead and contribute to the self-hosted Wiki
at wiki.selfhosted.show.
Cause we're crying out for content over there.
But MKDocs, I'll tell you what, Chris,
has become a hell of a Wiki software, you know?
So I don't know when you're browsing this,
but I don't know if you noticed it has a keyboard shortcut
and they don't tell you this obviously,
but it's the same as Vim.
So you can press the forward slash key,
which brings up search,
and then you can search for any string in any page.
And it will just in real time and then use the arrow keys.
Oh yes.
And it will just take you straight to the page.
Straight to the section of that page.
Just that feature alone had me sold.
That's great.
But they've added dozens of other features,
you know, like they've got little tool tips,
little info boxes and stuff that breaks up the content.
The code formatting highlighting is just brilliant.
It's fully customizable.
So, you know, it was using the COBOL Wiki
for the Helios 64 review,
which finally got me to really take MKDocs seriously
and really went through the documentation
with a fine tooth comb.
And I've enabled all the features that I want.
And the only thing I haven't done yet is comments,
which I might do, I might not, I haven't decided yet.
But the material theme for MKDocs really is stunning.
And I don't think at the moment
there's a better open source documentation platform.
Yeah, I will say that just the presentation.
So not even commenting on what it's like
to actually write on it,
but the presentation is extremely readable.
You know, documentation,
especially something as extensive as a topic like this
can be just a chore to get through.
But the way it lays out, like you said,
the way it does some of the different quoting and code blocks
and all of it, just all of it is really,
it's just, it makes me want to use it for my stuff.
So I was going to ask you,
I was going to talk to you about MKDocs
and see what you thought,
because yeah, it's really seems impressive.
And probably the perfect solution
for just JB internal documentation.
Yeah, I mean, it's all, everything's written in Markdown.
So if in the future you decided to use a different solution
for some reason, it's just plain text.
It's not in a CMS somewhere, lives in a Git repo
and just copy and paste and job done.
That's pretty nice.
Well, so as we record right now, this isn't live.
So what's your plan?
I assume you're gonna try to get it out
when the show goes live.
If you look at my GitHub commit history this week,
it's gonna be bright green.
I'm working away feverishly on this
to get it done by the end of 2020.
So I'm aiming for a New Year's Eve launch.
So by the time you listen to this episode,
it should be live, perfectmediaserver.com.
Let me know what you think at ironicbadger on Twitter.
I would love to hear what you think
because I've put a lot of time,
probably several hundred hours into this site
by the end of it, all told.
I'd also accept PRs on the GitHub repo.
So if you want to open an issue,
if you find a mistake or something,
which is highly likely at the pace I'm working right now,
let me know through a GitHub issue
or open a pull request or something.
I would love to hear from you.
Okay, needsmorebutterfs documentation.
Serious, seriously, geez.
You sir are a grade A troll, thank you.
linode.com slash SSH.
Go there to get a $100 60-day credit towards a new account
and go there to support the show.
Linode is our cloud hosting provider.
And because the price is so great,
they can make it possible for you to use Linode
even for a small deployment or for a large deployment.
Jeff used Linode to test migrate
his important Nextcloud setup.
He just took things one step at a time
using different guides on Linode
to make sure everything was right.
And he says, eventually after about three pages of notes,
he did a completed successful migration.
And then he was able to take that knowledge,
take that hands-on experience
and go actually implement it on his production Nextcloud instance.
He said, but in the testing,
he noticed that even their smaller Linodes
were still faster than his local quad-core
16 gigabyte local machine.
So he's looking at maybe just hosting it on linode.com.
And Alex, I know that you're using Linode
for the perfect mediaserver.com.
I sure am.
Yeah, same node as is doing the Wiki
and gallery.selfhosted.show is doing perfect mediaserver.com.
So you can really squeeze quite a lot
out of these little things.
I love hearing how people are using Linode.
So do let me know either at the contact form
or at Chris Lass on Twitter.
Because with $5 a month worth of data,
$5 a month rigs, you can do a lot.
But they also have dedicated CPU systems
or machines with tons of RAM or lots of GPU.
So go experiment with that $100 60 day credit.
They also offer S3 object storage.
This is a great way to store things in the cloud
that don't need a Linode or a server sitting in front of them.
You can just generate a public URL for that asset.
I do this for soundboard clips.
You can do this for websites.
It's a great way to get a super fast portfolio
where everything's stored statically in object storage.
And their prices are great.
They also have load balancers and they have data centers
in 11 locations around the world.
So you're going to find something close to you
or close to your client.
So go to linode.com slash SSH.
Go there, get that $100 60 day credit,
apply that towards a new account
and go there to support the show.
You help make independent content like this free
when you go to linode.com slash SSH.
I can't quite believe just how many Powerline emails
we had this week though, can you?
Alex, it was wild.
So I responded to several of them directly.
I figured we respond to a couple here in the show
when we had a few people write in about this stuff.
I kind of suspected that Powerline networking
was probably something that got more use and deployments
than kind of gets representation
because there's so many scenarios
where Wi-Fi just doesn't work, especially older style Wi-Fi,
non mesh Wi-Fi, where like either a house construction materials
involved or distance or all kinds of weird things.
Like I have a family member who's next to an airport
and their radio signal situation is just crazy.
It's just, it's just unusable.
So I suspected we would hear a lot about this,
but JT wrote in to say that he's been using Powerline adapters
for a couple of years.
He currently has three of the TP-Link AV1000s,
which is the kit I bought, with two different kits
and he's using them without any issues.
So he bought two of the kits, two of what I have,
and they all link together.
He says, I do have a problem with one of the rooms though,
where one adapter normally gets about 120 megabits
and then it gets out of sync
and it starts dropping packets like mad,
dropping the bandwidth next to nothing.
Sometimes even less than a megabit, but if I unplug
and re-plug them back in, it seems to fix it.
It happens from time to time, but also I wanted to give
just a quick shout out to cloudfree.shop,
one of our official unofficial sponsors here
of the self-hosted podcast, coupon code self-hosted.
He said cloudfree.shop finally gave him the kick in the butt
he needed to begin automating his home.
He says, I never want anything really connected to the cloud
and with smart plugs from Cloudfree and Home Assistant,
it felt like I had to do something about it.
And Home Assistant, it felt like I could finally get started.
The first thing that I automated
was my bearded dragon's cage lights.
Yep, one of the first things I automated here in the studio
was my fish tank lights.
So totally, totally with you, JT.
He says, which got rid of a terrible
constantly clicking analog timer that I used to use.
I also bought a D1 mini ESP8266 Wi-Fi board
and a BME280 temperature pressure and humidity sensor
and combine them into an MQTT based sensor
that Home Assistant uses to control the heat lamp
in the cage.
Heck yeah, he did.
That's great.
That's the next level.
Talk about like you want a backup,
no fail state for that thing.
He says the spousal approval factor was very high
on these purchases and the time I spent learning to solder.
That's great.
Says thanks for the shows, looking forward to the next one.
Good to hear that JT.
I love it when it works out.
And yeah, for those of you who are new to the show,
cloudfree.shop is a community built store
and we're official, unofficial, official sponsors,
or they are.
We just love them and we worked out a deal.
We use the promo code and you get devices
that don't have like the cloud connected stuff on there.
You know, sometimes I like a little cloud,
like I put a sync thing server up in the cloud,
made stuff faster.
But the smart plug that controls the old fish tank,
I don't want any cloud involved with that.
You know, it's just how it goes.
And you also don't have to wait
necessarily on the slow boat from China
sometimes for these things to arrive.
So true, true.
It is nice that they are state side as well.
Yeah, that's good.
That's a good point.
Ro wrote in about Powerline Finicky.
And I think the reason I included his email
is because he referred to us as Chris and the Badger,
which gave me like this morning AM or FM radio vibe.
And I just pictured you and I doing a morning KWRAX.
Chris and the Badger.
Yeah, I can hear it now.
It's Chris and the Badger.
Welcome to Chris and the Badger.
Chris and the Badger.
Chris and the Badger.
It's the Badger.
Yeah, I could see that.
Oh, I want a listener now to try and make us a jingle.
Chris and the Badger, please.
That would be fun.
Chris and the Badger in the morning.
He says, Chris, I was surprised to hear about
your experiences with Powerline.
I've been using the TP-Link Powerline products
for several years now, and I've had mixed results.
In my experience, it works.
But sometimes it has some problems
that make it hard to really recommend.
And he tells me about different products
that he's tried and troubleshooting.
And he has a pretty solid looking house layout.
There's nothing too crazy about his electrical.
It's a modern house, and it's shorter than 300 meters
and all of that kind of stuff that you'd look at.
But he says Powerline works, but it's definitely
nowhere as fast as wired ethernet.
In fact, it isn't even as fast as some of the mesh Wi-Fi
that he's tested.
So he did several different kind of speed tests for us
and said in all, he is able to get better performance
on mesh Wi-Fi.
But in some situations where Wi-Fi didn't reach
or there was other issues, he was still able to get
around 100, 150 megabits with his Powerline adapters.
In one case, depending on a product he tried,
he was able to get 300 megabits,
which that's pretty respectable.
That's really all I'd want over Powerline.
I'm not expecting gigabit.
I mean, if all you're doing is streaming on Kodi
or something like that, that's all you need.
He points out, and it's a great thing to consider,
is a little play of words that these manufacturers use.
Yes.
And I haven't verified this, but according to him,
he says, when they say it's a gigabit,
they mean it's a gigabit when you combine
the send and the receive.
It's actually half a gigabit in both directions.
In a perfect world when there is no wind outside,
they're about one centimeter apart, probably, yes.
So if you get a two gigabit model,
which there are two gigabit units,
then it's one gigabit send, one gigabit receive.
It's actually a one gigabit unit the way we think of it
in terms of like Ethernet adapters.
So that's a little trick or ruskies that they like to pull,
that when they're quoting speeds,
they're quoting just a send or receive.
But we got lots of other feedback.
Some people thought that it was,
that maybe I'd have better performance
if I didn't have solar panels on the RV,
that they thought maybe that was causing
some high degree of interference
just because of the intensity of that.
But those systems are totally separate.
The house power doesn't connect
to like the charge controller or the batteries directly.
Yeah, because a lot of folks wrote in and said
that if you have coax in your walls,
you can actually get power line over coax adapters.
And because they're not carrying any signal
in modern houses, generally speaking anymore,
you can actually get away with running Ethernet over those
and they're a very clean signal.
So you get better performance that way.
That could be worth looking into.
Yeah, I got a couple of spots that have coax pre-run.
That's interesting.
I don't know, Alex, maybe one day in the future.
Brad wrote in about a killer mobo with a QuickSync.
Yeah, he's found the ASRock J5040 ITX board.
It's a mini ITX form factor with a quad core Pentium chip
and it has QuickSync version 6.0.5.
Now he wrote in about this one because of energy usage.
This one idles, he says, between 10 and 15 watts only.
But it also has four SATA ports,
which I thought, hmm, this would make a really nice
sort of NAS motherboard potentially
because four hard drives, a small enclosure,
low power draw, QuickSync.
You're pushing my buttons here, Brad.
Yeah, really, me too.
It looks like a really nice motherboard.
Yeah, this ASRock J5040 ITX.
We'll put a link in the show notes.
But that hardware acceleration, that QuickSync,
that QuickSync, boy, that is looking really good.
And this you could totally bill,
I bet you for, if you had the storage,
I bet two, $300 to build a nice system
with a decent little case with some memory around this thing.
It's a passive CPU as well.
So it takes, it doesn't need a fan on the CPU.
Also, it takes sort of laptop style SO-DIMM memory.
So this thing is tiny.
It's got a couple of M2 slots on there for Wi-Fi if you want.
So yeah, yeah, go ahead and check that one out.
That looks like a really, really useful little build.
Stefan wrote in to tell us about some benchmarks in German
that show that the latest AMD desktop APUs
are getting idle power well below 10 watts.
And depending on the motherboard, as low as six or seven watts.
So it seems like there's something to watch there too.
Oh, I'm trying to avoid buying a Ryzen 5000.
I'm really trying to avoid it,
but stuff like that makes me want to buy one.
Hey, while we're doing feedback,
I want to take a moment and mention
that a Cloud Guru has a Python 3 scripting course
for system administrators,
where you can develop the skills you need to write effective
and powerful scripts and create command line tools using Python 3.
So in the course, you're going to develop skills
you need to write effective and powerful Python scripts.
And it's a big one.
So beyond the language itself,
you'll go through the full development process,
including project setup, planning, automated testing
to build two different command line tools and more.
So check out the link we'll have in the show notes
for the Python 3 scripting for system administrators
at a cloudguru.com.
Hey, so I'm sat here whilst we were recording
and thought my feet are cold.
So whilst you were reading that ad spot,
I logged into my home assistant
and just bumped up the thermostat a little bit.
That's nice, isn't it?
Yeah, yeah.
I think my favorite still is because of the home assistant
and the home kit integration.
When I'm driving home,
I just push a button on the steering wheel
and I tell the computer just to turn on,
you know, the heaters to extra heat.
We have an extra heat mode that kind of brings up
the temperature more, a little quicker.
And so when I buy the, and turn on the lights.
So when I get home, all the lights are on.
Place is nice and toasty.
Oh, I've been thinking about like an NFC tag
on the dashboard or something
that I could just tap with my phone maybe.
I haven't done it, but I've been thinking about it.
I've been thinking about that too.
I actually have an NFC tag at the door out the studio.
So on my way out the studio, I can tap it.
And right now it just kind of sends like an alert
to the wife with an ETA and all of that kind of stuff,
you know, based on my location and her location.
But I have been thinking, man, it'd be pretty great
to tie that in with the heating and the lighting,
check to see if it's on or not.
NFC tags and all of that is probably still
the most underutilized area because on iOS,
it kind of sucks.
And I think it's similar on Android,
but not quite the same where on iOS,
it just brings up, as far as I understand it,
a notification prompt that you then have to tap
to execute the NFC automation.
And that just sounds like garbage.
Not true on Android.
I just tap the tag and my garage door opens.
It's amazing.
That's what I want.
I can kind of see maybe why Apple did it this way
for novices who, you know, they don't want to execute stuff
randomly on their phone.
But man, I totally appreciate that,
but I just would love a setting to say,
don't require user interaction.
It just totally kills the usefulness.
I have also here on the studio mixer,
I have an NFC tag because for some reason,
Behringer thought it'd be a great idea
to put like a phone holder on the mixer
because the idea is you're going to use
like their touchscreen app on your phone.
And so I have a spot where my phone sits
and I just put an NFC tag in that spot,
just set my phone to D and D
and turn on the studio lights,
which are on Home Assistant and all that.
Oli wrote into the holiday mailbag
and said, I'm a longtime listener,
occasional disc order from Norway.
And we talk about storage setups on the show a little bit,
but I'd love you to go into some details with setups
ranging from smaller setups to bigger setups.
Do you have any strategies deciding on what you invest in?
My backups are going to Backblaze,
but I'm rethinking things a little bit
and I think I want more same local storage,
but I'm a little put off at the price.
What would be a sweet spot in terms of discs and storage
for about an eight terabyte media collection
as well as some more personal media like photos
that I just don't want to lose?
Any links would be great too.
Man, this question was made for me, wasn't it?
It really was.
So, perfectmediaserver.com, first of all,
I think is where I will send you in the first instance
to look at the software side of things.
I will be building up the hardware recommendation section
of that site over the next few months.
But really, I would just take a look at serverbuilds.net.
They have some amazing used enterprise gear
and I know it's quite a US centric website,
but you can still get a lot of good ideas
about what to use, like QuickSync, for example,
that came from JDM, the guy behind that site
who we've had on the show before.
And just take a look at what they're doing
and the trends and the way the industry's going
with what those guys are doing over there at Server Builds.
And I think you can probably get away
with a fairly minimal kind of setup.
So you've got eight terabytes worth of stuff
you want to store.
So I would buy a hard drive that is at least eight,
probably 10 or 12 terabytes, so you've got a bit of headroom,
and buy a pair of them so that you can have full redundancy.
You're already using Backblaze, so RAID is not backup.
It's a very common phrase that you'll hear people say.
Make sure that you have everything duplicated
in at least two different physical locations.
So even if that just takes the form of a USB hard drive
that you leave at your parents' house, when you go and see them
one day in the future, who knows?
The world is so different right now.
But if it's just a USB hard drive in a drawer
at a parent's house, then that will do the trick as well
in a lot of situations, unless you have lots of media
being added all the time.
But I don't think that's the use case for a lot of people.
I think most people, those kind of periodical backups
every three to six months is probably sufficient
so build yourself a small mini ITX, couple of bay box
and stick the perfect media server stack on there
and you'll be good to go.
Yeah, thankfully, eight terabytes is a really
pretty doable problem to solve.
So of course, you want more than that.
At least I'd say go 12 terabytes, if not more,
if you already are using eight terabytes.
And you could probably even justify
a bit more than that.
But that's some great strategy advice right there
and perfect timing for the show too, so best of luck.
I would take a look at Amazon.de,
quite often have the Western Digital,
what are they called over there?
They're not easy stores because they're Best Buy
like US centric ones.
They're called My Books, I think, in Europe.
You can quite often get those for a 10, 12, 14 terabyte
hard drive in the 200, 250 euro range.
So that would be a good place to start.
It's not gonna be super cheap.
My philosophy with regards to how much local storage
do I need versus cloud is it's up to you, right?
It's your personal risk profile.
And how important is this data to you?
Are you gonna be upset if Backblaze,
I don't know if they're going to,
but if they turn around next week and trick you
triple their prices, what are you gonna do if that happens?
If you have a hard drive in your closet,
you know upfront what that cost is gonna be,
what the total cost of ownership for that storage
is gonna be, and there'd be no surprises
or anything like that.
So, I mean, you're talking to a guy
that's got 100 terabytes in his basement,
so maybe I'm not the right guy to speak to.
And the other guy who's like,
I need to get more disks as fast as possible.
I've only got 12 terabytes free right now.
I'm like, yeah, yeah.
But really there's so many ways to solve it,
but I'd love to hear what you do.
So go to selfhosted.show slash contact to update us.
And then Scott wrote in with another question
that I have a sense the audience
may have a few answers for us.
So keep that contact link in mind.
He says, I was hoping you could make a recommendation
for self-hosted online cookbook.
My mother has a huge cookbook
full of old family recipes,
which I would like to digitalize ideally with OCR
and the ability to take and search the recipes
as well as preserving original image
of the old handwritten family recipe.
Scott, I love this idea.
What do you think, Alex?
Has anything come to mind for you?
Well, we covered Chowdown a little while ago
as a self-hosted recipes app.
There is another one,
which whilst we're doing this segment,
I will try and find,
which I can't remember right now,
but there is also an old JB project, isn't it?
Yeah, that's true.
That is true.
There is the open your mouth recipes,
which we actually used GitHub and Markdown for those.
I was thinking Scott could get started
without any software selected yet
by just getting good quality captures of those cards.
And he's gonna want probably something
he can take over to grandma's house or mom's house
or whoever, the aunt or uncle,
whoever the family members you wanna capture these from
because why not get them all, right?
You could probably get away with something like ScanBot
or the other available scanning apps on your phone,
but you might look into scanner options too
and just start there.
Start getting the high quality images from there
and then the software will come.
I found it.
Okay, it's called Vabine 1111 slash recipes.
What a catchy name, huh?
It's a Django application designed for managing recipes
and it's a web app.
So I would imagine it runs out of a container,
but it's got a search built
on top of Django's trigram similarity search engine
and it allows you to create and search for tags
and assign them in batches to certain files
matching certain criteria.
It will sync with both Dropbox and Nextcloud
with more support being added every week.
And you can import lots of recipes from different websites
with JSON objects and stuff like that.
And there are also apps for mobile devices
like phones and tablets.
So yeah, lots and lots of stuff in there,
runs in a Docker.
This is what the Reddit collective thought recommends
at the moment.
So I haven't tried this one.
I just haven't got to it, but it's on my short list.
So go and take a look at that link in the show notes.
I also recall that groceries had a bit of a recipe manager.
I don't recall how extensive it was,
but that's a past pick too.
So we'll put links to all of these.
The one that Alex just talked about,
you could see the example of how we used Open Your Mouth
on GitHub and just made it a community project.
So you could have multiple family members
that contribute that way.
Or perhaps somebody out there will know
a great software project that we haven't mentioned
and inform us all at selfhosted.show.com.
The last one in our holiday extravaganza mailbag here
is a Joshua writes in regarding thoughts
that were inspired by self-hosted episode 33
triggered by the Helios 64 discussion.
He says, hey guys, I was listening to your review
of the Helios 64 with some interest
since I am the owner of their previous product,
the Helios 4. I believe the points you make
about software are quite valid.
Yet I'd like to point out
that there's a really hard problem to solve.
I work personally with a company in Israel
that makes SBCs and SOMs,
mostly with ARM-based system on chips.
It's my job to make Debian available
for each product to their customers.
Long ago, when I started,
I really wanted to do this the right way.
I submitted bug reports and patches
to the Debian project for enabling
all kinds of small things.
A kernel.config for a driver here,
a customized boot script there,
enabling OpenGL ES backends and shared libraries,
and continuously watching and testing
the distributions for things that break.
Turns out I never got to the point
where I could give customers a pure Debian system.
There's always another tweak
that I had to carry out of tree.
So to this day, I'm creating block device images
with custom kernel packages,
integrated binary blobs,
and maybe a system D service
for loading Bluetooth firmware
and even patched parts of X or Wayland.
So why do I tell you all of this?
Well, the reason being for a new product,
it takes time and continued effort
for mainlining all the things.
And the experience can differ largely
by a particular SOC in your hands.
And you'll find that despite even when
the vendor does everything right,
it's still not perfect.
To really solve this problem,
there has to be a way for hardware makers
who are both capable and willing to do the work
to achieve something greater
than what I was able to do in my job.
In his opinion, it's just not there yet,
he says, Alex, that the ecosystem
just can't support the kind of rapid support
that the hardware needs at this stage.
And you know, after reading this,
I was thinking, look at the Raspberry Pi.
It's been around forever.
And of course, they've had iterations
that have changed things,
but you really still even there,
you kind of have to get an image
that's at least been tested for the Raspberry Pi.
You can now get the Ubuntu ARM image
and it will boot on the Raspberry Pi.
But that's only just recently.
And it's really not there with all distros.
Yeah, you make a good point.
I mean, the Ubuntu image for the Pi 4
has made a big difference for me
to the overall kind of feel of it
being a real, air quotes, a real device.
And it's now in production for me.
I'm using it as Pi KVM,
which ironically runs on Arch.
But anyway, yeah, I agree with you.
I mean, I ended up getting ZFS
working on the Helios 64 after the review.
In the end, it was a few days,
there was a kernel update
and DKMS started working again.
But yeah, I just don't know how
without an Apple level of control
over both the hardware and software,
you could ever hope to solve this problem fully.
Slow but steady.
There are standards like server ready
that try to solve this more for the data center.
But those lessons could be learned
in the consumer devices.
But there's just not necessarily the vendor buy-in.
And there's not necessarily the vendor buy-in
to support the development, right?
That's an area where they could apply
a little bit of leverage.
They could hire people to just write the code
and contribute it more
and participate in these projects.
But it's only so scalable.
And it's really not a problem
we have on the x86 side of things.
We're so kind of swept up by the power usage of ARM
or the small size form factor or the price point.
I think we forget some of the luxuries
that we've gained over the years with the x86 platform.
It just works.
You don't have to think about it.
You don't have to grab a special version
of a Linux distro or Windows
or whatever it is to run on it.
And with Apple changing to ARM based CPUs,
that's the first real departure
that mainstream computing has seen
from x86 instruction sets for 15 years.
And I think that's gonna influence,
hopefully in five years time or so,
the rest of the industry will run on it.
We'll be in a similar position to where Apple are now
with that kind of level of integration.
Of course, Apple will be five years
further down the road by then.
So who knows, maybe they'll never catch up.
But it's a really interesting time for sure.
And I really wanna support these guys
doing these projects like COBOL.
They're a small team.
They're not doing this to become millionaires overnight.
They're doing it for the love, I'm sure.
And they made a really great product.
It just missed in a few key areas.
So I wanted to let some of the listeners know
that I will be selling my Helios 64.
So if you're interested in the market,
just let me know via Twitter.
You don't have to wait for it to ship
or anything for the next batch.
We'll sort something out.
Just leave a little stink on it when you ship it out.
Let's make it real special, okay?
Get a little bit your stink on there.
I'll sign the inside in Tipex or something.
How about that?
I wanna say also a special thank you
to our members at selfhosted.show slash SRE.
You can become a site reliability engineer for this show.
You get a limited ad feed and you get extra content.
You get a post show.
I think it's gonna be a doozy today.
So thank you to our SRE team.
You keep this show up and running.
You are our reliability engineers.
I wanna mention that you can find our sponsor,
A Cloud Guru on social media.
It's just slash A Cloud Guru on any of the major platforms.
Like youtube.com slash A Cloud Guru and go find them there.
Now I know that you all know how to find this
with the gargantuan amounts of feedback we've had.
I mean, we really only got to a small portion of it
this episode, but please do keep sending it in
because it keeps us vitalized and connected with you guys.
And particularly in these present times,
hearing from you helps us keep the show focused
on what you guys wanna hear about.
So selfhosted.show slash contact
is the place to go to get in touch with us.
You can find me on Twitter at ironicbadger.
And I'm there too at Chris Last and the show is at Self Hosted Show.
And don't forget the network at Jupiter Signal.
Thanks for listening everybody.
That was selfhosted.show slash 35.

WEBVTT

00:00.000 --> 00:06.400
Well, welcome to episode 73, everybody. My usual co-host, Chris Fisher, is unfortunately out sick

00:06.400 --> 00:11.840
this week. We think he might have the Rona. So please send him your best wishes. But joining me,

00:11.840 --> 00:16.400
I have a very special guest. I have Techno Tim. Hi, Tim. Hey, thanks for having me.

00:16.400 --> 00:20.000
Well, thank you. Absolutely. Last minute, I messaged Tim yesterday and said,

00:20.720 --> 00:26.640
yeah, Chris isn't feeling so good. Do you happen to be free tomorrow night? And serendipitously,

00:26.640 --> 00:32.240
he was. So here we are. So this episode, we're going to be talking about all things Homelab.

00:32.240 --> 00:39.040
Tim just passed 100,000 subscribers on YouTube. Congratulations. Thank you. Thank you. Yeah,

00:39.040 --> 00:44.080
it's crazy. And as part of that, I think you launched 100 days of Homelab initiative,

00:44.080 --> 00:46.640
which we'll come to in just a minute. But before we get there,

00:46.640 --> 00:51.360
usual plugs for things like the Discord at selfhosted.show slash discord. We've got over

00:51.360 --> 00:58.320
4000 people over there talking about all things self hosted, maker spaces, home assistant,

00:58.320 --> 01:03.920
all that kind of stuff. You all know as well that we've got a UK meetup coming up in August.

01:03.920 --> 01:10.800
The date did change due to some flight stuff with me. So the new date is provisionally August

01:10.800 --> 01:15.600
the 5th. We're still trying to find a venue. And now if you have any ideas about where we might

01:15.600 --> 01:19.280
host this thing in London, I've been ringing around a few places the last few days trying

01:19.280 --> 01:23.520
to find a pub with a big beer garden or something like that so that we don't have to hang out on

01:23.520 --> 01:30.240
like a village green or something. You know, the requirements are outdoors has toilets has beer.

01:30.240 --> 01:34.880
I think that's probably a pretty good recipe for a good meetup. So if you have any ideas about

01:34.880 --> 01:40.720
where we might do this in London general area, let me know. I'm on Twitter at ironic badger.

01:41.280 --> 01:47.200
So remember, that's the provisional date is August the 5th. And I think that's about it.

01:47.200 --> 01:50.960
So it's probably about time we start talking about the 100 days of homelab.

01:51.520 --> 01:54.960
What madman came up with 100 day hour a day challenge?

01:55.680 --> 02:02.080
Yeah, me, I guess, you know, 100 days of homelab is something that I've been noodling on for,

02:02.080 --> 02:06.960
I'd say, about six months. You know, I'm a software developer, and software developers

02:06.960 --> 02:12.080
have had a challenge for a while. It's 100 days of code, and it pops up in my my feed everywhere.

02:12.080 --> 02:18.880
And I think what a great initiative. You know, you you form a habit by doing something once a day,

02:19.520 --> 02:24.800
for an hour a day, with a goal in mind and march towards that goal for 100 days. And by the end of

02:24.800 --> 02:29.920
the 100 days, you'll learn something. Maybe you'll learn how to program. Maybe you build a website,

02:29.920 --> 02:34.000
whatever it is, maybe you'll learn that actually, you don't like the thing that you signed up to do

02:34.000 --> 02:37.920
quite as much as you thought you did. That is true, too. Yeah, very good point. Yeah, you might

02:37.920 --> 02:42.480
discover this is not for me. Like I thought programming wasn't for me in college, but now

02:42.480 --> 02:48.000
it's programming for me out of college. You know, I had that idea of, okay, how can I get people in

02:48.000 --> 02:53.840
the homelab community one together and motivated and excited about about doing stuff? I'm excited,

02:53.840 --> 02:58.960
I know a lot of people are, but, you know, just kind of bringing people together. And the whole

02:58.960 --> 03:04.720
entire landscape of a homelab, if you think about it, it's gigantic. But, you know, I kind of think

03:04.720 --> 03:10.880
of it as networking, storage, infrastructure, automation, a little bit of DevOps, some hosting,

03:10.880 --> 03:14.880
you know, it's a lot of different things to a lot of different people. And, you know,

03:14.880 --> 03:19.440
that landscape is is rapidly changing, you know, especially in the last couple of years,

03:19.440 --> 03:24.000
if you think of infrastructure as code or, or anything, or storage, storage, now in

03:24.000 --> 03:28.640
Kubernetes, storage everywhere, it's all changing, you know, software defined networks. And so I

03:28.640 --> 03:35.760
thought, hmm, I have 100k coming up, and what can I do that has, you know, has as related to 100.

03:35.760 --> 03:40.400
And that's what I thought, I thought, well, maybe I'll launch something around then. Yeah,

03:40.400 --> 03:44.400
I was six months out. And I thought, you know what, I'm just gonna do what I do best and

03:44.400 --> 03:51.200
procrastinate for six months until this, you know, this 100k subs, if it ever comes, but

03:51.200 --> 03:55.120
it came pretty quick. So I had to get on the ball. Well, that's a nice problem to have.

03:55.120 --> 03:59.760
You know, I, I'm not sure if I've ever told this story on air, but I did a computer science

03:59.760 --> 04:04.480
masters, I was originally a trained musician, and then did a few years at the Apple store and went

04:04.480 --> 04:10.000
and did a comp sci masters. One of the friends I made on that course went and did a PhD straight

04:10.000 --> 04:16.480
away afterwards. And his PhD was into defining DevOps, I don't know how he managed to swing that

04:16.480 --> 04:22.400
with his supervisor, but he did, and he got paid to do it. And I think this dude spent four years

04:22.400 --> 04:27.200
defining DevOps in his PhD thesis. Do you know what the outcome of the four years was?

04:27.200 --> 04:27.920
What's that?

04:28.480 --> 04:31.200
There isn't a definition. It's too nebulous.

04:32.000 --> 04:34.480
I like it. I like it. I like it.

04:34.480 --> 04:39.200
If only someone would pay me for four years to do absolutely nothing. I mean, sorry, sorry, Steve,

04:39.200 --> 04:45.280
if you're listening, but it's a, it's an interesting thing that you raised seriously that

04:45.280 --> 04:51.840
DevOps, in general, means whatever you want it to mean. It really just, you know, it's just

04:51.840 --> 04:56.880
really, truly it does. You know, to some people, it means that you're a cloud expert. To other

04:56.880 --> 05:00.640
people, it means that you can write Terraform code. To other people, it means that you know

05:00.640 --> 05:04.720
all about networking, right? It just depends on the problem that you happen to need to solve

05:04.720 --> 05:09.920
that's in front of you this week. It's almost like just like a buzzword, like a magic word

05:09.920 --> 05:14.400
that management don't have to hire specific people to do specific tasks. We want a generalist

05:14.400 --> 05:19.360
that knows a little bit about everything. And I think that's typically where DevOps comes in.

05:19.360 --> 05:23.280
That's a that's a good point. And it's, you know, it's it can be lumped as anything from

05:23.280 --> 05:28.160
getting code into production and whatever that means. It could be, you know,

05:28.160 --> 05:33.280
that's a huge chasm to cross. And it could be many different technologies. And yeah,

05:33.280 --> 05:38.160
it's a, you know, a jack of all trades type of role, but very needed.

05:38.160 --> 05:41.840
Oh, you've you've used a database, have you? Okay, so that means you're a DBA now.

05:41.840 --> 05:44.000
That's right. That's right.

05:44.000 --> 05:47.840
So what kind of stuff have you got planned? I've seen you've done, you know, your launch video,

05:47.840 --> 05:53.520
your 100k subs video was pretty cool. You had 12 of the biggest home labbing YouTubers as a

05:53.520 --> 05:58.080
massive collaboration. You know, it was Wendell, friend of the show on there, a bunch of other

05:58.080 --> 06:02.480
people, Jeff from craft computing. What else do you have planned for the hundred days?

06:03.120 --> 06:08.800
I'm on day four today. You know, but for me, it was just to kind of get people motivated about,

06:08.800 --> 06:13.600
you know, getting into homelab, whether they are already doing it or rekindling that, you know,

06:13.600 --> 06:19.360
that passion they have for it. It was just kind of getting everybody on the same page,

06:19.360 --> 06:23.520
like created hashtag for it. And what I'm realizing through this hashtag is, is,

06:23.520 --> 06:27.680
is that one people are using it by my Twitter has never been so active. I don't have a lot of

06:27.680 --> 06:33.760
followers. So I'm like, Whoa, this is how almost famous people feel. What is the hashtag 100 days

06:33.760 --> 06:38.160
of homelab? It's small, but people are using it. And what I'm discovering through this is,

06:38.160 --> 06:43.040
you know, these, these updates that people are giving are very similar to my daily stand up to

06:43.040 --> 06:47.840
my scrum, you know, as a software developer, you know, if you do scrum, you stand up and say,

06:47.840 --> 06:52.000
you know, what did I do yesterday? What did I do today? And, you know, do I have any roadblocks?

06:52.000 --> 06:58.160
And it's, it's very awesome seeing everyone just kind of chiming in with what they're working on

06:58.160 --> 07:03.440
today, what challenges they're facing, and then seeing other people join in and talk about how

07:03.440 --> 07:08.560
you could solve a particular problem or, hey, how did that work out for you? It's just been very

07:08.560 --> 07:15.040
awesome. So I don't know what the long term plan is. If I get to day 100, and someone is on day one,

07:15.040 --> 07:21.040
feel like that's a success. That means that, you know, this has gone longer than my 100 days and

07:21.040 --> 07:25.600
someone else's journey is starting now. And so, you know, there's a lot of people said, Do I start

07:25.600 --> 07:29.840
with you? Don't I start with you? Start when you want, like, you know, just because my trains

07:29.840 --> 07:33.920
leaving today doesn't mean your trains leaving today, your train could be leaving next week.

07:33.920 --> 07:40.640
Choo-choo. That's right. That's right. And so, you know, I, if I get to day 100, and I see a day one,

07:40.640 --> 07:45.440
that means this whole thing was a success, because it's bigger than, than my 100 days,

07:45.440 --> 07:50.480
you must have some kind of an overarching goal. Because, you know, the time I think about when I

07:50.480 --> 07:55.680
was really probably the most active in terms of development over the last few years was just

07:55.680 --> 08:00.080
before I immigrated, actually, I was, I was pretty stressed about the move coming up, you know,

08:00.080 --> 08:05.600
England to America, and I just needed something to distract me. So I used, I spent hours writing

08:05.600 --> 08:11.520
Ansible playbooks to completely Ansibilise the deployment of my server. And at the time, it was

08:11.520 --> 08:16.880
mostly Ansibilised. But I'd done it three or four years prior. So a lot of the stuff I'd learned,

08:16.880 --> 08:20.880
you know, as a consultant, for a while, I'd learned some tips and tricks, and I've learned some new

08:20.880 --> 08:26.000
stuff. And I thought, right, I want to do it properly. And my goal was to do as much as I could

08:26.480 --> 08:31.120
through one or two commands to deploy the whole thing. Is there something like that at play for

08:31.120 --> 08:36.560
you here? Possibly, I mean, I've done some Ansible automation, I think just a couple of months ago,

08:36.560 --> 08:41.360
you know, I created an Ansible playbook to create a high availability Kubernetes cluster,

08:41.360 --> 08:45.520
along with load balancers all in one, because I saw that as a pain point for a lot of the people

08:45.520 --> 08:52.400
that were using Kubernetes. So yes, it is. And so I found a whole bunch of forks that were left

08:52.400 --> 08:57.440
abandoned, and I made them work. And so I, you know, automated a lot of that. But with this,

08:57.440 --> 09:02.880
you know, I'm, I'm not sure. I mean, for me, it was really supposed to be kind of a, you know,

09:02.880 --> 09:07.760
a celebration video, and at the same time, get people involved. But long term, I honestly,

09:07.760 --> 09:12.960
I didn't think it was going to be, you know, turn into something as big as it is now.

09:12.960 --> 09:18.720
Well, you've got to stop coming on people's random podcasts and talking about promoting it.

09:19.680 --> 09:25.280
That's true. That's true. I mean, it's a great initiative. I mean, if there was ever, you know,

09:25.280 --> 09:30.720
some learning company that wanted to do something and help people in infrastructure do something,

09:30.720 --> 09:36.640
I'd be all for it. But honestly, no, no long term plans. It was an idea that turned into a video,

09:36.640 --> 09:42.560
I got a lot of awesome people on YouTube to help me out. And that's where it stopped. For me,

09:42.560 --> 09:48.800
it's, you know, it's obviously still going. Sounds to me, like you had this bright idea,

09:48.800 --> 09:52.080
and you didn't think, what happens when I release this into the world? Like,

09:52.080 --> 09:55.680
do I actually have to follow through on this thing? That's true. I've been, in fact,

09:55.680 --> 10:01.360
that's this show, you know, for me. I'm living it, baby. That's right. But I bet. I bet. Yeah.

10:01.360 --> 10:06.240
Like, I didn't think, how does this scale? What, you know, what's my long term goal?

10:06.240 --> 10:10.400
Right. Which is ironic for someone who's as deep into Kubernetes as you are.

10:10.400 --> 10:15.280
Yeah. I mean, usually my, you know, my videos do okay over time. But this one did really good,

10:15.280 --> 10:20.400
really fast. And that's, that's not, you know, my typical, you know, release cycle for videos.

10:20.400 --> 10:25.840
I released a lot of videos and tutorials and how to set things up on deeper topics. So I get lots

10:25.840 --> 10:31.760
of views over time. And, you know, usually I'll get some tweets and, hey, how did you do this? Or,

10:31.760 --> 10:35.840
you know, or someone on Discord will ask, how do I fix this? And, you know, basically,

10:35.840 --> 10:43.360
like async tech support. But with this one, it was like, no one needs my help. They're all doing

10:43.360 --> 10:48.720
it themselves. And but at the same time, they're all joining in. So it's, it's really unique from

10:48.720 --> 10:54.000
what I've done in the past. So at this point, I suppose it's worth kind of defining what a

10:54.000 --> 10:59.680
homelab is. And maybe you could tell folks how you got into homelabbing to start with. And,

11:00.400 --> 11:05.280
you know, that kind of thing. Yeah, it's a it's a huge topic. I even have a hard time describing

11:05.280 --> 11:10.800
homelab to people at work or anything else, because I think that, you know, that the term

11:10.800 --> 11:16.720
has kind of evolved into a lot of things. The way I look at it is it's, you know, when you think of,

11:16.720 --> 11:21.680
you know, you went to school, you had a computer lab there where maybe that computer lab, you were

11:21.680 --> 11:26.400
able to set up certain environments, and destroy those environments or build them up or do whatever

11:26.400 --> 11:30.880
you wanted to tinker in those environments. And that's kind of the idea, I think, behind homelab

11:30.880 --> 11:36.240
is that you can set up an environment a safe place where you can set up an environment to tinker with

11:36.240 --> 11:43.280
tools or to explore new technologies or automate some some infrastructure or geek out on storage

11:43.280 --> 11:48.800
and networking. It's even turned a lot into self hosting stuff at home to people, you know, I say

11:48.800 --> 11:53.760
it to they, they've kind of coalesced. And sometimes I'll, you know, I'll say, hey, yeah,

11:54.560 --> 11:59.920
like the website, I'm self hosting it in my homelab. But, you know, it's more than a lab

11:59.920 --> 12:03.520
then at that point, you know, it's, it's, it's, it's borderline. Just make sure when you're

12:03.520 --> 12:07.680
tinkering, you don't take Plex down because the wife will come and find you. Oh, yeah,

12:07.680 --> 12:14.640
Plex or DNS. Yep, that's I hear faster than my alerts. It's true. How do I know the Wi Fi is off

12:14.640 --> 12:20.400
the kids are shouting? That's right. That's right. All Plex must be done. Yeah, it's it's so many

12:20.400 --> 12:24.720
things to so many different people. So it's really hard for me to kind of summarize it because to me,

12:24.720 --> 12:29.280
it means something different. But and to someone else, it means, you know, something different. But

12:29.280 --> 12:33.840
for me, for a long time, it's been just a place where I can spin up stuff and test stuff and tear

12:33.840 --> 12:38.960
it down without the fear of destroying, you know, the company's production. And a lot of times,

12:38.960 --> 12:43.920
if you work at a big company, you don't have access to a lot of the stuff, either security

12:43.920 --> 12:48.720
wise or physically, you don't have access to a lot of the tools. And then on top of that,

12:48.720 --> 12:54.000
a lot of the times, the architecture is just, you know, decided before you get there. So you're just

12:54.000 --> 13:00.880
implementing stuff. Deleting a production VPC is a rite of passage. That's right. Yeah, our work

13:00.880 --> 13:06.000
sometimes Kafka accidentally gets deleted in our environments. But the worst thing I've ever done,

13:06.000 --> 13:10.640
I don't think I've ever said this on air is I deleted a production load balancer. Oh, yeah. And

13:10.640 --> 13:15.920
I didn't know what I'd done at the time. And then suddenly, all the senior developers came out of the

13:15.920 --> 13:21.840
break room and were like, why are all of our alerts firing? I'm like, I was working on the load

13:21.840 --> 13:29.040
balancer. Oops. I've been there before where you're like, I did just make a change. But I hope it

13:29.040 --> 13:35.120
wasn't that. Yes, we made some changes to the CI process after that. So I mean, you could say

13:35.120 --> 13:40.960
that Alex is screw up. Save the company money in the long run. Here you go. Yeah. Yeah, I'll take

13:40.960 --> 13:46.080
it. I'll take it. Yeah, I mean, you you raise another good point. Like, I think a home lab,

13:46.080 --> 13:51.360
it means different things to different people, much like DevOps does, I suppose. I mean, to me,

13:51.360 --> 13:59.440
a home lab is I don't have a set by me, I suppose I do, because I didn't sell the Juulzeon box I

13:59.440 --> 14:05.120
retired a year ago yet. But really, a home lab should be separate from any kind of production

14:05.120 --> 14:09.680
services. You know, and I use the term production loosely at home, although maybe it's not that

14:09.680 --> 14:14.080
loose, because I have stuff like Home Assistant now, and Plex, as we talked about, and a bunch

14:14.080 --> 14:18.720
of other stuff that I actually do rely on, you know, Home Assistant, particularly to run multiple

14:18.720 --> 14:26.000
facets of my house. So a home lab, to me at least, is something, a space that I can just break stuff,

14:26.000 --> 14:32.080
and it doesn't matter. And it can come all different shapes and sizes, right? I mean,

14:32.960 --> 14:37.920
I mentioned I had a Juulzeon box that I could use as mine. People use Raspberry Pi's. What other

14:37.920 --> 14:43.840
stuff? Oh, anything. I mean, people are using old broken laptops without a screen. Some people are

14:43.840 --> 14:50.800
using old PCs. My recommendation most of the time when people say I want to build a home lab is,

14:50.800 --> 14:56.000
well, just upgrade your current PC so you get an upgrade, you know, and on the machine you use the

14:56.000 --> 15:00.160
most and use the one that's sitting over there for your home lab. You know, have that be your first

15:00.160 --> 15:03.680
one. And you get two for one. You get two for one. You get an upgrade on your main machine,

15:03.680 --> 15:07.920
then you get a pretty nice machine for your home lab. And that's probably going to outperform a lot

15:07.920 --> 15:12.640
of the things that you would you would buy otherwise or spend a lot on. I was just thinking

15:12.640 --> 15:18.640
about upgrading, you know, consumer grade gear. And the thing that runs out first in a home lab

15:18.640 --> 15:23.840
scenario always is memory. You always run out of RAM first. And you know, you think about using an

15:23.840 --> 15:28.720
old laptop because it's got a built in screen, a built in keyboard, a battery for the UPS, that

15:28.720 --> 15:34.400
kind of stuff. But you can typically only have 16, maybe 24 gigs of RAM if you're lucky. Yeah,

15:34.400 --> 15:39.680
that's not enough to do a whole bunch with. Yeah, no. But a lot of people getting into it are just

15:39.680 --> 15:44.720
getting started. You know, it might be enough to run a hypervisor, you know, three, four Linux

15:44.720 --> 15:49.520
virtual machines and enough to kind of tinker with with something else, you know, and not destroying

15:49.520 --> 15:54.960
their own production machine. But, you know, it spans the gamut. There's used enterprise gear.

15:55.520 --> 16:00.400
Some of my old PCs got converted into rack mount PCs, and now they're in my server rack,

16:00.400 --> 16:05.440
you know, all the way to the new enterprise, which I've even bought before. Super micro servers

16:05.440 --> 16:09.680
sometimes are pretty affordable. But then yeah, all the way down to Raspberry Pis two, I have four or

16:09.680 --> 16:15.280
five of those. So it's I you know, I generally thinking of any any, it can be any computing

16:15.280 --> 16:23.520
device, I think, can be used mostly and in a lot of the same ways. Now over at wiki.selfhosted.show,

16:23.520 --> 16:29.600
we have an SSH guest storage leaderboard. At the top of the list, we got Wendell with a petabyte,

16:29.600 --> 16:36.080
who's clearly just showing off and nobody's going to touch that. But I have to ask you, Tim, how

16:36.080 --> 16:43.280
many terabytes do you have on your LAN of raw storage? Oh, good question. I have a lot of RAM,

16:43.280 --> 16:49.120
my disk shelf alone has 40 terabytes. I forgot you had that disk shelf. I mean, there's one,

16:49.120 --> 16:53.680
there's one of your videos guys goes back about a year or so now, I think, where you do an amazing

16:53.680 --> 16:58.480
job of taking us through all the different boxes you have in your rack. And you've even got some

16:58.480 --> 17:02.880
pretty cool LED lighting in that server room, if I recall. Yeah, yeah, it's it's it's yeah,

17:02.880 --> 17:08.160
it's pretty wild. It's similar to it's overkill. But it looks cool. Yeah, it is. It is. You know,

17:08.160 --> 17:12.480
when I first started making content, a lot of gamers were doing it. Now, you know, I play games

17:12.480 --> 17:17.280
too. And I thought, we can't let all the gamers have fun. People with servers can have fun too.

17:17.280 --> 17:23.280
And RGB is how they have fun. No terminals, the only video game I need, baby. Yeah, that's right.

17:23.280 --> 17:32.400
That's right. Or the Chrome, the dinosaur when you're offline. But yeah, I think I'll stick with

17:32.400 --> 17:37.440
40 terabytes. I mean, I know I have, you know, a handful and desktops around here and Macs and

17:37.440 --> 17:42.720
laptops, but it's I can account for 40 right off the top of my head. There's no way I'm getting

17:42.720 --> 17:47.760
close to a petabyte. And I'm sure Geerling Geerling is there now too. He has a petabyte.

17:47.760 --> 17:52.320
That's right with this petabyte PI project. My goodness. That was a cool video. It was. Yeah,

17:52.320 --> 17:55.120
incredible. Incredible. But yeah, I can't touch those.

17:57.520 --> 18:03.440
lino.com slash SSH go there to get a $100 60 day credit on a new account and support the show.

18:04.080 --> 18:08.240
Linode has been rolling out upgrades to NVME storage on their rigs recently,

18:08.240 --> 18:13.040
which offers much greater performance density or IOPS per gigabyte than traditional storage.

18:13.760 --> 18:17.600
If you're a performance hound or your application needs that level of storage throughput,

18:17.600 --> 18:22.080
Linode's team can help you sort through the possibilities for accessing the power of NVME

18:22.080 --> 18:25.200
and arriving at the optimal storage configuration for your environment.

18:25.840 --> 18:31.840
The Linode support experience truly is one of the most remarkable things about Linode as a company.

18:31.840 --> 18:36.640
No matter what time, what day it is, you can open a ticket with a node and know that they'll take

18:36.640 --> 18:40.560
care of you. No matter how silly you've been, whether you've decided to try and install your

18:40.560 --> 18:46.000
own custom operating system on one of their nodes that is not supported, they'll still try and help

18:46.000 --> 18:50.960
you. I can't imagine opening a ticket with some of the other big hyperscalers asking how I'd go

18:50.960 --> 18:56.960
ahead and install some random distro and actually get a coherent reply from a human. Linode's been

18:56.960 --> 19:02.720
doing this for a long time, 18 years in fact, and they just keep getting better. Go try it for real

19:02.720 --> 19:08.720
and see for yourself at linode.com slash SSH. Linode makes it simple, affordable, and accessible

19:08.720 --> 19:14.400
to deploy and manage your customer's projects in the cloud. Linode also has an easy to use and

19:14.400 --> 19:20.400
powerful cloud dashboard with S3 compatible object storage, bare metal servers, cloud firewalls,

19:20.400 --> 19:26.560
DDoS protection, and so much more. In fact, we use Nextcloud here at the network to run the backend

19:26.560 --> 19:31.200
for all of our show storage. So when our editors need our files, for example, they'll go and pull

19:31.200 --> 19:36.720
it down from Nextcloud and that's backed by Linode's fantastic S3 object storage. It just

19:36.720 --> 19:41.440
means as an administrator of a Nextcloud server, I don't have to worry about how much disk space

19:41.440 --> 19:46.880
is free. I just know that Nextcloud can go and create a new object in the bucket and we're all

19:46.880 --> 19:52.560
good. And with pricing 30 to 50% cheaper than the other major cloud providers, Linode can be part of

19:52.560 --> 19:58.560
your multi-cloud strategy. Use our $100 credit to performance test your network so you can see just

19:58.560 --> 20:03.440
how good Linode is for yourself. Go and grab yourself that $100 credit and 60-day free trial

20:03.440 --> 20:13.840
over at linode.com slash SSH. That's linode.com slash SSH. Now I think the thing that I found you

20:13.840 --> 20:19.920
for first was Kubernetes content. You were doing a bunch of stuff with Rancher, I think at the time,

20:19.920 --> 20:28.480
and K3S. As an OpenShift guy at work, obviously my propensity is to use OpenShifty type stuff,

20:28.480 --> 20:33.280
but actually I do like to try and keep my skills in the real Kubernetes world without a lot of the

20:33.280 --> 20:37.920
OpenShift magic that goes on with the routing layer and all that kind of stuff. And so that

20:37.920 --> 20:44.400
leads me down the path of looking at K3S. And I always, always, always find myself in this dichotomy

20:44.400 --> 20:50.000
of I want to have something at home to learn on, but my goodness, is this complicated and overkill?

20:50.720 --> 20:57.600
You know, it is. Well, it could be, but I ask, what is overkill? Is overkill 40 terabytes of

20:57.600 --> 21:05.280
storage? Is overkill a V8 engine in your car? Is overkill half a terabyte of RAM? What is overkill?

21:05.280 --> 21:11.120
So, you know, yeah, I've made a lot of K3S content and you hit the nail on the head. Like when I

21:11.120 --> 21:16.480
built my Ansible playbook for K3S, it was to solve a lot of the complexity of setting it up, because

21:16.480 --> 21:20.960
there's a lot of complexity in just setting it up, let alone everything you need to know about

21:20.960 --> 21:27.760
Kubernetes later on. But I think K3S is a, one, it's a fantastic product. It's an easy lightweight

21:27.760 --> 21:32.800
way, air quotes on lightweight, way to run containers on the edge. You know, with it,

21:32.800 --> 21:38.240
you get a full, mostly full Kubernetes API. And you know, for a lot of things, it might

21:38.240 --> 21:43.440
seem overkill, you know, Hey, I'm running one container of everything in my, you know, my,

21:43.440 --> 21:48.320
my Docker stack or portainer or whatever you're using to manage your Docker containers.

21:48.320 --> 21:52.800
But what happens if you want to run two? What happens if you want to make sure that they're

21:52.800 --> 21:58.880
always up? What happens if you want to do that declaratively and, you know, create YAML for

21:58.880 --> 22:04.560
all your deployments? So it's repeatable. How do you handle storage, you know, on, on your single

22:04.560 --> 22:09.680
node, single nodes, pretty easy, but you know, how do you handle it if you have more than one?

22:09.680 --> 22:15.200
And so, you know, Kubernetes asks a lot of those questions of containers and you're left to kind

22:15.200 --> 22:19.840
of figure it out. But for the most part, once you get going with it, I think, you know, like,

22:19.840 --> 22:24.400
like me when I caught the DevOps bug or engineering bug or software development bug, you know, it's,

22:24.400 --> 22:29.920
it's something that you can go really deep on really fast and maybe never come back from.

22:30.480 --> 22:34.320
It definitely is a lot of fun, but it, it, there's a lot of learning involved.

22:34.320 --> 22:39.200
But I always find myself thinking, right, I've got two or three Raspberry Pis sat in the drawer.

22:39.920 --> 22:43.600
And the whole purpose of doing this would be to have a highly available,

22:44.320 --> 22:49.920
I dunno, Git server, web server, whatever it is, basic services like that. I don't think I would

22:49.920 --> 22:55.280
do things like Home Assistant in, in Kubernetes cause it's, it's best suited as its own VM.

22:55.280 --> 23:02.240
And we'll just, we'll forget about that. But there are certain services in the, in my overall kind of

23:02.240 --> 23:07.040
self hosting world that would be pretty cool. You know, at the moment I run everything on

23:07.040 --> 23:12.320
my storage server. So if a disk fails, I have to take that thing out and shoot it in the,

23:12.320 --> 23:17.360
no, I don't do that. I take the disk out and the machine's offline for an hour or two,

23:17.360 --> 23:22.880
or maybe longer if I'm doing some data transfer, I will actually stop all the containers on that

23:22.880 --> 23:26.400
box so that nothing's reading and writing to mergerFS and doing all that kind of stuff.

23:27.600 --> 23:31.680
And I find myself thinking in those moments, which admittedly is only

23:32.720 --> 23:39.360
once a month for a few hours at most, I think, Oh, it'd be great if this was self healing and

23:39.360 --> 23:44.240
that web service had just moved over here and its underlying storage had also replicated and

23:44.240 --> 23:49.280
also done all. And it's just those, all those extra thoughts of, well, but then I need to solve

23:49.280 --> 23:53.120
this problem and then I need to solve that one. And then I need a load balancer and then I need

23:53.120 --> 23:59.520
to replicate the storage and all that kind of stuff. So what's the lowest barrier of entry

23:59.520 --> 24:03.600
to a highly available Kubernetes set up in a home lab scenario?

24:03.600 --> 24:07.920
Oh yeah, good question. So, I mean, you hit the nail on the head with all the challenges you'll

24:07.920 --> 24:13.120
start to face. Those are the known ones. There are a lot of ones you don't know until you get into it.

24:13.120 --> 24:18.400
But the lowest barrier of entry, I think the minimum available, there's a couple of ways

24:18.400 --> 24:23.680
you can do it. With K3S, you can use etcd for your, your, your Kubernetes database,

24:23.680 --> 24:28.240
or you can use a MySQL database, which is external. At the end of the day, you need at

24:28.240 --> 24:32.960
least three nodes for quorum for them to vote. But if you're using the MySQL version, you don't

24:32.960 --> 24:39.040
need quorum because the MySQL database acts as your database. So you, nodes don't need to vote

24:39.040 --> 24:47.200
or it is the tiebreaker. So how does that work? etcd is explicitly designed for Kubernetes,

24:47.200 --> 24:50.080
at least that's the way it feels. I know it wasn't originally, but

24:50.720 --> 24:54.800
it's very lightweight. It's very good at maintaining quorum and the performance

24:54.800 --> 25:01.360
at scale is excellent. MySQL, not so much. Yeah, no, I totally agree. So if you choose

25:01.360 --> 25:06.800
the etcd route, it's going to be very chatty, but highly available. It's going to be replicating

25:06.800 --> 25:12.160
all of the data across all of those nodes. It will have some kind of performance impact if

25:12.160 --> 25:18.240
you're using Raspberry Pis with micro SD cards, probably not the best storage for something that

25:18.240 --> 25:23.680
reads and writes often. But with MySQL, if you have it there, you can run that anywhere. It

25:23.680 --> 25:29.280
becomes your state for where these nodes go and, and look up their state. And then your

25:29.280 --> 25:33.920
database for everything in Kubernetes. But I think the performance is, is good enough,

25:33.920 --> 25:39.120
good enough for, for nodes and good enough for, for k3s. I think otherwise they wouldn't

25:39.120 --> 25:44.240
have chosen it. I suppose I get caught up sometimes in, you know, thinking about this

25:44.240 --> 25:48.880
from my day job and thinking that I must do things properly. I must do it with etcd when

25:48.880 --> 25:53.520
actually probably MySQL, certainly from your description there sounds actually like in some

25:53.520 --> 25:58.000
cases it might be a decent choice. So what do you do? Do you put MySQL on it? You know, let's say

25:58.000 --> 26:02.560
you've got three pies running k3s. Do you then have a fourth that's just dedicated as a single

26:02.560 --> 26:08.080
node for MySQL? Well, if you, if you're doing MySQL, you could do two nodes with a MySQL database

26:08.080 --> 26:11.040
anywhere in the environment that it can communicate with. It doesn't even have to be a

26:11.040 --> 26:15.680
Kubernetes node. So you can have two Raspberry Pis and then your MySQL database wherever,

26:15.680 --> 26:20.560
anywhere else, as long as it can reach, you know, MySQL over TCP. And how's the complexity of

26:20.560 --> 26:25.840
setting up that replication? You don't have to do anything. There's nothing you need to do with k3s.

26:25.840 --> 26:31.680
All of that is obfuscated from you in general, like with etcd or MySQL. You don't need to know

26:31.680 --> 26:36.160
how to do that or how to set it up. Not saying that, you know, you might not have to troubleshoot

26:36.160 --> 26:42.400
it sometimes. But for the most part, it's pretty solid. I'm a huge fan of the etcd way because,

26:42.960 --> 26:47.920
you know, you can spin up nodes, add nodes. And I mean, you could do that with the MySQL version.

26:47.920 --> 26:52.720
More industry standard too. So if we come back to one of the original goals of learning,

26:53.360 --> 26:59.040
right, if you're doing things at home in a very custom way, you could argue that certain businesses

26:59.040 --> 27:04.960
and certain shops will have a huge amount of custom code. Certainly older, more legacy shops

27:04.960 --> 27:09.040
from, let's say, more than 15 years old, let's say, before the cloud was really a thing.

27:09.600 --> 27:13.840
They'll have a lot of on-premise infrastructure that you'll go and you'll read the wiki if they

27:13.840 --> 27:19.360
have one and you'll scratch your head and be like, why did you do it that way? Because 20 years ago,

27:19.360 --> 27:24.880
there was no other way, mate. That's why. Yeah, exactly. So, you know, there is that to contend

27:24.880 --> 27:31.040
with if you think about doing the MySQL route is it's not an industry standard way of doing things,

27:31.040 --> 27:37.120
whereas etcd is. So, you know, you've got a few pies now running K3S with, let's say, etcd as the

27:37.120 --> 27:43.200
backend. What next? So the next thing I highly recommend doing is going figuring out storage.

27:43.200 --> 27:47.280
Well, there's two pieces. It's choose your own adventure. Remember, I said the terminal is the

27:47.280 --> 27:53.280
only video game I need, baby. You see what I mean? Yeah, so those are the two things. And I recommend

27:53.280 --> 27:58.000
people like figure that out up front. I know most people when they build a cluster, they don't even

27:58.000 --> 28:02.960
have K3S in mind and maybe they do, but they're more focused on the service that they want to

28:02.960 --> 28:08.480
run. They want to run WordPress or Ghost or Plex, maybe. And so they're really focused on that.

28:08.480 --> 28:13.120
And sometimes I have to remind people, OK, before you do that, figure out storage and load balancing

28:13.120 --> 28:18.000
because that's that stuff to figure out. I would probably say figure out storage too, because

28:18.000 --> 28:23.120
almost every stateful application, so stateful applications and Kubernetes are ones that

28:23.120 --> 28:29.280
write state or keep state in memory. But for ones that write to a volume to disk, you need to figure

28:29.280 --> 28:34.960
out storage. And you can do the, hey, put it all in NFS. But then you're taking, you know, you're

28:34.960 --> 28:41.120
taking this highly available service, K3S, and making it, you know, putting in a single point of

28:41.120 --> 28:45.920
failure, which is probably your NFS. It's the same thing with MySQL too. And when we were talking

28:45.920 --> 28:49.360
about that earlier, the reason why I don't choose that is because you're just, you know, you're

28:49.360 --> 28:53.040
taking something that's highly available and all of a sudden you're making a single point of failure

28:53.040 --> 28:59.120
be your MySQL server. And then you have to make your MySQL server HA to make that HA. And so it

28:59.120 --> 29:05.840
just grows exponentially. It depends on how rigid you are about making things highly available.

29:05.840 --> 29:11.440
And so you have a lot of choices, you know, but for storage, it's really going to be up to you

29:11.440 --> 29:15.920
if you want to make it highly available. You could dump everything in NFS and that's fine.

29:15.920 --> 29:20.720
Or you could choose things like Rook Ceph or Longhorn. There are options.

29:21.360 --> 29:28.080
Why didn't I take the blue pill? That's often what I end up thinking at 2 AM when I've started one

29:28.080 --> 29:37.200
of these ludicrous adventures down that particular rabbit hole. So let's presuppose that we now have

29:37.200 --> 29:43.680
a running Kubernetes cluster with a load balancer with storage and everything's working. We've got

29:43.680 --> 29:48.480
a completely empty cluster. Now what? Where do people find apps to actually run on this thing

29:48.480 --> 29:55.120
that are compatible with Kubernetes? Yeah, good question. So most, most, I'll say most, air quotes,

29:55.120 --> 30:01.040
most containers that are built on Docker are compatible with Kubernetes because Kubernetes

30:01.040 --> 30:05.520
under the covers is now using a different container runtime. It's not important,

30:05.520 --> 30:10.320
but it's compatible with Docker images and Docker containers. So one, anything you were previously

30:10.320 --> 30:14.720
running in Docker most likely is going to run in Kubernetes and that's how it was designed to work.

30:15.360 --> 30:18.960
Something you'll need to pay attention to, and I kind of hinted at it a little bit was,

30:18.960 --> 30:23.600
was, you know, stateful applications. You'll need to make sure that that application you have can

30:23.600 --> 30:28.800
scale. Everybody thinks like, oh, you know, I'm running Plex. The way to make it highly available

30:28.800 --> 30:34.560
is spin the replicas up to three. It's not going to work. It's not going to work. Yeah. So if,

30:34.560 --> 30:39.040
if things weren't built to be stateless, you're not going to be able to scale them. You'll get

30:39.040 --> 30:42.960
some other benefits like they could bounce around on nodes, but you can only run one.

30:42.960 --> 30:47.760
So it's almost a bit like RAID in that regard, right? It's not designed to increase your

30:47.760 --> 30:53.360
resilience necessarily. It's designed to increase your uptime. So the whole sales pitch behind

30:53.360 --> 30:59.200
Kubernetes that kind of got me excited about it in the beginning was, let's say you had a Plex

30:59.200 --> 31:04.640
instance running on node one and node two and three are just sat there chilling out, doing nothing.

31:04.640 --> 31:09.920
Node one has a hardware failure and Kubernetes is running a loop constantly checking the state

31:09.920 --> 31:15.200
of these things. And every time that loop executes, it's saying right on node one,

31:15.680 --> 31:22.640
this pod exists, Plex exists, and it matches the state declared in the YAML file that Alex put in

31:22.640 --> 31:27.680
place. Cool. Everything's hunky-dory and it will carry on doing that loop. I don't know what the

31:27.680 --> 31:34.080
frequency is, but it's many times a minute that that typically happens. Now what happens when node

31:34.080 --> 31:40.560
one has a hardware failure or drops off the network or just crashes if the application crashes

31:40.560 --> 31:44.800
for some reason? Well, Kubernetes is going to come around and do its health checks and make sure

31:44.800 --> 31:48.960
that everything's tickety-boo. And it's going to say, hang on a minute, the desired state over here

31:48.960 --> 31:54.240
doesn't match what I'm expecting. Well, what I'm going to do is I'm going to utilize a different

31:54.240 --> 31:58.640
node that matches the node selector rule that you've put in here. Let's say it's a node with

31:58.640 --> 32:04.640
quick sync for transcoding, for example. Not every node in your cluster might have a GPU available

32:04.640 --> 32:09.840
to do that. The loop will go around and it will say, hey, okay, well, out of the five nodes in

32:09.840 --> 32:14.720
this cluster, I can use these two. And now I'm going to take the Plex pod and I'm going to make

32:14.720 --> 32:19.120
sure it's destroyed over there, but I'm going to spin up a new one over here. And then I'm going to

32:19.120 --> 32:24.160
tell you that that happened in your log and alert you about it. That's, generally speaking, the

32:24.160 --> 32:28.960
typical use case for a stateful application in Kubernetes. Like Tim was saying, it's not

32:28.960 --> 32:35.760
to have three copies of Plex running at the same time because the database writes. And if you think

32:35.760 --> 32:40.480
about how the data would flow in that transaction, you're coming in to watch video. Well, which

32:40.480 --> 32:45.680
version of the Plex runtime are you hitting? And then that version of the Plex runtime has probably

32:45.680 --> 32:50.880
got its fingers in the database somewhere. And how does the database know which one to listen to? And

32:50.880 --> 32:57.600
it can get very confusing very quickly, which is why a lot of dev shops have to architect things

32:57.600 --> 33:04.080
in a way called the 12 factor app. If you're interested, go and look at 12factorapp.net.

33:04.080 --> 33:08.880
I think that's the website. Hang on. Yeah. Yeah. Good site. Good reference to 12factor.net

33:08.880 --> 33:15.040
is the website. There'll be a link in the show notes. There are a few different ways to run

33:15.040 --> 33:19.120
containers on Kubernetes. Like you were saying, OCI compliant containers, typically that's mostly

33:19.120 --> 33:25.520
Docker containers. There are a few others under the covers as well. There is a project called

33:25.520 --> 33:29.840
Kubernetes at home, which there'll be a link to in the show notes. Kate's at home. And this is a

33:29.840 --> 33:34.960
fantastic resource. If you're not familiar with it, go check it out. You can go over there and

33:34.960 --> 33:40.720
download Helm charts and all sorts of other stuff to run applications on top of your Kubernetes

33:40.720 --> 33:45.760
cluster. And a lot of other smart people have done a lot of the legwork for your thinking about

33:45.760 --> 33:52.480
how do I run an application that wasn't designed for the Kubernetes world to make it run in the

33:52.480 --> 33:57.680
Kubernetes world. Stuff like user management. We're all familiar with the group and user ID stuff

33:57.680 --> 34:02.640
from a normal Linux Docker host. There's some tweaks you've got to make in the Kubernetes world

34:02.640 --> 34:08.320
to translate that stuff across multiple nodes because it's not just typical Linux permissions.

34:08.320 --> 34:14.560
There's an extra layer on top. And there's lots of other small gotchas like that, like Tim was

34:14.560 --> 34:18.080
saying. There's plenty of stuff that you don't know what you don't know until you find out you

34:18.080 --> 34:23.440
don't know it. And it's a deep rabbit hole, but it's one that if you've got any interest in,

34:23.440 --> 34:28.880
I highly recommend you give a look to Tim's channel, as well as the Kubernetes at home

34:28.880 --> 34:34.160
stuff that's linked in the show notes. Yeah. I've worked with Kubernetes at home folks,

34:34.720 --> 34:38.720
a couple of them there. I'm in their community. That's how I got bit by the flux bug.

34:38.720 --> 34:44.400
And declaratively defining your whole entire Kubernetes clustered through manifest.

34:44.400 --> 34:48.240
Yeah, that's a great call out. The Kubernetes at home Helm charts are fantastic,

34:48.240 --> 34:52.880
especially for people self-hosting because they went after a lot of the services that people are

34:52.880 --> 34:57.680
self-hosting. And if you just want normal, I shouldn't say normal, but publicly available

34:57.680 --> 35:03.840
Helm charts for services like NGINX and all these enterprise services, those are out there. Those

35:03.840 --> 35:09.840
Helm charts are out there. But what the Kate's at home Helm charts are, they're going after Plex,

35:09.840 --> 35:14.560
they're going after Sonar, Radar, all these services that people like to run at home

35:14.560 --> 35:19.120
and building charts for them. And if you even search some of the Helm chart repository

35:19.120 --> 35:24.160
aggregators, they reference their charts too. So yeah, they've been a huge help in getting me

35:24.160 --> 35:28.880
on the flux, which is a totally different topic, but it's pretty far down the rabbit hole.

35:28.880 --> 35:32.720
I got absolutely hooked by these guys when I found out I could run a Factorio server

35:32.720 --> 35:36.720
on my Kubernetes cluster. I just thought it was the coolest thing in the world.

35:36.720 --> 35:41.280
So talk to me a bit about GitOps and flux and that kind of thing. We've talked to,

35:41.280 --> 35:46.480
obviously I rambled a lot a minute ago about declarative state and how there's this loop

35:46.480 --> 35:51.920
in Kubernetes that is constantly checking the state of things. GitOps takes that to another

35:51.920 --> 35:59.360
level, right? It does. So GitOps is a lot more defined, I guess, than DevOps. So GitOps is this

35:59.360 --> 36:06.800
idea that you define your cluster state or your environment state in manifest 100%.

36:07.760 --> 36:16.240
And the way that you influence the state of a cluster or infrastructure is by doing it through

36:16.240 --> 36:22.480
Git. So for example, I just went through this exercise. You know, I needed to get, let's just

36:22.480 --> 36:29.600
say an Nginx container. I would add an Nginx manifest, whether I'm using Helm or Kubernetes

36:29.600 --> 36:34.800
manifests, I would create that manifest. I would create that manifest. I would commit it to Git,

36:34.800 --> 36:39.200
and I would push it up. And then there are services within Kubernetes that say,

36:39.200 --> 36:44.080
Hey, I just got this manifest. I'm looking at the current state. I'm looking at the desired

36:44.080 --> 36:50.480
state and I will apply it. And so GitOps basically says that you, the only way you can influence

36:50.480 --> 36:55.520
state is really by influencing Git, but they say through a pull request could be anyway.

36:56.320 --> 37:02.960
But now my, my whole entire cluster at home is that way. And I think the benefit of that is,

37:02.960 --> 37:08.160
is that I can reproduce my whole entire Kubernetes cluster by just saying, you know,

37:08.160 --> 37:13.840
kube control apply or use flux to do it all over again and rebuild my whole entire cluster.

37:13.840 --> 37:18.640
Now data is a different story. I would have to do some restores and data to get those,

37:18.640 --> 37:24.480
those persistent volume claims back. But at the end of the day, I have my whole entire playbook

37:24.480 --> 37:28.000
for how to build my cluster. You know, if you're running your own cluster,

37:28.000 --> 37:32.320
you can do one-offs and do all these weird stuff. You know, you know how it is to tinker.

37:32.320 --> 37:37.600
That's just it. That's just it. GitOps at home might seem like massive overkill,

37:37.600 --> 37:41.200
just like ansible-izing your server might seem massive overkill when it's just you.

37:41.200 --> 37:41.680
That's right.

37:41.680 --> 37:44.800
But if you take these principles into the workplace,

37:44.800 --> 37:48.720
I guarantee you it's going to make you more employable, you'll earn a bigger salary.

37:48.720 --> 37:53.280
But as a team, it just makes your life so much easier because you're not like,

37:53.280 --> 37:58.080
who's done this to the load balancer? Alex, was it you? No, it's in Git. You can go look at Git

37:58.080 --> 38:01.440
blame and you know that it was Tim that broke the load balancer, not Alex this week.

38:01.440 --> 38:06.320
Yeah. Don't let, don't let him. Yeah. And it's, it's, it's nice because, you know,

38:06.320 --> 38:10.400
places I've worked at, sometimes developers have full access to Kubernetes, which,

38:10.400 --> 38:15.520
which is fine. That's a choice made by the company. But anyone can then go kubectl apply

38:15.520 --> 38:20.800
or kubectl delete everything. And then it's gone, you know, and so GitOps basically says,

38:20.800 --> 38:25.600
no more of that. We're separating our concerns. You know, if you want to get things into Kubernetes,

38:25.600 --> 38:30.560
you do it through Git and then you use, you know, a controller or service to apply those to

38:30.560 --> 38:34.960
Kubernetes. So it's, it's very interesting. It's very, it's very bleeding edge. And a couple of

38:34.960 --> 38:40.080
places are doing this now for a couple, you know, flux is one Argo CD is another. And I'm sure

38:40.080 --> 38:44.240
there's a handful of others that are coming up. Even GitLab themselves does it or Tanner does it

38:44.240 --> 38:49.120
for Docker. I mean, this is a hot topic, but it's, it's really awesome. But at the end of the day,

38:49.120 --> 38:53.360
now as a developer, I'm like, okay, I can't, I can't make changes to Kubernetes directly,

38:53.360 --> 38:59.520
which I'm fine with. I'm fine with process. It has upsides and downsides. The upside is,

38:59.520 --> 39:04.000
like you say, everything is declarative and it makes rebuilding stuff really, really easy.

39:04.000 --> 39:09.600
The downside is you have to make every single change that way, no matter if it's a one

39:09.600 --> 39:16.080
character change to a config file and whatever your peer review process is, you know, in a home

39:16.080 --> 39:20.720
lab, it's likely to be you going, yes, yes, mash, mash, mash, yes, yes, yes. Whereas at work, you

39:20.720 --> 39:24.800
know, you might have to get your team lead to approve it and, you know, explain why you missed

39:24.800 --> 39:29.920
the semi-colon off the end of a line or whatever it might be, you know, that kind of thing. So it

39:29.920 --> 39:35.440
has its upsides and downsides. I think for me, the upsides do outweigh the downsides simply because

39:35.440 --> 39:42.080
of everything we talked about. Yeah, I agree. My notes section that I used to have on how to

39:42.080 --> 39:50.000
reconfigure my Kubernetes cluster in the case of an event is gone. It used to be a long list of

39:50.000 --> 39:55.440
helm commands that I used to run, kube control, you know, commands that I run along with manifest,

39:55.440 --> 40:02.400
manifest, and now that's just gone. It's just, no, my documentation is the code and I hate it when

40:02.400 --> 40:06.640
people say that, but it's true. Now my code is the documentation and documentation is the code.

40:06.640 --> 40:11.520
There's no other way to do it. Well, it's the source of truth. It's the most up-to-date version

40:11.520 --> 40:17.120
of what's in production. I mean, the only other more truthful source would be actually production,

40:17.680 --> 40:21.440
but if you've been doing it all through GitOps anyway, they should be the same.

40:21.440 --> 40:26.640
That's right. Yeah, yeah. It's a pretty strict principle, but I enjoy it. You know,

40:26.640 --> 40:31.360
Argo CD is another one that I've been wanting to play with. It's pretty cool. It's a lot more

40:31.360 --> 40:35.920
visual. You know, even before I was doing give up GitOps, I would still deploy stuff through

40:35.920 --> 40:42.560
Kubernetes. I'd still use CICD, you know, pipelines, commit manifests, and then have,

40:42.560 --> 40:47.920
you know, kube control apply during CI. This is a little bit different and it's pretty awesome.

40:47.920 --> 40:49.280
Pretty awesome. It's fun to explore.

40:52.400 --> 40:58.000
tailscale.com slash self-hosted. Go there to get a free personal account for up to 20 devices and

40:58.000 --> 41:03.280
support the show. Tailscale is one of my absolute favorite discoveries of the last 12 months. It's a

41:03.280 --> 41:09.120
zero config VPN. You can install it on any device in minutes and manage the firewall rules for you

41:09.120 --> 41:13.840
and it works from anywhere. I've been able to close all the ports in my firewall, thanks to

41:13.840 --> 41:18.960
the outbound NAT punching that tailscale does. And this means that no matter where I am in the world,

41:18.960 --> 41:25.520
I can connect to my LAN as if I'm sat in this chair. And it is so great. I can hardly explain

41:25.520 --> 41:32.160
to you guys. I can also, thanks to their amazing subnet router technology, connect to the Synology

41:32.160 --> 41:36.240
box running at my mom's house or the server I have running at my dad's house as if I'm on

41:36.240 --> 41:42.160
their LANs as well. For me, one of the best parts is every device on my network gets a stable IP

41:42.160 --> 41:46.800
and auto-assigned domain that stays consistent no matter what network the device is on.

41:47.520 --> 41:52.000
Devices only connect after signing in through your existing identity provider. This means you

41:52.000 --> 41:57.120
can more easily enforce multi-factor authentication and deauthorize those who you've shared things

41:57.120 --> 42:02.320
with who you perhaps wish you hadn't. You can try it for yourself for free for up to 20 machines

42:02.320 --> 42:08.880
at tailscale.com slash self-hosted. And just imagine, what if this is how the internet worked?

42:08.880 --> 42:15.360
What if every machine had a static IP and a DNS name and that address migrated around the world

42:15.360 --> 42:20.960
with you and it was always encrypted and you never had to worry about certificates and all of this

42:20.960 --> 42:25.920
just happened automatically? That's Tailscale. So go and try it out for yourself for free for

42:25.920 --> 42:29.440
up to 20 machines at tailscale.com slash self-hosted.

42:31.520 --> 42:37.120
Jerry writes in, hey guys, in response to the Wi-Fi enabled E Ink device mentioned in episode 72,

42:37.120 --> 42:43.040
I thought you should check out pine64.org slash pine note. Hey, Jerry, I just want to say thanks

42:43.040 --> 42:46.960
for writing in with this one. I mean, I know the conclusion that Chris and I came to in the last

42:46.960 --> 42:51.680
episode was that for the most part, wherever you're going to want an E Ink display, there's

42:51.680 --> 42:58.400
going to be power and therefore a cheap tablet might make more sense. But if you really, really

42:58.400 --> 43:03.360
do want an E Ink display, you can go ahead and look at this pine note developer edition. It is

43:03.920 --> 43:10.480
$400. So what we were saying about E Ink displays being expensive, definitely holds true with this

43:10.480 --> 43:15.840
device, but it does look cool. And obviously, you know, supporting the pine project is a noble

43:15.840 --> 43:20.960
endeavor. Those guys do great work over there. So you can go ahead and take a look at the link

43:20.960 --> 43:26.240
in the show notes to the pine note. And Joshua also writes in, I've been running Linux since

43:26.240 --> 43:31.200
high school and I've been self-hosting almost as long. I am currently getting my masters in

43:31.200 --> 43:35.280
cybersecurity engineering and I've been using the skills I learned to try and make my systems

43:35.280 --> 43:40.960
more secure. One tool I learned about recently is Linus. I think that's how you say it anyway,

43:40.960 --> 43:47.040
L-Y-N-I-S. This scans your configs and gives you suggestions to improve your security.

43:47.680 --> 43:51.760
Do either of you run any tools to help ensure you aren't making any obvious

43:51.760 --> 43:56.400
security mistakes? Now, Tim, I know that you do some stuff like this in your day job. I

43:56.400 --> 44:01.440
wondered if you had any suggestions for Josh. Yeah, great question. I was actually working

44:01.440 --> 44:07.360
on this today. There are a lot of tools you can use to do analysis on the things you use. For

44:07.360 --> 44:13.600
example, I was setting up a container image scanning today to scan Docker containers to look

44:13.600 --> 44:19.440
for vulnerabilities, known vulnerabilities that are higher critical, and if they were

44:19.440 --> 44:24.240
addressed or not. So there are lots of things you could do there like that. You can scan them either

44:24.240 --> 44:29.280
at rest in a container registry, or you can scan them even during runtime if they're in

44:29.280 --> 44:34.720
Kubernetes. And then if you are writing code, there's a lot of static code analysis tools you

44:34.720 --> 44:39.600
can use too as well to scan and look for vulnerabilities in either your code or

44:40.320 --> 44:45.440
dependencies that you're using for your code. Trivia is one that I was using today to set up,

44:45.440 --> 44:51.120
and it's really, really awesome. And it's open source, and they do a lot of scanning of a lot

44:51.120 --> 44:56.240
of different types. They're kind of an all-in-one now where they can scan code, dependencies,

44:56.240 --> 45:00.160
and containers. So now when we see a video come out from you in a few weeks time on that,

45:00.160 --> 45:05.600
I'll be like, hey, you heard it here first. You know, I think for me, cybersecurity is one of

45:05.600 --> 45:12.080
those things. It's obviously a buzzword in certain areas, but just not being the tallest nail is the

45:12.080 --> 45:17.040
name of the game. Don't do silly things like open ports in your firewall you don't absolutely need.

45:17.040 --> 45:22.240
I mean, for me, since discovering Tailscale, I've actually been able to close every single port in

45:22.240 --> 45:27.440
my firewall. I don't have anything open anymore, not even WireGuard like I used to, because

45:27.440 --> 45:32.720
Tailscale does all the outbound NAT punching that I need to get past my own firewall so I can connect

45:32.720 --> 45:38.560
to my LAN as if I'm here wherever I am in the world, which is just great. So stuff like that,

45:38.560 --> 45:42.560
you know, don't open ports in your firewall, I think is a super basic but really important

45:42.560 --> 45:49.360
principle. There's also stuff like using SSH keys or certificates if you want to, using TLS to make

45:49.360 --> 45:53.200
sure it is actually your website that you're connected to through Let's Encrypt. There's

45:53.200 --> 45:58.320
really no excuse these days not to, but I think beyond that just don't be the tallest nail. You

45:58.320 --> 46:04.640
don't use a silly stupid password like password123. At least make some basic effort, that kind of

46:04.640 --> 46:08.320
thing. Use a password manager, that kind of stuff. I think that's all you need to do really.

46:09.280 --> 46:14.480
So Jaqen writes, I love self-hosted and all the rest of the JB shows. I started listening

46:14.480 --> 46:22.240
exactly on the very last last episode and have been a fan ever since. Jaqen, I almost shed a tear

46:22.240 --> 46:26.240
on the last episode at last, I've got to be honest with you. I know Chris isn't here, but I was a huge

46:26.240 --> 46:32.000
fanboy of JB for many years before starting this show and I owe a lot of what I can say and talk

46:32.000 --> 46:38.160
to about Linux, I think to JB as a whole. So I feel you there man, I feel you there. Now he continues,

46:38.160 --> 46:42.720
on episode 71, a listener asked about thoughts on alternatives to the Raspberry Pi.

46:43.680 --> 46:48.800
I think the Orange Pi makes a decent low-cost board. They sell for around 24 bucks and you can

46:48.800 --> 46:54.560
get them directly from the manufacturer. Now Tim, I know you're a bit of a Pi fiend as well as I am

46:54.560 --> 47:02.240
and Chris too. Have you ever heard of these Orange Pis? You know I've heard the name but I can't tell

47:02.240 --> 47:10.480
you how they differ. I can't. I have lots of Raspberry Pis, I even have a Turing Pi 2 and

47:10.480 --> 47:17.360
the only non-Pi device I have is an NVIDIA Jetson, but I haven't heard of them. I need to look into

47:17.360 --> 47:22.000
them especially if they have a better supply than Raspberry Pis right now. Well that's just it isn't

47:22.000 --> 47:28.160
it? Raspberry Pis are unobtainium, so no matter how much we might wax lyrical about them, if you

47:28.160 --> 47:33.440
can't find them then it's pretty much no good to anybody. So yeah, maybe these Orange Pis are the

47:33.440 --> 47:39.440
way to go. They look like a pretty cool board. They're ARM64 based which is, you know, they can

47:39.440 --> 47:44.400
be a bit of a problem sometimes to find applications to run on these things but for a small little

47:44.400 --> 47:50.160
headless box, maybe they'll do the trick. Who knows? If you have been running an Orange Pi

47:50.160 --> 47:56.160
in anger, please write in and let us know at selfhosted.show contact. Now I want to say huge

47:56.160 --> 48:00.800
thanks to Tim for stepping in at the last minute here to help me co-host the show. Thank you Tim.

48:00.800 --> 48:04.560
Yeah thanks for having me. Huge fan. Is there anywhere else you'd like to send people? I mean

48:04.560 --> 48:09.600
I imagine you've got some channel on YouTube. Yeah, yeah, channel on YouTube. Yeah, just Google

48:09.600 --> 48:15.120
Technotim or use your favorite search engine and look for Technotim or just Technotim.live. That's

48:15.120 --> 48:19.680
an easy way to get a hold of me. Very good. Thank you very much for joining us. Now I want to say

48:19.680 --> 48:23.920
also a big thank you to our site reliability engineers, our SRE subscribers. You make the

48:23.920 --> 48:30.000
show possible over at selfhosted.show slash SRE. You can also go and support the entire

48:30.000 --> 48:35.600
Jupiter Broadcasting Network over at Jupiter.party. Don't forget as well that we have the London

48:35.600 --> 48:40.800
Meetup coming up on August the 5th. More details to follow on that soon and again if you have a

48:40.800 --> 48:46.240
venue recommendation please I would love to hear it. As always you can get in touch with us at

48:46.240 --> 48:50.800
selfhosted.show slash contact. That's the place to go to get in touch with us and you can find me on

48:50.800 --> 48:56.080
Twitter at ironicbadger. I'm at Technotim live on Twitter. Very good and thanks for listening

48:56.080 --> 49:09.200
everybody. That was selfhosted.show slash 73.


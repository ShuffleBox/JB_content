I've been busy making tons and tons of bread this week.
Bread? Really?
Yeah, bread, like the dough stuff, right?
You know, flour, water, yeast.
Yeah, okay, how's that going?
It's good.
You know, it's a good way to work out some frustrations needing that dough.
I'll tell you what.
So are you telling me you've bought into the pandemic craze of making sourdough,
or is this bread for something else?
This isn't sourdough.
I'm not a hipster, bro.
I refute that allegation.
Sourdough is delicious.
It is, yeah.
I tried sourdough last year and failed.
Pretty spectacular.
I ended up with this soggy lump of what should have been delicious bread,
and it was, I mean, it tasted fine.
It was just dense AF.
Doesn't sound very good.
Yeah, I've seen those bad bread experiments.
It's not so good.
But this stuff, I'm just making standard crusty loaf, and it's all in the kneading.
It's all in the, you know, working.
You got to work it, girl, you know?
Sure, sure.
I love to work it.
And is it sandwich bread?
Is that what you're doing with it?
Yeah, well, we actually went to Trader Joe's for the first time this week.
Do you have Trader Joe's up where you are?
Sure, we do, yeah.
And we've discovered it's somewhat like, for the British audience,
it's like a cross between Aldi and Marks and Spencer's food hall.
There's only own brand products in this shop,
and we found this thing in there called cookie butter.
It's like peanut butter.
It's a spread, and it goes on bread.
And it's like gingerbread meets Nutella on fresh crusty bread.
I'm telling you, man, there are few meals that are more delicious than that one.
Man, you're making me hungry.
Well, if you want to spend your time learning something else,
maybe you should consider a cloud guru.
They are the leader in cloud learning, and they have all kinds of modern tech skills,
including Linux that you can learn, hundreds of courses,
thousands of hands-on labs.
Get certified.
Get hired.
Get learning at a cloudguru.com.
Or you could learn bread, too, or maybe both.
You mean this isn't the bread action show.
Is that what you're trying to say?
I mean, not yet.
It could be.
Now, you just got back from a trip, right?
Welcome back.
Got back yesterday.
Still a little tired.
Went all the way to Bozeman, Montana, which is one of our favorite destinations.
Just a beautiful spot.
Had the kids, had the dog, had the wife.
So it was a fully loaded bus.
And it's also, I think, Alex, the first trip since the big Project RV upgrades,
like all of them, including the internet setup, have all been in place.
Yeah, nice.
I think the last one I recall you took was down to Texas.
Yeah.
And we didn't have the internet system then.
We had the solar system at that point, but we did not have the internet.
Right.
Your industrial grade carrier busting.
How did that work out?
Well, you know, I'm pretty happy.
I'm pretty happy.
I mean, so the main goal when I'm traveling with the whole family
is to have my self-hosted system in my RV just be like out of the mind,
out of the picture, no hassle, just I call it out of the way automation
because it's like facilitating the entire trip,
but I don't want to be managing it during the trip.
It's like hygiene.
You shouldn't have to think about it.
The minute you're thinking about someone else's hygiene,
like you know they need to step it up a bit.
And it definitely, the setup passed that bar.
It was pretty seamless, really.
I had reception in areas that I've never had reception before.
And the whole thing is like, I want the whole land to be really solid
because the kids are streaming videos off of a Raspberry Pi
or they're playing peer-to-peer networking games.
And I want that connection to remain up
regardless of what the cellular connection is doing.
So I've sort of separated it all out.
I have Wi-Fi access points and I have a router and I keep that all separated
so that way the router could even be offline theoretically.
Because there are times, legitimately,
while we're driving through the Cascade Mountains
or we're going through passes that we just don't have signal.
There's just nobody has a cell tower on the mountain.
So we want stuff to work.
And then when we get back into connectivity,
whichever cellular provider is available and we have three on board,
I want that one to pick up and just start working.
That blew my mind the first time we took a trip in the Southwest
in the deserts around like Utah and stuff is,
we went sometimes an entire workday without any coverage.
Yeah.
Crazy.
Yeah, it is really,
Washington has gotten really good about it, my home state.
We have got towers everywhere except for the tops of the passes.
But there are absolutely parts of Montana
where there's just no signal we were at and same in Texas still.
So what I have for my technology stuff,
because I wanted all the work really smooth
and I just want it to be a really good experience
and it's really when I just need it to be the most hassle-free.
So I kind of have a regime before I go into a trip
and I have these windows of time.
And this is just something where it's for the entire RV,
but the technology stack is part of this.
And the first one is what I call my T48 window.
And that's 48 hours before a trip.
In this T48 window, major changes are allowed to the technology stack.
Like I did an Ubuntu 2104 update to get all the security fixes in.
I installed the latest Home Assistant upgrade.
And if I'm going to remove a node from the network
or add something to the network,
this T48 window is my last chance, 48 hours before we leave.
That's my last chance to make a major change like that.
It's also when I'll take snapshots of Home Assistant and my boxes
and make sure my backups are offsite.
It's a window of time to kind of just do a sanity check on all of my,
what if I lose the devices?
What if there's something that causes me to completely lose the storage
or something like that?
Do I have something in place just to make sure before I go?
You know, it's so great about everything you've just said.
I think you actually have more pre-flight checks
than some customers of mine do deploying stuff into production.
Well, I recently kind of decided to really treat these trips
as kind of an operational thing.
And that goes into like finding gas stations that we can fit in
and the best routes to take and trying to identify weather conditions
and construction and these concepts of a T48 checklist,
we expand that too to like making sure we have propane available,
double checking reservations.
Like it's a lot outside of just the tech stack.
And you know, we also will use this window of time
to make a go or no go call possibly on the trip.
Maybe something came up.
Like this last trip, we had something come up and we're like,
well, we should have added that to the T48 checklist.
And now that's part of what we're going to do from now on.
Oh, hold on, hold on, your checklist has a name?
Yeah, T48. Yeah, yeah.
That's not just it.
We have it's yeah, because that's T minus 48 hours until leaving.
Yeah.
Oh, okay.
I like it.
And then we also have the T24 window.
Now that's the last like crunch time.
That's 24 hours before the trip.
That's when I break down my home office set up quote unquote in the RV.
So I no longer have a PC set up.
So I mostly transitioned to using my iPad for most of my work
or if I have to allow, I'll break out my laptop.
And this is where the change control committee AKA myself says no more big changes.
Just stop with your crazy updates.
I don't care.
I love this so much.
I can't even, oh, this is so good.
It works though.
It's like, and I've been in that window before.
I'm like, oh, I didn't install the home assistant update.
I'm probably going to be too behind by the time I'm on the road trip.
I should do it right before I leave because I'm going to be in a limited
or maybe no bandwidth situation on the road.
But when I'm in that T24 window, no, no major changes
because I don't want to do anything that's going to break
and cause me to go on a big project right before we leave.
Right.
That's what we call in the biz a change freeze window.
Yep.
Yep.
And that is an effect on once the T24 window is in effect.
But you know what I will do during this time is I will manage the media for the trip.
This is part of happy family, happy life where I go through because I have only
two terabytes of media storage in the RV.
So I go through and I purge old movies and shows that we're not watching anymore.
And then I kind of load in the fresh stuff because I want content that the kids can watch
while we're going down the road that I know is kid friendly and will also keep them occupied.
So little tip for you dads out there, what I start doing or you moms is I start collecting
a show for them like weeks before the trip and I don't tell them about it.
And I get it all organized like on an external hard drive.
And then I load it on the Plex server in this T24 window and then I tell Plex to immediately
index and do its thing.
So that way when we set off for the trip, all of a sudden they've just got new content
on Plex.
Oh, look at this.
It's great.
And then something else I'll do is I'll look for like a movie or a trilogy.
That's what I've been doing is finding family trilogies and loading them on there as well.
So while we're on the road, maybe we're at a rest stop for a night or we're at some site
where it's really bad weather and the kids are kind of stuck in the RV, we've got movies
to watch.
Like this year I brought Jurassic Park.
Last year I brought Back to the Future.
I love the trilogies.
Who doesn't love a bit of Jeff Goldblum, eh?
Right.
Oh, my gosh.
I have not watched Jurassic Park in like forever.
And boy, Jeff Goldblum is laying it on thick in that movie.
It's thicker than my cookie butter on fresh bread.
No doubt about it.
So, you know, they get all that stuff sorted in my 24 hour window.
Verify that my LTE networks are all active, that one of my crazy carriers hasn't like
canceled my account for some random reason.
I'll even reboot my router often just to make sure that comes up fresh and nice and snappy.
And then we set off.
And that's kind of my process every time.
And it forces me to go through and verify my backups, kind of forces me to do updates
and figure out what needs updated and what I couldn't do.
And kind of makes me think about what do I need that I can store offline so that way
when we don't have connectivity, life goes on as usual.
And I think it worked really well.
You know, this kind of trip to Montana was one of my use cases in my mind for this whole
project off grid.
That's awesome, man.
Like last time you were trying to solve some issues around, was it the various voice tubes,
the voice assistants and their GPS locations and stuff with them freaking out.
How was that this time?
So the HomePod does all right because it goes often, not always, but by the location of
like the primary phone that set it up.
But the other stuff is really dumb about it.
And so what we just use the other stuff as is reference for what it's like back at home.
So when we ask for weather or we see the clock on there, we know that's what time at home
is or what weather is at home.
And that's just, you know, what really, I think, solved that problem for me was when
I put up the fire tablets that have the Home Assistant dashboard up all the time and the
family can just, they kind of just prefer to do that anyways.
And then I still kind of use the tubes.
But you made a point the other day on Linux Unplugged.
There's actually a great interview on there.
And we were torn about whether to use that interview in this show or LUP.
And we ended up using it in LUP in the end with Aaron about his converted school bus.
Yeah, really cool project.
You know, and Alex, he's taken to the next level.
I'm still not there yet where I'm not pulling all of the metrics out of my electrical system
and putting it into Home Assistant, but he's done it.
He's done it with some raspberry pies and a little box that Victron makes called the Venus.
And he gets all that information in there.
And I love that idea.
And then what I want to do is kind of gamify it a little bit.
And I saw another post recently from a dad who took Home Assistant and put family chores
in there and the family checks off the chores via the Home Assistant Lovelace dashboard.
And it generates points.
You saw that?
I saw that one, yeah.
It's such a great way.
I'd love to do that, but with power to kind of encourage and incentivize the family to
conserve power, although on this trip, Alex, legitimately, the solar system was totally
enough.
I was worried that 600 amp hours of lithium would not be enough power for a full family.
But when you get some good solar coming in, like we had on this trip, we had good solar
every day, and you're doing just a little bit of driving so you also charge from the
alternator, I'm not exaggerating when I say we had unlimited power.
We had more power than we could use for the nearly two weeks.
We just lived life as if we were hooked up to the grid, and I never had to tell the kids
turn off the lights or don't turn that TV on.
I do still struggle with some overheating problems.
I had my power system overheat once when it was pretty hot out and we were really pushing
it, and I was really trying to see how hard I could push the system in general.
And it did like a safety shut down on me and turned off the power to everything.
Harder everything, including the servers.
Well, I mean, if you're doing a life hack where you're using the sun to power your air
conditioner to cool you down as well as, you know, running a toaster or whatever else you're
doing.
Yeah, it's a bit of a it's a bit of one of those situations where when you have that
much sun, it creates enough heat that you need to run the air conditioning and you end
up trying to balance it all out.
And I was really pushing it.
Oh, and we'd been driving.
And of course, the drivetrain itself gets hot.
So where our power bay is at, you know, there's heat from the drivetrain to adding to this
whole thing.
So, yeah, I'm very happy with it.
I do have to seriously figure out cooling, but it just is going to involve major cutting
into the side of my RV.
And I just don't want to do that.
But one day and I need to get that data into home assistant.
I've got to get that figured out as well.
And then ultimately, Alex, I would love to be managing this entire thing with some system
that allows me to redeploy everything from scratch.
So if a Raspberry Pi died from heat or everything died and I had to pop in new units when I'm
on the road, it would be a minimal amount of downtime and just totally be able to redeploy
my infrastructure from one central point.
And I know that's something we want to talk about today, but it's been on my mind because
that seems like the next level I could take this set up to to make it even more trouble
free.
And when there is a problem, a couple of Raspberry Pis in the drawer, I pop them in
and I run some sort of system and they're back up and running.
OK, I'm out 45 minutes.
That's that's where I want to take it next.
So data from the power system, figuring out cooling and doing some kind of infrastructure
as code set up are my next goals for Project Off Grid.
I love your optimism that you've only got a couple of pies in the drawer.
And I should probably have a switch and maybe a whole other router because that stuff gets
hot.
Power supplies.
Don't forget those.
Yes.
Yeah.
Everything the stuff in the in the in the telco cupboard.
How's the bench seat?
It gets hot.
It gets really hot.
The bench seats also getting hot, but less equipment in there.
It's better now as I've moved, as I've dispersed stuff.
Now that I have power over Ethernet, I've kind of spread stuff out.
Yes.
So the thermal load is not as bad, but it's still not where it's still need.
It still needs a solution.
I'm still not happy.
POE is just so awesome.
I was putting a TV on the wall in my kitchen the other day and I've got one of these Unify
units that's powered over Ethernet and on the bottom, it's got a couple of Ethernet
jacks on the bottom.
And so rather than running a whole second Ethernet cable from wherever in the house,
which would have been a good couple of hundred feet's worth of cable, I just plugged one
tiny little right angle jack into the bottom of this Unify thing, fed it up through the
drywall and out behind the TV just above it.
And it was so easy.
Yeah.
Those are the kinds of solutions that feel like like life hacks because you just saved
yourself an hour or two running cable.
And who enjoys fishing cables through walls, man?
And crawl spaces.
Not me.
I'll tell you that.
Linode.com slash SSH.
Go there to get $100 in 60 day credit towards a new account and go there to support the
show.
Linode.com slash SSH.
Linode is our cloud server provider.
And really, it's not just because the price is so great, although it is great.
It's also because the tools they have make it possible for a small team to have killer
infrastructure.
Alex and I use it for our projects here on the show.
We use it for the back end infrastructure for JB 3.0 and millions of projects and sites
that we all love on the Internet are using Linode.
They've been around since 2003 as one of the first companies in cloud computing, three
years before AWS and other enterprise providers.
They're independently owned and founded on a love for Linux and open source.
I mean, they like to geek around with this stuff.
That's why they started so long ago.
Now that we live in the future, they're dedicated to offering the best virtualized cloud computing.
If it runs on Linux, well, it'll run on Linode.
And they have node balancers and, of course, a fantastic dashboard to make it all possible.
Eleven data centers around the world, one click deployments of the entire application
stack, if that's how you roll or build the whole thing up from scratch.
And if you like to manage it with some centralized tools like Terraform, they support that, too.
And then just kind of like the bow on top of it all, they have fantastic 24 seven customer
support by phone or by ticket.
So you're going to be taken care of if you ever run into any problems.
Go see why a huge part of our community has started using Linode and why we use it ourselves.
Linode.com slash SSH.
Now, you know, I have a bit of a thing about
GUIs and I prefer to do things on the command line, don't you?
That is totally true.
The one exception to this rule for probably seven or eight years has been my firewall
for some reason.
I've allowed myself to run PFSense and then I moved to OpenSense last year.
You know, I've thought about that and I've meant to ask you why that is.
I don't know.
It's not rational.
Maybe it's you always do something that way.
And so you go on doing it that way, perhaps.
Yeah, that must be it.
Like and I came to the conclusion that with my home lab set up where I'm spinning up and
down OpenShift stuff all the time and I'm constantly adding Mac address reservations
for new smart devices that arrive, you know, I get a new phone or a new Shelly device pops
up or whatever it is.
I feel like I'm logging into OpenSense three or four times a week to make some small tweak
for some reason.
Now, that's fine if you, you know, think about it.
It's not really that big of a deal, but I would prefer to just make one config line
change in an Ansible repo or something and then run a playbook and it's done.
So I finally bitten the bullet and written a playbook to turn an old Raspberry Pi 3B
plus that I have into my DNS and DHCP server.
Very nice.
And you think a Raspberry, I mean, yeah, it should be powerful enough for what you've
got.
How many devices on your network would you say?
I think I've got like 150 or so, but I mean, it's not like, you know, the performance
of a DHCP server, this is ancient history technology, you know, that those servers have
been around as long as the internet has pretty much those technologies and they need such
minimal resources.
The only thing I was worried about with the Raspberry Pi using that for DHCP and DNS was
it's a Pi, right?
I mean, it's logging to an SD card, but then I can just USB boot and put logs into RAM
and ship them off to some remote server if I really want to keep them.
So I think I can work around that.
But what I ended up doing was using this as an exercise to remind myself how much I enjoy
writing code.
It's not something I do as much as I would like anymore.
And one of the most difficult challenges I found actually was making Ansible look at
a list of Mac addresses that I'd supplied and check for any duplicates.
I mean, it sounds like a really simple thing and, you know, probably to some people it
is, but to me, I felt like I was working on the DaVinci code solving this one.
I have one big list of dictionaries with multiple sub keys and sub elements within them,
right?
So it's, you know, name, IP and Mac address, for example, which corresponds to a specific
device or a specific host on my network.
So I can go in and iterate over those keys using Ansible, over those sub elements using
Ansible, and pull out the bits of information that I need to generate the config files,
which then get deployed onto the Raspberry Pi using Ansible.
But what was really difficult was actually trying to control the flow of variables using
facts using Ansible.
And there's a code snippet in the show notes if you're interested.
But what I ended up doing was reading the list of Mac addresses into a fact and then
comparing it against itself to be unique using one of Ansible's built-in filters.
And I'm sure very few people listening to this are going to ever want to solve the problem
that I solved, but I'm incredibly proud of this bit of code.
So I thought I'd talk about it on the show.
That's a nice solution.
And kind of just works towards what I was talking about, how, in a way, what you've
done is you've let the computer solve a problem for you that I would just spend human
hours burning.
I spent probably two evenings whilst I was rocking a baby to sleep in one hand and trying
to code in the other.
Productive right there.
Solving this problem, yeah.
Those late nights are productive for some reason.
What was really interesting, actually, was for my testing, I ended up using my ESXi lab
and I created a second virtual network interface on that system.
And then I span up an isolated network within my network to test DHCP, because obviously
I didn't want to turn off my primary DHCP server because, well, I kind of need that
for everything that goes on most days.
So I ended up with a completely separate subnet within VMware that I was able to test it and
I was able to have OpenSense actually running as a firewall on this virtual network running
within VMware.
It was really cool.
And I really think that if you're remotely interested in networking, that there are just
little projects like this you can do to kind of stretch yourself and challenge yourself,
where you can learn little bits and bobs here and there.
And I don't know, I just had fun doing it.
Yeah, push yourself in a way that it solves a problem and you learn something.
And that solving a problem, something that's been on your mind for a while, is such a good
motivator.
It's such a great way to get into something or in your case, maybe take something to the
next level.
People ask all the time, like, where should I get started?
How should I get started?
That's how, it's a cliche to say it, but scratch that itch.
Absolutely true.
Now, speaking of, we've been using something called Slexi on JB for many, many years.
This goes back to Linux Action Show days.
Excuse me?
Yeah, it does, yeah.
It's a bad name, Slexi.org, but it was a good tool.
Yeah, dude, you old, you know?
Yeah, I know.
I know, and I could see the signs coming because every now and then the service would be offline
for a couple of hours.
And then it came back strong for a bit.
It was just a clean pastebin that supported basically every language on the planet, including
my beloved Markdown even.
And it was really simple for us as a team to take emails that come in or messages on
Discord and throw them in something that we could link the other hosts to and link them
in our show notes.
And it really wasn't something that was necessarily intended for public consumption, although
it could be in some cases.
But it was mostly just so that way you have 15 different platforms, messages come in for
a show, and we could take them and have one central spot.
And so it was Slexi.org.
And then, like so many things, when the cloud giveth, the cloud taketh.
And at the beginning of March, they announced they were shutting down.
And I was beside myself, Alex, and I looked over to you, Alex, and I said, Alex, save
us.
This is clearly something we should self-host.
Well, I think we might have found a solution in a project called XBin, and this is over
on GitHub at midnight slash XBin, midnight spelt with a one instead of an I.
Just look in the show notes, there'll be a link there for you.
And this project is actually really interesting.
It's a very simple interface, which is, you know, what Chris needs after a late night,
let's be honest.
Yeah, and it just, boom, pops right up and there's a text field, just paste the stuff
in there, pow, it's good, it's really quick.
And I've actually been working with the developer.
I've opened probably more issues than I should have on his GitHub, and he's been honestly
fantastic. He's added, just for us on our request, custom logo support, the ability
to moderate comments, as well as a couple of other things as well.
That's neat.
Yeah, you know, sometimes you just love open source so much that some random guy who I
will probably never meet in person is willing to put some time and effort in to help us
adopt his thing by adding features that we asked for.
It's just so cool.
It really is great to see.
It's actually so hard to overstate the point you just made.
There is an internal tool that we use as a team to produce our shows, and you contact
the developer, or developers, and they're actually going to implement those features.
Think about that in the context of, say, like subscription enterprise software.
You could be paying thousands of dollars a year and not get that kind of service level.
And it's MIT licensed, so it's, you know, it's a really permissible license.
And I just think it's super wonderful to see it.
Do we have a demo for folks so they can check it out?
We do, yes.
We're actually using it for all of our feedback for this episode.
So at paste.docs.lol, that's now the Jupiter broadcasting paste bin.
We're going to just use it for show notes and, well, not show notes, feedback into shows
and stuff like that.
So I think we're already using it on Coder, but you'll see it in other shows as we go
forward.
There is an actual official project demo linked in the show notes as well.
It's really just a nice, easy to use paste bin clone with some great features.
It's written in Phoenix and Elixir.
And I think one of the things that's appealing to us is it's pretty easy and straightforward
to self-host it.
Now, have you seen the stats page that it has?
So if you go to URL of your instance slash stats, you can see how many public snippets
have been made and, you know, the number of views they're getting, the most popular one,
all that kind of stuff.
I mean, kind of pointless, but also who doesn't love a good graph anyway?
Who doesn't love a good graph, eh?
If you want to see ours, you can go to paste.docs.lol and then it's slash stats, like Alex said.
So we've had 11 public snippets.
I make most of mine public.
So we've done, I guess, 11 emails on this thing so far.
It's interesting that what qualifies as popular is eight people viewed one of them, which
is really just us.
That's just the people in JB.
But, you know, it's great that it shows that.
It runs in Docker, of course.
I wouldn't honestly have looked at it if it didn't.
I'm running it up on a Linode.
I think it's up to about 15 containers, that single $5 Linode now.
Hard to overstate how awesome that is really.
Yeah.
So please be nice to it and don't break it because it's a tool we use for daily production
and we're opening the Komodo a little bit telling you about it.
And now in a feature that I think may well be aimed exclusively at Wes Payne, you can
actually use Netcat to pipe text to Xbin.
When I saw that, I was like, this is so for Wes.
This is so great.
But it's actually just a very quick way.
And if you're already on the command line, the fact that you could Netcat something to
your pastebin, your self-hosted pastebin solution, that's a winning feature.
I'm sorry.
That's great.
Now, I know we use HedgeDock for all of our show notes and stuff in our internal collaboration,
but Xbin also has a synced text mode.
So, you know, if you click on, in the UI, there's a button that says synced, it will
give you a five digit custom code in the URL you give to whoever you want to, you know,
watch in real time, what you're doing, you know, and I can just type away and in real
time, it will update whoever is looking at that URL, what I'm doing, which for like pair
programming or something like that, I can see this being absolutely awesome.
ProvadoVPN.com slash SSH PR VA DO VPN.com slash SSH.
Go there and try out Provado for free and support the show.
ProvadoVPN is a zero log VPN.
That means no records of your online activity are logged when connected to ProvadoVPN.
Even in the event of a legitimate authority request for logs associated with your activity
when connected to the service, there's just nothing to give and if that wasn't good enough,
you can rest comfortable knowing they're protected by Swiss privacy laws.
They have a strict zero log policy and they're based in Switzerland.
That really mattered to us and that's why we picked ProvadoVPN for our sponsor.
It means you're protected by the absolute strongest consumer privacy laws in the world
and they have a fantastic network to back it all up.
ProvadoVPN owns and operates its own data centers and fiber lines and the network is
composed of hundreds of servers physically located in 45 countries and 58 cities around the world.
You can connect anywhere in seconds and no matter what server you choose,
you'll get incredibly fast speeds every time you connect.
ProvadoVPN's network was built from the ground up, fully optimized for lightning fast speeds.
So visit ProvadoVPN.com slash SSH and try it out for free.
That free account provides the same service level and unlimited speeds as the premium version,
as well as 10 gigabytes a month of data transfer and access to the top 12 servers.
And all ProvadoVPN users get access to the dedicated customer support specialists,
24 hours a day, seven days a week, of course, and they have that unlimited plan
with hundreds of servers and P2P traffic support and a lot more.
So visit ProvadoVPN.com slash SSH and try it out for free.
ProvadoVPN.com slash SSH.
We've got some feedback from Kevin in Belgium.
Love the show, guys. Keep it up.
In the last episode, there was some talk about pooling different bits of storage over the network.
In the past, I've used GrayHole to do this.
I was able to pool two different machines into one virtual storage presented via Samba.
Brackets. Yes, I know.
It worked for me for many years until I switched to one new machine,
pooling all drives using merger FS using the...
I don't wish to blow my own trumpet here, but the now famous perfect media server guide.
Yeah, it is. People love that. It's a great guy.
So I took a look at GrayHole. It's actually a pretty interesting project.
And yeah, pooling different bits of storage using Samba.
I mean, that's it. That's the pitch for the product.
I wonder what you think of this, Alex, compared to just something like merger FS with a Samba share on top,
because ultimately you get similar results, but the difference with GrayHole is it's taking care of the network layer for you.
And also the sort of the organization via the web UI, if you want,
which I know triggers you sometimes, but it does have a web UI, if you want.
I love a good UI. What are we talking about? I love that.
OK, all right, fine, fine. You won't engage, but I know, I know.
So GrayHole, think of it as a way to pool a bunch of shares.
A way to pool a bunch of shares across your network into one big share, right?
And that's sort of a fair summary of it.
Yeah, pretty much. And the underlying shares, it's a bit like Gluster FS in this regard.
So you've got different effectively bricks of storage,
which you then concatenate together into one mega Tron of storage.
Yeah, nice feature is that you can set redundancy on a per share level so you can indicate how many copies of each file you want to keep as well,
which, you know, if you've only got one copy of something, you may as well have zero copies of it.
I know this is popular with the audience because we got several emails about it as the recommendation
when I put out the question of how are you how are you pooling your storage?
I have to say, overall, it's a solution that feels kind of like an old school approach,
and it has been around forever, so that might be part of it.
But I'll give you an example like to get it up and going via their docs.
You start by curling a shell script and then, you know, pseudo bashing that.
You could do it manually, but either way, you end up just stalling a ton of stuff on your box.
It really does.
And that's just the thing I don't really enjoy anymore.
And then there's quite a bit of configuration to essentially build up a whole system based on Finicky Samba shares,
which I again totally appreciate and think there is a spot for that.
And I could even see it like if I was in if I was in like a condo with a couple of roommates like I was,
you know, 20 years ago, I could definitely see us using each of our PCs in a system like this.
And it worked really well for what we want.
But I just don't really see it today.
The way this setup works, Alex, it just doesn't seem doesn't quite seem like it's it.
Like, it's not quite the solution I was looking for.
So when I tried it, I that was my that was my impression.
We also had some feedback coming from Greg, also recommending Gray Hole.
And his point was that each drive is a standalone file system.
So losing just one drive doesn't affect the data on the others, which is useful.
But I don't know, to me, this is I know you asked the audience to send in their opinions,
but it feels to me like this is a solution looking for a problem.
And then people have kind of built some reliance on it.
And it's kind of it's a Jeff Goldblum moment, right?
Just just because we can your scientists were so obsessed with whether they could.
They didn't stop to think about whether they should.
Right. And I think that's it.
I think that's my impression of it.
But I do like I do like hearing how it works for people.
And we did get several people that said it works well for them.
And that's kind of awesome because I know Gray Hole's been around for a long time.
And I'm glad to see it's still going.
The Web UI does make it simple to get up and going.
You can go in there.
The first thing you do is you add some storage to it and then it lets you get things set up.
And and that's nice.
That's good to see it.
But I don't know, I guess this sounds really dumb when I go to say it out loud.
But you know what I'd really like is I'd love a solution at the ZFS level where there was
some kind of service where you could you could dedicate any partition formatted in ZFS or any
dedicated to ZFS could become part of some sort of network ZFS pool.
That's where I'd love to see that work get done.
That would be nice.
Yeah. The tricky part of this, I think, is you don't know what OS the remote system is running.
And with ZFS in particular, licensing is so such a touchy subject.
Whether you could actually have ZFS running as some kind of a container on that remote system
and then say, here's a hundred gig, you know, virtual disk, a bit like Docker desktop works like.
Maybe that's the way to do it.
All right. Well, Rob writes in and Rob's been been using quite a few containers recently
and been running with like 50 terabytes of content.
And while that's been fine for Rob, he kind of wants to take things to the next level.
And he says, so do you have any advice or resources for folks out there like me who
maybe know just enough to be dangerous, but don't actually know how things are working
under the hood of Unraid? Like, do you have a beginner's guide for folks who maybe know just a bit,
but not as much as they could or really should yet? Thanks for the help, Rob.
Well, I think Rob, you're exactly the type of person I had in mind when we were founding Linux server.io.
You know, it's all about finding some good sources of documentation.
And I think something like perfectmediaserver.com may well be a good place to start
if you're looking to build your own box.
But websites like linuxserver.io, as well as there's a few other things like the self-hosted wiki,
self-hosted subreddit, but this is the magic of containers, right?
They allow you to walk before you can run.
And I think that is a huge tick in the pro column for containers.
Back in the day, I think a lot of people kind of gate kept Linux because they were like,
well, you need to, you know, have your neckbeard badge to be able to do this particular thing on Linux
and install these 59 packages in a specific order and then recite some incantations to do as, you know,
just to get a simple Samba server going.
Whereas nowadays, you can just, if you want to run Samba in a container and type docker run Samba,
and there's a little more to it than that.
But effectively, you are now piggybacking off the shoulders of giants, right?
That's the whole purpose of containers.
You're basically outsourcing a lot of the sysadmin stuff to other people, like building these containers.
You're outsourcing those decisions about what goes into them to other people who you maybe trust more
than you trust yourself, which, you know, certainly as a newbie is probably a wise decision.
Maybe as you mature your approach to building systems, you'll decide that actually I know better
and I want to go and build my own stuff.
But I wouldn't say what you're doing is necessarily wrong.
Just use the stuff that Unraid lets you use.
There's a reason you picked Unraid, right?
And that's because it has a simple to use user interface.
You can use their templates to click and install stuff.
I mean, keep doing what you're doing, man.
That's what I say.
Yeah, you could absolutely just keep using that and you can mess around with VMs on your local box.
Or if you are ready to build something, I'm going to double down on Alex's recommendation
to go by the perfect media guide, because which if I don't know if he said, but is that perfectmediaserver.com?
Because that gives you the projects to really kind of branch off from there.
I'm not quite as pro magic server sauce as Alex is.
That scares the crap out of me a little bit from just a security standpoint, because ultimately
it's not understanding how the system works that leads people to make security mistakes.
But I do agree with your point that in most cases, the people designing the containers
for popular applications and projects probably know more about what's going on in there than Rob might.
You know, the people creating the application know a hell of a lot about it.
So you're generally going to be all right, but it's definitely worth learning, but it's really easy to learn.
And Rob, I wish the built-in tooling was better at explaining to you, like these four containers
are using this same layer and it's all possible to discover.
But I wish it would tell you in terms of like, and that is these applications and this layer
of libraries and Linux, I wish it was more, if you could understand it in those terms,
I think you'd start to click for you.
So what I would recommend you do is pick a container software of choice, go out there
and read about Podman, go out there and read about Docker, and then start playing, get
inside the containers, learn how to do that and explore them and just see what that's
like and understand what's inside there.
And then you start to realize, you know, it's good things, it's easy to get going.
It's generally pretty well built, but there's also a lot of old libraries in there.
And you're relying on them to update the software and maintain the security for applications
you're running on your stack.
And so you just need to be cognizant of the trade-offs.
And I think the way you start that is by learning and then, you know, you can take advantage
of tooling around that to maybe get a better insight into what they're doing.
But ultimately don't feel bad for using Unraid.
They are building a good product.
I think both Alex and I are not currently Unraid users, but we think it's a pretty
solid product, and I think it's one of those tools that helps people get going and gets
their data off of something like Google and gets it on their own land.
And that's ultimately something that we're both big fans of.
Yeah, Unraid was how I got started.
And then I ended up trying to build some packages for myself for some apps that weren't on the
platform.
And like Chris says, trying to exec into a container, like figuring out what that means
and sort of getting a shell inside a container and poking around and breaking some stuff,
you know, it's that's how I got started.
So absolutely a good route to go.
Now, Martin writes in that in the latest episode, you are wondering about one way phone backup.
And for Android, he recommends an app called Foldersync, and I can't recommend it enough.
Thank you, Martin.
Foldersync.
We'll have a link to that in the Play Store, as you would imagine.
Surprise, surprise, it allows simple sync to cloud-based storage from your local folders
on your phone and SD card on your Android device.
It does exactly what it says on the tin, and it's free.
It does offer, I guess, an in-app purchase to remove the ads, but it looks pretty clean
and straightforward.
Gosh, and it supports everything it looks like.
Martin says it automatically recognizes where he is based on SSID, and then it backs up
to the appropriate local NAS system so that he has multiple physical copies, which is
a really nice feature.
I think I've used an earlier version of this, actually.
I think I have and I liked it.
Now, I use the Nextcloud clients on my phones to back up all my photos and things like that.
Those are primarily the files that are created on my mobile devices that I want to get off
of those devices.
It doesn't require any plugins in Nextcloud, it's just built into the standard iOS and
Android clients as well, but I think if I was creating something else regularly on my
phone that wasn't a photo or a video, Foldersync looks like it would be the solution.
A big thank you to our site reliability engineers at selfhosted.show slash SRE.
As a thank you, you get a limited ad version of the show and extra show.
You get the post show today.
We're going to chat about Alex's very first computer and how he got his very start in
computers.
I'm looking forward to that.
I don't think I've ever heard that story.
So if you would like to join our membership, support the show and get access to the limited
ad version with the post show, go to selfhosted.show slash SRE.
And join us next week on Linux Unplugged for a special episode where we go through some
of the self-hosted Google Photos alternatives that will be episode 409.
Now for all the ways to get in touch with us, you can go to selfhosted.show slash contact
and you can find me on Twitter at ironicbadger.
You can find me on Twitter.
I'm at Chris LAS.
You can find our sponsor, Cloud Guru, on social media.
Just slash the Cloud Guru everywhere, like on Twitter.
The show is at self-hosted show as well.
And thanks for listening, everybody.
That was self-hosted dot show slash 46.

1
00:00:00,000 --> 00:00:06,400
Well, welcome to episode 73, everybody. My usual co-host, Chris Fisher, is unfortunately out sick

2
00:00:06,400 --> 00:00:11,840
this week. We think he might have the Rona. So please send him your best wishes. But joining me,

3
00:00:11,840 --> 00:00:16,400
I have a very special guest. I have Techno Tim. Hi, Tim. Hey, thanks for having me.

4
00:00:16,400 --> 00:00:20,000
Well, thank you. Absolutely. Last minute, I messaged Tim yesterday and said,

5
00:00:20,720 --> 00:00:26,640
yeah, Chris isn't feeling so good. Do you happen to be free tomorrow night? And serendipitously,

6
00:00:26,640 --> 00:00:32,240
he was. So here we are. So this episode, we're going to be talking about all things Homelab.

7
00:00:32,240 --> 00:00:39,040
Tim just passed 100,000 subscribers on YouTube. Congratulations. Thank you. Thank you. Yeah,

8
00:00:39,040 --> 00:00:44,080
it's crazy. And as part of that, I think you launched 100 days of Homelab initiative,

9
00:00:44,080 --> 00:00:46,640
which we'll come to in just a minute. But before we get there,

10
00:00:46,640 --> 00:00:51,360
usual plugs for things like the Discord at selfhosted.show slash discord. We've got over

11
00:00:51,360 --> 00:00:58,320
4000 people over there talking about all things self hosted, maker spaces, home assistant,

12
00:00:58,320 --> 00:01:03,920
all that kind of stuff. You all know as well that we've got a UK meetup coming up in August.

13
00:01:03,920 --> 00:01:10,800
The date did change due to some flight stuff with me. So the new date is provisionally August

14
00:01:10,800 --> 00:01:15,600
the 5th. We're still trying to find a venue. And now if you have any ideas about where we might

15
00:01:15,600 --> 00:01:19,280
host this thing in London, I've been ringing around a few places the last few days trying

16
00:01:19,280 --> 00:01:23,520
to find a pub with a big beer garden or something like that so that we don't have to hang out on

17
00:01:23,520 --> 00:01:30,240
like a village green or something. You know, the requirements are outdoors has toilets has beer.

18
00:01:30,240 --> 00:01:34,880
I think that's probably a pretty good recipe for a good meetup. So if you have any ideas about

19
00:01:34,880 --> 00:01:40,720
where we might do this in London general area, let me know. I'm on Twitter at ironic badger.

20
00:01:41,280 --> 00:01:47,200
So remember, that's the provisional date is August the 5th. And I think that's about it.

21
00:01:47,200 --> 00:01:50,960
So it's probably about time we start talking about the 100 days of homelab.

22
00:01:51,520 --> 00:01:54,960
What madman came up with 100 day hour a day challenge?

23
00:01:55,680 --> 00:02:02,080
Yeah, me, I guess, you know, 100 days of homelab is something that I've been noodling on for,

24
00:02:02,080 --> 00:02:06,960
I'd say, about six months. You know, I'm a software developer, and software developers

25
00:02:06,960 --> 00:02:12,080
have had a challenge for a while. It's 100 days of code, and it pops up in my my feed everywhere.

26
00:02:12,080 --> 00:02:18,880
And I think what a great initiative. You know, you you form a habit by doing something once a day,

27
00:02:19,520 --> 00:02:24,800
for an hour a day, with a goal in mind and march towards that goal for 100 days. And by the end of

28
00:02:24,800 --> 00:02:29,920
the 100 days, you'll learn something. Maybe you'll learn how to program. Maybe you build a website,

29
00:02:29,920 --> 00:02:34,000
whatever it is, maybe you'll learn that actually, you don't like the thing that you signed up to do

30
00:02:34,000 --> 00:02:37,920
quite as much as you thought you did. That is true, too. Yeah, very good point. Yeah, you might

31
00:02:37,920 --> 00:02:42,480
discover this is not for me. Like I thought programming wasn't for me in college, but now

32
00:02:42,480 --> 00:02:48,000
it's programming for me out of college. You know, I had that idea of, okay, how can I get people in

33
00:02:48,000 --> 00:02:53,840
the homelab community one together and motivated and excited about about doing stuff? I'm excited,

34
00:02:53,840 --> 00:02:58,960
I know a lot of people are, but, you know, just kind of bringing people together. And the whole

35
00:02:58,960 --> 00:03:04,720
entire landscape of a homelab, if you think about it, it's gigantic. But, you know, I kind of think

36
00:03:04,720 --> 00:03:10,880
of it as networking, storage, infrastructure, automation, a little bit of DevOps, some hosting,

37
00:03:10,880 --> 00:03:14,880
you know, it's a lot of different things to a lot of different people. And, you know,

38
00:03:14,880 --> 00:03:19,440
that landscape is is rapidly changing, you know, especially in the last couple of years,

39
00:03:19,440 --> 00:03:24,000
if you think of infrastructure as code or, or anything, or storage, storage, now in

40
00:03:24,000 --> 00:03:28,640
Kubernetes, storage everywhere, it's all changing, you know, software defined networks. And so I

41
00:03:28,640 --> 00:03:35,760
thought, hmm, I have 100k coming up, and what can I do that has, you know, has as related to 100.

42
00:03:35,760 --> 00:03:40,400
And that's what I thought, I thought, well, maybe I'll launch something around then. Yeah,

43
00:03:40,400 --> 00:03:44,400
I was six months out. And I thought, you know what, I'm just gonna do what I do best and

44
00:03:44,400 --> 00:03:51,200
procrastinate for six months until this, you know, this 100k subs, if it ever comes, but

45
00:03:51,200 --> 00:03:55,120
it came pretty quick. So I had to get on the ball. Well, that's a nice problem to have.

46
00:03:55,120 --> 00:03:59,760
You know, I, I'm not sure if I've ever told this story on air, but I did a computer science

47
00:03:59,760 --> 00:04:04,480
masters, I was originally a trained musician, and then did a few years at the Apple store and went

48
00:04:04,480 --> 00:04:10,000
and did a comp sci masters. One of the friends I made on that course went and did a PhD straight

49
00:04:10,000 --> 00:04:16,480
away afterwards. And his PhD was into defining DevOps, I don't know how he managed to swing that

50
00:04:16,480 --> 00:04:22,400
with his supervisor, but he did, and he got paid to do it. And I think this dude spent four years

51
00:04:22,400 --> 00:04:27,200
defining DevOps in his PhD thesis. Do you know what the outcome of the four years was?

52
00:04:27,200 --> 00:04:27,920
What's that?

53
00:04:28,480 --> 00:04:31,200
There isn't a definition. It's too nebulous.

54
00:04:32,000 --> 00:04:34,480
I like it. I like it. I like it.

55
00:04:34,480 --> 00:04:39,200
If only someone would pay me for four years to do absolutely nothing. I mean, sorry, sorry, Steve,

56
00:04:39,200 --> 00:04:45,280
if you're listening, but it's a, it's an interesting thing that you raised seriously that

57
00:04:45,280 --> 00:04:51,840
DevOps, in general, means whatever you want it to mean. It really just, you know, it's just

58
00:04:51,840 --> 00:04:56,880
really, truly it does. You know, to some people, it means that you're a cloud expert. To other

59
00:04:56,880 --> 00:05:00,640
people, it means that you can write Terraform code. To other people, it means that you know

60
00:05:00,640 --> 00:05:04,720
all about networking, right? It just depends on the problem that you happen to need to solve

61
00:05:04,720 --> 00:05:09,920
that's in front of you this week. It's almost like just like a buzzword, like a magic word

62
00:05:09,920 --> 00:05:14,400
that management don't have to hire specific people to do specific tasks. We want a generalist

63
00:05:14,400 --> 00:05:19,360
that knows a little bit about everything. And I think that's typically where DevOps comes in.

64
00:05:19,360 --> 00:05:23,280
That's a that's a good point. And it's, you know, it's it can be lumped as anything from

65
00:05:23,280 --> 00:05:28,160
getting code into production and whatever that means. It could be, you know,

66
00:05:28,160 --> 00:05:33,280
that's a huge chasm to cross. And it could be many different technologies. And yeah,

67
00:05:33,280 --> 00:05:38,160
it's a, you know, a jack of all trades type of role, but very needed.

68
00:05:38,160 --> 00:05:41,840
Oh, you've you've used a database, have you? Okay, so that means you're a DBA now.

69
00:05:41,840 --> 00:05:44,000
That's right. That's right.

70
00:05:44,000 --> 00:05:47,840
So what kind of stuff have you got planned? I've seen you've done, you know, your launch video,

71
00:05:47,840 --> 00:05:53,520
your 100k subs video was pretty cool. You had 12 of the biggest home labbing YouTubers as a

72
00:05:53,520 --> 00:05:58,080
massive collaboration. You know, it was Wendell, friend of the show on there, a bunch of other

73
00:05:58,080 --> 00:06:02,480
people, Jeff from craft computing. What else do you have planned for the hundred days?

74
00:06:03,120 --> 00:06:08,800
I'm on day four today. You know, but for me, it was just to kind of get people motivated about,

75
00:06:08,800 --> 00:06:13,600
you know, getting into homelab, whether they are already doing it or rekindling that, you know,

76
00:06:13,600 --> 00:06:19,360
that passion they have for it. It was just kind of getting everybody on the same page,

77
00:06:19,360 --> 00:06:23,520
like created hashtag for it. And what I'm realizing through this hashtag is, is,

78
00:06:23,520 --> 00:06:27,680
is that one people are using it by my Twitter has never been so active. I don't have a lot of

79
00:06:27,680 --> 00:06:33,760
followers. So I'm like, Whoa, this is how almost famous people feel. What is the hashtag 100 days

80
00:06:33,760 --> 00:06:38,160
of homelab? It's small, but people are using it. And what I'm discovering through this is,

81
00:06:38,160 --> 00:06:43,040
you know, these, these updates that people are giving are very similar to my daily stand up to

82
00:06:43,040 --> 00:06:47,840
my scrum, you know, as a software developer, you know, if you do scrum, you stand up and say,

83
00:06:47,840 --> 00:06:52,000
you know, what did I do yesterday? What did I do today? And, you know, do I have any roadblocks?

84
00:06:52,000 --> 00:06:58,160
And it's, it's very awesome seeing everyone just kind of chiming in with what they're working on

85
00:06:58,160 --> 00:07:03,440
today, what challenges they're facing, and then seeing other people join in and talk about how

86
00:07:03,440 --> 00:07:08,560
you could solve a particular problem or, hey, how did that work out for you? It's just been very

87
00:07:08,560 --> 00:07:15,040
awesome. So I don't know what the long term plan is. If I get to day 100, and someone is on day one,

88
00:07:15,040 --> 00:07:21,040
feel like that's a success. That means that, you know, this has gone longer than my 100 days and

89
00:07:21,040 --> 00:07:25,600
someone else's journey is starting now. And so, you know, there's a lot of people said, Do I start

90
00:07:25,600 --> 00:07:29,840
with you? Don't I start with you? Start when you want, like, you know, just because my trains

91
00:07:29,840 --> 00:07:33,920
leaving today doesn't mean your trains leaving today, your train could be leaving next week.

92
00:07:33,920 --> 00:07:40,640
Choo-choo. That's right. That's right. And so, you know, I, if I get to day 100, and I see a day one,

93
00:07:40,640 --> 00:07:45,440
that means this whole thing was a success, because it's bigger than, than my 100 days,

94
00:07:45,440 --> 00:07:50,480
you must have some kind of an overarching goal. Because, you know, the time I think about when I

95
00:07:50,480 --> 00:07:55,680
was really probably the most active in terms of development over the last few years was just

96
00:07:55,680 --> 00:08:00,080
before I immigrated, actually, I was, I was pretty stressed about the move coming up, you know,

97
00:08:00,080 --> 00:08:05,600
England to America, and I just needed something to distract me. So I used, I spent hours writing

98
00:08:05,600 --> 00:08:11,520
Ansible playbooks to completely Ansibilise the deployment of my server. And at the time, it was

99
00:08:11,520 --> 00:08:16,880
mostly Ansibilised. But I'd done it three or four years prior. So a lot of the stuff I'd learned,

100
00:08:16,880 --> 00:08:20,880
you know, as a consultant, for a while, I'd learned some tips and tricks, and I've learned some new

101
00:08:20,880 --> 00:08:26,000
stuff. And I thought, right, I want to do it properly. And my goal was to do as much as I could

102
00:08:26,480 --> 00:08:31,120
through one or two commands to deploy the whole thing. Is there something like that at play for

103
00:08:31,120 --> 00:08:36,560
you here? Possibly, I mean, I've done some Ansible automation, I think just a couple of months ago,

104
00:08:36,560 --> 00:08:41,360
you know, I created an Ansible playbook to create a high availability Kubernetes cluster,

105
00:08:41,360 --> 00:08:45,520
along with load balancers all in one, because I saw that as a pain point for a lot of the people

106
00:08:45,520 --> 00:08:52,400
that were using Kubernetes. So yes, it is. And so I found a whole bunch of forks that were left

107
00:08:52,400 --> 00:08:57,440
abandoned, and I made them work. And so I, you know, automated a lot of that. But with this,

108
00:08:57,440 --> 00:09:02,880
you know, I'm, I'm not sure. I mean, for me, it was really supposed to be kind of a, you know,

109
00:09:02,880 --> 00:09:07,760
a celebration video, and at the same time, get people involved. But long term, I honestly,

110
00:09:07,760 --> 00:09:12,960
I didn't think it was going to be, you know, turn into something as big as it is now.

111
00:09:12,960 --> 00:09:18,720
Well, you've got to stop coming on people's random podcasts and talking about promoting it.

112
00:09:19,680 --> 00:09:25,280
That's true. That's true. I mean, it's a great initiative. I mean, if there was ever, you know,

113
00:09:25,280 --> 00:09:30,720
some learning company that wanted to do something and help people in infrastructure do something,

114
00:09:30,720 --> 00:09:36,640
I'd be all for it. But honestly, no, no long term plans. It was an idea that turned into a video,

115
00:09:36,640 --> 00:09:42,560
I got a lot of awesome people on YouTube to help me out. And that's where it stopped. For me,

116
00:09:42,560 --> 00:09:48,800
it's, you know, it's obviously still going. Sounds to me, like you had this bright idea,

117
00:09:48,800 --> 00:09:52,080
and you didn't think, what happens when I release this into the world? Like,

118
00:09:52,080 --> 00:09:55,680
do I actually have to follow through on this thing? That's true. I've been, in fact,

119
00:09:55,680 --> 00:10:01,360
that's this show, you know, for me. I'm living it, baby. That's right. But I bet. I bet. Yeah.

120
00:10:01,360 --> 00:10:06,240
Like, I didn't think, how does this scale? What, you know, what's my long term goal?

121
00:10:06,240 --> 00:10:10,400
Right. Which is ironic for someone who's as deep into Kubernetes as you are.

122
00:10:10,400 --> 00:10:15,280
Yeah. I mean, usually my, you know, my videos do okay over time. But this one did really good,

123
00:10:15,280 --> 00:10:20,400
really fast. And that's, that's not, you know, my typical, you know, release cycle for videos.

124
00:10:20,400 --> 00:10:25,840
I released a lot of videos and tutorials and how to set things up on deeper topics. So I get lots

125
00:10:25,840 --> 00:10:31,760
of views over time. And, you know, usually I'll get some tweets and, hey, how did you do this? Or,

126
00:10:31,760 --> 00:10:35,840
you know, or someone on Discord will ask, how do I fix this? And, you know, basically,

127
00:10:35,840 --> 00:10:43,360
like async tech support. But with this one, it was like, no one needs my help. They're all doing

128
00:10:43,360 --> 00:10:48,720
it themselves. And but at the same time, they're all joining in. So it's, it's really unique from

129
00:10:48,720 --> 00:10:54,000
what I've done in the past. So at this point, I suppose it's worth kind of defining what a

130
00:10:54,000 --> 00:10:59,680
homelab is. And maybe you could tell folks how you got into homelabbing to start with. And,

131
00:11:00,400 --> 00:11:05,280
you know, that kind of thing. Yeah, it's a it's a huge topic. I even have a hard time describing

132
00:11:05,280 --> 00:11:10,800
homelab to people at work or anything else, because I think that, you know, that the term

133
00:11:10,800 --> 00:11:16,720
has kind of evolved into a lot of things. The way I look at it is it's, you know, when you think of,

134
00:11:16,720 --> 00:11:21,680
you know, you went to school, you had a computer lab there where maybe that computer lab, you were

135
00:11:21,680 --> 00:11:26,400
able to set up certain environments, and destroy those environments or build them up or do whatever

136
00:11:26,400 --> 00:11:30,880
you wanted to tinker in those environments. And that's kind of the idea, I think, behind homelab

137
00:11:30,880 --> 00:11:36,240
is that you can set up an environment a safe place where you can set up an environment to tinker with

138
00:11:36,240 --> 00:11:43,280
tools or to explore new technologies or automate some some infrastructure or geek out on storage

139
00:11:43,280 --> 00:11:48,800
and networking. It's even turned a lot into self hosting stuff at home to people, you know, I say

140
00:11:48,800 --> 00:11:53,760
it to they, they've kind of coalesced. And sometimes I'll, you know, I'll say, hey, yeah,

141
00:11:54,560 --> 00:11:59,920
like the website, I'm self hosting it in my homelab. But, you know, it's more than a lab

142
00:11:59,920 --> 00:12:03,520
then at that point, you know, it's, it's, it's, it's borderline. Just make sure when you're

143
00:12:03,520 --> 00:12:07,680
tinkering, you don't take Plex down because the wife will come and find you. Oh, yeah,

144
00:12:07,680 --> 00:12:14,640
Plex or DNS. Yep, that's I hear faster than my alerts. It's true. How do I know the Wi Fi is off

145
00:12:14,640 --> 00:12:20,400
the kids are shouting? That's right. That's right. All Plex must be done. Yeah, it's it's so many

146
00:12:20,400 --> 00:12:24,720
things to so many different people. So it's really hard for me to kind of summarize it because to me,

147
00:12:24,720 --> 00:12:29,280
it means something different. But and to someone else, it means, you know, something different. But

148
00:12:29,280 --> 00:12:33,840
for me, for a long time, it's been just a place where I can spin up stuff and test stuff and tear

149
00:12:33,840 --> 00:12:38,960
it down without the fear of destroying, you know, the company's production. And a lot of times,

150
00:12:38,960 --> 00:12:43,920
if you work at a big company, you don't have access to a lot of the stuff, either security

151
00:12:43,920 --> 00:12:48,720
wise or physically, you don't have access to a lot of the tools. And then on top of that,

152
00:12:48,720 --> 00:12:54,000
a lot of the times, the architecture is just, you know, decided before you get there. So you're just

153
00:12:54,000 --> 00:13:00,880
implementing stuff. Deleting a production VPC is a rite of passage. That's right. Yeah, our work

154
00:13:00,880 --> 00:13:06,000
sometimes Kafka accidentally gets deleted in our environments. But the worst thing I've ever done,

155
00:13:06,000 --> 00:13:10,640
I don't think I've ever said this on air is I deleted a production load balancer. Oh, yeah. And

156
00:13:10,640 --> 00:13:15,920
I didn't know what I'd done at the time. And then suddenly, all the senior developers came out of the

157
00:13:15,920 --> 00:13:21,840
break room and were like, why are all of our alerts firing? I'm like, I was working on the load

158
00:13:21,840 --> 00:13:29,040
balancer. Oops. I've been there before where you're like, I did just make a change. But I hope it

159
00:13:29,040 --> 00:13:35,120
wasn't that. Yes, we made some changes to the CI process after that. So I mean, you could say

160
00:13:35,120 --> 00:13:40,960
that Alex is screw up. Save the company money in the long run. Here you go. Yeah. Yeah, I'll take

161
00:13:40,960 --> 00:13:46,080
it. I'll take it. Yeah, I mean, you you raise another good point. Like, I think a home lab,

162
00:13:46,080 --> 00:13:51,360
it means different things to different people, much like DevOps does, I suppose. I mean, to me,

163
00:13:51,360 --> 00:13:59,440
a home lab is I don't have a set by me, I suppose I do, because I didn't sell the Juulzeon box I

164
00:13:59,440 --> 00:14:05,120
retired a year ago yet. But really, a home lab should be separate from any kind of production

165
00:14:05,120 --> 00:14:09,680
services. You know, and I use the term production loosely at home, although maybe it's not that

166
00:14:09,680 --> 00:14:14,080
loose, because I have stuff like Home Assistant now, and Plex, as we talked about, and a bunch

167
00:14:14,080 --> 00:14:18,720
of other stuff that I actually do rely on, you know, Home Assistant, particularly to run multiple

168
00:14:18,720 --> 00:14:26,000
facets of my house. So a home lab, to me at least, is something, a space that I can just break stuff,

169
00:14:26,000 --> 00:14:32,080
and it doesn't matter. And it can come all different shapes and sizes, right? I mean,

170
00:14:32,960 --> 00:14:37,920
I mentioned I had a Juulzeon box that I could use as mine. People use Raspberry Pi's. What other

171
00:14:37,920 --> 00:14:43,840
stuff? Oh, anything. I mean, people are using old broken laptops without a screen. Some people are

172
00:14:43,840 --> 00:14:50,800
using old PCs. My recommendation most of the time when people say I want to build a home lab is,

173
00:14:50,800 --> 00:14:56,000
well, just upgrade your current PC so you get an upgrade, you know, and on the machine you use the

174
00:14:56,000 --> 00:15:00,160
most and use the one that's sitting over there for your home lab. You know, have that be your first

175
00:15:00,160 --> 00:15:03,680
one. And you get two for one. You get two for one. You get an upgrade on your main machine,

176
00:15:03,680 --> 00:15:07,920
then you get a pretty nice machine for your home lab. And that's probably going to outperform a lot

177
00:15:07,920 --> 00:15:12,640
of the things that you would you would buy otherwise or spend a lot on. I was just thinking

178
00:15:12,640 --> 00:15:18,640
about upgrading, you know, consumer grade gear. And the thing that runs out first in a home lab

179
00:15:18,640 --> 00:15:23,840
scenario always is memory. You always run out of RAM first. And you know, you think about using an

180
00:15:23,840 --> 00:15:28,720
old laptop because it's got a built in screen, a built in keyboard, a battery for the UPS, that

181
00:15:28,720 --> 00:15:34,400
kind of stuff. But you can typically only have 16, maybe 24 gigs of RAM if you're lucky. Yeah,

182
00:15:34,400 --> 00:15:39,680
that's not enough to do a whole bunch with. Yeah, no. But a lot of people getting into it are just

183
00:15:39,680 --> 00:15:44,720
getting started. You know, it might be enough to run a hypervisor, you know, three, four Linux

184
00:15:44,720 --> 00:15:49,520
virtual machines and enough to kind of tinker with with something else, you know, and not destroying

185
00:15:49,520 --> 00:15:54,960
their own production machine. But, you know, it spans the gamut. There's used enterprise gear.

186
00:15:55,520 --> 00:16:00,400
Some of my old PCs got converted into rack mount PCs, and now they're in my server rack,

187
00:16:00,400 --> 00:16:05,440
you know, all the way to the new enterprise, which I've even bought before. Super micro servers

188
00:16:05,440 --> 00:16:09,680
sometimes are pretty affordable. But then yeah, all the way down to Raspberry Pis two, I have four or

189
00:16:09,680 --> 00:16:15,280
five of those. So it's I you know, I generally thinking of any any, it can be any computing

190
00:16:15,280 --> 00:16:23,520
device, I think, can be used mostly and in a lot of the same ways. Now over at wiki.selfhosted.show,

191
00:16:23,520 --> 00:16:29,600
we have an SSH guest storage leaderboard. At the top of the list, we got Wendell with a petabyte,

192
00:16:29,600 --> 00:16:36,080
who's clearly just showing off and nobody's going to touch that. But I have to ask you, Tim, how

193
00:16:36,080 --> 00:16:43,280
many terabytes do you have on your LAN of raw storage? Oh, good question. I have a lot of RAM,

194
00:16:43,280 --> 00:16:49,120
my disk shelf alone has 40 terabytes. I forgot you had that disk shelf. I mean, there's one,

195
00:16:49,120 --> 00:16:53,680
there's one of your videos guys goes back about a year or so now, I think, where you do an amazing

196
00:16:53,680 --> 00:16:58,480
job of taking us through all the different boxes you have in your rack. And you've even got some

197
00:16:58,480 --> 00:17:02,880
pretty cool LED lighting in that server room, if I recall. Yeah, yeah, it's it's it's yeah,

198
00:17:02,880 --> 00:17:08,160
it's pretty wild. It's similar to it's overkill. But it looks cool. Yeah, it is. It is. You know,

199
00:17:08,160 --> 00:17:12,480
when I first started making content, a lot of gamers were doing it. Now, you know, I play games

200
00:17:12,480 --> 00:17:17,280
too. And I thought, we can't let all the gamers have fun. People with servers can have fun too.

201
00:17:17,280 --> 00:17:23,280
And RGB is how they have fun. No terminals, the only video game I need, baby. Yeah, that's right.

202
00:17:23,280 --> 00:17:32,400
That's right. Or the Chrome, the dinosaur when you're offline. But yeah, I think I'll stick with

203
00:17:32,400 --> 00:17:37,440
40 terabytes. I mean, I know I have, you know, a handful and desktops around here and Macs and

204
00:17:37,440 --> 00:17:42,720
laptops, but it's I can account for 40 right off the top of my head. There's no way I'm getting

205
00:17:42,720 --> 00:17:47,760
close to a petabyte. And I'm sure Geerling Geerling is there now too. He has a petabyte.

206
00:17:47,760 --> 00:17:52,320
That's right with this petabyte PI project. My goodness. That was a cool video. It was. Yeah,

207
00:17:52,320 --> 00:17:55,120
incredible. Incredible. But yeah, I can't touch those.

208
00:17:57,520 --> 00:18:03,440
lino.com slash SSH go there to get a $100 60 day credit on a new account and support the show.

209
00:18:04,080 --> 00:18:08,240
Linode has been rolling out upgrades to NVME storage on their rigs recently,

210
00:18:08,240 --> 00:18:13,040
which offers much greater performance density or IOPS per gigabyte than traditional storage.

211
00:18:13,760 --> 00:18:17,600
If you're a performance hound or your application needs that level of storage throughput,

212
00:18:17,600 --> 00:18:22,080
Linode's team can help you sort through the possibilities for accessing the power of NVME

213
00:18:22,080 --> 00:18:25,200
and arriving at the optimal storage configuration for your environment.

214
00:18:25,840 --> 00:18:31,840
The Linode support experience truly is one of the most remarkable things about Linode as a company.

215
00:18:31,840 --> 00:18:36,640
No matter what time, what day it is, you can open a ticket with a node and know that they'll take

216
00:18:36,640 --> 00:18:40,560
care of you. No matter how silly you've been, whether you've decided to try and install your

217
00:18:40,560 --> 00:18:46,000
own custom operating system on one of their nodes that is not supported, they'll still try and help

218
00:18:46,000 --> 00:18:50,960
you. I can't imagine opening a ticket with some of the other big hyperscalers asking how I'd go

219
00:18:50,960 --> 00:18:56,960
ahead and install some random distro and actually get a coherent reply from a human. Linode's been

220
00:18:56,960 --> 00:19:02,720
doing this for a long time, 18 years in fact, and they just keep getting better. Go try it for real

221
00:19:02,720 --> 00:19:08,720
and see for yourself at linode.com slash SSH. Linode makes it simple, affordable, and accessible

222
00:19:08,720 --> 00:19:14,400
to deploy and manage your customer's projects in the cloud. Linode also has an easy to use and

223
00:19:14,400 --> 00:19:20,400
powerful cloud dashboard with S3 compatible object storage, bare metal servers, cloud firewalls,

224
00:19:20,400 --> 00:19:26,560
DDoS protection, and so much more. In fact, we use Nextcloud here at the network to run the backend

225
00:19:26,560 --> 00:19:31,200
for all of our show storage. So when our editors need our files, for example, they'll go and pull

226
00:19:31,200 --> 00:19:36,720
it down from Nextcloud and that's backed by Linode's fantastic S3 object storage. It just

227
00:19:36,720 --> 00:19:41,440
means as an administrator of a Nextcloud server, I don't have to worry about how much disk space

228
00:19:41,440 --> 00:19:46,880
is free. I just know that Nextcloud can go and create a new object in the bucket and we're all

229
00:19:46,880 --> 00:19:52,560
good. And with pricing 30 to 50% cheaper than the other major cloud providers, Linode can be part of

230
00:19:52,560 --> 00:19:58,560
your multi-cloud strategy. Use our $100 credit to performance test your network so you can see just

231
00:19:58,560 --> 00:20:03,440
how good Linode is for yourself. Go and grab yourself that $100 credit and 60-day free trial

232
00:20:03,440 --> 00:20:13,840
over at linode.com slash SSH. That's linode.com slash SSH. Now I think the thing that I found you

233
00:20:13,840 --> 00:20:19,920
for first was Kubernetes content. You were doing a bunch of stuff with Rancher, I think at the time,

234
00:20:19,920 --> 00:20:28,480
and K3S. As an OpenShift guy at work, obviously my propensity is to use OpenShifty type stuff,

235
00:20:28,480 --> 00:20:33,280
but actually I do like to try and keep my skills in the real Kubernetes world without a lot of the

236
00:20:33,280 --> 00:20:37,920
OpenShift magic that goes on with the routing layer and all that kind of stuff. And so that

237
00:20:37,920 --> 00:20:44,400
leads me down the path of looking at K3S. And I always, always, always find myself in this dichotomy

238
00:20:44,400 --> 00:20:50,000
of I want to have something at home to learn on, but my goodness, is this complicated and overkill?

239
00:20:50,720 --> 00:20:57,600
You know, it is. Well, it could be, but I ask, what is overkill? Is overkill 40 terabytes of

240
00:20:57,600 --> 00:21:05,280
storage? Is overkill a V8 engine in your car? Is overkill half a terabyte of RAM? What is overkill?

241
00:21:05,280 --> 00:21:11,120
So, you know, yeah, I've made a lot of K3S content and you hit the nail on the head. Like when I

242
00:21:11,120 --> 00:21:16,480
built my Ansible playbook for K3S, it was to solve a lot of the complexity of setting it up, because

243
00:21:16,480 --> 00:21:20,960
there's a lot of complexity in just setting it up, let alone everything you need to know about

244
00:21:20,960 --> 00:21:27,760
Kubernetes later on. But I think K3S is a, one, it's a fantastic product. It's an easy lightweight

245
00:21:27,760 --> 00:21:32,800
way, air quotes on lightweight, way to run containers on the edge. You know, with it,

246
00:21:32,800 --> 00:21:38,240
you get a full, mostly full Kubernetes API. And you know, for a lot of things, it might

247
00:21:38,240 --> 00:21:43,440
seem overkill, you know, Hey, I'm running one container of everything in my, you know, my,

248
00:21:43,440 --> 00:21:48,320
my Docker stack or portainer or whatever you're using to manage your Docker containers.

249
00:21:48,320 --> 00:21:52,800
But what happens if you want to run two? What happens if you want to make sure that they're

250
00:21:52,800 --> 00:21:58,880
always up? What happens if you want to do that declaratively and, you know, create YAML for

251
00:21:58,880 --> 00:22:04,560
all your deployments? So it's repeatable. How do you handle storage, you know, on, on your single

252
00:22:04,560 --> 00:22:09,680
node, single nodes, pretty easy, but you know, how do you handle it if you have more than one?

253
00:22:09,680 --> 00:22:15,200
And so, you know, Kubernetes asks a lot of those questions of containers and you're left to kind

254
00:22:15,200 --> 00:22:19,840
of figure it out. But for the most part, once you get going with it, I think, you know, like,

255
00:22:19,840 --> 00:22:24,400
like me when I caught the DevOps bug or engineering bug or software development bug, you know, it's,

256
00:22:24,400 --> 00:22:29,920
it's something that you can go really deep on really fast and maybe never come back from.

257
00:22:30,480 --> 00:22:34,320
It definitely is a lot of fun, but it, it, there's a lot of learning involved.

258
00:22:34,320 --> 00:22:39,200
But I always find myself thinking, right, I've got two or three Raspberry Pis sat in the drawer.

259
00:22:39,920 --> 00:22:43,600
And the whole purpose of doing this would be to have a highly available,

260
00:22:44,320 --> 00:22:49,920
I dunno, Git server, web server, whatever it is, basic services like that. I don't think I would

261
00:22:49,920 --> 00:22:55,280
do things like Home Assistant in, in Kubernetes cause it's, it's best suited as its own VM.

262
00:22:55,280 --> 00:23:02,240
And we'll just, we'll forget about that. But there are certain services in the, in my overall kind of

263
00:23:02,240 --> 00:23:07,040
self hosting world that would be pretty cool. You know, at the moment I run everything on

264
00:23:07,040 --> 00:23:12,320
my storage server. So if a disk fails, I have to take that thing out and shoot it in the,

265
00:23:12,320 --> 00:23:17,360
no, I don't do that. I take the disk out and the machine's offline for an hour or two,

266
00:23:17,360 --> 00:23:22,880
or maybe longer if I'm doing some data transfer, I will actually stop all the containers on that

267
00:23:22,880 --> 00:23:26,400
box so that nothing's reading and writing to mergerFS and doing all that kind of stuff.

268
00:23:27,600 --> 00:23:31,680
And I find myself thinking in those moments, which admittedly is only

269
00:23:32,720 --> 00:23:39,360
once a month for a few hours at most, I think, Oh, it'd be great if this was self healing and

270
00:23:39,360 --> 00:23:44,240
that web service had just moved over here and its underlying storage had also replicated and

271
00:23:44,240 --> 00:23:49,280
also done all. And it's just those, all those extra thoughts of, well, but then I need to solve

272
00:23:49,280 --> 00:23:53,120
this problem and then I need to solve that one. And then I need a load balancer and then I need

273
00:23:53,120 --> 00:23:59,520
to replicate the storage and all that kind of stuff. So what's the lowest barrier of entry

274
00:23:59,520 --> 00:24:03,600
to a highly available Kubernetes set up in a home lab scenario?

275
00:24:03,600 --> 00:24:07,920
Oh yeah, good question. So, I mean, you hit the nail on the head with all the challenges you'll

276
00:24:07,920 --> 00:24:13,120
start to face. Those are the known ones. There are a lot of ones you don't know until you get into it.

277
00:24:13,120 --> 00:24:18,400
But the lowest barrier of entry, I think the minimum available, there's a couple of ways

278
00:24:18,400 --> 00:24:23,680
you can do it. With K3S, you can use etcd for your, your, your Kubernetes database,

279
00:24:23,680 --> 00:24:28,240
or you can use a MySQL database, which is external. At the end of the day, you need at

280
00:24:28,240 --> 00:24:32,960
least three nodes for quorum for them to vote. But if you're using the MySQL version, you don't

281
00:24:32,960 --> 00:24:39,040
need quorum because the MySQL database acts as your database. So you, nodes don't need to vote

282
00:24:39,040 --> 00:24:47,200
or it is the tiebreaker. So how does that work? etcd is explicitly designed for Kubernetes,

283
00:24:47,200 --> 00:24:50,080
at least that's the way it feels. I know it wasn't originally, but

284
00:24:50,720 --> 00:24:54,800
it's very lightweight. It's very good at maintaining quorum and the performance

285
00:24:54,800 --> 00:25:01,360
at scale is excellent. MySQL, not so much. Yeah, no, I totally agree. So if you choose

286
00:25:01,360 --> 00:25:06,800
the etcd route, it's going to be very chatty, but highly available. It's going to be replicating

287
00:25:06,800 --> 00:25:12,160
all of the data across all of those nodes. It will have some kind of performance impact if

288
00:25:12,160 --> 00:25:18,240
you're using Raspberry Pis with micro SD cards, probably not the best storage for something that

289
00:25:18,240 --> 00:25:23,680
reads and writes often. But with MySQL, if you have it there, you can run that anywhere. It

290
00:25:23,680 --> 00:25:29,280
becomes your state for where these nodes go and, and look up their state. And then your

291
00:25:29,280 --> 00:25:33,920
database for everything in Kubernetes. But I think the performance is, is good enough,

292
00:25:33,920 --> 00:25:39,120
good enough for, for nodes and good enough for, for k3s. I think otherwise they wouldn't

293
00:25:39,120 --> 00:25:44,240
have chosen it. I suppose I get caught up sometimes in, you know, thinking about this

294
00:25:44,240 --> 00:25:48,880
from my day job and thinking that I must do things properly. I must do it with etcd when

295
00:25:48,880 --> 00:25:53,520
actually probably MySQL, certainly from your description there sounds actually like in some

296
00:25:53,520 --> 00:25:58,000
cases it might be a decent choice. So what do you do? Do you put MySQL on it? You know, let's say

297
00:25:58,000 --> 00:26:02,560
you've got three pies running k3s. Do you then have a fourth that's just dedicated as a single

298
00:26:02,560 --> 00:26:08,080
node for MySQL? Well, if you, if you're doing MySQL, you could do two nodes with a MySQL database

299
00:26:08,080 --> 00:26:11,040
anywhere in the environment that it can communicate with. It doesn't even have to be a

300
00:26:11,040 --> 00:26:15,680
Kubernetes node. So you can have two Raspberry Pis and then your MySQL database wherever,

301
00:26:15,680 --> 00:26:20,560
anywhere else, as long as it can reach, you know, MySQL over TCP. And how's the complexity of

302
00:26:20,560 --> 00:26:25,840
setting up that replication? You don't have to do anything. There's nothing you need to do with k3s.

303
00:26:25,840 --> 00:26:31,680
All of that is obfuscated from you in general, like with etcd or MySQL. You don't need to know

304
00:26:31,680 --> 00:26:36,160
how to do that or how to set it up. Not saying that, you know, you might not have to troubleshoot

305
00:26:36,160 --> 00:26:42,400
it sometimes. But for the most part, it's pretty solid. I'm a huge fan of the etcd way because,

306
00:26:42,960 --> 00:26:47,920
you know, you can spin up nodes, add nodes. And I mean, you could do that with the MySQL version.

307
00:26:47,920 --> 00:26:52,720
More industry standard too. So if we come back to one of the original goals of learning,

308
00:26:53,360 --> 00:26:59,040
right, if you're doing things at home in a very custom way, you could argue that certain businesses

309
00:26:59,040 --> 00:27:04,960
and certain shops will have a huge amount of custom code. Certainly older, more legacy shops

310
00:27:04,960 --> 00:27:09,040
from, let's say, more than 15 years old, let's say, before the cloud was really a thing.

311
00:27:09,600 --> 00:27:13,840
They'll have a lot of on-premise infrastructure that you'll go and you'll read the wiki if they

312
00:27:13,840 --> 00:27:19,360
have one and you'll scratch your head and be like, why did you do it that way? Because 20 years ago,

313
00:27:19,360 --> 00:27:24,880
there was no other way, mate. That's why. Yeah, exactly. So, you know, there is that to contend

314
00:27:24,880 --> 00:27:31,040
with if you think about doing the MySQL route is it's not an industry standard way of doing things,

315
00:27:31,040 --> 00:27:37,120
whereas etcd is. So, you know, you've got a few pies now running K3S with, let's say, etcd as the

316
00:27:37,120 --> 00:27:43,200
backend. What next? So the next thing I highly recommend doing is going figuring out storage.

317
00:27:43,200 --> 00:27:47,280
Well, there's two pieces. It's choose your own adventure. Remember, I said the terminal is the

318
00:27:47,280 --> 00:27:53,280
only video game I need, baby. You see what I mean? Yeah, so those are the two things. And I recommend

319
00:27:53,280 --> 00:27:58,000
people like figure that out up front. I know most people when they build a cluster, they don't even

320
00:27:58,000 --> 00:28:02,960
have K3S in mind and maybe they do, but they're more focused on the service that they want to

321
00:28:02,960 --> 00:28:08,480
run. They want to run WordPress or Ghost or Plex, maybe. And so they're really focused on that.

322
00:28:08,480 --> 00:28:13,120
And sometimes I have to remind people, OK, before you do that, figure out storage and load balancing

323
00:28:13,120 --> 00:28:18,000
because that's that stuff to figure out. I would probably say figure out storage too, because

324
00:28:18,000 --> 00:28:23,120
almost every stateful application, so stateful applications and Kubernetes are ones that

325
00:28:23,120 --> 00:28:29,280
write state or keep state in memory. But for ones that write to a volume to disk, you need to figure

326
00:28:29,280 --> 00:28:34,960
out storage. And you can do the, hey, put it all in NFS. But then you're taking, you know, you're

327
00:28:34,960 --> 00:28:41,120
taking this highly available service, K3S, and making it, you know, putting in a single point of

328
00:28:41,120 --> 00:28:45,920
failure, which is probably your NFS. It's the same thing with MySQL too. And when we were talking

329
00:28:45,920 --> 00:28:49,360
about that earlier, the reason why I don't choose that is because you're just, you know, you're

330
00:28:49,360 --> 00:28:53,040
taking something that's highly available and all of a sudden you're making a single point of failure

331
00:28:53,040 --> 00:28:59,120
be your MySQL server. And then you have to make your MySQL server HA to make that HA. And so it

332
00:28:59,120 --> 00:29:05,840
just grows exponentially. It depends on how rigid you are about making things highly available.

333
00:29:05,840 --> 00:29:11,440
And so you have a lot of choices, you know, but for storage, it's really going to be up to you

334
00:29:11,440 --> 00:29:15,920
if you want to make it highly available. You could dump everything in NFS and that's fine.

335
00:29:15,920 --> 00:29:20,720
Or you could choose things like Rook Ceph or Longhorn. There are options.

336
00:29:21,360 --> 00:29:28,080
Why didn't I take the blue pill? That's often what I end up thinking at 2 AM when I've started one

337
00:29:28,080 --> 00:29:37,200
of these ludicrous adventures down that particular rabbit hole. So let's presuppose that we now have

338
00:29:37,200 --> 00:29:43,680
a running Kubernetes cluster with a load balancer with storage and everything's working. We've got

339
00:29:43,680 --> 00:29:48,480
a completely empty cluster. Now what? Where do people find apps to actually run on this thing

340
00:29:48,480 --> 00:29:55,120
that are compatible with Kubernetes? Yeah, good question. So most, most, I'll say most, air quotes,

341
00:29:55,120 --> 00:30:01,040
most containers that are built on Docker are compatible with Kubernetes because Kubernetes

342
00:30:01,040 --> 00:30:05,520
under the covers is now using a different container runtime. It's not important,

343
00:30:05,520 --> 00:30:10,320
but it's compatible with Docker images and Docker containers. So one, anything you were previously

344
00:30:10,320 --> 00:30:14,720
running in Docker most likely is going to run in Kubernetes and that's how it was designed to work.

345
00:30:15,360 --> 00:30:18,960
Something you'll need to pay attention to, and I kind of hinted at it a little bit was,

346
00:30:18,960 --> 00:30:23,600
was, you know, stateful applications. You'll need to make sure that that application you have can

347
00:30:23,600 --> 00:30:28,800
scale. Everybody thinks like, oh, you know, I'm running Plex. The way to make it highly available

348
00:30:28,800 --> 00:30:34,560
is spin the replicas up to three. It's not going to work. It's not going to work. Yeah. So if,

349
00:30:34,560 --> 00:30:39,040
if things weren't built to be stateless, you're not going to be able to scale them. You'll get

350
00:30:39,040 --> 00:30:42,960
some other benefits like they could bounce around on nodes, but you can only run one.

351
00:30:42,960 --> 00:30:47,760
So it's almost a bit like RAID in that regard, right? It's not designed to increase your

352
00:30:47,760 --> 00:30:53,360
resilience necessarily. It's designed to increase your uptime. So the whole sales pitch behind

353
00:30:53,360 --> 00:30:59,200
Kubernetes that kind of got me excited about it in the beginning was, let's say you had a Plex

354
00:30:59,200 --> 00:31:04,640
instance running on node one and node two and three are just sat there chilling out, doing nothing.

355
00:31:04,640 --> 00:31:09,920
Node one has a hardware failure and Kubernetes is running a loop constantly checking the state

356
00:31:09,920 --> 00:31:15,200
of these things. And every time that loop executes, it's saying right on node one,

357
00:31:15,680 --> 00:31:22,640
this pod exists, Plex exists, and it matches the state declared in the YAML file that Alex put in

358
00:31:22,640 --> 00:31:27,680
place. Cool. Everything's hunky-dory and it will carry on doing that loop. I don't know what the

359
00:31:27,680 --> 00:31:34,080
frequency is, but it's many times a minute that that typically happens. Now what happens when node

360
00:31:34,080 --> 00:31:40,560
one has a hardware failure or drops off the network or just crashes if the application crashes

361
00:31:40,560 --> 00:31:44,800
for some reason? Well, Kubernetes is going to come around and do its health checks and make sure

362
00:31:44,800 --> 00:31:48,960
that everything's tickety-boo. And it's going to say, hang on a minute, the desired state over here

363
00:31:48,960 --> 00:31:54,240
doesn't match what I'm expecting. Well, what I'm going to do is I'm going to utilize a different

364
00:31:54,240 --> 00:31:58,640
node that matches the node selector rule that you've put in here. Let's say it's a node with

365
00:31:58,640 --> 00:32:04,640
quick sync for transcoding, for example. Not every node in your cluster might have a GPU available

366
00:32:04,640 --> 00:32:09,840
to do that. The loop will go around and it will say, hey, okay, well, out of the five nodes in

367
00:32:09,840 --> 00:32:14,720
this cluster, I can use these two. And now I'm going to take the Plex pod and I'm going to make

368
00:32:14,720 --> 00:32:19,120
sure it's destroyed over there, but I'm going to spin up a new one over here. And then I'm going to

369
00:32:19,120 --> 00:32:24,160
tell you that that happened in your log and alert you about it. That's, generally speaking, the

370
00:32:24,160 --> 00:32:28,960
typical use case for a stateful application in Kubernetes. Like Tim was saying, it's not

371
00:32:28,960 --> 00:32:35,760
to have three copies of Plex running at the same time because the database writes. And if you think

372
00:32:35,760 --> 00:32:40,480
about how the data would flow in that transaction, you're coming in to watch video. Well, which

373
00:32:40,480 --> 00:32:45,680
version of the Plex runtime are you hitting? And then that version of the Plex runtime has probably

374
00:32:45,680 --> 00:32:50,880
got its fingers in the database somewhere. And how does the database know which one to listen to? And

375
00:32:50,880 --> 00:32:57,600
it can get very confusing very quickly, which is why a lot of dev shops have to architect things

376
00:32:57,600 --> 00:33:04,080
in a way called the 12 factor app. If you're interested, go and look at 12factorapp.net.

377
00:33:04,080 --> 00:33:08,880
I think that's the website. Hang on. Yeah. Yeah. Good site. Good reference to 12factor.net

378
00:33:08,880 --> 00:33:15,040
is the website. There'll be a link in the show notes. There are a few different ways to run

379
00:33:15,040 --> 00:33:19,120
containers on Kubernetes. Like you were saying, OCI compliant containers, typically that's mostly

380
00:33:19,120 --> 00:33:25,520
Docker containers. There are a few others under the covers as well. There is a project called

381
00:33:25,520 --> 00:33:29,840
Kubernetes at home, which there'll be a link to in the show notes. Kate's at home. And this is a

382
00:33:29,840 --> 00:33:34,960
fantastic resource. If you're not familiar with it, go check it out. You can go over there and

383
00:33:34,960 --> 00:33:40,720
download Helm charts and all sorts of other stuff to run applications on top of your Kubernetes

384
00:33:40,720 --> 00:33:45,760
cluster. And a lot of other smart people have done a lot of the legwork for your thinking about

385
00:33:45,760 --> 00:33:52,480
how do I run an application that wasn't designed for the Kubernetes world to make it run in the

386
00:33:52,480 --> 00:33:57,680
Kubernetes world. Stuff like user management. We're all familiar with the group and user ID stuff

387
00:33:57,680 --> 00:34:02,640
from a normal Linux Docker host. There's some tweaks you've got to make in the Kubernetes world

388
00:34:02,640 --> 00:34:08,320
to translate that stuff across multiple nodes because it's not just typical Linux permissions.

389
00:34:08,320 --> 00:34:14,560
There's an extra layer on top. And there's lots of other small gotchas like that, like Tim was

390
00:34:14,560 --> 00:34:18,080
saying. There's plenty of stuff that you don't know what you don't know until you find out you

391
00:34:18,080 --> 00:34:23,440
don't know it. And it's a deep rabbit hole, but it's one that if you've got any interest in,

392
00:34:23,440 --> 00:34:28,880
I highly recommend you give a look to Tim's channel, as well as the Kubernetes at home

393
00:34:28,880 --> 00:34:34,160
stuff that's linked in the show notes. Yeah. I've worked with Kubernetes at home folks,

394
00:34:34,720 --> 00:34:38,720
a couple of them there. I'm in their community. That's how I got bit by the flux bug.

395
00:34:38,720 --> 00:34:44,400
And declaratively defining your whole entire Kubernetes clustered through manifest.

396
00:34:44,400 --> 00:34:48,240
Yeah, that's a great call out. The Kubernetes at home Helm charts are fantastic,

397
00:34:48,240 --> 00:34:52,880
especially for people self-hosting because they went after a lot of the services that people are

398
00:34:52,880 --> 00:34:57,680
self-hosting. And if you just want normal, I shouldn't say normal, but publicly available

399
00:34:57,680 --> 00:35:03,840
Helm charts for services like NGINX and all these enterprise services, those are out there. Those

400
00:35:03,840 --> 00:35:09,840
Helm charts are out there. But what the Kate's at home Helm charts are, they're going after Plex,

401
00:35:09,840 --> 00:35:14,560
they're going after Sonar, Radar, all these services that people like to run at home

402
00:35:14,560 --> 00:35:19,120
and building charts for them. And if you even search some of the Helm chart repository

403
00:35:19,120 --> 00:35:24,160
aggregators, they reference their charts too. So yeah, they've been a huge help in getting me

404
00:35:24,160 --> 00:35:28,880
on the flux, which is a totally different topic, but it's pretty far down the rabbit hole.

405
00:35:28,880 --> 00:35:32,720
I got absolutely hooked by these guys when I found out I could run a Factorio server

406
00:35:32,720 --> 00:35:36,720
on my Kubernetes cluster. I just thought it was the coolest thing in the world.

407
00:35:36,720 --> 00:35:41,280
So talk to me a bit about GitOps and flux and that kind of thing. We've talked to,

408
00:35:41,280 --> 00:35:46,480
obviously I rambled a lot a minute ago about declarative state and how there's this loop

409
00:35:46,480 --> 00:35:51,920
in Kubernetes that is constantly checking the state of things. GitOps takes that to another

410
00:35:51,920 --> 00:35:59,360
level, right? It does. So GitOps is a lot more defined, I guess, than DevOps. So GitOps is this

411
00:35:59,360 --> 00:36:06,800
idea that you define your cluster state or your environment state in manifest 100%.

412
00:36:07,760 --> 00:36:16,240
And the way that you influence the state of a cluster or infrastructure is by doing it through

413
00:36:16,240 --> 00:36:22,480
Git. So for example, I just went through this exercise. You know, I needed to get, let's just

414
00:36:22,480 --> 00:36:29,600
say an Nginx container. I would add an Nginx manifest, whether I'm using Helm or Kubernetes

415
00:36:29,600 --> 00:36:34,800
manifests, I would create that manifest. I would create that manifest. I would commit it to Git,

416
00:36:34,800 --> 00:36:39,200
and I would push it up. And then there are services within Kubernetes that say,

417
00:36:39,200 --> 00:36:44,080
Hey, I just got this manifest. I'm looking at the current state. I'm looking at the desired

418
00:36:44,080 --> 00:36:50,480
state and I will apply it. And so GitOps basically says that you, the only way you can influence

419
00:36:50,480 --> 00:36:55,520
state is really by influencing Git, but they say through a pull request could be anyway.

420
00:36:56,320 --> 00:37:02,960
But now my, my whole entire cluster at home is that way. And I think the benefit of that is,

421
00:37:02,960 --> 00:37:08,160
is that I can reproduce my whole entire Kubernetes cluster by just saying, you know,

422
00:37:08,160 --> 00:37:13,840
kube control apply or use flux to do it all over again and rebuild my whole entire cluster.

423
00:37:13,840 --> 00:37:18,640
Now data is a different story. I would have to do some restores and data to get those,

424
00:37:18,640 --> 00:37:24,480
those persistent volume claims back. But at the end of the day, I have my whole entire playbook

425
00:37:24,480 --> 00:37:28,000
for how to build my cluster. You know, if you're running your own cluster,

426
00:37:28,000 --> 00:37:32,320
you can do one-offs and do all these weird stuff. You know, you know how it is to tinker.

427
00:37:32,320 --> 00:37:37,600
That's just it. That's just it. GitOps at home might seem like massive overkill,

428
00:37:37,600 --> 00:37:41,200
just like ansible-izing your server might seem massive overkill when it's just you.

429
00:37:41,200 --> 00:37:41,680
That's right.

430
00:37:41,680 --> 00:37:44,800
But if you take these principles into the workplace,

431
00:37:44,800 --> 00:37:48,720
I guarantee you it's going to make you more employable, you'll earn a bigger salary.

432
00:37:48,720 --> 00:37:53,280
But as a team, it just makes your life so much easier because you're not like,

433
00:37:53,280 --> 00:37:58,080
who's done this to the load balancer? Alex, was it you? No, it's in Git. You can go look at Git

434
00:37:58,080 --> 00:38:01,440
blame and you know that it was Tim that broke the load balancer, not Alex this week.

435
00:38:01,440 --> 00:38:06,320
Yeah. Don't let, don't let him. Yeah. And it's, it's, it's nice because, you know,

436
00:38:06,320 --> 00:38:10,400
places I've worked at, sometimes developers have full access to Kubernetes, which,

437
00:38:10,400 --> 00:38:15,520
which is fine. That's a choice made by the company. But anyone can then go kubectl apply

438
00:38:15,520 --> 00:38:20,800
or kubectl delete everything. And then it's gone, you know, and so GitOps basically says,

439
00:38:20,800 --> 00:38:25,600
no more of that. We're separating our concerns. You know, if you want to get things into Kubernetes,

440
00:38:25,600 --> 00:38:30,560
you do it through Git and then you use, you know, a controller or service to apply those to

441
00:38:30,560 --> 00:38:34,960
Kubernetes. So it's, it's very interesting. It's very, it's very bleeding edge. And a couple of

442
00:38:34,960 --> 00:38:40,080
places are doing this now for a couple, you know, flux is one Argo CD is another. And I'm sure

443
00:38:40,080 --> 00:38:44,240
there's a handful of others that are coming up. Even GitLab themselves does it or Tanner does it

444
00:38:44,240 --> 00:38:49,120
for Docker. I mean, this is a hot topic, but it's, it's really awesome. But at the end of the day,

445
00:38:49,120 --> 00:38:53,360
now as a developer, I'm like, okay, I can't, I can't make changes to Kubernetes directly,

446
00:38:53,360 --> 00:38:59,520
which I'm fine with. I'm fine with process. It has upsides and downsides. The upside is,

447
00:38:59,520 --> 00:39:04,000
like you say, everything is declarative and it makes rebuilding stuff really, really easy.

448
00:39:04,000 --> 00:39:09,600
The downside is you have to make every single change that way, no matter if it's a one

449
00:39:09,600 --> 00:39:16,080
character change to a config file and whatever your peer review process is, you know, in a home

450
00:39:16,080 --> 00:39:20,720
lab, it's likely to be you going, yes, yes, mash, mash, mash, yes, yes, yes. Whereas at work, you

451
00:39:20,720 --> 00:39:24,800
know, you might have to get your team lead to approve it and, you know, explain why you missed

452
00:39:24,800 --> 00:39:29,920
the semi-colon off the end of a line or whatever it might be, you know, that kind of thing. So it

453
00:39:29,920 --> 00:39:35,440
has its upsides and downsides. I think for me, the upsides do outweigh the downsides simply because

454
00:39:35,440 --> 00:39:42,080
of everything we talked about. Yeah, I agree. My notes section that I used to have on how to

455
00:39:42,080 --> 00:39:50,000
reconfigure my Kubernetes cluster in the case of an event is gone. It used to be a long list of

456
00:39:50,000 --> 00:39:55,440
helm commands that I used to run, kube control, you know, commands that I run along with manifest,

457
00:39:55,440 --> 00:40:02,400
manifest, and now that's just gone. It's just, no, my documentation is the code and I hate it when

458
00:40:02,400 --> 00:40:06,640
people say that, but it's true. Now my code is the documentation and documentation is the code.

459
00:40:06,640 --> 00:40:11,520
There's no other way to do it. Well, it's the source of truth. It's the most up-to-date version

460
00:40:11,520 --> 00:40:17,120
of what's in production. I mean, the only other more truthful source would be actually production,

461
00:40:17,680 --> 00:40:21,440
but if you've been doing it all through GitOps anyway, they should be the same.

462
00:40:21,440 --> 00:40:26,640
That's right. Yeah, yeah. It's a pretty strict principle, but I enjoy it. You know,

463
00:40:26,640 --> 00:40:31,360
Argo CD is another one that I've been wanting to play with. It's pretty cool. It's a lot more

464
00:40:31,360 --> 00:40:35,920
visual. You know, even before I was doing give up GitOps, I would still deploy stuff through

465
00:40:35,920 --> 00:40:42,560
Kubernetes. I'd still use CICD, you know, pipelines, commit manifests, and then have,

466
00:40:42,560 --> 00:40:47,920
you know, kube control apply during CI. This is a little bit different and it's pretty awesome.

467
00:40:47,920 --> 00:40:49,280
Pretty awesome. It's fun to explore.

468
00:40:52,400 --> 00:40:58,000
tailscale.com slash self-hosted. Go there to get a free personal account for up to 20 devices and

469
00:40:58,000 --> 00:41:03,280
support the show. Tailscale is one of my absolute favorite discoveries of the last 12 months. It's a

470
00:41:03,280 --> 00:41:09,120
zero config VPN. You can install it on any device in minutes and manage the firewall rules for you

471
00:41:09,120 --> 00:41:13,840
and it works from anywhere. I've been able to close all the ports in my firewall, thanks to

472
00:41:13,840 --> 00:41:18,960
the outbound NAT punching that tailscale does. And this means that no matter where I am in the world,

473
00:41:18,960 --> 00:41:25,520
I can connect to my LAN as if I'm sat in this chair. And it is so great. I can hardly explain

474
00:41:25,520 --> 00:41:32,160
to you guys. I can also, thanks to their amazing subnet router technology, connect to the Synology

475
00:41:32,160 --> 00:41:36,240
box running at my mom's house or the server I have running at my dad's house as if I'm on

476
00:41:36,240 --> 00:41:42,160
their LANs as well. For me, one of the best parts is every device on my network gets a stable IP

477
00:41:42,160 --> 00:41:46,800
and auto-assigned domain that stays consistent no matter what network the device is on.

478
00:41:47,520 --> 00:41:52,000
Devices only connect after signing in through your existing identity provider. This means you

479
00:41:52,000 --> 00:41:57,120
can more easily enforce multi-factor authentication and deauthorize those who you've shared things

480
00:41:57,120 --> 00:42:02,320
with who you perhaps wish you hadn't. You can try it for yourself for free for up to 20 machines

481
00:42:02,320 --> 00:42:08,880
at tailscale.com slash self-hosted. And just imagine, what if this is how the internet worked?

482
00:42:08,880 --> 00:42:15,360
What if every machine had a static IP and a DNS name and that address migrated around the world

483
00:42:15,360 --> 00:42:20,960
with you and it was always encrypted and you never had to worry about certificates and all of this

484
00:42:20,960 --> 00:42:25,920
just happened automatically? That's Tailscale. So go and try it out for yourself for free for

485
00:42:25,920 --> 00:42:29,440
up to 20 machines at tailscale.com slash self-hosted.

486
00:42:31,520 --> 00:42:37,120
Jerry writes in, hey guys, in response to the Wi-Fi enabled E Ink device mentioned in episode 72,

487
00:42:37,120 --> 00:42:43,040
I thought you should check out pine64.org slash pine note. Hey, Jerry, I just want to say thanks

488
00:42:43,040 --> 00:42:46,960
for writing in with this one. I mean, I know the conclusion that Chris and I came to in the last

489
00:42:46,960 --> 00:42:51,680
episode was that for the most part, wherever you're going to want an E Ink display, there's

490
00:42:51,680 --> 00:42:58,400
going to be power and therefore a cheap tablet might make more sense. But if you really, really

491
00:42:58,400 --> 00:43:03,360
do want an E Ink display, you can go ahead and look at this pine note developer edition. It is

492
00:43:03,920 --> 00:43:10,480
$400. So what we were saying about E Ink displays being expensive, definitely holds true with this

493
00:43:10,480 --> 00:43:15,840
device, but it does look cool. And obviously, you know, supporting the pine project is a noble

494
00:43:15,840 --> 00:43:20,960
endeavor. Those guys do great work over there. So you can go ahead and take a look at the link

495
00:43:20,960 --> 00:43:26,240
in the show notes to the pine note. And Joshua also writes in, I've been running Linux since

496
00:43:26,240 --> 00:43:31,200
high school and I've been self-hosting almost as long. I am currently getting my masters in

497
00:43:31,200 --> 00:43:35,280
cybersecurity engineering and I've been using the skills I learned to try and make my systems

498
00:43:35,280 --> 00:43:40,960
more secure. One tool I learned about recently is Linus. I think that's how you say it anyway,

499
00:43:40,960 --> 00:43:47,040
L-Y-N-I-S. This scans your configs and gives you suggestions to improve your security.

500
00:43:47,680 --> 00:43:51,760
Do either of you run any tools to help ensure you aren't making any obvious

501
00:43:51,760 --> 00:43:56,400
security mistakes? Now, Tim, I know that you do some stuff like this in your day job. I

502
00:43:56,400 --> 00:44:01,440
wondered if you had any suggestions for Josh. Yeah, great question. I was actually working

503
00:44:01,440 --> 00:44:07,360
on this today. There are a lot of tools you can use to do analysis on the things you use. For

504
00:44:07,360 --> 00:44:13,600
example, I was setting up a container image scanning today to scan Docker containers to look

505
00:44:13,600 --> 00:44:19,440
for vulnerabilities, known vulnerabilities that are higher critical, and if they were

506
00:44:19,440 --> 00:44:24,240
addressed or not. So there are lots of things you could do there like that. You can scan them either

507
00:44:24,240 --> 00:44:29,280
at rest in a container registry, or you can scan them even during runtime if they're in

508
00:44:29,280 --> 00:44:34,720
Kubernetes. And then if you are writing code, there's a lot of static code analysis tools you

509
00:44:34,720 --> 00:44:39,600
can use too as well to scan and look for vulnerabilities in either your code or

510
00:44:40,320 --> 00:44:45,440
dependencies that you're using for your code. Trivia is one that I was using today to set up,

511
00:44:45,440 --> 00:44:51,120
and it's really, really awesome. And it's open source, and they do a lot of scanning of a lot

512
00:44:51,120 --> 00:44:56,240
of different types. They're kind of an all-in-one now where they can scan code, dependencies,

513
00:44:56,240 --> 00:45:00,160
and containers. So now when we see a video come out from you in a few weeks time on that,

514
00:45:00,160 --> 00:45:05,600
I'll be like, hey, you heard it here first. You know, I think for me, cybersecurity is one of

515
00:45:05,600 --> 00:45:12,080
those things. It's obviously a buzzword in certain areas, but just not being the tallest nail is the

516
00:45:12,080 --> 00:45:17,040
name of the game. Don't do silly things like open ports in your firewall you don't absolutely need.

517
00:45:17,040 --> 00:45:22,240
I mean, for me, since discovering Tailscale, I've actually been able to close every single port in

518
00:45:22,240 --> 00:45:27,440
my firewall. I don't have anything open anymore, not even WireGuard like I used to, because

519
00:45:27,440 --> 00:45:32,720
Tailscale does all the outbound NAT punching that I need to get past my own firewall so I can connect

520
00:45:32,720 --> 00:45:38,560
to my LAN as if I'm here wherever I am in the world, which is just great. So stuff like that,

521
00:45:38,560 --> 00:45:42,560
you know, don't open ports in your firewall, I think is a super basic but really important

522
00:45:42,560 --> 00:45:49,360
principle. There's also stuff like using SSH keys or certificates if you want to, using TLS to make

523
00:45:49,360 --> 00:45:53,200
sure it is actually your website that you're connected to through Let's Encrypt. There's

524
00:45:53,200 --> 00:45:58,320
really no excuse these days not to, but I think beyond that just don't be the tallest nail. You

525
00:45:58,320 --> 00:46:04,640
don't use a silly stupid password like password123. At least make some basic effort, that kind of

526
00:46:04,640 --> 00:46:08,320
thing. Use a password manager, that kind of stuff. I think that's all you need to do really.

527
00:46:09,280 --> 00:46:14,480
So Jaqen writes, I love self-hosted and all the rest of the JB shows. I started listening

528
00:46:14,480 --> 00:46:22,240
exactly on the very last last episode and have been a fan ever since. Jaqen, I almost shed a tear

529
00:46:22,240 --> 00:46:26,240
on the last episode at last, I've got to be honest with you. I know Chris isn't here, but I was a huge

530
00:46:26,240 --> 00:46:32,000
fanboy of JB for many years before starting this show and I owe a lot of what I can say and talk

531
00:46:32,000 --> 00:46:38,160
to about Linux, I think to JB as a whole. So I feel you there man, I feel you there. Now he continues,

532
00:46:38,160 --> 00:46:42,720
on episode 71, a listener asked about thoughts on alternatives to the Raspberry Pi.

533
00:46:43,680 --> 00:46:48,800
I think the Orange Pi makes a decent low-cost board. They sell for around 24 bucks and you can

534
00:46:48,800 --> 00:46:54,560
get them directly from the manufacturer. Now Tim, I know you're a bit of a Pi fiend as well as I am

535
00:46:54,560 --> 00:47:02,240
and Chris too. Have you ever heard of these Orange Pis? You know I've heard the name but I can't tell

536
00:47:02,240 --> 00:47:10,480
you how they differ. I can't. I have lots of Raspberry Pis, I even have a Turing Pi 2 and

537
00:47:10,480 --> 00:47:17,360
the only non-Pi device I have is an NVIDIA Jetson, but I haven't heard of them. I need to look into

538
00:47:17,360 --> 00:47:22,000
them especially if they have a better supply than Raspberry Pis right now. Well that's just it isn't

539
00:47:22,000 --> 00:47:28,160
it? Raspberry Pis are unobtainium, so no matter how much we might wax lyrical about them, if you

540
00:47:28,160 --> 00:47:33,440
can't find them then it's pretty much no good to anybody. So yeah, maybe these Orange Pis are the

541
00:47:33,440 --> 00:47:39,440
way to go. They look like a pretty cool board. They're ARM64 based which is, you know, they can

542
00:47:39,440 --> 00:47:44,400
be a bit of a problem sometimes to find applications to run on these things but for a small little

543
00:47:44,400 --> 00:47:50,160
headless box, maybe they'll do the trick. Who knows? If you have been running an Orange Pi

544
00:47:50,160 --> 00:47:56,160
in anger, please write in and let us know at selfhosted.show contact. Now I want to say huge

545
00:47:56,160 --> 00:48:00,800
thanks to Tim for stepping in at the last minute here to help me co-host the show. Thank you Tim.

546
00:48:00,800 --> 00:48:04,560
Yeah thanks for having me. Huge fan. Is there anywhere else you'd like to send people? I mean

547
00:48:04,560 --> 00:48:09,600
I imagine you've got some channel on YouTube. Yeah, yeah, channel on YouTube. Yeah, just Google

548
00:48:09,600 --> 00:48:15,120
Technotim or use your favorite search engine and look for Technotim or just Technotim.live. That's

549
00:48:15,120 --> 00:48:19,680
an easy way to get a hold of me. Very good. Thank you very much for joining us. Now I want to say

550
00:48:19,680 --> 00:48:23,920
also a big thank you to our site reliability engineers, our SRE subscribers. You make the

551
00:48:23,920 --> 00:48:30,000
show possible over at selfhosted.show slash SRE. You can also go and support the entire

552
00:48:30,000 --> 00:48:35,600
Jupiter Broadcasting Network over at Jupiter.party. Don't forget as well that we have the London

553
00:48:35,600 --> 00:48:40,800
Meetup coming up on August the 5th. More details to follow on that soon and again if you have a

554
00:48:40,800 --> 00:48:46,240
venue recommendation please I would love to hear it. As always you can get in touch with us at

555
00:48:46,240 --> 00:48:50,800
selfhosted.show slash contact. That's the place to go to get in touch with us and you can find me on

556
00:48:50,800 --> 00:48:56,080
Twitter at ironicbadger. I'm at Technotim live on Twitter. Very good and thanks for listening

557
00:48:56,080 --> 00:49:09,200
everybody. That was selfhosted.show slash 73.


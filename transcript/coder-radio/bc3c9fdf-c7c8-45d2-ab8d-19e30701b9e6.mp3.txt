This is KOTORadio episode 328 for October 5th 2018.
Hi everyone and welcome to KOTORadio, Jupiter Broadcasting's weekly talk show,
taking a pragmatic look at the art and business of software development and its related technologies
and you might say subjects. My name is Chris here in the beautiful Pacific Northwest and joining us
every single week is our host, the man who is established in a secret headquarters spying on
the large corporations of Florida. It's Mr. Dominic. Hello Mike. Hello and I'm editing
my Bash RC live baby. Oh yeah? Oh yeah, this is the time to do it right now during the intro.
It's the right time. It's just the right time. It's the only time. I love it. I love it. There's
been there's been many projects completed during the show. You never know. Sometimes you just get
an inspiration. You might be in the middle of podcasting. Let's see, hair.cs, okay.
We're together on a Friday edition of the show. A rare treat because we often do the show earlier
in the week but it didn't work out. You and I were so passionate. We said we got to do this. We got
to get together. You were traveling like a maniac. How did all of that go? How did all your travel go?
Did it all turn out okay? Always good. In two weeks, I'm going to Texas. Oh really? Whereabouts
in Texas? San Antonio. In a couple of weeks, let's see, I'm going to meet BSD which I think is the
19th and the 20th or the 20th. I think maybe it's the 20th and 21st. Anyways, it's coming up in just
a couple of weekends. It'll be a weekend thing so it might impact that Monday but we'll figure that
out. Yeah, Texas is a good time to go right now because it is getting gray and cold. Although
you're in Florida so what the hell do you know? Anyways, we got a great show. Mike's been testing
the testing and we're going to talk about those testing results. Also a little bit about automated
build systems and if we get to we have some extended hoopla but why don't we start out with
some feedback and follow up like we do to warm up here on the show. And this one I thought was a
good one just to address. It's because it's been a while and this is from a listener in Russia. He
says, hello Chris and Mike. I'm a longtime listener of the show. Appreciate what you do
and I like getting the weekly insights of not just the general topics but the things around
software development and its related technology. Now, JB did help me after five years of wanting
to switch to finally become a happy C++ developer and double my income. So I have a short question
that I'm hoping you'll answer. I've listened to the show for a long time but I don't think I've
ever heard the definition of what a dark matter developer is. Now, I never hear it but I hear you
mention it a lot so I was hoping you would explain what it is. What do these mysterious devs actually
do? He has an idea but he wanted to hear what is our definition when you toss around the dark
matter devs. He says, I got a feeling that those are people working in corporations on narrow
projects, never expected to leave their office and the projects are generally intended for internal
use only. Well, you got that in one. Yeah, that's good right there. That's what we believe here.
Our premise on the show is that is the vast majority of the software development industry
is developers that are employed or contracted to work for a company that are building software for
that company to use internally either as tools to process something or for staff to interact with.
And those developers generally don't get to change and jump languages or toolkits or any fad.
They don't get the fad hop, I guess is what I'm trying to say. They tool away at a job for a long
time and it's a respectable trade if you think about it because there is a certain refining to
that process. But they don't really get all of the fame and the glam and the glitz or whatever.
You know what I'm trying to say? They don't get all the attention in the tech press.
Yeah, they're often not working on, let's say, the newest technologies. They're usually
maintaining some, God forbid, access application for 15 years.
Yeah, struggling with some technical debt and they're generally not the people that the keynotes
are directed at when Google or Microsoft goes up on stage. But what's funny is they're typically
the customer base that's actually keeping those companies financed and buying their products and
licensing their software and using their services. But they're targeting future customers. Yeah, so
that's essentially what the Dark Matter Dev is. And it probably is a good idea that we define it
every now and then. Once every couple of three years or something. Every three years, whether
we need it or not. So I had two items of follow up with you because you know how I like to stalk you.
And I noticed, number one, that it appears perhaps you got the Galago going. So congratulations. Good
job. Thank you. Is the screen working? It's working? There's a minor pink blotch
on the screen, but it's very small and it only appears when the background is dark.
And it just so happens to be on the right side of the screen, which means, you know,
the way editors format code. I don't really care. OK, so it's usable. That's good. And it's decent
hardware still. So all right. So the other follow up is so I think I get it. I get the sense that
Buccaneer or I guess no, I'm sorry. It's the Mad Botter Inc. Now I got to keep these things straight.
I'm also got to remember that I'm part of Linux Academy. Like there's a lot. There's a lot going
on, man. So the Mad Botter seems to be putting some feelers out there for some new hires.
I saw you tweet about that. And I noticed, too, that you were mentioning how some of the people
that were responding or interpreting Linux command line experience as the subset. And I think I'm
getting this right as experience with the subsystem on Windows. What's with it? Is this is this a
younger type of applicant? Like what's happening? So I just filled my more senior developer
position. So the remaining position that I'm interviewing for is the calling a customer
champion. It's a key way kind of customer service type role. So these are more junior people looking
to kind of break into the industry. So QA when they're probably not dealing with a customer
support issue. It kind of. Exactly. Exactly. Mostly I'm interviewing young folks out of USF,
which is a local. You sound like such an old man when you say young folks. I know. You know what,
old man? You're just as bad. Old guy radio. Yeah. And. Like, because I enjoy torturing junior people,
I make them run Linux. It's a good test of their hardiness. This is a test of your spirit,
son. No, it's more because I want them to know how to write scripts and not use wizards for
everything. And more importantly, I know how to give them a bash script that does something so
helpful. And I've been asking on these interviews, so tell me about like, you know,
scripting on a Linux environment. Do you know Python is another very popular thing I'm hearing
about. So one thing is a lot of these folks aren't really doing bash scripting per se.
They're writing their little utility stuff in Python. But the and this isn't all,
but this is a surprising plurality of these young people. When they say when I say Linux,
I asked what distro and they say, well, what do you mean? I just use the subsystem.
And my jaw dropped the first seven times I heard. Oh, I think the reason this is happening
is because we have a very large Microsoft campus like right here. And they are like basically like
major sponsors of most of the tech events and the student stuffs and the hackathons and all that
good stuff. And I know they're very, very active on campus. So my assumption is that it's just
proximity and Microsoft gives free Azure candy to kids like it's giving candy to kids. I have
two thoughts on that. So it's funny because Joe just asked this question in the user air. I think
it's forty nine that I was just on air dot show slash forty nine where I also went into detail
about my whole medical thing, the whole triptych Texas and getting surgery.
But he said, is Windows 10 going to be the biggest competition for desktop Linux now?
And the premise is and I think it's a good one. Of course, we all argued with him. But the premise is
that it's good enough to do some of this stuff and where students in the past would have been
spinning up a VM to do part of the class inside of VM. They're doing it now in the subsystem.
The subsystem is replacing VMs and that keeps you closer to Windows. You're not having to go
through the Ubuntu installer and you're not seeing the Ubuntu desktop with the with their
Nome theme and all. There's no browser. It's like inside the desktop environment. It's all just
the command line sitting right on top of Windows 10. And he made that he made the his position
essentially was is that over time that negates the need when you look at Chromebooks and you
look at Windows 10, that negates the need for desktop Linux. And we all, of course, argued with
it. But now here you are telling me the very thing that he was concerned about. Damn it.
And it doesn't surprise me, to be honest, because it's it's a pain in the ass to really think about
it, install some virtual software. So is it? Do you go with VirtualBox? Do you do you try to use
like Windows 10 Pro and have Hyper-V? Is it a requirement of the class that you license something
or are you trying to do something economical for the students? And the subsystem just solves all
that. It's sort of sad, but it's sort of. It's sort of, I think, long term, it just sort of all
works itself out in the wash because at the same time, they're learning some skills on bash.
They're maybe learning the differences between the DIR command and the LS command.
So it's still a valuable experience that could be translated to physical Linux,
full Linux installation down the road. So I wouldn't totally discount it, but it does,
to me, seem to signal that maybe Joe was right about being concerned about a new trend.
I always hate it when Joe's right.
What's weird is another thing I, you know, let's say four years ago was seeing people
come in for interviews and almost everybody, I would say, what's your preferred environment,
you know, Linux, Windows or Mac? And like 90 percent would just say Mac.
Mac, yeah.
I'm seeing almost like no MacBooks.
That's got to be part and parcel to your location because I still see quite a bit
of MacBooks out there. But, you know, at Linux Academy, they have a choose your own OS policy.
And initially people were choosing MacBooks and it's transitioned to Linux machines. And now it's
like, well, what do we get? Dells? Do we get ThinkPads? Like now there's confusion around
all of that. And I think it is there are like ebbs and flows. The Red Hat CEO this morning tweeted
that tech is a style of fashion, not like in the Apple Watch iPhone style, but like in how things
do come into fad and then they last for a while and then we swing to another fad. And he was
making the case that, you know, the last swing was cloud. Everything's going to the cloud.
We're all cloud. And now it's all now the conversation has swung to hybrid between
physical and cloud is clearly the future. And now we're now that's the new fad for
server deployments. And the same thing is, I think, true with workstation operating systems.
And these different OS's get more competitive. You have Ubuntu coming back into Gnome,
sending all of their fixes upstream and building two really solid LTS is in a row. Actually,
all of them from 1204 to 1404 to 1604 and now 1804, they had their issues here and there.
But in totality, especially by their point one releases, they were really solid,
rock solid LTS is. And so that's a lot of momentum. And I think it's caused some swing
back the other direction when you also combine it with the availability of better hardware.
But that I think also shifts by region. Depending on where you go, you have a much
higher MacBook population. Like so for I'm almost done by the time you go to when you
go to Southeast Linux Fest down there in Charlotte, North Carolina, they're all ThinkPads.
Everybody that goes there for the most part, except for the presenters,
are on ThinkPads. That's just sort of the culture in that area.
That's a little weird. I thought the ThinkPad thing was like an old school sort of Linux
spirit thing. You know, I just got to ThinkPad, right? I mean, I know you did. That's why I did
that. I think it's, you know, there is something to not having a metal machine. So the MacBook that
I had was metal and the XPS 13. So my work machine was this MacBook, the first TouchBar edition I got
when my other MacBook died for Final Cut. And, you know, as I stopped editing video, I sort of
used that MacBook less and less. And I increased my usage of the XPS 13. I started traveling with
the XPS 13. And it was a great little machine, but I was delicate with it. Not only did I had
I busted it by dropping it and the plastic had broken and it was sort of delicate in that way,
but I also felt because it was metal and dentable and scratchable, I needed to be more careful with
it. And so I would be very, very sort of delicate with it. But with the ThinkPad, I really don't
have those concerns. It feels really much more like a workman's tool or a work lady's tool. Like
it's something I throw in the bag. I've already put stickers all over it. Like, you know, I didn't
know if I could never could really violate the aluminum of the XPS 13. But with the ThinkPad,
it just looks like every other plastic ThinkPad. So I don't care. And I just, you know, decorated
the way I like and now it feels personalized. There's something to your work tools being
durable and not being these pieces of jewelry. I'm telling you, there's something to it. You
know, remember when Apple used to make rubber MacBooks? I wish they still did. Yeah. All right.
Well, moving on. That's not what we're here to. Well, actually, in a way, it's a good time to
transition into talking about this particular problem. So nominally, we're going to be talking
about building and QA and all of the integration processes there. And you did a little more digging,
I believe, into automated builds for iOS without a Mac. And it looks like you've collected some
resources. I know we've talked a little bit about Mac and cloud in the past, but I'm curious to see
your thoughts on App Center and other services that are out there. Where are we at on this,
Mr. Dominic? Yeah. So I ended up, you know, I got that MacBook for my trip, but I'm going to be
returning it because I just don't want it. So and I would like my money back. So I'm going to
go back. So I ended up getting a tweet before the last show we did from a listener named Emily,
who suggested I check out Mac and cloud, which I did briefly look at, but I felt it was a little
too much of a hassle. I also subsequently got a tweet, I believe, from someone actually an
evangelist at Microsoft saying, hey, Dodo, you can totally do this in App Center. The catch is your
first builds for iOS have to be done on a physical Mac and then App Center can take it from there.
Oh, really? That's interesting. That is interesting because this scratches a few
itches. One, like we didn't even mention it, but I'm currently on elementary at this very moment.
Good for you. I think that is the desktop environment for you, especially Juno. I don't
know. Are you using Juno? I'm on Juno. Good, good. I really think that's they got good app.
The apps that they have are really good and solid. It's a clean environment. I think it's
gotten a really bad rap for trying to be a Mac clone. It's not that at all. It's just they're
trying to make a great UI and a great environment. It's one of my favorites. Sorry, now that I said
all that, do you like it? I do like it. I don't know when it finally comes time to upgrade to
a new tower. It would probably be either elementary or pop. I think it would be if I
buy a Dell tower, it will be elementary because I don't love stock Ubuntu at the moment, even though
pop is very close to it. And if I buy a 76 one, I will be lazy and just keep pop. The thing about
elementary OS is just I love its terminal. They have the best notification system on desktop Linux
and they're building this really complete guide for developers to follow to create applications
for the platform. Then they have the app center where they have a monetized system where it's pay
what you want. So developers can actually get paid for creating these applications.
And there's some neat ones in there that are unique and specific in a way. There's other ways
to get them. But in a sense, if you want the complete experience, they're unique to that
distro. And it's so solid. They have this release approach where it's not date based, it's open bug
based. And they just burn through all the issues until they have them sufficiently closed. And then
that's when the next release gets cut. And I think that's why it's been so reliable for my son. He's
been on it for almost three years now. The same install, my son on the same install, doing updates,
installing Minecraft software. And it has been rock solid for him. And if you like GTK applications,
which are gorgeous, it's a great way to run GTK applications on a desktop that is better
architected than Gnome 3 Shell is. Anyways, that's my end of my pitch. I just think it's one I've
been wanting you to try for a long time, but I just haven't been wanting. If you've been happy
with pop or stock Ubuntu, I didn't want to push. Because you can go crazy hop in distros.
Distro hopping. Well, I will say that my distro hopping days are probably done.
Yeah, good. And I think we are going to be in a situation of, as long as I'm like,
frogging around with this machine, it'll be elementary. And then whatever the, don't call
it a Mac Pro alternative machine ends up being, will probably be by their pop or elementary.
I can't see myself using stock Ubuntu at this point. Okay, so going back to Visual Studio
App Center and code signing for iOS. So you get it signed and built once on a Mac. And then from
then on, you use the App Center to do the deployments to the store and to actually build
and sign it? Can you explain? This doesn't make sense to me. Right, but it's not just
deployments to the store either. You can also use the App Center to, how can I put this,
to do hockey app or test flight deployments to let's say customers or testers or anything like
that. Which is kind of a big deal because it also can handle collecting the customer's UUID for
their iPhones, which if you're using a hockey app is a tremendous pain in the ass. This has got to
be pretty enticing to you. Are you giving this serious consideration? Yeah, I'm giving us some
thought. And the reason being, one thing I've been considering doing for a while now is automated
testing out of GitLab. So basically you would merge a branch, pull it somehow, create a binary,
and run a bunch of automated UI tests and other kinds of just basically scripted tests. And
that's always been something that's relatively easy on the web and incredibly annoying on mobile
just because of the whole Mike's machine ends up being the build machine. And if Mike is busy,
he doesn't want to sit there and run tests. So yeah, this is a, it's kind of a big change.
One, because you don't need to lug around a MacBook. And I think even though the idea of
just having a Mac mini somewhere hooked to a router was attractive, I think ultimately having
this in the cloud is going to be more convenient. And the case of tests that I'm thinking of running
are fairly easy to automate. Things like, are you missing assets? Are elements on the screen
not lined up correctly? Things like that. Obviously Crashers and your basic heartbeat tests.
But again, doing that manually is super time consuming. And I can already see the snarky
YouTube comments coming, Mike discovers TDD. No, this is the stitching together of a new,
I hate to use the term, but new cloud-based pipeline that, I mean, this is something Microsoft
I think is just at the beginning of doing. What we are seeing today is going to be so more advanced
by 2025. It's going to be obvious by that point. But if you look at how quick Microsoft is moving
on their integration with GitHub, I've never really seen this company move this fast. Just
as an example, if you go to docs.microsoft.com, now the entire comment system has been replaced
with GitHub comments. You sign in with your GitHub account, and then they have open issues
and closed issues in the comment section. They are integrating this stuff into Microsoft's pipeline
very, very quickly. And there's going to be a clear future where it's all connected together
very easily. And they're there now, but I mean, by 2025, this is going to be one of the tightest
pipelines and developer resources out there. This is going to be great. And I could see why it'd be
enticing now, even where they're just getting started. And here's the other crazy thing,
and this wouldn't necessarily work for you because you don't want a Windows desktop,
but this week Microsoft also announced Surface All Access, which is $24.99 a month for a Surface.
And so it's Surface as a service, and they're actually going to be, I think, probably looking
at it, that's how they're going to account for it as a service. So you get a book, you choose your
favorite bundle, there's different bundles to pick from, and of course, they will change the price.
So the price can go up to $150 per month if you wanted to say, get the Surface Studio iMac
replacement, that'd be 150 bucks a month. Or if you wanted like the Surface laptop bundle,
it's 46 bucks a month. But along with that, you get Dell support for some reason, Dell preferred
supports, like Dell's top class support, and you get a subscription to Office 365. And you could
see how they could easily spin this out in a developer's program, where you could also get
access to Azure or certain aspects of Azure or access to the pipeline of some particular use.
This is, to me, the perfect solution if I was working in this ecosystem. I'm actually a pretty
big fan of the iPhone upgrade program, because the iPhone is just as useful as, actually,
it's more useful than most of my computers. And so it's something that I'm interested in keeping
up to date. And I also am interested in getting a new camera, because there's lots of uses for that.
And so for me, it's actually pretty good as a subscription. And my laptop hardware and your
laptop hardware also tends to get replaced about once a year, or for you, if you want to get a
new camera, about once a year, or for you, even twice or three times a year, or four times a year.
And so when you bundle these things with this top tier support warranty, and they'll replace it if
you damage it, and you can get a new one when they release a new one, and you get bundled access to
some of the services you might be using already in the cloud, they've got a really competitive
offering for developers who don't have a ton of capital, who can't drop $3,000 on high-end
hardware, but can afford $35 a month. Of course, a lot of people listening are going to go,
oh my God, don't do that. You're financing a laptop. It's depreciating every day.
But for some people, that is an arrangement that works. And when they have the ability now
to bring all of this stuff together, Azure, and GitHub, and Surface as a Service, that's easy to
say, that's a pretty competitive offering, especially since the Surface hardware, from all
of that, is pretty decent. I don't know, man. Microsoft is just at the starting gates right now.
So not to jump back too far, but to our conversation about the Windows subsystem for
Linux, one of the more common things I'm seeing these students do is they're writing Python on
Windows, which just blows my mind. Yeah, it's a thing.
And like, yeah, it's creepy how good the iOS Apple development tools are from Microsoft.
Yeah. And I'm running them on Linux.
That is a funny thing. It's worth just spending a moment with, because it's
not how things used to be. See, it is something to reflect on and go, wow, holy shit. This is
really something. They really have moved so fast for a company their size, this is extremely
nimble movement. It doesn't seem like it from the outside, but some of these things have been in
development for years, like five-year timelines. And so they're moving. Wow. Well, so I guess
this would probably be a good time to start talking about QA in general, your testing of
the testing, because you've had some, let's say, on-again, off-again experiences in this area in
the past? Yeah, so longtime listeners will know that I've drank and then thrown up the
Kool-Aid on the automated testing more than once. So this is going to be a unpopular, not cool hip
perspective on this problem. Ooh, those are my favorite.
I do not believe that there is actually a virtue in having 100% test coverage.
Okay. Because it's just not that hard to test certain things with the power of vision. And
I also don't believe, as some people have wrote lengthy blogs about, that you can basically
eliminate human testers via automated testing. Oh yeah.
I also remember, Chris, let's talk about the late 90s for a moment, the early 2000s.
There used to be entire teams of QA testers at companies.
Oh yeah. Oh yeah.
Yeah. Yeah. And now a team that builds an app is like two or three people, right? So it's-
Yeah. I would say in some cases, the QA was one of the large areas, not larger than support,
but there were more QA testers than there were developers. That's for sure.
Oh, for sure. Right. And the QA people, it was a really formalized process. I don't know how deep
you went into it, but they had binders of QA scripts you had to follow. Yeah. And the best
ones, there was usually someone there who was very persnickety about following the process.
We have to follow the process. And because I was there as PC support, if something was preventing
the process from going in its order, it was no good. And that was a big deal. And this room I'm
talking about, for a company that had, I mean, three or four developers plus a contractor and
maybe two contractors, they had a dozen QA in this one business that I was a contractor for,
for two years. And the entire time, the QA department was an area they kept staffed.
It was a bit challenging to keep it staffed though. That's for sure. A lot of turnover.
Well, that was the thing though, right? The QA department was basically the stepping stone to
becoming a programmer developer at a company. And this was, geez, that had been going on since the
dawn of the industry, I think. I mean, these of us is old enough. Yeah. You look back at projects
and the way they're structured, there was generally, I think a huge, well, comparatively to
now, a huge commitment to QA that I guess to now just seems crazy. It seems like a huge staff cost
that nobody would ever do. Well, that's the thing. I kind of think you do need QA.
I've thought this for a long time, as we know. And I, again, get your YouTube comments ready.
I actually questioned the wisdom of having developers be QA and having yourself rely
completely, and I said completely, on automated, let's say, TDD testing. And we'll get into that
because all different kinds of testing you could be doing in terms of automated testing.
Because I would love to hear from anyone in the audience who works somewhere or has done
a project themselves where it was never necessary to just run the app or whatever it is on an actual
device and physically walk through the different screens or different user flows, regardless of how
much automated testing you do or don't have. So the premise I'm rejecting is that I do not believe,
again, I do not believe 100% test coverage will necessarily pay for itself.
Let me see if I'm following you. Number one, it's hard to be your own editor. You write up
something and you have somebody else read it and they'll have tons of editing suggestions.
It's UI design is a lot like that. It's easy to overlook things that are just natural to you
because you understand how it all works. So having somebody with a user's perspective and a clean,
fresh perspective can catch things that would otherwise just have seemed obvious to you.
So there's that aspect of it that I think you're trying to get at. But the other thing about it is
100% automated testing would really require dedicated time to build new testing settings
and systems all the time. But you think about what it would require to be able to fully automate
all of that. It would either be a massive amount of pre-planning and an incredible amount of
organization required to do it right, or it'd have to be an evolving thing that you're calling
constantly adjusting and changing, which would be a big attention and time suck. So it seems like
there's a balance there that you're saying maybe could be struck that it is worth having automated
testing, but there is a balance where you will become consumed by managing the automated testing
system. Am I following? Yeah, I would also argue that it's not just the cost of automating the
test system. There's an economic thing where QA testers are generally junior and inexpensive,
and intermediate to senior devs are generally going to be your highest cost, which means you're
probably going to be very incentivized to try to build that time if you're in a type of business
like I am. Okay. I'm not convinced that that is actually providing real value. Again,
I'm not convinced that 100% coverage. I am not asserting that automated tests don't make sense
at all. In fact, I think they do make sense. I just don't think being religious about 100%
coverage is ultimately worthwhile. Yeah, I'm not going to argue that. I agree.
Yeah. Well, it is kind of the whole position. I've been dipping my little toe back into this pool,
and there's some very strange binary thing that's happening.
My question to people has been, okay, so how much automated testing are you doing? We're doing some,
but we're not writing tests to make sure the title of the page in iOS is correct,
because we can just look. What I'm getting, particularly in developer forms, is just
you're not doing testing unless you have 100% coverage.
Which seems, that's like saying you're not using Linux unless you're completely false or GPO.
Yeah, it's almost getting to a religious degree. It's a belief system. You will test.
And then there's, if those are the RMSs, there's the, I don't know how you go past RMS, but
there's the people who say you have to write your tests first.
Right. Which sounds like complete madness to me.
You know, I have been involved in a couple of conversations where the room of people that were
building the thing, all of them seem to have collective buy-in on the idea that they could
push it through a completely automated test system, a 100% automated test.
And I never saw it completely work. It's funny, F-R-R-O-L in the chat room says,
it's the 80-20 rule. 80% of use comes from 20% of the tests. And I would say that was the
experience I walked away from, mainly from one particular group where I was involved in the
conversation where I saw them concoct the idea. But I've also observed it from several, actually
from several open source projects as well as clients, now that I think about it, where this
mentality has crept in. And generally, I've seen it work. I've seen it work.
As well as clients, now that I think about it, where this mentality has crept in and generally
seems to have just become a never-ending quest. And I really, in my personal experience,
it was about 20% of the tests. And they were the obvious ones that, of course,
you'd want to check for, watch for regressions, make sure the damn thing doesn't crash,
that kind of stuff. Well, it's like anything,
the way I've taken it so far is like your mission-critical business logic,
which in the type of software I tend to be writing now, is like transmitting data,
doing calculation, doing conversions from like annoyingly small binary formats from the 80s.
But that's all stuff that's easy to test because you can have a test script that like
has a known input that you know what the output should be and just simply
write a test that puts the input in and make sure as you get the correct output.
But anything, I can give you a great example. I was talking to someone who was like testing
CSS, which not only did I think was not possible, seems kind of crazy.
Because how do you actually accomplish that?
How do robots pick music? It's a design thing. It's a look and feel thing.
And the answer to this question, by the way, is he went through extraordinary efforts to
make that happen. And even then, I would argue, and the argument I did make to him was that I
think your whole setup here is going to be super fragile. Like what happens if a browser, let's
not call it Chrome, decides they want to change something, then do all your tests immediately
fail? And his answer was probably. Yeah. And then back to work. That is exactly the thing.
It's a rat race. What's the expression? You're chasing, you're following the leader constantly
with that kind of testing. I strongly believe, and I should save this for a predictions episode,
but I strongly believe when I was talking about Microsoft, now they're just getting started,
this is an area they're going to expand on. And it's going to be one of those things that when
you're all in and you're all connected up to their stuff, it's going to be extremely enticing to use
because they'll automate a ton of this stuff. This is the next big area. I have heard a couple of
open source projects that are thinking about building a service like this that is a full QA
platform. And there are ones out there, but if a company like Microsoft could bring it all together
with Azure and the ability to spin up virtual machines and test all kinds of applications
from desktop applications all the way up to remote services and the full range, they could take it
right from GitHub, they could build it, they could test it, and then they could go to the App Center
and they could create the builds for iOS for you. The whole pipeline is there. There's just a few
pieces they need to do some of the additional testing and to really make it easy to build those
tests for the developers, to make that super accessible. There has to be work done there.
But you know that's got to be a direction they're going to go in. So maybe this is my preemptive
2019, end of 2019, 2020 prediction. Yeah, I would even piggyback on that. You know, now that I'm
exploring this again for mobile apps, there is like a very common set of tests I would argue
that you need for just about every iOS and Android app if you're going to do this. Why can't when I
load up a built app center, Microsoft just simply say, hey, we have this suite of tests that we
recommend you let us run and don't worry, you don't have to do anything. You know, so last week,
Google announced that when you deploy a container on Google Cloud, any kind of like Docker container
or anything like that, their system will now begin to analyze the system files and look at it to make
sure there's no like Monero crypto miner in there. They're initiating a set of QA checks already for
deployments on Google Cloud. And if you think about it, behind the scenes, they're already doing
tons of QA stuff when you spin up a machine scripts that check to make sure services available.
It is just going to be an expansion of that to a degree like internally for them. They probably
already have infrastructure they can build on to make these services possible. And that's exactly
even if it just starts at does it crash? Does the UI load? Could they perhaps maybe even simulate
network conditions, create a simulated cellular network, create simulated degradation and packet
loss? I think they could. And they could probably do it very simply compared to what you have to do
to try to simulate that same thing on actual hardware. Of course, I guess they'd be a simulator.
Anyways, I'm getting ahead of myself, but I think it's obvious where they're going to go. And it's
going to be really interesting to see if that happens. How does the developer market react?
And how much are they willing to shift to a Microsoft based tool chain? And maybe they're
like you and they're doing that from Linux or they're doing it from Windows 10, or maybe even a
Mac or God forbid, a Chromebook. And no, no, no, I don't do that. And Microsoft's acquisition of
GitHub was just you think about it was pretty clever. Yeah, and also a little scary, but yeah,
it's going to be you know what else is. OK, so just like off the top of your head, you got to
answer quick. Don't think about it. So get ready. What company is scarier, Microsoft or Amazon?
Amazon. Yeah, 100% right? Like 100% way. So I would rather like put all my stuff on Microsoft.
Yeah, oh, for sure. Yeah. When it comes to like data storage and stuff. So I know what Microsoft
wants, right? Yeah, I, I have been trying to make a case for a while on the show and I don't think
I've gotten a lot of traction. But I'm going to bring it up one more time. I think there is gold
in them, their hills of the echo. And the the different types of use cases that you're going to
use now for the echo, I think expand the options for developers to create skills that eventually
can be monetized. And this is not a commercial. I actually have really kind of stopped using. I
have one here in the studio, but kind of stopped using echo tube. So I'm not I'm not here to sell.
This is just my personal opinion. They just launched, I think a couple of weeks ago, a dozen
different types of echoes. You've all heard about the microwave one. There's even the Billy, the
bass, that rubber bass that sings on the wall. They've even made it. Are you kidding me? 100%
serious. There's now an echo in that thing. Yeah, they made an echo of God. And the thing the worst
two products together and the lips move with the voice of the bass. Yeah, they've they've done that.
But they've also done a couple other really neat ones, including a much better video version one,
but one that's built into a clock, like a wall clock. I think that's pretty clever. And they're
also now testing one that goes in the car, which I've experimented with back when I just I just
brought a my fi and a device with me. And I just tried to have the echo in the car just to see what
that'd be like. And I think they are going to just hit this harder than Google or Apple can,
because this is Amazon putting a store in your home. And it ties in with the security products
that they've also announced. So all the devices work together, the echoes go into monitoring mode
when you when you when you set your house alarm. And of course, they can tie it in with deliveries
and down the road to tie in with other services that they launched like groceries. So the grocery
delivery will come and the system will recognize them. This is a massive importance for Amazon,
way beyond anything that Apple or Google can appreciate. Google obviously is a close number two
with search and all the services that voice commands tie in with obviously, but I think for
Amazon, this is better than opening a store in every town. This is opening a store in every home.
And I I watched now as they continue to expand their developer monetization program, where if
you get a successful skill, they're watching and they're starting to cut people checks. That's not
a sustainable system, but I think that is an indicator that Amazon intends for this to be a
way for people to make money. And until all of the pieces are in place, writing checks is how
they're doing it. There are other ways of tying in with services. It's a great way to sell services,
especially if you have or if you're already creating like audio content that would work
really well on the echo. So there's other ways to monetize, but I feel like there are golden in
their hills and for for Amazon, they're expanding this thing and it just is just very competitively.
They've announced a bunch of different devices. Did I did I did I get did I reach you at all with
that pitch? I mean, you reach me with the pitch every time, but then there's the problem of you
only get paid if Uncle Jeff decides to send you a check. Well, it's not necessarily like I'd be
willing to pay to have somebody create a really comprehensive skill for Jupiter broadcasting.
Like there you could come to me with a certain like quote and I you know, I'd be like, okay,
that's what we're talking about. Actually, like so there like there's there's several ways to monetize
this. If you look at all of the podcasts that are out there, all the radio stations, everybody wants
you to be able to call up their thing on it on a scale. There's even an angle for you with the
mad botter. You could have you could have mad botter tips and things like that that are pre
recorded sessions that you've done, maybe 1520 MP3 files that sit on a droplet. And then when
somebody says, hey, echo, give me a mad botter tip, it plays one of your tips. I'm just, you know,
obviously that'd be a weird example. But there is I think there's more use cases than people realize
because not a lot of people have these. And once you get them, you realize there's a lot of
potential. All right. It's actually not the worst idea ever. You know, I mean, there's a lot of
businesses that would like I could even see Linux Academy would want something like this like a
like a you know, a Linux Academy educational tip. Like there's a lot of use cases here. Wait, I've
got it. Hey, big mouth Billy bass. Yeah. Play Jupiter broadcast Linux Academy. Yeah. Say I did
it again. No, no. It's podcasts are still labeled as Jupiter broadcast. So I don't know what we'll
do there. Eventually I might change it. It seems like Linux Academy is a stronger brand with larger
industry recognition. But the podcast could be like the premium podcasts from Linux Academy. Yeah,
we're a premium brand. We're pretty. Yeah. I mean, I really want to believe in it. Right. This is a
okay. Like, so I have to confess, I have written an Alexa skill. And because uncle Jeff makes it
so easy to just automatically create a skill with AWS Lambda. It is really, really easy to get sucked
back into the AWS ecosystem. Yes. Oh, for sure. Yeah. Like it's shocking. Like what they have done
is I could make a skill. I can make a skill with my son. Like you can sit down and they have a lot
of different systems now that make it like click and drag even. Yeah. Yeah. Yeah. Yeah. Yeah. Yeah.
And drag even. Yeah. I mean, I did it before that when you had to like coding like node,
but you could, you didn't have to care, right? You could just do it in a Lambda and just basically
write your functions that respond to certain things. Um, and you have to have like a default,
you know, sorry, I don't understand you kind of function. I just don't know.
See, I guess I don't know other than like making skills for other people.
Yeah. Um, I, I think in, I think in your space, content creation,
particularly audio content, it's awesome. Right. I think that makes a ton of sense,
but how far could, how, how much would a different kind of business really be willing to invest in
Alexa skill? Yeah. You know, it's, I think the that's funny. I think, uh, F R O L in the chat
room nailed it is this is what I've been feeling is where my angst on this comes from is if
developers don't start making these things better, I don't think they're taken off. I mean, more than
they really have, but he writes in the chat room, he says, are those tubes like tablet several years
ago? Promising, but not flying. Well, I'm still, yeah, I kind of feel like I'll give, I give the
home pod, uh, a, a special mention here because it went from really basic course. You will, of course
I did. It went from really basic. In fact, in its core, it is still very basic, but holy hell,
the shortcuts work with the home pod. Holy hell, man. Like I, you know, I'm listening to a show
all the way home. I get home, I walk in the RV, I say, Hey, home pod resume overcast. And
the things were never on the same network. They were never talking until I obviously got home
and it just on the home pod. Now it just immediately resumes playing my podcast exactly
where I was now on the nice audio of the home pod. I also had to do was turn that macro or I'm sorry,
shortcut on, on my iPhone some point a couple of days ago and that crap just works. So now I'm,
I've got, okay, okay. You ready for this? This is, this is some real crap here. This is so,
I take a drink before you tell me. Yeah. Yeah. Cause you're gonna, now this is not as applicable
to you because your home does not go down the road, but you, this would work well if you had
your phone in your car, but this is particularly applicable to me because we go down the road and
we actually listen to our music on the home pod because it's louder than the RV is built in
stereo system, which is not what do you do when we're driving the RV? We have the home pod plugged
in still. We have, we have electricity in the RV when we're driving and we actually listen to our
music and our podcasts on the home pod because it's louder than the RV stereo system. So I mentioned
this just for context. So you'll understand why this skill is pretty important. So this is a
shortcut that I have. I wasn't, it wasn't my idea, but I definitely built it. So if I say,
Hey, home pod, I'm getting pulled over. It pauses the music or the podcast. It turns on,
do not disturb on all of my iOS devices. It turns off their brightness on my phone.
It gets the current location. It sends that to my fiance Hadia and it tells her I'm currently
getting pulled over. This is my current location. While my screen is off on my iPhone,
it turns on the front facing camera in high quality mode, saves that to a photo album.
And also then sends it to me in a message when everything's done. And then when I tell it,
everything's done and we're over, it takes me out of do not disturb mode, turns my brightness back
on. And it saves, uh, that video that it recorded to iCloud and Dropbox.
So the whole pod went from really basic to now I can do some super fancy stuff.
And that same command works on my iPhone too. So I can use it while I'm driving in the car.
So, you know, I'm amazed there's not a commercial with that feature because that actually, no,
seriously that I was completely unaware. It could control your other devices like that. That's now,
is that a third party developer or is that a integrated? That's a shortcut. It's a shortcut
and you just have to have, so it has to be a setting that you can change via iCloud. Um,
yeah. And it's pretty cool. And it's, it's a, you can, if you search for it in the shortcuts gallery,
there's one that I use as a template. It's something it's called police. So I changed
mine to I'm getting pulled over because that's the command. I just, that's stuck in my head
because that's what I'm thinking when I'm getting pulled over, right? What else are you going to
think? And just even having it silence and turn off screen brightness. Oh, that's really cool.
And so the cop doesn't think you're like texting while driving. Right. Um, and so I think these
personal assistants shouldn't be called personal assistants cause I don't know what the hell is
personal about them. It really drives me crazy that you can't, I think there's a feature that
would put an echo on every single business person's desk. Every desk in the United States
would have an echo on it. If they could come up with a couple of real actual personal assistance
features. If, when you and I need to reschedule the show, I could say, Hey, echo schedule a
recording with Mike on Thursday or Friday. And then it would never talk to you. It would never
bother you. It would never send you a message. It would contact your echo or some intermediary API,
some service. It would check your calendar. You'd see what time you have available and
match it up with the time that I have available. And it would set a mutual meeting, then notify us.
And maybe that notification would come via the echo or something that shows up on your phone or
just a regular old calendar invite and it would be done. And we wouldn't have to have this back
and forth in Slack. It would all just happen because these personal assistants did that.
And there's a lot of stuff like that. Like why can't I ask this thing to send a grocery list
somewhere? You can create lists, but then you have to open up another app. Like they're not
personal assistants. They're automation devices. And if you think of them as that,
then I think they're a little more useful. So this is where I think the problem is,
right? So if I wanted to develop some cool automation software for just, let's just say,
the echo, right? I would definitely do it specifically for Big Mouth Billy Bass though.
Because of all these stupid walled gardens, like these stupid barriers to like,
I am completely sure that there's all kinds of ways that integrating with the HomePod sucks if
you are not like a native iOS app. Yeah. And perhaps my Apple, like all that stuff
doesn't work if my phone's not on the land. Right. So it would be great. Let's just,
cause the ideal architecture would probably be you write some software that runs on a server.
Could be a DO droplet. You then have these different endpoints. One could be for,
you know, assistants such as Siri and echo. The other could be just like, almost like how the
Android instant apps kind of work, which is like renders down a page. Hell, it could just be a
webpage for mobile devices. And that, I mean, this is how Slack bots and bots in general work. And
the other would be just a JSON endpoint for, you know, your slacks, your Microsoft teams,
hip chats. But Apple won't allow it. Google has their own hangups about Google assistant. Although
I think it's funny that no one who talks about this stuff really talks about Google assistant
too much, which is interesting to me. Yeah. And Amazon, I think is actually the most flexible
for developers here. Yes.
But no one wants, with good reason, none of the other companies want to be in bed with Jeff Bezos.
I hear he's a selfish lover. So I, like, I love it. The use case you gave is great. Like that is
my ideal. I could just say, you know, Hey, Java Duke. And if you get the reference, you're old,
go, I don't know, tell you what happens all the time, right? I'm coming back from Orlando or
something and I'm stuck on I4. Just the same case, right? Tell Chris, I'm going to be 20 minutes late.
That can be a shortcut now. You know, that, that is the thing is if you're on iOS.
If I have a native iOS app, if I have a home pod, you're asking a lot of buy-in.
I know. I know. And the thing is, is at different times, not necessarily the most competitive,
you know, like tech def without question, the echo can do more, especially when you
consider the skills in the ecosystem. And so in a lot of ways, Google assistant is better
contextual conversations than any of the assistants are. And it in a way can do with it. Yeah. Yeah.
Yeah. It's to me, it's just either, I think it's either, I don't know, it feels like they're almost
going to be successful just because they play music and you can tell them to skip songs and
turn things up and down. Like that is the minimum viable product of all of these speakers. And
because the costs are coming down, they're all just getting smart anyways. And so this ecosystem
is sort of building on the momentum of people wanting decent sounding speakers that they can
control easily. And okay, if I can set a timer, that's kind of handy too while I'm cooking,
like that's the momentum that these things are running on, not all of their fancy AI and assistant
stuff, but we will reach a point where they're just ambient. They're everywhere. I mean,
if you think about a household that has a couple of iOS devices and iPad and iPhone and a watch or
a home pod, that's a lot of Siri mics everywhere in the house. If you think about a place that has
a couple of echo dots, it's a lot of Alexa mic, uh, cancel, sorry. That's a lot of-
The panacea dream come true.
It really is. Ooh, yeah. And so then there is all of a sudden by the very nature, a market.
And over time that market will start to get more sophisticated. I think,
I think, I think, I don't know. We'll see. It's, they seem to be selling a crap ton of them.
All three, Amazon, Google, and, and, uh, and, uh, Apple. But the only one that doesn't seem
to be selling that super well that I've seen is the Cortana one. But even Microsoft's in the game,
that's the one nobody ever talks about.
Microsoft is actually, uh, integrating Cortana on the Xbox with Alexa.
Yeah. That's actually, I don't know if you're joking,
but that is actually something they're doing is you can-
No, I'm not joking. Yeah, yeah, no. They, yeah.
That's so weird. All right. Well, we, I know people hate it when we talk LadyTube,
so we should probably wrap it up there. But I just still think it's,
you look at the last couple of weeks, uh, and now with iOS 12 and the HomePod, you have,
you have some incredible capabilities all of a sudden overnight that the HomePod could do.
And, uh, Google Assistant is going to be calling people and scheduling. You know,
if anybody's going to get there, it's going to be Google with that scheduling thing that I want.
It's going to be over the phone though. It's going to call people and be a robot talking to
them and just get stuff scheduled that way. Hello, Dave. I would like a dinner reservation.
Yeah. Well, Mr. Dominic, is there anything you want to mention or plug or any links to
send people to before we get out of here? Uh, go check out themadbotter.com. And as
always, if you want to run some C-Sharp on Linux, I'm your man.
There you go. That feels dirty every time.
I don't know, man. It's going to get more and more popular, more and more in demand.
All right. Well, we'll wrap it up there. I'm at chrislas. Grab the links we talked to
about those kinds of things at coder.show. Also our contact page. We want your emails,
your questions, even your corrections coder.show slash contact. That's the official place to get
our attention. And then there's that subreddit coderradio.reddit.com. Thanks so much for tuning
into this week's episode of the Coder Radio program. And we'll see you right back here next
week.

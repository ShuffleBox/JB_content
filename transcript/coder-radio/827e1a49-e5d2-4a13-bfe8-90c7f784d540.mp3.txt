This is Koto Radio, episode 313 for June 14th, 2018.
Welcome to Koto Radio, Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and business of software development and its related technologies. This episode
is brought to you by our two fine sponsors, Digital Ocean and Linux Academy. I'll tell
you more about those sponsors as this show goes on, but our host, our host is established
in the stormy bayous of Florida. It's Mr. Dominic. Hello, Mike.
Greetings from Thor's apartment. Yeah, it really is the hammer of thunder
over there. You might hear a little bit in the background from time to time. Apparently,
it's the apocalypse in Florida. Are you going to be okay? Are you going to survive this?
If I don't, I'll get eaten by alligators, so it's very green, very ecologically efficient.
Yeah, it is the circle of life. Well, Mr. Dominic, we have a great show, so we're going
to get to our traditional follow-up and feedback, and then later on in the show, the CEO of
GitLab is going to join us. Sid Brande will come on and he'll talk about GitLab and what
they're doing and some new things that are in the work. I think it's going to be a fascinating
chat in light of recent news, but before we go, there's some things that I have to give
Mike a hard time about. Some traditional follow-up here on the show, and probably to keep things
continuous, continuity, I suppose, we should start with a follow-up on last week's episode
where Mr. Dominic had a strong reaction to Apple's WWDC, but you had a chance to sit
down, read some of the docs, and burn everything to the ground.
Yeah, I still think the videos are terrible. I just want to put that front and center,
but what I was impressed with when I actually got to look at some of the session videos
and the docs really was ARKit 2, and I don't know if I'm impressed with Metal. I find it
intriguing that they're deprecating OpenGL in favor of Metal. Did you catch that little
bit there?
Oh yeah, I did. Oh yeah, I caught that. I definitely caught that. Yeah, I'm really torn
on that because Metal does seem like it lets people, developers, accomplish some really
great stuff, but at the cost of industry standardization.
Right, which is weird because they're really doing all they can to make Swift not an Apple
language, right? It's an open source standard, but on the graphics side, Metal is completely
proprietary.
Yeah. OpenGL never has been great on the Mac platform.
Is that Apple's fault, or? Yes, it is actually. Never mind.
I think so. It's hard to say, but yeah. So, Metal aside, ARKit, yeah, I think actually
the Mac got some of the best stuff in this last round. There's no good Mac hardware,
but that's a separate issue.
That's a separate issue. I mean, I actually updated my MacBook Pro to Mojave, which you
have to say with the little...
Oh, you did? Really? You really rolled the dice, huh?
I rolled the dice. Dark mode looks terrible on apps that aren't ready for it, shocker,
but the updates to Xcode are really, really nice, particularly if you are in any way an
Xcode user. Check out the session video for LLDB and new debugging tools. There's a lot
of just cool stuff added to Xcode. Now, if you've ever used a JetBrains IDE or Visual
Studio proper, you'll be like, okay, so this is features that they should have had years
ago, but the fact that they have them now is really good. In particular, just the command
line interface on the console in Xcode is just awesome. It's really catching up. I understand
from the technical session what they're doing with the whole machine learning and kind of
the machine learning. Remember we talked about the machine learning on the iMac Pro potentially
using Swift to train your models. I now get what they mean that for. You are not going
to build a giant backend service that's like an AI assistant. What you might build though
is like a little help, like a help function or some other kind of tangential or additional
functionality into an app on an Apple platform. If that's all you're doing, if machine learning
and AI, and I'm starting to hate the term machine learning because apparently everything
is machine learning now, this is a not so painful path, except for the big thing that
I know Chris is going to jump all over. The hardware is just, you would not do this, right?
You would not generally want to train machine learning models on any of the common Mac hardware
today. I mean, maybe an iMac Pro, sure.
And you wouldn't really expect the story to be, we'll use an eGPU. Oh, and yeah, we'll
get Nvidia. We'll get Nvidia working in there, but for now just use an eGPU. That's not really
the answer. And the answer also can't be buy an iMac Pro. And the thing is the iMac Pro
is now damn near 200 days old. So even their newest machine is old. That is not competitive.
And so they want to get into this VR, AR, they want to get into machine learning. They
want people to look at Mac OS Mojave as a professional workstation. They got to close
the gap on the hardware. They got to fix the MacBook keyboard and they got to get newer
cost-effective machines out that developers can start to experiment with. They almost
have to go back a little bit to their roots when they were trying to convince developers
to come over to the Mac again.
And so the reason why I thought WWDC was decent is because I could see the groundwork. I could
see the software groundwork being laid. I don't see any hardware suggestions or hints,
but that's not necessarily indicative of anything. But that's why I thought it doesn't really
impact my day-to-day life. Not going to change how I do work, but if I use the Mac platform
and iOS to an extent, because their automation stuff with their workflow version of shortcuts
I think is powerful. So if I followed that platform closely or was looking forward to
improvements to that platform, I would consider I got something, at least a value out of WWDC.
If they don't answer it though with the hardware component soon, it's still half the story.
Yeah, I would even add too that if you're not like a graphics development person, which
I am not though I'm having to learn more Metal than I would like, Metal is actually kind
of the unsung hero of this WWDC, I think, when you look at the technical docs. For instance,
core animation, which is, if you don't know, it's a high-level framework. Basically a common
pattern let's say would be, you know, animation with duration, blah blah blah, here's a C
block with your animation. That's obviously the Objective-C syntax. What would happen
in the past is that would be a core animation call, which would call into the core animation
API, which in turn would actually call into OpenGL for you. So you needed no knowledge
of OpenGL, right? Just like Grand Central Dispatch.
Don't worry about that. Don't worry about that.
Right. It's an abstraction, right? Just like Grand Central Dispatch is and was an abstraction
over threading, core animation is now not calling into OpenGL, is my understanding.
It's calling directly into Metal, which does seem to have some significant performance
increases. I think going forward, particularly if you're looking at AR solutions, the investment
of learning Metal, which is a pretty, I've been doing some research into it, thick and
juicy piece of API, is probably going to pay off big time. And of course there was a little
carrot for me that I didn't know about it.
Oh, what was it?
This to God's one true programming language.
Oh, really? Objective-C got some-
Objective-C has quietly been getting improvements. I love it.
Really? That's good. You know what? That must be because there's still some diehards in
Apple that are using it, right?
There's got to be one guy like me saying, I don't care. What's that Swift for? Get it
out of here.
I love it. You know what? Maybe it was a birthday present to you because rumor has it you and
Donald Trump share similar birthday weeks. So happy birthday, Mr. Trump.
Yeah, mine was yesterday.
Yeah, and Trump's is today. So you and Donald get together, have a little birthday party
this weekend and Apple gave you a gift and that was some modest improvement at Objective-C.
What was it in particular?
It's just some basically better interop with Swift, a few more. They've been getting it
the whole time, but yeah, I know. A lot of it has to do with interoping with Swift and
being able to not be completely foreign. I mean, the reality of the situation is if you're
starting a new iOS app, you probably should just do it in Swift. Although there was a
great post I read and I completely agree and we should have put it in the show notes, but
I forgot where Objective-C is the one true programming language. And my favorite part
compared to Swift is that I didn't have to write this post. So see, I'm not the only
one.
Yeah. Speaking of people that are writing posts for us, just kind of gingerly related
to what we were just talking about. Rogue, Amoeba, long time, really high quality Apple
software developers that have made third party apps for the Mac for ages have released a
post today called On the Sad State of Macintosh Hardware. And they basically lay it out there
that it's devastating to them that there is so much Mac hardware that's out of date that
they're seriously concerned as a Mac software shop. And if you look at the Mac Rumors Buying
Guide, every machine is essentially a don't buy with the exception of the iMac Pro, which
is marked as a neutral.
And just for-
It's a 5,000 plus dollar neutral.
Yeah. Yeah. And just for note, the Mac Mini today, 1,337 days old. That's how long ago
it was updated. The Mac Pro has been more than a year, 436 days. MacBook Pro, also more
than a year, 374 days. The MacBook Pro hasn't been updated for 374 days. And they say it's
very difficult to recommend the current crop of Macs to customers. And that's deeply worrisome
to us as a Mac based software company. For our internal needs, we've wound up purchasing
and used, we've wound up purchasing and used hardware for testing rather than optimizing
to compromise heavily on a new machine. This isn't good for Apple, nor is it what we want.
So I thought we should just mention that in the light of WWDC, there's still huge problems
and now it's the hardware stuff. And so that's the reality of that. And it's not just us
that's bitching about it. It's other people-
No, it really isn't. I mean, I was actually pretty surprised that they didn't, at least
like spec bump, at least the iMac Pro, thinking this is your one really viable contender to
say like the high end Dells and basically everybody else, right? HP has high end machines,
Dell has high end machines, but they didn't do it, like nothing. So it seems-
I was recently just shopping here because Linux Academy is putting it in an OBS system
and it's like, well, what do we use? What is the go to high end PC that's guaranteed
to work with Linux? And I run through all the usual suspects and there's different compromises
with each set. And we've reached a point now where the Mac isn't even a consideration.
Yeah. I mean, we're doing the show right now 100% on Linux, right? I'm on POP and you're
on-
Yeah.
What do you want still, KDE?
Kubuntu 1804, all the way, baby.
Yeah.
Rocking it on all the machines, all the machines we're routing through audio, all on Kubuntu
end to end. So yeah, that is speaking of remote, I am remote this week. I'm in Texas. I think
I mentioned I'm at Linux Academy. I'm just outside of the Fort Worth area. And I have
been exposed now pretty heavily this week to a company that believes pretty deeply in
remote work. I'd say about half their staff, maybe more, maybe as much as 60%, 70% of their
staff are remote at Linux Academy. And they've, for competitive reasons and all kinds of reasons,
including some people just work better that way. You and I have gone back on this, back
and forth on this because I've been working remote now since May 27th. I have been on
the road since May 27th doing all of the shows and doing all running the business remotely.
And then coming here to Linux Academy, this is my last stop before I start the long haul
home. And it's really given me perspective on this remote work thing. And so if it didn't
make me smile, I don't know what would, yesterday, Mr. Dominic tweets, at Chris LAS is going
to have a lot of fun making fun of me on the next code of radio because I've already given
up the onsite work thing. So Mr. Dominic, here we go. John Kerry of the remote work
flip floppers, flipping and flopping on the remote work. And I want to know what happened
because you were going all in. I mean, you had an office building you're going down with.
You had people there on site. You had an air conditioning machine making ticking noises
in the background. You were all in.
And people were clear that that won't be too common anymore. It's funny because I flip
flopped on this a few times and it's always for the same reasons, right? What occurred
to me in this latest adventure is that limiting yourself to one physical location creates
all kinds of weird logistical problems where being remote doesn't. And people really, especially
developers, really don't do their best work chained to a desk nine to five every day.
If that hasn't been an adjustment for me because I've been working at a desk setting up a machine
and I hear a lot of different conversations around me and I have really lost my ability
to tune that out.
Right. And, you know, the problems I thought I was solving by going on on site are actually
solved in a much perhaps more brutal way. Like if someone screws something up, you should
just fire them like immediate where, you know, remote because remote requires and I think
this is going to be something that some people are going to have a hard time with. It requires
a level of kind of self accountability and self management that maybe some folks don't
have. But the reality is someone who's like a bad dev is going to be a bad dev on site
or off site, right? There's no, no difference. And, and, and maintaining the site is just
expensive. Yes. Now it's one thing to have like a small space to have like an office
if you need to meet a client or, you know, whatever, but to every time you hire someone,
you need more desks, more, you know, obviously remote employees, you're still buying them
computers generally, but it's just like the, the ongoing process of growing becomes incredibly
costly with the space. And it, it doesn't seem, how can I put this?
It's not money spent on the core product in a way. It's not money spent well and the advantages
of having a centralized location, you know, I I'm in plant city, Florida right now, Tampa
or Orlando, Florida would be different to have an office, but the cost would be at least
double and that's just to be part of that community and whatever, but everything's more
expensive, right? It's like before we were in New Jersey, an office in Manhattan may
have been more beneficial, but like would have been like 10 times as much. Yeah. So
when you're small, uh, I've come to the realization that your main strength is actually a flexibility
and being tied down to one address is, is not flexible. It's not that go ahead.
No, I follow it. Go finish it up. Cause I follow what you're saying. It's like the being
a small, you have that dynamic flexibility. You can pivot, you can make drastic changes
and make big decisions, but when you add the cost of real estate or rent or just a contract,
it slows you down there.
Exactly. And you know, I still see an advantage in having a small space, um, that you can
meet a customer at, do an event at like we're actually a, I don't know if you know this
first, I tweeted this too, but you only get me on the gotcha tweets. Uh, the mad botters
now sponsoring the plant city software development meetup. So on the 21st after work, we're having
people over and we're catering coffee and a couple of, uh, treats there and in our office,
yeah, on the 21st, yeah. In our offices in plant city. So that should be, uh, yeah, the
Thursday, if that's 21st, 22nd, I'm not sure, uh, that is one use for a space, right? It's,
it's good to have, you know, if your team's still relatively local, you can have meetings.
But the other reality is like, I don't know if you know this, the economy is really good
right now and hiring people is like super hard. So saying you must work in plant city
Florida is not super effective.
Yeah. Okay. That's all fair. Um, what I've noticed that canonical and now Linux Academy
seem to do is they do seem to drop some cash on like large meetup events or summits or
sprints or whatever the companies happen to call them. And they, they bring people in
and have them work together for, for intense periods of time. Um, and then they go back
and go back and work remote and they seem to do that a few times a year. What are your
thoughts on something like that? Is that, is that feasible in a, in a, in a smaller
operation?
Well, I think the smaller you are, the more budget constrained you are. Um, I could see
a situation where you're renting like a shared office type of space or indeed doing what
I'm doing. You are keeping a, a small physical office. Um, then yeah, I can see that making
sense. You know, maybe once a quarter.
You know, we should ask our guests about this. So why don't we bring on Sid Sabrande? He
actually is a pretty, a pretty big advocate for remote work. And I'd be curious how they
do that at GitLab. So we'll get there, but let's, let's get Sid. So without further ado,
joining us on the line from GitLab co-founder and chief executive officer is Sid Sabrande.
Sid, welcome to the show.
Thanks for having me.
How'd I do on that pronunciation of the last name? I just kind of took a shot at it.
Good enough for me.
Well, thank you for being generous. I appreciate that. So Sid, we absolutely wanted, we've
actually been wanting to chat with you forever, uh, because Mike is a GitLab user as part
of his day-to-day business, but also, obviously thanks for that.
Thank you. Yeah. Yeah. It's actually, it's very popular with our audience. Um, and so
with the big news from Microsoft recently, we thought this would just be a great opportunity
to chat with you. Uh, and I, we were just talking about remote work and so I want to
get to there in a moment, but maybe we should just kind of back up a little bit. So GitLab
is famous for being an open core company. And I thought, I thought if I recall the first
time I'd ever seen you talk about it, I thought I recall you talking about GitLab as an open
source company. And then I noticed sort of a tone change to an open core company. So
would you, would you kind of explain how the GitLab model works for us?
Yeah, for sure. So GitLab started as an open source project by my co-founder Dimitri in
2011. And we, uh, uh, we built a company around it and we tried to finance that company in
different ways. Um, we tried, uh, donations, we tried consulting, we tried support contracts,
um, but it all wasn't sustainable. And all the while that the popularity of the open
source project was increasing. So there was more and more time going into release management,
performance updates, uh, bug fixes, all these things that you have to do. So we needed a
better model. So we settled on licensed software. We, uh, introduced GitLab enterprise edition,
which is paid and, uh, proprietary. And so we changed from saying we were open source
to open core. There's both an open source edition and a proprietary edition of GitLab.
And that's what we, uh, that's what open core means.
I see. Thank you. So the other off the wall question I had is, is it true, the rumors
that, uh, before you started GitLab, the relational submarine company, is that a true thing?
Yeah, it's a true thing. Uh, I was the first employee and, and, and incorporated a company
that still makes the most submarines every year.
No kidding. That is, that is the, that is the neatest little, like, I would love, I
didn't even know a personal submarine was something I could have. So it's, um, if you
want, you can have a trade over bowl, but it really is, is, uh, a bit expensive. It's
about $2 million. And, uh, most people that own it have a, a large boat to, uh, store
it on.
Sure, sure. Boy, I saw there's things to aspire to is what you're telling me. I, I like that.
So I, I guess, uh, also when I was digging through sort of your background, it looks
like, uh, you have some, or you used to, you used to at least have some love for, uh, Ruby.
Yeah, I used to be a Ruby on Rails developer.
Now, uh, I won't hold, uh, hold that against you in any way as, uh, as the show goes on,
but do you, I suppose these days, not much chance to do much Ruby?
No, it's, uh, I went from programming code to maybe programming some processes in the
company. I do commit regularly to our handbook.
Okay. So, um, let's talk about the company for a little bit. So let's talk about GitLab.
How big is GitLab now?
It's 300, 300 people.
Holy smokes. The last number I saw was somewhere in the hundreds. That's, that's amazing. So
these last few weeks must have been, uh, pretty remarkable.
Yeah, it was amazing. After, uh, GitHub got acquired, um, we saw a lot of love for GitLab,
a lot of people migrating, but especially a lot of people giving GitLab an audit look
and, uh, and really being amazed by where we've come since a few years ago.
I think both Mike and I really liked, uh, the messaging approach that GitLab had around
the GitHub purchase. You guys really seemed on top of it, like almost like you were waiting
for this to happen. Like you had that stuff up your sleeve, ready to pull out. Can you,
can you explain that a little bit to us?
There were rumors in the week before that they might've been acquired. And so we, uh,
we started preparing and, uh, I think, I think we did well in, in the preparations and over
the weekend we saw people moving to GitLab and, uh, it was great to see that, that response.
I'm looking at a tweet here from Zach Kaling, uh, who tweets, okay, I get it. GitLab's product
leapfrog GitHub. I'm shocked how incredibly nice, thoughtful, and well designed it is.
Fantastic building tools, incredible Kubernetes support, built-in CI-CD, security testing,
project management, and support features. Moving to GitLab. That is really what we love
to see. Not people moving because they're hating on Microsoft or GitHub, because I think
Microsoft is going to do a good job being a maintainer of GitHub, but really moving
because they, they like a single product for the whole DevOps cycle.
Yeah.
One thing that's very attractive, uh, for my company using GitLab is that we can host
it ourselves. Do you, do you have any, do you see that as a competitive advantage for
you or is that kind of a, an offshoot of the main product or do you see that as the main
product?
Yeah, no, we, we have two products or we have one product and two ways to consume it. Either
you use our.com or you self-host it, but it's a, the self-hosting is a really important
part. Not in the least because it, uh, it means you have that freedom. Even if you're
using the.com, you'll always have an export button and you can move to your own hosted
instance or, uh, GitLab host.com or somewhere else where you want to, uh, where you want
to be.
Yeah. Now, uh, back to the acquisition of Microsoft, when you heard that, uh, when the
rumors first started circulating, were you concerned? It seems like it takes a, essentially
a competitor and sort of supercharges them with Microsoft's bank account.
Yeah. So they're going to have a bigger bank account. Um, and, um, I think for us, the
hardest thing will be that they'll have Microsoft's Salesforce. Like Microsoft speaks to a lot
of companies. Uh, they, they, they regularly deal at the C level in those companies and
they can now like add this additional, uh, offering to that, to their, to their bundles.
And then they're, they're famous for having a good bundling strategy. So that's going
to be harder for us. What's going to be better for us is that, um, they're going to be focused
on, on integrating with Microsoft and Azure and all those other things. And, uh, I think
for us, uh, we're going to go full steam ahead and we'll keep releasing every single month
and keep adding great features for the whole, uh, for that whole DevOps life cycle.
Now a little birdie tells me, speaking of some of those features, that there's something
called auto DevOps that's coming along. And I was wondering if you could share a little
details about auto DevOps.
Yeah. So we're really, really bullish on auto DevOps on a week from now, June 22nd, we'll
release GitLab 11.0 and other DevOps will be generally available. And what you do is
you just push your code and GitLab does the rest. It will build your code, run your tests,
check the quality, do static application security testing, dependency scanning, license management,
container scanning. It will boot up a review app, kind of like a staging environment, per
merge request, dynamic application security testing and deploy it. It will do browser
performance testing and it will do monitoring of all the vital metrics. So all of that,
just by pushing your code, nothing to configure. We think that is the future and we're really
excited about having it out to the world.
Yeah. That's great timings. That's coming pretty soon.
Yeah. Now in a week, the 22nd.
Oh, very neat. Well, I look forward to hearing about it or seeing about it when it launches.
So auto DevOps, I am, I'm not familiar. I, I, but it sounds like a, sounds like a fantastic
addition and top of that, haven't you go ahead, Mike.
No, I'm pretty deep into using the current continuous integration tools in the community
edition of GitLab. Is there a break point between auto DevOps and the enterprise edition?
Or is that just, everybody's getting that?
Everybody's getting auto DevOps. The only thing is that the security features right
now are ultimate edition. So they're not part of the community edition. I think all the
other things, maybe except the license management is, is part of it. So you just push your code
and you get your review app, you get the monitoring, everything.
Can we talk about the additions for a moment? Because I noticed that you've recently made
for open source projects and for schools, some of the high end plans are free now. So
can you talk a little bit about the reasoning behind that and what the different plans are?
Cause I'm, I'm a noob to this stuff.
Yeah. So we have a lot of universities using GitLab already and we wanted to make sure
that those, the students, they train with all of our features. So when they go out into
the workplace, they tell their new employer, like, why aren't you using all these awesome
GitLab features that are available that many people are not yet aware of.
That's interesting. So it was a barrier for them.
It was a barrier. Universities don't have big budgets or they're not like paying for
software a lot. So we figured we just give this away. And also open source projects,
some open source projects like Gnome and Debian, they insist on using open source. So they
switched to GitLab and they're using core, but some open source projects are pragmatic
about whether they run on proprietary software. And for them, we, we, we want to make it easy
for them to also use all those security features. We're passionate about open source and we
want to help them in any way we can. And there's different plans for, for GitLab. So there's
a great core edition that's totally free, both if you download it or if you use private
repos on GitLab.com. And we have three different tiers from starter, which is four bucks per
user per month, all the way to ultimate, which is 99 bucks per user per month.
So do you kind of see this as a type of contribution back to open source then?
So ultimate for free, we see that as a bit of a contribution, but what we don't want
to give is the impression that we think this is an alternative to having a really great
open source edition. We understand that there's lots of open source projects that only want
to be based on open source. I will keep listening to Gnome and Debian and all the other projects
who are in the process of switching. We'll make sure that core will always be a great
way to, to run an installation like that.
Do you think that could be a market that starts to grow and maybe, maybe as a result in somewhat
of this Microsoft purchase that, that core group of open source developers who maybe
have fairly large projects, but they do have that, I guess, moral ground you might call
where it has to be open source, but they need something that has enough features. It seems
like there could be some contention there.
I don't think it's going to be a problem. I think Microsoft has shown it's, it's an,
it's a new company. They're not pulling the tricks of the past. So I don't, I think that
companies and organizations are contemplating a move to GitHub will not be phased. Um, there
are, however, a lot of big open source projects that say, we're not going to go to someone
else's software as a service ever. We want to be in control. We want to run our own website.
And examples are like Ruby and Apache foundation and Gnome and Debian. And some of those are
now moving to GitLab. And we think if you want to self host a GitLab is the logical
choice and we want to stimulate that as much as we can.
Yeah. I was, uh, I was just a fantasizing about some news announcement one day, uh,
where the Linux kernel moves off of GitHub to a self hosted GitLab instance. And I was
trying to think of what would they need from a GitLab core to pull that off. And I wonder
if everything is there yet and w would you be comfortable maybe contributing things to
the open source version that haven't been there in the past to meet those needs. If
it meant a significant maybe set of projects might come over.
Yeah, we're open to that. I don't think the Linux kernel considers themselves hosted on
GitHub at this moment. I think they're, they're hosted on self hosted Git and they're sending
patches by email. Um, if they ever wanted to move to GitLab, um, we'd be very open to
talking about open sourcing certain features. And with Gnome and Debian, it was the same.
We open source certain features that they, uh, they, they thought were absolutely essential
that, uh, that's, that's a great point. Uh, well put. Is it, um, go ahead. No, I was going
to switch to remote work, but if you've got more, keep going.
How common is it? Is it for someone to switch from the open source, uh, edition that I'm
currently on to the, to the, I want to say proprietor, but to the paid edition.
Yeah. So far about 6% of the people have done that. And we think, uh, six, six or 60, uh,
zero six. So only, only five to 6% has actually switched to a paid edition. And we see it
increases as the organizational size increases and as they adopt more of the different features
of a GitLab. So Mike, probably you're not switching yet because you're, you might be
a smaller organization. If you were using, yeah, if you were using the same amount of
features that would like a thousand people, I think it would be a no brainer to switch
to a paid edition.
And does that process, uh, cause you know, we've done a few upgrades. We tested it out
for a while. Is that process a pretty easy turnkey process? I'm thinking in particular
because we have, I know a lot of our listeners are independent development shops, consultants
that maybe have 30, 40 people and are thinking about maybe it's time to step up to the ultimate
mission.
Yeah. So, um, it is a very easy process. It's, uh, either you just install the new packages
and you import a backup. Um, but if you've downloaded GitLab recently, you'll probably
have enterprise edition by default with all the core features. Uh, but you have that installation
and then it's really a question of just entering a license key and you're done.
Oh, that's great. Okay.
Yeah, that is great. I like that. Um, so Mike and I have had an on and off relationship
with remote work. He and I both, uh, have small businesses and we have a handful of
contractors and employees and we've, we've really tried to experiment with this remote
work and we've had this ongoing multi-year conversation now with our audience about it
who are also experimenting. And so when, uh, I was, uh, kind of doing some research on
you before the show, I saw several different talks where, uh, you sort of were a proponent
of remote work and you mentioned over 300 employees or a staff. How many of those roughly
if you can share are remote and can you, can you, uh, share your thoughts on that?
Yeah. So 100% of our team members are remote and we're now, uh, we have people in 40 countries.
Wow. Wow. And, and, um, I'm curious, do you supplement the remote work with like get together
events like summits or sprints where you bring people together and have teams working together
for a bit and they go back home? How does that work?
We do a summit every nine months and we try to go to a nice location. Last one was in
Crete in Greece and the next one is in Cape Town, South Africa and it's for a week and
we don't put you in a conference room for the entire week, but we try to go out and
do things together. Um, right. Which legitimately is team building too. Yeah. We think that
if we're going to all that effort and expense to get together, we shouldn't do things that
we could do remote, like watching a presentation. We should do things that you can only do in
person like visiting something together. Um, and it's all about getting to know, uh, your
fellow team members and the members of the GitLab community. What's, but like every nine
months is way too little. So what we also do is, is a lot of like structured social
interaction. When you, when you spend one and a half hours every day, driving to work
or going to work there at work, you have kind of unstructured social interaction just by
virtue of people walking around, they'll talk to each other. We don't have that. So we facilitate
that. We have different things. We have things called virtual coffee breaks. We just schedule
time on someone's calendar. They understand the concept and you, you can talk about work,
but you don't have to. It's kind of just chit chatting. What facilitates that conversation?
It's Google calendar and zoom. Okay. And we ever, everyone that joins the company has
to, has to start with 10 so that they get accustomed to it. We have a team call every
day and it's a five minutes of announcements and then 25 minutes of people talking about
their life outside of work. Sometimes it's about a certain subject. Today we had breakout
rooms. Suddenly you're in a room with just a subset of the people. That's a great, great
way to kind of get to know each other, get to know each other's hobbies. For people that
have like GitLab people around them, we also like pay for them to organize a meetup. And
if you want to go visit other GitLab team members, we, we pay for the travel that's
involved.
Really? Wow. So there is a bunch of interesting ideas in there that I'd never considered that.
That daily call strikes me as almost borderline too much though. Like in terms of taking productivity,
is that something that is debated a lot or have you found that that you just stick to
it and it works?
Yeah, I think you, you don't want to be too afraid of, of hurting productivity. People,
what we always say is we don't monitor your hours, we monitor your results. And so we're
not, we're not going to, we're not going to force you to be in that call. It's, it's optional.
Like almost every meeting at GitLab, if you don't want to be there, you don't have to
be there. And if it's not interesting to you, it's totally fine to go do something
else while you're, while you're logged into a meeting.
And that's a nice balance. I like that balance you've struck there. That makes, that makes
a lot of sense. And then the other thing that I've, go ahead.
Yeah. People new to GitLab sometimes say, I'm going out for lunch and everyone says,
well, I have a great lunch, but you don't have to tell us. Like you're, you're the boss
of your day. If you want to go to the gym during the day when it's quiet or to the supermarket,
that's the freedom of remote work and you should embrace it.
Boy, that really does sound appealing. So the other thing you said in there that is
a new concept and it sounds expensive to me as a business owner, but I like it, is you'll
pay for the travel if they want to go meet another team member. That, how does, how does
that really, does that work well? Even people don't abuse that and that's, that's not a
huge cost center.
It's not. So we pay for like the, the plane ticket. We'll pay a few hundred dollars and
then when they're there, they sometimes rely on the hospitality of the other team members
or connection they have to, to actually stay there.
That is, that really gives me something new to think about. And what about the onboarding
process? You know, getting somebody acquainted with the culture, how you work, some of these
ideas, it seems like the onboarding process maybe would be the time where you'd want people
together.
Yeah. So what's important is that you get to meet your, the other people that are also
onboarding because kind of you feel connected to them. So we do a GitLab 101s, which are
sessions where they ask questions to an executive. So it's not a presentation. It's just purely
asking that executive questions. I do those and every C-level exec does those. It's also
about getting to know the people in the company. So those, those virtual coffee breaks really
help there. And then for the rest, we just want to make it as efficient as possible.
So you get an onboarding issue and there's more than a hundred check boxes on that of
all the things that have to happen. Most of it you have to do yourself, but also the work
that other people have to do for you, adding you to systems that's visible so you can check
whether it's still coming up or whether people have done that. And then we have a great handbook
of over a thousand pages that describes all the different processes in the company. You
don't have to read all of that, but everything that relates to your function, you're expected
to read. So you can onboard without having to bother people with a lot of questions.
Now you say great handbook. Now, didn't you earlier say that you work on the handbook?
Yeah.
You might be biased.
I'm very biased towards the handbook because we've seen it work.
That's a good idea. I like that idea. I'll admit I've never thought about creating a
handbook, but I could really see the usefulness of it, especially if you're bringing on a
lot of people pretty fast.
Yeah. We're growing about TREACs year over year. So it's really important that we can
onboard new people. And people always say, look, I onboarded. And what was amazing was
every time I had a question, people were so nice. And then I always think, yeah, that's
because you have 10 times less questions because most things are documented already. So when
there's few questions, it's easier to be receptive to them.
That makes a lot of sense. And as somebody who is just sort of getting acquainted with
GitLab after the recent news, I've always been aware of it, but really getting acquainted
now, that gives me a confidence in the long-term structure of the company. It sounds like there's
a real process for scaling, bringing new staff on, and keeping that going without derailing
the company because that can be one of the hardest things with a company is bringing
people on and getting that right.
So I am pretty positive about the future. You must be as well. You must be pretty positive
about what at least the next few years have for GitLab.
Yeah. I'm super excited. This year, we're going to complete our vision of complete DevOps.
So it used to be that GitLab was just version control, and then it was just for developers.
And now we're going to make sure that you can run the entire lifecycle all the way up
to deploying to production and monitoring in GitLab. And we think that's going to bring
so many advantages. Imagine you're rolling, you're pushing your code. It gets deployed,
but then GitLab says, sees that you're breaching a service level objective. It automatically
rolls back the code and says, hey, something went wrong here. Or overnight, there's like
Debian has a security update. It gets rolled out automatically, but we monitor it. And
if it doesn't work, we roll it back. So instead of babysitting deployments, you can do it
all with GitLab. And super excited by what we're doing there.
So that's auto DevOps, right? And that's going to be launching on June 22. That's next week.
So one feature I mentioned is auto revert. That's not yet in GitLab, but that will be
launching this year.
It just really strikes me as a way to empower even understaffed open source projects. People
that are on GitLab now that maybe don't have all of the resources that larger projects
might, this could help them get more done. So that's going to be a great feature.
Spend less time on your tooling. Spend less time on babysitting changes. Spend more time
on actually creating functionality.
Yeah. Well, Sid, thank you very much for coming on. I'm sure these are very busy days for
you. And so Mike and I both really appreciate you making time to come on the Coder Radio
program.
Anytime. Thank you.
Thanks, Sid. Boy, that was great picking Sid's brain on the remote work stuff. I mean, very
awesome hearing about GitLab and also very much looking forward to them launching auto
DevOps. But what do you think about his thoughts on the remote work stuff? Like they 100% remote
work.
You know what? Honestly, I was a little, cat got my tongue because I was thinking about
what he was saying. I was like, can that really work? I might have to try it. I mean, yeah,
some of that stuff, you know what, having the team meetups, it makes a ton of sense.
And if they're growing, as he said, 3x year over year, it's scaled up to what, 300 people?
That's incredible to me. That's great.
I'll put a link. He mentioned, as we were saying goodbye, that that handbook is open
source. So I'm going to put a link to that in the show notes. So if you want to grab
it, you can go to coder.show slash 313 and we'll have a link to their handbook that they've
put in the show. But Mike, I think that's probably it right there. I think we should
probably wrap it up. I'm going to be traveling with kids for the next weekends or so. So
I don't really know what the recording schedule is going to be. So just the surefire bet is
coder.show slash subscribe. Mike and I will work it out over the next few days. But when
we do publish an episode, as long as you go to coder.show slash subscribe and subscribe
from one of the ways there, you'll get every single episode that we put out. Mr. Dominic,
where should people find you throughout the week?
Follow me at Dominic on Twitter. Boom. You can follow me on Twitter. I'm at Chris L.A.S.
and follow my journey home from Tejas at Jupiter broadcasting dot com slash Rover. Thanks so
much for being here and hopefully we'll see you right back here next week.

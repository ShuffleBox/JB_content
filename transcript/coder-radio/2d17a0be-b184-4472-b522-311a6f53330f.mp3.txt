This is Kota Radio, episode 330, for October 15th, 2018.
Hi everyone, and welcome to Kota Radio, Jupiter Broadcasting's weekly talk show, taking a pragmatic look at the art and business of software development and its related technologies.
This episode is really me, cowering in the corner, preparing to go into the BSD den while I seek comfort from my co-host, Mr. Dominic.
Hello, Mike.
Be careful if the pitchforks is three prongs, not what you want.
These BSD guys walk around with the horns, man, it's intimidating, you know? Because they're dangerous.
The BSD meetups and Satanist cults, sometimes people get confused and end up at the wrong place.
Yeah, actually, you joke, but a lot, they, so they hand out these horns as sort of like a branding thing and they light up.
And then we, you know, you forget they're on your head and we go out and get lunch and we have actually gotten people thought that we were Satanists.
That actually somebody walked up to us and started to give us the riot act and we had to explain to them that we were, we were actually not Satanists, we were just really geeky.
Yeah, see, if you go to a Linux convention and they give you like a stuffed, you know, tux, people just think you're a weird guy carrying a stuffed animal, which you also get, you know, younger men walking up to you in a full police garb saying,
Hi, sir, what brings you to Toys R Us today?
I have to tell you, though, listening to Alan Jude try to explain to a hysterical old lady that we were not a group of Satanists was the highlight of the trip.
And I can't believe I've never shared that story on the show before.
Now that I think about it, it was so good.
You should have taped it and put it on YouTube.
Oh, I wish I had. I wish I had.
It's at the time we were alarmed.
Well, that's not what we're here to talk about, though.
We have feedback and follow up from last week's episode.
We might pontificate a bit on the future of dot net and more. Plus, if we make it, we have got some excellent hoopla this week.
We got a couple of massive emails into the show, so I'm going to keep it limited to just a couple and we'll go to those.
Our first one comes in from Matthew and he has follow up thoughts on your observations recently of some interviewees from the local school who their most in-depth experience with Linux was the subsystem.
The subsystem on Windows 10.
And Matthew says, Hey, there, after listening to Mike's trouble with university students lack of Linux experience, Encoder Radio 328, I thought I might be able to add perspective.
I'm a fifth year computer engineer student at the University of Florida, and I have heavily I have been heavily involved with the open source club here as a club.
We primarily work on student run open source projects as well as do workshops on different open source technologies.
He mentions that, of course, your favorite Rust is in there as well as Docker and a few others.
You're the Rust lover now.
Though we like to nudge people towards Linux and quite a few Linux installations overall, most our members day to day OS is either Windows or Mac OS.
I'd say around two thirds on Windows and the rest are on Mac OS.
There is not a lot of virtual machine use outside of a couple of classes.
They're really just too slow on most machines, given the other options available.
Most people with Macs are happy just using Bash and Homebrew.
Windows is a little more mixed.
Most probably have the subsystem installed in which they in case they do a lot of their command line stuff there.
However, those with the Linux dual boot around 20 percent will switch to that for development purposes.
I think a big reason most people don't use Linux daily is because the classes make it really hard to do so.
There are some courses that require building code on Linux machines, and then most people go to the computer lab for that.
We call it the dungeon.
A lot of classes require the use of Windows or Mac OS only software like the lockdown browser.
It's an anti-cheating browser that prevents you from looking at other Windows while taking quizzes and reports if it detects a virtualized environment.
It's also just annoying to switch back and forth between OSes.
So even the ones of us who do have a Linux distro installed end up just using Windows a lot of the time anyways.
Not to mention there is an understandable fear that if someone messes up a Linux install, they might lose their data.
So I do think there is a lot of us with some Linux experience who want more.
It's just really hard to justify installing and using it when classes make it really difficult to do so on a day to day basis.
Feel free to contact me though if you want any more information on this, the open source club, or anything else.
Have a good one, Matthew.
So the classes, you know what, that is so typical, Mike, when you think about it.
A courseware that should be preparing you for the real world locks you into using the system that isn't the ideal for the course.
So that way they can make sure you're not cheating and things like that because that will prevent the cheating.
I'm also curious as to what they define as cheating, stack overflow cheating, because if you're preparing them for jobs as professional programmers, yeah.
It's like the argument that when I was a kid, the hot argument was should we allow calculators in the class?
Oh, those days are gone.
I know, right?
Those days are gone.
But now the argument should be should we allow Google in the class?
And if Google is a legitimate tool that you would be using to solve a particular problem and finding pages like stack exchange, should we allow it?
It would be negligent for a professional in the field to pretend like Google doesn't exist.
That would be considered negligence.
Well, you wouldn't survive.
You wouldn't survive in the commercial market for very long if you didn't rely on that stuff.
But actually, you know, it's...
Oh, this is going to get me in trouble.
I love it already.
So there's a big difference between an academic computer science teacher and an actual professional developer.
I am not making a value judgment.
No, yeah.
But it's like, you know, practical software development is very different from comp sci, you know, what's the fastest algorithm?
You know, all your bullshit, you know, N plus.
Yes, it matters.
I can feel your keyboards clanking and rage on the table.
No, I think it's fair.
I think it's fair because a teacher of development has the job of being a teacher.
So they're taking care of student issues, faculty issues.
There is so much more that they are focused on than somebody who is a full time developer who is developing software full time.
And they're, you know, it's not like they're only developing software.
They're attending team meetings or whatever they might be doing, you know, screwing around on Twitter.
They they don't only develop, but it is it is simply not practical to expect that somebody teaching it could be as fully intimately versed as somebody who is doing it day to day.
Unless maybe that teacher had 20, 30 years of experience in the field first.
That's unfortunate, though, because that means that the students kind of come away with a half baked preparedness like what I find is it's like pub trivia, right?
Like, you know, particularly like what's the book, the Pearl Book, Programming Pearls is actually the title of the book.
But it's the book of design patterns.
And I read it once years ago, and I honestly could not name more than like 10 design patterns.
But I'm finding that.
I guess I find the pub trivia version of software development very annoying.
Like when people write, this sometimes happens when I go to events.
People want to talk about the most obscure crap and like the mathematical like, oh, well, that's actually inefficient.
Actually, do you know what's inefficient? Not shipping. Right.
Yes. In most cases, there's a I'll give you an example.
In a comp side classroom, you don't have a client breathing down your neck looking for a delivery for four hours and adding constant scope creep.
Right. And I don't know.
I mean, no one really cares in the real world if you use the most efficient algorithm.
I am not advocating shitty work like that's not my intention, but I am also not advocating what I consider.
This is not going to be our G rated show, you know, masturbatory all comps.
I'm doing this for a long time, Chris, you know, and every every year, you know, every time I get a little older, I find it more and more annoying.
And it really only matters in very few cases, and even in those cases, it doesn't matter all the time.
I'll give you a real a real world example that I just recently learned of.
So here's why I don't like this is requiring software that's Windows or Mac only and preventing students from using Linux prevents them from expressing an interest, which could become a strength once they become employed.
And that you could actually be leaving them a little like one one arm tied behind their back kind of deal.
I'll give you an example. I picked up the book that was recommended on ATP a few weeks ago, The Creative Selection, the book that goes into the development of the Safari browser and the keyboard for the iPhone as well as a bunch of other things.
Super fascinating.
And the part that really kind of stands out to me and is a is a comparable analogy to this situation is the developers inside Apple were trying to create a Web browser.
They had decided that this was something that was a platform imperative, and they had a very strict mandate from day one.
It had to be fast, like everything had to be fast.
Eventually, even every code commit change was tested against a benchmark to make sure that the browser didn't get any faster, and that even includes when it came time to add support for funky banking websites or weird little edge cases.
They had to come up with ways to support that stuff and still come through clean on the benchmark.
But before they got that far, they got stuck in the mud for more than six weeks.
I mean, they drug on and on and on trying to get the original what they called Mozilla source code, which became Firefox, working on Mac OS.
Tried to get it working because they were going to build their Web browser around Gecko.
It was a foregone conclusion. Netscape had open sourced this code.
It was the obvious way to go. And so the yet to be named Safari browser was going to be a Gecko based browser.
And they couldn't get it to build. They didn't get any help from Mozilla because the Mac was tiny.
This is this is pre this is pre Apple's resurgence.
So the Mac was tiny and Mozilla wasn't interested.
And so they began to scale their team, try to bring on somebody that could help.
They hired an individual as all this is in the book.
He had like a post interview with them, a post hiring interview.
It's OK. Tell me what you've been working on. Tell me what your struggle is.
And he listened to everything they said.
And he said, OK, well, we'll meet again next week. So he goes off for just a couple of days, two days, actually.
Took these guys six weeks. He goes off for two days.
And he gets the Conqueror Web browser working.
Because he was a passionate Linux user and he knew how to use Linux and he knew about the KDE desktop environment and he knew about the Conqueror Web browser and he knew he could get X11 working on the Mac OS and he knew he could get Qt working.
And so he created a shim to run Conqueror on Mac OS and in two days had a whole demo ready for them to go where they could browse web pages, they could click on links, they could go back in the web browser.
In two days, he managed to get a web browser up and running that had taken the team six weeks to not get beyond a screen opening and then immediately closing.
And it was this it was this sort of home turf advantage that he had because he knew about this project. He had been using Linux and the team had no insight into that.
Now, if you can bring people into your team that have these different backgrounds of experience, it can be extremely valuable.
And so when they had that demo, they saw that demo. It was a foregone conclusion. We're going that way. We're going with KHTML.
We're going to go with that. We're going to have to pour it all over. We're going to put Conqueror over. We'll do the whole thing.
It was. They ended up kind of not really doing the whole thing, but they did end up going with KHTML, which became WebKit and now is the is what the Safari browser is based off of.
That guy solved the problem in two days, took the team six weeks and they couldn't handle because he was used to the KTE environment, right?
It was he was just familiar with something else besides the silo that they were working in.
And that's really my core point here with the students. There is a market skill advantage to having experience with other systems besides Windows and Mac OS.
And for the students to be restricted from using those systems fully because of the requirements of the classroom, in a real sense, the very facility that's supposed to be preparing them for the real world is holding them back from fully realizing their possible potential.
It's really frustrating.
Yeah. And just right off the bat, I would strongly recommend anyone read that book.
Yeah. Good book. I'm currently reading it now. It's amazing. Creative Selection is the title.
Yeah. Yeah. And if you have any tangential interest in software development or projects and things like that or Apple and iOS, it's worth listening to.
But if you're not even in the Apple or iOS stuff, it's great. He used to work at Easel.
So there's stuff in there about his early days with creating the known file manager. It's just it's a good book. All right.
I just want to jump back to our writer real quick. Good on you for starting a software development club.
Yeah. The Open Source Club sounds cool. That's a great idea.
It sounds amazing. Sorry. The Open Source Club. Yeah.
They should all listen to Koda Radio. You know what I'm saying? They should all be.
They should listen to Koda Radio and they should also be very careful to not use Rust. It's very important.
Get it out of here.
H Charles B writes and he says, I have some thoughts on testing. I agree that it's not the all be all end all of developing software.
Nevertheless, here we go. Some sort of testing must be performed in order to validate the software.
I am familiar with the right test that fail and then write code that passes methodology.
If you need a methodology, it is one to consider. At present, I write tests along with the code.
That's not strictly the same as TDD, which is test driven development.
Also, I haven't been involved with projects where I would very much have liked to have accepted the test criteria available from the start.
But that's really more getting into the specifications of getting a project nailed down before you kick off.
At present, I start projects by choosing a language and a unit test framework.
In some cases, the unit test framework is built right into the tool chain.
So like Go or Rust. And likely others.
I heard Rust drink. Yeah, and here's a good one for old languages like C and C++ and Perl.
There are subtle... Who you calling old, Willis? Hang on.
I know. C++ is not old. It is a modern, dynamic, general purpose programming language.
We can move on from here. Keep going. Sorry.
All right. So he says, he goes on to say, I agree with you really.
He goes on to say that here's some things he likes. He says you get instant gratification when you have unit testing.
You have testable code that's usually a better structure code.
Parts can be exercised with corner cases and suspected trouble spots that might be difficult to reproduce in the finished application.
Also, putting the parts together usually works a lot better if the parts are thoroughly tested before assembly.
That's not bad. Unit tests can be automated with tools such as Jenkins, Buildbot and so on.
All right. There you go. Yeah, taking a breath.
Yeah. I mean, he's just saying if you test, you're a better person, I think is what he's saying.
Oh, you're such a troll.
OK, in a hypothetical world, a guy I knew used to have a guy who used to work for him.
So a guy that had a guy that was working for him. So is this my cousin?
My cousin, my cousin Vinny, he hires this guy. His name's Joey, right? And, you know, Joey, 100 percent test coverage.
Turned out all the tests basically didn't test anything functional to the app. They kind of just returned true.
Joey, what are you doing?
Joey, forget about it. Come on. No, it was bad.
It was I agree that some automated testing is appropriate.
I still I get what you're saying that theoretically, if you like, pick your test framework up front.
Maybe I am like, you know, Paul or Saul rather on the road to Damascus, I'm about to be struck down and see the light.
But I just haven't seen the light yet.
I mean, I agree in testing business logic, computational logic, any kind of geometry, calculus, any kind of basically what I would call math stuff.
Beyond that, I just haven't found the.
Value in UI tests and that story about my cousin Vinny is true, like.
It's just hard to test UI, so at some point you don't want the automated GitLab or rather at the time, I think it was GitHub or Bitbucket pull request to reject it. So you just like fail out and return true.
It's bad. I would rather just not like write those tests because they cost money.
And I think the best way to test UI is to simply run your app, if it's a mobile app on devices or if it's a web app in browsers and, you know, use the one of your superpowers, which I call site.
To see if the UI is correct, you tell me, look at it and see if I'm telling you to actually like run through your software after you write it.
I know it's unpopular. I get it. Is that something is there like an Uber like app for that where I could just order up a tester?
Is that something I could do? I think there is actually. I know you're kidding, but I'm like 90% sure there is.
Well, that sounds frightening. Let's talk a little bit about your fun with the Microsoft Bot Framework under Linux.
I saw you tweeting about this the other day. What's going on over there?
I have been screwing around on elementary and pop with.NET Core, and I don't know how familiar we are all over.NET Core these days, but really quick.
.NET Core basically is an implementation of.NET and ASP.NET that runs on Windows, Mac OS and Linux systems.
I actually think it runs on BSD, but I can't be 100% sure on that.
They'll never admit it. They'll never admit it.
Who would? They may execute you if you do it, but I'm pretty sure it runs there too.
Alvin Jude comes to your house and personally gives you a beat down.
He's very tall. He's very tall.
He's a big dude. You don't want to fight him. Well, he's a tall dude at least.
Previously, with the Microsoft Bot Framework, it ran on.NET, what I'm going to call.NET Proper or.NET Classic, which meant it only ran on Windows without some crazy hacky stuff.
Even then, there were problems. Even then, it only ran on Mac.
If you were using C Sharp, you could always write Node and even Python for all my snake-loving friends.
Now, we're up to version 4 because apparently the Bot Framework gets revved more than anything else that they have.
It runs on.NET Core. You can generate a project on Linux and it runs just fine.
That's rather impressive.
It's frightening.
I mean, JetBrains writer, C Sharp IDE or.NET IDE rather picks it right up, understands the project, VS Code on Linux understands the project, you have IntelliSense, you have everything.
That sounds like a cohesive development environment almost. I don't understand.
Let's see.
It's almost like they love Linux, right?
You got a reply from Alex. It's just a heads up. If you run your bot in Azure and use the free tier bot service, the service likes to sleep and it doesn't take much inactivity for it to do so.
Yeah, I figured that out this morning.
Yeah, I didn't see the tweet.
Better create a little script and just talk to it every now and then.
Just like ping it, hey, look, Navi from Zelda, you there? You there?
So with.NET Core being such a thing, what's the future of.NET itself, do you think?
So.NET is like a dysfunctional Thanksgiving Day family dinner.
You have old man uncle.NET proper who's like, back in my day, we had WinForms and nothing.
All you kids mix them with Linux and Mac. What's wrong with you? I was Xamarin. Xamarin, who lets you in the house?
We have.NET Core and we have.NET Standard, which if you didn't like my Archie Bunker impression, which I think ended up being more Red Fox because, yay, accents.
It's weird because.NET Standard is exactly what it implies. It's a standard where all these APIs work on all versions of.NET and they prefer the term implementations.
But not everything is in.NET Standard. So by using.NET Standard, you're limiting yourself to what namespaces and APIs you can call.
But the advantage is, one, you don't have to deal with PCLs, which are hot garbage and not that I want to take a hard position.
And you can guarantee, let's say you're writing a library or NuGet package, that it will work on all existing implementations of.NET, assuming a certain minimum.
That's pretty powerful. If you're writing some sort of data processing library, you kind of want it to focus on.NET Standard, if possible.
Xamarin is the weird kid in this thing because Xamarin is very mono-related still.
I think what we're going to see is a great unification here of.NET Core and Xamarin at some point. I think it makes a lot of sense.
I don't understand what the value in mono is anymore because, in every case possible, you should probably be using.NET Core, not mono.
The big issue with that roadmap is GUI applications..NET Core is really for console applications and ASP.NET and all flavors of ASP.NET.
MVC, Razor, Blazor, all the good weird stuff they have.
That's where you get into things like Avalonia, where you implement GTK-Sharp.
I think this is a temporary state of the world, and I think Microsoft is eventually going to collapse everything into one true.NET that runs everywhere.
I got the chance to go down there a while back and talk to them about open sourcing.NET Core and the other things that they were working on in regard to PowerShell Core and whatnot.
I asked them, I said, so does.NET Core eventually replace the traditional.NET?
They kind of looked at each other like, oh, that's the question we didn't really want, but then their answer was interesting.
They said that they will have a long tail of Windows users and admins that will need some of the features that are in traditional.NET that they don't have any plans to put in.NET Core.
So for specific Windows admin tasks and whatnot, there's still going to be sort of a vibrant use case for traditional.NET, and.NET Core is more for the rest of the world outside of just Windows.
But.NET Core is effectively going to be the future, right?
There are some behaviors in.NET Classic.
Well, I think the implied statement there is that Windows isn't the future, I think is what they were telling me.
I think two Microsoft people across the table were like, yeah, we're going to just keep that going for our legacy customers is essentially what they were telling me without saying those words.
I mean, I think Windows is still going to be an important platform for anybody who develops desktop applications.
But I don't think you're going to do it in.NET proper.
You're probably going to do it in.NET Core unless you have some weird legacy reason.
Eventually. I mean, that might not be the case yet, but I think it's going there.
Well, the problem now is there's no WPF, there's no UWP for.NET Core.
There's things like Project Uno, there's things like Avalonia, but there's no blessed solution from Microsoft, which for a lot of the types of organizations that are purchasing.NET software or.NET shops, not having that Microsoft seal of approval is a problem.
Yeah, I mean, my bet would be Xamarin would get the right to love. Yes, that seems that makes the most sense, right?
It's they own it. They own it. I think you mean to marry it. Oh, I know. Tell us about Zimian, by the way.
Oh, really? That's that's harsh. That's harsh. Zimian was OK.
So this is going way back in the Linux days. Zimian was this really cool company that made this awesome software management.
I'm trying to find the name of I think was called Red Carpet. Oh, I can't remember.
Anyways, it was it was it was part of where Mono came from and all of that.
It was the company that housed all of it. And they did other they made other things that were just some of the coolest tools.
I think it was I can't I'm trying to look it up now because I can't remember. It's called Red Carpet.
Maybe I think it was Red Carpet. Yeah, that was it.
I think it was so great. It allowed you to manage software across multiple systems.
You get a subscription and then be able to like deploy software.
Now all I get is nothing. It's all it's all gone away.
But that was really something kind of special back in the day. And I really enjoyed it.
So that's where the joke comes from. Anyways, that's neither near here nor there.
It makes me sound like an old man. You made me sound like the old man on the show now.
Do you want to talk about this story? That's I mean, it's a little bit past now, but people are still kind of well, they're still talking about it.
Is Microsoft contributing 60,000 patents to the Open Innovation Network?
Which is a consortium, basically a patent pool, I suppose. I don't know if that's the right technical term, but it is a consortium of about 2600 members who are.
Pledging not to sue each other over those patents.
That seems what really, regardless of what the technicalities are, because many have pointed out that if you're not part of the OIN, Microsoft can still go after you.
And it does not include the components of Android like ex fat that Microsoft has patent revenue on.
People pointed that out. I think if you look aside from that and you look at if you look at the bigger picture.
This seems what this really is, is Microsoft trying to make the largest statement possible to developers who use these technologies to build applications.
And that is that Microsoft is on your side and that Microsoft is not going to be going after anybody for trying to use this stuff.
This isn't a bait and switch they're doing. They're really invested in these tools and these platforms, and they figured out how to make money off it, too.
Is also probably what what the unsaid messages is that it's a juicy Azure money, right? Of course, yeah, of course.
So I'm curious to know what your thoughts are sort of from a development perspective, from a risk perspective and things like that.
Let's say you're going to build an IoT device. There is perhaps less risk in the air now that probably was never really there.
But it's weird that you're looking at my calendar that I have a meeting to discuss building something on Azure spheres, but ding, ding, ding.
So I think this is great, but it has no practical impact on my life.
Yeah, when I think patents that will affect me from a development perspective, I think once that have attempted to affect me, it's never like Microsoft.
Right. I'm too small. It's always scumbag lawyer. Yep. Fails at being a lawyer.
Has a little bit of money from his practice, buys up some defunct pack patents from a startup out of bankruptcy, turns around and looks at the top of the apps.
And this is literally something that happened to me and decides to sue somebody charging four ninety nine for a fucking Mac app.
Yeah. Yeah. Or go after them for a podcast patent. Remember that? Remember that one? Mine was mine was text highlighting.
Oh, nice. How dare you? Yeah. Yeah, I'm I'm a monster. That is so IP right there.
That's it's pretty. Like, I don't know, I know, you know, since we've been doing the show since 2012, I have been a less like rage on Microsoft, except when they screwed me on when RT, which I still remember.
You guys are dicks when RT forever. Yeah, I don't think so.
Yeah, I know. I'm not really afraid of them from an IP perspective. I'm afraid of like semi retired lawyer who wants to, you know, put money in his grandkids trust fund.
And so I hate to make it sound like that. I would argue, though, that they have made an impact.
It's for you. It's just it's not one about your legal risk. It is it is the lens in which you view Microsoft now.
Like it has further focus that lens in such that they really do honestly seem committed to this to this to this statement they've been making for a while.
And that plays that just plays a role when you're when you're making a calculus about Microsoft and their motives, don't you think?
Like it's sure it does make me more comfortable building on Microsoft technologies. Yes.
Yes, that's that's the way to try. That's what I'm trying to get to.
Yeah. And and that does it is sending sort of a subtle messaging to not subtle, actually.
In fact, it's a very bold message to a lot of developers. I think it makes I think I think they're really making.
A calculated move here that is going to pay off dividends for a long time for the Azure platform.
I really even if they were to drop their Android licensing revenue, the statement, the messaging here,
the communication to developers, I think is is brilliant. It's a I think this is a masterpiece.
What Microsoft has been doing for a couple of years.
It nobody's nobody is being this respectful and this committed to creating tools and platforms for developers, at least from what I will say.
Yeah, I will say for this next project, I'm hoping to kick off after Griffin.
We're evaluating a number of IOT boards and no one has been more responsive or supportive than Microsoft.
They're hungry. It's one of those. I'm sorry.
When it comes to getting developers on board and using their tools and using Azure, they legitimately seem hungry the way a young company seems hungry.
Yeah, they do. It feels like talking to another tiny company. I have to remember, wait, this guy's from Microsoft.
They're like, you know, but they're you know, they're willing to do all kinds of things like here's some documentation.
We'll put you on the phone and engineer like it's. It's something if you would ask me like even five years ago, I never I in a million years,
never would have expected this kind of frankly support from from Microsoft, right?
It feels weird. I got to be honest because, you know, I wasn't I wasn't an old Linux hand like you, Chris.
But, you know, when you're a Mac guy, you're not particularly fond of Microsoft.
Yeah, right. Yeah, that's true. There was a lot of bad blood there for a long time.
Yeah, I was. You know, it's. I never would have guessed.
Right. Like, you know, listeners of the show will know I dealt with another large software vendor who charges for software and.
Just the difference between dealing with them who is on paper more friendly to Linux based projects and dealing with Microsoft is like night and day.
I still have some fear. Like, you know, Azure is not cheap.
I worry about too much of my stuff being tied into Azure. Sure.
Yeah, actually, Chris, I'm going to take a side tangent here.
If you're running GitLab CE, you need to patch it to the current version.
I wonder if I wonder if we had I just did that this morning. There's a security exploit.
Oh, good. Yeah. So just a quick heads up now. You have to be like three versions behind for it to matter.
But yeah, just a. Yeah.
Now, I think I think we've we've we've treaded on this ground before about the long shift that everybody's had to make in regards to their view of Microsoft.
And so it feels a little a little over treaded, but they keep making these shifts.
They managed to I think the reason why the conversation keeps coming back up is they keep making these shifts that are surprising.
You think just when you're getting comfortable with, OK, so that's the wow, that's their commitment. That's their level. OK.
And then then the next shoe drops. And then it's a whole nother range of stuff.
Sixty thousand patents is going to make the O.I.N. network a serious contender.
Their membership rates are going to skyrocket. It's going to be it's going to be huge.
There's going to be all kinds of companies that join that to enjoy that.
If you can afford it, the beautiful thing about O.I.N. and I am not an attorney, Chris is not an attorney, though he does play one on TV or a graphic channel is O.I.N.
is a mutual protection treaty, right? It's effectively NATO for patents, is it not?
Yeah, I suppose so. Right.
So if you're a company who's big enough to afford membership there, but small enough that you would have to you would forcibly have to settle patent lawsuits.
O.I.N. might be what you want.
Yeah, well, well, there you go.
They keep the keep that the times they keep on changing.
I'll just give a quick mention. We have a link in the show notes about this Redis lab situation.
The Fedora and Debian community are discussing potentially forking Redis or Redis modules because of a common clause, which has been added on top of the license.
It's essentially a sub license for some of these modules that says you can't earn any money using them.
So these modules that were parts of Redis that have been in some cases contributed by the open source community have their license amended.
They're still open source. You just can't make any money off them now, which both Debian and Fedora.
Well, how the hell are we going to ship that? Like, that's not free software.
That's restricting what the user can do with the software. And, you know, we've got users that use Ubuntu, which is based on Debian, and they're using this stuff to make money.
So this isn't going to work. And so now the talk of a fork is coming up. It's a messy situation.
I have no idea what Redis is thinking.
And the potential canary in the coal mine in this particular instance, at least according to one of the module developers who was tweeting about this situation.
He says that prior to the announcement, Redis Labs asked him to sign a contributor license agreement, a CLA, which granted the copyrights and patent rights of their contributions to Redis Labs.
The developer comments, it just seems like such a great coincidence that they introduced the clause in the CLA right after ensuring they had all the rights on the contributors made to the projects.
It just seems really strange they added that, ensuring that anybody couldn't make claims on the software.
It was like the CLA dropped and then the new common clause sub licenses said don't make any money dropped.
So the community's red hot pissed at Redis, Redis Labs, and a fork is brewing.
Have I mentioned how I feel about patent and IP lawyers yet today?
It is one of those things, you know, you watch this, you want to read more, we'll have a link in the show notes, but I just thought, geez, right?
I read the article. This just sounds like a complete waste.
Like, I'm not saying who's right, who's wrong, but this is one of those things where, you know, you're all very smart people, you're software engineers.
Maybe we could do something productive together instead of just being assholes.
Now, what? You crazy. You crazy.
I know. I understand. And by the way, I heard a rumor about you.
Oh, me, huh?
Oh, we're going off the rails here, buddy.
I heard that you are now a partisan.
Oh, yeah. What kind of for which particular flavor?
KDE. I've been listening to the Linux action show. Yeah, that is kind of me.
Yeah, I have. I mean, you know, it's not for everybody. I'm going to give you that.
OK, can I make a confession on the air? Yeah, I think I'm in love with Cassidy.
Oh, from from elementary elementary. It's that beard.
It's it's Mac, but on good hardware.
Oh, yeah. Yeah, I love it when you say that to them, by the way.
It's yeah, that is true. Yeah, I think so.
Here's what I think is I think that in my personal opinion are there are two great desktops for Linux right now.
And Plasma is the one that is a utilitarian workhorse.
It is a tackle box. It is.
It's got all kinds of drawers and you've got a few extra screwdrivers in there that you don't need to use.
But every now and then you open up that talk about, you know, like, holy crap, I've been wanting my tackle box to have this for 20 years.
I can't believe this is finally here. So that's KD Plasma.
In fact, check out error dot show slash 50.
Joe Pope and Daniel Fore from elementary OS try to kick around why there's so much hype around Plasma Day and try to understand what all the hype is about.
Shifting gears, though, to the second best desktop, it is got to be.
And I can say because I've I've seen the prerelease.
Aqua. No, it's Juno. Juno is I'm running the RC right now.
And elementary OS 50 Juno, which is the release that's coming out very soon, is.
It is it is unbelievably refined. I guess what I'm really just take just if you just take screenshots of individual components of the OS and look at them on their own in isolation.
They sent out a press kit where they did this.
They took screenshots of various parts of the different application interfaces so you could just look at them and analyze them.
And it's so well done. There's really nothing quite that refined on Linux.
Plus, it's well-performant. I will say, though, one of the weird side effects of running elementary on my workstation is I am now preferring apps developed for elementary in the volatile.
Sure, because it all is consistent. It all looks just right. The shortcuts are exactly what I expect them to be.
Now, I'm still running pop in my Gallego. I don't know, you know, what I'm going to do long term, but I wouldn't be surprised if I end up just being an elementary guy because this is stable, pretty.
And I'm not running a bunch of electron apps other than Slack. The other thing that's nice is at the end of the day, you have that Ubuntu base, which is well supported.
There's tons of how to guides. There's tons of devs and software available.
So you you have the you have the access and availability to the world's best supported desktop Linux distribution while running it on in a refined UI that I in my opinion is architected better than Nome Shell.
And has an outstanding starting guide for developers with a consistent messaging throughout the entire guide on how to build applications, how to distribute those applications to elementary users and how to monetize the application.
And in Juno, they're introducing a new feature where I don't know why other app stores couldn't figure this out.
It took that it took the guys at elementary OS, I guess, to figure out how app store should work in their app center. Now in Juno, you can try an application before you buy it.
Get ready for that. You can try an application before you buy it. And then later on down the road, like when you go to do updates, it'll say, hey, you've been using this application for about three weeks.
And now there's an update available. Would you like to kick him a buck?
It's weird. I feel like I used to know a guy who for a number of years has been saying we should have free trials of professional desktop software.
It's weird, huh? Yes. I think I think it's a really solid platform for you.
And, you know, there is cross pollination between the pop OS developers and the elementary OS developers.
They collaborate quite a bit. I know I've met Cassidy.
So question, though, this and this is something I probably shouldn't ask you.
But let's ask you your Linux, man, if I were to write in Linux, man, it's like Batman, but like Florida, man, you're Florida, man.
You're Florida, man. And I'm like, I am not Florida, man.
You know what? I I have I have yet I have yet to put a burning tire on my lawn.
Fair enough. Just saying. If I were to write an application and follow for elementary, would it just come over to Nome and Katie?
You know, right. No, that's possible. You probably I mean, I'm not sure if all the valid dependencies would be there.
But yeah, that's where things fall apart.
There are many ways to run those elementary apps.
It's a flat pack and make it wildly insecure. That's there.
I mean, there are non non universal packaging ways to get those elementary OS apps right now.
For better or for worse, you can get them outside the App Center and run them on any Linux you want.
But interesting. A flat pack or a snap would be the way to do that. That'd be that'd be ideal, really.
And flat packs. I can see a snap. I should. Yeah. And they're pretty easy to make, really.
I can make them. So if I can figure it out, just anybody can.
I never really did get a Deb figured out, but I can get.
Listen, if you can co-sign for the iOS app store, you can basically do anything.
Yeah. So check it out. Just before we go. Yeah. But you're right. Check it out.
Juno is going to be out soon. I plan to have Daniel Fore on tomorrow's Linux Unplugged Tuesday, which by the time this is coming out, it'll already be out.
It'll be at Linux Unplugged slash 271, I believe.
And I'll have an interview with Daniel on there. And I got a couple of questions for him.
So if you have any drop me drop them in slack. If you have questions about the project or.
Well, I have one question and I'll say it on the air here because I want to let the comments blow up.
Why Vala? Why Vala? OK. All right. I'll ask. I've asked him before.
But yeah. Yeah. All right. Well, I got one more story.
I thought maybe we could chat about before we run for the day. I had debated.
You know, I think Adobe announcing their cross-platform rush editor and also trigger me.
No, I'm not. I'm just saying and also mentioning Photoshop CC for the iPad, which actually seems legitimate is big because I've been debating getting the iPad to supplement my Linux workstation.
So I can open up my Photoshop files. That'd be nice. But that's not I don't want to talk about that.
Instead, I just thought it'd be fun to give Google a bit of a kicking. And this is really all in, you know, good natured humor because.
Can we can we talk about the Adobe thing? Do you have a minute? Sure, I do. I just figured we didn't have anything to say.
So I have lots to say. Of course. Yeah. This is this is a sensitive subject.
Remember WinRT? I think I mentioned it earlier in the show. Yeah, I vaguely do recall it vaguely.
The idea of a productivity tablet that I could develop pro level software for is like a fantasy of mine.
I don't understand what could be in the new iPad Pro that would make that more viable.
Now, I know by the time we release a show, we could already know everything. Right. It comes out next week or a couple of days.
Yeah. Spoiler alert. We're prerecording because I'm at MeetBSD. So which really means he's chained in a basement and they're forcing him to wipe out Linux install.
They're making me apologize for Linus is what's going to happen. Oh, man, they're going to risk a desperate cry for help.
Oh, man. It's just like an SOS. They are going to rid me about Linus so much. You know that.
You know what's funny? I I went to a dotnet meetup and people knew about the Linus thing.
Oh, yeah. Oh, yeah. Well, it was. And I went out my Gallego program. Oh, you're running Linux. Oh, yeah.
What's wrong with you? It's a general it's a general story. And they already very closely follow the politics of Linux.
So that way they have fodder for their jokes. Yeah. So. So why why is this different now, I guess?
I think it's why I think it's different now because the market has had a couple of years to get a little better.
Like there's apps like air mail, which are just fantastic email applications that didn't exist a few years ago.
And the machines got more powerful. And then I think Marzipan may result in a lot more iPad apps because essentially to make a Mac iOS app, you make an iPad styled app.
And so you get the iPad app for free. Right. This is what I think.
Right. First of all, there's a big delta between air mail and Photoshop. Right. Like a huge, huge fair.
I think it's Marzipan. I think the bet Adobe's making is that if I write a pro iPad pro version of my software one, you know, crazy guys like Mike Dominic who really, really, really want to do pro level work on tablets will buy a new iPad pro and like buy my software.
And then in a year, I'll be able to run it on a Macintosh. Did you see the Google slate, the pixel slate? Yeah, it's not going to it's not going to go anywhere.
I think I think so here. I'll tell you my my my thoughts around why a professional tablet appeals to me now instead of I've never even I've been without a tablet for nearly two years.
I just I did not have a use for them. And I just eventually thought, you know what?
I'm not using mine enough. And I gave it to my son and now he has it. And I've I've come around on it because.
Some of the tools I prefer to use, some of the applications I prefer to use are legitimately better in mobile versions, the Zoom meeting app, the Slack chat app, the mail application.
I like those better than I like the desktop equivalents. I prefer to use them on mobile, but my phone is too small and I kind of want to have it next to my laptop in a stand, maybe even up like a like on an arm.
So it's at the same level as my screen with a keyboard paired via Bluetooth.
I think that's going to be my work set up switching between applications.
And then I want to be able to at the end of the day, take that tablet home or take that tablet with me and sort of go quasi offline. I can still do all of my pro communications, all my work communications, all my all my biz dev stuff.
But not necessarily like the show research and show prep and all that stuff that I need a laptop for.
And I feel like that that kind of balance where I move off a lot of those electron apps and move them to native apps, well, quote unquote, native apps on on the iPad.
Is sort of a vision telling me is it sounds like what you're saying to me is something that you and I have been saying for years, native is better than electron.
Yeah, I mean, really, a lot of cases where they're just probably.
Rendering web pages inside the way it's like. Yeah, that's true. But, you know, really, if it just works better, that's what I'm going for is that's where the division of labor is going to be is those types of applications go on the tablet.
And it is kind of like having a second. I've always had two computers on my desk.
And I've just since I was literally a kid that that could collect computers, I mean, middle school, from middle school on to now, I have had two computers on my desk, sometimes more if I could fit them.
And this is been sort of, I think, the evolution of that. Now I'm going to have this and my laptop on my desk.
That's my suspicion. I know I'm crazy, but maybe guys like you finally gotten to me, right?
You're not crazy when the iPad Pro, the first 12 inch one came out. I think we did a show about it and I was all excited.
But then the market just wasn't there for professional software. Right.
So I guess the thing I'm going to respond really quick. Sorry, I don't mean to interrupt.
It's just before we go too far off topic. Emily plus plus is why not just put an external monitor on an arm and hook that up to the laptop?
Because then you have the keyboard and all of that. It's mainly a preference of the applications. I just don't think there is good on the laptop.
And not only is it the applications, specifically mail, mail spring is good on Linux, but.
I need something much more robust. I deal with a lot of email from both the J.B. audience and also Linux Academy.
I deal with a ton of email, so I need something and I have like six or seven or eight accounts.
Why don't you just ignore most of your mail like I do? I try to. Yeah. Yeah. That has caused other problems.
I actually don't do that. I reply to everybody usually. So the mail spring application is OK and it does do that.
But I want something more robust. And the other thing is, is those applications.
Not only are they better on the iOS version, but it means I can remove them from the laptop.
So the laptop is doing less things. It's consuming less memory. It has less CPU drag and all of that stuff is contained on the iPad.
So if I want to go into full research mode on the laptop, I want to go deep on a topic and I don't want any distractions.
I don't have all my messengers blaring at me. Every new meeting request and email and telegram that comes in and slack message that comes in will be confined on the iOS device, which has a sophisticated D&D and downtime management system.
And the laptop will be a place of work where I can write or research or prepare.
And that to me could be a very valuable division of labor that I can very easily just turn on.
No distraction mode. I don't know. I could be wrong. I'm going to experiment with it.
If they release an iPad pro soon, I may pick it up and give it a go and report back.
I might pick it up, too. Well, no, because I honestly want to see that Star Trek future where we have professional software and tablets, especially because you and I travel like, you know, we're like hobos, basically.
I know gypsies. I literally am. I literally live in an RV and I move it around all the time.
Like it. Bless me, Father, for I've seen it. Can I make a confession? Yeah.
One of the most versatile travel devices I have is my Windows convertible HP Spectre. Oh, really?
Because it's just super. Well, if I'm walking around like a hanger or whatever the hell I'm doing, I can use the pen and make notes or.
So you like having the pen, huh? I hadn't really made love. I hadn't gone that far yet in my decision process, but it's heavy, right?
So if I had like a 12 inch iPad pro with a better dirty little secret that iOS developers won't want to tell you, the Apple pencil sucks.
The pen support on Windows is a lot better. Like, I just want to say this again.
WinRT was great. Wow, I think that's that's that's almost it right there in the show. I think it is actually.
All right, Mr. Dominic. Well, hopefully I'll survive, meet BSD and be back for an episode, which as far as people are listening, will just be at the regular time.
Coder dot show slash RSS. If you want to plug the feed directly into your client and Coder dot show slash subscribe.
If you want all the various links, you can click and Coder dot show slash 330 for links specific to this episode.
Mr. Dominic, is there anywhere you want to send people? Go to the mad botter dot com and add to Manuka on Twitter.
I will. I will do that. You can follow me on Twitter. I'm at Chris Ellis. The network is at Jupiter Signal.
And if you're going to be down in California and meet BSD, I'll see you there.
And if you're going to be in the U.S. and you're going to be in the United States, I'll see you there.

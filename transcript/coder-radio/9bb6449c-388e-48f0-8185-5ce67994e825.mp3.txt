This is Coder Radio, episode 367, for July 22, 2019.
Hello, everybody, and welcome to Coder Radio,
Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business,
software development, and related technologies.
My name is Wes, and I'm very pleased to be joined by the one, the only, Mr. Michael Dominic.
Welcome to the show, Mike.
Hello, hello, Wes. How have you been?
Oh, my, I'm doing great. You know, it's going to be somewhere in the 80s today out here in the Pacific Northwest,
and that makes most people freak out, but there's been a heat wave in the U.S.,
so we're all sitting pretty cool over here.
How are you doing over in the swamplands of Florida?
I am good. I actually just got back from a trip.
I've been traveling since 4 a.m., so it's great. It's great.
But, yeah, I am back in the swamp where I belong.
That says everything I need to know about you, Mr. Dominic,
because you showed up here nevertheless, and I think we've all been there.
We know how terrible travel can be.
Yes.
That doesn't stop you, though.
So, an example of that, last week we had an episode that we pre-recorded,
which I enjoyed a lot, called The Functional First, and that was you helping me out.
I was traveling. You accommodated me.
So, the theme here, Mike's great. The show goes on.
You can find it all at coder.show.
You can subscribe, follow the RSS, and it'll always be delivered right to you.
Speaking of Functional First, we got some feedback on that episode over at our subreddit.
Yes, there's a subreddit, coderradio.reddit.com is how you find it.
Friend of the show Tyler writes in,
This was my favorite episode in a long time.
Well, thank you, Tyler.
As a C++ developer working on a large, primarily object-oriented code base,
I've been writing ever more C++ as just a pipeline of data transformations.
As you guys mentioned, you can get a lot of benefit, even in an OO situation,
from wrapping a functional core, so to speak, up in an object package.
Tyler goes further and actually recommends two talks that really changed the way he thought about some of this stuff,
and the first one is one I've seen and really love and should have linked in the last episode,
so you'll find it in the show notes for this episode,
and that's Gary Bernhardt's talk, Functional Core Imperative Shell.
And I think that's, I mean, that's just a great name, and it kind of describes a lot of the idea.
Yes, you have to have side effects. Yes, you have to do imperative mutable stuff.
But that can all live at the edges, and you can have a core of nicely defined peer functions,
and that talk goes a long way to explaining all that stuff I was rambling on about last week.
If you're interested in C++ stuff, he also recommends one more link,
which is Postmodern Immutable Data Structures,
which talks about how some of this stuff works in the C++ world.
Yeah, I think one of the key things, the key takeaways we were trying to get through to people was,
in terms of dipping into functional programming, you don't have to drink the Kool-Aid
and go full Haskell or F-sharp or Clojure or whatever.
You can take some of the concepts and the methodologies, or the strategies rather,
and implement them and use them in, again, in this case, C++, right?
Yeah, and I really appreciate your inputs on that episode for that reason,
because I get to use some languages, I choose to use languages when I can
that make it a little easier to be functional first,
but you're actually selling software to real people who don't care about the technical details, right?
They just want a product from you that works, and you just got to make it happen
in whatever language it already exists.
Yeah, they don't really care about it at all, to be honest with you.
All right, well, if you guys want to send us feedback like Tyler did,
and we would love that, we always appreciate feedback at the Coder Radio program.
We don't always have time to read all of it on air, but we do read all of it.
We take your links, your suggestions, your criticisms all to heart.
Coder.show.com is the easiest way to get in touch.
Now, of course, you can also find us on Twitter, and, well, I follow you, Mike.
That's my admission for the day.
I noticed you tweeting about something I didn't really expect,
and I'm sorry if that's a judgment call that is maybe misplaced,
but you were tweeting about Emacs the other day.
Yes, I was.
So little known fun fact, my first editor I used professionally was, in fact, Emacs,
or I should say, yeah, semi-professionally.
And then I got a job, and the guy was, let's just say,
not neutral on the VIM Emacs war in favor of VIM, and literally did not allow Emacs.
Like, not at all, just not even to enter the building.
If you worked, if you were on the team, you used VIM.
Wow, that's, you know, obviously I've seen things like that
for more complete development environments.
You know, if it's like, okay, well, we all use IntelliJ on the team,
and we've configured our environment, and we keep all the stuff in source control.
I get that, and I mean, that could work for VIM, too, but it's a little unusual.
Yeah, it's interesting.
So I've been kind of looking at Emacs again just to say, like, you know,
it's always been just an itch I've wanted to scratch.
And you actually sent me a link to something called SpaceMax,
which is pretty interesting.
Can you go into a little bit of what is this versus, let's say,
proper good new Emacs, or maybe vanilla good new Emacs is more fair?
Well, if you weren't lucky enough to kind of grow up with Emacs
and experience learning how to use it, how to write a little bit of Elisp,
how to configure things, well, it's pretty foreign as an environment in 2019,
especially if you're coming from something like IntelliJ or VS Code.
SpaceMax is an Emacs distribution, I guess.
It focuses on the evil layer, the VIM emulation.
So as a VIM user myself, I thought that was great.
They basically just ship you like a very nicely configured Emacs
right out of the box.
And I should be clear, if you're an Emacs user, power user,
someone who knows what they're doing and has their own Emacs file,
okay, maybe this isn't for you, you've already figured that out.
But when I was trying to learn and kind of play with Emacs a little bit,
one of the driving reasons was playing with Clojure,
and Emacs being a Lispy sort of environment,
that's where a lot of the best plugins were.
But I didn't know Emacs from the back of my hand whatsoever.
Thankfully, SpaceMax was there for me and made it easy to install
all the plugins I wanted and comes with a nice dark theme
right out of the gate.
So tell me a little more about VIM emulation,
because that seems to be the biggest pushback I got
when I started talking about this on Twitter was,
but every machine you're going to SSH into probably has VIM on it.
So Emacs has Evil, which is the extensible VI layer for Emacs,
and it basically provides a whole bunch of key bindings
that you're familiar with.
Wait, it's called Evil? That's amazing.
The free software community generates some of the best names,
I've just got to say.
It's not going to be like picture perfect compatible,
you know, like if you're a master VIM user,
there's probably some things that Evil doesn't have for you.
But if you're just looking for a similar editing environment
with similar VI style movements, well, boom,
just look no further than Evil.
So if you'd like to try Emacs and not sell your soul,
you could, I guess, use SpaceMax or GNU Emacs,
but I personally am going to drink that demon blood and go Evil.
Yes, and so Evil is like a module you can install.
You could use SpaceMax or just install Emacs from the repo.
And that's what it's like when you're using SpaceMax too,
I should say.
So like you just install Emacs like usual.
Installing SpaceMax is basically installing their pre-configured
configuration directory for you, right?
So they've set that all up ready to go,
and then they've got some nice documentation guides
to kind of guide you through that.
And I'm sure I sound like a complete novice to anyone
in our audience who's a master Emacs user.
So if you have tips, if you've got better ways
that Mike should be exploring,
maybe SpaceMax is a horrible abomination in your eyes.
Let us know.
If you're a master Emacs user, does that make you an Emaster?
Oh, I think it does.
I am kind of curious, like what do you use it on the day to day?
What's your preferred IE?
Do you like a text editor or you want something more full featured?
Where do you fall on that spectrum?
Yeah, I am pretty deep into the JetBrains tool chain,
although I have been leaning on VS Code a little more,
which is why I'm like, well, maybe I could go back to like Emacs or Vim.
It's funny because the more and more I'm thinking,
I can't decide if I still like the big heavy IDEs or not,
because there is something just like very nice about, you know,
being on, you know, on a gnome terminal or terminal
and just, you know, Viming open or VS coding a file
and working with it right now.
The problem is what I've done to my VS Code,
it's gotten to the point of its own weird IDE
for a bunch of languages and now it's written in Electron.
Yeah, it sure is.
I mean, I will say as an Electron app,
VS Code is one of the snappier ones out there.
I think it's one of the best, right.
This is probably going to be a failed experiment
and I'm just going to go back to, you know,
insert JetBrains tools here,
only because I've been using them a long time, right?
They have RubyMine, they have RubyMine and PyCharm
are kind of the two I use a lot.
I occasionally use Sea Lion,
although I find that one a little less polished than the others.
That's one of the ones I have not actually tried.
Yeah, well, it's just because there's like such a wide variety
of C and C++ out there that I think when I last used it,
Sea Lion wasn't exactly as mature as, say, a RubyMine
or obviously IntelliJ, their Cadillac Java IDE
I use anytime I'm doing Java.
Cadillac is probably the best term.
I don't know about you, but I think I've met developers
who couldn't run Java C on the command line
to save their lives.
Yes, yes, I have to say I kind of hate Gradle
without IntelliJ, so there is that.
Even though now it is less crappy and just like, you know,
what is it, Gradle build, Gradle install, whatever.
Yeah, yeah, you're right.
So does that mean you're like a comfortable
VI-style key bindings user?
Yeah, I'm pretty comfortable with Vim bindings.
I do use them occasionally,
like my RubyMine is set up with Vim bindings,
which is, of course, imperfect, right?
I'm not sure that I need everything I'm getting
with the full IDE, right?
And some of it's kind of obnoxious.
RubyMine's a bad example,
because I actually think that's one of the better ones.
Actually, I'm interested in that.
So let's circle back after you're done.
Sure.
Like Project Rider, which is their,
and I'm only saying JetBrains stuff
because I predominantly work in their tools,
is their.NET IDE.
For some reason, in one of the more recent updates,
actually, I think it is the last one,
they suggest a change that violates
the Visual Studio style guide.
So if you make the change it suggests,
because it thinks you're violating the style,
and then you open it in Visual Studio proper,
Visual Studio complains.
And it's like the dumbest thing about casing.
What I know is people are going to write in,
well, you can change that and have your own style guide.
I do like to keep it just to.NET Core's
default style guide for obvious reasons.
Sure.
So that's like mildly annoying to me,
and it seems like it was just a decision that got made.
Again, I think that is a tool that's going to get better,
but it is one I think is actually their newest implementation
of their IntelliJ platform.
And it's particularly on Linux,
it can be rough if you're trying to do Xamarin.
In fact, if you Google Xamarin Android Forms on Linux,
you will see my little mad botter guy,
because it's me, in the support forums,
trying to work it out with other people
and the JetBrains folks,
because there's a bunch of breaking issues.
Interesting.
So I was also curious there, you were talking about RubyMine,
and I'm most familiar with their products through IntelliJ,
where they've implemented a ton of really fancy
static analysis of Java to make it, you know,
it's a much more interactive environment,
even though Java is so static.
And it can generate tons of code boilerplate for you,
and it can jump to definitions,
and all kinds of much fancier features.
How does that compare to RubyMine?
I mean, Ruby's a much more dynamic language.
Does it have all of those superpowers,
or does it go about it in a different way?
It does, yeah.
So we can do some pretty advanced refactorings.
And the one dirty thing about Ruby developers,
particularly Rails developers,
is Ruby is a nice, dynamic language
that everybody uses hardcore linters for
to basically enforce style and a bunch of rules.
I'll give you an example.
The most common one is something called RuboCop,
which I'll link in the show notes.
Oh, I am familiar with RuboCop, my friend.
We've waged a few battles back and forth in my day.
It goes too far into what I would consider opinion.
Every time, okay, let's take this tangent.
Every time Ruby comes out with a new one-line way to do something,
the containers of RuboCop,
just like something happens to them,
they feel like that has to be the correct way to do it.
And then it complains constantly at me
that I'm not using the new fanciness,
which if you have code bases that are relatively a couple years old,
that can happen quite a lot.
And if you're OCD like me and want to get rid of all those warnings, yeah.
RubyMine has its own linter for Ruby,
and it is much more basically one of the accepted Ruby style guides.
I think it's a pretty reasonable accommodation
to what an experienced Ruby developer would say is the, you know,
accepted style, where RuboCop is, I don't know,
I feel like it's the apple of linters.
It's like pushing you forward, right?
It's trying to get you to like update everything.
Ah, so RubyMine, it's easy to have the benefits of a linter,
especially as you say in a dynamic environment,
but it's not the same sort of, you know, with RuboCop,
you either got to do a lot of kind of careful tuning sometimes
or make sure you only stick to the stable releases.
And you might have to do some work integrated into a project,
but maybe with RubyMine, you kind of just start using it,
get the benefits and not have to make dramatic changes across your team.
Yeah, I mean, the one big advantage of RuboCop though,
because it does go so far into stylistic things,
you could basically just make it your company style guide
and say we all use RuboCop and warnings are not acceptable
so that you don't have different styles in the same code base.
But that assumes like a greenfield project.
Yeah, that makes sense, right?
And maybe you've probably integrated it into your CI system
so it'll warn you as you go through it.
Yeah, well, you could actually integrate it into VS Code,
in particular in Atom.
And actually, I think there's a plugin for RubyMine for RuboCop
if you want to go that way.
You know, I'm sensing a CoderRadio future special here,
which is Mike pimps your Ruby setup,
because I wouldn't mind it and I bet there's some audience members
who wouldn't mind it either.
All right, here's the key, spinning rims.
Ooh, shiny.
You know what else I bet is pretty shiny, Mr. Dominic?
Not that you have one, but if you did,
well, it'd probably be your Tinder profile
and it would brag about your lead IDE setup, no doubt.
I saw some news I wanted to ask you about
because, you know, the app developer that you are,
Tinder has now joined the growing backlash
against App Store taxes by bypassing Google Play, right?
So, instead of going through Google Play
using the credit card stuff, paying that 30% tax,
Tinder has joined companies like Spotify and Netflix
and saying, hey, give us your credit card,
we'll bill you directly.
What's happening here, Mike?
And is this a sign that something's going to have to finally change
in the industry, or are these just the big players
who can do it using their muscle and getting away with it?
I think both of those things are true, right?
I mean, you know, I've been, I don't want to use the word railing,
but I guess railing is technically true,
for years about how 30% for small businesses like myself
is just too much money.
And in the past, I think it was a weaker argument than it is today
because, like, it just does not cost that much
to host individual apps anymore.
And, you know, credit card processing with things like Gumroad,
which is where I used to sell my Mac apps,
and frankly, Stripe's API is awesome and very affordable to use.
It's ridiculous, right?
Like, having said that, you know,
if I were to release a mobile app soon,
I would certainly not go through any of this effort
to avoid the Apple tax or the Google Play tax
because I'm not Tinder, right?
I'm not, who's the other guy, Fortnite's doing it too, right?
Oh, yeah, that's a big one too, right?
I mean, plenty of people spend on gaming on mobile.
And they're doing it on Google Play though.
And they're, like, when it's millions of dollars, that 30%,
I definitely see where they're coming from.
I do wonder, and I'm sure they'll never tell us,
classic, like, startup business development thing, right?
This is the business part.
The harder you make it for someone to purchase something in an app,
every dialogue box, every field you require them to fill out,
peel off some percentage of your purchasers.
Right, right.
If I can just hit pay, give you money right now through Google
that I've already set up, that's a lot easier.
We're all sick of entering credit card details.
Right, which is, like, the primary advantage of the App Store
in app purchase system, which is why, like,
if I were to release, say, an iPad app,
it would absolutely use Apple's IP.
I would love to know what the leakage rate is, right, for Tinder.
Like, let's say, let's just play numbers, 20,000 people a month,
I don't use Tinder, I'm married, so I have no idea.
Do you know how it works? What do you buy in Tinder?
A lot of those dating apps, it's premium plans, right?
So you get some base feature amount, but if you want to say,
you know, you swiped left on someone,
you said you weren't interested, but you messed that up
and you want the ability to go back and undo it,
well, pay $5 a month and then you can.
Right, so, okay, so it's like a LinkedIn premium account almost.
Exactly.
Okay, well, what LinkedIn does in this case, actually,
is they think it's slightly cheaper if you buy it on the website,
but I think for Sales Navigator or something.
But yeah, I would love to see, like, what per, like,
if out of 20,000 people, they would normally close the IAP,
you know, 15 or 10 or whatever,
what is the new number going to be forcing them to go to the website
and enter their credit card and do it that way?
That is a great question.
What do you think the right number is, right?
Google should get some cut, maybe, for enabling the platform
and, like, providing a whole bunch of APIs and stuff
and payment systems, and if 32 much is unreasonable,
I mean, should it be some sort of sliding scale
or just a lower flat rate?
It currently is a sliding scale, right?
So if you do a subscription model
and it's the annual one on the second year, it's 15% now.
The problem is, and what I've seen,
particularly like I'm trying to find,
I'm on a quest, and we could talk about this in another show,
for a very specific iPad app that I want when I travel,
and if I can't find it, I'm just going to write it,
because I keep needing the same thing every trip.
But this is an app you would really just buy
and not subscribe to, right?
I mean, I'll just, you know, use an example,
like, podcast players, all the big ones now,
are making you subscribe to your podcast app,
which, coming from at least my position of, like,
having been a more traditional Mac developer in the past,
makes no sense at all to me.
Right. We've entered this era of,
everything must be a subscription service.
And for something that makes sense,
and you want, like, continual revenue
with the presumption that improvements will be coming to the product.
But for a lot of things, you're like,
I just want to buy a hammer.
I have it. I need to do this one thing with it.
If you never update it again, that's fine.
Give me the hammer. I'll give you 10 bucks.
Yeah. Like, I am, and this is Mike's tangent.
I had to buy Office for somebody,
for a relative this past week,
because, you know, they're older.
They didn't know. They just didn't. They couldn't do it.
They needed a hammer.
I went to the store to buy Office, to Best Buy.
A physical store.
Like, you got away from your computer.
You found your keys. You got your wallet.
You got in the car. You drove to the store.
Then you walked down the aisle and located
the physical boxed version of the software.
Is that what you're saying?
No, because there was no boxed version.
Wow.
So you were just left looking like an idiot,
asking, do you have software here?
You know what it is?
It's just a key code. It's just a code, a license key.
That's all it is. You're buying like, it looks like a gift card.
And the best is, the salesman was killing himself
to get me to buy Office 365,
instead of the traditional, you know, small business,
whatever it is, home business license.
I stuck to my guns.
Even when installing the, you know, the standalone,
perpetual, whatever year, Office,
it still required you to sign in with a Microsoft account.
Then after you had just spent 200 and something dollars
on this license, it tried to hit you up
to sign up for Office 365 anyway.
Of course it does.
It's ridiculous. Can't you just buy Excel?
It's just crazy to me.
I, as a Linux user, I appreciate some aspects of Office 365,
just for letting me operate in that environment in a nice way.
But you're right, like it's just,
it was one thing when these were additional models,
you know, like, oh yeah, or if it makes more sense for you,
here's this other way to use our products and pay for it.
Great, fine.
It does feel like they're just trying to deprecate the,
you buy software and come close to kind of even something like
own it anymore.
Soon, I mean, it might be a figment of our past imaginations.
Exactly, exactly.
So what do you, I'll put the question to you.
What do you think the right number ought to be
for the App Store percentage?
That's a good question.
I don't think I have a hard number to say.
How do you value the platform, right?
Like, how do we make a good accounting of all the services that are provided?
Because, I mean, obviously, they just get to say, right,
like it's their platform.
Well, we should actually know Spotify and a few other companies
are suing because of this very issue.
Right, so we may see.
You know, when it's a healthy environment,
when there are enough options,
when they're actually making good investments,
then a slightly higher fee would make a little more sense to me.
But if it's just sort of a monopoly tax, you know,
like, well, you have to play on our game,
and we have a store you have to use, so here you go, pay us money now,
that feels a little bit worse
and doesn't really help the end user very much.
I mean, and the side of it that is a little weird is like,
just because I mentioned Spotify,
where you are now competing with the platform vendor who you rely on,
and they are taxing you 30% to compete with them.
That's where I think it almost gets weird.
In a way, I kind of don't care as much as I used to about the 30% cut.
I just almost feel like if you are in the business of being a platform vendor,
you should not also be an application or service vendor,
which I know is like never going to happen.
But you see what I'm saying,
like the temptation to screw over your competitors
is just a little too juicy, in my opinion.
Yeah, you're right.
There are some weird, maybe even perverse incentives at play here.
So, all right, there's another topic I wanted to pick your brain about,
and there's, I think, another set of perverse incentives at play.
You brought this up in our off-show production chat,
and that's the recent little Twitter storm over 10x engineers.
What's going on, Mike, and what's a 10x engineer?
Oh, that's a great question.
So, what's going on is some startup guy whose name I don't recall,
but it's kind of not super important for the story.
Shikhar Karani.
Founders, if you ever come across this rare breed of engineers, grab them.
If you have a 10x engineer as part of your first few engineers,
you increase the odds of your startup success significantly.
So, first off, I don't know if I'm a 10x engineer,
but if you are a startup founder and you see me and you just grab me,
I might punch you.
So, just bad advice.
Yeah, I mean, 2019, you got to get consent now.
You have to, like, maybe a brief written contract,
general grabbing agreement or something, right?
Yeah, so, okay.
So, he's asserting that there are these magical people called 10x engineers.
I think we've all heard this term for years now.
I kind of don't know that they exist,
but there are definitely people who are more, like,
I call them math savvy than I am.
Like, I would consider you one of these people.
Like, you are able to go more down into the kind of mathematics fundamentals of things
or is that just because you use Clojure and that's how I see it?
Well, maybe.
Where I tend to work with a little more abstraction,
except when I go insane and start coding to boards, but we won't worry about that.
I don't know.
All right, let's take a step back.
Have you ever met a 10x engineer?
And if so, like, what is the profile of that person?
Who is that person?
Yeah, and that's what a lot of the threads kind of spend some time trying to suss out.
And honestly, when I first saw it, it was kind of hard to tell how serious all of it really was.
Now, I do think we've all met people,
and I don't even want to say people because time and context, I think,
is one of the key parts that isn't brought up enough in this discussion.
But I think we've all been in context where there have been people around us
who were able to accomplish an incredible amount, right?
Either they knew the right things, they had the right tools,
they were able to combine all of that together,
they defeated distractions or questions and delivered the remarkable work.
And I think it's reasonable to want to assess how that happens.
But it's probably dangerous to enable too much cult of personality.
There also seems to be a little bit of, is there like an exploitation factor here?
I mean, obviously, you know, the employee-employer relationship is also at play.
It just feels bad to me to even have the label.
And I'm almost looking at it from another perspective of, you know,
I think I tweeted something snarky about this when somebody mentioned it to me.
I said it to you in Slack, that's right.
What I really hear is, you know, the hot thing used to be full stack a couple years ago, right?
And what I really heard when all these startup guys would say,
I need a full stack engineer is I don't want to pay a back-end and a front-end engineer, right?
I would like two jobs done for 1.25 or one.
Right. I'd like to pay, yeah, approximately a little bit maybe,
a little bit more maybe than one salary and do everything that I need, please.
So, okay.
You know, there definitely is the type of software developer who is very good at coding.
And I think this is something some of the other people commenting on this brought up.
But it's kind of, how can I say this politically correct, a gaping defecation hole.
Yeah, you know, I've been lucky enough to work at some places in the past
that had at least a talk about, you can argue about implementation,
talk about like a no assholes policy, right?
And the idea is even if you are this incredible engineer,
like you don't get to dictate what happens, you don't get to be a jerk.
And I think that plays into that personality aspect.
Like there are so many skills that go involved.
Like you might be able to sling code really well,
but especially in like a larger enterprise environment,
there's a lot of social aspects that are at least as important as that
to the overall operating of a team or an organization.
It also seems to be just sort of bad statistics sort of stuff.
Like yes, clearly like there are people with different ranges of those skill sets, right?
Some people are good at doing code review and mentoring.
Some aren't.
Some just want to be like down in the weeds and can write super fast,
correct network stack implementation.
And others are really good at modeling data pipelines, right?
Well, there's all different skill sets.
So we have to be careful how we judge that.
It also seems like even within those skill sets,
yes, there's a distribution of skill.
Focusing on the 10x developer is one way to look at it.
But shouldn't we also be looking at the other extreme?
Like what are the problems going on?
This is why I like to talk about functional programming so much as one aspect, I think.
Like what are the problems going on that are preventing more of us from being more productive, right?
Do we not have the right tools?
Do we not have the right knowledge or assistance or skills?
Maybe we can't all be 10x developers, but I think we can all be better than 1x.
Yeah, I mean, I definitely think it's –
you get dangerously close to things like process, expectations.
You know, there's a lot of like management-y things.
Like for instance, I'm thinking about this from a contracting perspective.
Was the job just like massively underbid, right?
Because no matter how good of a developer you are,
you're never going to actually be successful in that job.
Right, you've already set yourself up for failure.
Are you running any form of waterfall?
It's just not possible, at least for as long as I've been doing this,
to actually have a customer who upfront knows everything they want.
And then once you have a waterfall, and what I really mean by waterfall, I mean fixed bid,
you're just going to end up in a fight because you do have to get paid for your work,
but they may decide that they want something different, right?
And you're always doing this hostage negotiation,
which is why you should do agile hourly contracts all the time.
It ends up being cheaper for the customer, less stress for you.
It's a harder sell to people, like, you know, people who aren't really in the industry,
but most anybody coming from an engineering background,
unless they're like literally building bridges where it's a little different,
is going to know that like an agile process is going to work better.
And I know that's a big statement, and I'm happy to hear any feedback,
but if you are like a waterfall guru and you can tell me like there's a way to do this, great.
I have not seen it work because just the upfront cost of trying to even do any kind of that waterfall documentation
is generally very high, and I have done it.
I used to sell it as a service.
You just don't know, right?
Like the customer is never going to know everything that they want upfront.
I mean, how could they? They haven't seen anything.
Right, yeah.
Yeah, I do like, I mean, what you're saying, I like the chances for more review, more flexibility.
That's an interesting point, and I've certainly seen that go pretty wrong myself.
One person whose thoughts I appreciated in this whole discussion was Antires of Redes fame,
and he had a great blog post kind of detailing some of the,
talks about some of the issues with how we're talking about the conversation in general,
but then also just had a good list of how you might talk about programming productivity
and some of the things that you might need, right?
Like you got to know how to break things down into small tasks and be able to get those sub-tasks done,
and so an example might be for you, Mike, right?
Like if you've made Rails apps, web servers, web sort of backend apps, worked with databases, a whole bunch,
that means there's a whole list of sub-tasks that are just cached for you, right?
You're like, oh, okay, I need another REST endpoint.
No problem, let me just bang that out in an hour or two, and it'll be done.
But if you're coming from a different world, you're moving from the embedded environment, say,
that's a lot to figure out for the first time.
Yeah, I mean, and there's, I mean, I will say there are signs of good, or let's say above average developers, right?
Like having a toolbox of scripts or like, I guess, in the world of Docker, container configuration files
that you just have pre-ready to go and that you reliably use, right?
Yeah, I mean, I can't tell you how many times I've set up Rails and DoKu and Postgres, right?
Like, seriously, I must have done it hundreds of times by now.
Even in openSUSE, place.
Even in openSUSE.
Yeah, he's got some other good points that are definitely worth checking out, you know,
things like not chasing perfectionism and making sure you keep simplicity in mind.
Dear audience, I'm sure you probably have some thoughts on this whole discussion debate
and maybe some thoughts about what you value when trying to assess your fellow coders out there.
If you do, please let us know. We'd love to hear it. coder.show slash contact.
Mike, you've had a long day. I think that means we should take this moment to wrap up today's episode.
If they want more of you, though, especially Sleep Deprived Mike, because he can be fun,
well, you're also on Twitter, right? What's your handle again?
Add to Minuko, but I will try not to be fun today.
Yeah, that's probably best. You deserve a very long nap.
I'm on Twitter as well. I'm at Wes Payne, and of course, the whole network's there too,
at Jupiter Signal.
If you want to subscribe to this show, well, that's just coder.show slash RSS for our direct RSS feed,
and you can go to coder.show to find all the links for everything else you might want,
including our back catalog, show notes for any particular episode, and links to just about everything else.
If you want to check out other great Jupiter Broadcasting productions,
just head on over to JupiterBroadcasting.com.
Thank you all for joining us. We'll see you right back here next week.
I'll see you next week.
I'll see you next week.

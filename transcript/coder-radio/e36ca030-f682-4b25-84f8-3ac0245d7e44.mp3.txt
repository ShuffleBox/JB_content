This is Koda Radio, episode 349, for March 18th, 2019.
Hello, and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business of software development and related technologies.
My name is Wes, and I'm joined by Mr. Michael Dominic, who this week was actually trying to get some work done before I interrupted him to do this here show. Hello, Mike!
Misa wasn't working. Misa was preparing to overthrow the Senate.
Ooh, okay, I like the sounds of that. Either way, pretty important stuff that we interrupted, so I appreciate you taking the time, Se√±or Jar Jar, to join us today.
No sorries.
It does sound like you have been pretty busy, and that's always good, because I imagine, maybe not today, but someday soon, that's going to feed its way right back into this here show.
You got that right.
Speaking of feedback, we love all the feedback that you give us. Koda.show slash contact is the easiest way to find that, of course. Last week, we discussed a little feedback from our friend Tom, all about, basically, do people need to worry about Chrome's dominance the way we did in the horrible old days of IE6?
And we were kind of inspired by Tom's feedback last week in Koda Radio 348, thinking to ourselves, yeah, okay, maybe not. Maybe we do have a diverse enough landscape. Unfortunately, this week, well, Microsoft really dropped some big news on us.
They've got their latest version of Skype that only supports Chrome. Despite, of course, as you always do, right, some enterprising hacker out there, going to replace the user agent, go try it out, and it seems like, actually, as you might expect, it does work on all the other standard compliant browsers.
Yeah, well, you know, there's actually a very complex technical reason the JavaScript developer would do this.
Let's get in the weeds here, Mike. Break that down for us.
Hang on, let me pull my Knuth books down here and do some research. It's called Laziness.
So, basically, they just don't want to support the other browsers, which is amazing. The Ars Technica story you sent me, Wes, just boils it right down to, yeah, they kind of only want to have to be bothered to test in Chrome.
You know, I can get that because it's true. We're really all just lazy, terrible humans. But, man, it's very frustrating in a philosophical sense because we've worked pretty hard and we do actually have a market with multiple different implementations of a standard.
Such a blatantly ignored, especially when I feel like we've been trying to give Microsoft lots of credit for doing things out in the open, being open source, playing nicely with those communities. This feels kind of like it's walking that back.
Yeah, it's very strange, too. And I definitely get some of the feedback that we've been getting that, you know, are we blowing this out of proportion? But I remember the IE 6 days. It was very, very much not fun.
So I don't know. I do sincerely worry about a kind of Chrome monoculture. And, Wes, where do you come down on that? I think you do, too, right?
Oh, yeah, I definitely do. I mean, I'm a Chrome user out of practicality, and it's not my exclusive thing. And I end up using Brave a lot on my phone. I also really like Firefox Focus there. And Firefox is my go-to browser for a lot of workloads.
Not all of them. Some of my personal stuff, especially since I end up using the Chromecast for a lot of things, does go through Chrome. But Firefox is always there for the serious work.
And especially, I just really love their development console. Chrome is fine, too. But there's something about Firefox. I think it's because it was the first one that I really started playing with. And they just get it right.
Well, have you tried the Firefox developer edition? Oh, you know, actually, no, I have not. It's basically a little spin, if I can steal the word from canonical, of Firefox that's kind of souped up for dev.
So I run Firefox as my daily driver. I only launch Chrome to record the show and for testing. And I do most of my day-to-day dev in Firefox developer. Because fun fact about Firefox, they're the only browser who doesn't deviate from the way the standards are supposed to be implemented.
Oh, I know, right? Like, they're very consistent. I love Mozilla has some great standards and just various web documentation out there, too. So it's nice to be able to read that and then just actually see it work in the browser exactly the way that you think it should.
Yeah. Oh, their docs are awesome. Yeah.
So, I don't know. We'll see. Hopefully, now that there's been a little press and pressure, maybe they'll put in a little time, decide that it's worth it to support some of the other browsers because, I don't know, they have so much money, right?
It's not like it's a cash problem. They have developers that they can task with this.
Wait, I thought they were a startup. They have money?
I think so. That's what I've heard. At least when you drive by their campus over here in the great state of Washington, it looks like it.
The one in Tampa does seem nice, too.
Yeah. So, I don't know. I guess it's something, let's not bloat out of proportion. Let's not spend too much time on it today.
Yeah.
But it's just something to pay attention and, you know, if you can, it always helps for the small people out there. Use other browsers, test stuff, and submit bugs or complain about it if it doesn't work.
Absolutely. So, we have a much more serious issue up next, unfortunately.
Yeah, and I'd love to get your take on this because you spend some time working, if not directly in this space, somewhat adjacent.
Yeah. So, I'm sure if you guys follow current events, you know that Boeing 737 MAX in the MAX Park is actually important.
Crest in Nigeria, obviously a number of people were killed, right? Very sad, very horrible story.
And there's been quite a lot of conversation around the aerospace engineering community and avionics.
For the sake of sanity, I'm going to continue to say aerospace. I know there's a difference, but saying aerospace slash avionics every four seconds isn't going to make this better.
So, there is, Wes, a thread of reasoning that is blaming, it really depends on who you want to ask, right?
There's, you know, there's some conversation. I think this is where we're going to want to focus for the show about the way the software was written.
So, like a software engineering, I wouldn't say bug, but bad.
And we should acknowledge, much like in regular consumer vehicles, the amount of software and the way it's presented, that's all been ramped up and changed over the years.
Yeah, and that's something to think about. Basically, the software, and I'm going to grossly simplify this, the software would override the pilot's commands.
So, you know, obviously the inputs it's giving from the pilot, depending on one sensor or two sensors, rather, that without telling the pilot, which is the important part.
So, the pilot thinks he or she did X and the software might go ahead and just do Y. That is a gross simplification.
The other side of this argument is, well, the manufacturer of the plane, Boeing, in an effort to compete with a Airbus at a certain price point, which again, the details, if you're not into this field, you don't need to worry about like Airbus and Boeing being constantly attacking each other.
Kind of didn't design a new plane and sort of, and when I say kind of, they didn't design a new plane and they just retrofitted one that, my details might be wrong, but I believe it was originally designed in 1968.
Yeah, it's like some almost 50 years old now.
But they faced a few crucial issues, like they needed to put bigger engines on the plane because they wanted it to be more cost efficient in terms of fuel usage.
They got newer, fancier engines, but those are just bigger.
They're bigger and the actual original design doesn't allow enough distance between the ground and the actual engines, right?
So it's, yeah, I've seen a number of lines of argument.
We have some notes in the show notes.
If you really want to dig into this, this is obviously an ongoing thing.
But while I am more, from what I've been reading, what I've been following in the news, it definitely seems like a case of, unfortunately, like bad incentives of cost cutting and reusing a design instead of going back to the studs created a problem.
But there is a fair point about, you know, this is software played a part in this, right?
I don't think it's the primary issue, but it absolutely played a part.
So I'm wondering, Wes, and I think we should pull out from this detailed story because I know like a lot of people here have nothing to do with this field and don't want to get into like the, well, was it that they didn't have enough sensor backup, right?
Or was it, you know, that another issue here is the government was shut down, so they wanted to get an update out and they couldn't.
And that's always the thing, and it's important to remember at events like these, it's almost never like a single root cause, right?
It's a complicated contribution from multiple aspects that many things fail or just were overlooked, and that's what creates catastrophes.
But I think it is a good lesson for all of us in this field that we, you know, you may be working on some sort of backend web service that isn't directly responsible for people's lives, but there is software out there that does that.
And we need to think about it carefully, and especially when you get down to how humans interact with software, it's pretty difficult.
Especially if you're not a commercial pilot and you end up working on some of these systems, it seems fairly difficult to put your mind into the way they think.
And then you can, even if it's clearly documented and there were issues here around, did they get access to that documentation or were they notified they needed to look in that documentation?
That's another issue, but it seems like some of the interface changes were pretty counterintuitive, right?
Like especially, like you couldn't override some of the trim settings using the yoke like you normally would. That might be fine, right?
In the abstract, sure, you can change stuff. You change documentation. You point people to it. In theory, done deal.
But human brains and muscle memory just aren't always going to work that way.
Yeah, I mean, there's also the issue of they called it the 737, which it is built, it is like the same base design, for lack of a better term.
But it didn't behave the way the other 737s do.
Right. So it's easy to make an assumption that like, oh, yeah, this is just a slight variant on the point I've been flying for years.
Not a big deal. When in reality, the way it flies and responds might be totally different.
Yeah, I mean, I think the reason the story is important has less to do with like, was Boeing right or wrong or whose fault was it?
And more to, you know, even with the recent Tesla crash from a few months ago, we're going to see more and more cases as we get into automation, autonomous vehicles.
You know, if NASA ever decide a SpaceX, right, we're going to see more and more cases where software is going to potentially be lethal.
And that's that I think that's going to have to force some some conversation about safety and the dirty award regulations.
Absolutely. And we're still, I think, not very even in this.
Right. Like flying is way safer than driving and probably having automated driving cars is going to be safer, too.
But we still, I think, need to work out some of the culture and the philosophy around it, which always is going to move slower for humans than the tech does.
And we're just not very comfortable with that. There's something about, all right, well, I killed myself by being an idiot and driving feels better than the machine killed me.
Yeah, exactly. It's I killed myself. Lay a flower down. My Tesla crashed. Sue Elon Musk.
Right. Unfortunately, that's but we should we should move on from this to a much more uplifting story about a young boy named Luke Spotify fighting the evil empire.
Well, that's one way to pitch this story. Anyway, it is one way that is a certain point of view, as Obi Wan would say, we should come out to like Spotify has their own.
I mean, there's a lot of complicated stuff there, especially just full disclosure.
We are a podcasting network over here, and they've been making some recent plays in that space.
So it's kind of interesting to think about all of this together. And then, you know, there's one side of like the music industry and how that works.
And then their their recent acquisition of Gimlet. But on the flip side, they're kind of the small fry trying to play in Apple's pond.
It's all relative, right? It's all relative. So walk us through with West, how did this all start?
Well, how far back should we go? Because, I mean, we could go all the way back to 2007, the launch of the iPhone.
Back then, I mean, it was a it was a pretty big game changer, right? And when it first started, Apple did not allow outside apps.
That's right. For some reason, it was going to be HTML5 in 2007 Safari on mobile. Just think of the joy.
It's funny, because I kind of want that in some ways, at least in a future now where we could run it with any kind of real performance.
Back then, that probably wasn't tenable.
Oh, no, I want it now. Right. That's the irony, right? That's actually a great idea today.
But that's not what we got. So, OK, winding it back a little bit, coming to the future now.
2008, Apple decides to open up the App Store to outside app developers and lures them in by the hundreds.
Perhaps you were one of those, Mr. Dominic.
Indeed, I was. That same year, Spotify starts bringing music streaming to the masses.
And on that same year, they made their first iPhone app.
Where things start to get a little bit tricky here is you've got like a two year period from 2008 to around 2010, 2011, where things were mostly status quo.
You know, both platforms are growing, enjoying new listenership and members.
But then, Apple started changing some of their App Store guidelines. And really, some of these weren't bad, right?
A lot of people at the time thought, yeah, OK, some of these make sense. We want rules for security, safety, privacy, quality.
And to Apple's credit, a lot of those things are what the App Store is known for today.
Yeah, I think this is a good point to just take a side note and say, you know, if you go into the back catalogue of the show, there would always be every couple of months Chris and I would go over.
By the way, there's a fake version on the Google Play Store, or before then, even the Android Marketplace, when they used to call it that, of, you know, so-and-so app that is basically spying on you.
Be very careful which one you download. Apple generally did not have that problem because of their App Store policies.
Yeah, that's a very good point. All right, so here's where it gets a little bit more complicated.
2011, in February, Apple eliminates payment system choice, and that's a complicated phrase, but basically, you don't have a choice anymore in how payments go through the system.
You've got to go through Apple, and they're tacking on a 30% fee, at least for content-based apps like Spotify.
Yeah, so if you're not selling digital goods, I'm sorry, if you're not selling physical goods, you're paying 30%, and that's a lot.
And, you know, they've had a complicated relationship over the years. Spotify was obviously not happy with having this 30% tax-based, you know, just pulling right off the top of their revenues, and really, who would be, right, as a business?
Yeah, that's a lot to take, especially if you know anything about, like, the streaming or digital content business.
The margins are terrible, so I would wager that there is not 30% of profit available for Spotify to give Apple, especially not when they first started.
Yeah, right. I mean, Spotify has high marginal costs, and the more users they have, those increase, because they're paying things on, like, a per-stream sort of basis.
Well, and the more aggressive of a user an individual user is, the more user that costs to service.
It's also interesting to note that in 2011, same timeframe, Siri launches on the iPhone, which, wow, it's crazy to think that Siri's been around that long.
And she hasn't even improved at all.
No, and that's the thing. Like, Siri didn't interrupt with Spotify then, and it still doesn't really today.
No, it doesn't at all, right? So this is where things, I think, get a little weird. A lot of people have been, you know, Wes, I've been known to complain about Apple a little bit.
Once or twice, you know, just totally reasonable.
30% is a lot, but I actually don't think that's the scariest part. In fact, if you go to Spotify, I put up a great website called timetoplayfair.com. It'll be in the show notes.
The 30% site, it doesn't scare me. It's this almost, I'm trying to think, almost like putting up roadblocks to interoperability with standard iOS and then future Apple Apple ecosystem features that, you know, I don't use Spotify anymore, even though I just got my account recovered because I have a car that has Apple CarPlay.
But I can't say, hey, you know who, you know, play this playlist, I have to physically touch the touchscreen in the car, which is, you know, somewhat unsafe, right?
Yeah, right. Those are some of the lauded features of having that platform available to you in that device. And suddenly, it's just shut out for, you know, if you understand some of the nuances in the background, okay, maybe it makes sense in some light.
But from the consumer side, it just seems ridiculous. Like I bought this device to be useful to me and to make my life safer and easier. Why isn't it working?
Yeah, exactly. And it's, so there's a lot here, right? So, you know, I'm just gonna ask, as an outside, let's play a game as someone who's not really been in the app business, right? Dealing with Apple in this way, very much. First off, the fact that Apple Music is, what is it, $9.99, and Spotify is the same price, but Apple takes a 30% VIG from Spotify and not from themselves.
How could they write that? Make no sense. Does that in itself seem like a problem to you?
It does feel like it muddies things a little bit. And we run into this frequently, right? Like I think of things like Amazon and other platforms where you've got companies that are playing both the marketplace and platform role, and then directly competing in that same marketplace, in theory, as just one other app that you can use, but much like we had back in the, you know, the Windows antitrust era.
Sure.
Things get bundled, things are the defaults, or things just work out easier for users. So it's hard to think that that really seems fair, especially when you add on that, sure, the user doesn't have to pay that cost, but you know that Spotify is just eating it in the background.
Well, at one point, they actually charged more. So they used to charge $12.99. Then they took the option to upgrade out of their app. And then they started linking to Spotify.com, not linking to a signup page. But that's another rule that Apple actually changed over the years.
It used to be okay to link to like your, you know, Wes's great app.com, as long as you didn't link directly to the signup page that had payment processing. Now you can't link to a page at all that even has any link to payment processing, even if it's like a two or three step process to get there.
Which is just, I don't know, I've always had, and I'm torn about this, because I do see the success of the App Store. And as a daily Android user, can't say great things about the Play Store really at all. And in any way, except for, I mean, it is pretty easy for me to install stuff on the web and get it to download to my phone.
That's about the one thing that I've ever liked about it. So I do see that the App Store has done some things right that make it a nice platform, maybe not for developers these days, but at least for end users.
But, I don't know, and maybe it's like my, you know, FOSS orientation and background or whatever else, but it just kind of rubs me the wrong way how locked down it is. And I can, again, I can understand that. I love the security posture of a lot of Apple's products. I really do.
But it's those little things. And maybe again, it's also like, I don't know if it's an American attitude with free speech or whatever else, not that it really applies, but just the spirit of it. Not be able to link in your own application. I can get like, not be able to do creepy stuff or violate privacy or all the other restrictions that seem totally reasonable.
But when you can't even just include a darn hyperlink in your application because it might in some way subvert a tiny bit of Apple's revenue strategy, that just seems monopolistic.
Yeah. And so I understand, like, I don't know how I feel about having to compete with the platform vendor on the platform, especially when, like, so Apple responds to all this and they have a bullet point in their press release.
And I'm going to quote it. Spotify is deeply integrated into platforms like Carve Play and they have access to the same app development tools and resources that any other developer has.
That's true. Right. That is a true statement, except you would need to add. So when they say developer, I'm assuming they mean third party because Apple has access to everything.
Right. For example, you know, it is still the case that you can't do K helper lady play, you know, play Bon Jovi on Spotify. Right.
And let's not go an episode without mentioning Chris's home pods. And it is home pods, plural.
Oh, you know, I believe it increases almost daily. It's like the triples in Star Trek. They're just multiplying.
You can't have Spotify on there. Right. They couldn't get in there.
Really? See, I didn't I don't have a home pod. I mean, yet until Chris, if you're listening, until you buy me one.
So this and another issue was, you know, the Apple Watch. Now, some of these issues have been corrected, like the Apple Watch is much easier to develop for today than it was.
Yes. That platform has come a long way.
Yeah. And the Apple Watch was just like a bad platform when it started. So I'm not I'm not even sure how much I would give to Spotify there.
Right. But there's like a whole series of. Sort of barriers that Apple has put up.
And their answer. While truthful, like Spotify, like me and Spotify literally have the same tools, right?
Like, sure. But Apple has more. Right. And Apple doesn't have to, one, give up that 30 percent, but it is a huge advantage to be able to have use of all those APIs that must exist.
Right. It has to be the case just by like, you know, logic that there is some API, some private API that Apple's using that when you say, hey, helper.
Play, play Bon Jovi that, you know, that that software right there, there is some API that does that and it's only available to Apple Music.
And I find that in the HomePod thing and there were the Spotify had some complaint about AirPlay, too, which I'm less sympathetic for, because I think that's just being, you know.
But the fact that you have to pick and choose like which barriers that Apple puts up to their their competitors are legitimate and not that just feels weird to me, like I almost.
I almost feel like if Apple wants to compete in a vertical and it's not just Apple, right, Google, anybody who's a platform vendor.
Absolutely. They should have no restrictions that they don't themselves adhere to in that vertical.
Yeah, at least if they want to pretend that they're trying to play fair, right? And a lot of this feels like if there was any real choice, right?
If you could have alternative app stores on an iOS device in a legitimate way, could Apple do this or would people just flee to someone with like a lower fee model even?
That's an interesting question. I mean, a lot of things have changed.
You know, the free app thing, let's see one of the advantages Spotify has that that that they're kind of, you know, they're claiming that they're the Luke Skywalker in this scenario.
Yeah, we should be clear. They're not totally innocent.
They're not totally innocent. And one like Spotify, just like Netflix before it and Amazon Kindle are big brands that people know.
So they have the advantage of just like not having a link to the website. But, you know, your average Joe is going to figure out that if I go to Spotify dot com, maybe I can sign up.
Little developers can't really do that. So I don't know.
I mean, I I don't want to come down with like the lame Apple person thing of like, well, they're both bad.
But I kind of like how can I put this nicely? I kind of feel like Spotify really just doesn't want to lose 30 percent of their revenue.
And the serious thing is a huge problem for them, which I understand.
I am less sympathetic to the revenue share thing because that's kind of that is equal for everybody with the exception of Apple.
But if they're telling the truth about some of these when we didn't even mention it yet, but they got the quote, this is a quote now, rejections at strategic times for Spotify.
They're a little ambiguous at what they mean by that.
But if Apple were doing things like rejecting Spotify updates that compete with features and Apple Music to give Apple Music a lead, that certainly feels like.
Something something's very wrong.
Yeah. And there is this sort of back and forth narrative between them right now where, you know, Spotify feels unfair and arbitrary.
Like, why did it take so long to review this? And the Apple side is basically like, we applied the same procedures and policies.
We apply for all applications. What are you talking about?
Well, they don't actually know. See, see that. So Apple has not claimed that they apply the review policy the same way.
And I can tell you from experience, there's a tiered level of iOS developer.
So it's simply not the case that all developers are treated the same way by app review.
And this isn't me bitching about favoritism. Again, this is more if you are a big enough brand or you're working with a VC who has a relationship.
For instance, if you were in the iPhone, you could actually get someone on the phone from app review to understand what problems you had.
Where if you were, you know, the unwashed masses you were in. And this is back in the day.
Now we're talking you were in their horrible pseudo email correspondence system on the old iTunes Connect.
Now, to their credit through automation, app review has become much better.
They're much faster. But particularly back in the timeline Spotify is talking about, like I had two clients and let's say this is around like 2011, 2012.
Who had reps from Apple. And then I had my own apps.
The experience of dealing with app review on their behalf versus dealing with app review on my for myself was night and day.
Wow, that is a really interesting perspective that I imagine not everyone has that you've been on both sides of the fence, sort of like pretending you're someone else just to see how you get treated.
Well, yeah, I mean, the client hired me to develop their apps, right? That's I mean, it wasn't pretending they, you know, I didn't hide that, you know, it's.
Now, I'd want to get into an argument about like, if that's if that should be or not, I personally feel like that's not right.
Like I like Apple negotiates different revenue shares with Microsoft for the office suite on the Mac App Store.
I think that's not right. I think Apple should actually like put their money where their mouth is and say this is 100 percent open.
And the level playing field to steal a phrase from politics, right?
It feels a little bit like picking winners and losers where it just makes it hard.
We all we all love the, you know, the startup story, the new disruptor that's going to go change how things work.
But it's pretty hard to do that when you start small. And even if you have the superior product, there's all these disincentives against you.
Yeah, like let's just, for example, say you want to make a competitor to Microsoft Excel.
I don't know what the exact model is, but Microsoft Excel does not pay the full the micro.
And it's actually now Office 365 doesn't pay the full 30 percent to Apple.
And that is a known thing, right? You can Google it.
Well, you're automatically starting with yet another disadvantage if you want to have a Excel competitor on that platform because your cost structure is, you know, let's say it's only 15 for Microsoft.
But I don't I don't know or remember the actual number. Well, your your cost of doing business is literally double.
Yeah, absolutely. Even before you do anything else, you just have a higher burden of entry.
That's right. And that's I don't know. But what are your final thoughts?
Because I don't want to turn this into the Mike tries to guilt Tim Cook, who doesn't listen to the show into or if he does, he doesn't like it into being fair to the little guy.
Yeah, I mean, there is complicated. We can get back to it. I'm curious what you think of the argument from Apple about Spotify wants all the benefits of being a free app without being free.
But I think I agree. Chris chimed in in the IRC. And really, the things that do stand out are Siri, right, not having native Siri integration, especially when Apple wants that to be a big part of their platform.
Right. Like, here's this awesome assistant we made with all this, you know, cool, local machine learning that's not going to leak your privacy to the cloud.
Oh, but it doesn't work with the applications that you might want from any of our competitors.
And then, of course, back to the not linking to external sites, it seems like if they could fix a couple of those play even just a little bit more fairly.
And a lot of Spotify's claims would I mean, they might still have some validity, but they would coming from a big player, they would feel kind of like small fries.
Yeah, I mean, so again, like, I feel like they're both correct and wrong, right? Like, Spotify really, really does want the advantage of being a free app, which is you get, you know, wider distribution, more people download you, but they don't want to pay the VIG and Apple.
I guess Apple has a hard time understanding why 30% is a lot to ask. And then it is true before you guys right into the subreddit that yes, if you sustain a subscription for more than a year, it becomes 15%.
I'm still right back on the fence about their platform seems to be a huge success. And I just got reports I got I got my dad and an iPad for Christmas, and he's loving it. It's working really well. It's simple. It fits well.
So it is a platform I want to keep succeeding because I think it is bringing the tools of computation and computer technology to people that might not otherwise have approached it.
Or at least certainly in ways that are more convenient, more streamlined and really well thought out and designed for your average consumer. And I appreciate that because I love computers and I want everyone else to appreciate the neat things they can do.
But for a company that has so much money, just, you know, cash sitting there in their pockets, it feels kind of predatory, especially to because they have a nice reputation where you think about them as privacy forward, fair and other markets. They don't have this crazy ad based revenue platform.
At least they are pivoting to a services model. Maybe we can talk more about that. But for a long time, like their, you know, their money came from selling you hardware that you liked. And then also this this app store platform to enable your hardware to do cool stuff.
It seems like they don't they don't really need to do these. They could loosen this up even just a little bit without, I don't think without any legitimate risk of making apps more dangerous or hurting privacy. And they'd still be making plenty of money.
Yeah, I mean, again, I think it's unrealistic to ask a public company to do something that could in theory make them miss their growth targets, right?
True. Yes, that is a good point. I mean, they are obligated to try to make all the money they can and then that's that's fair enough in our system.
I mean, just maybe this is like my just pure sad realism.
Bring it on.
I think like it's unrealistic for them. They might lower the 30 percent one day. But to me, the more compelling thing is and Chris again mentioned in the IRC is just get rid of the barriers and not even the external site barrier.
I think it's the feature barriers. There really should be no first party only APIs. And I know that's like, you know, there are people in the Apple ecosystem who are already talking about this that feel like that's kind of an immature or whiny position.
But I think first of all, politicians are already starting to talk about this being a platform vendor and then a precipitant participant in the platform is maybe going to be a no no.
I think a way Apple could protect themselves is by saying, you know what, we'll make the rules, but we'll also follow the rules.
Yes, we've we understand what rules need to be there. We are looking out for our consumers and we will abide by them because we think they're important and we're going to follow through and be consistent with what we're going to tell the general public.
And at the very least, like, OK, maybe there needs to be a couple of stuff. I'm thinking of like the like play services sort of stuff on the Android, where maybe you've got a couple of things that like for security or privacy reasons, only Apple wants to do.
And then they have higher level APIs that you can talk to or something, but at least document them or talk about it be like, look, we don't use these in our apps.
This is we've reserved this for the system space only. Here's the public API list. And I don't know how you could actually verify that in any meaningful way. Perhaps some sort of, you know, byte code analysis could be done if you could actually rig it up enough to get access to that.
But even just talking the talk would be pretty nice. It seems like it kind of ties back to our first subject of browsers, right, where we still have the same thing, where browsers are all handicapped on the iOS platform, too.
Yeah. See, that's another area where it's an artificial block that doesn't make a ton of sense. Right. And I know you can make some infosec argument about it, but I think at some point...
It's especially hard when you think of things like, again, I'm not some like huge Chrome fan, but like you look at all the Project Zero work and all the updates transparently coming up for Chrome, I think it's hard to argue that like enabling Chrome to ship their own browser is going to be a giant security hole.
Sure, it is an additional, you know, additional tax surface, but Google has enough money to keep that pretty legit.
Well, and at some point, you know, you're arguing paternalism versus user choice. And I, you know, it's just, and I know it's definitely yours, I would lean more towards user choice.
The other thing it makes me think of, too, is it's having monocultures can be its own risk, right? Like we've seen some iOS vulnerabilities that target specific stuff in the way their browser engine works. So if you had a different one, that instead of 100% of users being affected, it would be some smaller percentage.
Yeah, for sure. So Wes, there's got to be some good news we can share though.
Oh, my friend. Yes, there is. And I love your positive mindset today. Despite the fact that you're besieged by work, and Jar Jar doesn't seem to be pulling his weight in that regard. You're keeping things positive.
Never does.
I guess he's just there for moral support, huh? And maybe catching flies with that long tongue of his.
Yeah, he really likes the frogs down here.
Oh, yes. You and your swamp land. But yeah, okay, let's, let's turn to a little positive note. And I'm very glad that we can announce that Linux Academy, our dear Linux Academy just recently released an introduction to Python development.
So if you're listening to the show and you're thinking, oh, my Python skills, they're just so rusty. But where do I, where do I go to learn that stuff? Because, you know, there's a lot and I speak from experience. There are so many outdated Python tutorials out there.
Either you're learning two or you're learning an old version of three, or you just don't really know and the tutorial doesn't explain the difference.
None of that's true at Linux Academy. They've got stuff up to date. I was just excited because a lot of the platform has focused on, you know, more, more cloud stuff or operations side of things or certificates, which are, which are all great and useful.
But having learned and enjoyed using that model, having to turn to Python seems like a natural extension.
Yeah, I think the the Python, Python is probably one of the more important languages around. And it's great to see Linux Academy teaching it. If only they had an Objective C course, though.
Oh, yeah. Are you volunteering to make it, Mr. Dominic?
Yes, I am. And you have to know memory management. It's going to be great. Everybody's gonna love it.
Yeah, it is. It is funny. Python has a nice a nice place. And it's had its own sort of resurgence of late. So it's just I don't I don't see it going away anytime soon. From scripting to DevOps to machine learning, it sort of is relevant to whatever you do.
And it might not be the best choice in any one of those particular fields for whatever particular project you're working on.
But it's so simple. People might hate the way the white space works. And that's fine. I get that it's not my favorite feature of the language either.
But because of how simple it is, it's almost like a lingua franca of programming, right? It's almost like writing pseudocode. You just got to, you know, maybe run a linter across it before you push it out to production.
Yeah, so it's not quite pseudocode. But there's something about it like algorithms are very clearly explained in Python. And I feel like if you're going to run into some contractor or you're talking to another developer, you might not have a ton of languages in common, but you probably both speak Python.
Yeah, at least a little bit. Like I don't use Python for my day to day. Although I actually do because a lot of my DevOps stuff is Python.
Exactly. It's hard to escape. Like I'm doing something. Oh, actually, well, so two things.
Also, if you are wanting to become a developer, let's say you're in school and you're like trying to pick what language to learn, as much as it breaks my heart to say not not Ruby.
Python is probably the way to go, obviously, because there's courses available. But more importantly, because it's so versatile, you don't have to know what type of developer you want to be when you learn it.
You can just learn it to learn it. And you can try web development, Django. Wes mentioned all the DevOps stuff. There's machine learning stuff. There's actually a bunch of IOT embedded stuff I was exploring for a project where the Python compiles down.
And now you're programming Arduino with Python, basically.
Yeah, there's whole all sorts of stuff. There's like meta, you know, programs to write compilers in like a variant of Python that does the same thing. Yeah, I really like that point because once you've learned it, right, you get lots of stuff.
There's maybe not as much functional stuff in there as I want, but it's very clean and it does have first class, you know, first class data representation, which I just love.
And you learn a lot of the standard OOP stuff, too. So if you do learn Python and then you switch, like, OK, I really want to go learn Rails or I got hired at a Rails shop. Yeah, Ruby's a little different, but it's like the top 10 percent that's different.
And you already know the rest of how it all works.
Yeah, it's the syntax, really.
Yeah, yeah, gosh, the syntax still rubs me the wrong way to this day.
I know you're not a you're not a Rubyist, although Python.
I don't know. I don't know what it is. Python just seems I kind of like the way it angles off to the right as you nest, you know, without returning all those useless ends at the end of do blocks just bother me.
Oh, see, now here we go.
And one other advantage, depending on I guess this more philosophical thing is the Python standard library, particularly when compared to the Ruby standard library, is very batteries included.
Ruby's motto is there's a gem for that.
There's a gem for that. Yeah, it's true.
Speaking of problematic designs, can we do a little PSA? And I didn't even put this in the doc because I forgot.
Absolutely. Land on us, Mr. Dominic.
So the current version of Elastic Beanstalk is being deprecated and is going away from AWS.
OK, well, let's break this down. If people aren't familiar with Elastic Beanstalk, what are we talking about here?
So back in time when the gods were petty and cruel and Lucy Lawless was playing Xena, there was no Docker. I know this is ever in fear.
Yes, the dinosaurs were around. So developers were looking for ways to automate the deployment of their apps.
There was obviously Heroku, but Heroku is a bit pricey.
So Amazon came out with what I would loosely call a Heroku competitor because it's still way harder to use, called Elastic Beanstalk.
That basically does, coupled with its kind of add-on product called CodePipeline, will do the whole push to your master Git branch,
run some sort of YAML configuration script, build your app into a database and deploy it for you.
Right, and including stuff like auto-scaling groups and load balancers and all that goodness, right?
So you can basically be like, I wrote my Python application, I made my commit, and then I know that the new version redeployed in whatever deployment,
either immutable or blue-green or whatever you wanted, and it's out there. And if it worked, it's running on the new servers.
Yeah, I mean, the advantage of Elastic Beanstalk was if you were going on AWS, you didn't really want to do a whole lot of hardcore EC2 management,
but you still wanted the ability to use, like Wes says, the load balancers and things like that. It was a pretty easy way, right?
Isn't that a fair way to represent the easy way to get into EC2 almost?
Oh yeah, absolutely. I particularly remember using that version of Elastic Beanstalk to run some WordPress sites,
because I just didn't want to have to manage syncing state between stuff, and so it was easy to be like, I don't care about the servers,
make enough of them to handle my requests, and then I'm going to forget that you exist, please.
That's interesting. I never thought to run WordPress on there.
Yeah, actually, they've got a whole tutorial, or at least they did, and they had a PHP environment, and that's the other part that they do.
They curate the whole EC2 install for you. So you just ship the code, they've got the platform, the libraries, the web servers, everything else.
Yeah, I have a couple things on Rails, and there's a preset for Rails, depending on which version of Ruby you want.
Now, the disadvantage of this is the scripts, for lack of a better term, because are YAML files considered scripts?
I mean, it's like a data structure, kind of. I wouldn't call it a script, maybe, but a configuration language?
Yeah, let's say all your configuration stuff is 100% AWS proprietary.
So it's not like you're using a completely open platform that you can just move to a different vendor.
Yes, right. I remember I installed a varnish cache on some of those things, and so, yeah, it's the same thing.
Hacking this YAML to go make sure it works in the particular environment, it was all super focused and would not be portable at all.
Yeah, and the other disadvantage, obviously, is that it's going away.
Yeah, that's news to me, so tell me more.
It's news to me, too. I got an email from AWS about it, though.
Okay, well, that's nice of them.
I don't remember the exact date. There's plenty of time, and with today's tools, with Docker, with Joku, there's a million ways to solve this problem now.
It does sort of make sense. I imagine, if nothing else, some of their technical underpinnings of that service are probably getting a bit dated now.
So if we see another service like it or similar, it'd probably be revamped and more focused on container technology integrated with serverless workloads, all that stuff.
Well, and Amazon didn't have as many different kind of service offerings as they did.
No, that was kind of one of their first.
It was one of their original, like, hey, let's help you do deployments because we know they're hard.
It's true, right? There's really nothing more a true developer hates than operations.
Yeah. Now, keep in mind, there's a bit of nuance.
I will throw in the show notes when we get off, which specific parts of it are retiring?
Obviously, Elastic Beanstalk is built on a bunch of stuff, right? Like we talked about the cloud, load balancing, EC2, Amazon DB.
Not everything is going away, but just certain parts of this, if you're using the pure older version of Elastic Beanstalk,
you probably will be affected depending on how dependent you've become on it.
Interesting. Well, that's a good public service announcement.
I think on that, it's probably time that we get out of here. I know you've got a busy day ahead.
Before we do, just a few things to talk about.
We did a little bit of mentioning of machine learning and the dangers and interest and the changes that's going to bring.
If you want to find out more, well, just check out the most recent TechSnap episode.
Jim and I break down, we go through a couple case studies of just how wrong things can go if you don't think about what you're developing.
If you want something totally different, check out the latest user error for a good darn time.
And of course, if you want to join us for another live show, you can always join Linux Unplugged.
If you want more Coder Radio, well, that's coder.show.
And the whole network you can find at jupiterbroadcasting.com.
Don't worry, we're on Twitter too. That's at Jupiter Signal.
I'm at Wes Payne. And Mr. Dominic, you're?
I'm at Dubinuko.
Thank you all for joining us. We'll see you right here next week.

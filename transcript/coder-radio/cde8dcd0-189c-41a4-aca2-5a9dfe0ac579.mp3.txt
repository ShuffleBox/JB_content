This is KOTORadio, episode 398 for January 25th, 2021.
Hello friends and welcome into Jupiter Broadcasting's weekly talk show, taking a pragmatic look
at the art and business of software development in the world of technology.
This episode is brought to you by Cloud Guru, Cloud Guru now includes Cloud Playground,
Azure AWS, or Google Cloud Sandboxes on ACG's credit card, not yours.
Get certified, get hired, get learning at a cloudguru.com.
My name is Chris and joining us like the established soldier in his fortress of Florida podcasting,
it's Mike.
Hello, Mike.
Hello, Mr. Fisher.
And how's the USA doing?
See, I was trying to set it up.
That's why I stumbled there.
I was trying to set up in a way that wouldn't invoke the Jar Jar.
It's always here.
I know.
I know.
I know.
I know.
I know.
So moving on from that, I got a new keyboard.
Which one?
This one.
Hold on.
I'm picking it up because the text is small.
It is the Keychron K3.
And this is a great one because it has Bluetooth or USB-C and it works on Mac or Windows slash
Linux.
There's a little switch.
You choose it.
Tell it what mode to be in.
And it has really cool lighting effects just out of the box.
I don't even know what I'd call this one right now, but it's rad.
And the escape key lights up red, which is rad.
And it's a little quieter.
So it doesn't, it doesn't, you know, here, I'll do a little, I'm going to, I'll bring
my mic down.
You ready for this?
I'll bring my mic down here and I'm going to turn off my gate and I'm going to do a
little typing.
Okay.
This is me doing a little test typing.
Oh my.
You kind of get a sense for it.
It's not, it's not super bad.
You know, it's not, it's not like really mechanical.
But it still has a good feel.
It's a definite upgrade.
It sounds like a great gateway drug for people ready to dip their toe into mechanical keyboards.
Cause it's only like a 60% keyboard.
So it just takes up so much less room in the full size keyboard that it's replacing right
here.
So I've gained room here in the studio.
It's nice.
You know, I can spread out like I was meant to.
Well, we have some feedback.
You all right over there?
You good to get into it?
You sounded a little quiet today.
Oh, let's get into it.
I'm ready to roll on this feedback.
I don't know.
We'll see.
We'll see.
All right.
So Michael T writes in and he says, Hey, Chris and Mike, first time, long time.
I wanted to call out an area of software development and activity that I don't think gets a lot
of love on Coderadio or maybe JB in general.
It's security.
I'm a cybersecurity analyst threat hunter for a major healthcare organization and I'm
writing Python and bash every day.
I'm a long time Linux guy and my personal daily driver runs KDE neon.
However, for security work, I found that the ultimate setup and mandated by our work policy
is a must have Windows 10 base.
That being said, most of my work day is spent in WSL two terminal with WSL two, maybe a
little bit of team X and a solid VIM setup.
This is my secret weapon for efficient programming and threat hunting at my day job.
I cut through CSVs full of vulnerability data with ease, with a little bit of cut, grep
and said commands.
The PowerShell folks are constantly amazing, bewildered by the efficiency that I have.
The Python work all takes place in VIM with the occasional ducks into VS code when managing
large code bases.
Essentially, Windows provides the foundation to deliver a fairly solid Linux experience.
I don't love saying that, but it's really true with WSL two.
I get all of my Linux peanut butter with the interoperability chocolate of Windows.
Jeez, he's laying it on thick.
Wasn't there some jackass like a few months ago who said that Windows 10 was the best
Linux six row?
Yeah, I think that was you.
I think that was that jackass was you.
You got me.
In a way, it's it's unsettling for me to hear.
I have to be honest, because this is what I convinced myself wasn't going to be a problem.
It's a problem.
He says it's just one guy's security work situation, but he'd love to hear more security
stories on the network in the future.
Keep up the great work, gents.
Oh, it's not just one guy, Chris.
I know.
It's like the Robbros.
Tweet about it and they will.
They will come.
Yeah.
You think?
You think?
Wow.
I mean, that's a powerful collective of people there.
You could almost call them a demographic, if you would like.
You could almost say that they're getting the best of both worlds.
Yeah, which is a more apt analogy than one might think at first.
Danelle writes in and this he's hoping to help you out with your terminal woes because
I saw you tweeting, which I'd like to get an update about here in a minute.
But Danelle writes and he says, hey, guys, I've been hearing y'all talk about terminal
emulators for Mike on the Mac.
And I don't recall anyone bringing up Accelerity, Acclarity, Accalosity.
Anyways, it's a terminal that's written in Rust and is GPU accelerated.
And it can run all the platforms Mike might like to use as Mac or his system 76 systems.
I just wanted to toss another item into the conversation.
Thanks Danelle.
So I went and looked it up, Alacricity, I don't know, A-L-A-C-R-I-T-T-Y.
It's called Alacrity.
I've actually used it.
Oh, yeah, of course, because TTY.
As I just read it out loud, I, yes, Alacrity.
I have heard of this now that we actually say the word and the name correctly.
And I have it installed on my system.
It's nice.
It's nice.
It's nice.
I have it installed on the lemur.
I haven't sold it on the Macs yet.
I like it.
It's fine.
It's very fast and it can do some pretty fun stuff.
It has like weird, I don't want to say graphical features, but I guess I do want to say graphical
features.
It's OK.
Everything's connected.
Right.
So you had me try ITERM.
Yes.
I could see why you like ITERM.
OK, but you didn't like it.
I don't like ITERM and I think I know why.
I'm coming from Mac terminal, so I kind of just haven't had the fancy like split my window
thirty thousand times, whatever Linux presets.
And it's just not I don't know, it just doesn't look as good to me.
Alacrity actually looks as good and it is definitely it is fast right out of the box.
We just launched it.
It's a lot more minimal than ITERM, too.
Yeah, it's a lot more minimal.
I mean, I. I can't say use it all the time because I have like really dumb muscle memory
on both machines where I'm like, oh, you know, command terminal on the Linux by maps
command to to super.
It's like a brain map.
He's like, when I sit in front of Mac, I use this command to do this thing.
Right.
And I've made them similar enough that it's they're similar anyway, but yeah, I would
suggest you check it out.
It is open source.
It is free.
It is written in Rust, which means it's superior just, you know, on its face.
Yeah.
That's clear.
Can I actually throw in a piece of hoopla here?
Break in the format.
Yeah.
So little sad news.
The inventor of Objective C died.
Yeah.
And I was shocked not to see much coverage of this.
Yeah.
Real minimal now that you mention it, that would be Dr. Cox.
We talked about in Slack really briefly, and I probably saw a few people write about it
in total.
Maybe maybe a handful at most.
Yeah.
It's interesting to me because he he actually a lot of the ideas in Objective C are.
You know, this is not my usual trolling, but even if you're not an Apple developer, they've
they've come over, right?
They've they've come over into their languages.
Absolutely.
Especially the early ideas.
I'm not talking about, like, you know, the recent stuff, but the early foundational ideas,
all the next step stuff that a lot of that inspires a lot of what people use today.
So I was a little surprised and like, I missed it.
It took me a day to see it and someone had to actually send it to me.
So yeah.
Rest in peace.
Dr. Cox.
Yeah, absolutely.
I want to circle back.
Were you having terminal woes earlier this week?
Because I saw you tweeting about having some strange ass air messages in your terminal.
So code signing, even when it's Apple's application, apparently my moving my Rosetta terminal into
applications instead of into applications slash utilities, yeah, violates some sort
of expectation that the code signing system has and it would just refuse to run.
And was there any useful air that would be produced when this happened?
It's the same crash as you would get for like you built a, you know, a GM version, right?
A golden master version of your own application to distribute and you were testing it as a
clean install.
And oh, I messed up my signing certificates.
So luckily I said, what's different about terminal than any other application you would
generally install?
Oh, it's not in applications.
Let me just delete this version, duplicate it again in applications, utilities.
We put the new one in Rosetta mode and see what happens.
And sure enough, that was the entire problem.
Now let me ask you something, though.
Honestly, did you have a moment where you were like, this has got to be an M1 bug or
is this because I'm on an M1?
Well, right.
The whole fact that I have to run a Rosetta terminal all the time.
Actually what I ended up doing was I undid that and I duplicated it and I left the ARM
terminal.
I just named it ARM terminal and the other terminal, the Rosetta one is just named terminal.
Yeah, because I almost never want the ARM terminal.
It's going to be a nice day for you when all that stuff has finally been ported over and
you just don't have to worry about this anymore.
That would be amazing.
Honestly though, this is seemingly, unless something has changed for you, this seems
like the roughest aspect of the CPU transition and it's a pretty understandable one.
Yeah, it was like a 15 minute fix.
I got updated shipping information on the M1 mini that's coming in for Angela and it's
scheduled to be delivered at the end of this week, so I may have hands on experience by
next week's episode.
And are we starting the M1 action show anytime soon?
That's no, we're waiting for when they update the other machines that make that supposedly
rumored G4 cube knockoff.
Honestly, that's going to be where I have to really exercise a lot of self control.
I will be there to tempt you mercilessly.
We have more to talk about on that front, but I wanted to get to an email that came
in from Steve because we'd asked about home testing setups and network setups and he says,
hey guys, for my home server setup, I have six Raspberry Pis shoved into a rack.
It's the one from C4 Labs called the Zebra case.
He has six of them in there running 2004 Ubuntu LTS.
One runs Pi-Hole, one's a WireGuard server, he has Pi VPN, he has a private Docker registry
setup.
He has four of the Pis running as Kubernetes clusters that he's bootstrapped with K3s.
The cube cluster serves as my dev lab and I also run Drone.io in a cluster for my CICD
pipelines.
My last Pi runs a NAS server to provide persistent storage for my cube cluster.
It's been nice to build this cluster over time and expand my skills on ops and sysadmin
side of things without having to worry about scaling down cloud infrastructure when I'm
not actively using it.
Yeah, just a side note, I completely agree with that a little bit for the Raspberry Pis.
When you're doing small scale training, it's just great for that because you can just leave
them running and it's a low, even power impact.
He says, I've created ansible roles and playbooks to provision most of the cluster's functionality.
On a side note, I'm also super glad Coder Radio is back from the dead.
Should we start a Deadpool to see when Mike destroys his shiny new M1 Air?
Maybe the proceeds go to an open source project of the winner's choosing.
All the best.
Wow.
I would say probably when the update's out.
That's when you start your bets because then what else are you going to do but get the
next upgrade?
You got no choice.
There does seem to be a correlation.
I mean, sometimes you got to go to a lot of lengths for spousal approval.
I'm just saying.
Maybe that's not a factor.
I don't know.
Yeah.
Well, not so much.
You never know then.
The game's afoot.
Right now with the M1 MacBook Air, it's unlikely that I would be ditching it soon.
But the actual thing he wrote about the Raspberry Pi, yeah, that's amazing.
There are so many, like, just dumb uses I have for Raspberry Pis.
Honestly, they're amazing and they're so cheap.
Yeah.
I run a lot of great services on them at home.
Our last email of the week comes in from Javier and he has some thoughts on why we don't see
more native Linux software.
He's a big fan of the show and he's a QA member.
He's been listening to JB since 2008, which is mind bending.
And he's been getting deep into software development with Qt and realized a few reasons why we
don't see more native Linux software.
I'm curious to hear your thoughts on this.
He says, number one, there's not really any good quality tutorials, books or video resources.
And what's out there is not necessarily easy to find.
Number two, some of the best resources are hidden away in conference talks that people
don't know about.
And number three, there's no massive marketing efforts in promoting these frameworks in various
local areas.
And that last one I thought was kind of like marketing the frameworks.
But I guess, I guess there is some truth to that.
Like there's a lot of really great free frameworks out there that nobody knows about.
Yeah, I would say the Vala stuff is pretty interesting.
This is going to be divisive, but I think the folks doing it the best are actually the
elementary OS people, Cassidy and I think Daniel.
Sure.
They put a lot of work into that.
They put a lot of work into it.
They've made an app store that's easy to deal with.
They have a blessed framework and you can do other stuff.
But they have a blessed tool chain, which is Vala.
They focused on some of the getting your feet wet stuff that, you know, I felt like the
Ubuntu Software Center never really did.
Qt is probably the best option, but I don't see a lot of Qt development that's not like
enterprise development for like QNX, is that the weird car OS?
Oh, yeah.
Right.
Or some kind of desktop software that you just need for multiple platforms.
He kind of says that maybe what we ought to do is ask the community, and this is probably
worth trying, is we ask you guys out there listening to the show to send in what you
consider are the best resources to learn different frameworks.
Maybe people could send links to videos for GTK, Qt, Flutter, PyTorch, TensorFlow, others,
and maybe your favorite web and backend frameworks to use with electrons and maybe up on Linode.
And then we could feature them here on the show.
And it's not necessarily a bad idea.
I think that could work at a small scale.
I would be really interested to know what the audience works with that we don't mention
much on air.
And I'd love to just a brief explanation of how you use it, even if it's a high level.
And if you went to coder.show slash contact and sent that in, that could be a good first
step.
And then maybe we go from there.
There's probably a lot of good resources for learning too, which we'd love for you to share.
I think though, you know, you look at something like Qt, they keep screwing the pooch when
it comes to how they interface with the community.
There's change now where to get access to older versions past Qt 6, you have to pay.
It's untenable and the community is just going to fork the latest Qt 5 series for as long
as they can until they can migrate to 6 after 6 has had several minor releases at a minimum.
And it's those kind of actions that I think continuously turn people off is those kind
of shenanigans with the licensing.
And then GTK is an extremely opinionated desktop toolkit that really works best on the GNOME
desktop.
Of course you can bring it to other platforms, but that's really where Qt's a lot stronger.
Flutter, you know, I've been wondering if we should have a conversation about it.
It does come up and I'm wondering if the acceptance level is going up.
So I'd be curious if anybody out there has any active Flutter projects that they could
share some insights.
It'd be a good way to go.
Yeah, I was excited for Avalonia for a while there.
I would be interested to see what people say, but I think we're going to get a lot of like
hobbyists doing like GTK and stuff and that's totally cool.
But I think the people working in the enterprise are just like, yeah, we use Qt or we use
Electron.
Right.
That's that's fair.
Well, I would like to know that, too.
That'd be valid feedback as well.
That would be coder.show slash contact.
Let us know because I'd love insights on that as well.
lino.com slash coder.
Go there and receive a $100 60 day credit towards your new account.
Linode is the largest independent cloud for developers and a $100 60 day credit is going
to give you a lot of room to try things out.
Linode has these boxes that are just unbelievably priced.
I was doing a live stream from a box that's just their base rig $5 a month stream.
It was amazing, like the power behind it, because all of the components are super fast.
The disk IO, the network, the CPU, everything's really fast and the dashboard to set everything
up is really quick.
So if you get an idea for something and you just want to get off and get going, just run
off and just create something.
Well, Linode makes that really simple with their dashboard.
It's just so nice when you can just have those kinds of barriers removed and get right to
work.
Well, I'll just quickly deploy an Ubuntu LTS system now and then I have this image that
I attached to them that's full of tools and stuff that I need to set up and Linode gives
me all of the little buttons to make that possible with 11 data centers around the world.
Probably something that's going to work for you.
Also maybe take a look at what you could do with object storage.
It's become more and more valuable for us.
Storage up in the cloud that's super fast that can be attached really simply, either
just by a public URL or by something like a file system mount with fuse, which is a
trick we're using for our new PeerTube instances that we've set up on Linode.
We have a Linode front end box that does the actual web rendering and the video streaming,
but all the video is stored on Linode's object storage.
That way I don't have to keep trying to crank up the disk storage for my server.
That's just silly.
I'm just like, what am I supposed to like future cast how much I need to provision all
the time?
I just use object storage.
It's S3 compatible and it's great.
One of the best use cases for it is just hosting your own static website.
You look really professional when your website just pops on the screen.
Linode really provides the virtual servers that make it easy and affordable for you to
host anything.
If it's a personal site or something for your business, they can do that.
They started in 2003 as one of the first companies in cloud computing, three years before AWS
and other enterprise providers.
And now they're still the largest independently owned cloud provider founded on a love for
Linux and open source technologies.
And now they're making shows like this possible.
So get that $100 credit and see what you can do.
Go to linode.com slash coder, get $100 in Linode credit on that new account and really
just learn something, set something up, try out a project.
Maybe one of their one click deployments is all you need.
It's got a lot of apps, it's really easy to deploy.
So try it out, try it out and support the show, linode.com slash coder.
Let's do a little hoopla, a little bit of hoopla, hoopla follow up.
The Corellium team is really hyping up the fact that they have ported Linux to the M1.
So this got sent into the show a few times.
I smell a marketing splash is what I smell.
I'm not buying it.
You think it's fabricated?
No, I mean, it's true-ish.
Go on.
It's like half the story.
So networking is provided via USB dongle, the video acceleration is non-existent.
So it's all just frame buffer stuff.
Performance is atrocious.
It is a modification of the Ubuntu Raspberry Pi image to work on this using code that Corellium
developed to get Linux running on the iPad.
And they've kind of been developing this code and keeping it kind of to themselves as a
special sauce project.
So they kind of had a lot of it already done.
And now it's this slow trickle process of seeing how much of this is actually legally
touchable.
And they have a developer who is learning right now for the first time how to interface
with the kernel team upstream to try to submit some of this stuff.
But some of it doesn't look usable.
Some of it's questionable.
Some of it may be great.
I mean, there has been a lot of hard work done here, not to undercut that at all.
It's technically a good feat, but it's being sold like Linux has arrived and an ISO is
just any day away.
And it is anything but that.
This is a company that has another product in this realm.
And this is an incredible way for them to get some name recognition out there.
I had this long, really great conversation with Hector Martin weeks ago.
And Hector Martin is the original guy who set off with an effort to port Linux to the
M1 and launched a Patreon and now has a Linux distro dedicated to running on the M1 and
has established a bit of a team.
So it's a team now working on this.
And I talked to him weeks and weeks ago about this.
And he really wants to have a white room, totally clean, no legal issue kind of process.
He wants everything to be upstreamable into the mainline Linux kernel.
So he is now interfacing with Corellium's one developer who's really trying to do all
of this to help him get that upstreamed.
But it's still kind of like at this point, it's a long shot.
He's not really getting any bites from the kernel team.
I don't think anybody's really taking him seriously upstream yet.
So it may, it sounds like it's close, but I think it's a lot further off than they're
letting on.
And the reason why they're not making that clear is well, hashtag hype.
I could buy that.
Okay.
I saw the story a couple of times and I was like, okay, it's eventually going to happen.
I don't think anyone's going to buy these M1 Macs to slap Ubuntu on though.
Cause you know what?
You're going to be fighting compatibility issues for years.
You know, no video acceleration is a deal breaker.
You're not going to spend that money on a Mac not to have it working.
Also kind of ironic, I suppose.
When I was talking to Hector, he had told me that he had planned around the end of January
to essentially make the same splash because he thought he was pretty close to getting
it booting.
And his idea was this would be a great PR stunt for the distro and probably raise funds.
So he was conceiving of doing something similar with, I think probably more noble intentions
because he's just trying to raise awareness about the project where these people Corellium
I think are trying to raise awareness about their business and their other products, which
they're happy to link to you by the way, on their page where they talk about this work.
They have a different like security research and app modeling testing that they'll do for
you.
So I don't think people should get too excited.
We had a lot of people that resented it and they were like, it's almost here.
Yeah.
I think this is a ways away to say the least.
We also heard from people that are on M1 minis that they were having issues with sleep.
I guess the system would go to sleep within an hour and then never wake back up.
That is being resolved in a current Mac OS beta as well as, this is why I want to talk
about this because I felt like after trashing them so bad, we should follow up.
Apple is fixing the content filter exclusion list that let Apple apps like the app store
or maps and iCloud avoid firewall and VPN policies like they just weren't installed.
Now that's being resolved.
Apple apps will be compatible with VPN apps and no longer bypass firewall and other security
tools, which I gave them a really hard time for on this show and I acknowledge that they're
fixing it.
So there's that.
And now I'm sick of talking about them.
But I felt like we should follow up.
You're a fair minded journalist.
Well after harping on them for it, you know, because one of the things that I stated is
like what I don't like about the Mac is it feels like it's not under my control anymore.
And I still feel that way to an extent.
I have a really old Mac that I fire up every now and then.
It just dominates my internet connection for a solid 20 minutes while like iCloud sync
stuff that I don't even want synced and just all this junk comes down that I don't want
with these background NS session, whatever processes that are just eating a bunch of
bandwidth on my LTE connection.
I still feel like the Mac is far out of my control in a lot of ways, but that's an area
where Apple made it right.
So I got to give them credit where credit is due.
Okay.
Okay.
Very firm minded of you.
Thank you.
People have been writing in and they tell us that it's interesting to hear the Linux
perspective on things.
Like people really didn't quite understand what Linux users didn't like about electron.
They just didn't really understand.
So we got some feedback back in that said, yeah, thanks for explaining that from that
perspective.
So I want to show people that Linux users can be reasonable and admit that things are
fixed when they get fixed.
Just trying to, trying to keep it honest here at the Coder Radio program.
You know what helps you know when things need to be fixed?
Oh, nice.
Data dog, baby.
Data dog.
That's right.
Go to datadog.com slash Coder Radio.
This here episode is brought to you by Datadog, the unified monitoring and analytics platform
for the comprehensive visibility into your cloud setup.
If you've got a hybrid cloud setup or on premises, quickly analyze the performance of your Linux
servers in real time with customizable dashboards and troubleshoot Linux issues or application
issues in seconds.
The beautiful thing here is the way they visualize a unified view of your metrics, your traces
and your logs.
Imagine trying to communicate a performance issue or track something down with a stack
that goes across everything.
Your host operating system, your applications, your container environment.
With all of that, they also offer integrations that make it really easy for a large stack
of other technologies.
Basically any major technology you've heard of in the industry.
It's over 400 different applications and APIs that you can use with your data dog monitoring
solution.
So you bring that stack in with your overall stack that you're monitoring for your Linux
systems and your applications.
You get full visibility into the health and performance of all of it.
And it's visualized so perfectly.
You should really check out datadog.com slash Coder Radio to see what I'm saying.
Go there and sign up and create a dashboard and you can do this under the trial.
You'll get a free t-shirt as a way to say thanks for supporting the show at datadog.com
slash Coder Radio.
This solves the problem.
I've seen everything at once at a high level, capturing that and then communicating it with
your team.
That's what Datadog is so great at.
So check it out datadog.com slash Coder Radio.
We talked about testing last week and Facebook had a post since then.
They must be listening to the show, I imagine.
Their Facebook engineering blog had a post that talks about how they do testing.
I just pulled a couple of snips that I wanted to run past you.
You ready for this?
Bring it suck.
Yeah.
Okay.
They say, while we use automated tests to detect regressions in product quality, until
recently we had no means of automatically detecting whether a test itself was deteriorating.
Automated tests are another piece of software that can become unreliable over time as the
code base evolves.
Exactly the point you were making last week.
Yep.
They go on to say, unreliable, also known as flaky tests, produce false or non-deterministic
signals that undermine an engineer's trust and thus effectiveness of the entire regression
testing process.
But they got a solution for you.
Oh, dear.
You ready?
They're going to solve your problem here.
Thus, the right question to ask is not whether a particular test is flaky, but how flaky
it is.
To answer this question, we have developed a measure of test flakiness.
The probabilistic flakiness score, using this measure, we can now test the tests to measure
and monitor their reliability.
Oh, dear God.
So they're writing tests to test the tests.
This is actually a solution that people are using.
Wait a minute, but who tests the tests to test the tests?
Well, you just keep adding people to your team, obviously.
I'm pretty sure this is the plot of Inception.
I love the idea because only Facebook, right, or any corporation where they really have
no problem throwing bodies at something, oh, that just means we'll just need another eight
hours of a developer's time, so that's fine.
No cost of that.
But that logic never comes to a terminal point.
Well, they seem to think they figured it out.
By testing the test, they can then predict the test flakiness.
But how do you predict the flakiness of the test, the test, the original test?
You watch how it scores things over time and how it trends, I suppose, suggest if the flakiness
test is getting flaky.
Whoa.
Okay.
Yeah, I know.
This is their solution.
And it really is, it is an endless problem of just throwing more resources at it.
I feel like a lot of this stuff is we don't want to pay QA people, right?
It just...
Yeah.
I'm not saying tests are bad, I'm just saying at some point, someone does have to actually
look at your software and be like, well, all our tests pass, I mean, it redirected to Pornhub,
but all our tests pass, you know?
Come on.
You know, but like Squirrely Dave points out, like in corporate America, it's not an outlandish
idea just to throw more bodies at it.
You know, I have had clients and I've worked at companies where the goal was to just grow
endlessly.
Now, not every place, obviously, I've been to, of course not, but some, they're just...
There was no limit to the staff they were willing to add.
They never thought like, well, maybe 50,000 is enough.
Yeah.
And Wes is saying in the chat that he thinks it's a find the right balance between automation
human interaction.
That's obviously true, right?
Yeah.
Yeah.
And I'm coming at this from the Rails guy perspective where there was a time in the
early aughts where people were like, you don't need QA people, you just can use all your
automated progression tests and here's...
Right.
Okay.
But here's the other argument.
Why pay for, say, three QA people when you could pay for one developer to write tests?
I would say because tests don't...
Work?
That's too far.
No.
Yeah.
Yeah.
I mean, but they don't count like the type of bugs that...
I don't know, man.
Maybe I'm just old school.
I feel like someone needs to be looking at the software and manually going through like
a script of what it's supposed to do.
Yeah.
I mean, like a post build checklist, I mean, that's what used to work, but I do think it
is a balance.
It's obviously a balance.
Yeah.
Yeah.
It's high level stuff.
And then hands on for the edge cases, Alexander wrote in on this topic, he said, I just want
to give another perspective on the testing discussion.
I work in finance writing for software for finance where correctness is a high priority.
We do Java in the functional style of Haskell with lots of strong typing and strict separation
of side effects and mutability when possible.
In my experience, this catches the vast majority of bugs that would otherwise interact with
us.
But we still have to do TDD and unit tests.
The reason we do this is the tests are helpful in the construction phase to make sure that
we're still reasoning about our inputs and outputs of the functions in the right way
and because this increases our confidence when we're refactoring at a later date.
The second point can't be understated at all because we will regularly refactor and rip
out large portions of our code.
We can use these types as guardrails to make sure that we haven't swapped out the schematics
of our code or make other changes.
It's low risk for them.
So testing helps with that kind of thing.
Absolutely.
I can see his point there.
What Alexander is essentially, I think, trying to say is they have a bit more confidence
when they're redoing large portions of their project because of these tests.
And that makes a lot of sense.
Like you're not trying to make sure everything works, but you want to make sure the thing
launches and stands up.
And if you can catch that in an automated fashion, why not save yourself the time?
Yeah, I agree with that, right?
Commercial.
No, I think there's a bunch of stuff like that where the automated tests make a ton
of sense.
When you get to like the view layer, the UI layer, I really just, I don't...
I know people are going to write in about Selenium.
I've used Selenium.
I just, I don't buy it.
It's just easier to have someone run through the screens and make sure it actually does
and looks the way it's supposed to in my crazy curmudgeonly opinion.
Well, I accept it.
I accept your curmudgeonly opinion.
I really, the way I witnessed it, it really was a much, it was a different era of software
development where QA was just part of the process.
And they worked in kind of conjunction with IT.
And I was there to help support there, especially on certain days.
I worked in an environment once where a web application that allowed different contractors
to come in and bid on state development projects, like for building like a school or a park
or a sidewalk, you know, just all that kind of stuff.
And so because it was dealing with state contracts, there was all of these really stringent regulations
that they had to follow.
And there was a lot of pressure to get that right.
And I remember specifically like the QA team was like the last line of defense before we
would flip something public.
And there were deadlines.
And if something broke, which did happen sometimes because it was a monster of an application,
it was a really high stress situation.
And we had to be able to roll back and the QA member that like approved that section
would be held accountable for it, too.
Like it got a little like, they got a little bit in your face about it even like, hey,
what happened here?
Where did the process break down?
And then they would figure out where the QA process had failed them.
And then they would alter the script so that in the future, that didn't happen.
It was not a very rapid process.
But over time, like they had QA members that worked there for several years that were like
just really solid contributors.
And eventually, they became contributors also like on just like UI suggestions, because
they were really familiar with the product, but more familiar with it from a user's perspective
than the developer perspective.
And it became kind of a really good feedback loop.
And so I was only there for about two years, really.
So I don't know how it worked out ultimately.
But that was my experience with something like that in a really kind of high pressure
situation where they were just like our last line of defense.
Yeah.
And I think that's how it should be, right?
QA is kind of the gatekeeper now, of course, they're going to get pressure because deadlines
and stakeholders.
Yes.
Yeah.
You got to make sure the stakeholders are taken care of stakeholders.
You know who our stakeholders are?
Who's that?
The members.
Oh, yeah.
The coder QA team.
And at QA, coder QA.co become one of our QA members, keep the show on the air, support
the show, get a limited ad feed, and get the coderly report, which we have one out for
last coder, or quarter, some of you call it.
We have a special promo that I think will probably last until next episode.
If you use the promo code 2021, it'll take two bucks off of your membership when you
go to coder QA.co.
I also want to remind you that our friends at a cloud guru, if you're looking at learning
some stuff and want to start exploring around, find them on social media.
It's just slash a cloud guru on YouTube, Twitter, Facebook, pretty much all the social media
sites that you care about, it's just slash a cloud guru.
Mr. Dominic, is there anything special you want to mention for this episode?
No, just follow me at Dumiduco on Twitter.
There you go.
You can find him there.
I am at Chris Lass, his company is at the Mad Botter Inc.
The whole podcast network is at Jupiter Signal, and the show is at Coder Radio Show.
We do this here podcast live on Mondays, starts at 5pm, 8pm Eastern at jblive.tv, and I would
love to have you join us.
Also we're getting really close to episode 400, so keep an ear out soon for announcements
related to that, and links to everything we talked about today are at coder.show slash
398.
You're also going to find our contact form there as well as our RSS feed so you can pick
a way that you like to subscribe to the show and get it every single week, while Monday
means we're live.
But you know, I really know that like the bulk of you, like 99.5% of you, you're listening
on the download.
So thank you for doing that, and if you'd like to help the show out, maybe you can't
be a member, another great way that we totally appreciate is sharing the show with somebody.
Word of mouth is the number one way podcasts are marketed, it's really the only effective
way.
So we could use that too, helps the show a lot.
Thanks everyone for tuning in to this week's episode of the Coder Radio program, and we'll
see you right back here next week.

WEBVTT

00:00.000 --> 00:07.000
This is Koda Radio, episode 356, for May 6th, 2019.

00:31.000 --> 00:35.000
Hello, and welcome to Koda Radio,

00:35.000 --> 00:44.000
Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business of software development and related technologies.

00:44.000 --> 00:50.000
My name is Wes, and I'm joined once again by our intrepid functional adventurer,

00:50.000 --> 00:53.000
the one, the only, Mr. Michael Dominic.

00:53.000 --> 00:55.000
Welcome back to the show, Mike.

00:55.000 --> 00:57.000
Welcome back from Linux land.

00:57.000 --> 01:01.000
Oh, yes, I am freshly back from Linux Fest Northwest.

01:01.000 --> 01:05.000
We had a prerecorded episode last week, so I didn't get to talk to you.

01:05.000 --> 01:08.000
It's nice to hear your voice. You sound a little bit hoarse.

01:08.000 --> 01:14.000
I'm led to believe you're under the weather, but nevertheless, you're here today doing a live Koda Radio.

01:14.000 --> 01:19.000
Neither rain nor shine nor attacking penguins. That's our motto.

01:19.000 --> 01:23.000
Or infectious children, whatever the case may be.

01:23.000 --> 01:25.000
Yeah, one of those seems more likely.

01:25.000 --> 01:29.000
We're going to show a little bit early today and we probably won't stick around too long.

01:29.000 --> 01:36.000
And that's my fault because I'm taking off to the Red Hat Summit over in Boston, basically right after this show.

01:36.000 --> 01:39.000
So we better dispense with the pleasantries and get rolling.

01:39.000 --> 01:41.000
I'm positively green with envy.

01:41.000 --> 01:44.000
First up, we've been getting some quality feedback.

01:44.000 --> 01:45.000
So let's start there.

01:45.000 --> 01:52.000
Lee wrote in, I got into a work situation where there is a lot of software, extensions, micro services,

01:52.000 --> 01:57.000
load hosting and databases with next to no documentation.

01:57.000 --> 02:05.000
I want to create some grip on the situation by doing some form of documentation and, you know, have something that I can pass on to others.

02:05.000 --> 02:13.000
However, I'm hesitant to just write a bunch of documents that tend to get out of date really fast as we continue developing.

02:13.000 --> 02:17.000
Do you have any smart tools that you can suggest to map stuff out?

02:17.000 --> 02:19.000
Thanks, Lee.

02:19.000 --> 02:20.000
Well, Mike, what do you think?

02:20.000 --> 02:28.000
Obviously, I think in general, you know, we all agree documentation can be a huge help and goes a long way to explaining intent within a project.

02:28.000 --> 02:34.000
And there's different forms of documentation, but having the sum is better than none.

02:34.000 --> 02:36.000
Where do you start when you don't have anything?

02:36.000 --> 02:43.000
Well, you know, certain frameworks will have extensions that can generate basic documentation for you.

02:43.000 --> 02:47.000
I think in the Rails world, there's Rdoc, if I'm not mistaken.

02:47.000 --> 02:55.000
I personally tend to write out traditional formal documents with like, you know, explanatory comments and things like that.

02:55.000 --> 02:59.000
But if you're starting from zero, I would look at something like Rdoc.

02:59.000 --> 03:02.000
And I think it doesn't java, isn't it just called java docs?

03:02.000 --> 03:03.000
Yeah, right.

03:03.000 --> 03:05.000
Yeah, there are there are some built in stuff to languages.

03:05.000 --> 03:09.000
So you can add just comments next to functions or whatever and have that have that added.

03:09.000 --> 03:11.000
But that's not always enough, right?

03:11.000 --> 03:22.000
Like that might give a good a good view for someone trying to make, you know, API level or programmatic changes, but doesn't always help someone who's trying to say get the build environment set up or just use the darn utility.

03:22.000 --> 03:24.000
So how do you approach this, Wes?

03:24.000 --> 03:26.000
Do you write them out the old fashioned way like I do?

03:26.000 --> 03:28.000
Do you have some fancy tool?

03:28.000 --> 03:31.000
Well, I think fundamentally, it's a process problem.

03:31.000 --> 03:32.000
So there definitely are some tools.

03:32.000 --> 03:44.000
Some people are proponents of, of, quote, unquote, literate programming, right, where you're almost writing your documentation in line with your code or in a sidebar that gets generated automatically as it parses through the document.

03:44.000 --> 03:48.000
And that's that's pretty neat, but probably takes a whole team investment.

03:48.000 --> 03:49.000
Right.

03:49.000 --> 03:55.000
Unless it's a small, isolated subdomain, you probably are going to need an agreement about how documentation works.

03:55.000 --> 04:02.000
Depending on where the documentation is oriented, I've had some problems in the past with like separate wikis and things.

04:02.000 --> 04:07.000
I tend to like documentation that can live, especially if it's just sort of simple markdown files in the repository.

04:07.000 --> 04:13.000
Because exactly what Lee's getting to, it's easy for documentation to drift from the actual code.

04:13.000 --> 04:18.000
And if you can start with a process that maybe says, all right, well, you've updated this file.

04:18.000 --> 04:19.000
There's documentation that goes along with it.

04:19.000 --> 04:20.000
There's no updates.

04:20.000 --> 04:31.000
Poll, you know, pull request rejected, you don't have to be that rigid. And there are maybe some tools out there that can help you sort of automatically look and spot or see where you're missing documentation.

04:31.000 --> 04:36.000
But unfortunately, like a lot of things in programming, you just have to care about it.

04:36.000 --> 04:42.000
And, you know, it takes constant upkeep to make sure that documentation is getting updated along with the code.

04:42.000 --> 04:43.000
Good advice.

04:43.000 --> 04:55.000
Now, dear Coder Radio audience, maybe you have some favorite tools for literate programming or just, you know, tools you like in your CI system to help make sure documentation gets written or your favorite documentation system.

04:55.000 --> 05:03.000
If you'd like to let us or Lee know about that, well, the easiest way is head on over to coder.show slash contact.

05:03.000 --> 05:11.000
Moving on, we've got another piece of feedback, specifically asking about our thoughts on testing as a career path.

05:11.000 --> 05:19.000
The author writes, I've only worked in large organizations, so I don't really understand exactly how dev shops operate.

05:19.000 --> 05:24.000
Do you also have members of your teams dedicated to QA or testing?

05:24.000 --> 05:27.000
And are these cost effective on a smaller scale?

05:27.000 --> 05:33.000
Personally, I find it can be a very negative job, and I spend a lot of time criticizing other people's work.

05:33.000 --> 05:38.000
Most of my interactions are with the devs who write lower quality work.

05:38.000 --> 05:46.000
Any thoughts around testing as a dedicated role within the team and how it might benefit or not benefit the overall team?

05:46.000 --> 05:47.000
Thank you.

05:47.000 --> 05:50.000
Yeah, so this is going to be an unpopular opinion.

05:50.000 --> 05:57.000
You know, we've talked a lot in the show about automated testing and my various campaigns to try to make that work.

05:57.000 --> 06:00.000
I am a pretty firm believer in manual testing.

06:00.000 --> 06:07.000
First of all, we're super small, but it's unusual for like a dev shop that he mentioned to have a dedicated like QA career path.

06:07.000 --> 06:13.000
Usually it's the QA developer is one of the more junior developers or designers.

06:13.000 --> 06:17.000
Then you kind of move up and out of that into doing more of your own development design.

06:17.000 --> 06:26.000
My experience is it's usually extremely helpful to have someone doing manual testing, but maybe that's not a full time job.

06:26.000 --> 06:33.000
Maybe they're doing that 30 hours a week and 10 hours of some sort of internal tool development or something like that.

06:33.000 --> 06:39.000
As I'm sure you know, if you've been listening for a while, I am not a 100% automated testing guy.

06:39.000 --> 06:51.000
I just particularly for things like mobile apps where design becomes the most the broadest surface area, so to speak, for client feedback or complaints.

06:51.000 --> 06:55.000
That's just something that you basically can't automate your way out of.

06:55.000 --> 06:58.000
So you're not you're not calling for no automating tested.

06:58.000 --> 07:05.000
You're just saying there also needs to be some more manual simulation of possible user experience input.

07:05.000 --> 07:08.000
Yeah, that's correct. I'm not saying automated testing is bad.

07:08.000 --> 07:13.000
I'm just saying there's just a whole category, particularly of UI issue that I can't catch.

07:13.000 --> 07:15.000
Yeah, no, that's a good point.

07:15.000 --> 07:26.000
I think it is valuable to have maybe not a role, but testing obviously needs to be a part of shipping an application or a product.

07:26.000 --> 07:33.000
And some of what this author describes here, right, frequent interactions with lower quality work from certain developers.

07:33.000 --> 07:42.000
I have seen some anti-patterns in that sense, right, where you have sort of development and QA or test in an antagonistic relationship.

07:42.000 --> 07:45.000
Now, a little bit of friendly antagonism can be good in that role, right?

07:45.000 --> 07:50.000
Like you want to be like, oh, try to break my software and then they'll try their best to do it because that's their job.

07:50.000 --> 07:53.000
But you want that to be a healthy, constructive relationship.

07:53.000 --> 08:02.000
And it strikes me in many ways similar to some of the philosophical and structural changes that saw parts of the DevOps movement go through.

08:02.000 --> 08:06.000
Because you can still have different – you can have people that do both roles.

08:06.000 --> 08:07.000
You can have combined roles.

08:07.000 --> 08:08.000
You can have separate roles.

08:08.000 --> 08:13.000
But what you really want to focus on is good communication so that you're all working towards similar goals.

08:13.000 --> 08:16.000
And you don't want to break feedback loops.

08:16.000 --> 08:21.000
You don't want developers to be able to write code without worrying about how they affect tests.

08:21.000 --> 08:22.000
Yeah, very fair.

08:22.000 --> 08:27.000
So I think it – I mean, I don't think testing needs to be relegated.

08:27.000 --> 08:39.000
You know, we make all these sort of arbitrary hierarchies in the various tech jobs, like dev and operations or test and full developer or whatever or backend and frontend.

08:39.000 --> 08:47.000
And realistically, we need all types of roles and people contributing to make functional applications and products.

08:47.000 --> 08:51.000
So we don't need some bullshit hierarchy to sort of sort through that, right?

08:51.000 --> 08:53.000
We can recognize that everyone's doing it.

08:53.000 --> 08:57.000
And having someone who's a very good tester, like I'll be honest, like you've done testing, right, Mike?

08:57.000 --> 08:59.000
You're just talking about the value of manual testing.

08:59.000 --> 09:03.000
And it's hard because you have to like manually go through and use your brain.

09:03.000 --> 09:08.000
There's no escaping the amount of work to go through and think about all the different possible scenarios.

09:08.000 --> 09:18.000
So if you do find yourself in a relationship with a really good tester, someone who's good at that, likes doing that, and is willing to put the energy into that, that can be invaluable for the team.

09:18.000 --> 09:21.000
Yeah, I think it's definitely an important role.

09:21.000 --> 09:30.000
Do you see this yourself where, you know, I remember back in the old days, see I tried to do a voice there, it didn't work.

09:30.000 --> 09:44.000
There was like an entire QA department in most organizations where there was, you know, a QA manager or director, depending on the size of the organization, that was basically on par with the IT or development director.

09:44.000 --> 09:52.000
What I'm seeing is it's still fairly common for QA to be like a small team, almost operating like a little strike force, right?

09:52.000 --> 09:56.000
Going in and basically breaking stuff, which is their job.

09:56.000 --> 09:58.000
Yeah, and there is probably a sweet spot too, right?

09:58.000 --> 10:00.000
You don't need it to be giant.

10:00.000 --> 10:13.000
And while manual testing is good, you want to find the right balance of automating the things that you can and where it makes sense and it provides a lot of leverage and having enough staff to smartly interrogate products the way that they might actually be used down the line.

10:13.000 --> 10:17.000
So you might do some of this testing on Linux, perhaps?

10:17.000 --> 10:19.000
Oh, yeah, of course I would.

10:19.000 --> 10:20.000
You know me, Mike.

10:20.000 --> 10:26.000
I mean, actually, we're doing this show right now, at least on my end, all through Linux.

10:26.000 --> 10:30.000
And that was something I was talking about just recently at Linux Fest Northwest.

10:30.000 --> 10:34.000
It just wrapped up last week, the 20th anniversary.

10:34.000 --> 10:44.000
And it was amazing, particularly because all of you, all of the audience members, the fans, the community members, the co-hosts that we managed to bring out.

10:44.000 --> 10:48.000
Honestly, Mike, basically everyone but you came out this year.

10:48.000 --> 10:49.000
I know.

10:49.000 --> 10:52.000
You know, I was sitting here clinging to my MacBook.

10:52.000 --> 10:56.000
Thankfully, thanks to some of the team's hard work and shout out to Mr. Chase Nunez.

10:56.000 --> 10:57.000
We've got it.

10:57.000 --> 10:58.000
We had a great live stream.

10:58.000 --> 11:01.000
We didn't have video of the talks, but we did have a bunch of the audio.

11:01.000 --> 11:05.000
You can go find that up on our Jupiter Broadcasting GitHub page.

11:05.000 --> 11:08.000
We've got links to a bunch of MP3 files and some of the slides.

11:08.000 --> 11:11.000
Now, not everything's there just yet, but stay tuned.

11:11.000 --> 11:16.000
We'll be adding stuff both from Linux Fest Northwest and future conference events.

11:16.000 --> 11:20.000
I was really struck this year just by the amazing community that did show up.

11:20.000 --> 11:28.000
I met a bunch of fans of Coda Radio and all of our shows and heard just a little bit of harassment and disappointment that you weren't with us, Mike.

11:28.000 --> 11:29.000
Ooh.

11:29.000 --> 11:32.000
One of the things I'm always impressed by, not only the caliber of people.

11:32.000 --> 11:39.000
You know, it's always humbling to meet people that do things that are way cooler or more complicated or at bigger scales than I ever do.

11:39.000 --> 11:44.000
And we have many of those people in the audience, but they've also just got some neat stuff.

11:44.000 --> 11:51.000
So shout out to listener Chris, who I met at the System76 co-hosted barbecue, which we had, which was a huge success.

11:51.000 --> 11:58.000
You can find out on Twitter more if you want to see some pictures from that event, including Levi capturing a drone.

11:58.000 --> 11:58.000
Nice.

11:58.000 --> 12:03.000
So we were talking a little bit about Rust and WebAssembly, things that you and I have been talking about, Mike.

12:03.000 --> 12:13.000
And he linked me over to this great little tutorial, which is implementing Conway's Game of Life in Rust and WebAssembly.

12:13.000 --> 12:14.000
Doesn't that sound neat?

12:14.000 --> 12:15.000
That sounds amazing.

12:15.000 --> 12:20.000
Now, if you're not familiar, Conway's Game of Life is basically a zero-player game.

12:20.000 --> 12:24.000
You set up the initial conditions and then just let it run from there.

12:24.000 --> 12:31.000
So you have a grid with a bunch of cells and you're kind of simulating a basic biological simulation.

12:31.000 --> 12:34.000
So if a cell has fewer than two neighbors, it dies.

12:34.000 --> 12:38.000
If it has two or three neighbors, it continues on to the next generation.

12:38.000 --> 12:41.000
And if it has more than three neighbors, well, then it dies.

12:41.000 --> 12:43.000
You can also grow new cells.

12:43.000 --> 12:48.000
So if there's a dead cell with a bunch of three live neighbors, it can become a live cell.

12:48.000 --> 12:56.000
So with those simple rules, you can start with an initial condition and then explore how that initial condition changes as you advance through time.

12:56.000 --> 13:05.000
Now, that seems pretty simple, and it is, but it's kind of a classic little programming challenge to implement because it's not super complicated, but it can produce really interesting results.

13:05.000 --> 13:13.000
And what I like about this project is not only does it sort of get you up and running using some of the Rust toolchain and the WebAssembly toolchain,

13:13.000 --> 13:23.000
but you get to build a hybrid project that has WebAssembly, has Rust, and it has all the HTML and JavaScript needed to hook that all together into a functioning game in the browser.

13:23.000 --> 13:25.000
Now, did you play it?

13:25.000 --> 13:27.000
No, I haven't yet.

13:27.000 --> 13:31.000
I did have a chance in a little bit of downtime over the weekend.

13:31.000 --> 13:35.000
I got a little build environment up, so I've got my Rust toolchain.

13:35.000 --> 13:38.000
Unfortunately, I don't quite have it compiling yet.

13:38.000 --> 13:44.000
I'm about to take off on a flight to Boston right after we finish this episode, and it's one of the things I've already saved on my laptop.

13:44.000 --> 13:47.000
So I'm hoping I have all my dependencies already downloaded.

13:47.000 --> 13:51.000
I'm going to start trying to play with it a little bit more on the flight.

13:51.000 --> 13:56.000
Nice. So you will be a Rust station by the time you get back.

13:56.000 --> 13:59.000
Conversion in progress, my friend.

13:59.000 --> 14:05.000
Next, I'm just going to get you onto the sweet, sweet, velvety, smooth something.

14:05.000 --> 14:09.000
I couldn't think of another good thing to say about Rails.

14:09.000 --> 14:11.000
That's what I did there.

14:11.000 --> 14:13.000
Oh, you and Rails, Mike.

14:13.000 --> 14:15.000
Yes, me and Rails.

14:15.000 --> 14:17.000
But you know what's more fun than Rails?

14:17.000 --> 14:19.000
Just about anything?

14:19.000 --> 14:21.000
See, there's no need for hate speech, Wes.

14:21.000 --> 14:23.000
It's just unnecessary.

14:23.000 --> 14:25.000
I'm fired up today, my friend.

14:25.000 --> 14:31.000
How about running Linux inside of Windows 10 using Visual Studio Code?

14:31.000 --> 14:33.000
What? Is that possible?

14:33.000 --> 14:35.000
Yes, it is.

14:35.000 --> 14:38.000
Microsoft has some big announcements coming out because, well,

14:38.000 --> 14:41.000
it is Microsoft Builds going on right now, after all.

14:41.000 --> 14:45.000
And Visual Studio Code just keeps getting better and better.

14:45.000 --> 14:48.000
So am I right in thinking there's actually like three components

14:48.000 --> 14:52.000
to this new sort of remote functionality that they've added?

14:52.000 --> 14:55.000
Yeah, you're kind of Lego-ing together a bunch of stuff to make this work,

14:55.000 --> 14:57.000
but it's pretty cool.

14:57.000 --> 15:01.000
So the basic idea is you're running VS Code on Windows 10,

15:01.000 --> 15:03.000
but let's say you're not insane,

15:03.000 --> 15:05.000
so you want to use the Windows subsystem for Linux.

15:05.000 --> 15:08.000
Right, you don't want to have to set up a build environment on Windows

15:08.000 --> 15:10.000
because you don't hate yourself?

15:10.000 --> 15:12.000
I didn't think that was possible.

15:12.000 --> 15:14.000
You can build software on Windows?

15:14.000 --> 15:16.000
Yeah, it turns out if you try hard enough, you can.

15:16.000 --> 15:18.000
If you believe, it's like, take a bow, you have to clap.

15:18.000 --> 15:22.000
You can actually just use your WSL build environment.

15:22.000 --> 15:24.000
I think, was it four weeks ago now?

15:24.000 --> 15:28.000
We talked about Penguin, P-E-N, whatever.

15:28.000 --> 15:31.000
The new name for WLinux, the Linux distribution,

15:31.000 --> 15:34.000
targeted at the Windows subsystem for Linux.

15:34.000 --> 15:39.000
Right, so it's basically souped up Debian for Windows subsystem for Linux.

15:39.000 --> 15:42.000
Well, I found it incredibly easy to set up a dev environment in that,

15:42.000 --> 15:45.000
and one of my first annoyances, I pop open VS Code,

15:45.000 --> 15:48.000
and damn, it's calling into the C prompt.

15:48.000 --> 15:51.000
Go to this Microsoft tutorial, install this plugin,

15:51.000 --> 15:57.000
and you are riding the sweet rails of the Windows subsystem for Linux.

15:57.000 --> 16:00.000
Hell, you could even do Rails development on it.

16:00.000 --> 16:01.000
Got it in there.

16:01.000 --> 16:02.000
Very nice.

16:02.000 --> 16:05.000
And really, this is all kind of using some of the same functionality,

16:05.000 --> 16:07.000
because some of the other stuff you can do,

16:07.000 --> 16:10.000
there's a containers plugin and an SSH plugin.

16:10.000 --> 16:15.000
And so really, the idea is if you can point Visual Studio Code at some place,

16:15.000 --> 16:19.000
some environment it can go run and act as a build server

16:19.000 --> 16:22.000
and have as your build environment, it's going to go do that, right?

16:22.000 --> 16:25.000
Obviously, with SSH, you're going to need permissions on the other end

16:25.000 --> 16:27.000
to do whatever it needs and access setup.

16:27.000 --> 16:28.000
Right.

16:28.000 --> 16:30.000
But assuming you've got that all in place,

16:30.000 --> 16:34.000
Visual Studio Code just gets its hooks in there and starts running things.

16:34.000 --> 16:38.000
Now, this is a style of development I'm somewhat familiar with in the Clojure world,

16:38.000 --> 16:42.000
because there is already this notion of being able to remotely attach

16:42.000 --> 16:44.000
and live interact with stuff.

16:44.000 --> 16:47.000
But for a lot of languages, this isn't necessarily trivial to set up.

16:47.000 --> 16:52.000
Now, if you're familiar with Docker and you know enough to go spin up some VPS

16:52.000 --> 16:56.000
and get some containers running and be able to forward some ports over SSH

16:56.000 --> 17:00.000
or set up your own little WireGuard VPN, sure, totally doable.

17:00.000 --> 17:06.000
But these plugins are dramatically lowering the barrier to entry for getting this working,

17:06.000 --> 17:10.000
especially as maybe people on Windows who are curious, they want to target Linux,

17:10.000 --> 17:13.000
but they're not really familiar with the desktop side.

17:13.000 --> 17:17.000
Well, here they just, you know, a checkbox to enable the subsystem,

17:17.000 --> 17:19.000
install a couple plugins.

17:19.000 --> 17:22.000
And you should note, you do need to be on their, like, Insider program.

17:22.000 --> 17:24.000
It's not going to work with just the...

17:24.000 --> 17:28.000
I tried it naively with just the snap install of VS Code that I already had installed.

17:28.000 --> 17:32.000
Doesn't work. They've got a special Insider dev you can go download.

17:32.000 --> 17:35.000
That will let you install some of these new features.

17:35.000 --> 17:39.000
Yeah, and I think that goes for desktop Windows version as well.

17:39.000 --> 17:41.000
You have to be on the fast track.

17:41.000 --> 17:46.000
So Microsoft is apparently killing it this week.

17:46.000 --> 17:49.000
.NET 5 is coming. Are you ready, Wes?

17:49.000 --> 17:52.000
No, I don't think so. Can you prepare me a little bit, Mike?

17:52.000 --> 17:54.000
Like, what are you looking forward to?

17:54.000 --> 17:58.000
Because we've been previewing some of the stuff, like the recent changes in.NET,

17:58.000 --> 18:01.000
but what are you looking forward to in your day-to-day work?

18:01.000 --> 18:03.000
So this is breaking news.

18:03.000 --> 18:07.000
It's so breaking, in fact, that in the comments of the blog post that came up

18:07.000 --> 18:11.000
literally 15 minutes before we started recording today,

18:11.000 --> 18:16.000
they replied, oh, we have more information coming in several hours.

18:16.000 --> 18:19.000
So here's what we know now.

18:19.000 --> 18:24.000
The goal of.NET 5 is basically to have one.NET to rule them all,

18:24.000 --> 18:28.000
meaning all the platforms that you can do.NET development on,

18:28.000 --> 18:33.000
everything from bots to IoT to high-end games in Unity

18:33.000 --> 18:38.000
to web, cloud, mobile, desktop, all the stuff you would traditionally think of.

18:38.000 --> 18:43.000
So just the few things that, in this first initial post,

18:43.000 --> 18:46.000
really jump out at me.

18:46.000 --> 18:50.000
They're looking for 5.0 to come out in November 2020,

18:50.000 --> 18:54.000
which to me, that seems very ambitious,

18:54.000 --> 18:57.000
given this kind of high minor goal.

18:57.000 --> 19:02.000
In particular, they want to focus on ahead-of-time compilers

19:02.000 --> 19:06.000
using some sort of integration with LLVM.

19:06.000 --> 19:10.000
What's the way you would put this, Wes, in your words?

19:10.000 --> 19:15.000
I would call it just the compiler du jour for most systems.

19:15.000 --> 19:19.000
It's what Apple uses, what everybody that I'm aware of is using.

19:19.000 --> 19:24.000
Yeah, it's a compiler system in back-end with various pluggable front-ends.

19:24.000 --> 19:30.000
So Clang is the popular C compiler as an alternative to GCC,

19:30.000 --> 19:34.000
but there are many tools like Rust,

19:34.000 --> 19:38.000
where a bunch of the Rust compilation stage relies on generating stuff

19:38.000 --> 19:44.000
and interfacing with LLVM to finally compile to actual real assembly output at the end.

19:44.000 --> 19:47.000
So is that what you're talking about here with the ahead-of-time compilation?

19:47.000 --> 19:52.000
Because normally, you package up your.NET project and you've got.NET bytecode,

19:52.000 --> 19:56.000
stuff that's going to run on the CLR, but you're talking about jumping ahead

19:56.000 --> 20:00.000
and having the CLR's interpretation and running of that bytecode

20:00.000 --> 20:05.000
and have it already be packaged as just plain, say, x64 assembly?

20:05.000 --> 20:10.000
Yeah, it definitely looks like that's what they're doing, but they actually refer to it

20:10.000 --> 20:17.000
in the context of interoperability with some of the best languages ever written.

20:17.000 --> 20:22.000
For example, Objective-C, Java, and that weird other language, Swift.

20:22.000 --> 20:28.000
I don't know that nobody uses, but this is actually going to be my dunking on Swift aside.

20:28.000 --> 20:33.000
I'm a little skeptical.

20:30.000 --> 20:35.000
It sounds too good to be true,

20:32.000 --> 20:37.000
because the level of interoperability you currently get

20:37.000 --> 20:42.000
very much depends on the context you're using.NET,

20:40.000 --> 20:45.000
and frankly, there's just not that much,

20:43.000 --> 20:48.000
ignoring the whole com, C++, Windows thing.

20:47.000 --> 20:52.000
Yes, let's continue to ignore that, please.

20:49.000 --> 20:54.000
We always like to, particularly in the mobile space,

20:54.000 --> 20:59.000
I think they're calling out Objective-C, Swift, and Java specifically for Xamarin.

20:59.000 --> 21:04.000
That's kind of huge, because if you have one of these big legacy Objective-C apps

21:05.000 --> 21:10.000
and you want to bring it forward and you're thinking,

21:07.000 --> 21:12.000
jeez, we'd like to support Android now and go cross-platform,

21:10.000 --> 21:15.000
but we don't want to pseudo-RMR the entire project directory and restart.

21:15.000 --> 21:20.000
I mean, let's not be naive.

21:17.000 --> 21:22.000
It's not going to make that easy, but it's going to take some of that pain.

21:22.000 --> 21:27.000
The proprietary engine that we're using,

21:25.000 --> 21:30.000
we wrote in Objective-C for our old big iOS or iPad app.

21:29.000 --> 21:34.000
We don't want to rewrite it.

21:30.000 --> 21:35.000
Again, the interop is going to help you there.

21:33.000 --> 21:38.000
I'm very curious what the goal of this ahead of time compiling is.

21:40.000 --> 21:45.000
Is it simply performance,

21:42.000 --> 21:47.000
and this interop was a nice secondary benefit,

21:47.000 --> 21:52.000
or is it actually, it's for interop.

21:50.000 --> 21:55.000
Is this code going to be significantly more performant

21:53.000 --> 21:58.000
than code done in the traditional, like you mentioned, CLR, IR sort of way?

21:58.000 --> 22:03.000
My guess is both things are probably going to be true.

22:02.000 --> 22:07.000
Right, and usually it depends.

22:03.000 --> 22:08.000
I mean, I'm speaking from some experience on the JVM side,

22:06.000 --> 22:11.000
but we've seen more ahead of time stuff there with,

22:09.000 --> 22:14.000
in particular, the Graal compiler.

22:14.000 --> 22:19.000
We've seen things like startup time,

22:16.000 --> 22:21.000
but if it's totally ahead of time,

22:18.000 --> 22:23.000
you then lose out on any down the road JIT optimizations

22:23.000 --> 22:28.000
that you might apply.

22:24.000 --> 22:29.000
Now, I know the CLR is a little bit more static than the JVM,

22:27.000 --> 22:32.000
so I don't know how much that's important

22:30.000 --> 22:35.000
relative to the two different runtimes.

22:32.000 --> 22:37.000
It's an interesting thing.

22:33.000 --> 22:38.000
What use cases are particularly going to benefit

22:36.000 --> 22:41.000
or have been waiting for this AOT support?

22:41.000 --> 22:46.000
AOT support is going to be universal in.NET,

22:44.000 --> 22:49.000
which one of the,

22:46.000 --> 22:51.000
and I think actually comparing to the JVM is helpful here.

22:50.000 --> 22:55.000
For instance, Mono on the.NET side

22:53.000 --> 22:58.000
has actually leaned ahead of time compiling a lot more

22:57.000 --> 23:02.000
than let's say the Microsoft proprietary implementations

23:00.000 --> 23:05.000
until very recently.

23:02.000 --> 23:07.000
It's almost, and I don't want to overstate it,

23:05.000 --> 23:10.000
but.NET is in this weird space

23:10.000 --> 23:15.000
where using you actually have a different level of AOT

23:13.000 --> 23:18.000
and therefore different performance characteristics

23:15.000 --> 23:20.000
and a number of other different restrictions or features

23:19.000 --> 23:24.000
in terms of interop.

23:21.000 --> 23:26.000
I think, again, this is their first of what I'm sure

23:24.000 --> 23:29.000
is going to be a long series of blog posts

23:26.000 --> 23:31.000
until November 2020.

23:28.000 --> 23:33.000
What I think they're going for here

23:30.000 --> 23:35.000
is that.NET is going to be.NET is going to be.NET.

23:34.000 --> 23:39.000
No more,

23:39.000 --> 23:44.000
has this compiling strategy,

23:41.000 --> 23:46.000
or this is the Windows WPF,

23:44.000 --> 23:49.000
or this is the classic one that can interop with COM.

23:49.000 --> 23:54.000
I will admit, from an outsider's perspective,

23:51.000 --> 23:56.000
it's pretty confusing right now.

23:53.000 --> 23:58.000
I mean, I can read through it

23:54.000 --> 23:59.000
and they have some bulleted lists that are helpful,

23:56.000 --> 24:01.000
but it's a bit to sort through.

23:58.000 --> 24:03.000
It's actually incredibly confusing.

24:00.000 --> 24:05.000
I read through this document

24:03.000 --> 24:08.000
about three times before we started recording.

24:08.000 --> 24:13.000
Richard Lander, who's the PM over on the.NET team,

24:11.000 --> 24:16.000
is being very careful to kind of express

24:13.000 --> 24:18.000
what they want to do,

24:15.000 --> 24:20.000
but not make any big promises.

24:17.000 --> 24:22.000
But one thing I would just add that's kind of important,

24:19.000 --> 24:24.000
this is not just a Microsoft thing.

24:21.000 --> 24:26.000
The Mono Projects is at the table.

24:23.000 --> 24:28.000
Unity, for those who don't know,

24:25.000 --> 24:30.000
not Unity, the desktop environment,

24:28.000 --> 24:33.000
Unity, the game development engine...

24:30.000 --> 24:35.000
I was hoping you were going to bring this up.

24:32.000 --> 24:37.000
Right, is also part of this.

24:37.000 --> 24:42.000
You are writing in C Sharp, and frankly.NET.

24:41.000 --> 24:46.000
Originally, Unity had their own kind of

24:43.000 --> 24:48.000
third cousin twice removed version.

24:46.000 --> 24:51.000
It would be huge for people who, like myself,

24:49.000 --> 24:54.000
occasionally have to dabble in Unity

24:51.000 --> 24:56.000
to do our applications,

24:52.000 --> 24:57.000
or even if you wanted to do a game on the side.

24:56.000 --> 25:01.000
For it to be one.NET...

24:57.000 --> 25:02.000
Yeah, my understanding is Unity is currently shipping

25:00.000 --> 25:05.000
an ancient mono version, too.

25:05.000 --> 25:10.000
Because Unity is doing a lot of this AOT stuff

25:07.000 --> 25:12.000
right ahead of time, compiling.

25:09.000 --> 25:14.000
Yeah, right.

25:10.000 --> 25:15.000
I mean, of course, because game development...

25:12.000 --> 25:17.000
iOS.

25:15.000 --> 25:20.000
Interesting.

25:16.000 --> 25:21.000
This big news, it seems like there's actually

25:19.000 --> 25:24.000
a lot of good stuff happening in.NET.

25:22.000 --> 25:27.000
I feel like there was kind of a dark time

25:24.000 --> 25:29.000
where.NET was maybe relegated

25:26.000 --> 25:31.000
just to Windows sorts of development,

25:29.000 --> 25:34.000
and Java took off

25:34.000 --> 25:39.000
and now Java's even murkier than ever

25:37.000 --> 25:42.000
with the new release models that have recently come out,

25:40.000 --> 25:45.000
and.NET is more open than ever.

25:43.000 --> 25:48.000
Well, and you know Oracle.

25:45.000 --> 25:50.000
Yeah, I mean, maybe not always,

25:48.000 --> 25:53.000
but just 2019 sitting down right now,

25:51.000 --> 25:56.000
I will take the new Microsoft

25:53.000 --> 25:58.000
over the current Oracle any day.

25:56.000 --> 26:01.000
No, it isn't all sunshine and rainbows here, though.

26:01.000 --> 26:06.000
Well, let's call it FUD.

26:04.000 --> 26:09.000
It's definitely uncertainty and doubt.

26:07.000 --> 26:12.000
F-Sharp has always been a little on the outs

26:10.000 --> 26:15.000
with the AOT stuff,

26:12.000 --> 26:17.000
and it's a little interesting

26:16.000 --> 26:21.000
that F-Sharp is not mentioned in this article at all.

26:20.000 --> 26:25.000
Of course, F-Sharp is part of.NET,

26:22.000 --> 26:27.000
and I'm sure they will benefit from all of this,

26:24.000 --> 26:29.000
but I would not be surprised

26:29.000 --> 26:34.000
if you read the AOT love.

26:30.000 --> 26:35.000
In fact, if you read his closing statement,

26:32.000 --> 26:37.000
he makes a point,

26:34.000 --> 26:39.000
and this is a direct quote,

26:36.000 --> 26:41.000
all new development feature capabilities

26:38.000 --> 26:43.000
will be part of.NET 5,

26:40.000 --> 26:45.000
including new C-Sharp versions.

26:43.000 --> 26:48.000
So C-Sharp gets its own call out.

26:45.000 --> 26:50.000
F-Sharp doesn't get mentioned

26:47.000 --> 26:52.000
in this entire relatively long post.

26:49.000 --> 26:54.000
If you know F-Sharp developers,

26:51.000 --> 26:56.000
or even play one on TV like I do sometimes,

26:56.000 --> 27:01.000
it's kind of second sun issue

26:58.000 --> 27:03.000
between F-Sharp and C-Sharp.

27:00.000 --> 27:05.000
Now, do you think that's just partly because

27:02.000 --> 27:07.000
F-Sharp being a higher level languages

27:05.000 --> 27:10.000
may be targeted at high level data pipelines

27:08.000 --> 27:13.000
and processing or statistical analysis

27:10.000 --> 27:15.000
or something like that,

27:11.000 --> 27:16.000
just benefits less from AOT,

27:14.000 --> 27:19.000
whereas C-Sharp might be the things

27:15.000 --> 27:20.000
that you do get compiled down

27:17.000 --> 27:22.000
to really tight, minimally GC'd things

27:20.000 --> 27:25.000
that run perhaps orchestrated by systems written in F-Sharp?

27:25.000 --> 27:30.000
We should definitely do an F-Sharp show

27:27.000 --> 27:32.000
and kind of go through it, but just to high level,

27:29.000 --> 27:34.000
one of the main advantages,

27:31.000 --> 27:36.000
you mentioned Unity being pegged

27:33.000 --> 27:38.000
onto an old version of Mono,

27:35.000 --> 27:40.000
of this AOT stuff is iOS compatibility.

27:38.000 --> 27:43.000
Oh.

27:39.000 --> 27:44.000
And there's just not a whole lot of people doing F-Sharp

27:43.000 --> 27:48.000
because remember Apple has that whole

27:45.000 --> 27:50.000
you can't have a runtime running.

27:46.000 --> 27:51.000
Yes, right.

27:47.000 --> 27:52.000
They have some pretty strict qualifications.

27:49.000 --> 27:54.000
Right.

27:54.000 --> 27:59.000
But also like F-Sharp,

27:56.000 --> 28:01.000
and we should probably do this as a topic one day,

27:59.000 --> 28:04.000
F-Sharp is trying to do something hard.

28:02.000 --> 28:07.000
It's trying to bring functional programming to.NET,

28:06.000 --> 28:11.000
but.NET was really born just like the JVM

28:10.000 --> 28:15.000
out of an object oriented point of view.

28:12.000 --> 28:17.000
So there's all these kind of weird

28:15.000 --> 28:20.000
coping mechanisms that F-Sharp has to do

28:18.000 --> 28:23.000
where in fact this is,

28:23.000 --> 28:28.000
probably the best criticism of F-Sharp as a language

28:26.000 --> 28:31.000
is that it's so married to,

28:29.000 --> 28:34.000
but it has no choice to kind of the world of.NET

28:32.000 --> 28:37.000
and the legacy that came before it,

28:34.000 --> 28:39.000
that it's always kind of

28:37.000 --> 28:42.000
not as functional as it could be.

28:40.000 --> 28:45.000
It's more the functional gateway drug.

28:42.000 --> 28:47.000
It's not like the pure functional heroin

28:44.000 --> 28:49.000
that you'd be looking for.

28:46.000 --> 28:51.000
That can be a qualification,

28:51.000 --> 28:56.000
but the other benefit is of course you get to use

28:54.000 --> 28:59.000
the rest of the ecosystem, right?

28:56.000 --> 29:01.000
So you might not be Haskell,

28:59.000 --> 29:04.000
you also have access to the whole library

29:02.000 --> 29:07.000
of C-Sharp applications and tools

29:05.000 --> 29:10.000
that you might want to leverage.

29:07.000 --> 29:12.000
Yeah, I mean, a pattern I like,

29:10.000 --> 29:15.000
though I'm not sure how popular this actually is

29:12.000 --> 29:17.000
because it's my own little in the closet thing,

29:15.000 --> 29:20.000
is F-Sharp for kind of business logic

29:20.000 --> 29:25.000
because I personally feel that the OO model

29:23.000 --> 29:28.000
makes a lot of sense for interfaces, right?

29:25.000 --> 29:30.000
And that is the model that is dominant

29:27.000 --> 29:32.000
in many of the libraries that you end up having to use.

29:29.000 --> 29:34.000
So in many cases you have to be patching

29:32.000 --> 29:37.000
a different paradigm on top which can be messy at best.

29:36.000 --> 29:41.000
So actually that's another thing

29:38.000 --> 29:43.000
that was kind of not addressed here.

29:40.000 --> 29:45.000
I'm sure you're familiar with XAML,

29:42.000 --> 29:47.000
their markup language for user interfaces.

29:47.000 --> 29:52.000
XAML is not one unified language, so to speak.

29:52.000 --> 29:57.000
I say it's like English, but it's even more foreign.

29:54.000 --> 29:59.000
There's different, there's dialects

29:56.000 --> 30:01.000
that are significantly different

29:58.000 --> 30:03.000
and behave in different ways

30:00.000 --> 30:05.000
between the different possible platforms.

30:02.000 --> 30:07.000
So there's Xamarin XAML, there's UWP XAML.

30:05.000 --> 30:10.000
Like we talked about Project Uno,

30:08.000 --> 30:13.000
that's an implementation of UWP XAML

30:10.000 --> 30:15.000
for the other platforms.

30:15.000 --> 30:20.000
You read a lot of.NET blogs.

30:18.000 --> 30:23.000
Yeah, but we'll have to see how far it goes.

30:21.000 --> 30:26.000
I'm looking forward, there's going to be another post today.

30:23.000 --> 30:28.000
So I'm looking forward to next week

30:25.000 --> 30:30.000
to learning more about end of life of.NET 4,

30:28.000 --> 30:33.000
which is the other side of this coin.

30:30.000 --> 30:35.000
Yes, right. As always happens,

30:33.000 --> 30:38.000
when you have a new release, well, out with the old.

30:36.000 --> 30:41.000
And that can be a tricky arrangement,

30:38.000 --> 30:43.000
especially if you've built stuff

30:39.000 --> 30:44.000
that's sitting out there in production using it.

30:44.000 --> 30:49.000
I thought they were talking about 2020

30:45.000 --> 30:50.000
for the rollout of.NET 5.

30:47.000 --> 30:52.000
Well, I'm surprised it's so soon.

30:49.000 --> 30:54.000
I thought they would continue

30:51.000 --> 30:56.000
to kind of do this a little slower, actually.

30:54.000 --> 30:59.000
But they're going to have to support the 4 series

30:57.000 --> 31:02.000
for a very long time, I would think,

30:59.000 --> 31:04.000
because there's a lot of people right now

31:01.000 --> 31:06.000
refactoring their code into.NET 4,

31:04.000 --> 31:09.000
particularly.NET Core, that aren't going to be happy.

31:08.000 --> 31:13.000
Having said that, it does seem,

31:13.000 --> 31:18.000
but if you're basically using.NET Core

31:14.000 --> 31:19.000
such.NET standard,

31:16.000 --> 31:21.000
this is going to be a pretty easy progression.

31:20.000 --> 31:25.000
How have past progressions gone?

31:22.000 --> 31:27.000
Has there been...

31:24.000 --> 31:29.000
Problems.

31:25.000 --> 31:30.000
Yeah, hairy problems in the past in.NET upgrades?

31:28.000 --> 31:33.000
Yeah, I mean, the progression,

31:30.000 --> 31:35.000
let's say if you're a legacy ASP.NET app

31:33.000 --> 31:38.000
to become an ASP.NET Core app,

31:35.000 --> 31:40.000
it's not exactly...

31:37.000 --> 31:42.000
If you're of a certain scale,

31:42.000 --> 31:47.000
but if you're a reasonably sized web application

31:45.000 --> 31:50.000
that takes a lot of requests,

31:47.000 --> 31:52.000
that's not trivial.

31:48.000 --> 31:53.000
I mean, you are rewriting in a new framework,

31:50.000 --> 31:55.000
which this should not be, to be clear.

31:53.000 --> 31:58.000
This should just be bumping a version.

31:55.000 --> 32:00.000
Drop in, have some upgrades, rebuild your app

31:58.000 --> 32:03.000
with the new library and runtime,

32:00.000 --> 32:05.000
and hopefully, fingers crossed,

32:03.000 --> 32:08.000
everything keeps working.

32:05.000 --> 32:10.000
I hope so.

32:06.000 --> 32:11.000
Well, that's a lot to look forward to, Mr. Dominic.

32:11.000 --> 32:16.000
We don't want to stress you out too much,

32:13.000 --> 32:18.000
so let's leave it at that.

32:14.000 --> 32:19.000
There's some other stuff

32:15.000 --> 32:20.000
that we want to talk about today.

32:17.000 --> 32:22.000
In particular, oh, you've been baiting me

32:19.000 --> 32:24.000
with a tease around Python and Ruby,

32:22.000 --> 32:27.000
two things I get excited about myself.

32:25.000 --> 32:30.000
But I think let's save that for Coder Radio 357

32:29.000 --> 32:34.000
and call it a day for Coder Radio 356.

32:32.000 --> 32:37.000
What say you?

32:33.000 --> 32:38.000
Sounds good and fly safe.

32:35.000 --> 32:40.000
Oh, thank you very much.

32:40.000 --> 32:45.000
Well, that's coder.show.

32:42.000 --> 32:47.000
That's easy, we've got our show notes,

32:44.000 --> 32:49.000
links to basically everything we talk about

32:46.000 --> 32:51.000
in each one of these episodes,

32:47.000 --> 32:52.000
and of course, you can go to coder.show slash contact

32:50.000 --> 32:55.000
if you want to get in touch.

32:52.000 --> 32:57.000
If you want to find all the other fine

32:54.000 --> 32:59.000
Jupyter Broadcasting programs,

32:56.000 --> 33:01.000
well, just head on over to jupyterbroadcasting.com.

32:59.000 --> 33:04.000
There you'll find our calendar,

33:01.000 --> 33:06.000
which will let you know when we're here live,

33:03.000 --> 33:08.000
and links to all the RSS feeds

33:08.000 --> 33:13.000
or check out this week's Linux Action News

33:10.000 --> 33:15.000
if you want to get caught up on all things Linux,

33:13.000 --> 33:18.000
and maybe give a try to our Friday stream.

33:16.000 --> 33:21.000
It's a new show we've launched we're playing around with.

33:18.000 --> 33:23.000
It's a lot of fun, a casual hangout,

33:20.000 --> 33:25.000
and a great chance to meet some of our JB crew.

33:24.000 --> 33:29.000
Of course, if you can't wait for any of that

33:26.000 --> 33:31.000
and you just want to reach out with your favorite new tool

33:28.000 --> 33:33.000
or feedback about the show,

33:29.000 --> 33:34.000
we're both on Twitter.

33:31.000 --> 33:36.000
I'm at Westpane, and Mr. Dominic, you're?

33:36.000 --> 33:41.000
Thank you all for joining us today.

33:41.000 --> 34:08.000
We'll see you right back here next time.


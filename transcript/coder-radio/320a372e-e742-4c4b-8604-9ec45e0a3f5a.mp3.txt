This is KOTOR Radio, episode 434 for October 4th, 2021.
Hello friends and welcome back in to Jupiter Broadcasting's weekly talk show,
taking a pragmatic look at the art and business of software development and the world of technology.
This episode is brought to you by Cloud Guru.
Cloud Guru has the Cloud Playground, Azure AWS and Google Cloud Sandboxes on ACG's credit card, not yours.
Get certified, get hired, get learning at acloudguru.com.
My name is Chris and joining us every single week is our work machine, it's our host, Mr. Dominic.
Hello Mike.
Hello Chris.
Hello sir, how are you holding up? You doing alright?
I'm alright, how are you?
I'm good, I mean I know it's the final push, you've been pulling in a lot of hours.
I've seen some late night slacks that indicate you're working at all hours of the night and day.
Oh yeah.
But you sound good.
Yeah, I took a little bit of a rest today, but yeah, just to not black out on the air.
Usually not our best rated shows.
I mean it depends, some people love them I would imagine, you know.
You got to just play it all the niches.
Yes.
So I guess I'm a little envious because I've been working seven days a week since I got back from the road trip
and the road trip was no walk in the park either, especially the last few weeks of it were really, really rough and tense.
And I just, I'm dying.
Like you seem like you're managing this, like you're in the final push of a release and it's a lot of hard work,
but like you're showing up, you're fresh, you even put the show doc together today.
I know.
Like I showed up and the show was ready to go and I'm like, what is going on here?
Meanwhile, I'm like scraping myself together to get down here.
I want to know what your secret is.
You know, I don't really have a secret.
I mean, I'm sure right after the show I'm going to black out.
It's like maybe a pacing thing.
Have you changed the pacing the way you're working?
There's something different.
You know, I had a good thing going where I was doing early morning hours,
but that fell apart in the last couple of days where I ended up working nights.
And I'm not doing much like socially or, you know, I think I've just sacrificed a lot to not get around that.
Yeah.
Optimus Grey points out not doing it from Tucson helps as well, which is a hell-failed state.
I think too, like you make a good point.
It seems like for me personally, it's less costly to do those big pushes early in the morning than it is to do late nights.
And it's the late nights that really burn me out.
Like I've been, so I've been working.
I took time off Saturday.
Absolutely.
I still work Saturday and I'm an hour and a half each way from the studio right now.
Jesus.
And to just randomly add that kind of commute, you know, you think about it.
Like you don't move house.
You don't move where your house is very often.
So you build a life around the commute you have and you create a routine.
But I'm moving around right now.
And so I just randomly for a couple of, for three weeks have an hour and a half commute each direction.
And you don't just like absorb that kind of commute out of nowhere.
Like you have to cut into stuff and it's just been, it's been brutal.
So I'm going to head to the woods this weekend.
I'm going to take an early weekend.
I'm going to head out on Thursday.
Yeah, I'm just going to chill out for a while.
And I'm calling, I'm calling it a reading weekend.
I've got books queued up and I'm just going to read all weekend.
That's my plan.
We'll see how it goes.
That sounds amazing actually.
I hope, I hope it's really nice.
I hope it's refreshing.
So are you, is this the last few days for you?
Are you like, you're getting super close, right?
Like one week or so?
Super close.
So next week is launch, come hell or high water.
The end, the end of the week.
So it's going to be, it's going to be, you know, it's, it's actually not close.
It's basically done.
But there's always now I'm at that 20% hellscape of, oh, well actually this doesn't seem to work right in the following, you know.
Yeah, I don't know.
Actually the last 10% often the worst, some of the hardest.
Yeah, so I totally get it.
Well, let's see if we can't help an old friend.
He's written into the show over the years.
Even once back in high school, he says, I wrote in asking about a career direction at the time before I got into college and man, did this work out for him?
Apparently we gave him some good advice.
Check this out.
He says, I graduated from a top research university in May.
Prior to graduation, I worked in one of the IT departments for a bit over two years.
First as a tier one support, then later as management overseeing a large internal software project.
Prior to college, I ran a private IT business for the better part of eight years.
No, seriously.
Now I'm 23 years old.
I was doing better than I could have ever imagined with a stable income, a business, tech experience, management positions, and I was graduating from college.
Last week, I took a full time management position within the university and subsequently turned down a job that was paying 11,000 more a year for the flexibility of the management position at the university.
But yesterday, a week after taking the job, I was fired because of a background check that showed some bad decisions I made in undergrad resulting in a felony, which, by the way, is set to be reduced next month.
Now I ask myself, amid burnout, depression, and needing to pay the bills, is tech the thing I want to do?
And if so, how can I pursue it with this felony on my record?
I don't know about Mike's relatable background, but I know Chris made some hard career decisions a while back that turned out really well.
Why have you all stayed in tech?
Have you all had to make these kinds of pivots before?
What advice might you have for someone who's quite capable of performing with history to prove it, but is struggling to get to the next step of life with a bit of a criminal record?
Thanks for your advice.
That's tricky and such a shame.
You know, somebody that young to have opportunity like that taken from them because of a bad decision they made when they were even younger and especially when it's about to be reduced next month.
I mean, what a damn shame.
He didn't want us to use any names.
But I feel for him because he's written in several times over all of this journey that he's been on because the show has tracked all of it, and this is where he's at now.
That's terrible.
I mean, that is just terrible.
I mean, I want to say, first of all, I don't feel like every place is going to punish him for that felony.
I mean, background checks are a lot more common these days, though.
But in a month or so, it sounds like it'll be in a better position.
Yeah, it'll be in a better position.
I mean, so it sounds like it's going to get kicked out of a misdemeanor or something, right, which often will not be picked up.
I don't know.
I mean, so for folks in a similar position, if you've been like incarcerated, there's the group Underdog Devs.
They do great work helping folks get into tech, get jobs at places, you know, that don't have any kind of like clearance requirements or anything like that.
I would say, honestly, it's very strange for you to get the job and then lose it.
It's taken a while for the background check to come back, Corona delays or whatnot.
I mean, could you imagine the level of burnout after passing up a higher paying job?
You know, the high of taking this management position at a university that seems like such a great job, you're willing to pass up more money and then the low of getting fired from it?
I'd be contacting another company, first of all.
But second of all, yeah, that would be my my move for sure.
Now he's questioning just leaving tech altogether.
Have you ever been in that spot where you're like, maybe I should just get a whole other field, maybe I should just move to an entirely different field?
Let me tell you, I would open a fantastic bakery.
It's not true, but you know what's weird?
I every every guy that I talk to this, I have this because I've talked about this with friends of mine who are in tech, too.
We all go to restaurants like I'd want to do a barbecue joint.
Everybody I know does. It's restaurants.
It is weird, though, but that's like an even harder business in some ways.
Oh, yeah. Almost guaranteed to fail.
I don't I don't know that that's the best choice.
Yeah, it's really like, what is your skill set and what are you passionate about?
You can't you can't just go become a farmer.
You know, it's not just you don't just fall into farming.
It's kind of like the same ridiculousness when, you know, a painter gets laid off because he's got bad carpal tunnel and they tell him to go become a coder.
It's like, give me a break.
Just not how it works.
I mean, looking on the bright side here, though, the market for deaf people is super duper hot right now.
Yeah. So I don't think you're going to be unemployed for too long at all.
Yeah, I think he's down more than he needs to be.
I think he's going to be OK.
You know, take the week or two, chalk it up to a bad experience.
I understand that you need income, all that, but it it's super hot and companies are having a super hard time hiring people in tech.
And I think you'll land on your feet, man.
I don't know. I am I know it's cold comfort, but it's kind of never been a better time to need a different tech job.
Yeah. And I think, too, if you if you got the right hiring person.
Like if I saw your resume and I saw what you've accomplished in a short amount of time,
I'd pretty quickly put together that you're a pretty motivated individual who's probably going to be a go getter.
And I'd look at some of those other things with probably less concern.
But then again, I'm in I'm in a tiny company where I have that kind of flexibility.
But what I'm saying is it just takes somebody with some intelligence and some individual capability to think on their own as a as an individual and not as part of a collective to recognize your value.
It's clear just from that email what you're capable of.
And people like that don't tend to stay down for long.
But do please keep us updated because I really genuinely want to hear it.
So let us know. And if you're out there in a similar position or have any tips or experience,
if you've been through something like this, relay it to us at Coder dot show slash contact.
But some guy writes in and he wants an M1 update for Mr.
Dominic. He says, I was curious if Mr.
Dominic could share his experience with using an M1 device to develop, especially in Python and C.
I'm coming from a 2015 MacBook Pro.
And after breaking the monitor, I figured it was time to upgrade.
I'm holding out for the next generation of M1 devices and wanted to hear how it's been for you.
And he also says, Have you figured out when it's appropriate to run the terminal under Rosetta or are you still stumbling with that sometimes?
Always. You just you always just decide to run things under Rosetta.
Is there any issues with that stuff and so on?
Yeah, just always run it under Rosetta. Really?
The terminal just always and it's yeah, in fact, I changed it to the thing that's called terminal dot app on mine is the Rosetta terminal.
And the other one is like I think I call it like ARM terminal or something.
If you're just you're just going to leave it that way for a while, right?
Let them sort it out for like the indefinite future.
Otherwise, like it's fine. It's fast. It works fine.
I mean, the MacBook Air is still like the best laptop I've ever owned.
So he asked you like about using ID specifically with C and Python.
All that's been fine. No, no issues to report there.
Yep. VSCode is amazing.
Python works fine if you want to go the JetBrains.
Although I've pretty much replaced everything with VSCode at this point.
That's not surprising.
The most interesting thing about this whole M1 for development story is how like not interesting of a story it really is.
In a way, yeah, right? That it's not this huge issue.
Once you set up terminal to run in Rosetta, you're fine.
One last email into the show and I love this kind of stuff because it's just it's great to get tips.
Carl writes in with a cool tool and he says, hello, Chris and Mike.
About a year and a half or so listener.
And I want to write in and mention any tool I found.
It's a slick backup that I've managed to configure with Linode's S3 storage.
Previously, I was using R-Sync and tar, but there's a degree of complexity involved in getting that set up.
Yeah, I could see that.
I found Borg backup, he writes.
And a side note, I also have a lot of previous years, but previous experience with Borg backup and really liked it.
But he continues, it has all the advantages of live compression and data de-duplication like R-Sync.
But handles all the archiving like tar would as well.
And it handles encryption.
He does an offsite backup to S3.
He gets everything up there like his photos, his SQLite databases, his configurations, etc.
He puts it on a Linode S3 bucket using S3FS.
He writes, all in all, I find it to be a cost-effective way to back up my development environment and have it all offsite.
It's better than anywhere else.
And I got to use the sponsor credit.
Well, isn't that great?
Thank you, Carl.
Also, I'll do a plug for Borg backup.
And I'm going to do a plug, and I think, Mike, you know this too, for object storage, like incredible.
And I don't know if you saw this, but last week, Cloudflare announced R2.
And R2 is an S3 compatible object storage that can sit in front of another S3 storage like Amazon and doesn't have any egress charges,
which is where Amazon makes all of its money.
So you can use R2 to pull files out of S3 once and then store them and serve them from R2 with no fee other than the service fee.
Amazon's going to have to respond to that.
That's cutting right in at their profit margin.
Linode.com slash coder.
Well, that's a great place to store your files in object storage.
And they have fantastic rates, too.
So go there and try it out.
Go to Linode.com slash coder.
They started in 2003 as one of the very first companies in cloud computing.
Now, 18 years later, they are the largest independent cloud provider in the world with 11 global data centers serving nearly a million customers.
But their mission has really remained the same.
Just build the best in class experience for hosting.
And Linode, that nails it.
And when you take advantage of that $100 offer, you can see what I've been talking about now for a while.
When we went independent, Linode came on board to support this content.
And I thought at the time, like, this could be pretty great.
I've been a Linode customer for a couple of years at this point.
I've got some experience.
But I really had no idea.
I hear from so many of you out there about the different ways you use Linode and how it solved things that were, like, particularly crunched during the last couple of years.
Like, deploying the one-click Jitsi solution has saved a ton of people from Zoom hell and gotten a bunch of other people out of Zoom hell.
If your organization is doing a lot of virtual meetings right now and you'd like to control that infrastructure yourself, but maybe you're not, like, an expert system administrator,
Linode has tons of good documentation that will really help you set these things up correctly and securely.
And then additionally, they've got one-click deployments for things like Jitsi and tons of other applications, maybe like Nextcloud or other things you could use to collaborate.
GitLab and all kinds of tools.
One click, you get it going, they'll have a couple of questions for you, you can answer, they'll set up the box correctly, they'll make sure everything's done properly, and then you just keep it running from there.
But they also offer a powerful DNS manager if that's the way you like to go.
They have Kubernetes and Terraform support if that's how you're managing your infrastructure now.
And they're 30 to 50% cheaper than the major hyperscaler duopolies who are trying to lock you in all the time to their infrastructure.
And Linode's support for the community runs deep.
They made our Jupiter colony road trip possible.
They've supported my Linux Fest Northwest that I've gone to for 20 plus years.
And they backed some of my favorite open source projects, not because they have to, but because they want to invest back in the community that made what they do possible.
That's how you can tell there's people there that truly appreciate and use Linux.
Linode is dedicated to offering the best in virtualized cloud computing.
If it runs on Linux, it runs on Linode.
So go sign up today at linode.com slash coder and get $100 in 60-day credit on your new account.
That's linode.com.
It went off the rails there, but I'm going with it.
Linode.com slash coder.
There is a lot going on, Mr. Dominic, and I thought maybe we'd start with a couple of the stories you grabbed over the weekend.
This hermit programmers are dead.
Hit me right in the feels because I've known.
You know, especially in the 90s and in the early aughts, you had these really kind of eccentric developers that would be working on the really important part of the code base.
And they had they had like just a blank check to behave and do whatever they want.
I worked at a company once where this guy had the coolest cube.
He had built himself a roof and his own custom lighting and he kept it dark in there and he got to dress however he wanted.
And nobody talked to him because he was the special, very eccentric developer.
And this was at an antivirus company.
And he was like he knew the special sauce on how to build the antivirus software.
That wasn't a rare thing to see at a company.
And you linked us to a piece we'll have in the show notes that kind of suggests that person is about to lose their job.
So I linked to this because I think there's some value in the article, but I definitely think it's overstated.
Right. There will always be the guy in the basement or the gal in the basement who has to write the firmware.
So I know it's a bit of a caricature, but I mean, I know some very nice people who write firmware.
Exactly. Right. I'm nothing against firmware developers.
I think what this article gets right is that there is a whole new skill set more like soft skills, communication skills,
not wanting to rip the user's throats out for not going on the happy path in your application.
That is definitely going to provide increasing job opportunities and value.
My issue is I don't think those are replacing your more we'll call them dark matter developers.
Right. I think this is in addition to particularly around the areas of like no code automation,
stuff like that, where basically the developer serves as an abstraction machine to keep the users
or the end stakeholders away from the technical details in a way that they're still communicating kind of how things work,
but in some sort of abstracted way.
Yeah. This article doesn't go all the way, but then the second article you linked about the open AI codecs,
they basically come out and say, well, really a future programmer's job is plumbing.
It's about connecting APIs and building something out of existing wiring.
And it's not so much about actual writing code.
And so it'll make it necessary that they actually excel at things like communication
and understanding people's needs and expectations and not excel so much of the development,
because that's more of just connect these different components together kind of stuff,
which first of all, I think I agree with you.
It's like, yeah, that will be probably maybe even the majority of the jobs that are considered programming at some point.
But there still has to be somebody somewhere building that stuff they're connecting.
Yeah. I mean, and I would even argue that's like a realistic look at how programming jobs are now, right?
How important is it for companies to have APIs that third party developers can hook into to write whatever line of business app?
Yeah. You could even argue that like using open source packages is a version of that.
I think there was an article, I don't remember who wrote it, but like Lego oriented development, I think was the title or something very similar to that.
We were taking pieces and snapping them together.
Instead of it being extremely frustrating, that makes it sound fun.
It makes it sound fun until somebody like changes their OAuth scan, but it's not.
Until you try to do it.
He makes the case and again, we have it linked, but there's going to be this explosion of what he labels as middle skilled developers.
I'll just read just a small excerpt here.
He says, the number of programmers is constantly on the rise, but many programmers no longer need to be experts.
Middle skilled developers now do what needed an expert before and experts now do what needed to be a team 10 years ago.
Having all services as standardized APIs and a few packages that can access them all.
Suddenly, the most complex programming task becomes plumbing activity where no programmers are needed.
I just don't know if I buy that.
I see that's why I think the article is a bit overstated.
It's funny, like I agree with it to a point.
Yeah, I think middle skilled, if that's what you want to call it, seems kind of derogatory.
But middle skilled developers, I could definitely see that being the bulk of the market.
And I could see in most business cases, you have a couple of people in your business who are connecting different things together like this.
With maybe a little bit of code in between to help, you know, smooth over little bits or translate data or something like that.
I mean, it's an interesting question of like, I also kind of picked up on the middle skilled thing and didn't love that myself.
Right.
Is it really like a different middle skilled or is it just a slightly different skill set that maybe as an industry we have historically undervalued?
Yeah, and I think you and I started to touch on this when we were talking about that artificial intelligence text editor,
which I've already forgotten the name of because I'm an old man.
There's also Codex, the OpenAI Projects Codex, which is similar in some ways, which you link to in the show notes.
Yeah.
The whole idea there is that it's another system that writes code automatically using a few simple prompts and plain language to prompt the developer.
And then it kind of does the rest of the actual programming.
I could see companies loving this idea.
In their paper announcing Codex, OpenAI scientists acknowledge that in their words, quote, engineers don't spend their full day writing code.
Instead, they spend much of their time on tasks like conferring with colleagues, writing design specifications and upgrading existing software stacks.
Codex creators, this is no longer a quote, but it'll be it's about to be.
Codex creators suspect that the system may, quote, somewhat reduce the overall cost of producing software, end quote.
And they say by letting developers, quote, write good code faster, they doubt it will steal jobs.
If anything, they suggest automating the grunt work associated with software development will open up the field to a broader range of people, end quote.
They called it a new specialty instead of middle engineers or middle developers, whatever the other guy called it.
The Codex folks call those developers prompt engineering.
Engineers, they get prompted and craft textual responses to allow the AI to proceed.
How about that? That's your new programmer, somebody who can craft textual responses to an AI to auto deploy new code.
Clearly, they're not there yet, but that's where they think they can take it.
I suppose I may if I can't be too skeptical because I could play this back in a few years and eat my words.
Yeah, I just don't buy it.
We were all going to be coding in Java and thinking about objects for the rest of our lives at one point.
I'm just saying, right?
True.
I mean, VP6 was going to be the language to end it all.
I feel like these kind of pronouncements are nice and clickbaity.
And there is something true here, right?
There is going to be more systems that integrate between different systems and basically do a lot of what a custom developer in-house would have done.
But behind the scenes, there's somebody writing like Python or whatever to make that system actually work.
It's just they're giving you a better front end.
Yeah.
I don't know.
You know what?
We've been about to be wiped out for how many years now?
I'm going to take a cynical, skeptical look at this.
So if anybody feels very differently, feel free to let us know your point of view, coder.show.com.
I think while I'm not saying everyone on the project is, this is their intention, I wouldn't be surprised if some of the executives' intention isn't just to raise awareness about their group and to suck money out of large corporations who can be told,
hey, if you fund us and you give us a runway for a few years, we'll develop a tool so you can pay your developers less and hire less developers.
That's probably how they'd pitch it.
If once this tool is fully operational, you could cut your development staff in half and the ones you do have to retain, they'll be the cheap ones.
You can see how these executives would have a horrible conversation like this amongst themselves.
And then, of course, they flower it up in very pretty language when it's business to business conversations and they're pitching it to the executives.
They don't come out and say it like that, but that's what they're thinking internally.
And they think to themselves, we'll get money out of these big companies for a while and tell them the promise of reducing their staffing costs.
And in the meantime, you know, maybe they get it working, maybe they don't, but they all get paid.
Nobody's the loser.
And these big companies get shown for supporting AI and open AI initiatives and it looks great for them and they become brand ambassadors
and they get their logo on the website and everybody goes away fat and happy.
And nobody actually has to produce anything that's actually going to make real world code that runs in production somewhere that actually matters.
Nobody ever has to get to that point because there's no benchmark.
There's no goal.
It's just sort of all nebulous.
Is that too cynical?
I mean, I think it's a little cynical, but I don't think it's wrong.
So, you know, many things can be true at the same time.
Right.
You know, no code isn't just fluff, which I think is a lot of what this stuff really is.
Right.
But it's usually not no code.
It's the end user doesn't need to care.
But it's, you know, GitHub bot or whatever it is, isn't going to like put, you know, ThoughtBot or TMB or any consulting company out of business.
It's just going to be a tool that people use and there's going to be caveats to the use of that tool.
Right.
There have already been concerns about how it may or may not violate GPL and stuff like that.
So I don't know.
Yeah, here's my thing.
If you wanted to come at me and position it as a learning tool for people just getting started who wanted to maybe connect concepts and get output and see if they're on the right track.
And we're not saying they should take it as gospel and an example of what to learn by.
But it could be like how it just is a really kind of bad example.
But, you know, the way I learned to create web pages back in the day was by viewing source of other web pages and kind of copying what they did and playing with it until I got my website working.
Using it as a tool, these codecs things or the GitHub tool to do that kind of stuff.
Like if you wanted to pitch it as that.
Sure.
But that's not that's not what they're pitching.
In fact, they're going so far as to say we are going to redefine the software development field and people will go from developers to prompt engineers.
But that's it's just it's outlandish, right?
It is braggadocious.
It is so over the top.
It's like we're going to we're going to redefine one of the largest industries in the world because our open source tool is going to have such an impact.
And I may eat these words.
Maybe I'm wrong.
Maybe it will.
But from where I'm sitting today, it seems like it'd be much more rational and reasonable to pitch these things as science experiments and maybe educational tools or coding assistance at best.
Yeah, I mean, that's where I am, too.
Right. And I also think there's like a whiff of, you know, trying to once again have like real developers versus whatever these other people are.
Hmm. You're right. It sort of segregates the development community up a bit, slices it up into like, yeah, high end developers and prompt developers.
I remember like, oh, iOS developers aren't real Cocoa developers.
And then there was lots of money in the App Store and a lot of people changed their mind real quick and became iOS developers.
Yeah. Now that's totally flipped.
Yeah. Hmm. Yeah.
Datadog.com slash CoderRadio.
You know, this here episode, it's brought to you by Datadog.
They are the monitoring and security platform for developers, security professionals, operation teams and anyone operating in the cloud age.
With Datadog, you can unify your metrics, your traces, your logs, your application performance all in one place.
And you can troubleshoot issues faster and break down silos between teams and communicate better.
So head to Datadog.com slash CoderRadio to check it out.
Go create a real time dashboard. They have over 450 technology integrations and you can get started in just minutes.
It is mind blowing. You can easily pivot from high level overviews of your entire environment right down to granular visualizations of the metrics or events you care about.
See, Datadog has infrastructure monitoring, application performance monitoring, security, real time user monitoring and a lot more in one place.
So go get started with their free trial today at Datadog.com slash CoderRadio.
Go see why thousands of companies and listeners of the CoderRadio program trust Datadog.
It's their monitoring solution.
And if you start a free trial and create one dashboard, Datadog will send you a free T-shirt.
And you know what? Pretty much my entire closet is that stuff.
And I haven't gotten nearly enough in the last couple of years.
So go over there, support the show, create a dashboard and get a free T-shirt.
Datadog.com slash CoderRadio.
The show moves right along into the second half of the show.
We've got some good stuff today.
You found one. It's just right up your alley.
It's a it's a I guess you could call it a review that shows the coverage test coverage is not necessarily strongly correlated with the test suite's effectiveness.
In other words, if shops out there are looking at their test coverage and say, well, look, we have covered 100 percent of the code base with this.
It doesn't necessarily mean it's effective.
Greg Wilson writes, we'll have a link in the show notes.
One of my recent hobby projects was a blocks based tool for doing basic data science.
And I was very pleased when the test suite achieved 100 percent line coverage.
However, one of my coworkers found that code coverage was actually a poor prediction of how effective a test suite is at detecting bugs once the size of that test suite itself is accounted for.
And he goes through the methodology that they used in good detail.
But he writes, in other words, more tests do find more bugs, but it's the number of tests and not their code coverage that has the most predictive value.
Surprising to him, but maybe not so surprising to you, is it?
Again, I've been on a journey with testing for a long time.
I sort of feel like the way test line coverage became popular was it's a really cool metric for the business development guy at a consulting shop.
It's measurable, right?
It's measurable and it's like a bullion, right?
It is whatever it is.
But I would argue that many tests that people write aren't really valuable.
And more tests that cover your actual line of business core stuff, because this article, it's a summary of two academic papers.
But there's kind of a great point where what ends up happening in organizations that require 100 percent line coverage is you just get shallow tests that pass and don't really test all the code paths.
They might test trivial things, but not the core functionality of the product.
So that's – I mean, I don't know if I agree with – I mean, obviously the data does suggest that more tests are better, but that's different, right?
That's more tightly focused smaller tests rather than covering each line of code.
It's interesting, right?
I mean, testing is kind of like fashion.
It was all about test first, then it was TDD, then it was BDD, and then it was like – I forgot what the other one was, but like experience-oriented or something.
And now, I don't know, I've personally fallen into this way where I will test the mission-critical stuff like with a lot of obnoxious little tests to try to hit every code path.
But I'm sort of not like running Selenium and worried about if the CSS is a little off.
I'll just – somebody will tell me or I'll see it visually and just fix it.
Is this a point of contention when you are temporarily or you just start working with somebody new?
Is this like a shocking revelation to them?
You mean like a new developer or a new customer?
Somebody on the team or just somebody you're working with that finds out your philosophy on this?
Like how does that conversation go?
You know, everybody in an interview says testing is important to them, and then I've never met someone who actually did it.
Yeah.
Just like everybody says, you know, read this before you start something or eat your vegetables, right?
Wipe yourself after you – what?
Well, some of those I hope are happening.
Okay, well, you know, we need somebody out there to help us.
We need a clip that it's like we told you so.
We told you so.
But something from the show or some clip or some jingle because since we've restarted the Coda Radio program,
it kind of seems like every kind of prediction or speculation we made like 10 years ago, 13 years ago, whatever it was,
is essentially now coming true.
Like it takes a while for these things to filter through the system apparently.
But this morning, we saw another round of Apple executive emails get posted.
This shows in July of 2018, Apple was openly talking about a unique arrangement – that's a quote –
a unique arrangement with Netflix in regards to in-app purchases.
And I know you saw this, and it just feels like it's a smoking gun that while Tim Cook testified in front of Congress
saying that they treat all developers the same, this is documentation showing they clearly do not.
And that means that Tim Cook lied to Congress.
I don't know how you get around that.
I would urge people to read this email thread.
There's something like super evil in it, right?
Like if you had a, I would call, not cynical, but realistic view on how the apps must have worked back in like 2013.
You know that when we put on our executive hats that everybody really hates,
this is exactly the kind of stuff we would say.
Yeah, like Netflix is an important partner.
Netflix is upset about the IAP and that their sweetheart deal was going to end.
So guess what Apple did?
They made it go longer, right?
I mean, I don't know.
They figured, you know, they talked about it and said, you know what, is it worth it to us?
And they talked about why Netflix doesn't feel like they've got a value.
They called up Netflix and they talk about the phone call that they had with them discussing it with their team.
It's all just an open frank conversation about like how Apple is giving Netflix certain assurances.
If Netflix will do X, Y and Z, they'll get a special deal and why the in-app purchase isn't working for them
and how they've done the math and it just doesn't work out long term for Netflix and all of it's right there.
It's exactly the cynical kind of bullsh** you'd expect from Apple.
Well, Netflix is like, hey, it's strategically important for us to have our customer like contact information
and the billing information.
And Apple is like, yeah, we know.
And you could totally see why Netflix is like, this seems bad for us.
And Apple is just like, but we need that sweet, sweet in-app purchase revenue.
So I'm trying to come back to his words where we treat all developers the same.
And I'm trying to think like, well, if I were to really kind of corporate nuance that,
so developers is a category of people and that category has subcategories that include reader developers
and streaming developers and game developers, right?
Like maybe that's what he meant.
That's what they're doing now.
Yeah, now.
Like the concessions they've made has all been in what they call the reader category,
which is amazingly does not cover Kindle.
I'm trying to like back logic what he could have meant now that we know all this.
Like he must have meant by developers, I mean four groups of different kinds of people that we treat differently,
depending on what group they're in.
It must have been it.
They will have to do something like that.
But it's pretty clear that the dude just made a mistake, right?
The tides change, man.
Like there is legal action happening and it's not all like anti-competitive stuff or anti-monopoly,
but it's close.
A lot of it's close in countries all over the world against Apple and Google.
Like it is building and it's happening here in the U.S. too.
Like these tech executives are going to get called in again.
Like the whole thing is it's really building to something.
I'm just not sure what the hell it is.
Yeah, just going back to the email, right?
If you look at Apple's whole argument to the Netflix people, like they even know that it's kind of bullsh**ty, right?
It's like, yeah, to provide the best experience and to get our cut, right?
Yeah.
I mean, I don't know.
The thing that kind of shocked me was years ago when we would talk about these issues,
like just the massive amounts of hate mail that it was just like, oh, Mike's evil.
This is speculation.
You guys are just such Apple haters.
And now it's, you know, now it's crazy.
Now it's the exact opposite.
Now that this stuff is common knowledge.
Oh, you guys are such Apple lovers.
It's really funny.
They made a good laptop and I like it.
And that's it, I guess.
And headphones.
You know, headphones aren't bad.
I mean, they're pretty practical, really, if you're already in the ecosystem.
The AirPods Max that I'm wearing right now are fantastic.
Thank you.
So we got a tip of the week, which sounds lovely.
Just the tip.
Just the tip of the week.
So what is it?
Is it a Python tip?
It's a Python tip.
So Python 3.10 is coming out very soon.
In fact, I think they're doing a live stream of getting ready to release it or something
I saw on the interwebs earlier today.
And a feature that I really, really like in Python 3.10 is the ability to have your return
types, you know, be not strong type, but like type hinted to your custom classes.
Sounds a little crazy because I said it weirdly, but think about it.
Let's say we have a custom class called Gungan.
Not sure how I got to there, but let's just think it's called Gungan.
And we want to have a type checking against our custom Gungan class because, I mean, we
don't want any humans or like Twi'leks in here.
We just want Gungans.
Yeah, of course.
Yeah.
In Python 3.6 and up, you can do this little magical, I'm sure it's not doing anything
scary, wink wink, in the background, import from future something called annotations,
which is exactly what it sounds like, type annotations.
So in this gist, which will be in the show notes, I do a very, very contrived, very,
very loose, very somewhat incorrect singleton pattern that shows you that you can indeed
do that and that it does sign the static method with the custom type, which believe it or
not, you could not do previously for reasons that make no sense to me.
But this is all going along with my adventures in Python where I have found that I think
everything needs a type.
All methods need a return type.
And somebody, I had a somewhat heated conversation with another developer on my team, and I will
give you the anti-Mike argument.
You're trying to turn Python into C-sharp.
What I would argue is that our code base is so large now, we can't just keep having to
flip between files to see what something's doing.
Yeah, I mean, sometimes it's bringing the best of things together, right?
Right.
So I just wanted to share this little tip for folks who are thinking, oh, I can't do
type hinting with my custom classes or my custom types.
Definitely can.
Very nice.
And we have a linky to that.
Yeah.
And in 3.10, you don't need the from future import thing.
So I think it's happening.
It happened two hours ago, the release party that you mentioned.
Oh, it's going right now.
It's going on.
It's actually going right now.
They started streaming two hours ago, but there's 200 people watching it right now.
I'll put a link to it.
By the time the show's out, it'll be over, but you can watch the archive.
So 3.10 comes out today.
They're doing the release party right now as we record.
And just in time for folks stuck on three whatever and who, or three six plus, can't
be three five, and who want to enjoy some 3.10 goodness, you can still have it.
That is pretty exciting.
That's neat.
Look at us breaking news right here on the Coder program.
And then one last link to read later today.
You know, Facebook was famous, probably still is really, for that saying, move fast and
break things.
And you got to wonder if they haven't just built up horrendous technical debt with that
saying.
I noticed you linked, is it to their book, to their move fast book?
So this is a book written by actually a podcast fellow podcaster, Jeff Meyerson, I hope I
said that right, who did a bunch of interviews of Facebook technical executives and technical
folk.
And I love the irony of this was already in the doc before I knew Facebook was down.
But I really like that we put this in the day Facebook, especially when it's looking
at that aspect of their culture.
Yeah, well, it looks like it's a DNS problem.
And I can't say that I've been free of DNS issues.
Yeah, it's just it's just it is a bit ironic that it is down the day after horrendous press
like Sunday was brutal for them.
There was there was a leaker in the Wall Street Journal and that leaker got interviewed by
60 Minutes.
It was like a coordinated attack against Facebook on Sunday from the media.
I mean, maybe there's some system admin over there who's like, I can't do it anymore.
It's just funny that they're down today.
Right.
It's not just Facebook.
It's WhatsApp.
It's Instagram Messenger.
So the book's a pretty good look.
I mean, you know, Facebook is a PHP shop.
Yeah.
But they've done some interesting things with the hip hop VM.
And this is a very short book.
It's basically interviews with the technical executives and how they make decisions.
For all you testing zealots in there, they hired one of the fathers of TDD.
And he was surprised at how little testing they have and how it went OK.
But Facebook, to their credit, like this whole book is how as their scale and their needs
and frankly, their importance to like the world changed, they changed their processes
and they're always evolving the processes.
I am not the biggest Facebook fan, but I think that if, you know, you can dislike what they
do, but still respect that they are extremely solid engineering organization.
And if you're in this industry, I would strongly recommend you read the short book to kind
of glean some ideas from how they do things.
Yeah.
Take the best, take what's worked.
It looks like a good book.
Again, it's called Move Fast and we will have a link in the show notes.
They write Facebook strength is having little reverence for accepted sacred cows of software
engineering and being willing to adopt more formalized practices when needed to like TDD
when necessary.
Nice summary there, Mr. Dominic.
I agree.
And I think that is, you know, probably speaking of a reading weekend, not a bad one to throw
on the list because how many pages?
192 pages.
Yeah, it's super short.
Yeah, that's great.
And it's seven, eight bucks for the Kindle.
That's not bad.
I want to say thank you to our Coder QA members.
Sorry, I'm cracking up.
It's a long day.
We're about to record a new Coderly.
So there's going to be new content for our members, the exclusive Coderly that we do
every quarter.
And if you join our Coderly feed, you can get this one and all the previous ones by
going to coderqa.co, become a member, support the show, get a limited ad feed, and in that
limited ad feed, you automatically get the Coderly report when it's released.
It's usually released a little while after we record because it is as true as time
allows, of course.
And then you can also just stay subscribed to the feed you have today and just grab it
from the downloads area if you're a member.
That's at coderqa.co to support the show and get access to the exclusive Coderly and
go find our friends at Cloud Guru on social media.
They're just slash a Cloud Guru just about everywhere.
The YouTubes, the Facebooks, not right now, though.
And the Twitters.
Twitter is still up.
You can find Mr. Dominic over there.
He's at Dumanuco and his company's at the Mad Botter Inc.
Anywhere else you want to send people this week, Mr. Dominic?
Nope, that's good.
You can find me over there at Chris Elias and the podcast at Coder Radio Show, as well
as the whole podcast network at Jupiter Signal.
See, we got to get out of here because I'm losing it.
Who knows?
We might start singing soon.
You can also find show notes, links, everything we talked about today at coder.show slash
434.
Over on that page, you're going to find our contact form as well as our RSS feeds.
All of that so you can subscribe, get the show weekly, or send us your feedback.
And last but not least, we'd love to have you join us live.
We do this here show noon, noon Pacific time, 3 p.m. Eastern at jblive.tv.
Thanks so much for joining us on this week's episode of the Coder Radio program.
See you right back here next week.

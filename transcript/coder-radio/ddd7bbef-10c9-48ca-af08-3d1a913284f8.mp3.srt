1
00:00:00,000 --> 00:00:07,000
This is Koda Radio, episode 341 for January 22, 2019.

2
00:00:30,000 --> 00:00:37,080
Hello, and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes

3
00:00:37,080 --> 00:00:44,280
a pragmatic, or so we like to think, look at the art and business of software development.

4
00:00:44,280 --> 00:00:48,480
Chris is away again this week, but don't worry, I'm back, and I'm of course lucky

5
00:00:48,480 --> 00:00:54,880
to be joined with the incredible, the mad botter himself, Mr. Michael Dominic.

6
00:00:54,880 --> 00:00:55,880
Welcome Mike.

7
00:00:55,880 --> 00:01:00,160
Hello, Mr. Payne, you know, if we keep this up, people will start talking.

8
00:01:00,160 --> 00:01:03,520
Oh, they might already be.

9
00:01:03,520 --> 00:01:04,520
Fake names, yeah.

10
00:01:04,520 --> 00:01:05,800
Oh, you're not, you're not doing that?

11
00:01:05,800 --> 00:01:07,360
That's just for safety's sake, Mike.

12
00:01:07,360 --> 00:01:11,400
Oh, that's a, well, hey, did you see the NSA charger at SchmooCon?

13
00:01:11,400 --> 00:01:12,960
Yes, what is happening?

14
00:01:12,960 --> 00:01:15,840
I wonder how many people actually used that.

15
00:01:15,840 --> 00:01:19,800
Actually, the biggest troll would be if it really wasn't like a rootkit, if it was just

16
00:01:19,800 --> 00:01:20,800
like actually a charger.

17
00:01:20,800 --> 00:01:24,360
Yeah, they're like, man, we all, we all got phones, people gotta charge, we're trying

18
00:01:24,360 --> 00:01:26,240
to help a brother out.

19
00:01:26,240 --> 00:01:28,480
It's like, guys, we're recruiting, why would we screw with you?

20
00:01:28,480 --> 00:01:32,600
Yeah, we want the smart people, which, you know, is true, as long as you can pass those

21
00:01:32,600 --> 00:01:33,600
government drug tests.

22
00:01:33,600 --> 00:01:35,680
Automatic disqualification if you plug in your phone.

23
00:01:35,680 --> 00:01:38,720
Right, yeah, no, please, please don't talk to us ever again.

24
00:01:38,720 --> 00:01:39,720
Get out of here.

25
00:01:39,720 --> 00:01:40,720
Yeah.

26
00:01:40,720 --> 00:01:44,160
And we know everything already because, you know, you just plugged in your whole life.

27
00:01:44,160 --> 00:01:49,560
Oh, yes, and I guess really speaking about plugging in your whole life, last time I was

28
00:01:49,560 --> 00:01:55,840
here and chatting with you, Mr. Mike, we talked a bit about the painfulness of USB-C and that's

29
00:01:55,840 --> 00:01:58,920
kind of been a common topic on the show.

30
00:01:58,920 --> 00:02:01,240
Sounds like you got some feedback about it.

31
00:02:01,240 --> 00:02:09,720
Yeah, so the USB-C I'm talking about in particular is the 2018 iPad Pro, obviously has USB-C

32
00:02:09,720 --> 00:02:15,480
port and it is theoretically possible that you could basically treat it like any other

33
00:02:15,480 --> 00:02:18,680
port, right?

34
00:02:18,680 --> 00:02:20,440
And I actually did my job this time, Wes.

35
00:02:20,440 --> 00:02:25,600
I tried to get confirmation from Apple's developer line and believe it or not, I actually got

36
00:02:25,600 --> 00:02:26,600
someone on the phone.

37
00:02:26,600 --> 00:02:29,440
Wait, no, you talked to a human freaking being over there?

38
00:02:29,440 --> 00:02:31,480
Well, I can't prove they weren't a Cylon.

39
00:02:31,480 --> 00:02:35,080
Well, no, sure, I mean, I don't expect you to be able to, but they approximated it.

40
00:02:35,080 --> 00:02:37,200
They passed your test.

41
00:02:37,200 --> 00:02:45,320
Yes, and the answer was, of course, not helpful, is what I did there for a second.

42
00:02:45,320 --> 00:02:46,320
What are you doing to me, man?

43
00:02:46,320 --> 00:02:47,320
What are you doing?

44
00:02:47,320 --> 00:02:48,960
I was so excited.

45
00:02:48,960 --> 00:02:53,480
Well, it's interesting, though, you certainly can use the USB port and these are the so

46
00:02:53,480 --> 00:02:55,920
far things that we've thought.

47
00:02:55,920 --> 00:03:00,060
You know, and people, if you've never done an iOS development, it is theoretically possible

48
00:03:00,060 --> 00:03:03,800
to email or call Apple, but they will never like pre-approve something.

49
00:03:03,800 --> 00:03:09,080
Like, so the case I gave them is I want to use an iPad, plug it into a Raspberry Pi and

50
00:03:09,080 --> 00:03:11,040
flash the Raspberry Pi from the iPad.

51
00:03:11,040 --> 00:03:12,960
I want to make like a little graphical app to do that, right?

52
00:03:12,960 --> 00:03:14,440
Oh, that would be, that's a great idea.

53
00:03:14,440 --> 00:03:18,640
Yeah, so anybody wants to steal that, you'll get it done faster than me.

54
00:03:18,640 --> 00:03:24,200
And I told the rep that and it was kind of, eh, maybe, try, sounds cool, but you know,

55
00:03:24,200 --> 00:03:25,200
can't promise anything.

56
00:03:25,200 --> 00:03:29,680
So, they're not saying outright, no, absolutely not, they're saying, well, you're just going

57
00:03:29,680 --> 00:03:30,680
to have to see.

58
00:03:30,680 --> 00:03:31,680
Wow, that's useless.

59
00:03:31,680 --> 00:03:37,120
Yeah, and I've called them a few times over the course of the show and it's kind of like,

60
00:03:37,120 --> 00:03:44,440
I think they only actually said no once because it was, oh, it was something, long-term listeners

61
00:03:44,440 --> 00:03:50,080
will know, there's something I wanted to do with the in-app subscription thing that wasn't

62
00:03:50,080 --> 00:03:54,000
at the time allowed, but ironically now is allowed.

63
00:03:54,000 --> 00:03:59,280
So it was, I wanted to do in-app purchases and make them be a subscription before there

64
00:03:59,280 --> 00:04:00,280
were subscriptions.

65
00:04:00,280 --> 00:04:04,840
So like, basically every month, just like trigger something to ask you to do an in-app

66
00:04:04,840 --> 00:04:05,840
purchase.

67
00:04:05,840 --> 00:04:09,520
Oh, I see, so that was just going to be like, hey, yeah, please support us again.

68
00:04:09,520 --> 00:04:11,760
That, you can't do that.

69
00:04:11,760 --> 00:04:14,840
Now you can because obviously they have subscriptions, but so, I don't know.

70
00:04:14,840 --> 00:04:22,320
I mean, I got a lot of feedback, half of the people saying, well, there was really thirds,

71
00:04:22,320 --> 00:04:27,640
one third saying, put down the Mac before you break it, which I mean, fair criticism.

72
00:04:27,640 --> 00:04:32,120
That is a great point and please be careful, we just, I fear for anything, any device that

73
00:04:32,120 --> 00:04:33,520
enters into your home.

74
00:04:33,520 --> 00:04:42,440
Well, I'm now using my old Dell Optiplex because it's a desktop and my Thaleo is, oh, don't

75
00:04:42,440 --> 00:04:43,440
say that.

76
00:04:43,440 --> 00:04:44,440
Don't say that.

77
00:04:44,440 --> 00:04:45,440
Please don't say that.

78
00:04:45,440 --> 00:04:51,960
My Thaleo is on its way, but I am putting the Thaleo in carbonite like Han Solo, just

79
00:04:51,960 --> 00:04:53,440
nice shielding.

80
00:04:53,440 --> 00:04:55,440
That way you can't appreciate its beautiful design.

81
00:04:55,440 --> 00:04:58,080
Yeah, I know, but I would destroy it.

82
00:04:58,080 --> 00:05:01,920
Yeah, it's better for the beautiful wood veneer that you just keep it as far away as possible.

83
00:05:01,920 --> 00:05:05,080
Maybe if you could put it sort of behind the wall just with the cables coming out, that

84
00:05:05,080 --> 00:05:06,080
might be the best.

85
00:05:06,080 --> 00:05:09,960
Well, actually, if my desk, and this is way inside baseball, is one of those two level

86
00:05:09,960 --> 00:05:13,320
desks, it's like an old antique style, so I'm just going to put it on the higher level.

87
00:05:13,320 --> 00:05:17,480
So if I do spill something, I only destroy my mouse and keyboard.

88
00:05:17,480 --> 00:05:18,480
Good idea.

89
00:05:18,480 --> 00:05:19,480
Yeah.

90
00:05:19,480 --> 00:05:26,680
So the USB-C thing is kind of, we don't really have an answer here.

91
00:05:26,680 --> 00:05:32,680
There are certain documented things in the docs I shared about three weeks ago, maybe,

92
00:05:32,680 --> 00:05:35,480
maybe three weeks ago, that you certainly can do, right?

93
00:05:35,480 --> 00:05:42,080
Integrate with the photos app on the device, and there's a bunch of stuff, music, movies,

94
00:05:42,080 --> 00:05:47,200
whatever, as well as the onboard file system, but not the real file system, the little files

95
00:05:47,200 --> 00:05:49,800
app.

96
00:05:49,800 --> 00:05:52,560
So I can't say yes or no.

97
00:05:52,560 --> 00:06:00,040
People writing and asking, give it a shot, but don't invest your life savings, because

98
00:06:00,040 --> 00:06:03,760
you could get rejected, right?

99
00:06:03,760 --> 00:06:10,200
My suspicion, Wes, is that in the next major bump of iOS, so like 13, there is going to

100
00:06:10,200 --> 00:06:14,640
be expanded functionality as the other devices get USB-C, because the other challenge you

101
00:06:14,640 --> 00:06:18,440
would have if you did something like what I'm describing, which I just thought of and

102
00:06:18,440 --> 00:06:22,560
probably the reason the guy didn't give me a straight answer, your app can't just run

103
00:06:22,560 --> 00:06:25,320
on one version of the iPad.

104
00:06:25,320 --> 00:06:31,580
So you would have to have another mechanism for this to work on non-USB-C iPads, and to

105
00:06:31,580 --> 00:06:34,920
integrate with the Lightning port, you have to actually pay a licensing fee.

106
00:06:34,920 --> 00:06:37,360
Right, yeah, there's a whole kit and caboodle that goes around that.

107
00:06:37,360 --> 00:06:38,360
Wow.

108
00:06:38,360 --> 00:06:39,360
So never mind this.

109
00:06:39,360 --> 00:06:40,360
It's just a bad idea.

110
00:06:40,360 --> 00:06:41,360
Yeah.

111
00:06:41,360 --> 00:06:45,720
Or the time will come, and of course, in typical Apple fashion, you don't get access to everything

112
00:06:45,720 --> 00:06:46,720
out the gate.

113
00:06:46,720 --> 00:06:49,920
You just piecemeal it, slowly add as there's enough demand, and they add it the way they

114
00:06:49,920 --> 00:06:54,680
want to have it, seen it done, and conforms to their standards.

115
00:06:54,680 --> 00:06:57,400
And really, I guess they just get away with it, right, because they're the place to be.

116
00:06:57,400 --> 00:07:00,400
They've got the market, they've got the users, so you've got to play ball.

117
00:07:00,400 --> 00:07:02,520
Well, and they have the best tablet on the market right now.

118
00:07:02,520 --> 00:07:06,040
And they have the only tablet worth buying.

119
00:07:06,040 --> 00:07:09,440
Till System76 launches a tablet.

120
00:07:09,440 --> 00:07:10,440
Fake rumors started here.

121
00:07:10,440 --> 00:07:13,000
Oh, stop doing this to me.

122
00:07:13,000 --> 00:07:17,640
This whole episode so far has been you making up, teasing things that I assume won't happen

123
00:07:17,640 --> 00:07:19,720
in any reasonable time frame.

124
00:07:19,720 --> 00:07:21,760
Speaking of teasing, I'm getting tired, Wes.

125
00:07:21,760 --> 00:07:24,840
I can't do all these deployments and builds manually.

126
00:07:24,840 --> 00:07:26,680
Do you have a way I could automate that?

127
00:07:26,680 --> 00:07:31,060
Well, actually, there's been a lot of talk around some of the community about some tools

128
00:07:31,060 --> 00:07:32,060
to do just that.

129
00:07:32,060 --> 00:07:34,520
And one of them is Jenkins.

130
00:07:34,520 --> 00:07:37,960
And it kind of brought up a topic for me in general, too, that I'm sort of curious about

131
00:07:37,960 --> 00:07:38,960
what happens in your world.

132
00:07:38,960 --> 00:07:40,920
You were just talking about, there's a lot of things to do.

133
00:07:40,920 --> 00:07:44,920
There's deployments, there's testing to be run, there's all sorts of integrations to

134
00:07:44,920 --> 00:07:46,560
do and other sorts of configuration.

135
00:07:46,560 --> 00:07:50,320
And just, you know, there's cron jobs, there's services to be run.

136
00:07:50,320 --> 00:07:52,000
Jenkins can do all of that, right?

137
00:07:52,000 --> 00:07:55,880
That's one thing that's pretty nice about it, but it doesn't have to do all of that.

138
00:07:55,880 --> 00:07:59,080
I'm wondering, like, what do you use for your own work?

139
00:07:59,080 --> 00:08:02,280
Are you someone who runs their own CI system and their own deployment stuff?

140
00:08:02,280 --> 00:08:07,120
Do you just rely on the tools provided by whatever integrating and partners you have?

141
00:08:07,120 --> 00:08:09,120
I don't do a lot of CI.

142
00:08:09,120 --> 00:08:11,840
I tend to, I used to use Jenkins when I used to do JotSpring.

143
00:08:11,840 --> 00:08:15,040
You don't have to be bashful about it.

144
00:08:15,040 --> 00:08:17,640
You can come out and be you, Mike.

145
00:08:17,640 --> 00:08:19,680
I'm going to come out of the closet.

146
00:08:19,680 --> 00:08:21,680
I am not huge into the automation.

147
00:08:21,680 --> 00:08:30,840
The thing I do do is, do do, Docker and DoKu with some very light webhooks into GitLab.

148
00:08:30,840 --> 00:08:34,680
Beyond that, it's one of the things I just don't do too much.

149
00:08:34,680 --> 00:08:35,680
I'm pretty manual.

150
00:08:35,680 --> 00:08:39,800
If something needs to be deployed, I also don't do a lot of automated testing is why

151
00:08:39,800 --> 00:08:40,800
I don't do a lot of CI.

152
00:08:40,800 --> 00:08:41,800
Oh, yeah.

153
00:08:41,800 --> 00:08:42,800
Right.

154
00:08:42,800 --> 00:08:43,800
You don't have to test it.

155
00:08:43,800 --> 00:08:44,800
I heard it.

156
00:08:44,800 --> 00:08:47,000
I felt the judgment.

157
00:08:47,000 --> 00:08:52,040
But you've lived another life where you have used this gremlin of ours, Mr. Jenkins, right?

158
00:08:52,040 --> 00:08:55,160
Yeah, I was once required to.

159
00:08:55,160 --> 00:08:58,040
It actually, but I hear it's a whole different world now.

160
00:08:58,040 --> 00:09:01,600
We're going back probably four and a half years, the last time I used it.

161
00:09:01,600 --> 00:09:02,600
Yeah.

162
00:09:02,600 --> 00:09:05,900
We're going back at 2011.

163
00:09:05,900 --> 00:09:07,200
That's when the name change happened.

164
00:09:07,200 --> 00:09:12,560
That's when there was all this drama about Oracle's fork and Hudson became Jenkins.

165
00:09:12,560 --> 00:09:13,720
It feels like a long time ago.

166
00:09:13,720 --> 00:09:18,640
I mean, it's not really, I suppose, eight years now, and it's surprising both what's

167
00:09:18,640 --> 00:09:22,440
changed and really, really what's stayed the same.

168
00:09:22,440 --> 00:09:23,440
I think you'd be surprised.

169
00:09:23,440 --> 00:09:24,560
So, yes, there are.

170
00:09:24,560 --> 00:09:25,620
There's some new things.

171
00:09:25,620 --> 00:09:27,080
There's Jenkins X.

172
00:09:27,080 --> 00:09:30,880
They've also got this blue ocean interface.

173
00:09:30,880 --> 00:09:31,880
Those are relevant.

174
00:09:31,880 --> 00:09:32,880
We'll talk about them.

175
00:09:32,880 --> 00:09:37,300
But overall, I think if you logged into a newly stood up Jenkins server, sure, it might

176
00:09:37,300 --> 00:09:44,040
be running on Kubernetes today, but I think it would look probably identical.

177
00:09:44,040 --> 00:09:45,160
So what's the big change then?

178
00:09:45,160 --> 00:09:47,840
I mean, it's been about four years.

179
00:09:47,840 --> 00:09:49,960
What would be new to me coming to it?

180
00:09:49,960 --> 00:09:51,000
Well, okay.

181
00:09:51,000 --> 00:09:52,760
Probably what would be new to you.

182
00:09:52,760 --> 00:09:53,760
There would be small things.

183
00:09:53,760 --> 00:09:57,520
There'd be lots of different plugins, different plugin updates, things like that.

184
00:09:57,520 --> 00:10:00,600
And I think one of the things that's caused a lot of pain for people is not that it's

185
00:10:00,600 --> 00:10:01,600
useful.

186
00:10:01,600 --> 00:10:05,280
It's just that things keep changing and it doesn't feel finished.

187
00:10:05,280 --> 00:10:09,080
So one of the things people really like about CI systems is building pipelines.

188
00:10:09,080 --> 00:10:10,080
Yeah.

189
00:10:10,080 --> 00:10:11,080
Yeah.

190
00:10:11,080 --> 00:10:12,080
Also, it's called Jenkins now.

191
00:10:12,080 --> 00:10:13,080
So there you go.

192
00:10:13,080 --> 00:10:16,280
But people like to build pipelines so that you can, you know, you have things usually

193
00:10:16,280 --> 00:10:19,080
driven by automation, but it doesn't have to necessarily be, it could be a human kicking

194
00:10:19,080 --> 00:10:20,080
it off.

195
00:10:20,080 --> 00:10:24,720
You start something, it pulls some code from Git, does some build steps, maybe does tests,

196
00:10:24,720 --> 00:10:28,280
maybe does a test deployment and spins up some test infrastructure to go run further

197
00:10:28,280 --> 00:10:32,160
tests or to leave it there for downstream applications to test against.

198
00:10:32,160 --> 00:10:34,080
You have all these options and you don't want to have to do it.

199
00:10:34,080 --> 00:10:35,080
Sure.

200
00:10:35,080 --> 00:10:36,080
You can write a bash script.

201
00:10:36,080 --> 00:10:40,120
That's, that's one way to do it, but that's pretty painful.

202
00:10:40,120 --> 00:10:44,040
And so there's been these promise of various different pipeline syntax.

203
00:10:44,040 --> 00:10:48,220
One version of it, it's basically just sort of groovy, like a groovy DSL with some handy

204
00:10:48,220 --> 00:10:49,920
functions already implemented for you.

205
00:10:49,920 --> 00:10:54,080
So you can sort of define how stuff runs and on which agents or is it, you know, is it,

206
00:10:54,080 --> 00:10:55,380
is it thread safe or not?

207
00:10:55,380 --> 00:10:58,080
All those little nitty gritty details that you don't want to think about, but sometimes

208
00:10:58,080 --> 00:11:03,500
you have to, if you have complicated stateful testing to do, but even that hasn't really

209
00:11:03,500 --> 00:11:04,660
stayed the same.

210
00:11:04,660 --> 00:11:07,620
It keeps kind of changing and they'll have, you'll have one sort of really declarative

211
00:11:07,620 --> 00:11:12,200
style of syntax, or you'll have another one that is more imperative and kind of, you have

212
00:11:12,200 --> 00:11:16,040
to walk through exactly every single step that you want to do.

213
00:11:16,040 --> 00:11:19,360
And it's kind of become at least, at least in the organizations I've seen, it's something

214
00:11:19,360 --> 00:11:23,300
of a black art where you've got maybe a couple of experienced DevOps people.

215
00:11:23,300 --> 00:11:27,480
You've got the, or the senior developer who's written enough Jenkins files over the years

216
00:11:27,480 --> 00:11:31,540
that they just can do it on, you know, sit down and bang one out because the documentation

217
00:11:31,540 --> 00:11:34,700
is missing in a lot of cases or it's just outdated.

218
00:11:34,700 --> 00:11:36,640
So you don't really know, is this the right syntax?

219
00:11:36,640 --> 00:11:40,840
And once you've got this, you know, you've probably got it defined in, in Git somewhere,

220
00:11:40,840 --> 00:11:41,840
which is nice, right?

221
00:11:41,840 --> 00:11:46,020
So the basic promise of having a Jenkins file that sits there and you can keep all of your

222
00:11:46,020 --> 00:11:50,600
sort of CI and testing stuff right there in your same code repository, that is really

223
00:11:50,600 --> 00:11:51,600
nice to have.

224
00:11:51,600 --> 00:11:56,180
But it also like you get in this kind of painful process of, oh no, that wasn't quite the syntax

225
00:11:56,180 --> 00:11:57,180
it wanted.

226
00:11:57,180 --> 00:12:00,320
So I go over here, make a change to the Jenkins file, push it up, wait for Jenkins to go get

227
00:12:00,320 --> 00:12:04,860
the push or do a pull against the repo to see the change, pull it down again.

228
00:12:04,860 --> 00:12:06,760
Does it run this time?

229
00:12:06,760 --> 00:12:10,400
And when you can't be sure which exact version it's going to be or which the, what the syntax

230
00:12:10,400 --> 00:12:14,620
is or what's the best way to do this because there's a blog from four years ago that does

231
00:12:14,620 --> 00:12:18,800
it this way, but then a blog last year does it this way, but that gave me an error.

232
00:12:18,800 --> 00:12:21,000
I'm sure you've been in situations like that.

233
00:12:21,000 --> 00:12:22,000
Yeah.

234
00:12:22,000 --> 00:12:28,600
Yeah, this reminds me of any kind of automated deployment I've ever tried to do.

235
00:12:28,600 --> 00:12:34,800
So is it, now my understanding is, and this is again going back, it was a very graphical

236
00:12:34,800 --> 00:12:38,000
tool, right?

237
00:12:38,000 --> 00:12:39,900
Like there was a backend you could log into.

238
00:12:39,900 --> 00:12:40,900
So that's the other part.

239
00:12:40,900 --> 00:12:46,800
That's the other thing about Jenkins that can sometimes be pretty painful is it's all

240
00:12:46,800 --> 00:12:48,520
about automation, right?

241
00:12:48,520 --> 00:12:50,240
Or at least helping to automate things.

242
00:12:50,240 --> 00:12:52,220
That's what it ends up being used for.

243
00:12:52,220 --> 00:12:55,680
But the process of setting it up is frequently not.

244
00:12:55,680 --> 00:12:58,320
There are some pretty decent tools these days.

245
00:12:58,320 --> 00:13:02,840
There's some Ansible configurations, the Chef recipe for setting it up, I think has actually

246
00:13:02,840 --> 00:13:06,520
come a long way from when I first used it and is actually decent.

247
00:13:06,520 --> 00:13:11,120
And in particular, I think the Helm chart to run it on Kubernetes is nice.

248
00:13:11,120 --> 00:13:14,120
And if you do run it on Kubernetes, you get nice integrations too because you can obviously

249
00:13:14,120 --> 00:13:17,880
use Kubernetes as a place to go trigger run clean tests and stuff.

250
00:13:17,880 --> 00:13:20,120
So that's nice.

251
00:13:20,120 --> 00:13:24,200
But to get it actually to deploy automatically and have all of your state that you want to

252
00:13:24,200 --> 00:13:27,400
keep or the configuration you need, that is hard.

253
00:13:27,400 --> 00:13:32,960
Enter a whole world of Java application, getting familiar with the JVM if you're not already

254
00:13:32,960 --> 00:13:36,240
and all the XML that goes along with it.

255
00:13:36,240 --> 00:13:37,240
Yes.

256
00:13:37,240 --> 00:13:42,440
If you don't like XML, you're not going to like Java and Jenkins is Java.

257
00:13:42,440 --> 00:13:46,800
But it was Java before, I mean, you can write like a really clean Java application with

258
00:13:46,800 --> 00:13:49,120
a nice restful API and very modern.

259
00:13:49,120 --> 00:13:51,320
Oh no, you definitely can.

260
00:13:51,320 --> 00:13:56,040
This has been around long enough that those ideas hadn't quite become popular.

261
00:13:56,040 --> 00:14:01,600
I think it's actually older than Gradle, I'm not sure if that's correct, but somebody can

262
00:14:01,600 --> 00:14:02,600
check it in the chat room.

263
00:14:02,600 --> 00:14:07,760
I'm pretty sure Jenkins or its precursor, its old name is actually older than the original

264
00:14:07,760 --> 00:14:12,400
version of Gradle, which is scary to me.

265
00:14:12,400 --> 00:14:14,320
Yes, that is actually...

266
00:14:14,320 --> 00:14:19,240
So what is the advantage of going all in on Jenkins compared to, say, what my current

267
00:14:19,240 --> 00:14:26,080
workflow is, which is Docker on an open two server with running doku as well, and then

268
00:14:26,080 --> 00:14:28,200
in that container, I have all my...

269
00:14:28,200 --> 00:14:31,880
Let's just use Java or let's use Rails as an example, this is literally what I have

270
00:14:31,880 --> 00:14:32,880
in production.

271
00:14:32,880 --> 00:14:33,880
Excellent.

272
00:14:33,880 --> 00:14:36,840
Ruby on Rails, I have a Postgres container.

273
00:14:36,840 --> 00:14:40,360
In some cases, we have a Redis thing running, but let's ignore that because that complicates

274
00:14:40,360 --> 00:14:42,320
things.

275
00:14:42,320 --> 00:14:47,600
You do your coding, you push to your topic branch, we branch by person at the mad boner,

276
00:14:47,600 --> 00:14:50,080
and then you merge it into either dev stage or master branch.

277
00:14:50,080 --> 00:14:54,800
Each of those has obviously a Docker target where they're going to deploy to.

278
00:14:54,800 --> 00:15:01,680
So there's three digital ocean droplets, three servers per project.

279
00:15:01,680 --> 00:15:05,000
And obviously the automation in GitLab is once a pull request is merged into one of

280
00:15:05,000 --> 00:15:11,180
those relevant branches, we're using the GitLab pipelines, I believe is what GitLab calls

281
00:15:11,180 --> 00:15:13,760
them, or that might be what Bitbucket used to call them.

282
00:15:13,760 --> 00:15:17,160
But what I just realized, I am doing automated testing, I just forgot.

283
00:15:17,160 --> 00:15:18,160
Look at you.

284
00:15:18,160 --> 00:15:21,320
I'm just not the one who writes them, because that's what the pipelines are actually testing.

285
00:15:21,320 --> 00:15:23,120
You get to be the boss.

286
00:15:23,120 --> 00:15:24,120
Right.

287
00:15:24,120 --> 00:15:29,240
So if that passes, because GitLab will actually throw a flag and not allow the merge, but

288
00:15:29,240 --> 00:15:35,640
assuming it passes, assuming the merge goes through, it will push through a webhook automatically

289
00:15:35,640 --> 00:15:41,480
to the relevant DO droplet and do the doku deployment, which if you don't know doku for

290
00:15:41,480 --> 00:15:47,800
the audience, doku is basically a tool for Docker to make it work like Heroku, if you're

291
00:15:47,800 --> 00:15:50,640
familiar with Heroku, where you could just Git push to deploy.

292
00:15:50,640 --> 00:15:55,240
A Docker-powered platform as a service that helps you build and manage the life cycle

293
00:15:55,240 --> 00:15:56,840
of applications is their little banner.

294
00:15:56,840 --> 00:15:58,400
Yeah, and we can throw that in the notes too.

295
00:15:58,400 --> 00:16:03,680
So how is that different from what you can do with Jenkins, or is it just a different

296
00:16:03,680 --> 00:16:06,880
tool for a different, just for the same problem?

297
00:16:06,880 --> 00:16:08,720
It's a more modern tool.

298
00:16:08,720 --> 00:16:13,800
I think the thing about Jenkins is there's been a lot of development in how development

299
00:16:13,800 --> 00:16:16,480
happens in the time that Jenkins has been around.

300
00:16:16,480 --> 00:16:20,680
And one of the first things, right, was kind of the rise of TDD, of having rigorous testing

301
00:16:20,680 --> 00:16:25,120
of people being like, well, if we're going to ship this, it should have some tests.

302
00:16:25,120 --> 00:16:28,200
And especially unit tests, but just all sorts of testing.

303
00:16:28,200 --> 00:16:30,000
I think it started with unit tests in this case.

304
00:16:30,000 --> 00:16:31,520
But you needed somewhere to run them.

305
00:16:31,520 --> 00:16:34,120
I'm sure you could run them on your local machine, but then you get into the thing of,

306
00:16:34,120 --> 00:16:37,040
all right, you've got to teach everyone, and they've got to have enough, especially in

307
00:16:37,040 --> 00:16:40,840
the age before popularization of containers for development workflows.

308
00:16:40,840 --> 00:16:43,360
You've got to be able to set up everything on your local box.

309
00:16:43,360 --> 00:16:46,840
Maybe that's difficult, especially if people don't have ops experience.

310
00:16:46,840 --> 00:16:49,680
And then they've got to go wait for the test runner to happen on their machine before maybe

311
00:16:49,680 --> 00:16:55,520
they're allowed to go push it to the master branch, or whatever the CVS workflow is.

312
00:16:55,520 --> 00:16:56,520
That's pretty painful.

313
00:16:56,520 --> 00:16:59,720
So Jenkins exists as a place to go allow that to happen.

314
00:16:59,720 --> 00:17:02,760
So if you've got your near future branch, or your personal branch you want to go run

315
00:17:02,760 --> 00:17:07,000
tests on, you can push a change, it'll detect it, start triggering your tests, run all that,

316
00:17:07,000 --> 00:17:09,160
and you can go do something else as a developer.

317
00:17:09,160 --> 00:17:13,800
And that was at a time where there were other, there's been other projects to do that.

318
00:17:13,800 --> 00:17:21,640
But I think the rise both in enterprise Java development, and Jenkins filling that need,

319
00:17:21,640 --> 00:17:26,440
and being something friendly for people who are already doing and deploying Java applications.

320
00:17:26,440 --> 00:17:32,360
You already have the JVM production, you can copy that image and use it for tests too.

321
00:17:32,360 --> 00:17:34,800
So a lot of places just kind of got there, right?

322
00:17:34,800 --> 00:17:37,080
So they had Jenkins to do all their testing.

323
00:17:37,080 --> 00:17:40,960
Maybe they still had, you know, you built a final jar and handed it over the wall to

324
00:17:40,960 --> 00:17:45,280
the ops team, and then they would actually go push it to production.

325
00:17:45,280 --> 00:17:48,520
Over the years we've sort of, you know, we've pursued quote unquote DevOps, we've sort of

326
00:17:48,520 --> 00:17:51,820
merged these things, we've wanted more automation in that department, we're doing continuous

327
00:17:51,820 --> 00:17:53,820
deployment possibly.

328
00:17:53,820 --> 00:17:58,040
Because that advanced, Jenkins just kept growing features.

329
00:17:58,040 --> 00:18:00,440
And that's the thing, I think that's the thing that still stands out about it.

330
00:18:00,440 --> 00:18:05,560
I was looking at an article from an organization talking about like, in 2018, why on earth

331
00:18:05,560 --> 00:18:08,000
would we choose Jenkins?

332
00:18:08,000 --> 00:18:11,640
And you know, honestly, their arguments weren't necessarily persuasive to me, but it did lay

333
00:18:11,640 --> 00:18:15,880
out that like Jenkins has pretty much all the features that you want.

334
00:18:15,880 --> 00:18:21,040
So if you have people who are familiar, if you're already using it for something, there's

335
00:18:21,040 --> 00:18:23,800
a low barrier to entry to keep using it.

336
00:18:23,800 --> 00:18:29,800
I think what it doesn't answer is the question, if you don't have to, would you choose Jenkins

337
00:18:29,800 --> 00:18:30,800
today?

338
00:18:30,800 --> 00:18:33,040
Personally, I don't, I'm not sure that I would.

339
00:18:33,040 --> 00:18:36,600
Now, it is sort of the ultimate flexible tool.

340
00:18:36,600 --> 00:18:40,040
I mean, at least one step removed from, from just, you know, peer scripts or arbitrary

341
00:18:40,040 --> 00:18:41,880
applications and binaries.

342
00:18:41,880 --> 00:18:45,760
But it can be made to do just about whatever you want, especially with the wide array of

343
00:18:45,760 --> 00:18:47,360
plugins that exist.

344
00:18:47,360 --> 00:18:51,000
The flip side of that, well, now you're maintaining stateful plugins that have updates and changes

345
00:18:51,000 --> 00:18:52,000
to their stuff.

346
00:18:52,000 --> 00:18:54,800
So that's just a whole nother layer of, you know, dependency and version management to

347
00:18:54,800 --> 00:18:59,000
control and you're, you know, managing and running and running Jenkins.

348
00:18:59,000 --> 00:19:03,980
So you have this world where the enterprise has a lot of Jenkins servers out there.

349
00:19:03,980 --> 00:19:06,360
You have developers who are like, don't really want to change, they're just there to write

350
00:19:06,360 --> 00:19:10,760
new features that get shipped because sales told everyone that that's what needed to happen.

351
00:19:10,760 --> 00:19:12,840
They don't want to go learn a new CI system.

352
00:19:12,840 --> 00:19:17,040
And the flip side too, is I think Jenkins makes it pretty easy to get really hacky if

353
00:19:17,040 --> 00:19:21,400
you need to, if I, if I can use that language because you know, you do have a lot of ways

354
00:19:21,400 --> 00:19:22,400
out.

355
00:19:22,400 --> 00:19:23,400
You have, it's really easy to go do things.

356
00:19:23,400 --> 00:19:27,920
Maybe you shouldn't or aren't quite declarative, especially compared to some of the more modern

357
00:19:27,920 --> 00:19:31,240
CI systems that I think are started in the right way, but have, you know, maybe like

358
00:19:31,240 --> 00:19:33,680
it just a, a YAML syntax for you.

359
00:19:33,680 --> 00:19:37,480
Basically you can describe operations that they've defined as primitives and that's all

360
00:19:37,480 --> 00:19:40,280
you get.

361
00:19:40,280 --> 00:19:45,640
So I'm looking at the Jenkins site and there's two new things that I find pretty interesting.

362
00:19:45,640 --> 00:19:49,600
One I'm looking at Evergreen, which I'll throw in the show notes, which is an automatically

363
00:19:49,600 --> 00:19:53,000
rolling distribution for Jenkins.

364
00:19:53,000 --> 00:19:57,240
So is it no longer the practice to do like a big forklift upgrade when you have to upgrade

365
00:19:57,240 --> 00:20:01,880
Jenkins or is this something, is this where it's going, I guess, is it going towards being

366
00:20:01,880 --> 00:20:03,480
an Evergreen solution?

367
00:20:03,480 --> 00:20:05,920
Well, so I will, I will say this.

368
00:20:05,920 --> 00:20:09,720
I think there was a long time where Jenkins didn't get a ton of love.

369
00:20:09,720 --> 00:20:12,460
Now that's not, that's not no love.

370
00:20:12,460 --> 00:20:18,000
That's not no love, but in the past couple of years, probably starting in, I don't know,

371
00:20:18,000 --> 00:20:23,920
maybe 2006, as, as more and more things moved to the cloud, as, as CICD practices became

372
00:20:23,920 --> 00:20:27,000
more of the standard, they've sort of, they sort of caught onto that.

373
00:20:27,000 --> 00:20:30,360
So you did see, you've seen some approaches to maybe work on a new UI.

374
00:20:30,360 --> 00:20:32,400
It's not there yet.

375
00:20:32,400 --> 00:20:37,480
You've seen some more stuff like Jenkins X, which is kind of meant to be a cloud first

376
00:20:37,480 --> 00:20:43,120
containerized orchestrated world first tool and you see stuff like Evergreen where they're

377
00:20:43,120 --> 00:20:48,580
like, well, people probably want to have more ways to update this and at least have more

378
00:20:48,580 --> 00:20:53,680
up-to-date things, things that keep getting, you know, that update in clean automatic ways.

379
00:20:53,680 --> 00:20:57,900
I don't know if I would want to do it continuously or all the time, but it would probably be

380
00:20:57,900 --> 00:21:03,260
nice to have smaller updates more frequently as compared to the one big horrible every

381
00:21:03,260 --> 00:21:07,640
two year upgrade where no one really knows what's happening and testing is broken for

382
00:21:07,640 --> 00:21:08,640
a week.

383
00:21:08,640 --> 00:21:09,640
Yeah.

384
00:21:09,640 --> 00:21:10,640
I've used iOS long enough.

385
00:21:10,640 --> 00:21:11,640
I don't like updating.

386
00:21:11,640 --> 00:21:13,560
It scarred me for all other systems.

387
00:21:13,560 --> 00:21:15,000
So this is, this, that was a joke.

388
00:21:15,000 --> 00:21:18,500
This is all pretty, pretty interesting.

389
00:21:18,500 --> 00:21:22,640
How well has, see when I used it, it was pure Java spring, right?

390
00:21:22,640 --> 00:21:27,820
So it was like the most vanilla use case you could possibly think of other than Java EE.

391
00:21:27,820 --> 00:21:35,160
Has Jenkins managed to penetrate into other like types of developers?

392
00:21:35,160 --> 00:21:37,280
What do you mean by types of developers?

393
00:21:37,280 --> 00:21:38,560
So for instance, right?

394
00:21:38,560 --> 00:21:44,600
If you are a Ruby hipster, you probably are using actually like probably using like Capistrano,

395
00:21:44,600 --> 00:21:45,600
right?

396
00:21:45,600 --> 00:21:50,600
Cause that's a very Ruby that is just because I'm using Docker, I'm sure there are a lot

397
00:21:50,600 --> 00:21:54,480
of Ruby guys using Docker too, because I also write other languages and Docker basically

398
00:21:54,480 --> 00:21:57,440
works with everything.

399
00:21:57,440 --> 00:22:01,800
Is Jenkins more like a Docker where it's kind of platform agnostic and I say platform, I

400
00:22:01,800 --> 00:22:05,320
mean dev environment, not, you know, not like, right, right, right.

401
00:22:05,320 --> 00:22:06,320
Not, not OS, but yeah.

402
00:22:06,320 --> 00:22:07,320
Like yeah.

403
00:22:07,320 --> 00:22:08,320
Right.

404
00:22:08,320 --> 00:22:14,560
Or is it more like a Capistrano where, you know what, this is the, this is a Java solution.

405
00:22:14,560 --> 00:22:17,880
I guess it, I guess it is a Java solution cause you, you still have to.

406
00:22:17,880 --> 00:22:20,440
So let me take a step back.

407
00:22:20,440 --> 00:22:25,040
My experience with Jenkins is you have to like spin up a JVM, set up a server and actually

408
00:22:25,040 --> 00:22:30,560
do all of the, I'm running a Java web application on my server work.

409
00:22:30,560 --> 00:22:33,560
Have they managed to containerize that where I can just do like Docker pool?

410
00:22:33,560 --> 00:22:35,080
Yes, you can.

411
00:22:35,080 --> 00:22:38,000
And honestly that's probably the way I would recommend running it.

412
00:22:38,000 --> 00:22:44,520
I mean where it gets painful always is some of the more deep configurations, but in like

413
00:22:44,520 --> 00:22:48,400
the helm chart or the Docker image, they've got a lot of that sort of pulled out and extracted

414
00:22:48,400 --> 00:22:52,720
and honestly you'd probably end up end of the day, I would suggest maybe a workflow

415
00:22:52,720 --> 00:22:56,400
where like if you make changes in the UI, you've got a system in place to export all

416
00:22:56,400 --> 00:23:00,880
of the changed file systems on disk and then commit that immediately back to merchant control

417
00:23:00,880 --> 00:23:03,760
as the source of truth so that all, you know, all future deployments happen.

418
00:23:03,760 --> 00:23:05,800
A good tip.

419
00:23:05,800 --> 00:23:09,360
Cause otherwise it just gets to be a mess and having stuff like Docker can help you

420
00:23:09,360 --> 00:23:12,800
do that cause it makes you a little bit more aware of where you have state, right?

421
00:23:12,800 --> 00:23:15,320
It's not a VM with a real file system.

422
00:23:15,320 --> 00:23:18,060
It's a container with some attached storage that either lives somewhere that's easily

423
00:23:18,060 --> 00:23:23,200
backed up or is ephemeral.

424
00:23:23,200 --> 00:23:26,340
And so yeah, I would definitely say that's easy.

425
00:23:26,340 --> 00:23:30,360
So you don't have to, there's also stuff like I was saying, like Ansible or Chef Scripts

426
00:23:30,360 --> 00:23:33,760
to get it stood up if you are using more traditional infrastructure.

427
00:23:33,760 --> 00:23:37,520
And if you don't have to do anything complicated, like trying to get SSL installed in the Java

428
00:23:37,520 --> 00:23:41,240
key store itself, which is just always the world's most painful process, probably just

429
00:23:41,240 --> 00:23:46,600
use a NGINX proxy or something, you'll probably be fine and it works well enough.

430
00:23:46,600 --> 00:23:50,160
But as you were talking about earlier, you will have to keep going back to that UI, especially

431
00:23:50,160 --> 00:23:51,520
if you're a new user.

432
00:23:51,520 --> 00:23:54,360
And that's where it's still kind of unpleasant.

433
00:23:54,360 --> 00:23:58,680
So and this is a unsolicited plug, but if you did want to learn Jenkins and when you

434
00:23:58,680 --> 00:24:03,040
wanted to like take a Jenkins certification course, I think there's an academy that can

435
00:24:03,040 --> 00:24:04,040
help you.

436
00:24:04,040 --> 00:24:05,040
Yeah.

437
00:24:05,040 --> 00:24:06,040
Yeah.

438
00:24:06,040 --> 00:24:07,040
Linux Academy.

439
00:24:07,040 --> 00:24:09,200
Certified Jenkins in Jarrett 2018 by Michael McLaren.

440
00:24:09,200 --> 00:24:10,200
Boom.

441
00:24:10,200 --> 00:24:11,200
There you go.

442
00:24:11,200 --> 00:24:12,200
That's a great place.

443
00:24:12,200 --> 00:24:14,640
And so that's, that's another reason that you might want to use Jenkins.

444
00:24:14,640 --> 00:24:16,400
There are a lot of resources.

445
00:24:16,400 --> 00:24:17,400
But if you can get it installed.

446
00:24:17,400 --> 00:24:18,400
It sounds like there's a ton of demand too.

447
00:24:18,400 --> 00:24:19,400
Yeah, right.

448
00:24:19,400 --> 00:24:20,400
So it exists everywhere.

449
00:24:20,400 --> 00:24:21,400
People are using it.

450
00:24:21,400 --> 00:24:24,720
If you're hired onto a new company, you don't get to choose what CI system is in place.

451
00:24:24,720 --> 00:24:26,320
It's probably already Jenkins.

452
00:24:26,320 --> 00:24:30,880
Wait, Wes, you can't walk in as a junior developer to this big organization and say, you know

453
00:24:30,880 --> 00:24:33,760
what guys, I know you've been using Jenkins for 10 years.

454
00:24:33,760 --> 00:24:36,200
Hey, I mean, don't think I haven't tried.

455
00:24:36,200 --> 00:24:39,240
It just doesn't always work.

456
00:24:39,240 --> 00:24:46,120
I'm converting people from.NET to Ruby or.NET Core, but usually to Ruby all the time.

457
00:24:46,120 --> 00:24:51,040
So the other thing I think is you've got this, it's, there's so many low hanging fruit.

458
00:24:51,040 --> 00:24:53,640
You know, like once you're already invested somewhere, it just keeps happening.

459
00:24:53,640 --> 00:24:58,560
So because Jenkins makes it really easy to tie in to things like Git repositories or

460
00:24:58,560 --> 00:25:02,120
GitLab or GitHub or push, you know, you can have push, you can have pull, whatever you

461
00:25:02,120 --> 00:25:03,120
want.

462
00:25:03,120 --> 00:25:06,980
It also has support for stuff like cron-like jobs where you can have a job on a schedule.

463
00:25:06,980 --> 00:25:09,680
If you're a developer and maybe you're not great at like systems, you don't want to go

464
00:25:09,680 --> 00:25:13,700
spin up a box that you have to manage and do updates on to, you know, try to do a cron

465
00:25:13,700 --> 00:25:17,440
job that pings your service for updates to make sure the database or the cache is fresh

466
00:25:17,440 --> 00:25:21,720
or whatever weird hacky thing you're trying to do, you probably already have access to

467
00:25:21,720 --> 00:25:24,760
Jenkins and it can do the same thing.

468
00:25:24,760 --> 00:25:28,960
So even if you just need a place that isn't your local developer workstation to trigger

469
00:25:28,960 --> 00:25:32,920
the Capistrano deployment, that's a lot of the times where Jenkins, someone writes a

470
00:25:32,920 --> 00:25:36,920
little deploy script and loads it up in Jenkins and then, you know, every time there's a push

471
00:25:36,920 --> 00:25:41,520
to the master branch, Jenkins will detect it, run that job, spin up the, spin up the

472
00:25:41,520 --> 00:25:45,840
job, use Capistrano to deploy it to the production machine.

473
00:25:45,840 --> 00:25:50,240
There were so many cool buzzwords that anyone not in tech would not understand in that entire

474
00:25:50,240 --> 00:25:51,240
spiel.

475
00:25:51,240 --> 00:25:52,240
Yes, it's all right.

476
00:25:52,240 --> 00:25:55,120
So it's just, no, it's great actually.

477
00:25:55,120 --> 00:25:59,040
So let's dial in on that a little bit.

478
00:25:59,040 --> 00:26:02,840
So I pushed the master, right, and I'm going to walk through this like I'm five because

479
00:26:02,840 --> 00:26:03,840
you know what?

480
00:26:03,840 --> 00:26:04,840
I was playing with blocks this morning.

481
00:26:04,840 --> 00:26:08,760
I have a little kid.

482
00:26:08,760 --> 00:26:09,760
No excuse needed.

483
00:26:09,760 --> 00:26:11,180
Blocks are great for any age.

484
00:26:11,180 --> 00:26:12,180
Blocks are fun.

485
00:26:12,180 --> 00:26:13,180
You know what?

486
00:26:13,180 --> 00:26:16,000
They actually make blocks to teach your kids coding now and it's like if statements and

487
00:26:16,000 --> 00:26:17,560
they all fit together the right way.

488
00:26:17,560 --> 00:26:18,560
It's crazy.

489
00:26:18,560 --> 00:26:19,560
Oh, fun.

490
00:26:19,560 --> 00:26:20,560
That actually, that's fun.

491
00:26:20,560 --> 00:26:21,560
Wow.

492
00:26:21,560 --> 00:26:26,560
So I pushed the master, that triggers Jenkins, right?

493
00:26:26,560 --> 00:26:31,000
Jenkins then has a job to run whatever the Capistrano or Chef tasks are, is that what's

494
00:26:31,000 --> 00:26:32,000
going on?

495
00:26:32,000 --> 00:26:33,000
Yeah.

496
00:26:33,000 --> 00:26:34,000
And you know, there's plugins for various things.

497
00:26:34,000 --> 00:26:36,320
Like there's, you know, a plugin to run Ansible scripts.

498
00:26:36,320 --> 00:26:38,840
If you're using Ansible for stuff, right, you can have that go like, oh yeah, here you

499
00:26:38,840 --> 00:26:39,840
go.

500
00:26:39,840 --> 00:26:41,400
Here's where you pull and yeah, exactly.

501
00:26:41,400 --> 00:26:43,640
So you can basically trigger, you can do arbitrary jobs.

502
00:26:43,640 --> 00:26:47,680
It can be an actual script running on the Jenkins machine, an API request somewhere

503
00:26:47,680 --> 00:26:50,360
or running something a little more complicated.

504
00:26:50,360 --> 00:26:51,360
Okay.

505
00:26:51,360 --> 00:26:57,000
So theoretically, if you are an experienced engineer who has used Jenkins for some time,

506
00:26:57,000 --> 00:27:01,020
you can actually take your Jenkins knowledge and directly apply it to some of these other

507
00:27:01,020 --> 00:27:04,960
kinds of let's say CI deployment technologies.

508
00:27:04,960 --> 00:27:10,040
If you wanted to have Jenkins be the thing that manages everything.

509
00:27:10,040 --> 00:27:11,040
Yes.

510
00:27:11,040 --> 00:27:12,040
Oh yeah, absolutely.

511
00:27:12,040 --> 00:27:17,320
And that's where it is sort of a mongrel job runner system.

512
00:27:17,320 --> 00:27:21,880
You know, you can use, it sort of spits, like Rundeck is a better example of something that

513
00:27:21,880 --> 00:27:23,560
should do jobs like that.

514
00:27:23,560 --> 00:27:27,200
But again, Jenkins has enough functionality that like, unless you want to spin up and

515
00:27:27,200 --> 00:27:31,060
learn to run a new system and have someone who's willing to support it or you're willing

516
00:27:31,060 --> 00:27:35,800
to support it or your team's willing to support it, well your organization already has a Jenkins

517
00:27:35,800 --> 00:27:36,800
server sitting there.

518
00:27:36,800 --> 00:27:37,800
Sure.

519
00:27:37,800 --> 00:27:39,720
It might be on some developer's workstation hiding under a desk.

520
00:27:39,720 --> 00:27:41,140
We hope not.

521
00:27:41,140 --> 00:27:44,720
But either way, it's already there and it's online and it tends to be one of those things

522
00:27:44,720 --> 00:27:49,720
like you know, when jobs fail or the test servers down, developers notice right away.

523
00:27:49,720 --> 00:27:53,680
Hey Wes, why is the server closet on fire?

524
00:27:53,680 --> 00:27:55,560
Oh, that wasn't me.

525
00:27:55,560 --> 00:27:57,560
I've been at lunch.

526
00:27:57,560 --> 00:28:00,240
Did somebody install Windows Server on one of my servers?

527
00:28:00,240 --> 00:28:02,640
That way there's smoke coming out of the closet.

528
00:28:02,640 --> 00:28:06,460
I just always walk around with a little USB drive set up to wipe whatever it finds and

529
00:28:06,460 --> 00:28:09,080
install Windows Server on it.

530
00:28:09,080 --> 00:28:10,880
I'm actually been inspired by the NSA.

531
00:28:10,880 --> 00:28:15,680
I'm going to put free charging stations and parking lots all around Tampa and you know,

532
00:28:15,680 --> 00:28:18,160
let's see what happens when people plug in their phones.

533
00:28:18,160 --> 00:28:22,800
That was not an actual promise to the commit a crime, dear feds.

534
00:28:22,800 --> 00:28:24,720
Actually, what about Windows though?

535
00:28:24,720 --> 00:28:25,720
What about a Windows server?

536
00:28:25,720 --> 00:28:30,120
Can my Jenkins run on Windows or are we purely in the Linux side of life?

537
00:28:30,120 --> 00:28:36,320
I think you see it deployed mostly on Linux just because, you know, Linux VMs are cheap

538
00:28:36,320 --> 00:28:37,320
and ubiquitous.

539
00:28:37,320 --> 00:28:38,520
But no, I mean, it's Java.

540
00:28:38,520 --> 00:28:40,760
It'll run anywhere Java runs, which is nice.

541
00:28:40,760 --> 00:28:44,940
And they do have, you know, they do have Windows plugins and stuff like that.

542
00:28:44,940 --> 00:28:48,760
It's not the most vibrant part of the ecosystem, I would say, but it's not like it's missing.

543
00:28:48,760 --> 00:28:50,520
There's PowerShell integrations.

544
00:28:50,520 --> 00:28:54,000
And then especially now that there's, you know, more.NET Core, PowerShell Core, I think

545
00:28:54,000 --> 00:28:56,000
that would all work great.

546
00:28:56,000 --> 00:29:00,560
Yeah, that's actually true and.NET Core you would run on Linux anyway.

547
00:29:00,560 --> 00:29:04,960
It would be very strange to have.NET Core and the JVM on the same machine, but also

548
00:29:04,960 --> 00:29:05,960
kind of exciting.

549
00:29:05,960 --> 00:29:06,960
Yeah, it would be kind of exciting.

550
00:29:06,960 --> 00:29:07,960
I love it.

551
00:29:07,960 --> 00:29:11,640
Now, I don't know about, that would still work for some of the DevOpsy stuff.

552
00:29:11,640 --> 00:29:12,640
I don't know.

553
00:29:12,640 --> 00:29:18,320
I don't see them getting used nearly as much for like, you know, visual studio centric

554
00:29:18,320 --> 00:29:19,320
development.

555
00:29:19,320 --> 00:29:21,740
That probably depends on the shop and what tools they're familiar with.

556
00:29:21,740 --> 00:29:24,640
But you can't, you couldn't in theory get it running.

557
00:29:24,640 --> 00:29:26,960
I just don't see it done.

558
00:29:26,960 --> 00:29:33,120
Yeah, it sounds like it's incredibly unlikely that someone would want to really do that.

559
00:29:33,120 --> 00:29:34,680
Yeah, exactly.

560
00:29:34,680 --> 00:29:41,640
But so for example, I think really it's what we are entering into is a world of, we already

561
00:29:41,640 --> 00:29:44,240
have so much, so many things offered as a service.

562
00:29:44,240 --> 00:29:47,760
So if you're doing everything and you know, you pay for like a private GitHub repository,

563
00:29:47,760 --> 00:29:51,800
I guess you don't even have to anymore, you know, you're using some sort of private thing

564
00:29:51,800 --> 00:29:52,800
for your...

565
00:29:52,800 --> 00:29:53,800
I know, I'm so happy.

566
00:29:53,800 --> 00:29:56,920
But I thought you were using GitLab, Mike.

567
00:29:56,920 --> 00:29:59,800
So this is a little behind the curtain thing, I use both.

568
00:29:59,800 --> 00:30:04,000
So we host our own GitLab, the community edition on DO.

569
00:30:04,000 --> 00:30:06,720
That is where 90% of our repos are.

570
00:30:06,720 --> 00:30:11,640
But if we have to contract with an outs, like if we're partnering with another firm on a

571
00:30:11,640 --> 00:30:18,440
project and they want us to host, we don't let them into our like private DO droplets.

572
00:30:18,440 --> 00:30:22,040
We use GitHub for that.

573
00:30:22,040 --> 00:30:24,400
So if we're co-developing with another shop, we use GitLab.

574
00:30:24,400 --> 00:30:25,400
Ah, yeah, yeah.

575
00:30:25,400 --> 00:30:26,400
Okay.

576
00:30:26,400 --> 00:30:27,400
That makes sense.

577
00:30:27,400 --> 00:30:28,400
And that's sort of their thing, right?

578
00:30:28,400 --> 00:30:29,400
Everyone's on it.

579
00:30:29,400 --> 00:30:34,120
Well, especially if it's Windows, like if it's a Windows project, you would be shocked

580
00:30:34,120 --> 00:30:40,240
at how many developers I have talked to and met that when I say, yeah, we use GitLab,

581
00:30:40,240 --> 00:30:41,880
they're like, oh, but we use Git.

582
00:30:41,880 --> 00:30:46,620
And when they say Git, they literally mean GitHub.

583
00:30:46,620 --> 00:30:52,640
Like the GitHub, see, I'm getting it confused, the GitHub GUI application for Windows is

584
00:30:52,640 --> 00:30:53,640
what they perceive Git as.

585
00:30:53,640 --> 00:30:54,640
Oh, wow.

586
00:30:54,640 --> 00:30:55,640
It is?

587
00:30:55,640 --> 00:30:56,640
Wow.

588
00:30:56,640 --> 00:30:57,640
Yeah.

589
00:30:57,640 --> 00:31:00,000
I mean, no, that is like, that is a thing though.

590
00:31:00,000 --> 00:31:01,000
Git is not a tool.

591
00:31:01,000 --> 00:31:05,640
I've helped, oh man, I have helped some like technical writers and other people in that

592
00:31:05,640 --> 00:31:09,320
sort of field get set up because they had to interact with a Git repository and version

593
00:31:09,320 --> 00:31:13,800
control because they were editing the documentation that went along with deployments for the customer,

594
00:31:13,800 --> 00:31:14,800
right?

595
00:31:14,800 --> 00:31:15,800
Wow.

596
00:31:15,800 --> 00:31:20,360
And they ended up to use it on Windows and actually use Git and like not break anything

597
00:31:20,360 --> 00:31:25,280
or they never, they never hurt the repository, but like they hurt themselves in the process.

598
00:31:25,280 --> 00:31:29,480
So I can see how, if you're just someone who has to collaborate on GitHub, the easy GUI

599
00:31:29,480 --> 00:31:31,240
is going to be what you know.

600
00:31:31,240 --> 00:31:32,240
Yeah.

601
00:31:32,240 --> 00:31:37,120
Any sentence to like a, let's say, you know, very traditional.NET developer that starts

602
00:31:37,120 --> 00:31:41,760
out, okay, now launch Git Bash, as soon as they hear bash, you're, you're, you're in

603
00:31:41,760 --> 00:31:42,760
trouble.

604
00:31:42,760 --> 00:31:43,760
Yeah, right.

605
00:31:43,760 --> 00:31:44,760
Yeah, exactly.

606
00:31:44,760 --> 00:31:50,440
I'm going to, I'm going to need you to write this complicated script for me, Mr. Dominic.

607
00:31:50,440 --> 00:31:51,440
Are you back there?

608
00:31:51,440 --> 00:31:52,440
I'm back.

609
00:31:52,440 --> 00:31:53,440
I don't know what happened though.

610
00:31:53,440 --> 00:31:56,480
I said, I said, I said Git and Windows in the same set and the whole thing just spent,

611
00:31:56,480 --> 00:31:58,360
oh, cause I'm on Windows today.

612
00:31:58,360 --> 00:32:00,040
That's why it's insulted.

613
00:32:00,040 --> 00:32:01,880
Redmond hurt you, my friend.

614
00:32:01,880 --> 00:32:02,880
Watch out.

615
00:32:02,880 --> 00:32:03,920
Well, they also on GitHub.

616
00:32:03,920 --> 00:32:05,680
So I mean, what do they care?

617
00:32:05,680 --> 00:32:08,240
And apparently they don't care what OS you're on, right?

618
00:32:08,240 --> 00:32:09,240
So.

619
00:32:09,240 --> 00:32:13,080
No, not, not in the new world.

620
00:32:13,080 --> 00:32:16,600
So thinking about it, I don't think you would ever, I, I, I'm hopeful and let me, let me

621
00:32:16,600 --> 00:32:22,120
just say, I'm going to hope for you and here's my 2019 wish is that, and beyond is that you

622
00:32:22,120 --> 00:32:23,300
don't have to run Jenkins.

623
00:32:23,300 --> 00:32:28,240
Not that it's bad, but that since like, if you live in a world where you can, you know,

624
00:32:28,240 --> 00:32:33,400
you have a declarative build and CI and deployment system with like well-defined primitives and

625
00:32:33,400 --> 00:32:38,000
rules and a declarative syntax that you can use that, that pretty much does everything

626
00:32:38,000 --> 00:32:44,280
that you need and you can architect your applications or at least the building and sort of maintaining

627
00:32:44,280 --> 00:32:47,300
of your applications around that process.

628
00:32:47,300 --> 00:32:48,300
Just do that.

629
00:32:48,300 --> 00:32:52,000
Just, just do that because you can, it'll just be easier, especially if you're already

630
00:32:52,000 --> 00:32:53,360
switching to something like GitLab.

631
00:32:53,360 --> 00:32:58,480
And I think that is actually one of the things that has been a huge boon to GitLab is having

632
00:32:58,480 --> 00:33:01,920
that built in because you didn't, you don't have to set up a separate tool and your ops

633
00:33:01,920 --> 00:33:04,300
teams already running GitLab or you're just paying for it.

634
00:33:04,300 --> 00:33:05,300
And then it just works.

635
00:33:05,300 --> 00:33:09,160
Oh, can I, can I do some GitLab?

636
00:33:09,160 --> 00:33:13,100
I last month found a new feature that I did not know existed.

637
00:33:13,100 --> 00:33:17,040
So my process traditionally, cause I, I'm everything on bash, I'm everything on my terminal

638
00:33:17,040 --> 00:33:20,220
cause I'm usually working on other popular elementary.

639
00:33:20,220 --> 00:33:23,240
So I'm like, you know, make deer rails and I have like a rails template to generate a

640
00:33:23,240 --> 00:33:24,240
project.

641
00:33:24,240 --> 00:33:25,240
Right.

642
00:33:25,240 --> 00:33:28,960
And I, you know, once for bots and, but let's just, again, rails is the simplest case cause

643
00:33:28,960 --> 00:33:33,680
it's when I have most, uh, and everyone knows rails.

644
00:33:33,680 --> 00:33:38,080
Lots of people like to code rails in parks on gold Mac books while meditating in wooden

645
00:33:38,080 --> 00:33:39,080
sandals.

646
00:33:39,080 --> 00:33:40,080
We don't talk about them.

647
00:33:40,080 --> 00:33:41,080
Their name's Dave.

648
00:33:41,080 --> 00:33:45,180
Um, this is how I see if my employees actually listen to the show.

649
00:33:45,180 --> 00:33:47,600
You can go into the GitLab UI.

650
00:33:47,600 --> 00:33:52,840
If you go into the web UI, they have prefabbed templates for rails.

651
00:33:52,840 --> 00:33:57,880
And I think like PHP and Java that actually set you, set up the CI for you correctly.

652
00:33:57,880 --> 00:34:00,020
You don't have to do it.

653
00:34:00,020 --> 00:34:03,640
So it creates the repo, does all the settings for your application.

654
00:34:03,640 --> 00:34:07,160
And then instead of like generating it on your local host, you just, you know, get clone

655
00:34:07,160 --> 00:34:11,920
it down and from the jump, no fiddling with pipelines.

656
00:34:11,920 --> 00:34:14,480
You are set up and good to go.

657
00:34:14,480 --> 00:34:17,120
I can't tell you how much of a killer feature that is.

658
00:34:17,120 --> 00:34:18,120
Yes.

659
00:34:18,120 --> 00:34:19,120
Right.

660
00:34:19,120 --> 00:34:23,680
And then, and it sort of sets that modern expectation of here it is.

661
00:34:23,680 --> 00:34:24,680
It's ready.

662
00:34:24,680 --> 00:34:25,840
Like, you know, you have these features that are built right in.

663
00:34:25,840 --> 00:34:28,600
You're, you're working on code, you're building an application.

664
00:34:28,600 --> 00:34:30,760
Well, of course you need those things.

665
00:34:30,760 --> 00:34:33,960
It's not just a dumb place to go dump your Git repository.

666
00:34:33,960 --> 00:34:35,840
Not that that's, that's not necessarily a bad thing.

667
00:34:35,840 --> 00:34:40,160
There's plenty of simpler, you know, non GitLab or GitHub Git repositories that have nice

668
00:34:40,160 --> 00:34:50,120
web UIs and are totally useful, but having it right there at hand is very seductive.

669
00:34:50,120 --> 00:34:54,920
How long have you been using GitLab?

670
00:34:54,920 --> 00:35:03,040
For since before we had the GitLab CEO on, we must've been, I honestly don't know, almost

671
00:35:03,040 --> 00:35:07,840
at least over a year.

672
00:35:07,840 --> 00:35:11,880
The vast majority of our projects are in GitLab, not GitHub.

673
00:35:11,880 --> 00:35:17,160
I think we have like six repos in GitHub and God knows how many in GitLab.

674
00:35:17,160 --> 00:35:18,360
Like I'll put it to you this way.

675
00:35:18,360 --> 00:35:21,520
I had to upgrade the DO server.

676
00:35:21,520 --> 00:35:22,520
There you go.

677
00:35:22,520 --> 00:35:23,520
Yeah.

678
00:35:23,520 --> 00:35:24,520
Right.

679
00:35:24,520 --> 00:35:29,800
So I'm, I'm curious for, for, for you, how has it been to run it and manage it?

680
00:35:29,800 --> 00:35:33,720
So if you're running it, you're running it on a, on a droplet, it sounds like, um, yeah.

681
00:35:33,720 --> 00:35:34,720
Has that been a pain?

682
00:35:34,720 --> 00:35:38,320
Is that something that your team has to spend significant time worrying about or touching

683
00:35:38,320 --> 00:35:40,480
on or getting alerts from?

684
00:35:40,480 --> 00:35:47,340
I mean, maybe once, so far I think we've had one incident where it just like ran out of

685
00:35:47,340 --> 00:35:50,960
storage because all the tickets had like videos and images on them.

686
00:35:50,960 --> 00:35:55,880
So we had to, you know, turn off the droplet and DO, for those of you who don't use DO,

687
00:35:55,880 --> 00:35:59,960
you can actually turn off the, uh, when I said droplets, just a VPS, right?

688
00:35:59,960 --> 00:36:02,800
Turn it off and then change the settings to get more storage.

689
00:36:02,800 --> 00:36:06,640
Also keep in mind, like Jenkins is a Java app, GitLab is a Rails app.

690
00:36:06,640 --> 00:36:12,000
So for us, administrating, deploying, upgrading a Rails app is like we do it all the time.

691
00:36:12,000 --> 00:36:14,160
And I personally am the one who does that.

692
00:36:14,160 --> 00:36:20,120
So it's a, I think from zero, like starting the droplet to, you know, changing the DNS

693
00:36:20,120 --> 00:36:28,600
or the domain for it took maybe an hour to get up and running and good to go with everything

694
00:36:28,600 --> 00:36:29,600
set up.

695
00:36:29,600 --> 00:36:30,600
Wow.

696
00:36:30,600 --> 00:36:31,600
Yeah.

697
00:36:31,600 --> 00:36:32,600
Oh, you know, that's a good point too.

698
00:36:32,600 --> 00:36:37,760
Uh, there is that, that power once you're familiar with the horrors of Bundle and everything

699
00:36:37,760 --> 00:36:41,520
else that goes around with a complicated Rails project and then you're like, okay, I guess

700
00:36:41,520 --> 00:36:44,080
I'm, uh, I'm ready to manage this thing.

701
00:36:44,080 --> 00:36:48,560
So I think we could both agree, Wes, if, uh, some of our listeners want to try GitLab on

702
00:36:48,560 --> 00:36:52,840
their own droplet and they are not familiar with Rails, the answer is always more RAM

703
00:36:52,840 --> 00:36:53,840
than you think you need.

704
00:36:53,840 --> 00:36:54,840
Oh my God.

705
00:36:54,840 --> 00:36:55,840
What is it?

706
00:36:55,840 --> 00:36:56,840
Yeah, Ruby is just like.

707
00:36:56,840 --> 00:36:57,840
What is it?

708
00:36:57,840 --> 00:37:02,080
And you know, I mean, there's a lot of things not in its, not in its favor, the like, you

709
00:37:02,080 --> 00:37:04,620
know, object oriented dynamic sort of thing.

710
00:37:04,620 --> 00:37:09,600
And it's, it's most common VM implementation, but there's also just something about complicated

711
00:37:09,600 --> 00:37:14,400
Rails apps and you have a bunch of workers running in the background and nothing ever

712
00:37:14,400 --> 00:37:16,080
really dies when it should.

713
00:37:16,080 --> 00:37:21,240
Wait till you have to like start implementing what should just be simple cron jobs in Rails

714
00:37:21,240 --> 00:37:26,360
and you just watch if there's any sort of issue, just watch the memory, like that chart

715
00:37:26,360 --> 00:37:28,560
just up and to the right.

716
00:37:28,560 --> 00:37:34,400
I am in a past life, I inherited an internal service that I sort of became responsible

717
00:37:34,400 --> 00:37:39,760
for when the previous person left and it was fine, it was pretty minimal, but of course

718
00:37:39,760 --> 00:37:42,920
it was written in Rails and not especially great Rails.

719
00:37:42,920 --> 00:37:47,840
Thankfully we were doing a data center migration, so instead of having to fix the problem, because

720
00:37:47,840 --> 00:37:50,920
it was going to be sunset at some time, I sort of just had to wait it out.

721
00:37:50,920 --> 00:37:56,040
I just stole one of the old servers that had like 128 gigs of RAM in it and it ran fine

722
00:37:56,040 --> 00:37:58,040
for as long as I needed it to.

723
00:37:58,040 --> 00:37:59,680
That's a small Rails app, 128 gigs of RAM?

724
00:37:59,680 --> 00:38:00,680
That's nothing.

725
00:38:00,680 --> 00:38:01,680
I know, right?

726
00:38:01,680 --> 00:38:04,960
It was actually kind of reasonably well done, if only because it was a small application.

727
00:38:04,960 --> 00:38:09,680
Well, the trade off, you know, that everybody makes Rails, it's like we would like to not

728
00:38:09,680 --> 00:38:13,960
spend a fortune on developers and we want to keep moving on this app really quickly.

729
00:38:13,960 --> 00:38:17,280
Although we're being a little mean, Rails 5 is certainly a lot faster than let's say

730
00:38:17,280 --> 00:38:18,280
Rails 3.

731
00:38:18,280 --> 00:38:19,280
Yeah, right.

732
00:38:19,280 --> 00:38:20,280
It's a lot more performant.

733
00:38:20,280 --> 00:38:27,800
Yeah, and you can really use Rails to build a modern API driven sort of service and it'll

734
00:38:27,800 --> 00:38:29,240
be just fine.

735
00:38:29,240 --> 00:38:32,280
And if you wanted to do that, there's some people in Florida who could help you.

736
00:38:32,280 --> 00:38:36,320
Oh, oh, now what might their name be?

737
00:38:36,320 --> 00:38:37,320
The Mad Botter.

738
00:38:37,320 --> 00:38:38,320
The Mad Botter.

739
00:38:38,320 --> 00:38:42,400
You know, it also kind of looked like even people who aren't interested in Rails or don't

740
00:38:42,400 --> 00:38:47,280
care about the backend technology at all, well, they've been talking about you too.

741
00:38:47,280 --> 00:38:52,040
I happen to notice, Mr. Dominic, that you got some local coverage recently.

742
00:38:52,040 --> 00:38:53,960
Yeah, yeah.

743
00:38:53,960 --> 00:39:01,120
The Florida Business Observer came to my office in Plant City a couple, maybe a month ago,

744
00:39:01,120 --> 00:39:06,080
did a little interview talking about, you know, how we're using Linux and open source

745
00:39:06,080 --> 00:39:09,960
for the aerospace and military aviation industries.

746
00:39:09,960 --> 00:39:11,840
So that was interesting.

747
00:39:11,840 --> 00:39:19,600
First thing I had to do was quote, put crazy tech stuff on the whiteboard, which the photographer

748
00:39:19,600 --> 00:39:20,840
gave me a good laugh.

749
00:39:20,840 --> 00:39:22,400
But if you have, there's a link in the show notes.

750
00:39:22,400 --> 00:39:29,000
If you want to check it out, I look like a deranged professor who has crazy tech stuff

751
00:39:29,000 --> 00:39:31,340
and of course one of them is Linux and Ubuntu.

752
00:39:31,340 --> 00:39:34,560
You've got these joysticks in your hand, so it sort of makes me think you're in some sort

753
00:39:34,560 --> 00:39:36,640
of like floating or flying classroom.

754
00:39:36,640 --> 00:39:40,340
You've got a whiteboard behind you, joysticks in your hand, so you're just ready to teach

755
00:39:40,340 --> 00:39:42,280
us all something, whether we like it or not.

756
00:39:42,280 --> 00:39:47,480
Yeah, so those are actually replicas of what the Air Force uses in, so they're for training,

757
00:39:47,480 --> 00:39:48,480
right?

758
00:39:48,480 --> 00:39:51,660
The replicas of what you have in like most modern cockpits, depending on the service

759
00:39:51,660 --> 00:39:54,000
and the type of plane.

760
00:39:54,000 --> 00:39:58,800
This nice little Dell I have here was previously running a flight simulator that I was using

761
00:39:58,800 --> 00:40:03,000
those on for testing our radar product, Gryphon.

762
00:40:03,000 --> 00:40:04,800
Oh, interesting.

763
00:40:04,800 --> 00:40:09,400
One thing that I kind of wanted to know, looking through this article, do you get much pushback

764
00:40:09,400 --> 00:40:11,040
about the technologies that you choose?

765
00:40:11,040 --> 00:40:15,880
I mean, if you are using a lot of open source tools these days, does that concern some of

766
00:40:15,880 --> 00:40:22,080
your more, let's say, defensive clients?

767
00:40:22,080 --> 00:40:24,200
You know, not really.

768
00:40:24,200 --> 00:40:28,820
One of the more interesting things is kind of the largest opportunity for what we're

769
00:40:28,820 --> 00:40:38,320
doing is people who have very old ASP applications that need to be either redone or rewritten

770
00:40:38,320 --> 00:40:39,480
for very good reasons, right?

771
00:40:39,480 --> 00:40:45,880
Like an ASP app after 10 years or whatever is going to be rough, especially with all

772
00:40:45,880 --> 00:40:48,920
the changes Microsoft has made in the subsequent time.

773
00:40:48,920 --> 00:40:56,240
I would say the one area where we do get a lot of pushback is anything like in cockpit.

774
00:40:56,240 --> 00:41:02,400
There's definitely a Windows bias there, and obviously most of the end users are running

775
00:41:02,400 --> 00:41:06,880
Windows as their, you know, their end PC, right?

776
00:41:06,880 --> 00:41:07,880
Yeah.

777
00:41:07,880 --> 00:41:08,880
Well, and I imagine too-

778
00:41:08,880 --> 00:41:10,440
The Surface Pro is hyper popular.

779
00:41:10,440 --> 00:41:11,440
Just, yeah.

780
00:41:11,440 --> 00:41:12,440
Oh, really?

781
00:41:12,440 --> 00:41:13,440
Mm-hmm.

782
00:41:13,440 --> 00:41:14,440
Yeah.

783
00:41:14,440 --> 00:41:17,160
So that's, like, we usually what it is is we'll write some, like, backend service on

784
00:41:17,160 --> 00:41:24,480
Linux and Rails, but the front end will be, like, a WPF app for the Surface Pro for something

785
00:41:24,480 --> 00:41:25,480
of that nature.

786
00:41:25,480 --> 00:41:26,480
Yeah.

787
00:41:26,480 --> 00:41:27,480
That makes sense.

788
00:41:27,480 --> 00:41:29,400
And I suppose, you know, in the field, you've got to use the technology you're comfortable

789
00:41:29,400 --> 00:41:32,120
with and that you've already trained all your people on.

790
00:41:32,120 --> 00:41:33,120
Yeah.

791
00:41:33,120 --> 00:41:37,360
And I think there's just a, you know, some of these companies have, like, security concerns,

792
00:41:37,360 --> 00:41:40,880
so there's, like, weird things they put on their Windows machines that lock them up.

793
00:41:40,880 --> 00:41:41,880
Right.

794
00:41:41,880 --> 00:41:42,880
Yeah.

795
00:41:42,880 --> 00:41:43,880
Exactly.

796
00:41:43,880 --> 00:41:44,880
We've already certified this platform.

797
00:41:44,880 --> 00:41:45,880
We know we can-

798
00:41:45,880 --> 00:41:46,880
Yeah.

799
00:41:46,880 --> 00:41:47,880
Windows 7 is alive and well.

800
00:41:47,880 --> 00:41:48,880
I'll put it that way.

801
00:41:48,880 --> 00:41:49,880
Oh, that's so sad and so painful.

802
00:41:49,880 --> 00:41:51,720
I mean, not that I hate Windows 7 or anything.

803
00:41:51,720 --> 00:41:57,400
It was a fine Windows, but it's pretty old now.

804
00:41:57,400 --> 00:41:59,400
I just, you know, poor WinRT never made it.

805
00:41:59,400 --> 00:42:06,380
You know, okay, so another thing I just wanted to highlight in this article is a military-grade

806
00:42:06,380 --> 00:42:11,640
rear warning radar system that runs on an iPhone.

807
00:42:11,640 --> 00:42:14,640
Those are words I would never have put in the same sentence.

808
00:42:14,640 --> 00:42:15,640
Yeah.

809
00:42:15,640 --> 00:42:17,400
That was a fun project.

810
00:42:17,400 --> 00:42:21,400
We actually have grown it up into something called Gryphon radar, which you can go to

811
00:42:21,400 --> 00:42:27,960
GryphonRadar.com that does the rear warning radar and a tactical display and a forward

812
00:42:27,960 --> 00:42:30,920
radar, you just call radar.

813
00:42:30,920 --> 00:42:33,480
And that, believe it or not, runs on Linux as well.

814
00:42:33,480 --> 00:42:34,480
Wow.

815
00:42:34,480 --> 00:42:35,480
I'm impressed.

816
00:42:35,480 --> 00:42:40,320
I mean, that sounds like a lot of fancy and interesting math and, you know, complicated

817
00:42:40,320 --> 00:42:42,880
heuristic algorithms to get that sort of thing right.

818
00:42:42,880 --> 00:42:45,680
Yes, and I did not personally do the math.

819
00:42:45,680 --> 00:42:46,680
I did some of it.

820
00:42:46,680 --> 00:42:53,520
But yeah, it's actually one of the bigger challenges with the iPhone was just like not

821
00:42:53,520 --> 00:42:56,520
having the iPhone, you know, run out of memory.

822
00:42:56,520 --> 00:42:57,520
Right?

823
00:42:57,520 --> 00:42:58,520
It's like...

824
00:42:58,520 --> 00:43:00,080
You're in almost an embedded type environment.

825
00:43:00,080 --> 00:43:03,160
I mean, a really plush embedded environment, but still.

826
00:43:03,160 --> 00:43:04,160
Yeah.

827
00:43:04,160 --> 00:43:05,800
And the upside is you don't care about the app store.

828
00:43:05,800 --> 00:43:06,800
Right?

829
00:43:06,800 --> 00:43:07,800
So there are no more rules.

830
00:43:07,800 --> 00:43:08,800
You can do literally anything.

831
00:43:08,800 --> 00:43:09,800
So it becomes...

832
00:43:09,800 --> 00:43:10,800
Oh, it's just a pure platform.

833
00:43:10,800 --> 00:43:13,520
You can run it on this fancy little ARM device.

834
00:43:13,520 --> 00:43:14,520
Exactly.

835
00:43:14,520 --> 00:43:18,400
It's basically a BSD device with obviously iOS on top of it.

836
00:43:18,400 --> 00:43:24,240
But if you need to get a little more efficient, you can, and we did, just drop down to the

837
00:43:24,240 --> 00:43:28,640
old BSD core, right, because iOS is based on macOS.

838
00:43:28,640 --> 00:43:33,320
But underneath it all, it's actually like a very bastardized form of BSD.

839
00:43:33,320 --> 00:43:34,320
You're right.

840
00:43:34,320 --> 00:43:41,480
You got the old XNU and mock stuff and the BSD user land, and it's an interesting little

841
00:43:41,480 --> 00:43:43,520
hodgepodge of an operating system.

842
00:43:43,520 --> 00:43:44,520
Yeah.

843
00:43:44,520 --> 00:43:45,520
It's...

844
00:43:45,520 --> 00:43:47,520
I pity whoever wrote iOS.

845
00:43:47,520 --> 00:43:50,280
That must have been like a painful process.

846
00:43:50,280 --> 00:43:55,440
He just know Apple has enough money to hire the really, really talented operating devs

847
00:43:55,440 --> 00:43:58,400
and make them do something that they probably hate.

848
00:43:58,400 --> 00:43:59,400
And a few therapists.

849
00:43:59,400 --> 00:44:00,400
Oh, yeah.

850
00:44:00,400 --> 00:44:03,760
That's part of the expensive benefits package, I'm sure.

851
00:44:03,760 --> 00:44:07,840
Well, I'm glad you got a little coverage out there.

852
00:44:07,840 --> 00:44:10,560
You're doing some really neat stuff.

853
00:44:10,560 --> 00:44:14,840
And now that I know all about the fancy math, I'm going to be following a little more closely.

854
00:44:14,840 --> 00:44:16,840
Oh, follow a little more closely.

855
00:44:16,840 --> 00:44:18,320
It's not just all Swift all day.

856
00:44:18,320 --> 00:44:19,880
No, not Swift all day.

857
00:44:19,880 --> 00:44:22,840
I mean, although I'm sure still plenty of Swift.

858
00:44:22,840 --> 00:44:26,040
Actually, a lot less Swift than I thought.

859
00:44:26,040 --> 00:44:27,040
A lot less Swift.

860
00:44:27,040 --> 00:44:28,040
Hmm.

861
00:44:28,040 --> 00:44:36,040
I might, and I don't want to ring the spell, I might have to actually look at Rust.

862
00:44:36,040 --> 00:44:37,040
But don't hold me to that.

863
00:44:37,040 --> 00:44:38,040
Okay.

864
00:44:38,040 --> 00:44:39,040
I may have to.

865
00:44:39,040 --> 00:44:40,040
Let's talk about that really quick.

866
00:44:40,040 --> 00:44:41,040
Sure.

867
00:44:41,040 --> 00:44:43,680
Because I feel like they don't fit quite the same.

868
00:44:43,680 --> 00:44:49,840
But Swift has this nice, really static and compiled and can make quick and lean little

869
00:44:49,840 --> 00:44:52,760
things with a pretty minimal runtime overhead.

870
00:44:52,760 --> 00:44:57,600
Now, that doesn't compare to Rust's lower level nature.

871
00:44:57,600 --> 00:45:01,800
But it seems like there's some things copacetic between the two.

872
00:45:01,800 --> 00:45:05,480
And I'm wondering what's the differentiator and what makes you curious about Rust?

873
00:45:05,480 --> 00:45:08,800
Of course, besides all the 2019 Rust hype.

874
00:45:08,800 --> 00:45:11,600
Actually, I came from it from a different perspective.

875
00:45:11,600 --> 00:45:14,400
I definitely see what you're saying with the similarities with Swift.

876
00:45:14,400 --> 00:45:18,420
I was going to do a project in Azure Spheres.

877
00:45:18,420 --> 00:45:21,880
But for reasons that have very little to do with me and to do with business guys who actually

878
00:45:21,880 --> 00:45:23,880
make decisions about money and stuff.

879
00:45:23,880 --> 00:45:29,000
And real quick, Azure Spheres is Microsoft's Linux based IoT platform.

880
00:45:29,000 --> 00:45:30,000
Right.

881
00:45:30,000 --> 00:45:31,740
But it's like a full platform, right?

882
00:45:31,740 --> 00:45:34,840
So we had an episode on it.

883
00:45:34,840 --> 00:45:38,000
Azure Spheres is you're also going to be paying for Azure services, which-

884
00:45:38,000 --> 00:45:41,920
Right, you get updates and firmware and the whole kit and caboodle.

885
00:45:41,920 --> 00:45:45,880
It's cool, but it assumes a connected environment.

886
00:45:45,880 --> 00:45:49,880
For reasons that aren't super relevant to the show, that was something that maybe we

887
00:45:49,880 --> 00:45:50,880
couldn't assume.

888
00:45:50,880 --> 00:45:55,120
There are ways around that, but it was getting to the point if you're going to pay, Azure

889
00:45:55,120 --> 00:45:57,000
Spheres is not a cheap option, right?

890
00:45:57,000 --> 00:45:58,000
Let's just put it out there.

891
00:45:58,000 --> 00:46:00,060
It just wasn't the best fit for that project.

892
00:46:00,060 --> 00:46:01,180
It wasn't the best fit.

893
00:46:01,180 --> 00:46:07,080
So we're going with just a more pure, probably like Arduino or something like that.

894
00:46:07,080 --> 00:46:08,080
Pure embedded Linux.

895
00:46:08,080 --> 00:46:10,280
Pure embedded, sort of more classic environment.

896
00:46:10,280 --> 00:46:11,280
Yeah.

897
00:46:11,280 --> 00:46:12,840
Might even be like embedded Ubuntu.

898
00:46:12,840 --> 00:46:17,280
And we want to be as cheap as possible on these chips.

899
00:46:17,280 --> 00:46:20,680
Using chips the wrong way, but you know what I mean.

900
00:46:20,680 --> 00:46:22,400
So we need performance, right?

901
00:46:22,400 --> 00:46:25,960
Like you start getting down the list, what are your choices?

902
00:46:25,960 --> 00:46:29,240
Well there is a.NET embedded, but that's like one of the more expensive things you

903
00:46:29,240 --> 00:46:30,600
could possibly do.

904
00:46:30,600 --> 00:46:34,080
I looked at Kotlin Native, in fact, if people pay attention to the subreddit will know a

905
00:46:34,080 --> 00:46:38,320
couple weeks ago I asked if anyone did any Kotlin Native, because I was hoping to get

906
00:46:38,320 --> 00:46:40,920
some performance stats.

907
00:46:40,920 --> 00:46:43,640
I did not, but I did a little testing on my own.

908
00:46:43,640 --> 00:46:47,040
It wasn't bad, but it's definitely not ready for prime time in my opinion.

909
00:46:47,040 --> 00:46:48,160
It's neat that they're doing it.

910
00:46:48,160 --> 00:46:53,120
I'm definitely following that with interest, but yeah, it's still being fleshed out fully.

911
00:46:53,120 --> 00:46:57,600
And again, for resource restrictions, throwing a JVM on this thing is not going to work.

912
00:46:57,600 --> 00:47:02,920
So now we're down to, there is a Go kind of embedded thing, but again, if I feel the same

913
00:47:02,920 --> 00:47:10,280
way I feel about Kotlin Native, we're down to basically C++ and Rust.

914
00:47:10,280 --> 00:47:13,080
And I don't know, you listeners got to me.

915
00:47:13,080 --> 00:47:19,560
I mean, C++ is kind of the devil I know, but that devil's taken my soul many times.

916
00:47:19,560 --> 00:47:21,920
So you're not one of the C++ defenders.

917
00:47:21,920 --> 00:47:26,700
I mean, it does seem like I'm willing to believe, I'm not an expert, it's been probably a decade

918
00:47:26,700 --> 00:47:31,000
since I did any serious C++, but it seems like in a modern world with a modern tool

919
00:47:31,000 --> 00:47:34,600
chain, which is usually not what you get in the embedded world, of course you can write

920
00:47:34,600 --> 00:47:40,200
decent, clean C++.

921
00:47:40,200 --> 00:47:41,200
Is that your experience?

922
00:47:41,200 --> 00:47:46,280
Yeah, I'm not a C++ hater.

923
00:47:46,280 --> 00:47:49,520
There have been, every year there's like four or five projects where I have to write like

924
00:47:49,520 --> 00:47:54,200
a C++ or a C library because something's not fast enough in Ruby, shocker.

925
00:47:54,200 --> 00:47:55,740
Native extensions, here we go.

926
00:47:55,740 --> 00:48:01,280
Native extensions are something that if Ruby didn't have, it would have a problem.

927
00:48:01,280 --> 00:48:06,200
But again, if I don't need to torture myself, I'm not sure that I want to.

928
00:48:06,200 --> 00:48:12,960
And an embedded environment is not the same as let's say Visual C++ 2019 in Microsoft

929
00:48:12,960 --> 00:48:18,080
Visual Studio or the newest version of Qt running the latest C++.

930
00:48:18,080 --> 00:48:20,680
I think it would be more challenging than that.

931
00:48:20,680 --> 00:48:24,840
And just the hype and frankly the community around Rust who seems to be very eager to

932
00:48:24,840 --> 00:48:29,720
get people to like try it might actually be a benefit to this.

933
00:48:29,720 --> 00:48:31,120
Yeah, that's a big point.

934
00:48:31,120 --> 00:48:35,040
I think one of the things they've gotten just really right is exactly that.

935
00:48:35,040 --> 00:48:37,160
They've got a great new user thing.

936
00:48:37,160 --> 00:48:39,920
Sure, there's still a lot of stuff happening behind the scenes.

937
00:48:39,920 --> 00:48:41,720
There's a lot of new developments.

938
00:48:41,720 --> 00:48:46,060
There's still the new version of their book in the works, all those things, but they clearly

939
00:48:46,060 --> 00:48:47,600
care about new users.

940
00:48:47,600 --> 00:48:52,640
And compared to the world of C++, like the library ecosystem, the tool chains involved,

941
00:48:52,640 --> 00:48:54,280
it's a whole other world, right?

942
00:48:54,280 --> 00:48:55,280
You get cargo.

943
00:48:55,280 --> 00:49:00,840
You get to actually just go with a nice way better than some of the more popular package

944
00:49:00,840 --> 00:49:04,560
managers for libraries and for programming languages.

945
00:49:04,560 --> 00:49:10,600
You get one that's kind of at the top of its form and you get all the nice modern typeful

946
00:49:10,600 --> 00:49:16,720
benefits and static analysis and the neat approach to borrowing and memory management

947
00:49:16,720 --> 00:49:17,720
that come with Rust.

948
00:49:17,720 --> 00:49:18,720
Yeah.

949
00:49:18,720 --> 00:49:20,320
And there's a selfish reason, right?

950
00:49:20,320 --> 00:49:26,760
I tend to work a lot in Ruby and more older C Sharp, stuff like that.

951
00:49:26,760 --> 00:49:29,880
It would be nice to actually try something that's actually the new hotness, to be one

952
00:49:29,880 --> 00:49:30,880
of the cool kids.

953
00:49:30,880 --> 00:49:31,880
Oh, yeah.

954
00:49:31,880 --> 00:49:32,880
Well...

955
00:49:32,880 --> 00:49:36,480
And then if I don't like it, lots of show content.

956
00:49:36,480 --> 00:49:38,720
I think either way, lots of show content.

957
00:49:38,720 --> 00:49:41,480
Now, I mean, yeah, you're right, a little bit less if it's just you kind of gushing

958
00:49:41,480 --> 00:49:47,120
about how great Rust was, but I think it'll be very interesting to see what you think

959
00:49:47,120 --> 00:49:48,120
of it.

960
00:49:48,120 --> 00:49:52,680
I'm also curious because I know that whole ecosystem is developing, so I'm sure the support

961
00:49:52,680 --> 00:49:58,760
for various boards and playing in the embedded space, that's developing too.

962
00:49:58,760 --> 00:50:02,080
That was one of the other big factors, looking because I also have to pick out the actual

963
00:50:02,080 --> 00:50:03,080
hardware for this.

964
00:50:03,080 --> 00:50:04,080
Right.

965
00:50:04,080 --> 00:50:05,080
Yeah.

966
00:50:05,080 --> 00:50:06,080
Obviously, we're looking at all the big ones, right?

967
00:50:06,080 --> 00:50:07,120
The TI has a bunch of boards.

968
00:50:07,120 --> 00:50:12,160
There's actually a company up in Gainesville, Florida that somehow this company in Florida

969
00:50:12,160 --> 00:50:18,880
is manufacturing all these boards, so like the System76 of weird circuit board companies.

970
00:50:18,880 --> 00:50:23,840
And all of them basically have documentation on how to get their board and they're...

971
00:50:23,840 --> 00:50:27,720
I would prefer like straight Ubuntu embedded or straight Debian embedded, but some of them

972
00:50:27,720 --> 00:50:31,720
have like their weird, you know, like kernel extensions or whatever.

973
00:50:31,720 --> 00:50:33,880
They all have support for Rust.

974
00:50:33,880 --> 00:50:38,120
Everyone I've talked to, if you mentioned Rust, it's a positive conversation.

975
00:50:38,120 --> 00:50:43,600
So if you do need engineering support from your hardware vendor, and from my, I don't,

976
00:50:43,600 --> 00:50:45,020
I mean, Wes, I would love to hear your experience.

977
00:50:45,020 --> 00:50:48,800
My experience is if you can get support from your hardware vendor, get it.

978
00:50:48,800 --> 00:50:49,800
Yeah.

979
00:50:49,800 --> 00:50:50,800
Right.

980
00:50:50,800 --> 00:50:53,160
Especially, I mean, if you're running a small shop and you don't already employ a bunch

981
00:50:53,160 --> 00:50:57,320
of experts in that space, yeah, you're probably going to want a few helping hands here and

982
00:50:57,320 --> 00:50:58,320
there.

983
00:50:58,320 --> 00:50:59,320
Yeah.

984
00:50:59,320 --> 00:51:00,680
Well, that is fascinating.

985
00:51:00,680 --> 00:51:03,240
I had no idea you were such a hipster.

986
00:51:03,240 --> 00:51:06,600
No, I'm just kidding, but we should make sure like that's going to be something we follow

987
00:51:06,600 --> 00:51:11,240
up on because I think that will be a very interesting story to watch.

988
00:51:11,240 --> 00:51:13,240
All right.

989
00:51:13,240 --> 00:51:14,720
Sounds good.

990
00:51:14,720 --> 00:51:17,040
Well, Wes, where can they find you?

991
00:51:17,040 --> 00:51:20,400
Oh, Mr. Dominic, they can find me all over the place.

992
00:51:20,400 --> 00:51:24,000
On the new TechStamp program, we've got a brand new co-host, Mr. Jim Salter.

993
00:51:24,000 --> 00:51:25,000
That's lots of fun.

994
00:51:25,000 --> 00:51:27,720
Our first episode is out, so go make sure you check that out.

995
00:51:27,720 --> 00:51:33,020
You can also find me on Linux Unplugged, all kinds of great content, and you'll find some

996
00:51:33,020 --> 00:51:36,280
more of that Mr. Chris Fisher over there, too.

997
00:51:36,280 --> 00:51:40,080
And you can find all the Jupiter Broadcasting shows, JupiterBroadcasting.com.

998
00:51:40,080 --> 00:51:44,560
And of course, if you want more Mr. Michael Dominic, the first place to look is coder.show

999
00:51:44,560 --> 00:51:49,080
where you can get this episode at 3.41 and the whole backlog.

1000
00:51:49,080 --> 00:51:51,920
But I know there's even more places, Mike.

1001
00:51:51,920 --> 00:51:52,920
Yeah.

1002
00:51:52,920 --> 00:51:58,160
You can go to Twitter or I'm in the subreddit about once or twice a week.

1003
00:51:58,160 --> 00:51:59,160
Excellent.

1004
00:51:59,160 --> 00:52:04,000
Well, thank you so much for joining me and thank you, dear audience, for joining us.

1005
00:52:04,000 --> 00:52:19,240
We'll see you next time.


This is KOTORadio, episode 346 for February 25th, 2019.
Hi everyone and welcome to KOTORadio, Jupiter Broadcasting's weekly talk show, taking a pragmatic look at the art and the business of software development and its related technologies.
My name is Chris, I'm here up in the beautiful, well, mostly beautiful Pacific Northwest, but that, that's not why we're joined here. It's not for me. It might be for Wes, actually.
Oh, maybe, I hope so.
That could be, but no, no, it's our host, Mr. Dominic. Hello, Mike!
Mesa not running Linux today.
The audience complained about Mike's mic, which is always hard for us to say, and so he shows up this week with a MacBook Air. This is what you do, you see?
But he owns it right at the top of the show, let's be clear.
Yeah, what did I say about letting the feedback get in our heads, though? I tried to give us all a pep talk on this.
You did, except I listened to the recording.
Yeah, yeah.
And it sounded like I was live from a small airport.
Yeah, it's interesting, there's audio differences.
You know what, though, is you need some tactical cushioning, is what you need.
Like, some curtains on that wall behind your monitor or something, you need some tactical sound insulation.
We need to go storm his fortress in Florida.
Just show up with a whole bunch of foam.
I kind of just feel like that's what has to happen.
I kind of think that's actually true.
Would you come over and do like a studio makeover.
Bring like a boom arm.
If I vlogged, that would actually make for a cool vlog.
We could call it pimp my room.
Yeah, pimp your studio.
Yeah, that'd be great.
That's right, oh god, I forgot about that old show.
I used to watch that show.
Well, it's nice to be here with you guys.
I'm going to be traveling again for the next couple of weeks.
So, I don't know if I'll, I'm pretty sure I won't be on the show next week.
And I'm not so sure about the show after that either.
So, it's been fun hanging out with the two of you.
It's been nice, and thanks for having me back on the show.
It's been really nice.
Does that mean we could be HomePod free for two weeks?
You bastards, you keep bringing up the HomePod, not me.
But let's just talk about it for a second.
I suggest you get one started.
That's the trick to make Mike's audio sound even better, right?
If you play it on a HomePod.
That's true.
He does sound pretty good on the old HomePod.
Hey, I'm not here to sell HomePods.
But we are here to talk about many things.
We've all brought something to the show, which is kind of fun.
So, we each have something to share with the class.
And mine was of the most minimal effort as possible.
Actually, this isn't my chief contribution.
But I did want to bring something I thought would fire Mike up.
We were off air and on air recently talking about the cult of Swift.
That has been really built up.
Sort of as it's a mixture of the cult around Apple.
And it's a mixture of, well, Swift is really appealing to language nerds.
Would you agree with that?
Oh, yeah.
I mean, there's lots of new shiniest stuff in there.
Well, and a lot of lessons learned are reflected in Swift.
Yeah, exactly.
It's a modern language.
And so it has, I think, these things, and the fact that it's open source,
have come together to create a bit of a Swift monster.
Which, Mike, you have started to complain about incessantly.
Started?
It's been five years.
I'm just saying.
You were ahead of the curve on this one.
However, this is where I thought it took a little bit of a change of conversation.
Two rather noted commentators of this space, Marco Armit and John Gruber,
John Gruber of Daring Fireball and Marco Armit of Overcast and other things,
were tweeting, and I just wanted to just kind of go through the thread really quick.
They say, add up all the time you've, this is Marco tweeting,
and this is interesting when you think about people that are sticking with Objective-C
or whatever their preferred language is.
You could take the situation and apply it to you.
Add up all the time you spent learning Swift from scratch,
accommodating its strictness, fighting its buggy tools,
migrating your code through language changes,
and relearning APIs and conventions as they've changed over the last five years.
I've spent zero time doing that.
He says, I like to jump in when it's so old-born and slow-moving
that nobody bothers to tell people to move to Swift
because they're all busy geeking out over a new language.
Which sounds a lot like Mike's outlook on it.
But then Gruber falls in, and this is where I think he really touches on something
that Mike's been talking about for a while.
Noted Apple commentator John Gruber says,
as an outsider who can program but has never seriously used either language,
one thing that's obvious to me is that Swift has a vocal group of zealots,
whereas Objective-C advocates are invariably very practical-minded.
And here we are taking a pragmatic look at the art and software.
Supposedly.
Yeah.
Marco chimes in that maybe because Objective-C was never a cool language
by language nerds, it's always been an odd, obscure kind of charming language,
weirdly full of brackets that you had to use for an Apple platform.
Bracket life.
Swift appeals far more to language nerds,
bringing a larger degree of zealotry,
which lines up with just about every other area of tech we see.
So, yeah, you know, I'm going to let Wes go first.
I have so many hot takes on this, Chris.
They're on fire.
Hot take. I like that.
We've got hot takes now.
It does seem like one of those areas where we see a certain purity aspect.
Like there are things, there are many ways that Swift is a safer or better
or perhaps better designed for more robust language
than a lot of comparisons, particularly Objective-C.
But that doesn't mean that the developer story is finished, right?
A lot of the complaints that I see here are about some of the tooling
and other changes or breaking API changes, etc.
And those are all real pain.
So I think you get the certain class of people that are like,
in theory, this is so much better.
It's kind of the same for, you know, like certain types of Haskell
or other really obscure fancy type system type languages
where, yes, there are a lot of benefits,
but that doesn't mean it's the best choice to go write the app
that you need to ship two weeks down the road.
Mm-hmm. Mm-hmm. That's a very fair point.
So I'm going to say something that's going to make Wes puke on his keyboard.
Oh, no, it's the laptop, Wes. It's the laptop.
Swift and Linux have something in common.
Blah! Let's hear it.
Well done.
So at least as far as the Apple developer community is concerned,
they're both new, right?
And I think I tried to make this point in my Sleep Deprived
against the Geneva Convention episode last week.
But basically, you know, Marco can ignore Swift.
First of all, let's just table stakes.
I hate Swift, right?
I hate Swift developers.
I think they're bad people, and I want them to go away.
So we've got that settled.
Okay, good.
But I've had to learn Swift because when you are a consultant,
you cannot ever allow someone to just say,
oh, well, I see that proposal they gave you,
but they're using the, you know, pseudo-deprecated language.
And since, you know, people lie, thank you, Tech Mahindra,
they'll say they're using the deprecated language.
And I'm just teasing certain offshore shops because I don't like them.
The joke aside, it is the case that someone in Marco's position,
being a product developer, someone who builds his own apps
and doesn't sell consulting services, has a lot more freedom.
I actually agree with everything he says,
but it's just not tenable if you're a consultant
and you're operating this competitive market,
especially when you need to justify, you know,
$120 to $150 an hour against some,
and I'm just going to pick a country out of my head, India,
Indian developers, you know, $20 or $15 to $20 an hour.
Right.
You can't allow them to have that,
he's using old deprecated technology.
Right, because they come in and say, no, it's a whole Swift-based project,
it's nice and it's sexy and it's...
Right, you'll have to throw his code out in a year.
I've heard it all.
Oh, yeah, yeah, yeah, yeah.
Now, the positive way I tried to frame this last week,
because I didn't want to, again, I didn't want to put my MAGA hat on again,
was it is just the case that there are a lot of people who would love to be Marco
and would love to be, like, famous in the iOS dev community,
and they saw Swift as that opportunity.
So, whenever someone tells you to adopt a technology,
they have a reason to tell you that, right?
No one's telling you the truth other than Chris.
Chris's interest is to keep his hair as amazing as possible
and to buy more HomePods.
I've got to be honest, it's turning gray, it's starting to turn gray.
No, you could be a silver fox, that's okay.
Thank you.
But, like, other than Chris and maybe Wes, because I think he's a true Linux triad,
you can't trust anybody, you can't trust me at all.
I didn't give you that.
I don't like Swift because it created a disadvantage for me.
I also don't like Swift because I think it's a bad implementation of ideas
that are very good in languages such as Haskell and, ding, ding, ding, Rust.
But I will write Swift, I have written tens of thousands of lines of Swift,
because, unfortunately, the community is stupid
and they decided to adopt a language that is in every way inferior to Objective-C.
Wow.
Go ahead, Wes.
Oh, strong words.
I like that he throws that in your court too, like, now try to defend that.
Don't make me go install Swift again right here on Linux.
Actually, I think I still have it installed.
It actually works better on Linux.
You know, this is the irony.
You know where Swift falls apart?
The minute you import Cocoa Touch, as soon as you have to use Cocoa,
you realize, wow, this is just like really shitty Objective-C.
Is that a limitation of the underlying APIs,
like APIs that are better suited for Objective-C that haven't been ported?
Yeah.
It's called a limitation.
I could see an alternate universe where they held Swift back for a few more years
and re-implement, like Marzipan, right?
They could have done Marzipan where it was totally oriented towards the Swift way of thinking.
But instead, what they did was they basically made Swift wrappers to all the Objective-C,
particularly UI calls.
And the Cocoa UI is, you got to remember, we're going back to Next here.
So we're talking 90s, late 80s, you know, pure 00.
Remember, they used to have a Java interface.
Am I the only person who remembers this?
So it's really just not a good match.
That's fair.
Gosh.
You know what I was going to mention?
Yeah, it really is in the perspective of like Objective-C and other things early days.
Like just today, I was reading a post about a developer.
His name is Comp Nerd, but I don't think that's his real name, obviously.
He is porting Swift to Windows.
How about that one?
Swift on Windows.
Yeah, I guess I mean to stick.
Why not?
Yes, of course.
Why can't Beelzebub and Satan get married?
So I thought you'd like that.
I thought you'd like that.
He says, I finally, he writes on the Swift form.
I finally managed to get the compiler, the support libraries, the runtime, the standard library,
libdispatch, and all of that now working.
Foundations to build on and run on Windows are in place.
This is still dependent on a couple of patches that will no doubt need to be cleaned up before they are ready to be merged.
OK, no, don't do this.
No, no, no, no, no.
It's happening.
No.
OK, if you want to develop for Windows and guys, this is confidential, so I hope nobody.
You know, we don't have to tell anybody if you don't want to.
Yeah, there's this language.
It's called C sharp.
It's great.
Use that.
It's even it's even it's even sort of not local.
I don't know.
What do you call that?
Because it's like it's from the it's from the same place the operating system is.
But I hear there's some weird relationship between Windows and C sharp.
What do I know?
Oh, yeah.
It looks like it's getting close, though.
He says there's a number of patches in flight across the board for the compiler foundation tests, the build system.
But it's really a matter of polishing these patches up and getting them merged in.
And then we should be pretty dang close.
He's got a he's got a screenshot of PLU till running on Windows right here.
That's terrifying.
It is.
That's kind of weird.
I mean, you could be in a world where you, you know, use Swift to target every darn platform.
Well, isn't the value of Swift on Windows similar to the value of Swift on Linux?
Am I wrong there?
I mean, it's just a different use case.
Same argument.
When I read Windows, I read Windows client operating system.
Right.
Swift on Linux.
Ironically, Swift is not the way it's structured.
Not a terrible language for like pure APIs.
Like, I think Vapor actually makes sense.
Right.
Which is for those who don't know, Vapor is a Swift.
I don't want to call it Ruby on Rails, but it's like a Web API development framework.
Right.
But before we leave this and get on to even more terrible things.
I mean, come on, guys, am I crazy?
Don't actually let me let me narrow that question on this one topic.
Am I crazy?
You know, here's where I come down on it.
First of all, I really appreciate your honesty about like you can't there's like you can't necessarily trust the people that are selling you the project.
I think that's a very that's a very honest perspective.
It's insight you are giving to people that are hiring contractors to do this work in the future.
So long as they don't use it against me, I think that was nice.
I think I think what what gets me is real programs that sell can be built like a house of cards as long as they execute the function the customer expects.
And we we end up signaling what what systems we use, like desktop operating system or what what languages we use as a way to belong to a tribe.
Like we we signal these out there.
My favorite my favorite language would be the one that I choose to use that does the job that thank you very much.
I don't need to tell you about.
So it is objective.
Yeah, no, I'm just my point is it's like I like James Thompson tweeted I pick the team of not sharing a preference so I don't get dragged into a maelstrom of bullshit like like these are all these are all things to a means.
And yeah, it's fine.
It's fine to like the tools that you use because they work well.
But yeah, that's what it is.
And the customer, as long as the application runs and does what the customer expects, like good to go.
Well, all right, I'm going to devil's advocate this a bit.
While I think in the past, the argument that I made that I said that, like, you know, generic offshore consulting company makes against me for wanting to use Objective C, I think it's unfair.
We are getting pretty long in the tooth now.
And if something runs perfectly and works today, it seems pretty clear that Apple is going to drop the hammer on Objective C fairly soon.
In fact, all this talk about our Max gets me a little shaky in the boots.
Would you really either of you be OK, Green?
Like if it was your decision, like let's take the VP over here.
Chris, they want to hire somebody to build a Linux Academy iPad app.
I don't even know if such a thing exists, to be honest with you.
And you were in charge of vetting the proposal.
Would you really greenlight an Objective C solution?
I would. You would.
Yeah, I would. You wouldn't be worried about having to be refactored.
I'm not really dragged around by market trends when it comes to that kind of stuff.
What I maybe prefer a swift, you know, a more something.
Here's what I'll tell you. Here's what would make the decision for me is how how much does it take advantage of the iOS platform?
Like how good does it look on the iPad? Does it take advantage of share share sheets and things like that?
Does it properly integrate itself?
Whichever one met that would be the ultimate decider.
But if somebody came at me and said the whole thing's built in Swift, it's really great.
It's using iCloud to store their progress so that way they can move between devices.
It's using all native APIs.
And somebody came to me with an Objective C one that wouldn't make the final decision for me.
But I would be more inclined to go with the one that felt like it was based on more modern technology.
So I may just think it may play a factor in the final decision if I had two competing and one was based on Swift.
That would be kind of the tiebreaker.
It's not the be all and you wouldn't look to that as your first thing.
Right. You know, it's so funny, though, because right when Swift came out within like six months, it was a nonstarter going in pitching Objective C.
And I think maybe because you guys are technical, you see that it's like not really that important.
Right. That's right between. But that's not necessarily who's making the purchasing decisions.
When you're in business or a client.
Yeah. Oh, it's a it's a fun world we live in.
Like, I mean, not just a just as an analogy.
We don't need to talk about foldable phones, but I feel like foldable phones are sort of an example of the market leading the consumer.
They think they know what the consumer wants.
It's the sort of the same thing where people that are not necessarily technical, but they think they know what they need to want.
They think they know they need to want Swift. It needs to be based on this.
There's certain things which you and I have talked about, Mike, in like several contexts as a challenge is that there's some companies that can just claim they're using something new and hip.
And a lot of time we've talked about it more like the Web development context.
But it's the same thing on mobile.
Wait, was that node you just mentioned? Yeah, I'm pretty sure we need that.
IOS Linux Academy have to be using block chain somehow.
Of course, every screen is rendered on the block.
Of course. Oh, my gosh, you got to work in the block chain.
You know, something else we've talked about.
That's kind of like a topic that has evolved over the years in different contexts.
Another one that has been an ongoing thing since the show really started.
It was a it was a hot thing when the show started with the patent wars, patent wars, Samsung versus Apple and all that stuff.
Well, now it's like now that we're like many years into this, it's apparently companies like Apple are just done with it.
Apple plans to close its stores in the eastern district of Texas to fight against patent trolls.
They're just going to close that. They're just going to. You know what?
We're done. That way, we don't have jurisdiction in here. You know, I mean, you don't have jurisdiction over us.
But like, I look at the jobs like the jobs. That's a bummer.
That's the great part. I love it. You're fired. Go write your congressman.
Yeah, I suppose that's a little bit of pressure. That is. I wonder if that'll work.
It is funny, though, like these are seem like pretty perverse economic incentives that we end up generating by not not controlling for this at all.
Yeah, I think this is actually the correct way to solve the problem.
You do. I'm going to side with the big evil corporation. What about the jerbs?
I don't care. Well, collateral damage, right? Like there are representatives.
Remember, judges are elected. So people of eastern Texas, if you would like to keep your jobs, you might want to elect more skeptical judges on patent law, huh?
Oh, hmm. There you go. Yeah, actually, I think it's you got to you got to you got to weed this corruption out.
Although judges are only elected someplace. I don't know if it's not always universal. Some are appointed.
Well, if they're appointed, you just vote the guys out who appoint them. Either way, that's you get the vote.
But is that a large enough like it does the Apple store? Is that big? Is it that big?
I know plenty of consumers who don't show up on a radar like that has to make a blip on some officials radar, right?
That how long people like they'll drive a little farther and then in six months or by the next election, it'll be.
Yeah, actually, they're opening one in Dallas. However, Texas is huge. So that's many, many hours away, probably.
But yeah, I feel like you have to play a little hardball. Amazon does this, too, to their advantage.
Well, I mean, that part's reasonable just because I'm sure their legal departments are kept constantly busy with all of these lawsuits.
Yeah, I see. I don't know. Maybe this is a shocker first for Kota Radio and 346 episodes.
Maybe I'm an extremist here or extremist. Sure. You know, I sort of want the maximum level of suffering to make the patent law change.
Right. I want like people going on like welfare and not that I don't sympathize with people.
I am all for I was on welfare. I'm all for poor people.
I just like want these judges and politicians to wake up and stop taking the money from the legal lobby.
I have been sued for this software patent infringement. I did not like it. Yeah. Right.
Like, yeah, no, it was it's a shit way to hold down because really what happens, it's powerful companies use it to sort of silence or smell.
No, it's not even powerful companies. Right. Like in my case, it was lawyers who bought up patents of bankrupt companies.
The patent I allegedly violated was highlighting text, different colors. My V.S. code. That's actually what I meant.
I mean, it's a good clarification. My definition of powerful is a company that can afford afford a few lawyers versus.
Well, they are lawyers, so it's just free. Right. Right. Versus versus like, you know, a small business that just simply can't.
You just have to fold. So, yeah, I do. And also, I think I'm going to say I think here I'll go on the record.
I'm going to say it. I'm pro poor people, too. I am as well. I'm pro poor. I mean, I don't want to.
I heard Alan jude isn't that with this BST guys are very. No, man. Yes.
If you're feeling like it's time for a change, Linux Academy is hiring a full stack Ruby on Rails developer out there.
Audience member, I'm not talking to you, Mike. I mean, I guess I get home. They are.
Save me. Save me. They are looking they are looking to hire developer design and build and maintain efficient, reliable,
reusable code. And there's a lot of work to be done. And it is actually a remote position.
So Linux Academy is hiring for a full stack Ruby on Rails developer.
We have a link in the show notes or you can go to Linux Academy dot com slash careers and click your way through there.
There's a few other jobs open as well. They're looking really obviously surprise, surprise.
Somebody who has experience with Ruby, CSS, HTML, those kinds of things. It's all listed in the job description.
Standard stuff, though. Yeah. And there would be sometimes you would come down to the office for like company get togethers
or like your onboarding process, but it actually would be a remote position as well. So something to check out if you're you're in there.
And then we would see you at our get togethers. That's true. Don't don't tempt me, Frodo.
You can hang out with us at the get togethers, the company get togethers. But wait, can I write the Rails app in Swift?
So how did we get on the topic of serverless? I know this is something that three of us were talking about off air.
Because everyone's talking about it, Chris. I know. It was you, Mike. It was you.
You had a client that came to you and said, we want you to do this, but we want you to do it all serverless, huh?
Isn't that what happened? So client's a strong word in this case. Potential? Sales lead?
I had a random dude at a pub. All right. So in theory, I thought this is way more official.
It could be. So in theory, this guy feels that it is completely possible and, in fact, desirable, which I agree with the first.
And this is where we're going to lean on Wes a lot for the show, the second. Wes, I just keep throwing crap at you.
That does seem to be the style now. That's my theme. Yes, it is.
To write an entire large, what would be like, in my case, a Rails app, or if I'm really, really depressed, a.NET app in a serverless architecture.
And I feel like we just need to define terms a little before I throw it to Wes and make him cover up for all my failures here.
Serverless. I'm going to give a definition. Actually, you know what? We could argue about the definition first because I would call serverless.
I don't believe I think that actually means nothing. I'm going to be a curmudgeon. There are lots of servers for serverless systems.
In fact, they run on servers. For instance, if they're on Azure, they run on Windows.
I can't remember the current version or sometimes Ubuntu. Right on AWS, they run on some form of Linux, whatever that weird Amazon distribution is.
And if you're doing Java, they even run on their own Amazon JVM because Amazon doesn't want to get sued by Oracle.
So. I don't. Maybe we should just back up.
What does serverless actually mean to you guys? That's a really good place to see.
I mean, that's you. And then, of course, what does it mean to the bloke in the pub?
That's true, too. So I'll give you my rough, honest take of serverless and you guys tell me how off the mark I am.
OK, so my my concept of what serverless is, is. Well, it's everything.
It's not actually serverless, but you are giving a remote service like Lambda, for example, from Amazon jobs to execute and information to send back to an application that you're running.
And so instead of you building up a server that does like the math or the processing or or pulls down a thousand bit bit bit bit maps and stitching them all together and then delivering that as a result.
Instead of you building that application stack, you you give a job off to Lambda.
Lambda does the work and delivers you the result back. So there's still servers involved.
It's just they're hosting the servers and you have an application running somewhere that's sending information off and receiving information back.
How far off am I? What do you think? I mean, by and large, at the at the high level, that's kind of it.
Yeah. Yeah. I mean, it is horrible. I tend to think of the stuff that people seem to be most excited by is is the part you hit on where you're not running the server.
You're not setting it up right. So you have to you have to write the application. So you have to still have some application has to run somewhere, though.
Right. But it does run on servers. You just don't have to care about it.
So it's really about like, what do you care about? What is your problem versus what is your platform and problem?
And you could, in theory, have that application run on another Amazon service that then talks to Lambda, right?
Right. So Lambo Lambda executes your code, basically. So you you set up your environment, configure it all, either ship the code or bundle an artifact or use their CI system to do that, whatever.
And then you set up what events and what inputs you want to trigger and then you have the options of where you want to go.
So it's a little you build these little step by step chains, right? So you have some sort of input.
You have an API gateway maybe or you get you get information in, send information out.
So on that part, I think you're totally right. And it's just can I do less and only have to write the stuff that's unique to me?
I don't want to care about like making sure system D logging is there all the time. And where does that go?
And how do I instrument that into into the cloud metrics? I don't know. I mean, I do know.
But but you might not and you might not want to care about doing that.
Right. And so so I guess so what you're saying is is serverless is you write the specific bits that are unique to you and sort of outsource all of the general.
Yeah, yeah, exactly. And I mean, there's there's obviously like gradations.
I think people think of Lambda is like the jumped out example, but all the orchestrating stuff, right?
It's just like I want to think about less. I want this to auto scale.
So it's a kind of a continuum of what exactly you're doing and how much you do. Right.
So if you have a fully managed Kubernetes cluster, there are there are some aspects of serverless.
Now, a lot of time you have longer running stuff. So that's that's a separate topic, too, is a lot of times in these you have constrained execution environments.
So that even more so you don't even have like local temporary state often.
You have to be totally stateless, at least in your Lambda design.
OK, that would make sense to go.
So I can answer for the I want to say bloke because I'd have to have a quokkani accent.
See, that was terrible. See, that's why I don't. Wow. That went. Oh, boy. Yeah, that went very Irish very fast.
This is a direct quote. I don't want to effing deal with SSH.
This is oh, I should have mentioned he's an access developer. Oh, do we actually call them do we actually call them developers?
Are they more like access pro users? Listen, I have learned to lighten up in the modern age.
And whatever somebody identifies as is what I call them now.
All right. Well, then I'm a hypercard developer. And if you need if you need something developed in 1984 hypercard, I'm your man.
Actually, actually, actually, I'm a next step developer. Let me get my cube and let's do this.
No, all kidding aside. And he's a listener. So I should. You know, he actually gave permission to talk about this.
Great. It's it's an interest. And I told him I'd poke fun at him for access. It's.
I actually thought he was nuts and West sent me straight at our slack.
So listen to see Wes. This is an integral part of stopping me from telling people they're nuts.
And the key part of this was, could you go all serverless for a new application that you're building?
So you got hired to build the app. Well, we're not there yet.
Let's just say theoretically. So here let's let me I could set the scene for you. Right. Cicely, 1834.
So he's he is the lone I.T. admin slash developer for a medium ish small business in this county of Hillsborough here.
OK, got it. They are running their entire business on access. Never seen that before.
No, but access is the source of truth. OK. No, there there are definitely some problems.
He's had quite a few three a.m. phone calls because they're they're in the agriculture industry and product needs to be shipped.
Right. And shipping happens at night generally for reasons, I guess, of traffic or whatever.
So it would be good for him if access didn't go down all the time.
I don't know what to say. Right. Like that's that's that is the problem he wants to solve.
His secondary problem is that he does not he is not permitted to hire a full time either dev or dev ops or admin, whatever Linux guy would be the term he would use, I imagine.
So he needs to do this himself in terms of maintenance. He has zero Linux experience.
When I say zero, I mean, he he says he has never written a bash script in his life of any kind.
So I agree that maintaining the let's just say, a suzer, Ubuntu server is a it's just not a good idea for him in a production environment.
Right. OK. Yeah. So he's looking for the ultimate lowest maintenance possible.
He needs a turnkey solution. Right. So, I mean, given that we're coming from access.
I actually think Wes was right, that serverless is not as crazy as I told him it was.
It's going to cost a fortune, though, because I know what I pay for lambda and for Azure functions, but maybe it's worth it.
I guess this is where like the cost benefit of how much is it worth to not deal with DevOps?
Right. And you have to assume you're a person who doesn't know bash. You don't know how to do Docker.
You you know, you don't know Kappa Scrono, one of those other DevOps Jenkins tools.
Is it worth it and how can you maybe design this is where we throw it back to Wes putting him on the spot again.
How would you design a serverless system to minimize your cost? So I think that's the big disadvantage of serverless at this juncture.
Well, I think the other thing to keep in mind, too, is there's still going to be some call it whatever you want, but some some ops involved.
Right. So how how familiar is the is the client with the platform?
Because you might not have to go into a server, but you're certainly going to have to go, you know, use use the APIs of your cloud provider, maybe.
Or at least use their dashboard to go investigate stuff because stuff will certainly go wrong or queues get backed up or, you know, whatever.
So thinking about that and what is the bare minimum? And if you're not doing a lot, I mean, you can you can get you can get lambdas to be reasonably simple and relatively cheap, depending on how much how much RAM you need in particular.
But distributed systems are just oftentimes more complex than monoliths.
Right. So if you have like one or two, I mean, depends on the numbers. Those are just estimates. But if you have a couple of them just doing some simple stuff and it's easy to in your mind or like on a whiteboard and in five seconds, you could draw out the flow of information on what's happening.
That's probably fine. You can reasonably understand that. But if you're trying to go serverless because you're scared of servers and you end up with this giant web that's super hard to to actually orchestrate and understand and get observability information out of.
Well, maybe that's not worth it. Sounds like a nightmare. That would be a nightmare scenario for somebody.
Right. And so my concern immediately off the bat was if you're serverless, that means you're effectively in some weird microservices world.
And I'm going to use Azure functions as my baseline for pricing here because it's just too hard to keep switching between them.
You pay by data and by processing. Right. So if function A has to call function B, it calls function C that calls a database, then calls function D, which calls a different database or perhaps the same database, you're paying for the database.
You're paying for the bandwidth. You're paying for the processing. And I think you pay something on the database. I don't think storage plus throughput.
Mm hmm. Sure. That that gets I mean, it starts off very cheap in a dev environment, but that can get very.
Very pricey versus spinning up a D.O. droplet and just like Docker deploying a rails app, for example. Yeah, yeah, yeah.
So the other thing, too, that you have to you have to figure is it's getting easier than ever to to manage something like that because they're not only is there one click deployments, which we've talked about before in our in our past ads,
but there is systems to manage those machines. You don't even really have to get on the computer. I think you're hitting something pretty pretty good.
There is probably something in the in the middle here is the right answer where like it's probably still a good idea to try to minimize state and keep things simple.
But if you can just have a couple of servers that you run enough to handle what you think you're scaling is because that's one thing people like like about services that you also can scale it really fast.
Right. If you if your cloud provider supports it, then it just scales with the number of requests or whatever. But that's not most people's problem, at least not right away.
So if you can get away with a couple servers that are running, you got some nice whatever, you know, even if it's just an image that you made that you like.
But if you can replace it easily, manage what's going on, use whatever they're built in monitoring, maybe.
Yeah, you could really see cost and complexity getting away from you if if you don't do this right. And there are options out there.
The problem is that they're not turnkey that is close to turnkey like digital ocean is about as easy as it's going to as it's going to get.
And then if you knew to say deploy cockpit on top of an Ubuntu or Fedora droplet, you'd be able to deploy Docker and everything through services, whatever.
You'd never SSH into the box. It has a console. So, yeah, right.
But it's just a step. It's a step removed from turnkey. It requires some setup.
So. Maybe. I mean, I don't know about that. I mean, I SSH into boxes like five or six times a day.
Yeah, I mean, you really have work. I could see that if you're doing pure system administration, cockpit is a really nice graphical interface put together by Red Hat employees to manage Docker and packages and user accounts and partitions and, you know, all the all the standard stuff you'd want to manage in a server.
We use it and not not extensively. The nice thing about it is it actually lets you also go in through SSH.
Yeah, right. Yeah, you're not you're not trapped where you have to do everything through its system. It just automatically update with whatever.
You can go edit a system service. You're good. I'll just pick it up. Yeah, it's nice like that.
And it's built by the folks at Red Hat and they've built it in a cross distribution way. In fact, it works great.
I use it on Fedora primarily, but it works quite well on Ubuntu.
So my only complaint is it's kind of annoying to reverse proxy because it has some particulars about how it likes its path to be set up and it takes the obvious word that you would use as its name.
But otherwise, it's been working really well. But I mean, I grant you I don't I don't think there's like a digital ocean droplet you can deploy with it preinstalled, which would be fantastic.
But I don't think it's there. It's not it's not AWS Lambda easy. Right.
Well, the other part, too, is like coming from a particular you'd own the whole stack. You would. It is funny, too.
I don't think it's necessarily the way most people should do design or think about building systems.
But I feel like we often underestimate you can get a surprising amount of reliability from from like a couple of servers, you know, if they if they if you don't ever touch them and they just sit there doing their job, especially the way you can build them now.
We have a system called Orbital that really anything that matters is in a container. And then we have a shared storage that we've purchased separately from the machine that's attached.
And a couple of times we've just blown away the host operating system and it's been fine.
And that makes it it makes it a lot safer and it makes it like immutable isn't the right word, but it makes it close to it.
And that's that's amazing compared to where I was at in I.T. 10 years ago, 15 years ago. It's it makes it much easier for people to get in.
But yeah, he'd probably have to go take a few Linux Academy courses or something to figure it all out. That's the answer.
Yeah. Well, I mean, it's not a turnkey thing. I'm probably either way, though, right?
Like either you're reading a whole bunch about Lambda and then you have to figure out like I should not sell my Lambda application and get it running.
That can be. So the thing is, is these cloud services are just their own form of I.T. complexity. You know, you can become an operating system expert or you can become like a cloud service.
The hope is that it's enough of an abstraction boost that it's like worth your time. You get more leverage. Well, it seems to be.
So I'm going to throw a monkey wrench into this. I'm surprised neither of you jumped on the this is yet again another Coder radio.
We can't call this one a success story just yet. Jim, we'll get there. Where access is running a business.
Yeah, you know, I mean, it's it's surprisingly pretty flexible. Yeah, I've seen it.
Yeah, but I think those that gets I've heard too many have too many phone calls about. Yeah, we've been running on askers for 10 years.
And yeah, between excess and Excel, you can get some you make some real dark dark arts.
No, it definitely works for a while. I'm not trying to knock it. It's just I've seen I've seen core financial institution applications that manage the entire branch.
Like every every check that somebody cashes, every receipt that gets printed, all run on access.
That explains so much about my bank. I've been I've been startled where I've seen access in production.
So I have built up a very strong reaction to it. It's very he's shaking right now.
It is. It's rough. And then trying to migrate all that to SQL. And it was just so many times.
I think I may have worked in the worst time of I.T. I may have because I started when we were transitioning from DOS.
And I ended I ended right before orchestration management tools became a really popular thing.
Like there were a few things like I got I got to believe Chef existed when I was around.
But there wasn't like I don't think Ansible was a thing yet. Like there just wasn't a lot of tools like that.
The culture around it hadn't really developed. Definitely. It was it was just a lot of roll your own solutions.
And now you're stuck managing it all and supporting it all, which is a lot of what's still out in production to this day.
Because, you know, people invest a lot of money back then. It's probably working OK enough enough not to change.
I feel like I could do a lot more scale now. Like I could manage a lot more systems now than I used to manage.
Like the fact that like at one point I was like responsible for like a few hundred three four hundred servers seemed like an unbelievable amount back then.
But like they were physical servers. They were actual physical boxes in a rack.
Right. And now they would be containers and VMS. And we were getting we definitely get into VMware.
Yes, I and shared storage. But that was all still very new. It was very early versions of VMware.
And yeah, I know it's all really different now. And so when you look at it wouldn't when you know the bloke in the pub is looking at it.
I can appreciate wanting to avoid that legacy complexity because it just brought with it so much investment, so much time, so much hardware.
But things have changed. And I know it sounds like it's not a solution, but throwing a system it's on Linode or if it's on DigitalOcean or if it's on AWS.
But maybe just throwing it together yourself and owning that stack a little bit like Wes was talking about and then maybe using something like cockpit or whatever to manage it.
It just seems like you'd have a lot more long term control over your costs.
You'd have more control over the technology stack and you'd have more flexibility.
You'd have a lot more flexibility on the types of applications you could run.
That's, I think, a huge part of it. You're really going to lock yourself in to a particular vendor and a particular type of application architecture.
And maybe that's OK. And if it works well for you, then that's great.
I suppose it depends, too, on how well can you get access to tie in with whatever other systems that you actually want to tie it into.
Serverless.
It is funny to think about what you're talking about, though.
Remember when you had to reinstall and you're just hoping the machine reboots and comes back up and actually picks everything up?
Or maybe it has a nice enough like IPMI system where you can do it properly.
Either an IPMI system or maybe finally your company had enough money where you could get like a nice IPK VM.
Yeah.
Or they could do like that fake ISO stuff. Those are still out there.
Totally.
I remember the day I could take an ISO image on my system as long as I had the right Java runtime version and the right web browser.
Which is always old.
Yeah, it was. And it was not the same version that the other company app needed, which was a different version of Java runtime, absolutely.
Not to mention for a while Microsoft had their own Java runtime, which had another set of compatibility issues.
J-sharp.
But you could connect an ISO image as a virtual CD and you could over the Internet slowly reinstall the box.
But these days you want a new one? Great. You want to blow one away? Fine.
These days you deploy the entire OS image. The OS image is done like I would like an Ubuntu machine.
And then you have an entire Ubuntu system ready to go. You don't have to install Ubuntu. It's a totally different thing.
It feels like it's serverless now really. It really does feel like we're already in the land of serverless.
And as somebody who deployed a lot of machines at the metal level, I wonder like how abstracted are we going to get?
And serverless is yet another level of that abstraction. And we're getting pretty –
We're climbing on up.
We really are. We really are. I don't know. But you know, I guess that's just the way it goes.
It seems like that's the way technology goes, right? It's not necessarily always a bad thing.
It makes it more accessible. It makes Mike's job harder.
And like you said, you would feel more comfortable being able to manage a larger cluster of machines because we've figured some things out.
All right. Well, before we go, gentlemen, a couple of orders of business. So, help the guys out. Send them some feedback next week.
So, that way they have more stuff to cover since I won't be here coding.
Yeah. Maybe you're running a totally serverless application and you want to tell us how great it is.
Or you think it's going to bring us to the end times. Coder.show slash contact. Let us know. We'd like to hear your feedback on that.
We want more feedback into the show. Get some more emails into there.
Also, I was going to mention, Wes and I are going to be at Scale 17X, which is just around the corner.
Just around the corner. It is March 7th through the 10th. And I think, is that right?
Yeah.
Let me double check that because that's from memory. Yeah, March 7th through the 10th at the Pasadena Convention Center.
Wes Payne and I will be there. We'll also be there with Elle. And we're doing a meetup.
We're doing a meetup Saturday night.
Oh, that's going to be fun.
I think we're at 20-ish right now.
Nice.
So if you're thinking about hanging out with us for dinner when you go to Scale, meetup.com slash Jupiter Broadcasting.
Go there. Join the meetup. So that way we can call the restaurant and let them know because we've just upped it to 20.
I think we may up it to 30 if we have some people sign up. So that would be pretty good.
Give us your feedback in person always. That's always good.
Yeah.
All right. Well, Mr. Dominic, where should people go get more Mike in their life throughout the week?
I think we need a slogan there. More Mike in their life. No? You got nothing?
Maximum Mike.
Make it magic with Mike.
That's actually not bad. That's not bad. What about you, Mr. Payne? Where can they get more you?
At Wes Payne.
Why don't you mention the TechSnap program?
Oh, yeah. TechSnap.Systems. Stay tuned for a new episode coming later this week.
Yeah. And if you're into home automation and some of the different open source options around that, check out this week's episode of Linux Unplugged.
Wes is doing a breakdown of a couple of different options.
We'll talk about them where we might use some of that in the studio and things like that.
It's really cool what you can do. It's a fascinating topic. Lots of potential there.
So that's LinuxUnplugged.com. Check out this week's episode.
The guys will be live next Monday. JupiterBroadcasting.com slash calendar.
For that information, you can watch it live at JBLive.TV and Coder.Show for all of our links.
Thanks for joining us. See you next week.

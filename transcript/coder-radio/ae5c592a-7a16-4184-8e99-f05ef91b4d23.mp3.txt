This is KOTORadio, episode 322, for August 13th, 2018.
Hello everybody, and welcome to KOTORadio, Jupiter Broadcasting's weekly talk show,
taking a pragmatic look at the art and business of software development and its related technologies.
This episode is brought to you by our two great sponsors, Linux Academy and Digital
Ocean.
I'll tell you more about those great sponsors as this year's show goes on.
Why me?
Thanks for asking.
My name is Chris, but more importantly is that podcasting ninja, that wizard of the
cute, that man in Florida, it's our host, Mr. Dominic.
Hello Mike.
Hello Chris.
What are we doing over there?
Are we opening one up at the start of the show?
We're opening one up.
The drink of the show today is a Sweetwater Tropical Lover, Berliner Weissbier, out of
Florida.
You know, I'm repping in my new home state.
Yeah.
It sounds like a nice summer beverage too, I gotta be honest with you.
Good call on that.
It's always summer in Florida, and in the summer you basically feel like you're in downtown
Fallujah.
So, you know.
Yeah, that's probably it.
Well then, I guess there's even more reason to drink, Mr. Dominic.
Now I have been looking forward to today's episode since we got off the air last week,
because we've been following along on your cute journey, and it's been generating quite
a bit of interest from the audience.
So we're gonna be doing an update today on that, as well as covering a bunch of feedback,
talk a little Google AMP, talk a little LGPL, and we've got a tool of the week.
It's like a fully rounded out diet, like, you know, like a fully recommended breakfast
when you're eating your cereal, you know, you have to have your orange juice too.
It's like a fully recommended podcast diet.
Hmm, someone's been listening to ATP.
Is that where I got that from?
Yeah, that's where you got that from.
I was trying, I was thinking about that when I said that, where has somebody been talking
about cereal recently?
For 20 minutes.
What?
Okay, well, let's not do that, because I know that got on my mind, and then I started wanting
cereal, and I don't even know where it got in there from.
It's been the weirdest thing, so maybe that's why I got so sick.
Anyways, we won't get into that.
We don't want to talk about that.
Let's talk about some of the feedback we got.
Go ahead.
Read it out.
Qt got people thinking, and this one came in from Johnny, and it's not for him.
He says, hey guys, he says, hey guys, he says, I'm not a fan of Qt at all.
It's a very complex system for simple UIs.
It just has never fit my needs, I guess.
Now if I was a C++ programmer, I may use it, but because of the licensing, I'd probably
shy away from it for anything that's commercial just because of that strange licensing.
I'd probably end up going towards WX widgets if I was forced to use C++.
However, I am a C programmer, so I used a library called IUP.
Check it out when you have a chance.
It's simple and clean and allows you to describe windows in a simple file format that can then
be loaded.
There are even Lua bindings, which I also like.
In my humble opinion, for quick UIs, IUP, or up, IUP, whatever it is, has really been
good to me.
Now, I would like to say that Qt would be the way to go for teams of programmers that
are working on large projects.
Just my two cents.
Really been enjoying the topics.
Really been interested in me.
Keep up the good work, guys.
Now don't say anything, because we have more.
Because then Gary kind of comes in, not to interrupt, but I want you to hear this part
too.
Gary comes in with the other side.
He says, I liked the discussion around Qt and Qt Creator.
I like Qt quite a bit, but I don't love Qt Creator itself.
I don't really work in GUI, so I have no visual artistic talent to begin with, and I'm terrible
at it.
My GUIs make the 80s look good.
But the keyboard shortcuts blow away Visual Studio.
I work on projects where there's three to four million lines of code, and I do it all
mainly on Linux.
And the way I make it work is ZLinux and Windows.
And I have to use Visual Studio.
I'll just use remote desktop.
I used to like Visual Studio and Visual Studio Code, but it seems like it's become clunkier
and larger since it launched.
So I like the Qt, but not so much the Qt Creator.
Gary.
So there you go.
You got Johnny, who doesn't like Qt, and you got Gary, who does like Qt.
And I find that whole thing to be kind of funny.
Just like typical audience response, you have one group that really likes something, and
the other group that doesn't.
But there has been a general level of interest here that I think is pretty big.
And Eric, our last one, and then I'll let you jump in here.
Eric writes in, he says, I wanted to let you guys know that I came across a QML library
for.NET.
It's still in early development.
I don't have any experience with it, so I don't know if it's a good idea or not, but
I thought you might just find it useful.
And then he links us to the GitHub project, qml.net.
That does sound kind of interesting.
So there you go.
That is sort of my slam through of the general temperature of the Qt feedback.
What do you think, Mr. Wizard, Mr. Florida Wizard?
I love it.
And I've summoned a storm just to show my enthusiasm.
Is that what that is?
Wow.
That gives a lot of rain.
So yeah, I mean, we got a lot of feedback on Qt.
A lot of people are interested in it.
Today's episode is going to be largely on Qt.
But I did not know, particularly Eric's feedback, how many different bindings there are for
QML.
Obviously, he found.NET.
There's Python.
I even thought I found a Java binding.
There's just a lot of ways to, I guess, use Qt without actually having to use C++.
Yeah, the.NET one surprised me.
I mean, not that much.
None of these things surprised me that much, but it didn't come up in our conversation.
I hadn't gone looking for it.
So it was nice for Eric to send that in.
I'm pretty excited by the potential.
I think there's a lot there to it.
I don't know.
Maybe you'll change my tune as we get into the show here.
But yeah, I had a story that was submitted into the show that I wanted to chat with you
just as a general hoopla before we really get into the rest of the show.
There is a post over on rockstarcoders.com, which already kind of triggers me.
I can't help it.
And the post goes something a little bit like this.
I've got egg on my face with no fewer than three articles and three YouTube videos bragging
about how great my design work has been lately to get a 500% improvement in our conversion
rate.
And now I've gone and lost a huge chunk of that improvement with some recent changes.
Let's talk about Google AMP.
AMP stands for Accelerated Mobile Pages.
It's a technology Google originally introduced to get web developers to speed up their web
pages for mobile devices and mobile networks.
But in many ways, it seems like a great technology for any device or network who doesn't want
fast websites.
Everyone does.
There's nothing that's all that magical about it.
A big part of the performance boost is simply its standards.
No JavaScript, all inline CSS, and the CSS can only measure 500 kilobytes or less.
You're going to make any page load faster with those requirements.
But Google AMP also hosts the AMP pages from their own CDN.
So certain pages you bump in from organic search results will actually display from
Google's own servers.
And it's very fast.
In organic and recently paid placements on your page, there's even a nifty AMP lightning
bolt icon to let people know it's going to be super fast.
The thing is, as he jumps in on it, he puts his clients through there.
But now he's saying that it has been a dramatic reduction in the traffic to the website.
And he talks about how so there's been some challenges with some AMP pages being broken,
sometimes blank pages are served, sometimes multiple pages on your site are surfaced as
AMP pages.
But the core takeaway is they saw a 70% drop in their conversion rate when they started
to deploy AMP.
And he goes into a series of reasons about this.
But I wanted to just take a moment, since it's up in the hoopla, to discuss it with
you because I've had an opportunity to discuss it with Joe a little bit on Linux Action News.
And our core takeaway is that while it's great for end users to load pages faster, what would
be a lot better is if people just built better websites.
Is that, am I just, am I so insulated as a geek, can I just not wrap my head around why
people can't build slightly better websites or why we can't just do this ourselves?
Why do we need Google to build AMP?
Why can't it be something that people do themselves?
And so when you see things like, well, it's hosted on their own domain, so they take away
our URL, so we lose some of the branding.
People don't know if it's us.
When people share the URLs, our own name isn't in the URL.
There's all these complaints that Google is working to address.
And Google is promising that any web page that matches the performance of an AMP page
will get the same exact treatment in the Google search rankings.
But that's, but come on, that's impossible.
If Google is serving up these web pages from their own CDN, there's no way you're going
to beat that unless you're probably hosting it on Google Cloud.
And it's just a no-win scenario.
And I feel like we are just slowly succumbing to this and we're going to lose independence.
And maybe being an independent publisher on the internet for more than a decade skews
my view of this, but I hate the idea of people sharing links to a Jupiter broadcasting episode
and it's an AMP URL and not a Jupiter broadcasting URL.
Just like I detest the fact that Stitcher re-hosts our content and re-encodes the MP3s
and makes them sound worse, it goes against fundamentally why I'm an independent content
creator.
I hate that aspect of it.
It's just anybody that has pride of their work, you don't even have to be independent.
You could be an employee that works for a newspaper and just have pride in journalism
and you wouldn't want that to happen.
So I've gone on here for a little bit, but I'd love to get your take on it because I
don't think I've ever gotten to pick your brain on this topic.
And if you think, if this is maybe just an issue that these folks over at Rockstar Coders
are blowing out of proportion, maybe my insulated geek bubble is causing me to see this with
rose-colored glasses, but to me, it seems like the solution is people should just build
better sites.
Easier thing is like, is AMP itself something people should be doing?
Yeah.
I would argue no, because like instant apps and things like that, it's just another, you
know, Google takes a lot of these shots and developers implement stuff and then Google
decides they're done with something.
This feels a lot like that.
It also feels a little icky, for lack of a better word, that, oh, if you're as performant
as something hosted on our CDN, on our search engine, we will give you equal treatment.
So what they're saying is this is a way for like SEO people to really game.
That's what this sounds like to me.
Your question about can people build better websites, your old buddy Brian Lunduke has
actually endeavored to answer that question.
His answer is they can, they won't.
And I happen to agree with him.
It's an intentional thing?
People want bad websites?
It's an intentional thing.
They're intent.
Well, no, people want to track and monetize their users.
So what's happening is if you, let's go to like, what the hell, the carer switcher hates
me anyway.
Let's go to recode.net and open up a Chrome window and just look at all the crazy JavaScript
running and actually the Verge is worse, but the Verge is notoriously bad.
That's why I didn't pick on them, although they're the same company now.
It's not that like there's something magical.
Of course, image sizes have gotten bigger, videos, things like that.
But it's the ad tracking, it's the cookies, it's the all kinds of third-party integrations
such as Facebook and you know, frankly, customer analytics firms that most people have never
heard of that's slowing down your web experience.
I think it's definitely, I think that's definitely fair.
It's definitely that.
I don't think it's only that.
Like you look at Jupiter Broadcasting.
Of course, it's not only that, yeah.
Our site doesn't really, I mean, there may still be Google Analytics on there, maybe,
but we don't track for ad purposes.
We don't have any ads on our website, but it's WordPress, you know, because we wanted
a push button publishing system and we just, and so if I had, if I had a dedicated web
developer who could develop a static website that was like updated from Markdown files
in the CDN, you know, however it would work to publish podcasts with a static site, that
would be ideal, wouldn't it?
Not have something that's dynamically generated and all of that.
We have plugins to do all that, but to make it static.
But you get my drift, like I think it's a function of you have to be in this marketplace,
you have to be a player on the web, you have to have a web presence, your app has to have
a website, you know, everything has to have a dot com, every vulnerability has to have
a brand name and it all has to be on, but that's not people's core competency.
So they're forced to use these systems that are super heavy.
It's not just Google Analytics though, right?
Like Google Analytics is less horrible than a lot of the things.
So what's happening is people are using Google Analytics and like five other ad tracking
platforms.
So it's the cumulative effect, particularly on mobile where basically Safari or onboard
Chrome is choking itself to death.
That makes sense.
All right.
Well, I wanted to pick your brain on that just a little bit because if to me, every
time AMP stuff comes up, I guess I feel like it's one of those things that's just sort
of slowly happening and there hasn't been a lot of discussion about if we're okay with
that because it represents a ton of control for Google.
Well, you know, proprietorization of the web, right?
Yes.
Yes.
Yeah.
And re-hosting.
Yeah.
So I don't know.
I guess it just seems like whenever it's in the news, I feel like, well, why don't we
talk about it for a moment?
Let's remind ourselves what we're doing here.
Speaking of reminding ourselves, I'd like to remind you about Linux Academy.
This could be a great opportunity for your continuing education.
You know, the thing is the IT industry moves at a breakneck pace.
And I think we all kind of acknowledge that when we got into the IT industry, but how
do you actually do your due diligence and stay relevant in an industry that changes
that often?
How do you stay current because maybe what you learned 5, 10, 15 years ago isn't directly
applicable these days to deploying a Docker container or something like that.
That's where Linux Academy can come in.
Even if you've got what you need certification wise, you're in the career you want, if you
just want to stay current, it's worth investing in yourself.
So go to linuxacademy.com slash coders and sign up for a free seven day trial and try
out the platform.
They've got great tools if you are ready to go get those certifications and they have
a hands-on lab, so if you're more of a visual learner, if you learn by doing, they've got
great resources for you.
You can spin up to six lab servers on demand.
And something kind of neat they're doing just out there for the community, you don't even
have to be a subscriber, is a couple of new things that I think are worth your time, worth
checking out, including their new Google Cloud weekly show that's coming out on Wednesdays
on the Linux Academy YouTube channel.
So if Google Cloud is on your radar, it's something you're working on, they are posting
a weekly update now.
They're usually about five, I don't know, ten minutes, kind of depends on the topic.
Last week it was about GPU acceleration on Google Cloud.
There's also launch of a Docker study group, and that's going to be on YouTube as well.
So it's probably time to go check out their YouTube channel if you want to be part of
the Docker study group or if you want to get weekly updates on Google Cloud.
Now that's all just free content, but if you go to linuxacademy.com slash coders, you can
sign up for a free seven day trial and try out the entire platform, and they've just
recently launched almost, I don't know if the official number is 200, but it's got to
be near 200 types of hands-on training, content, things for Azure, AWS, Core Linux itself,
Red Hat certifications, and DevOps as well.
It's a ton of content they've just launched in the last few months.
They're always adding and updating the old content so your membership constantly gets
value.
So go get started at linuxacademy.com slash coders, and don't forget about that new Docker
study group and the new weekly Google Cloud show all over on the Linux Academy YouTube
channel, linuxacademy.com.
Just go to YouTube and search for Linux Academy.
You'll find it.
Linuxacademy.com slash coders, and a big thank you to Linux Academy for sponsoring the Coder
Radio program, linuxacademy.com slash coders with an S.
Okay, so let's get into your adventures with Qt.
This has been pretty fun, and your last couple of episodes have covered some of the advantages
about the cross-platform nature of it.
QML, we talked a little bit about last week and why we both were pretty impressed by that.
And now, it sounds like you've had a little time to play with Qt on Windows, which I compliment
you.
You know, we should try to represent the Windows portion of the audience from time to time
because they're out there and they're a decent percentage.
So I'm really curious to know how the adventures have gone on Windows and all of that lot.
Yeah, uh-oh.
So Windows, what can I say about Windows that, yeah, nothing nice to say here.
So yeah, the code I was working with was my code and I was trying to add a dependency
to something called ZMQ.
Now, ZMQ is basically a way to transmit data over ports.
Very common, used a lot in aerospace and embedded systems, things like that.
So one of the requirements I have is this application must run on Windows.
In fact, as of today, the primary platform.
So I took my Qt project and I went to install ZMQ on Windows.
You can look at the post on dominicam.com.
It was a nightmare.
It was unbelievably bad.
So there's like a ZMQ MSI installer, which does not do what you think it does.
And I ended up, and that's why we have a tool of the week, I ended up spending like three
whole days trying to get this to work.
Not understanding, like it would see the library, I'd add the DLL to the project, it would crash
at launch with no output, which if you've ever done Windows devs, you know crash at
launch with no output probably means something wrong with your DLLs.
Then I ran a dependency, one of those dependency crawlers, and sure enough, it was a DLL and
it's on, yeah, the error I was getting is the CBD, so CD debugger process terminated.
It was hot garbage, the definition of dumpster fire.
Now, do you need to be able to develop on Windows to run it on Windows?
Is that a requirement?
Yeah, you do.
It doesn't allow cross compiling generally.
So after about three days, I ended up finding this tool called VC package.
It's a Microsoft tool, I linked to the GitHub in the show notes.
What it basically is is a PowerShell tool that allows you to, it's basically a package
manager, right?
It's a package manager for C++ libraries and dependencies.
You know, apt-get, right?
Because the answer to this problem on Linux was sudo apt installs emq, emq dev.
On Mac, brew brew installs emq.
It really was unbelievably hard to get this running on Windows.
And granted, I will give to our.NET and Windows developer listeners, I am not the super Windows
guy, obviously.
So maybe a more experienced.NET would have been like, of course I install VC package
on every computer.
The package manager should come with the computer.
It is worth noting how enabling a package manager is in terms of just sitting down at
a computer and getting to work, which is most advantageous when you're first setting up
and not as advantageous once everything is set up.
After everything is done, it's not really a big deal.
But that first initial setup period, it makes a huge difference and it makes Windows feel
like an ancient operating system.
Yeah, like DLLs, we could have a whole show about why they're bad, right?
I firmly believe today, after this whole experience, that POSIX-compliant systems are more correct.
Things make more sense.
It's just, I don't know, I mean, I know there's rumors about Microsoft making a Windows derivative
or rather operating system derivative of Linux.
Maybe that's probably only for Azure, but this is no way to live, right?
This is true suffering.
I haven't been this frustrated in probably six years during development.
This was unbelievably bad.
So you think this is one of those edge cases where Windows sort of falls down as a development
platform and not that it couldn't be solved?
Well, Qt could have also had its role for Windows.
I just want to say that.
The Windows support, like on Linux and Mac, it basically finds your dependencies for you.
Now you could say, well, that's because Linux and Mac are POSIX and they just look under
user include and user, whatever user bin, whatever it is.
On Windows, it's a little more magical.
For instance, you might link to a DLL and see program file 0mq, which was the right
answer, which is idiotic as far as I'm concerned.
I feel like I lost the thread.
I'm just mad at Windows for sucking.
How fortunate, before you go on, how fortunate is Apple that a community came together and
created brew for them?
That platform desperately needs it.
Yeah, because Porus is terrible.
I know when we did our Windows 10 experiment, what was it, more than a year ago?
When we did our Windows 10 experiment, I ended up getting a new terminal to replace CMD and
a package manager.
I just had to.
It's funny, I'm on Windows 10 right now for reasons that will become clear at the end
of this show today, but it feels, in fact, I had a conversation before the show.
It feels old, but not on the way of 1950s Flash Gordon, black and white shows, the old
sci-fi show.
It feels old like a typewriter, but not a cool hipster typewriter.
No, what it is, I might be projecting, but what the sense is that I get is, it feels
like you're struggling with solved problems.
These are problems that are solved, why is this something, why is this the thing I'm
wasting my time on?
Why hasn't this platform made it easier for me to just get down and get to working?
The setup procedure for this project on Mac or Linux is you run a batch script that I
wrote called setup underscore Mac, setup underscore Linux, and lo and behold, you're done.
In that script, the script is about four lines long.
It's just a bunch of concatenated batch commands.
Because it's like, and you have to drag and drop this, and you have to go into program
files and your dependency might be there.
Did you give up or were you successful?
I succeeded at the end.
Oh, good.
But I was not a happy camper.
Yeah, yeah, I saw some grousing on Twitter.
I saw some grousing.
Yeah, that's how I usually know something's going on.
Mike's got a struggle.
The struggle's real, and it's just like, you know what it is?
I don't like Windows very much, so I'm just getting progressively angrier.
Yeah.
You go in with a bias towards, like, I get angrier faster with Windows.
Because I have, I don't know, I've spent so many years fixing it in the past that I feel
like my threshold for dealing with it is lower.
Well, and I've also made like a conscious decision in the past to avoid these kind of
problems by like not being a, you know, quote unquote, corporate Windows dev.
And the fact that I was sort of pushed into this, yeah, I'm not, I don't even know.
I don't even know what to tell you.
I mean, of course all platforms are good, but some platforms are more good.
Right.
Yeah, that is an interesting thing when you, like, oh man, boy, do I know that feeling.
When there's some work that you have to do that makes you use a tool that you wouldn't
normally want to use, gosh, oh man.
Yeah, it does make it much harder to deal with annoyances.
And you have to just sort of sit there and be like, this isn't a big deal.
Don't freak out.
You'll get through this.
Well, it's, it's an interesting deal though, as Microsoft tries to appeal to developers
that like, you know, it doesn't take too many clicks or too many commands on the command
proper PowerShell to end up in a box from, you know, Windows 95, right?
It really, I don't, can we kind of just go for it?
It seems like this giant, rich commercial company is innovating less than, oh, I don't
know, Gnome or KDE or like Pop OS, right, Ubuntu.
Even like we bitch and moan about the Mac.
You know what?
Whatever.
The Mac is fine, right?
It's a little annoying that they keep adding iOS features to it, but touch bar is garbage.
But the Mac is not impeding getting work done in any way.
Right.
Especially the type of window you're doing.
Right.
So the question is like, is Windows more targeted at like the business, you know, I think that's
the answer, right?
It's, you know, computer information systems versus comp sci, but it makes me want to throw
up.
We can move on from here.
No, I, I understand what you're saying.
It's like, because I think the space you're interested in is the development space, the
space where you want to get tools, you want to get to work.
And there's a lot of niceties on the Mac side, like the app store where you can install good
editors and things like that pretty quickly, which is not that Windows 10 doesn't have
that.
It's just not as strong.
On Linux, of course, you have package managers, but on top of that, you have distributions
like Pop OS and others that are trying to make it even simpler to just one click install
an entire development environment.
Like Ubuntu Mate, for example, has that software boutique when you first install it.
It is, it's great.
It's basically every major app you'd ever want for the Linux desktop.
Some that are in the repo, some that are outside the repos, you know, and it just pulls them
down for you and gets them set up for you.
And it makes setting up on a Linux desktop, even for somebody who's been doing it since
the nineties, it makes it a super quick, no pain situation.
It's just really nice to get up and get working.
And there's a lot they could do in Microsoft in Windows that they could do to kind of make
that process easier.
I mean, hell really, they have the money.
Why not make an official Windows package manager that is something that's in the community?
I think there is something in the works for that, but there's so many little areas where
they could round, they could round off the rough edges, I guess.
Yeah.
I don't even know.
Right.
Cause it's more to how people package for them as well.
Part of it is how the projects package, how people package and the fact that you would
link to a DLL and C program files seems crazy, right?
The fact that there's like windows was not envisioned as a development environment, I
guess, where Unix obviously was right.
That was the point of using Unix to cover everything, right?
Mac, BSD, Linux.
That feels weirdly fragile, right?
The fact that, you know what it is, this is exactly what it is.
Once you do something on Mac or Linux, cause it's all Unix underneath, you can write a
script, you can have a switch to detect if you're a Mac or Linux, those are minor differences.
And then that spash script is gospel.
On Windows, they're getting there with PowerShell, but it's not as standard and you have all
kinds of crazy dependency problems.
Yeah.
I don't know, the whole DLL thing seems like it's weird and this is where my Mac guide
bias might come in from the past.
Dynamic linking I think is super bad.
Like if you remember Chris from the olden days or not that olden days, Mac apps generally
don't dynamically link.
Yeah, they bundle.
Statically link.
They bundle.
Basically they static link everything.
And that saves the user and the developer, okay, well if you don't have this, I need
a catch to tell you to go install Visual Studio C++, you know, 2012 of, right?
And yeah, your binaries are a little fatter, but.
There's some security ramifications as well.
Because now you're after the developer.
Well, no, dynamic is worse.
Well, the developer, if you intentionally infect your statics, right?
If you intentionally infect your libraries.
Or if you just basically, you know, you ship an old open SSL and it has a vulnerability
and then your app's still using that and say it's not like checking the cert of an HTTPS
server.
There have been some capabilities in the past where applications are still shipping those
old libraries when the system libraries have been updated.
But that's a, you know, that's an argument since the 80s.
So I digress.
Dynamic linking has the issue of, and we'll get into this later with licensing, where
if somebody ships a fraudulent version of a library that you might depend on and the
user mistakenly installs it, your app thinks that's the correct version of the library.
And now maybe all your HTTP traffic is being sniffed or.
Fair enough.
Yeah.
Yeah, that's true.
So speaking of dynamic linking, we're going to get to that later on, but to close your
thoughts out, I think actually to respond to your thoughts, I think you may have nailed
it.
Windows itself wasn't initially conceived as so much as a development platform as an
application delivery platform.
And I know that sounds funny because Microsoft's been pretty good at building developer tools
and developer relations over the years.
But I think when you look at Windows itself, it was meant to be an end user desktop experience
first.
I mean, what would be the right intention?
And that's also why I've never felt like it was a great note as a server.
Like it just seemed a little off tone to me retrofitting something to be something else
instead of using something that was built from the ground up to be that thing.
So I think that's maybe some of the friction you're coming up with, as well as you're dealing
with perhaps an open source project that while is probably the largest, has our largest install
based on Windows, may not necessarily be a Windows first organization.
And that's being reflected in how they care about their packaging, I think.
But anyways, I think we have more to get into.
So I'll take a moment right here and thank DigitalOcean for sponsoring the CoderRadio
program.
Go to do.co slash coder.
No S on that one, do.co slash coder and get a $100 credit for 60 days when you sign up
with a new account.
Now DigitalOcean is a simple, scalable compute platform with industry leading price to performance.
Everything has enterprise grade SSDs, predictable costs and billing, 40 gigabit connections
coming into the hypervisors, data centers all over the world.
And early in the year, DigitalOcean launched a new flexible droplet plan for $15 a month,
which I think this is such a great deal.
This is the best deal, I think, really.
You can mix and match resources the most appropriate for your application.
The one that I go to, my go to test server, three cents an hour, four gigs of RAM, two
CPUs, an 80 gigabyte SSD, three terabytes of transfer, all for three cents an hour.
Then DigitalOcean manages it all with an industry leading dashboard.
It's super easy to use, but very powerful.
A great API that's well documented, lots of lots and lots of applications built around
it.
99.99% uptime SLA, cloud firewalls that block traffic at the network level so they never
even touch your droplet, baked in monitoring, alerting, perfect DNS management, and one
of the best team tools I've ever used.
The thing I love about DigitalOcean is it makes it easy to get up and going quick.
You go from idea to actual production in minutes, which is sometimes the difference between
having an idea and executing and having an idea and never doing it.
It's made a huge difference for us.
Do.co slash coder.
Go there, try it out, no S, get a $100 credit, and kick the tires for 60 days.
You'll really, I mean, with $100 credit, you could really turn that thing up if you want.
They have some super powerful systems with hundreds of gigs of RAM.
I believe last time I checked, it was like, yeah, 196 gigs of RAM, 32 CPU cores, 3.8 terabytes
of disk.
So if you want to use that $100 credit, go for it, do something awesome, do.co slash
coder.
Big thanks to DigitalOcean for sponsoring the Coder Radio program, do.co slash coder.
Mr. Dominic, this cute conversation has got me wondering about one of the big bits of
feedback we've seen, and that is the questions about Qt's legal terms around licensing.
Maybe that's the way to put it, because I'll tell you what, I thought this was a no brainer.
I thought this was a pretty simple, go get a subscription, good to go, you have no problem.
And then I started looking into it and I am way more confused than I thought I would be
after reading their own website, reading forums, reading Quora posts, I mean, Stagg Exchange,
their FAQ, I read their entire FAQ.
Have you run into this issue and is this a concern for you?
Yeah, so the answer to this is from Freddie Mercury, I'm just a poor boy, nobody loves
me.
Meaning you want to use Qt, you want a proprietary app, you might be able to statically link
if you never, ever, ever, ever do anything that would compromise you, but pony up some
money.
And by the way, that subscription is not a subscription.
You have to pay that within 30 days, the total for the year.
Oh, and it's good for one year and each developer has to have a license, right?
It's per developer, any developer that touches the project, if you don't, you're automatically
under the LGPL.
So I had a brief conversation, a couple conversations actually with reps from Qt and the situation
is interesting.
So for our case, to have two developers on this project, it would be immediately over
$11,000.
No way.
Which is just not, that dog don't hunt.
And that's for the first year and then it renews at a much, much more forgiving rate.
But the basic idea is that you can use the LGPL version, the open source version.
You may not include Qt and you have to be very, very careful about what you do, including
you have to share the.0 outputs of your compiled code, which I, for my use case, I think is
not gonna be acceptable.
It feels bad, I mean, Q Richard Stallman, but this is just not an acceptable outcome
for, yeah.
Negative in the freedom dimension.
I mean, I get it, right?
And oh, the other thing, and I heard from a birdie, in the future, more of their components
are not going to even be LGPL, they're gonna be straight GPL unless you have a license.
So those licenses are pretty handsomely priced.
This is pretty disappointing.
So you can ship it if you don't have an annual license, if you dynamically link.
That is the first thing you need to do.
You also need to include, and this is for me the killer, you need to include the.0
output of your compiled code and you need to refer back to Q and you have to have all
the proper disclosures, the normal stuff that you would have to do for a BSD or an MIT license.
And how big of a compromise is that?
Not the dynamically linked part, like take that out, but how big of a compromise is the
rest for you?
The.0 thing is probably unacceptable because there's, you know, I'm working right now in
the aerospace space.
I know that's a terrible way to phrase that.
And decompilers are a thing that exist, right?
And I'm not gonna use any weird obfuscation tool or anything like that.
So while I definitely like it as a development platform, I'm probably going to talk about
it a little more in future episodes.
I can't imagine, you know, a JB or a Madbot or a size company being able to pay this.
I mean, without serious compromises.
Yeah, now to be fair, to be fair, they have a startup licensing plan, but your company
has to end revenue, not profit, but revenue has to make less than $100,000 a year.
And you have to document that.
So to me, that's just not, I mean, we make, you know, more than that.
And I think the hype train just got super derailed here.
I feel a little.
Yeah, I was disappointed.
In fact, it's funny because I wrote these show notes and then I had the final meeting
and it was one of the briefest meetings I've ever had because I said, well, if that's,
you know, if that's just the way it is, if you can't work with me, then we can't afford
it.
I mean, unfortunately that's what it comes down to, right?
We can't drop $11,000 on software licensing when we could use.NET for free.
Mm hmm.
Which is why I'm on a Windows 10 machine right now.
Oh, okay.
There it is.
Yeah.
So it's, it's really, I get why they're doing it and the answer is, well, you know, small
little shops like the Matabot are just not their target customer.
I think that's it.
They're looking at people that are building products for devices and you know, multi-platform
projects that are big projects, they probably figure a couple thousand dollars per dev is
no big deal and it wouldn't be for a large company.
It'd be, that'd be standard operating procedure.
Yeah.
Well, it's unfortunately for some, I mean, I'm very surprised they don't have like a
small business plan.
A lot of companies I've dealt with that do have these kinds of schemes, I mean, pricing
schemes, not in a negative connotation.
When you tell them, hey man, we're like a five person company, they say, oh, well, let
me call my manager, you know, they put you on hold, they fake it for two minutes and
then they come back and say, well, here's what we can do for, you know, somebody of
your size.
That was not the case.
Yeah.
Yeah.
That would have been really bad.
Sorry, buddy.
The price is the price.
Yeah.
That would have been great.
You, you know, that's, that's kind of bad in a way because I'd like to see them be hungry.
I'd like to see them want to hustle a little bit because I'd really like to see this.
I'd really like to see everything they're working on take off in a big way.
It's also bad for your and I's dream of like Linux as a default development platform for
a lot of people.
For commercial applications.
Yeah.
For commercial applications that are a GUI based, right?
That aren't Electro.
Because, well, I mean, I have been painstakingly trying to find a development platform for
this project.
Yeah, I know.
And Qt was perfect, but we just, we just can't do it.
So that means I have no option but to do it on, uh, on windows because that's the platform
you have to deliver for.
We were required, right?
Man, we're, we're, yeah, we're bound.
How often do you suppose some version of this, maybe it's not cute, but you know, some version
of this happens more often than not.
And that's what blocks cross-platform applications is something like this, the tool you need,
you can't use or, I mean, it's just so disappointing.
And I really would, I would love to just see this problem shift because I'm no longer a,
you know, I'm no longer this big advocate that I used to be.
I'm now just a, I used to have a term for it.
Like I used to be an evangelist and now I'm an advocate.
So that's the way I should put it.
I'm no longer a big evangelist for it, but I am still quite the advocate for the Linux
desktop because it's really, there is a piece to it.
When you switch to a stable platform that just works for you and is reliable and doesn't
have a bunch of weird commercial interests dragging it around by the nose, there is a
peacefulness that you have.
Like there's like this confidence in your tool set.
And I want to like spread the good word to people, be like, your entire computer can
be empowering.
You know, you don't have to feel like you're making compromises, but if the applications
aren't there, it's, you know, people are just going to laugh me off.
And you know, you have developers like yourself that are willing to invest time and money
and development efforts into targeting the Linux desktop.
And I'm a, I'm a long time Linux user who would have no qualms about paying for commercial
software, but people just, you know, different things keep coming up that prevent it from
ever happening.
And that's one of the things that locks in the applications on windows and Mac and you
know, predominantly windows because you've got such the install base there.
Wow.
That's really too bad.
That's too.
What kind of project would you still consider using Qt for in the future?
I hate making future predictions cause I'm often wrong as the subreddit will be quick
to tell you.
Um, you know, honestly I hope that Qt company, which is actually their legal name, realizes
that there are a lot of small software development companies out there that could also be there.
Like I have no objection to paying a license fee.
I'm just, we're just not structured in a way that we can pay that much.
Right.
Let's say you were creating, you know, a Jupiter broadcasting soundboard app that was going
to be GPL anyways.
Oh sure.
If it was already, right.
If, if, if the model for a piece of software was that it was like open source, then yeah,
obviously I wouldn't care.
I would just GPL everything.
It's really when you want to go commercial, but you don't have enough funding to buy the
annual.
And that's every year too.
So if this app continues to produce, but you haven't significantly update, the subscription
update is less than the initial purchase.
But you know, even if you have the money, I mean, I don't, I don't know about you, Chris,
but an $11,000 check is a check.
I would think twice about writing or 20 times before I wrote it.
It seems, I don't know.
Obviously they're doing it though.
Right.
A bunch of the Tesla stuff is written in Q.
So I think it really is as simple as they're targeting bigger enterprises that just like
this is a bar tab.
Yeah.
And it might be a way to weed out, uh, support costs, undo burden and support.
You know, if the riff raff can't afford us, then we don't have to waste our support time.
You know, you just, uh, make sure that you could do like a startup tier.
I've seen like this.
I completely agree.
Yeah.
Where, where it was a startup tier where, listen, I understand you don't have a lot
of cash.
You can pay us every quarter and you get like very, you get limited support.
You get two tickets a quarter or something.
Yeah.
I mean, not to go on about this, but that is why I'm a little disappointed is I would
love to see the cute company being competitive in that way.
Cause there is an obvious gap in the market right now, especially for something that's
independent right now.
Uh, and they could really be aggressive and they could go after that.
And it seems like an obvious choice they're making not to.
And that's why I'm a little, I'm a little, you know, who rum about it because it seems
like, oh damn, I was, I was kind of hoping they were going to be more competitive, but
I was loving it.
I mean, I have to say, I have not enjoyed programming as much as I have writing the
C plus plus for the, uh, for the little cute prototype I was doing in this project.
Really?
Yeah.
Yeah.
Yes.
Crazy past Mike.
Yes.
No, I'm not.
I'm seriously, I have not like, you know what I visual studio windows.
I mean, I'm going to lose my lunch, right?
Like it's just in my lunch was sushi, so it's going to be bad.
I loved it.
I w I was so into it.
We were going to have cute episodes for months.
And then it was basically, well, you know, we're in the wrong tax bracket, right?
Like I don't know what to say.
Well, why don't we, uh, why don't we end on some positive news?
So, uh, Android nine came out this week.
There's a couple of new nice features in there.
That's nice and positive.
I said positive.
I know.
Okay.
All right.
I'm trying.
How many devices is it installed?
Oh, you bastard.
You always got to bring it down.
Okay.
How about this one?
Here's some positive news.
iOS 12 developer betas group FaceTime has been removed from iOS 12 and will ship later
in the fall.
Ah, yes.
Apple.
Yeah.
That might be a good sign.
You know what?
Apple punting features and waiting for them to get developed could be a good sign that
I wouldn't necessarily say that's bad that I need.
They could do a little more of that.
You know, ship some max, bake your software a little more, stay competitive because nobody
else is doing it.
Nobody else is staying competitive like that.
So and Microsoft is, but obviously you've run into issues.
Well, Mr. Dominic, I tried.
I gave it a go.
You know.
You tried.
You gave it a shot.
You gave it an honest try.
Here's something kind of positive.
We have a little PSA.
We will be doing a double coder next Monday to compensate for travel.
And so if you would like to join us for a live stream, that'd be a good one.
Go to jupiterbroadcasting.com slash calendar to get that converted to your local time zone.
We usually start around 12 PM Pacific.
I usually get the stream fired up around 1130 AM Pacific and get some music going at jbliv.tv
and you can come hang out for a couple of double coders.
They'll get released in the RSS feed around their regular time-ish, but we'll be recording
both of them next week.
There you go.
There's a positive plug.
You know, that feels good.
I've never been more turned on in my life.
I know.
It is exciting, right?
Every opportunity you and I get to link up and talk is always good.
And next week we're talking about my new favorite dev platform, VB6.
Yeah.
Hey, everybody.
Alright, why don't you tell people where they can get a little more Dominic M in their life,
you know?
Follow me at Dumanuco.
And if you're an attorney who's an LGPL expert, I would love to hear from you.
No kidding, right?
That's part of it is.
Yeah.
Maybe somebody could give you some good advice there.
If you've got thoughts on anything we've talked about today, you can leave us feedback coder.show
slash contact and links to some of the things we talked about are at coder.show slash 322.
I'm also on the Twitters.
I'm at Chris LAS.
The show is at coder.radio.show and the whole network is at Jupiter Signal.
Hey, look at me.
I can remember things that I've said a thousand times, everybody.
And like I mentioned already, we have the calendar page where you can find out about
our lifetimes and we've got the live stream, but I told you about all of that.
So really the only thing I have left to say is thanks so much for joining us on this week's
episode of the Coder Radio program and we will see you right back here next week.

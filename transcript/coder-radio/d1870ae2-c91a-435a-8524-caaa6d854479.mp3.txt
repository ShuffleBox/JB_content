This is Kota Radio, episode 361, for June 10th, 2019.
Hello, and welcome to Kota Radio, Jupiter Broadcasting's weekly talk show that takes
a pragmatic look at the art and business of software development and related technologies.
My name is Wes, and I'm extra special pleased to be joined by Mr. Michael Dominic today.
He had to survive a thunderstorm and worse, an internet outage. But nevertheless, you're
here, Mike. Welcome to the show, and thank you for joining us.
Thank you for being patient, Wes. And I am here, older, wiser, and more educated. Did
you know that FiOS Verizon boxes have batteries in them?
Oh, no. You know, I've never really dug in too deep to know how those things work on
the inside.
Well, I have had one for only five years now, and I guess my battery's dead. So when the
power went out because of a thunderstorm, I had no interwebs.
No interwebs. Yeah, that's, that's pretty rough when you're trying to do a live streamed
internet podcast, right?
Yeah, and it's bad for Kota Radio too. I mean, my whole webcam thing was fine because I pre
recorded it. Oh, you're not talking about that.
Oh, no, no, I'm not. So before we get feedback about that, which you can do, by the way,
by to go into kota.show slash contact, find all the great ways to get in touch with us.
Let's get to some feedback we already have from our friend Lance. Now, Lance has a bit
of a FOSS quandary. He writes, I was working on an open source project for school that
we meaning four members submitted. Now, as often happens, myself and one other person
did about 98% of the work and the others contributed to the documentation, which incidentally was
kept outside the code base. Class is over now for many months, and no one has touched
the code, except for the other member who did most of the work. And really, we both
want to keep this stuff going. Do we downgrade the other two non contributors from owner
to contributor and take over maintaining the project, but give them initial project credit?
Do we shoot them an email and inform them of our plans? And the with, you know, all
the risks of confrontation, them saying no, or wanting to fight about it? For a little
context here, one member felt slighted by the direction the project took. So there's
already a little drama. Maybe we should just fork it, you know, there would be some confusion,
because there's already like 15 some users using the snap that we're publishing. Any
insight appreciated, Lance?
I'm going to go first, because I think I'm going to have a much less nuanced and nice
approach to this. Oh, yeah, lay down, Mr. Dominic. Fork it to the ground, man. 15 snap
users. I mean, I get that is pretty good for just, you know, random FOSS project. But I
have never seen a case where contributors got into a, shall we say, Rochambeau contest
that ended well for the project as a whole. Just fork it, do your own thing. I'm thinking
particularly of what was it? What is the fork of ionic West? Is it Lauria? Or, um, I'm forgetting
the name. But yeah, I know what you're talking about. It's something like that. Yeah. And
like, the answer is when the contributors don't agree, you fork. And frankly, you should
have information on the people that you're using your project, I hope you're saying there's
15. So you must know something. Just be very, very loud about it, right, right, right into
podcasts that cover this stuff, post something on a website for the fork project on the GitHub,
and link back to the original project and say it's a fork. And very nicely and professionally
say it's forked, not not for personal conflicts, never say stuff like that. But say like it's
forked because I have no idea what your project is, but say it's forked. You know, there was
some technical disagreement on how to do something, which I'm getting the feeling is kind of what
happens anyway. So Wes, you know, actually, I think I completely agree. It's it's early
enough in the project that you can just fork it and and you're just not going to have the
same kind of complaints, right? Totally fair that as long as the license allows you to
do that, which sounds like it does. Why not keep it simpler? And then you won't have they
have no claims of governance, right? This is a brand new thing, your own fork, and you
can set things up from the get go. And assuming you're looking to look work on this project
for you know, some time to come. After a while, all this nonsense will fade away into the
distance of time. So I think you're spot on, Mike. And it's one of the nice things that
you can do when you play in the open source space, right? You don't have to stick to existing
governance structures or agreements or models, like as long as you respect the licenses,
have at it, run it your way.
Yeah, absolutely. You're much freer to do as you wish.
All right. So next up in our feedback segment, Mike, you're pointing us at just a little
bit of Mac Pro trolling. Now, we did talk a little bit about the Mac Pro because, well,
we were both salivating and acknowledging we're probably never buying one of these things.
Yeah, my banker says I can't have a mortgage to buy a Mac Pro. So the subreddit was kind
enough to show us all the things we could buy instead. It's a pretty long list for us.
Yeah, it's not a conservative list at all.
Yeah, right. Things like a Galaxy S10, a Pixel 3a, maybe an iPhone XR, a Mac Mini for, you
know, building and testing all these applications. Plus, you're going to need a mobile development
Ultrabook. So pick up like an XPS 13 or a Lenovo X1, maybe buy a nice 27 inch 4k monitor,
and a Windows PC for, you know, gaming or machine learning or whatever. You can buy
all those things or buy the base level Mac Pro.
Yeah, I mean, it's pretty clear to me that the Mac Pro is just not meant for developers.
Certainly, if you're a guy named Marco, you could definitely buy one because you're rich.
But yeah, you don't need this, right? Like, no one needs this.
Well, maybe. Yeah. All right. You're right. With the word need, no one needs this. Yeah,
that's true.
Right. And when I say no one, I mean developers, right? Like if you are literally working on
the next Marvel movie, yes, you probably do need this. But right. No, absolutely. If you
want this and you have the money, you know, grate that cheese, man. Grate it. Grate it
with all your fury, your might, your love. Be like Sauron, pour everything into the cheese.
That's some special advice you've got there, Mr. Dominic. But I think you're right about
that. Let's move right along because there's more fallout from WWDC, even though we're,
you know, we're a week on now. One thing you pointed out, there will be a change in the
default shell in the next version of Mac OS.
That's right. The born again shell is banished. No more. No more. In the land of Catalina,
there will be no born again shell. It is now Z shell. So yay. And when I say yay, I mean,
I hate change.
Yeah, I am curious about how you actually feel about this. Because I mean, I don't have
a lot of Macs in my life. I have used ZSH before, and I think it's a fine shell environment.
But it is probably it's a weird change to make, and it's not going to be completely
smooth.
Well, I have a few thoughts on this, right? But for a baseline for our not a Mac users
in the audience, the bash on Mac currently is an old version of bash anyway. So one thing
that Linux switcher switchers will find is that holy crap, that's just so much better
on Ubuntu, or you know, insert distro here. That has nothing to do with Mac and everything
to do with the fact that Apple packages an old version of batch. And that has everything
to do with the GPL three, I believe, which Apple does not like.
Right. So they're basically packaging the newest version of bash they could that was
still on the GPL two, right? Right. And hence, you have this ancient version of bash. And
it turns out batches has kept getting better actually.
Yes, it turns out the open source community, like keeps improving. So Z shell isn't is
probably a smart choice, although kind of disappointing in my mind. You know, Z shell
is more or less one to one command similar to bash. There is a unless you are a like
deep command line user on Mac, you're probably not going to notice. If you administer a lot
of Linux servers that have batch, then there might be edge cases. But realistically, your
your average development user working on a Mac is probably never going to notice the
difference. I actually wish they if they were going to do this, they had just gone with
like fish, fish shell or f shell. You know, if you're going to change it, and if you're
going to cause that disruption, which again, for most people probably isn't that much of
a disruption, and it's why they went with Z shell, I would have loved a just a more modern,
like really much more modern shell Z shells kind of, you know, it's not bad. I don't mean
to disparage the shell, but it's a pretty conservative choice. If you were going away
from bash, you could have, again, I like f shell or fish shell, whatever you want to
call it. But yeah,
no, I mean, I do find myself when switching shells, usually on fish. But is there something
to be said about trying like, they didn't have a lot of options that are seemingly totally
unwilling to ship the GPL three binaries. Fish is I mean, some of the more recent versions
actually have been making some, you know, like they've added support. So it's like the
and operator and or operators are more similar. So they have been making some strides to being
more bash compliant. But fishes up front about not being bash compliant. ZSH also has some
of their own stuff, right? So I mean, I don't know that you could convert a script, if you're
using some complicated stuff, but probably command line will just be nicer. It manages
to fish on the other hand, of course, you don't have to configure it, right? We'll have
links to a bunch of different ZSH resources in the show notes over at coder.show slash
361. There's a whole bunch of different configuration guides and tool sets and plugins and options
for making ZSH making ZSH shine. Fish, I never find myself really doing that because I only
need to tweak a few settings and get going. I don't have a good sense though, like, of
the Mac developer community, people who actually use shells on Mac OS, how many of them are
like really familiar with it and want customization or care at all? And how many of them just
won't notice at all?
I mean, my experience has been not much right? Like, I honestly I think this is the biggest
non story of WWDC, except for a few small, maybe not small, but a few hardcore like DevOps
as Docker developers, or developers using Docker, not the developers of Docker, of course,
who are running Mac OS and like, they're going to get hit with their giant bash scripts that
are edge cases going from bash to Z shell.
Right. And you can still of course, have bash installed. And if it's not your default shell,
you can still, you know, if you've specified and run it with the binary, that's bash, but
that should just still work too.
Right, you could you could like, I'm sure someone is going to package a bash in a dot
app that you can just run on your Mac, if it doesn't already exist, right? So.
So you're not freaking out about it? Is that's what I'm hearing?
No, I'm a little disappointed, right? Like, if you're if you're going to change, I would
have actually liked to see fish. And I know that's my preference. And I'm sure I did not
know you were a fishy, by the way.
Yeah, I don't use it on all my machines. And I don't often put it on servers. But for my
desktop machines, I like it a lot.
You know what they say was plenty of fishies in the sea.
That's true. So one little trolling question here, though. Are you sure they wouldn't have
just reinvented and made their own shell if they were really going to spend that much
time into it?
Oh, geez. Yes, Swift shell, I can already see it.
It's like AppleScript, but in a shell form somehow merged with the best aspects of PowerShell.
Craig Federighi, if you're listening, you did not hear that. He's it's just delete the
episode. Don't listen. Do not tempt them. Okay, just I'm back on Mac. And I really don't
want it to be non compliant with POSIX. Like, let's just click. They're scaring me, Wes.
They're scaring me with this T2 crap. And like, I don't know. I think the BSD core might
be in a little bit of danger. But that's my pet theory. Five years, no more BSD on Mac.
You heard it here first.
Right? You can see them just between other things, maybe virtualized environments or
other solutions. It's kind of worrisome, like how much are they going to keep that legacy
intact? And how much are they going to move forward to their own development environments
and development kits? Because they have all that stuff. And if you don't need the other
stuff, if you're just writing for their ecosystem, but it's nice to be able to do both from one
machine.
There's an Alice Cooper song about this Welcome to My Nightmare. Let's just leave it there.
I think that's well set. So speaking of Swift, since you brought it up, I have to say that
I love Swift.
I'm suspicious that this isn't the real Michael Dominic. What happened? What happened in that
thunderstorm?
I was struck by a lightning. A Swift bolt redesigned my UI via Swift UI. That was really,
really contrived.
Okay, well to make up for it, maybe just break down Swift UI a bit because we didn't really
get to talk about it too much on the previous episode. Now you've had some time to look
at it, let it soak in, see other people chat about it. What's going on here? Why should
I care?
So it is a declarative user interface language basically written in Swift obviously, for
making iOS and macOS UIs. It is very similar to let's say a reactive programming model,
right? You have components. I think the key is our one, it's bringing iOS development
user interface development into a more modern development paradigm. So no more crazy layout
constraints. Yay. No more screwing around an interface builder. It does not take a lot
of code with Swift UI to get a pretty decent standard UI done. Of course, once you start
going like super fancy designers handed you Photoshop files, yes, then you're going to
be doing quite a bit of work.
But it's based on a component model. So I've been digging in Wes, I've been scooping the
ice cream out of the Swift UI tub. And I have two blog posts written converting an Xcode
project existing one to Swift UI, and existing components to Swift UI. So again, that would
be like, let's say you have, you know, Wes's button, right? Which is a subclass of UI button.
Right. So this is some component I've sort of customized, added some neat functionality.
Maybe you press it and it buys me a sandwich or something great like that.
Right. And it has like certain layout properties that you don't want to lose, right? This is
Swift UI allows this type of custom control to just simply be wrapped in Swift UI and
then use like any other Swift UI class. And it doesn't have to be your thing, right? Like
I did something with the Google sign on button, which is a GD sign on button from the Google
SDK. And sure enough, you can just wrap that bad boy in Swift UI.
Oh, see, that sounds pretty nice.
But you have something in here about react developers in Swift UI.
Well, I was I was gonna ask you about that. I saw a couple tutorials floating around our
tutorials too strong of a word explorations, perhaps. And just trying to make some comparisons
between how stuff is done with react or react native. And some of the ideas coming in in
Swift UI, particularly as it goes to maybe more of the declarative end. And I'm wondering
if if you notice that as well.
Yeah, you could you could tell that there was some inspiration from from react native,
right and, and really just reactive programming as a whole. I I sort of think in a way the
similarities folks coming from in particular react native, the similarities are going to
make it easy for them to get started and really sneaky when they're different.
So you're worried that people become a little too familiar or think that it's more similar
than it really is?
Not that word, right? It'll be one of those things where it's just like a bug you're not
used to kind of like memory management was before automatic reference counting, right?
Folks who are used to like Java would get screwed up in Objective C because they'd forget
about memory management. But this is I mean, I have to say like, the post here is pretty
pretty clear if it's one to one comparisons like sure, you know, react keeps a lot of
the web HTML a kind of syntax. But the structure of the code the way the way things basically
flow for lack of a better word, is virtually virtually the same. There's some weirdness
on like interactive controls like buttons. I'm not going to get into like which way I
think is better because I am not a react developer and it would be unfair. I will say that when
one thing I do like about reacts implementation that I'm not thrilled about the Swift UI is
that it's much more explicit, right? So for instance, and this is like, again, a dumb
contrived example. You have you have a button West's bun in react native. Well, you just
like feed it a function, right? A, you know, an object that is a function for the on press.
And it's literally on press equals, you know, buy West's sandwich. Swift UI makes that much
more magical. What do you mean by magical here? Well, so the syntax I find a little
hard to read, right? And again, this will be linked in the docs and you can follow along.
The equivalent in react native is like you lay out the button and then in the button
HTML tag, you have on press equals this dot on press right is the function he's calling.
Great. Love it. Makes sense. The Swift UI version is button, open parenthesis, action
colon curly brace. So it's obvious it's a lambda function, right? Like self on press
button, close curly brace, print. I know this is terrible. Another open curly brace. And
then it defines the text property, which is press me. Like, it makes sense. But I find
it to be like, if I was looking at a long view with a bunch of buttons like this sample
has, which again, I get it is is is contrived. I think a little more window dressing on like
just having it not be an anonymous function that you just throw in there would have would
make it more readable. Yeah, it is. It is fairly nested. And it's not exactly clear.
It's not clear. Yeah, you're right. It's less explicit. And as someone who's only played
with Swift a tiny bit and can try to read it, it took me a little bit to to interpret
like, what does this actually mean? Well, it also requires you to understand right that
so like the first one in this list here, it's button action, the one I just read out, that
action is actually passing. I'm going to call a lambda function. It's just a function, right?
Which function anonymous function, thank you, which is, you know, it's calling another function
called self on press. But then there's like no x, and then it closes the declaration right
with a closed parenthesis. And then it just has another open curly brace that says text
press me. Now, that is this code is laid out correctly. This is the way Xcode would lay
this out. So it's not a it's not a dig on the author at all, which is Rohan pachel.
I'm sorry, Pancho. It's just confusing because you have to know that this is the way Swift
does things. You have to know that that second open curly brace is now basically for lack
of a better term properties on the button, right? So you're just adding that as additional
stuff that gets applied to the button, right? Like you could, there's like all views have
properties like the stuff you would think about was right, like background color, blah,
blah, blah. But oh, yeah, of course. I like even the second example he gives here, where
it's the same thing as the first one. But then after you do the text, you also have
at the end of the close curly brace dot accent color. And it's you know, RG being a color.
That's see, to me, that's a pretty ugly syntax, basically. Like I would, I would prefer something
a little more verbose, I guess. But I mean, that's a nitpick.
Yeah. And it's also a little weird, too. It's kind of hard to tell like, what's data versus
other stuff that's wrapped up here, right? Like even the like the color thing, you're
passing arguments with numbers, and ratios and stuff, but it's all inside some constructor.
Yeah. And it's also a little weird that like, okay, so why is accent color dot accent color,
right? Why isn't it like, just, you know, accent color in the in the curly braces with
where the text is?
All right, well, then how do you feel about this stuff? I mean, is it fair to say this
is, this is gonna be the future? I heard some about like, like, as the as the watch platform
is developed more like this is the way to go for that direction. What does this mean
for the state of development targeting Apple's ecosystem?
Yes, on the Apple side of life, Swift UI is going to be the future. I think, you know,
this is how Apple does things, right? They release the new paradigm, the old paradigm
hangs around for a while. But it's, you know, if I if I was file new project in something,
which I did, I would go to Swift UI as quick as I could.
If you know, you've spent a lot of time talking about Objective C and using it, espousing
it here on the show. If you weren't already someone who was sort of playing in Swift,
or, you know, had had not really adopted some of the paradigms there, how much I'm trying
to get a sense how much of a change is this for just like your standard iOS developer?
Well, I think we can use another Objective C holdout, Marco Arment, you know, everybody,
you know, Marco Instapaper, you know, ATP. He's even switching to Swift. And he's been
resisting that for quite some time. And I completely agree with him. The writing is
on the wall. If you're an iOS developer today, and you're clinging to Objective C, and you're
not going along with the Swift program, you're going to be in bad shape soon. It is, Swift
is the way to go. I mean, it's, I still have some things I don't like in the language,
some things I don't like about syntax. But if you want to work on this platform, if you
want to take advantage of, particularly of Swift UI, and some of the new stuff on the
watch with native interfaces, you don't have a choice. So yeah, I mean, but I think there's
actually a bigger story here, Wes, not just iOS, but the whole concept of reactive components
and reactive development. This almost reminds me of a couple years after Rails became big,
all of a sudden, like, you know, ASP was doing an MVC version, right? And Python had MVC
libraries, sorry, MVC frameworks. This seems like, okay, MVVM is hanging on, it's trying.
But I think reactive programming has won. And I will concede before people email very,
very quickly, that the reactive style of programming brought to you by Swift UI is somewhat less
reactive than what you might expect in, let's say, React Native, or even how Rx Swift was.
But it's, I think we're getting there, I wouldn't be surprised in two years, if we go even deeper
into the reactive concepts. And, and just like MVC was the pattern that you needed to
know in, let's say, 2008. I think reactive programming, if you're, you know, if you're
a young developer, and you're just learning, I would urge you to take a look at reactive
programming.
Now, that can get confusing, too, right? Because there's, there's sorts of different styles.
There's the large Rx community. And maybe you would put the Elm architecture in there,
data flow stuff. So but you're right, there's a whole class of technologies that has changed
the way we view things, and especially recently changed the way we construct user interfaces.
Yeah, I mean, I, I'm curious what your thoughts are, I would consider like, React itself,
like the original React from Facebook, as kind of the reference implementation. I know
it's an old concept people are going to write in. But for kind of the modern, you know,
the modern, I don't even know, family genus species, how would how would you define that?
Hmm, yeah, I mean, it did start, I think the main part, I think of React, right, is, is
you're right, it's the reactive components in that it's less of this two way stateful
interaction that you've seen in other components and frameworks. And instead, your view is
just a computed function on whatever data that you have, right? So you can have some
data structure, some components that you feed into this layer that then acts basically,
as a peer function that then computes exactly what you want your page to be laid out. Instead
of having all the all the state that sort of wound up and delegated push down into each
of the little, you know, each of the little leaves on your tree of components that you've
wired up, you can just have it flow through. And generally, in just like a one way sort
of information cascade. I do think it I mean, it plays nicely with functional programming
in general, and I think is a nice, a nice toolkit to sort of manage your state a little
bit better and understand more of how your whole interface composes and works together.
But it's a pretty big change, honestly.
Yeah. And, you know, I'm, we've been talking a lot about iOS, I'm very curious about what
this is going to look like in the Mac world going forward. AppKit is old, like, like really
old. And yeah, it's, it's gonna be a thing. I think this is the beginning of a large transition
for Apple.
I think it is nice, though. I mean, clearly, they've been paying attention to some of the
trends in the industry. Obviously, they think that developers are going to want to develop
in this style, right? So it's nice to see them not staying still. It does make me wonder,
how do you feel about the general governance of Swift, you know, being developed out in
the open this sort of community, the way it's maintained? Have you looked much into that?
You know, I follow it as much as I can. I mean, I'm not really involved in that. I think
it's fine. I don't like the kind of air of to hell with the past, but I get where they're
coming from. And an example of this from Swift 4, which now we're on to Swift 5, is basically
what they did with for loops because they decided not to honor the traditional for loop
that you'd have in C, which I get it because in Swift, you probably shouldn't do it that
way.
Right. It's more of like a for comprehension in Swift, right?
Yeah. And they'd rather you use what I used, what they used to call blocks, but are now,
you know, lambdas, right? Like, um, which I even think they have a different word now
that I can't remember, but it's, you know, I would say it's calmed down quite a bit.
Like originally it definitely had an air of like everything old is bad and we're going
to reinvent the wheel and we're going to bring all this stuff over from, you know, like functional
languages.
Hmm. Yeah. So not, not a gradual transition, maybe a revolution and not an evolution.
Well, it's, it's, it's gone through fits and starts, but the reality is like Coco is still
an Oh framework.
Yeah, totally.
So like now it's Swift UI, a lot of those things actually I think make a lot more sense
and are going to be a lot easier to work with, but you know, this is, you have a lot of legacy
here and sometimes, and I'm trying to tread lightly here, but when I read the Swift mailing
list, it's like, I wish there was less of a, oh geez, I shouldn't say it, but less of
a, um, um, you know, to the barricades, rip them out of their houses, down with the old
in with the new kind of, um, attitude.
But the criticism of me, which I've gotten in the past would be, you just want to keep
the advantage that you've been doing this for 12 years.
Right. I mean, that's, there's a cost of that. You're going to have to learn a bunch of stuff,
whereas you're an established expert as it stands now.
Yeah, but it's, it's, see, the thing is like, on the one hand, it is not as different as
the people who gripe about it say, nor is it as different as the people who say these
differences are going to make all the difference claim.
Um, it, it just like, it isn't the case that by switching to these more reactive or functional
paradigms, we're not going to have problems, right?
Like my pet peeve with Swift, we talked about, I think before on the show is it is a very
safe language, but it is obnoxiously so.
So whenever I see other people's Swift code and sometimes mine, the way you get around
it is you just slam a bunch of exclamation points, which are basically force unwrapping,
right?
So you turn off the safety.
Ah, yes.
You, you pull the escape hatch and try to try to go that way because you can't get by
the compiler.
It's just a little too tight, right?
Like, like it's so weird where I like it in Rust because I see Rust as more like a systems
language and I'm like running servers and I want to crash and data integrity and Swift
is like, okay, this is an iOS app.
If it crashes, you know what?
We launch it.
Right.
That's interesting because you just might want to be somewhere else on the spectrum
of like safety and, and proof, right?
You want to be like, well, okay, there might be some things here where we can't totally
prove that it might not have some weird runtime error or something might happen, but it's
worth it to you to just be a more, more agile maybe you want to say, or just be able to
move faster, a little looser as you frequently update, change and develop whatever app you're
working on.
Yeah.
You want to be looser.
And like, I tend to do very little in iOS apps.
I try to keep them as dumb clients if I can.
So there's just like not the opportunities for like data corruption that might exist
in a server.
Um, also, you know, the art and business, right?
Um, there just is a lot more market pressure on price for the front end iOS app side of
things.
Right.
And as long as it works good enough, it doesn't have to be perfect because I mean, never will
be even if it types checks.
Yeah.
Yeah.
And it's just, you know, when you have to kind of fight with a compiler, you're, you
know, I could totally see if you're like Adobe and you're writing something in Swift, you
never want it to crash because you don't want customer support.
But on the other hand, if you're a dev shop or a consulting shop, you, you kind of, not
that you want things to crash, but,
Oh, I just love it.
Yeah, of course.
We love it.
We love it.
It's great.
You're in a market where you like there are edge cases, but then there are like edge cases
that like sure in a hypothetical world of Venus isn't retrograde and like Cthulhu comes
that will happen, but Swift makes you cover all of those cases, right?
Which is kind of,
Right.
Yeah.
You do have to, you do have to think through that.
Um, maybe not something for today's show, but there's an interesting idea of, um, if
you could have more, I guess like a contract system, I know racket has one, uh, Clojure
has Clojure spec, but being able to have more sort of all a cart safety for those times
where you're like, and I guess, you know, TypeScript is maybe an example of this too,
where you can, sure you can have it really safe with compiler options, but you can also
sort of gradually add types as you want to say like, okay, well I really need these,
you know, this core set to be super locked down.
The design is, is mostly finished.
Here's how I want it to work.
And I want extra guarantees that the compiler can help me with.
And maybe you have different edges around where you, you know, you don't need those
same sorts of guarantees.
That makes sense.
I don't think that's super, I mean, TypeScript is probably the best at it outside of more
niche languages, but I would like to see that applied more because compilers are awesome.
And a lot of this tech is really cool.
It's just maybe sometimes you don't need it.
So speaking of all kinds of different languages, we've got a bit of an update and change on
our seven languages challenge, isn't that right, Mike?
That's right.
So because Mike got seduced by Swift UI and couldn't do his homework.
You just, you just changed your assignment, right?
I mean, he still did homework.
That's true.
Actually, that is true.
I just ended up doing a bunch of Swift UI.
We're going to go to a two week model just so we can get a little deeper and not be so
rushed.
Yeah.
I mean, here I was like, I'm playing with Kotlin, right, but Kotlin targets all kinds
of different things.
There's lots of different ways to use it.
And I only just started trying to build a little toy Android app with it.
So I'm going to, I'm going to take a little time and see if I can flush that out a little
more.
We'll see.
We'll see.
Awesome.
Yeah.
And frankly, you know, it's funny.
I thought this was going to be my slow season.
This WWDC just drowned me.
There is a lot going on.
So yeah, I think this, this makes sense.
It'll give us a chance to sort of feature these things a little bit more.
And as we're trying languages that are really out of our wheelhouse, I want to have time
to actually give them, you know, some of them, they're so different that you need time to
sort of soak it in and experience it.
And it's not just like something you can review by using a GitHub page and solving a couple
academic problems.
Yeah.
So make sure you subscribe, coder.show, slash, subscribe.
You can find our RSS feed, other ways to follow us on whatever platform you happen to use.
That's the easiest way to find out when a new episode of Coder Radio appears in the
feeds.
And that way you can make sure you're up to date with everything we're doing, the latest
programming challenges, all the wacky feedback, and what kind of Mac did Mike buy this week?
Or maybe it's not a Mac.
Maybe it's another Linux machine.
You just can't say, and that's why you have to show up here for Coder Radio.
There's just no other way to do it.
Now, in between, there's tons of other great Jupyter broadcasting shows you can find at
Jupyterbroadcasting.com.
Make sure you check out User Error.
I really enjoyed the most recent episode.
And always, when you're short on time, check out Linux Action News.
Short, easy, and a great way to stay up with all the stuff happening in the Linux and open
source world.
You can also, of course, find both Mike and I on Twitter.
I'm at Westpane, and Mike, you're?
I'm at Dumanuco.
Yes, you are.
Thanks everyone for joining us.
That'll be it.
Come back next time you're here.

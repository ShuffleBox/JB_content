This is Kota Radio, episode 369, for August 5th, 2019.
Hello, and welcome to Kota Radio.
Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business,
software development and related technologies, and probably a few other things this week,
because while I'm normally joined by Mr. Michael Dominic, today he's out sick.
You gotta heal. You gotta take your health seriously.
As my perhaps reluctant co-host knows very, very well.
Welcome to the show again, Chris.
Hello, Mr. Payne. My plans of slowly poisoning Mr. Dominic while he travels
so I can regain my place here on this show have come to fruition.
I assumed he was just in danger living in Florida anyway, right?
That's not safe down there.
And whenever you got a kid, you're just gonna get sick.
You're like a target, man.
You're like a target. But I'm glad I could be here.
And really, I kind of miss doing the show, so it's nice to have an opportunity to come on,
although it's not the same without Mike.
It certainly isn't.
And actually, it's kind of good you're here today, because let's start with some feedback.
There's some feedback you might be able to help me with.
All right, so over on kotoradio.reddit.com, that's right, we do have a subreddit,
user Borkdude, who I will note is a prolific member of the Clojure community.
You'll see him making all kinds of neat utilities,
writing excellent blog posts and helping users out on the Clojure subreddit all the gosh darn time.
He writes, I'm looking for a good mic for voice recording,
since I'll be a guest on a podcast soon.
Since you sound good in your shows, thank you.
Can you share what mics you're using?
And, you know, I know a thing or two about this too.
You've been doing this a long time, and it can be especially tricky.
It's one thing to do it when you got, you know, production budget,
and it's another when, you know, you just need to sound good enough.
Yeah, and first of all, it's really kind of him to consider that on the behalf of the podcast.
Oh my gosh, so much so.
Right, thank you for just thinking of that.
Plus, it's kind of nice, even if you're not like going to be a guest on a podcast
or you're not planning to record an audio book anytime soon,
it's kind of nice to have a decent microphone for meetings, jumping on a, you know, a call,
maybe you want to do a call from your PC to your desktop.
It's just nice to have a good microphone in general,
but you don't need to spend hundreds of dollars.
Right.
So there are a couple that I do recommend.
I was trying to remember before the show, and I figured it out.
I'll put a link in the show notes.
If you just want to get started with something that hooks up over USB,
the one thing I'm going to ask of you is make sure you buy a microphone that has a headphone jack
so you can do what's called local monitoring.
That is so important.
Right, and also if you're using Linux or something like that,
it just makes things a little bit easier because it just shows up as an output device and whatnot.
But I really like for the entry level that still sounds pretty great,
like you could start a podcast with this, the Audio Technica ATR2500 USB Condenser Microphone.
It's $70, primeable.
That's hard to beat.
Yeah, and it'll be your audio in and your audio out.
It's all you need, so you don't have to buy an audio interface or anything like that.
It's really nice and straightforward.
Another solid microphone that I've used for years that's a little more expensive, similar thing,
the Rode Podcaster, pretty good microphone.
And then if you want to step things up from there, there's things like the Heil PR40 or the –
what's the Rogan mic that people love that doesn't work for my voice?
Oh, the SM7B?
Yes, so there's tons of good mics when you want to start going up.
And just one thing to keep in mind is like I just said there,
like not every mic works for everybody.
I bought this nice microphone thinking, oh, I'm going to sound great now,
works great on the Joe Rogan podcast.
I put it on and I hated the way it sounded.
Yeah, you're like, no, this is not for me.
So you will probably have to experiment,
and there are probably a couple different price levels, right?
You have nice USB ones, and if it's just sort of like I'm an occasional guest
and for conference calls, that's the level.
If you're doing something more serious, then maybe you want to look into XLR-based mics
and getting a real interface.
But then you're probably going to be out, what, 300, 400 bucks by the end of it?
Yeah, as you well know, there's – well, there's a price for everybody, really.
But yeah, 300-something bucks, you could probably get something pretty usable.
If you're thinking about starting a podcast,
maybe your business wants to do a podcast or you personally want to start one,
I have to recommend Friend of the Show Dan Benjamin's podcast method.
Just go Google that.
It's on the 5x5 network, and rumor has it, rumor has it,
a little birdie tells me that it's about to start back up.
It's been on hiatus since 2017, but rumor has it it's about to start very soon.
And the podcast method, 26 episodes deep,
so it wouldn't take you that long to go through it.
In 26 episodes, you'd basically know how to run a network.
I mean, it's really – it's an in-depth thing.
And he covers everything from gear to technique.
So that's the podcast method.
Yeah, we'll have some mics there in the show notes.
Again, it was the Audio Technica ATR2500 USB.
And I really recommend you get the USB edition
because you're going to need to get yourself a USB audio interface
if you go with anything that's XLR or analog,
like a headset that comes in over like a microphone plug,
like a little tiny one that needs to go into something besides your machine
that has a built-in port if you want it to sound decent.
Yeah, you need to know how you sound.
Yeah, you've got to be able to hear it.
Excellent.
Well, that's a great question.
Good luck.
And I guess we look forward to listening to you on that podcast soon.
And you say he's busy, he's active, I should say, in the Clojure community?
Oh, yes, very much so.
Put a link in the subreddit on the podcast.
Submit to the subreddit.
Yeah, once it's out, let us know and we'll recommend it here for sure.
That's really neat.
You've got people in the Clojure community listening to the show now, don't you?
I love it.
Well done, sir.
So I wonder how the old Clojure community felt about Mike's take.
That's a good question.
We got some good feedback on Twitter about it, too.
I'll wait for him to come back.
Yeah, there's some other feedback, some people were being helpful.
So we'll definitely talk more about that.
Helpful?
I mean, sometimes, sometimes it's helpful.
Yeah, all right.
You're so jaded.
No, you know, you know, I guess.
Well, Mr. Payne, since Mr. Dominic isn't here, is it okay if I bring a couple of stories to the class?
Yeah, of course.
There's one that you found, which is the exact opposite of a story I found.
Oh, boy.
So I thought that'd be kind of interesting to talk about this week.
And it's about the plight of browser extension developers.
So the first one is a link that you found.
Google and Mozilla are failing to support browser extension developers.
And it's a good case.
It was just recently published, and you'll have a link in the show notes.
But I grabbed a couple of things from it.
And I thought this would be good, like, you know, fodder for conversation.
So the author writes, it's a regular occurrence to hear open source developers are selling their browser extensions,
only for their users to then be exploited later on by new owners.
Yeah, right.
We've seen a ton of these lately.
You build up, you know, a handful of users, you monetize them, you sell them off.
He writes, we are, or she writes, we are witnessing the failure of browser vendors to recognize the value of our labor
and the important role it plays in a healthy browser ecosystem.
They go on to say Mozilla has deprioritized the placement of donation buttons,
and the Chrome Web Store and the Microsoft Store do not offer features for supporting extension developers at all.
How important are extensions to why you use a web browser?
They are, they play a small role.
Really?
I mean, I can think of a few that we use pretty regularly, and they're not, it's not essential, but it would be a factor, right?
Like if you, once you have started using extensions, unless there is a direct equivalent or the extension is available in both places,
it's at least a small disincentive to shift.
I mean, for me, it's pretty strong because a big part of my day job is collecting information from the web
that I'm going to use for, you know, consideration in a show later.
So I want to do research or reading or I want to mark it up or I want to save a link, and a lot of that workflow uses extensions.
And for me, it's sometimes been like the thing that keeps me on Chrome, for example, or what kept me on Firefox for so long.
In fact, there's even forks of Firefox to support the old Netscape plugin API.
Oh, boy.
So it's obviously super important to some people.
And this author is making the case that there's really no support from the browser manufacturers.
Yeah, I think the analogs to, you know, some other things.
We've seen more platforms that have extensibility, things like Alexa skills or, you know, good thinking.
Just in case.
But it does seem like some platforms expect there to be this sort of user provided content.
Thinking about how that gets monetized, if you want it to exist, seems like it makes sense.
Anything of certain complexity, port requirements, needs a form of monetization just to be sustainable, I suppose.
And that's really where the issue kind of comes up.
Now, so that's the story you found.
The story I found, which is like an exact contrast and maybe explains the entire problem, is half of Google Chrome extensions have fewer than 16 installs.
Wait, 16?
Yeah.
In all, about 50 percent of all Chrome extensions have fewer than 16 installs, meaning that half of the Chrome extension ecosystem is basically a ghost town.
According to a recent scan of the entire Chrome Web Store conducted by extension monitor.
Interesting.
Now, I do wonder, I'd like to see some more detailed statistics because it's kind of hard to say.
And it does, I mean, it does make sense, right?
How many extensions do you use to install?
A handful?
More than I should.
And probably most of them or the, you know, the most essential ones are the popular ones, right?
Like there's a couple of nice ones that you get like, you know, HTTPS Everywhere maybe or there's a certain ad blocker that you use.
But it's a rapid decline of like...
I've got 15 that I can count.
Oh, wow.
Just in my toolbar.
Okay, so you have a few more than I do.
It's a markdown link generator, LastPass, the template extension, which is just a remarkable piece of engineering because you can make your own extensions out of it.
And it's how I can copy entire sections of an article and then it will go get the URL and the title of the document and then I can just paste that whole thing.
That is nice.
It's a really nice extension and there's a good community around it.
The other one I have is Imgur Reupload.
This is one I use to share like an image with the team a lot.
I'll capture something and I'll use this just to repost on Imgur.
So you capture this and then it just gives you a little selection window and then just repost it up on Imgur.
That's the URL in your clipboard.
Right, skip all the part where you like take a screenshot and save it and then open an Imgur tab and then upload it.
Right.
I now have switched to using a pinboard extension.
I used to use a JavaScript bookmark or whatever you call them, but now ad blockers and Chrome's built-in protection, they block all that.
So I have an extension for that.
I have the Reddit Enhancement Suite because I use Reddit enough to just make it a little bit better.
I'm also using uBlock Origin because...
I don't think you need to justify that one.
It makes it more readable, right?
Yeah.
And then a tool that we use internally, Digo, D-I-I-G-O, which is a highlighting tool.
And then I have WebCache Viewer Clear so I can either clear my web cache or I can view the web cache version of a document.
Then I have some buttons to subscribe in Feedly.
I have an Evernote extension, Dark Reader, and some YouTube plugins as well as Seven Geese, which is our OKR software, and Grammarly.
Nice.
Okay.
Well, that's fairly reasonable.
And a lot of those, right, there's a couple ones that are like open source and have communities.
There's several probably that are proprietary or at least supported by a company.
And you know how bad I hate Grammarly.
You know that.
Yes, I do.
I need a band.
Yeah.
So I kind of I am an edge case.
I'm gathering from this article.
I think you are.
I probably have like six or so on that order.
Yeah.
And when you do you sync them?
Do you sync them to a Google account?
So when you open up like or Firefox accounts, when you open up your browser, they resync?
Yes.
Okay.
That's what I used to do.
Good and bad, actually.
It is good and bad.
So the article goes on to say further 19,379 extensions, which is just over 10 percent,
of literally zero installs and further 25,000 extensions, 13 percent have just one user.
And the scan found that there are very few Chrome extensions that really have managed
to establish any really large dedicated user base at all.
And according to extension monitor, around 87 percent of all extensions have fewer than
a thousand installs.
Now, you contrast to the other story that says the browser manufacturers aren't properly
supporting them.
Why would they?
There doesn't seem to be user demand, unfortunately.
Well, it is a kind of a funny thing, right?
Because most of the people that use browsers aren't super into technology.
A browser is like a key component of a computer.
So you do not need to be an expert or even interested in doing anything but going to
Facebook to use a browser, right?
So you may not know extensions are a thing.
And I think perhaps rightfully so in the push to security, extensions have been downplayed
a lot, right?
I mean, unless you already know they exist, maybe they get suggested to you, maybe.
Yeah, I think you just nailed it in two different ways there.
So the number one thing that you said is the user base.
There's so many users that the power users that would be using extensions would be a
minority because they're just a small fraction.
And then to your other point, you're right.
They have been sort of reduced in functionality.
They're not quite as powerful as extensions were in the first iteration of browser extensions.
They don't fundamentally change the game necessarily.
And a lot of these are really more about tying into web services.
When I like LastPass, Grammarly, Deego, Evernote, these are really about tying into web services
more than anything else, Imgur.
Yeah, right.
So unless you're already running a web service then and then that falls into the category
that we already talked about.
And if I wasn't a user of any one of these individual services, I wouldn't bother with
this extension.
So again, I'm going to be a minority slice of the overall browser market.
Right.
Because it's not really a generic browser functionality versus your, you know, your
templates tool, for instance, which is right.
That's just kind of extending and making your browser more useful.
And you can also see where the incentive is for the browser manufacturers.
It makes sense to incentivize your LastPasses and your Evernotes and your Grammarly's to
create browser extensions.
But, you know, Joe Adblock creator who gets a thousand users just not worth Google's time.
From the developer perspective, too.
I mean, it just seems like I might write an extension if one doesn't exist and I just
like really need it, need to do this functionality and I can, you know, slam together some JavaScript
or something.
But I don't think you would do it, you know, when extensions kind of were first coming
onto the scene.
I'm thinking like early Firefox, you know, as they're getting developed.
They were exciting.
But now we live like in an open source world.
They're old news.
Yeah, they're old news, right?
I mean, no one thinks about it.
You're familiar with like popular open source projects, but you don't get the same kind
of control, right?
You're forever dodging around and playing ball with whatever the browsers want to do.
And you're always going to be sort of, you know, second name.
You're like, sure, you make this cool project that you spend a lot of time on, but it's
just an extension that maybe works in one browser.
I guess it's in a way the market works these things out.
I think so.
But you have people on either ends that are, some people are suffering and some people
are prospering.
And it's interesting to see both percolate in one week in the different links that we
collect.
And it does seem, yeah, it's like it makes sense it's not working.
If people want it to work, then there are probably things we could do.
And it doesn't seem like there are people that care that much.
You also found a link in here about a medium post that was, I think the title was all of
the best engineering advice that I stole from non-technical people.
And it reminded me about one of my favorite bosses back in the day when I worked in IT.
She was not necessarily inherently technical.
She joined the company.
It was a cooking company.
They made food and well, they're out of business.
So the company was called Dream Dinners and the idea was you'd go on their website.
This was when web applications were very new.
You'd go on their website and they'd have a monthly menu.
You'd put together an order.
You submit it to the system, you pay for it.
And then you'd go to one of their franchise locations and actually assemble them.
Whoa.
And then you put it in a bag and take it home and you got like the month's dinners.
The downside was you had to go do the work.
They later started doing the work for you trying to be competitive.
But the other side was like you just spent two hours and you had a month's worth of food.
All the ingredients were there for you, right?
You kind of just put them together.
You added your own garlic if you liked – there was no limit.
So if you wanted four scoops of garlic, you could make an extra garlic.
Or if you don't like garlic, you leave it all out.
So that was the benefit.
And you could be kind of menu selective and get something that was sort of tailored to your needs.
I'll tell you the one time that we really found it very useful because I got an employee discount
was right after Angela gave birth to our first son.
And it was like we just wanted to not have to worry about food for a month.
And we just stacked – before the due date, we just stacked the freezer full of dinners.
That's great.
And so there was a pretty significant technology backend that I was responsible for
that made it all possible because the franchise was doing well for a while.
That's a different story.
Anyways, one of the things is the gal that ended up being the IT director
started more in the food side of the operation.
Oh, yeah, sure.
But she was a very clever, intelligent individual.
And she worked her way up into the IT position because she was always –
Elaine was the one that everybody went to to go fix their computers.
That person?
Yep, they're competent.
They figured it out.
And as that position evolved and as that company grew over time,
she retained the IT management position and got a team under her.
And as the server side grew out, I became the Linux server admin.
And she was probably one of the best bosses I've ever had.
She had a really good sense.
She had a good intuition of knowing when to trust what the team was saying
and when to ask further questions and derive – she just listened.
She listened and was able to derive what our intention was
and ask some details, get the right things kind of out of us.
And it was a really good combination while it lasted.
It didn't last forever.
Again, that's another story.
So this article you linked,
all of the best engineering advice I stole from non-technical people.
Number one, people like us make our money in the seams of things.
And the whole thing goes on about how they brainstorm,
how they do their work, and it reminded me a lot about listening,
asking the right questions.
Even if you're not a technical person,
you can actually still be a really solid contributor in that environment.
And I mean, there's so many things of business and just life are like process.
And everyone has to do those things.
Building a house or building a server.
Yeah.
And there are some people I think that are receptive or intuitive
or open to learning, accepting when they don't know things,
and listening like you say.
And that means you can thrive in those environments
and you can figure out who to trust and who the experts are
and know who to listen to.
You can perhaps effectively, you know, bridge information.
Right.
Yeah.
Yeah, you get a sense of who is authoritative on what topics
and a sense of their track record over time.
I think something that we get kind of wrong in our industry,
in our community is, oh, you weren't around in the days of small hard drives?
You know, I used to only have 640 kilobytes of RAM,
my onboard storage was only 2 megabytes.
Yikes.
And we get kind of caught up in, you didn't earn your way.
How dare you come in here with your cloud?
Right, right.
We've suffered and somehow that means we require that from everyone else.
Huh.
That is what it is, isn't it?
I mean, it happens all over the place, right?
That's horrible.
And there is a certain aspect of like you do need to put in your time
to learn things and get experience.
Wisdom or whatever that just take time to get.
But at the same time, people, you know, there are different paths all the time.
And I don't know about you, but I frequently am impressed.
I mean, I'm thinking specifically in like software,
but really in other fields too.
Sometimes the people who are the best at it, you know,
didn't have the traditional path, they didn't get the right degree or whatever,
you know, but they've migrated later into the field
and could be some of the best, most interesting perspective people.
Does that still work now?
That's one of the things I've been wondering.
Like if I was to hit the reset button,
would I have to go through a certain educational route to even make a break now?
Because I just went right from high school into work.
And then I did college sort of as part of additional training that work paid for.
That's nice.
It was like, you know, not something I didn't go high.
I didn't go middle school, high school, college.
I went middle school, high school work.
And then over a period of six, seven, eight years attended different college courses.
And that was the trajectory that worked perfectly for me.
But I don't know if starting today, if you could even pull that off.
You know, I think that's definitely been true.
And like a bachelor's degree does sort of feel like a little stamp you have to get
just to get your resume looked at sometimes.
I think that has changed for the better somewhat.
And audience, if you agree, disagree, let us know.
Coder.show.com.
I think the tech industry in particular, at least in some of the larger companies
even has more of a, you know, a reflection of that.
And if you can get away maybe from the more traditional companies
and get to a more modern tech company, I think there's a more fresh perspective
because it's almost like you can code or you can't, right?
So especially with this culture of, you know, like intense interviews that do maybe
not the right relevant challenge.
And that's another topic for another show.
Of course.
But you can just prove yourself.
Or in the world of open source too, right?
You can be like, well, look, yeah, I don't have a CS degree.
I maybe don't have a degree at all, but I've contributed to these six projects
and everyone likes me and here's my PRs.
So this is where I was going.
Or is that the other route?
Because I look at some of the things that are really making money
at the infrastructure level.
Disclaimer.
And there is no five years.
There is no five years to be had in some of these technologies.
There is no like long experience because they're so new.
And I hate to say this as somebody who's been doing this for a long time,
but like in some ways too much experience is almost a deficit.
You have to be willing to throw out, right?
Like you can't stick to things the way you do in other fields.
Because if somebody like a company were to hire me right now to like move
their IT infrastructure to the cloud, I would just essentially recreate
their on-premises setup in the cloud.
Like I do some virtual machines and yeah, and that would be my approach.
Okay, everything's in the cloud now.
It's like I'm almost –
You almost need somebody who doesn't have too much experience.
Does that make sense?
Right.
Well, because they would be open.
They would be like, well, what does the cloud say?
I'll go look at the documentation for whatever provider and they're probably
going to point to like, yeah, you could bring your database over
or well, we'll sell you a database.
No problem.
We have it managed.
It has backups.
Here's how it works.
Here's the availability of it.
I don't think it's impossible for the old dog to learn new tricks.
It's just a matter of time and energy that you have to spend on trying
out new things when what you've been doing for so long works.
So for an example, this is just a small one, but we had a system here
that was a very traditional storage approach to –
it's a box that runs free NAS.
It's an appliance.
We put storage on it and we don't touch it.
And it was sort of an old school way of thinking that we had another box
that connected to that over network storage that ran the virtualization.
And it was two really loud hot boxes running here in the studio
that we just didn't need.
And then we decided, well, let's revamp this approach and let's take a look
at how we can do all of this on one machine and utilize containers
for the applications, which if we're not using VMs means we could stack
all of this on one machine.
And it sort of shifted the way I look at building out infrastructure
and the way I look at application portability.
And it wasn't so much that I wasn't willing to try it.
It was more that I hadn't really had an opportunity to try something
different from what had been working for so long.
Right.
And there is still some wisdom to the don't fix it if it isn't broken.
But that only depends, right?
Everything's a trade-off, a cost-benefit.
So there is a cost, right?
Like we had to redo a bunch of things.
But the benefit has definitely outweighed it, I think.
I mean, I don't think it's an exaggeration to say it's like we're getting
10x the use out of the machine now.
So if we're going to run that, so we've consolidated down to one machine,
so we're using less power and we're getting 10 times the use.
I also just feel better about it too.
Like if we needed to go rebuild it again, it wouldn't be a big deal.
I mean, we'd have to replace the hardware or whatever,
but the software part would be easy.
I think the part for me was I had like a, oh, I get it moment.
And I think that might be what's important about taking somebody who's used
to doing it one way, like you and I, we both know an individual who he'll
only do something one way for the rest of his life until like some really
earth-shattering reason came up.
And if it's personal life stuff, if it's IT stuff, and that's not an
uncommon way of looking at things.
And for me, I just didn't quite see the utility.
It wasn't like I wasn't going to do it.
I just didn't quite see the utility until I had like the, oh, I get it moment.
And for me, that was working with Docker Compose.
And having that experience of ripping down a dozen applications running
on a server that were in the middle of doing something even in one case.
One time we did it, they were in the middle of processing something.
We ripped them all down and then used Docker Compose to just pull down
the latest versions of those images and stand everything back up again.
And everything just picked right back up.
Like in three minutes, we had new versions of all of the software.
We had the latest versions of all of the software.
We had proven to me that the data and the config were both separate
and safe and that the application was ephemeral.
And it was one line on the command line because everything's in this
super easy to read YAML file that I literally can just…
It's clear, right?
It just kind of tells you if you know anything about Docker at all,
it's all laid out.
It's all there.
You don't even need to know anything about Docker.
You just need to know things about the fundamentals,
like the basic fundamentals.
And it's all clear to you.
It's like, oh, this is how it works.
Oh, God, that's so simple.
And so when I was able to tear it all down, update it, and stand it all up
and have it just pick right back up in the processing,
it resumed – this particular job was resumable.
It changed everything.
It kind of makes me think too of like a little bit of like when I first
discovered like the Unix command line and I had all these different tools
and I could put them together.
They would work together.
And that's true with Docker too, but Docker Compose just takes it
to the next level.
I mean, it's right there in the name, of course.
It lets you compose them together and you can feel like, oh, yeah,
here's all my little pieces that I need for my distributed system,
which is what we are all building these days,
and then it helps you cleanly latch them together.
My bad, really, for not coming up with a reason to try it sooner
because I thought I had done a good enough job reading and conversing
about it that I understood it.
Yeah, I mean, you only have a few related shows.
Yeah, and I got the concepts.
Oh, you know, you tear down the software, stand it back up.
Okay, I get it.
I get it.
But when it was software that in the past I would spend a week configuring,
I would spend like five days in the evening.
Tweaking, tuning, getting it just right.
That I had personally spent my time over the years managing, right?
And then to see this difference where it's like 30 seconds
and everything was right back up and running,
that's when it really became practical to me.
That's when it shifted.
I'm like, okay, so I'm never doing it the old way ever again.
Never going back.
And there's just, you know, we were talking about this on Linux Unplugged,
but I think it took time for these things to work
for the kind of tasks you're doing
because they're techniques born out of scale
where if you do it the traditional way at some point,
it's just not going to work.
There's too many moving factors.
There's too much moving state everywhere.
And I think it just took some time for the tooling to get to a place
where even if you're doing this all in one box
and you just want to go real quick and you don't need to spend hours
customizing every little thing, you don't have to.
And it's not just for web applications.
We're kind of thinking about using Docker for even some recording uses.
I don't think we talked about this.
No, that's true.
We are creating for the purposes of recording, I should say.
It's really for production purposes.
It may be consumable by others,
but it's really for our own production purposes.
And we're going to nickname it the Jack in the Box
because it's a jack audio system,
a rather sophisticated jack audio system,
but not too sophisticated.
It is in a Docker layer that our hosts can install on their system,
connect their in and outs to,
and essentially have a Jupyter broadcasting
contained recording environment.
I mean, really, it's kind of living up in the name of Docker, right?
And that's the whole thing.
It's like you just, all right, we have some hardware.
We need that.
You take the container.
You've got to set up the right sort of actual docking interfaces, right?
Get all the right supply lines,
access to the sound devices in this case, for instance,
but then the software part is unchanged.
It's the same.
Now, it probably won't be so easy because Linux audio never is,
but it's super useful that we could just do that
and have it reliable and not have to do,
especially when you might be running some software that, you know,
either it's proprietary or you have to custom compile it
or you need a lot of install dependencies that may or may vary,
you know, may or may not vary between distributions.
It gives us a few tools, though.
The first, using Jack, which is an audio subsystem for Linux,
it allows us to do equalizing and compression.
It allows us to sort of guarantee a certain sound
that gets sent out to the live stream
while also recording a certain dry audio for post-processing.
So that's pretty fancy right there.
There's certain things we can do with it down the road.
But there's other things we can do that are kind of down the road
that we're maybe going to use, maybe we never would.
But if it's a Docker image that's actually up on the Docker Hub,
in theory, West could tweak something,
send it up, and then tell the host, okay, go update your Docker images.
They go update their images, and now they've got the latest tweaks
that West has applied to our recording layer
that they can run on their OS.
And that's pretty powerful, too,
because it allows us to sort of neutralize the distribution
because different hosts run different distributions.
Yes, they do.
Hey, Mr. Fedora.
Hey.
It lets us sort of normalize that out.
And it's pretty far from any kind of normal use of Docker that I've seen.
Oh, yeah.
No, I mean, a lot of those mounts that I'm doing there,
you wouldn't want to do that in production.
Like I said, it's not a web application.
It's not something you're going to host.
But it's something that maybe you'd set up on a ThinkPad to do recording.
Okay, so related.
I've been playing a little bit with Podman,
and I think technologies you should try that, you know,
maybe are a little outside what you're comfortable with now.
You should check out the Red Hat container stack.
Really?
I think you might like it.
Okay.
We should probably explain what Podman is
for people that aren't familiar with it
because it's not that different.
It's still container-based.
It's still the standard containers as you know it,
but it sort of replaces the Docker compose tools in that layer, right?
We can get to the compose part.
But really it replaces Docker.
So no Docker daemon?
No.
So that's one of the big things.
Podman is a daemonless container engine
for developing, managing, and running OCI containers.
Don't say Docker containers.
They're OCI containers on your Linux system.
There's a couple of really neat things.
So first of all, the daemonless stuff.
That's nice just from security, from many aspects.
Podman has been designed, it's newer, right?
So it's a little more modern.
It takes really nice advantage of all the user namespaces,
all that stuff right out of the box.
And they've done some neat stuff
where you can run Podman without being root.
Now you can run it as root and it still supports
all the nice sandboxing and user namespaces,
but you can also run it not as root.
Now you probably wouldn't necessarily want to do this
in all production scenarios,
but they've put in a bunch of work
to make that work behind the scenes.
So one example is like network namespaces
are used all the time in containers, right?
Now you can create one as an unprivileged user.
But you can't make the virtual Ethernet pairs
that actually are used to bridge the network namespaces
unless you're root.
So they have implemented basically a user space
TCP IP stack to provide the same connection.
And so there's a couple things like that.
There's like a fuse file system
that gets used for another feature.
What runs that?
What runs that user level application if there's no daemon?
I don't know quite how the process hierarchy works out,
but that's all it is because that's all containers are.
They're processes in the right namespace
and under the right cgroups.
I should look more into that.
Curious how that sounds.
That does sound very appealing.
Well, what's nice then too is like so you can just run it
and then just install Podman.
You can then start pulling down its supports
depending on which distribution you installed.
And you might have to go configure like the Docker registry,
but it's one of the default ones.
You basically just go tell it which registries
you want to talk to,
and then you can use it exactly like Docker.
It has the same commands.
Even some of their docs tell you to alias Podman for Docker
so that you just use it all the same.
So that was my question was like one of the things
that makes Docker great is the command syntax is simple.
And it's just because it's so popular,
it's kind of become the de facto.
So they're just like halfsies.
Yep, that's ours now.
Well, that's kind of nice.
So yeah, you can just install it, start playing with it,
run it, and it's nice.
Were you doing this on Ubuntu?
Yeah, they have a PPA you can install, no problem.
I noticed I think it's on Fedora 30.
I think it's already on Fedora 30
because when we were messing around with our new setup.
Oh yeah, it definitely is.
And they've got some other tools there too.
So there's a building tool that's specific.
Podman can build too, but they have Builda.
Now it supports building from Docker files, which is great.
But they also have their own support
so you can do really easy stuff like starting from scratch
or super minimal images.
And they're using that for integration.
So there's Ansible container,
which is a way to use Ansible to build containers.
That was kind of hacky the way you had to do it through Docker.
And this, it's basically just sort of commands.
So you say builda, run this command in this container
that we're working on right now,
and then you can commit those changes back to it.
So then you can use some sort of interactive script
if you have some more dynamic scenario.
Oh, that's really nice.
Or if you have existing Docker files,
you can just build them that way too.
Okay, so it seems like super obvious if I'm using Ansible,
this is a lot cleaner.
I'm not still 100% clear.
Like if I'm me throwing up some images on a Droplet
or a Linode VPS,
I'm still not super clear why I would use Podman over Docker,
especially because the Docker Hub is reactive.
Well, so you can still interrupt with Docker Hub, no problem.
Oh, really?
Oh, yeah, totally.
It just natively supports that.
It even also makes it easy if you already have images over.
So you should first know too,
because it's more OCI-inspired and compliant,
the containers are under a different path.
So when you first install Podman,
you'll try to see if you have anything
if you've been using Docker and you won't.
But you can tell it to look at the Docker stuff,
and it makes it easy to transfer.
So you can pull from Docker Hub,
you can pull from the Docker daemon on your local system
and move images back and forth between them.
Oh, really?
So it's easy to move over?
Oh, yeah.
Oh, that's nice.
Okay.
I mean, so I think it's just kind of a cleaner design really.
So it's a little bit more minimal.
You don't have this root daemon running all the time.
But for you, it's probably not.
So I think it's still in the play with and evaluate.
It does have some stuff.
So it's got Pods, right?
Pods is right in the name because Podman is built in,
you know, it comes from Red Hat
and Red Hat's Kubernetes player, right?
I mean, OpenShift.
So it's very much, you know, built in the Kubernetes era.
So it also supports Pods,
which are much like the analog in Kubernetes
where you have these containers sort of joined together.
So it can be used somewhat similar to Docker and Compose,
but I don't think the level of tooling for that specific use case
is quite as nice as Docker Compose.
So maybe not quite there, but there's a lot of neat tech.
And if you, you know, need to do something a little more complicated
and you maybe need to customize,
you really care about how your containers are running
or you're concerned about security,
these tools are pretty neat.
Yeah, the security aspect of it is very appealing.
Also, I tend to agree with your assessment
that a lot of the tools that I see come out of Red Hat,
I have two feelings about them.
One, God, I wish we had that a year ago.
And two, that's a really nice, tight, clean design.
Like it's really clean, easy to understand, sensible.
Not for everything,
but for a lot of the tools on the command line,
that has generally been my impression.
So it seems like it is something that might be worth giving a little bit of a go.
With my workflow of like having these compose files that I go to,
that this is like, this is this stack of applications
and I have another compose file for that's another stack of applications.
That's the part I think that would be missing for you.
You know, because Docker Compose adds its own layer of orchestrating.
So if you were using Ansible or some other things, right,
and it sort of takes it apart.
So instead of like, oh, I want this container running all the time,
you know, in order to check on fail or restart.
In the Red Hat model, the Podman model, they're like,
well, you already have systemd, right?
Like, that's already a thing. Just do that.
Systemd is great at it and it does that for your other services.
And that's what I'd prefer.
Yeah, right. So it plays really nicely maybe if you already are using systemd a bunch
or other configuration management tooling.
Or alternatively, if you want to run systemd inside a container,
which can be a little bit difficult and hacky sometimes with Docker,
Podman supports it right out of the gate.
You know, it makes me really think that it's worth spending more time
getting into Ansible too.
Like, maybe it's worth even for our small infrastructure.
Oh, yeah. No, I mean, I think it is.
There is certainly overhead in learning new tools and, you know, having to apply them.
And there is a certain, you know, you have to assess what can be tricky.
And I think as Docker Compose is nice, it's working well for us.
But if we do a little bit more than Ansible makes sense.
Yeah.
It's just that like, right, when you, if you don't need to customize,
then you want a tool that kind of hides a lot of the stuff from you.
But the second you have semi-complicated customization needs,
you want a tool that's a little more flexible and ready to go.
I mean, the most we have is weird mounts, right?
Yeah, so far.
Now, where Ansible then gets really nice is right now,
we would reimagine machine and then install a few things,
make a few manual tweaks maybe.
And then from the point of starting our Docker Compose,
that all would be totally the same.
Ansible would just bridge that gap, right?
So that we could have the whole system up and running.
And you can see it's one of those things where it's like,
if you're doing one system, it's still better, but it's less better.
And if you're doing 10 systems, it really matters.
And if you're doing 1,000 systems, then there's no other way to do it.
So what about a scenario where I'm developing locally
and then I want to deploy on a remote system?
Is there a particular advantage to using Podman, do you think?
You can, you know, you can have it just do less, I guess, right?
Like you can just install it.
You don't have this daemon running.
And the rootless aspect would be nice.
I assume it must be like you add your user to a group, then you can use it.
You don't even have to do that.
Oh.
Yeah, that's what's nice, right?
And so you don't have to worry that like you're having all these people
that you've added to the Docker group are now, you know, $2.
Yeah.
And there's a good talk that Red Hat has out,
and I'll try to find it and add a link to the show notes,
kind of talking about some of these downfalls.
The Docker socket is really just a security nightmare in so many things.
Because Docker is so hooked into all these low-level kernel primitives.
And it's going to be an ongoing soft spot too.
Yeah, you can do stuff where you like change users or get, you know,
new permissions that under normal circumstances get logged or audited
or the kernel is aware of.
But because you take a totally different route concocted by Docker,
it's mostly invisible unless you're actively looking for it.
Yeah, again, going back to my general totally outrageous assertment about
Red Hat's tools is that is the great thing, is that they're going to be
integrated with the logging, with the rest of the system.
Cockpit rolls out.
It's got support for it.
You can see it in the logs.
It is really nice from that standpoint.
And it works with the wider tool set.
I'm convinced, actually.
I think I'm going to give it a go right here on the old laptop,
because I've got a couple of ideas that I want to try.
Yeah.
And the nice part too is you can still play together too.
So you can use Builder and Podman locally to build your images,
to test them, to run them on your machine,
and then just push the exact same image up to your server
when you want to run it with Docker Compose.
That's totally fine.
Aww.
Yeah, it's pretty nice.
So how many containers have you seen running on a host?
I saw this article about taking a system from 30 to 230 Docker containers.
Oh, boy.
What are they doing?
I don't know.
But I do kind of wonder, because I'm kind of new to this in actual production
and not just screwing around, what our limit is.
Like, I don't know.
I have a better sense, because in the VM world, I carve out 4 gigabytes of RAM.
I carve out 100 gigabytes of disk storage.
I allocate this much to that system, and now it's gone.
And that math is simple in a way.
It is.
And it's a cleaner separation of concerns, right?
Because you're basically like, all right,
well, here's this whole other operating system over here.
I will deal with it by itself,
and then only if I need to go back up to the hypervisor
will I even think about that.
And maybe the application in that VM consumes all of the resources in that VM, maybe.
But right now, in our setup, an application is just another process on the box.
And that, for me, is a weird mental shift,
because I'm used to it being isolated off into its own machine.
And to me, it seems like I know you can put constraints on it,
but it seems possible that just one of those containers could go crazy.
Oh, yeah, sure, right?
It could fill up all of its volume space, it could eat a bunch of CPU.
Yeah, that, to me, that's where I can't say, well, we'll put X amount of containers.
Because I don't feel like I can predict like I could with a VM.
Right, and I think that's maybe partly a result of the different philosophies behind this.
Because I think if you were, you'd probably have already instrumented your system, right?
You'd have a bunch of stuff.
So you'd build a box, and then you would go test how many containers you want.
And you'd probably then be able to run more containers than you could VMs.
But you're right, you don't have the same sort of heuristics and understandings that you do.
But I wouldn't be able to say, well, if I can run four VMs, I can run 10 containers.
There's just not that math, you can't do that.
Yeah, and as this article points out,
because it's nice that you don't have multiple kernels in some senses.
But it means that you might need to do more tuning,
because you have a more deeply nested system,
or the kernel is doing more nested things than in the VM model.
So like they're running into stuff where, you know,
the regular Docker networking setup involves a whole bunch of NAT.
And then that's going to involve the contract table and IP table,
so you can keep track of all the connections that are going, right,
as you map onto the Docker subnet and all that.
So at some point, that'll just start dropping packets if you have too many.
And it's like, how do you know, right?
I mean, there's tunables, you can go play with it.
If you're already doing a lot of Linux kernel, you know, optimization,
maybe you know, but probably you don't.
Probably you just ran a bunch of containers that you have to go.
You have to be instrumenting and monitoring your system
if you're going to even see those problems.
That's one of those, it's a combination of the driver, of the hardware,
of your specific kernel version, of the software that's talking to the kernel.
Like it's such a unique blend that the only way you'll get real data
and any kind of predictability is to just do it in production.
That to me seems crazy because what you're proposing is just throw it up there
and see how it performs.
And ideally, you over-provision so you know it's going to perform well
and maybe you can add, but sometimes things don't go ideally.
And all of a sudden, you've thrown a box up there that isn't fast enough.
We've had something similar happen to us where we put it in production.
It's like, that's not quite fast enough.
We kind of expected it to be a little better, and now what do we do?
And it's just like we don't really have like a super solid answer now.
Yeah, that's true. That's true. We need more.
I mean, somewhat we just need more resources.
More hardware.
Yeah.
But because we kind of, I mean, I don't know.
It seemed like on paper it was going to be plenty of horsepower.
And then in actual production, and maybe the cloud provider
isn't really giving us quite what the specs says they were.
Because I feel like if we ran that same workload on physical hardware,
it would be faster.
It's a good question.
The same specs, right?
The same specs on physical hardware.
So there's that variability too when you're on someone else's computers.
Yeah.
One other thing I thought was funny from this is
they also started running into issues when they ran out of PIDs on the system.
Sure.
It's eventually going to happen.
It's eventually going to happen, yeah.
So it's another one.
This is just a fun, good article to check out
if you are going to run any large number of containers.
And it points you to some nice little kernel values
you can tweak and tune that you might need.
Where do people find that, Wes?
Where would I find links for this week's episode?
Like that microphone we talked about.
Like that microphone.
Well, you can go on over to coder.show,
specifically coder.show slash 369 for this week's episode.
But you'll also find ways to get in touch.
You just hit the contact button.
And the easiest way to make sure you always get fresh Coder Radio
is, of course, just subscribe.
We're on all the apps.
We're pretty much everywhere.
That's true.
Really, that's where the show notes are, really, is in the app too.
Yeah.
It's in the apps.
We've got chapters and stuff too.
So you can skip right to your favorite part of the show
if you only have a little bit of time.
Those are pretty sweet.
Yeah, they are.
A lot.
Especially like when I'm going back to like,
what stupid thing did I say like a year ago?
Yeah.
It's super great for just trying to reference like,
oh yeah, which mic did Chris say?
Yeah, there you go.
Pop right over there.
Huh.
Yeah.
Now, of course, you can also just go to JupiterBroadcasting.com
where we've got a whole other selection of fine programs.
Can people find you on the Twitter?
Yeah, they can.
At Wes Payne.
And I think you're there too.
I am.
At Chris LAS, Linux Action Show.
How retro is that?
Tweet me your ideas for a new end of handle.
Right.
We'll spruce the whole thing up.
Yeah.
Fresh it up for the new year.
I think Joe probably votes Chris LAS.
We'll see what Mr. Dominic says when he comes back.
Yeah, we'll see.
So do stay tuned.
Well, you know, we did this show live this week.
It was a little late maybe, but don't worry.
Go to JupiterBroadcasting.com slash calendar.
You can find out when we are here live.
We'd love to have you join.
Until then, we'll see you next episode.
We'll see you next time.
Bye-bye.

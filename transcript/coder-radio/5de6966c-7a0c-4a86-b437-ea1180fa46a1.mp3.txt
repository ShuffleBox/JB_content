This is Koda Radio, episode 356, for May 6th, 2019.
Hello, and welcome to Koda Radio,
Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business of software development and related technologies.
My name is Wes, and I'm joined once again by our intrepid functional adventurer,
the one, the only, Mr. Michael Dominic.
Welcome back to the show, Mike.
Welcome back from Linux land.
Oh, yes, I am freshly back from Linux Fest Northwest.
We had a prerecorded episode last week, so I didn't get to talk to you.
It's nice to hear your voice. You sound a little bit hoarse.
I'm led to believe you're under the weather, but nevertheless, you're here today doing a live Koda Radio.
Neither rain nor shine nor attacking penguins. That's our motto.
Or infectious children, whatever the case may be.
Yeah, one of those seems more likely.
We're going to show a little bit early today and we probably won't stick around too long.
And that's my fault because I'm taking off to the Red Hat Summit over in Boston, basically right after this show.
So we better dispense with the pleasantries and get rolling.
I'm positively green with envy.
First up, we've been getting some quality feedback.
So let's start there.
Lee wrote in, I got into a work situation where there is a lot of software, extensions, micro services,
load hosting and databases with next to no documentation.
I want to create some grip on the situation by doing some form of documentation and, you know, have something that I can pass on to others.
However, I'm hesitant to just write a bunch of documents that tend to get out of date really fast as we continue developing.
Do you have any smart tools that you can suggest to map stuff out?
Thanks, Lee.
Well, Mike, what do you think?
Obviously, I think in general, you know, we all agree documentation can be a huge help and goes a long way to explaining intent within a project.
And there's different forms of documentation, but having the sum is better than none.
Where do you start when you don't have anything?
Well, you know, certain frameworks will have extensions that can generate basic documentation for you.
I think in the Rails world, there's Rdoc, if I'm not mistaken.
I personally tend to write out traditional formal documents with like, you know, explanatory comments and things like that.
But if you're starting from zero, I would look at something like Rdoc.
And I think it doesn't java, isn't it just called java docs?
Yeah, right.
Yeah, there are there are some built in stuff to languages.
So you can add just comments next to functions or whatever and have that have that added.
But that's not always enough, right?
Like that might give a good a good view for someone trying to make, you know, API level or programmatic changes, but doesn't always help someone who's trying to say get the build environment set up or just use the darn utility.
So how do you approach this, Wes?
Do you write them out the old fashioned way like I do?
Do you have some fancy tool?
Well, I think fundamentally, it's a process problem.
So there definitely are some tools.
Some people are proponents of, of, quote, unquote, literate programming, right, where you're almost writing your documentation in line with your code or in a sidebar that gets generated automatically as it parses through the document.
And that's that's pretty neat, but probably takes a whole team investment.
Right.
Unless it's a small, isolated subdomain, you probably are going to need an agreement about how documentation works.
Depending on where the documentation is oriented, I've had some problems in the past with like separate wikis and things.
I tend to like documentation that can live, especially if it's just sort of simple markdown files in the repository.
Because exactly what Lee's getting to, it's easy for documentation to drift from the actual code.
And if you can start with a process that maybe says, all right, well, you've updated this file.
There's documentation that goes along with it.
There's no updates.
Poll, you know, pull request rejected, you don't have to be that rigid. And there are maybe some tools out there that can help you sort of automatically look and spot or see where you're missing documentation.
But unfortunately, like a lot of things in programming, you just have to care about it.
And, you know, it takes constant upkeep to make sure that documentation is getting updated along with the code.
Good advice.
Now, dear Coder Radio audience, maybe you have some favorite tools for literate programming or just, you know, tools you like in your CI system to help make sure documentation gets written or your favorite documentation system.
If you'd like to let us or Lee know about that, well, the easiest way is head on over to coder.show slash contact.
Moving on, we've got another piece of feedback, specifically asking about our thoughts on testing as a career path.
The author writes, I've only worked in large organizations, so I don't really understand exactly how dev shops operate.
Do you also have members of your teams dedicated to QA or testing?
And are these cost effective on a smaller scale?
Personally, I find it can be a very negative job, and I spend a lot of time criticizing other people's work.
Most of my interactions are with the devs who write lower quality work.
Any thoughts around testing as a dedicated role within the team and how it might benefit or not benefit the overall team?
Thank you.
Yeah, so this is going to be an unpopular opinion.
You know, we've talked a lot in the show about automated testing and my various campaigns to try to make that work.
I am a pretty firm believer in manual testing.
First of all, we're super small, but it's unusual for like a dev shop that he mentioned to have a dedicated like QA career path.
Usually it's the QA developer is one of the more junior developers or designers.
Then you kind of move up and out of that into doing more of your own development design.
My experience is it's usually extremely helpful to have someone doing manual testing, but maybe that's not a full time job.
Maybe they're doing that 30 hours a week and 10 hours of some sort of internal tool development or something like that.
As I'm sure you know, if you've been listening for a while, I am not a 100% automated testing guy.
I just particularly for things like mobile apps where design becomes the most the broadest surface area, so to speak, for client feedback or complaints.
That's just something that you basically can't automate your way out of.
So you're not you're not calling for no automating tested.
You're just saying there also needs to be some more manual simulation of possible user experience input.
Yeah, that's correct. I'm not saying automated testing is bad.
I'm just saying there's just a whole category, particularly of UI issue that I can't catch.
Yeah, no, that's a good point.
I think it is valuable to have maybe not a role, but testing obviously needs to be a part of shipping an application or a product.
And some of what this author describes here, right, frequent interactions with lower quality work from certain developers.
I have seen some anti-patterns in that sense, right, where you have sort of development and QA or test in an antagonistic relationship.
Now, a little bit of friendly antagonism can be good in that role, right?
Like you want to be like, oh, try to break my software and then they'll try their best to do it because that's their job.
But you want that to be a healthy, constructive relationship.
And it strikes me in many ways similar to some of the philosophical and structural changes that saw parts of the DevOps movement go through.
Because you can still have different – you can have people that do both roles.
You can have combined roles.
You can have separate roles.
But what you really want to focus on is good communication so that you're all working towards similar goals.
And you don't want to break feedback loops.
You don't want developers to be able to write code without worrying about how they affect tests.
Yeah, very fair.
So I think it – I mean, I don't think testing needs to be relegated.
You know, we make all these sort of arbitrary hierarchies in the various tech jobs, like dev and operations or test and full developer or whatever or backend and frontend.
And realistically, we need all types of roles and people contributing to make functional applications and products.
So we don't need some bullshit hierarchy to sort of sort through that, right?
We can recognize that everyone's doing it.
And having someone who's a very good tester, like I'll be honest, like you've done testing, right, Mike?
You're just talking about the value of manual testing.
And it's hard because you have to like manually go through and use your brain.
There's no escaping the amount of work to go through and think about all the different possible scenarios.
So if you do find yourself in a relationship with a really good tester, someone who's good at that, likes doing that, and is willing to put the energy into that, that can be invaluable for the team.
Yeah, I think it's definitely an important role.
Do you see this yourself where, you know, I remember back in the old days, see I tried to do a voice there, it didn't work.
There was like an entire QA department in most organizations where there was, you know, a QA manager or director, depending on the size of the organization, that was basically on par with the IT or development director.
What I'm seeing is it's still fairly common for QA to be like a small team, almost operating like a little strike force, right?
Going in and basically breaking stuff, which is their job.
Yeah, and there is probably a sweet spot too, right?
You don't need it to be giant.
And while manual testing is good, you want to find the right balance of automating the things that you can and where it makes sense and it provides a lot of leverage and having enough staff to smartly interrogate products the way that they might actually be used down the line.
So you might do some of this testing on Linux, perhaps?
Oh, yeah, of course I would.
You know me, Mike.
I mean, actually, we're doing this show right now, at least on my end, all through Linux.
And that was something I was talking about just recently at Linux Fest Northwest.
It just wrapped up last week, the 20th anniversary.
And it was amazing, particularly because all of you, all of the audience members, the fans, the community members, the co-hosts that we managed to bring out.
Honestly, Mike, basically everyone but you came out this year.
I know.
You know, I was sitting here clinging to my MacBook.
Thankfully, thanks to some of the team's hard work and shout out to Mr. Chase Nunez.
We've got it.
We had a great live stream.
We didn't have video of the talks, but we did have a bunch of the audio.
You can go find that up on our Jupiter Broadcasting GitHub page.
We've got links to a bunch of MP3 files and some of the slides.
Now, not everything's there just yet, but stay tuned.
We'll be adding stuff both from Linux Fest Northwest and future conference events.
I was really struck this year just by the amazing community that did show up.
I met a bunch of fans of Coda Radio and all of our shows and heard just a little bit of harassment and disappointment that you weren't with us, Mike.
Ooh.
One of the things I'm always impressed by, not only the caliber of people.
You know, it's always humbling to meet people that do things that are way cooler or more complicated or at bigger scales than I ever do.
And we have many of those people in the audience, but they've also just got some neat stuff.
So shout out to listener Chris, who I met at the System76 co-hosted barbecue, which we had, which was a huge success.
You can find out on Twitter more if you want to see some pictures from that event, including Levi capturing a drone.
Nice.
So we were talking a little bit about Rust and WebAssembly, things that you and I have been talking about, Mike.
And he linked me over to this great little tutorial, which is implementing Conway's Game of Life in Rust and WebAssembly.
Doesn't that sound neat?
That sounds amazing.
Now, if you're not familiar, Conway's Game of Life is basically a zero-player game.
You set up the initial conditions and then just let it run from there.
So you have a grid with a bunch of cells and you're kind of simulating a basic biological simulation.
So if a cell has fewer than two neighbors, it dies.
If it has two or three neighbors, it continues on to the next generation.
And if it has more than three neighbors, well, then it dies.
You can also grow new cells.
So if there's a dead cell with a bunch of three live neighbors, it can become a live cell.
So with those simple rules, you can start with an initial condition and then explore how that initial condition changes as you advance through time.
Now, that seems pretty simple, and it is, but it's kind of a classic little programming challenge to implement because it's not super complicated, but it can produce really interesting results.
And what I like about this project is not only does it sort of get you up and running using some of the Rust toolchain and the WebAssembly toolchain,
but you get to build a hybrid project that has WebAssembly, has Rust, and it has all the HTML and JavaScript needed to hook that all together into a functioning game in the browser.
Now, did you play it?
No, I haven't yet.
I did have a chance in a little bit of downtime over the weekend.
I got a little build environment up, so I've got my Rust toolchain.
Unfortunately, I don't quite have it compiling yet.
I'm about to take off on a flight to Boston right after we finish this episode, and it's one of the things I've already saved on my laptop.
So I'm hoping I have all my dependencies already downloaded.
I'm going to start trying to play with it a little bit more on the flight.
Nice. So you will be a Rust station by the time you get back.
Conversion in progress, my friend.
Next, I'm just going to get you onto the sweet, sweet, velvety, smooth something.
I couldn't think of another good thing to say about Rails.
That's what I did there.
Oh, you and Rails, Mike.
Yes, me and Rails.
But you know what's more fun than Rails?
Just about anything?
See, there's no need for hate speech, Wes.
It's just unnecessary.
I'm fired up today, my friend.
How about running Linux inside of Windows 10 using Visual Studio Code?
What? Is that possible?
Yes, it is.
Microsoft has some big announcements coming out because, well,
it is Microsoft Builds going on right now, after all.
And Visual Studio Code just keeps getting better and better.
So am I right in thinking there's actually like three components
to this new sort of remote functionality that they've added?
Yeah, you're kind of Lego-ing together a bunch of stuff to make this work,
but it's pretty cool.
So the basic idea is you're running VS Code on Windows 10,
but let's say you're not insane,
so you want to use the Windows subsystem for Linux.
Right, you don't want to have to set up a build environment on Windows
because you don't hate yourself?
I didn't think that was possible.
You can build software on Windows?
Yeah, it turns out if you try hard enough, you can.
If you believe, it's like, take a bow, you have to clap.
You can actually just use your WSL build environment.
I think, was it four weeks ago now?
We talked about Penguin, P-E-N, whatever.
The new name for WLinux, the Linux distribution,
targeted at the Windows subsystem for Linux.
Right, so it's basically souped up Debian for Windows subsystem for Linux.
Well, I found it incredibly easy to set up a dev environment in that,
and one of my first annoyances, I pop open VS Code,
and damn, it's calling into the C prompt.
Go to this Microsoft tutorial, install this plugin,
and you are riding the sweet rails of the Windows subsystem for Linux.
Hell, you could even do Rails development on it.
Got it in there.
Very nice.
And really, this is all kind of using some of the same functionality,
because some of the other stuff you can do,
there's a containers plugin and an SSH plugin.
And so really, the idea is if you can point Visual Studio Code at some place,
some environment it can go run and act as a build server
and have as your build environment, it's going to go do that, right?
Obviously, with SSH, you're going to need permissions on the other end
to do whatever it needs and access setup.
Right.
But assuming you've got that all in place,
Visual Studio Code just gets its hooks in there and starts running things.
Now, this is a style of development I'm somewhat familiar with in the Clojure world,
because there is already this notion of being able to remotely attach
and live interact with stuff.
But for a lot of languages, this isn't necessarily trivial to set up.
Now, if you're familiar with Docker and you know enough to go spin up some VPS
and get some containers running and be able to forward some ports over SSH
or set up your own little WireGuard VPN, sure, totally doable.
But these plugins are dramatically lowering the barrier to entry for getting this working,
especially as maybe people on Windows who are curious, they want to target Linux,
but they're not really familiar with the desktop side.
Well, here they just, you know, a checkbox to enable the subsystem,
install a couple plugins.
And you should note, you do need to be on their, like, Insider program.
It's not going to work with just the...
I tried it naively with just the snap install of VS Code that I already had installed.
Doesn't work. They've got a special Insider dev you can go download.
That will let you install some of these new features.
Yeah, and I think that goes for desktop Windows version as well.
You have to be on the fast track.
So Microsoft is apparently killing it this week.
.NET 5 is coming. Are you ready, Wes?
No, I don't think so. Can you prepare me a little bit, Mike?
Like, what are you looking forward to?
Because we've been previewing some of the stuff, like the recent changes in.NET,
but what are you looking forward to in your day-to-day work?
So this is breaking news.
It's so breaking, in fact, that in the comments of the blog post that came up
literally 15 minutes before we started recording today,
they replied, oh, we have more information coming in several hours.
So here's what we know now.
The goal of.NET 5 is basically to have one.NET to rule them all,
meaning all the platforms that you can do.NET development on,
everything from bots to IoT to high-end games in Unity
to web, cloud, mobile, desktop, all the stuff you would traditionally think of.
So just the few things that, in this first initial post,
really jump out at me.
They're looking for 5.0 to come out in November 2020,
which to me, that seems very ambitious,
given this kind of high minor goal.
In particular, they want to focus on ahead-of-time compilers
using some sort of integration with LLVM.
What's the way you would put this, Wes, in your words?
I would call it just the compiler du jour for most systems.
It's what Apple uses, what everybody that I'm aware of is using.
Yeah, it's a compiler system in back-end with various pluggable front-ends.
So Clang is the popular C compiler as an alternative to GCC,
but there are many tools like Rust,
where a bunch of the Rust compilation stage relies on generating stuff
and interfacing with LLVM to finally compile to actual real assembly output at the end.
So is that what you're talking about here with the ahead-of-time compilation?
Because normally, you package up your.NET project and you've got.NET bytecode,
stuff that's going to run on the CLR, but you're talking about jumping ahead
and having the CLR's interpretation and running of that bytecode
and have it already be packaged as just plain, say, x64 assembly?
Yeah, it definitely looks like that's what they're doing, but they actually refer to it
in the context of interoperability with some of the best languages ever written.
For example, Objective-C, Java, and that weird other language, Swift.
I don't know that nobody uses, but this is actually going to be my dunking on Swift aside.
I'm a little skeptical.
It sounds too good to be true,
because the level of interoperability you currently get
very much depends on the context you're using.NET,
and frankly, there's just not that much,
ignoring the whole com, C++, Windows thing.
Yes, let's continue to ignore that, please.
We always like to, particularly in the mobile space,
I think they're calling out Objective-C, Swift, and Java specifically for Xamarin.
That's kind of huge, because if you have one of these big legacy Objective-C apps
and you want to bring it forward and you're thinking,
jeez, we'd like to support Android now and go cross-platform,
but we don't want to pseudo-RMR the entire project directory and restart.
I mean, let's not be naive.
It's not going to make that easy, but it's going to take some of that pain.
The proprietary engine that we're using,
we wrote in Objective-C for our old big iOS or iPad app.
We don't want to rewrite it.
Again, the interop is going to help you there.
I'm very curious what the goal of this ahead of time compiling is.
Is it simply performance,
and this interop was a nice secondary benefit,
or is it actually, it's for interop.
Is this code going to be significantly more performant
than code done in the traditional, like you mentioned, CLR, IR sort of way?
My guess is both things are probably going to be true.
Right, and usually it depends.
I mean, I'm speaking from some experience on the JVM side,
but we've seen more ahead of time stuff there with,
in particular, the Graal compiler.
We've seen things like startup time,
but if it's totally ahead of time,
you then lose out on any down the road JIT optimizations
that you might apply.
Now, I know the CLR is a little bit more static than the JVM,
so I don't know how much that's important
relative to the two different runtimes.
It's an interesting thing.
What use cases are particularly going to benefit
or have been waiting for this AOT support?
AOT support is going to be universal in.NET,
which one of the,
and I think actually comparing to the JVM is helpful here.
For instance, Mono on the.NET side
has actually leaned ahead of time compiling a lot more
than let's say the Microsoft proprietary implementations
until very recently.
It's almost, and I don't want to overstate it,
but.NET is in this weird space
where using you actually have a different level of AOT
and therefore different performance characteristics
and a number of other different restrictions or features
in terms of interop.
I think, again, this is their first of what I'm sure
is going to be a long series of blog posts
until November 2020.
What I think they're going for here
is that.NET is going to be.NET is going to be.NET.
No more,
has this compiling strategy,
or this is the Windows WPF,
or this is the classic one that can interop with COM.
I will admit, from an outsider's perspective,
it's pretty confusing right now.
I mean, I can read through it
and they have some bulleted lists that are helpful,
but it's a bit to sort through.
It's actually incredibly confusing.
I read through this document
about three times before we started recording.
Richard Lander, who's the PM over on the.NET team,
is being very careful to kind of express
what they want to do,
but not make any big promises.
But one thing I would just add that's kind of important,
this is not just a Microsoft thing.
The Mono Projects is at the table.
Unity, for those who don't know,
not Unity, the desktop environment,
Unity, the game development engine...
I was hoping you were going to bring this up.
Right, is also part of this.
You are writing in C Sharp, and frankly.NET.
Originally, Unity had their own kind of
third cousin twice removed version.
It would be huge for people who, like myself,
occasionally have to dabble in Unity
to do our applications,
or even if you wanted to do a game on the side.
For it to be one.NET...
Yeah, my understanding is Unity is currently shipping
an ancient mono version, too.
Because Unity is doing a lot of this AOT stuff
right ahead of time, compiling.
Yeah, right.
I mean, of course, because game development...
iOS.
Interesting.
This big news, it seems like there's actually
a lot of good stuff happening in.NET.
I feel like there was kind of a dark time
where.NET was maybe relegated
just to Windows sorts of development,
and Java took off
and now Java's even murkier than ever
with the new release models that have recently come out,
and.NET is more open than ever.
Well, and you know Oracle.
Yeah, I mean, maybe not always,
but just 2019 sitting down right now,
I will take the new Microsoft
over the current Oracle any day.
No, it isn't all sunshine and rainbows here, though.
Well, let's call it FUD.
It's definitely uncertainty and doubt.
F-Sharp has always been a little on the outs
with the AOT stuff,
and it's a little interesting
that F-Sharp is not mentioned in this article at all.
Of course, F-Sharp is part of.NET,
and I'm sure they will benefit from all of this,
but I would not be surprised
if you read the AOT love.
In fact, if you read his closing statement,
he makes a point,
and this is a direct quote,
all new development feature capabilities
will be part of.NET 5,
including new C-Sharp versions.
So C-Sharp gets its own call out.
F-Sharp doesn't get mentioned
in this entire relatively long post.
If you know F-Sharp developers,
or even play one on TV like I do sometimes,
it's kind of second sun issue
between F-Sharp and C-Sharp.
Now, do you think that's just partly because
F-Sharp being a higher level languages
may be targeted at high level data pipelines
and processing or statistical analysis
or something like that,
just benefits less from AOT,
whereas C-Sharp might be the things
that you do get compiled down
to really tight, minimally GC'd things
that run perhaps orchestrated by systems written in F-Sharp?
We should definitely do an F-Sharp show
and kind of go through it, but just to high level,
one of the main advantages,
you mentioned Unity being pegged
onto an old version of Mono,
of this AOT stuff is iOS compatibility.
Oh.
And there's just not a whole lot of people doing F-Sharp
because remember Apple has that whole
you can't have a runtime running.
Yes, right.
They have some pretty strict qualifications.
Right.
But also like F-Sharp,
and we should probably do this as a topic one day,
F-Sharp is trying to do something hard.
It's trying to bring functional programming to.NET,
but.NET was really born just like the JVM
out of an object oriented point of view.
So there's all these kind of weird
coping mechanisms that F-Sharp has to do
where in fact this is,
probably the best criticism of F-Sharp as a language
is that it's so married to,
but it has no choice to kind of the world of.NET
and the legacy that came before it,
that it's always kind of
not as functional as it could be.
It's more the functional gateway drug.
It's not like the pure functional heroin
that you'd be looking for.
That can be a qualification,
but the other benefit is of course you get to use
the rest of the ecosystem, right?
So you might not be Haskell,
you also have access to the whole library
of C-Sharp applications and tools
that you might want to leverage.
Yeah, I mean, a pattern I like,
though I'm not sure how popular this actually is
because it's my own little in the closet thing,
is F-Sharp for kind of business logic
because I personally feel that the OO model
makes a lot of sense for interfaces, right?
And that is the model that is dominant
in many of the libraries that you end up having to use.
So in many cases you have to be patching
a different paradigm on top which can be messy at best.
So actually that's another thing
that was kind of not addressed here.
I'm sure you're familiar with XAML,
their markup language for user interfaces.
XAML is not one unified language, so to speak.
I say it's like English, but it's even more foreign.
There's different, there's dialects
that are significantly different
and behave in different ways
between the different possible platforms.
So there's Xamarin XAML, there's UWP XAML.
Like we talked about Project Uno,
that's an implementation of UWP XAML
for the other platforms.
You read a lot of.NET blogs.
Yeah, but we'll have to see how far it goes.
I'm looking forward, there's going to be another post today.
So I'm looking forward to next week
to learning more about end of life of.NET 4,
which is the other side of this coin.
Yes, right. As always happens,
when you have a new release, well, out with the old.
And that can be a tricky arrangement,
especially if you've built stuff
that's sitting out there in production using it.
I thought they were talking about 2020
for the rollout of.NET 5.
Well, I'm surprised it's so soon.
I thought they would continue
to kind of do this a little slower, actually.
But they're going to have to support the 4 series
for a very long time, I would think,
because there's a lot of people right now
refactoring their code into.NET 4,
particularly.NET Core, that aren't going to be happy.
Having said that, it does seem,
but if you're basically using.NET Core
such.NET standard,
this is going to be a pretty easy progression.
How have past progressions gone?
Has there been...
Problems.
Yeah, hairy problems in the past in.NET upgrades?
Yeah, I mean, the progression,
let's say if you're a legacy ASP.NET app
to become an ASP.NET Core app,
it's not exactly...
If you're of a certain scale,
but if you're a reasonably sized web application
that takes a lot of requests,
that's not trivial.
I mean, you are rewriting in a new framework,
which this should not be, to be clear.
This should just be bumping a version.
Drop in, have some upgrades, rebuild your app
with the new library and runtime,
and hopefully, fingers crossed,
everything keeps working.
I hope so.
Well, that's a lot to look forward to, Mr. Dominic.
We don't want to stress you out too much,
so let's leave it at that.
There's some other stuff
that we want to talk about today.
In particular, oh, you've been baiting me
with a tease around Python and Ruby,
two things I get excited about myself.
But I think let's save that for Coder Radio 357
and call it a day for Coder Radio 356.
What say you?
Sounds good and fly safe.
Oh, thank you very much.
Well, that's coder.show.
That's easy, we've got our show notes,
links to basically everything we talk about
in each one of these episodes,
and of course, you can go to coder.show slash contact
if you want to get in touch.
If you want to find all the other fine
Jupyter Broadcasting programs,
well, just head on over to jupyterbroadcasting.com.
There you'll find our calendar,
which will let you know when we're here live,
and links to all the RSS feeds
or check out this week's Linux Action News
if you want to get caught up on all things Linux,
and maybe give a try to our Friday stream.
It's a new show we've launched we're playing around with.
It's a lot of fun, a casual hangout,
and a great chance to meet some of our JB crew.
Of course, if you can't wait for any of that
and you just want to reach out with your favorite new tool
or feedback about the show,
we're both on Twitter.
I'm at Westpane, and Mr. Dominic, you're?
Thank you all for joining us today.
We'll see you right back here next time.

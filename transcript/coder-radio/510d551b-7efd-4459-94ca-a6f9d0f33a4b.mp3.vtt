WEBVTT

00:00.000 --> 00:07.000
This is Koda Radio, episode 354, for April 22, 2019.

00:31.000 --> 00:45.000
Hello and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes a pragmatic look at the art and business of software development and related technologies.

00:45.000 --> 00:54.000
My name is Wes, and I'm very pleased to be joined once again by Mr. Michael Dominick, the man with just one too many house guests who's taking the time to join us today.

00:54.000 --> 00:59.000
Hello, Mr. Payne, and I hope the Easter Bunny was extra good to you.

00:59.000 --> 01:06.000
Yeah, you know, I didn't have any chocolate, really, but I did make a pork shoulder for myself, and well, that was just darn good.

01:06.000 --> 01:13.000
I have a 12-year-old in my house, a 12-year-old boy. Are you familiar with Genghis Khan?

01:13.000 --> 01:15.000
Oh, yeah, vaguely. I mean, I've seen some of his work.

01:15.000 --> 01:23.000
Yeah, it's roughly the same. I would say 12-year-old boys are the TypeScript to Genghis Khan as TypeScript is to JavaScript.

01:23.000 --> 01:26.000
Well, I'm glad. I'm sure your house has been totally destroyed.

01:26.000 --> 01:27.000
Completely.

01:27.000 --> 01:33.000
I'm surprised, honestly, just given your track record, I'm just surprised that you have any computers left at all to which to join us today.

01:33.000 --> 01:38.000
He is surprisingly conscientious with tech hardware, unlike someone we all know and love.

01:38.000 --> 01:41.000
That's good. He obviously got the good genes.

01:41.000 --> 01:42.000
Exactly.

01:42.000 --> 01:49.000
Well, happy Earth Day. It's Earth Day today, and we're celebrating that by, you know, doing some livestream, but we swear we promise we'll turn our computers off later.

01:49.000 --> 01:50.000
That's right.

01:50.000 --> 01:54.000
In the spirit of that, I think we'd better just get rolling because we got lots to talk about today.

01:54.000 --> 01:59.000
First up, we've got some fantastic feedback from you, our dear audience.

01:59.000 --> 02:08.000
And the easiest way to go do that, if you like the feedback or you don't like the feedback, us, the show, whatever your thoughts, well, coder.show slash contact.

02:08.000 --> 02:11.000
You can also go to coderradio.reddit.com.

02:11.000 --> 02:16.000
First up today, we got an email, a little clarification from our friend Sikar.

02:16.000 --> 02:26.000
He writes, hi, talking here about Coder Radio episode 349, and I just wanted to let you know that AWS Elastic Beanstalk, the retirement you mentioned,

02:26.000 --> 02:31.000
well, you sort of implied that the entire Elastic Beanstalk product was being retired.

02:31.000 --> 02:39.000
But in fact, Elastic Beanstalk is retiring only some platform versions with software components that have reached end of life.

02:39.000 --> 02:47.000
So before we got on this, I re-listened to that episode, or at least the portion I talked about, I'm sorry, well, AWS, but EB.

02:47.000 --> 02:49.000
You know, I always mess that up, Wes.

02:49.000 --> 02:52.000
AWS Elastic Beanstalk.

02:52.000 --> 02:57.000
Naming things is hard, but AWS EB, yeah, it just doesn't feel natural.

02:57.000 --> 02:58.000
So it is true.

02:58.000 --> 03:06.000
Like, and I did not mean to, but I definitely understand how that could have been misunderstood to imply that all of Elastic Beanstalk was going away.

03:06.000 --> 03:17.000
However, some very core pieces of functionality that I would be willing to bet a large percentage of the subset of our listeners that use EB use is going away.

03:17.000 --> 03:25.000
For instance, this is probably the biggest one, older versions of NGINX, and you have some mandatory upgrade.

03:25.000 --> 03:34.000
There is a long list that you can Google for that other people have written up for you on the components or the, quote unquote, you know, platforms that are coming away.

03:34.000 --> 03:37.000
Or at least need to be upgraded is probably more accurate.

03:37.000 --> 03:40.000
I don't think it's worth the time here to run through that list.

03:40.000 --> 03:46.000
Other than to say, because you're almost certainly using NGINX, that is the one I was thinking of.

03:46.000 --> 03:59.000
So it's not that NGINX is going away, it's just that there's a major version bump and the one that maybe people are relying on and maybe they wrote the config for like three years ago and haven't really touched that part of the application since, that part's going away.

03:59.000 --> 04:00.000
Exactly.

04:00.000 --> 04:06.000
So the minimum required version of NGINX has basically been bumped up a few versions, that's all.

04:06.000 --> 04:10.000
It is a big deal if you are depending on the older version of NGINX.

04:10.000 --> 04:20.000
And it is not just NGINX, which is something I do want to stretch, but I don't think it's very good radio for us to read through a list of things that are, you know, that you need to update.

04:20.000 --> 04:36.000
If you have this problem, you would have gotten one or several emails from Amazon and I would encourage you to, if you haven't, but you think you might, just do a quick DuckDuckGo search and you will find other people who are more conscientious than me and have written up lists.

04:36.000 --> 04:41.000
But good feedback, happy to clarify, Elastic Beanstalk is indeed alive and well.

04:41.000 --> 04:46.000
Excellent. And thank you to Sagar for letting us know. We always want to be clear when we can.

04:46.000 --> 04:52.000
Next up, we've got something more of a question and Mike, I'm really curious to hear your thoughts on it. So this is from Ashton.

04:52.000 --> 05:01.000
Hey guys, I've been listening for a while and actually contacted you before regarding how to showcase some of my dark matter projects to potential employers.

05:01.000 --> 05:10.000
This has actually proven to be very beneficial. So thank you for the advice. However, I run into another issue that I just don't know how to tackle.

05:10.000 --> 05:12.000
Maybe you can give me a little more insight.

05:12.000 --> 05:22.000
I'm a four year C sharp slash dot net dev with a consulting firm and looking to go somewhere more leading edge and software oriented.

05:22.000 --> 05:30.000
This is my main issue, though, seen as for my current work with my current employer, we're just so far behind everyone else.

05:30.000 --> 05:42.000
Ninety eight percent of our applications are built using, yes, wait for it, Mike, WinForms, and they are not willing to entertain any MVC or web based applications.

05:42.000 --> 05:53.000
Here's where it gets interesting to recruiters have told me the same thing, which amounts to, yes, you have some great experience, but in things no one really uses.

05:53.000 --> 06:00.000
Now, they do clarify here. I know how ASB MVC and dot net core work and have made a few things here and there with them.

06:00.000 --> 06:06.000
But the professional experience seems to be a must have for every employer I've spoken with.

06:06.000 --> 06:11.000
I don't want to think that the past few years have been for nothing, but it's beginning to seem that way.

06:11.000 --> 06:14.000
Hope you can share your wisdom. Thanks.

06:14.000 --> 06:23.000
There's just so much here. It depends on what you want to do, which is I know the lame answer we always give on the show.

06:23.000 --> 06:30.000
But I can tell you that don't let recruiters be your guide. No offense to any recruiters who may listen to the show.

06:30.000 --> 06:36.000
Although if you are a recruiter and you listen to the show, you might be the best recruiter in your city.

06:36.000 --> 06:42.000
So a recruiter is a sales guy, right? I mean, I guess we should dive into this a little bit.

06:42.000 --> 06:47.000
So the recruiter is going to give you advice that makes his life as easy as possible.

06:47.000 --> 06:53.000
Of course, think about it from the hiring manager's perspective. You have a position open.

06:53.000 --> 06:57.000
I don't know exactly what you're looking for, but let's you know, let's just make it up, right?

06:57.000 --> 07:01.000
You want to be a more modern dot net developer, not wind forms. Right.

07:01.000 --> 07:10.000
Well, the easiest person, if I'm the recruiter, for me to sell to that hiring manager is someone who literally works at his competitor or a related company

07:10.000 --> 07:12.000
doing that exact job. Right.

07:12.000 --> 07:18.000
Ideally, you have someone who is already doing that job, who's been doing it before that requires basically no training except for, you know,

07:18.000 --> 07:25.000
whatever business specific differences there are and just jumps in and gets to work day one, or at least that's the fantasy.

07:25.000 --> 07:29.000
It's a fantasy, but it's also I mean, it's the biz dev guys fantasy, right? It's a lie.

07:29.000 --> 07:35.000
I mean, any experienced software engineer can transition technologies in a matter of like months.

07:35.000 --> 07:44.000
It's just you have to do it. I mean, objectivity is wonderful, but sometimes you have to change, you know, in your case, wind forms.

07:44.000 --> 07:49.000
It's definitely had its time in the sun. And yeah, you need to walk away from that.

07:49.000 --> 07:53.000
You know, if you want to remain a dot net guy, there's literally plenty of options, right?

07:53.000 --> 07:59.000
Dot net foundation. Look them up. I remember. It's great. There's tons of stuff you can do.

07:59.000 --> 08:06.000
Having said that, why are you using recruiters? If you're like, I'm a little confused because they're going to take a VIG off of what you make.

08:06.000 --> 08:12.000
In many cases, if you're kind of an experienced developers and you have done a little bit of networking,

08:12.000 --> 08:20.000
it shouldn't be super hard to go out and find companies that want talented developers.

08:20.000 --> 08:28.000
This is a problem we've had a team be like we've had people who we thought were kind of our bottom percentile get hired by very large companies that you've heard of

08:28.000 --> 08:34.000
because there's just like such a desire for anyone who can basically use get. Oh, interesting.

08:34.000 --> 08:43.000
I know it's a little reductive and I'm trying to be a little bit funny, but it's it's just not like I don't mean to just dunk on recruiters.

08:43.000 --> 08:55.000
And I know how this sounds, but I would not pay a middleman if I was you and, you know, the person hiring you probably knows less than you.

08:55.000 --> 09:05.000
There's a way to, let's say, present your experience, not as a WinForms developer. I would I would never mention WinForms, to be honest with you.

09:05.000 --> 09:09.000
I just don't bring that up. I would call it enterprise level desktop applications.

09:09.000 --> 09:15.000
That's what I would say. And I would put that on my resume. And I would say that I'm experienced developer in dot net.

09:15.000 --> 09:20.000
If you can find a way to pseudo legitimately mentioned dot net core, great.

09:20.000 --> 09:28.000
Anything modern and sexy. The idea is most people hiring you, especially if you're looking at big companies, are just checking off boxes in an Excel spreadsheet.

09:28.000 --> 09:36.000
So, right. I mean, there's always that question, too, of like how how connected are they really to the specific development going on?

09:36.000 --> 09:44.000
The other thing I would say is at least when I've been involved with interviewing or applications or looking at prospective candidates,

09:44.000 --> 09:50.000
unless you have like a really fixed job that's going to be very boring and not challenging,

09:50.000 --> 09:56.000
being able to learn and adapt and grow is an essential skill of a software engineer because, you know, the business needs are going to change.

09:56.000 --> 10:03.000
You need a new API. Suddenly you have to integrate with a partner and they only have an SDK that supports this platform or whatever it might be.

10:03.000 --> 10:08.000
So not only does that say like, OK, well, what is this business doing and why are they so static?

10:08.000 --> 10:17.000
And then also, when you're looking at prospective companies, sure, you don't necessarily you know, not every position is right for someone who has like not direct experience in a particular thing,

10:17.000 --> 10:24.000
depending on timelines and what their needs are as a company. But if they're not willing to invest in someone who is interested and capable,

10:24.000 --> 10:31.000
they're probably not a place that you want to work. And you you might not see a lot of growth or mentorship there and doesn't seem like a great option.

10:31.000 --> 10:40.000
Right. And I would also add just kind of riffing off of what you said, because you spark something, you know, I get a lot of calls for people who need pre arc,

10:40.000 --> 10:48.000
which is an automatic automatic reference counting on Mac OS and iOS, meaning you have to do your own, you know, retain release cycles for memory management,

10:48.000 --> 10:52.000
sort of lower level stuff, right? Lower level Objective C development. Why?

10:52.000 --> 11:02.000
Because as Swift has become popular in various cross platform solutions, which, which I mean, I do more, I do more Xamarin than I do Objective C work right easily.

11:02.000 --> 11:15.000
But there's so few people who can actually still do that work in my area, in my area being like the eastern United States that want to do that work, at least that at some point,

11:15.000 --> 11:25.000
knowing the older technologies, but frankly, as an asset, think about, I know, it sounds crazy. And I know, like old iOS and old Mac is maybe not the best illustrative case.

11:25.000 --> 11:35.000
But Fortran developers, something that's not so well kept secret is Fortran developers make a ton of money right now, because there's just not that many of them.

11:35.000 --> 11:41.000
And some of the biggest banks and government institutions in the country, hell in the world, run on Fortran.

11:41.000 --> 11:49.000
Yeah, that is absolutely the case. And perhaps, unfortunately, although Fortran has certainly has its place, like, you know, anywhere you have matrices to multiply.

11:49.000 --> 11:59.000
Bring this back around a little bit. You mentioned, you know, things like the.NET Foundation and using, you know, careful diction around how you describe your experiences.

11:59.000 --> 12:07.000
And sometimes, yeah, that when the tech isn't always a mismatch, right? I like to focus on abilities to learn new things, times that you've been able to do that, experiences you can show with that.

12:07.000 --> 12:15.000
And then, you know, the other half, a lot of this stuff is doing your own project management and having an experience of actually finishing things, right?

12:15.000 --> 12:22.000
It's all well and good if you, you know, you have some person who just graduated school, knows all the complexity for all the algorithms.

12:22.000 --> 12:29.000
They've implemented A-star like six times that day. But that doesn't mean that they have the sort of experiments where you've shipped a lot of solutions and supported them.

12:29.000 --> 12:36.000
So if you have some more actual experience in the field and can speak to that instead of perhaps the direct technologies, that might also help.

12:36.000 --> 12:39.000
Yeah, hell, just email me your resume. I'll rewrite it for you. Don't worry about it.

12:39.000 --> 12:46.000
That's amazing. And of course, you know, there's always the routes too of just trying to do more personal projects, maybe collaborate on an open source project.

12:46.000 --> 12:55.000
Just get something out there to say like, yeah, I haven't, you know, I don't have five years of experience in this, but I've been a developer and look, I know my way around.NET.

12:55.000 --> 12:56.000
Yeah, not to be a shill.

12:56.000 --> 12:58.000
Well, it's too late for that, Mike.

12:58.000 --> 13:03.000
Thanks. I know. But what kind of shill am I today? We have to spin the wheel.

13:03.000 --> 13:09.000
No, so I'm a member of the.NET Foundation. It's charity, open source, blah, blah, blah.

13:09.000 --> 13:12.000
They have like a list of projects that need help.

13:12.000 --> 13:21.000
So if you are an experienced.NET developer, these are all FOSS projects that are in need of just like development support, QA support, whatever.

13:21.000 --> 13:24.000
Maybe look at one of them and just like your contributor.

13:24.000 --> 13:30.000
For instance, I'm a sponsor of the Avalonia project. I haven't written really any code for Avalonia. I've written a little bit.

13:30.000 --> 13:33.000
I've done some patches for certain Rust projects.

13:33.000 --> 13:42.000
Like if you really need just like a couple of things to make the HR manager happy, one line of code makes you a contributor to a project.

13:42.000 --> 13:45.000
And it can be like a simple correction.

13:45.000 --> 13:56.000
And I am not trying to, I know we're going to get like hate mail on that, but I'm not trying to say that like you should scam this, but obviously you should help the projects.

13:56.000 --> 14:10.000
But these people, especially these larger companies that are looking at your resume, don't know the difference between line of store vaults and a guy who just updates the documentation for Ubuntu from color with a U to color without a U.

14:10.000 --> 14:11.000
They can't tell.

14:11.000 --> 14:12.000
Absolutely.

14:12.000 --> 14:20.000
This is the same reason you see stuff for brand new languages and job postings say that, you know, we require five to seven years of experience in TypeScript.

14:20.000 --> 14:21.000
That's why Swift exists.

14:21.000 --> 14:23.000
Oh, yes. Yeah, you're right.

14:23.000 --> 14:28.000
Oh boy, Mike, you were really on a Swift hatin' bandwagon these weeks, huh?

14:28.000 --> 14:32.000
You know, I've been very consistent for the last, what is it, four years, five years now?

14:32.000 --> 14:37.000
I feel like there's been at least one or two times where you've, you know, reconsidered a little bit.

14:37.000 --> 14:39.000
Everybody goes crazy every once in a while, Wes.

14:39.000 --> 14:41.000
But I think we have some sad news.

14:41.000 --> 14:43.000
I don't want to bring the party down here.

14:43.000 --> 14:44.000
Yeah, no, it is true.

14:44.000 --> 14:47.000
Unfortunately, there has been some sad news.

14:47.000 --> 14:55.000
And if you've been listening to some of the episodes that I've been on here at our little program, you know, I'm a fan of, how might you describe it, Mike?

14:55.000 --> 14:58.000
Slightly more esoteric programming languages.

14:58.000 --> 15:03.000
I would call you a wizard with a long beard in a giant white Haskell closure tower.

15:03.000 --> 15:04.000
Is that fair?

15:04.000 --> 15:06.000
Yeah, absolutely.

15:06.000 --> 15:15.000
And a lot of that, I think, is just, I mean, I'm interested in it technically, the computer science, the math, the theory, different techniques.

15:15.000 --> 15:21.000
But there's a certain excitement that computers, computer science, technology still holds for me.

15:21.000 --> 15:30.000
And it can be complicated, I think, especially when you mix, you know, things that you're interested in organically with your professional career.

15:30.000 --> 15:34.000
And many of us, many people listening to the show have done that, right?

15:34.000 --> 15:35.000
Like, you like computers.

15:35.000 --> 15:37.000
That's probably why you got into this field.

15:37.000 --> 15:40.000
But now you actually have a job, and that's what you're doing, right?

15:40.000 --> 15:42.000
So you work on some boring features.

15:42.000 --> 15:44.000
You implement yet another API.

15:44.000 --> 15:46.000
There's lots of other more interesting jobs to do, of course.

15:46.000 --> 15:48.000
But they're just rote tasks, and we have to do it.

15:48.000 --> 15:50.000
We have to get that work done.

15:50.000 --> 15:58.000
And oftentimes, whatever Java C, Objective C perhaps, the standard choice is just what you want to go with.

15:58.000 --> 15:59.000
That's always going to be the case.

15:59.000 --> 16:05.000
But I think we need to not just lull ourselves into thinking there's only one way to do things.

16:05.000 --> 16:10.000
Or, you know, I just learned the design patterns from the design pattern book, and I don't ever think about it again.

16:10.000 --> 16:12.000
And I just go implement that.

16:12.000 --> 16:13.000
Don't get me wrong.

16:13.000 --> 16:17.000
I don't want to come across saying, like, you need to, like, really overengineer everything.

16:17.000 --> 16:19.000
You absolutely should not.

16:19.000 --> 16:24.000
But it pays dividends, I think, continually, which is why we were just talking about TypeScript, right?

16:24.000 --> 16:32.000
Like, a lot of this stuff has been developing out of academia since the 60s and 70s and slowly percolating into everyday programming use.

16:32.000 --> 16:36.000
As we've decided, you know, which of these things actually make sense?

16:36.000 --> 16:38.000
Is this being too restrictive?

16:38.000 --> 16:40.000
Can we still get our work done?

16:40.000 --> 16:44.000
And a lot of it has just been figuring out all the ergonomics.

16:44.000 --> 16:50.000
And so while there are practical benefits to doing that, for me, it just comes down to excitement, you know?

16:50.000 --> 16:55.000
Like, it's such an interesting world, the ways that we've tricked sand into thinking.

16:55.000 --> 17:05.000
And, you know, we've created these magical devices where suddenly, just at the powers in your fingertips, you can summon whole worlds into existence.

17:05.000 --> 17:12.000
And one person who really inspired me in that realm, even though I know I talk about things like Erlang and Elixir,

17:12.000 --> 17:16.000
I have only used them just, you know, in my own spare time, not ever professionally.

17:16.000 --> 17:21.000
I just think they're interesting as a technology choice and philosophy behind them.

17:21.000 --> 17:26.000
One of those people that is so inspiring has been one of the Erlang's co-creators, Joe Armstrong.

17:26.000 --> 17:31.000
And so I'm very sad to report that this week we learned that Joe Armstrong has passed away.

17:31.000 --> 17:40.000
Yeah, obviously, you know, for those who don't know, he's, you know, there's a whole generation of old software engineers that are going to start passing soon.

17:40.000 --> 17:42.000
And he's definitely one of the big ones.

17:42.000 --> 17:49.000
If you've never heard of Erlang, Wes, you're probably better to actually describe Erlang than I am because I think I'd oversimplify.

17:49.000 --> 17:50.000
Yeah, sure.

17:50.000 --> 18:01.000
So Erlang evolved out of actually I think it was first implemented in Prologue of all things, but a lot of it evolved out of Joe's work on his thesis when he was at Ericsson.

18:01.000 --> 18:06.000
And so Ericsson makes all kinds of VoIP, telephone, telephony systems.

18:06.000 --> 18:13.000
And those are some of the earliest examples of these sorts of big distributed systems that have to maintain high uptime.

18:13.000 --> 18:19.000
And that was the world that he was existing in and the problems of his employer and the problems he was working on every day.

18:19.000 --> 18:30.000
So Erlang grew out of that, totally targeted at these applications that, you know, people get really upset when their like branch office phone system goes down and, you know, no one can call anyone.

18:30.000 --> 18:34.000
Especially these are still the days where we didn't, you know, we didn't have fiber links places.

18:34.000 --> 18:43.000
We had even if we were on some sort of Internet or whatever, like this was mostly all just going over the same phone systems.

18:43.000 --> 18:45.000
Yeah, I mean, that's absolutely correct.

18:45.000 --> 18:52.000
I mean, I think some of the more hipster current uses of Erlang that at least I've heard of are we love us some concurrency, right?

18:52.000 --> 18:56.000
Because that was one of the big needs of those old telephony systems was concurrency.

18:56.000 --> 19:00.000
And Erlang just doesn't blow up as easy.

19:00.000 --> 19:01.000
It's weird.

19:01.000 --> 19:12.000
And I'll prepare for the hate mail here, but in a lot of ways, Rust reminds me of a more modern, maybe not implementation, but a more modern.

19:12.000 --> 19:17.000
Let's say a great, great grand niece of Erlang.

19:17.000 --> 19:21.000
I mean, I think there are definitely some some things that have inspired both languages.

19:21.000 --> 19:29.000
And one of those is acknowledging and this is something that that Joe would often talk about acknowledging that programmers are going to make mistakes.

19:29.000 --> 19:33.000
Right. So in Rust, a lot of that's like, look, you just can't manage memory by yourself.

19:33.000 --> 19:35.000
You're going to mess it up. Maybe not you.

19:35.000 --> 19:39.000
But, you know, out of 10 of you, most of you are going to just get this wrong.

19:39.000 --> 19:42.000
Out of 10 of you, 12 of you will screw up the memory management.

19:42.000 --> 19:43.000
Correct. Yeah.

19:43.000 --> 19:47.000
And Rust also has some stuff for reasoning about concurrency and deadlocks, which is which is really neat.

19:47.000 --> 19:50.000
Actually, we don't talk about nearly enough on the show.

19:50.000 --> 19:53.000
Yeah. As long as you don't use that unsafe keyword. Right.

19:53.000 --> 19:55.000
That's actually the comparison I was trying to draw.

19:55.000 --> 20:04.000
Wesley, I think you put it a lot better that it's the idea of managing your concurrency in a safe way and obviously being memory safe.

20:04.000 --> 20:10.000
Where, you know, one thing in all the time we've been doing the show, we do not talk about the bad things.

20:10.000 --> 20:17.000
Maybe we should one day, Wes, that can happen when your memory is not safe and when you really screw up other than just like your your little app crashes.

20:17.000 --> 20:29.000
Right. There can be particularly in the context where one might have used Erlang running, you know, a big phone system perhaps for a major carrier or a major.

20:29.000 --> 20:33.000
I guess they weren't carriers, but a major phone company at the time.

20:33.000 --> 20:38.000
That's important. Right. Those those little memory bugs can increment to be a catastrophic failure.

20:38.000 --> 20:47.000
Yeah, especially when you have this long uptime, it's running for four days and it has to maintain, you know, does this this complicated stateful thing.

20:47.000 --> 20:50.000
Right. And people don't accept that their phone call didn't get through.

20:50.000 --> 20:53.000
I mean, this is yeah, this I mean, yeah.

20:53.000 --> 20:56.000
Dr. Armstrong was a in a weird way.

20:56.000 --> 21:01.000
I mean, obviously everybody works in a team, but in a weird way, he was a pioneer because he was so present.

21:01.000 --> 21:05.000
I mean, you have one of his posts that I just hate in the doc today.

21:05.000 --> 21:08.000
Why? Oh, sucks. Thank you, Wes, for that.

21:08.000 --> 21:14.000
But most everything he did, like if you are working in a you know, I'm going to go on a limb here.

21:14.000 --> 21:19.000
My opinions do not necessarily reflect those of JB Linux Academy or Westpain.

21:19.000 --> 21:27.000
I think without Dr. Armstrong F sharp, which is my preferred functional language rust, which is like neck and neck with it, but it's not really functional.

21:27.000 --> 21:33.000
We could fight about that later. Just simply wouldn't exist.

21:33.000 --> 21:41.000
Right. The ideas that were invented in Erlang, though, yes, Erlang is a little older and a little more, I would say, an esoteric language.

21:41.000 --> 21:51.000
The ideas invented there have influenced, frankly, all of the cool hipster languages that we're using now, even Haskell.

21:51.000 --> 21:56.000
But certainly things like, you know, like I said, rust, F sharp, Elixir, things like that.

21:56.000 --> 22:03.000
Yeah, no, that's that's absolutely the case. I think one of the big ones, you know, as we were talking about, developers are making mistakes.

22:03.000 --> 22:13.000
As as with concurrency, there's a there's a library that goes along that's very popular in the Erlang community called the Open Telecom Platform or OTP.

22:13.000 --> 22:17.000
And a lot of that it really embraces that you're going to make mistakes.

22:17.000 --> 22:21.000
It's going to happen. And as they like to say in the Erlang community, just let it crash.

22:21.000 --> 22:28.000
Right. It's just going to crash. Let it crash. And they've built in this notion of the supervision trees.

22:28.000 --> 22:43.000
Right. And many people run into this if you're doing maybe like a Django app or something with Ruby where you've got workers that you're managing and you have some process supervisor that sits there and restarts them when they die and make sure you have enough of them running for however many CPUs, whatever, all that stuff.

22:43.000 --> 23:00.000
It's just like a bad version of Erlang because you've built it in and much like in like the Rust world or Haskell, when you started using some of these monads, you know, you're doing stuff like either where you are thinking it's for the compiler is forcing you to think about, yes, this might be null sometime.

23:00.000 --> 23:07.000
Right. And in the same way here, you're like, this might crash. You're going to have to start thinking about, do you want it to be restarted? What does it mean?

23:07.000 --> 23:19.000
Do you need to restart the supervisor above that? And I think the big theme there is a systems thinking. Even when Erlang only ran on a single box, it was distributed systems thinking.

23:19.000 --> 23:28.000
Absolutely. Absolutely. So it's so funny you mentioned the Ruby case. I have a real world example here, and I think I mentioned it briefly about a month ago.

23:28.000 --> 23:44.000
I have a relatively large Rails app that processes extremely large STL CAD files. So these are files that are scanned. It's actually kind of cool. Hopefully I can talk about it in more detail in a few months. But there's these things called light scanners, Wes. Have you ever heard of them?

23:44.000 --> 23:45.000
No. Tell me more.

23:45.000 --> 23:56.000
So a white light scanner is like a handheld scanner that scans objects like physical objects and creates a CAD file off of them or from them. I guess there's a more accurate way to say that.

23:56.000 --> 24:04.000
Oh, yeah. Okay. I just hadn't heard the term. But basically, yeah, you shoot a bunch of lasers or whatever at an object, measure reflections. I'm sure there are many techniques.

24:04.000 --> 24:23.000
Yes, the lasers. I love it. Okay. So I had a beautiful little Ruby helper in my giant Rails app that did this. Unfortunately, you know, randomly when we had a lot of usage, STL files weren't being processed.

24:23.000 --> 24:32.000
It's just like nothing happened. Why? Well, because the concurrency model in Ruby is I don't want to hit this too hard, but absolutely terrible.

24:32.000 --> 24:36.000
Oh, yeah. I mean, it almost doesn't exist.

24:36.000 --> 24:41.000
So here's what happens. If the worker, and I'm not going to go into like delayed jobs and all this stuff.

24:41.000 --> 24:43.000
Oh, delayed jobs. You're triggering me, Mike.

24:43.000 --> 24:51.000
Yeah, no, I'm going to keep it at a high level because I know it first physically hurts Wes when I go too far into the Ruby world. Are you familiar with the cowboy movie Shane?

24:51.000 --> 24:53.000
No, I'm not.

24:53.000 --> 25:10.000
So, you know, I don't want to spoil the ending, but let's just say if anything went in any way wrong with the worker thread, and I'm using that loosely, it would just kind of ride off into the sunset with no warning, no error, no nothing.

25:10.000 --> 25:22.000
Right. Nothing got told. It just silently dies, and there's no way to fix it. So I forked and rewrote what I needed in Rust, and actually I owed them a patch back. I forgot. I will. Sorry, guys.

25:22.000 --> 25:24.000
Look at this. We're keeping you accountable right here on the air.

25:24.000 --> 25:32.000
Keeping me accountable. No, I meant to PR the patch back to fix the – I found a bug in the little – well, not little, but the Rust project.

25:32.000 --> 25:44.000
Not Rust lang, but the Rust library that I'm using for this. I wrote a simple Rust program that implements this library that does what I need it to do for my application, calling into this open source library.

25:44.000 --> 25:59.000
I cut my memory usage by 90% on each STL, and I have not yet seen a case where it crashes, other than like if you intentionally give it like a bad path, right? Like a bad, you know, a file that's not an STL file.

25:59.000 --> 26:02.000
Yeah, right. Input that basically hasn't been validated.

26:02.000 --> 26:07.000
It was a harder program to write than the Ruby equivalent, for sure, but –

26:07.000 --> 26:09.000
Why was that?

26:09.000 --> 26:22.000
Well, Rust – I like your word accountability, right? Rust keeps you accountable. You can't just like, you know, write off and just throw variables, cast variables willy-nilly.

26:22.000 --> 26:29.000
You have to – you can't throw memory around. I don't even – I don't want to go into too much detail about how this program works.

26:29.000 --> 26:39.000
Basically, it's – if you think about the size of your average STL file, and you think about how the Ruby garbage collector works, you're going to have a problem.

26:39.000 --> 26:43.000
Let's say 70 megs is what we're talking about here.

26:43.000 --> 26:44.000
Okay, yeah.

26:44.000 --> 26:52.000
Where Rust is like, no, I want this memory, and I need it, and then I will tell you when I don't need it. It's just fantastic.

26:52.000 --> 27:00.000
Also, the performance – I mean, just the baseline performance difference between Ruby and Rust is kind of, you know, huge, right?

27:00.000 --> 27:06.000
Right, yeah. So you had to spend a little more time diving in, handling some things for yourself that you might not otherwise.

27:06.000 --> 27:15.000
But in this case, because of just the nature of the work and the problem space and the fit of the language, a little more work means a lot less work later supporting it.

27:15.000 --> 27:28.000
Well, yeah, right. And the other hero here is, of course, the kind of Unix model of you can just have two programs that make up your wider system and, you know, literally pass information from one program to the other and then pass it back.

27:28.000 --> 27:47.000
So that's effectively what I did. But bringing it back to Dr. Armstrong, like the entire Rust language – and I'm not trying to shortchange the Rust community or the Rust team here even – just wouldn't exist if it wasn't for Erlang and therefore, by extension, Dr. Armstrong.

27:47.000 --> 27:50.000
I mean, that's – I will die on this hill.

27:50.000 --> 27:58.000
Yeah, I mean, I think there's obviously lots of inspiration. Another one that comes to my mind immediately is Akka, right? The Scala framework for doing actors and stuff.

27:58.000 --> 28:07.000
All that stuff, while not necessarily invented in Erlang, was fleshed out and developed and brought into the real world.

28:07.000 --> 28:09.000
What about your language of choice?

28:09.000 --> 28:11.000
You know, Clojure, you mean?

28:11.000 --> 28:13.000
No, of course I mean Clojure.

28:13.000 --> 28:20.000
Well, you know, it's interesting because, as I said, I don't do a ton of Erlang. Really, I've played the most with Elixir.

28:20.000 --> 28:33.000
And I just see some parallels because both – so Rich Hickey, the founder of Clojure, is another developer, speaker, writer, thinker, whatever you want to say, whose work and thoughts I admire.

28:33.000 --> 28:43.000
And they're different, right? I mean, they've made very different languages. And in particular, I don't think that Rich really likes the actor style of programming very much.

28:43.000 --> 28:50.000
But both of them have very much valued this de-complexing things to, you know, minimize state, keep track of that.

28:50.000 --> 29:01.000
And that's one thing that, like, when you're programming with an actor framework can happen because instead of, you know, having all this shared memory that you're all immutably messing with, you're sending messages between different processes.

29:01.000 --> 29:16.000
Even beyond that, though, I think they're both thinking about things from an outsider's perspective and willing to come at ideas fresh and both be excited and talk about them and develop conversations that others might think are solved problems.

29:16.000 --> 29:29.000
And they both remain excited. So you can get into all the specifics, but even without me, you know, knowing that much about Erlang or knowing any of the frameworks, all of Dr. Armstrong's talks are just great.

29:29.000 --> 29:41.000
I'll have a couple that I like linked in the show notes. So here's an example, actually, from one of his talks where he's talking about trying to work on his presentation and ran into some updating problems, right?

29:41.000 --> 29:51.000
Where, oh, no, well, keynotes not working due to some update from Apple. And, oh, gosh, so he started looking into making this stuff with HTML.

29:51.000 --> 30:02.000
And so I Googled a bit and I found a project that said you can make nice slideshows in HTML and they can produce decent PDF.

30:02.000 --> 30:12.000
And so I downloaded this program and I followed the instructions and it said I didn't have grunt installed.

30:12.000 --> 30:21.000
And I'm an old guy, so I didn't really know what grunt was and my grunt files weren't right or something. So I Googled a bit and I found out what grunt was.

30:21.000 --> 30:32.000
Grunts, I still don't really know what it is. So I downloaded this thing and I installed grunt and it said grunt was installed.

30:32.000 --> 30:42.000
And then I ran the script that was going to make my slides and it said unable to find local grunt, but I just installed grunt.

30:42.000 --> 30:48.000
So I turned to Twitter and tweeted, you know, I'm having a really bad day here. It's unable to find the local grunt.

30:48.000 --> 30:56.000
And Twitter is very helpful because people say, well, your grunt path is incorrect, you know, set your grunt path.

30:56.000 --> 31:07.000
And so I gave up. And I just love that. I mean, sure, in one way, you can see that as, you know, trying to fight with this dumb new software.

31:07.000 --> 31:13.000
But really, we all have had those frustrations. And the way I read his attitude is, you know, he's playing with this.

31:13.000 --> 31:20.000
Even as an older person at the time of this talk, as someone very experienced in development, coming at these new tools,

31:20.000 --> 31:26.000
he had this willingness to learn and embrace and, you know, even into the later stages of his life was excited about that.

31:26.000 --> 31:33.000
And one example I liked from the post talking about this over in the programming subreddit, a nice comment from someone.

31:33.000 --> 31:40.000
The real John Freeman writes, about two weeks ago, I came across Dr. Armstrong's blog for the first time and poked around at a few posts.

31:40.000 --> 31:45.000
I noticed he had recently discovered tiddlywinky and rewritten his blog in it.

31:45.000 --> 31:52.000
His post talking about his eureka moment with tiddlywinky had just the feel of a very young, excited writer.

31:52.000 --> 31:57.000
And so I was so surprised to later discover his age and hear of his passing.

31:57.000 --> 32:04.000
And I just thought that was so true because there are some people and Dr. Armstrong was definitely a case of this that are, you know, just lifelong learners.

32:04.000 --> 32:10.000
And it's a value I hold very dear to my heart. And I think many in our communities do.

32:10.000 --> 32:17.000
And it's just, it's so easy to get jaded, especially, I mean, how frustrating and dumb are computers on an everyday basis.

32:17.000 --> 32:24.000
And the more software you write and layers you peel back, you just, I don't know about you, Mike, but I'm always so frustrated.

32:24.000 --> 32:29.000
And just like we've layered so many levels of abstractions and wrong choices over the years.

32:29.000 --> 32:38.000
So I find it really nice to have wisdom from people who've been there, who've helped develop some of those processes and aren't jaded,

32:38.000 --> 32:45.000
who want to fix things, who are arguing to make things better, simpler, de-complected, but are not doing so in a vitriolic way.

32:45.000 --> 32:49.000
You know, if I personally could learn one thing from Dr. Armstrong, it's be less of a jerk.

32:49.000 --> 32:57.000
I mean, if I've read many of his posts, I've listened to a lot of him on YouTube before I even knew who he was.

32:57.000 --> 33:00.000
Yeah, right. I mean, you see them and you're like, hmm.

33:00.000 --> 33:08.000
Yeah. And even when he didn't like something, he was always, you know, good guy, you know, good guy Joe, right? Joe Armstrong.

33:08.000 --> 33:14.000
I think we could all be better at this. I really do.

33:14.000 --> 33:21.000
You know, sometimes this is neither here nor there, not a topic for this show because we have like, what, three Linux shows on the network now?

33:21.000 --> 33:22.000
Yeah, that's right.

33:22.000 --> 33:30.000
Some of the feedback on 1904, Ubuntu 1904 for folks who aren't Linux users, has been mostly positive from my understanding.

33:30.000 --> 33:36.000
But, you know, every five or six Reddit comments, there's the crazy guy who hates it for some reason.

33:36.000 --> 33:41.000
And he may have a legitimate, like, problem.

33:41.000 --> 33:44.000
Like, I've had my share of problem with Misa utils that we talked about.

33:44.000 --> 33:49.000
Oh, yeah, absolutely. And no distribution or release is going to be perfect.

33:49.000 --> 33:56.000
You know, one thing I'm going to try for myself at least is if we can go forward in a more productive way, right?

33:56.000 --> 34:03.000
Not saying, OK, this stupid, what is it, grunt? Was grunt the JavaScript thing he needed to?

34:03.000 --> 34:07.000
Yeah. I mean, I do believe that all of that's bad.

34:07.000 --> 34:10.000
As we've discussed a little bit. Yeah.

34:10.000 --> 34:14.000
Right. At length. Right. Like, listen to episode was at once. I'm sure Chris will put it in the chat room.

34:14.000 --> 34:19.000
164, I think. Maybe it's too. I don't know. He'll figure it out. The Swift one.

34:19.000 --> 34:27.000
There's maybe a more productive way to convince people to do things differently.

34:27.000 --> 34:32.000
Particularly those of us who work in a Linux world and an open source world.

34:32.000 --> 34:35.000
I think this is kind of the lesson. Just have an open mind.

34:35.000 --> 34:41.000
You know, if someone says, hey, there's this cool thing like Marzipan coming out on Mac OS in the summer, right?

34:41.000 --> 34:45.000
You know, we're going to cover Marzipan on this show because we are.

34:45.000 --> 34:55.000
Have an open mind, right? Even if it's something as simple as, you know, Microsoft contributing all these snaps to the snap project into Ubuntu.

34:55.000 --> 35:02.000
I think somehow that by being a little more open minded, the tech community,

35:02.000 --> 35:11.000
but also more importantly, the open source community as a whole would actually do more impressive things a lot faster.

35:11.000 --> 35:15.000
Does that make sense, Wes? Or does that sound crazy? No, I think I completely agree.

35:15.000 --> 35:19.000
And it's it's those values, that approach being available, always excited.

35:19.000 --> 35:24.000
We'll have some links to some other eulogies for people's thoughts on Dr. Armstrong.

35:24.000 --> 35:29.000
And one thread I kept pulling out is, you know, how available you can see his talks.

35:29.000 --> 35:35.000
And if you if you were lucky enough to go to any of the conferences that he was attending, then you know that he was just an excited person.

35:35.000 --> 35:40.000
It wasn't didn't think about status or or, you know, records or achievements or any of that stuff.

35:40.000 --> 35:43.000
He was just genuinely excited about life.

35:43.000 --> 35:49.000
One of the links is a great little write up by one of his day to day co-workers just talking about what he was like to be in the office and how, you know,

35:49.000 --> 35:55.000
he would find some idea that would happen in and would just want to discuss it, would make noises out loud until someone would come over.

35:55.000 --> 36:00.000
You know, he would just get so excited until he draw someone in and they would want to talk about it with them.

36:00.000 --> 36:08.000
So that I think the twin things of being, you know, having an excited spirit about making things better and discovery and renewal.

36:08.000 --> 36:15.000
And then at the same time, keeping an eye towards simplicity, simplicity and systems thinking.

36:15.000 --> 36:20.000
They're just going to be Dr. Armstrong's legacy for, I think, time immemorial.

36:20.000 --> 36:25.000
And I've just got one more clip from from that same talk that I think speaks to that.

36:25.000 --> 36:29.000
Right. So we've made all this mess.

36:29.000 --> 36:37.000
Dijkstra said that computing was about controlling complexity and we have failed miserably.

36:37.000 --> 36:47.000
OK, I think one way to do that by I think about 128 kilobytes of stuff is about the limit to what the human brain can can can do.

36:47.000 --> 36:56.000
The only way to make reliable systems and modular composable systems is to make them out of small units which we can validate and then connect them together.

36:56.000 --> 37:01.000
I think we know how to do it in a way. We actually need to reverse entropy.

37:01.000 --> 37:08.000
We need to take we need to do the opposite of you see GitHub is sort of cloning off things and it's getting bigger and bigger.

37:08.000 --> 37:13.000
We need mechanisms to make things smaller and smaller.

37:13.000 --> 37:18.000
Quantum mechanics does set these kind of upper bounds on what is possible.

37:18.000 --> 37:22.000
So when we're figuring out the complexity of algorithms, we need to be aware of that.

37:22.000 --> 37:27.000
And we also need to be aware of the state space of what we're doing is is enormous.

37:27.000 --> 37:40.000
And that's why I mean, if we relate the complexity of the program to the number of atoms on the planet, we'll see the very, very small program has as many possible states as the number of atoms on the planet.

37:40.000 --> 37:45.000
It's just enormously complex. We need to abolish names and places and replace them with hashes.

37:45.000 --> 37:49.000
And we need to set up global distributed hash tables and things like that.

37:49.000 --> 37:53.000
And then we need to make lower power computers that don't do environmental damage.

37:53.000 --> 37:56.000
We don't really want to fry the planet in answering all our questions.

37:56.000 --> 38:00.000
We need to make these carbon neutral powered by solar panels and things like that.

38:00.000 --> 38:05.000
We need to get down the energy of computation. Computers are becoming a big environmental threat.

38:05.000 --> 38:08.000
They're using more energy than air traffic and things like that.

38:08.000 --> 38:12.000
And this is something while we can probably do without.

38:12.000 --> 38:16.000
Well, no, we need both air traffic and we need computers. One is capable of going down to a very low energy.

38:16.000 --> 38:20.000
The other is not. And computers can be made to operate at extremely low power.

38:20.000 --> 38:25.000
We need to do so with a degree of urgency.

38:25.000 --> 38:29.000
So that's what we've got to do. We've got to clean up the mess we've made.

38:29.000 --> 38:32.000
Thank you.

38:32.000 --> 38:36.000
And I think he's just spot on and we just all need to go get to work doing that.

38:36.000 --> 38:38.000
Can't agree more.

38:38.000 --> 38:41.000
All right. Well, unfortunately, we've got to move on with our program.

38:41.000 --> 38:45.000
This week, I saw an interesting little article and we're not going to dive into it or anything.

38:45.000 --> 38:51.000
But just making the point that if you were going to be a writer, right, you're trying to become an author.

38:51.000 --> 38:56.000
What do people tell you to do? Like the first thing, right? I mean, obviously you have to write, but you also you need to read.

38:56.000 --> 39:03.000
And so this article kind of laid out some of the importance of if you're trying to become a more experienced software engineer,

39:03.000 --> 39:10.000
developer programmer of any kind. Yes, you need to practice the actual act of your craft.

39:10.000 --> 39:16.000
But it is just as important to go out and look at how others work, because, you know, we all interact with programs on an everyday basis.

39:16.000 --> 39:23.000
But that's very different than taking something that you've never touched and becoming familiar with it and reading it and understanding it.

39:23.000 --> 39:30.000
So I like this article had some good tips about, you know, actually go get the code and and run it and then maybe start writing tests to try to help you break it down

39:30.000 --> 39:38.000
and do some deep dives and analyze how the control flow works. I just thought it was it was a good little moment to reflect on.

39:38.000 --> 39:43.000
You need you need to check things out because I'm always surprised by the little things I learned.

39:43.000 --> 39:50.000
I remember like when I was first starting up, I think it was VB6 and I remember like going to some forums and this was before, you know,

39:50.000 --> 39:58.000
any sort of like nice online version control. So it's just like browsing little like a snippet website that would have these like terrible visual

39:58.000 --> 40:03.000
basic snippets that I would copy and paste. But that was enough to, you know, get me going.

40:03.000 --> 40:08.000
And I could take that and I could learn from that. And it's something I really still try to do today.

40:08.000 --> 40:15.000
So really, I just want to bring it up because I've got some I've got some stuff, dear audience, if you're interested, that you might enjoy reading.

40:15.000 --> 40:22.000
And one reason I like Clojure is yes, sure, weird syntax, but it's very concise. And I find that makes it very easy to read.

40:22.000 --> 40:29.000
So I saw this pop up over in the Clojure subreddit this week. And it's just it's like a it's a nice little Web app for Tetris.

40:29.000 --> 40:33.000
It's almost complete in terms of like Tetris functionality. You can totally go play it.

40:33.000 --> 40:37.000
And honestly, that's what I did just for the first, you know, 10 minutes of looking at this thing.

40:37.000 --> 40:41.000
But the other nice part is it's just right up on GitHub. It's totally self-contained.

40:41.000 --> 40:47.000
You can go check it out and clone it and get it set up. And the main the whole heart of it.

40:47.000 --> 40:54.000
Is like a 500 line file, just just a 500 line file. And you can just read it straight down, you know, like an article.

40:54.000 --> 41:00.000
It starts off at the top and define some data structures to describe the actual Tetris blocks and how they're laid out in the grid.

41:00.000 --> 41:05.000
You can go read about the collision detect detection algorithm. It's just all right there.

41:05.000 --> 41:11.000
And unlike, say, maybe like a Java library or a dependency that you're looking at where you have like, I don't know,

41:11.000 --> 41:17.000
a thousand different files and different folders and arbitrary hierarchies that you have to try to trace and keep in your head.

41:17.000 --> 41:21.000
This does seem like a nice self-contained thing that you could understand.

41:21.000 --> 41:29.000
And I know a lot of people are interested in games and stuff or maybe just want to get learn more about how to create that sort of thing in the Web.

41:29.000 --> 41:33.000
Check this out over on GitHub. DJ Blue is implementation of Tetris.

41:33.000 --> 41:43.000
And I've also linked by another Clojure community member, Sean LeBron, who made the very nice power infer plugin, which is the topic for another day.

41:43.000 --> 41:46.000
But he's actually got an interactive Clojure script presentation.

41:46.000 --> 41:52.000
So it's a Web presentation that builds Tetris in the browser as you go through the presentation.

41:52.000 --> 41:55.000
And you can interact with it and play with it and tweak the code. It's great.

41:55.000 --> 41:59.000
That sounds amazing. And I heard that you're going to be out and about pretty soon.

41:59.000 --> 42:07.000
Oh, yes, that's right. If you haven't heard and I feel like if you listen to these shows, I don't know how you how you didn't.

42:07.000 --> 42:13.000
Linux Fest, Northwest, JB's home conference is coming up this weekend. Yes, that's right.

42:13.000 --> 42:20.000
So we're having basically a big old JB blowout. People are coming in, I think, starting tomorrow.

42:20.000 --> 42:24.000
The first the first people arrive. So there's going to be people all over the studio.

42:24.000 --> 42:35.000
You're definitely going to want to check out JBLive.tv throughout basically this whole week and the weekend, because we're going to be doing some live streaming, like check out the Friday stream that's coming up 2 p.m.

42:35.000 --> 42:43.000
or so on this Friday live JBLive.tv. And of course, we're going to be doing our Linux Fest Northwest live streaming.

42:43.000 --> 42:51.000
So there's lots of good content. If you're interested in that, you couldn't make it out this year, but you still want to see all of these wacky characters that you know and love.

42:51.000 --> 42:56.000
Well, we'll have it for you and a whole lot more over at jupiterbroadcasting.com. Sounds amazing.

42:56.000 --> 43:04.000
Catch a beer with the JB guys. Yeah, exactly. And I'm finally going to meet some of these people that I get to talk to, but I've never seen before.

43:04.000 --> 43:16.000
That's right. So also, if you are a middle school or high school student or you know one and that student is technically inclined, my company, the Mad Vodder, is throwing a little Earth Day contest with us.

43:16.000 --> 43:22.000
Oh, really? Tell me more. That's neat. So we're taking submissions for a month.

43:22.000 --> 43:31.000
We're taking it from middle school and high school students, a technical solution that has to be powered by Linux to help mitigate global warming.

43:31.000 --> 43:38.000
If you can solve it, fantastic. And the prize, we're going to pick one from the middle school age and one from the high school age.

43:38.000 --> 43:47.000
The prize is a System76 Darter prize. Oh, see, that's a prize I could get behind. You said that I have to be a middle or high school student. I can't enter, right?

43:47.000 --> 43:52.000
You do. Yeah, neither can Chris because I'm sure he's foaming at the mouth over there. Yeah.

43:52.000 --> 43:57.000
Well, that's great. So how long do they have to send this in?

43:57.000 --> 44:08.000
They have a full month. So we're going to pick the winner at the end of May and we're going to send out machines and announce it the first or second week in June, depending on shipping and stuff like that.

44:08.000 --> 44:19.000
Well, that is fantastic. We'll have that linked, of course, coder.show slash 354. But also you can find that over at the company's Twitter, right? What is that?

44:19.000 --> 44:22.000
That's at the Mad Vodder Inc. on Twitter.

44:22.000 --> 44:25.000
That is great. And you know, I've heard you're there too, Mike.

44:25.000 --> 44:29.000
At Jumanuco. That's right. If you're looking for a good fight with Kara Swisher, I'm your man.

44:29.000 --> 44:38.000
Oh, you know that I am. And I might just have to join in. I'm at Westpane and you can find the whole network there too. We're at Jupiter Signal.

44:38.000 --> 44:56.000
That's going to bring us to the end of today's Coder Radio. Thank you so much. We'll see you next time.

45:08.000 --> 45:28.000
Thank you.


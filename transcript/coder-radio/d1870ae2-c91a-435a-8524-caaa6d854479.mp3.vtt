WEBVTT

00:00.000 --> 00:07.000
This is Kota Radio, episode 361, for June 10th, 2019.

00:30.000 --> 00:38.600
Hello, and welcome to Kota Radio, Jupiter Broadcasting's weekly talk show that takes

00:38.600 --> 00:46.480
a pragmatic look at the art and business of software development and related technologies.

00:46.480 --> 00:52.360
My name is Wes, and I'm extra special pleased to be joined by Mr. Michael Dominic today.

00:52.360 --> 00:57.400
He had to survive a thunderstorm and worse, an internet outage. But nevertheless, you're

00:57.400 --> 01:00.960
here, Mike. Welcome to the show, and thank you for joining us.

01:00.960 --> 01:06.440
Thank you for being patient, Wes. And I am here, older, wiser, and more educated. Did

01:06.440 --> 01:10.840
you know that FiOS Verizon boxes have batteries in them?

01:10.840 --> 01:14.640
Oh, no. You know, I've never really dug in too deep to know how those things work on

01:14.640 --> 01:15.640
the inside.

01:15.640 --> 01:22.280
Well, I have had one for only five years now, and I guess my battery's dead. So when the

01:22.280 --> 01:25.880
power went out because of a thunderstorm, I had no interwebs.

01:25.880 --> 01:31.640
No interwebs. Yeah, that's, that's pretty rough when you're trying to do a live streamed

01:31.640 --> 01:32.640
internet podcast, right?

01:32.640 --> 01:35.680
Yeah, and it's bad for Kota Radio too. I mean, my whole webcam thing was fine because I pre

01:35.680 --> 01:37.920
recorded it. Oh, you're not talking about that.

01:37.920 --> 01:43.000
Oh, no, no, I'm not. So before we get feedback about that, which you can do, by the way,

01:43.000 --> 01:49.020
by to go into kota.show slash contact, find all the great ways to get in touch with us.

01:49.020 --> 01:54.520
Let's get to some feedback we already have from our friend Lance. Now, Lance has a bit

01:54.520 --> 02:02.760
of a FOSS quandary. He writes, I was working on an open source project for school that

02:02.760 --> 02:08.560
we meaning four members submitted. Now, as often happens, myself and one other person

02:08.560 --> 02:15.040
did about 98% of the work and the others contributed to the documentation, which incidentally was

02:15.040 --> 02:21.460
kept outside the code base. Class is over now for many months, and no one has touched

02:21.460 --> 02:26.640
the code, except for the other member who did most of the work. And really, we both

02:26.640 --> 02:32.220
want to keep this stuff going. Do we downgrade the other two non contributors from owner

02:32.220 --> 02:37.840
to contributor and take over maintaining the project, but give them initial project credit?

02:37.840 --> 02:42.000
Do we shoot them an email and inform them of our plans? And the with, you know, all

02:42.000 --> 02:46.880
the risks of confrontation, them saying no, or wanting to fight about it? For a little

02:46.880 --> 02:50.200
context here, one member felt slighted by the direction the project took. So there's

02:50.200 --> 02:55.620
already a little drama. Maybe we should just fork it, you know, there would be some confusion,

02:55.620 --> 03:00.760
because there's already like 15 some users using the snap that we're publishing. Any

03:00.760 --> 03:02.880
insight appreciated, Lance?

03:02.880 --> 03:05.960
I'm going to go first, because I think I'm going to have a much less nuanced and nice

03:05.960 --> 03:11.560
approach to this. Oh, yeah, lay down, Mr. Dominic. Fork it to the ground, man. 15 snap

03:11.560 --> 03:17.520
users. I mean, I get that is pretty good for just, you know, random FOSS project. But I

03:17.520 --> 03:24.120
have never seen a case where contributors got into a, shall we say, Rochambeau contest

03:24.120 --> 03:29.080
that ended well for the project as a whole. Just fork it, do your own thing. I'm thinking

03:29.080 --> 03:34.800
particularly of what was it? What is the fork of ionic West? Is it Lauria? Or, um, I'm forgetting

03:34.800 --> 03:38.440
the name. But yeah, I know what you're talking about. It's something like that. Yeah. And

03:38.440 --> 03:43.160
like, the answer is when the contributors don't agree, you fork. And frankly, you should

03:43.160 --> 03:46.840
have information on the people that you're using your project, I hope you're saying there's

03:46.840 --> 03:52.480
15. So you must know something. Just be very, very loud about it, right, right, right into

03:52.480 --> 03:58.360
podcasts that cover this stuff, post something on a website for the fork project on the GitHub,

03:58.360 --> 04:02.360
and link back to the original project and say it's a fork. And very nicely and professionally

04:02.360 --> 04:06.840
say it's forked, not not for personal conflicts, never say stuff like that. But say like it's

04:06.840 --> 04:11.480
forked because I have no idea what your project is, but say it's forked. You know, there was

04:11.480 --> 04:15.920
some technical disagreement on how to do something, which I'm getting the feeling is kind of what

04:15.920 --> 04:21.760
happens anyway. So Wes, you know, actually, I think I completely agree. It's it's early

04:21.760 --> 04:25.840
enough in the project that you can just fork it and and you're just not going to have the

04:25.840 --> 04:29.760
same kind of complaints, right? Totally fair that as long as the license allows you to

04:29.760 --> 04:34.280
do that, which sounds like it does. Why not keep it simpler? And then you won't have they

04:34.280 --> 04:37.440
have no claims of governance, right? This is a brand new thing, your own fork, and you

04:37.440 --> 04:41.480
can set things up from the get go. And assuming you're looking to look work on this project

04:41.480 --> 04:47.440
for you know, some time to come. After a while, all this nonsense will fade away into the

04:47.440 --> 04:52.080
distance of time. So I think you're spot on, Mike. And it's one of the nice things that

04:52.080 --> 04:56.520
you can do when you play in the open source space, right? You don't have to stick to existing

04:56.520 --> 05:00.280
governance structures or agreements or models, like as long as you respect the licenses,

05:00.280 --> 05:02.000
have at it, run it your way.

05:02.000 --> 05:05.240
Yeah, absolutely. You're much freer to do as you wish.

05:05.240 --> 05:10.360
All right. So next up in our feedback segment, Mike, you're pointing us at just a little

05:10.360 --> 05:17.280
bit of Mac Pro trolling. Now, we did talk a little bit about the Mac Pro because, well,

05:17.280 --> 05:22.400
we were both salivating and acknowledging we're probably never buying one of these things.

05:22.400 --> 05:29.700
Yeah, my banker says I can't have a mortgage to buy a Mac Pro. So the subreddit was kind

05:29.700 --> 05:36.560
enough to show us all the things we could buy instead. It's a pretty long list for us.

05:36.560 --> 05:41.120
Yeah, it's not a conservative list at all.

05:41.120 --> 05:46.840
Yeah, right. Things like a Galaxy S10, a Pixel 3a, maybe an iPhone XR, a Mac Mini for, you

05:46.840 --> 05:50.800
know, building and testing all these applications. Plus, you're going to need a mobile development

05:50.800 --> 05:58.300
Ultrabook. So pick up like an XPS 13 or a Lenovo X1, maybe buy a nice 27 inch 4k monitor,

05:58.300 --> 06:03.720
and a Windows PC for, you know, gaming or machine learning or whatever. You can buy

06:03.720 --> 06:08.600
all those things or buy the base level Mac Pro.

06:08.600 --> 06:14.080
Yeah, I mean, it's pretty clear to me that the Mac Pro is just not meant for developers.

06:14.080 --> 06:20.040
Certainly, if you're a guy named Marco, you could definitely buy one because you're rich.

06:20.040 --> 06:25.280
But yeah, you don't need this, right? Like, no one needs this.

06:25.280 --> 06:30.600
Well, maybe. Yeah. All right. You're right. With the word need, no one needs this. Yeah,

06:30.600 --> 06:31.600
that's true.

06:31.600 --> 06:34.800
Right. And when I say no one, I mean developers, right? Like if you are literally working on

06:34.800 --> 06:40.400
the next Marvel movie, yes, you probably do need this. But right. No, absolutely. If you

06:40.400 --> 06:45.560
want this and you have the money, you know, grate that cheese, man. Grate it. Grate it

06:45.560 --> 06:51.000
with all your fury, your might, your love. Be like Sauron, pour everything into the cheese.

06:51.000 --> 06:54.960
That's some special advice you've got there, Mr. Dominic. But I think you're right about

06:54.960 --> 07:00.800
that. Let's move right along because there's more fallout from WWDC, even though we're,

07:00.800 --> 07:07.840
you know, we're a week on now. One thing you pointed out, there will be a change in the

07:07.840 --> 07:11.920
default shell in the next version of Mac OS.

07:11.920 --> 07:20.260
That's right. The born again shell is banished. No more. No more. In the land of Catalina,

07:20.260 --> 07:29.760
there will be no born again shell. It is now Z shell. So yay. And when I say yay, I mean,

07:29.760 --> 07:30.760
I hate change.

07:30.760 --> 07:34.160
Yeah, I am curious about how you actually feel about this. Because I mean, I don't have

07:34.160 --> 07:40.720
a lot of Macs in my life. I have used ZSH before, and I think it's a fine shell environment.

07:40.720 --> 07:44.640
But it is probably it's a weird change to make, and it's not going to be completely

07:44.640 --> 07:45.640
smooth.

07:45.640 --> 07:51.220
Well, I have a few thoughts on this, right? But for a baseline for our not a Mac users

07:51.220 --> 07:59.600
in the audience, the bash on Mac currently is an old version of bash anyway. So one thing

07:59.600 --> 08:04.120
that Linux switcher switchers will find is that holy crap, that's just so much better

08:04.120 --> 08:09.600
on Ubuntu, or you know, insert distro here. That has nothing to do with Mac and everything

08:09.600 --> 08:13.760
to do with the fact that Apple packages an old version of batch. And that has everything

08:13.760 --> 08:16.840
to do with the GPL three, I believe, which Apple does not like.

08:16.840 --> 08:20.740
Right. So they're basically packaging the newest version of bash they could that was

08:20.740 --> 08:26.760
still on the GPL two, right? Right. And hence, you have this ancient version of bash. And

08:26.760 --> 08:29.040
it turns out batches has kept getting better actually.

08:29.040 --> 08:36.080
Yes, it turns out the open source community, like keeps improving. So Z shell isn't is

08:36.080 --> 08:42.440
probably a smart choice, although kind of disappointing in my mind. You know, Z shell

08:42.440 --> 08:48.000
is more or less one to one command similar to bash. There is a unless you are a like

08:48.000 --> 08:55.020
deep command line user on Mac, you're probably not going to notice. If you administer a lot

08:55.020 --> 09:00.400
of Linux servers that have batch, then there might be edge cases. But realistically, your

09:00.400 --> 09:03.720
your average development user working on a Mac is probably never going to notice the

09:03.720 --> 09:08.280
difference. I actually wish they if they were going to do this, they had just gone with

09:08.280 --> 09:13.520
like fish, fish shell or f shell. You know, if you're going to change it, and if you're

09:13.520 --> 09:17.520
going to cause that disruption, which again, for most people probably isn't that much of

09:17.520 --> 09:24.300
a disruption, and it's why they went with Z shell, I would have loved a just a more modern,

09:24.300 --> 09:29.080
like really much more modern shell Z shells kind of, you know, it's not bad. I don't mean

09:29.080 --> 09:33.800
to disparage the shell, but it's a pretty conservative choice. If you were going away

09:33.800 --> 09:37.680
from bash, you could have, again, I like f shell or fish shell, whatever you want to

09:37.680 --> 09:38.680
call it. But yeah,

09:38.680 --> 09:45.760
no, I mean, I do find myself when switching shells, usually on fish. But is there something

09:45.760 --> 09:49.120
to be said about trying like, they didn't have a lot of options that are seemingly totally

09:49.120 --> 09:55.320
unwilling to ship the GPL three binaries. Fish is I mean, some of the more recent versions

09:55.320 --> 09:58.880
actually have been making some, you know, like they've added support. So it's like the

09:58.880 --> 10:03.280
and operator and or operators are more similar. So they have been making some strides to being

10:03.280 --> 10:09.940
more bash compliant. But fishes up front about not being bash compliant. ZSH also has some

10:09.940 --> 10:14.160
of their own stuff, right? So I mean, I don't know that you could convert a script, if you're

10:14.160 --> 10:18.920
using some complicated stuff, but probably command line will just be nicer. It manages

10:18.920 --> 10:23.720
to fish on the other hand, of course, you don't have to configure it, right? We'll have

10:23.720 --> 10:30.760
links to a bunch of different ZSH resources in the show notes over at coder.show slash

10:30.760 --> 10:37.640
361. There's a whole bunch of different configuration guides and tool sets and plugins and options

10:37.640 --> 10:46.100
for making ZSH making ZSH shine. Fish, I never find myself really doing that because I only

10:46.100 --> 10:50.920
need to tweak a few settings and get going. I don't have a good sense though, like, of

10:50.920 --> 10:55.840
the Mac developer community, people who actually use shells on Mac OS, how many of them are

10:55.840 --> 11:00.160
like really familiar with it and want customization or care at all? And how many of them just

11:00.160 --> 11:01.160
won't notice at all?

11:01.160 --> 11:08.000
I mean, my experience has been not much right? Like, I honestly I think this is the biggest

11:08.000 --> 11:16.060
non story of WWDC, except for a few small, maybe not small, but a few hardcore like DevOps

11:16.060 --> 11:22.480
as Docker developers, or developers using Docker, not the developers of Docker, of course,

11:22.480 --> 11:26.440
who are running Mac OS and like, they're going to get hit with their giant bash scripts that

11:26.440 --> 11:28.880
are edge cases going from bash to Z shell.

11:28.880 --> 11:33.140
Right. And you can still of course, have bash installed. And if it's not your default shell,

11:33.140 --> 11:37.420
you can still, you know, if you've specified and run it with the binary, that's bash, but

11:37.420 --> 11:38.880
that should just still work too.

11:38.880 --> 11:43.080
Right, you could you could like, I'm sure someone is going to package a bash in a dot

11:43.080 --> 11:48.400
app that you can just run on your Mac, if it doesn't already exist, right? So.

11:48.400 --> 11:50.560
So you're not freaking out about it? Is that's what I'm hearing?

11:50.560 --> 11:53.900
No, I'm a little disappointed, right? Like, if you're if you're going to change, I would

11:53.900 --> 11:57.000
have actually liked to see fish. And I know that's my preference. And I'm sure I did not

11:57.000 --> 11:58.560
know you were a fishy, by the way.

11:58.560 --> 12:03.160
Yeah, I don't use it on all my machines. And I don't often put it on servers. But for my

12:03.160 --> 12:05.960
desktop machines, I like it a lot.

12:05.960 --> 12:09.840
You know what they say was plenty of fishies in the sea.

12:09.840 --> 12:14.480
That's true. So one little trolling question here, though. Are you sure they wouldn't have

12:14.480 --> 12:18.520
just reinvented and made their own shell if they were really going to spend that much

12:18.520 --> 12:19.520
time into it?

12:19.520 --> 12:23.840
Oh, geez. Yes, Swift shell, I can already see it.

12:23.840 --> 12:29.000
It's like AppleScript, but in a shell form somehow merged with the best aspects of PowerShell.

12:29.000 --> 12:33.300
Craig Federighi, if you're listening, you did not hear that. He's it's just delete the

12:33.300 --> 12:39.720
episode. Don't listen. Do not tempt them. Okay, just I'm back on Mac. And I really don't

12:39.720 --> 12:45.200
want it to be non compliant with POSIX. Like, let's just click. They're scaring me, Wes.

12:45.200 --> 12:51.320
They're scaring me with this T2 crap. And like, I don't know. I think the BSD core might

12:51.320 --> 12:56.440
be in a little bit of danger. But that's my pet theory. Five years, no more BSD on Mac.

12:56.440 --> 12:57.440
You heard it here first.

12:57.440 --> 13:01.680
Right? You can see them just between other things, maybe virtualized environments or

13:01.680 --> 13:06.640
other solutions. It's kind of worrisome, like how much are they going to keep that legacy

13:06.640 --> 13:10.160
intact? And how much are they going to move forward to their own development environments

13:10.160 --> 13:13.360
and development kits? Because they have all that stuff. And if you don't need the other

13:13.360 --> 13:18.000
stuff, if you're just writing for their ecosystem, but it's nice to be able to do both from one

13:18.000 --> 13:19.000
machine.

13:19.000 --> 13:25.200
There's an Alice Cooper song about this Welcome to My Nightmare. Let's just leave it there.

13:25.200 --> 13:31.160
I think that's well set. So speaking of Swift, since you brought it up, I have to say that

13:31.160 --> 13:33.840
I love Swift.

13:33.840 --> 13:39.160
I'm suspicious that this isn't the real Michael Dominic. What happened? What happened in that

13:39.160 --> 13:40.160
thunderstorm?

13:40.160 --> 13:48.680
I was struck by a lightning. A Swift bolt redesigned my UI via Swift UI. That was really,

13:48.680 --> 13:49.680
really contrived.

13:49.680 --> 13:55.520
Okay, well to make up for it, maybe just break down Swift UI a bit because we didn't really

13:55.520 --> 13:59.400
get to talk about it too much on the previous episode. Now you've had some time to look

13:59.400 --> 14:03.680
at it, let it soak in, see other people chat about it. What's going on here? Why should

14:03.680 --> 14:04.900
I care?

14:04.900 --> 14:11.440
So it is a declarative user interface language basically written in Swift obviously, for

14:11.440 --> 14:20.240
making iOS and macOS UIs. It is very similar to let's say a reactive programming model,

14:20.240 --> 14:29.040
right? You have components. I think the key is our one, it's bringing iOS development

14:29.040 --> 14:35.840
user interface development into a more modern development paradigm. So no more crazy layout

14:35.840 --> 14:42.480
constraints. Yay. No more screwing around an interface builder. It does not take a lot

14:42.480 --> 14:47.600
of code with Swift UI to get a pretty decent standard UI done. Of course, once you start

14:47.600 --> 14:52.600
going like super fancy designers handed you Photoshop files, yes, then you're going to

14:52.600 --> 14:55.000
be doing quite a bit of work.

14:55.000 --> 15:01.440
But it's based on a component model. So I've been digging in Wes, I've been scooping the

15:01.440 --> 15:07.960
ice cream out of the Swift UI tub. And I have two blog posts written converting an Xcode

15:07.960 --> 15:15.120
project existing one to Swift UI, and existing components to Swift UI. So again, that would

15:15.120 --> 15:21.560
be like, let's say you have, you know, Wes's button, right? Which is a subclass of UI button.

15:21.560 --> 15:26.120
Right. So this is some component I've sort of customized, added some neat functionality.

15:26.120 --> 15:29.360
Maybe you press it and it buys me a sandwich or something great like that.

15:29.360 --> 15:35.800
Right. And it has like certain layout properties that you don't want to lose, right? This is

15:35.800 --> 15:41.400
Swift UI allows this type of custom control to just simply be wrapped in Swift UI and

15:41.400 --> 15:46.800
then use like any other Swift UI class. And it doesn't have to be your thing, right? Like

15:46.800 --> 15:51.360
I did something with the Google sign on button, which is a GD sign on button from the Google

15:51.360 --> 15:55.600
SDK. And sure enough, you can just wrap that bad boy in Swift UI.

15:55.600 --> 15:59.160
Oh, see, that sounds pretty nice.

15:59.160 --> 16:02.120
But you have something in here about react developers in Swift UI.

16:02.120 --> 16:06.440
Well, I was I was gonna ask you about that. I saw a couple tutorials floating around our

16:06.440 --> 16:12.000
tutorials too strong of a word explorations, perhaps. And just trying to make some comparisons

16:12.000 --> 16:17.840
between how stuff is done with react or react native. And some of the ideas coming in in

16:17.840 --> 16:23.360
Swift UI, particularly as it goes to maybe more of the declarative end. And I'm wondering

16:23.360 --> 16:25.160
if if you notice that as well.

16:25.160 --> 16:30.320
Yeah, you could you could tell that there was some inspiration from from react native,

16:30.320 --> 16:40.680
right and, and really just reactive programming as a whole. I I sort of think in a way the

16:40.680 --> 16:46.040
similarities folks coming from in particular react native, the similarities are going to

16:46.040 --> 16:51.080
make it easy for them to get started and really sneaky when they're different.

16:51.080 --> 16:55.440
So you're worried that people become a little too familiar or think that it's more similar

16:55.440 --> 16:56.820
than it really is?

16:56.820 --> 16:59.280
Not that word, right? It'll be one of those things where it's just like a bug you're not

16:59.280 --> 17:03.720
used to kind of like memory management was before automatic reference counting, right?

17:03.720 --> 17:07.780
Folks who are used to like Java would get screwed up in Objective C because they'd forget

17:07.780 --> 17:14.160
about memory management. But this is I mean, I have to say like, the post here is pretty

17:14.160 --> 17:19.920
pretty clear if it's one to one comparisons like sure, you know, react keeps a lot of

17:19.920 --> 17:26.420
the web HTML a kind of syntax. But the structure of the code the way the way things basically

17:26.420 --> 17:33.360
flow for lack of a better word, is virtually virtually the same. There's some weirdness

17:33.360 --> 17:38.040
on like interactive controls like buttons. I'm not going to get into like which way I

17:38.040 --> 17:44.120
think is better because I am not a react developer and it would be unfair. I will say that when

17:44.120 --> 17:50.640
one thing I do like about reacts implementation that I'm not thrilled about the Swift UI is

17:50.640 --> 17:54.080
that it's much more explicit, right? So for instance, and this is like, again, a dumb

17:54.080 --> 18:01.280
contrived example. You have you have a button West's bun in react native. Well, you just

18:01.280 --> 18:07.260
like feed it a function, right? A, you know, an object that is a function for the on press.

18:07.260 --> 18:12.920
And it's literally on press equals, you know, buy West's sandwich. Swift UI makes that much

18:12.920 --> 18:18.840
more magical. What do you mean by magical here? Well, so the syntax I find a little

18:18.840 --> 18:22.720
hard to read, right? And again, this will be linked in the docs and you can follow along.

18:22.720 --> 18:26.480
The equivalent in react native is like you lay out the button and then in the button

18:26.480 --> 18:32.560
HTML tag, you have on press equals this dot on press right is the function he's calling.

18:32.560 --> 18:39.720
Great. Love it. Makes sense. The Swift UI version is button, open parenthesis, action

18:39.720 --> 18:46.400
colon curly brace. So it's obvious it's a lambda function, right? Like self on press

18:46.400 --> 18:52.760
button, close curly brace, print. I know this is terrible. Another open curly brace. And

18:52.760 --> 18:57.920
then it defines the text property, which is press me. Like, it makes sense. But I find

18:57.920 --> 19:02.840
it to be like, if I was looking at a long view with a bunch of buttons like this sample

19:02.840 --> 19:11.400
has, which again, I get it is is is contrived. I think a little more window dressing on like

19:11.400 --> 19:15.440
just having it not be an anonymous function that you just throw in there would have would

19:15.440 --> 19:20.480
make it more readable. Yeah, it is. It is fairly nested. And it's not exactly clear.

19:20.480 --> 19:23.960
It's not clear. Yeah, you're right. It's less explicit. And as someone who's only played

19:23.960 --> 19:28.200
with Swift a tiny bit and can try to read it, it took me a little bit to to interpret

19:28.200 --> 19:33.760
like, what does this actually mean? Well, it also requires you to understand right that

19:33.760 --> 19:38.640
so like the first one in this list here, it's button action, the one I just read out, that

19:38.640 --> 19:44.360
action is actually passing. I'm going to call a lambda function. It's just a function, right?

19:44.360 --> 19:48.840
Which function anonymous function, thank you, which is, you know, it's calling another function

19:48.840 --> 19:53.280
called self on press. But then there's like no x, and then it closes the declaration right

19:53.280 --> 19:58.160
with a closed parenthesis. And then it just has another open curly brace that says text

19:58.160 --> 20:03.800
press me. Now, that is this code is laid out correctly. This is the way Xcode would lay

20:03.800 --> 20:09.680
this out. So it's not a it's not a dig on the author at all, which is Rohan pachel.

20:09.680 --> 20:16.480
I'm sorry, Pancho. It's just confusing because you have to know that this is the way Swift

20:16.480 --> 20:21.360
does things. You have to know that that second open curly brace is now basically for lack

20:21.360 --> 20:26.120
of a better term properties on the button, right? So you're just adding that as additional

20:26.120 --> 20:31.680
stuff that gets applied to the button, right? Like you could, there's like all views have

20:31.680 --> 20:36.320
properties like the stuff you would think about was right, like background color, blah,

20:36.320 --> 20:41.480
blah, blah. But oh, yeah, of course. I like even the second example he gives here, where

20:41.480 --> 20:45.400
it's the same thing as the first one. But then after you do the text, you also have

20:45.400 --> 20:52.860
at the end of the close curly brace dot accent color. And it's you know, RG being a color.

20:52.860 --> 21:00.560
That's see, to me, that's a pretty ugly syntax, basically. Like I would, I would prefer something

21:00.560 --> 21:05.960
a little more verbose, I guess. But I mean, that's a nitpick.

21:05.960 --> 21:11.000
Yeah. And it's also a little weird, too. It's kind of hard to tell like, what's data versus

21:11.000 --> 21:13.920
other stuff that's wrapped up here, right? Like even the like the color thing, you're

21:13.920 --> 21:18.880
passing arguments with numbers, and ratios and stuff, but it's all inside some constructor.

21:18.880 --> 21:23.840
Yeah. And it's also a little weird that like, okay, so why is accent color dot accent color,

21:23.840 --> 21:29.360
right? Why isn't it like, just, you know, accent color in the in the curly braces with

21:29.360 --> 21:30.360
where the text is?

21:30.360 --> 21:34.080
All right, well, then how do you feel about this stuff? I mean, is it fair to say this

21:34.080 --> 21:40.160
is, this is gonna be the future? I heard some about like, like, as the as the watch platform

21:40.160 --> 21:44.760
is developed more like this is the way to go for that direction. What does this mean

21:44.760 --> 21:48.440
for the state of development targeting Apple's ecosystem?

21:48.440 --> 21:54.160
Yes, on the Apple side of life, Swift UI is going to be the future. I think, you know,

21:54.160 --> 21:57.740
this is how Apple does things, right? They release the new paradigm, the old paradigm

21:57.740 --> 22:03.240
hangs around for a while. But it's, you know, if I if I was file new project in something,

22:03.240 --> 22:08.000
which I did, I would go to Swift UI as quick as I could.

22:08.000 --> 22:14.040
If you know, you've spent a lot of time talking about Objective C and using it, espousing

22:14.040 --> 22:18.560
it here on the show. If you weren't already someone who was sort of playing in Swift,

22:18.560 --> 22:23.200
or, you know, had had not really adopted some of the paradigms there, how much I'm trying

22:23.200 --> 22:27.920
to get a sense how much of a change is this for just like your standard iOS developer?

22:27.920 --> 22:34.120
Well, I think we can use another Objective C holdout, Marco Arment, you know, everybody,

22:34.120 --> 22:44.240
you know, Marco Instapaper, you know, ATP. He's even switching to Swift. And he's been

22:44.240 --> 22:48.160
resisting that for quite some time. And I completely agree with him. The writing is

22:48.160 --> 22:53.640
on the wall. If you're an iOS developer today, and you're clinging to Objective C, and you're

22:53.640 --> 23:01.120
not going along with the Swift program, you're going to be in bad shape soon. It is, Swift

23:01.120 --> 23:06.460
is the way to go. I mean, it's, I still have some things I don't like in the language,

23:06.460 --> 23:10.160
some things I don't like about syntax. But if you want to work on this platform, if you

23:10.160 --> 23:13.680
want to take advantage of, particularly of Swift UI, and some of the new stuff on the

23:13.680 --> 23:19.760
watch with native interfaces, you don't have a choice. So yeah, I mean, but I think there's

23:19.760 --> 23:24.940
actually a bigger story here, Wes, not just iOS, but the whole concept of reactive components

23:24.940 --> 23:31.080
and reactive development. This almost reminds me of a couple years after Rails became big,

23:31.080 --> 23:37.200
all of a sudden, like, you know, ASP was doing an MVC version, right? And Python had MVC

23:37.200 --> 23:46.320
libraries, sorry, MVC frameworks. This seems like, okay, MVVM is hanging on, it's trying.

23:46.320 --> 23:53.840
But I think reactive programming has won. And I will concede before people email very,

23:53.840 --> 24:00.880
very quickly, that the reactive style of programming brought to you by Swift UI is somewhat less

24:00.880 --> 24:07.040
reactive than what you might expect in, let's say, React Native, or even how Rx Swift was.

24:07.040 --> 24:12.720
But it's, I think we're getting there, I wouldn't be surprised in two years, if we go even deeper

24:12.720 --> 24:17.840
into the reactive concepts. And, and just like MVC was the pattern that you needed to

24:17.840 --> 24:22.640
know in, let's say, 2008. I think reactive programming, if you're, you know, if you're

24:22.640 --> 24:27.000
a young developer, and you're just learning, I would urge you to take a look at reactive

24:27.000 --> 24:28.000
programming.

24:28.000 --> 24:32.160
Now, that can get confusing, too, right? Because there's, there's sorts of different styles.

24:32.160 --> 24:38.560
There's the large Rx community. And maybe you would put the Elm architecture in there,

24:38.560 --> 24:43.280
data flow stuff. So but you're right, there's a whole class of technologies that has changed

24:43.280 --> 24:47.800
the way we view things, and especially recently changed the way we construct user interfaces.

24:47.800 --> 24:53.080
Yeah, I mean, I, I'm curious what your thoughts are, I would consider like, React itself,

24:53.080 --> 24:57.960
like the original React from Facebook, as kind of the reference implementation. I know

24:57.960 --> 25:02.640
it's an old concept people are going to write in. But for kind of the modern, you know,

25:02.640 --> 25:08.760
the modern, I don't even know, family genus species, how would how would you define that?

25:08.760 --> 25:14.320
Hmm, yeah, I mean, it did start, I think the main part, I think of React, right, is, is

25:14.320 --> 25:19.860
you're right, it's the reactive components in that it's less of this two way stateful

25:19.860 --> 25:25.160
interaction that you've seen in other components and frameworks. And instead, your view is

25:25.160 --> 25:30.000
just a computed function on whatever data that you have, right? So you can have some

25:30.000 --> 25:34.600
data structure, some components that you feed into this layer that then acts basically,

25:34.600 --> 25:40.520
as a peer function that then computes exactly what you want your page to be laid out. Instead

25:40.520 --> 25:44.960
of having all the all the state that sort of wound up and delegated push down into each

25:44.960 --> 25:48.320
of the little, you know, each of the little leaves on your tree of components that you've

25:48.320 --> 25:53.000
wired up, you can just have it flow through. And generally, in just like a one way sort

25:53.000 --> 25:58.400
of information cascade. I do think it I mean, it plays nicely with functional programming

25:58.400 --> 26:04.900
in general, and I think is a nice, a nice toolkit to sort of manage your state a little

26:04.900 --> 26:11.000
bit better and understand more of how your whole interface composes and works together.

26:11.000 --> 26:14.920
But it's a pretty big change, honestly.

26:14.920 --> 26:21.280
Yeah. And, you know, I'm, we've been talking a lot about iOS, I'm very curious about what

26:21.280 --> 26:28.200
this is going to look like in the Mac world going forward. AppKit is old, like, like really

26:28.200 --> 26:37.320
old. And yeah, it's, it's gonna be a thing. I think this is the beginning of a large transition

26:37.320 --> 26:38.320
for Apple.

26:38.320 --> 26:41.080
I think it is nice, though. I mean, clearly, they've been paying attention to some of the

26:41.080 --> 26:46.840
trends in the industry. Obviously, they think that developers are going to want to develop

26:46.840 --> 26:52.840
in this style, right? So it's nice to see them not staying still. It does make me wonder,

26:52.840 --> 26:56.880
how do you feel about the general governance of Swift, you know, being developed out in

26:56.880 --> 27:01.440
the open this sort of community, the way it's maintained? Have you looked much into that?

27:01.440 --> 27:08.200
You know, I follow it as much as I can. I mean, I'm not really involved in that. I think

27:08.200 --> 27:17.040
it's fine. I don't like the kind of air of to hell with the past, but I get where they're

27:17.040 --> 27:22.400
coming from. And an example of this from Swift 4, which now we're on to Swift 5, is basically

27:22.400 --> 27:27.200
what they did with for loops because they decided not to honor the traditional for loop

27:27.200 --> 27:31.520
that you'd have in C, which I get it because in Swift, you probably shouldn't do it that

27:31.520 --> 27:32.520
way.

27:32.520 --> 27:34.920
Right. It's more of like a for comprehension in Swift, right?

27:34.920 --> 27:38.720
Yeah. And they'd rather you use what I used, what they used to call blocks, but are now,

27:38.720 --> 27:41.880
you know, lambdas, right? Like, um, which I even think they have a different word now

27:41.880 --> 27:49.400
that I can't remember, but it's, you know, I would say it's calmed down quite a bit.

27:49.400 --> 27:53.200
Like originally it definitely had an air of like everything old is bad and we're going

27:53.200 --> 27:57.640
to reinvent the wheel and we're going to bring all this stuff over from, you know, like functional

27:57.640 --> 27:58.640
languages.

27:58.640 --> 28:03.240
Hmm. Yeah. So not, not a gradual transition, maybe a revolution and not an evolution.

28:03.240 --> 28:07.160
Well, it's, it's, it's gone through fits and starts, but the reality is like Coco is still

28:07.160 --> 28:08.880
an Oh framework.

28:08.880 --> 28:10.480
Yeah, totally.

28:10.480 --> 28:16.800
So like now it's Swift UI, a lot of those things actually I think make a lot more sense

28:16.800 --> 28:23.080
and are going to be a lot easier to work with, but you know, this is, you have a lot of legacy

28:23.080 --> 28:27.800
here and sometimes, and I'm trying to tread lightly here, but when I read the Swift mailing

28:27.800 --> 28:35.960
list, it's like, I wish there was less of a, oh geez, I shouldn't say it, but less of

28:35.960 --> 28:42.280
a, um, um, you know, to the barricades, rip them out of their houses, down with the old

28:42.280 --> 28:46.440
in with the new kind of, um, attitude.

28:46.440 --> 28:50.240
But the criticism of me, which I've gotten in the past would be, you just want to keep

28:50.240 --> 28:52.280
the advantage that you've been doing this for 12 years.

28:52.280 --> 28:55.440
Right. I mean, that's, there's a cost of that. You're going to have to learn a bunch of stuff,

28:55.440 --> 28:58.000
whereas you're an established expert as it stands now.

28:58.000 --> 29:03.520
Yeah, but it's, it's, see, the thing is like, on the one hand, it is not as different as

29:03.520 --> 29:08.120
the people who gripe about it say, nor is it as different as the people who say these

29:08.120 --> 29:10.520
differences are going to make all the difference claim.

29:10.520 --> 29:17.680
Um, it, it just like, it isn't the case that by switching to these more reactive or functional

29:17.680 --> 29:20.160
paradigms, we're not going to have problems, right?

29:20.160 --> 29:24.380
Like my pet peeve with Swift, we talked about, I think before on the show is it is a very

29:24.380 --> 29:27.240
safe language, but it is obnoxiously so.

29:27.240 --> 29:31.800
So whenever I see other people's Swift code and sometimes mine, the way you get around

29:31.800 --> 29:35.680
it is you just slam a bunch of exclamation points, which are basically force unwrapping,

29:35.680 --> 29:36.680
right?

29:36.680 --> 29:38.080
So you turn off the safety.

29:38.080 --> 29:39.080
Ah, yes.

29:39.080 --> 29:42.520
You, you pull the escape hatch and try to try to go that way because you can't get by

29:42.520 --> 29:43.740
the compiler.

29:43.740 --> 29:46.360
It's just a little too tight, right?

29:46.360 --> 29:51.620
Like, like it's so weird where I like it in Rust because I see Rust as more like a systems

29:51.620 --> 29:55.440
language and I'm like running servers and I want to crash and data integrity and Swift

29:55.440 --> 29:56.960
is like, okay, this is an iOS app.

29:56.960 --> 30:00.120
If it crashes, you know what?

30:00.120 --> 30:01.120
We launch it.

30:01.120 --> 30:02.120
Right.

30:02.120 --> 30:04.960
That's interesting because you just might want to be somewhere else on the spectrum

30:04.960 --> 30:07.080
of like safety and, and proof, right?

30:07.080 --> 30:09.920
You want to be like, well, okay, there might be some things here where we can't totally

30:09.920 --> 30:14.880
prove that it might not have some weird runtime error or something might happen, but it's

30:14.880 --> 30:18.120
worth it to you to just be a more, more agile maybe you want to say, or just be able to

30:18.120 --> 30:23.000
move faster, a little looser as you frequently update, change and develop whatever app you're

30:23.000 --> 30:24.000
working on.

30:24.000 --> 30:25.000
Yeah.

30:25.000 --> 30:26.000
You want to be looser.

30:26.000 --> 30:28.600
And like, I tend to do very little in iOS apps.

30:28.600 --> 30:31.140
I try to keep them as dumb clients if I can.

30:31.140 --> 30:34.600
So there's just like not the opportunities for like data corruption that might exist

30:34.600 --> 30:36.160
in a server.

30:36.160 --> 30:40.240
Um, also, you know, the art and business, right?

30:40.240 --> 30:46.200
Um, there just is a lot more market pressure on price for the front end iOS app side of

30:46.200 --> 30:47.200
things.

30:47.200 --> 30:48.200
Right.

30:48.200 --> 30:52.160
And as long as it works good enough, it doesn't have to be perfect because I mean, never will

30:52.160 --> 30:53.440
be even if it types checks.

30:53.440 --> 30:54.440
Yeah.

30:54.440 --> 30:55.440
Yeah.

30:55.440 --> 30:58.440
And it's just, you know, when you have to kind of fight with a compiler, you're, you

30:58.440 --> 31:02.320
know, I could totally see if you're like Adobe and you're writing something in Swift, you

31:02.320 --> 31:04.280
never want it to crash because you don't want customer support.

31:04.280 --> 31:11.360
But on the other hand, if you're a dev shop or a consulting shop, you, you kind of, not

31:11.360 --> 31:13.280
that you want things to crash, but,

31:13.280 --> 31:14.280
Oh, I just love it.

31:14.280 --> 31:15.280
Yeah, of course.

31:15.280 --> 31:16.280
We love it.

31:16.280 --> 31:17.280
We love it.

31:17.280 --> 31:18.280
It's great.

31:18.280 --> 31:22.640
You're in a market where you like there are edge cases, but then there are like edge cases

31:22.640 --> 31:27.640
that like sure in a hypothetical world of Venus isn't retrograde and like Cthulhu comes

31:27.640 --> 31:30.960
that will happen, but Swift makes you cover all of those cases, right?

31:30.960 --> 31:31.960
Which is kind of,

31:31.960 --> 31:32.960
Right.

31:32.960 --> 31:33.960
Yeah.

31:33.960 --> 31:34.960
You do have to, you do have to think through that.

31:34.960 --> 31:39.200
Um, maybe not something for today's show, but there's an interesting idea of, um, if

31:39.200 --> 31:43.120
you could have more, I guess like a contract system, I know racket has one, uh, Clojure

31:43.120 --> 31:47.680
has Clojure spec, but being able to have more sort of all a cart safety for those times

31:47.680 --> 31:50.560
where you're like, and I guess, you know, TypeScript is maybe an example of this too,

31:50.560 --> 31:54.440
where you can, sure you can have it really safe with compiler options, but you can also

31:54.440 --> 31:58.720
sort of gradually add types as you want to say like, okay, well I really need these,

31:58.720 --> 32:01.120
you know, this core set to be super locked down.

32:01.120 --> 32:03.000
The design is, is mostly finished.

32:03.000 --> 32:04.000
Here's how I want it to work.

32:04.000 --> 32:06.280
And I want extra guarantees that the compiler can help me with.

32:06.280 --> 32:09.320
And maybe you have different edges around where you, you know, you don't need those

32:09.320 --> 32:11.220
same sorts of guarantees.

32:11.220 --> 32:12.220
That makes sense.

32:12.220 --> 32:16.440
I don't think that's super, I mean, TypeScript is probably the best at it outside of more

32:16.440 --> 32:20.720
niche languages, but I would like to see that applied more because compilers are awesome.

32:20.720 --> 32:22.320
And a lot of this tech is really cool.

32:22.320 --> 32:24.600
It's just maybe sometimes you don't need it.

32:24.600 --> 32:31.360
So speaking of all kinds of different languages, we've got a bit of an update and change on

32:31.360 --> 32:35.380
our seven languages challenge, isn't that right, Mike?

32:35.380 --> 32:36.380
That's right.

32:36.380 --> 32:39.960
So because Mike got seduced by Swift UI and couldn't do his homework.

32:39.960 --> 32:41.880
You just, you just changed your assignment, right?

32:41.880 --> 32:43.760
I mean, he still did homework.

32:43.760 --> 32:44.760
That's true.

32:44.760 --> 32:45.760
Actually, that is true.

32:45.760 --> 32:47.800
I just ended up doing a bunch of Swift UI.

32:47.800 --> 32:53.160
We're going to go to a two week model just so we can get a little deeper and not be so

32:53.160 --> 32:54.160
rushed.

32:54.160 --> 32:55.160
Yeah.

32:55.160 --> 32:57.240
I mean, here I was like, I'm playing with Kotlin, right, but Kotlin targets all kinds

32:57.240 --> 32:58.240
of different things.

32:58.240 --> 32:59.240
There's lots of different ways to use it.

32:59.240 --> 33:03.800
And I only just started trying to build a little toy Android app with it.

33:03.800 --> 33:06.400
So I'm going to, I'm going to take a little time and see if I can flush that out a little

33:06.400 --> 33:07.400
more.

33:07.400 --> 33:08.400
We'll see.

33:08.400 --> 33:09.400
We'll see.

33:09.400 --> 33:10.400
Awesome.

33:10.400 --> 33:11.400
Yeah.

33:11.400 --> 33:13.560
And frankly, you know, it's funny.

33:13.560 --> 33:15.280
I thought this was going to be my slow season.

33:15.280 --> 33:18.440
This WWDC just drowned me.

33:18.440 --> 33:20.040
There is a lot going on.

33:20.040 --> 33:22.280
So yeah, I think this, this makes sense.

33:22.280 --> 33:25.000
It'll give us a chance to sort of feature these things a little bit more.

33:25.000 --> 33:28.200
And as we're trying languages that are really out of our wheelhouse, I want to have time

33:28.200 --> 33:31.840
to actually give them, you know, some of them, they're so different that you need time to

33:31.840 --> 33:33.640
sort of soak it in and experience it.

33:33.640 --> 33:38.280
And it's not just like something you can review by using a GitHub page and solving a couple

33:38.280 --> 33:39.600
academic problems.

33:39.600 --> 33:40.600
Yeah.

33:40.600 --> 33:44.520
So make sure you subscribe, coder.show, slash, subscribe.

33:44.520 --> 33:49.000
You can find our RSS feed, other ways to follow us on whatever platform you happen to use.

33:49.000 --> 33:53.360
That's the easiest way to find out when a new episode of Coder Radio appears in the

33:53.360 --> 33:54.360
feeds.

33:54.360 --> 33:58.360
And that way you can make sure you're up to date with everything we're doing, the latest

33:58.360 --> 34:05.600
programming challenges, all the wacky feedback, and what kind of Mac did Mike buy this week?

34:05.600 --> 34:06.600
Or maybe it's not a Mac.

34:06.600 --> 34:07.760
Maybe it's another Linux machine.

34:07.760 --> 34:12.120
You just can't say, and that's why you have to show up here for Coder Radio.

34:12.120 --> 34:13.840
There's just no other way to do it.

34:13.840 --> 34:17.680
Now, in between, there's tons of other great Jupyter broadcasting shows you can find at

34:17.680 --> 34:18.680
Jupyterbroadcasting.com.

34:18.680 --> 34:21.440
Make sure you check out User Error.

34:21.440 --> 34:23.520
I really enjoyed the most recent episode.

34:23.520 --> 34:27.280
And always, when you're short on time, check out Linux Action News.

34:27.280 --> 34:31.680
Short, easy, and a great way to stay up with all the stuff happening in the Linux and open

34:31.680 --> 34:33.280
source world.

34:33.280 --> 34:36.800
You can also, of course, find both Mike and I on Twitter.

34:36.800 --> 34:39.880
I'm at Westpane, and Mike, you're?

34:39.880 --> 34:41.880
I'm at Dumanuco.

34:41.880 --> 34:43.920
Yes, you are.

34:43.920 --> 34:45.480
Thanks everyone for joining us.

34:45.480 --> 34:46.560
That'll be it.

34:46.560 --> 35:16.000
Come back next time you're here.


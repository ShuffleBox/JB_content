This is Koda Radio, episode 438 for November 1st, 2021.
Hello friend and welcome in to Jupiter Broadcasting's weekly talk show,
taking a pragmatic look at the art and the business of software development
and the world of technology.
This episode is brought to you by Cloud Guru.
The Cloud Guru has the cloud playground, Azure, AWS and Google Cloud
on ACG's credit card, not yours.
Get certified, get hired, get learning at acloudguru.com.
My name is Chris and joining us every single week relishing in the Jar Jar memes
is our host, Mr. Dominic.
Hello, Mike.
What's up, Mr. Fisher?
I can't believe that the internet is still making Jar Jar Binks a valid meme.
It's like somehow you picked a winner a long time ago and it drives me crazy.
Well, you know, I figured out that all the hate for Jar Jar, it wasn't hate.
It was really love.
Yeah, the Jar Jar meta meme that was going around this last week
after the Facebook event was pretty choice, I got to say.
A lot of people sent it to me.
Like surprising amounts of people sent it to me.
I'm like, yes, I get it.
Why am I not surprised?
Boy, what a weekend.
Do you and the kid do the trick or treating thing down there in the Florida?
We sure did.
I was hanging out with Miles Morales.
It was a good time.
I had the weirdest experience.
I'll try to just really quickly recap it.
But because what it really comes down to is how corporations are twisting
themselves in knots to cover their ass, but also still try to like do things
to incentivize customers to show up to their events.
So every year we have this family tradition where we pack up the RV
and we go to this campground that has this big Halloween event.
And they have site decoration competitions and pumpkin carving competitions
and costume competitions.
And they have this big trick or treating event.
And everybody builds, you know, like into this whole event.
Like it's everybody's participating.
It's a nice community experience.
But it involves people really being close to each other.
So this year the company decided we're not doing anything.
It's too risky because of the Rona.
The problem is the campground is co-owned by another company, KOA.
And the KOA folks say, you know, we want to do an event.
So we're doing an event.
And so there was this really weird kind of we're going to do stuff,
but we're not going to tell you the details.
That way you can't hold us accountable if anybody gets sick.
And so nobody knew what was going on.
It was all a bunch of indecision and like no information, which of course
is the worst thing possible during a pandemic.
And so that way you could never point to anything that was written that said,
they said trick or treating would be at this time.
They said site competitions would be at this time.
They still wanted us all to do it.
And they invited people there.
They held the judging for the costumes.
They did the judging for the sites.
But they just never made it official.
So that way they couldn't get in trouble if anybody got sick.
And it just seems like such a backwards way to go about it.
It's clearly a cover your ass move and not about protecting people at all.
Classic big business.
But I'm grateful that it happened, you know, because those yearly traditions
are important and and it's outdoors.
So I feel pretty good about it.
And it was a lot of fun.
It did end up working out pretty good.
So we got some feedback this week.
I was negligent last week when I was out in the woods.
But now I'm back in the studio.
I had time this morning to go through the inbox and I picked out a few that I
thought we could be helpful with.
So Nick, who is a longtime Linux user, has decided to order an M1 MacBook Pro.
And he's a little concerned about this transition.
And he wants a couple of tips from us.
Number one, he'd like to know about any information you have about what he needs
to run in Rosetta for development tools.
And if there's any tips, tricks or applications we might recommend for him
getting set up to develop on the M1 hardware.
And he says, thanks for the shows.
So I'm curious if you just have any quick things to pass along to him.
I didn't think we need to spend a lot of time on this, but I do have a couple of
handy resources.
Yeah, I think we got an email like this last week.
I mean, I just run Terminal in Rosetta all the time.
That eliminates most of my, you know, like dependency issues or whatever.
Honestly, that's kind of the biggest thing.
I mean, it's not M1 related.
But there are certainly apps that are useful if you're on Mac.
Kaleidoscope is a good diffing tool.
VS Code is not really a Mac app, but, you know, it's my editor of choice.
Beyond that, that's kind of it.
I mean, I basically work in Terminal VS Code, and if I really have a gnarly
merge, although VS Codes get conflict tools are really good too, so.
Nick didn't say what desktop environment he's switching from.
Yes.
So I don't know exactly what he expects in terms of window management.
I'll have some notes on this in a bit.
It's a little bit better in Monoray, but it's still pretty weak compared to
like something like Plasma or even GNOME Shell.
So back in March of 2020, I did a Chris Lastcast, which is just a thing I was
doing for a bit, and I had tried like a month on the Mac or something like that.
And I went through and what I did, and I think, Nick, I'm still suggesting all
the tools that I have linked there, and I'll link to you that stuff in the show
notes.
I say set aside 80 bucks, $80 that you're going to spend on independent
developer software and buy yourself a few nice apps that improve the Mac OS
experience and make it less frustrating.
And in my opinion, make it more of a workstation OS.
Number one with a bullet for me that I absolutely miss every day on every other
desktop environment and every other Linux Linux desktop environment are on
Windows is an app called Bumper B-U-M-P-R.
This little beauty, what it does is you set this as your default browser.
And then when you click a link in any app, any app anywhere on your desktop,
immediately a nice little menu that's very easy to click on that comes up
right where your mouse is at.
It has a icon list of all of your browsers.
Now on a Mac, I'll have Chrome, Firefox, Edge, Safari.
I may even have Safari testing version and Edge testing version, and I am very
particular about what browsers I use for what apps and what sites.
And this little bumper app, what it does is you click that link.
It brings up the icons of your browsers.
You choose the browser and it sends the link to that browser.
My God, this is one of the best applications I have ever used on a computer.
God bless it.
Go get Bumper.
Also, I have links to things in there like Bartender, which will take some of
the unnecessary icons out of the menu.
And you got to get I stat menus if you've ever put any of like the system
monitoring tools and like your plasma tray or your genome shell.
You got to go get I stat menus.
It's a killer.
There's just a whole link I'll have.
I'll put a link to the Chris Lastcast where I covered that stuff.
You don't necessarily need to listen.
I linked everything to show notes, but you can listen where I go into more details.
And then just a quick note before we move on from this.
So I got the M1 Mac Mini in-house that I've bought to do Asahi Linux testing on.
And until Asahi Linux is ready to go, I decided to give Mac OS on there a spin
because I have not really had much hands on with the M1 systems.
And yeah, it's fast, of course.
It doesn't get loud at all.
It's everything Micah said.
I realized it's like this.
It's like the weather.
I can explain to you what it was like this morning when I got up and it was 28
degrees outside Fahrenheit.
And you can understand the water freezes at that temperature and there could be
frost and that maybe you could see my breath and you can you can visualize that.
Right.
But there is a huge difference between visualizing what 28 degrees Fahrenheit
feels like and what it's like to stand out there.
It's like you can you can conceptually understand something and then you can
experience something.
That's what the M1 performance is like.
You can understand what it's like to have something fast, but then you experience
a different architecture and you see things that once you experience it, you
really truly understand it.
And I had that experience with Linux desktop virtualization on the M1 Mini
using parallels.
It uses vert IO for the graphics, so it's essentially doing graphics
pass through like you might do if you had a dedicated graphics card.
Assigned to a VM.
Well, parallels does that little trick to get the graphics to the display, and
then it uses a rendering interface and parallels that talks metal.
And what you get is essentially a 3D accelerated desktop Linux experience.
And it is one of the absolute best.
No, not one of not one of.
It's the best desktop virtualized Linux experience I've ever had.
And my son sat down when I had a full screen up on the M1 Mac Mini and just
started setting up Minecraft and just going about his business and he had no
idea he was in a virtual machine at all.
And I have I've even gone just to like see how far I could take it.
I wouldn't got in a genome extension so I could have wobbly windows and it's
using Wayland.
It's all happening on Wayland in Fedora 35 and it's it's an incredible desktop
virtualized experience.
I've never experienced this with desktop Linux and I can't imagine what it's
going to be like on the M1 Pro or M1 Max.
So Nick, my advice to you is get brew.
Go get those apps we suggested.
Follow Mike's tips and then go get parallel 17 and put Linux in there.
So you've got that too.
It's a killer setup.
Have you tried virtualizing desktop Linux on any of your M1 gear?
I have not.
No.
Oh, you should give it a go.
It's impressive.
I think you get a genuine experience of what it's like to run desktop Linux on
metal.
You know, you get ironically metal.
Get it?
It's really good.
Moving on, Corey is a long timer and he has a question for us.
This this is big.
All right.
So he's he looks he's looking for some advice.
He's been listening to the show forever.
He's been doing 100 percent Salesforce development for the last five years.
He was a dot net developer for that before that for about five years.
And he's also followed the news very closely.
So he's aware of all the different frameworks, libraries, design trends,
et cetera.
He doesn't necessarily understand them, but he's fully aware of them.
But he wants to kind of move on and he's got a project idea.
He says I have an idea for a small website for collectors of a certain brand
of backpacks.
These backpacks are released all the time and there are collector groups and
tons of sellers.
The one thing I have not seen is a single website where you can look up the
previous released bags.
I was thinking about building this myself with future enhancements being links
to new bags that you can currently buy with affiliate links if possible.
Among other future enhancements would be to allow people to post classifieds for
the bags that they have so they can buy and sell bags from other people.
So with these enhancements in mind, I was thinking just something like a basic
wiki would not be appropriate.
I'm also unsure of maybe like the legal requirements of something like this
would take.
I've seen other websites like this for Pokemon cards.
And so it seems like if you follow the right legal process and disclaimers on
the site and whatnot, I'm not too super concerned and I'd be willing to set up
an LLC.
I imagine I'd probably need a lawyer.
But starting from scratch right now on a project like this is an overwhelming
experience.
There's probably 30,000 node frameworks and so much more.
There's tons of ways to deploy apps, serverless, AWS, Linode, Azure, Heroku,
et cetera.
Picking a backend, a front end, a database, an auth provider, a hosting
style.
It's just too much.
I'd love to build something modern that will both teach me something new and
relevant in the marketplace, as well as be something that I could deploy myself.
Sorry for the long email.
I guess I'm looking for just some advice on what to do.
I have a lot of anxiety and all the choices.
Any feedback would be appreciated.
Thanks for all the content, Corey.
So he really doesn't even know where to start with this.
And I'm wondering, how do you figure that out?
Because it seems like a lot of this other stuff, serverless, AWS, Linode, you
start to answer that once you figure out maybe how you're going to build the
site.
Yeah, this is kind of tough because there's almost not enough information
provided.
Even though it's a huge email?
Yeah.
Yeah.
It's a tough one.
Yeah, for sure.
I mean, there's two general approaches you can take, right?
You can start with some sort of platform, preferably open source, like a Wiki.
He mentioned Wikis.
Or you can just start rolling your own minimum viable use case and then Voltron
it up as you go.
True.
I'd probably start with the Wiki, I guess.
I say that with hesitation because I'm not sure it's true.
Yeah, it does feel like what he does need is some kind of MVP that would attract
attention.
And then people who know this stuff might start working with him.
But that's a long shot, too.
Yeah.
It seems like a possibility is if you just got started on something, then you
pretty quickly start identifying what works and doesn't work.
Yeah, I think you almost need like a punch list of like, these are the five
features I must have.
Yeah.
Ignoring the possible tech stacks you could use or projects you could use and
then look at projects.
OK, what does these five things?
And if the answer is none, then you go ahead and you start rolling around.
I wonder maybe is the better approach to build the community first, like set up
a discourse forum maybe or a discord server and start building a community and
getting people to collaborate and give them feedback and ideas.
That's actually not bad because some of the community may have already tackled
the spare that know what to do.
Yeah, I may be crashed and burned or have opinions.
So he may have to build.
I mean, a discord would be really straightforward, obviously.
Also a discourse forum.
You could pop on Linode, get our $100 credit and deploy discourse with like a
single click and be probably ready to go in 15 minutes.
Get your domain, set it up, start seeing if you can get people to chat with you
about it, talk to you about it, maybe build out a few default forums with the
categories you think people will be interested to chat about and see if it
goes from there.
I know it's kind of a slow approach, though, Corey.
All right.
I got a great one from Remy.
I thought this was so, so great because I know people, you know, they've been
hearing about the MacBooks and everybody's got notch envy.
So Remy wrote in for Linux users that are feeling left out of the fun.
He says you can have the best of both worlds.
Gnome users can go grab this extension.
Oh, Jesus.
Are you looking at it?
How great is this?
I saw this the other week.
Oh, my God.
Okay.
So it adds a totally useless notch to your Gnome shell.
First of all, Chris opened the store.
The few Gnome extensions that I use when I run Linux cause me enough heartache.
Why would I ever put first of all, nobody should want the notch.
Second of all, why would you install a Gnome extension for anything other than
like your fancy and you want changing desktop backgrounds?
I don't know.
I do like that the FAQ has the first question.
WTF, why would you create this ugly extension?
And his answer is, please ask Apple why they create such an ugly notch on their laptop.
Well, you know, they just did a patch, right?
Where you can totally basically create fake bezels now.
Seriously, there's a mode in my if you just I believe you may have installed
Monterey or your machine has Monterey.
Yeah, there is.
I do have some Monterey.
There are some setting in there too.
You can regain the glory that is top bezels.
Hey, you know what?
I might try it.
I just think this is hilarious.
The thing that's creepy, though, is the notch.
It has a very hit slight hit.
You can see the camera lens and the green power light for the camera.
And it's always on.
I don't like that one bit.
I put a link in the show notes.
You guys got to go see this.
It's so funny.
Are you sure that's not like screen bleeding, making it look like the lights on?
You know what I mean, like reflecting?
No, I don't think so.
I think the guy added just a very slight, subtle camera behind the glass kind of look.
I think it's brilliant.
So thanks, Remy.
Dear Lord.
I know.
It's so good.
Oh, this is the genome extension.
Not your.
OK, not the actual.
Oh, yeah.
Oh, yeah.
OK, OK, OK.
Linode.com slash coder.
Go there to get one hundred dollars in 60 day credit on a new account and you go there to support this here show.
Linode's where I host everything.
If it runs on Linux, it runs on Linode.
But with their powerful infrastructure, they started in 2003 as one of the very first companies in cloud computing.
Now, 18 years later, they're the largest independent open cloud provider in the world.
And they have 11 global data centers, certainly nearly a million customers around the globe.
And they stayed focused on making cloud computing accessible, affordable and really quite approachable.
They have a best in class experience over there.
And, you know, I think it's easy to rattle off a couple of things about Linode that would be really appealing to you.
Performance is obviously going to be top on that list.
Value, 30 to 50 percent cheaper than the hyperscalers out there that want to lock you in.
Their customer support is simply just the best in the business.
The flexibility that the platform gives you and how it's grown with our usage over time, like we started as very kind of basic.
We want our VPS type users.
And then kind of learned how we can build infrastructure now in a way that's really kind of cloud first and super performant for our users.
And doesn't require just this unbelievable upfront investment by JB that, quite frankly, I could never really afford.
And I still get to have things like high availability in the performance and all of the stuff that I would get if I had just built out this incredible massive infrastructure.
But when I look at the way Linode set up, there's really nothing I would do differently.
They've really nailed it. I really, really like the way they deploy systems.
I think it's very solid. I like the way their backup mechanisms work.
And I really appreciate that their dashboard is simple enough that anyone on the team here at JB can use it.
And they all have different skill levels.
And it still works for all of them.
And then when you get in there and dig around, you see things like DDoS protection and VLAN support and their powerful DNS manager.
And that's stuff that I started to use more and more over time.
But that's not really how I started using Linode.
And I kind of think this could be a similar journey for yourself.
I go over there, take advantage of that hundred dollars.
That's a statement of confidence saying from Linode that they're going to give you a real amount of money to actually truly try the service and form a real opinion.
Right. So go over there and just try this stuff.
And also consider maybe this could be part of a multi-cloud strategy.
That's another area where Linode can be really powerful.
You know, that's something that 66 percent of companies are looking at right now.
And Gardner did a bit of research around this.
People are becoming more and more aware of vendor lock-in.
I think a lot of our listeners, they already, you guys already get this.
We understand how this works a little bit more than, you know, maybe your average out of touch high level CTO exec type person that maybe doesn't follow these things.
No offense to you CTOs out there.
But Linode's already got their head in that space.
And so I think you'd be really impressed what they have to offer.
So go sign up today, try it out, support the show and get a hundred dollars.
So go to linode.com slash coder to create a new account, get the credit and actually try it out.
I mean, with a hundred dollars, you can form a real opinion.
Linode dot com slash coder.
So this is a story that got sent into the show quite a bit, and I wanted to touch on it with you.
And the general bent of the emails was, are we as developers giving power to platforms like Google and Facebook by creating things that draw in users?
And this is coming after 10 days ago when a New York judge revealed that there were some new prosecution filings in a multistate antitrust lawsuit against Google.
And there's a ton of details that came out some of these filings.
Now, these are positions of people that are going after Google, but some of it's really gnarly,
including positioning amps at AMP, Google AMP as a primary way to just create huge amounts of data for Google and squeezing out other services.
It looks like there was some real hanky panky going on.
They had Google had Project Bernanke, which took data from publishers for ads.
And they would use that data from people who were buying ads on their platform and embedding those ads, and they would boost their own services with that.
Project Nara created a, quote, not owned but operated walled garden for users if they use any Google service.
There was in there a project called Project Jedi.
I do like that one, which was allegedly meant to freeze out independent ad exchanges by using insider knowledge.
Then there was Project Jedi Blue, which is one where Google conspired with Facebook.
Yeah. Yeah. To parcel out goodies between themselves and lock out privacy measures.
There is one hundred and seventy three page that's been unredacted.
It's a filing that I'll have linked in the show notes.
And the Twitter user that kind of went through this, that kind of kicked off this whole conversation, started the thread with.
I've read through all one hundred and seventy three pages of the unredacted Google antitrust filing.
And I have to say that either Google is screwed or society is screwed.
And we're going to find out which. So what it says in here really is that Google set up all of these things that we've all kind of speculated.
We've speculated that Google did apt to squeeze out ad blockers and collect data.
We speculated that maybe they were creating a walled garden with Chrome and Google log in.
We theorized that they were collaborating with Facebook to shut certain things down.
I like how careful you're being right now. This is nice.
But now here we are. And you see this. You see these court filings and these are just allegations.
But you see these court filings and it's essentially everything that we speculated here.
Yeah, these things really did happen. It was as bad as we thought it was.
And maybe even worse. Like it's I think faster than Lime on Twitter had it.
Like if Google doesn't pay for this. Society's screwed.
Yeah, they're not going to. So I just think it's so funny.
I mean, I just think it's so funny that we're going after Facebook, which is insidious.
Why is it a one or the other kind of situation? I mean, I know why, but it makes me sad.
I think it's because Google's played ball. Google's played ball with the federal government for a long time.
Well, Facebook has too, though, actually. Yeah, they both do.
I go back to this. I suspect when it comes to federal investigations, Apple and Google are pretty screwed.
But when it comes to media really just digging in and doing actual investigative journalism, they've turned their attention to Facebook.
They set up a group of 30 journalists who are all sharing documents that have been leaked to go through it.
And each different publication is running with their different threads, just like the Snowden docs.
When Edward Snowden started releasing documents first through Glenn Greenwald and through The Guardian,
then they started divvying it out to the different news organizations and they created this group.
And they've done the same thing here. There is a there is a coalition, an actual formed coalition,
a actual documented formed coalition of journalists who are all focused on exposing Facebook.
Now there's about 30 of them and they work for all these different outlets.
And we got email into the show saying, I'm totally wrong on this, but I don't I don't I don't think so.
And I don't care what people think. I am convinced they're going after Facebook right now because Facebook is competing for ad dollars.
They are a media platform that is directly competing for ad dollars. Google.
Absolutely competes for ad dollars, but it isn't a medium like television.
I think the TV people and the papers, they see Facebook as a competitor directly,
whereas they see Google as somebody that they can probably make a little money off of down the road.
They're going to make money off of Google News. They're you know, they can use AdSense like it's a platform they could take advantage of.
Google's day is coming, but Facebook is more a direct competitor to what these news organizations do.
And so you're you're seeing what happens when journalists actually do their job.
And they actually investigate because all this has been out there going on for years at Google,
just like all the docs we've seen come out about Apple with their with their recent legal cases.
That's all been out there for journalists to go uncover. But they all have friendly journalists.
They all have, you know, lapdog journalists that, you know, they basically don't have to worry about it.
Facebook doesn't have that privilege.
I actually agree with that. Right. Like there's a business interest to take out Facebook for many of the other competitors.
I would just like piggybacking on that. But then I have my own thing.
I would argue that Apple is like somewhat benevolent, but also definitely self-serving.
Bitch slapping of the ad revenue on mobile. Oh, yeah. Is more self-serving than benevolent.
Right. It's pretty clear what's up. But, you know, I like old movies and longtime listeners will know this.
I like like the old detective movies, the crime movies, the mafia movies, all that kind of thing.
And I forgot which one it was. Was it the Untouchables?
No, because it wasn't in color. But it was, you know, you know, like classic archetype where like one brother's a priest, one brother's a gangster.
It's like I'm in the 40s now. So kids sit down.
The mob guy has this line where he he tells his brother, well, how come you haven't been arrested?
But, you know, so-and-so, Lorenzo, whatever has. And he says, because you can do whatever you want.
But there are some things you can't do. And once you do them, you're you're done.
Forget about the cops. The regular people are going to turn against you.
Facebook, I would argue, whether you like it or not, has done and whether you think it's rational or not,
has done lots of things that cannot be done, for instance, knowingly harming teenage girls.
It's a big problem. Yeah. I know you tend to have a more rational, probably more correct attitude on the whole protect the children thing.
I tend not to. I tend to be in the, you know, overreact camp.
I mean, I think that I think that alone should be just like crucify them, make them honestly burn Instagram to the ground.
If we came through all of this and we got some common sense regulation that said you got to be 18 years or older to use social media,
I don't think I'd have a problem with that. Well, the other thing is I have many cousins and many relatives who are not 13.
But, you know, all you have to do is say that you're 14 or 13 and you can use it.
So I have my son's Gmail inbox added to my, you know, my browser.
And he started getting tick tock emails, not that he checks his email, but he started getting tick tock emails, inviting him to tick tock.
I don't think kids should be on social media, period. I don't think they should be at all.
I think Facebook is boy, it's a real dichotomy. It's it's a lot of bad stuff.
And if they've done a lot of bad things. But, you know, in our parents age,
there were companies that were trying to sell cigarettes to to people that they knew were killing them.
And they were still trying to sell them like there have been a lot of bad companies.
They got slapped down. If you think of the tobacco companies, I don't know if it's a direct analogy, but I think that's what we're starting to see.
And I think just Facebook, because they're the biggest social media platform, they're the first in line.
But I think what we cannot under underappreciate is the media part in there in that social media.
They are a media platform and that's why they're first. Absolutely.
So what do you think about the general thrust of the emails that came in that said.
By releasing apps on the Play Store or by taking advantage of Facebook ads, you're enabling these horrible companies,
you're kind of you're giving them value. You are spending your time in your life adding value to Google or to Facebook.
Well, since we're in old movies right now, I'm going to the untouchables from the 90s.
Sean Connery's character. You can't be the only clean cop in the city.
If all your competitors are taking advantage of social media advertising or of, you know, using Google's whatever magical search tools that you need for your app, whatever Firebase.
I know lots of people who hate Google and use fire or use or used Firebase.
You can't put yourself out. You can't unilaterally disarm.
And I know there's open source alternatives, blah, blah, blah.
But you're not going to get, you know, Joe Blow, who you want to sell something to, to sign up for Mattermost.
It's just not happening. Well, and I wasn't going to go here, but this is actually where I've been personally struggling with.
This is Facebook and Google, obviously, make a lot of really important open source contributions.
My beloved ButterFest that I think is our only hope for a competitive workstation file system for Linux.
ButterFest, you're my only hope.
It's been made great again by Facebook.
You know, like it's directly because Facebook is using it in production on tens of thousands of servers and they've hired like one of the lead ButterFest developers full time to work on it.
And that has turned the file system around in the last five years.
And that's just one of many contributions.
Amazon does, too. It's tricky.
If you are a PHP advocate slash developer and you really care about that, like as part of your identity, PHP, you kind of should like Facebook, at least their engineering team, because they have done a lot to get to make PHP still relevant.
I just I'm just going to throw it out there, the hip hop VM, right?
I'm trying to figure out a way to be grateful and comfortable with the engineers that work there.
Well, disapproving of the outcome of the company, sort of like I have respect for the American people, but I'm very upset at the government and what its decisions it's made.
I don't fault all of the American people completely, but yet at the same time, they are the ones that voted.
So they there's a problem there.
But like if Facebook were to dissolve tomorrow, what you'd have is a bunch of really great engineers that would just sort of disperse into the marketplace.
I just want to say we're getting like dangerously close to like the Oppenheimer problem, right? The not the Nazi scientist problem, like great scientists, brilliant, awesome engineering.
Too bad he did horrible things with it.
But can we look and historically we have looked the other way, right?
We've been like the Oppenheimer problem. Another somebody to make that a title.
I'm trademarking that. Thank you.
Yeah, that's interesting.
Yeah. And that's a real thing that I struggle with, because a lot of the software I use is enabled by these very companies that I think in some ways do harm society.
That is where I think about it, too, when these people are asking the questions via email.
Coder dot show slash contact.
I have that sort of same philosophy. It's sort of it's sort of like there's good things about publishing on YouTube like JB does.
Right. But there's also bad things about it.
And so I try to strike the right balance that I think is appropriate for the JB company, for my company.
They own the roads, you know, and when we built the information superhighway, we privatized the roads.
Standard rail, baby. Standard rail.
Hey, how about a little Ruby async check in? I smell a little async in the air.
Yeah. So I'll keep this relatively quick. I know Ruby is not our biggest, you know, demographically language here.
But yeah, Ruby is getting an async gem, which it's not just some, you know, random third party gem from the bayou here.
This is something that Matt, the creator of Ruby, actually invited to be part of the standard library.
Are you technically considered in the bayou?
No, I'm in the swamps. OK, swamps. OK, so bayou would be like Louisiana.
Yeah, OK. Although I do have gator meat in my freezer. So who the hell knows what I'm doing?
Have you had that before? Oh, yeah. I've had it very sparingly when I went to a special restaurant.
But did you like it? Well, the way it was prepared, it was delicious, actually.
Yeah, it's like a creamier chicken, usually, if it's done right. Wow.
It shouldn't it shouldn't be astringent or like stringy.
So now I just feel like I learned something new about you today.
I've been down here a long time now. I've gone native.
So anyway, asynchronous programming in Ruby. Right. So, yeah, this is interesting.
It takes a different approach from, let's say, Python async.
It uses the Ruby block pattern, which Ruby block is very similar to what you think a C block is.
You know, it indents pass in the code.
Huzzah. There's some magic going on behind the scene.
There are helper libraries you could add to it. You could add a wait or async await.
You can do a Redis. There's a Redis gem that you can tack on.
But really, the meat and potatoes here is the async Ruby gem, which depending on, I guess, negotiation.
Discussions, discussions, whatever between the standard library team and the folks who wrote this library may be part of the standard library,
meaning you won't even have to require it or import it or anything.
Other big thing going along with this async programming goodness is Ruby fibers.
Now, this is going to be a gross oversimplification because it's Ruby.
And I know a lot of you don't care.
This is a quote from the documentation of fibers, simply an independent execution context that can be paused and resume programmatically.
Doesn't that sound a lot like maybe a thread?
And that's basically what they are. They are. And I know that's technically not correct.
They may run on your main thread. It figures it out by itself.
But the quick and dirty definition for like a working definition to talk at the pub is it is an abstraction on threads.
The kind of the killer feature here is why you would use this set of threads is it has a transfer method,
which makes it easy to transfer data safely from one fiber to another.
Anybody who's done manual threading knows that passing data from one thread to another is where things can go wacky.
I think this is a great feat of engineering. We're going to Oppenheimer this and I think it shouldn't exist.
Really? Yeah. And I think it's one of those things that has been sort of neglected.
So I think it was introduced in Ruby 1.9, but they're like breathing new life.
And then now with async, too, I think there's some potential there.
I think the ball, I don't know if I'm making a tortured analogy here, but I think the snowball has just begun to roll again.
I'm sorry. Ruby needs to compete with, frankly, Python. I could see great uses for fibers.
I can also see a bunch of, let's say, less experienced developers.
We used to have a word for them. It began with an N, had two zeros in it, a B and a five or an S,
depending on your particular levels of 90s hatred.
And you're so elite. Exactly. One, three, three, seven forever.
I can see this blowing up many, many projects because people do stupid things with them.
Fair. And I suppose that is a risk for Ruby. But I like the Unix philosophy here.
It's like you give the user the power to hurt themselves, but at the same time, they can also build what they need.
It's like it's a double edged sword. You can't have one without the other.
It seems like a pretty legit thing, but it's just when you frame it in that context.
Yeah, I could see how it's a downside, but I just don't know if that's a big enough use case like the new user.
It needs to be considered, though, but I don't know if it should should it hinder a powerful feature.
Well, my concern is that some blogger with a gold MacBook is going to sit under a cherry blossom tree
and run a blog post about how everything you should do should be in a fiber.
Yeah. Which not only is that incorrect, but that will definitely bog down what is already a pretty slow programming language.
And I know I know a lot of performance enhancements and I'm a Ruby fan, but I would be more excited about something like a new framework to make Ruby more relevant.
In spaces where, frankly, Python marketer wise is kicking its ass.
But that's just me. A ban. A legit async implementation.
Yeah. Oh, I like I like the async. I'm down with async. That's huge, right? That's big.
I like the async. I think that should go into standard lib. Yeah.
And the way they do it, I think is very smart, having it done in blocks.
The fiber thing, it's it's just easy enough that I think junior developers will overuse it.
And I know I just know there's a hipster with a knit hat ready to write a blog post that's going to torture me for the next five years.
You know, we were talking on the pre show because we stream the show live on Mondays and.
Roblox was down for three days, they went down on the 27th and I don't think they got back up until the 30th and.
It reminded me to recently remember when Facebook was down for like 24 hours or whatever it was.
You find out afterwards because I was reading the sort of the first pass at a postmortem that Roblox had.
You find out afterwards that like the tools they've built themselves broke because they depended on some fundamentals.
They have some assumptions like name services would always be available. DHCP might always be available.
And they ended up spending at least a day just fixing their tooling, just fixing the tools they built.
So that way they could redeploy their infrastructure and get things back online again.
And so, you know, I think your points well taken that if you give somebody a tool that can be used improperly and expect them to have enough experience to know better.
Well, even in some seriously high production, high volume, really lots of money on the line kind of instances.
People are building these things in a way where they're just devastated when there's some sort of fundamental assumption that works out to be incorrect.
And these kind of things are the kind of problem that can exist for like a couple of years until you hit some sort of critical phase or critical mass and then just blow up.
That's exactly what happened with Roblox. They said it was it wasn't necessarily actually even user scale.
Although I think they do have a pretty impressive amount of active users, but it was scaling out of servers.
And as they added more servers, some of the tooling they'd built themselves around communication started to fail.
And then it just sort of created this load effect from that, which then kind of created this DDoS effect, which then just sort of broke everything.
And, you know, you remember with the Facebook guys and gals, they couldn't even badge in their system was so broken, they they couldn't get the doors open.
It's always DNS, even when it's not. I still blame DNS. DNS and BGP. They're always going to get you.
OK, so I think Mac OS has lapped, I have to say, Linux in a really embarrassing way.
And I think it's a fundamental workstation feature that makes these things stable machines for developers and for admins and content creators.
It's actually something that's file system related, and that's why it really gets me.
Because we've had great file systems on Linux for a while.
And Mac OS rode that HFS train for so long, way longer than they should have in a modern MVME powered Mac era.
And then like little file system ninjas in the middle of the night or sand as else.
When you updated Mac OS, they swapped you over to APFS, but they didn't do a lot with it.
They didn't do much. In fact, it was it was a boring implementation.
But you could see the features and capabilities of APFS and you could see where maybe Apple would go with it.
This is a couple of years ago, three years ago. But Linux didn't really do much.
We had one major leap forward. The Fedora distribution switched their default file system over to ButterFS.
And the reason why this matters is because this gives you, first of all, a file system that's built with SSD and MVME storage in mind.
It gives you the ability to copy files on write. It gives you the capability to check some files, encrypt files, compress files, create volumes.
It's a modern way where maybe you might not even directly interact with it.
But the operating system tooling can use these file system features to create a bulletproof workstation experience.
Back to Fedora, they've been experimenting with something called Silverblue.
Which is an attempt to create a really solid Linux workstation that has safe updates.
Applications are in a different space, kind of operates more like our cell phones do.
Well, in macOS Monterey, Apple has made a transition like this, even though Linux had years to figure this out.
It started in Catalina, Big Sur brought it forward, and Monterey has now finished the job.
And what it is, is they, while you're installing Monterey, re-slice up your hard drive like a maniac.
And they segregate the contents of the system files, which don't change, except during a macOS update.
And they separate that out from anything else on your system that does change.
Then they start running the system off of immutable snapshots.
So when the system boots, it's actually booting from a snapshot that the operating system doesn't actually have the capability to modify.
It's not even that it's read-only.
It's that Apple did not build the ability for the operating system to make modifications to that system volume.
And it's powerful.
And what Apple does now, starting with Monterey, is when they download an OS update,
they unmount the data volume and they unmount the system volume,
so that way there's no way for the update to cause any problems at all.
They perform the update, they run a series of checksums, and then they switch the snapshots over.
So you have your running system snapshot, and now you have the new environment that's been updated.
And then they boot from that.
And if there's a problem, they can boot from the old snapshot environment.
And they've done all of this in the background while you're updating your Mac to Monterey,
thinking about, I don't know what, there's hardly any new features.
It's an impressive step towards creating a bulletproof Mac OS install.
And now it gives you, like the first way it's really noticeable by users,
is it has that Chrome Power Wash feature now,
where you can go in there and you can delete the OS and reinstall the OS,
and all of your data remains, applications remain.
It's a really advanced workstation thing that I think Linux will get to,
but doesn't have yet unless you set it up yourself.
And it is something you could set up with ButterFS or ZFS or LVM and maybe XFS.
I don't know, you're crazy.
But it doesn't work this cleanly.
It wouldn't necessarily be integrated into the OS Update Manager like this is.
It wouldn't necessarily be integrated into the bootloader like this is.
And of course, this is cryptographically verified using Apple's suite of tools to do that.
It's a really impressive layout.
And you can visualize it with a link that I'll have in the show notes to see how Apple has done this.
And I'm a little envious as a Linux user because I feel like we have all the fundamentals to do this and more.
But there's just nobody that's really orchestrating that kind of thing.
Fedora may get there.
OpenSUSE may get there.
Canonical is working on it with Ubuntu and ZFS.
These distributions, it's possible to do snapshots when you install your packages and boot from different volumes.
They're all working on it.
But they're not all to the finish line yet.
In fact, none of them are really at the finish line by my definition.
And meanwhile, not only did Apple roll out a file system just flawlessly,
where in Linux it's still a fragmented mess of ButterFS and Extended4 and Extended3 and everything else.
But now over three different OS iterations, they've completely restructured the file system.
And they've done it in a way that's super transparent.
For example, the applications folder in Monterey is a lie.
It's a lie.
When you double click on the applications folder in Mac OS 12 Monterey,
it is a mount of two different folders, the one from the system partition that is unmodifiable.
And it overlays the one from your data partition.
And it shows it in there like it's all one.
And you never it never essentially as far as that layer of the operating system is concerned, it is one folder.
But under the hood, they have this new linking term they're using.
And I can't remember the term, but it's not like a symbolic link.
It's they have some other term ports in the article I've linked in the show notes.
And they're using that to fake out this application folder.
It creates the illusion of a single folder.
It's really clever.
And it means that like if you're the if you're the family tech support person or something like that,
you can go there and wipe somebody's computer, not worry about losing their apps and their data.
In truth, I haven't tried Monterey yet, but I am already running a PFS Apple file system.
It's fine. Works great.
I mean, really, you know, you don't even really notice as a as just using the system.
And perhaps that's maybe just a nod to their integration level, I suppose.
The fact that they can do these they can do these things and you wouldn't know unless you read about it.
There's a couple other things that I think make Monterey a pretty nice workstation.
And by the way, this isn't me saying one's better than anything else.
I just had a chance to give it a go and given you my report.
It's nice to see low power mode land in Mac OS.
It's about damn time.
It makes a big difference on M1 hardware, but it does make some difference on Intel hardware.
And what I don't know for sure yet, but what I'd love to see maybe somebody knows is.
Some sort of API that apps could check with with Mac OS and ask, are you in low power mode?
It's probably there some sort of framework or something.
So apps could know maybe they should shut up when they're on low power mode.
There's a little bit of more window management added.
I mentioned this, which is nice to see this in Monterey.
You can drag a window and say maybe you bring it from a really large monitor onto a small monitor or vice versa.
Monterey will now appropriately resize it so it fits on the screen automatically.
But additionally, there's now some more clicking and holding options on the green little.
Maximize button, whatever they call it, the green stoplight.
And now you have additional options in there.
They started doing this before, but Monterey, you can now start managing split view from there.
You can take over full screen.
There's several options they've added.
It's still pitiful.
Still really requires an app like magnet to make it to make it work.
But in short, you know, I'll just sum it up.
I got the nice, the bad and the ugly for you in the nice to see.
It's nice to see that Apple is trying to add as many feature parity as they can with iOS as they add features to iOS.
So you got Airplay to Mac now.
They've added variable refresh rate display support.
Live text and photos is here.
Finder can finally resume file copies.
That's nice.
The if I don't know how many people out there use this, but if you're primarily a Linux user, this is a really handy tool and finder.
The go to folder command just looks better.
It's faster.
And now they support auto completing of passing like you can in the terminal.
And that just brings up the gooey file manager to that spot on the file system.
All right. That's the nice stuff.
But here's the bad stuff.
Some just not done yet.
Universal Control's not there.
There's features. It just feels like it's not finished.
It's sort of surprising in that way.
It's probably one of the most low key upgrades I've ever done on a Mac.
I did an upgrade if they hadn't changed the background, which they change on you.
I probably wouldn't even been able to tell you if it upgraded or not.
They've ported Automator to work with the Automator workflow.
They've tried that, you know, to import them to shortcuts because shortcuts is new in here.
The shortcuts app is crazy bad.
I don't know what Apple's doing with that.
It looks like an electron app.
It's just it's horrible.
And here's the really bad stuff.
Intel Macs are getting the shaft big time.
I had an old old crusty MacBook that's now off the list.
And some of these features are Apple Silicon only now.
And it's kind of like, geez, really?
Is the first OS after you announced it? OK.
Also, notifications are still a damn disaster on Mac OS.
Focus mode support helps reduce the noise.
But my God, Apple, what are you doing with notifications?
Go look at how plasma handles notifications, Apple.
And then I don't know what the hell's going on here.
Maybe the original developer, God bless, maybe they died.
But terminal. It's the same from the early versions of Mac OS.
I can't believe how bad Apple's terminal is.
Microsoft has just schooled Apple on how to do a better terminal.
And every single Linux desktop environment has a better terminal than the terminal that ships with Mac OS.
And it's just like, dammit, Apple, that application terminal dot app, it sells Macs.
It sells Macs. And it's like one of the worst apps on the OS.
It's gotten some updates since the early versions of Mac OS.
I kid. It legitimately has gotten some improvements, but it's an immediate upgrade to install iTerm.
So I don't know why they don't give any effort at all to the terminal.
It seems like it'd be a pretty low key project.
They have a lot they could do.
So even just putting somebody on it for a release cycle would make a huge difference.
And then, of course, the other thing in the ugly section for my review is that some older Macs have been bricked after installing Monterey.
So if you got a really old Mac, it might be worth holding off for a bit.
But if you have a, you know, a new ish, you know, back to like.
Twenty seventeen forward. It's a pretty easy upgrade.
I installed it and everything's working fine. No, no compatibility issues.
It wasn't a big deal.
And, you know, I would do it alone for the finder improvements, to be honest with you, because there's several other things in there that are nice to have.
Just be warned that because it has airplay now, it takes over Port 5000 on your Mac.
So if you've got stuff running on Port 5000, you can go into the system preferences and turn off airplay format.
Rap, really? Yeah. I do run stuff on 5000 all the time.
Yeah, it's a thing. You know, there's that kind of stuff that comes along when they add these new features.
I get the idea. I like the idea of having airplay on the Macs.
You can send stuff to it seems kind of weird that they haven't had that.
But I think that, you know, I've criticized Apple in years past for the early 2017 MacBooks that had the bad keyboard and just two ports and for not adding decent workstation features to Mac OS.
And I really think they need up their terminal game.
I think they could expose more of these file systems and finder.
You know, wouldn't it be great if you could just right click on a file and say restore previous version?
Why not? But I am also impressed with what you do get in the end is a pretty balanced system now that especially on M1 hardware.
Really gets the most out of the hardware.
For the most part, stays out of your way most the time and has a lot of really nice quality of life features.
And it's backed by a pretty sound file system architecture that's going to keep your data as safe as that hardware can possibly keep it safe.
You know, beyond hardware failure, the way they've architected that thing is really, really impressive.
So I think actually moderate overall because it's not abrasive to upgrade to is actually one of the better releases in a while.
And I look towards the Linux desktop.
I always after I do these kinds of things and think, OK, what of this what I pull forward to Linux.
And I think the file system architecture is definitely one of them.
I think this low power mode, which we're kind of getting that in GNOME 41 and GNOME 40.
But I think, you know, something more more system wide, those kinds of things would be really great to see come over to Linux desktop.
And I just think that overall, if you're getting yourself one of these new Macs and you're going to be running Mac OS on it, I think I think it's going to be moderate is going to be a good release.
And I would imagine you throw on your favorite virtualization tool on there and you can run some some pretty nice VMs, just they have to be ARM based VMs is the only thing.
So that's kind of the thing about it. So you're going to try it or you're going to wait a while.
I'm probably going to wait a few weeks. I think it's probably smart.
I mean, there's no reason if there's nothing I wanted to give it a shot because I wanted to play around with the new file system stuff.
And I figured we'll give it a go.
I don't really have any like critical workloads on the Mac. So if something breaks, it doesn't really ruin my day.
But that said, I also upgrade with abandon them on the systems that are absolutely critical to my workflow.
I'm just that kind of person. Should probably wrap it up. But I want to say thanks to our members.
You do have that new quarterly and you can go to Coder dot QA to sports.
We did have a few people sign up last week. Hello, new members.
You support the show. You get a limited ad feed. And of course, you do get that Coderly quarterly report.
Coder QA dot co. You can become part of our QA team.
Mr. Dominic, is there anywhere you want to send people? Yeah. Check out Alice at Alice Dot Dev.
Hell, yeah. Go check out Alice and go find Mike on Twitter, too.
At Dumanuco, the company's at the Mad Botter Inc. I'm over on the Twitter at Chris Ellis.
And the podcast network is at Jupiter Signal and the show. Yeah, that's there, too.
At Coder Radio Show, you find out about like, you know, releases and whatnot.
And we do the show live. We do it on Mondays at noon Pacific, 3 p.m.
Eastern at J.B. Life dot TV. Links to what we talked about today are at Coder dot show slash.
What is it? Four, three, eight. That's the secret.
You know, it just follows the episode numbers. Coder dot show slash episode number.
So that's pretty simple, right? You can find our contact form over on our website.
Also our RSS feed so you can subscribe in your choice because open podcast ecosystems rule.
So you get the feed, put it in the app you like and maybe leave us a review at your favorite podcast service.
If you get it that way, always helps out.
Thanks so much for listening on this week's episode of the Coder Radio program.
And we'll see you right back here next week.

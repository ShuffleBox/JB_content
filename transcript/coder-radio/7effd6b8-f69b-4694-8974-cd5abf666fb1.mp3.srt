1
00:00:00,000 --> 00:00:07,000
This is Koda Radio, episode 348, from March 11th, 2019.

2
00:00:31,000 --> 00:00:35,360
Hello, and welcome to Koda Radio, Jupiter Broadcasting's weekly talk show that takes

3
00:00:35,360 --> 00:00:42,240
a pragmatic look at the art and business of software development and related technologies.

4
00:00:42,240 --> 00:00:47,880
My name is Wes, and I'm joined by that crazy hacker himself, the one, the only, Mr. Michael

5
00:00:47,880 --> 00:00:48,880
Dominic.

6
00:00:48,880 --> 00:00:54,760
Mwa ha ha! After 340 episodes, I'm free! It's time to conquer scale!

7
00:00:54,760 --> 00:01:00,920
Oh yes, that's right. I just got back from scale. Actually, the whole JB crew was out

8
00:01:00,920 --> 00:01:05,120
there and I gotta tell ya, it was my first scale. It was a ton of fun.

9
00:01:05,120 --> 00:01:08,000
Really? So tell me, what was the highlight of scale?

10
00:01:08,000 --> 00:01:12,800
Okay, well the personal highlight for me was getting to see Brendan Gregg, the incredible

11
00:01:12,800 --> 00:01:17,780
performance engineer at Netflix, give a great talk all about the modern traceability tools

12
00:01:17,780 --> 00:01:22,960
that we have with EBPF on Linux. It's like D-Trace, but actually slightly more powerful.

13
00:01:22,960 --> 00:01:25,560
And you know, you might not care about that, we have some great tech snaps about that if

14
00:01:25,560 --> 00:01:30,800
people want to go find out more, but a cool demo he did, which he prepared like an hour

15
00:01:30,800 --> 00:01:36,960
before, was a live performance debugging of Minecraft, which is not only a complex Java

16
00:01:36,960 --> 00:01:42,760
application, but was also a game Brendan had obviously never played before, because mid-talk

17
00:01:42,760 --> 00:01:46,800
he had to ask the audience how to mine, which if you don't play Minecraft, that's a button

18
00:01:46,800 --> 00:01:48,360
click on your mouse.

19
00:01:48,360 --> 00:01:53,560
You know, there's nothing more horrible than it performed Minecrafter.

20
00:01:53,560 --> 00:01:59,680
Yeah, right? Isn't that the case? Now, there was actually a lot to like. I've been to all

21
00:01:59,680 --> 00:02:04,360
kinds of different conferences, but this was my first bigger Linux convention, right? So

22
00:02:04,360 --> 00:02:08,740
I've been to Linux Fest Northwest, and it's got a small friendly vibe. And you know, there's

23
00:02:08,740 --> 00:02:14,200
things like Defcon or Ozcon or some of the bigger re-invent that are just crazy, but

24
00:02:14,200 --> 00:02:18,320
they feel they are business conferences, right? It's people making business networking and

25
00:02:18,320 --> 00:02:20,200
connections and selling services.

26
00:02:20,200 --> 00:02:21,920
Bring on the suits, baby.

27
00:02:21,920 --> 00:02:25,600
Bring on the suits, yeah. Scale's nothing like that. It's still big enough that like,

28
00:02:25,600 --> 00:02:28,960
you know, I got to go see Brendan Gray talk, which was awesome. And all the people that

29
00:02:28,960 --> 00:02:33,120
you might want to see, experts are there, but everyone's friendly. Everyone's there

30
00:02:33,120 --> 00:02:36,560
because they love Linux, they want to talk about technology, and you can actually have

31
00:02:36,560 --> 00:02:40,840
some space at the end of a talk to go shake hands, say hi, get your picture taken with

32
00:02:40,840 --> 00:02:46,280
people in a way that you just can't at bigger, more businessy conventions.

33
00:02:46,280 --> 00:02:47,280
That sounds great.

34
00:02:47,280 --> 00:02:52,060
Yeah, it was great. Also, at the same time, America's Got Talent was there, and they were

35
00:02:52,060 --> 00:02:57,120
in the building right between the two buildings that Scale was using. It was pretty funny.

36
00:02:57,120 --> 00:03:01,340
Totally different crowds. And I got to see Simon Cowell ever so briefly go from his car

37
00:03:01,340 --> 00:03:03,760
to the venue.

38
00:03:03,760 --> 00:03:06,880
That's probably enough about Scale for now. If you want to hear more about JB's trip to

39
00:03:06,880 --> 00:03:11,400
Scale, go check out the upcoming episode of Linux Unplugged.

40
00:03:11,400 --> 00:03:15,000
Let's get things rolling with some feedback from our friend Tom over in the Coder Radio

41
00:03:15,000 --> 00:03:20,920
subreddit. He's got feedback for us about our last episode, Rusty Ruby's number 347,

42
00:03:20,920 --> 00:03:26,320
where we had some concerns about Google's growing browser dominance. Tom writes,

43
00:03:26,320 --> 00:03:30,440
I don't think people need to worry so much about Google or Chrome's dominance the way

44
00:03:30,440 --> 00:03:37,080
we did about IE6. It's not just that Chrome is cross-platform and open-source, but it

45
00:03:37,080 --> 00:03:42,560
also sticks to standards in a way that IE never did. Amen, Tom.

46
00:03:42,560 --> 00:03:47,340
Practically speaking, we should also keep in mind that iOS exists, and it's always going

47
00:03:47,340 --> 00:03:53,600
to be locked down in a way that means no matter how popular Chrome becomes, an important portion

48
00:03:53,600 --> 00:03:59,160
of mobile users will always be using Apple's browser engine.

49
00:03:59,160 --> 00:04:03,800
Some might also lose big in some areas like web components or web assembly. That's the

50
00:04:03,800 --> 00:04:08,080
beauty of a standards-based platform.

51
00:04:08,080 --> 00:04:10,920
Thank you very much for your feedback, Tom. We really appreciate all the feedback we get,

52
00:04:10,920 --> 00:04:18,840
and you can provide us more over at coderradio.reddit.com or coder.show.com. What's your take, Mike?

53
00:04:18,840 --> 00:04:21,520
Did we hype things a little bit out of proportion last week?

54
00:04:21,520 --> 00:04:25,000
Yeah, I think we may have overhyped it just a little bit, right? Because you know what,

55
00:04:25,000 --> 00:04:29,640
you always care about mobile. I don't know if you followed me on Twitter this weekend

56
00:04:29,640 --> 00:04:33,840
because I know you were busy hanging out with Scale and those America's Got Talents girls,

57
00:04:33,840 --> 00:04:41,080
and God bless you, I wish I was there. But my son whipped out the Marvel coloring app

58
00:04:41,080 --> 00:04:44,960
for iPad, and I have the Apple Pencil, you know, Wes?

59
00:04:44,960 --> 00:04:46,960
Oh, yeah, those are pretty slick.

60
00:04:46,960 --> 00:04:50,920
And I have the new one where it has all the fancy, the Apple Pencil 2, so all the different

61
00:04:50,920 --> 00:04:56,600
— like if you shade it sideways, it shades instead of just coloring. He spent two hours

62
00:04:56,600 --> 00:05:01,520
just coloring Captain Marvel. He's a Marvel Captain Marvel.

63
00:05:01,520 --> 00:05:02,520
That's awesome.

64
00:05:02,520 --> 00:05:08,000
To a level of detail, that's a little scary for a two-year-old, but my faith in the iPad

65
00:05:08,000 --> 00:05:13,080
as a harbinger of the future of computing for the masses is renewed. So yeah, I think

66
00:05:13,080 --> 00:05:20,040
Tom's point is well taken, that mobile superiority is a significant thing, and it's definitely

67
00:05:20,040 --> 00:05:21,760
going to be a check against Chrome.

68
00:05:21,760 --> 00:05:26,160
Yeah, interesting. I was kind of always — I hadn't thought of that, so that's a great

69
00:05:26,160 --> 00:05:29,240
point, Tom, because I kept thinking of Firefox as something of the backstop, and in some

70
00:05:29,240 --> 00:05:34,360
ways it is, but that's a lot of hope in one corner.

71
00:05:34,360 --> 00:05:38,560
So I hear we have a new way to deploy these iPad apps that my boy likes.

72
00:05:38,560 --> 00:05:41,800
Right? I mean, that's something interesting to you because we previously talked about

73
00:05:41,800 --> 00:05:45,880
some of the links you're going to figure out your build system integrating with iOS,

74
00:05:45,880 --> 00:05:50,720
especially since you've been using more Linux these days, and those ecosystems — well,

75
00:05:50,720 --> 00:05:52,200
let's say interop is a challenge.

76
00:05:52,200 --> 00:05:56,440
Yes, I'm on Linux right now.

77
00:05:56,440 --> 00:05:59,720
So maybe you can explain this, because I saw this over in the CoderRadio subreddit, and

78
00:05:59,720 --> 00:06:05,440
it's a post over on GitLab's blog, but titled, How to Publish iOS Apps to the App Store with

79
00:06:05,440 --> 00:06:10,880
GitLab and Fastlane. And I'll admit, Fastlane was not something I knew about, and I also

80
00:06:10,880 --> 00:06:14,680
have only gone the official route for App Store interactions, on a Mac, doing all the

81
00:06:14,680 --> 00:06:16,160
normal stuff.

82
00:06:16,160 --> 00:06:17,160
What is this?

83
00:06:17,160 --> 00:06:19,160
Can you break this down for me, Mike?

84
00:06:19,160 --> 00:06:23,200
Yeah, so I'm not going to go into details, because I know people get all upset when I

85
00:06:23,200 --> 00:06:28,640
go into line-by-line iOS Swift or deployment stuff, but basically GitLab and a company

86
00:06:28,640 --> 00:06:32,300
called Fastlane — Fastlane has been around for a while.

87
00:06:32,300 --> 00:06:39,520
They are basically — geez, you have to be deep into the iOS world, but TestFlight actually

88
00:06:39,520 --> 00:06:41,840
was not part of Apple for a long time.

89
00:06:41,840 --> 00:06:42,840
Really?

90
00:06:42,840 --> 00:06:47,360
Yeah, they were an independent company that offered Android deployment and iOS deployment

91
00:06:47,360 --> 00:06:50,500
and distribution services.

92
00:06:50,500 --> 00:06:55,220
Then Apple bought them, and the Android stuff just kind of went away.

93
00:06:55,220 --> 00:06:59,800
So the beautiful thing about TestFlight is you could write — back in the day, you could

94
00:06:59,800 --> 00:07:05,800
write a bunch of scripts that integrated with it, and basically CI slash automate all your

95
00:07:05,800 --> 00:07:07,800
deployments.

96
00:07:07,800 --> 00:07:13,520
Fastlane is offering a much more modern slash easier version of the same thing, and now

97
00:07:13,520 --> 00:07:21,000
they have integration with GitLab, although I imagine they have one with GitHub, too.

98
00:07:21,000 --> 00:07:28,920
That makes it fairly simple to deploy your iOS testing deployments, so your beta deployments

99
00:07:28,920 --> 00:07:36,240
to your customer or to your internal stakeholders, simply by merging a GitLab branch, for example.

100
00:07:36,240 --> 00:07:39,360
Oh, that sounds pretty slick.

101
00:07:39,360 --> 00:07:45,360
Yeah, I mean, there's still quite a bit of work in it, but it's definitely a —

102
00:07:45,360 --> 00:07:46,360
Like what?

103
00:07:46,360 --> 00:07:47,360
What's an example?

104
00:07:47,360 --> 00:07:51,040
You have to generate the profiles, and you have to have a little file in there for Fastlane

105
00:07:51,040 --> 00:07:52,040
to pull the profiles.

106
00:07:52,040 --> 00:07:53,040
Oh, sure.

107
00:07:53,040 --> 00:07:54,040
You've got to do some integration to get their hooks in.

108
00:07:54,040 --> 00:07:57,840
There's some integration stuff, yeah, but it's the same thing you would be doing if

109
00:07:57,840 --> 00:08:01,880
you went my approach with the physical machine doing, say, Jenkins.

110
00:08:01,880 --> 00:08:02,880
Right.

111
00:08:02,880 --> 00:08:06,840
Because then it just becomes a question of how much do you not want to have to set all

112
00:08:06,840 --> 00:08:09,680
that up, and what's the ongoing price going to be?

113
00:08:09,680 --> 00:08:10,680
Right.

114
00:08:10,680 --> 00:08:12,400
Or do you want a physical machine or not?

115
00:08:12,400 --> 00:08:13,400
That becomes a big deal.

116
00:08:13,400 --> 00:08:14,400
Right.

117
00:08:14,400 --> 00:08:15,400
You want it in the cloud.

118
00:08:15,400 --> 00:08:16,400
Yeah, right.

119
00:08:16,400 --> 00:08:17,400
Exactly.

120
00:08:17,400 --> 00:08:19,440
Do you need this to scale, or are there benefits that you can get, like it seems like you might

121
00:08:19,440 --> 00:08:23,240
be able to do, of just having a physical machine that can wear multiple hats?

122
00:08:23,240 --> 00:08:24,240
Right.

123
00:08:24,240 --> 00:08:30,540
So, right now, you're baiting me, but right now I'm on a Mac Mini that is our build machine,

124
00:08:30,540 --> 00:08:38,000
but also my podcast machine, so for the amount of native iOS development we currently do,

125
00:08:38,000 --> 00:08:45,140
it's easier just to have one build machine and automate that via the local machine.

126
00:08:45,140 --> 00:08:48,760
Certainly in the future, Fastlane could make sense, and I think, in fact, if you don't

127
00:08:48,760 --> 00:08:52,840
have access to a Mac OS mission, although it's going to be hard to generate the profiles

128
00:08:52,840 --> 00:08:59,200
if you don't, but if you can somehow generate the provisioning profiles and the certificates,

129
00:08:59,200 --> 00:09:02,160
then plus the GitLab integration is definitely a great choice, and in general, if you were

130
00:09:02,160 --> 00:09:07,160
a larger team than what we are at Team B, it's a great choice.

131
00:09:07,160 --> 00:09:08,360
That made me think the same thing, right?

132
00:09:08,360 --> 00:09:11,240
Like, if you can have a couple people, one person maybe, who kind of handles all that,

133
00:09:11,240 --> 00:09:14,960
gets it set up, and then the other team members, they might not need to care about it at all.

134
00:09:14,960 --> 00:09:16,000
It's integrated into CI.

135
00:09:16,000 --> 00:09:18,800
They just can push some changes and have it go through the pipeline.

136
00:09:18,800 --> 00:09:19,800
Right.

137
00:09:19,800 --> 00:09:20,800
So, right now, I am the CI.

138
00:09:20,800 --> 00:09:26,880
I pull the few native iOS things we have, and I build them, and bombs are on call.

139
00:09:26,880 --> 00:09:34,520
I have a few scripts I have, but it's all local, so again, at scale, I think this makes

140
00:09:34,520 --> 00:09:35,520
a lot of sense.

141
00:09:35,520 --> 00:09:36,520
Yeah, that really does.

142
00:09:36,520 --> 00:09:37,520
Interesting.

143
00:09:37,520 --> 00:09:42,000
Well, we'll have to see, audience members, dear audience members, if you're using it

144
00:09:42,000 --> 00:09:43,000
or have other solutions.

145
00:09:43,000 --> 00:09:44,720
Well, we'd always love to hear it.

146
00:09:44,720 --> 00:09:48,720
We'd always love to hear about it over at coder.show slash contact.

147
00:09:48,720 --> 00:09:49,720
All right.

148
00:09:49,720 --> 00:09:53,000
I'm going to hijack the show just for a little bit here.

149
00:09:53,000 --> 00:09:54,640
We're going to call this maybe the Clojure Corner.

150
00:09:54,640 --> 00:09:59,360
Really, it's not about Clojure at all, but as you know, I'm a little bit fascinated.

151
00:09:59,360 --> 00:10:03,040
One thing that's recently been happening in the Clojure world is that Alex Miller, the

152
00:10:03,040 --> 00:10:09,960
wonderful developer who works at Cognitecht, mostly on Clojure itself, well, he had some

153
00:10:09,960 --> 00:10:16,400
of his tests posted on Reddit this week, which, as he says, was unexpected.

154
00:10:16,400 --> 00:10:19,980
And I thought that was kind of interesting because tests, well, they're important, obviously,

155
00:10:19,980 --> 00:10:24,240
but there's a lot of different approaches, and too often, I think, we end up in a world

156
00:10:24,240 --> 00:10:30,120
of like tests are good, you need tests, write tests, but then we stop talking about it.

157
00:10:30,120 --> 00:10:35,360
So in this case, the tests in question are checking, among other things, that maps returned

158
00:10:35,360 --> 00:10:40,160
by spec, which is a validation library for Clojure, which we can and should get into

159
00:10:40,160 --> 00:10:41,160
another time.

160
00:10:41,160 --> 00:10:43,860
Basically, it's returning some maps, right?

161
00:10:43,860 --> 00:10:49,160
But the key point here, what I want to talk about today is you might not always care to

162
00:10:49,160 --> 00:10:54,980
validate every attribute, and more importantly, you often don't want tests to fail when you

163
00:10:54,980 --> 00:10:56,240
enhance something, right?

164
00:10:56,240 --> 00:11:01,160
So this is often stuff like reporting information about a data structure, how it conforms, what

165
00:11:01,160 --> 00:11:06,440
the internal structure of it is, and if someone adds additional attributes, more information

166
00:11:06,440 --> 00:11:09,400
to that map, which is generally a non-breaking change, right?

167
00:11:09,400 --> 00:11:12,280
I'm talking about adding a key to a map, so you still have all the other keys, nothing's

168
00:11:12,280 --> 00:11:13,720
been removed.

169
00:11:13,720 --> 00:11:18,520
Having tests break due to just non-breaking, accretive code changes, not only is it a drag

170
00:11:18,520 --> 00:11:22,920
on progress, but if you're like me and Rich Hickey, the creator of Clojure, it just bugs

171
00:11:22,920 --> 00:11:26,120
you on a philosophical level.

172
00:11:26,120 --> 00:11:30,600
In this case, also, there's kind of an interesting little custom function called submap as a

173
00:11:30,600 --> 00:11:35,460
concrete example, which rather than checking for stricter quality in your tests, it just

174
00:11:35,460 --> 00:11:39,480
verifies that whatever you're looking for is a subset of what you get, right?

175
00:11:39,480 --> 00:11:43,080
So you can set up, like, I want to validate that this little chunk of data is always in

176
00:11:43,080 --> 00:11:47,880
the data I get, but if you get extra data, you might not need to break all your tests,

177
00:11:47,880 --> 00:11:51,480
and what it immediately makes me think of is all the tests I've seen so many times where

178
00:11:51,480 --> 00:11:54,360
you basically just end up with two lists of stuff, right?

179
00:11:54,360 --> 00:11:59,260
Like, in your code, you do a bunch of stuff, and then your tests, you just write exactly

180
00:11:59,260 --> 00:12:00,260
the same stuff.

181
00:12:00,260 --> 00:12:04,320
You're not sharing a data structure, so anytime you make a code change, even if it doesn't

182
00:12:04,320 --> 00:12:08,160
really break anything, even if a test didn't catch that it had a downstream conflict, which

183
00:12:08,160 --> 00:12:11,760
is ideally what you're actually trying to test for, you still got to go update things

184
00:12:11,760 --> 00:12:15,880
in both places.

185
00:12:15,880 --> 00:12:17,040
Is this a problem you've encountered?

186
00:12:17,040 --> 00:12:21,520
You know, brittle tests, needless tests, I see it mostly in some unit tests that are

187
00:12:21,520 --> 00:12:26,480
just poorly thought out, and it makes me think, what were you trying to test here?

188
00:12:26,480 --> 00:12:33,040
Yeah, testing has been a long-visited topic of the show.

189
00:12:33,040 --> 00:12:34,640
I'm surprised at your take, actually.

190
00:12:34,640 --> 00:12:38,440
I thought you were going to tell me that the Clojure world had solved this problem.

191
00:12:38,440 --> 00:12:44,240
Well, I think there is a little bit of a different culture there.

192
00:12:44,240 --> 00:12:45,240
TDD can be great.

193
00:12:45,240 --> 00:12:48,640
I'm not a particularly strict adherent.

194
00:12:48,640 --> 00:12:51,320
My personal philosophy is a little bit more like you just got to be thinking about software.

195
00:12:51,320 --> 00:12:54,400
Obviously, tests are a part of the way that you do that, and you need tests, especially

196
00:12:54,400 --> 00:12:55,520
for maintenance mode.

197
00:12:55,520 --> 00:13:00,320
In the Clojure world, because it's so REPL-driven, a lot of time REPL interactions form the basis

198
00:13:00,320 --> 00:13:05,360
of TDD, and then REPL interactions get refactored into tests, and that's just sort of trying

199
00:13:05,360 --> 00:13:10,140
to take the interactivity of development up one level, because it's just faster.

200
00:13:10,140 --> 00:13:11,140
So it's so funny.

201
00:13:11,140 --> 00:13:17,520
One of the criticisms, and I've been doing a ton of Ruby on Rails, as you know, as other

202
00:13:17,520 --> 00:13:23,480
Rails devs have had at me, is that I am not a 100% test coverage seller.

203
00:13:23,480 --> 00:13:27,720
I test things that are like, and people who have been long-time listeners know, I test

204
00:13:27,720 --> 00:13:35,440
things that are like algorithmic or basically code that's complex and quote-unquote mathy.

205
00:13:35,440 --> 00:13:36,640
We're computing some value.

206
00:13:36,640 --> 00:13:41,720
Keep in mind, we mostly work in the aerospace industry, so, you know, things that are-

207
00:13:41,720 --> 00:13:42,720
Right.

208
00:13:42,720 --> 00:13:44,440
You implemented some real algorithms here that you need to validate.

209
00:13:44,440 --> 00:13:45,440
Right.

210
00:13:45,440 --> 00:13:49,360
And you want to make sure that when you deploy something new, they don't blow up on you,

211
00:13:49,360 --> 00:13:50,360
right?

212
00:13:50,360 --> 00:13:52,520
Or even like inventory control systems, same thing.

213
00:13:52,520 --> 00:13:56,920
You want to make sure that you're always making sense.

214
00:13:56,920 --> 00:13:58,840
Let me kind of sharpen that point.

215
00:13:58,840 --> 00:14:03,360
I do not actually believe in UI testing in terms of automated UX testing, and I'll just

216
00:14:03,360 --> 00:14:05,960
stop there and say, what are your thoughts on that?

217
00:14:05,960 --> 00:14:06,960
Hmm.

218
00:14:06,960 --> 00:14:13,240
I mean, I want to test as much as possible, but I think you do need to consider, and speaking

219
00:14:13,240 --> 00:14:17,120
to your 100% test coverage thing, you do have to consider return on investment because everything

220
00:14:17,120 --> 00:14:23,800
costs time, especially in the business world, and it's just going to always be a value tradeoff.

221
00:14:23,800 --> 00:14:27,520
So I do see use in good integration tests.

222
00:14:27,520 --> 00:14:31,320
They're often harder to make and more of a time suck, but if you can validate things

223
00:14:31,320 --> 00:14:36,300
are really working in as close to the real world as you can get, then I like that.

224
00:14:36,300 --> 00:14:42,120
But UI testing can be pretty tricky.

225
00:14:42,120 --> 00:14:44,520
Like emulating clicks and taps and things like that.

226
00:14:44,520 --> 00:14:46,080
That's what I'm talking about by UI testing.

227
00:14:46,080 --> 00:14:47,080
Yes.

228
00:14:47,080 --> 00:14:48,080
Right.

229
00:14:48,080 --> 00:14:51,740
And I think part of that too is just because like UIs are so stateful.

230
00:14:51,740 --> 00:14:56,860
That's kind of why I'm a fan of some of the React style of development and the way Clojure

231
00:14:56,860 --> 00:15:00,560
approaches that too, where it's a little more functional and you've got data and then data

232
00:15:00,560 --> 00:15:05,200
fed to views that just returns whatever you're going to render out to the page so that you

233
00:15:05,200 --> 00:15:08,880
can hopefully have like a little bit less state or like one central state.

234
00:15:08,880 --> 00:15:13,600
I know a fun example of this was for a while, the CircleCI interface was written in Clojure

235
00:15:13,600 --> 00:15:17,320
script and so they just had one big ball of state that was everything.

236
00:15:17,320 --> 00:15:22,200
And so if you got into a funky state in the UI, you could just hit, you can just serialize

237
00:15:22,200 --> 00:15:24,360
that out, save it or do a bug report.

238
00:15:24,360 --> 00:15:28,700
And then when you're going back to go troubleshoot that, all you needed was that one little blob

239
00:15:28,700 --> 00:15:33,000
of state loaded in and then the entire thing is exactly back to where your user had the

240
00:15:33,000 --> 00:15:34,000
problem.

241
00:15:34,000 --> 00:15:35,600
So I think there are some steps you can do to minimize that.

242
00:15:35,600 --> 00:15:40,440
You'll probably need either still like humans looking at stuff to validate that it still

243
00:15:40,440 --> 00:15:43,000
looks good or some weird little thing didn't break it.

244
00:15:43,000 --> 00:15:45,060
And it is also, that's where it gets really complicated, right?

245
00:15:45,060 --> 00:15:47,480
Because there's just so much difference.

246
00:15:47,480 --> 00:15:50,800
This is maybe where Chrome dominance would help on the flip side, but it's probably still

247
00:15:50,800 --> 00:15:52,040
not worth it.

248
00:15:52,040 --> 00:15:55,720
So it's so funny though, you mentioned, you kind of glossed over it as just like a matter

249
00:15:55,720 --> 00:15:57,480
of fact, but statefulness.

250
00:15:57,480 --> 00:15:59,240
I actually think that's a huge deal, right?

251
00:15:59,240 --> 00:16:05,980
Like I've written a bunch of Kotlin, geez, it must be about seven or eight months ago.

252
00:16:05,980 --> 00:16:09,720
And I found just the way I ended up writing Kotlin was much more functional.

253
00:16:09,720 --> 00:16:10,720
Does that make sense?

254
00:16:10,720 --> 00:16:11,720
Like...

255
00:16:11,720 --> 00:16:13,440
Oh yeah, absolutely.

256
00:16:13,440 --> 00:16:19,600
And that, and I wrote, I had 100% test coverage on that only because it was, by being functional,

257
00:16:19,600 --> 00:16:25,120
it was so much easier to conceive of and write those tests in a relatively trivial amount

258
00:16:25,120 --> 00:16:31,040
of time where my normal Rails code, I can test the algorithms, but the UI changes more

259
00:16:31,040 --> 00:16:32,040
than the algorithms, right?

260
00:16:32,040 --> 00:16:33,040
I mean, that's...

261
00:16:33,040 --> 00:16:34,040
Right.

262
00:16:34,040 --> 00:16:35,040
Yes.

263
00:16:35,040 --> 00:16:36,040
Right.

264
00:16:36,040 --> 00:16:37,040
Once you've got that really solid algorithm implementation, well, unless the business

265
00:16:37,040 --> 00:16:41,320
needs change, hopefully that's not changing too much.

266
00:16:41,320 --> 00:16:42,320
But you're right.

267
00:16:42,320 --> 00:16:43,320
That's exactly right.

268
00:16:43,320 --> 00:16:44,320
Yeah.

269
00:16:44,320 --> 00:16:47,160
Adding a little bit more functional stuff, just item potency in general, being able to

270
00:16:47,160 --> 00:16:51,440
understand that functions are pure and they don't have secret hidden away state.

271
00:16:51,440 --> 00:16:52,440
That seems nice.

272
00:16:52,440 --> 00:16:55,600
But if there could be one thing where a central state store in the UI can do, instead of little

273
00:16:55,600 --> 00:17:00,340
tiny blobs of state hidden all over in each of your individual components, that can be

274
00:17:00,340 --> 00:17:03,720
complicated to keep track of.

275
00:17:03,720 --> 00:17:08,040
I will say too, just like Turth is talking in the IRC and stuff, I don't want to come

276
00:17:08,040 --> 00:17:09,440
across as against tests.

277
00:17:09,440 --> 00:17:11,480
And if you'd like to, do it.

278
00:17:11,480 --> 00:17:12,480
Tests are good.

279
00:17:12,480 --> 00:17:13,480
You need them.

280
00:17:13,480 --> 00:17:14,800
They help especially on large teams.

281
00:17:14,800 --> 00:17:17,760
And as always, it's about thinking about what you're programming.

282
00:17:17,760 --> 00:17:18,960
And tests can help you do that.

283
00:17:18,960 --> 00:17:22,880
It's a good way to start exploring APIs before you've implemented them and understanding

284
00:17:22,880 --> 00:17:24,080
what you're going to do.

285
00:17:24,080 --> 00:17:25,800
And it's a good way to check your assumptions.

286
00:17:25,800 --> 00:17:30,160
I just want to push back against the rote copying style of unit tests.

287
00:17:30,160 --> 00:17:34,200
And I don't know, have you ever played with generative testing, Mike?

288
00:17:34,200 --> 00:17:35,200
I haven't.

289
00:17:35,200 --> 00:17:36,200
But go ahead.

290
00:17:36,200 --> 00:17:37,480
And I do have another comment.

291
00:17:37,480 --> 00:17:38,480
But go ahead.

292
00:17:38,480 --> 00:17:39,480
Yeah.

293
00:17:39,480 --> 00:17:41,800
We should probably do a bigger segment on it.

294
00:17:41,800 --> 00:17:44,600
But it's a way to try to enforce invariance.

295
00:17:44,600 --> 00:17:49,120
I think the biggest example people use is Quick Check, which came out of the Haskell

296
00:17:49,120 --> 00:17:50,120
community.

297
00:17:50,120 --> 00:17:55,560
But the idea is, let's say you want to show something that A times B is always the same

298
00:17:55,560 --> 00:18:00,760
as B times A. And you could have a 100 unit test case that you do that.

299
00:18:00,760 --> 00:18:04,600
But another way to do it is to generate, if you can spec out what your input is, like

300
00:18:04,600 --> 00:18:09,600
this function takes two integers or floating points or whatever, and then have the computer

301
00:18:09,600 --> 00:18:13,160
be smart enough to generate you a whole bunch of inputs, throw it at your function, and

302
00:18:13,160 --> 00:18:17,320
then test that the outputs meet your criteria.

303
00:18:17,320 --> 00:18:18,320
That makes a lot of sense to me.

304
00:18:18,320 --> 00:18:22,040
And in fact, we should do that in a few weeks, and I will study up on it and try it out.

305
00:18:22,040 --> 00:18:23,040
Excellent.

306
00:18:23,040 --> 00:18:24,040
All right.

307
00:18:24,040 --> 00:18:25,040
Well, I interrupted.

308
00:18:25,040 --> 00:18:26,040
What was your comment?

309
00:18:26,040 --> 00:18:27,040
Yeah.

310
00:18:27,040 --> 00:18:29,680
The only other comment I had to make is I have employed and seen, just in other people's

311
00:18:29,680 --> 00:18:36,440
code, a weird desire, and I'm speaking specifically about the kind of Rails community here, of

312
00:18:36,440 --> 00:18:39,440
writing 100% test coverage, but really shallow test.

313
00:18:39,440 --> 00:18:41,000
You know what I mean by shallow, Wes?

314
00:18:41,000 --> 00:18:42,560
Yeah, I think so.

315
00:18:42,560 --> 00:18:44,920
It's not really testing anything deep.

316
00:18:44,920 --> 00:18:45,920
It's not poking.

317
00:18:45,920 --> 00:18:46,920
You're right.

318
00:18:46,920 --> 00:18:50,260
It just tests like, yeah, is it of type string, right?

319
00:18:50,260 --> 00:18:51,260
Those kind of tests.

320
00:18:51,260 --> 00:18:52,260
Yeah.

321
00:18:52,260 --> 00:18:53,260
Yeah, exactly.

322
00:18:53,260 --> 00:18:55,280
It's kind of like the classic example of testing reverse, right?

323
00:18:55,280 --> 00:18:58,400
If all you care about is the type, that doesn't tell you anything about what the function's

324
00:18:58,400 --> 00:18:59,400
doing.

325
00:18:59,400 --> 00:19:00,400
Right.

326
00:19:00,400 --> 00:19:02,640
We're implementing static compilation via unit test, basically.

327
00:19:02,640 --> 00:19:03,640
Yes.

328
00:19:03,640 --> 00:19:06,080
That's the perfect way to describe it.

329
00:19:06,080 --> 00:19:07,080
Yeah.

330
00:19:07,080 --> 00:19:08,080
So that's bad, right?

331
00:19:08,080 --> 00:19:10,320
If that's your version of testing, that's not good.

332
00:19:10,320 --> 00:19:15,600
You should be testing the actual business logic or algorithm, Wes, I'm going to look

333
00:19:15,600 --> 00:19:16,800
into this generative test stuff.

334
00:19:16,800 --> 00:19:20,120
I think we should cover it one day and you can educate me on it, because that sounds

335
00:19:20,120 --> 00:19:22,240
like something that could be very useful.

336
00:19:22,240 --> 00:19:23,240
Yeah.

337
00:19:23,240 --> 00:19:27,520
And I've had some people worried too, like, oh, that's like weird randomness in your testing.

338
00:19:27,520 --> 00:19:28,520
And that can be true.

339
00:19:28,520 --> 00:19:31,520
But there's also always ways that you can sort of like, if you have good, you'll probably

340
00:19:31,520 --> 00:19:34,520
still have some specific examples, right, the edge cases you're aware of that you want

341
00:19:34,520 --> 00:19:35,520
to test around.

342
00:19:35,520 --> 00:19:39,720
And you can often, like if they're done well, they all start with the same random seed.

343
00:19:39,720 --> 00:19:43,960
So you could save that seed and then always get the same, quote unquote, randomly generated

344
00:19:43,960 --> 00:19:44,960
test example.

345
00:19:44,960 --> 00:19:47,680
So it is a more robust than I made it sound.

346
00:19:47,680 --> 00:19:48,680
Yeah.

347
00:19:48,680 --> 00:19:49,680
And that's, yeah.

348
00:19:49,680 --> 00:19:53,720
I mean, oh, you know what, Wes, we should have a whole day on testing, I think, in the

349
00:19:53,720 --> 00:19:54,720
next month.

350
00:19:54,720 --> 00:19:55,720
I think that is a great idea.

351
00:19:55,720 --> 00:19:58,640
Can we commit to that on the air with no prior conversation?

352
00:19:58,640 --> 00:19:59,640
Done.

353
00:19:59,640 --> 00:20:00,640
Done.

354
00:20:00,640 --> 00:20:01,640
Done.

355
00:20:01,640 --> 00:20:04,040
So it was written, so it will be done, Ramesses the second.

356
00:20:04,040 --> 00:20:05,440
There you go.

357
00:20:05,440 --> 00:20:09,600
So moving right along, now that we've made that little commitment, while I was at scale,

358
00:20:09,600 --> 00:20:13,760
I did see the wonderful folks from System76.

359
00:20:13,760 --> 00:20:18,160
And that made me, Mike, well, that made me think of you and that new little toy that

360
00:20:18,160 --> 00:20:20,840
I know you have been using.

361
00:20:20,840 --> 00:20:24,200
The Darter Pro.

362
00:20:24,200 --> 00:20:30,600
So I wrote a review of the Darter Pro on DominicM.com.

363
00:20:30,600 --> 00:20:31,600
I like it.

364
00:20:31,600 --> 00:20:37,960
I think I like it more than Thaleo, actually, which they're not going to be pleased to hear.

365
00:20:37,960 --> 00:20:40,200
The fan noise is less offensive.

366
00:20:40,200 --> 00:20:42,360
The battery life is about five to seven hours.

367
00:20:42,360 --> 00:20:44,120
This is obviously a laptop.

368
00:20:44,120 --> 00:20:50,600
It's got a beautiful matte screen at 1080 by 1920, I want to say, off the top of my

369
00:20:50,600 --> 00:20:51,600
head.

370
00:20:51,600 --> 00:20:52,600
I am a sucker for a nice matte screen.

371
00:20:52,600 --> 00:20:53,600
Yeah.

372
00:20:53,600 --> 00:20:54,600
You know what?

373
00:20:54,600 --> 00:20:57,400
I used to not be a matte screen guy, if you listen to the back catalog, but I've kind

374
00:20:57,400 --> 00:20:59,400
of got taken in by the matte screen.

375
00:20:59,400 --> 00:21:02,080
And it depends right on your use case there, like where you're going to use it.

376
00:21:02,080 --> 00:21:05,800
But for something that's real portable and I might, you know, I was on my laptop last

377
00:21:05,800 --> 00:21:08,640
night on the light rail, so it can be pretty handy.

378
00:21:08,640 --> 00:21:14,960
It's got a full keyboard with a number pad, which is a little awkward because it makes

379
00:21:14,960 --> 00:21:19,240
the regular QWERTY keyboard kind of off-center, if you know what I mean.

380
00:21:19,240 --> 00:21:22,440
But other than that, the keyboard's great.

381
00:21:22,440 --> 00:21:25,280
It's much better than a MacBook Pro keyboard.

382
00:21:25,280 --> 00:21:31,720
I have a few complaints, like the microphone input jack has a red light that's constantly

383
00:21:31,720 --> 00:21:35,120
on, which during the day you don't notice, but if you're working late at night, like

384
00:21:35,120 --> 00:21:39,720
there's a giant glowing red Danger Will Robinson light.

385
00:21:39,720 --> 00:21:42,480
Which I guess could be, yeah, that sounds pretty distracting.

386
00:21:42,480 --> 00:21:50,440
The spouse approval goes much lower on that one, especially if you're working in bed.

387
00:21:50,440 --> 00:21:51,600
It's got an RGB keyboard.

388
00:21:51,600 --> 00:21:56,000
I don't care about that, though I've played with it some, but if you like backlit keys

389
00:21:56,000 --> 00:21:59,200
with like funky colors, God bless you.

390
00:21:59,200 --> 00:22:03,200
Does that also mean then that the backlighting is fairly robust, you know?

391
00:22:03,200 --> 00:22:04,200
You can adjust it.

392
00:22:04,200 --> 00:22:07,640
See, that does seem nice, that's one thing my ThinkPad doesn't have that I sometimes

393
00:22:07,640 --> 00:22:08,640
wish for.

394
00:22:08,640 --> 00:22:10,640
I mean, I just turn it off, but you can adjust it.

395
00:22:10,640 --> 00:22:20,600
The only other negative thing I'd really mention is that it comes with two USB 3.0 Gen 1s and

396
00:22:20,600 --> 00:22:26,040
one USB 2.0, which, I don't know, I would have liked to see two USB 3.0 Gen 2s and then

397
00:22:26,040 --> 00:22:28,000
one USB 3.0 Gen 1 ports.

398
00:22:28,000 --> 00:22:33,680
I know that's like a super pedantic, like, bitchy port argument, and to its credit it

399
00:22:33,680 --> 00:22:40,240
does have like an HDMI display port and even has a Thunderbolt-powered USB-C, so it's a

400
00:22:40,240 --> 00:22:41,240
great machine.

401
00:22:41,240 --> 00:22:46,080
I just, you know, I just point out what I point out, right?

402
00:22:46,080 --> 00:22:52,700
Yeah, I will say I am still, I wish I wasn't, but I do still really like having some classic

403
00:22:52,700 --> 00:22:57,600
USB stuff, but you're right that, I don't know, USB-C is just in such a weird place

404
00:22:57,600 --> 00:22:58,600
right now.

405
00:22:58,600 --> 00:22:59,600
Yeah.

406
00:22:59,600 --> 00:23:00,600
Yeah, it is.

407
00:23:00,600 --> 00:23:05,760
I mean, I don't mind that it's USB-A, I would just prefer, like, I don't understand why

408
00:23:05,760 --> 00:23:11,200
we still have USB 2.0 ports instead of all USB 3.0, especially when there's USB 3.0 Gen

409
00:23:11,200 --> 00:23:12,200
1 and Gen 2.

410
00:23:12,200 --> 00:23:13,200
Right?

411
00:23:13,200 --> 00:23:14,680
Mmm, that's a good point.

412
00:23:14,680 --> 00:23:17,880
Having said that, the trackpad is good.

413
00:23:17,880 --> 00:23:18,880
What do you mean by good?

414
00:23:18,880 --> 00:23:21,560
And you're someone who's used the top-of-the-line trackpad.

415
00:23:21,560 --> 00:23:22,560
Yeah.

416
00:23:22,560 --> 00:23:25,440
I would say it is better comparing it to the Galago.

417
00:23:25,440 --> 00:23:29,160
It's about the same if not better than the Galago.

418
00:23:29,160 --> 00:23:32,960
It's definitely better than, like, I have an HP Spectre that we use for demoing.

419
00:23:32,960 --> 00:23:35,020
It's better than the Spectre.

420
00:23:35,020 --> 00:23:39,240
It's maybe slightly worse than a MacBook Pro, if not on par.

421
00:23:39,240 --> 00:23:40,240
Wow, really?

422
00:23:40,240 --> 00:23:41,240
Yeah.

423
00:23:41,240 --> 00:23:42,240
That is pretty good.

424
00:23:42,240 --> 00:23:43,240
It's not bad.

425
00:23:43,240 --> 00:23:46,640
So the only, and in fact, I didn't even put this in the review, the only issues I have

426
00:23:46,640 --> 00:23:51,280
is that, like, YouTube screen tears a little bit on Firefox, but I think that's a Firefox

427
00:23:51,280 --> 00:23:52,840
issue because it happens on Mac too.

428
00:23:52,840 --> 00:23:56,600
Oh, yeah, probably just, like, your hardware acceleration or something about the way that

429
00:23:56,600 --> 00:23:57,600
you're rendering it is not quite right.

430
00:23:57,600 --> 00:23:59,440
There's some weird in code, right?

431
00:23:59,440 --> 00:24:06,840
You know, if you really want a Linux-installed laptop, I would recommend this.

432
00:24:06,840 --> 00:24:13,200
I have not tested the newest generation of XPS 13, but I have tested the most recent

433
00:24:13,200 --> 00:24:20,120
Galago from System76, and I would say if you're in the market for a Galago, if you intolerate

434
00:24:20,120 --> 00:24:29,200
a 15-inch screen, the Darter Pro is significantly better, the battery life alone makes it worth

435
00:24:29,200 --> 00:24:30,200
the bigger screen.

436
00:24:30,200 --> 00:24:33,480
Oh, yeah, that makes sense.

437
00:24:33,480 --> 00:24:34,480
What about the weight?

438
00:24:34,480 --> 00:24:35,480
How portable is this guy?

439
00:24:35,480 --> 00:24:36,480
Oh, you're looking at 3.5 pounds.

440
00:24:36,480 --> 00:24:37,480
Okay, that's not too bad.

441
00:24:37,480 --> 00:24:38,480
It's not bad.

442
00:24:38,480 --> 00:24:39,480
I can handle that, yeah.

443
00:24:39,480 --> 00:24:40,480
Yeah, yeah.

444
00:24:40,480 --> 00:24:48,760
I've only had some pretty beefy machines before, and it was stressing my back, so that's something

445
00:24:48,760 --> 00:24:49,760
I think about these days.

446
00:24:49,760 --> 00:24:50,760
Yeah, no, I like it.

447
00:24:50,760 --> 00:24:53,560
I mean, it's not like an Oryx Pro or anything like that.

448
00:24:53,560 --> 00:24:54,560
Exactly.

449
00:24:54,560 --> 00:24:55,560
Yeah.

450
00:24:55,560 --> 00:24:57,680
We also have one of those at TMB here.

451
00:24:57,680 --> 00:24:59,160
That's a beefy machine.

452
00:24:59,160 --> 00:25:05,600
No, it's a good machine, and mine is spec'd up, so the battery life, quotes I'm giving

453
00:25:05,600 --> 00:25:13,560
in the article, are five to seven hours with an i7 and upgraded to 16 gigs of RAMs and

454
00:25:13,560 --> 00:25:15,080
an NVMe drive.

455
00:25:15,080 --> 00:25:21,040
I would also recommend, if you're going to buy one of these, do not skimp on the NVMe

456
00:25:21,040 --> 00:25:22,040
drive.

457
00:25:22,040 --> 00:25:26,800
It's a huge performance increase, especially if you're a dev and you're doing a lot of

458
00:25:26,800 --> 00:25:28,360
compiling and linking.

459
00:25:28,360 --> 00:25:31,080
NVMe is just such a blessing.

460
00:25:31,080 --> 00:25:32,080
It really is.

461
00:25:32,080 --> 00:25:35,760
We thought SSD was good, and now it's just the whole new world, and it feels expensive.

462
00:25:35,760 --> 00:25:38,480
I've thought about that, too, when looking at laptops, but you're right.

463
00:25:38,480 --> 00:25:43,160
If you at all care about wait time and doing a lot of file stuff, especially building programs

464
00:25:43,160 --> 00:25:45,400
can often be that, don't skimp.

465
00:25:45,400 --> 00:25:46,400
Sure.

466
00:25:46,400 --> 00:25:47,400
Don't skimp on that.

467
00:25:47,400 --> 00:25:50,480
I do have to ask, is this review in Pop!

468
00:25:50,480 --> 00:25:52,680
OS, or have you installed something else on there?

469
00:25:52,680 --> 00:25:53,680
Yeah, it's Pop!

470
00:25:53,680 --> 00:25:54,680
OS 18.10.

471
00:25:54,680 --> 00:25:55,680
Nice.

472
00:25:55,680 --> 00:25:58,840
It seems like you are actually really enjoying Pop!

473
00:25:58,840 --> 00:25:59,840
OS.

474
00:25:59,840 --> 00:26:00,840
I am.

475
00:26:00,840 --> 00:26:01,840
The Thaleo is on Pop!

476
00:26:01,840 --> 00:26:02,840
18.10.

477
00:26:02,840 --> 00:26:06,280
The Darter is on 18.10.

478
00:26:06,280 --> 00:26:07,600
I love elementary.

479
00:26:07,600 --> 00:26:08,600
I love Pop!

480
00:26:08,600 --> 00:26:11,360
I've ended up landing on Pop!

481
00:26:11,360 --> 00:26:12,360
What is it about it?

482
00:26:12,360 --> 00:26:22,600
You know what, I like some of the easy stuff for installing TensorFlow, but more importantly,

483
00:26:22,600 --> 00:26:25,240
I just don't want to deal with drivers.

484
00:26:25,240 --> 00:26:31,080
This is such a stupid reason, but if elementary was an option from System76, I might have

485
00:26:31,080 --> 00:26:38,320
done that, but I really don't want to go and pull drivers and compile AMD drivers or whatever.

486
00:26:38,320 --> 00:26:40,240
I'm thinking of the Thaleo in particular here.

487
00:26:40,240 --> 00:26:45,440
I want it to be pre-installed and pre-configured and done for me.

488
00:26:45,440 --> 00:26:50,800
I am the Mac turned Linux guy, but I want it to be like a Mac, where I open the box

489
00:26:50,800 --> 00:26:55,480
and I don't mind installing my tool chain, but I don't want to have to fiddle with drivers.

490
00:26:55,480 --> 00:26:58,560
You want an operating system that's already built for and well-supported on the hardware

491
00:26:58,560 --> 00:27:01,840
that you're running and not having to futz with things like screen tearing.

492
00:27:01,840 --> 00:27:02,840
Exactly.

493
00:27:02,840 --> 00:27:06,000
That makes a lot of sense.

494
00:27:06,000 --> 00:27:15,760
Do you think, if you had a non-System76 rig, would you be tempted to install POP on that?

495
00:27:15,760 --> 00:27:20,800
We have a flight simulation machine here, which is an Optiplex 7050, which was running

496
00:27:20,800 --> 00:27:25,080
both POP and later elementary.

497
00:27:25,080 --> 00:27:26,080
It was fine.

498
00:27:26,080 --> 00:27:30,640
I just had to pull down the AMD driver and set it up.

499
00:27:30,640 --> 00:27:36,360
I do think, though, I'm going to stick with POP, just for convenience.

500
00:27:36,360 --> 00:27:37,360
Yeah.

501
00:27:37,360 --> 00:27:44,480
Once you find something that works, why change it, especially when you've got code to write?

502
00:27:44,480 --> 00:27:49,960
Speaking of unfortunate changes, we started chatting, getting ready for the show today,

503
00:27:49,960 --> 00:27:56,440
talking through things, and I came to realize that something had gone wrong in your morning.

504
00:27:56,440 --> 00:28:05,480
You were clearly stressed over some things, and it turned out to be our old friend, Googs.

505
00:28:05,480 --> 00:28:09,720
Back in the days when the gods were petty and cruel and Hercules roamed the earth, played

506
00:28:09,720 --> 00:28:13,800
by Kevin Sorbo, a deep reference.

507
00:28:13,800 --> 00:28:14,800
There was a social network.

508
00:28:14,800 --> 00:28:15,880
I don't know, Wes, are you familiar?

509
00:28:15,880 --> 00:28:18,760
There was a social network called Google Plus.

510
00:28:18,760 --> 00:28:21,360
Oh, yeah, right.

511
00:28:21,360 --> 00:28:26,560
It was sort of like Facebook, except no one used it.

512
00:28:26,560 --> 00:28:27,560
I used it.

513
00:28:27,560 --> 00:28:28,560
Geez, man.

514
00:28:28,560 --> 00:28:31,440
No, it did seem like it had a tech following, and that was about it.

515
00:28:31,440 --> 00:28:34,040
It was really popular with the hashtag Linux.

516
00:28:34,040 --> 00:28:35,040
I just want to say that.

517
00:28:35,040 --> 00:28:38,080
It was real popular.

518
00:28:38,080 --> 00:28:44,260
Through that Google Plus, there was an API that allowed authentication, even for internal

519
00:28:44,260 --> 00:28:46,880
Google emails, like Google for Work.

520
00:28:46,880 --> 00:28:47,880
Oh, really?

521
00:28:47,880 --> 00:28:51,680
It went through, somehow it was tied to Google Plus?

522
00:28:51,680 --> 00:28:53,880
Google Plus, yeah.

523
00:28:53,880 --> 00:29:01,760
But then the gods were cruel on March 7th, because at midnight March 7th, the Google

524
00:29:01,760 --> 00:29:05,360
Plus API went to Hades.

525
00:29:05,360 --> 00:29:07,360
Yeah, right.

526
00:29:07,360 --> 00:29:11,840
As they say, legacy Google APIs have been shut down as of March 7th, 2019.

527
00:29:11,840 --> 00:29:14,640
So I did not know this.

528
00:29:14,640 --> 00:29:19,480
I had to find this out the hard way, and they did a staggered shutdown.

529
00:29:19,480 --> 00:29:21,800
So some things wouldn't work, but some things would.

530
00:29:21,800 --> 00:29:23,560
I was scrambling.

531
00:29:23,560 --> 00:29:28,620
Now we predominantly work in Rails right now for this kind of thing.

532
00:29:28,620 --> 00:29:33,240
So it turned out that we're using a gem called OmniAuth.

533
00:29:33,240 --> 00:29:39,080
All we had to do after checking it out for a while was upgrade the version of the OmniAuth

534
00:29:39,080 --> 00:29:45,840
gem, change no code, just to use the non-Google Plus version of the Google Auth API.

535
00:29:45,840 --> 00:29:47,800
So this is kind of a PSA.

536
00:29:47,800 --> 00:29:53,080
If you're having authentication problems, and you are running OmniAuth, and your authentication

537
00:29:53,080 --> 00:29:57,160
problems are with Google, make sure you're running at least version, I think it's like

538
00:29:57,160 --> 00:30:00,420
6 or 0.6, however they do the versioning.

539
00:30:00,420 --> 00:30:04,400
Anything with a 5 or 0.5 is not going to work for you.

540
00:30:04,400 --> 00:30:05,400
Wow.

541
00:30:05,400 --> 00:30:10,640
You know, that is a dependency success story that you don't always think about, because

542
00:30:10,640 --> 00:30:14,560
that could have been a really painful process, requiring you to change dependencies or rewrite

543
00:30:14,560 --> 00:30:15,560
how some of your internal applications.

544
00:30:15,560 --> 00:30:17,440
Rewrite the authentication scheme.

545
00:30:17,440 --> 00:30:18,440
That's not simple.

546
00:30:18,440 --> 00:30:19,440
Yeah.

547
00:30:19,440 --> 00:30:23,360
And then I, you know, I have to say I was the hero of the story.

548
00:30:23,360 --> 00:30:27,480
My guy was crying, I would rewrite the dependency, but I'm like, I don't know about this.

549
00:30:27,480 --> 00:30:28,480
It's Ruby.

550
00:30:28,480 --> 00:30:30,640
Let's go find the gems.

551
00:30:30,640 --> 00:30:32,960
You should believe me.

552
00:30:32,960 --> 00:30:38,800
And sure enough, right there in the build notes for OmniAuth 6 was, oh, no longer dependent

553
00:30:38,800 --> 00:30:43,760
on the Google Plus API, now using Google authentication, and it's a clean upgrade.

554
00:30:43,760 --> 00:30:45,440
So that's a code radio success story.

555
00:30:45,440 --> 00:30:46,440
Give me my bill.

556
00:30:46,440 --> 00:30:47,440
Yes.

557
00:30:47,440 --> 00:30:50,720
Yeah, it is.

558
00:30:50,720 --> 00:30:51,720
I was about to say that.

559
00:30:51,720 --> 00:30:52,720
Like, it's great.

560
00:30:52,720 --> 00:30:54,280
It looks like back in January, they added it.

561
00:30:54,280 --> 00:30:55,560
It's in the change log and everything.

562
00:30:55,560 --> 00:30:58,200
So OmniAuth is a good job.

563
00:30:58,200 --> 00:31:01,140
Yeah, and we'll have links in the show notes for that.

564
00:31:01,140 --> 00:31:04,920
And I'm sure there's similar things if you're doing Django or Java, right, there's similar

565
00:31:04,920 --> 00:31:05,920
dependencies.

566
00:31:05,920 --> 00:31:10,920
I will also say just from having to do a little bit of it in the past, some about the way

567
00:31:10,920 --> 00:31:13,880
there's a lot of stuff Google does pretty well.

568
00:31:13,880 --> 00:31:19,960
But there's some about some of their APIs that I just find really unpleasant.

569
00:31:19,960 --> 00:31:24,760
You know, I always felt it was because originally they were a Java shop, right, like, oh, that

570
00:31:24,760 --> 00:31:25,760
could be it.

571
00:31:25,760 --> 00:31:26,760
Yeah.

572
00:31:26,760 --> 00:31:27,760
They did like super verbose.

573
00:31:27,760 --> 00:31:28,760
Yeah.

574
00:31:28,760 --> 00:31:31,320
And, you know, it's fine.

575
00:31:31,320 --> 00:31:35,840
But it's great that you can have a gem that you can rely on and hopefully abstract that

576
00:31:35,840 --> 00:31:36,840
thing.

577
00:31:36,840 --> 00:31:37,840
Yeah.

578
00:31:37,840 --> 00:31:43,200
I mean, that's one of the challenges of Rails, though, managing your gems.

579
00:31:43,200 --> 00:31:49,080
I mean, I guess it's a challenge even in like.NET and stuff because, you know, obviously

580
00:31:49,080 --> 00:31:54,080
you have new gets and it's always I mean, I'm curious how you approach this.

581
00:31:54,080 --> 00:31:57,440
It's always a balancing act, though, right, between your dependencies and your own code.

582
00:31:57,440 --> 00:31:58,440
Yeah, right.

583
00:31:58,440 --> 00:32:01,920
And these days, it's pretty hard unless you're doing something really low level or brand

584
00:32:01,920 --> 00:32:02,920
new.

585
00:32:02,920 --> 00:32:05,120
You're just going to have a lot of dependencies because half the stuff we do is basically

586
00:32:05,120 --> 00:32:07,560
tying different systems together, right?

587
00:32:07,560 --> 00:32:11,320
Yeah, basically modern internet connected age.

588
00:32:11,320 --> 00:32:12,320
Yeah.

589
00:32:12,320 --> 00:32:17,560
And so it is I think that's one thing that can take new programmers a while to learn,

590
00:32:17,560 --> 00:32:22,160
especially in maybe a more complicated environment is just that, yes, dependencies are great

591
00:32:22,160 --> 00:32:25,160
and there's really great libraries that can do a lot of the work for you or really simplify

592
00:32:25,160 --> 00:32:28,920
how you think about things, but you do need to actually do a little research before you

593
00:32:28,920 --> 00:32:29,920
go and add it.

594
00:32:29,920 --> 00:32:32,440
It's one thing to go try it out in a shell really quick or something.

595
00:32:32,440 --> 00:32:35,520
But if you're really going to start adding it into your build system and start depending

596
00:32:35,520 --> 00:32:39,620
on it, do a little research, dig into the code, see if you can understand it.

597
00:32:39,620 --> 00:32:43,080
Maybe try to estimate like, what would it take to fix a bug in this if I really had

598
00:32:43,080 --> 00:32:44,080
to?

599
00:32:44,080 --> 00:32:45,080
What's the community like?

600
00:32:45,080 --> 00:32:46,080
Are they receptive?

601
00:32:46,080 --> 00:32:47,080
Are they harsh?

602
00:32:47,080 --> 00:32:49,400
Do they not take feedback or criticism or pull requests?

603
00:32:49,400 --> 00:32:53,640
Those are all just good things to research and figure out.

604
00:32:53,640 --> 00:32:55,080
I agree.

605
00:32:55,080 --> 00:32:59,560
Just to pull it back, one thing I do really like about the Clojure ecosystem is because

606
00:32:59,560 --> 00:33:06,160
it is so high level and often does rely on other things from Java or other JVM ecosystem

607
00:33:06,160 --> 00:33:11,280
libraries, I do find that I can almost always read through the code base.

608
00:33:11,280 --> 00:33:15,120
Now, I might not read every little bit, but I found it very refreshing.

609
00:33:15,120 --> 00:33:19,880
Unlike say Java, I can usually find the parts of the code that I actually need to care about.

610
00:33:19,880 --> 00:33:23,480
Even if I'm new to the library, I can at least skim through it and get like, okay, it might

611
00:33:23,480 --> 00:33:26,160
be one or 2,000 lines of code, perhaps.

612
00:33:26,160 --> 00:33:27,800
But that's actually not that big.

613
00:33:27,800 --> 00:33:30,960
And if I had to, I could wrap my head around it.

614
00:33:30,960 --> 00:33:35,520
Yeah, that makes sense, right?

615
00:33:35,520 --> 00:33:40,600
Unfortunately, well, you're still going to need a tool to do that.

616
00:33:40,600 --> 00:33:45,120
And that is where we go to our next topic, which is our tool of the week.

617
00:33:45,120 --> 00:33:47,520
I do have to start out right out of the gate.

618
00:33:47,520 --> 00:33:50,000
They stole what should be our domain name.

619
00:33:50,000 --> 00:33:52,480
Did you notice that, Mike?

620
00:33:52,480 --> 00:33:53,480
I did not.

621
00:33:53,480 --> 00:33:54,480
What did they steal?

622
00:33:54,480 --> 00:33:55,480
Yeah.

623
00:33:55,480 --> 00:33:56,480
Well, they got Coder.

624
00:33:56,480 --> 00:33:57,480
Codeserver.

625
00:33:57,480 --> 00:34:01,840
Well, but if you see the company behind it here, they've got coder.com, which, oh, man,

626
00:34:01,840 --> 00:34:02,840
I mean, coder.show.

627
00:34:02,840 --> 00:34:03,840
Coder.show is great.

628
00:34:03,840 --> 00:34:04,840
Keep going to coder.show.

629
00:34:04,840 --> 00:34:09,520
But dang, if only they hadn't taken it from us.

630
00:34:09,520 --> 00:34:12,720
Oh, why are we featuring this again?

631
00:34:12,720 --> 00:34:14,080
I know, right?

632
00:34:14,080 --> 00:34:17,920
I just thought it was an interesting little case study of tooling, and I wanted your perspective

633
00:34:17,920 --> 00:34:18,920
on it.

634
00:34:18,920 --> 00:34:22,520
So, Codeserver, it's open source.

635
00:34:22,520 --> 00:34:28,120
It's VS code running on a remote server, accessible through the browser.

636
00:34:28,120 --> 00:34:30,200
What's nice is they've also got it all broken out.

637
00:34:30,200 --> 00:34:33,360
So of course, if you want to, you can go pay for this as a service.

638
00:34:33,360 --> 00:34:36,700
They'll run all the servers for you, provide you account details, you log in, use your

639
00:34:36,700 --> 00:34:38,400
favorite IDE.

640
00:34:38,400 --> 00:34:42,200
But they have a pretty easy to use little Docker container too.

641
00:34:42,200 --> 00:34:46,680
So if you're more like me and you're like, well, I got way too many servers running all

642
00:34:46,680 --> 00:34:49,360
the time, you can just pop this over there.

643
00:34:49,360 --> 00:34:53,680
So maybe you're developing on a Chromebook or a tablet, you don't have to worry about

644
00:34:53,680 --> 00:34:56,840
trying to get VS code installed on that environment.

645
00:34:56,840 --> 00:35:00,480
You can just use your web browser.

646
00:35:00,480 --> 00:35:01,480
That's interesting.

647
00:35:01,480 --> 00:35:04,880
It reminds me of a few years ago, we featured Cloud9.

648
00:35:04,880 --> 00:35:08,280
Yep, and that's exactly what came to my mind.

649
00:35:08,280 --> 00:35:09,840
That's exactly what came to my mind.

650
00:35:09,840 --> 00:35:13,920
AWS bought them, right?

651
00:35:13,920 --> 00:35:14,920
I think so, right?

652
00:35:14,920 --> 00:35:15,920
It was Amazon.

653
00:35:15,920 --> 00:35:20,600
And so it's clearly like, quote, unquote, cloud workspaces, excuse me while I go vomit

654
00:35:20,600 --> 00:35:21,920
really quick.

655
00:35:21,920 --> 00:35:22,920
It seems to be a thing.

656
00:35:22,920 --> 00:35:25,680
Now, it's not an area I really need to use.

657
00:35:25,680 --> 00:35:30,680
And that's just probably because I have fairly simple tooling and mostly just run on Linux.

658
00:35:30,680 --> 00:35:35,840
But I'm curious as someone who was just talking about renewed faith in the iPad, is this something

659
00:35:35,840 --> 00:35:38,760
that you have a use case for?

660
00:35:38,760 --> 00:35:45,600
You know, it could be good, honestly, I like this idea more for teaching than anything

661
00:35:45,600 --> 00:35:46,600
else.

662
00:35:46,600 --> 00:35:47,600
Right?

663
00:35:47,600 --> 00:35:48,600
Just like I like Cloud9.

664
00:35:48,600 --> 00:36:00,760
I think like cloud IDEs or cloud text editors are make a lot of sense for sort of an educational

665
00:36:00,760 --> 00:36:04,960
environment we're trying to teach like dev concepts, right?

666
00:36:04,960 --> 00:36:06,760
Does that make sense at all, Wes?

667
00:36:06,760 --> 00:36:07,760
Right, right.

668
00:36:07,760 --> 00:36:10,520
So you're trying to get people started programming.

669
00:36:10,520 --> 00:36:14,480
It can be pretty rough if you have to go through all the hurdles of carefully setting up a

670
00:36:14,480 --> 00:36:15,480
development environment.

671
00:36:15,480 --> 00:36:18,880
I mean, you can you can see that even in for experienced developers, right?

672
00:36:18,880 --> 00:36:22,020
You just often there's a lot going on, especially if you're picking up a code base.

673
00:36:22,020 --> 00:36:25,220
So I can see this right instead of having to go futz with this, you just point them

674
00:36:25,220 --> 00:36:29,440
give them a login to whatever system, tell them to have at it and they can explore play

675
00:36:29,440 --> 00:36:33,360
with use all the neat helpful features of VS code without having to deal with any of

676
00:36:33,360 --> 00:36:34,920
the complications of running it.

677
00:36:34,920 --> 00:36:35,920
Exactly, exactly.

678
00:36:35,920 --> 00:36:40,360
I do however, think on the iPad, you'll definitely need online accents.

679
00:36:40,360 --> 00:36:41,600
Yeah, right.

680
00:36:41,600 --> 00:36:42,600
Totally.

681
00:36:42,600 --> 00:36:45,800
I guess I suppose if you were running it on your local network, that would be one advantage

682
00:36:45,800 --> 00:36:48,620
of the open source nature of this.

683
00:36:48,620 --> 00:36:54,280
That would be I still feel like the way native iOS iPad app that is a text editor would be

684
00:36:54,280 --> 00:36:57,160
pretty valuable at least to me.

685
00:36:57,160 --> 00:37:01,040
Yeah, okay, that's true.

686
00:37:01,040 --> 00:37:04,560
So some of the advantages they listed here are, you know, Chromebook, tablet, tablet,

687
00:37:04,560 --> 00:37:07,880
whatever or if you're like on a Windows or Mac, you can use this and know that it's already

688
00:37:07,880 --> 00:37:11,120
talking to stuff on the back end of running in Linux.

689
00:37:11,120 --> 00:37:13,400
And of course, you might be able to preserve battery life.

690
00:37:13,400 --> 00:37:16,680
One thing they mentioned here is, right, all of the intensive stuff runs on the server

691
00:37:16,680 --> 00:37:22,280
and because VS code is electron, well, if it's just a tab in a browser, that's one less

692
00:37:22,280 --> 00:37:24,360
Chrome instance that's running.

693
00:37:24,360 --> 00:37:25,360
Right.

694
00:37:25,360 --> 00:37:26,360
That's true.

695
00:37:26,360 --> 00:37:32,500
I just had to note the reason this works so well and the reason that they can basically

696
00:37:32,500 --> 00:37:37,120
just fork VS code and you know, kind of patch it up to make it run in a server environment

697
00:37:37,120 --> 00:37:39,840
is because electron uses web technologies, right?

698
00:37:39,840 --> 00:37:43,560
Like we have a common base of this stuff and while it kind of sucks in some ways, especially

699
00:37:43,560 --> 00:37:48,440
the memory overhead, there are a lot of advantages to the speed of things because you have one

700
00:37:48,440 --> 00:37:49,440
toolset.

701
00:37:49,440 --> 00:37:57,320
I don't know, I think that like somehow web technologies are eventually going to take

702
00:37:57,320 --> 00:37:58,320
over.

703
00:37:58,320 --> 00:38:01,600
But I'm not sure that on the iPad in particular we're there yet.

704
00:38:01,600 --> 00:38:02,840
Yeah, that's true.

705
00:38:02,840 --> 00:38:08,000
And iOS is obviously a platform with really high expectations both by Apple and end users.

706
00:38:08,000 --> 00:38:13,040
So if you're going to do it, like you probably want to make sure it's going to be kick ass.

707
00:38:13,040 --> 00:38:18,360
Yeah, you really need it to be super responsive and kind of follow I think the Apple like

708
00:38:18,360 --> 00:38:20,640
command structure, right?

709
00:38:20,640 --> 00:38:24,880
Just even like keyboard shortcuts because many people using an iPad Pro are using those

710
00:38:24,880 --> 00:38:27,720
Apple external keyboards.

711
00:38:27,720 --> 00:38:29,280
So but yeah, I think this is great.

712
00:38:29,280 --> 00:38:33,920
I mean, I would, you know, I have a little brother West who's 11 and he wants to learn

713
00:38:33,920 --> 00:38:34,920
some coding.

714
00:38:34,920 --> 00:38:39,920
So this is the kind of thing I would definitely use with him.

715
00:38:39,920 --> 00:38:41,240
That makes a lot of sense.

716
00:38:41,240 --> 00:38:42,240
Well, thank you, Mike.

717
00:38:42,240 --> 00:38:43,240
I appreciate that.

718
00:38:43,240 --> 00:38:44,240
I've played with a little bit.

719
00:38:44,240 --> 00:38:45,840
I mean, I just I'm not I'm not going to use it anymore.

720
00:38:45,840 --> 00:38:48,160
But perhaps the audience will find it useful.

721
00:38:48,160 --> 00:38:49,160
That's what we hope.

722
00:38:49,160 --> 00:38:53,360
And you can give us feedback about it if you'd like to just head on over to coder.show.

723
00:38:53,360 --> 00:38:55,960
You can also find all the ways to subscribe.

724
00:38:55,960 --> 00:38:58,040
We're on basically all the platforms you want.

725
00:38:58,040 --> 00:39:01,560
We even just got a plain old RSS feed if you want to do it old school or just you know,

726
00:39:01,560 --> 00:39:05,360
download an MP3 like a maniac.

727
00:39:05,360 --> 00:39:10,200
I don't know why you do that, but but but you could you could.

728
00:39:10,200 --> 00:39:13,520
And of course, you can find all the other wonderful Jupiter broadcasting shows over

729
00:39:13,520 --> 00:39:18,960
at Jupiter broadcasting dot com dot com dot com.

730
00:39:18,960 --> 00:39:22,440
And if you just want more, you can't wait till the very next episode.

731
00:39:22,440 --> 00:39:23,640
Well, we're both on Twitter.

732
00:39:23,640 --> 00:39:29,580
I'm at Westpane and you're at Dumanuco.

733
00:39:29,580 --> 00:39:33,680
You can also find the network there at Jupiter Signal.

734
00:39:33,680 --> 00:39:37,400
If you want to hear a little bit more discussion of the recent JB trip down to scale, well,

735
00:39:37,400 --> 00:39:39,540
tune into the next Linux Unplugged.

736
00:39:39,540 --> 00:39:42,400
I'm sure we'll be talking about it there.

737
00:39:42,400 --> 00:39:58,680
Thank you all for joining us today and come back next week.


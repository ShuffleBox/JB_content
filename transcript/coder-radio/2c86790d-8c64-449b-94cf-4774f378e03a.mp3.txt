This is Kota Radio, episode 379, for September 14th, 2020.
Hello, friends, and welcome to Kota Radio,
Jupiter Broadcasting's weekly talk show
taking a pragmatic look at the art
and business of software development
and the world of technology.
This episode is brought to you by a Cloud Guru.
Tech moves fast, and so does ACG.
Their courses and labs are always online
and obsessively updated.
Plus, they curate all the news on AWS,
Kubernetes, Linux, and more.
Stay up to date at acloudguru.com.
My name is Chris, and joining me triumphantly
is my co-host, Mr. Dominic.
Hello, Mike.
Hello, Chris.
I have ascended from my aquatic grave.
I come to you with Windows Azure.
I'm sorry, Microsoft Azure.
I'm sorry, Just Azure.
Dammit, stop changing the name.
Did you get the barnacles washed off?
I did, and I actually, while I was down there,
I found my old purple HTC Windows Phone 8.
Hey, you know, those were great back in the day, man.
You know, that's going to take over the world.
You just wait.
How are you?
How is Florida?
How is the life?
How is the Dominic household?
All of those things.
Well, Florida is 4,000 degrees,
but not nearly as hot, horribly,
as the Pacific Northwest, of course, in California.
That's a shame.
I'm tired.
You know, I tried to code into the night last night
something I have not been able to do for several years now
without horrible repercussions in the morning.
Yeah.
Yeah.
I have also fought that one.
Also because sometimes now, just more often than not,
I can't sleep.
Yep.
That does stink because it does put my whole day
kind of like in a funk.
Like, I'm just not as effective.
Today, I actually tried to avoid that.
I actually stayed at the studio last night
because the RV is way, way, way far away,
like two hours or something far away.
So I stayed here thinking,
well, I'll save myself the exhaustion of driving
for like four hours that day,
and I'll just crash here,
and I'll get a good night's sleep,
and then I'll hit the ground running,
and I'll take off in the afternoon.
Of course, the reality is I didn't sleep for like a wink.
Like, maybe I got an hour or two, maybe, you know?
It's just horrible.
But the day goes on,
and I just deploy my caffeine strategy,
which is caffeinate hard, caffeinate often.
And the real key to my caffeine success
is I catch it before the last dosage is wearing off,
and you have to consider digestion time.
So you got to know what your own digestion time is
so that way you can intake more caffeine
before the last take wears off.
And if you don't get it right, you know, it can be too much.
That is true, and it's also, so I started with coffee,
which I haven't been drinking, so that's great.
But I'm back on the coffee wagon, so sadness.
Woo-woo!
Oh, I don't know.
There's something nice about it, too, though.
Well, you know, well, for me making coffee,
it would be easy to like turn on a coffee pot,
but no, we can't do that.
We have to boil just enough water in a tea kettle
and then get a single-serve French press
as we measure out as though we were dealing
with nuclear-physical material the exact amount of beans,
which of course had to be freshly ground.
Right, right, which is loud and dirty and a mess,
and that thing's always a pain in the butt to clean up.
Then in my case, the four-year-old turns and yells at me
because, of course, the grinder is louder
than Mickey Mouse Clubhouse.
He says, Daddy, what are you doing?
Right.
What's the matter with you?
What's wrong with you?
That's sort of how life is in my place, too,
just about it.
It sounds better.
How are you?
How is everybody?
Just, you know, kind of trying to avoid the smoke
unsuccessfully.
There's literally absolutely nowhere to go.
I'd have to probably go to Montana.
I mean, I'm not sure how far away, how far east
I'd have to go to get away from it at this point.
It's so thick, and it smells like wood smoke everywhere,
like my clothes now smell like wood smoke,
and yet it's also kind of cool in a way, right?
Because it's different, and it gives me a good excuse
to stay inside and be on my computer.
Yes, because you need lots of convincing for that.
Right.
It doesn't take much, and you know what?
They say stay inside.
It's unhealthy air quality, so I just follow an advice,
you know?
You are doing the prudent, responsible thing.
So we had a couple bits of feedback.
Jordan wrote in.
He went over to coder.show slash contact,
and he says, hi, Chris West in pain, AKA Michael.
I'm a full-time C++ developer at a small company
where I do cross-platform application development
and maintain a massive legacy code base.
I can feel the weight of that sentence.
Oh, man.
Jordan, I feel your pain there.
He says, anyways, I wanted to throw in my two cents
on your latest conversation around C++.
C++ is one of the hardest programming languages to learn.
Don't forget about templating in C++,
which is particularly another programming language altogether.
While many people in the C++ community
are trying hard to make C++ more accessible and safer,
things like undefined behavior, defaults,
and antiquated functionality within the standard library
make it an uphill battle.
And some fixes would require breaking ABI,
something the standards committee cannot agree on doing
even 10 years down the road.
Now, there are nice benefits to the standardization process
and improvements in C++ with each new standard,
not fast enough nor ambitious enough to solve
the fundamental issues, though, many developers face
on even a day-to-day basis, such as package,
dependency management, memory management,
and code correctness.
Many have tried and failed to make C++ better from the inside,
which I think is why we have so many spin-offs
that are meant to be better replacements for C++.
I hope to see Rust and Go continue to replace C++ code,
not only for my sanity, but because it's also just more fun
to develop in Rust and Go.
They let you really focus on the problem you're trying to solve
instead of a bunch of more problems
you now need to solve as well.
That is a decisive take from Jordan.
Yeah. Decisive.
And I think we are seeing that, right?
I think we're seeing particularly Rust is gaining a lot of traction,
sort of, in a way.
Yeah.
I don't know. It's a little weird.
But C++ is a beast with a lot of legacy.
There's no doubt.
Yeah.
The other conversation that came up in the community was,
well, what about when we're talking about operating system components,
like in the launch of Amazon Bottle Rocket?
You know, this is a sign that sometimes algorithms work,
because on YouTube, a video came up that just seemed like it was
a perfect response to the conversation starting our community about,
well, maybe we should all adopt Rust
for lower language operating system components.
And I found this audio of Linus,
who was asked a similar question at an event,
and this was his response about why he still prefers C.
So I have to say, I'm kind of old-fashioned,
and I'm really interested.
The reason I got into Linux or operating systems in the first place
was I really love hardware.
I love tinkering with hardware.
Not in the sense that I'm a hardware person.
Giving me a soldering iron is a bad idea.
But I like interacting with hardware from a software perspective.
And I have yet to see a language
that comes even close to C in that respect.
It's not just that you can use C to generate good code for hardware.
It's that if you think like a computer,
writing C actually makes sense.
And I think the reason it works that way is
the people who designed C
designed it at a time when compilers had to be simple
and the language had to be kind of geared towards what the output was.
So when I read C,
I know what the assembly language will look like.
And that is something I care about.
Not that I feel like Linus is wrong.
It's just that he's not 100% right anymore either.
And it's a bit of an old school take, but still a valid one.
I always hate this argument because no matter what,
there's no good way to capture all the nuance in a 45 second,
one minute response, right?
Taking a step back, right?
There's the question of like the low levelness
and the memory management stuff.
And there's the question of C++ is just like super old, right?
And it's got like a lot of like the ABI stability comment
that Jordan mentioned is actually kind of a big deal.
Although it's one of those things
that if you're coming from a different environment
or frankly, if you're not insane,
and although if you listen to coding podcasts,
you're probably pretty deep into it.
So maybe you are the set who actually like understands what that means.
Quick detour, right?
Committing to ABI stability,
it was like a huge problem for Swift
because it meant that you basically couldn't change
a large percentage of the foundational stuff in the language,
which is why Swift did not do it for a long time.
In fact, I don't think they have done it yet,
but I am not super up to date on the Swift community.
I can't disagree with Linus psychologically,
so I'm going to say he makes great points.
But I've been kind of tooling around with C++ the last few weeks.
There are reasons I do not recommend it to clients, right?
There are reasons I have a pretty substantial client
who one of their projects when they have time and budget
is always like we are wanting to move our C++ stuff into.NET Core.
One, because you can do all kinds of fun stuff
where you call the C++, right?
You can either make it a binary and call into it
or thank God for FFI in most cases.
It's just a hard language to work with.
And like the challenge I've very recently had,
people who follow me on Twitter might have noticed
I've been doing like some weird game dev thing.
Not my C++ and your C++ are going to be very different, very likely, right?
The style, like I do not use templating
because I think it's crazy evil magic.
This is a good point.
Right.
And like I write C++ from the perspective of I wish it was Objective-C,
which is insane because they're like totally different language philosophies, right?
Well, I mean, I also write, you know, like a check and fill out IRS forms with brackets.
I get them back all the time.
They're like, sir, sir, just give it up, okay?
That's beautiful.
It really is sad.
I mean, Jordan, more power to you, man.
Yeah, right.
Every day, large code base.
There's got to be some deep legacy demons in that baby.
Yeah.
Massive legacy code base is what he said.
Somebody suggests that as a title.
That's just a monster.
Eldritch code base over there, right?
Steve T. said, great episode, but I had a question.
What really is a quote unquote safe language?
Which, of course, is a huge rabbit hole.
But I guess a fair question.
We didn't really define it when we were talking about Rust
and what makes it valuable.
You know, probably better to link to the explanation in the show notes,
but there's several things that make a language safe.
You have memory safety, obviously, which is a big one
because that prevents things like buffer overflows,
no pointer differences, lots of little things that have got us in trouble
for years and years are generally caught by languages like Java, too.
Not just Rust.
It's not just a Rust thing, but Rust is one of the newer, hotter things
that seems to be offering it.
I'll link to Michael Hicks' list of several different definitions
of memory safety because there are several definitions of it.
And that's probably a pretty good starting point for people
who are kind of glancing that there's something that people keep dropping
about Rust, something people like about it,
something about being a safe language.
Check out the links to the show notes.
Yeah, everything you said is super correct, right?
But just the Java reference.
What Rust gives you that Java does not is that it is a...
I hate this high-low dichotomy, but like lower level,
i.e. more performant programming language.
So you get the safety and you get the C++ type speed.
Now, I also want to add because pet peeve time,
if you are writing Rust and you are throwing the unsafe keyword
every other line in your code,
you are effectively defeating the compiler's safety mechanisms.
Do not do that.
If you have unsafe, I don't know,
I would say like more than 10% of your code,
you're probably doing something wrong.
And I know that's a little bit of a spicy take because that's...
No, I think it's, yeah, I think it's, well...
The unsafe keyword is controversial
in how it should or shouldn't be used.
I used to be like, I just get it done, right?
Hackity hack, hack, hack.
I've suffered enough that I kind of don't like it.
When you have to use it, like particularly when you're interoperating
with stuff, you're probably going to have to use it.
But it's definitely a code smell.
Having said that, Rust is amazing.
We should all thank Mozilla and find ways to give them money
because they need money.
No kidding.
But they did make Rust, right?
My hot take is it's the summer of Rust.
I really, I mean, it's been building,
so it's not just the summer,
but I think the iceberg became much more like pronounced above water,
like all of a sudden, boom, here's this big Rust iceberg.
And now all of the stuff below is kind of coming to surface.
It just seems like it's been a big, big, big summer.
Right, I agree.
We're all going to be dancing to the sound of the rusty trombone.
Ha ha ha ha ha.
A Cloud Guru dot com.
A Cloud Guru is known for their hands-on labs,
the real way to learn.
ACG is the leader in hands-on cloud learning.
And you guys know the only way to lock in a new skill is by doing.
That's why ACG provides hands-on labs,
cloud Linux servers, and much more.
You learn the tricks, the nuances, and the gotchas
before you test and before you go to work.
And why not check out all the other great content
over at a Cloud Guru while you're there?
Get your hands cloudy at a Cloud Guru dot com.
One of the reasons I say it is sort of the summer of Rust
is right after we wrapped up last week's show,
we found a whole batch of stories
about different large tech companies proclaiming
their newfound love for Rust.
We saw that Apple has job postings open specifically
looking for Rust developers.
Here's a bit of the description.
Quote, the performance and security of the systems
we build are critical.
We interface directly.
This is Apple, by the way.
We interface directly to low-level Linux kernel interfaces
using asynchronous IO and threads to distribute the workload.
Following a very successful first foray into Rust,
we are migrating an established code base from C to Rust
and building new functionality primarily in Rust.
So we're hiring.
And Microsoft, a similar story, making the case
about using Rust for low-level operating system components.
And a lot of this is all coming to a head in the summer.
I really do think it has been the summer of Rust,
and I have been worried about making the show too much
about Rust.
But then when is the right time to talk about a language
except for when it's exploding like this?
When Rust is actually solving a problem, right?
Like a very serious problem of, you know,
you mentioned some of the buffer overflow stuff,
which can lead to insane security issues.
Taking a step back, if Apple and Microsoft,
and I happen to know for a fact that Google also uses Rust some,
are all kind of jumping on this,
they're not like us in the Telegram chat room or whatever
where we get swept up in things and try everything out.
They're making large-scale business decisions,
which means that these big corporations are probably going to also be
committing code back to the Rust community, right?
Developing cargo packages, which for those who don't know,
cargo is, it's the MPM of Rust, right?
So I think we should just embrace our new Rust overlords.
That's my take.
All right, so while we're on the topic of Apple,
the Epic and Apple battle continues with another
go-forward-step-back kind of situation.
Apple threatened to disable the sign-in with Apple for Epic Games.
Just such a weak flex, I'm sorry.
Oh, man. I mean, what I think is so pathetic about it is
Apple just basically got this deployed
and is already leveraging it to punish a developer.
Like, that didn't take long.
Yeah, Apple isn't shy about putting you in your place
when you're a developer for them, right?
This really sucks as a consumer, as a user of the iOS platform,
because I really wanted sign-in with Apple to solve this problem
of everything needs an account,
and everything has to send me spam-crap email.
And I got to be honest with you,
quite literally every single time I've been offered to sign-in with Apple,
anytime I've been needing to set up a new service,
I just have done that.
It's so much better from a consumer standpoint,
and so it's really disappointing to see this happen,
because now I have to take that into consideration.
Now I have to take into consideration that Apple could pull the plug
for some reason down the road when some goalpost has been moved,
and now all of a sudden I'm caught in the middle of some sort of dispute.
It reminds me of when I had Dish TV,
and they would have a dispute with the TV providers,
and now my local channel wouldn't be on the television network anymore.
Well, I'm still paying the same price.
I really don't like this.
I don't like this from a developer leverage standpoint,
because you shouldn't use your login infrastructure
as a way to punish people. That just seems evil.
And I don't like this from a user standpoint. This is pretty crap.
Now, I should mention, Apple kind of retracted this in a weird way.
They said that they will extend them a indefinite extension
for sign-in with Apple.
It's not saying it's resolved,
but we're going to indefinitely extend this offer
for you to continue to use sign-in with Apple.
And that's where it's at now.
I mean, this one really got to me, because it's so stupid and petty.
How about the other one where the EU tax,
and they're passing that tax on to individual developers now?
It's like, come on, guys. What are you doing?
It really does seem to be that they perceive the relationship
such that the developer is deriving more value from the platform
than they are from the developer. Do you get what I mean?
Like, they must think that the way that the value model works
is that they're kind of doing developers a favor
by shipping their apps on the iPhone.
You know, it reminds me of, I don't know what getting a driver's license
was like in other states,
but when I was a young Indian in New Jersey,
they constantly stressed you when you're taking the driving exams.
Driving is a privilege, not a right.
Even if you buy a car, it's a privilege.
Which is their way of saying, I'll take this right off you, right?
This is kind of like, I guess, writing code in Xcode and for iOS
is a privilege?
It's a whole new way of thinking about developer relations
that I'm pretty sure other companies would not agree with.
Maybe they'd like to have this model, but yeah.
And didn't seem to really be the bargain when the App Store launched?
It kind of seemed like the App Store was the thing that sold the iPhone
for almost a decade?
And they used to help out developers.
It's so weird how, I guess, power corrupts, right?
And also, they kind of need developers totally on board right now
because they're going through a massive platform transition?
What is happening?
Are we combining two things that shouldn't be combined?
Does Epic really represent developers?
It's not just Epic. Epic is the easy case.
One, Epic has not exactly tried to de-escalate the situation either.
No, no, no, no, no.
So the problem here for Apple, from their perspective, I'm sure,
is not that they're being mean.
It's that Epic isn't some guy in his spare bedroom in Florida
that they can just roll.
It's another billion-dollar company.
Right. Yep.
It's a high-profile one with a very popular product.
And Tim Sweeney's got some personality quirks
that make him a difficult person to be in a conflict with.
And nobody at Apple has that problem.
And Tim Cook just apparently hates him.
I don't even understand.
Again, if you haven't, you have to read those emails
that came out in the court filing.
It's weirdly personal.
Isn't that something?
Yeah, there's some personality conflicts.
But all right, so let's ask the $64,000 question
that we don't have in the doc, but I think is relevant.
Would you caution our listeners, particularly younger folks
who are wanting to get into development,
to maybe avoid Apple's platforms?
Well, I think certain business models should consider it.
If you're the hay business model,
you probably better think about it real hard.
Again, another outspoken tech founder
with an interesting personality who took Apple on.
If Ben Thompson is to be believed,
he has received many dozens of other stories from developers
that just were afraid to come public.
And I can buy that.
And so I would say to a degree,
you know, I don't think we should kid ourselves.
I don't think this is a story that is pervasive
amongst the customer base of iPhones.
I think it's well known amongst a small percentage
and maybe now a little more because of Fortnite.
But I'd say so a lot of businesses are totally fine,
especially if you're comfortable playing within Apple's rules.
But if you have something that skirts around
or kind of relies on a loophole
or maybe takes advantage of a gray area
or kind of hopes Apple lets this one slip by,
you are 100% screwed.
It's just not going to happen.
Maybe the web is a better platform for you.
Yeah, I'm sort of hoping that, like,
Apple comes to their senses a little bit.
Like, and I understand it's different people
and things have changed and whatever,
but this does feel like it's like your old friend
who's, like, just gone nuts for a while.
Like, you hope that he wakes up,
but they don't seem to be waking up, right?
Like, in fact, they seem to be doubling down.
So, yeah, I don't know.
That's what makes it so fascinating to watch.
How does a king lose its crown?
Like, when somebody makes one a company,
like Microsoft or Google or Apple, make it to the top,
what causes them to fall?
Piss off the EU enough.
I mean, that's probably how this ends, right?
I don't know.
I don't know. Apple may just buy them out.
We bought Belgium.
No offense to people in Belgium.
I kid.
I just think it's fascinating to watch, you know,
a trillion-dollar-plus company.
They have to sabotage themselves in the name of profits,
in the name of services revenue.
I made a prediction on this show years ago.
I've said it before.
It's all going to be, I said, if you're a developer for Apple,
you're going to have the game change on you
as they get more and more serious about services.
And because that app store equals services
in their quarterly results, they've got to milk that sucker.
That's the game on Wall Street.
I keep using the metaphor of sharecroppers,
but it does feel like that.
It's not great.
So let's cheer ourselves up.
Apparently, I was right in 2013.
I want to set the stage.
This was September of 2013.
So not surprisingly, here we are in September again.
Let me pull up the exact date
because this is actually kind of interesting, isn't it?
We released this episode,
episode 67 of Coda Radio on September 16, 2013.
Here we are on September 14, 2020.
So that's pretty great.
And this is typically around the time
Apple has its traditional event.
And I think this was when they announced the iPhone 5S.
So that's how long ago this was.
And you had a hot take that you just kind of tossed out there
in 2013, and we had a listener go back
and listen to the back catalog and say,
hey, you got to check this clip out.
The most interesting thing that's happening now
with Apple and the iPhone isn't what they do with the colors,
isn't what they do with the design
or the fact that the background now has parallax.
I think what is interesting is you have one company
who is making their own chip based on the ARM design reference.
But I find that to be a huge, huge advantage.
I mean, I got to imagine now Samsung gets close, right?
But they don't own all of the bits like Apple does, top to bottom.
So my crazy conspiracy theory is that this is step one
in a five-step plan where step five is Macs
start running Apple's own ARM chips.
Oh, I hope not.
Damn.
You called it from the iPhone 5S.
I'll take the W.
Yeah, we were both spot on, I think, not to my own horn,
but I was spot on about their CPUs were going to be their secret sauce
and it was going to be a huge deal.
Yeah, you were too.
You were spot on about their desktop switching over to ARM processors.
Now, that's interesting because today it was announced
that Nvidia for 40 billion US dollars is acquiring ARM holdings.
And this is massive.
They're buying it from SoftBank
and it's clearly going to change the industry.
This will probably be one of the biggest tech stories of 2020.
And they seem to be, Nvidia, seem to be positioning this as a big AI play,
which I think is interesting.
Got to get those buzzwords.
Yeah.
Yeah, it's all about AI and their press releases.
In fact, here's a bit of a quote from one.
AI is the most powerful technology force of our time.
It is the automation of automation where software writes software.
That's according to the Nvidia CEO.
He goes on, together Nvidia and ARM are going to create
the world's premier computing company of the age of AI.
How about AI?
But I think early, I mean, I'm sure it's a component of it.
Bringing Nvidia's GPUs together with ARM CPUs
and putting them in low power situations
where they can do a lot of on premise, on location processing
would be extremely valuable.
I mean, you're seeing that play out in cell phones already for your selfies.
But it feels like to me what Nvidia is really doing here
is focusing on the shiny and exciting
because they don't really have a full fleshed out plan yet.
They got vague details.
So you refer to something that's vague and people will be like,
oh, that's great.
That's going to be amazing.
And they'll make up scenarios like I just did.
Meanwhile, they're like, we just had to make this play
because somebody else was going to buy them
and we wanted it to be us, right?
That's got to be what happened here.
And they moved as fast as they could.
They had a sticky issue regarding some Chinese owners
and they kind of sort of quote unquote resolve the matter.
And then as soon as they did that, the deal went through even on a Sunday.
It was almost finished on a Sunday.
I mean, it was a big rush, it seems like from the outside.
And then they talk about AI because that's pretty noncommittal.
Yeah, I mean, I would give them, I mean, I know I put the crack about being a buzzword.
I would give them a little more credit.
So Microsoft had that spheres thing.
Is that what it's called?
It was like their system on a chip or?
Yeah, the Azure sphere.
It's like a shipping product now.
A big weakness of that product
and a big weakness of people trying to deploy AI systems in general
is that they tend to always rely on cloud services to do the actual,
you know, machine learning and processing.
Right.
And this is an area that actually, like I know I mentioned Apple all the time,
but Apple has actually done a lot of great on device AI stuff,
not, or I'm sorry, ML stuff and not exactly like the best ML stuff.
But the fact that they're not constantly calling servers is impressive.
If Nvidia can pull this off, which is a big, big, big, you know,
HTML one blink tag if.
Yes.
They could very well do to the embedded AI market,
which is a term I just made up,
but what I mean is small systems on, you know, a single chip computing.
What they have done to basically, you know, CUDA, right?
Let's talk about CAD.
A thing we don't talk about much on this show because we're not like gaming oriented
is specific games, but more importantly,
CAD programs are programmed to CUDA, which is Nvidia's like proprietary,
weird, whatever graphics thing,
which means that they're kind of the leader in the graphics market,
even though we're AMD lovers here, that's because we tend to run Linux.
And it's what actually drives a huge reason why Nvidia develops a driver for Linux.
Yeah.
And, you know, System 76, a sponsor of this show,
and we're both customers of they build laptops and desktops specifically for the CUDA market.
It's a big sector.
It's a big sector.
I mean, it is the leader in that space, right?
To the everlasting shame of Mac people who had to switch to Windows
or hopefully picked up a System 76 computer to do their CAD work.
Right.
Because they can't.
So you can't get Nvidia on Mac because apparently they had a nasty breakup.
Again, blinking if tag if they can actually do this.
And I'm a little skeptical on this one, Chris.
This is the Holy Grail.
If they can do it, this makes AI not at all a buzzword anymore.
This makes it real.
I could see that if the devices could think faster and it was safer in terms of privacy
because it's interestingly enough, and I think you've probably noticed this too,
there is a very large percentage of the market that will just never buy a Amazon tube
or a Google tube because of privacy reasons.
It's become a thing people think of more, not as pervasive as I would like,
but there is a large section of the market now that does worry about privacy.
Sure.
And if you could say, sort of like what Apple leans into,
if you could say instead of uploading this to the cloud to process,
we're doing this on your device locally and now it's faster and more secure
and safe from hackers or whatever, they could really play it up.
Put a Guy Fawkes mask on the commercial, I could see it.
Yeah, that would appeal, I think.
It would appeal not only to people like me who have already accepted the tube in the house,
even though it does concern me,
but it would also appeal to people that had been previously opting out of certain,
quote unquote, smart products.
Yeah, that's a great point.
I wasn't thinking of the consumer space, but that's a great point.
I actually right now have a customer who works in the agriculture space
and they have giant stocks of produce, like growing produce,
and that creates a really stupid problem.
Wi-Fi signal is unable to penetrate the mass.
It can't get through the fruit?
Can't get through, right, can't get through the fruit.
So we have to do all these insane local caching stuff
and to reintegrate with the whole system.
Something like this would be awesome, right?
And I could think of over the years at least a dozen scenarios
where my main problem was the client had either the space was too vast, it was outside,
spotty cell signal or the devices they were using didn't have cell connection,
because remember not everything is an iPad or Android app, right?
So I would be super hot on this if it worked and if it had an Objective-C SDK.
Ah, you got it in there.
Or I'll settle for Rust, how about that?
Okay, all right, yeah, that'll be the new go-to.
This is to me, and this is maybe why I was a little skeptical on my take of the AI stuff,
is I think really not so much about the high end of the market,
but it's really about NVIDIA now getting in the low end of the market,
because they kind of own the high end, especially with their GPUs,
and they don't really have much of any play in the low end,
like IoT devices, like I was talking about, or router devices, networking devices.
They have all of this area they can expand into.
Now what's interesting about this deal is that ARM will essentially operate as a separate entity.
They will be a subsidiary of NVIDIA with supposedly their own command structure,
separate from NVIDIA.
Yeah, sure, okay, yeah.
Yeah, that $40 billion was for no influence, right?
Of course, they'll be able to license to themself as much as they like,
but I would imagine they're also going to now be taking the revenue over from the existing licensees,
including folks like Apple, which you wonder what that deal is going to look like now.
I think NVIDIA is going to focus a lot on kind of pushing down into that market,
maybe even if we're lucky, bringing up the capabilities.
But without a doubt, this just clearly makes NVIDIA one of the most significant players in tech now.
Yeah, I mean, they weren't a slouch to begin with.
Right.
But we could see a future where when you rattle off the big tech, the big five,
when you're rattling through Amazon and Microsoft and Apple,
there may be a future now where NVIDIA is in that list.
It's not there yet, but it may get there because think about the dominance of the ARM CPU,
especially if they can combine it with some of their technology,
and the reach, if they play this right, they could achieve.
Yeah.
It seems like a lot of upside for them, if they don't blow it.
Tough dungies for Intel?
Yeah.
Man, right as they're just not getting their act together either, right?
I mean, woof.
And AMD is starting to make inroads into the laptop market.
That's a rough time.
You also wonder if it will have a knock-on effect to RISC-V or OpenPowerPC.
Could we see some renewed community interest or company interest in those platforms as sort of a hedge?
You had me at PowerPC.
I tell you what, man, I miss it.
I love the PowerPC architecture.
That's a statement.
Okay.
Really?
No, I did.
One of my favorite things to do for a long time was to get old PowerPC Macs
and run Yellow Dog Linux on them and Debian.
Yellow Dog.
Yes.
Oh, yeah.
You could also run that on a PS3, if I recall correctly.
As I did.
Yep.
And so did the Air Force.
Really?
Yeah, a lot of them.
Weird.
That's weird and random.
I mean, there's other Linux boxes one could have.
At the time, though, the PS3 was like, this is not my personal experience,
but it was a widely-published story at the time.
It was the most cost-effective, powerful Linux box they could buy.
So they just called Sony and were like, we need 200 of those.
Right.
It had that cell processor, which is PowerPC-based.
Yep.
Well, one last hot take while we're in the hoopla.
This is over at Matt Kelad's, I'm not sure, blog.
And we'll link for the full read.
But it's a take I think I can get on board with.
And the headline is, your language sucks, it doesn't matter.
And the central thesis is that the actual programming language,
the syntax, the semantics, the paradigm, it doesn't really matter.
What matters is the characteristics of the runtime, roughly what it does
with memory of running processes and what does all of that look like.
That's the core thesis.
And I feel this way, too, about not just programming languages,
but I also feel that way about Linux distributions.
All Linux distributions suck and also all Linux distributions are great.
It's just really how you use it and what you're familiar with
and the tools you know.
And honestly, that's kind of my hot take on operating systems
to a lesser extent as well.
Yeah, I think this guy makes a great point.
It's back to our classic, the right tool for the job.
Now, I'm curious on your operating system thing.
When you say operating system, do you mean like Linux distros
or like Mac, Linux, Windows, whatever?
All of the above, but I did mean the actual, you know,
predominant like Linux, Windows, Mac.
But I feel that way about distros as well.
I can just switch distros and it's great.
It's just some have other advantages that work better for me.
And it's like tools, right?
It's like I just got a rigid drill set.
I looked at a lot of different drills and I almost didn't go with rigid,
but I was gifted a couple of batteries and I'm like,
I got these batteries and we can get these chargers.
And so I went with that tool.
Now, people listening to this who don't like rigid drills might think,
oh, you shouldn't have done that.
But for me, that's what fit my use case.
They all have pluses and minuses.
That's my wisdom for you, Mike. It's wisdom.
That is pretty wise.
Have you been like meditating in a monastery or something?
I think it's the drive through the mountain passes.
You know, maybe it's all the tree smoke.
Just to tie in at the end of his article,
he has some four takes or five takes rather.
His first one, he expects rust to be a major language.
A fun fact, their rust consultancy might be related, but I agree.
Can I just say I had no idea when this Lincoln in the show notes that he had a rust tie and that's hilarious.
Yes, it's got this.
So he he writes first.
I expect rust to become a major language.
Naturally, smiley emoji.
This needs some explanation.
All right. You know what? I'm not doing that.
But oh, I see. Yeah, OK.
Yeah, I see the paragraph you're talking about.
Yeah, but he says he argues the memory safety is a runtime property,
despite the fact that it is uniquely to rust achieved exclusively via language machinery.
Yes, it's not really a runtime property.
It's a it's a it's the language specification.
But I see where he's going.
Julia becoming popular.
Yeah, I doubt that.
But we'll see.
He wouldn't be surprised if dark grows.
You know what? Yeah.
A year ago, I would have said no chance.
But I'm seeing a lot of activity on Flutter.
Yep. I had Chris sells on the M.
Dominic show, and he is the product manager for Flutter.
They've got a lot of cool stuff.
They've got the Ubuntu support now, which I know is Linux support, but canonical partner.
So don't know.
Leave the hate mail.
Crystal, no chance.
He's right about that.
Swift. Yeah.
This is the one I wanted to troll about.
Remember when IBM was like, we've got this.
We're making the Swift version of a Web service.
It's going to be an enterprise language.
Yeah, that worked, right?
Yeah. Huge.
No, super popular.
Huge.
Which actually is a crying shame.
Yeah. I, of course, personally hate Swift, but it's a really good language.
And its ambition is a little crazy, like it wants to go everywhere from systems programming to scripting.
But it just never got out of the Apple sandbox.
You know, things can change.
A language can can languish for quite a while and then all of a sudden get some notoriety.
But I mean, I shouldn't put it that way.
I shouldn't put it that way.
I mean, even even just the iOS platform and Apple Mac platform are huge.
Right. So, yeah, I mean, it's getting some play.
Let's be honest.
Yeah, it's actually a really good read.
All of those predictions are fun, but we'll have the link to the whole thing.
Yeah, the predictions are actually pretty good.
Linode.com slash coder receive a one hundred dollar 60 day credit towards your new account.
Linode is the largest independent cloud for developers.
You can simplify your cloud infrastructure with their easy virtual machines, tools to develop, deploy and scale your modern applications faster and easier than you ever thought possible.
Linode also costs 30 to 50 percent less than the major cloud providers like AWS, Google or Azure, because you receive a balance of technology with price and performance ratio that's just right.
And with 11 data centers worldwide, you're going to find just the right spot to deploy.
And you'll rest easy with Linode's built in monitoring tools.
Linode is my cloud hosting provider and all of the new infrastructure for JB 3.0.
Yeah, we're putting it on Linode.
Where else would we put it?
They've really gotten great.
I've been a customer for two years.
I have watched them get better and better and better.
And now nobody touches them.
The largest independent cloud provider.
They've been around since before AWS.
And when you go to Linode.com slash coder, you get a hundred dollar credit for 60 days on a new account.
Now, they have shared rigs starting at just five dollars a month.
But of course, they have dedicated CPU machines, GPU compute.
I mean, you can get seriously powerful and fast infrastructure if you need it or deploy something quick and easy for testing or learning.
You've got to go to Linode.com slash coder.
Oh, and one last thing.
Linode's hiring.
If you go to Linode.com slash careers, you'll find out more.
Why not start by supporting this show and getting yourself a one hundred dollar 60 day credit towards your new account by going to Linode.com slash coder.
And a big thank you to Linode for sponsoring the Coder Radio program.
That's Linode.com slash coder.
Now, here's the hottest of the hot takes this week.
Open source is essentially dead.
We are living in a post open source world.
There's several links we'll have.
One of the one of the links that is cited here is, quote, a tweet that says open source as a community endeavor is falling apart right before our eyes and being replaced by open source as a big Corp enrichment strategy.
It is mean, but it's been happening for a while.
But seeing Mozilla's sinking like this is just driving the point home for me.
And that's what kicked off this entire conversation, to be frank with you, is the Mozilla layoff situation.
And that's what drove this author to write this. A lot of cool people working on important shit, as this author put it.
But the consensus that he's seen is that it reflects Mozilla's search for profit over impact, mismanagement and dis appropriate executive compensation.
He says this is a trend not only at Mozilla, but it's taking place over the corporatization of open source over the past several years and an ongoing open source sustainability crisis.
And covid-19, the all consuming crisis that makes other crisis is worse, has brought this issue up even worse.
It's like I say, it's hot, it's spicy. This is where I think maybe it resonates a little bit with you.
So clear your mind. Open your mind to this, because he is no fan of the GPL three.
And I'll get you there. They write the flagship projects of the free software movement are probably Linux and the Gnu pile of tools.
The Linux kernel being released under a free software license doesn't directly create more free software, though, even since things that lie closely to the Linux kernel aren't obligated to also be free software.
And of course, user level applications can have whatever license they want.
And also, most of the people using Linux right now are using it by accident distributed as Chrome OS or Android, either of which is free software.
So Linux is a win for the free software movement, but it's a useless win.
The Gnu user land tools are, for the most part, even more underwhelming.
GCC had, as far as I can tell, been basically the C compiler for a while.
If you weren't stuck with MSVC or something else, the free software movement were stubborn ideologues with weird priorities.
They still had one big technical advantage, but then the GPL three happened.
So big companies like Apple saw new restrictions coming in at the same time were more aggressive with enforcement and said, well, shit, who want to base our software on these handy, convenient tools like GCC?
But we can't use GPL three software while keeping our hardware and software is locked together as tight as possible.
So they started pouring money into a new C compiler LLVM that was instead open source, not free software.
And LLVM became at least as good as GCC and less risky decision for big companies and easier to build new languages.
So the free software's last technical advantage was gone.
His social advantages also kind of went up in flames with the GPL three.
The free software movement in the end burned itself out by fighting for tiny crumbs of success and then turning around and lighting that success on fire.
The death of free software tells us that we can't use a license to trick corporations into sharing values, our values.
They want to profit. And if good software has a license that puts a limit on how much they can do that, they'll put more resources into writing their own alternative than they would spend complying with the license in the first place.
So in his mind, especially in the world of big cloud services, this is done. It's over like the ID log movement didn't work and free software is done.
Well, OK, so maybe I'm on the short bus today.
Is he claiming that open source is gone or dead or something or has failed?
Or is he claiming that like FOSS has failed because it's two different things, right?
Free software versus a little bit of both.
I think the I think he's trying to make the case where they think it's a he is trying to make the case that both have failed.
We couldn't get companies on a moral basis and we couldn't get them on an open source license to trick them into not making too much money because they just bypass both.
And so the only kind of license that works is something that's essentially I opt to revoke your permission to use it anytime I deem.
He has a quote, a license that's F around and find out license faffle for short.
The license reads the software shall be used for good, not evil.
The original author of the software retains the sole and exclusive rights to determine which uses are good and evil.
Yeah, no one's going to go for that. I know to get out of here. That's it.
Get it out of here. What about what about the premise?
What about the premise that almost no license is better than a license in this new in this new world we live in?
Almost no. So so no license. The default would be proprietary.
Or are we saying like a public domain?
I think it'd be up to you, you know, for your software, the default might be proprietary with or the default could be something like this share.
And I I don't think anybody would go for a license that says I choose to revoke it for any reason at any time.
Yeah, no, of course not. It's just kind of it's yeah, you're right.
It's kind of a who would write software for for anything where someone could just come in and say,
we don't like you anymore and throw you off the platform and then remove a sign in feature from you. Oh, wait.
We'll be talking about it. So this is what. So this right here, what you just touched on is what I keep coming back to.
And what this I think with this article got me thinking about is this almost does kind of seem like an unsolvable problem in a way.
But what is the problem? Well, in theory, the problem is large company X comes in, decides to use your code to make millions and millions of dollars and never gives you a dime.
Got it. So effectively, AWS and Azure are rolling around with making lots of money on Linux.
And the Linux Foundation has to go cap in hand and get some shekels from them. That's what we're talking about.
Yeah, I mean, essentially, that's it. And then, of course, that doesn't really trickle down to projects.
So still, the developers that are actually burning the midnight oil, making the software actually possible, are really not reaping any of the benefits at all.
All right. So I'm going to make you even sadder than OK. Remember, there was a hero in this category.
And we had this argument years ago when I was full, like stupid, you know, do everything proprietary.
Someone will find the clip. I'm sure you throw it right back at me. Well, Red Hat's making tons of money, man, and they're open source.
Oh, wait. Everybody has failed. Right. Canonical is like maybe the exception to this.
But again, they have effectively become a consulting company. Sorry to all our friends at Canonical.
Well, I mean, it's not a bad thing. But see, the way I look at it is it's all kind of open source by default now.
I mean, I think I think there is a fair observation being made here. Certainly, the spirit of free software is just like that.
But merging them together into open source and free software.
How could you be open and good and not have the big companies like want to use your stuff?
That's what I'm saying. That seems to be the catch 22 of it.
But maybe it's enough that a small core group of technology enthusiasts care about this and advocate for these things.
And maybe that's but what are they advocating for? Well, at least contributing code improvements back.
Well, I think to be like slightly fair to the dark are glorious corporate overlords in the open source community.
Microsoft does commit code back to Linux kernel and a number of other projects.
Right. Canonical does a lot. And I see people.
You know, I knew someone was going to say open core. I knew it was coming.
Conan, kudos. Kudos to you, sir. Well, here's my question, though, is does it work out in the wash?
Maybe some projects suffer and other projects grow and become funded and get developer time.
And it all kind of comes out in the wash, even though some projects are left behind.
I don't know if we can say that. Let's try to think of a company who is even like maybe not like Microsoft level.
Right. But like maybe a couple of years down, that is open source and making money and is not having their lunch eaten by AWS.
And the one in the chat room that inspired that point is maybe it's Suze.
But that has more to do with the fact that nobody willingly uses Suze and they affect.
And the D.O.D. happens to like really like Suze because you have to have a vendor thing.
Oh, and Germany. Right. The Germans loves it. Right. Yeah. Well, that tells you everything.
I love you, Germans. I love you. Their model is to sell you an insane enterprise like maintenance contracts.
Yeah. I hate to be Debbie Downer. And please do, you know, coder dot show.
There's a form there. Go ahead and send feedback if you can think of one. But Chris, can you?
I can't really. I mean, to me, it seems like fundamentally this has always been the way it's worked.
Now we see it because I think it's more pronounced with the scope and scale and revenue size of these companies.
So it's really in our face because they're like in some cases the fricking back end of the Internet, essentially.
And so it's just egregious. If you look at people who make a ton of money on open source, I mean, it's not it's not a big list.
And I think ton of money is going to have to be pretty relative.
Maybe upper middle class in the United States is probably what I mean. I don't know.
Maybe Linus is worth a billion dollars. I doubt it, though. I bet he's got some money. Right.
I'm sure he's doing real comfortable and anybody would be thrilled to be in that position.
But he's not rolling in like Tim Cook money or even probably Johnny Ive money or Phil Schiller money.
Yeah. According to the Googles, his net worth is one hundred and fifty million dollars.
So not not even close. I wonder what Johnny Ives net worth is or Phil Schiller's right.
Or or or even Satya Nadella. Not that Satya Nadella hasn't made a good contribution, but let's let's be clear, it's not the scale of Linus Torvalds contributions.
So how would you solve the problem then? I don't know if there is a solution.
I think in a part it's people dedicating themselves to just furthering software development.
And sometimes the reward isn't monetary. Sometimes it is. And I think people may know that bargain when they go in.
Again, this is like remember a couple of years ago, the hotness was open core.
Right. Yeah. Because of this problem, if you did something purely open source.
Literally, AWS or whoever would come in and just eat your lunch if it was even promising at all.
It's essentially what's happening. And that also failed. So, you know.
Yeah. Although, you know, if it's under the ocean, maybe it doesn't matter.
This is kind of neat. Just as we're kind of sitting down to record today, Microsoft announced that their underwater data center has resurfaced after two years.
The data center has been retrieved from the ocean floor. It was covered in barnacles and all other kinds of underwater crap, as you might expect.
But here's some interesting details. Their first conclusion so far is that the cylinder packed with servers under the ocean.
Yes, under the ocean had a lower failure rate than a conventional data center when the container was hauled off the seabed.
And then it was about a half a mile out offshore. So it was underwater about a half mile out.
It was placed there in May of 2018. Only eight out of eight hundred and fifty five servers failed.
Quote, our failure rate in the water is one eighth of what we've seen on land.
This is according to Ben Cutler, who is the lead Microsoft project guy on this.
And he says our failure rate is probably lower in part because we use nitrogen rather than oxygen.
So there's less corrosion. But also no doubt about it. It's got to be because there was less humans.
Bumping into stuff is really neat when you see the pictures in the show notes.
It's a tube with racks in it. It's just they straight up through a whole bunch of racks of servers,
one new servers in these racks, and they even have KVM crash carts on them.
And they don't know if it's going to turn into a product for Microsoft, but they say it could have potential.
You know, imagine a natural disaster and a region's telco infrastructure goes out or whatever it might be.
A big, big old boat could come in and drop this thing off the shore half a mile and you run fiber out to this thing.
And now you've got infrastructure on demand. That could be powerful.
I am so excited about this. So this is my X-Files, the lone gunman hackety hack solution.
Things are going bad. You toss a bunch of armed servers from NVIDIA to a capsule right down the bottom of the ocean.
And you know what? Hopefully future aliens will find our technology and still not be able to make money on open source.
Microsoft says they think they're past the point where it's a science experiment.
Now the question is how much they want to engineer this. They want to make a small scale one, a large scale one.
I'm thinking what needs to happen is a bunch of Bitcoin billionaires need to come together and purchase a few of these and sprinkle the blockchain around the bottom of the ocean.
Never tell the Bitcoin people about this. They're like, hmm, water cooling with the whole ocean, huh?
Oh, you're right. Boy, you're right. OK, mum's the word on this one, everybody. Don't tell the Bitcoiners.
All right. All right. Hot, hot prediction. Hot prediction. Here we go.
Who buys the island just to dunk servers within the territorial boundaries underwater first, Amazon or Microsoft?
Hmm. Whoever's going for that sweet, sweet China contract first.
Right off the South Pacific, right?
Yep. Also, just a special thank you to the Coder QA team. Thank you everybody who's been going to CoderQA.co to sign up.
If you become a member, you get a limited ad feed, you support the show and you'll get that quarterly Coderly exclusive content.
And we just appreciate the support helps keep the show sustainable at Coder QA.co.
Also, if you know somebody who might enjoy the show, consider sharing it with them.
Absolutely. No doubt about it. One hundred percent word of mouth is the only form of podcast marketing that actually works.
So if you know someone who may have enjoyed this episode, consider sharing it with them because we might just get a new listener.
Mr. Dominic, is there anything you'd like to plug? I know that the job posting we had mentioned last week did get posted.
Yep. Yep. We're hiring a Python developer. No, not really. I'd say just follow me on Twitter at Tumanuko.
And I swear to God, I will ship this Rails app at some point.
And you know what? Drop a link like in the chat or somewhere and I'll grab it and I'll put it in the show notes for the job posting.
So people can find that if they're looking for it. Will do.
I am at Chris LAS on the Twitter. You can also find my personal website, chrislast.com.
Check out the new logos hitting the show art and the Jupiter Broadcasting website rolling out over the next week. That's pretty exciting.
And that's pretty much all I have to plug. Maybe I'll just say you can find the show at CoderRadioShow on Twitter, too.
And links to everything we talked about today, coder.show slash 379.
Oh, I know what I'll say. Last but not least, consider joining us. We'd love to have you join us live over at jblive.tv.
We do the show at noon Pacific, 3 p.m. Eastern. Thanks so much for joining us. See you right back here next week.

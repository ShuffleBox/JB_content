This is KOTOR Radio, episode 383 for October 12th, 2020.
Hello, friends, and welcome in to KOTOR Radio,
Jupiter Broadcasting's weekly talk show,
taking a pragmatic look at the art and business of software development
and the world of technology.
This episode is brought to you by a Cloud Guru.
Looking to make a high-paying career move?
No better place to start than a certification.
ACG has helped more than 2 million people skill up on the cloud.
AWS Azure, Google Cloud, exam preps, you're covered.
Go to cloudguru.com.
My name is Chris, and joining me, like our man that we've snuck down to Florida
to monitor all the strange ones, it's our host, Mr. Dominic.
Hello, Mike.
Hang on, let me rip my shirt off and do a keg stand.
That's the only way they won't find me out.
I hope you have a Superman shirt underneath that.
You just paint the S on your chest, actually, in Florida.
Yeah, well, I think you got to commit.
Go tattoo. I mean, why not?
Then you're always ready, you know? You're always ready with that.
Just have to go for it, right? Yeah.
Have you had a good weekend in a week since we've gathered here today?
Because, you know, we record on a Monday, so it's like a whole lifetime goes by.
Yeah, time does move differently in Florida, much like hell.
I'm kidding.
Oh, geez.
Sort of.
Yeah, no, things have been pretty interesting.
I have been tooling around VIM, which I think we're going to talk about.
Oh, yeah, we're going to get there. Yeah, we're going to get there.
And, you know, apparently a blood war that I thought had ended rages, rages on.
Indeed, a blood war that we have covered for a while.
Maybe it's worth mentioning if you're listening to this when it's released, which is all of you, for the most part.
Yes, there was an Apple event, and yes, it's the day before we actually record.
So, no, we don't have many thoughts on it.
If there is something worth talking about for this show, I'm sure we'll cover it in a future episode.
But there's plenty of plenty of places to get coverage on the announcements.
I think if you're looking for Apple podcasts, that might be the easiest thing to find.
Yeah, and if you're looking for news about Apple, boy, you could pretty much just fall into it.
So but if there's some interesting nugget in there, I think we'll pull it out and talk about it.
We, you know, we don't expect a whole lot yet, but who knows?
So let's start with the feedback. What do you say? You ready for the feedback?
I really hope you didn't offend any SUSE users again.
One last SUSE one. Sebastian writes in with what I what I expect to be the last note from the Lizards.
He says, Hello, Chris and Michael. I probably laughed harder.
That's great. I probably laughed harder during show 381 than contractually permitted.
To be honest, I work at a German public IT company and I would like to second what a listener wrote in.
We deploy different Linux distributions in our data centers, but for historic reasons, the standard is SUSE.
So it gets used quite a lot. And I can confirm that having a certified OS for use in a critical environment does play its part here,
which is why we also have a bunch of hellish sap on SUSE machines.
My soul grows colder and the cozy feeling of being at home on the command line vanishes.
Every time I log into an operating system that would not survive a magic wand roundup, things are just subtly different.
The package repos contain practically nothing beyond the absolute basics.
And don't get me started on the Windows Wizards for Linux, a.k.a. Yast.
We were actually evaluating Rancher as a Kubernetes platform before SUSE acquired it.
And now I just hope they don't break it.
The ups and downs of SUSE as a company and the ever changing fate of OpenSUSE did not help their cause either.
OK, that's critical, but he does kind of wrap it up with a bow.
Nevertheless, Chris bravely finished his lizard rant on a positive note.
So let me add that if you are German based and strive to work on a Linux distribution for a living,
SUSE is still your best and really only chance.
There are a lot of capable engineers at the company and they still ship products that are a little odd but working.
After all, the kinds of folks I call my admin colleagues managed to get a huge SUSE based infrastructure working really smoothly.
And Zipper has a small number of functions that I'd like to see an apt one day.
So that's fair enough. He says, thanks so much and greetings from Germany, Sebastian.
You know, I think that's probably we've said everything on this.
And it's funny because here we, you know, normally here our hot take would be, oh, the operating system doesn't really matter anymore.
It's all about containers in the web.
And yet for four weeks we have been talking about the operating system and why it matters.
And then all of the passion that still is around that topic.
So I think the operating system might matter still. That's my take.
I think the important thing is we're wrapping up all the SUSE talk with someone at an IT, at an ISP, he said.
Yeah, I think so. Well, he said he's in a public IT company.
Public IT company in, of course, Germany. So we've come full circle.
We thought it was Germany only.
And as I have been told privately at least a dozen times now, again, thank you, Chris.
You're welcome.
People do use SUSE in the United States and they don't like any sass about that.
That's the great thing is Chris runs his mouth on the show and then Mike ends up hearing about it in meetings.
Yeah, that's good natured, but yep.
And all the SUSE people came out of the woodwork.
Yeah, it was just like, did we put the lizard signal up like in Gotham where all of a sudden just bam, they're there.
I think it's a smell thing. I think I think lizards have a good sense of smell.
Oh, God. You know what, though?
This gentleman is not the only person to message me about Rancher OS.
Oh, they were trying to backdoor me into SUSE again. See how they did that because it doesn't say SUSE on it.
Right. Oh, yeah, that's a it's like the cereal brand will have a generic brand and then they have like the name brand cereal.
It's like their container or whatever thing you can do.
Mm hmm. Yeah.
OK, you feel I feel complete. I mean, if people still need to send it in.
I mean, we don't get to say when the war is over, you know, they could keep the airstrikes can continue, but we'll see what happens.
Well, we're good. So Jonathan Meeks writes back in.
He says, I have a theory about a gray matter developer.
So, you know, we have the black matter developers.
He wants to propose the gray matter developer.
Hey, Chris and Mike, glad to hear the show's back.
I've missed it. Thanks for the shout out recently in 382.
I think I might be a gray matter developer, he writes.
I work at a major home improvement retailer and we're making strides towards a startup mentality.
I develop in Java, but we are on the latest LTS and debating on jumping into the six month release cycle to get access to some really awesome features in the language.
Since day one of my job, we've been developing software that runs on the cloud instead of on individual servers.
And in my mind, a gray matter developer is someone who develops for the enterprise, but tries to bring the innovation collaboration mentality and whatnot to the enterprise development process.
We might be constrained in some ways, but we are given more flexibility to choose the tools instead of being locked in on a particular language or framework.
In my mind, the dark matter developer would be someone who is locked into a language.
Maybe they're told you have to use Java 8 by the higher ups, where a gray matter developer could be someone who can use Java with a minimum version set to the latest LTS or make some other nuanced choices along with other popular frameworks.
They have the understanding that they're on the hook for support, of course.
Anyways, I thought maybe it's a random thought.
Maybe there's a gray matter developer out there who works in enterprise, but has a little more flexibility on the tools they choose.
Do you buy it? I don't know if I buy it.
I don't think the distinction is strong enough, to be honest with you.
I don't think saying someone works at a corporate development job is necessarily akin to saying they don't get to pick what tools they use.
And that's really what defines the dark matter developers.
Someone who is working at a corporation writing tools for that corporation.
It's a valuable position, but it's not like writing front end websites for Amazon.com.
It's a steady paced nine to five development job with different levels of support requirements and criticalness and different tools they use.
But the concept is it's somebody's day job and it's not something that we talk about in the tech press.
It doesn't get a lot of gloss and glamour.
Yeah, I mean, I think I mostly agree with you.
I think he does make a point that there is maybe it's not binary, right?
Like, yeah, maybe there's like, you know, Sour on the Black, Sour on the White and Gandalf the Gray somewhere in the middle there.
Yeah, but although Sour on the White is problematic for lots of reasons there, because spoilers for things from the 40s or 50s.
Or to make an analogy to good and evil Spock from the mirror universe, you know, evil Spock is still kind of good Spock in some ways.
It's a gray area.
Right. What if you have like half a goatee?
Right. Yeah, right.
I mean, yeah, there's definitely going to be some gradations of like, oh, you work at giant outsourcing IT shop and you are writing Java 8 until the day you die.
Godspeed or you're working at some crazy little company where we just do like Skunk Works projects all the time just to keep ourselves sharp.
I think there's probably stuff in the middle of that.
Having said that, I think the pure dark matter developer, you know, Scott Hanselman coined that phrase years ago.
And the idea was that it is not just at the time he was kind of, you know, digging on the Ruby people a little bit.
It's not just the cool hipsters with gold MacBooks sitting under a tree writing beautiful Ruby code, right?
Right.
It's people who, you know, wear a white T-shirt tucked in.
They get to wear jeans on Friday.
And, you know, they're sitting, goddammit, they're sitting with Visual Basic.
That's how their granddaddy did it.
That's how they're doing it.
Or something.
Right.
I feel like if we attribute the tools, then I don't know.
Well, I'm teasing about Visual Basic.
Some very conservative technology.
Right.
Probably Java or.Net of some sort.
Yep.
Yeah.
So, I take the point.
I mean, I wish we actually heard more from people in the dark matter world.
But I guess then they wouldn't be dark matter people anymore.
It's sort of like how we never hear from 99% of the audience.
Right.
You know, what we hear from is between 1 and 5% at most.
Because I would, too.
I would like to basically build a little understanding from the audience of what the average workload is.
And I want to know all kinds of things, too.
Like, do you work from home now?
Is it more common to work from home?
Were you commuting into work before all the COVID stuff?
And has that changed?
Like, I'm curious about what operating systems they let you use and all of it.
I just, you know, I would love to have, if you're just in a corporate development job,
working a regular job, getting, you know, a paycheck and all of that.
Look at that 9-2-5.
Maybe you even have health benefits.
I'm not sure how that works.
I don't know what that is.
What is that?
I hope you have health benefits.
I do not.
Oh, man.
Actually, I do.
I have Obamacare.
But the deductibles, who, baby?
Yeah.
I have an idea.
Yeah.
Obviously, we've been doing this for, like, eight years.
No, has it only been eight years?
Maybe it's more.
I think it's more than that.
You know, the SUSE people, we didn't hear from them for all that time until you, you know, insulted them.
So why don't we once a week pick a technology group and just be, like, really mean to them?
You know who are probably developers?
All those dark matter developers.
They probably don't know shit about current trends, and they probably...
There you go.
I like it.
I like it.
Yeah.
That's just how we have to solicit it.
That really is so true.
God, if that isn't how the internet works.
All right.
You write in before we have to get mean, okay?
You've been warned out there.
Don't force them.
All right.
So Dinesh writes in.
Kind of speaking of the corporate developer thing, he says, thanks for the show.
I've only started listening since the reboot.
And get this, he says he's gutted that he didn't discover it earlier.
How about that?
He says, I would have been wiser with my tech choices.
Well, there is some of that.
We make mistakes, so you don't have to.
That's true.
He says, I listen to you guys talk about rust in the latest code of radio.
And one thing that struck out to me is when Chris mentioned about corporate development
and being a slow ship to turn.
I've been working at my current job for more than two years now, and I couldn't agree more with Chris.
It becomes frustrating at times.
I recently have been flirting with the idea of stepping away and working as a freelancer.
I would like to know what you guys think about working as a freelance developer
and if the global market has enough space to employ such a kind of service provider.
Once again, thanks a lot for the show and wishing JB all of the best with an indie future.
So Dinesh comes in with what is essentially a perennial question on the show is,
can market sustain developer?
And I want to go indie.
I've done the corporate thing and I want to go indie.
Dinesh is somebody who is indie.
I got to say, think about it really hard.
This has got to be my standard advice now, I think on the show.
But I'm not trying to stop you from what you're doing because if you got an idea
and you think you can pull it off, you should go for it because you only live once.
However, humans always see the grass greener on the other side of the fence.
So here's what I've just been thinking about the last couple of days is,
this is so much harder than I remember running my own business.
I mean, it's a good kind of hard and like the victories are juicier and sweeter
and the defeats are more, for me at least, I can tuck and roll a little bit easier.
I don't know.
There's something about when I'm in the driver's seat and if I scraped the fender,
I get less mad than if somebody is borrowing my car and they scraped the fender.
And then all of a sudden I'm like, oh, how could you do something like that?
How could you have been so careless?
It's like that when I own and run my own business.
If I scratched the fender, well, okay, that's on me.
But if my boss is driving the car and they scratched the fender,
then my boss is an idiot.
I hate working for a company.
I don't like knowing, you know, so there are advantages and disadvantages,
but I will tell you this, Dinesh.
It's harder than I thought and I've done it before.
So think about that.
Think about how the mind can play tricks on you.
I've done this job before and it's harder than I remember.
And there's like a lot of nice things about just knowing a paycheck's coming in
and having health insurance and building up a retirement fund
and having free time to explore your own projects.
There's a lot of nice things about having a jobby job.
There's a lot of nice things about working for yourself, too,
and I don't want to dissuade you,
but I do feel a bit of a responsibility as somebody who's two,
three months into going independent again after a few years of not being independent.
It's a big commitment.
And to answer your question, if the market can sustain something like this,
I'll give my quick answer to that and then I'll turn it over to you, Mike.
And that simply is if you have a different enough product that somebody needs,
you'll find a market for it.
So, you know, there's the elephant in the room of COVID, right?
The things I would say if you wanted to be a freelance dev in 2019 are just not viable right now, right?
I would say definitely take some time, go to conferences, network,
try to hook up with either larger dev shops or people that will give you maybe not the best rate you would get,
but, you know, consistent work to fill out those fallow periods,
because especially when you start, those are going to exist.
Don't waste time tinkering with, like, nonsense.
You got to get stuff done.
You have to be very efficient as a freelancer relative to, you know, whatever.
Like, if you know SUSE, then I'm not even kidding, right?
Like, if SUSE Server is your thing, then don't even worry about it.
Just work on SUSE Server, right?
Ubuntu is your desktop OS of choice.
Don't feel like you have to, like, go buy a Mac and vice versa.
You got to just – I guess because you don't have the safety net, like Chris is saying,
you really don't have the luxury of just, like, tooling around for the sake of, like, you know, tooling around, right?
Yeah, well said.
In the past, I would have, again, recommended that you go to a bunch of conferences,
maybe even try to pick up a side freelance gig and see how you like it,
but over the years, I don't actually think that's too viable anymore.
So my question to you would be absolutely if you want to go do it, do it,
but do you have a way to get that first customer to book you?
And you're not going to book 40 hours a week, so let's say 20 to 30 a week.
That doesn't mean you're not working more than that, but it just means you're billing at 20 to 30 a week.
Do you have that first customer, someone like right off the top of your head that you could call right now
and pitch them and be relatively confident that they would be able to, you know, work out a contract with you?
Yeah, that is a great point.
When I decided to go independent again, I first brainstormed about who I would like to have as sponsors,
and those are my clients, right?
And in my mind, I thought, you know, System76 and Linode.
Like, I knew immediately that those would be the people that if I had my first choice who I'd want to work with.
And I knew once I started to have a conversation with them that things were going in the right direction,
I was like, okay, this is going to work.
Now, you can take that and kind of translate that to your field of work.
If you have somebody that you think you could probably call up or email and start working with them,
then that really is probably step one.
Start getting paid and figure that out, figure out invoicing, figure out all that.
To Mike's point, be ruthless with your time.
You know, I talked to a guy one time who was just convinced he was really a competent Ubuntu administrator,
but he was convinced that to go independent, he needed to go get Red Hat certified.
And he burned three months doing that and spent money and a lot of stress and energy.
I don't really think it changed the game for him much.
I mean, he was now qualified for a different system.
But in the end, you just have to focus on what you're good at and be willing to be a little ruthless
and think about it in terms of survival.
It really is about survival.
And you'll have the luxury to think about it differently once you have things rolling,
income is coming in, maybe you've even staffed up a little bit.
That's when you have the luxury to start thinking about it from a more higher level,
entrepreneurial, grandiose vision level.
But at the moment, you have to execute.
And do keep us updated on how it goes, Dinesh.
Even if you decide not to, I'd love to know your rationale or reason for that too,
or if you decide to pursue it and how it goes.
We'd love to follow your journey.
And not to be too doom and gloom.
It's certainly possible to do, and if you feel passionate about it
and you have a good idea of ways forward, by all means, charge.
Linode.com slash coder.
Go there to get a 60-day, $100 credit towards your new account.
They're my hosting provider.
I've known about Linode forever.
They've been around since 2003.
They got started three years before AWS got started.
And I followed them at community events like Linux Fest Northwest,
which they're sponsors of and have helped to make it possible.
But they're great.
They provide easy access virtual servers
so you can host anything you want in the cloud.
Maybe you just want storage.
They have S3-compatible object storage.
Or maybe you want to host your website or a portfolio.
Linode can help you there too.
Linode.com slash coder.
I started using Linode a couple of years ago when I had sold Jupiter Broadcasting.
I wanted to keep my personal stuff separate.
You know, separation between church and state sort of thing.
And I started using Linode and realized how great they were.
And I watched them over the last couple of years just get better and better.
And now how perfect is it?
Here we are bringing Jupiter Broadcasting independent again.
And we get to work with a company like Linode to make it possible.
Linode.com slash coder.
Go there, support the show, and get a $100 60-day credit.
And you're also supporting a sponsor that's making it possible
for us to go independent again.
Unlike entry-level hosting services that lock you into their platform,
Linode gives you full back-end access to customize and control your server
to fit your needs.
I love their new Cloud Manager UI.
I mean, new to me.
It's been around for a little while now.
But when I first started using Linode, I was watching them make some of these
upgrades and improvements that now blow everyone away.
Enterprise-grade hardware, next-generation network,
and 11 data centers around the world.
And as you know, Linode costs 30 to 50% less than major cloud providers
like AWS or Azure.
And they've been around longer than Azure.
They're the largest independent cloud provider, period.
Fully independent, and they're awesome.
This last weekend, I decided I'd set up a Minecraft server.
One-click deployment for a Minecraft server.
It's pretty simple, but you can build it up from scratch
to anything that runs on Linux will run on Linode.
So go to Linode.com slash coder.
Get that $100 day credit for 60 days and support the show.
Linode.com slash coder.
I learned something new today.
I learned, or at least was reminded about the traveling salesman problem,
which I think maybe I'd heard you mention to me once before,
but had completely forgotten.
And now it appears there's been a significant breakthrough.
As one of the scientists put it, her career is now complete.
Well, there you go.
What else can you say to that?
So I kind of looked into this.
The traveling salesman is an optimization problem at the core of it, right?
It's a handful of foundational problems that theoretical computer scientists
then can use to see how efficient they are at solving a problem computationally.
For example, the traveling salesman is like routing to cities
and trying to make the most efficient routes.
Yeah, so traveling sales problem,
it's one of these old computer science problems,
something that really like math nerds who might program in Julia
would really get excited about.
There are potentially some practical uses for this breakthrough
if they can, you know, make it more than a basically academic paper, right?
Not to downplay it, it's pretty awesome, it's pretty great.
And it suggests there is more runway to optimizations
than perhaps previously thought.
Exactly.
So it suggests there's more headroom without going into like crazy quantum computing
and like stuff like that.
Like there's more computer science algorithmic work that can be done.
And doesn't that make us all happy?
Thrills me, Mike, it thrills me.
So Hayden Barnes wrote a post titled,
No, Microsoft is not rebasing Windows to Linux.
He says, I have a unique perspective on Microsoft's Linux involvement.
I helped deliver Ubuntu on the Windows subsystem for Linux
in my day job at Canonical.
I also get briefings on Microsoft products as an MVP.
I am deeply skeptical of the notion that Microsoft is going to shift the core
of the Windows operating system to the Linux kernel
for both product and engineering reasons.
And then he proceeds to slay the idea with tons of reasonable rational reasons
that Microsoft would never rebase Windows on Linux.
Not to point out that it's clearly just got all of the pieces of clickbait
for tech articles too, which should immediately make one skeptical.
Well, I know one draft that I'm deleting. Thanks, Hayden.
You know, he makes a point in here that I thought was like interesting.
I don't know.
Maybe it's not telling, but to me it seemed particularly telling.
He says, one of the reasons it's unclear if Windows user space
could even be rebased from NT to the Linux kernel
and maintain some compatibility that Windows is known for.
So get this, the NT kernel has 400 documented syscalls
plus about 1700 documented Win32 API calls.
Linux has 313 syscalls on AMD64. Total.
Part of the reason Microsoft switched from a syscall translation layer
with WSL1 to a virtualized kernel with WSL2
is because re-implementing all of these crazy calls
and non-standard ways developers had to exploit the Linux API
was, as he puts it, a pain in the ass.
So they just said, nope, we're going to do it with a virtual machine.
Also, he points out, and I agree, Microsoft has doubled down on Windows.
I feel like Windows 10 has gotten more attention from Microsoft
than we've seen in a while.
Okay, so I like Hayden. I know he's a great guy.
If you don't know, he works for Chronicle.
Focus listening on the Windows, WSL, Ubuntu stuff.
Right, great.
You guys both seem to think they've doubled down on Windows 10,
and I guess I missed it.
Oh, really? You don't see it?
Other than Paul Therot, I don't really read any deep Windows people.
And he's a touch cranky, we could say.
I don't know. I feel like if you look at it,
they've kept good with the promise of continually updating Windows.
They've created the different rings that you can subscribe to
to get improvements faster.
And through that, they have landed new stuff
from new versions of DirectX to a whole new version,
replacing an Explorer with Edge,
and WSL itself has been delivered this way.
To me, when I sit down to use Windows 10,
it feels like an operating system that is maintained.
It's recent, it's still getting active work is being done on it,
and there's usually a ton of shit in the Microsoft update and all of that.
And I get the sense that Microsoft is still investing
in using Windows 10 very heavily now.
Compared to a Linux distribution, it's a ghost town
in terms of updates and new things coming in and community involvement,
but from a corporate desktop platform,
it seems like it's still very active to me.
I guess it seems from the outside,
because honestly, I haven't installed Windows 10
since WSL 2 was released.
Or actually, when it was in preview.
And now we're getting somewhere. There we go.
Yeah, okay. Maybe if I had to daily drive it from time to time,
I wouldn't have this opinion.
Well, because the story we didn't put in the notes here
is their new GitHub code spaces, right?
Which is effectively VS code in the cloud, but super nice.
Yeah, yeah, right.
I feel like they're doing more and more to maybe not abstract,
but kind of deprioritize the actual desktop.
Well, see, this is where, again, I think I line up with Hayden.
He writes, they recognize a more diverse set of operating systems
and platforms are powering the computing devices we use,
which now includes Android, Ubuntu, iOS, Mac OS,
the Echo, Chrome OS, and ARM, not just even x86.
Microsoft has shown that it's able to adapt
by making relevant products and services available on those platforms
while simultaneously keeping their own platform competitive,
mostly, I would say.
And then that's not my addition.
And then he also points out how they've been driving some innovation
in the Android ecosystem even.
And I think what you have is a non-bomber Microsoft
that is willing to make money from all platforms
and is accepted that they missed the mark on mobile,
and as a result, there's a billion devices out there
that don't run their software, don't run their operating system,
and they've pivoted.
You know, it's cliche to say Saatchi and Adela has changed things,
but when you look at the changes throughout the entire stack
of the organization, it seems like they have very readily adapted
to an environment where they don't have to dominate the desktop
and the browser to be competitive, quote unquote.
Yeah, and I think at this point, Saatchi has been there long enough
that you can actually say that he really did change things.
You think?
Yeah, it's been a couple years, right?
It's been a few.
It's been a few.
Yeah, so I think they are just getting better at playing
in everyone's playground.
I know this has been my hobby horse for the last month,
but you mentioned ARM, so you did this yourself.
Okay.
They all need to know that the Klingon predators from Cupertino
are about to decloak on their faces, and with 20 hours of battery life,
blow them out of the water.
So I actually agree with you.
I bet you Microsoft is wise enough to be like,
we have to be able to, within a couple months,
say that Windows 10 can get on ARM Mac-like performance.
I know people don't love this take, but I firmly believe that,
you know what, Apple Silicon is going to be a home run for them.
Well, and look at how they've stepped up to the plate on,
I can speak to iOS, Android, maybe is different, but on iOS,
the Outlook app and the Office apps are good.
They're like really good.
I was surprised I had a client that I was doing several weeks' worth of work for,
so they just wanted me in their Teams, Microsoft Teams chat
for their meetings and their chat and file transfer,
and I was really kind of hesitant.
I didn't want to have to, you know, have yet another chat program
and use a Microsoft app that was going to be a substandard app and all of that,
and you know what, I was really impressed.
I was like, they actually tried.
They wrote it like it was a first-class platform,
and that change in mentality has been a big,
it's a big shift from where they were, say,
in the heydays of the late 90s and early 2000s.
Look, you have all the Windows OEMs, right?
Let's put them in an ancient town.
I don't know, let's maybe call it Shaka.
Let's put them in the town of Shaka.
They have this wall called Intel, and Shaka, the walls are falling.
I'm telling you, days are numbered.
Like whoever doesn't catch up is just getting blown away,
and it doesn't matter if you're Windows or Linux or what,
you're getting hammered because top-of-the-line performance
and possibly 20-hour battery life, you have to have an answer,
and you're right.
Maybe it may in fact be that we get some super-duper surface,
and like all these under-the-hood changes
that you and Hayden are talking about in Windows 10,
it makes a ton of sense to me, so yeah, you're right, I'm wrong,
that they probably are going to do it.
I think the reason, besides the fact that it's fantastic clickbait,
that this rumor keeps percolating,
and the same reason why the rumor keeps percolating
that Microsoft is going to acquire Canonical
is because there is some logic at the core of it.
It just kind of makes sense in a way.
Because when I do use Windows, bless its little soul,
it feels like something from the 90s to me.
What soul? Ooh, too much.
It just seems old.
It seems like it's based on an old technology platform,
and I think one of the most under-accredited things
that Microsoft suffers from, I guess,
is people don't give them enough credit
for how in some unbelievable fashion
they've managed to drag this code base
from the NT days to where we are now.
And I'm sure they've replaced large sections of it,
but still so much technical debt.
I mean, that must be what a large portion of the team focuses on,
is just resolving technical debt constantly.
So let me defend some technical debt here,
and this is going to be a mite confession time.
I have been, for the last several months,
aggressively recommending Surface Go tablets to customers.
Aggressively, you say?
Because many of my customers now have needs
that involve basically automating processes
and involve, like, weird hardware dongles, right?
Like, things like scales, sensors, all kinds of weird stuff.
Proximity sensors in one case.
All over USB.
Some over USB. Some over serial bus.
No.
Hey-oh, oh, yeah.
Jeez, that brings me back.
Morty, we're going back.
Wow.
And there is one operating system that stands alone
in terms of whatever crap we're going to order from overseas,
there's going to be a driver,
and if there's not, the random Windows generic drivers
are good enough that you can at least get the data off the serial port, right?
Yep, and there will likely be some really horribly designed application
that that weird hardware comes with that only works on Windows
and may have to have administrative privileges and all of that,
but it only works on Windows.
Well, and for our purposes, we're actually writing compatibility
with this hardware directly into custom applications
we're making for our clients.
So it's like we're going all the way down,
in many cases importing, like, com libraries to do this stuff.
But they still support those com libraries.
I just want to say that, right?
Like, it's still there.
Yeah, and that's one of the biggest arguments for,
or I should say against, this rebasing,
is that it would undermine one of the huge values
that it brings the enterprise space, is that level of compatibility,
which one day will have to go away.
I mean, ultimately, that's why I say the argument does make some sense
because all of these are extremely valid reasons in 2020,
but what about 2040?
I mean, I know that seems like forever away,
but it's just as far away into the future
as my history with Windows goes into the past, right?
It's not, I mean, it's within the realm of my lifetime.
There's just, I can't see it conceivable that there's still
a Windows desktop operating system running off an NT base.
It just doesn't seem conceivable in that time.
But can't you see some sort of like, you know, WNTL
or whatever you want to call it, some sort of system, right,
where they're basically just virtualizing a little NT kernel?
Of course, I mean, because CPU architectures could be different,
it's going to be virtualized.
And that's when, so when Hayden makes a lot of these arguments,
if you keep in the back of your mind, well, a really modern hypervisor
with direct hardware access that is even more capable
than something like what we see with WSL2 or KVM at its best,
something that's even maybe built in with CPU support
like Apple's doing with their virtualization on the Mac platform.
And now imagine that 20 plus years down the road, right?
That could be just super high performance.
I mean, it could be virtualization in a sense,
but nothing like we think of it today.
And when those kinds of technologies are available,
it just seems preposterous to think that they wouldn't take advantage of it.
So if they were going to do something like that,
would they create a brand new operating system from scratch
with its own kernel and all of that?
Or would that be the time to switch?
It almost gets back to the CPU architecture stuff
because I have sort of been on the bandwagon
that like ARM is going to take over the world.
But what if it doesn't?
Yeah.
And somehow we see an explosion in like, you know,
Chris Lattner, I forgot the name of the firm he's working at,
but he's the guy who invented Swift or from Apple.
He's working with some company that's making like custom risk architectures for people.
And we could possibly, you know, this is not my argument,
but I've heard it before,
be in a world where there's like an explosion
in like bespoke custom architectures for really optimized devices.
Yeah.
I don't believe that for like business reasons of, you know,
scale and things have to make sense.
Well, except for, you know, the Mac becomes a type of use case.
The phone is a type of use case,
a desktop tower that's running risk processes or open power PC processors.
The thing, the argument I would give against ARM fully taking over.
I can absolutely see why it is,
why it is winning super hard in vertical solutions.
I really, it really makes a lot of sense on a vertical solution,
like what Apple or Samsung does.
But zooming out from there, ARM has been around for 20 plus years
and it really still hasn't managed to replace x86.
And I think part of the reason for that is,
it's still very complicated.
Like just look at the Linux support
and how when you want to boot Linux on an ARM small board computer,
you really need to get a kernel that supports that GPU
and that boot method on that particular SBC.
And you can't just take Ubuntu 18.04
and boot it on a Pine 64 or Rock Pro 64
and then go boot it on a Raspberry Pi 3.
It just, it doesn't work like that.
The developers have to put special effort into ensuring compatibility
with each one of those SBCs.
And it's not like that with x86.
You don't have to download a certain kernel
that works with gigabyte motherboards using Ryzen processor
and a gigabyte motherboard using an Intel processor with an Nvidia GPU.
You don't have to get an ISO that slices and dices it all the way down like that
because it's become a general compute platform.
ARM hasn't really reached that yet
because each implementation is to its own in a sense
because people are licensing and then building a system around that.
And what we have is a whole lot of fragmentation.
And you wonder if a totally open system like RISC or OpenPowerPC
wouldn't be a little bit more akin to that general computing platform.
Like it wouldn't be more of an easier transition.
It'd be more of a horizontal move.
Just some workloads would use RISC CPU.
Some workloads would use x86.
Some would use ARM.
Some would use OpenPowerPC.
And it would not become an assume
that the predominant workload is run on x86.
But it also wouldn't be ARM.
It's going to be this multiple CPU future, I suspect.
And then you'll have different vendors
who do these vertical integrations where they just nail it
and they just manage to eek every bit of performance out of that vertical stack.
And then you'll have more general systems that maybe don't really nail it so much
but they make a good server platform or something.
They have overall a good heat distribution, power use, and performance ratio.
It's a multi-CPU future, Mike.
That would actually be very interesting and incredibly complicated.
Yes. Yes, very much so.
And you wonder where it all lands.
And if maybe because if it gets more complicated
maybe it kind of ends up insuring some x86 longevity
just because it's a default going to work solution.
Yeah, who knows?
This will be one of those clips we play in a few years and we either blew it.
Or we were weirdly right.
Yeah, right. Exactly.
Well, we actually we got to get to the main story of the day, really.
I mean, that's really the topic that we should dig into.
So we'll take a moment.
I'm going to thank a Cloud Guru for sponsoring this episode of the Coder Radio program.
And they have something kind of special I want you to check out.
They have a programming use cases course with Python.
The best way to learn and improve as a programmer
is really to practice your programming skills by solving problems.
So what a Cloud Guru has is a completely project-based course
that will walk you through various projects from start to finish
by breaking down the problems and solving them using Python.
And along the way, you'll learn intermediate to advanced Python topics.
And then you get to see how you apply those concepts
to the things you've already learned to solve different problems.
Learn some programming and solve some problems using Python.
We'll have a link in the show notes to check that out.
It's four hours of content, 31 total lessons, and five hands-on labs.
A Cloud Guru dot com or use the link in our show notes
to go directly to the programming use cases with Python course.
And thanks to a Cloud Guru for sponsoring the Coder Radio program.
So there's this tech story going on right now that proclaims
to hold the future of programming in its hands.
And you'll find all kinds of coverage on this story
from the sky is falling to there's a group out there
that says that you have to defend free trade
and Google must be punished for what they've done.
And of course, I'm referring to the now classic Oracle v. Google,
which has been going on since the start of this show
for a decade this thing's been going.
Essentially, Oracle is contending that 37 Java APIs used in Android
are subject to copyright.
I can't believe this crap is still going on.
This is the story that never dies.
And because we've had the break
and because this story has been going on for a decade,
Mike and I thought maybe we should sort of do a bit of reset
to bring you up to speed.
We're just going to tell you the stuff that matters.
And it probably starts with something we love to talk about.
And that's Sun Microsystems.
Thank God I got to get a handkerchief to cry into.
So I have this really, really adorable clip
from the heyday of Sun Microsystems.
Well, that's not really true, but it was the heyday of Java
about 1995, Sun Microsystems was 25 years old.
Somewhere around there.
I may have the math wrong,
but I think it was 25 years into Sun Microsystems' life.
It had already been around, yeah.
It had been around for a while.
That's the point I'm trying to make.
They were feeling good, right?
And it's funny, Mike, they had a slogan back then.
And this is the 90s, right?
And it was even before then that they came up with this.
And it was so on point.
The network is the computer.
The first 25 years at Sun have been just huge amounts
of innovation.
We popularized TCPIP.
We stunned the world with NFS.
We delivered Spark and Solaris and Java
and all of the other new technologies
that you've seen Sun deliver.
And we're on 6 billion devices.
Sun started with a very simple idea,
which is to take open standards on the software side
and combine them with open standards on the hardware side,
which at the time was apparently quite revolutionary,
and everybody liked it.
So this whole notion of open systems really started
with Sun Microsystems 25 years ago.
Early on in Sun's career, long before I got here,
was a fundamental idea that if you propagated a standard
across the world and literally shared it with the world,
you would create for yourself more opportunity for yourself
and for your customers and all the developers
who worked with both of you.
Our whole strategy of sharing open interfaces,
open source, even open sourcing the hardware
is going to create just an explosion of technology.
I think what really sets Sun apart is the idea
that we live so fully by the idea that you should share
your innovation with the world.
Sun was really the first company that defined open standards.
I think that's an interesting little bit right there
about how open they are and how they felt like
you should share your innovations with the world.
So I believe around their 25-year birthday,
they were about three years from being sold and going defunct
when this clip was recorded.
Somewhere in that range.
The chat room, Optimus Gray got the date for me.
Sun Microsystems was founded on February 24th, 1982.
And they recorded this, and then three years later,
they were gone.
And I think you could blame the fall of Sun Microsystems
on a bit of being a victim of the dot-com boom and bust.
Also, the x86 market combined with Linux
ate a lot of their special use case lunch.
And you heard them there.
They were famous for NFS.
And that's why they also were really well known for storage
and one of the reasons that they started
the ZFS file system project.
But they also started this little thing known as Java.
And this little thing known as Java had APIs,
which Google needed to re-implement in order to have Java compatibility
so that way they could reach a large user base quickly.
And in doing so, they directly re-implemented some of this,
which Oracle contends is 37 APIs.
Google contends that not only did they not need a license for this,
but that Sun was totally fine with them using it.
And Sun even knew about it potentially.
And that actually does seem to check out former Sun's CEO.
I have a link in the show notes.
I said, yeah, they don't need to pay for a license.
Jonathan Schwartz, which he was the CEO at the end of Sun Microsystems,
he was interviewed by CNET back in 2012.
And he said, as long as Google didn't use the name Java,
he was fine with it.
They didn't need a license for the APIs.
That's according to the CEO who was running Sun at the time Google adopted
and started using Java.
So I think that's pretty noteworthy.
But flash forward, Oracle buys Sun as times change.
And some emails also came out that seemed to indicate that Android Chief
Andy Rubin actually felt they did need to license the APIs
and that they were copywritten.
And he wrote a couple of ideas on how they could address the issue.
And then they never did.
But they appear to have identified it as a potential issue that these APIs
may be considered copywritten.
And they appear to have evaluated the risk and continued to proceed.
Oracle got its hands on those emails, which I have linked in the show notes,
and brought that to the court and has started this case that has gone back
and forth and back and forth.
And I have a quick clip from Bloomberg to bring us pretty close to present.
Both Google and Oracle have won, lost, appealed.
Where are we now?
Yeah, so we're on the third go-around now between appeals and trial.
As you said, the case was filed in 2010.
There was a trial.
There was an appeal.
There was another trial.
There was an appeal.
Now we've gotten to the point where it looks like Google may petition
the Supreme Court.
They were on the losing end of the last round of appeals in which,
as you said, the court ruled that their use of the Java APIs was not fair use
and that there was no defense to the infringement and that it needs to go
back to the trial court to decide what damages are owed Oracle, if any.
Well, and Google has made that appeal, and verbal arguments have been heard
by the Supreme Court after a delay due to COVID.
And the consensus from the journalists attending that verbal hearing,
or I'm sorry, that virtual hearing because it was done like in a Zoom-type call,
is that the Supreme Court seems to be seeing things Oracle's way.
And the fallout could be that a company could decide that another company
that's used their APIs is now violating copyright.
And you could see how this could spread throughout the industry
like a wildfire of lawsuits.
It sort of sets a precedence from the Supreme Court level that could be
retroactively very bad for the development community.
So I think that brings us up to current.
Yeah, this is a mess.
It's been going on for a decade.
Towards the end there, Sun was cursed with an ancient gypsy curse that they
couldn't make money while having one of the most popular programming languages
in the world.
Great.
There's a lot of history, Chris.
I don't know how far back into like the tit for tat because this lawsuit has
gone through a number of phases.
And for me, the thing that's always been the most striking and what always felt
like it was going to go Oracle's way, I think it was 2012 maybe.
They had a really damning testimony from Andy Rubin.
He was the head of Android at the time.
And he was getting grilled by Oracle's lawyer.
And he was reading through that email thread we've mentioned.
And in there, Andy Rubin says, we probably have to license this because our guys
have seen this.
There's no way we can do a clean room implementation.
And that in being an email that Oracle had, the lawyer seized on that part
about how they couldn't do a clean room implementation and was able to
essentially get Rubin to admit that meant that they had been too inspired by
the Java code.
And it kind of got them in this bad light.
And since that, I really feel like since that testimony in 2012, it has been
lose after lose for Google.
And the tech press has just done a really poor job of understanding what's going
on here because they're just so inherently pro Google.
Yeah.
And this is a big case of emails.
I mean, there was a couple of cases where the Sun attorneys were able to
examine the source code or I'm assuming engineers who work for the attorneys
and find cases where they had literally copied Sun's code, leaving the comment
lines, you know, like the comment headers in the files.
Yeah.
Which was not very smart.
So what do you make of all this doom and gloom that like if Sun wins, this is
going to be, you know, there was that op-ed in the Wall Street Journal by the
general counsel from Microsoft with Google's general counsel, apologies for
not knowing their names, where basically Microsoft is taking Google's side,
you know, painting the sky is falling argument here.
I do think it would be a bad thing.
I think it could open us up to a new generation of patent style lawsuits that
only instead of being patent law would be copyright law.
However, zooming out and going to a higher level, it could also force a
further shift to free software and open source where this problem is solved.
It's implicit in the license agreement upfront, you know, and there's no gray
area.
There's no possibility you're going to get screwed by big mega corporation
that wants a piece.
It is clear and free to navigate and it could draw more people to using more
free software and open source development.
And I don't know, maybe you would actually be in not in their best interest
in the long term.
But I could be wrong.
See, it's funny because our experience with patent rules over the years has
made me think that in fact, that is exactly what will happen.
Right.
Somebody is going to run around and say, oh, well, you know, we invented
this method for blah, blah, blah.
I wonder if it's the actual copying of the code that gets them hit because
you could see a way where maybe they rule narrowly and throw out a lot of
Oracle's claims.
This is where like lawyers can go back and forth on this all day long.
This wouldn't be too surprising of an outcome, though, would it be a pretty
down the middle outcome that gets Oracle the win they want?
They get some money but doesn't set precedents for the rest of the industry.
Some sort of narrow ruling could happen here.
And that would probably be at this point the most ideal outcome, because I
don't think you're going to have Google walk away winning this.
It doesn't seem like it, at least.
I guess oral arguments don't necessarily indicate the final judgment of the
Supreme Court.
It just doesn't look super good.
I mean, I'm sure they're kicking themselves in the butt now because it would
have been much easier to make a deal with Sun than to make a deal with Oracle.
I mean, Google was doing good at that point.
They had plenty of money.
Plenty of money.
Maybe they should have bought Sun.
Wow.
That would have been, yeah.
Yeah.
Here's a hot take on it, though.
I think this is yet another devastating blow to computer users in the tech
industry that is being delivered to us by Google.
They dumped Android on us, and they used Java to make it popular.
They undercut developers out there.
They've done one thing after the other.
I mean, I could also sit here, and I could rile on consumer privacy and all
the data collection they do.
I could talk about the advertising market and what they've done to the
browser market.
I could talk about how they had a great thing going with carriers, but they
capitulated to companies like Verizon and Sprint and let them ship their
crapware so that way they could compete with Apple.
I mean, there's so many areas where you look back in modern computing
history, and Google has screwed the little guy for their own gain.
I guess I'm just not really feeling very sorry for Google right now.
I don't want them to lose this because I think the overall net impact on the
industry is bad, but they should be held accountable for putting us in this
position because they're going to screw all of us again.
They never get held accountable for this.
When you read ours or pretty much any of the tech coverage, they're
essentially trying to put all of this on the fault of Google's counsel.
Oh, Google's counsel didn't argue very well.
It's Google's counsel's fault for not representing the situation properly.
That is such horse manure.
It is such horse manure.
It is the tech industry trying to backwards figure out how they're going to
problem solve for the company they've been advocating the entire time when
they don't have a solid case, and they actually did possibly make a wrong
choice.
They made a mistake, and it's going to possibly screw all of us.
You just see them backfilling it by blaming it on the counsel, and we'll
just move on.
It'll be Oracle's the bad guy.
Oracle's the big evil company.
Larry Ellison, he's so bad.
That'll be the coverage, and there will be no accountability for once
again Google screwing us.
You have to go back to the time though, right?
What Google was afraid of was losing their, don't say monopoly because they
don't like that, but their stranglehold on search because of iPhone, right?
Remember, that was the problem they were solving.
They weren't really trying to make a great OS.
They were trying to get an OS that's popular enough that they would retain
their search dominance.
Which is why they made those undercutting deals with the carriers that let
them shovel their crapware on Android phones.
Why they gave billions to Apple to put Google as the default search in mobile
Safari, right?
But there is like a kind of comedy of errors aspect to this, and I know people
hate it when I bring this up, but it's just so damn funny.
One of the things that was revealed in one of these many trials was that in a
set of emails, they knew that they had an easy way out.
They're good friends at Microsoft.
They could have easily just used Hot Net and C sharp and not had to pay a damn
thing to anybody.
Back then, they desperately, deeply hated Microsoft.
They hated, right.
It was just like actual, if you look at it, like actual animosity that stopped
them.
Yes.
And they kind of figured Sun were a bunch of wimps, right?
I'm sorry.
And back then, you know, they thought this was the way to go.
There's all these developers who intimately are familiar with Java and we
could have a winner.
They didn't make that decision from a performance and battery life
standpoint.
And remember, it was these slow old mobile arm CPUs back then.
So it was so much worse.
I think particularly young people don't know how bad those first Android
devices were and how unoptimized the whole Android stack was.
They have done so many major improvements over the years to speed up
launching and real time building of these apps that it's it's a non-issue
now.
But back then it was painful.
You have Android devices that require double the memory and they'd have a
worse battery life.
Jiggity scrolling.
Yeah.
Oh, I mean, it's still not great, but it was so bad back then.
And so it was clearly a move to just dominate the market at every level.
And it was just to me, it seems like they decided it's a risk calculus
we're willing to make.
Let's proceed.
Damn the consequences.
They were fundamentally right in that the reason they just kind of rolled
Sun was because, again, I loved Sun, but like everybody was Steve Wozniak
at Sun.
But you needed like a jerk.
You needed someone who's like, I don't care about open source.
I don't care about the community.
Go to hell and pay us.
Yeah, because Sun very promptly.
Sun made nothing on this.
A lot of the history of Java is the history of Sun building this great
thing that millions of developers ended up using.
And they didn't get a goddamn thing.
You got to remember, though, they did make a lot of money in large
business with some of their...
On Solaris, yeah.
Solaris and even in the printing industry, like they did have some
fundamentals, but time changed.
I think when the idea of Java came along, they had another cash cow.
They were making good money and they saw this as part of an overall
strategy.
They never really got to the point where they could just completely
monetize off of Java directly.
And by the time they started trying to make efforts to do that, it was
just too late.
Right.
Well, they had the Spark stations.
Right.
That was one of their...
Towards the end, that was like...
Remember Next was their competitor?
Yeah.
Remember Next?
Another good win there.
Well, I actually think it was Jobs who coined the term, the computer is
the network, and then Sun adopted it and it perturbed Jobs quite a bit.
Yeah, but Spark...
I mean, Spark stations at the time were very good.
They were also ridiculously expensive.
Yeah, the bank I worked for had a few of them to run all the check
printing and the statement printing.
But it's neither here nor there.
I mean, we can both be sad for Sun because a world...
I just want to say a world where Sun was one of the big tech players
today would be just like a fundamentally different world.
I think there's a really fundamental business lesson in this.
See, one of the things that you touch on and other people don't really
mention this and I think it's an astute analysis on your part is Google
did a risk calculation when it was Sun Microsystems.
And you can see from statements from the CEO and you hear it from that
clip that I played, I think Google was right to assume they could
probably just proceed to use all that stuff and it was going to be okay.
That was the spirit of Sun Microsystems back then.
But the business mistake was not considering that things change,
businesses sell, and new owners come rolling in.
You've got to protect yourself from all kinds of eventualities.
And if you're going to base a new mobile platform that will be a
keystone aspect of your business, you need to cross the old T's and dot
the old I's and get something on paper that says you're good to use this.
Because while I think you can just infer from just the clip I played,
Sun was cool with it.
When Oracle came along, that's a different business.
They see use of their property as they see it differently.
And Google screwed up in not just getting that license on paper,
even if it was something from Sun that said, you know, one paragraph,
use it as you will like, God bless Sun Microsystems.
That would have prevented all of this.
And the fundamental business mistake is right in there.
And I think all of us should take that as a lesson.
The business you deal with today may not be the business you're dealing
with tomorrow, especially in the tech industry, and they didn't protect
themselves from what seems like, in hindsight at least, an obvious eventuality.
One thing I don't know, has it ever come out, when Sun was on the ropes,
was there not anybody at Google, like have there been any emails released
to this effect that was saying, hey, we have this giant liability bomb.
And, you know, because they did still hate Microsoft because, right,
there was rumors that Microsoft was going to buy Sun.
Like, maybe we need to go help out Uncle Scott McNeely, right?
I don't know, man. I haven't seen anything.
I haven't seen anything either.
It's such a weird oversight to say, maybe we can't let them fall, right?
You're thinking about it from a Google now that's bought Motorola.
You know, they bought Nest.
They've done all these weird purchases and investments,
so it seems totally reasonable that Google would make a purchase like that.
Yeah, because I think today they would just buy it away.
Yeah, that's how they would solve this.
But Google back then was, they were pure.
Remember like the big thing about Google used to be that if they bought a company,
they would rebase the company's entire infrastructure on their own systems.
Which was insane.
Those kinds of things just started going away a little bit.
And they started lowering their standards,
and they started buying and then selling companies for a loss.
And now it seems like in that hindsight, yeah, they should have just done that.
It probably would cost them about what they're going to end up paying Oracle in fees.
And God only knows once you add the lawyer costs.
I mean, they've been fighting this for a decade.
What kind of expense must that be?
And just a drain on company resources and time and energy.
You know, it's just a case for the only one I really feel bad for is son.
I'm sorry.
Yeah, absolutely, because there's no really good guys in this.
Right.
And I get Google was a little more scrappy at the time,
so it's kind of like, you know, whatever.
You take risks when you're small.
But remember, Chris, don't be evil.
Yeah.
I mean, I know, you know, I've been talking about this forever,
but it feels like something significant is about to happen
now that it's at the Supreme Court.
2020 may be the wildest year yet when it comes to, you know,
like every category has something going on in life.
I got to tell you, if the doom and gloom projections are even half correct
about what this could be, it is going to be a rough time to be in ISV.
Yeah.
Probably regardless, this entire case is going to be something that people study.
Yeah.
This is going to be something that's taught to future students.
And if it really does have even half the outcome that the doomsdayers are saying,
people will be trying to educate themselves on what happened.
And it'll be a moment in our life where it'll feel like everything changed,
but it took a decade to get there.
And you see it slowly building again right now with the tech companies
and the talk about antitrust.
And I think it's interesting that IBM just announced their quote unquote breaking up,
which is very much monopoly terms,
which of course they were not really at a risk of when it comes to cloud.
But it's just interesting that I think we're about to see the results
of something that's been a decade in the works,
while something that's also going to affect the tech industry over a decade
is beginning to spin up right now.
But don't you think it's kind of their fault?
I mean, all of them.
They got a little too fat and a little too happy.
Yeah.
And it's time for a hangover.
Yeah.
I mean, the size of the tech industry is bizarre.
I can't even comprehend how large Apple is.
No.
No, you really actually can't.
I mean, I think the only way I can kind of begin to wrap my head around how rich Apple is
is when I compare them to the wealth of nations.
Right.
They won't be the last company that's this size.
That will have significant ramifications.
We'll see.
Well, I want to thank the members.
We had our first quarterly report go out,
and a few folks went and signed up at coderqa.co to get access to that
and to get access to the limited ad feed.
It's a quarterly report that we put out.
And when you become a member, you support the show, you get access to that report
and to the limited ad feed at coderqa.co.
Thanks to everybody who supports us over there.
Mr. Dominic, is there any links you want to inform the people about this week or plug?
Actually, you know what?
I just had our friend Wimpy on the Mike Dominic show,
so I think you'll all like that.
Check that out.
Oh, very good.
Very good.
Is it out?
It's out.
Yeah, it's out.
We should toss a link in the show notes so people can get it real easy.
They can just go listen to that after this.
Sure.
All right.
Well, the show is at Coder Radio Show, I think, or is it Coder Show?
Dang it.
Why don't I know this?
Coder.show.
No, no.
I'm talking about the Twitter handle.
This is how you know I'm just not a Twitter guy anymore.
It's Coder Radio Show, and somebody else has it at Coder Radio,
and they do not like it when I keep forgetting.
That's great.
You know, we ought to just have a campaign of accidentally aggravating them
until they just hand over the account.
Wow.
Yeah.
So the site URL is – no, I kid – is coder.show,
and you can get links to what we talked about today at coder.show slash 383.
And I think that's just about everything.
I'd love to have you join us live.
Maybe I'll mention that.
We do this show Mondays, noon Pacific, 3 p.m. Eastern.
We've got a chat room that goes along with us, and we love having you there.
Thanks so much for joining us on this week's episode of the Coder Radio program,
and we'll see you back here next week.

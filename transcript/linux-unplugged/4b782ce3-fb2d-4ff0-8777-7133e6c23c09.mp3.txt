This is great for us now that we're really an audio show.
There's a pair of sunglasses out there
that would have made a great sponsor back in the day
when we had sponsors.
They block out all of the screens around you.
And it's not actually all of that tricky.
There is a company out there called
Casper that makes not the mattress company.
I guess it's a different company that
makes a screen blocking film.
And one entrepreneur with a last name of Blow, I think,
or Blue, I can't remember his last name,
he popped out the lenses in these cheap old sunglasses,
put a pair on with this film over it,
and then set off into the city and realized
that he was blocking all of the televisions around him.
All the annoying signs that use TVs,
all the TVs in the bar that you're going to,
and you don't care about that sports game on there.
You don't have to see it anymore.
So his name is Blue, B-L-E-W.
And they're the IRL glasses.
Yeah, they've even formed a company and, you guessed it,
a Kickstarter.
They've got a Kickstarter.
Wow, they've raised $5,000 since we went on the air.
That's not bad.
When I first loaded this page about a half hour ago,
they were at $75,000.
Now they're at $80,000 with 1,207 backers
with 21 days left to go.
You can see everything except screens, they say.
Yeah, I guess, actually, anything
that is just a polarized lens rotated 90 degrees
and then flattened can produce the same effect.
You don't actually need this one company's special film.
So you can go play with this right now.
And it won't block OLED screens.
If you ever try to lie on a sun lounger
and read your phone with sunglasses on,
sometimes you get the same thing.
Have you ever gone swimming with polarized sunglasses on?
It's pretty cool.
This is one of those kinds of things that I wouldn't mind,
but you'd have to bring a pair for everybody.
You go sit down at a restaurant and you're
wearing these sunglasses, it'd be distracting
for everybody at the table.
They get used to it just a couple times.
Oh, that's that weird thing Chris does.
Now you've got to bring a pair for everybody.
This is Linux Unplugged, episode 270 for October 9, 2018.
Welcome to Linux Unplugged, your weekly Linux talk show
that's drying the tears of those G Plus users.
My name is Chris.
My name is Wes.
Hello, Wes.
We do have some Google news to get into today, but not too
much.
We won't overwhelm me because then we
have some big Plasma desktop news, some upcoming GNOME
announcements, as well as a bit of a GNOME history lesson.
We're going to go back to the good old days
when Linux on the desktop wasn't a joke, it was the hype.
And it's actually where that saying,
the year of Linux desktop came from.
We're going to go back to that era
and look at some fascinating times that
resulted in software that we're still using today,
but you might not know its heritage.
We'll dig into that.
Then later on the show, we've made no secret about it.
We are big fans of Red Hat's Project Stratus.
It's a tool, or a layer really, that's
bringing a bunch of existing technologies
together on Linux to compete with CFS
and offer some of the same feature sets as ButterFS,
but using established technologies like XFS,
the DM layer of the Linux kernel,
some of the same exact tools that LVM uses today.
And Andy is one of the lead developers
behind Project Stratus, and he's going
to come on and give us the high level pitch of what it does,
what it is, and then answer some of our questions that
get down into the weeds.
And after that, I'm getting organized,
and I am using this week's app pick to do it.
I'll share the app pick for you that I'm
using to get my life in order, for goodness sake.
But before we go any further, we've
got to bring in that virtual lug time appropriate.
Greetings, Mumble Room.
Good evening, morning, greetings, wake up, and smell.
Howdy, y'all.
Love it.
Hello, Mr. Badger, Mini Mac, Popey, Sean, Spazzy C,
and Wimpy.
It is good to have you in the virtual lug today.
Let's just get the elephant out of the room.
Big story this week.
Google Plus is shutting down in the wake of a bit of a data
leak, and maybe the bigger part of the story
is that Google tried to keep it under wraps.
And we're learning about this from a Wall Street Journal
report that got memos from within Google.
And the really damning stuff about this
is these memos make it clear that leadership,
such as the chief executive, Sunder Pichai,
was briefed on the plan not to notify users, which
he signed off on.
This is a huge story, and it seems
that there was a, quote, glitch in an API for Google Plus
between 2015 and March of 2018 when an internal Google
investigation discovered and then immediately attempted
to fix the issue.
This is one of the reasons why they didn't
make a disclosure about it.
It wasn't that somebody came to them and then got a bug bounty.
It was that Google found this during its own internal audit,
which is commendable in some ways.
The memo reviewed by the journal prepared by Google's legal
and policy staff and then shared with senior executives
warned that disclosing the incident
would likely trigger immediate regulatory interest
and invite comparisons to Facebook's leak of user
information from Cambridge Analytica.
They did have some considerations, though.
So whether we could accurately identify the users to inform,
whether there was any actual evidence of misuse,
and whether there were any actions a developer or user
could actually take in response, they didn't find those.
And that was one of the reasons they gave for not telling us.
Which is kind of understandable.
They believe it was never abused by any third party
application.
It is sort of a gray area.
I mean, it is our data, and I would
like to know about what happens with it
and how well protected it is.
But are we really entitled to that?
It seems like for the benefit of the industry, it's good.
You know, it's good to be clear about this stuff.
The way Google handled this announcement, I think,
is a lesson in brilliant marketing.
I don't like it, but boy, did they nail the messaging on this.
So instead of coming out and being like,
yeah, not only do we have a vulnerability,
and not only are we shutting down Google+,
and not only do we try to cover it all up,
they take a totally different approach.
Instead, they launched Project Strobe,
protecting your data, improving third party APIs,
and sunsetting consumer Google+.
So they announced this buzzword project, Project Strobe,
that talks about auditing third party APIs
and clamping down on Gmail access.
And then, as almost to make their case,
even though Google, up until this point,
had claimed that it was a platform, Google+,
they cared very, very deeply about,
now they actually use its failure as an excuse to move on.
They say the consumer version of Google+,
currently has low usage and engagement.
Get ready for this one.
90% of Google+, user sessions are less than five seconds.
That sounds like, oh, I clicked on a Google+, link,
get out of here.
That's exactly what it sounds like.
So here's what was leaked, or potentially leaked.
Here's what was capable of being leaked
if third parties took advantage of this API flaw,
which we don't know if that actually happened.
It appears that the data is limited
to static optional Google+, profile fields,
which would include your name, email address,
your occupation, your gender, and your age.
It doesn't include other data from Google+,
or other Google services, like your Gmail,
or any G Suite content.
They say when they discovered it,
they believe that it was a result
of subsequent Google+, code changes
that caused interaction with the APIs
that led this to be possible.
So they probably just didn't have that many people
doing very much good work on Google+, anymore,
and some botched update.
They mention that the review did highlight
the significant challenges in creating and maintaining
a successful Google+, that meets consumers' expectations,
and given these challenges and the very low usage
of the consumer version of Google+,
we've decided to sunset the consumer version of Google+.
Well, Chris, where are you going?
What else is there?
I stopped using Google+, a long time ago,
but the reason why I wanted to include this on the show
is the people I have noticed that are still using it
are people from the open source community.
There are people.
That's all that's left, from what I can tell.
It's photographers, Mike What's-His-Face,
that used to be on Twitter.
Elgin.
Yeah, Elgin, Mike Elgin, and Alan Cox,
and other open source users.
Linus used to host there.
That's who's left on Google+, right?
Well, there's also a whole bunch of communities,
innovative commerce communities, that they call.
The Ubuntu one is one of the largest on Google+.
It's got 288,000 people in it.
It's pretty huge.
Unfortunately, every post in there nowadays
has a lot of spam in the comments,
because Google clearly haven't cared enough
to clear that stuff up.
And if I go in there and have a look at the admin interface,
it's just like constant spam all the time.
It's been a really mixed message from the very beginning.
They say they're going to implement this wind down
over a 10-month period, slated for the completion
by the end of next August.
10 months is a weird timeframe.
Looking at my G Plus feed today,
it's full of people saying, you can now find me here.
People choosing where they're going to go instead of G+.
And a lot of times, it seems to be Mastodon.
And Diaspora seems to be getting a little bit of resurgence
here and there as well.
I'd say the one I've seen the most actually is Twitter.
But the second one I've seen the most is Mastodon.
Seems to be a good moment for Mastodon.
Now, if Mastodon steps up and produces something,
or continues to produce something
that people find compelling, they
may have an opening now, although I've
thought from the day they launched it,
there just wasn't a lot of room for a third social network,
at least not here in the States.
The States is a Coke and Pepsi country, right left.
We seem to get two brands, and then we're good.
We got Twitter and Facebook.
Three is confusing, Preston.
Then you got the Instagrams, and you got the WhatsApp.
It's just too much.
There was no room for Google+, and it's silly circles.
There just wasn't any room for it.
That's why they had to cram it into YouTube
to try to force usage.
But that didn't really work out too well either.
You know, the real tell there was
that Google's own executives stopped posting to Google+,
and started posting to Twitter about three years ago.
Seriously, as soon as I noticed that, I'm like, ah.
They don't believe it.
Not dog food.
Yeah, yeah, that's not good.
But as much as I seem flippant about it,
for those of you who got value out of it,
which is probably someone in our audience,
I'm sorry about your loss.
It's just one of those dangers of these closed services.
If this had happened two years ago,
I would have been beside myself.
But it's been waning for a while, and certainly
since Mastodon sort of caught people's attention
about a year ago, or people within the open source
community about a year ago.
It's very active over on Mastodon now,
and I think that I've been posting there
where I haven't been posting on G+.
for a while now.
I've resisted Mastodon just because I'm over.
I don't particularly like social media.
I like chatting with audience people,
so that's why I'm on there.
And I like tweeting back and forth with audience members.
But the rest of the people that are on social media,
I generally find them to be obnoxious.
I don't know, I don't like any of it.
I generally am not a big fan of group think.
So when everybody starts freaking out
about the same thing, I immediately kind of pull back
and go, oh, what's going on here?
And that's totally common.
The mob mentality is super common on social media.
And I'm not into it.
It bums me out.
So I've pulled back a lot.
I mostly just go for the list that I have now on Twitter
where I can follow my friends.
And my ad replies, and so I can reply to audience members.
Have you seen in England this week,
there's been a program called The Circle?
And my wife's been going crazy about it.
It's a social media quote unquote experiment
where they take, it's like Big Brother sort of,
where they lock some people up in an apartment complex,
and they use nothing but social media to communicate.
It's really fascinating.
They've had men pretending to be girls,
and girls pretending to be men, and straight people
pretending to be gay, and vice versa.
And it's really interesting to watch
how the different factions within that group communicate.
And like what you said, people do,
they're very quick to pick up the pitchfork and form a mob.
And it shows how when a lot of them,
one of the comments someone said was,
it's easy to forget that there's someone,
an actual person behind the screen
when you get on that keyboard.
Yeah, and I think we see that all the time
in YouTube comments, in Reddit comments,
in some of the dross that's on the internet.
And I think things like Google Plus and Facebook
and whatever, because they were real people,
they had somewhat of a slightly less crappy
signal to noise ratio, but.
They were kind of one of the loudest voices
on use your real name, use a profile picture.
And that was kind of one of the bigger things they pushed.
Just in terms of online discourse,
I, over the years of doing these shows,
have gotten many, very, very upset emails or comments.
And if I respond in kind, and I go in all guns blazing,
then usually it just derails.
But if I respond to them in a calm, rational way,
I have to be in the right place emotionally to do that.
But if I respond in sort of a calm, rational way,
really, my experience shows me nine times out of 10,
I get an email back that goes, oh, man,
I was just having a bad day.
I didn't even really think about the fact
that you're a real person, too.
I just was super upset about stuff.
I've gotten so many of those emails.
And I've been getting those since before Twitter even
existed, when Twitter was a podcast app that was called
something completely different.
And my point is when I use these social media networks,
I see that same disconnect that I have had interactions with
over email and now other mediums,
where people are not really wired up to fully
contextually communicate this way.
And it's another reason why we often come on the show
and say, if you can even just once a year
go to a open source style Linux style community event
and meet some of the people that you
talk to over the internet in person,
it will change that relationship.
And the reason for it is I think that the meat sack that
sits between our ears is a little more
tuned to those types of interactions
where it can get body language context
and the tone of your voice and the context of the conversation
and all of those nuances that help
you make an informed decision about what the person is saying.
And when it's all over text, we project a little bit.
We read intention into it.
We think, are they mad at us?
Did I do something wrong?
I made this mistake where I sent somebody
a file via Slack on Sunday.
And it was a co-worker who is down in Texas.
And she doesn't work seven days a week like I do.
So for her, she's getting these messages on a Sunday.
And she's like, OK, thanks, dot, dot, dot.
And that was all she sent.
I'm like, oh, man, did I piss her off?
I probably made her phone buzz on a Sunday afternoon.
It's evening down there.
And I start feeling like all these waves of guilt.
And I even thought about writing her apology Monday morning.
I thought about writing her apology right then.
But then I thought, no, that'll just send her more messages.
I shouldn't do that.
That'll upset her more.
I'll wait till Monday morning.
And I'll write her an apology on Monday morning saying,
sorry, I didn't think about your phone might beep
when I sent you a Slack.
All this is going on in my head within 30 seconds
of sending her that.
Well, it could be nothing, right?
It could be just she should have sent.
She might have meant thanks.
Right, yep.
I mean, I guess it's not surprising.
It is a new form of communication.
So maybe it isn't weird that we are struggling with it.
Because we're still trying to figure out the guardrails
and how to make it work.
Yeah.
So that's why I think it is very true
that the context in this kind of stuff really matters.
All right, well, let's shift gears now
and go from the heady community stuff.
And let's move into, and I guess one more thing to that,
is I think that's why things like Mumble
stick around, because people get more context in voice chat
and stuff like that.
OK, so let's move into some new Plasma features.
Yeah, the good news of the show.
Plasma 5.14 landed this morning.
And I've already updated my neon boxes.
It's got a couple of great new features.
I'll just mention a couple, because I know not everybody
out there cares.
But for those of us who follow this stuff,
there's a new display configuration widget
for screen management, which is nice.
You plug in an external display, a little widget
comes up by your system tray and says,
is there just a quick screen layout?
Do you want to go into presentation mode, which
I think is pretty neat?
Presentation mode will turn your power management settings
so that your computer and screen do not turn off
during your presentation.
And then it can enforce, in certain conditions,
presentation mode over applications, like Chrome.
Pretty nice.
And the audio volume widget now has a built-in speaker test
feature, which I can tell you how useful that could be.
Oh, yeah.
And thankfully, the network widget now
works again with SSH VPN tunnels, which is slick.
Right there.
It's one of those things that you don't think about
until you have one.
And you're like, why is this not showing up?
I am so thankful that it's so easy to do standard,
like PPTP VPNs and things like that.
So getting an SSH tunnel is going to be great.
And then just, what was it?
One or two episodes ago, we were talking about Discover,
getting FW update support.
So now, if you're on the Plasma 5.14
and you use the Discover Software Manager,
you'll also be plugged into LVFS and get firmware updates
for your rig.
And it gains support for snap channels, which,
if I am correct, is that, maybe Poppy wouldn't be correct me,
is that different types of the beta channel
versus the stable channel of a snap?
Right.
Very cool.
Yeah, this was a conversation we had when I was back
at Academy a few weeks ago.
Alesh is one of the KDE Discover maintainers.
And yeah, one of the most desired features
was the capability for people to switch channel
from within the GUI.
So they don't have to use a command line like a barbarian,
but switch channels directly in the user interface.
And they've implemented that in the few weeks
since I was in Vienna, which is really good to see.
No kidding.
Talk about some quick turnaround.
Also, some improved support for Flatpak.
If you try to install a standalone Flatpak file,
but the whole Flatpak back end hasn't been installed,
it'll now ask, hey, hey, genius, do
you want me to install the Flatpak support for you?
Very nice.
And then K-Wind, continuing its march
towards excellent Wayland support,
there is a fix in there to correct copy and paste
between GTK applications.
Oh, good.
I'm so glad to see that.
Yeah, because say you had GEdit open
and you wanted a copy between GEdit and K-Write,
you couldn't do it before on Wayland.
So that's been solved now.
And they considerably improved and polished
K-Wind effects throughout, including a completely rewritten
dim inactive effect, which is a neat effect you can set in K-Wind
when a window goes inactive.
So you get three or four windows up.
Only the active window is lit up.
The other ones can have a dim effect.
They can even blur a little bit.
They can go translucent.
And this is kind of a neat way to help your eye
cut through visual clutter.
So you need a couple of windows up on your screen.
Maybe you arrange things like on the OBS machine,
I've got three windows open right now.
It's pretty easy to tell which one's active,
because the Close and Minimize buttons are lit up.
And so that's how I can quickly tell
which is the active window.
However, if you wanted a more dramatic visual cue,
you could have it so that the only application that
was its regular lit state was the active applications.
And all of the other windows would take a slight dim effect.
And that's been totally rewritten
in this version of Plasma, including a new scale effect
and rewriting the glide effect when windows glide around
on the screen.
Just lots of little polish.
Love it, man.
I just am so happy with it.
And rockin' the Neon 1804.
And the updates came down this morning.
It's been.
I know what I'll be installing tonight.
And I notice like almost every day now,
there's some thread in our Linux or on some blog post
about somebody's just discovered Plasma.
The popularity's real.
It's not just us.
OK, nobody has anything to add to that.
Then let's change gears to.
I do.
I love KDE.
You know I do.
I say it every week.
Yeah, yeah.
And let's do it.
OK, well then, if Alex is going to chime in,
then we have to check in on Popy and Popy's laptop
that was installed in the air running Neon at the time.
Is that installation still standing, Mr. Popy?
That's the same installation, the one that I upgraded
to 1804 just last week, yes.
Boom.
Still stands.
All right, ladies and gentlemen, that is your Popy Neon laptop
update.
We need a jingle right there.
All right, now shifting gears to GNOME.
There's going to be some changes coming down the road,
probably in GNOME 3.32.
The application menus, or the app menus
as they're often called, are the menus
that you see up in the GNOME 3 top bar with the name
and the icon for the current app.
Well, these menus have been with us since the very, very
beginning of GNOME.
And they're going to be retired in the next released version
of GNOME, GNOME 3.2.
So no more app menus up in the top menu bar of GNOME Shell.
The applications themselves that have menus,
like when you hold down Alt for file and edit,
those can remain.
But the ones up in the Shell bar are going away.
One little area you could click that was never
used very much anyway?
Sometimes had quitter preferences in there.
They feel, and this is from Alan Day's blog post.
He writes, when the app menus were first introduced,
they were intended to play two main roles.
First, they were supposed to contain application level menu
items, like preferences about and quit.
Secondly, they were supposed to indicate which app was focused.
Unfortunately, we've seen app menus not performing well
over the years despite an effort to improve them.
People don't always engage with them.
Often, they haven't realized that the menus are interactive
or even remembered that they are there.
I'm not too surprised by that.
I'm guilty of that myself.
Now, he writes, we're planning on removing application menus
from GNOME in time for the next release, version 3.32.
The application menus will no longer be shown in the top bar.
Each GNOME application will move the items from its app menu
to the menu inside the application window.
If an application, read most of them,
if an application fails to remove its app menu by 3.32,
it will be shown in the app's header bar
using the fallback UI that is already provided by GTK.
This means there's no danger of menu items
not being accessible if the app fails to migrate in time.
I think I'd love to hear Wimpy's take on this,
just because he's our number one Ubuntu Mate guy right here.
Boom, right there.
And Ubuntu Mate is kind of around because a lot of people
don't like the changes in GNOME.
I wasn't sure how far I could take that.
So Wimpy, what are your thoughts on these kinds of changes?
My first thought, and I'll let you take it from there,
was I wonder if there was a discussion about how
to improve them and make them more useful,
or if the conversation immediately went,
let's remove them.
Who can say I wasn't part of those conversations?
Obviously, GNOME have their own design direction,
and they've iterated on that over many years now.
And they've also not been frightened
of going back from a decision they've made previously.
So I think we should let them do the things the way they want
to do it, because if GNOME isn't a desktop interface
workflow that you are comfortable with or like,
then good news.
Linux has got plenty of other desktop environments
to choose from, and I'm sure there's
one out there that will suit you more appropriately.
Hmm, hmm, I'm reading between lines there a little bit.
Not really.
Honestly, from my point of view, I
don't actually care what GNOME decide to do or don't do.
It's their project.
It's down to them and their designers
to set the direction that they want to go in.
And if some people love that stuff
and it draws people to GNOME, then great.
And if some people don't like it and it pushes people
towards KDE or Marte or something else,
then that's fine too.
There's still plenty of well-supported desktop
environments out there and all the major distributions.
So yeah, just find one that suits you.
OK, that does make sense.
Now, here's what the counter-argument would be.
The counter-argument would be, well, now Wimpy
is shipping on all of the major distros by default
and new users coming to Linux.
Wimpy, this is what they're experiencing out of the box.
And so we must defend this pretend user
that we're making up in our heads for a straw man argument.
No, they're not.
New users aren't coming to GNOME 3.20.
They're coming to Ubuntu 18.04.
They're coming to Ubuntu 16.04.
That's where those users are going.
It's only the absolute lunatics who are using Arch
or the tiny niche who are using Fedora or the Germans who
are using SUSE who are getting these weird new versions
of GNOME.
Your average user is using Ubuntu 18.04,
and they're using the user interface
that you know and love today.
Yeah, and I think really what you're saying there
is that there is another layer of catch here,
where if something was to radically change in GNOME,
there's the distributions that still can have vendor patches
that can apply to it to restore that functionality.
And we get flack for that.
People moan at us because we hold back
versions of Nautilus or other things,
because we have a large number of users who
care about these things, and they tell us
when stuff is objectionable.
It's all very well designing something for the future,
but we've got people right now who are using these systems,
and they need to use a system that
is familiar and intuitive and easy to use
and all those other UX terms.
We'll see what this looks like in 2004
when the next LTS comes around.
It's interesting.
I often don't object personally to a lot of the changes
GNOME makes, but it's strange to see a project that
feels like a stable desktop that is changing so much
and removing features.
Most change I think that we see is a creative, right?
We're like, oh, great, I got a new feature this week.
That's really cool.
GNOME does it differently.
Yeah, it's simplifying, though.
It can be a good thing.
It can be an easier code base to maintain.
It can make moving to new display technologies easier.
It can make re-architecting your desktop shell easier.
So there's reasons to do it.
You're right.
They're not doing it for the fun.
They're not doing it because they want to annoy their users
or they don't want their desktop to be pretty and usable.
They're doing it because of perceived benefit
to the user and the developer.
So it makes total sense to do these things.
It's just frustrating for users who
have come to love icons on the desktop
or menus in the menu bar or whatever
it is that's being modified.
It just frustrates users because we're all resistant to change.
But you go back to what GTK2 and GNOME2 look like.
I was going to say like five years ago,
but I meant five minutes ago in Ubuntu Marte.
But you looked at what it looked like.
People have moved on, like some people have,
and those who haven't.
There are other alternatives for them.
Well, why don't we go back in time a little bit?
So you heard Popi there mention Nautilus.
The history of Nautilus is fascinating.
And I recently came across someone
who had front and center experience with it
in a completely unexpected environment
in a book that's out now that I'll
have linked to the Audible version of the show notes
called Creative Selection.
And it follows someone named Ken Koisita,
I think is how you say his last name.
And he is a software engineer who
has been involved in the industry for a really long
time.
And he eventually wound up at Apple,
and he created the keyboard for the iPhone and the iPad
and the Safari web browser.
And his story about trying to get Mozilla's source
code for Firefox back in the day to build is great.
How they discovered Conqueror and then
decided to go with WebKit.
Like that whole story is in this book, and it's fascinating.
But before you get there, there's
a little history lesson about a small little company
that you may have heard of before named Easel.
Easel was founded by Andy Hertzfeld, who's also
an Apple alumnus, in 1999 in a little town called Mountain
View, California.
It had 22 employees and had managed
to raise about $12 million.
That's not bad for a small crew.
And in Ken's book, he goes into some of those early days
at Easel.
Before coming to Apple, I had a job
at a startup called Easel.
Our goal was to create an easy-to-use Linux system
suitable for everyday computing, a free software
alternative to Apple Macintosh and Microsoft Windows.
The company was led by programmers
who worked on the original Macintosh in the 1980s,
including Bud Tribble, the first software
manager for the Mac, and Andy Hertzfeld, the software wizard
whose graphical user interface code helped
to set the Mac apart from the text-mode personal computers
that were the norm of the time.
These fellows were my heroes, and I joined the company
to work with them.
The elegance and simplicity of their Mac software
was my main inspiration for wanting
to become a programmer.
The inspiration for Easel came from Andy,
and his vision for the company was
fueled by the free software movement Andy identified
with Stallman's idealism and by the concept of developing
a file and icon manager that would make
Linux a fitting competitor to Windows and the Mac,
its more established rivals.
So their core product was really going
to be based around what we call today GNOME Files.
But GNOME Files is based off something that we all
refer to as Nautilus.
Andy called this program Nautilus,
and it would help Easel users find files, read email,
launch programs like word processors and spreadsheets,
and perhaps do cool new things like keeping
track of a few digital photos.
Easel contributed Nautilus to the GNOME Project,
a loosely confederated free software community whose
members, both individuals and companies,
would be providing the rest of the software
for the desktop computing system we were trying to build.
To be a part of GNOME, Nautilus had
to be licensed under the GPL.
This had important implications for Easel
as a commercial entity. Since people would be able to download
Nautilus for free once we finished it,
the company had to figure out some other way to make money.
Not surprisingly, this involved creating proprietary software
that Easel could charge people to use,
a set of proto-cloud services including automatic software
updates and online file storage.
These cloud services would live in an Easel data center
and would not be free.
The idea was to integrate Nautilus with these services
and position our no-cost software as a lure
to draw people to Easel's pay-to-use features.
The combination of dot-com fervor, enthusiasm
over Linux and free software, abundant venture capital money,
and our founder's connection to the Mac
made it seem to me that Easel might just be the next big thing.
So you have to put yourself in the mindset of the time.
This is the late 90s, early 2000s.
Linux is powering the dot-com boom.
And the hype around Linux on the desktop was really strong.
And it was where that joke originated.
It's the year of the Linux desktop.
That's where this comes from.
And that's why, as it goes on, it
gets to be even more of a joke.
You were doing some searching, though, during the clip,
and you can still find references
to Easel in gnome file source code?
Yeah, Wimpy pointed it out, but it's all over there.
Yeah.
Yeah, it's pretty fascinating.
And so they were like, we can't lose.
We've got this cool new, what he refers to in the book
as proto-cloud services that we didn't call it the cloud
back then.
It was just online storage.
It was a better day, that's for sure.
Yeah.
And they had some other really cool update management
software.
And they thought, OK, this is going to be it.
We'll create this software.
People can manage the updates across multiple Linux boxes.
When they run out of file storage,
they can save to our cloud storage.
They didn't call it that, which we'll have integrated in
with the file manager.
And it's just going to be great.
There was just a few problems.
Number one, people didn't have that great of bandwidth.
Number two, they fumbled the opportunity.
But if indeed we had this chance, we fumbled it.
We never lived up to any of our lofty goals.
Chief among our missteps was failing
to conceive of our software as a single product instead of
as a set of separate projects.
We never figured out how to integrate the pieces.
Nothing worked smoothly.
Our software update feature was riddled
with bugs that often broke programs
while trying to update them.
Our code to connect Nautilus to our cloud services
didn't work at all.
The Nautilus team had persistent problems
coordinating with GNOME.
The loose structure and lack of profit motive
of the free software community meant
that they did not share our money-making goals
or care to coordinate with us
so that we could meet our delivery schedules.
All these setbacks caused delay after delay.
Yeah, and things didn't go too well.
After Easel launched Nautilus 1.0,
the company then laid off 40 of its 70-member staff,
and then things kind of spun down from there.
The company didn't really manage to pull it out.
Despite even getting a substantial investment
from Dell in December of 2000,
the company failed to successfully monetize
or secure more funding before their venture capital ran out.
And things had changed a lot in that dot-com boom bust time.
By March of 2001, things just were different,
and the market was beginning to shift.
But the sort of silver lining of all of this,
not only did all of those folks go on
to do bigger and better things,
but we now get GNOME files,
because the core software was GPL.
And even though the company went bust,
and the people that worked on it are now doing other things,
here we are in 2018,
still using stuff that was created in 1999,
and has been refined and refined and refined over time.
And it's been changed a lot,
but it still has that heritage.
And it was kind of ahead of its time in a lot of ways
with its cloud storage solution.
I remember Ubuntu had one too.
Ubuntu 1.0 was originally gonna be a cloud storage
and syncing solution.
That was a big thing that people wanted
to get into for a while.
And it took really until Dropbox and that modern era
to get things right.
But that's, that GNOME files goes way back.
It is neat that it's still around and it's still useful.
It's not a bad file manager.
Yeah, yeah, yeah.
As long as you're using the Ubuntu version one,
apparently, no.
Hey-oh.
All right, well, so there you go.
There's a little GNOME history.
If you have a project that you would think
would make really good for us to go back into,
especially if there's like some audio we could pull
from a YouTube video or a book somewhere out there,
let us know.
Linuxunplug.com slash contact.
That was a proto-segment, sort of like a version
00.00001.
Put it out at the wall, see what it was like.
Yeah, we'd like to expand that later on
and do something a little more
and do projects that people are fascinated about
that would apply to more than just GNOME users
and things like that.
So if you have a suggestion,
Linuxunplug.com slash contact.
And let me check.
While I'm doing a little bit of admin work here,
I'm gonna bring up the jobs page.
It looks like there are still two AWS, oh, oh, no.
Only one of each now, it appears.
So there is an AWS training architect position
open at Linux Academy,
and there is a Microsoft Azure training architect position.
Both are full-time with full benefits and all of that,
and are remote.
So I'm gonna put a link to that in the show notes.
I gotta remember to do that right now.
I'll put a link to this in the show notes
if you would like to apply for those.
They're also looking for a full-stack node developer,
a Ruby developer, which is also remote,
finance controller, there's several jobs actually open.
Man, that Linux Academy, growing like cray-cray.
Moving and shaking.
Yeah, they are.
So I will put a link to that right above the Stratus stuff.
So if you're interested, go check that out.
Linuxunplug.com slash 270.
Figure we'll get the audience hooked up with the good stuff.
You know what I'm saying?
Looking up for the audience.
All right, so let's move forward now.
So we just looked back at known past.
Well, let's look forward at Linux storage in the future.
Now for a while, we've been talking about Project Stratus,
which is an effort that's happening over at Red Hat
to bring together various components
of Linux's structured subsystems for storage.
And there's several of them that exist already,
including well-established file systems like XFS
that I'm a huge fan of, LVM,
which relies on a bunch of fundamental technologies
that we're all pretty familiar with.
Stratus is a new approach to constructing
a volume managing file systems
whose really its primary innovation
that Stratus is bringing
and what's gonna kind of make it come to market pretty fast
is it's reusing existing Linux components.
And it really has my interest piqued
because A, it's based on XFS.
Oh, you love it.
You're already there.
You're already there.
And B, it's promising to try to drive feature-comparity
with ZFS and ButterFS.
It's pretty fascinating.
And this last week, they hit version 1.0.
The big 1.0.
It's a major milestone, so we thought,
well, let's bring one of the lead developers from Red Hat
on the show to talk about it.
We asked Andy Grover to join us.
So joining us right now is Andy Grover,
and he is a principal software engineer over at Red Hat,
and he's been hacking away on Project Stratus.
And I recently saw him blogging about 1.0.
Had to get him on the show and talk about it.
Andy, welcome to Linux Unplugged.
Hey, Chris.
Thanks a lot.
Glad to be here.
Hey, no, thank you very much.
So for the folks that aren't familiar with it,
give them the elevator pitch on what Project Stratus is.
Well, I think we have a couple options
for advanced storage features on Linux,
but I don't think any of them, for various reasons,
have really necessarily hit all the sweet spots.
So I don't know if Stratus is gonna hit all the sweet spots,
but I think it's gonna fill in.
It really is meant to provide an easier way
for people to manage their local storage
so they don't have to worry about extending partitions
or anything like that.
It's just, it kind of does all those things for you,
and so you just get the benefits
of these advanced storage features.
There's like ZFS and ButterFest.
They have snapshots, and they have built-in,
a lot of built-in features
that we want to make easy to use for everybody.
So that's kind of where we're trying to come from.
What about some of the projects out there right now?
I mean, ZFS, ButterFS,
or even some of the up-and-coming things like BcashFS.
What about those made them not really seem like a good fit?
Why a new project?
That's a great question.
Well, I think coming as a Red Hat developer,
I think ZFS is just, the licensing terms are a real problem
for the powers that be to go with that.
Not that other distros haven't said,
hey, okay, we're gonna go for it,
but I think Red Hat and Fedora,
very conservative when it comes to patents, codecs,
and the licensing.
So that kind of ruled out ZFS as something
that we could do.
ButterFS, oh boy, ButterFS.
Oh boy, I can't believe it's not ButterFS.
Yeah, right?
I mean, it was in tech preview in RHEL 7
for a long time before it got pulled.
I'm sure you talked a lot about that.
So it just hasn't quite gotten there yet.
I know some distros are shipping it,
but even like Ubuntu, they're shipping ZFS.
So I don't know.
It's just like, it's not quite what we need it to be.
It hasn't passed the test, the SNF test, essentially.
It hasn't quite got enterprise grade stamped yet.
Well, I don't wanna say that it's not right for some people,
but it's just, it's not right for everybody, so.
Yeah.
So fair enough.
So, but okay, so I think the core of the question is,
is trying to fish out why not launch a 10-year project
and build the next revolutionary file system for Linux?
Why was that not the solution?
Well, I think you kinda answered the question right there.
Yeah, time is imperative in this.
Do you feel like maybe Linux is a little behind,
say, what ZFS is capable of,
and so we needed a practical solution
that was bolting together existing tech?
I think that there were some,
and this has happened before with Linux.
I think we were behind early on in our USB support,
and we kind of like, other OSes
kind of highlight some deficiencies,
and then we kind of like, rally and effort and catch up.
So I think it, I think we're a little bit behind,
and it's not that you can't do everything on Linux.
It's just, you know, LVM, I mean, a lot,
I think we'll talk about this more later.
I mean, LVM and Stratus are both kind of leveraging
the same core kernel capabilities,
but LVM maybe isn't necessarily as easy as it could be to use
and some of the other options aren't
maybe an option either, so I think there's space
for Stratus to come in and support these things
and get there and have it in two years instead of 10 years.
Yeah, that seems like one of the key things there.
So what are some of those things?
You touched on this just for a second there.
It sounds like Stratus would be using
some of the same plumbing that LVM's been using for years.
What are some of those existing well-established components
of Linux that Stratus takes advantage of?
Well, I think people, a lot of time, if they've used LVM,
there's LVM and then there's this thing called Device Mapper
and Device Mapper is the kernel code that LVM uses.
So you can use Device Mapper through LVM,
but you can also use Device Mapper in other ways.
And Device Mapper, learning how to use Device Mapper
for me was really like a kid in a candy shop
because, I mean, there's so much there.
There's so many capabilities.
There's RAID, there's thin provisioning, there's integrity.
There's all these fringe Device Mapper targets
that different people have written
that do different cool things.
And all of those things can be put together in different ways
and used in different ways.
And you can use LVM to do that,
but there are also different ways
that you can put the Lego box together.
So that's what we're trying to do with Stratus
and make those available and more friendly to use.
It really seems in that sense
that Device Mapper is doing a lot of the magic
and you've just been able to tie it together
and add on a little bit of niceness with XFS on top.
A lot of it, yeah.
So I mean, one thing that Stratus 1.0 supports
is thin provisioning.
So this is something that lets you create file systems
and they don't actually use the amount of space
that they're actually using
and you can have a pool that's shared
amongst different file systems.
Stratus supports this,
but it's like, we haven't had to like implement it.
The other smart people who have implemented
the thin provisioning support in Device Mapper,
we just get to make use of that.
We get to make it easier to use for people.
And that makes, I mean,
that saves a tremendous amount of effort to leverage that.
And like you said, to leverage XFS file system,
we don't have to write a file system.
We have a great file system
that we can just pick up and use.
So.
Amen to that, brother.
Yeah.
Amen.
So speaking of great file systems,
one thing I've always enjoyed about ZFS is by and large,
I can kind of move things around.
If I've made a dataset on one machine,
as long as it doesn't have a lot of crazy feature flags,
I can use that on another machine.
How's that gonna work for Stratus,
especially if, you know, different kernel versions,
different user space tools exist, will it be portable?
I think it won't be entirely,
if you're, it always goes back to the things
that Stratus is kind of wrapping and putting a bow on.
So it's like, you need a file system,
you need a kernel that supports XFS.
Well, they're all, you know,
that's all of them at this point.
You need a kernel that supports
the device mapper targets that we're using.
So that's thin provisioning and a cache target.
So, and that's pretty much all of them too,
but there's a lot of other device mapper targets
on the horizon.
One really exciting one is called VDO,
which does a block level deduplication and compression.
So if in some future Stratus version,
we incorporate support for VDO,
then that would mean that, you know,
we'll have checks and stuff to make sure that
if you then move those, that pool,
that file system to an older machine
that doesn't have support for that in the kernel for that,
that that's a consequence of, you know,
if it's not there, then it can't work.
So that's kind of where we are.
Okay.
I think that's probably to be expected,
especially at this stage in the project.
So let me ask you something else
that's gonna be a little more challenging to answer.
If I were to have a conversation with say a ZFS expert,
they tell me that what part of what makes ZFS so dang great
is that it's total integration from top to bottom.
In fact, there's such fans of it.
Andy, they'd say,
don't even use one of those dirty RAID controller cards.
Don't put a dirty hardware RAID in there.
Let ZFS control the entire stack
because of its integrated brilliance.
And then Andy comes along and says,
actually, we could do this
with a bunch of different existing technologies
and have something that works great.
What's your response to the,
it has to be integrated or it's gonna be bogus?
That's, yes.
It almost feels like a religion war
when I hear them talk about it.
It's like, it's a way of believing that,
like it's a handcrafted integrated solution.
But in a way,
Stratus feels more like a genuine old school Unix solution.
I think that's a good point.
I mean, so Unix is about like reuse
and combining things that do one thing
into things that do multiple things.
So, ZFS has been called a rampant layering violation.
And I think they did it for good reasons.
There are advantages to doing it that way.
Some, I think that,
I'm not sure if all those advantages
have actually been fully realized.
So, I'm pretty optimistic
about what we'll be able to achieve.
Like one of the things is like,
like if you have a disc that fails on a ZFS pool,
it's like you can track like, or excuse me,
if you have like a sector that fails on a disc
in a ZFS pool, it's like you can track all the way up
through the ZFS data structures
to like exactly the files that are affected.
So, that is gonna be harder for Stratus,
but I think it still could be possible.
And I think that there are other advantages
that having a more layered approach give us
that can outweigh that.
So, looking at some of your documentation,
it really became clear that the API
is a core part of Stratus
and that there's a lot of design around making that
like a prime feature.
Why is that?
Well, I think if you look at the state of computing now
compared to 10 years ago,
we have this kind of, if you wanna call it a renaissance,
you have this move to the cloud,
you have orchestration, you have Kubernetes,
you have Docker, you have Puppet, you have Chef.
I mean, individual machines are less configured by people
and more configured by kind of layers of automation
on top to achieve more productivity.
So, I think it was very important for us
that Stratus be able to work
within an automated environment.
And I think having the API is very important
to making sure that that's possible.
I mean, I'm grateful already
just if I don't have to do any more text scraping
of command line utilities, if there's a real API, oh boy.
No kidding, right?
I'm really not a fan of scraping of command line tools
and that's, it's, yeah.
So, I really feel strongly at that
and that really kind of made the API be something
that we really wanted to focus on.
And I think that's gonna be one of the leading factors
of adoption for this.
I think that's what's gonna drive
other distributions to adopt it.
So, let's talk about that for a second.
Okay.
I bet the intention here is to have this
to be more than a quote unquote red hat project.
It'd probably be nice to have it be
a general community project.
That would be great.
How is that possible?
Like, what thoughts do you have there?
I'm not asking you to solve the problem,
but do you have thoughts around opening it up
to a wider community?
Well, I think it's kind of, if you build it,
they will come sort of thing.
Just like practicing as much of our developments
in the open and on GitHub as much as possible,
this ongoing discussions and IRC,
that's what we can do and publicizing it
and kind of stating our desires to work with other people.
And I think it always,
like you kind of have to like have something
and then people see that and they wanna work on something
that their efforts aren't gonna go to waste.
So, I hope that with 1.0, we've shown that we're serious
and that we'd like to work with other people and build it.
And the more the project goes on,
like the more possible new things and interesting things
that people could hook onto and make their own
in the code base,
I think the number of those things has really gone up.
So, I'm hopeful that people will do that.
It's a little bit difficult because we chose...
So, we didn't write it in C,
we decided to write it in Rust.
And there's a lot of reasons why we decided to do that,
that we can talk about,
but the big concern was that that was gonna hinder
our adoption of that was gonna kind of push away developers
a little bit, I hope it doesn't,
and maybe it'll attract other potential developers.
So, it was like developers
and then getting onto other distros
that it's an additional build dependency that is there.
So, I'm hoping that things will work out.
Right, I think the choice to use Rust
was a really fascinating one.
I think that's actually something I've heard people mention
about the project.
So, it's created some hype in some circles at least.
So, maybe it's done some good as well.
Yeah, the little Rust circles,
they're definitely behind us.
Yeah, they're passionate.
Okay, well, 1.0 is obviously a big deal symbolically.
Does this mean I should be using Stratus?
Are you recommending it for general use
or even just for playing around
or should we hold off a bit?
I think 1.0 is important for a couple big reasons,
like putting a stake in the ground
and stabilizing our on-disk metadata.
I think that was important.
We're working,
let's just say we're working on a 1.01 release right now
that's gonna fix some pretty serious issues
and we're also working on a 1.1 release.
So, I would definitely hold off,
even adventurous people,
just give us like a couple more months
and then the less adventurous people,
they can hear what the adventurous people say
and then they can make a decision at that point.
Is the goal to get 1.0 of some form shipped in Fedora 29?
Yeah, that's the goal.
We're a Fedora feature.
0.5 was in Fedora 28.
Oh yeah.
And was pretty rough,
but I mean, it's more about like,
you kind of need these milestones for yourself
and for people who are following the project
to kind of understand where the things are.
So, 1.0 will be in Fedora 29.
I think that's gonna be probably the best place
for a lot of people to try out Stratus.
I heard you say we a few times.
Can you give me like a rough idea
of like how is the project structured?
Is it more than just Andy?
Is it a few people?
Is it a whole division within Red Hat
that has its own building?
Like what kind of?
Okay, all right.
But maybe that's a little overboard,
but like what's it look like?
Well, our core team is four people right now,
including myself, all Red Hat people
and we've also had a number of kind of
what you could call like drive-by contributions
from a number of people mixing up things.
So yeah, there's four of us at Red Hat
currently working full-time on the project
and hopefully we can attract some more small contributions
and then those small contributions
can lead to larger contributions.
Well, Andy, I'll have links to the project page,
your Twitter.
Is there anywhere else you wanna send people to
that might be interested in the project?
Well, we had a G Plus page before they killed G Plus.
Too soon, too soon, Andy.
I would also just, yeah,
make sure you put the Stratus storage Twitter.
I think that's the primary one, so.
We will have that in the show notes as well.
Well, Andy, I hope you and the team keep up the great work.
We're pretty excited to watch where this project goes
and thanks so much for coming on the show
and explaining some of this to us.
Maybe we'll chat again in the future.
All right, well, hey, thanks for having me
and have a good one.
It's gonna be an XFS future, I think,
at least for a lot of us, not like ZFS is going anywhere,
but it'll be nice to see this sort of become an option
for Linux users, I think.
I'm delighted to hear they've based it
on the existing technologies for the most part
and most importantly, XFS.
I am looking forward to the thin provisioning.
I was talking to Wes about that.
I have a one terabyte MVNE in my disk,
or in my laptop, it's a one terabyte disk
and I am really looking forward to just saying,
make home a terabyte and I'll just figure it out later.
I have to look at the space eventually at some point
and LVM was always too much to manage.
This is gonna be nice.
Yeah, you have a simple, I mean, we've already tried it.
The command line interface is pretty clean.
It was easy to get set up, it's easy to use, it's fast.
So there's not a lot of blockers
once you actually have a package to install.
All right, well, we'll keep an eye on it,
see where things goes and we'll have all the links
in the show notes where you can read more,
including get diagrams about how this thing works
or what layer it's sitting in the Linux stack
and all of that is there.
Also, for your reading enjoyment,
this is a great benchmark that Wes found
over at scalegrid.io and they decided to compare XFS
and Extended 4 on their AWS EC2 MongoDB instances.
How about that for a title?
And you know what, both are great file systems
is the long and short of it.
And if you have a moderate to, you know, average rig,
you're really not gonna see much of a difference
in terms of performance.
Probably just doesn't matter, right?
Pick the one that is easiest to use.
However, if you have a significant workload
or you have a particularly fast rig and fast disk,
well, this is how they summed up the difference.
I thought it was pretty good.
They say XFS is spectacularly fast
during both the insertion phase and the workload execution.
And they say down in the like really pushing type workloads
that XFS maintains its lead and its throughput
better than Extended 4 does.
And in general, in performance terms,
XFS is indeed a force multiplier
when paired with high-speed disk
that can take a real advantage of a high-end PC.
It is a force multiplier, they write Wes,
a force multiplier.
XFS is just great.
I just really love it.
That's why I was so stung when those guys and gals
over at Dropbox announced
that they were ending support for anything.
It was rough, it was rough.
It's such a good file system.
I'm not over it yet, I'm not over it yet.
Replacing Dropbox is one of the many things
on my to-do list.
I got a lot going on, you know?
Living the VP life these days, Wes.
I got wound care, I got a lot going on.
I got three kids, Wes.
You don't even sleep, that's how busy you are.
This is actually true.
This is just a lot going on and I need to manage all of it,
reclaim some of my sanity,
so I've decided to get my crap together.
So you got just a big wall of post-it notes?
I assume that's what you're doing.
Actually did start with a whiteboard,
realized that did not scale, also was not portable,
and could not be done on the fly via my phone.
So then I wanted something that would let me manage my tasks
from the phone, from a lady tube, and from Linux.
That's a big ask, those are some integrations.
You know, there's some really nice to-do apps
for every phone out there.
They're really great,
but they're like only available for the phone.
Like they don't have a web component necessarily.
That's okay, I can't, I need something on the desktop.
Or the ones that do like Wunderlist
have never really stuck with me.
It's never really held me down.
I can't really, it just doesn't work with me.
Well, I'm pretty pleased so far with Todoist,
and I've linked in the show notes, it is an Electron app,
but it is a wrapper for the official Todoist web app,
and it's, I tried a couple of them.
There's a few of them out there if you search for this,
but this is the one I like the best.
It'll support auto start and minimize down to the tray
with a system tray icon.
It has keyboard shortcuts
that work more like the native application.
It has just a native-like desktop feel.
It has the quirks of a web app,
but they've gotten it pretty close,
and it comes available as a deb
or it's in a lot of different repos.
Yeah, so it's easy to get going.
And I've combined this with the app on the phone
and the app on the lady tube,
and now I've got sort of ubiquitous task management.
I can summon Siri or the Echo,
and I can say, add a task to my list.
I can sit down, and I just have a Workspace 5
dedicated to this application.
It's the only thing on Workspace 5,
so I can go right to Workspace 5 and make it to do boom, boom,
boom as fast as I can think about it.
And that's key, right?
You need something, you need to be able to dump them
as they come up, as you come up with them.
Yeah, the other thing is great.
It has natural language support.
So if I need to, say, write down a task
to finish the expense report for that lunch
we went out to on Friday,
I can write finish expense report Wednesday at 1 p.m.,
and it will automatically just, it'll understand that,
and it'll create the finish expense report,
and then the Wednesday, and it'll itemize all of that out
and create a reminder, yeah, and put it on the calendar.
It's nice, it's really smooth.
So getting a version on Linux that felt close to native,
that had a tray icon and all of that kind of stuff
to like a full-fledged application,
that's what sort of pushed it over the edge for me
from some of the other ones.
So we'll have a link into Todoist for Linux.
There's a lot of them out there,
but only one of them passed the Chris Niff test.
So you gotta check that out.
I mean, I know you're picky about these apps, too,
so you're pickier than I am, so that's probably a good bet.
It's worth checking out.
You watch out, don't get me too hyped,
because if I go all into it,
then I'll sign up for the Enterprise version,
and I'll be getting you to install it, so.
All right.
Well, see how it goes.
I like it.
You say that now, you say that now.
It's pretty cool.
It does have good team management features,
and the other thing that kind of made me want to use Todoist
over some of the other quote-unquote services
or self-hosted solutions,
I want something that is a Todo application
for a spectrum of my life.
Like, it's not like a full spectrum Todo management.
It's kind of like a narrow slice
of the things I need to do in my work and personal life.
It's kind of a weird way I have it,
and so I'm using Todoist for that,
and for this particular slice,
it's really great to be able to send things
in and out of Todoist from different applications.
So I've got like this OCR scanner for my phone.
Yeah, like I hold it over a receipt.
Oh yeah, like just some document you want to, totally.
It imports all the details,
and it figures out what I paid at the restaurant,
and then I can import that
into the expense management system.
All of that routes through Todoist.
Todoist is sort of like the central piece
that can coordinate all of that,
so it's really nice to have something
that you don't get from a self-hosted task warrior server.
I've tried, and I mean, it was not too bad,
but just not that shiny.
You know, I could see a place
for like a separate task management system
that was for like stuff with the family,
and the dog, and you know, like my medical stuff.
Yeah, I've had some look for like shared Trello boards
for that sort of thing.
But that's for like-
Whoa, full Trello.
Full Trello, Wes?
That was for some bigger plannings.
You maniac.
Maybe this works better for things where you just like,
yeah, firing off one-off tasks
you need to not forget about.
See, TechMav knows exactly what's up.
TechMav in the chat room says,
ScanBot and Todoist, this is what I'm talking about.
This is what actually pushed me over
is when I started using these two apps together.
Bosh.
Mind-blowing, man, just mind-blowingly.
It makes doing some of those tedious things
that I hate to do and forget to do easy,
because when I have the receipt in my task manager,
it's like when that task comes due,
the information I need to complete the task
is right there in OCR for me.
Copy, paste, boom, I'm done.
It makes it so much quicker.
I love it.
You just get your work done.
And they give you an iCal feed
so you can sync it to a calendar
so you can get all of the tasks overlaid on your calendar.
Perfect, I love it.
So anyways, that's my pitch for Todoist.
I actually signed up for their premium one, too,
because then you get some features
that they should just build in.
I'm pretty sure you just want an excuse
to promote one more Electron app.
Well done, well done, sir.
You are talking to the guy who runs Netafire
on all of the web apps he uses all the time now.
I'm that guy.
I'm like, I'm spinning up spaces on my desktop.
I'm spinning up virtual desktops,
just that way I can put another Netafire window
on that virtual desktop.
It's getting better.
There's so many damn web apps these days, Wes, so many.
All right, well go get yourself some more poppy and wimpy
and Mark II over at the Ubuntu podcast.
Go enjoy.
Another fine episode.
Is it season 11, episode 30 that just came out?
It is, yeah.
Ooh, it's getting close, isn't it?
It's getting close.
It's almost end of season time.
Oh no.
Three months and then we'll take a season break.
Oh, it's, oh, okay, three months.
That's not too bad.
What are we gonna do?
Yeah, we finish at Christmas.
Oh, okay.
That's not, I mean, I can prep myself.
That's enough time for me to let that soak in.
I can, that's, you know, that's good to know
because now I can prep myself.
I don't know what I'm gonna do.
What do you listen to when you need a break
from your relatives around the holidays?
We need a season break, you're right.
We do need a season break, I like that.
Our season could just be like the Christmas holiday.
It could be, yeah.
You know, it could be like a short season break.
We don't have to like have this whole curry rule.
That could just be something.
We could just get curry on the side anyway
while we're working.
Yeah, man.
You're doing it wrong.
If you don't have curry, you're just doing it wrong.
Yeah, we really.
That's mandatory.
So yeah, okay, all right, that doesn't make sense.
The more we think about it, actually.
If we can have an excuse to mandate getting curry,
why would we not take that?
God, what was I thinking?
They're brilliant over there.
You know, you just gotta watch and pay attention
and just pick up a few lessons from time to time.
That's true.
Go get more Westpane over on the TechSnap show,
TechSnap.Systems.
He's also at Westpane.
Why do I always doubt that?
It's accurate.
You're spot on.
It's a pain with a Y, too.
Oh, yeah.
Like an action hero.
Like an 80s movie actor, action hero.
That's pretty much how my life goes.
You're like the podcasting version of Hulk Hogan
without the whole drama thing that happened with Gawker.
Let's not bring that up.
Yeah, let's not bring that up.
All right, I'm at Chris LAS.
You can follow me on the Twitter if you'd like.
I don't really care.
I don't use it a whole lot,
but I do try to respond to tweets.
So I try to be a good Twitter citizen that way.
I'll also mention the Telegram group.
It's been quite a while since we've plugged that,
JupiterBroadcasting.com slash Telegram.
Go there and join the conversation,
and every now and then a random host pops in there
and starts chatting with people, too.
It's pretty fun.
And of course, we encourage you to join this show live.
We do it on a Tuesday at 2 p.m. Pacific.
You can get that converted to your time zone
over at JupiterBroadcasting.com slash calendar.
Now links to everything we talked about today
over at LinuxUnplugged.com slash 270,
including the stuff for Project Stratus,
and more information about Easel
and their contributions to open source.
Go read up about all of that,
as well as the community news and bonus links in there
that didn't even make it in the podcast.
Thanks so much for tuning this week's episode
of the Unplugged program.
Hope you can join us live next week,
but if you can't, LinuxUnplugged.com slash subscribe
for all the ways to get this show every single Tuesday!
Wait!
All right, 270 feels like a nice round one.
Nice round one right there.
Quality episode.
It's really great.
Thank you Andy for having you on.
Great to get those questions answered in there.
Now we just got to name this thing and then we're going to clear out for the Ask Noah
program which is coming up on the live stream next.
I've got a question for you Chris.
Yes sir.
Where's this review of the Precision Workstation?
Oh I know I should have said something in the show.
Well you see we have a particular kind of review scenario we're putting it through and
we're making a special episode that will be airing the week I go to meet BSD and so it's
all part of a bigger episode so that's why it got delayed but I meant to bring something
I meant to bring that up in the show because I'll give you a little preview that isn't
directly related to the review but I decided 1604 is fine but let's put 1810 on there.
So I put 1810 stock Ubuntu on there.
When I first logged in I sat there for a minute just taking it in.
I'll have to show you that's what I'm talking about.
The new theme with this screen is it's vibrant it like it jumps off the screen it is beautiful.
I don't know what they're doing on this monitor and I don't know what's happening in that
theme but I mean Mac OS and Windows don't have anything on this look it was so gorgeous
and I don't know maybe I was having a stroke when I saw it but I couldn't believe how brilliant
and shiny it looked.
It just looked it looked the best I've ever seen Linux look on a 4k screen and it's just
this edge to edge infinity glass you know on this 4k super nice monitor man I'll show
you before you leave the studio.
I'm excited to see it.
It does it does look gorgeous I've been running it in a full screen VM on my XPS 15 with a
UHD panel and yes it's striking.
Yeah yeah this laptop's been fun.
So we had to come up with a particular challenge for it just to kind of to kind of put into
a workload that maybe somebody buying a machine like this would want so it kind of delayed
it because then we wanted to wrap it in with a wider subject so it'll come out but it'll
probably be not next week but the week after because I'm going to meet BSD which is happening
the weekend before that unplugged and then I'll be traveling home during unplugged but
we'll have a show if all goes as planned.
Now that I've said that on air it's better it's better happen we have promised people.
I do have good news we have bad news and good news it didn't quite make it into the show
the bad news is is that a Chrome developer recently confirmed that they have no plans
to enable hardware acceleration on Linux even when you go turn the flag on in the config
settings it actually isn't hardware enabled it lies to you the flag is a lie it's false
flag as Joey put it on OMG Ubuntu which did make me chuckle.
And in his in his OMG Ubuntu article which I think we'll have in the show notes maybe
make sure we have in the show notes for me would you mind I will look right now they
have there is a there is a there are builds that do actually have hardware acceleration.
So I when I saw that news I thought to myself well crud we're never gonna get that new game
streaming tech that we just talked about last week on the show Linux users are out.
However not more than eight hours ago I got confirmation from a listener who is successfully
playing full screen 60 frames a second 1080p Assassin's Creed on his Fedora workstation
using Intel graphics as part of the beta to the project stream.
So it is doable he's got a more modern Intel chipset but it is doable he says it's taking
about 20 megabits a second of his network so you do have to have a pretty solid connection.
They mean it.
But it it does look like this project stream from Google is playable on Linux.
It might just all be happening on the CPU it might not be happening on the GPU.
He's just got a beefing machine.
But it's it's happening.

Look at them reaching out saying, hey, look at this cool box.
What are they running, Linux?
Yeah.
What though?
Ubuntu.
Look at that, 100% open source.
So it's got an Odroid 1.7 gigahertz U3 quad core processor
powered by Ubuntu full specs.
Let's go check that out.
So it's imp.computer.
Two gigs of RAM, eight gigabytes of storage on board,
Ubuntu 14.04, and Cinnamon, Chrome, and Firefox.
Interesting, they say Office.
They say, oh, look at this.
Office, Word, Excel, PowerPoint, online, Google Docs, Apple,
and iCloud.
Screenshot.
I think it's like Chromebook style Chromebox kind of thing.
But it also talks about being a media hub.
It's pretty interesting.
So they're doing a fundraiser?
Yeah, they're going to do one.
I haven't said when.
Continuity, imp supports full continuity.
Now you can pick up any task you were doing
or move what you're watching on your mobile
and then continue it on your desktop.
It looks about the size of a NUC,
only even maybe a bit smaller, I bet.
Yeah, well, if you look at the size of an Odroid,
they're quite tiny.
That makes sense, huh?
And it looks like they're going to tie in with some sort of app
that you can use on Android, iOS, or Windows.
Interesting.
Good find, Poppy.
I wonder if maybe somebody in this room
has heard of this new TrueCrypt remake that's
called, it's better than TrueCrypt, it's called Vericrypt.
It's like an alternative.
They say that they've gone in and cleaned a few things up,
fixed a few problems.
Anybody heard of it?
Anybody trust it?
Anybody found a good TrueCrypt?
I've heard of it.
I ran across the story yesterday,
and I don't know what to think about it.
Yeah, I don't know if I can trust it yet.
What does it take to trust something?
What did it take to get me to trust TrueCrypt?
It's just been around a while, I guess.
Edward Snowden.
Do you know if the audit that was being done on TrueCrypt
is going to publish their findings at some point?
Well, they've published the first phase.
And now they're like, I thought we were
supposed to see the second phase binding.
Well, this is what I'm referring to, is the follow up, yeah.
Yeah, I don't think we've seen that.
And nobody's really talked about it
since the project shut down.
No, and I think until we see that,
we can't say for any certainty whether we trust anything
that's derived from it.
That must be it.
Because what if there's a fundamental flaw in there?
Now that they gave up like this, that whole thing's
still very unsettling.
I don't really understand what happened there.
I don't know.
And now, looking back, it's so weird,
all the things that have happened since TrueCrypt
threw in the hat.
That was pre-Harpley.
That was pre-Shellshock.
And all these essential open source utilities
have had these vulnerabilities in them now.
Makes you wonder what the state of TrueCrypt really is.
And so if there's anything based off it.
You know, that's the other thing.
Remember, the developers said, don't base your future stuff
off ours.
Just start from new code.
Quite.
Yeah, that's another risk.
That's weird when the developer says, yeah,
you don't want to use what I know.
So I realize why they said it.
They said it because when you start going and, well,
that one thing.
But to go in to take something and then try and slap things
on top of it, as soon as you start slapping things on top,
that's just another point where you can poke at.
Yeah, you end up with a Windows release.
Exactly.
Yeah.
Nobody wants that.
Welcome to Linux Unplugged, your weekly Linux talk show
that's powered by a cup of coffee and two energy drinks.
My name is Chris.
My name is Matt.
I might have a heart attack during today's show, Matt.
So if you hear something that sounds like my face smacking
into the microphone, just spring into action.
Make sure you close out the show and remind people
about all the stuff I always remind people about.
And then we'll just clean up the mess later, OK?
Because there doesn't even have to be a video
show in here until Thursday.
So if you think about it, if I'm dead, you got time.
Don't even rush down.
You can just get down here and clean me up
when you get a chance, OK?
There you go.
I think if we can get past the bloat
and not get a hand truck in there, I think we're OK.
Yeah, and actually, it'd be a good time, too,
because I just got the new Borderlands prequel just
came out for Linux this morning installed.
So I'll have that up on my machine.
So you could just play that when you get here.
So it's worth the trip, too.
There you go.
So you're welcome.
Nice.
Yeah.
All right, well, coming up on today's episode,
we got a couple of topics that I want
to throw in everybody's faces to get some discussion going.
Not only did we get some great emails,
which I think will get us going on a few things,
I'm really looking forward to that.
I want to talk about some of the next generation
apps coming to Ubuntu that we got a sneak peek at today.
And then we've heard a lot of times
it's hard to develop applications for Linux.
It's too fragmented.
It's changing too much.
How do you write for an operating system that's
constantly changing underneath you?
Well, we actually have a real world example
of how that affected something that I think you've probably
heard of before.
It didn't all end badly, but it does give us
a little perspective on some of the challenges writing
a major enterprise-grade application for Linux can face.
So it should be a good show.
Why don't we bring in the Mumble Room with us
so we start off the email?
Hey there, Mumble Room.
Time appropriate greetings.
Time appropriate greetings.
Evening.
Hello.
What?
I like that somebody always gets a little singing in there.
That's good.
All right.
So PM wrote in and wanted to pick up
on our discussion regarding Netflix
and how Linux users are all in on DRM now that Netflix is
here.
He says, hello, Chris Matt, Mumble Room chat room.
I just wanted to offer my opinion on the Netflix
equals Linux users are fine with DRM thing.
I personally don't like DRM.
And I'm certainly not all in on it, but let's be honest.
The fact that Netflix now works on the desktop for Linux
is a coincidence, not an intention.
Netflix, Google, et cetera, pushed DRM into HTML5
because they want to offer content on Roku, Android
devices, et cetera.
Because this DRM scheme is now part of HTML5,
Linux users can enjoy it as well.
But it wasn't put there because of us.
That's for sure.
Now we can do two things.
We can be angry at Netflix, not watch it,
and they're going to continue business as usual
because, quite frankly, they don't care much about us.
The DRM will still happily remain baked into HTML5
because it wasn't put there because of us
in the first place.
It was put there for smart TVs and set-top boxes
that they'll continue to sell regardless.
We as Linux users can cry all we want, but DRM is now in.
And it's up to us whether we at least use it
for some benefit to us, like Netflix on the desktop,
or cry about it and have none of the benefit with no one
listening to our cries about DRM anyways.
So nailed it.
So nailed it.
Oh, man.
Wow.
Wow, that is.
I almost stood up and applauded.
It kind of is a bit of a reality check.
Eric, do you think Netflix maybe has a little responsibility
to bear here?
I think they have some responsibility,
but I don't think they are the main reason.
They've come out and said if they could skip the DRM,
they would because it's a headache on them.
It's something they don't want to have to deal with.
It's the MPAA, the Motion Picture Association of America,
that is forcing this on them.
So it's all of the copyright holders
that are forcing this on them because they don't want
any chance of piracy.
They say that.
They say that.
But the thing is, it's going to happen regardless.
But how come House of Cards and Orange
is the New Black also are still wrapped up in DRM?
Netflix made those whole cloth.
They own them.
Yes, they did.
Because they already had it developed.
Yeah, I suppose.
I mean, I just, whatever.
I mean, I think PM nails it.
It's like it's not even for us.
Our protests matter nothing.
Like, we're just shouting into the wind
because it really is more about Chromebooks and tablets
and Android devices and Rokus than it is Linux users.
Aren't all these examples Linux-based anyway?
So inherently, they are looking at it.
They might not care as much.
Right.
It's not like we just happen to luckily get it.
I mean, they're focusing on devices that support Linux.
Yeah, is that what you think, Wizard?
You think it's like they are focusing on Linux,
but it's not the desktop Linux user?
Absolutely.
They do care about Linux as a platform.
They don't care about the Linux users.
As far as they're concerned, they said,
we need a platform that we're going to put out there.
But we don't care about those users.
We want the users that are going to be using our Roku,
our solution on top of it.
Yeah, yeah.
Good point.
Yeah, and you know what?
This is just sort of the benefit of Linux
becoming one of the general technology platforms,
is we get to go along for the ride sometimes.
And I think that's totally fine.
Yeah, it's a good thing.
My point is we need to be pointing the finger,
blaming the people who deserve the blame.
I think Netflix is an easy scapegoat.
You're saying, Eric, show me the money.
Show me the money!
Follow the money back to the content creators,
and they're the ones pulling the strings.
Yeah.
Mm-hmm.
All right, Nathan writes in.
Get ready for this one, Popeye and Wimpy.
He has questions about a software store.
He's got some ideas and some concerns.
Hello, Chris Matt, chat room, mumble room, et cetera.
I was thinking long and hard today about Linux users
and purchasing software.
I know about the struggles large companies have
when thinking about moving over to Linux
and how there is not really a good way
to get their software purchased on end users' computers.
The one package for all thought comes to mind,
though it isn't exactly easy to get distros on board,
especially when you don't have a track record
of anything like this really working that well at all.
So I was thinking about these software stores.
Something could almost be like the way the AUR works,
where the front end knows how to build the program
for that specific distribution,
and you as the user just have to click download and install,
and the app store in the background does the building.
From there, all you have to do is get the payment system
working and you're off to the races.
Since compiling applications between distros
is more or less the same,
everyone could just follow tar.gz instructions,
a software store could just do all of the work
on the back end for you.
So this leads me to my question.
If you were to make a software store,
what would you do to help this process go smoothly?
This type of store will only gain traction
and help the Linux desktop if it worked across distros,
so let's keep that in mind when discussing this.
Also, I'm a Mac guy.
I love Linux, but I only know so much,
so maybe I'm completely off on this concept,
but as a Mac user, he seems like this is something we need.
So I wanted to start with Popey and Wim
because you guys were sort of kicking around some ideas
of what could work for an app store,
and I know you guys definitely weren't thinking
something that builds software,
and I don't even think you were thinking
something across distro.
Well, in fact, it's quite interesting
that the way he describes how a store should work,
that the back end builds the software
and then you just click a button and download a binary,
that is exactly what the Ubuntu Software Center does.
It builds it in a PPA, they're private PPAs,
and when you buy a piece of software,
you are allowed access to a private PPA
where that software was built
and it downloads to your machine.
So-
I think he's talking about compiling them, right?
It's only for one, yeah, and it does that.
Oh, okay. It does that.
Okay. So that bit, yeah,
he's got that completely nailed,
but what he's talking about is building
for multiple platforms, so you have one store
where you click a button and it figures out
that you're on Fedora, so it builds and gives you an RPM.
That would all be magical,
getting buy-in from everyone, tricky.
That's harder.
You think?
So it seems to me that it would almost be, in a sense,
the burden would be on the software center
or whatever you want to call it, to figure out that magic,
but for these developers-
It depends whether you're talking about free software,
open source software, or proprietary software,
because some developers want to put their free
and open software and, okay, they build it in the cloud
and download, works for that,
but what about those developers
who are running proprietary software?
So the individual developers or the app developers
who are creating applications,
they will build it locally on their machine
and then upload a binary.
So it doesn't work for every use case.
Well, I'm also now thinking
of the OpenSUSE build service, right?
Where it builds- Yeah.
Go ahead. Go ahead, Wimpy.
Well, yeah, I was just gonna say the build from source idea
is fine, but you would need somebody
to actually put the effort in to create the packaging
for the different end distributions.
So I have some experience in packaging
on Arch Linux, Debian, and Ubuntu,
and I can't directly take my packaging from Arch
and apply it in dev files
because the concepts are totally different from one another.
So you have to do whole cloth implementations
and the packaging for each distribution separately,
and also spec files from RPMs are different to devs
and different to Arch PKG builds.
So you could build it from source,
but somebody would have to be the package maintainer
for all of the things.
This is why I think the way that we've done it
with the phone, which is the developer builds it
and they upload a binary, is the better way forward.
Because then you make, as you as a developer,
make sure that your thing works,
and if it works and you can build it locally
and you can test it in an emulator
or test it on your device or desktop or whatever,
and then once you've built a compiled version,
you upload that into the store
and make that available to people.
So iogogo, you mentioned the magic Docker word
that seems to be the buzz phrase
that everybody uses to solve problems like this.
What were you thinking in terms of how Docker
could solve this?
Well, from what I've read in places,
I've heard that Docker basically emulates
distros on top of an existing software or kernel.
But you could use, companies could use that to,
I can't talk with this echo.
So you're thinking that companies
could deliver their applications.
Close your mic, I'll summarize.
You're thinking people could deliver their applications
through Docker, and they are kind of starting to do that.
Like I deployed Smokeping on my Arch setup over that,
and I found it to be really simple and straightforward.
And of course, it means I'm kind of running
an Ubuntu machine in a container.
And that, that makes me go back to that.
Do you make that sound bad?
Well, no.
You're like, oh God, I'm running an Ubuntu in a container.
No, it seems like a lot of extra overhead
to run a single application.
Like a lot of extra stuff has to be updated
and maintained now, but in the long run,
I'm not convinced it's not, it might be better.
I mean like, build it in a Docker container,
and then you give out the binary from the Docker container,
and like you have different registers
in the Docker containers.
With all the thousands of gigabytes of storage
that you need to be on the server side for these companies
in order to get all the combination of phones fixed
and figured out and relatively bug free,
either they can do it and host 50 different binaries
for 50 different things that they know
should cover most phones.
It's very hard to go and just give the software store
the source.
Then you can use your phone to chug through it
and compile it straight up on your phone
because you're gonna need some serious power cord usage
after that.
Otherwise, like they need to make sure
that all these programs, apps are compiled
for their target operating system in a runtime environment.
And in order to get all that,
it's a lot of space used up on their servers.
Rotten, I wanna hear your grand vision
of one app store to solve all,
because this is exactly what Nathan's going after.
What do you think?
Yeah, a universal app store for Linux
would be the perfect option
because it would be a structure more in the sense
that every single app, every single distro
can keep doing whatever they wanna do.
They can use RPM, they can use Deb or whatever.
And this software center or store or whatever
just gives you the packages that are for your distro.
And based on which it's installed to,
it can tell what distro it has.
So it knows what packages to give you.
So it'll give you an RPM if you need RPM,
Deb if you're on Debian, stuff like that.
I don't know.
I feel like this problem is already solved
by our friends over at Valve.
I mean, we all have different distributions.
All of us have Steam installed.
We're all downloading and installing applications.
They don't have to only deliver desktop games.
They could also deliver desktop productivity applications.
They already have some in their store.
Well, they do.
Right.
And they do what I suggested,
which is the developer uploads a binary.
They don't build it in Steam.
Right.
The developer builds the binaries
and uploads a Windows binary, a Mac binary,
a Linux 32-bit binary, and that works.
So we have, I see in front of us,
we have Lenart and the Known Team's version
of distributing software through like a ButterFS,
you know, a Delta.
You have delivering applications through Docker.
You have delivering applications through an App Store,
Steam, the openSUSE build service.
Obviously, I think it's pretty clear
that even though this is,
we're working towards something,
and we just haven't,
we still haven't figured out what it is.
It's kind of crazy.
It kind of is over the top.
But I feel like we're getting somewhere,
and I kind of feel like containerization
and all this stuff is almost going to maybe
start nullifying all these differences.
And we might look back at a time
where developers and package maintainers
know what all of these little things are,
but it's been pretty well abstracted away from the end user.
So that's my vision.
Steam plus OBS would be awesome.
My long-term vision is distros will keep
their distro-specific tools that they use
to manage their software and build their distribution.
But long-term, it's almost abstracted away
from the user in all cases.
I mean, you see it today
where now the GNOME Software Center,
it's the same way to install Transmit on Fedora
as it is on Arch now.
And they are hugely different under the hood
in terms of installing packages.
But that's ginormous, right?
And that's one instance of it.
And that's maybe just a little glimpse into the future.
I don't know.
I just really, really think it's going to change eventually.
It has to change eventually, I think.
Because it's something that does keep coming up.
If you don't move forward, you're moving backward.
Well, and it's something that never goes away,
especially when people switch to Linux.
So it's always an email that's coming in our inbox
because people are switching over to Linux.
And they're like, what a mess!
You know, because on Windows and Mac,
when you want to download something,
even though it's a little more archaic than how we do it,
to the end users, it makes a lot of sense.
You Google the name of the thing, Skype.
You click on the Skype download Google results,
like the second or third result, right, every time.
You download it to your desktop and you double click it.
And that's how they think software is supposed to work.
And so the idea to them that you download something
for Linux and it could work on one Linux
and not work on another Linux, that's broken to them.
That is fundamentally flawed.
That's a flaw to them.
And I can see it that way.
So I think eventually it's going to have to be abstracted out.
Something smarter is going to have to happen.
Well, and you say that it's archaic,
but I mean, the reality is if all the software existed
in every software repository, I would agree with you.
But since it doesn't, depending on which distro I'm using,
drastically varies.
Yeah, it can still happen.
Yeah, I mean, it drastically depends
on what software is available to me, right?
But what I mean, they get all their software that way, right?
For Linux users, we have in repos, we can download it.
But for them, they go hunt and peck
and download from the web.
And that's why sometimes they download the wrong thing
and they get malware, like it's not a safe,
like trying to get printer drivers for something that,
yeah, it's very different than how you do it under Linux.
And to them, it's totally, it doesn't make any sense
how you do it under Linux, how you install software.
I specifically, I know I've mentioned this a lot,
but watching Chase try to install a few applications
for the first time on Ubuntu,
and other people I've had try it too.
Every time I tell them, okay,
now let's install some software,
even though I intentionally kind of introduced them
to the software center and then close it
and make sure we move on and say,
okay, now let's install some software.
I swear, every time they open up the browser
and they go to Google, they don't even think about it.
They don't even think about packages.
No, they don't.
I think you're also combating muscle memory.
People have it wired into their,
it's like, people that are analytical,
they're dealt with a certain situation,
they instantly go into solving mode,
whereas someone else just goes into freak out mode.
I think it's the same sort of thing.
These people have been wired to find software
in this fashion, and you're having to unlearn that.
Yeah, exactly.
And then it may take some time.
It's all training.
Yeah, yep, yep, it doesn't, yeah, exactly.
You can teach, trust me, you can teach an old dog new tricks.
Hey, speaking of new tricks,
let me tell you about DigitalOcean.
They got a few new tricks I'd like to tell you about.
Oh, you're not familiar with DigitalOcean, my friends?
Now's the time to go to DigitalOcean.com,
because we've got a promo code for the month of October.
They'll get you a $10 credit.
Hey-oh, unplugged October, all one word lowercase,
$10 credit.
So what is DigitalOcean?
It's like a warm cloud blanket.
You just want to wrap up it,
and you set up all kinds of droplets,
because it's a simple cloud hosting provider
dedicated to offering the most intuitive
and easy way to spin up a cloud server.
Users can get started in less than 55 seconds, trust me.
And pricing plans start at only $5 a month
for 512 megabytes of RAM.
A 20 gigabyte SSD, one CPU,
and a terabyte of transfer for $5.
And DigitalOcean has data center locations in New York,
San Francisco, Singapore, Amsterdam, and up in London.
Why not get some global diversity?
That's what I always say.
In fact, I've been doing that.
I actually have done it just for performance purposes,
because we have a lot of folks that are syncing
to some of our resources from other parts of the world.
So I thought, okay, let's have a server in their area.
That just makes sense.
But then I later realized,
hey, I just distributed my data across the world,
and now I have regional backups.
That's great.
So that's also great from that standpoint as well.
So you can do it for performance or for data purposes.
And I think the other thing that's really awesome
about DigitalOcean is,
I know that because their interface is so great,
I can really get up and get something running
in pretty much no time.
So getting the server part ready, spun up, backed up,
whatever I need to do before a project,
DigitalOcean makes that crazy easy.
So that's never the barrier to getting started,
which I really appreciate,
because their interface is super simple and intuitive,
and you can replicate the functionality
on a larger scale with their API.
But something new DigitalOcean's doing.
Now it's your chance to make a little cash on the side.
If you're an expert in something,
you want to deploy, if you've deployed something
and you want to write a tutorial for it,
DigitalOcean can pay up to $200 for your tutorial,
and they have editors that will work with you,
so don't worry, the burden's not all on your shoulders.
They just need somebody that really knows their stuff,
because DigitalOcean wants to get their community tutorials
beyond anything else that anybody else has,
and that's why they're willing to pay the good 200 bucks.
That's some good money for writing.
Yeah, that's actually, in most circles,
for just a standard article,
it's outlining how to do something.
That's the going rate.
That's not bad, right?
I mean, especially if it's something you already know.
If it's something you already know,
and you know what I would have done, Matt,
is I think like, even if I already had,
if I just wanted a little play money,
I mean, I could take those credits or something,
put them on my DigitalOcean account,
and have my droplet pay for for a long time,
because they're talking it's $5 a month.
But even if I, I kind of kick myself,
because I think I probably could have taken advantage
of this when I first deployed OwnCloud 7.
I had that up and running the night it came out,
and then I had a whole bunch of people asking me
how I got OwnCloud 7 running,
and I thought, you know what?
I could have written that up,
worked with one of the DigitalOcean editors,
and potentially made $200.
So I'll have a link in the show notes
if you want to find out more information about that.
It's an initiative that DigitalOcean's really excited about,
because they're trying to get that just better than anybody.
They've already got amazing tutorials, a great community,
now they're trying to make it better than ever.
DigitalOcean.com, check them out.
Unplugged, October, we'll get you that $10 credit.
Find out why Matt and I have got like droplets
coming out of our ears these days.
Well, and just to touch on that whole writing thing
one more time, what I'm saying is that
most places that you go to seek out freelance work for,
you're not getting paid anywhere near that.
This is unusual.
This is more closer to pro-level pay.
It's a good opportunity.
I know. It's a great opportunity.
I know, right? It's good money.
And especially, I know people in our audience,
there's stuff out there they know a lot about.
Definitely. They can make a little extra money on.
All right, so we've got a couple more emails
that I think are really gonna get us going
on a couple of topics.
So let me jump back into the emails here.
First email that we're gonna talk about is Peter's,
and he wants to know, this is a question I get all the time.
He says, hey Chris, the other day I was watching
one of the episodes of LASS,
and you jumped into a terminal
when you were installing an app.
While you were using the terminal,
I noticed a kind of auto-completed helper tool
that would suggest your next command.
I tried searching for bash in the search input field
on your site, but it returned a bunch of shows
where I could not easily find any mention of the tool.
And if you're watching on the video version here,
I'll bring up my terminal on, here's a big fonts.
And if you'll notice, if I start typing packer or ping,
you see how it's starting to automatically suggest
commands for me.
And I could hit over error and it'll complete the command
and then it'll run a search.
That is Fish Shell.
That's the Fish Shell.
And I like it a lot.
It's just in the Arch, it's in probably every distro package.
It's in the Arch packages too.
And I installed Fish a while ago because I'm a lazy person.
And I mostly run the same, I run about the same 10, 15,
20 commands on the command line over and over again.
Systemctl, restartplex, pacman-syu, you know,
those kinds of things over and over again.
And so the nice thing about Fish is it not only
is really smart about figuring out what directory
you're trying to get to.
Like here, I'll show you another one back on my screen here.
In the mornings, I'm constantly, right before I go on live,
I'm downloading like an old retro tech commercial
for Tech Talk Today.
So a lot of times if I just type in CD,
now it's automatically suggesting the path
that I might wanna go to.
In this case, it's Dropbox slash Jupiter remote host
slash today.
It's a fairly lengthy path.
And instead of me having to type in there,
Fish Shell's saying, well, you know,
you type this one a lot.
Because I pretty much type that every single morning.
So if I hit the over arrow,
it just completes that whole path for me.
And then I hit enter.
And I also like the way it displays my current,
my present location, all that kind of stuff.
So I know Fish Shell isn't the best.
Any Shells in the Mamba Room anybody wants to call out
that you love besides Bash?
Any Bash alternatives?
I'm just saying, Chris, I saw that one on that show
and I changed my default to Fish having seen it.
Just for the few seconds I saw it on your screen.
It's handy, right?
Yeah, it's awesome.
Yeah.
I know a lot of people like ZSH, but I like Fish better.
Yeah, ZSH, I think, is I also see recommended the most.
And I think Fish and, oh, Heaven, so Heaven,
do you know ZSH, so Fish and ZSH are related?
I'm pretty sure that Fish was created from ZSH.
ZSH, uh-huh, that makes sense.
Because, you know, Shells aren't exactly the most easiest
thing in the world to, you know, come up out of thin air.
So all of the Fish beauty is built on top of ZSH's awesome
built-in stuff.
And Fish just knew how to use ZSH.
Blaster, you have a Shell you like.
Yeah, I've come to like TCSH, actually,
after working on some of the BSD servers that I have access to.
Very nice, very nice.
So there you go.
There are some Shells you can check out besides boring old
Shell Shocked Bash.
I kid.
All right, Mike writes in.
And guess what Mike wants to stir the pot on?
System D. But I thought it was actually a good email.
So we'll go into this.
Not to get the whole System D discussion going again,
but he says, I finally identified
why I've disliked System D for so long.
And now that I identified that, I'm actually OK with System D.
I have a feeling that my situation also
applies to many other who have disliked System D.
What frustrated me the most about System D
is that it had an awful product positioning,
for lack of a better term.
When it first came out, it billed itself
as a simple init replacement, plus a syslog replacement,
plus a cron replacement, which in my mind
makes it about as much sense as putting alcohol, tobacco,
and firearms under a single agency.
But at least I could get my head around it,
and I was fine with it.
But then it started taking control of login
and managing my temp mount, among other things.
I became confused and frustrated.
This wasn't part of the agreement.
What kind of cancer is this System D?
I've since realized that even though System D still describes
itself as just being an init replacement,
it's actually designed to become an entire operating system
layer.
It wants to be in charge of everything
that happens between the kernel and X11.
Udev, Dbus, login, DHCP client, WPA supplicant, et cetera.
If there's a job that runs before the display manager
starts, System D wants to provide it.
Now that I know what System D's true purpose is,
it no longer confuses and frustrates me.
In fact, I'm kind of OK with it.
I could even go ahead and replace mount NFS
tab for all I care.
I mean, that's what it's designed to do, right?
Is he right, guys?
Is System D designed to just manage
all of the things between the kernel and X?
Yeah.
Yeah, I think it kind of is, Tim.
I think it's providing that kind of abstraction.
That's my impression.
Yeah.
All right, Otter, you have something to say.
Go ahead.
Yeah, I was just going to say this idea has occurred
to other people as well.
Upstart was also going to replace
cron and auto mounting and things like that.
The difference is Upstart had a limited budget,
whereas System D had Red Hat behind it.
Well, OK, yes.
I want to go back up.
So System D, Michael Dominic on Quota Radio,
if you haven't listened to this week's Quota Radio,
he goes after me the entire episode.
And he got on me about System D and was really
trying to get to the root of it.
And one of the things that he sort of stressed
was like, wait a minute.
When you describe it, it sounds almost like some
of these things are necessary.
And I'll give you an example of one of the things
that System D does for me on my servers that, to me,
feels like something that has to be in Linux for it
to stay competitive.
And that is that System D manages my NFS mounts.
And the reason why I find that to be important
is because I've had networking issues here at the studio
because of Comcast.
And we reboot things like our router and even the switch
just to be safe sometimes.
And my network connections go up and down.
And System D recognizes that and is intelligent enough
to re-establish my NFS mount after the network connection
is live again, which makes all of the server software that
runs over that NFS mount continue to function
without me having to do anything.
Now, that's handy just here having a server that
never leaves the studio.
But on a laptop or a phone or a tablet
where you're moving between cellular and Wi-Fi
and different Wi-Fi networks, that's
a must-have critical feature.
And that's just one thing that System D now
manages that is extremely I just I don't even
think it's a nice-to-have feature.
I think it's like we've got to have that now.
The operating system has to be more cohesive.
It has to be more intelligent.
It has to be communicating with each other to stay competitive.
And I mean competitive in a way where people actually continue
to use it because if it doesn't do these things,
it'll start to look old and not appropriate
for modern-day tasks.
And I recognize that we're kind of betting a lot on System D,
but I don't see anybody else really.
I guess that's part of it is I don't really
see any other alternatives really kind of stepping up
to do the whole thing.
Well, that's the key is that nobody else is doing it.
And it seems to be a great solution.
It's worked for me.
It's worked for a lot of people.
PC Wiz, you think it's more it's not what System D does.
It's how it does it.
What do you mean?
I think just the way they're not using standard Unix pipes
and things to communicate between the different utils
is what's upsetting most people.
Because if they just set it out like standard Unix utilities
and used pipes to communicate between them,
then I don't think people would have such a problem with it.
But because it's doing its own custom thing
and outputting the binary files, that's
the problem people have with it.
Not particularly that all this stuff shouldn't be there
and shouldn't be unified under one set of things,
but it should be in different bits
that talk in a standard Unix way.
All right.
All right.
Very good.
Now we're going to open up something special.
We're all done with the System D debate.
We've got to talk about Ubuntu and the future
and some really flashy stuff that I saw today.
And I'm glad that Popeye is here,
because maybe I think we'll get this straight with Popeye.
We won't make it awful.
Popeye will save us, I'm told.
I'm told.
Hopefully.
Hopefully.
Because I want to discuss, we've got some great visuals
of the next generation apps that we'll probably
be able to get our hands on in Ubuntu 14.10
just to play around with.
And I want to see what you guys think
and kind of get your take on if you
think they're going to get the job done for you
and if you're excited about them.
I actually watched a video, I don't know who posted it.
I'll have to get that before we go on, this morning.
And some of those apps are looking pretty damn good,
especially the movies and videos app look really good.
So before we get to that, I want to tell you
about our next sponsor, and that's Linux Academy.
Go to linuxacademy.com slash unplug to get the 33% discount
and to check out the brand new website.
Man, Linux Academy just really spruced it up.
Go over there just to check that out.
These guys, I got to talk to them.
I got to talk to them to redesign the Jupyter
Broadcasting website because I tell you, this is how you do it.
I could see this look working for us.
I could see that.
So what is Linux Academy?
It's probably where you should go right now
if you're ready to take your Linux skills up
to the next level, make yourself a little more competitive,
maybe get that checkbox on the next review
or just sort of test yourself, find out
what you're interested in.
Linux Academy has a whole range of courses,
and your subscription gets you access to all of it
and all of the new stuff they're adding.
DevOps stuff, AWS classes, basic Linux classes
to expert level Linux classes, OpenStack.
And they have seven plus distributions
you get to choose from when you're
taking any of these courses.
The courseware will modify itself
to match that distribution.
They have downloadable comprehensive study guides.
You can take those offline.
That includes media like audio and video files as well.
I've heard from many listeners who now use those downloads
as sort of like supplemental podcasts.
So when they're out listening to the shows,
they get a lecture learning in.
And Linux Academy also has the ability
to generate a learning course, a learning plan,
just based on your availability.
You go in there and plug in the information you've got.
They'll build a plan that fits your schedule.
When you open up the dashboard, you
get an immediate snapshot of right where you're at,
what you have, how long each section is going to take.
You can do recaps.
You can test yourself.
You can re-watch video introductions.
And if you get to a spot, you can also seek instructor help.
They also have an active community and live streams
of events where you can talk right to the educators.
They're constantly adding new stuff.
A lot of these are scenario-based training courses.
That way you go end to end with the technology.
For example, if it's an AWS course,
you'll implement things on EC2 and S3.
They'll spin up the instances for you
as the courseware requires it.
That's really awesome.
And now these servers have public addresses
so that way other people can log in
and you can work in a group.
It's pretty awesome stuff.
And they're adding new things all the time.
So head over to linuxacademy.com slash unplugged.
You'll get a 33% discount.
And this is a school put together
by Linux enthusiasts and educators who
had the know-how to do something like this, who
wanted to give Linux users a spot to go and actually learn
something, and not this stuff that you
go to that's sort of like cookie cutter Linux
material that's been put together by some industry.
This is from stuff from folks who work in the industry.
They really know their stuff and they're experienced educators.
It's an experience that's custom crafted for Linux users.
And you can find it linuxacademy.com slash unplugged.
Check out all of their awesome stuff.
It's another great way to go if you just
want to spruce up your skills.
I've mentioned before they've got courseware on rsync
and backup scripts, bash scripting, things like that,
Android development, PHP, the entire LAMP stack, all of that.
linuxacademy.com slash unplugged.
And a big thank you to Linux Academy
for sponsoring Linux Unplugged.
OK, so I'm not going to play a lot of this video
because a lot of people listen to the show
in the audio version.
But Popeye, I assume you've seen this video that
was posted online, the Ubuntu next gen apps for 14.10.
Have you seen this?
No.
No, I have.
OK.
I've only briefly, I haven't actually watched the whole thing.
So I've never seen the movies app.
This is the first time I've, I think
maybe I've seen screenshots of it,
but it's like the first time I've ever seen the UI resizing.
Is that Flashback?
I don't know.
It just says movies in the title bar.
Yeah, Flashback.
Right.
Is that the name of it?
Flashback?
Yeah.
Cool.
So this is the one that gets shown.
Then also music gets shown quite a bit.
What we're seeing is it's obviously,
like for those of you listening, I mean,
this is clearly a touch UI.
And that makes sense at this stage, too.
But it's fully usable on the desktop.
And the rescaling has surprising functionality on the desktop.
Like there's actually like, I always
pictured that dynamic rescaling really just for like going
from phone to desktop.
But it actually works really well on the desktop,
too, just depending on where you position the window.
It all looks pretty slick.
Most of the apps actually in that video
haven't been optimized for desktop.
I could imagine that.
Most of them are actually tuned for phone and tablet.
And we're not even begun to work on them for the desktop.
We've done the absolute minimum to get them working
on the desktop.
And some of them actually look really good.
So I mean, kind of what like I'm going
to take an optimistic road here.
And I'm going to go like way down the road,
like even maybe past 1604.
But we're going way down the road here.
Is really what we would have is at that point,
the Ubuntu desktop is almost entirely an ecosystem
of its own in terms of apps, right?
So it's got presumably Unity 8 by that point.
It's got its own terminal app, its own file manager,
all these things.
So that's a lot.
In one sense, it's a big burden for Canonical
to maintain all that stuff.
But in the other sense, it's nothing not different
than what the GNOME project itself is doing,
or elementary OS is doing, with potentially a lot less
resources.
And it seems to be maybe this is kind of becoming the trend,
is just to create your entire own ecosystem under Linux?
Not really.
We didn't create everything from scratch.
I mean, worth noting that most of the apps that
are in that video were created by people in the community.
They weren't actually created by Canonical.
The projects were started by Canonical.
Pretty much 80%, 90% of the code,
if not more, in some of those projects
was written by community people, volunteers.
And they're the people I work with every day.
And they're not all written from scratch, either.
So for example, you happen to mention
the two apps which build upon existing frameworks.
So for example, the terminal app builds on a console plugin,
the KDE console plugin.
And the file manager builds on some modules
that give us the basic file manager functionality.
And on top of that, we built a QML interface.
So what you're kind of saying is a lot of this functionality
kind of comes for free.
And then you have to kind of build maybe something
on top of it, in a sense.
So it's not like it's a massive.
Yeah, we have to build the QML UI on top, yeah.
So there really is a potential for Ubuntu
to have some pretty good first class grade applications that
are kind of exclusive to the Ubuntu desktop touch platform.
Well, they don't have to be exclusive.
I don't mean intentionally exclusive.
Right, I mean, they're all free software.
So if you wanted to run them on your platform,
as long as you've got the necessary dependencies, which
for most of them is have you got Qt 5.3, which
is in Debian and various other distros.
I'm sure it's already in Arch.
You could probably run most of this stuff.
So it's not intentionally specific to Ubuntu.
Yes, it uses the Ubuntu look and feel, uses our toolkit,
uses our branding.
And we target Ubuntu as the first platform.
I'm picturing 17.04, 18.10 releases,
like the amount of features, because at that point,
there will be so many applications that
get updated as part of an Ubuntu desktop update.
Looking at where 14.10 is at today versus where something
like 18.10 would be at, there is going
to be a whole new suite of applications
that are shipped in those updates that
don't even exist today on the Ubuntu desktop.
Right, and those don't have to be created by us.
We've created this store where you can upload your own apps.
I'll give you a good example, actually.
This week, I saw someone tweet about a calculator app
for Firefox OS.
And I found it on GitHub, and I grabbed the code,
and I packaged it up.
It's an HTML5 app, and I stuck it in the Ubuntu click store.
And now that's available for people on the phone.
And in the future, that will be available on the desktop.
And that took me minutes to take a piece of code that
had already been written, turn it into a package.
The package consisted of like three files,
three plain text files that are easy to do.
In fact, I copy and pasted them from another one
on my projects.
So it's like near zero effort to take a piece of code
that you've created and make it available.
And in the future, yeah, we'll have
the store that will allow you to deploy those click
packages to desktop, tablet, phone, Gmail.
So what do you think about the fact
that some Linux users will be coming to Ubuntu
from a different distro, and it's
going to be like an entirely, they're
going to have, they'll have to learn an entirely
different suite of applications.
Right.
And look how awesome they already are,
and we're nowhere near ready for those people yet.
Right.
Yeah, I mean, I'm not saying it's going to be a bad thing,
but it's going to be, for me, it's
weird because like right now, if I
learn how to use like a file manager, like say,
Dolphin or whatever, it's the same Dolphin
on all versions of Linux that I installed KDE on.
It's just going to be a different thing.
I'm not saying it's bad or good.
It's just something that's new, I think.
Yeah, but these are default applications.
I mean, look what elementary are doing
with their default applications.
They're setting themselves aside and having their own brand,
their own style, their own theme to set themselves aside.
They're not necessarily forking Linux or anything like that.
They're making a statement that this is what elementary OS is.
And when you come to elementary, you
get slightly different applications.
OK, the file manager looks like a file manager,
and just the same as our file manager
looks like a file manager.
The music app will have different features, maybe more,
maybe less.
So do you think the biggest challenge will be factoring
these in a way where they seem a little more
native to a desktop interface going forward?
Do you think that's going to be the?
I don't think that's the biggest issue.
It's one of the issues.
The design team haven't focused on the desktop.
That's why Unity 8 isn't finished yet.
Unity 8 is a preview remix CD you can get.
It's not the default desktop.
We're not going to make that mistake again.
Yeah, I'm looking forward to at least trying
to get to play around with them a little bit.
I just think it's.
Well, you already can.
They're all available.
They're all free software.
You can grab them and play with them.
Yeah, the code is all on Launchpad.
We build devs.
So yeah, you can install them, or you
can play with them on a phone.
It's impressive to see how far they've come already, really.
I've seen people, I mean, people seem to really not
get past the fact that like, oh, you know,
I've seen a lot of people complain about the file
manager has a huge header bar up top and things like that.
They're obviously not accepting the fact
that they really haven't focused on the desktop UI yet.
Right.
But even on the phone, it has that quite big header.
And we're looking at improving that.
So next week, as I've mentioned to you before,
I'm going to be in Washington, DC.
Yeah, I've heard that, DC, yeah.
And a bunch of the people who wrote those apps that
are in that video, a whole bunch of them are coming with us.
And we're going to work on all kinds of things,
whether it's design, or fixing bugs, performance, feedback
from users.
So we're going to look at comments on those videos,
comments on Reddit threads, and see
what people think of those apps, and see
what we can do to improve them, and how people use them.
So yeah, it's an open source project.
So we take feedback and we improve them.
And I will have the video that was posted,
if you guys are curious.
It's a great video, and we'll have it linked in the show
notes.
And you can just search YouTube for Ubuntu next gen apps
on Ubuntu 14.10, as well, just search YouTube.
And you get to see some of these apps in action here.
Do you know what populates this TV and movies?
What did you call it, Fire or something?
Yeah, that one's called Flashback.
It's written by a guy called Necklash, who's
actually the same guy who wrote the clock app that's
on our phone, that's also in that video.
Is it doing a TVDB search here?
It uses, I think it's called Tracked.
OK, yeah, yeah, yeah.
Oh yeah, an online service for tracking the TV program,
if you like, yeah.
And he's one of the first.
I mean, he's blazing a trail.
Because we haven't even written massively convergent apps.
We talk about convergence as this ultimate goal by 1604.
But he's blazing a trail.
He's created a convergent app that works on the phone,
works on a tablet, and works on a desktop,
and adapts itself to the space that's available.
And we're learning from him.
And he gave so much feedback to the SDK developers
at the last summit that we had in Malta.
That's why we have these community people developing
apps, because it helps to further the platform
and give us feedback on what we're doing right
and what we're doing wrong.
Yeah, that's really cool to hear that they're
having a direct impact like that.
Because it's one thing to say community's involved,
but that sounds like community's actually.
Oh, directly, yeah, really directly involved.
That's pretty neat.
I'm looking forward to at least getting it.
But if I install 1410, do I just add a PPA and I get those?
Or how would I get those today if I wanted to play around
with some of that stuff?
So we have a core apps PPA that all the devs
have built for 1410.
So yeah, if you install 1410 and added the core apps PPA,
just Google core apps PPA, you'll find it.
And there are daily builds of all those apps.
I think I'm going to play with that.
Cool, all right.
Yeah, and again, keep in mind, like Poppy said,
they're not yet fully set up for the desktop.
So don't get all judgy.
It's just for playing.
And you know.
Yeah, we get a bit twitchy when we see videos.
I mean, it's great to see people showing off
what the community guys are doing with these apps.
But equally, we get a little bit scared because we
know they're not finished.
And people need to be aware of that.
Yeah, and if there's one you really like,
buy that dev a beer, and maybe he'll implement a feature for you
if you ask him very nicely.
You never know.
Or contribute code.
Yeah, Patchy's welcome, as always.
Always great, too.
All right, well, so I wanted to, while we're
talking about developing software,
I wanted to talk about some speed bumps
that the Lightworks developers ran into.
You know the editor that Matt and I talked about quite a bit
on last, Lightworks?
They ran into a major issue caused
by a Linux kernel update that just sort of blindsided them
and took them a while to sort of track it down.
And it's just kind of a good snapshot of sometimes
some of the problems developers face while writing
a major application for Linux.
And how it happened, it's all kind of interesting.
So I'll tell you about that.
But first, I want to tell you about Ting.
Go to linux.ting.com.
Won't you?
linux.ting.com lets them know that you appreciate them
supporting Linux Unplugged.
And it's a good way to go check them out and get a $25 discount
on your first device.
And if you already have a device,
you can get a $25 credit for Ting.
So what is Ting?
It's my mobile service provider.
It's mobile that makes sense.
It's mobile with no contract.
It's mobile where you only pay for what you use.
Ting doesn't have prepaid plans and packages like that.
It's just your usage.
Ting takes your minutes, your messages, and your megabytes.
They add them up.
Whatever bucket you fall into, that's what you pay.
It's a flat $6 for your line.
So you can have unlimited devices with no contract
and no early termination fee.
And Ting has a rocking dashboard where
you can manage your account, get a snapshot of exactly where
you at.
And they also work on the Android or iOS devices
with their app.
Plus, they've got no hold customer service.
You can call them at 1-855-TING-FTW
any time between 8 AM and 8 PM business hours
and an actual human being, a real one.
Somebody said, please stop saying an actual Canadian.
It makes us feel bad.
I'm including everyone on the planet now.
I don't know if everyone working at Ting is a Canadian or not.
But I do have a pretty good suspicion
that everyone answering the phone is a human being.
I have not personally verified that.
But based on the folks I've talked to,
they seem quite human to me.
So I'm going to vouch for them.
And you can find out by calling them at 1-855-TING-FTW.
Find out for yourself.
They'll probably answer you and any other questions
you have because they're empowered
to solve your problems.
And now is a great time to switch to Ting.
Go to linux.ting.com to get the discount and give us credit.
They have a warehouse sale.
Ting is upgrading their warehouse.
And they'd rather give you these devices for a crazy great price
than have to move them.
Can't say I don't blame them.
That sounds like my style of moving.
Take it.
I don't want it.
I don't want to have to move it.
I hate moving stuff.
Ting feels the same way.
Right now, I can't imagine they're
going to have many more of these in stock.
But you can pick up the Sierra 4G Tri-Band LTE
hotspot for $63 with Ting's warehouse sale.
$63 plus a $20 Ting credit.
And you're going to get our $25 Ting credit.
Now, hold on and think about this.
You only pay them for what you use with this bad boy.
So that's a $6 hotspot because it's $6 for the line.
And then that $20 credit is going to last you a while.
So you can have a hotspot, Tri-Band LTE, like if I was Popey.
And I was going to go to that fake Washington.
I would pick up one of these just for while I was here.
And I wouldn't be able to use the whole thing.
And I'd have data with me the whole time.
Every time I came to the States, I'd turn it on.
And with Ting's dashboard, you can turn things on and off
when you need them.
So it's another great way to save money.
They've got a bunch of great devices
right now, including just straight up feature phones.
Hey, maybe you just want to make a phone call.
I know, right?
You want to use your phone to make calls.
And you just want a really great battery,
like a three-day battery life.
Well, you can pick up a feature phone
right now for a ridiculously low price.
$43 plus $20 in Ting credits with no contract and no early
termination fee.
And you're just paying for your usage
for a feature phone that's going to get
like three days of battery life.
Plus, it still has a decent camera.
So if you get in a car accident and you
need something for the insurance,
you can still at least take a picture of it.
So you're not like a total caveman.
But it's mostly going to be for making calls.
And I don't think there's anything wrong with that.
If that's how you rock, that's how you rock.
I respect that.
linux.ting.com, linux.ting.com.
And a big, big thank you to Ting for sponsoring Linux
Unplugged.
Go check them out.
All right, so now this isn't going to be a pity party.
But I wanted to cover this.
I think it's legit that we talk about this.
And this doesn't have anything to do with packaging.
This doesn't have anything to do a system D
or anything like that.
But Lightworks developer on a Red Shark blog,
that's the blog that tracks the Lightworks development,
talked about the problems he ran into
and the eventual positive side of it by developing for Linux.
He says, in recent weeks, some of the Lightworks Linux users
started to report reduced performance of both new
and old versions of the software.
It's like, hmm, multiple versions are affected.
After some investigation, it appeared to slow down
was only affecting systems with Linux kernels newer than 3.13.
In tests, kernel performance in 3.14
did seem to be slightly worse than earlier versions.
But nothing could explain the symptoms
that were being experienced by Lightworks users.
So what could possibly explain the sudden change in behavior?
Many of the media files that editors use,
you have to understand this part of it.
Many of the media files that editors use are compressed,
like H.264 and stuff like that.
Well, these compressed files have a massive downside.
And it's something that we try to avoid here
at the Jupiter Broadcasting Studios.
We actually record in lossless, with the exception of BSD
Now, because they're recording it
on the east coast of Canada.
So we have one show where we edit a compressed file.
All our other shows are uncompressed.
So media editors, when they're working with compressed files,
have to deal with this thing where
there's these gaps in the frames, where the editor is just
supposed to figure out the frame numbers that go in between.
And it's just sort of assumed you figure it out.
And the problem with that is these editors
have to open up every single frame in between these gaps
to count them all.
And that can take megabytes and megabytes and megabytes
and megabytes of memory per clip.
Because it has to open them all up in a memory to count them,
to figure out the number of frames
in between these gap markers.
And that takes tons of RAM.
That's why you need a lot of RAM in an editing system.
And so what started happening is when
you had tens of hundreds of files open at once,
you start running into low memory.
OK, not a problem.
That's why we have great memory management.
And in fact, Lightworks handles this
by constantly monitoring the system's memory usage.
And then it automatically limits and ultimately empties
its various caches when it notices
the amount of free memory is starting to get low
and staying low.
This technique relies on being able to ask the operating
system, ask the Linux kernel, to report how much memory is
available in total and how much has been used
and how much is available right now to use.
Starting with Linux kernel 3.14, free memory
is being reported entirely differently,
differently enough that it causes Lightworks software
to start believing that there is no free memory left at all
when in fact there was.
As a result, the memory monitoring code
responded as it was designed to by ensuring
that all the frames and file caches were completely empty
all the time.
So as you might imagine, that had
a major detrimental performance effect on the Lightworks
editor.
Every time a frame or file was added to the cache,
it was then having to be immediately purged.
Well, that could happen 30 times a second, right?
Or 60 times a second, depending on what you're editing.
So it was forcing this constant recompressing decompressing
of the media file every time you access that area of the file.
So they immediately didn't leap to the idea
that it was the kernel though, right?
So tracking down the problem became kind of an endeavor,
because it kind of seemed like the culprit would be probably
a piece of their code that wasn't running properly
anymore, rather than a piece of code in the Linux kernel that
was different.
That wasn't what they expected.
Thankfully, they say once they did track it down to the way
3.14 was reporting its memory usage,
rectifying the issue was not a majorly time-consuming process.
And it actually afforded them an opportunity
to rewrite the code in such a way
that it made it immune to further possible kernel changes
like this in the future.
So it sounds like maybe they weren't doing something
quite the right way.
But at the same time, it sounds like a pretty key piece
of the Linux kernel kind of just changed right out
from underneath them.
You wouldn't think it would happen so suddenly like that.
But I've seen, and this is over the course of many years,
that sort of thing happen.
And it's rare.
But when it does, usually it's like a real punch to the face.
And usually I see this with wireless devices.
Every three or four years, they just
do something stupid with the one device that you depend on.
I've learned to have multiple devices.
And to see that in something like software in this space
to where it's like somebody could, as a professional,
be relying on this application.
Oh, hey, by the way, screw you.
You're out of luck.
Through no fault of anyone's, it still sucks.
Derek Devlin, is it Lightworks' responsibility
that their developers have an open dialogue
and relationship with the kernel team?
What are your thoughts?
Definitely.
One of the things Linux is always talking about
is that they won't break user space.
So unless people are saying, look,
this will break user space for me, they won't know.
So they will have to break user space.
And sometimes it's inevitable.
So in the overall, your algorithm
is really bad if it relies on always one functionality,
has no fallback of that functionality.
So if I was doing a predictive algorithm,
I need to make sure that my prediction works.
So I have to put some heuristics that say, OK,
this is changing too fast.
I'm going to start using constants.
And just be a performance hit that it's guaranteed.
Because otherwise, the software becomes unreliable.
That's kind of design.
You make decisions.
They made one that was bad.
I think so.
But kernel Linux isn't this is, but this problem
has sort of already been solved by the marketplace in a sense.
If you're a media production shop
and you're working on Hollywood's next blockbuster,
chances are you're probably not running
Debian, Unstable, or Fedora, right?
Right.
And we're in this boat.
We use Lightworks professionally.
And this is the first I'm hearing about the problem.
And probably the reason is because the production machine
is still on 1204.
Right.
Yeah, wouldn't that be your best bet?
And why not?
Because the primary purpose of the machine
is nothing to do with what the operating system can do.
It's all about running that application.
Well, yeah, exactly.
For us, the machine boots up and Lightworks takes over.
And if you've used Lightworks, then you
know that Lightworks essentially behaves almost
like an independent operating system, right?
That's a monster.
It essentially captures the screen and everything.
You have essentially a little desktop to work on.
So the operating system kind of fades to the background.
Yeah.
And it's exactly why we have, you know, obviously,
the guy that's always talking about Arch and rolling releases.
This is exactly the use case for a long-term stable distro
right here in a nutshell.
Because it isolates you from these kinds of things.
Now, that said, I still elect for my systems to go rolling.
Now, I'll be the first person to tell you, though,
if our editing was done under Linux, which I wish it were,
if it was, I think absolutely we'd probably be LTS.
We'd probably be Ubuntu, because I
think that's probably what the Lightworks guys are targeting.
And that would be the end of it.
And I would not probably want to upgrade from 12.04
until I had to.
Makes sense.
Unless there was some kernel feature I had to have
or something like that.
But when it comes to the systems that I'm
browsing the web and gaming on and show research,
yeah, I want rolling.
I think, I think that's, I don't know.
Daredevil not, oh, go ahead, Matt.
No, I was going to say, I think there's inherent logic to that.
I mean, it's like, of course, I'm not using Lightworks
on a regular basis.
I use other applications for video editing
because I'm much lower level stuff.
But if I was to experience that, I
think it would definitely kind of jolt my chair a little bit.
And it would probably make me re-evaluate
the distro I'm using almost instantly based
on what you described.
Oh, man, you know what?
Wizard just totally made me reconsider my whole position.
Go ahead.
Yeah, so I can totally understand, because I
do deal with this fairly often.
I still deal with my high school sometimes.
And the one thing that always changes is I'm updating FFmpeg.
And FFmpeg moves so fast.
And something small, they could say, oh, well,
we just found out we've been wasting CPU cycles here.
And there's a 10% increase in speed.
And when you're trying to get something
a quick, like I'm sure you do, Chris, then you're going to go
and you're going to say, oh, geez, 10%,
that's like another five minutes off my time.
And I understand.
In fact, that's one of the areas where the Mac is kind of handy
in terms of media production is the user space remains
fairly consistent.
They trickle out updates to Final Cut.
But Rekai, I believe, and I'm not totally positive about this,
because I'm not really involved with that aspect of it,
but I believe Rekai uses something called Brew, which
is kind of like app.get for the Mac.
And Brew just keeps FFmpeg up to date.
So he's always got a fresh FFmpeg,
but his editing tools remain fairly stale,
or however you want to put it.
That's a nice combo.
Homebrew, but yeah, you're close.
Homebrew?
Yeah, OK, yeah, yeah.
So there you go.
And that's a nice system.
And so there's ways you can do it on any box.
What I used to do when I had an old Ubuntu machine that
was my primary driver is I'd custom build FFmpeg.
And that worked, too, so there's always an option.
Yes, sir, yes, sir.
All right.
Well, people have asked if there's any updates
to Ohio Linux Fest.
I'll just mention right before we wrap up, it's still on.
When is that?
It's at the end of October.
And so far, I believe the crew from Jupiter Broadcasting
includes Mr. Kernel Linux and Mr. Q5.
And Kernel Linux, you're getting down there Thursday night.
Is that right?
Well, I might actually be there Tuesday or Wednesday.
What?
Yeah, it's a long story.
OK, OK, I feel bad because I'm not getting there till Friday.
Now I kind of wish I was getting there on Thursday.
But you know, it's kind of, we know, kids.
Did you just say he should feel bad?
Yeah, he did, he did, yeah.
OK.
So if you're going to be in the area on October 24
to the 26th, Jupiter Broadcasting will be rocking.
Kernel Linux will be there.
Q5 will be there.
Angela and I will be there.
Blaster, of course.
Anybody else in the Mumba room going to be at Ohio?
That's it, right?
That's just who is here.
And Eric, you're going to be where and when
if people want to see you.
I am going to be at Seagull, which
is the Seattle GNU Linux conference at Seattle Community
College.
Right, and not Seagull like the bird, right?
How do you spell it?
S-E-A-G-L. You can find out more information
at Seagull, Seagull.org.
OK, yeah, and that's going on at the same time
right there in Seattle, October 24 and 25.
And so you could go down there if you're in the area
and say hi to Eric.
And this is their second year?
Yes, this is their second year.
It's kind of interesting because they've
got some big names like Karen Sandler is
going to be doing the keynote.
And there's quite a few people who will be there,
such as Valerie Zimmerman of Kabuntu,
as well as Albert Baca of KDE.
So there's quite a few people.
Also, Mark Terranova from the Fedora Project
is rumored to be there.
So there's going to be quite a few people.
Oh, man, so we're going to have double-covered conference
coverage at the same time.
So while you're in Ohio, you're going to be in Seattle.
And that's going to be, that's nuts.
That's getting.
My interview microphone just arrived in the mail,
and I just did a quick test on it while we were on the air.
I haven't tested the sound, but it's working pretty good.
Is that a euphemism for something?
I don't know what that is.
Tested his mic?
Yeah, he's testing his mic while on air.
I'm not sure what he means by that.
All right.
Oh, in a separate system.
I kept myself muted here.
Oh, Wizard, you know about somebody
who's visiting which one?
So there's actually going to be another big one at Seneca
College in Toronto.
And anyway, it's going to be fairly big.
There's going to be a Red Hat founder there,
as well as a couple other pretty important people.
In fact, I believe Mad Dog's going to be there, too.
Yeah, this is the 23rd, I believe.
And where again?
This is at Seneca College in Toronto.
Wow.
Wow.
Talk about a crazy great weekend and open source going-ons.
And what's nuts about that is a couple of days
after that MeetBSD down in California,
Alan and Chris Moore will be down there held
at the Western Digital headquarters put on by IX
Systems, and they'll be doing live streaming from that.
So I guess this must be fest season,
and we're getting into it.
Absolutely.
I guess you got to get all out of the way
before the holidays and before it gets too crappy outside.
Yeah, no kidding.
All right.
Just quickly getting there.
I think we're all wrapped up.
I think we got everything I wanted to cover.
One last just little plea for Linux Action Show is I'm,
I got some in the queue right now,
but I need more of your runs Linux.
It could be just like you with a selfie in front of your Linux
box, I guess.
I don't know.
It could be your own runs Linux.
It could be something you find in the wild.
Send it to linuxactionshow at jupiterbroadcasting.com.
Include a picture or a link to a YouTube video, if you would.
And in the subject, put runs Linux.
You can also use the contact form
over at jupiterbroadcasting.com slash contact,
and put runs Linux in that subject.
And that's also where you'd go to give us any kind of feedback.
We love reading your feedback.
Every single episode of Linux Unplugged,
it's a big part of our lug.
If you can't make it to the Mumble Room, which
is an open Mumble Room you can join for any episodes,
our virtual lug, we'd love to hear your thoughts in email.
Also, linuxactionshow.reddit.com.
You can go there and get more show throughout the week
and help us make the show a little bit better
by commenting on stuff.
I often look to that subreddit to see
what you guys are talking about to see
what might get some good conversation going in Linux
Unplugged.
So even just sharing your insights and your votes
helps a lot.
And of course, submitting stories and things like that.
Matt, this weekend, if all goes as planned,
if we get all of our ducks lined up,
it's the big Ubuntu review, and it's
going to be a blowout like nothing else,
including Eric and I are going to be
doing traveling and all kinds of things to make this happen.
It's going to be a big one.
So I'll see you on Sunday, OK?
All right, see you then.
All right, everyone.
Thanks so much for tuning this week's episode of Linux
Unplugged.
Be sure to join us every single Tuesday.
And if we don't see you on Tuesday,
hope to see you on Sunday for the big show.
See you right back here next week.
So until then, thanks for tuning in, and we'll see you next week.
Just want to punch Comcast in the throat.
That's all.
I just want to punch him in the throat a little bit.
Yeah, so Matt, if you don't have an Ubuntu 14.
1 from me as well, if you don't have a 14.10 machine loaded up,
get her going.
We'll share our thoughts on Sunday's show and kick the tires.
I got a rig that I've got it running on right now,
and I'll tell everybody more about that on Sunday's show.
I've got it running on a rig, not only Ubuntu, but Kubuntu
and Ubuntu Mate.
It's going to be a good one.
So go ahead.
JBtiles.com, that's all I was going to say, JBtiles.
And I was thinking about putting Lubuntu with the LXQT
on there.
What about Lube?
You pervert.
What about Lube?
Lubuntu?
That sounds like the adult version.
Lubuntu.
Fish and chips.
Exactly, Lubuntu.
Yeah, I think that really exists.
Unifying Linux software is not bad.
That's good.
I want to thank Dunder for Fish and Chips.
He gave me the idea.
Comcast Unplugged, no kidding.
The master distribution.
Systemd ain't so bad.
JBtitles.com.
Yes?
Thank you for spending a lot of time on those core apps, those
QML apps, because the guys worked really hard on that.
And it's really nice for them to get a bit of exposure.
I think it shows.
Yeah, I thought it showed.
And it's neat to see it.
And I don't know how much we'll, since they're not really
necessarily production ready, I don't
think we'll spend too much time on them in the review.
So it seemed like a good chance to give them an exposure
without working them in to review themselves.
Because I don't think they deserve being reviewed.
No, they're not ready yet.
And following on from last week's discussion,
it was a nice bit of positivity.
Yeah, that's true.
Yeah, you bastards.
Positive Ubuntu news.
Yay.
All right, are we going to get a title out of this?
Not just Ubuntu, but generally.
Probably not.
Well, we've got unifying Linux software at the top.
It's interesting.
So it was a holiday here in the States Monday.
And it's the Apple event on Thursdays.
And I think having a holiday at the beginning of the week
and an Apple event at the end of the week, the news cycle
just goes like a dead fish.
Like it's just dead.
Because A, people weren't working
at the beginning of the week.
And B, nobody wants anything they announced
to be completely clobbered up by whatever
Apple craps out on Thursday.
So nothing's going on this week.
It's Android L as well on Thursday.
Yeah, I actually thought it was tomorrow.
And it's final release for Ubuntu 14.10 as well.
Final release candidate.
Yeah, which obviously eclipses anything
Apple or Google do.
That's right.
That's right.
It's all anyone's going to be talking about.
Yeah.
Yeah, it's pretty speak.
Yeah.
Speaking of both Apple and Lightworks,
you know what you should do, Chris?
You should install Lightworks on your beloved Mac.
And then you could start editing in Lightworks.
And then maybe at some point down the future,
I could pry you privately.
I love your underhanded, backhanded compliments.
I have it right now.
I have one of my bonobes right now, actually.
Oh, yeah?
You haven't done anything on it yet?
I edited a couple of our OSCON.
Actually, I edited those a while ago.
But yeah, I edited a couple of our OSCON videos.
Oh, really?
Yeah.
OK.
Maybe I need to give you more credit.
I think Noah forgot something.
I think you should do is put Lightworks on Mac
and then play it at HTML5.
Nice.
Well, OK.
I just clearly like the way I convert people to Linux
is I get them using their software
that they're comfortable with on the platform
or the software on the platform.
So I figure I can baby step Chris away from his Mac and trash.
You should, Noah, you should listen to this week's Coda Radio
because Dominic was on me the whole time about that.
And here's the thing is I think one thing to kind of remember
is I don't edit anymore.
So it's kind of a thing.
Yeah, so I mean, for me, that's why I can use Lightworks now
because the editing I do is much.
So you don't use a Mac anymore.
You pay someone else to use a Mac for you.
Yes.
Yes.
Yes.
But you know what?
Here's the thing.
He bought the Mac and set it in front of him
and said, here's the editing rig you're going to use.
Well, yeah.
I mean, you know, we've had this conversation a few times.
I will stand by the claim that the tools are not just like,
boy, it's just a lot easier.
No, it's more like the tools are like.
Yeah, Chris, you should stop using Skype as well.
Years ahead.
Here's the thing.
I don't have a link to stand on when
it comes to live production.
As far as editing goes, I think if you
are willing to change your workflow a little bit,
you could get away with doing it.
Probably, probably.

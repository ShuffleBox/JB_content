This is Linux Unplugged, episode 25 for January 28th, 2014.
Welcome to Linux Unplugged, your weekly Linux talk show that's not too big to admit when
its own fantastic foot has been stuck in its own amazing mouth. My name is Chris.
And my name is Matt.
Hey there, Matt. Episode 25, buddy. I'm pumped up because it's like a marathon for me tonight.
On the livestream, we're doing the State of the Union coverage on Unfiltered. That's like
right after we're done on this show, man. It's like big time over here. But not only that,
not only that, but I think we've got a really good episode ahead of us. We're only going to
talk about Steam. No, I'm kidding. Well, we got some Steam feedback, so we are going to talk a
little bit about Steam. But every time Steam comes up on any of our shows, there's always
the chorus of folks who chose Linux because gaming just doesn't even interest them, right?
So it's like not even on the radar. So like when we have an episode about Steam,
like, oh man, they're talking about this again. I don't like gaming.
They're like, not again. I think they fail to understand how important it is in the
grand scheme of things. But we'll get to that. Yeah, exactly. I can relate that it's not big
to them. That's why they chose Linux in the first place because gaming wasn't a huge priority. But
oh, so many big things are changing up. And I'm actually really excited because coming up on the
show right off the top here, we're going to be getting into some feedback. And one of the which,
I just thought it would be perfect to bring in our guest this week, joining us in the Mumble Room,
our virtual lug as it were, is Aaron Saigo. Now you guys know Aaron Saigo. He's a long-time KDE
contributor. He's also what I like to call a free culture thinker, and he's really the heart of the
improv project. And he's going to join us. Hey there, Aaron. Hey, how's it going, guys?
Quite good. Quite good. Thank you for coming today. Now see, Aaron pinged me on the super
secret bat line that I like to thank Google because Google makes it possible for people
to get a hold of me in all kinds of new ways, including. But in this case, it actually worked
out really well. Aaron was able to get a hold of me. And when he messaged me, I was actually
editing the Linux action show. So I was responding to Aaron using the voice dictation because my hands
were busy editing. And it was doing OK. I mean, Aaron, what would you say? Was it OK? Was it passable?
Yeah, it was. Actually, I didn't know until you actually said, yeah, using voice dictation.
So did you just think I was like some sort of maniac with the keyboard? Like there was
a few things that didn't make sense. Yeah, you've got that that filter, that automatic
filter that happens, right? You just skip over all the errors. It was actually pretty good.
That's good. That's good. So I was like, OK, well, instead of dictating, why don't you just
come on unplugged on Tuesday and talk about this? Because, you know, Aaron called me out on a thing
that after after we wrapped up Linux action shows in defense of Noam, I always kind of think back
over the show and I critique it myself. And one of the things that I felt was sort of unavoidable
for that type of episode, but was still sort of the underlying message in a sense, is that
the show was really championing new and shiny. Look at this new thing. It's been rebuilt and
it's finally getting to a usable standpoint. It's sort of a celebration of the fact that it's new
and it's it's it's been rebuilt. It's something, you know, that it's almost like a sense of
consumerism that I feel is really kind of pervasive in the US culture. And it's sort of that same sort
of mentality put towards software development. You know, what have you done for me lately?
And when somebody is sturdy and solid and building a reliable platform, then they're boring. But when
somebody is rebuilding and starting over, well, then they're crazy because they've just shot all
their functionality out the air airlock and I'm really frustrated as a user. So Aaron called me
out on that and we're going to talk about that today because I actually think it's a fantastic
topic. I I've kind of coined it as the term of the new and shiny culture that is pervasive on the
Internet. And it plagues open source more so than ever. We constantly see projects get thrown out
and rebuilt, sometimes for completely justifiable means and reasons like potentially like OpenShot
could be a good example. I was about to say OpenShot. Yep. Yeah. But then, you know, there's
other projects you look at. Unity, where it was sort of obvious from the onset what they wanted
to accomplish was already out there and they didn't necessarily have to reinvent the wheel.
And when they did, they sort of chose the wrong direction. And then now they're sort of facing
this reboot. And I think, you know, when you look at Unity, Unity 8 is what's going to be called.
When that comes out, I think users are going to be shocked with some of the stark differences
that aren't there and some of the things that don't work the way they expect after Unity 7
has been built up over years and years and years of and polish. Right. Especially right now as
Unity is going through this sort of, I mean, for lack of a better term, refinement phase,
while they don't really add much to it. Yeah, we're going to get this big reset. And I think
that's going to be a stark comparison of where you see something start over and much like when
Gnome hit version three and started over again. But before we get to that, I want to do some of
our feedback because, gosh, we got some really great feedback. But first, I want to thank our
first sponsor this week, and that is Ting.com. Ting is mobile that makes sense. My mobile service
provider and Matt, what about you? Oh, yes. Look at that. Yeah, this is something that if you're
sort of a consumer who likes to be informed and vote with your wallet, this is why I like Ting.
That's why I recommend it to my audience. Not only have I been using Ting for over a year,
but Ting has no contracts, no early termination fees. And the best part is you only pay for what
you use. Now, I'm a shut in. OK, I don't I don't like going outside. It's scary out there. There's
people and those people don't know how to drive. So for me, it's really great to only pay for what
I use. So that way, when I do go out and get out and have to make calls and it's the holidays,
then I pay the appropriate price for that. And it's an incredibly reasonable rate. And when I'm
shut in and I'm not calling anybody like this week after my birthday and I don't want to talk
to anybody, then I only pay for what I use. It's actually a really brilliant system. And right now
you can go over there to Linux.ting.com and save twenty five dollars off your first month of service
or twenty five dollars off your first device. And by the way, check out their rates page and also
check out their blog if you're listening to this podcast in the month of January, because Ting is
doing an LG G2 giveaway. That's that G2 is that new sweet phone. Thirty two gigabyte version.
It's pretty easy. All you have to do is be a YouTube subscriber on Ting's channel. You have
to leave a comment on their new unboxing video of the LG G2. That's not too tough because that's a
great video. And then there you go. If you're a Ting subscriber, you'll be entered to win. They're
going to pick on January 31st and announce on Google Plus. So you can go to Ting.com slash blog
to get more details about that. You need to be a Ting customer. So if you're not a Ting customer,
go to Linux.ting.com and get started. Average Ting bills for our listeners are usually around
thirty dollars per month for a full fledged smartphone with hotspot tethering, caller ID,
voicemail, all that stuff. I mean, it's a full phone. It's got everything. They also have incredible
roaming deals. If you're going up into Canada and things like that, they've got great deals there.
I get feedback from folks all the time who are always really surprised at that aspect of the
Ting service. And not only that, they have fantastic customer service. You can give a Ting
representative a call anytime between eight a.m. and eight p.m. Eastern at one eight five five
Ting FTW and a real human will answer the phone. So go to Linux.ting.com to support this show.
And a big thank you to Ting for sponsoring Linux Unplugged. That's right. OK. So let's read
Jonathan's post here. I'm sorry. His name is not Jonathan. I was reading something else.
His name is Scott. Scott James Remnant. I think it's Remnant. Aaron, you got a vote on how you
say his last name Remnant? As far as I know, it's Remnant. OK. All right. So he was a
previous Canonical employee and he was one of the original software developers of Upstart.
So he has some interesting perspective to share on his Google Plus feed. And I'll have that linked
in the show notes if you guys want to circle him. And I'll just read it. He says the open source
and free software communities work on the principle that when I contribute patches to a project,
I'm donating my time, expertise and resources. In return for that donation, I receive the time,
expertise and resources of the rest of the community on equal terms in which they have
received mine. I benefit as I benefit and the community as a whole benefits. Certain projects
make you sign agreements when you contribute that instead make the terms unequal. Sorry.
Usually benefiting just one party. When you contribute under one of these agreements,
the community may benefit. But one individual or company benefits more. They receive all your time,
expertise and resources, but reserve the right not to return the favor. I'm a coder in my day job
and I give my time, expertise and resources to that company. They are not under any obligation
to return that favor. In return, they pay me. The CLA is employment without wage, without a wage.
The CLA is employment without a wage because it's the same sort of arrangement. I contribute
my code and my time. But when you work, you get a wage. So Aaron, I know you've talked about
CLA's in general and lots of projects have them. You've talked about them for years though,
and I wanted to get your reactions to Scott's post here because as Debian's looking at this
whole init system debate, it's really sort of exposed the whole CLA issue that a lot more
people in the community are talking about now. And as somebody who's sort of been trying to
get this conversation rolling for years, I'd love to know what you think.
Sure. So right off the top, I'm not anti-CLA carte blanche. In fact, I helped bring in
a version of the Free Software Foundation Europe's fiduciary license agreement or FLA
into the community. So I think that there are benefits that can be realized by having formalized
agreements that cover contribution. But I think that what Scott gets at and it's really insightful
is that there are systems properties to these agreements. And when you approach it from a
systems thinking point of view, you do get people looking at it and going, well, I'm not benefiting
anymore and therefore I'm not going to add into the system and into the pot anymore. And so the
point that I think Scott was trying to make and really accurately is that these CLA's intended to
grant advantage and make it even maybe possible for the company to see a profit or something along
that lines may actually be having the exact opposite effect that they expect because it
shrinks the contributor pool. And the whole point of having source that's open from a perspective of
contribution and benefit is you're sharing development and risk. And so anything you do
to limit that is defeating. Is that true? If we just kind of look at the success that Canonical
has at getting contributions over the years, wouldn't you say that perhaps the CLA is a
non-issue because people just want to contribute. They want to follow their passion. The CLA is a
non-issue until either the company starts to get big or the company is on the decline. And then
all of a sudden these flaws are exposed. But as long as they're on top, everybody's so passionate
and motivated that they almost just don't care. Yeah. I mean, I think that one of the issues that
in the past, free software developers have not been aware of these issues at all. And they've
made them just with the assumption that everyone's intentions are good and therefore they're going
to create good things. And that's not entirely true, unfortunately. Not that people have bad
intentions, but that not everything that's being created is good. So three years ago in 2010,
I actually had patches that got kicked out of the Canonical project because I refused to sign in
a CLA. Things that fixed bugs in a project that they had under their CLA. And it was specifically
because of reasons like what Scott mentioned where it's asymmetrical. But even worse,
and this is really gets where not all CLAs are equal. The CLA in particular that Canonical uses
is extremely broad and has no termination clause. So you can't tell what it's going to cover in the
future because it basically just says anything that they host and they say is covered in future
is covered. And that really, yeah, I mean, I couldn't sign such a thing with a good conscience.
So it does affect in the net here and now. And then we look at two other projects, Upstart and
Mirror. There are people who are not contributing to Mirror because of the CLA. I know this for a
fact because they've said exactly that. There are people who otherwise have no bone contention or
ax to grind. Upstart is of course controversial. I mean, the reason why System D, according to
the Red Hat evangelist, Jan, and I won't even try his last name because I always mess it up,
great Dutch guy. He said the other day on G+, that one of the reasons System D started was
because of the CLA. What about the alternative side though? And it's not just on success or
failure. That does make sense. But what about the alternative side to that? So say for some reason,
maybe there was an agreement with a carrier for Ubuntu Touch and they had to flip some code that
a lot of people have contributed to a proprietary license. What about the argument that everything
that was created at that point still remains open? It's still open source software. There's
going to be a fork of it now that has been relicensed, but that code isn't taken away
from the community. Well, so there's two flaws with that. One is that there are people who
engage with free software on ethical grounds. And so for them, the fact that there is a
proprietary fork goes against their ethical position. I would be one of those people.
But let's just say that we're the weird fringe minority. Once a company can take something
proprietary, if there is no safeguard in place, there is nothing to say that they won't continue
adding to the proprietary code. And then we get either a proprietary fork, we get open core style
things. And at the end of the day, what you're agreeing to is a asymmetrical relationship where
your contributions are not of equal value at the end of the day to other contributions. And of
course, Canonical does say, and Marco said this publicly, well, but we pay for the majority of
the development in this project. So we have a moral stand or an ethically backed stand that
we can say, well, we deserve to be able to do this. And I agree with them. If they're paying
for it, they have an ethical position that they can say, we can take a proprietary. The result,
however, from a systems point of view is people will disengage.
So I wonder though, okay, so explain to me in your mind how if a CLA hinders contributions to
say something like the Mirror project, how does it not hinder something like the Qt project that
also has a CLA? Right. So I'll say first off, I'm not a huge fan of the CLA in Qt. It's there for
practical and historical reasons, but there's a very, very important difference. Besides the fact
that it's well-defined and only covers the Qt world, there's also another group or another
agreement, the Free Qt Foundation. And this has an agreement with the owners of Qt. It's actually
been passed on from Trolltech to Nokia to now Digio. And what it says is it's a legally binding
contract that should they go into the path of proprietary only. So they can take the free
software code and release it under grant proprietary licensing terms. But if there's
ever a difference between that proprietary licensed code and the free software or open
source code, the entire Qt stack is immediately relicensed under the BSD license, which pretty
much destroys their business model. So you sort of have an insurance policy.
Mutually Assert Destruction Agreement there. Right. It's an insurance policy in a sense.
Exactly. Now other groups treat it... Right. And that creates a reasonable expectation of symmetry.
Other products do it differently. So with the FLA and KDE, for instance, there is a secondary
document that accompanies the primary document that gets signed. These are the only terms under
which the organization you're entering into the agreement with, KDEV, is allowed to relicense your
software and it's all free software licenses. You can't take a proprietary, even though the
FLA you sign, which is optional, not mandatory, would in theory allow this. And what the secondary
document says is that should the KDEV, the nonprofit organization, decide to go evil and do
this, your FLA is immediately rescinded and void and they cannot do this. So there's different ways
of ensuring symmetry. Of course, one is not having a CLA or an FLA. But there are, in certain cases,
are downsides to this. Sure. The reason why KDE has one is to allow if someone disappears from
the face of the planet and GPL version 4 comes out, we can move forward without having them
there. If you die, for instance, that's the big one. Or if someone sues you for some patent issue
or something that involves you murder your wife and go to jail, it allows the nonprofit organization
to represent you. Rise or FS. I'm just making a rise or FS joke. I don't want people to think
I want to murder my wife. I just realized that sounded really creepy out of context.
Well, you know. Well, I mean, that makes a lot of sense. I'm glad I asked because I think that's
probably a common response that people would have is, well, QT and other projects. But yeah, okay.
There's sort of a give and take in that scenario. That makes more sense. Okay. Well, all right. We'll
leave the CLA topic there for now. And thank you, Aaron. We'll pull you back in in a few minutes
when we get through the rest of the feedback. Our next feedback is sort of a collection of
a lot of comments, several threads in the subreddit, a few emails, and also some posts
on G Plus and Twitter where in response to our Steam Streaming Showcase episode on Sunday for
the Linux Action Show, Jonathan Houston, who's in the chat room right now, he says, okay, I'm
curious to see what everyone thinks about this. My friend and I have been discussing the implications
of SteamOS and the potential impact on Linux. He brought up a very good point on how, and I think
I agree with him. Valve may have shot Linux gaming in the head with the ability to stream games from
a Windows machine to a Linux machine as recently demoed on last. The reason being with SteamOS
developers, we're seeing good reasons to add Linux support. Now they don't need to. Now they can just
keep doing what they've always been doing and some Linux user wants to use their game, they'll just
have to stream it from a Windows machine. They've removed many of the reasons to spend money to
develop on Linux by shifting the cost to the consumer. Now the onus is on the consumer and
we just have to accept buying a second computer, not only a second computer, but one capable of
streaming the games and programs we want on the machines we want. Boy, you know, I think I would
agree with the fact that I think developers will consider this, but I think at the end of the day
the argument can go further and say, well, if they want to play the game badly enough, they'll just
go ahead and buy a Windows machine. So I think it goes both ways. I reluctantly disagree. I think
that I see where he's coming from, but I don't think that's going to actually, I don't think
they'll pull the trigger. I say you take that doubt, get it out of here because here's the thing
is this is Valve being super slick at this. And what this is, is this is a transitional technology.
This isn't like wine. This isn't like anything else. This is a transitional technology to add
value to lower end machines and machines that yet do not play the games that the market demands.
And it's good enough of a temporary solution that it could be a permanent solution. And that,
my friends, is a very good sign for something that's this early in the beta stage. But here's
the reality. You and I, we might be up to having an extra Windows machine and even understand what
the concept of remotely encoding a video game stream and then sending it to a remote client
that can then interpret that, decode it, and then send back the keystrokes or controller strokes in
real time. We grok that concept even if it's loosely. Consumers, that is an alien idea to them
and Valve and developers can never and will never be able to depend on Steam Box users having another
computer in the house capable of playing video games because it's simply too much to expect
for the average consumer. For the early enthusiasts, for the people that are going to buy the first
generation of Steam Boxes, i.e. everybody buying a Steam Box for the next year, year and a half,
they might have that expectation and they know that they can lean on that streaming to help fill
that gap. But by the time the Steam Box goes mainstream, a couple of years down the road,
there's no way any developer who's going to target SteamOS that wants to actually make some money
can rely on that. So they have to go native. Market Dynamics will force them to create a native
application because that's what the vast majority of Steam Box users will expect. And so it's
actually not that bad. And in the meantime, it gives us some really cool tech to play with,
like the application streaming. I wish people go watch, you know, we had some people just chose not
to watch the episode because I had Steam in the title. And I think that was a mistake on their
part because we demoed some really cool tech. And I'm happy that the streaming tech is so good that
it makes us a little nervous. And I think this betrays that Linux users have been beaten so many
times by a commercial company that just disappoints that now we just were expecting it. We're just
looking for it. And I also think there's confusion on this. Oh, well, isn't this just remote desktop?
And it's like, no, no, no, no, no, no. This isn't accessing a remote desktop. This is bringing that
desktop's experience fully accelerated into your own experience where you might as well be running
it natively, meaning you can run Netflix and things of that sort. Yeah, exactly. You know,
we demoed QuickBooks, Photoshop, Netflix. And what's great about this is to me, it lets you
rip off that Windows Band-Aid, but then not be so well stranded on Linux Island because there's a lot
of offices, especially as I mean, I know you can't really expect businesses to do this, but there's
going to be enough out there with a savvy enough IT guy or gal and she's going to know about Steam
and she's going to know that, hey, we need to replace Windows XP so you know what we can do.
We can take one nice Windows machine and if you're just streaming desktop applications,
it doesn't even have to have high end GPU. And we'll put this in the office and the three times
a week that Cheryl and Larry need Photoshop and that Bob and Rick need to use QuickBooks,
they can do it and it's no big deal and we know we'll be okay because we know what kind of
experience we're going to be able to deliver. And I think that's a really good thing, even outside
of gaming. Agreed. And it's coming at a good time when we need some transitional tools.
So speaking of things that are coming at a good time and maybe not being ready,
remember last week we covered that guy who was sort of trolling Linux users,
coming up with all of these reasons why Linux was totally not ready for the desktop.
Well, we were pretty hard on that guy, but John writes in in defense of that guy. He says,
Linux isn't ready. He said, I read through that whole post myself and I have to agree with most
of what he said, although it was pretty exaggerated. The Linux community should be
happy to get critiques like this. This is solid gold user feedback. You couldn't ask for a better
feedback. Anyone interested in making Linux into something with potential of replacing Windows
should look long and hard about at that post. Sure, he's rude and exaggerated, but so are
disgruntled users. Any diehard Linux user would have similar language about Windows.
But see, here's the problem is we keep calling Windows power users, the average user. That's
the problem we're seeing here. This was someone and probably the person that initially did the
post was a power. It was a Windows power user. This is someone that knows Windows backwards and
forwards and it installs their own operating system. That's not Joe average. Joe average
doesn't even care as long as they can check their email and surf eBay. I think that guy was kind of
in the FUD territory. I mean, there was some valid stuff in there, but that shows that he
was a power user. So that's the problem is they say, well, it's not ready for the prime time.
It's actionably happening right now. It happens at my mom's house. It happens that you have
relatives that use Linux. I have relatives that use Linux. I have friends and family that use
Linux. When I retired from the PC repair business, I actually rotated people into Linux and then put
them in front of a guy that would help support them. It's here and that was years ago. So just
factually speaking, he's incorrect. Yeah, that's true. It's funny how as geeks, people just like
they see the world through the geek lens and it's like, well, if you can't use solid works,
then it's not good as a desktop. That's true for a certain set of people. Exactly. All right. Well,
last feedback, Rick comes in. He says, Hey guys, I just want to say thanks for the digital ocean
coupon. I set up my mumble server using Debian and it's running great. Most websites that sell
mumble servers do it by the person. One site sells a 15 slot server for $6 a month. Well,
with digital ocean, it's unlimited as long as you don't hit the one terabyte cap. This works out
great for myself most of the time with only a few friends, but sometimes we have about 20 people on
there. He says, but with my horribly inaccurate calculations, one terabyte is way more than enough
for my usage. And he's got a questionnaire about monitoring bandwidth usage on the Debian service.
So I'll answer that here in a second. But first that seemed like the perfect opportunity to tell
you about our second sponsor this week, digital ocean. Now what is digital ocean? Well, if you
haven't figured it out, like our, uh, writer, what was his name? Ron, right? Yeah. Rick. Oh,
Rick. If you haven't figured out like Rick, then digital ocean is simple cloud hosting dedicated
to offering the most intuitive and easy way to spin up a cloud server. Users can create a cloud
server in 55 seconds. Now me, I'm 47 seconds. So you let me know if you beat, if you beat that,
I'm 47. We should have a chart. I don't think anybody's going to crush the champ, Matt, but
we'll see. Okay. All right. He says, Oh, by the way, I just want to let you know that they have
credible, incredible pricing to pricing plans started only $5 per month, 512 megs of Ram on
that rig, a 20 gigabyte SSD. And yes, an SSD really does make a difference. And one CPU with a
terabyte of transfer. Hello, a terabyte of transfer. Think about this for a fixed $5 cost.
You know exactly how much you're going to get. And this is awesome. This is way better than some of
the other services that transfer you, that charge you by the bit. And on top of that, they're all
over the place. Digital ocean has data, data center locations in New York, San Francisco,
and Amsterdam. They have a simple interface with an intuitive control panel and the power users can
replicate that bad boy with their own straightforward API. But even better digital ocean loves
community. They offer a vast collection of tutorials in their community section on their
site. And if you submit an article that gets published to the community, digital ocean will
pay you 50 bones per piece. Think about that. So if there's probably a good chance given our
audience that you guys know how to set something up on a CentOS box, on a Ubuntu box, on a Debian
rig, you can write up a how to on something. You can submit it to digital ocean. $50 credit. I mean,
think about like at $5 per month, that's going to get you a super awesome VPS for a long time. And
by the way, the backend technology on digital ocean servers is the tops based on KVM, based on
any predefined droplet you want to deploy, or you can create a machine from whole cloth. Like I did,
you have DNS management. You can resize a server in a single click backup snapshots,
two factor authentication, one app, one click application installs. And with that community,
you can get up and going at no time. Then you have your own box that you have root access to.
You have root login. You know exactly what's installed on this machine. And by the way,
if you want to do some testing, check out where you deploy it on. You can also have a private
network, which is really great to have maybe a front end machine that communicates to a backend
machine over a private network. It gets you a little extra security there. So combine that
with their amazing hardware. It's the best way to go. And by the way to our writer, Rick, they have
bandwidth graphs. So if you go into your account summary a little bit later, they'll tell you about
your usage and stuff like that too. So there's a lot of reasons to use digital ocean. So here's
what you need to do to get a five or to get a $10 credit, which if you use the $5 machine like I've
got, that's going to get you two months of digital ocean for free. Hello. Just use the promo code
Linux unplugged January when you check out Linux unplugged January, all one word, Linux unplugged
January, and you'll get that $10 credit. Try it out for a couple of months. There's tons of uses
for it. We keep hearing about them from our audience all the time. And if you've got a great
use for a digital ocean machine, let us hear about it. I love hearing these stories. So a big thank you
to digital ocean. Stop and think about it. I mean, it's like, look, okay, so by not taking advantage
of this, you're actually losing money because they're giving you two free months. I mean,
really you're, you're, you're really losing out on a great situation. It's so slick. And when you,
when you, when you get up there and you got your own machine and you're, you have root access to it
and you can, you can keep coming up with new scenarios like, well, maybe I want to try ever
pad up there. Maybe I want to put a bit torrent sink machine up there. Maybe I want to try mumble
up there and then, oh, you know what? I got to go up to the next machine. It's like another,
it's just, it's a very, they have a very simple pricing structure plan. That's very easy to
understand. And every step of the way, you know exactly how much you're going to be paying and
exactly what you're going to get. So I love it. I've been using it. I'm going to keep using them
for even more services that we're going to be doing here at Jupiter broadcasting, which you'll
be hearing more about very soon. I know it is really sweet. So I'm going to bring, I'm going to
pull Aaron back down into our private little room here. And hopefully he wasn't in the middle of
saying something to the, to the group. But so Aaron let's talk a little bit about you. You
got kind of fired up when you were watching the episode that we did recently in defensive gnome.
And I think he really called me out on something that I was actually sort of kicking myself for.
And that was sort of the celebration of new and shiny and rebuilt to have a rebuilt purpose. And
you sort of brought up this counterpoint and said, well, what about, what about this methodology of
refinement and, and, and evolution and working with something and staying with it for a while
and building on top of a platform, building on top of something. And that isn't almost in some
cases really even respected in the community. What do you, what are your thoughts? And
share a little bit about what got you fired up. Sure. So just to make it clear for everybody
right off the top, I'm not wearing my KDE hat at all here. This is really me with my free software
must rule the world one day hat on. And, and it's this exact idea that, yeah, you know,
new and shiny is awesome. And, and yeah, I mean, it is new and shiny is awesome,
but there's cost to everything that we do in new and shiny. Every rewrite, every new adventure
comes with a cost. So when you make a bunch of applications and you decide we're going to redo
them all, you end up with, you know, being able to get the, you know, first 90% of functionality
or 80% of functionality fairly quickly. And then you spend, you know, the rest of the 90%
of the development time getting the 10 to 20% that people actually need for it to become a
reasonable application. And when we toss these things aside, you know, applications that work
and that have reached this point of maturity, what we might do is we might deliver something
with marginally better visuals or a slightly better workflow. But in the meantime, our users
tend to be left with locations that don't have the feature they need. And what happens from
a developer's point of view, who works on free software quite a bit, there is a real constant
pressure from a lot of people, especially the attention areas of our community, you know,
the media and whatnot, to always be producing something new and flashy and cool. And it's more
reward for promising something wonderful and starting off by scrapping whatever you have
right now. At the same time, we also get our feet held to the fire if it isn't stable, and if it
isn't performant, and if it doesn't have the features that people need. You're talking earlier
about, you know, is the Linux desktop ready for the average person? Well, it never will be if we
keep reinventing things every few years. And so there's this conflict, right? These two motivations
don't really gel well together. And this is both part of what new free software developers coming
into it are bred and born on. So they come into it with this expectation of, oh, we need to redo
things that's, you know, sexy and cool, or go the other way and be hyper conservative. There's no
middle ground. And meanwhile, those projects that try and hit a middle ground, I think, come under
a lot of unnecessary pressure on the one hand, but also just get overlooked a lot for trying to,
you know, going through cycles of innovation, but then also going through longer cycles of stability
and support. So, you know, I just to kind of track this to a level where people would kind of
recognize it down to the desktop, I would say, like, for me, I do kind of understand what you're
saying in the sense that I look at like the GNOME desktop and their reboot has cost them, I believe,
not only who untold users, but years of basically progress on the desktop. I would say that while
they've obviously been working very hard, it's really now getting to a point where I'm comfortably
using it on a daily basis. That wasn't, I mean, you know, that's if you look at the years it took
to get there, that's a big reset. And it kind of came at an inappropriate time, right? When Microsoft
was stumbling with Vista, there was sort of, I've always felt like this golden opportunity where
Linux could have succeeded a little bit stronger, where, you know, perhaps if Canonical hadn't
rebooted with Unity, and Unity was really quite awful at the beginning, and if GNOME hadn't
restarted with GNOME 3, which GNOME 3.0 was really quite unusable at the beginning, we might have had
a little more traction, perhaps. So then you look at it now, and these projects are getting to a
good state, but one of them is about to face another reboot. And I see there's projects where
sometimes there'd be value in starting over, and then there's other projects where I see it almost
feels a little sad because it's so much effort and time will be lost while they rebuild and retrace
things that they have already once completed and already once figured out. Exactly, and when these
projects get to the point of, okay, finally they're usable again, I can use them on a daily basis,
have they really progressed the technology sufficiently to offset that cost? And I think
with the wild abandon that we embrace new and shiny with at times, we tend to destroy that.
I mean, the biggest problem I had with something like PulseAudio, for instance, was not that we
needed a non-crappy audio stack, but that it was pushed onto the user community when it wasn't
ready, can be clearly seen by years of troubles that people had. There was literally a distribution
that shipped where the volume slider didn't do anything. As crappy as the Linux audio stack was,
it finally worked for most people. And so we seem to be, as you said, picking really bad times to
reinvent things and doing it for what will deliver marginal benefit, if any, at the end of the day.
Yeah, see, here's the thing. It's this interesting culture that's driven, and I feel like it's more
than just one thing that attributes to this, but from a media production standpoint, like from the
Linux action show, people are going to be much more interested in something brand new that they
want to learn about than sort of retracing how great it is that every application I use under KDE
has a proper notification icon in the system tray. That's an example of how staying stable and just
having something and defining the way it works and keeping it that way for years benefits end users,
but it doesn't make for a good segment in a podcast, and it doesn't make for a good article
on a blog. And so I do agree that that is driving the conversation in one direction,
but at the same time, that's because that's what the consumers of that content want to hear about,
right? And the developers that are going into these projects, they don't want to work on the
old guy's old busted code. They want to come up with their new hot concepts and bring those on
the world. So that's their motivation. So it seems to be like this multi-dimensional problem
that just sort of is maybe human nature. No, I agree. And so on the one hand, we need to
not reward those developers who just want to come in with a wrecking ball, or at least reward them
a lot less for doing that if they're not bringing any real large offsetting value to it. The other
side of it is, yeah, how do we present mature projects as interesting as the ones that are
not mature projects as interesting? And I agree it requires a little more positioning and thinking.
And most free software projects and most people involved in free software are not great
self-promoters and marketers. And so yeah, I completely get that it new is an easier story.
It writes itself. On the other hand, if you look at... So a product that I've been involved with
for years was Plasma, which most people know as a desktop environment. And it gets to the point
where it's mature enough that we can actually start branching off and doing things like Plasma
Active where we can bring in devices. And this whole convergence story that has been really
exciting for people around Unity is actually where we were three or four years ago. Now,
the question is, why didn't that story get out in a more interesting way? Why doesn't it
keep people's attention? And I'm sure there's probably things that I could have done differently
or better to make it more interesting. But on the other hand, I also think that there's
a kind of an expectation you can only tell a story once. And I think that the convergence
story, for example, is one that has a lot of legs if we can keep ourselves kind of moderately
entertained and interested. And companies like Google, for instance, there's a bunch of people
talking pre-show about things like Chromebooks. And what we don't realize with these things is
that, I don't think consciously, is that they bang on the same boring message for like five years
before people get it. And when people get it, it's new and exciting to them. But you have to bang
those old messages through. And I think that hurts the free software adoption as well, because we
don't have the patience to bang the message through. That usually takes two, three years.
And so what happens is we get projects that are less interesting to people. And until someone
comes along with the wrecking ball and erects the new shiny that is not usable anymore,
they don't get the attention. And so we kind of catch ourselves in the spiral.
You also have these companies that some people in the development communities idolize,
Apple, where you'll see Apple from time to time completely reboot a product, even if it's a high
end product like Final Cut or the Mac Pro, into something brand new and just say, suck it. You
take it or you don't take it, and this is the way it is. And I think in some weird, creepy way,
that message is to people that that's an okay thing to do, because they see Apple doing it,
and some people hold that in some level of regard. And so it seems to me, too, that there is a bit of
the commercial companies like Google and Apple are also sort of driving this mentality a bit.
And it takes a certain wisdom to sort of see past that and be still motivated to work on something
that is tried and true. And how do you incentivize somebody to want to do that?
Well, I think that most tried and true software kind of... How do I say this politely? Has areas
that suck after a number of years. Software doesn't stand up to the test of time if you don't
change it. And so right now, I'm involved in rewriting one small part of a project that I'm
involved with that's... Yeah, it's a rewrite of one small component. And it's very interesting,
and it will bring important value to the users. It's not a rewrite of everything.
So I think on the one hand, finding ways to create a culture of you don't have to rewrite
everything. Make your software a little bit more modular with a more forward-looking design,
which is something that we need to teach each other how to do. And then you can do incremental,
important evolutionary work where you can talk about it. I mean, my blogs in the last two weeks
have featured quite a few times this component that I'm rewriting. And people are finding it
very interesting and exciting. And it's done in a very low-risk way. The other thing is that there
are tons of topics that free software does not touch, does not cover. We don't need to be
rewriting the image viewer application every two years. Let that topic area go, and let's find the
other 8 million application categories that we have no answer for and create a new shiny there.
No kidding.
Instead of just chasing our tails. But maybe that's just me. Maybe we actually do have a
complete software catalog. But last time I checked, we didn't.
Well, so I guess if you move, if you kind of zoom out a little bit and you look at like the whole
like free software ecosystem, there's certain aspects of like Linux that have Linux itself have
had pretty even curved development and stability and also innovation. The Linux kernel has then
been adopted by every company under the sun to power their product. And I think that's
speaks to sort of what you're talking about when you have a group of people that just stay at it
and keep building it. Don't keep throwing it all out and restarting again. It gives people
certain assurances. But because that hasn't happened really at the user space as much,
we haven't seen a stabilizing there. And so, you see these, we had a great thread in the
Linux action show subreddit saying, why has Linux on the desktop failed? He looks at,
this was Ersk in the chat room, he looks at the market shares, Linux is at 1.73%
according to NetMarketshare.com. And he says, regardless of the distro, it's at 1.73% while
XP is 12 years later, still at 29% market share. One of the reasons this could be the
popularity of XP in Asia, of course, and things like that. But honestly, XP was this quote unquote
stable in terms of it's an easy target for developers to quantify, develop for. And I
wonder if perhaps, remember when Miguel Itacazo wrote that the problem with the Linux desktop
was always changing and always incompatibilities, always being brought in. I wonder if he sort of
nailed it in a sense where, what we really need is something, now I know I'm just gonna sound
like I'm blowing smoke up the KDE project, but we need something like KDE 4.x that is just,
is what you see is what you get for years. It's snapshotted like this for years, much like Unity
will be in the current, in the next LTS release. Does Linux need a little XP-ification
right now? I think so. And this can be done without ossifying or fossilizing things either.
Now you brought the Linux kernel, I completely agree with what you said about it and why it's
successful. But the Linux kernel is like this massive constant churn. So it's not like they're
sitting still and moribund. They've managed to marry the two. So a really good example,
I think of this in the user space is, so we've had, you know, the whole many years of UDEV,
U disks, basically the hot plug and disk management facing the user space side has
gone through a number of revolutions and not always, in fact, at each break, it was a radical
API change. So what the KDE developers did was they decided to create an API that did what
application developers could wrap their head around, because the lower level user space APIs
were also pretty hardcore for the average person who just wants to write a cool game or something.
So they created a slightly simplified API, but they masked what was going on down below.
And the CSS opened up the ability to port to Windows and Mac and now iOS and Android.
But when the, you know, the U disk thing came in, while other desktop environments like XFCE,
for instance, had to do a lot of work to catch up their applications and rewrite them, no KDE
application had to line a code. A new backend was written for that framework called Solid,
and everything just continued working. Even more magical, no one got left behind.
Because the people who were using the old stuff used the old backend, and the people using the
new stuff used the new backend, and no one was stranded on an old version.
So it is possible to do, but it takes forethought. And I think that Miguel de Caza was correct in
his criticism or his critique, except that we do have projects and communities out there
that do exactly what he said we should be doing. And the challenge we face is that the community
as a whole, on the one hand, I don't think recognizes that. You know, when someone who
does something like Solid, there's a certain community or group of people in the community
who hurl stones saying, you're just writing, you know, yet another abstraction layer, and,
you know, you should be writing to the Linux stack directly, and that's the way to go.
And so there's like a popular backlash against doing the responsible thing. And I think as a
community, we need to take stock of what really matters. And if we do want to get that stable,
approachable user land, and especially at the GUI level, we need to start valuing that kind of work
that isn't very glamorous, but pays off in the long run. And we need to start supporting those
people. And the people who don't do that, maybe we should say, look, I love you guys, and you guys
are doing free software, which is freaking awesome. But you know what, we need you to do it
responsibly. And so we're going to go over here and support these people that are looking at five,
10 years down the road. And I think if we did that, if we shifted what we value, everybody would
start doing things a little more responsibly. And then I think the whole new shiny thing would
resolve itself, because people tend to do by and large that which is rewarded.
Matt, let me ask you the million dollar question, and then I'll open it up to the mumble room.
How do we shift the end user's value, which would hopefully then influence development?
Would hopefully then influence developers and media coverage? How do we shift the value from
new and shiny to tried and true? Well, I think the opportunity definitely lays
with XP. The problem is that the end user looks at XP, not realizing the fact that it's going to
be a major problem here in the coming months, and doesn't see a reason to switch. But I think if you
speak to the fact that they could potentially continue to use the hardware they already have,
without having to invest in new hardware, I think money is really going to be the sweet spot.
Yeah, I think the point you're driving at here is there's a certain class of user
that absolutely values tried and true, and then there's a certain class of user,
the more sophisticated user, who maybe is a little more on the I want the shiny, right?
Exactly. That's exactly it. And I think that it's really hard to hit that nail on the head,
but I think the biggest problem Linux has for both groups is they really suck at marketing.
I mean, I can't stress that enough. They have this amazing product that is driven through very much
an echo chamber world. I mean, it really is. And it's a shame because I introduce it to people,
and they're just blown away as to why the hell they've never heard of this before. And they have
an Android phone. They have no idea. So it's interesting. So it's going to be tough to say
for sure, but I definitely say that the real opportunity for growth is going to come from
the people that are using XP. I think that's really where it is. The new and shiny people,
honestly, I don't know. Maybe they're always going to want new and shiny.
Yeah, that's like trying to herd cats. I don't know about that.
Well, I think we can do both, but I do completely agree with you, Matt, when you say that people who
want the tried and true, that's how do we market to them? And that's the gap, the marketing bit.
And this is kind of what tweaked me when I listened to your show. And I'm often like one
or two weeks behind that I've been on the Linux action show to catch up. And it's what tweaked
me about it, right? It was like, you guys are the people who market us best because we do suck at it.
Full stop. And so when I see people who would be our best and brightest in terms of getting the
message out of marketing, rewarding really, and for good intentions, I think, the new and shiny,
because you all want to support and push forward everything. I mean, nobody wants to be the grumpy
guy who goes, well, you're really putting your heart and soul into this, and I can see that,
and you're doing this free software, but really? No one wants to be that guy. I get it. But if we
want to succeed, there's some level of responsibility that needs to come in. And the people who do the
best marketing for us who is not me and the other software developers, we need you guys to, and not
just you two, but the media in general who follows free software to do it. And what goes even one
step further of pain and heartache is when I read certain people in the media who cover free software
basically going, fine. Okay, great. The free software projects will never get together.
And again, this is a systems thing because we've been rewarding the wrong things all along. Fine.
And now I'm just going to say that Google with their services are where it will be. And to me,
that feels like just running the white flag straight up the flagpole and unnecessarily.
And I'd love to find some way to break that feedback loop so that we can start rewarding
strategically useful behavior and then getting that message out to those people who would most
benefit from it, such as the XP crowd. It's not an easy thing. I realize that's a gigantic
thing to take on, but I think that's the path to success lies in that direction somehow.
Very good. That's a good point. And it's well taken on my end too, because it's definitely on
my radar because I always cringe a little bit. Like you say, I have that same feeling. It's like,
okay, it's good that you're doing this and I really appreciate the hard work.
And especially in the Gnome case, it's like for years, everybody's been so hard on them. It's
like, okay, they've finally gotten it to a point that it's okay, it's worth talking about now.
It's really gotten good. But at the same time, in the back of my mind, I do understand that I'm
sort of encouraging, like I called it, a form of consumerism. And I'm not generally comfortable
with all those kinds of things. But before we go any further, I want to bring in the main virtual
log here and ask these guys if anyone in the room here wants to raise defense or comment. Go ahead,
Riley. Yes. I have a couple of issues with all of Aaron's things. Everybody is guilty of
beautification. Even KDE is guilty of it. Remember how bad KDE 4.0 and 4.1 was when it came out?
It happened right when Windows 7 came out too, because they were trying to... I mean,
they looked almost exactly alike. I actually think that's a good distinction to make,
is there are times where maybe, all things considered, it is worth retooling and rebooting.
Also, people always have a choice with Linux. The reason why is the LXDs out there and XFDs
out there. They'll be around for a long time to come, and let these newer thread tier projects
keep going. People can use them if they want to. Those awkward transition periods. XP was great,
it was stable, but then they created Vista. Vista was awful, but that led to 7, and 7
was a huge improvement over XP. I think that's the same thing that Ubuntu did between 10.10
and 12.04. That's the same thing KDE did, the same thing GNOME did. Hold on there,
hold on right there. Let Aaron respond to the first comment about KDE rebooting and
things like that, and then we'll move on to the next topic. Yeah, sure. First off, I completely
agree that the results of 4.0.4.1 were not what we all desired, and we've learned from that.
We're doing the next major release, the 5.0, extraordinarily differently as a result. There's
learning curves for everybody. That said, the reason to take on such a revamp or the choice
to do it was only taken after a very extensive examination of the code base we had at the time
and where we could go with it in the future. On the desktop side, applications were a completely
separate issue, but the desktop shell itself was at an evolutionary dead end, and looking at what
we could do with it and to move it to the next step was more work and even more disruptive than
doing what we did with the reboot with Plasma. I wish it would have been different, but
that was a necessary thing, and that needs to happen. We probably have the ability to do that
or afford to do that maybe once in 10 to 15 years, which is exactly what they did there.
Even to this day, I'm on Intel graphics and I still had issues with KWin rendering effects.
I don't want to make this about tech support. I wanted to go back to Tyler. Tyler, were you
going to make the point that essentially 7.0 was an iteration of Vista, and so Vista in a sense was
a reboot, and 7.0 was the... I was going to say that a lot of people seem to forget that Vista
was like a 6.0 release. Microsoft didn't magically do anything with 7.0 to make it better. It was by
the time 7.0 got released, all the hardware and software support was already there for the Nt6
series. Yeah, that's true. Well, SP1 did.
So, if I could just add a little thing there. Now, the feedback that we got after the 4.0 release
was anything but gentle. And while unpleasant, it did have the positive effect of making us
seriously consider the lightness and the responsibility that goes into making such
decisions. And I think that in that sense, the kind of feedback that was often like,
oh, that sucked. That's useful. And I think it'd be much more useful if that was kind of,
you know, maybe not as brutal, because I think a lot of it went over the top.
But that kind of critique, honest critique is useful and needs to be taken on. Because if we
don't look at it as, oh, you're just criticizing me horribly, but this is feedback, I need to take
this on, let's move forward. If we can all engage in that way, then we can actually be more honest
and more critical in a non-confrontational way with each other. And then again, that moves,
I think, the developers towards a path of actually being able to develop more responsibly.
Okay. I wanted to change gears. I'm done talking about Windows. But I wanted to ask a question to
the room that I asked Matt earlier and see if you guys had a take on it. So, Aaron, I think,
made the astute point that if we could encourage the celebration of tried and true and developing
rock-solid platforms and sticking with them and encouraging developers to want to contribute to
that, encouraging users to be interested in that. Does anybody have any ideas on how you actually
shift people's values and perceptions on that? Anybody have a throw, maybe like an idea to start
that process? Well, I think when we talk about mature projects and what Michael Dominic from
Quota Radio calls, quote unquote, the new hotness, I think we need to take a, I think we need a
balance between the two. We mean, I think, an ideology and approach that both gives people
something shiny, something new to play with, but also has that reliability and maturity
that people expect from their software and their computers. I think when we look at software in
general and DEs especially, I think we also need to have new features and integration with modern
technology. We need to have JavaScript, we need to have HTML5, we need to have all those things,
but we also need stability. We also need a lot of critical bugs. To interrupt, if I could,
what you're basically saying is we need to have developers who are experienced enough and savvy
enough to need to know that they need to build something massive that they can build upon for
years that will have the plumbing and meet the requirements for stuff they haven't even considered
yet. And that sounds to me like we're asking too much of people that are just contributing to free
projects during their free time. That is true. That is true because a lot of times developers
do not know what the people really want because, I mean, sometimes it really makes you scratch
your head, especially with, I want to say it, but Unity and me are like, are you actually using it
right now? It's like, think about that. Use what you develop and go from there. Like you haven't
used it yet. Go ahead, go ahead, go ahead. I might be able to speak from a little bit of
authority of the Unity side. I spent the day today in an office of a hundred plus people
all using Unity all day for all kinds of business activities, developers, kernel developers,
designers, finance people, HR. And it runs Linux. A lot of times it's Unity on Ubuntu and you see
it in an everyday setting. Right. And what I found pleasing was not only that, when I left the office
and got the train home, I sat next to some random dude and asked him what game he was playing on his
iPad because it looked like fun. And it turns out he happened to be an Ubuntu user as well and told
me he'd been playing with Ubuntu on a mobile phone and playing with Ubuntu on a desktop. And so that
kind of rekindled my thoughts that actually, despite how much flack we get for Unity and how
much flack we get for whatever we do in terms of licenses and packages we pre-install or don't
pre-install, there are actually plenty of normal everyday users out there who continue to use this
stuff, not just Unity, but for software in general. And they have a whole different set of
expectations and they have a whole different set of preconceptions before they go in and use a
computer. And to really sort of underscore the point there is, what I find amazing about it is
now it's almost like, when we first did Runs Linux, it was a really big deal that all these
computers in this office space would be running Linux. Now we're finding out about it because,
well, of course, it's just a foregone conclusion. That's what we installed and there's the desktop.
It's like not even brought up. It's not even a big mention because it just seems obvious. And
I mean, really, it's like seven out of ten times those are Unity desktops and they're probably
running a long-term support version too on top of that. So there really is a good degree of
stability. And really a lot of what we're talking about is it sort of changes when you change the
context. When you change the context to Ubuntu 12.04 LTS, now all of a sudden you essentially
have what we're talking about for four or five years, which is a pretty good length of time,
probably about the appropriate length of time. So it's interesting because it's this really
complex issue because there's a lot of development actively happening at the front and then there can
be silos of stability that take place that are not really considered in this context, I guess.
I guess on the point to take away from all this is my main selling point of Linux is you always
have a choice. There's always one thing to fall back onto if something else isn't working.
I feel like that's a trope that we lean on to say, well, even if we don't make software that's
actually good enough to meet the expectations of users, we have a lot of software that's not good
enough that you can choose from.
It's not necessarily that. I mean, XFCE, if you don't like GNOME 3, most people go to XFCE
and it's very good.
No, it's not.
But jumping around from one solution to another is not a solution for the average person.
The average individual is not going to hop from desktop to desktop environment.
If you're going to deliver to users, you're making a commitment to them.
Now, I agree that the fact is like, oh great, there's a bunch of people using Unity.
That's almost uninteresting. The question ought to be, are those people using Unity
because it's E, or had they stuck with GNOME, for instance, 2 or whatever,
would they also be using that? So is the differentiation point Unity or not?
And if it isn't, and I'm not trying to pick on Unity, I think this is true of every single out
there.
Right, but like Nat always says, default is king. It's just whatever ships is default.
Right, so if the game changer is not Unity, then this is resources and time that we're
not using wisely.
Well, I think that...
I'll go ahead, Poppy.
Sorry, it also goes back to what Aaron was saying about marketing.
And whilst I agree with Aaron that there is grassroots marketing that people like Chris
and Matt do on this show and others, and Lugs and local teams and other special interest
groups, there's also the very great power that comes from selling machines pre-installed
with whatever operating system.
And brand.
And that co-marketing.
The Dell brand, the System76 brand, there's power behind that brand.
Exactly. And so you can be forgiven for not focusing your attention on the older computers
that have a very low amount of memory and a single core CPU, because those don't get
you that marketing eyeballs. What gets you the marketing eyeballs is the shiny in the
shop and the online store and the what's the latest greatest multi-core processor with
gigabytes of memory and an SSD. That's what gets you that marketing push.
Or really look at the Ubuntu Edge, right? The Ubuntu Edge got a lot of...
...for a constant late ticket there.
I think one point that really should be brought up is we should be striving for stable and
solid software, regardless of what time of year, what releases we're looking at, because
OpenSUSE could arbitrarily say, okay, this is going to be an evergreen release, and it's
not as scheduled as Ubuntu's LTS releases.
Right. Yeah. It's always something I think... And I think some of this too is there are
certain things that are going to get to a maturity. Gnome is going to reach a certain
level of maturity. Obviously, KDE is at a certain level of maturity. And in time, the
new versions of Unity will be at a certain level of maturity. And all of this is really...
It's sort of getting our ducks in a row. And I think maybe this might be a problem that
a couple of years down the road is not nearly as pronounced. Maybe. Now, you'll still have
a lot of small apps that are changing all the time that we could argue about, user-end
apps that need to stabilize. But I think big picture wise, we might not really be talking
about this in a couple of years. If I may, really quick. Here's my position on this.
And I think it just needs to be said that we have LTS for the people that want stability
and they want to work in an environment where everything will be expected and everything
will stay the same. Whereas we have the Arch community where we work on these type of things.
And we develop the future for the LTS projects. So in a sense, the people that do the development
work in the future will also help the people that have businesses or just want to have
just a stable computer at home. And so I think the best way to go look at this is that to
have a community where we proactively respond to the effects that we need to have for people
that want to try Linux or want to have Linux as an everyday product and not have to worry
about problems in the future. I think there's no need to overthink it.
Overthink it.
Overthink it, yeah.
All right. Well, last final words, gentlemen. Aaron, you've got to go across to the side.
I have a question for Popi, actually. I'd be interested to get his perspective as a
technical employee. What exactly are the purposes of the non-LTS Ubuntu releases? Are those
supposed to be like testing grounds for the Ubuntu releases?
All right. Hold on. We'll do that in post-show because I've got to wrap up.
Hold on. Chris, can I get one thing in real time?
Go ahead, Q5.
One thing that I've noticed that we as a Linux community sometimes don't wrap our brains
around is that we have multiple levels of development. Myself working with the Popi
Linux project, distro development is one step removed from, say, desktop environment development.
I think sometimes we try to lump all development into one bucket. That's a problem in my mind
because as a distro developer, most of the time I'm limited by what upstream desktop
environment developers give out. We all need to work together, but people also need to
realize that there are decisions that are made at the application layer that then the
distribution layer has to then try to deal with.
Right. That makes sense. Aaron, were you going to say something?
Yes. I was just going to say in response to what you said, Chris, about maybe in two years
this won't be a problem. If that was the case, we wouldn't be in the problem now because
we'd actually achieved a position of relative stability, featurefulness, and then everyone
went and did a bunch of new things, in large part because people observed or felt they
observed that to be relevant, to be on that shiny new machine and that new hardware, you
had to reinvent and rewrite. Now it's just a cycle of constant rewriting. I think that
if we do not change how we interact with our expectations, that this will just repeat over
and over and over again. We'll only have so many more kicks of this can before we don't
have any more.
I completely agree. I want to button it right there because I think that it's a good warning
as somebody who's also been following this for a long time. You guys know I've expressed
my feelings on this. Matt, you and I have talked a few times about how we feel like
there's been some missed opportunities. I think Aaron just nailed it. It's a warning.
It's something to think about. You can send us in your feedback by going over to JupiterBroadcasting.com
and clicking the contact link and then choosing Linux Unplugged from the drop down or even
better, you could join us live over at jblive.tv. Go in our chat room, do Bang Mumble and guess
what? You'll get our Mumble server and you can join our virtual lug and have your voice
right here in this very show. Now Linux Unplugged is live on Tuesdays at 2pm Pacific. You can
go over to JupiterBroadcasting.com slash calendar and then you can just get that in your local
time zone. Matt, we're going to get to that how-to on Sunday. Remember I was talking about
the remote desktop thing?
Oh, right on.
We're going to do that this Sunday. We might do a slightly shortened show because it's
Super Bowl Sunday.
Oh, yeah, right? It might as well at that point.
That could be a problem. We'll see, but we'll figure it out. All right, everybody. Well,
thank you so much for tuning this week's episode of Linux Unplugged. If we don't see you on
Sunday, we'll see you right back here next Tuesday.

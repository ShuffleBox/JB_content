Chris, we have Rust news.
What is it, Wes?
The core-utils-rewrite-in-rust project is now available in Debian, and it's good enough
to boot Debian with GNOME, install the top 1000 packages, build Firefox, LLVM, and Clang,
and yes, even the Linux kernel.
You know, Wes, I think show's over, you know?
Show's over, man.
Hello friends, and welcome into your weekly Linux talk show.
My name is Chris.
My name is Wes.
Hello, Wes.
Hey, this episode is brought to you by the all-new CloudGuru, the leader in learning
for cloud, Linux, and other modern tech skills, hundreds of courses, thousands of hands-on
labs.
Get certified, get hired, get learning at CloudGuru.com.
Until this episode, no, we're not actually here to talk about Rust.
We have a very special out-of-this-world episode.
Tim Kenham is the Mars Helicopter Operations Lead at JPL, and he shares with us on the
show today Linux's origins at JPL.
He was one of its lead advocates at getting it in the institution at the Jet Propulsion
Lab.
But how it then went from this risky kind of chance OS to running on multiple boxes
on Mars.
That's something that hasn't been super clear, but there's lots of new and good information
in this chat we're about to have with Tim.
And he also tells us about some of the challenges that Linux still is facing before it's ready
for like the really super critical computer stuff, like some of the control computers
that are in the rover on there.
But we're going to get to that in a little bit.
We'll have some community news.
We got a couple of really great classic picks and a bit more.
So to help us massage all of that into something that's listenable, we're bringing in our
crack team of experts.
It's our virtual lug, time-appropriate greetings, Mumble Room.
Hi.
Good to see all of you.
Thanks for making it here on a Tuesday.
It's always fun hanging out with you guys.
We've been going for a little bit on the live stream and having a good time.
And when I got on the live stream, really kind of about a half hour before I normally
do today, it was really in the pursuit of serving the show.
It was really because of my responsibility and duties to the show that I had to play
video games.
And this is pretty great, actually.
Probably most of you have seen this.
If not, well, you're going to hear about it now from me.
The Steam Link app is now available as a standalone thin client app for Linux boxes, and it's
available as a flat hub, a flat pack, or it's also linked in our show notes.
You can just get a tar of it.
And it is a minimal application that was brought together by the folks at Collabra and Valve
to make it possible for essentially any kind of low end machine that has a fast enough
network connection to stream games from another system on the land.
Steam Link, we know about that.
That's been around for a while.
But now this is built into a little app.
Hmm.
So is the news here then that you don't have to install Steam and get that all set up to
use this feature?
You got it.
And you could have it.
So you could launch it on your laptop.
You don't even have to have a Steam account.
And if my machine upstairs was logged in and ready to go, you could stream them right from
my computer.
And you really don't even have to have anything more than an Intel graphics card to make it
possible.
I have two minds here.
As they note in the announcement, special thanks to Collabra for helping make this possible.
And they just do so much good stuff.
The other part that's funny about this, though, is what took so long?
I mean, wasn't the Steam Link hardware running Linux and presumably running some of this
already?
I had that thought, too.
I did wonder.
It must have just been there just wasn't resources at Valve to make it happen.
And so they, in a sense, outsourced it to Collabra.
And it's good.
It works really well.
It detected my Xbox compatible controller.
It automatically detected my workstation upstairs running Steam.
It detected that there was plenty of bandwidth.
And then once you connect, you're put into Steam Big Picture mode, which Valve has put
a crap ton of work into.
There's a lot of information that is in the Steam client that Big Picture actually manages
to surface to you in a pretty reasonable way, which only serves to make the remote Steam
Link experience even better.
An example is I could launch a game and Big Picture mode had a nice way to tell me that
the Vulkan shaders were being pre-rendered and that I was going to wait a bit.
And then it detects that this is going to take even longer.
Would you like to just skip it?
And it presents all that information in a way that doesn't break the Big Picture experience.
That's impressive because it's already kind of hacky and annoying just on the regular
Linux desktop so that it works at all in Big Picture on Linux is nice.
It's smoother in Big Picture for sure.
It really is.
No doubt about it.
Like that's the experience they've put the more recent effort into.
So it will detect all of the Steam machines on your LAN.
And then it will detect if you have a controller that's compatible with Steam.
And then it detects if your connection to those machines is fast enough.
It gives you like these three green check marks or not, depending.
And then when you pass those three tests, you just hit start playing.
It brings up the machine's remote library.
You see every game that's on that computer and you can fire them off.
And including Proton games, I launched Star Trek Online.
I played Batman Arkham City.
I played a little Left 4 Dead.
And I played Hot Shot Racing.
And a handful of those are actually just Windows games.
But they just work beautifully.
I find it fascinating that there's a FFmpeg bundled in here under their Steam link folder.
Yeah, I think it's right.
It's got to be they're just relaying the input events and it's streaming as fast as it can,
an H.264 stream.
But it clearly has some allowance for bandwidth because in every game I tried, I did not spot
any compression artifacts.
And I have an eye for that kind of stuff.
And I didn't see any compression issues at all.
Really what I saw is that I need a new computer upstairs because my machine upstairs, it's
just a dog.
It's pretty great, Wes.
And you combine that with the news that Proton has enabled 7,000 Windows games now to run
on Linux of various quality, to be honest with you.
It's pretty remarkable.
Well, and that Proton keeps getting updates, you know, like there's a new version of their
Soldier Linux runtime container, also Proton Experimental on top of regular Proton releases.
It really, it's hard to remember the old days sometimes because it's so good right now,
even when it's of mixed quality.
But it's just, it's so fascinating to me that some of my, you know, the friends, acquaintances
who I occasionally play games with who are on the Mac and it used to be like, there were
a lot of games they could play, I couldn't play.
And now that is just flip flopped entirely.
Yes.
Great point.
You don't buy a Mac to play PC games anymore at all.
You can play iOS games, but yeah, you know, I want to put it in what I feel like is a
fair context.
I feel like Proton is undoubtedly a win, but I feel like out of those 7,000 titles, the
reality is only a small handful still are Platinum.
And that number isn't really changing a lot in terms of Proton support level Platinum.
And I have definitely had mixed results more than I would like.
So I want to say it's Proton for me has worked out to be an 80% solution.
I am not complaining about that, but I'm just also trying to be realistic.
It has not, even games like Destiny is a great example.
Destiny 2 works for a bit, then it's broken, then it works for a bit, now it's broken again.
I was about to say that, you know, games are often a moving target as is Proton.
So I think it's one of these things that if you play a little bit of the older set of
games, you're going to have a good time.
And if you're on the bleeding edge or AAA worlds, okay, it might be a little dicier.
What's really nice, though, is you bring all this together.
You can Steam link to like I was connecting to a Linux box upstairs.
But if you had a Windows 10 machine on your LAN, you could use that and stream that to
all of your Linux computers.
That's kind of nice.
Right.
You can hide that away in the basement, pretend it doesn't exist and just present a nice,
you know, Linux face on everything.
I had a failure state where I had alt tabbed out of the Steam link experience to check
something on my local machine.
And the alt tab was grabbed by the Steam link and my local machine.
And so it alt tabbed out of the game and over to my console.
And so when I went back to the Steam link experience, I was actually looking at another
window on a separate monitor on my computer.
And I know we've had people write in and they've told us that you can actually break out of
the game and you can actually just completely stream the desktop.
So I began using the machine through Steam link.
Because I have the terminal open, I just launched other stuff and I started messing around with
the computer and I could manipulate all the windows on that monitor that I was connected
to from my computer down here through Steam link.
Just found yourself a brand new remote desktop solution.
Yes, that's what I'm saying is there could be some ways to have some fun with that.
So if you know, if you know a way that I could maybe do that on a Chromebook or something
like that, let me know linuxunplugged.com slash contact.
Because I saw that peek behind the curtain and I realized this could be a killer way
to just remotely stream any application from a machine to another machine and get GPU acceleration.
That could be, that could be magic.
Linode.com slash unplugged, go there to get a $100 60 day credit and of course you support
the show linode.com slash unplugged.
Linode's where we host everything.
We had a challenge on the show last week where we asked the chat room to go after a machine
and we built that on Linode because we knew we could take snapshots, we knew we could
destroy it if we needed.
And one of the methods that we took with that is we built a test system first to see if
it was possible on Linode and then we cloned it.
And the clone was actually what we put out into the public and Wes and I had a control
test machine that we still had up and running that we could have flipped public if we needed
to and it's really simple to do all of this with Linode.
And it makes, it makes approaching upgrades and managing your servers feel a lot less
risky when you can, you can get a automatic snapshot that is clearly labeled and easy
to understand in the dashboard to tell you exactly where you're at and you could just
run one immediately if you need or even clone the box.
Their cloud manager is top notch and they try to make it approachable to everybody and
they do a great job at that but what I really have appreciated is usually a click or two
away I can actually get like the commands I need to run on the Linux box and get even
deeper.
They really don't hide that stuff from you and if you're a long time Linux user you're
going to appreciate that and it's really impressive how they've managed to strike that balance
and it's not just by accident.
They didn't just figure it out overnight, Linode's been around since 2003 and they've
really focused in on doing this type of stuff really good.
I was telling the story on Linux Action News and I'm going to tell you here because this
is, it's one of the examples that I like to cite about Linode when people ask me well
you know I use it, I use another provider right now I'm not really sure why I switch
I mean I love that $100 credit but you know what other reason and the thing I hear from
people who switch is it to me they say it feels like the networking is faster especially
between the the data center to data center networking like Linode's got that dialed in
more than other providers do and people oh yeah you'll see it in our telegram oh I agree
yeah yeah well I'll tell you why.
There's actually a reason for that in 2016 Linode took their entire networking infrastructure
into their own hands.
They wanted to guarantee low latency and a certain level of performance between their
data centers that they just couldn't guarantee unless they became their own ISP and in 2016
they did just that.
How about that?
And they set the foundation to tackle all kinds of designs for the future and to really
strengthen the connections between their data centers and something else and this is on
their blog I'll put a link to this in the show notes this is what they say on there
as we worked on expanding our global network three things were non-negotiable maintaining
vendor diversity balancing flexibility and control and this is my favorite one the third
one and incorporating Linux at the network level as much as possible and then in parentheses
since we're Linode we're very good at Linux and they are and it's that kind of stuff because
they've been around so long they've managed to tackle these hard problems and solve them
and negotiate the deals and secure it to the point where they became their own ISP and
now they have 11 data centers worldwide 40 gigabit connections coming into the hypervisor
super fast data of SSDs and boxes from five dollars a month to massive compute machines
and they have object storage available cloud firewalls load balancers terraform support
and a lot more so go check it out see what you can do with that one hundred dollars there's
a lot Linode.com slash unplugged go there support the show and play with any of these
things let me know what you think about it I love hearing how it goes for you guys it's
great way to find out what you're using Linode for and then every now and then it makes its
way into a read on the show so let's get started at Linode.com slash unplugged and then let
me know how you're using Linode at Chris Lass on Twitter or the contact form either way
would be great Linode.com slash unplugged before we get out of this world and start
talking about Linux on Mars just a couple of notes in the housekeeping I want to mention
again our telegram group because as things eventually one day return to normal any kind
of activities we end up doing like meetups or events whenever that does happen that telegrams
always one of the first places that we're coordinating Jupiter broadcasting dot com slash
telegram the conversation just continues often on Wednesday mornings you'll see people discussing
what we talked about here in the show and if you want to get in on that action that's
where it's at the lup lug remains strong and consistent our lug gets together every single
Sunday it's not a fluke it's something you can rely on and something you can participate
in it's a really nice experience it's on our mumble server just there in the lobby and
we have information on how to get into mumble at Linux unplugged dot com slash mumble and
I think that's really everything we have for the housekeeping West that seems shorter than
normal I feel like we're missing a plug here normally we make a big old mess but not this
week although if you aren't already checking out the coder happy hour on Mondays live you
probably should be it's really been a highlight of my weeks I'm still usually stuck at work
but it's the start of ending my day and I get to unwind with you and Mike oh shucks
thanks thanks yeah we do that we do that at 5 p.m. Pacific 8 p.m. Eastern at JB life dot
TV that is the coder happy hour and that is our housekeeping so if it just wasn't perfect
since we got together last NASA's perseverance rover has driven on the Mars terrain for the
first time it's it's not a lot but it's significant it matters yeah this first
little adventure was only 6.5 meters but once it starts pursuing its main science goals regular
commutes extending 200 meters that's like 600 some feet or more are expected the part that
really stuck out to me though was that the mobility system is not the only thing getting
test-drive right now because back at the end of February they actually upgraded perseverance or
Percy for short they upgraded some of the software running replacing the computer program that helped
actually get the landing done with the program that will control it while they investigate
things on the planet and if that isn't the most stressful firmware upgrade ever I mean come on
hey right no kidding Tim gets into that system a little bit and it's remarkable in a way that
shocked me and he also gets into the multiple Linux systems and all of that so Tim is the
Mars helicopter operations lead at NASA's Jet Propulsion Laboratory and his team specifically
is responsible for the Linux powered helicopter that is in perseverance's belly but we were just
super excited to have the opportunity to chat with Tim because his team has got a you know this is
it's a historic moment for them and to get an opportunity to talk to one of the individuals
responsible for getting Linux into this organization well that was special
Tim welcome to the show and thank you so much for joining us we've been geeking out all morning
about chatting with you well I'm a fellow geek so I always like that I always like to talk to
people like this and my brother's a big fan of your podcast and he's the one that said you got
to talk to these guys well tell him we said thank you because we completely agree and just before
we started we were we were talking about your tenure at JPL and it looks like it's somewhere
around 30 years now working for JPL I imagine that you started there very young yes so I got
my undergrad in double-e and computer engineering and then interviewed around but the top of my
list was JPL because I knew of all the different projects I did from reading up on them when I was
a kid with National Geographic and all the Voyager visits to the outer planets and I was just super
excited when I saw a poster at my school said sign here if you want an interview and I did and
the rest was history I came out of school moving from upstate New York very much of a rural area
and moved to the big metropolis of Los Angeles and started at JPL so you have a background in
computer technology so what kind of job were you looking for at JPL in that time I've done a lot
as an undergrad with computers you know taking a lot of software classes and then computer
architecture classes and I also had a background in electrical engineering so I understood the
circuits and the design of how they worked and so I wanted a job coming out of school in that area
and so I when I hired on to JPL they were looking for somebody who had software background but also
had the engineering background as well to be able to look at schematics and look at understand how
the different boxes in the system worked and so that's that was my entree into JPL was that I
came in early as a graduate from college and started working in the deep space network that's
a big network of antennas that JPL uses to track the different spacecraft that they're talking with
and they were looking for somebody who was a software engineer but also understood hardware
so we could program the ground controllers that would operate these these transmitters and
receivers in the deep space network so that was my introduction to JPL was in that field and then
in the late 90s I kind of switched sides as they say at a JPL from the ground side to the flight
side and started working on the Cassini project if you remember that one that was the big spacecraft
that orbited Saturn and took a lot of measurements and pictures over the years just breathtaking
photos yeah amazing and then you know they they had this very dramatic burn into the atmosphere
as a goodbye there's a very a very amazing video of that you know a rendering of that on the web
if you want to search around for it but I worked on the I didn't actually work on the flight software
itself I worked on a simulation environment where you would simulate down to the instruction level
what the processor could execute and build models that were all the different peripherals on the
spacecraft and so you could take the actual flight software and load it on our simulator
and it would run as if it was on the vehicle so they use that as a test bed a virtual test
bed for many years on that project boy I could see how that'd be immensely useful and at what point
in this journey do you discover Linux and start working with Linux so JPL for many years was a
Solaris house right you know when I came out of school everybody wanted a big Solaris workstation
yeah you know the old spark workstations they were pretty cool they were cool and so I got you
know I kind of came up the you can call it the Unix curve learning how to work on Solaris and
you know the the flight project side used Solaris a lot and prior to getting on Curiosity which is
the the big rover that's still on Mars and operating I had been on a project where we were
doing a lot of software technology development and we could kind of see the writing on the wall
that Solaris was starting to decline in the marketplace so we in our own project we went
and started looking at alternatives and I just bought a PC made out of random parts
you know just commodity parts at the time and loaded Linux on it and took the software that
we had on that project and compiled all that software on Linux and it was kind of a somewhat
comical moment because one of the senior engineers in the project had gotten his
$15,000 Sun Solaris workstation that he you know he wanted as a senior guy and we had the software
compiling on both and I took my my little commodity level PC and compiled the software
and it compiled twice as fast and he just had this look of what did I waste all my money on yes he
just just just look came over his face like I can't believe that and he ended up pawning off the
whole system to an intern and then it was kind of funny what would you say what kind of what era
what year ish was this would you say this would have been early 2000s probably okay very early
very early 2000s and so Linux at the time was kind of a niche thing at JPL and sort of an
underground movement if you will because you know Solaris was the enterprise class system that
everybody supported and believed in and you know they built enormously robust machines you could
drop them off of a cliff and nothing would happen and you had support it had an ecosystem it was
the established operating system at that time it was sort of a no-brainer yeah right and so when I
came on to Curiosity I was one of the first five team members for Curiosity and I was tasked with
setting up a development environment for that particular project and I said why don't we use
Linux and everybody around the table kind of looked at me and said uh really isn't that the
thing SCO is trying to sue out of existence and so there was you know it's kind of this there was
kind of a view at JPL that it was sort of a you know a disreputable corner of of the operating
system market in some ways because you know it hadn't had the it hadn't had as much of the
enterprise time under its belt then right and it seems like in your environment that matters more
than it would to even most enterprises yes you're right because we they had a lot of tools that
have been written specifically for Solaris you know because it's Linux it's I mean it's not
Linux it's a flavor of Unix so there's many similarities but you know in the underlying
architecture was Spark and that Intel and so I just made a push I said listen we Linux is where
the market is going you know you could already see the decline in in Solaris even at that moment
in time I said if if we just keep replicating these old platforms we'll be left behind sure
it seems like even though at that point in time that was still a bit of a stretch because people
probably assume Solaris would be around forever I mean even if I recall my timing right even kind
of switching to it the Intel architecture itself would have been kind of looked at as a bit risky
right so I mean you were just talking about a new OS but you're talking about a CPU architecture
that was built for PCs you know I used to work with a data center mainframe guy who called them
Mattel inside yeah yes I mean there's a famous Dilbert cartoon where Dilbert and his friends
are talking about you know programming on their PCs and the and the the bearded grizzled Unix
veteran came along and flipped him a nickel and said here why don't you buy a real computer
so you're really for you're kind of fighting two different headwinds in that case yes and but to
to JPL's credit you know JPL JPL is always balancing internally yeah we want these firmly
established technologies that we can trust but we're always open if somebody can make a good case
for us we're always open to looking at new things and they said well why don't you go off and look
into it for us and make a case for it and we'll do a trade study and then we'll decide what we're
going to do and so I went off and I configured up you know a machine spec and install Linux and
show that I could get all of our tools running on it and and the fact that it was fast and they're
relatively inexpensive compared to sun workstations to replicate and so we ended up kind of pivoting
and starting to use Linux for our development tools and what was interesting was that
the other parts of the project like the ground system and the test beds you know started to
take interest and came and asked me for my machine spec and looked at it and ended up adopting it
for their own you know basically a PC with Linux and so now for curiosity and now especially for
Mars 2020 they've pretty much pivoted to Linux and they've taken it a step farther and they have a
lot of like VMware infrastructure in place where they have a lot of different virtual machines that
people can log on to and run their tools and do their analysis so it's really been a big pivot in
the last 15 years. I was kind of curious if any of the you know the open source nature but also
sort of the you can just install and run it without licensing has been useful internally
it's just a lot more flexible and certainly you all are pushing the limits of what is possible
it seems like that might go hand-in-hand. Well JPL also is very it's very important to them to have
support contracts in place and so for many of the official if you will the official workstations
and environments that they install they they have support contracts in place and they try to
standardize on a single image so it's sort of a blending of the two worlds right they still don't
want people to go off and just ad hoc build up these Linux environments that they don't have
built up these Linux environments that they don't know about the level of patching and security and
compliance with all these other requirements. You're not installing Arch Linux? No there aren't
and so it tends to be flavors of Red Hat that they get support contracts for and they you know
they have a very robust system administration environment now so they've they've kind of a
adopted Linux but at the same time they've made sure that it's robust in an in an enterprise way
to make sure that you know the machines are secure and the environments are standard because the one
thing that can bite you when you have tools that run on Linux is you have to very carefully version
control the tools that you use. Right right. And so if you rev Python from say 3.6 to 3.7 and
everything starts breaking all of a sudden because there's been some change that can that can really
hurt you as much as things in other areas so they very carefully control versioning on these
workstations so that they don't get bitten by tool changes. And so this sort of sets the stage
I would imagine for some cultural acceptance of actually using Linux in a mission on Mars but I
don't imagine it was automatic. It had to be an established methodology for doing something versus
Linux and then and then not only is it Linux Tim but one of the things I'd like to get to is
the open source software running on top of Linux too. But before we get to that could you give me
just a little bit of an idea of what it was like to actually convince people that
it's going to be OK to put Linux on Mars. It's going to work out. Let me explain it to you this
way is that NASA and JPL have these different classes of missions and there's different levels
of if you will reliability and vigor and verification that are assigned to those different
levels so the big flagship missions like the rover itself they call them Class B
which so there's a lot more scrutiny about what kinds of software you get to run
what kinds of operating systems what kind of testing program you do what kind of verification
you know the level of reviews so there's a whole litany of things that you have to comply with if
you're going to if you're going to design and fly one of these Class B missions.
But JPL is also aware that they want to try new things and so they have a classification of Class
D missions they call it and the helicopter the Mars helicopter is one of those classifications
they've had other ones like I don't know if you've heard of CubeSats they're small compact
satellites that you can fly many universities are doing those kinds of projects and so they
tend to be lower profile and if they fail it's sad but it's okay because it's not a critical
aspect of the operation right and so the helicopter was defined as one of these Class D missions
because if the helicopter crashes for some reason it doesn't affect the rover right they can
continue to go and do them their primary mission of going and getting rock core samples and we
don't we can't really hurt them and so there's a lower level of scrutiny if you will
on that kind of mission and so our main the main work that we had to do with respect to the rover
was to verify that nothing that we did could hurt them in terms of you know how we interface with
them and and so forth and so because that's true because the Mars helicopter is classified as a
technology demonstrator where they're willing to try new things willing to accept a higher level
of risk um they didn't really push those hard requirements on them to use and use the traditional
operating systems and computing platforms that they usually put on rovers because for instance
the processor that's on the rover is really a Mac power pc from the from the mid 90s not exactly
modern yes exactly they use it's like a 200 megahertz power pc but it's been re-engineered
from the silicon up to be radiation tolerant right so that it can and very thermally tolerant so it
can take a beating you know a variant of that same processor is on the curiosity rover and it's been
operating for you know going on what 10 years here without any problems and so they build those to be
super tough but that also means that they tend to be older technology slower yeah right and so the
helicopter itself we could not use any of those older processors because not only are they not
very powerful processors but they're big and heavy and they consume power a lot of power so we
couldn't use those old processors for just for that reason alone so we had to use something modern
something that had a lot of processing power because we're running the guidance loops on the
helicopter when it's flying it's measuring sensors running it through control algorithms and you
know sending commands to the flight system at 500 times a second and so we had to use those
and on top of that we're taking pictures we're we're taking black and white pictures down to the
in the direction of the surface 30 times a second so it's taking a picture 30 times a second
analyzing it for features is that f prime right there is that where f prime is doing some of its
magic that is a if you want to call it an instance of f prime so f prime itself is a software
framework it doesn't have all that built into it so we made we took that software framework which
we developed at jpl and is open source yes and is open source so you can get a raspberry pi and go
to the github repo for f prime and you can build a little demonstrator with a raspberry pi and see
how it works and many of the same software components that are on that repo are on the
helicopter right now sitting on mars it's amazing that's right and the helicopter code itself is not
on the repo because that's you know proprietary intellectual property of jpl so we use that
framework which is something that i developed back in the 2013 2014 time range to develop the
software but because these these processors the processor for the helicopter has to be very
powerful we couldn't use that i mean the processor on the helicopter is 100 times more powerful than
the processor on the rover it's an arm like a multi-core one too right yes it's a quad core
arm processor it's built by qualcomm so it's a galaxy s5 era processor if you wanted to draw
a comparison so the way linux got into the picture was that this was a development board that you
could buy off the internet for about 400 bucks back in the day it was actually used for people
to do drone development if you wanted to prototype a drone you can use this particular board sure i
mean it sounds like cheap prototyping and that's basically what you guys were doing right and so
this board is very compact it fit within the envelope that we wanted and it had the i0 you
know because we're talking to all these different subsystems on the helicopter so it had the
sufficient i0 that we needed and what was really important was it already had all the software in
place for the camera systems we use because we had been doing some asking around and if you just
take a modern camera and you try to program for it in linux it can take many months with an expert
to get it all up and running no doubt and we're not experts at writing camera drivers for linux
we just aren't and so we had you know partners at qualcomm will help us and this thing all came
packaged and it came packaged with linux sure it's a 3-4 kernel based on lanaro i don't know if
you've heard of that flavor yeah lanaro is sort of an embedded version of linux it's kind of aimed
towards embedded applications and they've done a lot of good work for arm support generally i think
yes and it came pre-packaged with these camera drivers and the i0 drivers we wanted and so it was
a very natural place for us to step in and use it and so that's how linux got onto the mars
helicopter and because it was this class d mission we didn't really get any pushback from jpl about
making linux the operating system that's fantastic and so it if i'm kind of getting where you're
going with this it kind of means that this class d style classification means that a little less
pressure it gives you a chance to try something like linux and if it proves itself here and proves
itself a few more times i would imagine it means it could eventually be moved up to something like
a class b style mission yeah perhaps i would say it's gaining more trust in that field right yeah
you know as time goes on and now that there's the linux real time patch that gives the kernel more
of a real time aspect to it is real time one of the major things that gives jpl pause when using
linux yes because linux is really not designed truly to be real time they have even the you know
the linux kernel itself has modes you can run it in that makes it more real time but linux was
really designed to be a multi-user fairness algorithm kind of os in the marketplace you have
very purpose-made real-time operating systems like wind rivers vx works which is the operating
system that is on the rover and that way you get much higher guarantees about when tasks will
finish you just can't have another process taken over right i mean when you're trying to fly
autonomously on mars there's just there's not a lot of room for failure right and so you so when
you're when you're doing very critical things like that you have to order things in the app race
operating system by means of their priority and so when you have a shared fairness algorithm in
linux it just kind of hops from user to user to make sure they all get time it doesn't lend itself
to that because you don't want your image compression algorithm to get in the way of your
you know your flying or your landing algorithm right that it would be silly for image compression
to take over for a minute and you crash a billion dollar vehicle yeah it sounds ridiculous right so
you so when you're dealing with very critical activities like landing the rover you have to
have a an operating system that you really really understand how it's going to operate with respect
to all these deadlines in the software and so that's the void that linux has to cross to get
accepted on some of these more class b projects is i see kind of be engineered in such a way that
it can make these kinds of guarantees for performance and improve it yes exactly is the
ingenuity helicopter is its 34 kernel does it have a real time patch set against it is it real time
so interestingly it doesn't it has a it has the pre-empt patch on it but it does not have the real
time patch and it just happens that it's super fast so that it can keep up and we also so the
linux the linux installation on the snapdragon is not the only processor we have on the helicopter
we actually have a co-processor it's a microcontroller built by texas instruments
and it's a microcontroller that's really designed for automotive uses so it's very rugged and very
temperature tolerant sure and so the main flight control loop that we do there's two parts of it
there's one that's on the main processor you know the linux processor and there's another part of
it that's on this microcontroller and that one we actually run bare metal what we call bare metal
which means there's no operating system it just gets a signal from the hardware and that runs a
control cycle and then it waits for the next signal from the hardware there's no operating
system at all and so that particular processor is the one that's in charge of the immediate flight
control if you will keeping the helicopter in the air and then the linux processor is the one that
does the you know the more of the navigation and the imaging and so if the that linux processor
falls behind we have built-in robustness to the software that it can tolerate some of those slips
if it happens you've got like a hybrid setup there to try to take advantage of both sides of things
right we give each processor the job that it's good at yeah it sounds it sounds like that secondary
co-processor is pretty foolproof so it is that also the system managing the thermals because
my understanding was this tiny little helicopter spends a ton of its energy just keeping itself
warm enough to survive yeah so the third part in this in this uh triple play here is that we have
an fpga i don't know if you guys are familiar with that acronym means it's a it stands for field
programmable gate array it's basically a sure okay a digital logic chip and that one itself is very
much radiation hardened so the helicopter spends most of its time asleep because we don't have the
energy just to leave it up and running like a you know data center server it's it's uh instead what
happens is we manage wake sleep cycles with the helicopter so so the fpga we essentially program
it and we say okay we want to we're setting our alarm clock for 10 a.m tomorrow morning please
wake us up then and then we go to sleep as a processor so the whole system basically shuts down
except for that fpga and that fpga has digital logic built into it that will basically run a
thermostat to keep us warm overnight so that gets us into a very low power sleep mode so that we
don't expend energy just sitting there waiting for instructions just a minimal amount of control to
keep things operational keep that that clock counting until you wake up and check in again
yes exactly so that makes our operations very uh challenging because we have to manage that
alarm clock and make sure that we're up and waiting for it when the helicopter comes back up
because we we can't just come up at any time and say hey helicopter go do this for us it's not just
waiting for us to talk to it we have to coordinate all these wake up and sleep times so that we can
do things when we need to do them and then i imagine it also there's a component of it has to
be aware of a battery level and solar charge and whatnot too yeah that's uh we we manage that
really on the ground you know in our we have models that we developed in our ground tools that track
the battery state of charge throughout the martian day and we try to time events on the helicopter so
that we maximize the amount of battery energy that's available for a flight so the software
that runs on the helicopter is paired with a number of these ground tools that we use to track
its state as well and then if something's drifting from what you expect you just sort of send an
update to it to change whatever yeah we would typically just change our plans for that day we
might move it later in the day to give it more charge if that's what happens so when are we
looking at that thing kind of starting to do it's you know because it's still in the belly right now
right of perseverance and then it's going to come out and sit out for a little bit and then it's
going to be a little bit before it even flies so i mean we still have some time here right right
we're still attached to the belly of the rover we charge the batteries every week or so so interestingly
the helicopter has this this qualcomm board but we also have a box on the rover that's an instrument
payload we basically just took the same avionics cards that are in the helicopter and constructed
them in a different way and interconnected them in a different way so that the the base station
box that's attached to the rover also has the qualcomm processor and also has linux and also has
f prime on it so this box acts as a radio relay to the helicopter so the rover will turn on this
base station as an instrument payload and communicate with it and pass it the files we want
and then internally we take this base station and the base station passes the files we want to the
helicopter when it wakes up and that's how we operate it so what you're saying is there's
there's actually two linux boxes that are going to be active on mars right and there's actually
three which is kind of fun because did you guys see the edl landing videos yes wow with the
parachutes bill billowing out and you could see the dust kicking up as when i was looking down
and the rover was touching down it was incredible that was also a another linux installation and
this one was an x86 box right correct it was a compact pci ruggedized pc and i was just running
pretty vanilla from what i understand pretty vanilla a 4x you know for the developer sent me
the numbers it's a 4.15 kernel wow and it's it's running linux and they they had a they had a whole
series of of just usb cameras attached to all these places on the surface of the rover and this
was also another one of those class deep instruments because it was attached to the rover
but it wasn't used in the landing to find a place for the rover to land it was basically
a giant video recorder so during the landing at the right moment they just sent in a command and
said hey start recording good luck right right so if everything had gone wrong and for some reason
they hadn't recorded the video it wouldn't have affected the rover landing itself it just would
have made us they didn't get all that cool video and historic video too i mean it's the fact that
it worked is fantastic and it means that linux took part in capturing really truly truly historic
video and i i heard i heard a shout out on stage to ffmpeg for the doing some of the heavy lifting
there yes and they and i was talking with the developer recently they even used python scripts
on that box to do the image so after they landed you know they'd saved all the images and then
over the next week or so they started transferring all this video and so they used these python
scripts on board to do some of the processing of the images and then they sent it back to
ffmpeg for processing of the images on the actual linux box before they shipped them over so you
have you have a bunch of different open source things operating on that one and so i guess they
get the credit for being the first linux uh installation to run on mars but you'll have
credit for the continuous installation right because their computer i assume is now shut down
it's shut down but they're going to try to use it for other things like they have a microphone
for they attempted to get a recording on the way down through that microphone but it didn't work
they didn't really elaborate on why it didn't work but but they've tested it since and it
seems to work so they may use it for recordings throughout the mission it's sort of a bonus
feature so if i ever get a chance to play the sound of mars on this show it'll have been recorded
on linux and it'll be played back and recorded on our end using linux that's pretty great
right yeah if you get it from that microphone they have another microphone up on the mast
that's also they're able to point in particular directions and take recordings okay so those
ones might not be okay yes but we i guess you could say we get credit for being the first
linux installation to operate on the way to mars because this this instrument box that i told you
about that we designed has the software on board to to do the charging so we had to keep the
batteries maintained and so we would wake this box up every week or two and it would execute commands
to to keep the charging going huh so have you kind of i mean no it's still kind of early in a
sense but it's you've made some pretty hit some pretty significant milestones here have you gotten
a sense of in terms of linux what's worked what what hasn't worked what might be adjusted for
future missions you have any of that idea yet i think that as we move on in linux i think
i think what we want to look at is is getting much better at doing things like configuring the
kernel and understanding what's going on in the kernel and being able to do things like apply
this real-time patch that i mentioned so the path forward i think is to study linux and understand
it better as a real-time environment and just increasing our expertise and how it works
because we're new to this game i was a i mentioned that earlier operating system vxworks i was a
i was you know one of the vxworks specialists for curiosity i was the one who configured it and
understood it and you know wrote the software that would interface with it have to get very
up close and personal right so i come out of that world where we have to know all these things about
the operating system and so we actually had a developer on our team that was very much
linux savvy so i wouldn't classify myself as a linux expert i would classify myself as kind
of a maybe a power user in that domain you know flights of flight software but we had somebody
else who was digging into the innards of our particular distribution and figuring out how to
configure it and get the things working that we needed to so getting more of that expertise
in a field that typically doesn't have it for that particular application i think that's where
we want to go moving forward at jpl is to understand you know how linux works in that
environment and try and study it and characterize it and test it so that we gain that trust so that
we can use it for more critical applications are there any kind of future like class d style
missions that are in the works that might involve linux that you know of at this point there are
some in the pipeline i don't know if i can speak to them now because they're more in formulation
than jpl doesn't want to you know yeah break news on things like that but it does seem possible
sure sure and i think there is a growing place for these kind of class d applications of it as a
matter of fact there was a cube set that jpl developed and flew and operated a couple years ago
if you want to look it up it's called asteria a s t e r i a and it was a earth orbiting spacecraft
that would do it would attempt to you know do alignments with distant stars to do observations
and it used f prime the same flight software framework that we're talking about
and it used a flavor of linux for that board as well so okay all right i love it so we've had
this partnership between f prime and linux for a while so i think definitely these projects that
have used it and have started to build a resume for linux will help us to more mainstream it in
more mainstream in this kind of project in the future and there's definitely interest i would
imagine there's many tales of over the years of getting linux further and further adopted but i
just appreciate giving getting some like little peek little insight into how it's all kind of
unfolded and it's kind of one of these stories where there's more to come because we have
eventually at some point the ingenuity helicopter is going to fly and i'd love to chat again and
just kind of get an idea of how it went and what what you what you guys learned and all of that
because that's that's still a milestone that as we record this is yet to happen yes it's
very exciting and it's very exciting not just for linux but for spaceflight in general because this
is something that has never happened before it's sort of a right brother's moment where we're
trying something completely new we had to develop new techniques we had to construct the helicopter
in a very special way to operate on mars because mars has one percent of the density of earth
so you can't just put a just can't grab a commercial drone off the shelf and put it on
mars you know we had to build lighter and longer blades that spun faster and make sure that we were
very lightweight and that was a challenge in itself and so doing this for the very first time
is going to be super cool if everything goes well we'll have some nice color pictures coming out of
that because these cameras that came with it we have basically a 13 megapixel color camera wow
boy and i love a good drone shot i always love drone shots yes it's a it's a half a gram you know
it's a tiny little square camera that came with the board it's basically just an adapted cell
phone camera if everything goes well we'll get some good pictures from aloft on this helicopter
that we can share with the world when the time comes i mean i just i think of the weight
restrictions and the atmosphere restrictions or limitations and that had to go into making this
thing even conceivably possible and it's it's mind-bending but i i can see long term how this
would be essentially invaluable to any manned mission having something like this little
helicopter a little more developed a little bit longer flight time of course that could go out and
just do some reconnaissance ahead of them if they're out walking around or even be streaming
back pictures you know at this as fast as it can back to the back to ground so you know ground
control control can see what's going on with the walk i mean like there's so many uses
for a little even something that just takes pictures that flies around there's so many uses
for that on any manned mission in the future i would imagine absolutely and you you can look at
the picture aspect but one of the things that a helicopter can do that a rover cannot is it can
go to these features that you can't drive over so if we wanted to inspect say a cliff face or a deep
ravine or something like that you can't send a rover there to look at it so you can imagine
uses where you would send a scout like this to a really difficult to access place take a bunch of
pictures future helicopters might be larger so that they can carry an instrument payload so you
might have like a spectrometer or something that can scan a formation and get data so the the nice
thing about the helicopter is not only can it get places quickly compared to a rover because the
rover just crawls across the surface to be safe but it can only get there quickly but it can also
go to places that the rover just can't wow and it all it starts here as i can see why why you would
work at jpl for 30 years i mean what a what an exciting thing to work on even even just getting
to work on on one rover would be remarkable but two tim is is incredible so congratulations uh to
you to the team to everybody i mean this is so exciting for us as space geeks and linux geeks
to see these two things come together amazing yes well you can imagine it's very exciting for
me as well having grown up as a kid reading all these stories about jpl and all their
intrepid adventures and getting to actually work on this has been a real boon for me it's been a
it's been a lifetime dream to be able to work on something like this well thanks for coming
on and sharing the details with us we are quite welcome and and thank you for having me on your
podcast boy that was a treat that was that was fascinating i think there's new details in there
that uh haven't really been talked about much publicly and what a what a story west from this
this thing they're gonna try to now actually running on multiple computers on the surface
of mars and you might say it's out of this world you know it's really fascinating to see a space
where linux is still proving itself it's kind of already conquered earth but the constraints for a
multi-billion dollar mission on another planet are a little bit different i get that i'm just
hopeful that due to the open source nature here you know as jpl and nasa adopts more linux and
puts it in more difficult situations that's just going to be another shared use case that improves
that kind of real-time story for other kernel users yeah it was interesting and it makes total
sense to hear how important it was that the linux kernel support real time to make uh some of this
actually possible uh and um i'm hopeful that we'll see in the future way more devices that are this
class d style mission device there's probably tons of support equipment that isn't necessarily
fundamental to the core operation of the mission but would be useful to have and and add supplemental
value so that would seem like a great use case for linux for a long time i mean i wouldn't be
surprised if eventually it's the predominant type of equipment but we'll only have to just
wait and see but it was really cool to hear all of that and uh to see that uh maybe one day could
go even further so thanks to tim for coming on the show we got we really got him at just the
perfect time because after this like i think he said did he say next week uh mars time is
kicking in for his team is that what he said it's very soon yeah pretty much they've got to switch
over to living on mars time how about that and not all the teams have to do this all the time
but his team does because they're the helicopter team and they're going to be doing flights and
stuff so it's pretty hardcore so i'm really glad we got him when we did because once he goes into
mars mode he kind of just he goes afk uh and so it was great to chat with him and maybe when he
emerges from mars time we can catch up with them and see how things went yeah i mean here's i think
we'll all be hoping that the first flight of this little helicopter goes well west before we go why
don't we do a pick or two these are honorable mentions because they have been on the show at
some point in the show's nearly 400 run history but i can't remember the last time we talked about
them and they both deserve a little attention i'm going to start with oaken audio this is the audio
editor everybody should know about everybody knows about audacity god bless audacity it's a great
project amen but oaken audio this is one of my secret weapons for production if you know any
clip you ever hear on this show that i've clipped for you know like if we have a a news clip or
something like that it's in oaken audio always is i love this app because it'll open up every
audio format but also every video format it has a really nice smooth ui it's uh great for just
grabbing a bit of audio and exporting it or cutting something it's about time i try it because i
i remember i think drew recommended it in the past and i sort of gave it a go but it was
at the time it was hard to get installed but just looking right now at their download page they've
got windows versions mac packages here and then a whole bunch of devs rpms and even a pacman package
you can just download so seems like things have changed a pacman package you say yes yes and then
let's give mention to natafire we've talked about it before i feel like we have but natafire
is an application that lets you take a website and essentially convert it to an application
it's basically electron for yourself but the idea would be that you know maybe you got to use web
mail or you know like you get stuck using a few web apps and you just want them out of your browser
you'd like them to have their own process you'd like them to have their own entry in your taskbar
that's where natafire is kind of handy yeah we're all stuck with it but a lot of the benefit of
having a native app is you know some of that native desktop integrations if that app supports
it but then also just just having a different icon having a different entry in your alt tab
so that you don't have to manage every single thing in another tab from your lips to developers
ears wes that's all i want that's all i want well that and i wouldn't mind it to be a native
application this is an interesting challenge uh this is one that canonical is taking a crack at
with flutter and it's a problem that is it's it's it's it's apparent to anybody who's been listening
for a while developers have a whole mixed bag of incentives sometimes they want to develop
for mobile sometimes they want to develop for several desktops sometimes linux is just kind
of a byproduct and we've ended up with electron for better for worse but flutter is perhaps another
path unfortunately not one that i'm too excited about not really happy that it's it's hitched to
dart and google but it is something canonical seems to be pretty excited about and they're
writing their future installer in it and they've committed to writing every future canonical
desktop app in flutter as well so there's a lot going on here and i think a lot of people are
passing over this story one of these just sort of glaze over and pass by i would encourage you
not to pass over this story go to linuxactionnews.com 179 and listen to this week's episode
where wes and i do a breakdown so you can kind of get where they're coming from and kind of the
scale of commitment that they're making to this thing it's it's more than you might suspect and
i think it's worth your time and attention so do do go check that out linuxactionnews.com 179
and with that i think mr payne we're gonna wrap it up so i will just say this join us live next
week see you next week same bad time same bad station we do this here on tuesday at 12 p.m
pacific 3 p.m eastern if you do the twitter thing you can find out about it by following us at
linux unplugged or follow the whole network at jupiter signal there's a whole cast of great
shows over at jupiter broadcasting.com there's also even a calendar to find out when we're here
live hey that's a good one and all the links all the links linuxunplugged.com 396 oh my gosh oh my
gosh also our subscribe link is over there our mumble server info our matrix server basically
all the stuff we kind of just casually mention all the time on the show we try to have links
to it at linuxunplugged.com that's the general idea but we just appreciate you listening thanks
for downloading listening too we'll see you right back here not tomorrow not monday not wednesday
not saturday but next tuesday
all right everybody let's go boat jbtitles.com everybody go boat at jbtitles.com we go go pick
our titles jbtitles.com we've got quite the selection yeah there's a lot of boats going
today um we got a new jellyfin release west 10.7.0 is out did you see the uh new shiny no i haven't
had a chance to upgrade yet but i guess i know what i'll be doing after the show watch out though
sounds like there are some uh irreversible database changes so you can't go back or at
least make your make your backups first you're running in a container right this should be easy
yeah do your backups do your backups

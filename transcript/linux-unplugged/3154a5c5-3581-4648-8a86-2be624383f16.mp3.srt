1
00:00:00,000 --> 00:00:10,840
Well, I think we're having ourselves an emergency podcast right now.

2
00:00:10,840 --> 00:00:12,760
This is like thrown together.

3
00:00:12,760 --> 00:00:18,280
We gotta like just really slam this one out because I got called into jury duty tomorrow.

4
00:00:18,280 --> 00:00:20,280
You know, you've got to help out the state here, Chris.

5
00:00:20,280 --> 00:00:23,400
You know, Wes, somebody's got to go in and pet the bald eagles.

6
00:00:23,400 --> 00:00:26,480
It does make me feel comfortable that you're the one making the decisions.

7
00:00:26,480 --> 00:00:27,480
Oh, yeah?

8
00:00:27,480 --> 00:00:29,480
Are you sure about that?

9
00:00:29,480 --> 00:00:34,080
I got a whole line I think I'm going to go in there and give a speech about what I think

10
00:00:34,080 --> 00:00:37,000
should be a user voted type of justice.

11
00:00:37,000 --> 00:00:46,760
Think that'll get me on the old board?

12
00:00:46,760 --> 00:00:51,680
Hello friends and welcome into the old unplugged program where we're celebrating user created

13
00:00:51,680 --> 00:00:52,680
software.

14
00:00:52,680 --> 00:00:53,680
My name is Chris.

15
00:00:53,680 --> 00:00:54,680
My name is Wes.

16
00:00:54,680 --> 00:00:55,680
Hello Wes.

17
00:00:55,680 --> 00:01:02,040
Here we are on a Monday, no live stream, no mumble room by ourselves.

18
00:01:02,040 --> 00:01:04,080
Well we've brought in a little backup.

19
00:01:04,080 --> 00:01:09,360
You might say some of our favorite friends, Mr. Cheese Bacon and the Drew of Doom.

20
00:01:09,360 --> 00:01:10,360
Hello gentlemen.

21
00:01:10,360 --> 00:01:11,360
Hello guys.

22
00:01:11,360 --> 00:01:13,200
Drew, it's been a while since you've been on the show.

23
00:01:13,200 --> 00:01:14,200
Glad to have you on there.

24
00:01:14,200 --> 00:01:15,440
Been loving the Choose Linux.

25
00:01:15,440 --> 00:01:16,440
Of course.

26
00:01:16,440 --> 00:01:18,800
So and Fridays with Drew on Linux Headlines.

27
00:01:18,800 --> 00:01:20,800
Yeah, but you guys know I missed you over here.

28
00:01:20,800 --> 00:01:22,840
I just couldn't stay away.

29
00:01:22,840 --> 00:01:26,240
Oh Drew, I know you're lying.

30
00:01:26,240 --> 00:01:27,240
I know you're lying.

31
00:01:27,240 --> 00:01:30,360
You're just helping us out because we really did get ourselves in a bit of a situation

32
00:01:30,360 --> 00:01:31,440
this week.

33
00:01:31,440 --> 00:01:34,880
So I apologize if you were planning to make it live and we weren't there.

34
00:01:34,880 --> 00:01:36,360
We'll try to do something.

35
00:01:36,360 --> 00:01:40,000
We'll try to do something for the live stream, but I don't know what.

36
00:01:40,000 --> 00:01:43,560
Since it's kind of a special edition, we thought we should do something we haven't done for

37
00:01:43,560 --> 00:01:45,200
a couple of weeks.

38
00:01:45,200 --> 00:01:47,040
Something we wanted to stay accountable for.

39
00:01:47,040 --> 00:01:49,160
And so Wes, are you ready sir?

40
00:01:49,160 --> 00:01:50,600
I am standing by.

41
00:01:50,600 --> 00:01:54,720
All right, ladies and gentlemen, it's time to check in on the Arch server.

42
00:01:54,720 --> 00:02:00,760
So if you will recall, we replaced a FreeNAS box with a Fedora box, which seemed like a

43
00:02:00,760 --> 00:02:02,100
ridiculous decision.

44
00:02:02,100 --> 00:02:03,400
Level one insanity.

45
00:02:03,400 --> 00:02:07,320
So then we thought, well, what could we do that would be even more unreasonable?

46
00:02:07,320 --> 00:02:10,500
So we replaced that Fedora box with an Arch box.

47
00:02:10,500 --> 00:02:15,680
Now this system is responsible for a bunch of media storage that's critical to our operation,

48
00:02:15,680 --> 00:02:20,520
as well as several applications, more than several, that run in containers that are vital

49
00:02:20,520 --> 00:02:22,060
to our day-to-day operation.

50
00:02:22,060 --> 00:02:27,020
So we thought, what better way to take care of a box like this than to update it live

51
00:02:27,020 --> 00:02:29,000
right here on the show.

52
00:02:29,000 --> 00:02:30,760
Mr. Wes Payne, are you SSHed in right now?

53
00:02:30,760 --> 00:02:32,560
Oh yes, we're ready to go.

54
00:02:32,560 --> 00:02:33,720
All right, kick it off Wes.

55
00:02:33,720 --> 00:02:37,840
Oh, some new kernels, upgraded WireGuard, new system D version.

56
00:02:37,840 --> 00:02:38,840
This is a good one.

57
00:02:38,840 --> 00:02:39,840
Oh God.

58
00:02:39,840 --> 00:02:40,840
All right.

59
00:02:40,840 --> 00:02:47,800
And I kind of love Arch, downloading like 1.6 gigs of software for a net upgrade size

60
00:02:47,800 --> 00:02:49,980
of two megs.

61
00:02:49,980 --> 00:02:51,480
That is really great.

62
00:02:51,480 --> 00:02:53,720
I always love it when a package manager does that.

63
00:02:53,720 --> 00:03:00,000
Well, coming up on the show today, we're going to have a bit of a theme on the episode.

64
00:03:00,000 --> 00:03:04,760
After we get done upgrading our rolling server, we're going to read a blog by Richard Brown,

65
00:03:04,760 --> 00:03:13,880
the former OpenSUSE Chairman, who has a really deep take on the fundamental way we maintain

66
00:03:13,880 --> 00:03:21,080
and distribute software in the Linux community, and he's advocating for micro rolling servers.

67
00:03:21,080 --> 00:03:24,800
We'll tell you about that and what we think about that idea.

68
00:03:24,800 --> 00:03:30,920
Plus, we've got some software towards the end of the show that is fundamentally designed

69
00:03:30,920 --> 00:03:35,480
to help you recover from major system issues like a bad update.

70
00:03:35,480 --> 00:03:36,780
It's called Timeshift.

71
00:03:36,780 --> 00:03:38,560
It's a beloved piece of software on Linux Mint.

72
00:03:38,560 --> 00:03:41,000
We discovered it during our Linux Mint review.

73
00:03:41,000 --> 00:03:44,600
Now we've extracted it from Linux Mint, because you can put it on any distro, and we're going

74
00:03:44,600 --> 00:03:46,680
to focus just on that recovery method.

75
00:03:46,680 --> 00:03:50,480
Plus, we've got feedback and pics, but right now we're going to check in on that Archbox.

76
00:03:50,480 --> 00:03:52,680
Okay, how are we doing, Wes?

77
00:03:52,680 --> 00:03:53,760
Downloads going?

78
00:03:53,760 --> 00:03:54,760
Downloads going.

79
00:03:54,760 --> 00:03:57,360
It's always a little nerve-wracking when you see the step, you're getting rid of all your

80
00:03:57,360 --> 00:04:00,800
old DKMS modules, and you just have to hope they come back.

81
00:04:00,800 --> 00:04:06,520
All right, Wes, well, we'll check back in on that in just a little bit.

82
00:04:06,520 --> 00:04:12,360
In the meantime, let's talk about something from the no-crap department in the news.

83
00:04:12,360 --> 00:04:18,000
Google is publicly shaming Samsung for making unnecessary changes to Linux kernel code.

84
00:04:18,000 --> 00:04:20,040
Now, how about this one?

85
00:04:20,040 --> 00:04:23,360
This is coming from Google's Project Zero department.

86
00:04:23,360 --> 00:04:28,480
They write that Samsung is creating a more vulnerable Android ecosystem by adding its

87
00:04:28,480 --> 00:04:33,920
own downstream custom drivers for direct hardware access to Android's Linux kernel.

88
00:04:33,920 --> 00:04:36,000
Yeah, this is really no good.

89
00:04:36,000 --> 00:04:40,680
Notice that the Linux kernel has, as they put it, a few sharp edges, and these changes

90
00:04:40,680 --> 00:04:44,160
that are being implemented by Samsung and other vendors, they're not being reviewed

91
00:04:44,160 --> 00:04:48,400
at all by upstream kernel developers, so that means no one outside of that organization

92
00:04:48,400 --> 00:04:49,960
is checking them.

93
00:04:49,960 --> 00:04:53,960
The researchers actually found a similar mistake in the Android kernel of the Galaxy A50, and

94
00:04:53,960 --> 00:04:57,920
that unreviewed custom driver added security bugs related to memory corruption, which that's

95
00:04:57,920 --> 00:04:58,920
no good.

96
00:04:58,920 --> 00:04:59,920
No.

97
00:04:59,920 --> 00:05:03,240
Can we just sit here and just acknowledge the obvious?

98
00:05:03,240 --> 00:05:07,120
It is absolutely no surprise that when a vendor is adding their own patches that is not being

99
00:05:07,120 --> 00:05:10,960
peer reviewed by the rest of the community, that there is vulnerabilities in there that

100
00:05:10,960 --> 00:05:12,200
they did not catch.

101
00:05:12,200 --> 00:05:19,160
It seems obvious on its face, and that somebody in Samsung's position clearly, someone in

102
00:05:19,160 --> 00:05:24,560
that organization must have at least acknowledged the risk that they were assuming by taking

103
00:05:24,560 --> 00:05:25,560
this action.

104
00:05:25,560 --> 00:05:30,000
And as an organization, they must have chosen to either ignore that individual or actively

105
00:05:30,000 --> 00:05:31,000
ignore the risk.

106
00:05:31,000 --> 00:05:34,880
It does get a little more complicated, I guess some of these are really mitigations or intended

107
00:05:34,880 --> 00:05:37,240
mitigations for other security issues.

108
00:05:37,240 --> 00:05:41,000
In this case, the bug affected the company's process authenticator security subsystem.

109
00:05:41,000 --> 00:05:42,000
Oh.

110
00:05:42,000 --> 00:05:46,960
Yeah, they describe it as a moderate security issue, but from the Google engineers at Project

111
00:05:46,960 --> 00:05:50,800
Zero perspective, a lot of these things, they're just not necessary, and so rather than being

112
00:05:50,800 --> 00:05:53,560
a mitigation, they just introduce more attack surface.

113
00:05:53,560 --> 00:05:57,540
Not only are they not necessary, because there are some facilities in Android that enable

114
00:05:57,540 --> 00:06:03,200
some of this same exact functionality, but at the end of the day, some of these are enabling

115
00:06:03,200 --> 00:06:04,760
arbitrary code execution.

116
00:06:04,760 --> 00:06:08,200
Fundamentally, they're enabling arbitrary code execution.

117
00:06:08,200 --> 00:06:13,280
And that's even on Android 10 devices, which is just such a shame.

118
00:06:13,280 --> 00:06:16,080
You think you're getting yourself a secure device by getting the latest and greatest

119
00:06:16,080 --> 00:06:20,360
version of Android, and they've bolted on these custom fixes so that way they can add

120
00:06:20,360 --> 00:06:21,360
value.

121
00:06:21,360 --> 00:06:22,360
Yeah, it is a shame.

122
00:06:22,360 --> 00:06:23,360
I'm not having it.

123
00:06:23,360 --> 00:06:27,400
And Google's been doing a lot of good engineering effort to make Android more secure.

124
00:06:27,400 --> 00:06:28,440
Why throw that away?

125
00:06:28,440 --> 00:06:30,320
It seems so obvious.

126
00:06:30,320 --> 00:06:34,360
That's why I find it frustrating that it still continues to happen.

127
00:06:34,360 --> 00:06:37,200
I understand that there are other options out there.

128
00:06:37,200 --> 00:06:41,280
This doesn't condemn all Android devices, but Samsung is such an important player in

129
00:06:41,280 --> 00:06:42,280
this space.

130
00:06:42,280 --> 00:06:45,240
You'd really rather see it that way.

131
00:06:45,240 --> 00:06:46,240
I know it's a big organization.

132
00:06:46,240 --> 00:06:49,920
They have many departments, but you'd think that at least to have some experience knowing

133
00:06:49,920 --> 00:06:52,400
you kind of work upstream with the kernel community.

134
00:06:52,400 --> 00:06:53,400
That's just what you should do.

135
00:06:53,400 --> 00:06:58,760
It's also kind of awkward that their partner, Google, is calling them out publicly.

136
00:06:58,760 --> 00:07:00,880
It's sort of weird, Wes.

137
00:07:00,880 --> 00:07:01,880
You know what I mean?

138
00:07:01,880 --> 00:07:05,580
All right, Wes, your break is now over.

139
00:07:05,580 --> 00:07:07,840
Let's check in on that Archbox.

140
00:07:07,840 --> 00:07:08,840
Upgrade complete.

141
00:07:08,840 --> 00:07:11,240
I mean, I don't see any errors.

142
00:07:11,240 --> 00:07:13,160
You ready for the reboot?

143
00:07:13,160 --> 00:07:14,160
Let's do it.

144
00:07:14,160 --> 00:07:16,480
There's only one way to find out what these things are.

145
00:07:16,480 --> 00:07:18,520
All right.

146
00:07:18,520 --> 00:07:19,520
It reboots so fast.

147
00:07:19,520 --> 00:07:21,320
It almost makes me feel nervous.

148
00:07:21,320 --> 00:07:23,360
It's gone.

149
00:07:23,360 --> 00:07:25,840
And then it takes so long to get through the bios.

150
00:07:25,840 --> 00:07:30,360
Do you think that maybe you should have installed time shift first?

151
00:07:30,360 --> 00:07:32,640
We do have a series of snapshots on there.

152
00:07:32,640 --> 00:07:36,000
Yes, and I did see it taking those snapshots, so that's good.

153
00:07:36,000 --> 00:07:40,720
And I'll remind everybody that our philosophy with this rolling Archbox has truly been keep

154
00:07:40,720 --> 00:07:46,240
that base install of Arch absolutely as thin and lightweight and minimal as possible.

155
00:07:46,240 --> 00:07:51,720
That thing's really designed to do one thing, mount ZFS storage and run containers.

156
00:07:51,720 --> 00:07:52,720
That's our philosophy with this.

157
00:07:52,720 --> 00:07:59,600
So we're hoping that this ultra minimal approach to an Arch deployment is a safer bet than

158
00:07:59,600 --> 00:08:02,480
something that's really built up.

159
00:08:02,480 --> 00:08:03,480
We'll see.

160
00:08:03,480 --> 00:08:06,700
We're going to find out because at the end of the day, you're still updating fundamental

161
00:08:06,700 --> 00:08:07,700
packages.

162
00:08:07,700 --> 00:08:08,700
Right.

163
00:08:08,700 --> 00:08:10,880
There's a lot of change and we do have to upgrade more often.

164
00:08:10,880 --> 00:08:14,520
But the flip side of that is I feel like I understand the system a little bit better.

165
00:08:14,520 --> 00:08:15,520
That's true.

166
00:08:15,520 --> 00:08:18,160
I think you and I both stay more current on what that thing's doing.

167
00:08:18,160 --> 00:08:24,560
Well, let's let's shift gears into Richard Brown's post, which was titled regular release

168
00:08:24,560 --> 00:08:28,040
distributions are wrong.

169
00:08:28,040 --> 00:08:31,700
We're going to pull a few bits from this because it's pretty thought provoking and we'll link

170
00:08:31,700 --> 00:08:33,100
you to read the rest.

171
00:08:33,100 --> 00:08:36,060
As we record right now, I think the site might be having some troubles.

172
00:08:36,060 --> 00:08:40,320
So we'll try to include both a link to the source site and maybe an archive.org version.

173
00:08:40,320 --> 00:08:41,320
That's what we had to use.

174
00:08:41,320 --> 00:08:46,320
When you want to start with this one, Wes, you think maybe there's so much to including

175
00:08:46,320 --> 00:08:47,800
his setup here.

176
00:08:47,800 --> 00:08:51,160
What do you say we start with his bit in here about regular and LTS releases and how they

177
00:08:51,160 --> 00:08:52,520
mean well?

178
00:08:52,520 --> 00:08:56,260
And this is, I think, a point that we could discuss as a group here.

179
00:08:56,260 --> 00:09:00,460
He writes, the open source world is made up of thousands, if not millions of discrete

180
00:09:00,460 --> 00:09:03,420
free software and open source projects.

181
00:09:03,420 --> 00:09:08,600
And Linux distributions exist to take all of that often chaotic, ever evolving software

182
00:09:08,600 --> 00:09:13,240
and condense it into a single consumable format that is then put into very real world work

183
00:09:13,240 --> 00:09:14,840
by its users.

184
00:09:14,840 --> 00:09:19,120
The traditional mindset for distribution builders is that the regular release gives a nice,

185
00:09:19,120 --> 00:09:23,780
predictable, planable schedule in which a team can carefully select appropriate software

186
00:09:23,780 --> 00:09:26,240
from various upstream projects.

187
00:09:26,240 --> 00:09:31,160
The maintenance often comes in the form of making minimal changes, seeking only to address

188
00:09:31,160 --> 00:09:36,520
specific security issues or customer requests, taking great care not to break the systems

189
00:09:36,520 --> 00:09:37,960
that are currently in use.

190
00:09:37,960 --> 00:09:38,960
Right.

191
00:09:38,960 --> 00:09:41,640
So this is really an example of a classic LTS system.

192
00:09:41,640 --> 00:09:43,840
And often, I mean, that can be appreciated.

193
00:09:43,840 --> 00:09:47,080
You don't always want the rug pulled out from underneath you and having to adapt to constant

194
00:09:47,080 --> 00:09:50,200
changes, especially if it's software that you're not super familiar with, or you didn't

195
00:09:50,200 --> 00:09:51,720
really need the new features.

196
00:09:51,720 --> 00:09:52,720
That wasn't your concern.

197
00:09:52,720 --> 00:09:54,360
You just wanted the software to keep working.

198
00:09:54,360 --> 00:09:56,560
Yeah, sometimes it's required by a commercial vendor.

199
00:09:56,560 --> 00:09:57,560
Yeah.

200
00:09:57,560 --> 00:10:00,580
And you want a reliable service, especially for something like a server.

201
00:10:00,580 --> 00:10:02,720
But it is a little more complicated than that.

202
00:10:02,720 --> 00:10:06,300
Because I mean, especially here on Unplugged, we want the new stuff, you know, we're always

203
00:10:06,300 --> 00:10:07,920
talking about the shiny new features.

204
00:10:07,920 --> 00:10:12,000
And so the downside of an LTS often is that you don't have that or you have to do some

205
00:10:12,000 --> 00:10:16,120
really, really terrible workaround or build stuff from source to get it extra.

206
00:10:16,120 --> 00:10:17,840
And that doesn't always work.

207
00:10:17,840 --> 00:10:22,640
When we've talked about rolling releases versus traditional, we've often identified that there

208
00:10:22,640 --> 00:10:27,020
is a type of user that wants access to current software, either to stay current with their

209
00:10:27,020 --> 00:10:32,280
peers or to stay current with somebody they're working with in industry or because they like

210
00:10:32,280 --> 00:10:33,280
to follow software.

211
00:10:33,280 --> 00:10:36,040
Maybe a tool you need for your work, and it's important that you get the new features as

212
00:10:36,040 --> 00:10:37,240
quickly as possible.

213
00:10:37,240 --> 00:10:38,240
Yeah.

214
00:10:38,240 --> 00:10:42,280
And that's really the nature of what we consider change in a Linux distribution that Richard

215
00:10:42,280 --> 00:10:44,880
Brown is calling into question here.

216
00:10:44,880 --> 00:10:47,800
He continues, is this change too risky?

217
00:10:47,800 --> 00:10:48,800
It's a common question.

218
00:10:48,800 --> 00:10:53,380
And quite often, highly desired features take years to deliver in regular releases.

219
00:10:53,380 --> 00:10:55,640
Because the answer is yes.

220
00:10:55,640 --> 00:11:00,160
This often means avoiding updating software to entirely new versions, but instead, opting

221
00:11:00,160 --> 00:11:07,200
to backport the smallest necessary amounts of code and merging them with much often older

222
00:11:07,200 --> 00:11:10,440
versions already in the regular release.

223
00:11:10,440 --> 00:11:15,680
We usually call these things patches, updates, maintenance, updates, security, updates.

224
00:11:15,680 --> 00:11:18,480
Richard suggests, though, that we're really avoiding referring to them what they what

225
00:11:18,480 --> 00:11:19,480
they really are.

226
00:11:19,480 --> 00:11:20,480
Freaking software.

227
00:11:20,480 --> 00:11:24,240
Okay, so weird, unholy hybrid of things that were never meant to be.

228
00:11:24,240 --> 00:11:26,860
Yeah, hybrid software, you could would be a little more charitable.

229
00:11:26,860 --> 00:11:30,040
But what it is, he says, no matter how skilled the engineers are, that are that are doing

230
00:11:30,040 --> 00:11:34,920
the work, no matter how great the processes or testing are around their backporting, fundamentally,

231
00:11:34,920 --> 00:11:41,800
the result is a hybrid mixed together combination of old and new software, which was never originally

232
00:11:41,800 --> 00:11:43,880
intended to work together.

233
00:11:43,880 --> 00:11:49,560
In the process of trying to avoid risk, backports instead introduce entirely new vectors for

234
00:11:49,560 --> 00:11:51,200
bugs to appear.

235
00:11:51,200 --> 00:11:54,240
Okay, let's sit with this for a second, guys.

236
00:11:54,240 --> 00:11:59,640
He's saying essentially that when you have a regular stable release, and you start backporting

237
00:11:59,640 --> 00:12:04,680
fixes, you may be solving one security issue, but you could be opening up a whole series

238
00:12:04,680 --> 00:12:05,680
of bugs.

239
00:12:05,680 --> 00:12:08,840
And I'm no software developer, but it does make sense that if you're taking two bits

240
00:12:08,840 --> 00:12:14,740
of code that are very close together, but not intended to work together, it could create

241
00:12:14,740 --> 00:12:16,160
other possible issues.

242
00:12:16,160 --> 00:12:17,840
It certainly depends on the specifics, right?

243
00:12:17,840 --> 00:12:21,940
But you can imagine simple changes that are just change the default config option or something.

244
00:12:21,940 --> 00:12:25,800
But depending on how how far the software has progressed, you're basically having a

245
00:12:25,800 --> 00:12:27,560
totally separate fork.

246
00:12:27,560 --> 00:12:31,740
And to make certain security fixes, it might mean significant re architecture or touching

247
00:12:31,740 --> 00:12:35,840
a large swath of the code base, because it's changed, and you can't just apply the fix

248
00:12:35,840 --> 00:12:37,800
that gets applied to the head of the branch, right?

249
00:12:37,800 --> 00:12:38,800
Right.

250
00:12:38,800 --> 00:12:43,080
And I think a lot of times we'll charitably call these a regression, always a regression.

251
00:12:43,080 --> 00:12:46,800
And we continue to do it as a as a model of delivering software.

252
00:12:46,800 --> 00:12:48,760
It's not just Linux distributions.

253
00:12:48,760 --> 00:12:54,000
For example, you have Firefox 73, that came out last week, and version 68 DSR, or whatever

254
00:12:54,000 --> 00:12:55,160
it was also came out.

255
00:12:55,160 --> 00:12:58,820
Well, clearly, they're taking some bug fixes and security issues, and they're backporting

256
00:12:58,820 --> 00:13:02,920
it from the current version of Firefox to that old branch.

257
00:13:02,920 --> 00:13:06,320
And it's so common that we don't even talk about this process anymore, because it's just

258
00:13:06,320 --> 00:13:07,320
how you do it.

259
00:13:07,320 --> 00:13:08,320
It's just normal.

260
00:13:08,320 --> 00:13:09,320
Yeah.

261
00:13:09,320 --> 00:13:11,700
But he's kind of calling that entire thing into question.

262
00:13:11,700 --> 00:13:17,400
And I think if you narrow the scope, which he is here to just servers, and how server

263
00:13:17,400 --> 00:13:23,280
software and open source software is distributed, his argument starts to make sense.

264
00:13:23,280 --> 00:13:26,960
When you consider and he writes, the more people involved in working on something, the

265
00:13:26,960 --> 00:13:29,640
more eyeballs looking at the code, the better.

266
00:13:29,640 --> 00:13:31,120
That's a fundamental truth.

267
00:13:31,120 --> 00:13:36,560
And yet, when you think about it, it also means you have handfuls of people contributing

268
00:13:36,560 --> 00:13:40,920
software at different paces, at different schedules, updating all different aspects

269
00:13:40,920 --> 00:13:49,520
of a system at all different interests, commitments, timelines, motivations, etc.

270
00:13:49,520 --> 00:13:52,480
And it's it's a massive spectrum.

271
00:13:52,480 --> 00:13:57,900
And perhaps in this reality, when software is developed in this way, we're kind of fooling

272
00:13:57,900 --> 00:13:59,440
ourselves a little bit here.

273
00:13:59,440 --> 00:14:03,320
And that if we could build a system where we could continue to just stay current with

274
00:14:03,320 --> 00:14:10,480
the latest stuff, like all like the way Linus considers bug, security issues, bug fixes,

275
00:14:10,480 --> 00:14:12,280
just everything's a bug fix.

276
00:14:12,280 --> 00:14:13,280
Everything's a fix.

277
00:14:13,280 --> 00:14:16,720
And we have seen this this attitude more prevalent on all kinds of systems, right?

278
00:14:16,720 --> 00:14:20,320
I mean, with some, some would say some a lot of the DevOps philosophy.

279
00:14:20,320 --> 00:14:23,080
And if you think about the flip side, have you ever gone, you know, you waited a couple

280
00:14:23,080 --> 00:14:26,200
LTS is maybe I mean, I was personally involved with 1204 to 1604.

281
00:14:26,200 --> 00:14:29,400
That was part of the system D change.

282
00:14:29,400 --> 00:14:30,400
It was a nightmare.

283
00:14:30,400 --> 00:14:33,380
I mean, there were just so many changes to the system.

284
00:14:33,380 --> 00:14:36,920
And you've got to imagine in some sense, if developers have been given a little more time

285
00:14:36,920 --> 00:14:41,720
to get used to those, adapt during the process, in the end, it might be smoother.

286
00:14:41,720 --> 00:14:45,280
My wife's clinics workstation is on 1604.

287
00:14:45,280 --> 00:14:48,580
And a lot of the repos don't work anymore.

288
00:14:48,580 --> 00:14:50,100
So the updates are failing.

289
00:14:50,100 --> 00:14:53,720
And I guess it doesn't that version doesn't auto clean the boot partition.

290
00:14:53,720 --> 00:14:54,720
I thought it did.

291
00:14:54,720 --> 00:14:56,160
But her boot partition filled up again.

292
00:14:56,160 --> 00:14:58,320
So then it stopped updating for a minute.

293
00:14:58,320 --> 00:15:00,160
It's really getting decrepit.

294
00:15:00,160 --> 00:15:02,720
And the software on that thing is it's just still running unity seven, right?

295
00:15:02,720 --> 00:15:05,920
I mean, it's really feeling old.

296
00:15:05,920 --> 00:15:07,180
But it works for her.

297
00:15:07,180 --> 00:15:09,840
But it's clear that the rest of the software world has moved on.

298
00:15:09,840 --> 00:15:13,760
Drew, since you're our special guest, I wanted to kind of get your take on this from your

299
00:15:13,760 --> 00:15:16,120
sys admin days.

300
00:15:16,120 --> 00:15:22,040
Obviously the rolling argument falls down when you start talking about server deployments.

301
00:15:22,040 --> 00:15:27,400
But Richard goes on to make the argument here that, well, you solve that by creating micro

302
00:15:27,400 --> 00:15:31,720
server OSs that just do one thing, much like our Archbox.

303
00:15:31,720 --> 00:15:33,400
He's got a point.

304
00:15:33,400 --> 00:15:39,240
But I do think the argument does fall down quite a bit here in 2020.

305
00:15:39,240 --> 00:15:44,120
Three years ago, I think this would have been a much stronger argument.

306
00:15:44,120 --> 00:15:51,920
But nowadays, with the prevalence of containers and snaps and flat packs and app images, I

307
00:15:51,920 --> 00:15:56,120
am less inclined to go the way he's going.

308
00:15:56,120 --> 00:15:59,100
I was a rolling user for a long, long time.

309
00:15:59,100 --> 00:16:05,360
But with the advent of, you could almost say containerized applications and containers

310
00:16:05,360 --> 00:16:12,080
themselves, I don't see this as something that's strictly necessary anymore, especially

311
00:16:12,080 --> 00:16:13,960
in server software.

312
00:16:13,960 --> 00:16:19,600
How many people are deploying things on bare metal anymore?

313
00:16:19,600 --> 00:16:25,240
Just about everybody is using Kubernetes and Docker, and increasingly, even enterprise

314
00:16:25,240 --> 00:16:28,200
level stuff is moving that direction.

315
00:16:28,200 --> 00:16:35,900
So to me, the ability to have a very stable base that's been quality assured by the team

316
00:16:35,900 --> 00:16:42,200
who put it together, and then stack software on top of that, that is rolling, that's based

317
00:16:42,200 --> 00:16:44,280
in a container.

318
00:16:44,280 --> 00:16:49,920
Why do I need the base system to be rolling at this point?

319
00:16:49,920 --> 00:16:52,120
You flip the argument around is what you've done here.

320
00:16:52,120 --> 00:16:53,120
Yeah, exactly.

321
00:16:53,120 --> 00:16:58,200
It's just not something that I buy anymore.

322
00:16:58,200 --> 00:17:04,760
I would rather have in production, a system that I know is dependable and has a solid

323
00:17:04,760 --> 00:17:12,240
team doing the security patches like Ubuntu or like Red Hat, and is putting together a

324
00:17:12,240 --> 00:17:21,280
product that I know I can rely on, and gets really good, tested, quality assured updates.

325
00:17:21,280 --> 00:17:27,800
And I don't feel like I get that level of quality assurance testing, whatever you want

326
00:17:27,800 --> 00:17:31,040
to call it, in a rolling distro.

327
00:17:31,040 --> 00:17:38,000
It just doesn't feel rock solid and bulletproof like some of these others do.

328
00:17:38,000 --> 00:17:43,320
I think to buy his argument, you have to accept that the distributions are not providing a

329
00:17:43,320 --> 00:17:49,220
ton of value, that they're mostly providing organizational and smoothing of rough edges.

330
00:17:49,220 --> 00:17:52,880
And then when they backport, they're kind of slamming the software together.

331
00:17:52,880 --> 00:17:55,360
That's sort of what he's implying.

332
00:17:55,360 --> 00:18:00,080
And he may be in a better position than I, having been the OpenSUSE chairman and being

333
00:18:00,080 --> 00:18:04,680
involved with OpenSUSE forever, he may know better than me.

334
00:18:04,680 --> 00:18:08,420
But I feel like it's a little uncharitable to distributions, I feel like that's sort

335
00:18:08,420 --> 00:18:11,600
of underselling what they do.

336
00:18:11,600 --> 00:18:15,600
But I think I might agree with his fundamental argument.

337
00:18:15,600 --> 00:18:18,440
I might see it the opposite way Drew does.

338
00:18:18,440 --> 00:18:19,440
What about you, Wes?

339
00:18:19,440 --> 00:18:20,440
It is complicated.

340
00:18:20,440 --> 00:18:25,440
A little more data, I think, would be useful because there's a lot of philosophy in this,

341
00:18:25,440 --> 00:18:29,040
and rightfully so, and well-made questions and arguments.

342
00:18:29,040 --> 00:18:32,800
But do we see that many problems of regressions in patches, security patches?

343
00:18:32,800 --> 00:18:37,400
Is this burden of maintaining these really that big of an issue?

344
00:18:37,400 --> 00:18:42,880
It seems like, at least from Drew and many other admins that I've talked to, LTS is appreciated

345
00:18:42,880 --> 00:18:45,720
and they have security compliance in play.

346
00:18:45,720 --> 00:18:50,200
If that was a major problem, then they would probably consider moving to a rolling distribution,

347
00:18:50,200 --> 00:18:51,200
right?

348
00:18:51,200 --> 00:18:54,480
Okay, so there's a bit of philosophy in here, like you just said.

349
00:18:54,480 --> 00:18:58,500
And I think we should touch on that for a second.

350
00:18:58,500 --> 00:19:01,880
And she's put on your philosophy hat for this question.

351
00:19:01,880 --> 00:19:07,160
Imagine if all of the open source developer time that is used to backport to old releases

352
00:19:07,160 --> 00:19:12,020
was spent working on new stuff, like we took X amount of time and dedicated it to new stuff.

353
00:19:12,020 --> 00:19:13,020
That is part of his argument.

354
00:19:13,020 --> 00:19:18,040
He writes, a small handful of committed volunteers and those that are employees of companies

355
00:19:18,040 --> 00:19:20,200
selling commercial regular releases.

356
00:19:20,200 --> 00:19:25,440
These are limited resources that are often siloed with only time and resources to work

357
00:19:25,440 --> 00:19:31,100
on very specific distributions with their specific backports and patches that are often

358
00:19:31,100 --> 00:19:34,380
hard to even be reused by other communities.

359
00:19:34,380 --> 00:19:36,900
I think he's got a fair point for better for worse.

360
00:19:36,900 --> 00:19:38,360
That is true.

361
00:19:38,360 --> 00:19:42,240
What if all of a sudden we had all that time back and it was all just new stuff?

362
00:19:42,240 --> 00:19:45,680
I feel like we probably would be further along in some areas.

363
00:19:45,680 --> 00:19:51,720
Yeah, I mean, I think that we would be further along in some areas if we were progressive

364
00:19:51,720 --> 00:19:58,520
about it and we continued to take that time from doing all these backports and ensuring

365
00:19:58,520 --> 00:20:04,760
that these LTSs were secure and moving forward with software would probably fast track us

366
00:20:04,760 --> 00:20:12,220
to create, just evolve the software in itself and create new and interesting software.

367
00:20:12,220 --> 00:20:19,520
But in that same vein, I think that you could say that that also introduces bugs and potential

368
00:20:19,520 --> 00:20:21,020
security vulnerabilities.

369
00:20:21,020 --> 00:20:24,820
So it's damned if you do, damned if you don't, right?

370
00:20:24,820 --> 00:20:31,320
So I kind of align with Drew and what he says and with an LTS, I mean, it is long term support

371
00:20:31,320 --> 00:20:34,160
and you expect that.

372
00:20:34,160 --> 00:20:39,320
But if you had this additional time and you could use that time to further the software

373
00:20:39,320 --> 00:20:44,500
along and create new and interesting software, I mean, you have that opportunity as well.

374
00:20:44,500 --> 00:20:53,240
So it's really, this whole article is really more of a philosophical article in and of

375
00:20:53,240 --> 00:20:58,420
itself, I believe, and is really an opinionated piece.

376
00:20:58,420 --> 00:21:03,580
I do agree with a lot of what he says, but there's part of me that thinks that there

377
00:21:03,580 --> 00:21:10,180
are LTSs for a reason and between these LTS releases, that gives your sysadmin and your

378
00:21:10,180 --> 00:21:13,540
developers time to come up to speed with the latest technology.

379
00:21:13,540 --> 00:21:18,740
So when do you have a lull so that your devs can get up to speed with this new technology

380
00:21:18,740 --> 00:21:20,780
if you're creating the technology so fast?

381
00:21:20,780 --> 00:21:21,940
Okay, so that's a great point.

382
00:21:21,940 --> 00:21:25,700
They got to have an opportunity to learn, which, okay, all right.

383
00:21:25,700 --> 00:21:29,320
But in some ways, Wes, couldn't you argue that perhaps rolling at least at some level

384
00:21:29,320 --> 00:21:30,700
could be easier to understand?

385
00:21:30,700 --> 00:21:31,700
Right.

386
00:21:31,700 --> 00:21:32,700
It's all about cadence, right?

387
00:21:32,700 --> 00:21:36,420
I mean, a rolling is just a lot of little tiny releases.

388
00:21:36,420 --> 00:21:38,120
And so you can learn these changes.

389
00:21:38,120 --> 00:21:43,140
There's less to learn when you have constant changes instead of one big heap of changes.

390
00:21:43,140 --> 00:21:44,140
Right.

391
00:21:44,140 --> 00:21:47,540
You're maybe updating a dozen packages versus a thousand packages.

392
00:21:47,540 --> 00:21:50,780
And there's maybe three changes for each package versus 200 changes.

393
00:21:50,780 --> 00:21:51,780
Right.

394
00:21:51,780 --> 00:21:53,860
And I think a bit from maybe a development angle as well.

395
00:21:53,860 --> 00:21:56,260
And that's just, you know, minimizes your pain as long as you're doing it sometime.

396
00:21:56,260 --> 00:21:57,540
And you might not update every day.

397
00:21:57,540 --> 00:22:01,260
It might be that you update every week or every two weeks so that you're aware of those

398
00:22:01,260 --> 00:22:02,260
changes.

399
00:22:02,260 --> 00:22:05,580
But having a smaller change set to go diff and look back through when you're trying to

400
00:22:05,580 --> 00:22:08,720
debug something or figure out why something won't compile anymore.

401
00:22:08,720 --> 00:22:09,720
That's really nice.

402
00:22:09,720 --> 00:22:10,720
Hmm.

403
00:22:10,720 --> 00:22:13,100
So where does this leave us really?

404
00:22:13,100 --> 00:22:15,700
I think there's one way to find out.

405
00:22:15,700 --> 00:22:18,660
We could check on how our server is doing and that could be the ultimate answer.

406
00:22:18,660 --> 00:22:20,820
I was hoping you weren't going to say that.

407
00:22:20,820 --> 00:22:21,820
Has it back up yet?

408
00:22:21,820 --> 00:22:22,820
All right.

409
00:22:22,820 --> 00:22:23,820
Well, it rebooted.

410
00:22:23,820 --> 00:22:24,820
No problem.

411
00:22:24,820 --> 00:22:25,820
It didn't load the ZFS module.

412
00:22:25,820 --> 00:22:26,820
You're kidding me.

413
00:22:26,820 --> 00:22:27,820
I know.

414
00:22:27,820 --> 00:22:28,820
No.

415
00:22:28,820 --> 00:22:29,820
No.

416
00:22:29,820 --> 00:22:33,300
So no containers were running, no ZFS file systems mounted.

417
00:22:33,300 --> 00:22:36,580
I'm currently rebuilding the DKMS modules.

418
00:22:36,580 --> 00:22:38,540
We'll see if that just, you know.

419
00:22:38,540 --> 00:22:40,160
Oh, that is sometimes a thing.

420
00:22:40,160 --> 00:22:41,160
But usually not.

421
00:22:41,160 --> 00:22:42,160
We have not had that problem.

422
00:22:42,160 --> 00:22:43,160
It's working.

423
00:22:43,160 --> 00:22:44,160
Hmm.

424
00:22:44,160 --> 00:22:45,160
Hmm.

425
00:22:45,160 --> 00:22:47,300
Well, I think that proves it right there.

426
00:22:47,300 --> 00:22:50,460
I think Cheese and Drew are right.

427
00:22:50,460 --> 00:22:53,700
You guys got that one because, I mean, we'll see.

428
00:22:53,700 --> 00:22:55,580
It's probably not a big deal.

429
00:22:55,580 --> 00:23:00,420
I guess that's a fair part of the conversation is every now and then these things happen.

430
00:23:00,420 --> 00:23:06,420
I suppose if this was a real honest to legit revenue generating piece of equipment, we'd

431
00:23:06,420 --> 00:23:10,660
probably have the storage on like an iSCSI device.

432
00:23:10,660 --> 00:23:15,060
And it wouldn't be directly attached to this one host where we're using a ZFS kernel module

433
00:23:15,060 --> 00:23:16,060
to mount it.

434
00:23:16,060 --> 00:23:17,060
Right.

435
00:23:17,060 --> 00:23:19,780
You'd be on another host that's running the disk that has it mounted or we'd be iSCSIing

436
00:23:19,780 --> 00:23:21,700
it and mounting it that way over iSCSI.

437
00:23:21,700 --> 00:23:22,940
And there's also other things.

438
00:23:22,940 --> 00:23:27,260
I'm sure we could have detected this problem before we rebooted or adjusted some parameters

439
00:23:27,260 --> 00:23:28,260
to ensure that.

440
00:23:28,260 --> 00:23:29,900
However, good on us.

441
00:23:29,900 --> 00:23:32,980
We're going ButterFS on the root so that way at least the host system gets up and you can

442
00:23:32,980 --> 00:23:33,980
troubleshoot.

443
00:23:33,980 --> 00:23:34,980
Right.

444
00:23:34,980 --> 00:23:35,980
That's really been working very well.

445
00:23:35,980 --> 00:23:36,980
You were able to SSH in.

446
00:23:36,980 --> 00:23:37,980
Yeah, no problem.

447
00:23:37,980 --> 00:23:38,980
Came up rebooted normally.

448
00:23:38,980 --> 00:23:42,940
I think one of our belt and suspenders approach to arch, it really was, is get snapshots,

449
00:23:42,940 --> 00:23:46,340
which we're not going to bother with in this case because it's probably a pretty easy fix,

450
00:23:46,340 --> 00:23:50,220
but also give yourself a way to get in when the system doesn't work right.

451
00:23:50,220 --> 00:23:51,940
And the snapshots here do mitigate a lot.

452
00:23:51,940 --> 00:23:52,940
I mean, we're not going to use them.

453
00:23:52,940 --> 00:23:55,340
I'd rather just sort of roll forward in this case.

454
00:23:55,340 --> 00:23:59,260
But right, if we we wouldn't do this unless we had an allocated at least some kind of

455
00:23:59,260 --> 00:24:00,260
maintenance window.

456
00:24:00,260 --> 00:24:03,020
And with snapshots, it means, OK, it didn't work.

457
00:24:03,020 --> 00:24:04,020
Try it again later.

458
00:24:04,020 --> 00:24:05,020
Roll it back.

459
00:24:05,020 --> 00:24:07,020
And then it's you don't have to miss that window.

460
00:24:07,020 --> 00:24:10,660
We've done some offline, I mean, off air, I should say upgrades to it, too.

461
00:24:10,660 --> 00:24:13,580
So this we haven't only been upgrading it on the show.

462
00:24:13,580 --> 00:24:19,300
And so it's been probably a dozen times, maybe half a I mean, I know I've probably done a

463
00:24:19,300 --> 00:24:23,380
half a dozen times and you've probably done another handful of times and it hasn't had

464
00:24:23,380 --> 00:24:24,380
an issue.

465
00:24:24,380 --> 00:24:27,420
But I'm pretty glad that when we did, we got it on the show because this is how this is

466
00:24:27,420 --> 00:24:29,420
this is the real world.

467
00:24:29,420 --> 00:24:32,220
And these are the things you need when you hear why you don't why you shouldn't run arch

468
00:24:32,220 --> 00:24:33,220
on the server.

469
00:24:33,220 --> 00:24:36,220
It's like, well, if you don't want to deal with this, if you don't know how to reinstall

470
00:24:36,220 --> 00:24:38,900
a DKMS module, which is just a Pac-Man command.

471
00:24:38,900 --> 00:24:42,620
But, you know, if that if that goes over your head, then it's not the right OS for you.

472
00:24:42,620 --> 00:24:47,460
I didn't even read the arch blog before doing this, which I probably should have.

473
00:24:47,460 --> 00:24:51,180
Well, there was that whole I had a game show music countdown play.

474
00:24:51,180 --> 00:24:52,180
Yeah.

475
00:24:52,180 --> 00:24:56,420
Well, I mean, I think that this is the the perfect type of system to test this this idea

476
00:24:56,420 --> 00:25:02,180
on the right, because it's not like Equifax is database server or something, right?

477
00:25:02,180 --> 00:25:03,180
It's right.

478
00:25:03,180 --> 00:25:06,100
You know, this personal server that they were using some podcasts, right?

479
00:25:06,100 --> 00:25:09,540
And it might it might, you know, disrupt a little bit of a file storage thing.

480
00:25:09,540 --> 00:25:13,200
But you always have your ZFS pool that you can reattach to.

481
00:25:13,200 --> 00:25:17,320
So it's not like theoretically anything is really lost, right?

482
00:25:17,320 --> 00:25:22,460
Like you've got some containers you might have to rebuild and and you've got, you know,

483
00:25:22,460 --> 00:25:25,540
let's say if you change the host from arch to something else, you might have to rebuild

484
00:25:25,540 --> 00:25:28,220
those containers and reattach to your ZFS pool.

485
00:25:28,220 --> 00:25:32,540
But other than that, you still have a security net there that you don't have to worry about

486
00:25:32,540 --> 00:25:35,100
the system actually breaking and falling into pieces.

487
00:25:35,100 --> 00:25:40,780
So there is one aspect of this conversation that I think he nails before we completely

488
00:25:40,780 --> 00:25:41,900
move on.

489
00:25:41,900 --> 00:25:47,420
And that is treating the server a little bit different than we traditionally have with

490
00:25:47,420 --> 00:25:49,140
old school Linux.

491
00:25:49,140 --> 00:25:53,000
In old school Linux, you got these DVDs or CD-ROMs or whatever, and there was like six

492
00:25:53,000 --> 00:25:58,100
disks and you would do this whole install, it would be you install kinds of packages

493
00:25:58,100 --> 00:26:00,840
just in case you ever needed to install another kind of package.

494
00:26:00,840 --> 00:26:05,820
And it was assumed that you'd have all these different things in a distribution that was

495
00:26:05,820 --> 00:26:10,180
much larger than it actually needed to be if that was only doing one job and one job

496
00:26:10,180 --> 00:26:11,180
only.

497
00:26:11,180 --> 00:26:13,140
You made a big standalone multipurpose machine.

498
00:26:13,140 --> 00:26:14,140
Yes.

499
00:26:14,140 --> 00:26:18,300
And even if you installed just a mail server on it still had all this other stuff.

500
00:26:18,300 --> 00:26:19,460
That has shifted.

501
00:26:19,460 --> 00:26:25,060
And the idea of one server one function in the world of VMs and containers is very, very

502
00:26:25,060 --> 00:26:27,480
affordable and very attainable.

503
00:26:27,480 --> 00:26:32,360
And I do think that is the way to just really solid server systems in the future is one

504
00:26:32,360 --> 00:26:36,300
micro install instance that only has the bare minimum of what it needs to run a container

505
00:26:36,300 --> 00:26:37,300
or a VM.

506
00:26:37,300 --> 00:26:41,440
And in that VM, it's again, it's an absolute bare minimum install only needs what it has

507
00:26:41,440 --> 00:26:42,440
to have.

508
00:26:42,440 --> 00:26:46,140
And you're only maintaining that small set of packages.

509
00:26:46,140 --> 00:26:50,400
And that's why there's so much room for all these different flavors of Linux.

510
00:26:50,400 --> 00:26:54,940
From openSUSE, a micro OS to Alpine to the rel core stuff now.

511
00:26:54,940 --> 00:26:58,980
Yeah, there's even unikernels where the programming language, they don't even have a regular kernel.

512
00:26:58,980 --> 00:26:59,980
It's all just that.

513
00:26:59,980 --> 00:27:00,980
Yeah.

514
00:27:00,980 --> 00:27:02,460
And in the meantime, the rest of the world will just keep on using Ubuntu.

515
00:27:02,460 --> 00:27:09,940
Well, and he's also spot on about atomic style updating.

516
00:27:09,940 --> 00:27:14,300
He mentions micro OS, which is the openSUSE version.

517
00:27:14,300 --> 00:27:19,100
But the whole idea of transactional updates is fantastic.

518
00:27:19,100 --> 00:27:24,620
It's something that I've really taken a liking to not just in servers, but also on the desktop

519
00:27:24,620 --> 00:27:29,880
with things like silver blue, which I think could be the future of how we do a lot of

520
00:27:29,880 --> 00:27:34,120
things having an immutable base, which is read only.

521
00:27:34,120 --> 00:27:37,740
And then you can layer stuff on top, including containers.

522
00:27:37,740 --> 00:27:39,120
That's really what it's built for.

523
00:27:39,120 --> 00:27:45,420
And it really feels like the next generation of server computing, especially, maybe desktop,

524
00:27:45,420 --> 00:27:47,460
I don't know, I'm back and forth on that.

525
00:27:47,460 --> 00:27:55,020
But for servers, yeah, it's the ability to roll back without having to deal with things

526
00:27:55,020 --> 00:27:58,060
like snapshots because they're baked in.

527
00:27:58,060 --> 00:27:59,060
It's fantastic.

528
00:27:59,060 --> 00:28:00,060
I agree.

529
00:28:00,060 --> 00:28:02,460
That's why we're going to talk about time shift today.

530
00:28:02,460 --> 00:28:06,020
So that way, folks that are listening can implement this on their desktop or laptop

531
00:28:06,020 --> 00:28:10,100
or even your server in a way that's really straightforward, just using rsync.

532
00:28:10,100 --> 00:28:15,660
Or if you have butterfs, it uses native butterfs snapshots, because these snapshots are really

533
00:28:15,660 --> 00:28:16,820
great functionality.

534
00:28:16,820 --> 00:28:23,540
We decided to install it on our recording system here that has an awesome jack setup.

535
00:28:23,540 --> 00:28:25,320
It's a lot.

536
00:28:25,320 --> 00:28:32,540
But amazingly, we are able to expose all 32 inputs and outputs from our mixer to jack.

537
00:28:32,540 --> 00:28:38,340
And so we can wire the mixer in jack and then send it to Reaper for recording and pipe it

538
00:28:38,340 --> 00:28:43,180
out to our remote guests in the mumble room with virtual syncs and whatever you call it.

539
00:28:43,180 --> 00:28:44,180
It's just flexible.

540
00:28:44,180 --> 00:28:49,740
And it's awesome, however, you could see how an audio package could come along and break

541
00:28:49,740 --> 00:28:52,100
the whole thing and we would not be able to record.

542
00:28:52,100 --> 00:28:53,100
We're really dependent on it now.

543
00:28:53,100 --> 00:28:57,000
Yeah, there's like there's PPAs involved in a lot of specific configuration.

544
00:28:57,000 --> 00:28:58,280
It's delicate.

545
00:28:58,280 --> 00:29:03,140
So we thought, Jesus, this is a perfect candidate, perfect.

546
00:29:03,140 --> 00:29:08,220
So Wes, he laid his hands on the machine and he blessed it with time shift.

547
00:29:08,220 --> 00:29:11,140
And we're going to tell you how that went in just a moment.

548
00:29:11,140 --> 00:29:16,260
But first, just some quick housekeeping, just a few items of note.

549
00:29:16,260 --> 00:29:21,860
If you haven't had a chance, go check out Linux Headlines, linuxheadlines.show every

550
00:29:21,860 --> 00:29:23,980
weekday in three minutes or less.

551
00:29:23,980 --> 00:29:25,860
What's going on in the world of Linux?

552
00:29:25,860 --> 00:29:32,240
I do Mondays, Drew does Tuesdays, I do Wednesdays, Wes does Thursdays and then Drew's back to

553
00:29:32,240 --> 00:29:33,240
wrap us up on Fridays.

554
00:29:33,240 --> 00:29:37,500
So we just sort of shifted around so that way not one of us completely burns out.

555
00:29:37,500 --> 00:29:43,040
But what's really cool, behind the scenes, we have a dedicated staffer to doing research,

556
00:29:43,040 --> 00:29:45,380
to collecting stories, to verifying them.

557
00:29:45,380 --> 00:29:48,580
But we also bounce it around the team before it publishes.

558
00:29:48,580 --> 00:29:53,060
And then we do a peer review before we actually release the MP3 file.

559
00:29:53,060 --> 00:29:58,180
So in that three minutes, you are getting super tight, accurate, condensed information

560
00:29:58,180 --> 00:30:02,940
with the hype removed, with all of our different perspectives on it, regardless of who's hosting

561
00:30:02,940 --> 00:30:03,940
it.

562
00:30:03,940 --> 00:30:05,180
Really proud of that work.

563
00:30:05,180 --> 00:30:07,860
LinuxHeadlines.show, and of course, one went out today.

564
00:30:07,860 --> 00:30:10,900
It's a great way to just, when you're going down the road, why not just start out with

565
00:30:10,900 --> 00:30:13,740
a three minute show and then get into whatever you're going to listen to.

566
00:30:13,740 --> 00:30:16,380
That's really great.

567
00:30:16,380 --> 00:30:21,100
Also Jupiterbroadcasting.com slash Telegram, just going great.

568
00:30:21,100 --> 00:30:22,100
Yeah, come join the party.

569
00:30:22,100 --> 00:30:24,140
I think I owe the whole Telegram group a beer now.

570
00:30:24,140 --> 00:30:25,700
I'm not sure how we're all going to get in one place.

571
00:30:25,700 --> 00:30:27,140
I think I need to give them tacos.

572
00:30:27,140 --> 00:30:28,140
It's PBRs.

573
00:30:28,140 --> 00:30:29,380
It's going to be a good night though.

574
00:30:29,380 --> 00:30:30,820
Not going to be on PBRs.

575
00:30:30,820 --> 00:30:32,420
Don't work tacos in there.

576
00:30:32,420 --> 00:30:33,420
Everybody wants tacos now.

577
00:30:33,420 --> 00:30:34,580
We're not doing tacos again.

578
00:30:34,580 --> 00:30:36,020
At least that's on you.

579
00:30:36,020 --> 00:30:38,940
You want to bring the tacos, you're the taco guy.

580
00:30:38,940 --> 00:30:40,060
I'll be the PBR guy.

581
00:30:40,060 --> 00:30:41,060
You'll be the taco guy.

582
00:30:41,060 --> 00:30:42,060
Dude, this is sounding great actually.

583
00:30:42,060 --> 00:30:45,420
Now we just need a place.

584
00:30:45,420 --> 00:30:51,420
Also, if you haven't checked out my side thing, Chris Lastcast, me and Brent, we're launching

585
00:30:51,420 --> 00:30:52,420
an empire over there.

586
00:30:52,420 --> 00:30:55,660
No, actually, I just decided when we were talking about the burnout stuff to do a little

587
00:30:55,660 --> 00:31:00,100
creative outlet, and I've kind of been keeping it going.

588
00:31:00,100 --> 00:31:01,100
Brent talked me into it.

589
00:31:01,100 --> 00:31:04,580
I sat down and I did a thing about how I created myself a little note challenge.

590
00:31:04,580 --> 00:31:06,060
I got my notes right here.

591
00:31:06,060 --> 00:31:07,060
I'm sticking to it so far.

592
00:31:07,060 --> 00:31:08,460
You have a lovely notebook there.

593
00:31:08,460 --> 00:31:10,300
So Brent and I checked that out, chrislast.com.

594
00:31:10,300 --> 00:31:14,380
That just went up this morning as we record because we're doing this one a little early.

595
00:31:14,380 --> 00:31:19,620
Hopefully, things will be back to our regularly scheduled program next week, Tuesday at noon

596
00:31:19,620 --> 00:31:23,660
Pacific, but since I'm at jury duty, we don't really know.

597
00:31:23,660 --> 00:31:25,640
We don't really know until I just go.

598
00:31:25,640 --> 00:31:26,640
So I go tomorrow.

599
00:31:26,640 --> 00:31:30,220
If we're not live, we'll try to figure out another time.

600
00:31:30,220 --> 00:31:31,500
We'll do like a late night lup party.

601
00:31:31,500 --> 00:31:32,500
Oh, that could be fun.

602
00:31:32,500 --> 00:31:33,500
We'll do that.

603
00:31:33,500 --> 00:31:34,500
We'll come.

604
00:31:34,500 --> 00:31:35,500
We'll do some pizza.

605
00:31:35,500 --> 00:31:36,500
We'll watch a movie.

606
00:31:36,500 --> 00:31:37,500
We'll watch Revolution OS.

607
00:31:37,500 --> 00:31:38,500
We could really do this.

608
00:31:38,500 --> 00:31:39,500
Yeah, I'm down.

609
00:31:39,500 --> 00:31:42,500
We could grab some clips, watch Revolution OS, have some pizza, and then go record a

610
00:31:42,500 --> 00:31:43,500
lup.

611
00:31:43,500 --> 00:31:46,780
I mean, if you've got to do jury duty, you might as well chill out and make it fun.

612
00:31:46,780 --> 00:31:47,780
We'll figure out something.

613
00:31:47,780 --> 00:31:49,980
It might be kind of a weird one, but we'll figure it out.

614
00:31:49,980 --> 00:31:54,580
We won't leave you hanging, at least hopefully.

615
00:31:54,580 --> 00:31:58,780
Anyways, that is our housekeeping for today.

616
00:31:58,780 --> 00:32:00,100
Let's talk about time shift.

617
00:32:00,100 --> 00:32:02,020
Before we do, I've got an Arch update.

618
00:32:02,020 --> 00:32:07,740
Yeah, it turns out the latest kernel that we just downloaded, not yet supported by ZFS

619
00:32:07,740 --> 00:32:08,740
on Linux.

620
00:32:08,740 --> 00:32:15,100
There's another GPL only symbol change that has not yet been fixed.

621
00:32:15,100 --> 00:32:18,460
So revert, go back.

622
00:32:18,460 --> 00:32:19,460
Back in time.

623
00:32:19,460 --> 00:32:20,460
Very good.

624
00:32:20,460 --> 00:32:21,460
Very good.

625
00:32:21,460 --> 00:32:24,460
Well, that shouldn't be too hard of a fix.

626
00:32:24,460 --> 00:32:26,420
You think you'll have it done before the end of the show?

627
00:32:26,420 --> 00:32:27,420
Oh, yeah.

628
00:32:27,420 --> 00:32:28,420
You think so?

629
00:32:28,420 --> 00:32:29,420
I'm going to do it right now.

630
00:32:29,420 --> 00:32:30,420
Okay.

631
00:32:30,420 --> 00:32:31,420
I mean, that thing does take a while to reboot.

632
00:32:31,420 --> 00:32:36,300
So time shift is a Linux application that provides functionality similar to Windows

633
00:32:36,300 --> 00:32:40,120
Restore or maybe Time Machine on Mac OS.

634
00:32:40,120 --> 00:32:45,020
It protects your system by taking incremental snapshots of the file system at regular intervals.

635
00:32:45,020 --> 00:32:51,900
Now, these snapshots can be restored later to undo the changes, and we'll use rsync with

636
00:32:51,900 --> 00:32:55,980
hard links on a system that doesn't have butterfess.

637
00:32:55,980 --> 00:32:58,700
And the nice thing about those hard links is common files that are shared between the

638
00:32:58,700 --> 00:33:03,560
snapshots will just be hard linked, and then you don't have duplicates, and it saves space.

639
00:33:03,560 --> 00:33:07,740
Each snapshot is a full system backup that you can actually go browse with a file manager.

640
00:33:07,740 --> 00:33:09,960
But here's what's also really cool.

641
00:33:09,960 --> 00:33:16,100
In butterfess mode, snapshots are taken using built-in butterfess file system features,

642
00:33:16,100 --> 00:33:17,540
which is really cool.

643
00:33:17,540 --> 00:33:21,580
Now, I think the one thing that might surprise people is if I recall when we were setting

644
00:33:21,580 --> 00:33:24,700
this up, Wes, by default, it doesn't back up user data.

645
00:33:24,700 --> 00:33:27,500
Yeah, and that's actually intentional.

646
00:33:27,500 --> 00:33:30,020
It's designed to just try to keep the system safe.

647
00:33:30,020 --> 00:33:33,740
And so if you break something in your system, you don't also want to lose all the latest

648
00:33:33,740 --> 00:33:34,920
Excel files you were working on, right?

649
00:33:34,920 --> 00:33:37,860
You want those to stay, and so the idea is with time shift, you can just roll that right

650
00:33:37,860 --> 00:33:38,860
back.

651
00:33:38,860 --> 00:33:39,860
All those Excel files.

652
00:33:39,860 --> 00:33:40,860
That's your example?

653
00:33:40,860 --> 00:33:41,860
I don't know.

654
00:33:41,860 --> 00:33:46,260
I like your picture of the typical Mint user right now in your head.

655
00:33:46,260 --> 00:33:47,260
That's what that was.

656
00:33:47,260 --> 00:33:48,260
Yeah.

657
00:33:48,260 --> 00:33:49,260
Hey, spreadsheets.

658
00:33:49,260 --> 00:33:50,260
All right.

659
00:33:50,260 --> 00:33:51,260
Okay.

660
00:33:51,260 --> 00:33:54,740
Well, that actually makes a lot of sense because a lot of times you'll have maybe your most

661
00:33:54,740 --> 00:33:59,460
personal or important stuff in some public cloud storage with the permission set to public,

662
00:33:59,460 --> 00:34:03,140
or you'll have them in Dropbox with a single encryption, or you'll throw them on sync thing

663
00:34:03,140 --> 00:34:07,420
that isn't actually syncing because it's always breaking on you, and they won't actually be

664
00:34:07,420 --> 00:34:09,420
only in your home directory.

665
00:34:09,420 --> 00:34:12,000
Come on.

666
00:34:12,000 --> 00:34:13,180
That's how it goes, right?

667
00:34:13,180 --> 00:34:14,440
That's how it works.

668
00:34:14,440 --> 00:34:15,440
But you could add it.

669
00:34:15,440 --> 00:34:18,460
It's just a matter of going in the configuration and adding it to backup.

670
00:34:18,460 --> 00:34:19,460
Yeah, absolutely.

671
00:34:19,460 --> 00:34:20,460
So you could do it.

672
00:34:20,460 --> 00:34:21,460
We did not, though.

673
00:34:21,460 --> 00:34:23,060
We just had it focused on the system, and we wanted to...

674
00:34:23,060 --> 00:34:24,060
I did add a few.

675
00:34:24,060 --> 00:34:25,060
Oh, yeah.

676
00:34:25,060 --> 00:34:29,060
Well, I did add some of the files in that we don't ever really change, but just some

677
00:34:29,060 --> 00:34:31,620
like handy binaries that aren't stored in the usual system.

678
00:34:31,620 --> 00:34:32,620
Oh, yeah.

679
00:34:32,620 --> 00:34:33,620
Okay.

680
00:34:33,620 --> 00:34:36,060
And then, of course, we actually excluded the recordings themselves.

681
00:34:36,060 --> 00:34:37,060
Absolutely.

682
00:34:37,060 --> 00:34:38,680
We don't need to back those up into a snapshot.

683
00:34:38,680 --> 00:34:43,020
We just really want to restore the configuration state so we can record again.

684
00:34:43,020 --> 00:34:44,380
That's really the main thing.

685
00:34:44,380 --> 00:34:48,860
And because we have committed ourselves to keeping these systems fairly up to date, we

686
00:34:48,860 --> 00:34:53,620
don't do it like every day, but, you know, about once a month we upgrade all these boxes.

687
00:34:53,620 --> 00:34:58,260
And so we do want to have an escape hatch just in case something goes wrong.

688
00:34:58,260 --> 00:35:02,140
Snapshots can be restored by just either using the GUI, which is nice.

689
00:35:02,140 --> 00:35:04,020
It comes with a GTK GUI.

690
00:35:04,020 --> 00:35:07,620
Or you could boot into another live environment, and you can restore using a live environment

691
00:35:07,620 --> 00:35:08,900
too, as long as you can access it.

692
00:35:08,900 --> 00:35:10,340
Yeah, really mess things up.

693
00:35:10,340 --> 00:35:11,700
So I'm going to pull it up.

694
00:35:11,700 --> 00:35:13,060
Let's take a look at it right here.

695
00:35:13,060 --> 00:35:15,340
Yeah, it was very easy to get started with.

696
00:35:15,340 --> 00:35:16,340
I'm going to...

697
00:35:16,340 --> 00:35:21,420
And, of course, what really put us onto this was the people that were writing in when they

698
00:35:21,420 --> 00:35:25,900
were explaining why they use Mint talked about how Timeshift had saved their bacon a couple

699
00:35:25,900 --> 00:35:26,900
of times.

700
00:35:26,900 --> 00:35:30,020
And it's nice because when you go in here, you can look at individual snapshots.

701
00:35:30,020 --> 00:35:32,740
It has a big green badge saying that it's active.

702
00:35:32,740 --> 00:35:36,780
It gives you a big number on how much available storage you have and how many snapshots have

703
00:35:36,780 --> 00:35:37,780
occurred.

704
00:35:37,780 --> 00:35:40,340
All just clearly listed right here.

705
00:35:40,340 --> 00:35:42,140
And you didn't have to set anything up.

706
00:35:42,140 --> 00:35:43,700
That's just how it shows up.

707
00:35:43,700 --> 00:35:47,380
And it will automatically set up cron jobs for you to make sure it takes those snapshots

708
00:35:47,380 --> 00:35:48,380
on time.

709
00:35:48,380 --> 00:35:49,380
Yeah.

710
00:35:49,380 --> 00:35:53,180
So that was the thing is when people wrote in there, like, you really got to go use this

711
00:35:53,180 --> 00:35:55,380
because it really makes this simple.

712
00:35:55,380 --> 00:35:56,380
And now I can see it.

713
00:35:56,380 --> 00:35:59,820
I can really appreciate it because it's so simple.

714
00:35:59,820 --> 00:36:02,980
You can right click right there and you have mark for deletion.

715
00:36:02,980 --> 00:36:03,980
You can do file management.

716
00:36:03,980 --> 00:36:08,980
You can browse the files or it's one click to just restore that entire snapshot.

717
00:36:08,980 --> 00:36:10,060
And you can have a field in here.

718
00:36:10,060 --> 00:36:13,220
So if you want to go back in later and say, okay, I'm taking a snapshot.

719
00:36:13,220 --> 00:36:14,220
You can add comments.

720
00:36:14,220 --> 00:36:18,100
So you could say this is our pre-upgrade snapshot, you know, and I can leave a little note here.

721
00:36:18,100 --> 00:36:21,540
So if you showed up to record tech snap and something wasn't working, you could go in

722
00:36:21,540 --> 00:36:22,860
there and say, oh, Chris did that upgrade.

723
00:36:22,860 --> 00:36:23,860
Yeah.

724
00:36:23,860 --> 00:36:24,860
That's really nice for multi user systems.

725
00:36:24,860 --> 00:36:25,860
Mm hmm.

726
00:36:25,860 --> 00:36:29,660
So I had something happen the other day and I thought, oh, Jack, it broke.

727
00:36:29,660 --> 00:36:32,300
It finally, it finally broke on us.

728
00:36:32,300 --> 00:36:36,180
And I got ahold of you and we troubleshot it for a little bit and ended up like just

729
00:36:36,180 --> 00:36:38,620
having to like restart pulse or something.

730
00:36:38,620 --> 00:36:42,760
But it was at that moment, I was thinking to myself, hmm, I really need to get going

731
00:36:42,760 --> 00:36:44,020
on this recording.

732
00:36:44,020 --> 00:36:48,420
So I wonder if we, if we had a snapshot system is so a time shift kind of came on our radar.

733
00:36:48,420 --> 00:36:50,820
I thought this is going to be a perfect solution.

734
00:36:50,820 --> 00:36:56,180
So we loaded it here and um, I don't, I don't see any reason why we're going to stop using

735
00:36:56,180 --> 00:36:57,180
it.

736
00:36:57,180 --> 00:36:59,100
I think we'll just keep using it on our production Kubuntu system.

737
00:36:59,100 --> 00:37:01,720
Oh no, now it's XFCE.

738
00:37:01,720 --> 00:37:04,220
It's a Kubuntu install with XFCE.

739
00:37:04,220 --> 00:37:11,020
I'm curious though, um, you, you can schedule this in like a cron job so that you can dump,

740
00:37:11,020 --> 00:37:16,260
uh, maybe have like three backups, dump the oldest, create a new one sort of scenario.

741
00:37:16,260 --> 00:37:17,260
Yeah.

742
00:37:17,260 --> 00:37:19,660
It has, um, some retention configuration set up already.

743
00:37:19,660 --> 00:37:22,760
So you sort of choose like how often you want and how many you want to keep and it'll do

744
00:37:22,760 --> 00:37:25,780
all the, all the updating and rolling for you.

745
00:37:25,780 --> 00:37:26,780
Yeah.

746
00:37:26,780 --> 00:37:30,420
And it gives you a nice GUI for going and setting the location for adjusting the cron

747
00:37:30,420 --> 00:37:32,340
schedule so you don't have to be a cron expert.

748
00:37:32,340 --> 00:37:33,340
Yeah.

749
00:37:33,340 --> 00:37:36,060
I'm looking at the GUI now and the GUI looks actually fantastic.

750
00:37:36,060 --> 00:37:40,040
Uh, it really does look like a quality piece of software.

751
00:37:40,040 --> 00:37:44,140
There is, um, one issue you may run into, which we did, uh, as I was trying to add a

752
00:37:44,140 --> 00:37:46,060
couple extra things in the home directory.

753
00:37:46,060 --> 00:37:50,340
There is a nice little filters part, so you can sort of add, excludes or include files

754
00:37:50,340 --> 00:37:54,460
specifically, uh, on sort of regex style patterns.

755
00:37:54,460 --> 00:37:59,260
That doesn't really work in the GUI, uh, turns out any rule and what you add stuff, but that

756
00:37:59,260 --> 00:38:01,460
never doesn't make it to the config file.

757
00:38:01,460 --> 00:38:02,460
There is an issue open.

758
00:38:02,460 --> 00:38:06,740
It seems to just be a recent regression in the latest release and thankfully the config

759
00:38:06,740 --> 00:38:08,380
file is just like a simple JSON file.

760
00:38:08,380 --> 00:38:10,540
So you can, there's already some filters in there.

761
00:38:10,540 --> 00:38:11,540
You can see how it is.

762
00:38:11,540 --> 00:38:13,380
Just got to copy and modify a couple of lines.

763
00:38:13,380 --> 00:38:18,460
I'm close to calling this a, I must load for any system where you are really serious about

764
00:38:18,460 --> 00:38:22,900
needing to get back up and running or a family member, if you deploy a Linux box for a friend

765
00:38:22,900 --> 00:38:23,900
or family member.

766
00:38:23,900 --> 00:38:26,700
The nice thing about it was that, especially because of the R sync support, you know, we

767
00:38:26,700 --> 00:38:30,380
didn't have to do, when we set up the server with snapper and stuff, we spent a while considering

768
00:38:30,380 --> 00:38:31,900
like how are we going to do this file system layout?

769
00:38:31,900 --> 00:38:36,340
What's the right thing with time shift, just installed the PPA, got it going.

770
00:38:36,340 --> 00:38:37,340
And that was it.

771
00:38:37,340 --> 00:38:39,660
We spent 20 minutes of just playing with it and now we haven't thought about it.

772
00:38:39,660 --> 00:38:40,660
We have all these snapshots.

773
00:38:40,660 --> 00:38:41,660
Yeah.

774
00:38:41,660 --> 00:38:42,660
And I love our sync.

775
00:38:42,660 --> 00:38:43,660
You know, that's good.

776
00:38:43,660 --> 00:38:46,980
If you use the butter FS support, there is a couple of requirements on how you have things

777
00:38:46,980 --> 00:38:51,100
laid out, but they're totally reasonable, but just worth checking before you use the

778
00:38:51,100 --> 00:38:52,100
butter FS support.

779
00:38:52,100 --> 00:38:55,860
Well, Brent just joined us, Brent, have you had a chance to look at time shift?

780
00:38:55,860 --> 00:38:56,860
You got any thoughts on it?

781
00:38:56,860 --> 00:38:57,860
Yeah.

782
00:38:57,860 --> 00:38:59,420
You know, I've seen time shift.

783
00:38:59,420 --> 00:39:03,520
The first time I saw it was in Linux mint, I don't know, a few years ago and that got

784
00:39:03,520 --> 00:39:09,100
me kind of excited about it because of the our sync backend and I'm a huge, huge fan

785
00:39:09,100 --> 00:39:13,020
of our sync because of its, you know, robustness.

786
00:39:13,020 --> 00:39:17,300
But also because I know like a tool like this, I love seeing our sync in the backend because

787
00:39:17,300 --> 00:39:23,220
I know that if for any reason time shift stops working the way I want it to, I understand

788
00:39:23,220 --> 00:39:28,460
what's happening on the sort of on the bottom end, you know, so I can use tools I'm familiar

789
00:39:28,460 --> 00:39:32,540
with to diagnose something that's going wrong with the backups if that ever happens.

790
00:39:32,540 --> 00:39:34,340
So that is some pretty good peace of mind.

791
00:39:34,340 --> 00:39:35,460
Yeah, that's a great point.

792
00:39:35,460 --> 00:39:37,460
It's not some magical special backup format.

793
00:39:37,460 --> 00:39:39,900
It's just directories or butter fs snapshots.

794
00:39:39,900 --> 00:39:40,900
Mm hmm.

795
00:39:40,900 --> 00:39:44,620
Now it looks like reading around on their website that you'll get unpredictable results

796
00:39:44,620 --> 00:39:46,740
if you're pointing at containers and stuff like that.

797
00:39:46,740 --> 00:39:50,780
So beware, this is more for like a workstation snapshot.

798
00:39:50,780 --> 00:39:51,780
That's the ideal use case.

799
00:39:51,780 --> 00:39:52,780
I think.

800
00:39:52,780 --> 00:39:53,780
Yeah, this looks really cool.

801
00:39:53,780 --> 00:39:59,240
I haven't had any experience with this project yet, but one thing I'm wondering is if they'll

802
00:39:59,240 --> 00:40:04,740
integrate ZFS snapshots at some point, I think that would be super, super cool.

803
00:40:04,740 --> 00:40:09,900
I saw someone on their GitHub offering to start working on ZFS support and then contribute

804
00:40:09,900 --> 00:40:10,900
it back.

805
00:40:10,900 --> 00:40:12,660
So that could be in the works.

806
00:40:12,660 --> 00:40:15,060
I agree, especially with 2004 shipping ZFS.

807
00:40:15,060 --> 00:40:16,980
I would love to see that.

808
00:40:16,980 --> 00:40:21,760
Now, Mr. Payne, we do have some feedback to get to, including one from Troy about new

809
00:40:21,760 --> 00:40:23,500
users and Linux Mint.

810
00:40:23,500 --> 00:40:26,180
He writes, Chris, I've been listening to your show since the Linux action show days

811
00:40:26,180 --> 00:40:28,580
when Brian was around and I love the shows.

812
00:40:28,580 --> 00:40:29,580
Love the work.

813
00:40:29,580 --> 00:40:30,580
Keep it up.

814
00:40:30,580 --> 00:40:34,540
I was just listening to episode 339 of the Mint Mindset and I just wanted to give some

815
00:40:34,540 --> 00:40:35,540
feedback.

816
00:40:35,540 --> 00:40:38,980
I know with your background that the show is probably focused more towards the geek

817
00:40:38,980 --> 00:40:42,580
community than the average operating system consumer.

818
00:40:42,580 --> 00:40:46,540
Most people in your sphere of influence are programmers or inspired by the bells and whistles

819
00:40:46,540 --> 00:40:47,660
that people seem to love.

820
00:40:47,660 --> 00:40:49,060
Now, come on now.

821
00:40:49,060 --> 00:40:50,060
He's that Troy.

822
00:40:50,060 --> 00:40:51,060
OK.

823
00:40:51,060 --> 00:40:52,060
He's probably right.

824
00:40:52,060 --> 00:40:53,060
He's probably right, actually.

825
00:40:53,060 --> 00:40:54,060
Most.

826
00:40:54,060 --> 00:40:55,060
Yeah, OK.

827
00:40:55,060 --> 00:40:56,060
Well, OK.

828
00:40:56,060 --> 00:40:57,060
Go on.

829
00:40:57,060 --> 00:40:58,060
Continuing on.

830
00:40:58,060 --> 00:41:00,140
I don't think he was accusing me, but he's probably right.

831
00:41:00,140 --> 00:41:01,680
I mean, we do like the shiny.

832
00:41:01,680 --> 00:41:02,680
He goes on.

833
00:41:02,680 --> 00:41:04,780
Well, I work for a computer service shop in our area.

834
00:41:04,780 --> 00:41:09,160
We make most of our money supporting the various bugs that occur in Windows computers and doing

835
00:41:09,160 --> 00:41:10,900
virus cleanups and so forth.

836
00:41:10,900 --> 00:41:16,820
However, we've gotten more and more requests from customers, both businesses and home users

837
00:41:16,820 --> 00:41:21,640
about purchasing computers or upgrading their computers to Linux.

838
00:41:21,640 --> 00:41:26,420
And after trying a large variety of distributions myself and trying with different customers,

839
00:41:26,420 --> 00:41:30,980
I have to say that the feedback they give us about Linux Mint is how similar it is to

840
00:41:30,980 --> 00:41:32,220
Windows 7.

841
00:41:32,220 --> 00:41:33,940
And they love it.

842
00:41:33,940 --> 00:41:34,940
They love it.

843
00:41:34,940 --> 00:41:37,820
Linux Mint is not only easy to use, but it looks sexy as hell.

844
00:41:37,820 --> 00:41:40,700
It also allows for geek and power users to get things done as well.

845
00:41:40,700 --> 00:41:46,820
I met several people, including myself, who run Linux Mint web servers.

846
00:41:46,820 --> 00:41:47,820
So there you go.

847
00:41:47,820 --> 00:41:48,820
All right.

848
00:41:48,820 --> 00:41:52,780
Last bit aside, which frankly scares me a little, I think the point of like this is

849
00:41:52,780 --> 00:41:53,780
working for users.

850
00:41:53,780 --> 00:41:54,780
They like it.

851
00:41:54,780 --> 00:41:56,300
It's an easy transition.

852
00:41:56,300 --> 00:41:57,300
It's important.

853
00:41:57,300 --> 00:41:58,300
I agree.

854
00:41:58,300 --> 00:42:01,860
Um, I guess what matters the most right there, I know there's nothing really else to say

855
00:42:01,860 --> 00:42:02,860
about it.

856
00:42:02,860 --> 00:42:06,340
He says, I guess he writes up, I guess I'm saying don't always look at everything from

857
00:42:06,340 --> 00:42:09,820
such a high level since most computer users are just average consumers.

858
00:42:09,820 --> 00:42:12,060
They want to use it and get their daily tasks done.

859
00:42:12,060 --> 00:42:13,460
I think we agree with that, actually.

860
00:42:13,460 --> 00:42:17,960
And I think that's a lot of times where we've even wondered if Linux is the right answer.

861
00:42:17,960 --> 00:42:24,900
And I think elementary OS and Mint are telling us, yes, I would also wonder, Troy, if you

862
00:42:24,900 --> 00:42:29,260
had a chance, I'd be curious to know what the feedback would be for something like Ubuntu

863
00:42:29,260 --> 00:42:31,700
Mate 20.04 when it comes out.

864
00:42:31,700 --> 00:42:35,680
Maybe try slapping that on a few machines because I recently gave the daily ISO a go

865
00:42:35,680 --> 00:42:41,500
for Mate 1.24 and it is looking real good.

866
00:42:41,500 --> 00:42:46,980
And it's not Cinnamon, I'll grant, Cinnamon does have that Windows 7 vibe going, but it

867
00:42:46,980 --> 00:42:53,420
still has that traditional paradigm and 20.04 will be supported for a long time and it seemed

868
00:42:53,420 --> 00:42:54,940
really good.

869
00:42:54,940 --> 00:42:58,260
Daniel writes in with a question we've gotten a couple of times.

870
00:42:58,260 --> 00:43:00,220
It's about these ThinkPad T480s.

871
00:43:00,220 --> 00:43:06,260
He says, in episode 323, you mentioned a shim is being developed for the T480 fingerprint

872
00:43:06,260 --> 00:43:07,260
reader.

873
00:43:07,260 --> 00:43:10,440
This was back in October and it seems that the official drivers were released for almost

874
00:43:10,440 --> 00:43:14,460
everything bad except the T480 and a few other models.

875
00:43:14,460 --> 00:43:19,300
As far as I know, there's no official development going on for the fingerprint reader, but maybe

876
00:43:19,300 --> 00:43:22,620
you could get an update on this because if there is, I'd like to know or if it's been

877
00:43:22,620 --> 00:43:23,620
abandoned.

878
00:43:23,620 --> 00:43:24,620
Thanks in advance, Daniel.

879
00:43:24,620 --> 00:43:28,660
Unfortunately, I don't have any updates on official support.

880
00:43:28,660 --> 00:43:33,260
There was a project over on GitHub to reverse engineer the protocol and add support that

881
00:43:33,260 --> 00:43:34,260
way.

882
00:43:34,260 --> 00:43:38,660
They made some progress, I guess, on the specific model that's on this ThinkPad.

883
00:43:38,660 --> 00:43:43,860
It will initialize and the LEDs work, but scan doesn't work and unfortunately, at least

884
00:43:43,860 --> 00:43:46,540
on the master branch, the last commit was like a year ago.

885
00:43:46,540 --> 00:43:47,540
Oof.

886
00:43:47,540 --> 00:43:50,460
Oh, see, I kind of heard a rumor it was in development, but I bet it was that.

887
00:43:50,460 --> 00:43:51,460
Here's hoping though.

888
00:43:51,460 --> 00:43:53,260
Oh, well, just a couple of more.

889
00:43:53,260 --> 00:43:56,460
One more from Jason and this one is so cool.

890
00:43:56,460 --> 00:44:00,180
I had no idea, so I'm so glad he wrote it and he says, not sure if y'all heard of this,

891
00:44:00,180 --> 00:44:06,140
but there is a community plugin for Cockpit called Cockpit ZFS Manager.

892
00:44:06,140 --> 00:44:11,100
He says it's a great plugin to help those that are used to a GUI style of managing ZFS

893
00:44:11,100 --> 00:44:14,700
from FreeNAS, but are moving over to ZFS on Linux.

894
00:44:14,700 --> 00:44:18,660
It's still in the alpha beta stage for the developer and requires Cockpit 201 or greater

895
00:44:18,660 --> 00:44:21,300
and Samba because it can also do some Sambasheer stuff.

896
00:44:21,300 --> 00:44:22,780
I think we're going to have to give it a try.

897
00:44:22,780 --> 00:44:23,780
This does sound pretty cool.

898
00:44:23,780 --> 00:44:27,540
He says, maybe the JV community could show the developer some love.

899
00:44:27,540 --> 00:44:28,660
I agree.

900
00:44:28,660 --> 00:44:32,540
I think that would be really cool and he says, love all the shows.

901
00:44:32,540 --> 00:44:34,420
Hopefully one day I'll find time to join in live.

902
00:44:34,420 --> 00:44:36,780
Well, hopefully that, hopefully it wasn't going to be this Tuesday because we're not

903
00:44:36,780 --> 00:44:37,780
here.

904
00:44:37,780 --> 00:44:40,140
I'm in the courthouse.

905
00:44:40,140 --> 00:44:41,140
That is really neat.

906
00:44:41,140 --> 00:44:43,180
I didn't actually need it, but now I want it.

907
00:44:43,180 --> 00:44:44,180
Right?

908
00:44:44,180 --> 00:44:48,580
I mean, just thinking back on our fake names there, Cockpit was one of our favorite parts

909
00:44:48,580 --> 00:44:52,940
about using Fedora on that system and having ZFS support would have been perfect.

910
00:44:52,940 --> 00:44:56,700
And you know what was great about that is we totally had no intention of even really

911
00:44:56,700 --> 00:45:00,540
trying out Cockpit much, but we kept getting little notes from the audience saying, hey,

912
00:45:00,540 --> 00:45:01,540
you should try out Cockpit.

913
00:45:01,540 --> 00:45:02,540
Hey, let's check it out.

914
00:45:02,540 --> 00:45:03,820
And they were so right.

915
00:45:03,820 --> 00:45:06,180
Will writes in with our last one and it's a shorty.

916
00:45:06,180 --> 00:45:07,300
It's a prediction for the show.

917
00:45:07,300 --> 00:45:10,740
He says, follow up prediction for Wes's Bcash prediction.

918
00:45:10,740 --> 00:45:16,920
If BcashFS does make it upstream in 2020, Jupiter Broadcasting will be using it in production

919
00:45:16,920 --> 00:45:18,860
before the end of the year.

920
00:45:18,860 --> 00:45:19,860
I think that's pretty solid.

921
00:45:19,860 --> 00:45:20,860
Seems right to me.

922
00:45:20,860 --> 00:45:23,460
I mean, I'm absolutely putting it on my laptop for sure.

923
00:45:23,460 --> 00:45:25,460
And I use that for production.

924
00:45:25,460 --> 00:45:28,340
So I mean, come on, how great would that be?

925
00:45:28,340 --> 00:45:29,340
I've just said it too many times.

926
00:45:29,340 --> 00:45:30,900
I have to install it once it's there.

927
00:45:30,900 --> 00:45:35,220
Bcash for the root file system, ZFS for the data, ButterFS for my home.

928
00:45:35,220 --> 00:45:36,340
I'm a happy guy.

929
00:45:36,340 --> 00:45:37,860
That's like a perfect setup for me.

930
00:45:37,860 --> 00:45:38,860
I'm all about that.

931
00:45:38,860 --> 00:45:41,820
It's all about seeing how many different file systems you can use at once.

932
00:45:41,820 --> 00:45:45,780
I mean, that's the great thing about Linux, right?

933
00:45:45,780 --> 00:45:47,860
It's all about choice, Wes.

934
00:45:47,860 --> 00:45:54,940
Okay, we have a really cool app pick for you that I'm going to let Wes pick or tell you

935
00:45:54,940 --> 00:45:58,900
about because he found this pick and he wants to geek out hard on it.

936
00:45:58,900 --> 00:45:59,900
It is pretty neat.

937
00:45:59,900 --> 00:46:00,900
Yeah, okay.

938
00:46:00,900 --> 00:46:05,060
You've probably heard of JQ, the handy little command line tool for manipulating JSON, making

939
00:46:05,060 --> 00:46:07,820
JSON queries, that sort of thing, right?

940
00:46:07,820 --> 00:46:09,260
It works really well.

941
00:46:09,260 --> 00:46:14,500
But a lot of the time, at least on the Linux command line, you don't always have JSON.

942
00:46:14,500 --> 00:46:19,340
I mean, we do have the Unix philosophy, so you have this text output, but I'm sure we've

943
00:46:19,340 --> 00:46:24,060
all been in the experience of, okay, I just want to grab the IP address field and now

944
00:46:24,060 --> 00:46:30,000
I have to like grep and awk and cut and it just gets to be kind of a mess.

945
00:46:30,000 --> 00:46:32,660
It's almost a little embarrassing too when you think about things like PowerShell where

946
00:46:32,660 --> 00:46:35,020
they do have a lot more structured output.

947
00:46:35,020 --> 00:46:36,660
I was going to mention that, yeah.

948
00:46:36,660 --> 00:46:38,580
So I mean, we're not there yet.

949
00:46:38,580 --> 00:46:44,300
Some tools, I learned this today, IP route 2, the new IP command, that has a dash J flag

950
00:46:44,300 --> 00:46:47,200
and it'll output JSON for you right there, so boom.

951
00:46:47,200 --> 00:46:52,860
Some of this is handled, some newer tooling does have integrated JSON support.

952
00:46:52,860 --> 00:46:56,420
But for everything else that doesn't, there's JC.

953
00:46:56,420 --> 00:46:58,020
It has a whole bunch of built-in support.

954
00:46:58,020 --> 00:47:03,500
So if you have a handy, classic Unix tool, you just bypass that as a command line option.

955
00:47:03,500 --> 00:47:07,460
It'll ingest the output, it already knows how to parse it, and then give you JSON right

956
00:47:07,460 --> 00:47:08,460
out.

957
00:47:08,460 --> 00:47:09,460
Whoa.

958
00:47:09,460 --> 00:47:10,460
Okay.

959
00:47:10,460 --> 00:47:11,460
That is legitimately geeky cool.

960
00:47:11,460 --> 00:47:14,980
I mean, it's definitely a hack, but I think it's better than everyone rolling their own

961
00:47:14,980 --> 00:47:16,300
little parsers all the time.

962
00:47:16,300 --> 00:47:21,620
We can at least here have a sort of semi-standardized community to make sure they work well.

963
00:47:21,620 --> 00:47:24,780
Check out the link in the show notes if you want to visualize what Wes is talking about

964
00:47:24,780 --> 00:47:27,220
because they have some example outputs on there.

965
00:47:27,220 --> 00:47:30,420
This is one of those where people hear about this and they're like, huh, okay.

966
00:47:30,420 --> 00:47:34,000
And then one day they'll need it and they'll be like, what episode was it you guys talked

967
00:47:34,000 --> 00:47:39,020
about that had that JSON thing that now I need for some weird arbitrary reason that

968
00:47:39,020 --> 00:47:41,280
I never expected I would need?

969
00:47:41,280 --> 00:47:42,280
It's episode 341.

970
00:47:42,280 --> 00:47:47,660
So you can get those links at linuxunplug.com slash 341.

971
00:47:47,660 --> 00:47:52,600
If you'd like to send us a pic or send us some feedback like we just read, linuxunplug.com

972
00:47:52,600 --> 00:47:54,340
slash contact.

973
00:47:54,340 --> 00:47:55,340
Please do.

974
00:47:55,340 --> 00:47:56,860
I really liked that one.

975
00:47:56,860 --> 00:47:57,860
That was pretty good.

976
00:47:57,860 --> 00:48:01,020
And we'll have links to Timeshift and Richard's article and all the other things we talked

977
00:48:01,020 --> 00:48:02,580
about in those show notes too.

978
00:48:02,580 --> 00:48:06,300
And of course, those are found in your podcast catcher of choice.

979
00:48:06,300 --> 00:48:09,580
And if you haven't enjoyed our chapter markers yet, why not take a look?

980
00:48:09,580 --> 00:48:10,580
Yeah, give it a try.

981
00:48:10,580 --> 00:48:11,580
It's pretty nice.

982
00:48:11,580 --> 00:48:16,260
And it's also very easy to jump back to a topic if you ever need to.

983
00:48:16,260 --> 00:48:17,920
So those chapter markers are great.

984
00:48:17,920 --> 00:48:21,740
And we thank our great editors like Joe and Drew for making those possible.

985
00:48:21,740 --> 00:48:22,740
Thank you, Drew.

986
00:48:22,740 --> 00:48:23,740
You're very welcome.

987
00:48:23,740 --> 00:48:26,140
And of course, Joe, but he's not here.

988
00:48:26,140 --> 00:48:27,140
I don't think Joe.

989
00:48:27,140 --> 00:48:28,140
Come on.

990
00:48:28,140 --> 00:48:30,140
Gotta give him a hard time.

991
00:48:30,140 --> 00:48:31,140
All right.

992
00:48:31,140 --> 00:48:35,360
Well, hopefully everything will be back to our regularly scheduled Linux Unplugged program

993
00:48:35,360 --> 00:48:38,580
on our regular Tuesday day at noon Pacific.

994
00:48:38,580 --> 00:48:41,780
You can get that converted over at JupiterBroadcasting.com slash calendar.

995
00:48:41,780 --> 00:48:42,900
I'm at Chris Ellis.

996
00:48:42,900 --> 00:48:43,900
He's at Westpane.

997
00:48:43,900 --> 00:48:44,900
The show is at Linux Unplugged.

998
00:48:44,900 --> 00:49:11,660
See you next Tuesday.

999
00:49:14,900 --> 00:49:24,940
OK, I think I could use some advice kind of on topic, too, with what we've been talking

1000
00:49:24,940 --> 00:49:25,940
about.

1001
00:49:25,940 --> 00:49:26,940
Lay it on us.

1002
00:49:26,940 --> 00:49:31,460
So I've got access for a limited time to Hedia's clinic machine.

1003
00:49:31,460 --> 00:49:36,140
Like I said, this run, I think it's 1604, it's got to be.

1004
00:49:36,140 --> 00:49:37,880
What do I do with this thing?

1005
00:49:37,880 --> 00:49:42,540
Do I attempt to, say, replace like all of the repos that it's like the Telegram, PPA,

1006
00:49:42,540 --> 00:49:45,380
the Chrome repo, there's several that aren't working.

1007
00:49:45,380 --> 00:49:49,780
Do I spend the time to get all that working again, if it's even possible on 1604, and

1008
00:49:49,780 --> 00:49:54,020
then just update it and she just stays on 1604 for a little bit longer?

1009
00:49:54,020 --> 00:49:56,820
Or do I try to bring her up to 1804?

1010
00:49:56,820 --> 00:50:01,740
Or do I just wait and just skip this window of opportunity and just take her straight

1011
00:50:01,740 --> 00:50:04,620
to 2004 in maybe a month or two?

1012
00:50:04,620 --> 00:50:06,220
Well, but the thing is, I don't...

1013
00:50:06,220 --> 00:50:07,220
Can you wait that long?

1014
00:50:07,220 --> 00:50:08,580
I don't know if I'll get access to it again.

1015
00:50:08,580 --> 00:50:09,580
How risky is it?

1016
00:50:09,580 --> 00:50:10,580
But what's it do?

1017
00:50:10,580 --> 00:50:11,740
What's the use case for it?

1018
00:50:11,740 --> 00:50:14,380
So what's it do and how risky is it are both really good questions.

1019
00:50:14,380 --> 00:50:23,140
So what's it do right now is essentially just information input to web applications or some

1020
00:50:23,140 --> 00:50:25,220
light printing and scanning.

1021
00:50:25,220 --> 00:50:26,700
It doesn't do a lot.

1022
00:50:26,700 --> 00:50:32,340
So it's been perfectly fine on 1604 with Unity 7 and all of that for ages.

1023
00:50:32,340 --> 00:50:36,580
I think 1604 was a new release when I put it on there, which is crazy.

1024
00:50:36,580 --> 00:50:37,580
Right.

1025
00:50:37,580 --> 00:50:38,580
Wow.

1026
00:50:38,580 --> 00:50:42,700
I haven't really been super motivated to throw it on the latest and greatest because they

1027
00:50:42,700 --> 00:50:45,420
like Unity and it works.

1028
00:50:45,420 --> 00:50:51,020
But things like Chrome and Telegram are yelling at her that they're going to stop working

1029
00:50:51,020 --> 00:50:53,420
because they haven't been upgraded in so long.

1030
00:50:53,420 --> 00:50:55,380
And those are kind of essential to the workflow.

1031
00:50:55,380 --> 00:50:57,160
I know you guys have been playing with 2004.

1032
00:50:57,160 --> 00:51:02,060
How crazy would it be to put her on like a development release considering we're kind

1033
00:51:02,060 --> 00:51:03,420
of close?

1034
00:51:03,420 --> 00:51:05,700
Is that out there and too wild?

1035
00:51:05,700 --> 00:51:10,660
I don't know if I have like a really authoritative opinion on it yet, but my initial impressions

1036
00:51:10,660 --> 00:51:15,740
have been the 2004 is close to daily drivable, if not there already.

1037
00:51:15,740 --> 00:51:18,440
It seems like it's been pretty solid.

1038
00:51:18,440 --> 00:51:22,060
But I've been mostly using the Maute version.

1039
00:51:22,060 --> 00:51:27,940
So I don't know about the Gnome shell side of it, but I've heard from others that it's

1040
00:51:27,940 --> 00:51:28,940
solid.

1041
00:51:28,940 --> 00:51:33,580
My inclination would be to go ahead and document what all they have installed on there and

1042
00:51:33,580 --> 00:51:40,980
actually use and then take them to like 1804 Maute.

1043
00:51:40,980 --> 00:51:46,780
And when 2004 Maute comes around, it should be, if you find another upgrade window, it

1044
00:51:46,780 --> 00:51:50,300
should be pretty easy to roll them up to 2004.

1045
00:51:50,300 --> 00:51:51,900
But if I don't, no big deal.

1046
00:51:51,900 --> 00:51:54,020
They're on 1804 and it's going to be supported for a while.

1047
00:51:54,020 --> 00:51:55,020
Yeah, exactly.

1048
00:51:55,020 --> 00:51:56,580
And I'd go ahead and enable live patch too.

1049
00:51:56,580 --> 00:51:57,580
Yeah.

1050
00:51:57,580 --> 00:51:58,580
Okay.

1051
00:51:58,580 --> 00:51:59,580
Yeah, that's pretty solid, I think.

1052
00:51:59,580 --> 00:52:01,060
And maybe make a backup before you get started.

1053
00:52:01,060 --> 00:52:02,180
Put time shift on there.

1054
00:52:02,180 --> 00:52:03,180
Seriously.

1055
00:52:03,180 --> 00:52:04,180
Put time shift on there.

1056
00:52:04,180 --> 00:52:05,740
I'm going to write a note.

1057
00:52:05,740 --> 00:52:08,260
That's actually a really good use of it for her.

1058
00:52:08,260 --> 00:52:12,420
That's a perfect use case example is this is a front office computer that they want

1059
00:52:12,420 --> 00:52:15,940
to book appointments on and scan information into.

1060
00:52:15,940 --> 00:52:19,220
And I've got to keep it up to date because it needs to be secure.

1061
00:52:19,220 --> 00:52:20,700
But we can't have a break either.

1062
00:52:20,700 --> 00:52:24,740
And that GUI, assuming they can at least get to the desktop, that GUI is totally usable

1063
00:52:24,740 --> 00:52:25,740
by them.

1064
00:52:25,740 --> 00:52:26,740
Yeah, it's very intuitive.

1065
00:52:26,740 --> 00:52:33,620
I think that would be a much easier transition from Unity than, say, GNOME or even XFCE

1066
00:52:33,620 --> 00:52:35,140
or Cinnamon.

1067
00:52:35,140 --> 00:52:40,660
It's going to feel a little different, but not so much that they can't find what they

1068
00:52:40,660 --> 00:52:41,660
need.

1069
00:52:41,660 --> 00:52:42,660
Yeah, I could use that mutiny layout too.

1070
00:52:42,660 --> 00:52:43,660
Yeah, could do.

1071
00:52:43,660 --> 00:52:44,660
That pre-configured layout.

1072
00:52:44,660 --> 00:52:45,660
Oh, that might be really nice.

1073
00:52:45,660 --> 00:52:58,820
Thanks, guys.


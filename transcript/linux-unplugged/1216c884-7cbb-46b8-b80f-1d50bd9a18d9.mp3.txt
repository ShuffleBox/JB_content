Now, before we start, we have a listener in the virtual lug
who's joined us in the metaverse.
Is it the metaverse that you're in right now?
Where are you?
Not quite, I'm just apparently hovering above the ground
in Oculus Home.
But you got Tmux.
Yes, I have Tmux on one side
and I've got Mummla in the middle.
Tmux, so to explain this, what is this that you're seeing?
Is this some sort of, how are you doing this?
If you've ever used a Quest 2 and you've opened the store,
it's up in that little window down at the bottom
and you can set it on each side.
You can have multiple windows.
It's pretty neat.
So on my right, I've got my settings panel.
In the middle, I've got basically just a standard window
with Mummla in it.
And then on my left, I've got Tmux.
And these are floating in like a virtual lounge
or something?
Yes, I'm just in the little cabin in the woods studio
and they're just floating midair.
How many NFTs did you have to trade in
to experience this view of the internet?
None other than just threatened Facebook
to give me ADB access.
Just your soul to Facebook.
That's all you have to trade.
They had it anyway.
But you know what?
It's pretty cool.
Hello friends and welcome back to your weekly Linux talk show.
My name is Chris.
My name is Wes.
My name is Brent.
And my name is Alex.
Hello gentlemen, coming up on the show today,
I have hit my first major snag in the Nyx OS challenge.
Oh no.
We'll check in with the other boys
and see how their Nyx OS challenge is going.
Plus, we've got a fair amount of follow-up on 2204
and a look at the mate flavor of 2204.
Then we'll round out the show with some great booze,
some pics and more.
So before I go any further,
let's say time appropriate greetings to that virtual log.
Hello Mummleroom.
Time appropriate greetings.
Hello, hello, hello JB1.
And for extra fun today, listener Eric is joining us in studio.
He's here for the virtual Linux fest.
Hello Eric.
Hi guys.
Hey, hey there.
Thanks for joining us.
So, you know, we have a few things to talk about today on the show.
There's like a whole lot to cover.
Brent, you're still over at Alex's place doing projects.
I'm sitting in his desk chair right now.
I think at this point you've proved too useful
to be allowed to leave, right?
That's true.
These handcuffs are starting to get a little uncomfortable.
I knew we should have checked on them.
Rescue me?
The other problem is,
the handcuffs gives you slivers.
Not that I would know,
but I'm just saying they give you the slivers.
It's true.
And Wes, today you brought steaks to the studio.
So we're gonna do a little barbecue and after the show.
Yes, on a beautiful Pacific Northwest day like this,
I think we have to.
A little grilling, really, let's be honest.
I brought some chicken.
So we've got some marinated chicken.
We've got some steaks.
It's gonna be a hell of an after party after the show today.
And I've launched a new show this week.
Pretty excited about that,
office hours.hair if you want to check that out.
I'm gonna do another live stream on Tuesday,
this coming Tuesday as we release this.
We'll be doing some sack giveaways to help people charge up their wallets for the podcasting
2.0 boost.
What time are you doing that?
Noon Pacific, 3 p.m. Eastern Westpane.
You know what I want to do after today too is I want to sit down and have a little record
sesh with you and Brent and Alex and chat about our JB summer project plans that we
have.
So that kind of stuff I'm gonna feature in office hours.
And I'll have the mobile room going too so if you got any questions for me, pop in there
and ask them.
Personal Matrix stuff, I don't know, JB stuff, show stuff, go ahead and put it in there.
And we'd love to chat.
Also FYI, you got like a few days after this here podcast comes out to register at the
JB Matrix server.
After that we're gonna shut down registration for a while.
And it doesn't mean you can't participate.
You can go still create a free account at matrix.org.
But if you want a Matrix account with a jupyterbroadcasting.com domain, you have got until let's say Wednesday,
Wednesday of April, which would be the 27th, 2022.
If you'd like to have an at Jupiter Broadcasting domain name for your Matrix account, sign
up now because after that we're gonna shut it down because of spam or problems while
we reengineer a few things.
We'll probably eventually open it up one day, maybe, but I'm not guaranteeing that and we
may not either.
So if you want to get in while you still can, we have linuxunplug.com slash matrix and our
Matrix server is colony.jupyterbroadcasting.com.
Limited time only.
I gotta go fast.
That's right.
All right, so let's get into the Ubuntu 2204 leftovers that we have.
There's some really interesting things that landed in this release and everybody's now
finally gotten their hands on it that wants it in that first kind of early window.
And I think this is the one where we're seeing a lot of the work land in GNOME 42 for the
new dark style changes.
And there is a post over at discourse.ubuntu.com that really digs into all of the changes they
had to do and the different implementation details to get this working in 2204.
And so if you're just interested in the kind of plumbing stuff, I want to put that in the
show notes so you can check it out.
But a couple of other things that are in this release that I think are worth mentioning
that we didn't cover last week.
And I think number one for us here on the show, because we've talked about that Mars
copter, that Linux copter so much.
Yeah, we have.
Still going strong, by the way.
Still going strong.
They just hit their one year anniversary.
I sent Tim a congratulations email about it because they're super excited.
It's so great.
And you know, one of the things that Tim told us to make Linux work on that helicopter on
Mars is they had to patch the kernel for real time support.
It's just something they absolutely need.
And so 2204 LTS is actually offering a real time kernel beta that users can install.
Designed to quote, meet telco network transformation needs for 5G.
Hopefully it's also useful for our little Mars copter.
Yeah, you know, maybe not surprising, but real time kernel patches and the preempt RT
stuff can actually be a little controversial in our community.
Surprise, surprise.
It's come a long way.
It's kind of wild to see it get to this level and, you know, finally reach some real integration,
some ongoing maintenance, more widespread use, perhaps.
It was a topic that was discussed within Canonical for many years prior to, you know, actually
shipping as a thing.
What was the big holdup, Wimpy?
The fact that there's a large misconception in the wider world as to what real time actually
means, what the definition of real time means, and, you know, an oversimplistic summary of
that is real time does not mean now, it means within a reproducible latency window.
That's what real time actually means, you know, does it happen within a determinable
window of latency?
Right, you don't want those unbounded spikes that mean your machine didn't respond in time
for some safety critical features, say.
Right.
And, you know, lots of people have, I think there's a lot of placebo effect among enthusiasts
have been using real time kernels for in conjunction with things like Jack, for example, for audio
processing.
And, you know, when well implemented, you know, a real time kernel can play a role there
for sure.
But I think some of it was actually making sure that there were some measurable assurances
around what a real time kernel can deliver.
Fair.
I also wondered if perhaps we're seeing it land now just because in February Intel acquired
the folks behind the real time preempt RT kernel patch stuff.
Linutronics.
Yeah, Linutronics.
And now it's an Intel outfit.
Maybe Canonical already has a better relationship there.
I mean, maybe that made things a little easier.
Is that just wild speculation you think Wimpy?
I've not been part of those discussions, so it would be wild speculation on my part.
I got I got a real spicy matrix message this morning that was quite upset because the user
had just finally made the leap to the 2204 LTS and they discovered that the Firefox package
has been replaced as a snap now.
And they also discovered that when they install certain things from the command line, even
though they did an apt install for a dead package, they end up getting the snap.
And they were they were quite upset about this.
And this is something that we've talked about before on the show, but just to remind people
that, yes, there are certain packages now that are snap packages in here.
And that is not necessarily because Canonical just wants to make everything a snap.
In the case of Firefox, this is something that Canonical and Mozilla had to work out
at Mozilla's request.
There's other things in here that are snaps that you wouldn't expect, like the UFW firewall
is also a snap in 2204, which is pretty surprising, but it makes you wonder if maybe that means
they could update individual sub components of the Ubuntu 2204 system without having to
update all of the packages on the system.
So it'll be interesting to see where that goes.
But our buddy Popeye has released unsnap, which I will mention on the show, which is
essentially a fancy script to help you migrate from snaps to something else.
And I mention this because I think this is this is probably the way it's going to be
for a while, is there's going to be more and more things that are snaps just simply because
that makes it simpler to maintain across multiple versions of Ubuntu.
In some cases, it means it can be maintained directly by the software creator themselves.
And for most users out there, the quote unquote average users that are using Ubuntu, they're
not really going to care much.
But for the people that understand what a snap is or have an opinion, there's going
to be community solutions like this unsnap script that Popeye has created.
UFW is not exclusively a snap.
Like it is available as a snap, but it's not shipped as a snap by default in Ubuntu 22.04.
It's still a deb that's in the standard base system.
So I'm curious where that commentary comes from.
And yes, Popeye did make unsnap.
And if I may be so bold, I have a project called get deb, which is apt get functionality
for installing deb packages that reside outside of the Ubuntu app repository ecosystem.
I will paste a link to that.
It's brand new.
It's super fresh.
I've only I've only published it like a couple of days ago.
But it means that you can install things, for example, that only exist in GitHub releases
pages, for example, and other third party app repositories.
So it's a very handy way to get software that is only available via deb from other means.
Yeah, that's great.
Because I imagine a lot of people that are moving away from snaps probably would prefer
the deb.
As far as UFW, I didn't mean to imply that it was the default way it's configured.
I just mean that there's a lot there's a lot of components you wouldn't expect can actually
be snaps.
In fact, very core components of the OS can actually be snaps.
And I think Mark Shuttleworth recently made comments about flat packs and snaps.
And I think when you parse what Shuttleworth was saying, he's implying that snaps have
functionality that flat packs do not have.
And I think this is kind of one of the things he's talking about is these individual sub
components of the Ubuntu operating system, or distribution can be replaced with snaps
that traditionally flat packs I don't think could replace, which is an interesting idea,
right?
You could have a 2204 LTS, and then have these individual sub components of the distribution
updated independently of all of the other deb packages on the system, which I could
see being compelling for some people that are into that.
Yeah.
And I think that's accurate.
And that's been accurate for a couple of Ubuntu releases now that, you know, you can get applications
as snaps, and they basically they're rolling applications on top of a stable Ubuntu base.
And that's been the case since, well, it was first introduced in 1604, but it wasn't fully
baked then, I think it's fair to say, but certainly by 1804, it was, and that's a means
by which, you know, you can get those applications.
And I think, you know, Mark's comments about the security, particularly the security capabilities
around snaps stands up, like, you know, there are particularly that story resonates with
IoT vendors.
Yeah, if you have app armor, it stands up, I agree.
Yeah.
Yeah, that's the kind of the critical piece is the the snap security stories best with
a system that is fully app armor compatible, right?
And so it's a nuanced thing, really, I mean, I'm splitting hairs at that point.
But you know, the feedback I got this morning, that kind of brought this whole conversation
up was sort of the shock that there had been this transition to the snaps.
And I think it really underscores that a huge majority of the Ubuntu user base is on these
LTSs.
And they don't even bother with the interns, because if they've been trying the interns,
they would have known this was coming.
Because we talked about it in our reviews of the interim releases.
And it's not even that they're not on the interims, but they are not actively engaged
in the news around Ubuntu itself.
Because otherwise, they would have been well aware that this change was coming because
it was made in the last release.
And we did notice there's a couple of after release things to adjust.
I think probably the most well important, not surprising, surprising would be the wrong
descriptor.
But Nvidia has requested the canonical roll back to using Xorg rather than Wayland when
the proprietary driver is loaded.
So hybrid users are still fine, Intel users, AMD users, you're all getting Wayland.
But if you have the proprietary Nvidia driver, and that's your primary video card, Nvidia
asked them to roll that back.
Hmm.
Yeah.
What is that about?
You and I have been, Wes and I have been following a lot of interesting Nvidia Linux related
trends on Linux Action News.
This almost feels like it's fitting into that.
I mean, I don't buy that Nvidia downloaded the beta and did some testing beyond maybe
a couple of people doing it.
Maybe it happens.
And if anybody was going to do it, it would probably be Nvidia.
But most of these companies, most of these commercial companies, despite how much it
would benefit them and how much hassle it would save them and how much user frustration
it would save them, most of them can't be bothered to even begin the testing phase until
sometimes multiple months after the primary release is out.
And so I find it odd that Nvidia has made this request of canonical.
And I wonder if there isn't another shoe to drop, like perhaps some other explanation
for this is yet forthcoming.
We shall see.
But that's a bit interesting.
And also 3D acceleration for guests in VMs with GNOME boxes has been and vert manager
has been disabled, which is a shame.
That's a bit of a bummer.
But it is what it is.
And it really probably deserves to be tested on hardware anyways.
And you know, when you've got an LTS coming out, I get it like these things are going
to perhaps stick around for a while.
So you do want to be a little bit careful.
Yeah.
I mean, I wonder if that's sort of commercially motivated that there are solutions that, you
know, provide those capabilities outside of open source solutions and that, you know,
Nvidia may be supporting their partners in in their endeavors on that front is wild speculation.
I do not know.
It is wild speculation.
I'm bringing that proper British bacon to us.
I love it.
Tasty bacon.
So let's talk about Ubuntu Mate Wimpy because I'm running it right here on the live stream.
And I'm showing it to the people that are here live today.
And this feels like a real refined release.
The theming is just on absolute point.
Of course, it's based on the 2204 base.
This is like a one of the feels like one of those Mate releases that you could install
on a machine and just use it for three years.
Yeah.
Well, thank you.
That's kind of kind of where I was headed with this and and the rest of the team of,
you know, been supporting the development of Ubuntu Mate over the last two years.
But yes, you know, I consider myself now an intrinsic part of the Yuru team.
I was first acquainted with them as a result of putting together, you know, a sprint when
I worked at Canonical when I was leading the Ubuntu desktop team, and we sort of reinvigorated
the significance of Yuru within the Ubuntu project.
And ever since then, I've been, you know, a contributing member of that team, and I've
worked very hard to make sure that all of the good work they've been doing for Ubuntu
and GNOME was reflected in Ubuntu Mate in this release.
And so that's why there's a very firm commitment behind making the Yuru themes front and
center in this release.
So I've been thinking about loading this on my Pi 400 as sort of my standby, always ready
workstation machine.
And I'm wondering if with 2204, is it the case that we're refining the experience and
we're eking more and more performance out of these types of devices, or have we kind
of hit the wall and it's going to be kind of the same as it was for the last couple
of releases?
What are your thoughts?
Again, my information is a little bit out of date, but I can tell you what I know of
the relationship as was between the Raspberry Pi Foundation, or specifically the Raspberry
Pi trading organization and Canonical, which was Raspberry Pi trading and their engineers
were working towards supporting what we would consider the contemporary APIs in the Linux
ecosystem for exposing GPUs, GPU acceleration and cameras.
So you know, traditionally, those are exposed through proprietary APIs and wrappers and
shims.
And they've been moving ever closer to using, you know, the things that we recognize, you
know, drive three, video for Linux, and so on and so forth.
And I think what you're seeing with this release is not just that relationship between Canonical
and the Raspberry Pi Foundation bearing fruit, but the Raspberry Pi Foundation, you know,
following through on their commitment to support those open standards.
I like it, though.
It is nice to see it slowly but steadily get better there.
Absolutely.
So we talked about the artwork.
The AI generated wallpapers have been getting a lot of attention in our audience.
That's what I've been seeing people talk about in our chat rooms.
But I think also the significant thing in here is a pretty solid version of MATE itself,
right?
Yeah.
You know, it's interesting what's happening upstream in MATE Desktop itself, in that the
last sort of two releases, and I can see this when I go and look in.
So there's a service in Ubuntu called errors.ubuntu.com.
You know, when you get those pop ups that says something crashed, blah, blah, blah,
do you want to submit these results?
That's where they go.
And what I'm seeing is the good work that's happening in upstream MATE Desktop to find
and resolve use after free bugs or memory leaks and things of that nature, a number
of those bugs you just see drop off a cliff as you move between like 1804 to where we
are now.
So yes, MATE Desktop in of itself is now looking extremely robust.
And that's not to say the code base that we inherited when it was forked from GNOME 2
was in some way substandard.
You need to remember that that code base was refactored from GTK2 to GTK3 and a whole bunch
of different underlying technologies in order to keep it contemporary and up to date.
And those initial ports were functional, but maybe a little bit rough.
And now we're seeing a refinement of that work.
We sure are.
And it is really noticeable just almost immediately when you fire it up.
So I also kind of want to talk about something that touches on a previous conversation we
just had in the show.
And I want to talk about this from a couple of angles, but it seems like you're cautiously
setting up Ubuntu MATE to be a bit of Switzerland when it comes to packaging.
If users want to use DEBS, fine.
If you want to use a SNAP, fine.
If you want to use a flat pack, fine.
And I feel like that part's a little bit new.
Is that controversial for a flavor to do?
And could you just share some of your thoughts there?
Yeah, sure.
So I will say, I'll prefix this by saying your friend of mine, Joe Ressington, I record
it a podcast with him and Adam earlier this week, which is out now called Linux Downtime.
It's episode 45.
And we dig into the whole, how do you make a distro?
What is involved in making a distribution?
All about.
And we dig into that in more detail.
So that's definitely sort of, you know, homework for listeners to go and have a listen to that.
But on that particular point, this wasn't my individual decision to include flat pack
support in Ubuntu MATE.
In fact, I sent out a tweet earlier today from the Ubuntu MATE account, sort of poking
fun at the very idea.
But it came from the core team, the rest of the team that helped support and make Ubuntu
MATE said to me some weeks ago, well, months ago, in fact, we should include flat pack
support in Ubuntu MATE.
My initial response was, well, I think that's going to be complicated.
It's going to have all sorts of, you know, dependency collisions.
I'm not sure that's viable.
But when I actually looked into it, it was, as I said in the tweet earlier, it was super
simple, barely an inconvenience.
So, you know, steered by that impetus from the team around me, I implemented it, you
know, I did the due diligence around it, made sure that that was a safe technical decision.
And we delivered that.
But that's kind of the expression of Ubuntu MATE as what it's always been, which is really
Ubuntu MATE is a utilitarian distribution, you know, you can make it into the thing you
want it to be, we don't want to overly constrain the options that are available to the people
that use it.
And by making every contemporary packaging format available in Ubuntu, an option for
our users was, you know, in keeping with that, you know, original goal of the project that
we outlined eight or nine years ago.
I like that way of thinking about it, because it often was you turn to a flavor or a derivative
that maybe wasn't an official flavor to get some of the things that maybe Canonical couldn't
bundle, right?
Maybe it used to be codecs, or maybe it was even a kernel with CFS by default.
And that's always been a role out there that these other distributions have served for
the audience that wants that.
And you're right, it is just that only now instead of the MP3 codec, it's Flatpak.
Right.
And you know, you need to understand that, you know, the Ubuntu project is made up of
the significant effort that Canonical put into it.
And again, this is something that I outline in Linux downtime, definitely have a listen.
But more so the different flavors of Ubuntu, we all agree that Ubuntu is a fantastic platform
to develop on and innovate on.
And where we respectfully disagree is how that Linux desktop experience should be presented.
But we are all working together in order to deliver that Linux desktop experience, regardless
of our differences of opinions about how we think that that should be done.
And there's an enormous amount of crossover, you know, especially now, you know, you look
at Ubuntu MATE and Xubuntu, there's a significant proportion of Ubuntu MATE that's delivered
via the Xubuntu desktop.
You look at Ubuntu Chilin, and again, a lot of the underpinnings of Ubuntu Chilin come
from Ubuntu MATE.
And that kind of reciprocal collaboration exists throughout the flavors.
And it's not competition, it's very much a collaborative, you know, feel that happens
between the developers and the development communities around those flavors.
Linode.com slash unplugged.
Go there to get $100 in 60 day credit on a new account, and you go there to support the
show.
I mean, that's really how this works, right?
It lets you know, it lets the sponsor know that you heard about it here.
So that's what the URL is for, it's linode.com slash unplugged.
And it's one we can enthusiastically endorse.
Linode started in 2003, it's one of the very first companies in cloud computing because
they just saw what Linux could do.
And then they built a business around that.
19 years later, they have the absolute best business in the space.
They make cloud computing simple, affordable, and accessible to all.
And they've just rolled out Ubuntu 2204 support.
So they have that up there.
Now if you want to go try it out and play with it, go create a go create a system.
That sounds like a great new server to play with.
Absolutely.
Right.
And you get $100 to do it when you go to linode.com slash unplugged.
You know, they also have all the other districts you probably want to try.
It's pretty impressive, actually.
But I mean, now is the season of Ubuntu 2204, right?
So go experiment with one of their one click deployments, get an entire server in one stack
or go build something up yourself.
And if you ever get stuck, the audience tells me I've never actually had to use the support
as far as oh, no, that's not true.
Just once recently.
That's right.
I know it actually was a great experience.
I had my first after a couple like two and a half years, I finally had like my first
Linode support experience.
And it was as good as all of the audience is always telling me.
Now we use the heck out of things like their S3 compatible object storage, cloud firewalls,
DDoS protection and VLAN support for some fanciness that Westpain gets into every now
and then.
Most of the time, though, I'm just muddling my way through trying to keep the DNS working.
And thankfully, they have a powerful DNS manager that lets you do all of that.
And with pricing 30 to 50 percent cheaper than those major hyperscalers, they have these
esoteric platforms and these crazy UIs where they just want to lock you in forever.
Unlike them, they got great pricing and they'll scale for something you want for yourself.
Like maybe maybe you want to go set yourself up a GitLab instance now that they're getting
a little bit grabsy with the user count there.
Could be a good opportunity.
Yeah, right.
It really does.
You can use it for personal things.
You can use it for your small business things.
Or I mean, if you get more successful than that, Linode will be there right there with
you.
Scales right up.
And it does just a great job.
And they're always there to help you out if you ever need it.
That's why you got to go check it out for yourself and take advantage of that $100.
It's just the perfect opportunity.
They're dedicated to offering the best virtualized cloud computing.
If it runs on Linux, it runs on Linode.
Sign up today at linode.com slash unplugged.
Get $100 in 60 day credit on your new account and you support this here show.
That's linode.com slash unplugged.
All right.
Now that we've talked about Ubuntu, we're going to talk about NixOS, which is actually
Wimpy's fault.
I think it was when Wimpy came on here weeks ago, a couple of months ago, and he's like,
you got to look at NixOS.
It's the future.
You're welcome.
And made me think about it again.
Really?
I know I respect your opinion, Wimpy.
When you say like, this is really something I'm noticing.
I thought, you know, I've had a lot of people tell me it, but Wimpy's on here and he really
sounds convinced.
That's why you keep handing me that Mate ISO.
I was wondering.
I should have tried Nix packaging on Mate.
If I wasn't making Ubuntu Mate, I'd be building a desktop around this NixOS.
Really?
A desktop?
Oh, for sure.
Yeah.
Why?
Because NixOS is the best expression of where the Linux desktop and that intersection of
the desktop and container technologies exist right now.
I can see where you're coming from.
I've been very impressed.
However, I did hit my first like, oh, maybe Nix isn't the right choice for this snag.
And I kind of am a little demotivated and discouraged.
I'll tell you guys about that.
But Wes, I'm curious, I know you've been doing a lot of reading recently about Nix, kind
of getting into the backstory about Nix.
Like, where are you at right now with the challenge?
Yeah, you know, I haven't switched everything over to Nix, let's say, but I've been having
fun just kind of poking around the various places because there's a lot to play with.
I was looking at like trying to understand where flakes are going to fit in a little
bit better.
I was also playing with Home Manager a little bit.
And then I've also been poking around just in my dev side of my life, like, well, yeah,
because, you know, Nix is a build system.
So where does it fit there?
So I was playing with Poetry to Nix, which Poetry is a cool new dependency manager for
Python to help you set up and build and maintain Python projects.
And because it's quite declarative itself, there's some neat wrappers that can help you
just like take your Python project, get it all building with Nix.
And then once you've got it into Nix, you kind of like lift it up and then all the facilities
that Nix has for building you a VM image or just building a nice, really clean little
Python Docker image for you, it can just take that.
So that's been fun.
And just recently, someone made CLJ Nix, which is some Nix helpers for Clojure projects,
which is really in the same vein, but even more niche.
So it was right up my alley, I had to dive right in.
And then just to keep down that track, I don't know how you say it, but there's a version
OS inspired by Nix, Geeks, I think, GNU Geeks, it's quite similar to Nix, except the syntax
is Lisp.
So it's even better somehow.
Now, it's a GNU project, so it's a little more limited.
It's in the GNU ecosystem.
The packages that it has are all free software.
So I don't think I would actually, even though I love anything Lisp, really, I don't think
that I would do it.
But they have been celebrating like 10 years, I think, of the project recently.
So we've got a link in the show notes if you want to hear about some of the stories behind
what it takes to make a project like that.
Yeah, that is really neat.
Okay, so this poetry stuff looks absolutely fantastic.
Link to all of that in the notes.
That's great.
Now, I know, Brent, I know that you had some time recently to play around with Nix on a
Raspberry Pi, which is the direction I want to take this.
I'm curious how your Nix OS challenge is going so far and what your experience has been.
Yeah, I was able to, if you remember last time, use a VM to run a desktop and such.
So I had a good time there.
But I figured I would try, this entire month has been trying to convince Alex that maybe
there's something to Nix, so recently he and I both jumped on a Raspberry Pi to get things
going.
That was a nice opportunity to get me working on a Raspberry Pi for the very first time.
So wait, wait, so this is your first Pi and I think you said you guys are tag teaming
that?
How did this work?
Let's hear a little bit more about that.
Well, we had to cut the Pi in half, you see.
No, Alex has a drawer of trinkets here and there are many Pis there.
So we figured we would get one set up.
He's got a nice corner here that's like dedicated to Pi playing with.
So he let me sort of wipe the system on there and just have a go at it.
And I thought that would be a great way to experience the Pi for the first time.
We ended up sharing a team up session for a little while too.
So we could both SSH in from our laptops and sit comfortably rather than hunching over
the same screen.
Nice.
Which was a nice trick.
That is a good way to do it.
Like gentlemen.
I assume Brent was already in the recliner and just didn't want to get up.
That was your solution.
That was my spot.
That's exactly where he's sitting now.
So what was the experience like on Raspberry Pi?
Is the performance OK?
How did all of that operate?
I was very impressed.
The memory footprint of a freshly booted Raspberry Pi is 100 meg or so on Nixos.
127.
That was with Tailscale and Docker services running.
So I'm subtracting a little just for those as a guess.
But we got to the end of the evenings messing about and I said to Brent, which USB stick
did you use?
And he was like, I didn't.
I used an SD card.
I didn't know better.
Oh, so the performance was better than you expected, I take it, if you didn't notice.
Compared to what I'm used to with like apt install, whatever, and how long apt takes
to do what it does on Raspberry Pi OS and Ubuntu, which is what I'm familiar with.
The Nixos rebuild switch command took about, I don't know, 20 seconds, 25 seconds each
time.
Yeah.
Which gets a little laborious when you're making a one line config change.
But overall, we were left with what a 40 line configuration file which declared the entire
system.
It's very elegant, I've got to say.
And I know Brent said a few minutes ago, he's been trying to convince me.
And there was a few light bulbs went on last night.
And I remember feeling that way about Docker about eight years ago.
I remember a specific moment, Alex, where you got quite excited while we defined Docker
virtualization.
Yes, I did.
Because they spell virtualization correctly.
We tried to spell virtualization with a Z, and it didn't work.
And then I read the documentation properly, and it spelled it with an S. And I was like,
hey, British.
Well, Europeans is what they are.
I think that's a really astute observation, though, about the Docker experience on Nix.
Because in my experience, what I do now is very much entrenched in the container ecosystem.
And I am increasingly finding industries, people, and organizations that are deeply
invested in producing, developing, working on containers on a daily basis that are not
desktop Linux nerds, but that are absolute advocates for Nix and NixOS as the platform
where they curate, develop, and produce their production containers.
It's not perfect, though.
For example, why are there three manuals for NixOS?
I found that as well.
The documentation can be a bit almost too complete, but spread out in a bunch of different
places.
So that can, I don't know, eat up a little bit of time and frustration, but once you
get it.
And quite contradictory, sometimes even the same Wiki page contradicts itself with a little
headline saying, this bit's out of date, when three lines above is the actual correct answer.
That can be quite confusing.
I think that's fair observation, right?
And for everything that I see as potential with NixOS, I'm going to try and frame this
in a way that isn't too incendiary.
But if you think about Debian as being a project, Ubuntu was very much the product, right?
So it took all of the best bits of Debian and productized it, which is why Ubuntu sort
of soared to success.
And I'm not advocating for somebody to create a derivative of NixOS in order to turn what
is an extremely interesting and high potential project into a product.
But I would absolutely love to see the shoulder of the community behind NixOS as it is now
to turn it from exciting project to viable product.
Wimby, what you just said, you put exact words to my thought process here.
In my experience of using Linux distributions, this is very much in like the proto-Debian
stage.
I recognize it's been around for a decade, but it clearly would benefit from a canonical
type organization coming along and making a product out of this thing.
Maybe it's not for that.
It's for people who want to build infrastructure, and maybe that makes sense.
But I am honestly surprised nobody's given a go at it, or if they have, I just haven't
found it yet.
And I agree, but I would dearly love for us to learn from our Linux past and not be the
Manjaro to Arch or the Ubuntu to Debian and just invest in what is NixOS now and get buy-in
and help that existing vibrant community to be more successful.
Yeah, right.
That is the way to do it now.
In 2022, that's the way to do it.
That's the way you got to do it now.
And there is that.
I mean, I have been impressed with the community just on our own matrix and just around, you
know, I think it's true that it's at the stage where the docs don't necessarily always match
and it's kind of living and you really have to be able to figure out the next Nix expression
language to be able to debug what's going on.
But there are a lot of people who are willing to help get you on board if you're willing
to take the step to step over the line and start asking those questions in one of those
spaces.
We had another little odd experience where we were trying to create a user for the first
time.
We actually, funnily enough, managed to lock ourselves completely out of the OS three,
four times.
Well done, gentlemen.
Well done.
This is an essential experience for Brent, I think, on his journey to being an admin.
We deleted the NixOS user, of course, without realizing it, without reading what was right
in front of us, rebooted and went, actually, no, we couldn't reboot.
Because suddenly I typed sudo and it said this user account is disabled or whatever.
So then we had to hard power off the Pi.
Eventually we ended up getting to the point where we created the user of, you know, Alex
or whatever.
But we couldn't log in.
It said this account is disabled.
So we could log in as root and we looked and the default shell was set to Sbin no login.
So we thought, OK, cool, we'll just set the default shell to bash and call it good.
For some reason, setting the default shell for all the users did nothing.
And we had to explicitly specify per user the shell.
And that was quite frustrating.
Oh, yeah, sure.
Couldn't log in because there's no shell to log into.
Yeah, my my discourageness, I guess, discouragement that I've been feeling recently is because
I think I picked the absolute worst project.
It does kind of seem that way, unfortunately.
Yeah, I mean, you guys know that I kind of came into this thinking what I would ultimately
like to do is either rebuild my Raspberry Pi Pi's in my home set up in lady tubes with
Nix or kind of like Moonshot was maybe take a Mac Mini M1 and get Nix OS running on that
and replace three Raspberry Pi's with one M1 Mini running Nix OS.
However, the primary job, I mean, there's a lot of there's a lot of jobs that this thing
would have to do, but the one that actually automates and runs the RV is Home Assistant,
like the absolute mission critical application is Home Assistant.
And it seems like maybe I picked the absolute worst candidate for a Nix install.
Maybe that's good.
I don't know.
And there's more I need to solve.
But I'm kind of disappointed right now in my options.
And not all of it is really Nix's fault.
Some of it is actually the Home Assistant project's fault.
For an example, on an ARM platform, I can install Home Assistant as a Nix module, but
I get less than everything I need.
And what I do need, it's a manual process to add things, even things that like just
are small tweaks to add a component to the Lovelace dashboard.
I have to manually define and configure all of it in Nix configuration files.
And so that means like I can't just do that sort of like I'm in the UI, I'm browsing,
I get inspiration, and I just want to add a module and just try it.
It means no, I have to stop what I'm doing.
I have to SSH and I have to find the right syntax, which I have to find somebody else
who's done an example of this for me.
I think you are running into one of the sort of inherent pain points of taking this approach
of the plus side is it means you've totally specified it and you can make it happen again
instantly.
Right.
But it is not the same.
Now, sometimes you can get the best of both worlds there.
But you're right in this case, like you got to you got to get there quite painstakingly.
And if this was Samba, if this was Nginx, if this was sync thing, this wouldn't be a
total non-issue.
Right.
But the Home Assistant project has what really makes it great.
Our community add ons are these additional add ons that have been created that are easy
to add when you have the entire Home Assistant experience.
I could install Home Assistant as an OCI container, which is probably ultimately what I'll do.
But that uses Podman, which is great, but not my core skill set at the moment when it
comes to container management.
And when it is this home system that actually runs my RV, I'm not super thrilled about that.
You know, I went down a path that went a little closer to more of the Docker compose path
that you're familiar with.
So there might be something to play with there.
But you're right, it is it is different.
And as you say, right, like anything but running the whole sort of expected Home Assistant
experience is a little bit outside the mainstream and limits you on what exactly you can do.
And in that configuration, we're just talking about Home Assistant core.
We're not talking about all the community bits and the supervisor management to get
that.
I basically have to go with a whole VM.
Right.
Is Podman a requirement or, you know, because we got Docker running in a couple of minutes.
Oh, no, you absolutely can do.
It's like the version that's packaged by the community that uses this whole OCI container
process that set up to use Podman.
I think Wes is probably right is I probably could just go the Docker compose route and
go that way.
But, you know, that's me kind of coming to like a new goalpost because the goalpost originally
was a totally orchestrated home automation system that is 100% reproducible and only
changes when I mandate it to change.
That was the goal.
And now I'm kind of basically just getting back to exactly where I'm at now.
I tell you, when you started this NixOS challenge and you set those goals about having like
a standardized JB build for our VPSs and, you know, maybe some of your pies and stuff,
I thought you were mad.
But after doing this last night, genuinely, some light bulbs went on for me and I there's
a real elegance to doing it this way.
You declare everything and you solve a problem one time and then it's solved forever.
Yeah.
And you could see how for a guy like me who like every now and then I get these bursts
of inspiration where I've got project time and I create some great stuff.
It's the one time you can focus, you get really deep in, you'll learn all the stuff, you get
that in your head.
And it's becoming more and more rare because I got, you know, I got young kids and they're
getting older.
I got limited time.
That's where some of my extra time goes now.
So you also have to run a business.
Like Alex says, it's like now that I can solve it once and it also self-documents.
It's self-documenting in how it works too, which is for a guy who never gets around to
the documentation, just beautiful.
So I think what I'm going to do is I'm going to find some sort of like middle ground here.
Part of what makes this tricky is home assistant, the project and many projects do this.
They don't release just a generic arm 64 image.
They have raspberry PI images.
They have maybe, you know, like a Synology image or a pine image, right?
But they don't, for most projects, they don't just offer an effing arm 64 image.
Even though there's more and more just arm 64 systems out there and the Mac M1 systems
are a great example of this.
And not only that, but there's more and more of us out there that might have a Mac with
virtualization and we want to run Linux and we need arm 64 images.
But our community still has it in their little heads that the only people that are using
arm are on raspberry PI's and the home assistant project is included in this group.
And so I can't just download a home assistant arm VM image that I can run on arm 64.
I can get a raspberry PI image.
I can get a raspberry PI three image.
I can get a Synology arm image, but I can't get an arm 64 image and it's so frustrating,
but that's what it is.
So the next stuff has been really great and like my Bitcoin node.
Oh man, I could totally see why I'd want to run Nix on that.
But for my home assistant system, I have to just live with the fact that I'm not getting
all the benefits that Nix and NixOS offer.
It's really the next package manager that offers and it's just going to be the way it
is because that's how the upstream project decided to operate.
And I realize it's not their target, right?
They want people running their own via.
But what I have discovered is some of the absolute best conversations I've had in Linux
recently and just geeking out about Linux stuff have been with other NixOS users.
They're really a clever bunch.
They're solving problems in really cool ways.
And kind of once you start working your way through using Nix, you start thinking about
how you could build systems differently.
And I think it changes the way you think about stuff.
I've been impressed too that, you know, especially for some, you know, a purely functional, you
know, declarative environment, you'd think it might be kind of a little, a little hardcore
or everyone's like really focused.
Kind of like sometimes we see with some of the dogmatism on the free software side of
things.
That's really not, not been my experience.
You know, I think they, they recognize it's a weird way to do things.
It's not what you're used to.
It's not perfect.
There's lots of areas that don't quite work as well as you'd like or have areas that are
lacking polish, but it seems like that's, that's pretty upfront to people like, oh yeah,
that's not perfect, but here's how I might solve that or here's a workaround that could,
that could work for you.
That's exactly been my experience and it's been very positive and it has, it has made
the community, even though it's probably just a portion of the community, right?
But it has made that portion of the community who is on matrix just seem very welcoming
and it has not made me afraid to ask silly questions.
I've not once been told like RTFM you noob, right?
That people have walked me through it and it's been, it's been a good experience and
not just myself.
Okay.
So one of the things that came up in these discussions when we launched the whole next
challenge is should we just be doing this with Ansible?
And I know that was a, that was a position that Alex felt pretty strongly.
So now that you've played with a little bit Alex and had some time, what are your thoughts
now where, where we started this with NixOS or Ansible, is this similar?
Are they solving the same problem?
What's your takeaway?
Both are declarative configuration mechanisms and Ansible requires a reasonable amount of
learning, a couple of days worth of learning, I would say to be proficient in the basics.
And I kind of wanted to equate that to what Brent and I spent last night doing of maybe
what, three or four hours of hacking around.
And we had a fully functional declarative system.
One thing we don't have with the NixOS config file as it stands right now is a way to automate
that with, you know, a Git repository, which Ansible kind of automatically pushes you towards
because there's so many different files to manage, but essentially they're solving the
same problem.
And the learning curve between the two is, I'd say Ansible is probably a bit easier and
using my experience and Brent's experience between the two of us, we could actually solve
quite a lot of problems more quickly than either of us individually, which I thought
was interesting.
But, you know, Nix does take a bit of a, you've got to, I think what you said Brent was forget
everything you've learned about Linux in the last decade.
Yeah.
I wonder if it'd be easier to teach a newbie, someone who hadn't already, you know, dealt
with the standard Linux distros.
Sometimes it is when you don't have all the bias of the past.
Well often we did run into issues that were like, well, I can't, I can't log in because
there's no user.
This is such a strange thing, but it's only because we've assumed that that stuff was
defined.
You know, and once you do it, it's very, very, very, very, very, very easy.
But it took us, you know, a few moments to be like, oh yeah, that is what's happening.
We have to actually tell it that we want it to exist.
So you just kind of have to forget about the assumed defaults.
And you found the GitHub community about NixOS pretty interesting too, right?
Well, we did set up a little GitHub Jupiter broadcasting GitHub discussions where we encouraged
everyone who, you know, thank you for joining us on this NixOS challenge this month.
And we were able to gather a whole bunch of screenshots from the community.
And also there are some amazing discussions on different configurations that people used
and different ways they solve problems.
There's a whole bunch of like additional bonus goals if you want extra meaningless points
on like manager and things like that.
Exactly.
So I would encourage, you know, even if we're sort of softly celebrating the end of the
challenge here today, I think there's a lot of great resources there.
It's worth diving in and reading what the community has shared there.
I was blown away by the knowledge of and, and the knowledge and also the willingness
of our listeners to jump in on this experience with us.
So thank you.
Yeah.
I want to just echo that.
I am very thrilled that so many people were willing to just play along with us on this
just to have fun and that so many people that didn't necessarily engage, they're just willing
to listen to see how our experience went.
And I think we should keep it going because this is going to be something that is ongoing.
And I think the NixOS challenge matrix room should keep going too, because I'm going to
have more questions.
I think what is now sort of the awkward elephant in the room is what do we do about these new
physical servers we have here in the studio that we haven't fully deployed yet?
Do we pause and go with Nix on them?
Like it's-
I think we would do a new poll for the community, but it just has one option.
That makes it legitimate, right?
Right.
Yeah, totally.
You want to hear, let's do that.
That's a dictatorship.
Not democracy.
Let's see.
We'll put it together.
Maybe we'll let the people decide.
May I just add a little summary to what you were just saying about like the GitHub community?
Please.
I think it makes perfect sense that you've got good support and information from the
GitHub community surrounding NixOS, because the people that are using NixOS to get stuff
done are professionals that are using NixOS to get stuff done.
And they're not partisan Linux desktop users.
By and large, they're industry professionals that want great tooling to solve problems
and you get that stack overflow experience from that community.
And it's a bit sad that after all of these years, the partisanship that exists within
the Linux desktop community is still so toxic and unhelpful.
And yet when you look at where work happens and, you know, effective deployments need
to be, you know, illustrated, maintained, documented and helpful support exists, that
exists outside of what we would call mainstream desktop Linux.
Yeah, I think it could make a lot of sense for us.
So here's what I'm going to do.
I'm going to make a poll and I'll put a link in the show notes.
Should we use NixOS as our cloud and local server OS?
There's two options.
Yes.
And stick with Seuss, you lizard haters.
We'll put a link in the show notes at linuxunplug.com slash four five five.
And keep in mind, a vote for yes means that a lot of times we're going to have to come
up with some way to get NixOS running on a VPS because we've managed to do it on Linode.
But I don't know if other VPS providers are going to let us replace their images with
NixOS.
So keep in mind.
But for our local systems and for all of that going forward, I can see a real healthy setup
here.
I'm not trying to backtrack on the tumbleweed, but I could see a healthy setup here of Proxmox,
which has maybe some tumbleweed systems and has some Nix systems.
And we have all of these systems working together.
And what I would possibly see us doing is just moving more and more and more infrastructure
over to these three boxes.
And as we do that, some of them are going to have audience critical facing features
because word has it they are deploying fiber in this neighborhood.
And if they start deploying fiber here, I'm probably going to start spinning up more and
more services.
JBDC becomes a real thing.
Yeah.
So we better get that cooling installed because we're going to have brand.
I heard you.
I heard you.
Totally plus one to Proxmox and also putting the JB community shoulder behind popularizing
Nix OS so that it might become more widespread and a supported option in the, you know, the
VPS and cloud providers.
We may create a little market demand.
I've been quite impressed with the whole Nix OS lustrate and just the ability to get Nix
running just about anywhere and then further Nix OS to take over a box.
There's a lot of potential there too.
Also it feels as bare minimum as an Arch install or a Gen 2 install, but is a fraction of the
time to get it up and running.
You basically got to partition your disk, add a couple of config options, and then you're
good to go and mount a few things, right?
Like it's, Wes and I now on multiple occasions have just stood up a quick Nix OS box to try
something just after a show or something like it's not a big deal to get it going.
I'd just like to add that, you know, working with the Nix community, we invited them to
a snap cross summit.
What's this now?
Three years ago.
And the quickest, easiest way to make a snap is to use Nix, the packaging platform.
I hadn't even thought, but of course.
Yeah.
Wow.
Yeah.
They added it as just a can, another container platform to, you know, create your apps and
it works extraordinarily well.
I like it.
Thank you, Wimpy.
See, this is a perfect episode to have Wimpy with us for this, right?
All right.
Well, so we'll have links to the GitHub if you'd like to still participate.
It's going to go on.
We're going to keep it up.
We're still, we're still going.
We're still learning.
The whole process is really just beginning with this challenge, but I hope that the month
of April was an opportunity for us to get rolling.
This is our last episode in the month of April, if you can believe it.
So let us know what you think and find that Nix challenge room in the matrix.
If you want to chat with other folks and find that GitHub link at linuxonplug.com slash
four 55 bitwarden.com slash Linux, get started with a free trial of teams or an enterprise
plan at bitwarden.com slash Linux, or go try it for free as an individual user.
I am so stoked to have Bitwarden here as a sponsor, you know, like this is way better
than telling you about a mattress, right?
This is telling you about a way to keep your online accounts secure.
And if you're in the enterprise, there's a lot of great options here now too, as well.
You know, you can share and sync your sensitive data, of course, but Bitwarden is fully customizable.
You can turn features on and off with enterprise policies and it's open source.
They have had their core code audited.
They've had people look at it, you know, Bitwarden started in 2016 and they've just been iterating
on this idea to make it better and better and better.
A few years ago, I decided to switch to Bitwarden and I have been absolutely happy with the
choice.
I like the command line option to tell you the truth.
That's been really handy on my SSH boxes, but also I have it installed in my browser
as an extension and on my mobile devices.
So when I bring up something on my mobile device, I can log in with a really long, complicated
password and it supports two-factor authentication on the internet phones from the Apple Corporation.
It supports the face ID for unlocking, like all of that, and of course other biometrics
as well.
And one of the things that gives me confidence in Bitwarden is that they do have a self-hosted
option.
So if I ever get to the point where I'm like, you know what, time to go this way, I can.
But if you also just want to get up and running in minutes, Bitwarden Cloud is a fantastic
option and they have a large active community that's always available on their forums and
Reddit plus support as well.
And I think one of the things that I didn't really understand, but now I can kind of grok
as just maybe a game changer for a lot of you out there, is Bitwarden has introduced
account switching for your personal stuff, your work stuff, your open source project
stuff, you know, all that kind of thing.
You can now isolate it out, you know, separate it out between the different jobs, which is
really a nice feature.
That's perfect.
Yeah.
Right.
You move on from one place.
I don't need, I mean, they're going to change the passwords anyway, right?
Those don't work.
I don't need them cluttering things up.
That's what I used to do.
I used to have it all.
Like that database.
One, that's not a great practice to start with and two, yeah, it's bad for you as well.
It's not good.
It's not good.
And really, let's be honest, you may already know all this.
You might be already using Bitwarden even, but maybe friends, maybe family, maybe others
out there aren't.
Maybe the place you work at hasn't really figured out their password management strategy
yet.
Yikes.
Well, tell them to go to bitwarden.com slash Linux.
Go try it out for yourself or your business and you'll support the show and you're going
to do something.
Just this one thing could really help protect you online.
You know, there's a lot of stuff, but good passwords that are individual for each website,
that's key.
That really makes a big difference and support the show and do that at bitwarden.com slash
Linux.
It's easy to get started.
You just go to bitwarden.com slash Linux.
As usual, we received some great feedback this week.
One of which David wanted us to play with a welder that he works on.
Now normally we don't kind of consider that kind of adult request on the show, but this
one time.
It's true.
Thank you, Wes.
He writes, David writes, if you want to weld with a full feature state of the art welder
running Linux, I can make that happen.
I work as a professional on the equipment in tech support.
The front panel, which is a seven inch touchscreen and many of the boards run Linux.
The front panel is nearly a full Linux stack, including Wi-Fi, NFC and Bluetooth support.
It also hosts a website to manage the hardware, OPC UA server and MQTT for generating metrics.
No way.
I know.
This thing's amazing.
It runs a fairly modern kernel and the R&D guys call the distribution Weld OS internally.
Oh my gosh.
How cool is that?
Weld OS.
What?
I mean, you know, for Linux action show, I used to have this bit at the beginning of
every show where I'd say, this runs Linux.
I never once ever in hundreds of episodes had a welder there, but I mean, is there another
operating system you trust in that kind of environment?
You know, back in the day it would have been Windows CE.
Remember that period of time when CE was just like all kinds of horrible stuff.
They're building a new light rail stop near my house and I can see like it's not operational
yet.
I can see one of the TVs.
It's running Windows.
Oh God.
I know.
I know what you're saying, but.
They need an intervention.
He mentions that licenses and source code are available if you look hard enough or ask
kindly enough.
And Chris, did you do any image searches of this thing?
It's the Fronius TPSI to get a sense of sort of what it looked like.
I had to go take a look.
I'll put a link in the show notes.
It does have what it kind of just looks like a tablet behind a piece of plexiglass installed
at the top of this thing.
I grew up with a family member who was a welder by trade, and these things they they sit out
in the rain.
I mean, they try not to, but it happens.
It's like on the back of their truck.
It gets rained on or they're at a job site and the weather changes.
They get cement on them.
They get dust on them.
They get sawdust like they this is.
You really got to appreciate like this is a computer that is going to live through hell.
Hell doesn't do it justice when you talk about the kind of thing it's going to go through.
So David, thank you.
I think also worth mentioning is that downtime is darn expensive if you're running one of
these.
So I would imagine they put a lot of effort into that.
Also, I appreciate that.
David said that if we're ever in the Chicago area, that he'd totally give us a tour of
the lab that he works at.
Well, you were just talking about that Chicago meetup.
Right?
Yeah, let's do it.
Yeah, let's do it.
All right.
Well, this next bit of feedback wasn't directly sent into the show.
I was listening to the podcasting 2.0 show, which is a fantastic production by Adam Curry
and Dave Jones.
Dave Jones has been on the show before.
And they talk about all of the developments and happenings in the podcast world, which
of course I'm always fascinated by.
And Adam Curry, the pod father was listed.
He now listens to Linux Unplugged, which welcome into the show, Adam.
Thank you for listening.
Glad to have you as one of our audience members.
Absolutely.
I had what I would imagine is a very legitimate question that most new listeners have when
they tune into the show.
And that is, how the hell do you guys try out so many Linux distributions?
They're always testing out new Linux installs.
That's a lot of what they do, or Linux upgrades and distros.
And I'm wondering, does anyone have, you know, so I have, I'm running Linux Mint as my daily
driver.
Now, if I wanted to migrate, I'd be in trouble.
I mean, I have stuff installed.
I sure have some PHP version.
What do these guys do?
They have one laptop that is really their laptop and they use it and they don't mess
with it.
And they have another junker that they change all the time, or is there a simple way to
move your environment over in the Linux environment where you move a lot of stuff over or just
wind up reinstalling everything?
Well, if you use on next shell, you'll see, next shell, you can just load it and go.
No, this is a fair question.
And Adam has it close, but just slightly backwards.
Like one of my nicest machines, which is a ThinkPad, is my distro hopping box most of
the time.
And my workstation that I never really reinstall very often, maybe once every four or five
years, that's an old clunker.
That's the one that doesn't get any love.
And that's my way of doing it.
It's just, I have a separate machine, but each of us has our own approach.
Wes has some crazy approaches that he uses.
Well, yeah, I mean, I'm an animal, so I use QEMU on the command line powered by Kexec
to install things and then reboot to, you know, because sometimes you want to try like
native graphics drivers, but if you don't want to be crazy, I mean, Wimpy has a wonderful
project out there, Quick EMU that, you know, that'll do all the work for you.
Yeah, that's actually my method of choice is, you know, I don't have 27 machines laying
around like most of you do or seem to.
And thus, Wimpy, thank you, thank you.
I've been using Quick EMU a ton, been loving it to do a bunch of, you know, participate
in some testing weeks for the new Ubuntu release and things like that.
So it's been a wild ride and I've loved it.
You're welcome.
And it wasn't invented by accident.
It is the non-animal approach to what, you know, Wes does.
I wouldn't want my experience to be had by anyone else.
So I'm glad that you've sanitized it for the civilized world.
We'll put a link to Quick EMU in the show notes, but it's basically just a project that
is absolutely something we've all wanted forever.
And now it also has a GUI component as well.
So it's not just a command line thing you got to do, but it lets you quickly create
really optimized VMs on a Linux box.
And what Wimpy has done and the people that are working now on the GUI have done is made
it super simple to just say, I want to run this distribution or Windows or whatever it
might be, and then it sets up all the back end, like fiddly stuff for the virtual machine
to make it run at absolute best possible speed and graphics and all that kind of stuff.
Yeah, we just tried it out for the first time the other week and it was nice.
It's great.
Yeah.
There's even a sister project that sets up a GPU pass through and what was I going to
say?
I've forgotten.
But there's, you can do GPU pass through now through a sister project.
Very nice.
And now it is time for the boost.
We got some amazing boosts this week.
Thank you very much.
Tomato deer writes in with 5000 sats.
Thanks for RSS hub recommendation.
I wanted to give honorable mentions to Mini Flux for articles, Wallabag for archival.
So those I think would be considered two picks.
Yeah.
Right.
I think Alex uses Mini Flux, right?
I did for a little while, but the requirements to get it set up were a little bit onerous
and like a compose, like there's a lot of database stuff to futz around with and.
Gotcha.
It works, but it's not for the faint of heart.
It does seem really sweet as far as like if you were somebody who consumes a lot of news
and you bring a lot of different feeds in and you want something that's clean and manageable,
Mini Flux looks great for that.
But he also linked in here Wallabag, which is a web application that lets you save web
pages for reading later.
So it's sort of like an Instapaper or pocket, but one you can self host.
Oh, now that looks handy and what a fun name.
We also covered Wallabag in LUP 378 if you're interested.
Very good.
We got a boost from DFJ 225 four days ago with 4000 SATs.
I was inspired by the show to give the value for value model a try using decentralized
technologies right on, brother.
Thanks for putting out the interesting show to the world.
And you know, something else I've noticed is we're not getting as many boosts, but we're
getting more people who are just streaming SATs as they listen.
And so this has us talking internally about ways that maybe we could expose some of the
membership features to people who are doing this because that's incredible.
It's such a neat thing to open up helipad and see people there as they listen, some
SATs are coming in.
And as part of the value that I want to return to the audience who is sending this boost,
I have set up an old monitor in my office that I've turned on its side with a Raspberry
Pi and I just have the boost up on that screen all the time when I'm in my office.
So it has now become like the fastest way to get a message in front of my face and make
me smile.
These, they come in pew pew and you know, I have it up all the time.
I came in, I came in my office today before I even sat down at my desk.
I heard a pew as a, as a boost came in and it's just so awesome because I actually turned
out, it turned out to be kind of a rough morning.
And so as I was sitting down at my desk, I got a boost and it just, I don't know, it
makes me smile.
Yeah.
Chris smile button.
We could all use one of those.
I have been chatting about ways to maybe automate tooling around those boosts, like capturing
them from the backend of helipads and perhaps putting them into the chat rooms of various
shows and stuff.
Right.
I mean, we like seeing them.
Why not make it easier?
Yeah.
Well, what's cool is when you put all of this stuff behind open source software, right?
You build it with open source software and you put it on an open decentralized network.
Well, guess what we can do?
We can build tools around that because anyone can participate.
So we could build tools that bring all the different boosts into the individual show
docs automatically or put them in front of the host in a way that you could never really
do with email without some sort of really crappy rickety filtering.
And that's why I think boosts are an important part of value for value going forward.
Now value for value is a separate thing that could be any payment system or it could be
your time.
It could be effort.
It is a concept where listeners are asked to share their value.
They get from listening to the podcast and its producers.
In most cases, that means like a dollar amount because that's just what we all have available.
We don't have a lot of time, but it could be other things, too.
It could be one off help.
It could be maybe participating in our mumble room on a Sunday and helping people get their
mic working.
It could, it could be coming up to the RV and helping with your time.
It could be creating a piece of artwork that we use for something.
It could be participating in a show and adding a bit of information.
Like there's so many ways to contribute value back.
It could be giving us a ride in your Tesla or just showing up to our meetup.
I mean, gosh.
Yeah.
All these guys got to think they had a listener come give them a ride this week in their Tesla.
Well, that's extra special.
I'm jealous.
He showed us the full self-driving mode and it was an experience, hey Brent?
It was.
Anyways, it was interesting.
Thank you, Lucas, for giving us the best coffee of the week.
Yes, very much.
Ah, very nice.
Yeah.
So if you'd like to send us a boost, go grab a new podcast app at newpodcastapps.com.
If you don't want to switch podcast apps, I have been experimenting this week with the
Breeze wallet, B-R-E-E-Z.
It is a, it's a lightning destination is essentially what they're trying to create.
It's worth checking out for you antenna pod users out there because I don't know if the
antenna pod project is going to integrate boost directly right now, but they are investigating
integrating with the Breeze wallet.
So you could kind of get ahead of the curve there.
If you're on antenna pod and grab Breeze, you listen in antenna pod, you add one of
our shows to Breeze, and then you just send the boost that way.
It's a pretty great way to do it.
And then, um, breeze itself is open source.
In fact, most of it's GPLed, so it's pretty great.
And what I'm going to do, and Wes let's remember to, let's remember to put this like in the
description.
I'm going to add our lightning node address directly.
So if you want to use something like the boost CLI or some other tool that isn't necessarily
a podcast app, you can, or if you want to open up a channel to us, you absolutely can.
We'll have a link to that, but we'll also put our lightning node address in the description.
And you know what?
Let's build out that peer to peer network because I believe after having done this for
15 years, this is probably going to be a component of the next 15 years of content creation.
And when you combine what Adam and Dave and the team are working on with podcasting 2.0,
you're getting incredible features.
We're going to add real actual new things to podcasting that is needed for a decade.
We're not there just yet for everyone, but we are there for early adopters and it's very,
very exciting.
So if you'd like to participate in that, we'll have all of that information in the show notes.
But we do have an interesting, perhaps risque pick before we get out of here.
I chose this one again.
I guess this is the second week in a row where I have the pick, but really abusing your show
runner privileges.
So I just came across this and I haven't tried it yet, but this is more like a hasn't even
tried it.
I know.
I normally don't do that.
I normally don't.
But I wanted to get the word out there and collect feedback.
So send us a boost.
And if you've tried this, it's Proxmox V7 or the Raspberry Pi, of course.
So it converts.
This isn't something they release as a project.
You can't go get Proxmox for arm boxes.
See my earlier rant in the show, but you can install Raspbian and then use this script
called Pymox to convert that Raspbian install into a full Proxmox node, which can be fun
for like backup testing or maybe you just want to run a couple of things like the gosh
darn Home Assistant VM on your Raspberry Pi.
I know.
Or maybe you want to build more of that arm 64 software goodness that you were missing
out on earlier.
I love to see that, too.
So I'll put a link to that in the show notes.
Pymox 7 is the project name.
And if you've tried this or if you do try it, please let me know what you think, because
I almost did it to one of my production pies this weekend so I could report it on the show.
But I chickened out.
I totally chickened out.
I just didn't want to break the Internet.
I was doing I was doing a lot of projects this weekend, and it was one of those where
like, OK, I got 10 minutes in and I got to go look up like the next step on YouTube.
You know what I'm talking about?
However, I am happy to report that I think I have figured out what has been causing me
some issues in Lady Jups' water system.
Whoa.
I'm feeling like, you know, empowered and shit.
So there's that.
And I got my tires filled up and I got my solar panels clean like I got some work done,
but I just didn't get this.
So your tech life is in disarray, but your physical life looks pretty decent.
But maybe this could be a solution for me.
Maybe this could be a solution.
Maybe I could have my home assistant cake and eat it, too.
And I could have a Proxmox Raspberry Pi 4 compute module that has a Nix OS system that
runs like all of my services except for home assistant and then a separate home assistant
VM.
I just want two VMs.
Let me know if you've tried Pymox.
Send us a booster and email Linux Unplugged dot com slash contact.
Well, let's see.
Let's wrap it up.
Wimpy, it's been forever since you've joined us.
Is there anywhere you want to send folks any websites or, you know, social accounts you
want people to check out?
Two places.
I would like to encourage people to have a listen to Linux Downtime Episode 45 where Joe
and Adam and I have a discussion about what goes into making a Linux desktop distribution.
And if you want to learn more about making Linux desktop distributions and the other
projects I work on, I mentioned DebGET earlier, then head to Wimpy's World and you can find
the places where I stream and you can join me live as I cut some code and work on this
stuff.
Cut some code.
I like that idea.
Thanks, Wimpy.
Alex, should we send people to self-hosted show?
I think that's a pretty good place to send people.
All right.
And Brent, I'm going to tell people what?
Check us out right here.
Okay.
I think is, uh, no, no, no, no.
You should plug now, Brent.
You should go into like, you should go into plug mode and be like, oh, check me out on
Office Hours.
I was on the recent Office Hours episode.
Yeah.
Yeah.
Office Hours number.
Is it one?
No, it's two.
It's two.
Check Chris and I out on Office Hours episode two.
And what's that domain, Brent?
Office dot hair.
Office Hours dot hair.
Oh!
All right.
We're going to have.
Office dot hair is surprisingly taken.
We're going to, yeah.
We're going to.
We obviously need to have a production meeting here because clearly we got to get our plugs
down.
All right.
Well, you can find this here podcast at Linux Unplugged on the Twitters.
We do this show live and we'd love to have you join our mumble room or chat room or just
watch, watch and enjoy.
We do it on Sundays at noon Pacific, 3 PM Eastern.
See you next week.
Same bat time, same bat station.
And of course, don't miss Linux Action News.
If you're not catching Linux, you're not getting everything, which I'm so, I'm so frustrated
with them, Wes.
Yeah.
Cause we saved the best stuff.
We save it for land.
We don't put it in this show.
No.
Anyways, linuxactionnews.com for that.
And uh, you know, go get a little more stuff, Linux stuff.
And of course we always encourage you to keep the conversation rolling.
We've got the contact page, we've got the matrix info, the mumble info, all of it.
Even the links, even the RSS feeds, that's over at linuxunplugged.com.
It's real simple.
It's just linuxunplugged.com.
Thanks so much for joining us on this week's episode of the Unplugged program.
We'll be right back here next Sunday.
All right.
Let's go boat.
JBtitles.com.
These are the final days of the IRC before we all switched to discord.
So let's go.
Let's go.
Yeah.
It's a wise decision that I fully endorse.
And also I'll offer my professional services to help you make that transition.
You should launch Wimpy's matrix to discord conversion services.
No, I've been asked to do that and I've shot that down from the sky every time it's come
up.
I don't need those three extra users on the top of the two and a half thousand users we
already have in the Wimpy's world discord.
What we need is a, we need a good old classic race and whichever title bot gets finished
first for the matrix of the discord.
That's the way we go.
Right?
Oh, well, I mean, Gamma's got a pretty sweet bot going.
Well, the race is on.

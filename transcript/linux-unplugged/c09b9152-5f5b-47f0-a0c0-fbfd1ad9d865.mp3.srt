1
00:00:00,000 --> 00:00:02,800
Drew, you're just so good. So handsome!

2
00:00:02,800 --> 00:00:04,120
Aw, why thank you.

3
00:00:04,120 --> 00:00:06,000
It's true. I know.

4
00:00:06,000 --> 00:00:08,220
Have you seen the way his hair sort of floops to the front?

5
00:00:08,220 --> 00:00:10,760
I was just gonna say, he's got that adorable hair thing going on.

6
00:00:10,760 --> 00:00:14,020
It's just, you read my mind. You read my mind.

7
00:00:14,020 --> 00:00:16,220
Like a giant bunny ear, but for a person.

8
00:00:16,220 --> 00:00:18,480
Hahaha!

9
00:00:18,480 --> 00:00:33,800
Hello, friends, and welcome into 3.73 of your weekly Linux talk show.

10
00:00:33,800 --> 00:00:34,840
My name is Chris.

11
00:00:34,840 --> 00:00:35,840
My name is Wes.

12
00:00:35,840 --> 00:00:36,840
Hello, Wes.

13
00:00:36,840 --> 00:00:38,320
You brought a posse with you today.

14
00:00:38,320 --> 00:00:40,720
I don't know if we have enough seats for all these fine people.

15
00:00:40,720 --> 00:00:44,720
Well, we have a huge show, so, you know, we need a crew.

16
00:00:44,720 --> 00:00:46,880
It's time for an in-studio audience for this one.

17
00:00:46,880 --> 00:00:51,360
This episode is brought to you by a cloud guru, the leader in hands-on learning.

18
00:00:51,360 --> 00:00:53,320
The only way to learn a new skill is by doing.

19
00:00:53,320 --> 00:00:58,140
That's why ACG provides hands-on labs for cloud Linux servers and much more.

20
00:00:58,140 --> 00:01:00,840
Get your hands cloudy at a cloud guru dot com.

21
00:01:00,840 --> 00:01:02,100
Drew, hello.

22
00:01:02,100 --> 00:01:04,360
I'm impressed you managed to find a seat in here today.

23
00:01:04,360 --> 00:01:05,360
I know.

24
00:01:05,360 --> 00:01:06,760
It is so crowded in here.

25
00:01:06,760 --> 00:01:09,200
I think we're breaking some ordinances, aren't we?

26
00:01:09,200 --> 00:01:10,200
Oh, for sure.

27
00:01:10,200 --> 00:01:14,800
But, you know, ever since we hit 3.70, Wes has always rolled with the posse now.

28
00:01:14,800 --> 00:01:17,320
This is the new Wes, so we're going to make it work.

29
00:01:17,320 --> 00:01:19,820
But you like my hat, so no complaints.

30
00:01:19,820 --> 00:01:20,820
That's true.

31
00:01:20,820 --> 00:01:21,820
And I like that you guys are all color matched.

32
00:01:21,820 --> 00:01:22,820
That does actually work.

33
00:01:22,820 --> 00:01:23,820
Look pretty good.

34
00:01:23,820 --> 00:01:26,120
Before we get into the stories, though, we have to bring in our virtual lug.

35
00:01:26,120 --> 00:01:27,120
Time appropriate.

36
00:01:27,120 --> 00:01:28,120
Greetings, mumble room.

37
00:01:28,120 --> 00:01:29,120
Hello.

38
00:01:29,120 --> 00:01:30,120
Hello.

39
00:01:30,120 --> 00:01:31,120
Hello.

40
00:01:31,120 --> 00:01:32,120
Hello.

41
00:01:32,120 --> 00:01:33,120
Woody.

42
00:01:33,120 --> 00:01:34,120
Bienvenido.

43
00:01:34,120 --> 00:01:35,120
Hey.

44
00:01:35,120 --> 00:01:36,120
Rocking 27 people in that virtual lug today.

45
00:01:36,120 --> 00:01:37,560
Good to see all of you.

46
00:01:37,560 --> 00:01:38,560
Hello.

47
00:01:38,560 --> 00:01:42,680
I am thrilled about today's show because not only do we have some fantastic community news

48
00:01:42,680 --> 00:01:47,040
that we're going to get into, but then Wes and I had a lot of fun messing around with

49
00:01:47,040 --> 00:01:53,280
Linode last night and setting up a couple of servers to just hammer ButterFS Send and

50
00:01:53,280 --> 00:01:55,580
ZFS Send versus R-Sync.

51
00:01:55,580 --> 00:02:00,680
And today what we want to do is just give you a plain explanation of what these technologies

52
00:02:00,680 --> 00:02:04,960
are and why it's an example of something that these newer file systems offer and how you

53
00:02:04,960 --> 00:02:05,960
can use it.

54
00:02:05,960 --> 00:02:10,080
But does it really matter when you have R-Sync and you can use R-Sync with any file system?

55
00:02:10,080 --> 00:02:11,080
We'll talk about that.

56
00:02:11,080 --> 00:02:12,800
And it was fun last night.

57
00:02:12,800 --> 00:02:14,720
I mean, Wes stayed up a lot later than I did.

58
00:02:14,720 --> 00:02:15,720
I'm an old man.

59
00:02:15,720 --> 00:02:19,480
I had to go to bed by 11, but we were building these systems and then attaching these disks

60
00:02:19,480 --> 00:02:23,380
and then setting up ZFS and then setting up ButterFS and then throwing data between them

61
00:02:23,380 --> 00:02:26,480
and all in the name of podcasting.

62
00:02:26,480 --> 00:02:30,520
And let me assure you, all of our pools were named after Star Trek engineers.

63
00:02:30,520 --> 00:02:31,520
All right.

64
00:02:31,520 --> 00:02:34,400
Well, let's get into the community news first, though.

65
00:02:34,400 --> 00:02:37,360
This is just great for the LVFS project.

66
00:02:37,360 --> 00:02:43,200
A certain kind of milestone, I mean, you know, numbers are arbitrary, but early this week,

67
00:02:43,200 --> 00:02:51,400
Richard Hughes from LVFS announced that they have provided the 20 millionth firmware update

68
00:02:51,400 --> 00:02:52,400
out to a machine.

69
00:02:52,400 --> 00:02:56,320
Now, here's the thing, though, is it actually could be a lot more than that, Wes, because

70
00:02:56,320 --> 00:03:01,400
there's systems that are behind Nets that just entirely mirror all of LVFS.

71
00:03:01,400 --> 00:03:03,480
So that's all one update.

72
00:03:03,480 --> 00:03:04,480
Yeah.

73
00:03:04,480 --> 00:03:05,480
Yeah.

74
00:03:05,480 --> 00:03:10,840
It really kind of all started, Richard writes on his blog, because of the Colorhug firmware.

75
00:03:10,840 --> 00:03:14,960
And if you have one of those Colorhug devices, in a way, you kind of helped start the whole

76
00:03:14,960 --> 00:03:16,440
LVFS thing off.

77
00:03:16,440 --> 00:03:17,440
Yeah.

78
00:03:17,440 --> 00:03:22,280
I mean, he writes, my experience building open hardware devices really pushed me to

79
00:03:22,280 --> 00:03:30,240
make the LVFS free for all, mostly on the logic that I wouldn't have been able to justify

80
00:03:30,240 --> 00:03:38,360
even a $100 per year subscription and certainly making the service free in all respects meant

81
00:03:38,360 --> 00:03:44,500
that it was almost risk free for companies to test the service.

82
00:03:44,500 --> 00:03:45,500
That's key, right?

83
00:03:45,500 --> 00:03:51,020
Because now the LVFS analyzes uploaded firmware for security problems and it keeps millions

84
00:03:51,020 --> 00:03:52,480
of devices up to date.

85
00:03:52,480 --> 00:03:57,800
And here at Linux Unplugged, we keep reporting on how many new hardware manufacturers are

86
00:03:57,800 --> 00:04:01,400
adopting LVFS because of this open model.

87
00:04:01,400 --> 00:04:03,480
Yeah, it's pretty neat.

88
00:04:03,480 --> 00:04:09,520
And it's not without some lacks still, I think I'd still, there's still some devices I have

89
00:04:09,520 --> 00:04:12,880
that I'd love to see updates, but it's just an assumed now at this point when I get a

90
00:04:12,880 --> 00:04:18,000
new device, which I have, by the way, I don't think I've mentioned this on the show, have

91
00:04:18,000 --> 00:04:19,000
I, Wes?

92
00:04:19,000 --> 00:04:20,760
No, you have not.

93
00:04:20,760 --> 00:04:26,120
So I don't know if Dell just listened to last week's show and realized that they could

94
00:04:26,120 --> 00:04:30,960
probably get me or if they just happen to send this anyways and me being in the laptop

95
00:04:30,960 --> 00:04:36,840
market right now is just a coincidence, they have sent me a review unit of a Dell Precision

96
00:04:36,840 --> 00:04:37,840
5750.

97
00:04:37,840 --> 00:04:41,620
Oh, that's a mean looking rig.

98
00:04:41,620 --> 00:04:42,920
Look this thing up.

99
00:04:42,920 --> 00:04:47,320
As configured, it's $4,900 and in the review, I'll get into why.

100
00:04:47,320 --> 00:04:48,880
Wait, wait, what?

101
00:04:48,880 --> 00:04:49,880
Yeah.

102
00:04:49,880 --> 00:04:50,880
Uh-huh, yeah.

103
00:04:50,880 --> 00:04:54,660
And Dell has put some serious R&D into cooling.

104
00:04:54,660 --> 00:04:59,560
So they have laptop Xeons in this thing that they can run at high speeds because of the

105
00:04:59,560 --> 00:05:03,400
cooling system they've put into this, as well as a super high end graphics card.

106
00:05:03,400 --> 00:05:04,400
I'm trying it out still.

107
00:05:04,400 --> 00:05:07,200
I'm going to try it for a little bit, get past the honeymoon stage, throw a few different

108
00:05:07,200 --> 00:05:11,760
distros at it, run it through its paces and all of that, and I'll give you a report, but

109
00:05:11,760 --> 00:05:17,200
this is so clearly aimed right at whoever would be like kind of that developer market

110
00:05:17,200 --> 00:05:19,440
that might be buying a MacBook Pro.

111
00:05:19,440 --> 00:05:21,320
This is Dell's answer that it's thin.

112
00:05:21,320 --> 00:05:22,380
It's got chamfered edges.

113
00:05:22,380 --> 00:05:28,940
It's got four USB-C ports plus an SD card reader, and it's got much upgraded speakers

114
00:05:28,940 --> 00:05:32,400
compared to what are normally shipped into Dell that it clearly seems like they're trying

115
00:05:32,400 --> 00:05:35,920
to match what the MacBook Pro has in audio quality.

116
00:05:35,920 --> 00:05:38,680
And then just the specking on this thing, which I'll get into in the review, is just

117
00:05:38,680 --> 00:05:40,440
absolutely insane.

118
00:05:40,440 --> 00:05:45,440
And it's obviously Dell saying, hey, by the way, if you heard about this ARM transition

119
00:05:45,440 --> 00:05:48,760
and everything that you target in the cloud runs on x86 and you'd rather just get a Linux

120
00:05:48,760 --> 00:05:54,640
box that could replace your MacBook Pro, have you seen the Dell Precision 5750?

121
00:05:54,640 --> 00:05:55,640
It's really crazy.

122
00:05:55,640 --> 00:06:02,720
I mean, between the like just the really hot RAM and the screen, there's a lot to like

123
00:06:02,720 --> 00:06:03,720
here, right?

124
00:06:03,720 --> 00:06:04,720
Yeah, yeah.

125
00:06:04,720 --> 00:06:05,720
It has screaming RAM in this thing, too.

126
00:06:05,720 --> 00:06:07,080
That's yeah, that's one of the other things they did.

127
00:06:07,080 --> 00:06:10,760
You know, I just know that this thing, it's going to be supported by LVFS now, and that's

128
00:06:10,760 --> 00:06:16,200
a pretty sweet position to be in because I could put Fedora 33 on that thing and I'm

129
00:06:16,200 --> 00:06:20,920
not, I could put PopOS on that, which is going to be kind of particularly ironic, or I could

130
00:06:20,920 --> 00:06:24,080
leave 1804 is what it ships with right now.

131
00:06:24,080 --> 00:06:26,000
And they're all going to get supported with LVFS.

132
00:06:26,000 --> 00:06:27,620
It's pretty nice.

133
00:06:27,620 --> 00:06:29,240
There's other things in the works.

134
00:06:29,240 --> 00:06:30,680
Few hints.

135
00:06:30,680 --> 00:06:35,960
He also gives a notable mention to Logitech, who's done literally millions, shipped literally

136
00:06:35,960 --> 00:06:37,160
millions of firmwares.

137
00:06:37,160 --> 00:06:39,680
Kind of an early adopter, too.

138
00:06:39,680 --> 00:06:44,660
And he gives specific thanks to Lenovo, they've really worked well with the project.

139
00:06:44,660 --> 00:06:48,080
But there's other details in here, too, that I think are worth the click in the show notes

140
00:06:48,080 --> 00:06:51,380
if you guys care about the project.

141
00:06:51,380 --> 00:06:52,380
Some good stuff in here.

142
00:06:52,380 --> 00:06:53,380
It's really neat to see this.

143
00:06:53,380 --> 00:06:57,920
What I really liked about this post by Richard was just, you know, last year he presented

144
00:06:57,920 --> 00:07:03,680
a talk and his slide was, well, LVFS is just a website that runs cron jobs, right?

145
00:07:03,680 --> 00:07:08,760
At the end of the day, it has, you know, it's basically new packaging infrastructure.

146
00:07:08,760 --> 00:07:13,240
But someone in the crowd told him, you didn't just create a website.

147
00:07:13,240 --> 00:07:14,760
You changed an industry.

148
00:07:14,760 --> 00:07:15,760
And that's it, right?

149
00:07:15,760 --> 00:07:18,080
Like, LVFS feels like a pipe dream.

150
00:07:18,080 --> 00:07:21,960
It feels like the kind of firmware updates that we wish we could have in the free software

151
00:07:21,960 --> 00:07:22,960
community.

152
00:07:22,960 --> 00:07:25,400
And yet, it's 2020.

153
00:07:25,400 --> 00:07:26,720
Here we are.

154
00:07:26,720 --> 00:07:28,920
By and large, we have them.

155
00:07:28,920 --> 00:07:35,360
Now, this next story, I don't know, maybe it's going to appeal to millions.

156
00:07:35,360 --> 00:07:38,440
Maybe it's only going to appeal to just me.

157
00:07:38,440 --> 00:07:45,640
But the Zen project is officially porting its hypervisor to the Raspberry Pi 4.

158
00:07:45,640 --> 00:07:47,600
You got to, you know, you got to have the four.

159
00:07:47,600 --> 00:07:49,680
So to be precise, it's really...

160
00:07:49,680 --> 00:07:50,680
Four.

161
00:07:50,680 --> 00:07:51,680
Yeah.

162
00:07:51,680 --> 00:07:54,160
Well, it comes down to some of the hardware components in there.

163
00:07:54,160 --> 00:07:56,880
And this idea kind of bubbled up, what?

164
00:07:56,880 --> 00:07:57,880
Not too long ago?

165
00:07:57,880 --> 00:07:58,880
Yeah.

166
00:07:58,880 --> 00:08:03,680
Well, the idea to do an official port bubbled up from the Zen community, you know, as it

167
00:08:03,680 --> 00:08:09,800
will, and then reached the desk of George Dunlap, chairman of the Zen Projects Advisory

168
00:08:09,800 --> 00:08:10,800
Board.

169
00:08:10,800 --> 00:08:16,040
Dunlap mentioned the idea to an acquaintance who works at the Raspberry Pi Foundation.

170
00:08:16,040 --> 00:08:18,800
Okay, friends in high places.

171
00:08:18,800 --> 00:08:25,360
And was told that around 40% of pies are sold to businesses, rather than hobbyists.

172
00:08:25,360 --> 00:08:29,760
And Chris, I mean, I think at this point, the number of pies in your RV alone, well,

173
00:08:29,760 --> 00:08:31,760
that's a small business, right?

174
00:08:31,760 --> 00:08:36,160
Hmm, you know, now that I'm independent again, I wonder if I could claim it's a business

175
00:08:36,160 --> 00:08:37,160
expense.

176
00:08:37,160 --> 00:08:42,440
Yeah, I mean, I'm doing some serious business with my pies.

177
00:08:42,440 --> 00:08:47,320
And they're now actual production devices, so much so that I could even eventually see

178
00:08:47,320 --> 00:08:51,920
myself being convinced to run a Raspberry Pi in the studio, which is my highest level

179
00:08:51,920 --> 00:08:54,160
of production grade.

180
00:08:54,160 --> 00:08:55,160
We're getting close.

181
00:08:55,160 --> 00:08:56,160
Yeah.

182
00:08:56,160 --> 00:08:57,520
Now, here's the nutty thing, though.

183
00:08:57,520 --> 00:09:02,800
30 million ARM-based pies have been sold as December 2019, and it looks like if you go

184
00:09:02,800 --> 00:09:08,660
by what has been released by the foundation, the Raspberry Pi sales are running at like

185
00:09:08,660 --> 00:09:13,320
a brisk 600,000 plus a month as of April 2020.

186
00:09:13,320 --> 00:09:17,720
The register has a really good piece on all of this that goes through a lot of the details.

187
00:09:17,720 --> 00:09:23,440
And the thing is, Wes, there is some similarities to the Raspberry Pi and the x86 systems that

188
00:09:23,440 --> 00:09:27,600
Zen has run on that made it possible, but then there was also some complications as

189
00:09:27,600 --> 00:09:28,600
well.

190
00:09:28,600 --> 00:09:34,760
Yeah, I mean, the Raspberry Pi 4 system on a chip uses a regular GIC 400 interrupt controller,

191
00:09:34,760 --> 00:09:37,200
which Zen supports out of the box.

192
00:09:37,200 --> 00:09:42,280
And I know, I know, especially here at Linux Unplugged, we're all about KVM, but Zen has

193
00:09:42,280 --> 00:09:45,260
been there for literally decades.

194
00:09:45,260 --> 00:09:49,900
And it's, I mean, it's fair to say it's huge in the hypervisor space.

195
00:09:49,900 --> 00:09:53,680
So the fact that you can just support the interrupt controller on this board, you can

196
00:09:53,680 --> 00:09:56,880
use it for virtualization, that's no small feat.

197
00:09:56,880 --> 00:09:58,360
Yeah, it's a pretty big deal.

198
00:09:58,360 --> 00:10:01,880
Now, the thing is, it's not just that easy.

199
00:10:01,880 --> 00:10:06,360
They had to do a deep dive into the belly of the memory allocator and Linux's address

200
00:10:06,360 --> 00:10:08,320
translation layers.

201
00:10:08,320 --> 00:10:09,320
Better them than us.

202
00:10:09,320 --> 00:10:10,560
Well, no kidding, right?

203
00:10:10,560 --> 00:10:14,280
And then later on, they had to figure out how to handle DMA and physical address conversions.

204
00:10:14,280 --> 00:10:18,880
They had to solve all kinds of problems, but you can read them for yourself.

205
00:10:18,880 --> 00:10:27,120
But the upshot of it is that they're all kind of coming together to land in Linux 5.9.

206
00:10:27,120 --> 00:10:33,520
So by Linux 5.9, when that ships, we could have a fully working Zen hypervisor on the

207
00:10:33,520 --> 00:10:36,000
Raspberry Pi 4 just out of the box.

208
00:10:36,000 --> 00:10:39,800
Now don't get too excited though, Chris.

209
00:10:39,800 --> 00:10:47,000
Linus Torvalds, in his infinite wisdom, has released Candidate 7 and suggested maybe another

210
00:10:47,000 --> 00:10:51,360
cycle of testing will be needed before a full version release.

211
00:10:51,360 --> 00:10:58,020
So it might be just a little while before the official Zen on Pi is able to be deployed.

212
00:10:58,020 --> 00:10:59,520
But it's coming.

213
00:10:59,520 --> 00:11:00,520
Yeah.

214
00:11:00,520 --> 00:11:05,160
And for those of you that can't wait, Project Eve, which is the Linux Foundation's OS for

215
00:11:05,160 --> 00:11:10,240
the IoT network edge devices, will soon publish details on their GitHub page detailing how

216
00:11:10,240 --> 00:11:12,480
you could kind of get it going sooner.

217
00:11:12,480 --> 00:11:15,520
But at the end of the day, I think this is actually a bigger deal for industry that are

218
00:11:15,520 --> 00:11:21,360
developing applications than it really is for guys like us.

219
00:11:21,360 --> 00:11:29,560
That said, I have given virtualization a bit of a poke on the Pi 4 and it's horrible, horrible

220
00:11:29,560 --> 00:11:30,560
right now under KVM.

221
00:11:30,560 --> 00:11:35,800
I mean, just because a thing is possible does not mean you should be doing it and it would

222
00:11:35,800 --> 00:11:39,320
not be usable in any sense of the meaning.

223
00:11:39,320 --> 00:11:45,000
But if they could get something with Zen and I could run a super low end base OS with Zen

224
00:11:45,000 --> 00:11:50,960
on there and then I could have a few VMs, that would give me a sense of security.

225
00:11:50,960 --> 00:11:57,240
Because being production grade also means easy to restore, easy to back up, or at least

226
00:11:57,240 --> 00:11:59,360
there's a straightforward process.

227
00:11:59,360 --> 00:12:04,360
And I don't really have that with the Pis right now beyond DDing the SD cards or something

228
00:12:04,360 --> 00:12:05,360
like that.

229
00:12:05,360 --> 00:12:06,920
Yeah, something gross.

230
00:12:06,920 --> 00:12:07,920
Yeah.

231
00:12:07,920 --> 00:12:09,720
So, anyways, it's great to see it.

232
00:12:09,720 --> 00:12:12,200
Well, let's talk about a little more powerful hardware.

233
00:12:12,200 --> 00:12:14,480
We've got ThinkPads and Dells, oh my, this week.

234
00:12:14,480 --> 00:12:19,480
Let's start with the new XPS 13 and the developer edition, which is what Dell calls the version

235
00:12:19,480 --> 00:12:24,800
preloaded with Ubuntu, has been announced right alongside the new XPS 13.

236
00:12:24,800 --> 00:12:30,380
Now this is based on the Tiger Lake 11th Gen Intel laptop CPU.

237
00:12:30,380 --> 00:12:35,720
They're going to ship with Ubuntu 2004 and Thunderbolt 4.

238
00:12:35,720 --> 00:12:37,360
How about that for fancy?

239
00:12:37,360 --> 00:12:38,360
What?

240
00:12:38,360 --> 00:12:40,040
How does that work?

241
00:12:40,040 --> 00:12:42,720
And isn't it just USB?

242
00:12:42,720 --> 00:12:47,840
I mean, I think what happened is the USB became Thunderbolt, essentially, they've merged into

243
00:12:47,840 --> 00:12:52,640
one Ultra Bolt, maybe, either way, if it's fast, I'm happy.

244
00:12:52,640 --> 00:12:57,360
There's some interesting details in here like fast RAM and going up to 32 gigs.

245
00:12:57,360 --> 00:13:00,800
It'll be available in the US and Canada starting September 30th.

246
00:13:00,800 --> 00:13:04,920
And then they're going to roll it out across European countries to participate with Dell.

247
00:13:04,920 --> 00:13:09,960
The price was not yet announced, but here's the thing in this announcement that I thought

248
00:13:09,960 --> 00:13:10,960
was noteworthy.

249
00:13:10,960 --> 00:13:12,360
The hardware, it looks great.

250
00:13:12,360 --> 00:13:17,040
It's just it's what you expect now from the XPS 13 and they just impressively keep delivering

251
00:13:17,040 --> 00:13:19,320
every single iteration.

252
00:13:19,320 --> 00:13:20,680
And that remains true.

253
00:13:20,680 --> 00:13:27,160
But this thing in here I thought was cool and perhaps a good data point for us to observe.

254
00:13:27,160 --> 00:13:32,160
This is Dell, they write, based on their input from our developer community, we've also added

255
00:13:32,160 --> 00:13:40,120
functionality to allow Windows XPS 13 users to switch their system from Windows to Ubuntu

256
00:13:40,120 --> 00:13:47,040
2004 with a free software tool that Dell is making available, even if they did not originally

257
00:13:47,040 --> 00:13:49,840
purchase the developer edition.

258
00:13:49,840 --> 00:13:53,960
You can set it up so that both operating systems run side by side or that just Ubuntu takes

259
00:13:53,960 --> 00:13:55,760
over completely.

260
00:13:55,760 --> 00:13:57,240
That's got to be a big deal, right?

261
00:13:57,240 --> 00:13:59,480
That they've made a tool to do this?

262
00:13:59,480 --> 00:14:00,480
That is something.

263
00:14:00,480 --> 00:14:06,760
I mean, they're invested at this point, Linux is a thing they're shipping and representing

264
00:14:06,760 --> 00:14:07,760
in their hardware.

265
00:14:07,760 --> 00:14:10,840
I mean, they start with based on input from our developer community.

266
00:14:10,840 --> 00:14:15,240
So I guess this is something that they've gotten from their customers.

267
00:14:15,240 --> 00:14:20,540
This is enough customers either requested or attempted this and contacted support or

268
00:14:20,540 --> 00:14:25,840
whatever the story is, the number, the data metric was high enough for the leadership

269
00:14:25,840 --> 00:14:29,480
or whoever it is at Dell to decide this is worth investing in.

270
00:14:29,480 --> 00:14:31,560
That's got to be noteworthy and that's pretty exciting.

271
00:14:31,560 --> 00:14:34,720
So I mean, the machines look great, too.

272
00:14:34,720 --> 00:14:41,680
I think that's a nice note for our audience just in that consumer choices matter.

273
00:14:41,680 --> 00:14:48,400
If you and your purchasing department perhaps are interested in hardware like this, Dell

274
00:14:48,400 --> 00:14:51,440
seems to be listening.

275
00:14:51,440 --> 00:14:55,600
Our original XPS 13 that I bought forever ago is still going strong, still going strong

276
00:14:55,600 --> 00:14:57,680
in the Fisher household.

277
00:14:57,680 --> 00:14:59,920
That's not to be outdone by Lenovo.

278
00:14:59,920 --> 00:15:03,920
Lenovo is increasing the number of PC and laptops they sell preloaded with Ubuntu.

279
00:15:03,920 --> 00:15:08,040
We talked about how they recently announced some Fedora systems.

280
00:15:08,040 --> 00:15:14,640
And at that time, there were Ubuntu systems on Lenovo devices that you could buy if you

281
00:15:14,640 --> 00:15:19,600
had like a business sales rep window that you could go through to get those machines.

282
00:15:19,600 --> 00:15:25,000
But it seems that barrier is being removed and then they're just cranking up the machines

283
00:15:25,000 --> 00:15:26,000
they support.

284
00:15:26,000 --> 00:15:32,040
Oh, yes, that news builds on that certification program for big companies.

285
00:15:32,040 --> 00:15:39,600
But now there's a comprehensive range of ThinkStation and ThinkPad series laptops that are available

286
00:15:39,600 --> 00:15:46,560
to buy or at least will be from the Lenovo website, most coming preloaded with Ubuntu

287
00:15:46,560 --> 00:15:47,560
2004.

288
00:15:47,560 --> 00:15:51,780
That's a lot of machines and desktops, it's not just laptops.

289
00:15:51,780 --> 00:15:52,780
So that's pretty great.

290
00:15:52,780 --> 00:15:56,560
A lot of nice work systems to choose from right there.

291
00:15:56,560 --> 00:16:02,000
And I hope that means that maybe more businesses could offer some of these systems to their

292
00:16:02,000 --> 00:16:03,000
staff.

293
00:16:03,000 --> 00:16:05,960
Maybe they're already a Dell shop or a ThinkPad shop.

294
00:16:05,960 --> 00:16:11,240
It's just nice to see that integration with IT departments, especially in the age of Apple

295
00:16:11,240 --> 00:16:17,560
embraces ARM and all kinds of custom system on a chips like, you know, the bog standard

296
00:16:17,560 --> 00:16:21,120
x86 platform where you can just run whatever you want.

297
00:16:21,120 --> 00:16:23,520
It's still going surprisingly strong.

298
00:16:23,520 --> 00:16:29,480
Yeah, and in a way, when the hardware kind of reaches a point where the CPUs aren't changing

299
00:16:29,480 --> 00:16:34,480
much and the, and all of that, a way that they can start to differentiate and reach

300
00:16:34,480 --> 00:16:38,200
a new market is by offering Linux.

301
00:16:38,200 --> 00:16:43,160
And it's not like a huge market, but it is something they can do to the machine that

302
00:16:43,160 --> 00:16:44,500
differentiates.

303
00:16:44,500 --> 00:16:47,480
And something tells me the people who are interested in that, well, they're willing

304
00:16:47,480 --> 00:16:51,760
to spend the money.

305
00:16:51,760 --> 00:16:56,640
Lenovo.com slash unplugged, go there, sign up and get a $100 credit towards your new

306
00:16:56,640 --> 00:16:58,880
account for 60 days.

307
00:16:58,880 --> 00:17:05,440
Linode is the world's largest independent cloud for developers founded in 2003 and they're

308
00:17:05,440 --> 00:17:10,600
in 11 global markets with over 800,000 customers, 100% independent.

309
00:17:10,600 --> 00:17:14,120
They launched three years before AWS.

310
00:17:14,120 --> 00:17:17,440
Linode.com slash unplugged, get a $100 credit.

311
00:17:17,440 --> 00:17:21,360
Wes and I use the heck out of Linode for the unplugged program.

312
00:17:21,360 --> 00:17:24,380
And that's actually kind of how it started for me.

313
00:17:24,380 --> 00:17:29,480
Two years ago, I thought I need to have a cloud for my own personal stuff that's separate

314
00:17:29,480 --> 00:17:33,360
from my work stuff because I needed to have that divider now.

315
00:17:33,360 --> 00:17:36,160
I no longer owned all of that, I needed to have my own account.

316
00:17:36,160 --> 00:17:40,520
So I knew of Linode of course, because I've seen them at many of the events I go to, they're

317
00:17:40,520 --> 00:17:44,480
active participants in the community, they have developers on staff who contribute upstream.

318
00:17:44,480 --> 00:17:48,600
So I had seen their name a lot and I knew about Linode, so I thought, okay, I'll go

319
00:17:48,600 --> 00:17:49,600
try them out.

320
00:17:49,600 --> 00:17:53,160
And I had actually known a few developers who had written into Coderadio who told me

321
00:17:53,160 --> 00:17:54,720
they host their stuff on the node.

322
00:17:54,720 --> 00:17:59,840
So I'd gotten over the years, a picture and a snapshot, but I was using a different provider.

323
00:17:59,840 --> 00:18:03,260
You guys might be familiar with who that was, but I thought for myself, I'll try it Linode.

324
00:18:03,260 --> 00:18:04,400
That was two years ago.

325
00:18:04,400 --> 00:18:05,640
And then it just kind of built from there.

326
00:18:05,640 --> 00:18:10,660
I started doing it for my own systems, when I needed like an SSH jump post or something.

327
00:18:10,660 --> 00:18:15,500
But then as we started to go independent again, it just was obvious to build out the infrastructure

328
00:18:15,500 --> 00:18:16,780
on Linode.

329
00:18:16,780 --> 00:18:18,340
We just prefer it.

330
00:18:18,340 --> 00:18:22,720
The Linux ethos is it's baked into the way you just configure the systems and the access

331
00:18:22,720 --> 00:18:24,200
you get and the options you have there.

332
00:18:24,200 --> 00:18:28,000
But just all of it, like I created a volume last night, just as an example, I created

333
00:18:28,000 --> 00:18:30,420
a volume last night and attached it to one of our systems.

334
00:18:30,420 --> 00:18:34,120
It immediately just comes up with a nice little hover over of, here's the command you run

335
00:18:34,120 --> 00:18:35,960
on Linux to mount it with the exact path here.

336
00:18:35,960 --> 00:18:38,660
If you want to format it to a different file system, run this command.

337
00:18:38,660 --> 00:18:42,480
They just, they know what the next step is because they use these systems themselves.

338
00:18:42,480 --> 00:18:46,640
They make it simple to deploy infrastructure and you can rely on it.

339
00:18:46,640 --> 00:18:49,640
We've been running a brand new matrix server on it flawlessly.

340
00:18:49,640 --> 00:18:53,300
And with 11 data centers worldwide, you're going to find something that works for you.

341
00:18:53,300 --> 00:18:56,280
They have shared plans that start as low as $5 a month.

342
00:18:56,280 --> 00:19:00,560
Then of course they have dedicated CPU and GPU systems that are fast and powerful.

343
00:19:00,560 --> 00:19:02,440
And every system has crazy fast networking.

344
00:19:02,440 --> 00:19:05,840
That's one of the reasons why we're doing this test that we're about to talk about on

345
00:19:05,840 --> 00:19:10,680
Linode because we wanted to just blast files as fast as possible at each other.

346
00:19:10,680 --> 00:19:13,000
And so we set up two Linodes to do it.

347
00:19:13,000 --> 00:19:15,700
And you get root access to your server along with their API.

348
00:19:15,700 --> 00:19:17,240
So you get full control.

349
00:19:17,240 --> 00:19:20,440
Let's start by going to linode.com slash unplugged.

350
00:19:20,440 --> 00:19:25,320
That gets you a $100 60 day credit for your new account and it supports the show linode.com

351
00:19:25,320 --> 00:19:26,440
slash unplugged.

352
00:19:26,440 --> 00:19:31,960
And thanks to Linode for supporting the unplugged program.

353
00:19:31,960 --> 00:19:36,920
We had dropped some hints in the past that Microsoft was attempting to support Linux

354
00:19:36,920 --> 00:19:40,120
GUI applications via WSL.

355
00:19:40,120 --> 00:19:44,360
And now we've got some interesting details on how X11 and Wayland applications are going

356
00:19:44,360 --> 00:19:45,640
to work.

357
00:19:45,640 --> 00:19:51,880
And we even saw some demos of good old GIMP running under WSL on Windows 10.

358
00:19:51,880 --> 00:19:55,160
And we have a picture, a literal picture, which we have linked in the show notes for

359
00:19:55,160 --> 00:19:58,520
you, that shows how all of this is going to come together.

360
00:19:58,520 --> 00:20:04,120
And the secret sauce seems to be that Microsoft is doing what just about every other open

361
00:20:04,120 --> 00:20:06,240
source desktop is doing.

362
00:20:06,240 --> 00:20:12,320
And yeah, get this, they're writing their own Western implementation and it's actually

363
00:20:12,320 --> 00:20:13,320
kind of clever.

364
00:20:13,320 --> 00:20:19,000
In a nutshell, what we're doing is we're taking Western, we're taking this RDP backend and

365
00:20:19,000 --> 00:20:23,880
we're extending it to teach it how to basically do remote application.

366
00:20:23,880 --> 00:20:29,000
So instead of remoting the desktop, we remote individual window and then we can take those

367
00:20:29,000 --> 00:20:32,800
window and integrate them with the rest of the Windows desktop.

368
00:20:32,800 --> 00:20:37,800
And of course, they have to do the good old GIMP demo, which is always sort of cliche,

369
00:20:37,800 --> 00:20:41,880
but proves a good point to that, hey, look, complex multi window application is working

370
00:20:41,880 --> 00:20:43,440
on desktop.

371
00:20:43,440 --> 00:20:48,200
Like, okay, all right, well, there's no arguing, you obviously have X apps going.

372
00:20:48,200 --> 00:20:49,200
Right?

373
00:20:49,200 --> 00:20:50,640
I mean, can you edit images?

374
00:20:50,640 --> 00:20:52,720
Well then, you pass the test.

375
00:20:52,720 --> 00:20:54,360
Now how are they doing all of this?

376
00:20:54,360 --> 00:20:59,600
This is the interesting thing and they say, and we'll have a link to the Xorg Developers

377
00:20:59,600 --> 00:21:00,960
Conference presentation.

378
00:21:00,960 --> 00:21:04,040
It's a long presentation, it's like a big old one.

379
00:21:04,040 --> 00:21:08,320
The Xorg Developers Conference ran September 16th through the 18th and this was one of

380
00:21:08,320 --> 00:21:11,200
many presentations that was given there.

381
00:21:11,200 --> 00:21:12,200
XTC?

382
00:21:12,200 --> 00:21:14,360
Yes, that's right, XTC.

383
00:21:14,360 --> 00:21:15,360
Thank you.

384
00:21:15,360 --> 00:21:18,760
Yeah, it's got a cool logo too, which looks like the X logo, which is cool because it's

385
00:21:18,760 --> 00:21:19,760
got an X.

386
00:21:19,760 --> 00:21:26,720
They are modifying and upstreaming changes to free RDP to do all kinds of cool things,

387
00:21:26,720 --> 00:21:32,960
including create PulseAudio syncs, pull that in and push it all to the standard Microsoft

388
00:21:32,960 --> 00:21:33,960
RDP client.

389
00:21:33,960 --> 00:21:38,960
And inside the guest, we're also running a PulseAudio server that's hosting our RDP sync

390
00:21:38,960 --> 00:21:42,120
and RDP source for audio in and audio out.

391
00:21:42,120 --> 00:21:47,720
And we forward those over to our compositor where we're running the RDP backend, but we're

392
00:21:47,720 --> 00:21:54,580
running a greatly enhanced RDP backend.

393
00:21:54,580 --> 00:21:56,940
We added support for things like multiple multi-mon.

394
00:21:56,940 --> 00:22:03,480
So now you can go run all of this in multiple monitors and as the monitor comes and go,

395
00:22:03,480 --> 00:22:06,600
the application will see the monitor comes and go.

396
00:22:06,600 --> 00:22:12,240
I did support for things like cut and paste and things like this over the RDP channel.

397
00:22:12,240 --> 00:22:18,900
So we start essentially to have an RDP server that is fully functional, that allows you

398
00:22:18,900 --> 00:22:24,640
to do almost the same thing that you can do, say, remoting into a Windows box.

399
00:22:24,640 --> 00:22:29,140
And if you go by the diagram that they have, it's free RDP that they are doing this to

400
00:22:29,140 --> 00:22:31,480
and they say they're upstreaming the changes.

401
00:22:31,480 --> 00:22:34,280
I think this is so cool in a number of ways.

402
00:22:34,280 --> 00:22:38,280
Okay, there's the large Microsoft sort of, you know, stand out in the corner.

403
00:22:38,280 --> 00:22:39,960
We'll get to that later.

404
00:22:39,960 --> 00:22:46,600
But just that RDP is the thing that they invented and Weston is the thing from the Linux world

405
00:22:46,600 --> 00:22:54,760
with these like abstractions first design and that you can merge these two so nicely

406
00:22:54,760 --> 00:22:58,680
and have an upstream first mentality to make this all work.

407
00:22:58,680 --> 00:23:01,360
I think that's Linux winning to quote Linus, right?

408
00:23:01,360 --> 00:23:02,360
Yeah.

409
00:23:02,360 --> 00:23:06,240
Like that's Microsoft having to give over and say like, look, this is the way we should

410
00:23:06,240 --> 00:23:07,240
design this.

411
00:23:07,240 --> 00:23:09,160
This is how we should tie our system in.

412
00:23:09,160 --> 00:23:13,200
Even if you guys over in the Linux world haven't even decided that you're all ready to move

413
00:23:13,200 --> 00:23:15,360
over to the Wayland Weston world.

414
00:23:15,360 --> 00:23:16,840
Yeah, we're there.

415
00:23:16,840 --> 00:23:21,800
Yeah, it's remarkable the effort they continue to put into WSL.

416
00:23:21,800 --> 00:23:26,200
I mean, they could have stopped at WSL one.

417
00:23:26,200 --> 00:23:32,960
I remember a time when there were other layers you could put on a Windows system that are

418
00:23:32,960 --> 00:23:33,960
like WSL.

419
00:23:33,960 --> 00:23:39,760
Like they had they actually had a Unix compatibility layer in the past that was on NT four that

420
00:23:39,760 --> 00:23:40,760
you could install.

421
00:23:40,760 --> 00:23:41,760
Right.

422
00:23:41,760 --> 00:23:44,220
I mean, that's kind of what became WSL v1.

423
00:23:44,220 --> 00:23:47,640
When they announced WSL v1, I thought, okay, that's what it's going to be like based on

424
00:23:47,640 --> 00:23:50,160
what I've experienced with their compatibility layers in the past.

425
00:23:50,160 --> 00:23:51,160
This is where it'll stop.

426
00:23:51,160 --> 00:23:54,120
And, you know, they'll patch it and keep it up to date, etc, etc.

427
00:23:54,120 --> 00:23:57,920
That'd be a compatibility layer into their own NT proprietary world.

428
00:23:57,920 --> 00:24:01,560
Boy, is that not what's happened?

429
00:24:01,560 --> 00:24:02,560
Is that not what's happened?

430
00:24:02,560 --> 00:24:04,000
It's like not what's happened at all.

431
00:24:04,000 --> 00:24:09,360
No, it's 2020 and Microsoft is shipping like a regular new Linux kernel.

432
00:24:09,360 --> 00:24:10,360
Yeah.

433
00:24:10,360 --> 00:24:12,400
So let's jump ahead to an email we got in from Chris Thompson.

434
00:24:12,400 --> 00:24:18,000
He says, is Microsoft going to ditch Windows and Linux wins the desktop war?

435
00:24:18,000 --> 00:24:21,160
One can dream, true or not, but the day may come.

436
00:24:21,160 --> 00:24:25,960
And he links to a register article, which we have in the show notes.

437
00:24:25,960 --> 00:24:30,600
But that register article is really about a story that Joe and I touched on in Linux

438
00:24:30,600 --> 00:24:32,960
action news this Sunday.

439
00:24:32,960 --> 00:24:39,000
And that was that Eric Raymond predicted that Windows would essentially co-opt Linux and

440
00:24:39,000 --> 00:24:44,840
that Windows would turn into a compatibility layer, a proton-esque compatibility layer

441
00:24:44,840 --> 00:24:49,920
that runs on top of a Linux kernel, and that eventually developers would start targeting

442
00:24:49,920 --> 00:24:58,040
Linux and the compatibility layer would become just a option for old applications or old

443
00:24:58,040 --> 00:24:59,880
third-party applications.

444
00:24:59,880 --> 00:25:04,180
And that essentially you'd see a flip of what we have today, that you'd have the reverse

445
00:25:04,180 --> 00:25:08,640
instead of a Windows desktop with a Linux compatibility layer, it's a Linux desktop

446
00:25:08,640 --> 00:25:10,360
with a Windows compatibility layer.

447
00:25:10,360 --> 00:25:11,880
Boy, I don't know.

448
00:25:11,880 --> 00:25:16,800
I mean, I think there's still a lot to be said about controlling your own kernel, right?

449
00:25:16,800 --> 00:25:21,920
I mean, they've got a lot of say here and as much as you hear the Microsoft folks playing

450
00:25:21,920 --> 00:25:27,200
very nicely with upstream, and again, we should emphasize that, we really should.

451
00:25:27,200 --> 00:25:32,080
But there's also still a lot in the proprietary world when you're running your own cloud and

452
00:25:32,080 --> 00:25:37,960
when you control the dominant desktop operating system, you can choose when or when not to

453
00:25:37,960 --> 00:25:43,760
play those games because it's your own kernel, they've got their own abstractions and they've

454
00:25:43,760 --> 00:25:48,560
figured out how through Hyper-V, et cetera, to host Linux really well.

455
00:25:48,560 --> 00:25:53,840
So I think they're in a surprisingly a very good point and if anything, they're in a better

456
00:25:53,840 --> 00:26:00,600
spot now from rejecting Linux as a cancer to embracing Linux where they need it, right?

457
00:26:00,600 --> 00:26:05,000
And where not, they've still got their own whole NT stack for the next generation of

458
00:26:05,000 --> 00:26:10,080
Xbox and when they want it in Azure, they've got Linux-based switch hardware.

459
00:26:10,080 --> 00:26:12,280
Yeah, that's how I see it too, Wes.

460
00:26:12,280 --> 00:26:17,720
Eric Raymond makes the argument though that on a longer timetable, you know, maybe a decade

461
00:26:17,720 --> 00:26:23,280
or something, the economic pressures will just kind of force Microsoft to shed their

462
00:26:23,280 --> 00:26:30,280
historical tech legacy and just enjoy the cost benefits of having other developers create

463
00:26:30,280 --> 00:26:34,360
software and he makes the case that you're already seeing this right now.

464
00:26:34,360 --> 00:26:41,200
There's evidence today for you to witness this and that is the release of Edge for Linux.

465
00:26:41,200 --> 00:26:45,840
He says that that shows you what Microsoft is doing is they're taking free or open source

466
00:26:45,840 --> 00:26:52,580
software and they're packaging it up and saying, look, world, we've made this business safe.

467
00:26:52,580 --> 00:26:56,840
The adults have come into the room, they've taken this and they've packaged it up.

468
00:26:56,840 --> 00:27:01,720
Yeah, those kids and crazy doctors over at Google came up with this web browser but what

469
00:27:01,720 --> 00:27:05,980
we've done here is we've gone and given it the Microsoft audit.

470
00:27:05,980 --> 00:27:09,360
We've gone through it and we've added some features that we think make it better for

471
00:27:09,360 --> 00:27:13,160
your business and oh, by the way, you can centrally manage this via group policy and

472
00:27:13,160 --> 00:27:14,400
actor directory.

473
00:27:14,400 --> 00:27:19,600
We think it's going to be great and now you can run it on Linux too and Microsoft saved

474
00:27:19,600 --> 00:27:25,040
themselves a decade of work in investing in a new web browser engine like Triton and instead

475
00:27:25,040 --> 00:27:30,120
were able to adopt Blink and Chromium and just essentially switch over to Edge in like

476
00:27:30,120 --> 00:27:36,080
a year and hit the ground running and he argues that as a company, they're going to look at

477
00:27:36,080 --> 00:27:39,800
that return and say, well that's clearly what we have to just do for the desktop now too

478
00:27:39,800 --> 00:27:41,960
because Azure is really our long play.

479
00:27:41,960 --> 00:27:44,040
I really don't see this argument.

480
00:27:44,040 --> 00:27:51,800
For one, Edge is not exactly the first thing that Microsoft has put out even with a GUI.

481
00:27:51,800 --> 00:27:53,600
No kidding.

482
00:27:53,600 --> 00:28:00,840
Like we've had SQL, PowerShell, VS Code, Teams, all kinds of things have been coming over

483
00:28:00,840 --> 00:28:01,840
to Linux.

484
00:28:01,840 --> 00:28:06,440
It's not like this is some, oh my God, they're suddenly releasing software for Linux.

485
00:28:06,440 --> 00:28:09,440
No, they've been doing it for a while.

486
00:28:09,440 --> 00:28:17,080
This is not really something to start shouting from the rooftops about and I really don't

487
00:28:17,080 --> 00:28:23,360
see the momentum going towards having a switch to Linux as a base.

488
00:28:23,360 --> 00:28:25,000
I just don't see it.

489
00:28:25,000 --> 00:28:29,720
There is way too much investment in the enterprise space and yes, I know that they're pushing

490
00:28:29,720 --> 00:28:36,200
people towards the cloud for as many services as possible, including Active Directory, including

491
00:28:36,200 --> 00:28:43,640
Exchange, all of it is trying to go towards the cloud, but I want people to keep in mind

492
00:28:43,640 --> 00:28:48,360
that we have entities like the US government who are still paying them to support things

493
00:28:48,360 --> 00:28:51,360
like Windows 95.

494
00:28:51,360 --> 00:28:55,120
That's not going away anytime soon.

495
00:28:55,120 --> 00:29:01,440
These big on-prem deployments are huge money makers for Microsoft and they're not just

496
00:29:01,440 --> 00:29:06,780
going to turn away from that and they're not going to tell their clients, hey, switch over

497
00:29:06,780 --> 00:29:10,560
to this thing where Linux is now your base and we're going to support all your stuff

498
00:29:10,560 --> 00:29:12,280
via a compatibility layer.

499
00:29:12,280 --> 00:29:13,480
It's fine.

500
00:29:13,480 --> 00:29:15,680
That doesn't fly from mission critical.

501
00:29:15,680 --> 00:29:16,840
It just doesn't.

502
00:29:16,840 --> 00:29:19,240
I completely agree here.

503
00:29:19,240 --> 00:29:26,320
I think Microsoft has never been in a better position not to need to do this and additionally,

504
00:29:26,320 --> 00:29:31,540
there's going to be one clear tell that you have to see before this is ever going to happen

505
00:29:31,540 --> 00:29:35,460
and if you don't see this, then you don't need to worry about it and that is in some

506
00:29:35,460 --> 00:29:40,680
shape or form, DirectX is either open source or released for Linux or whatever because

507
00:29:40,680 --> 00:29:44,180
there ain't no way Microsoft is abandoning DirectX.

508
00:29:44,180 --> 00:29:48,320
It's a huge part of their strategy and the only way they could do a transition like this

509
00:29:48,320 --> 00:29:52,240
is if they battle tested DirectX in a transition like that.

510
00:29:52,240 --> 00:29:57,280
All the hardware vendors would be utterly upset if Microsoft switched from a Windows

511
00:29:57,280 --> 00:29:59,640
NT kernel to Linux for two reasons.

512
00:29:59,640 --> 00:30:06,000
The first is switching to a Linux kernel means that they would have to constantly work at

513
00:30:06,000 --> 00:30:11,120
their drivers and have to potentially mainline it, which that's a lot of work.

514
00:30:11,120 --> 00:30:15,800
Well, we've been lucky so far with the way that things have gone for the vast majority

515
00:30:15,800 --> 00:30:17,440
of hardware vendors.

516
00:30:17,440 --> 00:30:22,360
We were bootstrapped by people reverse engineering drivers and then it got to a point where there

517
00:30:22,360 --> 00:30:27,880
was this kind of critical mass in certain sectors that led to people starting to do

518
00:30:27,880 --> 00:30:32,600
it kind of first, then putting it and then other people taking that work and then mainlining

519
00:30:32,600 --> 00:30:39,760
it themselves, but you rarely ever see the actual vendors themselves directly contributing

520
00:30:39,760 --> 00:30:42,760
to the Linux kernel to add new drivers.

521
00:30:42,760 --> 00:30:49,480
That just doesn't really happen very often, even today, and basically if the surefire

522
00:30:49,480 --> 00:30:54,700
way for Microsoft to ruin all their relationships with all their hardware partners is to say

523
00:30:54,700 --> 00:30:57,880
that we're moving to a Linux kernel and you have to do this.

524
00:30:57,880 --> 00:31:01,860
Yeah, they'd be asking them to flush years of work.

525
00:31:01,860 --> 00:31:03,080
It's not just the years of work.

526
00:31:03,080 --> 00:31:05,240
It means that they actually have to care.

527
00:31:05,240 --> 00:31:09,160
See the biggest problem with Windows drivers and one of the reasons why it was so notorious

528
00:31:09,160 --> 00:31:16,960
for what 15 years or so is that when you make a Windows driver, you're building it against

529
00:31:16,960 --> 00:31:21,560
a stabilized interface that you can that Microsoft guarantees for X period of years.

530
00:31:21,560 --> 00:31:24,440
Well, once they build the driver, they don't have to care about it.

531
00:31:24,440 --> 00:31:29,320
With the exception of graphics drivers, almost no drivers get updates after they're initially

532
00:31:29,320 --> 00:31:30,320
made and released.

533
00:31:30,320 --> 00:31:35,300
Yeah, fair that that does not work in the Linux world at all.

534
00:31:35,300 --> 00:31:40,400
It seems like every time some big new piece of Microsoft, something XYZ on Linux happens,

535
00:31:40,400 --> 00:31:45,120
this conversation comes up again and an edge, I think for those of us who have been around

536
00:31:45,120 --> 00:31:50,160
a long time, represents a pretty strategic move because we're familiar with how Microsoft

537
00:31:50,160 --> 00:31:55,120
leveraged Internet Explorer in the past, and so it invokes maybe an even a deeper analysis

538
00:31:55,120 --> 00:31:57,560
of this topic, but I think the fundamentals remain the same.

539
00:31:57,560 --> 00:32:03,880
I was pretty optimistic when I read that article, I was pretty optimistic and I said, why not?

540
00:32:03,880 --> 00:32:07,040
But now I hear Drew and also the arguments of made.

541
00:32:07,040 --> 00:32:15,080
I want to say these are really good arguments, and if you know that thing behind Windows,

542
00:32:15,080 --> 00:32:19,200
all the relationship they have with their hardware vendors and everything that sounds

543
00:32:19,200 --> 00:32:20,400
pretty obvious.

544
00:32:20,400 --> 00:32:24,080
So it was really interesting to hear these arguments right now.

545
00:32:24,080 --> 00:32:26,200
So thank you, Neal and Drew.

546
00:32:26,200 --> 00:32:32,520
I think maybe the argument comes up because there is some logic to it like it would make

547
00:32:32,520 --> 00:32:36,120
it would be great for Linux in the sense that a lot of games would come and it would mean

548
00:32:36,120 --> 00:32:41,040
that the Linux user base and the underlying utilities that were all GPL would remain.

549
00:32:41,040 --> 00:32:45,040
And it would mean the unification of developer support and that could be great, like there's

550
00:32:45,040 --> 00:32:48,560
a lot of pros to it, if not a lot of risks.

551
00:32:48,560 --> 00:32:51,940
But it seems obvious that Microsoft would also reap from a lot of benefit of not having

552
00:32:51,940 --> 00:32:55,600
to do the plumbing and the other elephant of the room here that we all are not really

553
00:32:55,600 --> 00:33:01,400
saying out loud is no doubt Windows is a horrible rat's nets.

554
00:33:01,400 --> 00:33:04,720
It's just got to be just a mess of technical debt.

555
00:33:04,720 --> 00:33:09,200
Sounds like you've been looking at the recent Windows XP source code leak, Chris, because

556
00:33:09,200 --> 00:33:13,840
oh boy, there's some embarrassing comments.

557
00:33:13,840 --> 00:33:16,640
No better way to fall asleep at night, but let's talk about something that we can get

558
00:33:16,640 --> 00:33:18,840
our hands on today.

559
00:33:18,840 --> 00:33:22,760
Fedora 33 beta landed a little bit earlier today.

560
00:33:22,760 --> 00:33:28,240
And the nice thing is it was a little delayed, but there's a pro in that the final version

561
00:33:28,240 --> 00:33:33,120
of GNOME 3.38 landed in this beta, so we can actually get some beta testing on that.

562
00:33:33,120 --> 00:33:38,000
Gives a little more time for us to kick the tires on ButterFS as well, which is I think

563
00:33:38,000 --> 00:33:41,560
probably the most notable new feature landing in Fedora 33.

564
00:33:41,560 --> 00:33:43,700
And it seems like things are looking pretty good.

565
00:33:43,700 --> 00:33:44,700
It's in good shape.

566
00:33:44,700 --> 00:33:49,840
I noticed that you haven't mentioned Nano as the default text editor.

567
00:33:49,840 --> 00:33:50,840
You bastard.

568
00:33:50,840 --> 00:33:53,440
That's my silent win right there, Wes Payne.

569
00:33:53,440 --> 00:33:54,920
That's my silent win.

570
00:33:54,920 --> 00:33:59,520
The Nano army is out there, and we just do favors for each other in different parts of

571
00:33:59,520 --> 00:34:01,280
the community silently.

572
00:34:01,280 --> 00:34:07,240
Really we should say things like that swap on Zram, link time optimization.

573
00:34:07,240 --> 00:34:12,560
These are all things that Fedora always does and advances the state of the Linux desktop

574
00:34:12,560 --> 00:34:14,380
because they care, right?

575
00:34:14,380 --> 00:34:21,600
They integrate upstream changes between Linux, the kernel, between GNU and GCC, between LVM.

576
00:34:21,600 --> 00:34:25,160
They make it all work, and we all benefit.

577
00:34:25,160 --> 00:34:29,240
I've been doing like Linux podcasts for like 14 years.

578
00:34:29,240 --> 00:34:36,240
So it kind of takes something special to get me to look forward to reviewing and testing

579
00:34:36,240 --> 00:34:37,240
a distribution.

580
00:34:37,240 --> 00:34:39,520
And some of them, it happens still, thankfully.

581
00:34:39,520 --> 00:34:41,400
And this is definitely one of them.

582
00:34:41,400 --> 00:34:43,040
2004 was one of them.

583
00:34:43,040 --> 00:34:46,920
I'm looking forward to 2010, but I'm really looking forward to Fedora 33 because they're

584
00:34:46,920 --> 00:34:50,240
pushing the envelope, much like 2004 did with CFS.

585
00:34:50,240 --> 00:34:53,760
This is here now with ButterFS and just equally exciting.

586
00:34:53,760 --> 00:35:00,080
And there's something so great about that, to be following this every single day on a

587
00:35:00,080 --> 00:35:04,160
weekly basis for 14 years and still get excited by this stuff.

588
00:35:04,160 --> 00:35:07,040
It shows you how hard these teams really are working on this.

589
00:35:07,040 --> 00:35:09,480
So we're definitely going to review this one on the show.

590
00:35:09,480 --> 00:35:13,880
I can't wait.

591
00:35:13,880 --> 00:35:16,880
How about a little housekeeping, tidied up around here, a few things you should probably

592
00:35:16,880 --> 00:35:17,880
know about.

593
00:35:17,880 --> 00:35:22,560
I'm going to suggest you consider upgrading to the Jupiter Broadcasting All Shows feed.

594
00:35:22,560 --> 00:35:26,280
You can search for the All Shows feed in your podcast catcher or we have a link in the show

595
00:35:26,280 --> 00:35:28,480
notes or a link on the JP site.

596
00:35:28,480 --> 00:35:29,480
There's things in the works.

597
00:35:29,480 --> 00:35:33,940
A lot going on now that we've gone independent and we're, I don't want to say specifics,

598
00:35:33,940 --> 00:35:35,740
but there may be some new stuff and I don't want you to miss it.

599
00:35:35,740 --> 00:35:39,840
The All Shows feed is a great way to get this show, get Linux action news, self-hosted when

600
00:35:39,840 --> 00:35:41,160
it comes out.

601
00:35:41,160 --> 00:35:44,840
There's Koda Radio back on the air that lands every single week.

602
00:35:44,840 --> 00:35:48,560
There's good stuff in the All Shows feed and one spot to get it all.

603
00:35:48,560 --> 00:35:52,220
And when something new comes out, if it does come out, I mean, who knows?

604
00:35:52,220 --> 00:35:54,240
But if it does, that's where it would be.

605
00:35:54,240 --> 00:35:57,520
And if you're looking out there to reach the perfect audience, Jupiter Broadcasting has

606
00:35:57,520 --> 00:36:01,320
some sponsor opportunities in October, it could be a great fit.

607
00:36:01,320 --> 00:36:04,360
Email me chris at jupitabroadcasting.com and let's talk about it.

608
00:36:04,360 --> 00:36:05,760
There could be something there.

609
00:36:05,760 --> 00:36:08,840
I think this could be an opportunity for the community to reach out to other community

610
00:36:08,840 --> 00:36:09,840
members.

611
00:36:09,840 --> 00:36:10,840
chris at jupitabroadcasting.com.

612
00:36:10,840 --> 00:36:16,320
All right, we got really nerdy for this one, Wes.

613
00:36:16,320 --> 00:36:22,160
We got really nerdy and in a way, it was really great to once again go through the process

614
00:36:22,160 --> 00:36:24,800
of setting up a blank system.

615
00:36:24,800 --> 00:36:29,340
This is a temporary system, guys, so we went with Arch because it's simple, clean, lean

616
00:36:29,340 --> 00:36:30,340
and mean.

617
00:36:30,340 --> 00:36:31,340
Okay, wait, wait.

618
00:36:31,340 --> 00:36:32,340
What?

619
00:36:32,340 --> 00:36:38,240
Can I just say this time, this one time, I didn't pick Arch, that was you.

620
00:36:38,240 --> 00:36:42,880
I SSHed into this box and you had picked Arch.

621
00:36:42,880 --> 00:36:43,880
Yeah.

622
00:36:43,880 --> 00:36:48,680
And also, I kind of freshened up the place for you and put on fish shell for you, so

623
00:36:48,680 --> 00:36:49,680
you know.

624
00:36:49,680 --> 00:36:50,680
Which was so nice.

625
00:36:50,680 --> 00:36:55,440
Yeah, I take care, but don't you think for this kind of build where you're trying to

626
00:36:55,440 --> 00:37:00,480
get what you want, modern file system version, you just create a couple of devices, one's

627
00:37:00,480 --> 00:37:04,080
ZFS, one's ButterFS, one's extended for you, so there's a few devices.

628
00:37:04,080 --> 00:37:10,920
I mean, I think we've accepted Arch as the modern Gentoo slash Linux from scratch alternative

629
00:37:10,920 --> 00:37:18,120
where you want to integrate all the upstream changes all at once without the Fedora, important

630
00:37:18,120 --> 00:37:24,400
people like Neil and Carl who tested it first, will just test it and do a worse job.

631
00:37:24,400 --> 00:37:27,360
I've got a new thought technology for you when it comes to Linux distros.

632
00:37:27,360 --> 00:37:29,160
Are you ready for this one?

633
00:37:29,160 --> 00:37:32,600
Arch is my learn and burn distro.

634
00:37:32,600 --> 00:37:33,600
Learn and burn.

635
00:37:33,600 --> 00:37:34,600
You set it up.

636
00:37:34,600 --> 00:37:35,600
You update it.

637
00:37:35,600 --> 00:37:36,600
You make some mistakes.

638
00:37:36,600 --> 00:37:39,040
Well, like after today's episode, I mean, we're not going to keep these two systems

639
00:37:39,040 --> 00:37:40,040
running.

640
00:37:40,040 --> 00:37:41,500
We'll just, we'll literally just delete them.

641
00:37:41,500 --> 00:37:43,480
So you know, for this, it kind of makes sense.

642
00:37:43,480 --> 00:37:45,440
Anyways, back on track.

643
00:37:45,440 --> 00:37:50,400
What we wanted to play around with was a feature that is truly fantastic about these new modern

644
00:37:50,400 --> 00:37:51,720
file systems.

645
00:37:51,720 --> 00:37:56,740
And that is either ButterFS send and receive or ZFS send and receive.

646
00:37:56,740 --> 00:37:58,780
You may have heard these mentioned before.

647
00:37:58,780 --> 00:38:02,320
We wanted to talk a little bit about what they are, what they can do for you, and kind

648
00:38:02,320 --> 00:38:05,680
of the differences between those and say R sync.

649
00:38:05,680 --> 00:38:09,920
So how about in the context of backups, Wes, maybe that's a good place to start.

650
00:38:09,920 --> 00:38:11,200
We've been playing with ButterFS.

651
00:38:11,200 --> 00:38:16,480
We've been playing with ZFS for really a long time.

652
00:38:16,480 --> 00:38:18,500
And we have a lot of small files that change.

653
00:38:18,500 --> 00:38:24,320
So we started thinking about what's a good test case to use for backing these things

654
00:38:24,320 --> 00:38:25,320
up.

655
00:38:25,320 --> 00:38:30,400
And right off the get go, Chris, you set these systems up over at Linode.

656
00:38:30,400 --> 00:38:34,200
ZFS had a bit of a detractor, right?

657
00:38:34,200 --> 00:38:35,200
Yeah.

658
00:38:35,200 --> 00:38:39,760
So looking at this from a standpoint of one disk or two disks, and we want to use this

659
00:38:39,760 --> 00:38:46,760
send and receive to do backups, there is the gotcha that you don't really just format a

660
00:38:46,760 --> 00:38:48,280
disk with ZFS.

661
00:38:48,280 --> 00:38:53,520
You don't just do makefs.zfs and point it at your disk or partition and say, go for

662
00:38:53,520 --> 00:38:54,520
it.

663
00:38:54,520 --> 00:38:55,520
Oh, no.

664
00:38:55,520 --> 00:38:57,400
With ZFS, at least, you have to create a pool to get started.

665
00:38:57,400 --> 00:39:04,400
Honestly, this has been a really fun example of when and where do you use file systems,

666
00:39:04,400 --> 00:39:05,400
right?

667
00:39:05,400 --> 00:39:07,880
Because, okay, so we want to talk about send and receive, right?

668
00:39:07,880 --> 00:39:12,760
We want to talk about backups, talk about copy and write, incremental backups, and where

669
00:39:12,760 --> 00:39:13,920
it made sense.

670
00:39:13,920 --> 00:39:20,360
And I think we've been flirting with, at Linux Unplugged, some of the advantages or disadvantages

671
00:39:20,360 --> 00:39:24,060
of ButterFS and ZFS combined, right?

672
00:39:24,060 --> 00:39:32,520
Because we live in a Ubuntu 2004, or, honestly, 1604 world, where you have ZFS, but we also

673
00:39:32,520 --> 00:39:39,560
live in a world where Chris sets up a Linode Arch server, and you have to compile the ZFS

674
00:39:39,560 --> 00:39:41,720
module from scratch.

675
00:39:41,720 --> 00:39:45,040
And in that world, ButterFS is a lot simpler, right?

676
00:39:45,040 --> 00:39:50,640
I mean, okay, did you not tell me last night, I'm going to set up the ButterFS file system.

677
00:39:50,640 --> 00:39:52,640
Can you set up the ZFS file system?

678
00:39:52,640 --> 00:39:53,640
Yeah.

679
00:39:53,640 --> 00:39:56,960
I just didn't want to mess it up for the test, and with ButterFS, I just did the MakeFS,

680
00:39:56,960 --> 00:40:01,320
BTRFS, pointed at the device, and I can essentially take advantage of things like compression

681
00:40:01,320 --> 00:40:05,000
and snapshots immediately without having to create a pool and setting up any kind of form

682
00:40:05,000 --> 00:40:06,360
of RAID.

683
00:40:06,360 --> 00:40:10,280
While both file systems offer some of the features we're about to talk about, that's

684
00:40:10,280 --> 00:40:13,440
one thing to consider, and I think the point we're trying to drive home is, if you're on

685
00:40:13,440 --> 00:40:19,000
a laptop or you're on, say, a VPS with a single disk, it may be a more appropriate use case

686
00:40:19,000 --> 00:40:23,760
for ButterFS, despite what everybody's going to say about it being scary and dangerous.

687
00:40:23,760 --> 00:40:29,920
If you're in a scenario where you have a large pool of disks, and you have essentially this

688
00:40:29,920 --> 00:40:36,480
desire to have the file system and the operating system be separate, and they don't intertwine,

689
00:40:36,480 --> 00:40:38,520
ZFS is a much better solution there.

690
00:40:38,520 --> 00:40:42,420
Well, maybe not much better, but it's definitely maybe a better use case for ZFS there.

691
00:40:42,420 --> 00:40:47,600
But at the end of the day, they both have this ButterFS, or ZFS send, and on the other

692
00:40:47,600 --> 00:40:53,880
side receive command that allows you to essentially shoot snapshots over the network to another

693
00:40:53,880 --> 00:40:59,640
system running ButterFS receive or ZFS receive, and then replicate that snapshot onto the

694
00:40:59,640 --> 00:41:03,360
file system, which, once it's there, you could treat as a mount, and you could actually mount

695
00:41:03,360 --> 00:41:04,360
it.

696
00:41:04,360 --> 00:41:08,680
I mean, there's a lot of options you have there, and it's R-Sync at the actual file

697
00:41:08,680 --> 00:41:09,680
system level.

698
00:41:09,680 --> 00:41:11,840
Is that too crude of an explanation?

699
00:41:11,840 --> 00:41:16,380
Well, maybe R-Sync plus plus, right?

700
00:41:16,380 --> 00:41:17,380
How so?

701
00:41:17,380 --> 00:41:18,380
Well, okay.

702
00:41:18,380 --> 00:41:24,600
So, we started things off with a split partition setup on our two Linode machines, where we

703
00:41:24,600 --> 00:41:30,320
had an ext4 partition, a ButterFS partition, and a ZFS partition, right?

704
00:41:30,320 --> 00:41:34,120
And we copied the same data set over to each.

705
00:41:34,120 --> 00:41:37,120
And okay, yeah, this was a super nerdy data set.

706
00:41:37,120 --> 00:41:38,980
It was for machine learning.

707
00:41:38,980 --> 00:41:42,000
It's basically a bunch of JPEGs of fruit.

708
00:41:42,000 --> 00:41:43,000
Yes.

709
00:41:43,000 --> 00:41:44,340
Honestly, it's fruit.

710
00:41:44,340 --> 00:41:45,480
It's apples.

711
00:41:45,480 --> 00:41:46,580
It's kiwi.

712
00:41:46,580 --> 00:41:47,580
It's pineapple.

713
00:41:47,580 --> 00:41:50,160
It's all the things that you might want to eat.

714
00:41:50,160 --> 00:41:52,400
Is that a banana, or are you just happy to see me?

715
00:41:52,400 --> 00:41:54,640
Oh, I'm very happy to see you.

716
00:41:54,640 --> 00:41:56,960
Continue on, sorry.

717
00:41:56,960 --> 00:42:02,260
And we set up a script to maybe make this a little more obvious than it needs to be.

718
00:42:02,260 --> 00:42:07,600
We had a Python script set up that would just modify a few pixels in each picture.

719
00:42:07,600 --> 00:42:09,160
You know, they have white backgrounds.

720
00:42:09,160 --> 00:42:12,280
We changed that background to black.

721
00:42:12,280 --> 00:42:14,880
And that's where R-Sync kind of fails.

722
00:42:14,880 --> 00:42:21,320
And ZFS and ButterFS, with their copy-on-write technology, really come to the forefront.

723
00:42:21,320 --> 00:42:26,520
Because if you think about copy-on-write, it's an advanced technology, but it makes

724
00:42:26,520 --> 00:42:28,280
a huge difference.

725
00:42:28,280 --> 00:42:34,500
Because a lot of our storage systems, well, you overwrite in place, right?

726
00:42:34,500 --> 00:42:37,720
You update a file, you just write over the same file.

727
00:42:37,720 --> 00:42:43,240
But with copy-on-write, you only copy if you have to make updates.

728
00:42:43,240 --> 00:42:50,500
And that means with ButterFS and ZFS, when you take snapshots, when you have new subvolumes,

729
00:42:50,500 --> 00:42:53,640
you only store the delta changes.

730
00:42:53,640 --> 00:43:00,240
Whereas R-Sync, well, it needs to go check all of the files that might exist, rehash

731
00:43:00,240 --> 00:43:05,240
them, and figure out what differences actually need to get sent over the wire.

732
00:43:05,240 --> 00:43:11,280
I've heard of use cases where you can use ZFS or ButterFS and over long distances.

733
00:43:11,280 --> 00:43:14,080
There's ways to accommodate that, too.

734
00:43:14,080 --> 00:43:18,520
It's not necessarily a replacement, one or the other, for R-Sync or for the file system

735
00:43:18,520 --> 00:43:20,120
send and receive functionality.

736
00:43:20,120 --> 00:43:24,680
But think of it as this way, everybody, is it's kind of just baked in now.

737
00:43:24,680 --> 00:43:28,600
So when you have a system that has ZFS or ButterFS versus Extended 4, which I'm not

738
00:43:28,600 --> 00:43:33,680
trying to convince anybody to switch, but with Fedora 33 just around the corner, canonical

739
00:43:33,680 --> 00:43:38,040
investing a bunch of work into ZFS, I'm trying to paint a picture for why it's necessary.

740
00:43:38,040 --> 00:43:39,840
Well, that's just it.

741
00:43:39,840 --> 00:43:45,200
Honestly, one of the best aspects of this little experiment that we did, Chris, was

742
00:43:45,200 --> 00:43:51,780
kind of feeling out, like, what does it feel like to use a ZFS system or a ButterFS system

743
00:43:51,780 --> 00:43:54,160
for serious data retention?

744
00:43:54,160 --> 00:43:55,680
So here's the setup we had.

745
00:43:55,680 --> 00:43:58,680
We've got this large data set of images.

746
00:43:58,680 --> 00:44:05,960
We ran a Python script to modify one pixel in each image, and then synced the changes

747
00:44:05,960 --> 00:44:15,360
both via R-Sync and Extended 4, ZFS, and ButterFS, and wanted to figure out, how does that feel?

748
00:44:15,360 --> 00:44:16,360
What does it look like?

749
00:44:16,360 --> 00:44:18,380
And what are the actual transfer rates?

750
00:44:18,380 --> 00:44:22,140
And that actually was sort of where I think you and I did some of our most speculation

751
00:44:22,140 --> 00:44:28,320
is I honestly expected R-Sync to kind of own this, because this is like its thing, I thought,

752
00:44:28,320 --> 00:44:29,320
for sure.

753
00:44:29,320 --> 00:44:30,800
It's its thing, yeah.

754
00:44:30,800 --> 00:44:35,460
But what's fundamental about this is it's integrated the file system layer, and it is

755
00:44:35,460 --> 00:44:36,680
aware of the blocks.

756
00:44:36,680 --> 00:44:38,480
It's aware of the snapshots.

757
00:44:38,480 --> 00:44:39,880
It's just a more integrated tool.

758
00:44:39,880 --> 00:44:44,920
And surprise, surprise, I think in most cases, after your initial sync especially, right,

759
00:44:44,920 --> 00:44:47,800
it sends much faster via file system than R-Sync.

760
00:44:47,800 --> 00:44:48,800
No kidding.

761
00:44:48,800 --> 00:44:51,120
OK, so we should clarify here.

762
00:44:51,120 --> 00:44:57,220
We're using bitmaps, so we're updating exactly one little pixel in that bitmap.

763
00:44:57,220 --> 00:45:01,460
We're just changing it from a white background to a black background.

764
00:45:01,460 --> 00:45:02,460
Not a big deal.

765
00:45:02,460 --> 00:45:07,480
But you could imagine that you've got a large corpus of legal texts or backgrounds

766
00:45:07,480 --> 00:45:08,480
for your website.

767
00:45:08,480 --> 00:45:12,460
It doesn't really matter, but you've got a small incremental update that you need to

768
00:45:12,460 --> 00:45:15,220
sync to a large number of data sets.

769
00:45:15,220 --> 00:45:17,280
A good real world example is Facebook, right?

770
00:45:17,280 --> 00:45:22,440
They've got a huge number of containers they run in production, all powered by ButterFS.

771
00:45:22,440 --> 00:45:27,480
You might update a few packages as your Fedora release comes due, and you've got a few

772
00:45:27,480 --> 00:45:29,840
more updates, right?

773
00:45:29,840 --> 00:45:33,480
You don't want to download each of those individually on each server.

774
00:45:33,480 --> 00:45:37,960
You'd like to just diff the delta, send the delta, and update it.

775
00:45:37,960 --> 00:45:43,120
Yeah, and to that point, Wes, as we saw in that talk that was given by a Facebook developer,

776
00:45:43,120 --> 00:45:45,600
oh no, it was the ButterFS developer who works at Facebook.

777
00:45:45,600 --> 00:45:50,000
He mentioned that they distribute updates to the Facebook website via ButterFS file

778
00:45:50,000 --> 00:45:51,320
system send and receives.

779
00:45:51,320 --> 00:45:53,640
I mean, they can actually just replace portions.

780
00:45:53,640 --> 00:45:54,800
Well, yeah, right?

781
00:45:54,800 --> 00:46:02,580
I mean, to give Docker due credit, they support ZFS and ButterFS as backends because they

782
00:46:02,580 --> 00:46:04,880
support copy and write fundamentally.

783
00:46:04,880 --> 00:46:11,860
So when you want to make a copy, instead of actually overriding in place, you make a new

784
00:46:11,860 --> 00:46:13,920
copy and you change it there.

785
00:46:13,920 --> 00:46:19,160
And that means these file systems can figure out which blocks have changed without having

786
00:46:19,160 --> 00:46:24,280
to do a full differential sync like our sync might do.

787
00:46:24,280 --> 00:46:30,040
This really showed up when we were testing this out because our sync took a full 20 seconds

788
00:46:30,040 --> 00:46:36,160
to go figure out like, oh, all of the images that you had, well, they each had one tiny

789
00:46:36,160 --> 00:46:37,160
bit flipped.

790
00:46:37,160 --> 00:46:44,120
ZFS and ButterFS, they took less than a second to figure out the same thing because they've

791
00:46:44,120 --> 00:46:45,840
got file system smarts.

792
00:46:45,840 --> 00:46:49,400
And of course, that speed advantage just scales the more you're trying to move around and

793
00:46:49,400 --> 00:46:51,120
the more that it's on the file system.

794
00:46:51,120 --> 00:46:52,120
Exactly.

795
00:46:52,120 --> 00:46:55,260
I mean, really, we're doing the minimal level here, right?

796
00:46:55,260 --> 00:47:01,500
We've got like this machine learning initial training data set where it's just a lot of

797
00:47:01,500 --> 00:47:04,200
really nice looking strawberries.

798
00:47:04,200 --> 00:47:09,120
But once you start doing some real stuff, or you've got backups going for years, right?

799
00:47:09,120 --> 00:47:13,960
Where, okay, yes, the presentation from your college days doesn't change a lot.

800
00:47:13,960 --> 00:47:19,040
But maybe you've got some to-do lists, some stuff that does have a little more churn,

801
00:47:19,040 --> 00:47:22,600
is in the complete override in the last five years.

802
00:47:22,600 --> 00:47:23,600
Project files.

803
00:47:23,600 --> 00:47:24,600
Yeah, exactly, Chris.

804
00:47:24,600 --> 00:47:25,600
We know.

805
00:47:25,600 --> 00:47:26,600
You haven't still updated those servers.

806
00:47:26,600 --> 00:47:27,820
That's true.

807
00:47:27,820 --> 00:47:29,580
That's exactly the stuff.

808
00:47:29,580 --> 00:47:32,720
It just sends in the most efficient way possible.

809
00:47:32,720 --> 00:47:40,320
And honestly, it was a really good comparison between where ButterFS is as a enterprise

810
00:47:40,320 --> 00:47:43,320
file system and ZFS.

811
00:47:43,320 --> 00:47:45,000
Yeah.

812
00:47:45,000 --> 00:47:48,480
And I think maybe the folks in the enterprise, I could see how people with an enterprise

813
00:47:48,480 --> 00:47:52,960
mindset would look at ButterFS if they're not familiar with it and go, oh, that's more

814
00:47:52,960 --> 00:47:54,020
of a hobbyist file system.

815
00:47:54,020 --> 00:47:56,360
I don't think it's a fair accusation anymore.

816
00:47:56,360 --> 00:48:00,880
Really, it's funny how many times we've been working with both these file systems for this

817
00:48:00,880 --> 00:48:01,880
show.

818
00:48:01,880 --> 00:48:05,600
And now I just clearly walk away from this going, oh, yeah, okay, I see this use case

819
00:48:05,600 --> 00:48:09,160
for ButterFS that I use it for, and I have a use case for ZFS too.

820
00:48:09,160 --> 00:48:10,920
And that's why I just use both now.

821
00:48:10,920 --> 00:48:14,920
But I'm curious about the differences that you notice in terms of, did you really notice

822
00:48:14,920 --> 00:48:20,160
any speed or any kind of real performance difference between ButterFS and ZFS?

823
00:48:20,160 --> 00:48:22,520
I know it's not a huge workload, but it's a couple of gigs.

824
00:48:22,520 --> 00:48:23,520
Yeah.

825
00:48:23,520 --> 00:48:30,440
I think our training set here was approximately 2.4 gigs of just lovely fruit bitmaps that

826
00:48:30,440 --> 00:48:31,840
we had going.

827
00:48:31,840 --> 00:48:41,240
ZFS by default uses LZ4, at least if you install on Arch, ZFS on Linux with LZ4 compression.

828
00:48:41,240 --> 00:48:45,040
But ButterFS, well, you've got to enable that.

829
00:48:45,040 --> 00:48:46,040
Yeah.

830
00:48:46,040 --> 00:48:47,720
That's kind of what I would expect, though.

831
00:48:47,720 --> 00:48:51,520
I was actually surprised to learn that it was turned on by default, but I think that's

832
00:48:51,520 --> 00:48:54,680
just because Upstream has kind of determined that that's the more...

833
00:48:54,680 --> 00:48:56,920
But here's where that doesn't matter.

834
00:48:56,920 --> 00:48:59,200
You've still got to do your initial sync, right?

835
00:48:59,200 --> 00:49:04,520
So if you want to go listen to self-hosted, you should, because Alex has some great stories

836
00:49:04,520 --> 00:49:11,040
about syncing some of his backups over to his parents' place across the pond in London.

837
00:49:11,040 --> 00:49:12,560
I've done similar.

838
00:49:12,560 --> 00:49:16,440
If you've got big data sets, the initial sync is still going to take a long time because

839
00:49:16,440 --> 00:49:19,400
you've got a lot of bits to send.

840
00:49:19,400 --> 00:49:22,320
What matters is the delta.

841
00:49:22,320 --> 00:49:27,000
And when you've got a fancy copy-on-write file system, you just don't have to worry

842
00:49:27,000 --> 00:49:28,000
that much.

843
00:49:28,000 --> 00:49:35,680
So the crux of our test here at Linux Unplugged was that we modified every file with a few

844
00:49:35,680 --> 00:49:37,480
pixel changes.

845
00:49:37,480 --> 00:49:42,360
Our sync, it basically resynced the entire data set.

846
00:49:42,360 --> 00:49:48,040
Both ZFS and ButterFS, despite the initial slowness maybe that you might contribute to

847
00:49:48,040 --> 00:49:55,860
ButterFS on the initial files end, neither of them took longer than a second to update

848
00:49:55,860 --> 00:49:57,360
all files.

849
00:49:57,360 --> 00:49:58,460
That's a pretty big difference then.

850
00:49:58,460 --> 00:50:00,400
So there's a huge speed difference.

851
00:50:00,400 --> 00:50:02,120
They both offer compression.

852
00:50:02,120 --> 00:50:03,760
What about encryption with ButterFS?

853
00:50:03,760 --> 00:50:08,560
Okay, so now we get into real-world administration details.

854
00:50:08,560 --> 00:50:13,400
Chris, I think it's fair to say that setting everything up, you kind of like ButterFS a

855
00:50:13,400 --> 00:50:14,640
little bit more.

856
00:50:14,640 --> 00:50:19,780
As a traditional Linux sysadmin who just over time I have learned I like things that are

857
00:50:19,780 --> 00:50:25,160
built into the OS that are tools like just kernel-supported stuff.

858
00:50:25,160 --> 00:50:28,000
And ButterFS to me works like a file system I'm familiar with.

859
00:50:28,000 --> 00:50:36,040
I can just go make FS on a disk and it just is there and it's already installed when I

860
00:50:36,040 --> 00:50:37,040
get going.

861
00:50:37,040 --> 00:50:39,040
All I have to do is just install the programs if they're not already installed and it's

862
00:50:39,040 --> 00:50:40,200
just supported in the kernel.

863
00:50:40,200 --> 00:50:42,720
There's no DKMS module I had to worry about.

864
00:50:42,720 --> 00:50:48,040
So those things, and actually not just those things, I got to be honest, the other thing

865
00:50:48,040 --> 00:50:54,000
that really appeals is I'm very commonly working on VPS nows and a VPS system generally has

866
00:50:54,000 --> 00:50:56,760
maybe two disks at most but often just one disk.

867
00:50:56,760 --> 00:51:00,560
And you're pretty abstracted from like whatever that real hardware is, right?

868
00:51:00,560 --> 00:51:03,640
You're not talking to the disk, you're talking to like a network interface.

869
00:51:03,640 --> 00:51:10,780
And ButterFS just seems perfect in that scenario where ZFS, if I owned the box and I had direct

870
00:51:10,780 --> 00:51:17,320
access to the physical machines and I was writing ZFS to the actual disk and ZFS was

871
00:51:17,320 --> 00:51:23,240
managing the actual physical disk and the RAID and it was all top to bottom controlled

872
00:51:23,240 --> 00:51:28,120
by ZFS, I think that would be a pretty good ZFS scenario, especially more than a couple

873
00:51:28,120 --> 00:51:29,120
of disks.

874
00:51:29,120 --> 00:51:33,880
But with ButterFS on my laptop or on a VPS, it just seems to work a lot simpler.

875
00:51:33,880 --> 00:51:39,800
While I don't have a solution for ButterFS encryption today, I know it's coming and I

876
00:51:39,800 --> 00:51:42,560
know I prefer the ButterFS administration style.

877
00:51:42,560 --> 00:51:47,920
It doesn't mean our NAS here in the studio is going to switch off of ZFS though.

878
00:51:47,920 --> 00:51:48,920
I'm not doing that.

879
00:51:48,920 --> 00:51:54,680
No, of course not, well, so that's what's interesting is that it really feels like ButterFS

880
00:51:54,680 --> 00:51:56,400
has a great default, right?

881
00:51:56,400 --> 00:52:01,520
You have a mixed usage file system, maybe you've got some sub volumes that, you know,

882
00:52:01,520 --> 00:52:04,560
they're archival, they're backups, they're things like that.

883
00:52:04,560 --> 00:52:11,320
And then you've got other ones that are just sort of ext4 plus plus, whereas ZFS, you've

884
00:52:11,320 --> 00:52:13,000
got to commit, right?

885
00:52:13,000 --> 00:52:19,200
It doesn't just slot into the sort of Unix layering system, it doesn't slot into how

886
00:52:19,200 --> 00:52:21,320
you manage any of the other volumes.

887
00:52:21,320 --> 00:52:28,920
When you do a df-h grep cfs, well, you get the data set name, not the actual partition

888
00:52:28,920 --> 00:52:30,200
number, right?

889
00:52:30,200 --> 00:52:38,000
So it just doesn't play nice with some of how you might use the Linux system as an admin.

890
00:52:38,000 --> 00:52:45,680
But at the same time, it's a standalone enterprise system and some of the biggest wins it has

891
00:52:45,680 --> 00:52:55,880
are resumable send and receive, built in support for compression, and recently, native encryption.

892
00:52:55,880 --> 00:53:00,840
So if you just want to send some snapshots, you want to catch things up on the other side,

893
00:53:00,840 --> 00:53:03,160
ButterFS is the easiest way to go.

894
00:53:03,160 --> 00:53:06,680
And I didn't actually expect this conversation to kind of go into this, but it is sort of

895
00:53:06,680 --> 00:53:11,960
the logic for ButterFS, and maybe with Fedora 33 around the corner, it's on our minds.

896
00:53:11,960 --> 00:53:17,040
But I'll also say this, and it's not as silly as it used to sound, but you're not going

897
00:53:17,040 --> 00:53:19,320
to run ZFS on a Raspberry Pi.

898
00:53:19,320 --> 00:53:25,160
And remember that number we just talked about have been 30 million Pis sold.

899
00:53:25,160 --> 00:53:29,800
And that number is based on April data, so it's more than 30 million.

900
00:53:29,800 --> 00:53:33,160
And you can run ButterFS like a champ on my Raspberry Pi at least.

901
00:53:33,160 --> 00:53:34,160
You sure can.

902
00:53:34,160 --> 00:53:37,400
So I think there's a lot of use cases for it still.

903
00:53:37,400 --> 00:53:40,420
And so I think we've made our case.

904
00:53:40,420 --> 00:53:42,840
There's obviously a lot of reasons why it's pretty great.

905
00:53:42,840 --> 00:53:46,100
The send and receive functionality, though, is something that I really encourage people

906
00:53:46,100 --> 00:53:51,040
play with once they start switching over to these file systems, whichever one it may be,

907
00:53:51,040 --> 00:53:54,120
because this could change your backup game a little bit.

908
00:53:54,120 --> 00:53:57,300
And think about it from an application restoration standpoint.

909
00:53:57,300 --> 00:54:05,300
You could have a container host or a VM host, and you snapshot and you ButterFS or ZFS send

910
00:54:05,300 --> 00:54:08,680
that and put it on another machine that's a hot standby.

911
00:54:08,680 --> 00:54:13,840
Mount it as a sub volume, get going, spin the containers right back up, zero downtime.

912
00:54:13,840 --> 00:54:18,480
It was kind of fascinating to see how much of a difference it was between ButterFS and

913
00:54:18,480 --> 00:54:19,480
ZFS.

914
00:54:19,480 --> 00:54:24,840
So like on our little test setup over at Linode, I was taking snapshots on ButterFS, I was

915
00:54:24,840 --> 00:54:30,320
taking snapshots on ZFS, and in the ZFS world, it was like sort of a logical entity, right?

916
00:54:30,320 --> 00:54:33,520
I had a data set, I would take various snapshots.

917
00:54:33,520 --> 00:54:35,200
They wouldn't show up on the file system.

918
00:54:35,200 --> 00:54:36,200
No, of course not.

919
00:54:36,200 --> 00:54:39,960
Those were like logical entities that existed within ZFS.

920
00:54:39,960 --> 00:54:46,480
But in the ButterFS world, those all existed, like you had to pre-plan stuff so that you

921
00:54:46,480 --> 00:54:51,360
had like a top layer namespace that you would take snapshots underneath.

922
00:54:51,360 --> 00:54:54,720
And if you want to do a send or receive in ButterFS, you got to make sure that those

923
00:54:54,720 --> 00:54:57,600
snapshots are read only.

924
00:54:57,600 --> 00:55:01,140
In ZFS, well, they're always read only.

925
00:55:01,140 --> 00:55:05,840
That's good and bad because you get a little more flexibility depending on that and how

926
00:55:05,840 --> 00:55:08,520
you think about these things.

927
00:55:08,520 --> 00:55:10,480
It's just fascinating.

928
00:55:10,480 --> 00:55:12,440
You can do the same thing on both.

929
00:55:12,440 --> 00:55:19,800
I think ZFS has more maturity by far in the sense of encryption, native compression, and

930
00:55:19,800 --> 00:55:23,440
resumability for send and receive.

931
00:55:23,440 --> 00:55:28,280
But ButterFS has the advantage that it's just sort of built into a modern kernel you might

932
00:55:28,280 --> 00:55:29,280
use.

933
00:55:29,280 --> 00:55:30,280
That's true.

934
00:55:30,280 --> 00:55:33,480
And you could turn on compression and take advantage of that.

935
00:55:33,480 --> 00:55:35,440
And you could just not use any of these features.

936
00:55:35,440 --> 00:55:39,040
You don't even have to use copy on write, and you just get a pretty decent file system

937
00:55:39,040 --> 00:55:40,040
for your laptop.

938
00:55:40,040 --> 00:55:43,860
I think that's what has me so excited about this.

939
00:55:43,860 --> 00:55:47,880
This is what an enterprise grade file system does, is it has this kind of functionality.

940
00:55:47,880 --> 00:55:54,360
And I've watched over the years as it's sort of been lacking on these Linux workstations.

941
00:55:54,360 --> 00:55:59,120
We sell these machines supposedly for developers, but they have a file system that has the functionality

942
00:55:59,120 --> 00:56:02,320
of the 90s or actually even the 80s.

943
00:56:02,320 --> 00:56:07,240
Meanwhile, Windows has shadow copies and NTFS and with granular permissions.

944
00:56:07,240 --> 00:56:12,160
I'm not a huge NTFS fan, but I have to admit they seem to have kept it in decent shape

945
00:56:12,160 --> 00:56:14,160
over the years for what it is.

946
00:56:14,160 --> 00:56:19,480
People has APFS, which offers not as many features as these nicer file systems that

947
00:56:19,480 --> 00:56:23,640
we have, but definitely more than extended four has.

948
00:56:23,640 --> 00:56:29,700
And it's just kind of expected on a workstation for the file system to have a workstation

949
00:56:29,700 --> 00:56:31,320
grade functionality.

950
00:56:31,320 --> 00:56:37,720
And now just by installing Ubuntu 2004 or by installing Fedora 33 in the near future,

951
00:56:37,720 --> 00:56:42,040
you get this stuff and you never have to touch it, but it's there if you want it.

952
00:56:42,040 --> 00:56:44,800
Along with a bunch of other really cool stuff that's built into these that we haven't even

953
00:56:44,800 --> 00:56:46,360
touched on today.

954
00:56:46,360 --> 00:56:51,340
But the send and receive functionality specifically is worth a little more attention.

955
00:56:51,340 --> 00:56:53,600
Maybe it's a little early now, but we want to get it in front of you.

956
00:56:53,600 --> 00:56:58,100
So that way when you start using a distribution with these file systems, if you don't already,

957
00:56:58,100 --> 00:56:59,640
you can kind of see some of the advantages.

958
00:56:59,640 --> 00:57:05,600
And we also want to arm you with actual knowledge about this file system, ButterFS that's built

959
00:57:05,600 --> 00:57:11,520
into Linux and try to give you some counterpoints to what you'll always hear about ZFS and how

960
00:57:11,520 --> 00:57:12,520
great it is.

961
00:57:12,520 --> 00:57:16,060
It's not that it's a bad file system or it's not that it's a good file system.

962
00:57:16,060 --> 00:57:19,940
It's different use cases and there are advantages to both.

963
00:57:19,940 --> 00:57:22,980
And I hope we've made that point and I hope that we've given you kind of that ammo so

964
00:57:22,980 --> 00:57:26,760
when you're in those conversations, at least for yourself, you know what the reality is,

965
00:57:26,760 --> 00:57:31,560
is that not one file system is the answer to all, but the situation's getting better

966
00:57:31,560 --> 00:57:33,960
for all Linux users over time.

967
00:57:33,960 --> 00:57:39,240
And pretty soon I hope that it's the default on all Linux desktops, but that's just crazy

968
00:57:39,240 --> 00:57:40,240
Chris.

969
00:57:40,240 --> 00:57:43,280
And then we have some feedback we should probably get to because we're going to be going on

970
00:57:43,280 --> 00:57:47,800
forever if we keep talking about file systems.

971
00:57:47,800 --> 00:57:51,280
I don't know what it is, but we love talking about file systems.

972
00:57:51,280 --> 00:57:55,240
Thomas writes in with a question about to do apps and this is something we need to talk

973
00:57:55,240 --> 00:57:58,680
about because otherwise we just talk about file systems all day and I got to keep on

974
00:57:58,680 --> 00:57:59,680
track.

975
00:57:59,680 --> 00:58:00,680
So to do app is perfect.

976
00:58:00,680 --> 00:58:05,720
And he says, you recently covered GNOME or I'm sorry, GNOME to do, which got me going

977
00:58:05,720 --> 00:58:06,800
down a rabbit hole.

978
00:58:06,800 --> 00:58:07,800
Thanks so much.

979
00:58:07,800 --> 00:58:10,280
I'm looking for more to do applications.

980
00:58:10,280 --> 00:58:14,880
I've settled on D task for now or DS task after trying task warrior and the gnome to

981
00:58:14,880 --> 00:58:15,880
do list.

982
00:58:15,880 --> 00:58:19,720
And I've also tried to do.txt for the CLI stuff and I've tried task book.

983
00:58:19,720 --> 00:58:20,720
Wow.

984
00:58:20,720 --> 00:58:23,080
I'd love to hear more about to do apps.

985
00:58:23,080 --> 00:58:26,120
Is that something you've covered before on self hosted or luck?

986
00:58:26,120 --> 00:58:28,000
If not, I'd like to hear more about it.

987
00:58:28,000 --> 00:58:34,400
Well, I decided Thomas, we'd probably cover this one because I just kind of went all in

988
00:58:34,400 --> 00:58:35,400
on to do list.

989
00:58:35,400 --> 00:58:37,640
And so I thought maybe I'd talk about to do list a little bit.

990
00:58:37,640 --> 00:58:40,400
You know, I've been using to do list as well.

991
00:58:40,400 --> 00:58:44,320
I started looking at it again when they announced a quote unquote native Linux app.

992
00:58:44,320 --> 00:58:48,480
That's always kind of, okay, it also works great on my phone.

993
00:58:48,480 --> 00:58:53,760
It works on my watch, it works on the web and it now it works on desktop Linux and they

994
00:58:53,760 --> 00:58:59,960
added support for Trello like project boards along with to do lists and they have support

995
00:58:59,960 --> 00:59:04,960
for sharing those to do lists with other folks like the wife and I have one for the RV that

996
00:59:04,960 --> 00:59:09,560
we just put stuff on individually and you know, I have a bunch for work on there and

997
00:59:09,560 --> 00:59:11,340
I found it to work pretty well for me.

998
00:59:11,340 --> 00:59:16,580
It's not the prettiest to do app, I gotta be honest, but it is super functional.

999
00:59:16,580 --> 00:59:18,120
It has an API for days.

1000
00:59:18,120 --> 00:59:22,380
The integrations with to do list are just mind bending.

1001
00:59:22,380 --> 00:59:24,000
It's just mind bending.

1002
00:59:24,000 --> 00:59:27,760
And on top of all of that, it seems like it's going to be around for the long haul.

1003
00:59:27,760 --> 00:59:29,760
I've watched them for a couple of years.

1004
00:59:29,760 --> 00:59:31,680
They seem pretty solid as a company.

1005
00:59:31,680 --> 00:59:36,400
They seem to be iterating at a pretty decent pace and adding decent features and the more

1006
00:59:36,400 --> 00:59:41,340
I drill into the application, the more I find that it does like I have this situation where

1007
00:59:41,340 --> 00:59:45,480
I have to again call back to Verizon wireless and so I just keep all of these notes for

1008
00:59:45,480 --> 00:59:51,480
every time I call these these people and I try to get them to cancel my line, I get it.

1009
00:59:51,480 --> 00:59:55,560
I have it right in there and I have all the details in my call notes and I find that to

1010
00:59:55,560 --> 00:59:56,560
be super handy.

1011
00:59:56,560 --> 01:00:01,400
Plus it supports a lot of plain English stuff for scheduling and whatnot and the mobile

1012
01:00:01,400 --> 01:00:02,920
apps decent too.

1013
01:00:02,920 --> 01:00:07,880
So I recommend to do list any anybody in the mumble room have suggestions for to do app

1014
01:00:07,880 --> 01:00:09,560
that works for them.

1015
01:00:09,560 --> 01:00:12,960
Super productivity is one that I've started using.

1016
01:00:12,960 --> 01:00:18,520
I got a reference to that from another podcast and that was it.

1017
01:00:18,520 --> 01:00:21,800
I'm kind of amazed at how it makes things better.

1018
01:00:21,800 --> 01:00:26,460
It's not just doing to dues and note taking and stuff like that, but it also integrates

1019
01:00:26,460 --> 01:00:31,440
with managing issue tracking workflows and stuff like that.

1020
01:00:31,440 --> 01:00:36,320
It might be a little bit more developer centric than to do as it is, but it's it's certainly

1021
01:00:36,320 --> 01:00:41,080
starting to help me out a little bit in balancing like what I'm trying to keep track of and

1022
01:00:41,080 --> 01:00:43,120
what I'm supposed to do and things like that.

1023
01:00:43,120 --> 01:00:44,120
Nice.

1024
01:00:44,120 --> 01:00:45,120
And the name was again.

1025
01:00:45,120 --> 01:00:46,120
Super productivity.

1026
01:00:46,120 --> 01:00:47,120
Nice.

1027
01:00:47,120 --> 01:00:48,120
That sounds like it.

1028
01:00:48,120 --> 01:00:49,440
That sounds like one worth looking into as well.

1029
01:00:49,440 --> 01:00:52,960
Drew, do you have one that you use any kind of like to do list management at all?

1030
01:00:52,960 --> 01:00:54,060
Yeah, I do.

1031
01:00:54,060 --> 01:00:56,680
But I like mine to be super duper simple.

1032
01:00:56,680 --> 01:01:01,040
I don't think that a to do app needs to have a whole bunch of bells and whistles.

1033
01:01:01,040 --> 01:01:05,560
So I actually just use Google task and it works great for me.

1034
01:01:05,560 --> 01:01:06,560
Wow.

1035
01:01:06,560 --> 01:01:08,740
I thought it'd get killed, but it seems like it's sticking around.

1036
01:01:08,740 --> 01:01:12,520
They seem to be integrating it more and more with different aspects of the Google app suite.

1037
01:01:12,520 --> 01:01:13,680
So I think it's in for the long haul.

1038
01:01:13,680 --> 01:01:16,560
Well, there's a couple of ideas right there.

1039
01:01:16,560 --> 01:01:20,000
And if you have any others and you're screaming them at us right now, you can always throw

1040
01:01:20,000 --> 01:01:21,000
them in the telegram group.

1041
01:01:21,000 --> 01:01:25,160
Go to broadcasting.com Telegram, join up and tell us about them.

1042
01:01:25,160 --> 01:01:26,160
I'd like to know.

1043
01:01:26,160 --> 01:01:31,120
I'd like, you know, we get if we get a batch of them, we could always do a little to do

1044
01:01:31,120 --> 01:01:32,200
pics special.

1045
01:01:32,200 --> 01:01:36,140
I suppose I want to say thank you to our core contributors.

1046
01:01:36,140 --> 01:01:39,080
Those of you that are supporting the show, we really appreciate it.

1047
01:01:39,080 --> 01:01:41,260
You're making the show possible and you get more show.

1048
01:01:41,260 --> 01:01:42,260
You have a choice.

1049
01:01:42,260 --> 01:01:48,160
You get the fully uncut live stream with all of our mistakes, but also a lot more content.

1050
01:01:48,160 --> 01:01:49,880
Too much content.

1051
01:01:49,880 --> 01:01:51,520
Is there ever too much Westpain?

1052
01:01:51,520 --> 01:01:52,520
Really?

1053
01:01:52,520 --> 01:01:54,320
No, probably not.

1054
01:01:54,320 --> 01:01:58,080
No, no, you can never have enough Westpain.

1055
01:01:58,080 --> 01:01:59,900
And there's two options for you.

1056
01:01:59,900 --> 01:02:06,120
You have the limited ad feed, which is fully produced, the fully edited show with the nice

1057
01:02:06,120 --> 01:02:11,440
mix and all of that, just with limited ads, or you get that full live version.

1058
01:02:11,440 --> 01:02:13,540
Thank you for making the show possible.

1059
01:02:13,540 --> 01:02:16,840
And if you're interested in supporting the unplugged program, if you want to become a

1060
01:02:16,840 --> 01:02:21,800
member, you can go to Linux unplugged.com and if you look right along the top there,

1061
01:02:21,800 --> 01:02:26,080
we have the links to send you over to our core contributor page and you can sign up

1062
01:02:26,080 --> 01:02:30,440
and then you get the feeds for the extra content and support the show.

1063
01:02:30,440 --> 01:02:35,280
Also over on the website, along with all the show notes, we have our matrix server info.

1064
01:02:35,280 --> 01:02:38,760
If you've been wondering about that and our mumble server info, if you'd like to join

1065
01:02:38,760 --> 01:02:45,060
us on a live stream, we do this show on Tuesdays at noon Pacific, 3pm Eastern, but get it converted

1066
01:02:45,060 --> 01:02:49,760
at your local time at jupiterbroadcasting.com slash calendar.

1067
01:02:49,760 --> 01:02:50,760
All right, Mr. Westpain.

1068
01:02:50,760 --> 01:02:51,760
See you next week.

1069
01:02:51,760 --> 01:02:54,760
Same bat time, same bat station.

1070
01:02:54,760 --> 01:02:56,960
Wait, do we have a bat signal?

1071
01:02:56,960 --> 01:02:59,160
I thought it was a penguin.

1072
01:02:59,160 --> 01:03:00,160
I think it's Twitter.

1073
01:03:00,160 --> 01:03:02,160
You know, when we just tweet that we're live.

1074
01:03:02,160 --> 01:03:03,160
You're right.

1075
01:03:03,160 --> 01:03:05,280
It's a at Linux unplugged, right?

1076
01:03:05,280 --> 01:03:06,280
Yeah.

1077
01:03:06,280 --> 01:03:07,280
That's the new bat signal, I think.

1078
01:03:07,280 --> 01:03:08,340
It's got to be.

1079
01:03:08,340 --> 01:03:09,340
Or the telegram group.

1080
01:03:09,340 --> 01:03:12,240
Cause I often post it in a telegram group.

1081
01:03:12,240 --> 01:03:14,880
So that's, that's another way to know when we're going live.

1082
01:03:14,880 --> 01:03:18,160
Thank you everybody for tuning this week's episode of the unplugged program links for

1083
01:03:18,160 --> 01:03:22,480
the topics and stories we talked about and information about the file system features

1084
01:03:22,480 --> 01:03:27,920
we've been going on about linuxunplugged.com slash three seven three.

1085
01:03:27,920 --> 01:03:31,440
Thank you so much for tuning into this week's episode of the unplugged program and we'll

1086
01:03:31,440 --> 01:04:00,480
see you right back here next Tuesday.

1087
01:04:01,440 --> 01:04:15,760
So, Hey drew, Hey Chris, Hey drew.

1088
01:04:15,760 --> 01:04:23,720
If I wanted to throw an audio job at this Dell for a review, is it possible to script

1089
01:04:23,720 --> 01:04:29,960
a Reaper series of actions so that I could import audio, process audio, render audio

1090
01:04:29,960 --> 01:04:33,560
or encode audio and then just run it over and over again?

1091
01:04:33,560 --> 01:04:40,080
Uh, maybe, you know, getting into the scripting thing isn't something that I've done a ton

1092
01:04:40,080 --> 01:04:41,080
of.

1093
01:04:41,080 --> 01:04:44,160
I picture you sitting in front of Reaper and you're kind of like just like executing all

1094
01:04:44,160 --> 01:04:48,380
kinds of automations and you're, you've got like a VR headset on and like a Nintendo power

1095
01:04:48,380 --> 01:04:51,840
glove and hence stuff is just like flying on the screen.

1096
01:04:51,840 --> 01:04:53,520
The power glove is key.

1097
01:04:53,520 --> 01:04:58,360
I was actually picturing drew with like one of those duck hunt, uh, you know, those orange

1098
01:04:58,360 --> 01:04:59,360
guns that you see.

1099
01:04:59,360 --> 01:05:00,360
The little light gun.

1100
01:05:00,360 --> 01:05:01,360
Oh yeah.

1101
01:05:01,360 --> 01:05:30,960
They're shooting at mistakes and they're getting cut.


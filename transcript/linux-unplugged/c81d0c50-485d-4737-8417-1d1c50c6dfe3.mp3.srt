1
00:00:00,000 --> 00:00:03,440
Did you see the Telegram was bragging about 500 million active users?

2
00:00:03,440 --> 00:00:04,440
Oh boy.

3
00:00:04,440 --> 00:00:09,520
Yeah, and they said 25 million new users in the last 72 hours.

4
00:00:09,520 --> 00:00:12,800
It kind of seems like a great way to get a target right on their back.

5
00:00:12,800 --> 00:00:14,120
Somebody's going to take notice.

6
00:00:14,120 --> 00:00:18,200
Apparently it was a big wave from the riot on Capitol Hill.

7
00:00:18,200 --> 00:00:21,840
A bunch of people were like, oh no, we need to communicate in top security.

8
00:00:21,840 --> 00:00:22,840
Uh oh.

9
00:00:22,840 --> 00:00:27,520
Oh yeah, Telegram, the maximum security chat program.

10
00:00:27,520 --> 00:00:38,200
Nobody tell them about Matrix.

11
00:00:38,200 --> 00:00:41,320
Hello friends and welcome into your weekly Linux talk show.

12
00:00:41,320 --> 00:00:42,320
My name is Chris.

13
00:00:42,320 --> 00:00:43,320
My name is Wes.

14
00:00:43,320 --> 00:00:44,320
Hello Wes.

15
00:00:44,320 --> 00:00:45,840
Looking very dapper today.

16
00:00:45,840 --> 00:00:47,360
I like the all silver outfit.

17
00:00:47,360 --> 00:00:49,280
Well, I thought you'd like the bow tie especially.

18
00:00:49,280 --> 00:00:52,920
Well, you know what really impresses me is those socks.

19
00:00:52,920 --> 00:00:55,080
That is really going the extra mile.

20
00:00:55,080 --> 00:00:57,920
This episode is brought to you by a cloud guru, the leader in hands on learning.

21
00:00:57,920 --> 00:01:01,400
The only way to learn a new skill, you know it, is by doing it.

22
00:01:01,400 --> 00:01:04,920
That's why ACG provides hands on labs, cloud Linux servers, and much more.

23
00:01:04,920 --> 00:01:08,200
Get your hands cloudy at a cloud guru dot com.

24
00:01:08,200 --> 00:01:14,680
So here we are gathered together for episode 388 and we're doing things a little differently.

25
00:01:14,680 --> 00:01:19,480
So I want to first I want to say just to keep some tradition, some form, I want to say time

26
00:01:19,480 --> 00:01:21,320
appropriate greetings to the mumble room.

27
00:01:21,320 --> 00:01:22,320
Hello, virtual lug.

28
00:01:22,320 --> 00:01:23,320
Hello.

29
00:01:23,320 --> 00:01:24,320
Good evening.

30
00:01:24,320 --> 00:01:25,320
Hey guys.

31
00:01:25,320 --> 00:01:26,320
Hey guys.

32
00:01:26,320 --> 00:01:33,400
We're all kind of fired up today because we've been playing around with PeerTube 3.0, which

33
00:01:33,400 --> 00:01:38,480
introduced live streaming support and it's peer to peer live streaming and it really

34
00:01:38,480 --> 00:01:42,280
is now a full YouTube killer in a box.

35
00:01:42,280 --> 00:01:46,320
You get everything you get with YouTube like from the good old days where a clean feed

36
00:01:46,320 --> 00:01:52,280
of what people have recently posted, subscriptions, but unlike YouTube where it's spying on you

37
00:01:52,280 --> 00:01:59,160
constantly to feed an ad algorithm, it's free open source software and it's peer to peer

38
00:01:59,160 --> 00:02:02,000
and it can federate with other PeerTube instances.

39
00:02:02,000 --> 00:02:03,880
You guys have heard us talk about it before.

40
00:02:03,880 --> 00:02:07,560
We've had different experiments with it and recently we've been experimenting with a real

41
00:02:07,560 --> 00:02:11,760
small instance over at Jupiter dot tube and playing around with its peer to peer live

42
00:02:11,760 --> 00:02:12,960
streaming support.

43
00:02:12,960 --> 00:02:17,560
So this episode and the last three days worth of live stream or tests that we've done have

44
00:02:17,560 --> 00:02:24,880
all been on PeerTube and it's kind of crazy exciting because it is working and it has

45
00:02:24,880 --> 00:02:31,600
allowed us with one Linode and some object storage to essentially create a worldwide

46
00:02:31,600 --> 00:02:35,440
CDN where people are watching it and it still seems like it has a couple of kinks so we're

47
00:02:35,440 --> 00:02:36,440
still testing it.

48
00:02:36,440 --> 00:02:40,240
It's not like a production thing, but Wes, I mean, how long do you think the setup was

49
00:02:40,240 --> 00:02:41,240
in total?

50
00:02:41,240 --> 00:02:43,800
Well, I don't know, an hour or two maybe at most.

51
00:02:43,800 --> 00:02:48,320
We built a test, a real test one, then we spun up our actual test instance.

52
00:02:48,320 --> 00:02:52,080
So you know, there's some things getting everything configured, getting installed, but I mean,

53
00:02:52,080 --> 00:02:54,800
it's all powered by Docker anyway.

54
00:02:54,800 --> 00:02:58,960
And they've also got a very robust and nice guide if you just want to set things up traditionally,

55
00:02:58,960 --> 00:03:01,760
use the stuff like Postgres and Redis and TypeScript.

56
00:03:01,760 --> 00:03:05,600
So nothing weird or out of the box or hard to find anything like that.

57
00:03:05,600 --> 00:03:09,920
So I mean, an afternoon, really an afternoon to get it set up, start playing with it.

58
00:03:09,920 --> 00:03:12,320
And since then, it's been the same configuration.

59
00:03:12,320 --> 00:03:14,240
They've got a lot of nice admin facilities.

60
00:03:14,240 --> 00:03:18,680
They've got like a guide for, hey, you're the backend admin and you want to set everything

61
00:03:18,680 --> 00:03:19,680
up by hand.

62
00:03:19,680 --> 00:03:23,080
And they've also just got like a guide aimed at once you've got an instance, how do you

63
00:03:23,080 --> 00:03:24,080
administer this?

64
00:03:24,080 --> 00:03:25,080
How do you set it up?

65
00:03:25,080 --> 00:03:26,080
How do you make it useful?

66
00:03:26,080 --> 00:03:27,720
How do you set all the transcode options?

67
00:03:27,720 --> 00:03:32,280
Honestly, I've been pretty impressed by the docs and all the configurability so far.

68
00:03:32,280 --> 00:03:35,560
Yeah, and the options are really getting there.

69
00:03:35,560 --> 00:03:40,280
I think customization, but not in an overwhelming way is a big part of what they're trying to

70
00:03:40,280 --> 00:03:41,280
go with this.

71
00:03:41,280 --> 00:03:44,560
As a content creator, I like a lot of the options they give me.

72
00:03:44,560 --> 00:03:49,220
I can set system themes, I can install plugins fairly easily.

73
00:03:49,220 --> 00:03:52,760
It's easy to create live streams and choose if the live stream is persistent and remains

74
00:03:52,760 --> 00:03:55,020
available for playback afterwards.

75
00:03:55,020 --> 00:03:59,120
But the other thing that's nice because of the architecture is we have 30 people or so

76
00:03:59,120 --> 00:04:04,480
watching it right now and the load on the server itself still remains pretty low.

77
00:04:04,480 --> 00:04:11,040
Yeah, early on we were looking at it and it was bouncing between 6% on the CPU and this

78
00:04:11,040 --> 00:04:16,160
is a four core box to about 40% and at one point, just looking at the history, it looks

79
00:04:16,160 --> 00:04:19,800
like it spiked up to around 60% CPU usage.

80
00:04:19,800 --> 00:04:26,160
But this is, it's a YouTube instance in a box with 30 people watching a live stream

81
00:04:26,160 --> 00:04:30,880
and you can configure how many are allowed to live stream and then the viewers themselves

82
00:04:30,880 --> 00:04:31,880
become the CDN.

83
00:04:31,880 --> 00:04:35,400
It's just so neat and I love where the project's going with it.

84
00:04:35,400 --> 00:04:38,300
So we're all kind of fired up today because we've been talking about that.

85
00:04:38,300 --> 00:04:42,800
But we're gathered here really to geek out on GPUs.

86
00:04:42,800 --> 00:04:47,040
I think even if you're not a graphics head, you're going to get some valuable information

87
00:04:47,040 --> 00:04:48,640
out of this episode.

88
00:04:48,640 --> 00:04:54,040
I've been testing this new XPS 13 from Dell, the latest developer edition with the 11th

89
00:04:54,040 --> 00:04:55,040
gen Intel processor.

90
00:04:55,040 --> 00:04:58,040
I recently reviewed it in Coder 395.

91
00:04:58,040 --> 00:05:03,320
I've been honestly trying to just wrap my noodle around the performance of this XE GPU

92
00:05:03,320 --> 00:05:10,240
and the 11th gen CPU and I knew I needed to better understand it for the audience because

93
00:05:10,240 --> 00:05:14,600
I could tell I was reaching the limits of my understanding and so I wanted to reach

94
00:05:14,600 --> 00:05:20,400
out to somebody who had a deep understanding of this stuff and could communicate it really

95
00:05:20,400 --> 00:05:21,400
well.

96
00:05:21,400 --> 00:05:24,560
So I called up Wendell from Level One Techs and of course, Level One Linux.

97
00:05:24,560 --> 00:05:28,640
He's a great resource for this kind of stuff and he's been covering a little bit of the

98
00:05:28,640 --> 00:05:33,840
future of these XE GPUs and what it could mean for virtualization on his Level One Linux

99
00:05:33,840 --> 00:05:34,840
channel.

100
00:05:34,840 --> 00:05:36,120
I'll have a link to that in the show notes.

101
00:05:36,120 --> 00:05:38,720
So he came on and he and I just started geeking out.

102
00:05:38,720 --> 00:05:40,360
We started talking about the XE GPU.

103
00:05:40,360 --> 00:05:45,680
We talked about Intel's new OneAPI initiative, which I won't spoil, it's a massive endeavor

104
00:05:45,680 --> 00:05:49,560
that Intel's trying to leverage their position that they have right now.

105
00:05:49,560 --> 00:05:53,760
And then later on in the interview, we also get into his current daily driver Linux setup,

106
00:05:53,760 --> 00:05:56,400
which I think you might be surprised about his answer.

107
00:05:56,400 --> 00:05:57,400
Ooh.

108
00:05:57,400 --> 00:05:59,200
Yeah, I gotta ask, you know, I gotta ask.

109
00:05:59,200 --> 00:06:00,200
Of course.

110
00:06:00,200 --> 00:06:03,440
Of course, there's a few terms that get used in this episode that I wanted to define if

111
00:06:03,440 --> 00:06:06,280
you're not a graphics head.

112
00:06:06,280 --> 00:06:11,000
GVTG is virtualizing the GPU for multiple guest machines.

113
00:06:11,000 --> 00:06:15,280
So it effectively gives you near native GPU performance in a virtual machine while still

114
00:06:15,280 --> 00:06:18,140
also allowing the host to use that GPU.

115
00:06:18,140 --> 00:06:19,640
So that's GVTG.

116
00:06:19,640 --> 00:06:24,580
VFIO comes up that allows virtual machines direct access to PCI hardware resources like

117
00:06:24,580 --> 00:06:29,760
the GPU or a network card or another PCI device.

118
00:06:29,760 --> 00:06:35,460
I've actually passed through like a USB card to it and even a dock, a Thunderbolt dock.

119
00:06:35,460 --> 00:06:36,880
That's using VFIO.

120
00:06:36,880 --> 00:06:40,880
And then also another term that gets mentioned that you may or may not be familiar with in

121
00:06:40,880 --> 00:06:43,120
this interview is IGPU.

122
00:06:43,120 --> 00:06:48,240
In the context of our chat, it's the graphics card that comes built into Intel CPUs.

123
00:06:48,240 --> 00:06:49,240
But don't worry, stick with it.

124
00:06:49,240 --> 00:06:52,660
Even if you're not a graphics person, I think there's something that'll interest you that's

125
00:06:52,660 --> 00:06:55,160
worth listening to in this chat with Wendell.

126
00:06:55,160 --> 00:07:01,480
So the reason I wanted to chat with you today was I got my hands on a Dell XPS Developer

127
00:07:01,480 --> 00:07:11,600
Edition that has an i5 11th Gen Intel CPU and the XELP graphics in it.

128
00:07:11,600 --> 00:07:20,960
And this little laptop is blowing my X1 Carbon 10th Gen with an i7 CPU and GPU away.

129
00:07:20,960 --> 00:07:26,280
I mean, it just is shredding it in machine learning benchmarks.

130
00:07:26,280 --> 00:07:28,600
And I can play actual video games on it.

131
00:07:28,600 --> 00:07:30,040
I can play Tomb Raider.

132
00:07:30,040 --> 00:07:31,960
I can play Hotshot Racing.

133
00:07:31,960 --> 00:07:36,720
I can play CSGO and nothing that's super demanding, but games I'm currently playing that I actually

134
00:07:36,720 --> 00:07:41,280
enjoy playing, I can play them on this laptop with an integrated GPU.

135
00:07:41,280 --> 00:07:45,520
And I thought to myself, something must be going on here more than I can appreciate.

136
00:07:45,520 --> 00:07:48,520
And I thought, this is something I need to ask Wendell is like, what's going on with

137
00:07:48,520 --> 00:07:50,440
these XE or Z graphics?

138
00:07:50,440 --> 00:07:53,320
And I hear about a dedicated GPU and the whole thing.

139
00:07:53,320 --> 00:07:55,520
So can you kind of just fill me in?

140
00:07:55,520 --> 00:08:01,240
So Intel had their one API thing and a lot of details, I guess, about the Intel graphics

141
00:08:01,240 --> 00:08:02,240
stuff came to light.

142
00:08:02,240 --> 00:08:05,840
And they've got XE graphics now in their 11th Gen.

143
00:08:05,840 --> 00:08:10,300
And to me, that's not quite, I mean, it's like, OK, it's impressive, but it's also not

144
00:08:10,300 --> 00:08:15,560
super impressive because the integrated graphics sort of stagnated there for, I don't know,

145
00:08:15,560 --> 00:08:17,360
like four generations.

146
00:08:17,360 --> 00:08:24,040
And then so the XE graphics that's in the 11th Gen, yeah, it's OK.

147
00:08:24,040 --> 00:08:28,280
But what Apple is able to do with their integrated graphics arguably is more impressive because

148
00:08:28,280 --> 00:08:31,040
that would be something more on the level of what I would expect from Intel when they're

149
00:08:31,040 --> 00:08:33,880
going to release XE graphics to begin with.

150
00:08:33,880 --> 00:08:36,840
But maybe the second generation of that will be good.

151
00:08:36,840 --> 00:08:43,120
And at Intel in their one API, they sort of revealed some of the DG1 dedicated graphics

152
00:08:43,120 --> 00:08:47,960
stuff and like DG2 and what they have in mind for XE graphics, especially in the data center.

153
00:08:47,960 --> 00:08:57,720
And packing 1,000 Dota sessions or whatever on a single card, which had four GPs on it.

154
00:08:57,720 --> 00:09:00,000
But it's a single PCIe card.

155
00:09:00,000 --> 00:09:06,080
And so that's kind of exciting because they're hitting power targets, not just throwing raw

156
00:09:06,080 --> 00:09:08,680
watts at it to get the performance.

157
00:09:08,680 --> 00:09:13,160
But also like maybe that will be good for laptop users having those kind of things integrated.

158
00:09:13,160 --> 00:09:19,360
But in the bigger picture, how everything stacks up, it's like the Apple M1 and then

159
00:09:19,360 --> 00:09:21,480
like Radeon integrated graphics.

160
00:09:21,480 --> 00:09:25,380
And then way on down the list is the old iGPU.

161
00:09:25,380 --> 00:09:33,280
And somewhere between the M1 and the really old iGPU is XE graphics.

162
00:09:33,280 --> 00:09:34,940
It wins some against Radeon.

163
00:09:34,940 --> 00:09:37,400
It loses some against Radeon.

164
00:09:37,400 --> 00:09:40,160
It's a different architecture, and it is really interesting.

165
00:09:40,160 --> 00:09:42,600
I suppose your point's well taken, though.

166
00:09:42,600 --> 00:09:48,280
Ideally, we would have been where we're at right now about three generations ago.

167
00:09:48,280 --> 00:09:51,600
So it's good, but not as good as it should be by now.

168
00:09:51,600 --> 00:09:52,600
Yes.

169
00:09:52,600 --> 00:09:53,600
Yeah.

170
00:09:53,600 --> 00:09:57,720
I mean, if you want to take the anti-Apple spin on it, you can say, well, Apple was able

171
00:09:57,720 --> 00:10:02,100
to do this with failed toaster parts and used rubber bands.

172
00:10:02,100 --> 00:10:06,860
So the big people should have been able to at least be that good.

173
00:10:06,860 --> 00:10:11,440
But the reality is that ARM and some other things are doing some magic for us.

174
00:10:11,440 --> 00:10:16,600
But Apple did some genuinely good engineering with their processors and worked with some

175
00:10:16,600 --> 00:10:20,600
smart and talented people to sort of bring it together.

176
00:10:20,600 --> 00:10:26,840
And XE graphics is still sort of bolted on a legacy architecture, but I don't have a

177
00:10:26,840 --> 00:10:31,960
feel for how different or how similar XE graphics is to things that have been tried in the past,

178
00:10:31,960 --> 00:10:34,160
like Larbi.

179
00:10:34,160 --> 00:10:41,560
And early on with Larbi, it looked like Larbi was going to be amazing because they're engineers

180
00:10:41,560 --> 00:10:46,200
that are a deep dive on, I think, Quake, one of the id Software engines.

181
00:10:46,200 --> 00:10:53,560
And there's 1,000 or 2,000 lightweight x86 cores on this GPU because, yeah, you can use

182
00:10:53,560 --> 00:10:54,560
x86 for everything.

183
00:10:54,560 --> 00:10:57,760
I mean, what could possibly be wrong with that idea?

184
00:10:57,760 --> 00:11:01,760
And then you look at a game like Quake, and it turns out that that kind of a game, the

185
00:11:01,760 --> 00:11:06,360
engine was basically from the mind of a genius or mind of several geniuses.

186
00:11:06,360 --> 00:11:08,700
And nobody else built game engines that way.

187
00:11:08,700 --> 00:11:13,640
But that wasn't really discovered until they went to port other game engines later.

188
00:11:13,640 --> 00:11:19,720
And so it was like, oh, Larbi, maybe this isn't good for anything other than Quake.

189
00:11:19,720 --> 00:11:24,320
But in terms of running hardware really quickly, it ran Quake really, really amazingly well.

190
00:11:24,320 --> 00:11:29,440
And that's what Apple has done with M1 and M1 graphics is they've looked really closely.

191
00:11:29,440 --> 00:11:33,960
They've done a lot of analysis on the software that they run and the instructions and also

192
00:11:33,960 --> 00:11:39,840
the emulation layer, like the stuff that they added to make ARM better able to deal with

193
00:11:39,840 --> 00:11:43,080
x86 instructions, which are variable length.

194
00:11:43,080 --> 00:11:47,320
That's some really clever stuff, but it's from a deep dive at just looking at the sequence

195
00:11:47,320 --> 00:11:51,640
of instructions that are run and looking at the insanity and saying, OK, what do we have

196
00:11:51,640 --> 00:11:53,120
to do here?

197
00:11:53,120 --> 00:11:54,440
Let's make this work.

198
00:11:54,440 --> 00:11:58,520
It stands to reason they did the same thing with graphics.

199
00:11:58,520 --> 00:11:59,880
And that's the difference here.

200
00:11:59,880 --> 00:12:01,160
That's the difference for the IGPU.

201
00:12:01,160 --> 00:12:06,720
They really looked at a whole ecosystem of games because Tomb Raider is fairly well optimized

202
00:12:06,720 --> 00:12:11,680
and runs really good on the mobile embedded platform.

203
00:12:11,680 --> 00:12:18,200
With Xe graphics for one API, what I'm starting to see from one API is Intel saying, OK, in

204
00:12:18,200 --> 00:12:22,400
order for us to squeeze more performance out of Silicon, we're going to have to change

205
00:12:22,400 --> 00:12:23,860
our software.

206
00:12:23,860 --> 00:12:28,440
And so I think this is kind of long winded, but this is just a long winded way to preface

207
00:12:28,440 --> 00:12:35,080
this by saying, I think Apple is taking a hardware assisted software optimization route.

208
00:12:35,080 --> 00:12:41,880
And I think Intel is taking a software assisted hardware optimization path.

209
00:12:41,880 --> 00:12:47,400
So on the one hand, you've got Apple, which is doing a pre pass on your software to make

210
00:12:47,400 --> 00:12:49,360
it better fit the hardware.

211
00:12:49,360 --> 00:12:54,280
And the hardware has stuff in it to run the instructions that are not necessarily ARM

212
00:12:54,280 --> 00:12:56,120
instructions a little better.

213
00:12:56,120 --> 00:13:02,360
Intel, on the other hand, is saying, we need to make adjustments in software and recompile.

214
00:13:02,360 --> 00:13:04,640
And so this is happening at compile time.

215
00:13:04,640 --> 00:13:08,240
And the other one's not happening at compile time, but it's not happening at runtime either.

216
00:13:08,240 --> 00:13:10,480
It's sort of in the mix.

217
00:13:10,480 --> 00:13:13,240
And I think there's pros and cons for both approaches.

218
00:13:13,240 --> 00:13:14,280
Sure.

219
00:13:14,280 --> 00:13:20,200
It seems to me, though, the advantage long term of Intel's approach is that that stuff

220
00:13:20,200 --> 00:13:21,920
is baked into Linux.

221
00:13:21,920 --> 00:13:25,140
And as longtime Linux users, I think you probably agree.

222
00:13:25,140 --> 00:13:26,720
We can be patient with this kind of stuff.

223
00:13:26,720 --> 00:13:33,640
And if it means in years down the road, we will have really reasonable laptop and desktop

224
00:13:33,640 --> 00:13:39,440
graphics that are totally supported out of the box when I install Linux, I'm along for

225
00:13:39,440 --> 00:13:40,440
the ride.

226
00:13:40,440 --> 00:13:44,520
And it doesn't have to be absolutely, that's what I think excited me about the Xe graphics

227
00:13:44,520 --> 00:13:49,720
is it doesn't have to be competitive with the latest Nvidia and AMD graphics.

228
00:13:49,720 --> 00:13:50,760
That's not my work case.

229
00:13:50,760 --> 00:13:54,160
My work case is mostly I want an accelerated desktop.

230
00:13:54,160 --> 00:13:58,080
I want accelerated video encoding and decoding.

231
00:13:58,080 --> 00:14:02,560
And I want to be able to play some games really well, but doesn't have to be like on absolutely

232
00:14:02,560 --> 00:14:03,560
high settings.

233
00:14:03,560 --> 00:14:08,800
And I think Intel could get us there and no driver fiddling required.

234
00:14:08,800 --> 00:14:13,400
I just recently, in two different scenarios with two totally different distributions,

235
00:14:13,400 --> 00:14:17,040
went down the rabbit hole of having to fix a system after a failed Nvidia driver install.

236
00:14:17,040 --> 00:14:20,240
And it felt like I was back in the early 2000s all of a sudden.

237
00:14:20,240 --> 00:14:23,780
And so for me, I just can't wait for this stuff to work out of the box.

238
00:14:23,780 --> 00:14:26,940
And I think the other thing that you touched on in a video of yours that I'll link in the

239
00:14:26,940 --> 00:14:33,300
show notes is it seems like Intel's baking in more shared GPU features for virtual machines.

240
00:14:33,300 --> 00:14:36,040
And that could be really awesome for a lot of users.

241
00:14:36,040 --> 00:14:44,800
Yeah, I think one API, their vision of one API is comprehensive from what I can tell.

242
00:14:44,800 --> 00:14:51,320
And so imagine like, yes, it's all of those things, but it also reaches into other operating

243
00:14:51,320 --> 00:14:54,100
systems even than just Linux like Android.

244
00:14:54,100 --> 00:15:00,880
So their vision of it is to make it super easy for developers to not have to worry about

245
00:15:00,880 --> 00:15:01,880
anything.

246
00:15:01,880 --> 00:15:08,880
So I did the interview with Jeff McVeigh that'll probably be out maybe Monday or Tuesday.

247
00:15:08,880 --> 00:15:14,360
And obviously, a lot of it is not there yet, but the vision is to make everybody not have

248
00:15:14,360 --> 00:15:15,360
to worry about it.

249
00:15:15,360 --> 00:15:19,440
And if you look at the language, like the problem that I have with it, if you look at

250
00:15:19,440 --> 00:15:26,320
the language, it's a lot of really crazy stuff in terms of really high level abstraction.

251
00:15:26,320 --> 00:15:30,200
And it's like, OK, but tell me how that's going to make my life easier.

252
00:15:30,200 --> 00:15:36,080
And one thing that I have a personal experience with is just the linear algebra libraries.

253
00:15:36,080 --> 00:15:39,440
And the linear algebra libraries, like you think it's like how many ways are there to

254
00:15:39,440 --> 00:15:44,520
just let's compute the eigenvalues of this.

255
00:15:44,520 --> 00:15:45,520
Let's do some matrix multiplication.

256
00:15:45,520 --> 00:15:51,200
Turns out on a modern x86 processors, there's like a dozen ways to do that.

257
00:15:51,200 --> 00:15:53,160
And some ways are faster than others.

258
00:15:53,160 --> 00:15:55,460
Some ways are faster with a sparse data set.

259
00:15:55,460 --> 00:15:58,320
Some ways are faster with a full data set.

260
00:15:58,320 --> 00:16:00,820
Some ways are, you know, it's just it's crazy.

261
00:16:00,820 --> 00:16:04,120
And so a lot with this open source like we do in the research thing, you actually need

262
00:16:04,120 --> 00:16:08,140
to run some tests, not only in your data set, but also on the machines that you have available

263
00:16:08,140 --> 00:16:09,140
to do the testing.

264
00:16:09,140 --> 00:16:13,080
I can't just dive into the calculations and say to the library, here, go calculate this

265
00:16:13,080 --> 00:16:14,080
for me.

266
00:16:14,080 --> 00:16:17,440
Because you're not necessarily going to get the most efficient path to do the calculations

267
00:16:17,440 --> 00:16:20,840
based on your hardware and the available data.

268
00:16:20,840 --> 00:16:24,420
And so one API is supposed to take all of that away, but also supposed to make things

269
00:16:24,420 --> 00:16:28,680
a little easier cross platform, like, you know, the new the new iPhone 12 has like this

270
00:16:28,680 --> 00:16:30,280
lidar thing that's completely crazy.

271
00:16:30,280 --> 00:16:33,800
And I was watching I think it was an Unreal Engine demo the other day or something.

272
00:16:33,800 --> 00:16:39,380
No, it was it was a it was some third party company has trained a model that will produce

273
00:16:39,380 --> 00:16:42,640
blender models from lidar and a camera.

274
00:16:42,640 --> 00:16:43,640
And it is unbelievable.

275
00:16:43,640 --> 00:16:47,260
Like, you just hold the camera up and slowly move it around as it as it indicates.

276
00:16:47,260 --> 00:16:52,360
And it uses the lidar and the camera in the iPhone to produce a realistic blender model

277
00:16:52,360 --> 00:16:55,000
of whatever it is that you were doing with your phone.

278
00:16:55,000 --> 00:16:57,180
And it is truly incredible.

279
00:16:57,180 --> 00:16:59,160
It's just it's just insane.

280
00:16:59,160 --> 00:17:03,880
And so from the descriptions of one API, what's happening in my brain is saying, okay, if you're

281
00:17:03,880 --> 00:17:08,680
going to build that, there's a phone component, there's a cloud component, there's a training

282
00:17:08,680 --> 00:17:12,320
component, there's all these different software stacks, you think about developing an Android,

283
00:17:12,320 --> 00:17:17,280
it's like, okay, I'm going to get out Eclipse or Android Studio, the JetBrains tools, whatever,

284
00:17:17,280 --> 00:17:22,240
and start, you know, there's that whole tech stack and ODB and getting all that stuff ready.

285
00:17:22,240 --> 00:17:26,120
And then in the cloud side of it, it's like, am I using Amazon lambda, and it's got all

286
00:17:26,120 --> 00:17:29,000
the stuff that goes with that, or if I'm not using Amazon lambda, maybe I have to do my

287
00:17:29,000 --> 00:17:32,660
own cloud infrastructure, maybe I'm going to need, you know, a whole tech stack there.

288
00:17:32,660 --> 00:17:35,400
And then there's probably gonna be some middleware applications where I'm going to do, you know,

289
00:17:35,400 --> 00:17:39,640
some special sauce or whatever, and it's gonna be a whole other product stack there.

290
00:17:39,640 --> 00:17:42,920
And Intel is saying, look, this is too much to ask of developers and research scientists

291
00:17:42,920 --> 00:17:43,920
and stuff like that.

292
00:17:43,920 --> 00:17:48,760
We need to come up with a really high-level interface to all of this stuff and open it

293
00:17:48,760 --> 00:17:52,400
as much as possible so that everybody will build it, because we're spending a lot of

294
00:17:52,400 --> 00:17:59,560
our time, you know, figuring out which instruction set will do basic linear algebra the quickest,

295
00:17:59,560 --> 00:18:02,280
and we don't need to do that.

296
00:18:02,280 --> 00:18:07,400
And that is kind of, you know, to your point, that is kind of what Intel has in mind is

297
00:18:07,400 --> 00:18:13,360
to take those optimizations away so that you don't have to do those optimizations yourself.

298
00:18:13,360 --> 00:18:16,320
The library sort of knows that and figures that out.

299
00:18:16,320 --> 00:18:21,480
How long do you think we'll be waiting around to see one API take off?

300
00:18:21,480 --> 00:18:27,680
And what do you suppose the chances are of vendor adoption, like, say, AWS, for example,

301
00:18:27,680 --> 00:18:28,680
or other vendors?

302
00:18:28,680 --> 00:18:29,680
Are they on board?

303
00:18:29,680 --> 00:18:33,440
Or is this gonna be something that Intel comes up with that's a really great idea that doesn't

304
00:18:33,440 --> 00:18:35,320
really see much vendor adoption?

305
00:18:35,320 --> 00:18:36,320
I don't know.

306
00:18:36,320 --> 00:18:40,160
I mean, it's so large and so ambitious, it's probably gonna be both.

307
00:18:40,160 --> 00:18:44,520
We're probably gonna see some vendors adopt it and for it to make sense in some places.

308
00:18:44,520 --> 00:18:48,600
I would love nothing more than, like, you know, again, like, for one API and all of

309
00:18:48,600 --> 00:18:53,880
its lofty goals, it's hard to talk about because it is so large and abstract, but, like, concrete

310
00:18:53,880 --> 00:18:58,920
goals for me personally is I hope Intel's GVTG takes off.

311
00:18:58,920 --> 00:19:03,480
This is kind of like Intel's answer to SRIOV, and it's been here a while.

312
00:19:03,480 --> 00:19:04,480
It's not really new.

313
00:19:04,480 --> 00:19:08,560
Actually, Intel's moving a lot of things that they've already had under one API.

314
00:19:08,560 --> 00:19:12,820
So in some ways, yes, it's ambitious and we talked about it in lofty goals, but the reality

315
00:19:12,820 --> 00:19:17,240
here is a lot of this stuff already existed somewhere else in some way, and they're just

316
00:19:17,240 --> 00:19:18,560
kind of bringing it together.

317
00:19:18,560 --> 00:19:27,440
But GVTG is an extension to the graphics subsystem, the iGPUs, like in Xeon E3s.

318
00:19:27,440 --> 00:19:30,640
So I think Intel's had this discrete GPU plan for a while.

319
00:19:30,640 --> 00:19:37,520
Now, you know, the iGPU and the Xeon E3, that is, like, when you say anemic GPU, like, there's

320
00:19:37,520 --> 00:19:39,080
a picture there.

321
00:19:39,080 --> 00:19:40,080
That's what it is.

322
00:19:40,080 --> 00:19:44,560
So it's like, okay, I've taken, you know, an unsustainable amount of food and I've divided

323
00:19:44,560 --> 00:19:49,040
it among four people or I've divided it, you know, I've divided this infinitesimal amount

324
00:19:49,040 --> 00:19:52,600
of GPU horsepower among four virtual machines.

325
00:19:52,600 --> 00:19:55,040
You can do that with GVTG.

326
00:19:55,040 --> 00:19:58,560
You can slice and dice it where two virtual machines or three virtual machines, unlike

327
00:19:58,560 --> 00:20:03,800
SRIOV, which tends to be more of a hard partition when we're talking about it in the graphics

328
00:20:03,800 --> 00:20:09,600
space in terms of VRAM and some of the other components, GVTG is a little bit more flexible.

329
00:20:09,600 --> 00:20:13,720
You get, you know, GPUs weren't designed for things like context switching, but you have

330
00:20:13,720 --> 00:20:20,180
a little bit more of an ability to do context switching-like behavior with GVTG.

331
00:20:20,180 --> 00:20:25,320
And so in the demonstrations that Jeff McVeigh did in the one API presentation and, you know,

332
00:20:25,320 --> 00:20:30,280
in some of the stuff that Roger Koduri was talking about, it looked like their GPUs were

333
00:20:30,280 --> 00:20:31,660
set up to do that.

334
00:20:31,660 --> 00:20:34,800
So it's like, I want to run a thousand Dota clients across four GPUs.

335
00:20:34,800 --> 00:20:36,440
Okay, you know, we can do that.

336
00:20:36,440 --> 00:20:40,720
Now we've got a really, you know, a really heavy demanding simulation workload that we

337
00:20:40,720 --> 00:20:42,200
need to run in this other virtual machine.

338
00:20:42,200 --> 00:20:48,760
And it's like, okay, well, we can move the Dota clients over to these three GPUs and

339
00:20:48,760 --> 00:20:54,700
give the heavy simulation, you know, one dedicated piece of silicon or whatever it takes to actually

340
00:20:54,700 --> 00:20:55,700
run it.

341
00:20:55,700 --> 00:20:59,440
And so those functions are the things that I'm looking out for.

342
00:20:59,440 --> 00:21:00,440
I'm looking for that.

343
00:21:00,440 --> 00:21:04,180
I want to be able to take the changes that they make to the Linux kernel and be able

344
00:21:04,180 --> 00:21:08,800
to roll with that because one of the things they specifically talked about in the presentation

345
00:21:08,800 --> 00:21:14,880
is being able to take the frame buffer from that GPU and shove it into another GPU directly

346
00:21:14,880 --> 00:21:17,560
over the PCI bus without hitting main memory.

347
00:21:17,560 --> 00:21:21,320
And for our Looking Glass project, that would be the Holy Grail.

348
00:21:21,320 --> 00:21:27,480
Like if the plumbing is there in the Linux kernel to do that for the Intel GPUs, we know

349
00:21:27,480 --> 00:21:30,560
Radeon GPUs are quasi capable of it.

350
00:21:30,560 --> 00:21:36,200
What we need to do to move, we as a community, need to do to move the needle forward to be

351
00:21:36,200 --> 00:21:40,040
able to do direct GPU frame buffer, frame buffer copies.

352
00:21:40,040 --> 00:21:43,120
At that point, we're no longer constrained by main memory bandwidth.

353
00:21:43,120 --> 00:21:48,880
We can literally copy that frame buffer directly into another GPU from a guest GPU to a host

354
00:21:48,880 --> 00:21:49,880
GPU.

355
00:21:49,880 --> 00:21:53,840
That's really the next step for speed and optimization in VFIO.

356
00:21:53,840 --> 00:21:58,500
Not only for enterprise workloads where they're doing simulations or tons of streaming clients,

357
00:21:58,500 --> 00:22:05,320
but I would love to see this land in consumer machines because it would make VM super fast,

358
00:22:05,320 --> 00:22:09,760
obviously, but it also means we'd be a step closer to fully isolated applications where

359
00:22:09,760 --> 00:22:14,080
the entire stack is completely isolated, but you're not taking a big performance penalty

360
00:22:14,080 --> 00:22:15,080
for that.

361
00:22:15,080 --> 00:22:16,080
Yeah.

362
00:22:16,080 --> 00:22:21,440
I mean, having a hardware assist, I mean, that level of containerization, I don't really

363
00:22:21,440 --> 00:22:25,000
call it containerization because I'd apply something else, but that level of containerization,

364
00:22:25,000 --> 00:22:26,560
that can only be the future.

365
00:22:26,560 --> 00:22:27,560
Or isolation.

366
00:22:27,560 --> 00:22:28,560
Yeah.

367
00:22:28,560 --> 00:22:31,240
I mean, we have to have this level of secure compute.

368
00:22:31,240 --> 00:22:34,240
Like there's no, like the security threats and the stuff that we see with things like

369
00:22:34,240 --> 00:22:39,040
solar wind, there is no reason today that we shouldn't be running all of our applications

370
00:22:39,040 --> 00:22:42,280
in individual application sandboxes.

371
00:22:42,280 --> 00:22:45,160
I mean, it's almost to the point where each individual application should have its own

372
00:22:45,160 --> 00:22:46,840
encrypted memory space.

373
00:22:46,840 --> 00:22:49,960
The thing that's preventing us from getting there is market segmentation.

374
00:22:49,960 --> 00:22:53,780
We have the hardware, we have the technology, come on guys, let's dot the I's and cross

375
00:22:53,780 --> 00:22:54,780
the T's.

376
00:22:54,780 --> 00:22:55,780
Right.

377
00:22:55,780 --> 00:22:56,780
Yes.

378
00:22:56,780 --> 00:23:02,760
That sounds like another rant I heard recently from a well-known individual.

379
00:23:02,760 --> 00:23:09,000
I want to take a moment and welcome a brand new sponsor to the network and to the show.

380
00:23:09,000 --> 00:23:10,280
It's oh dear.

381
00:23:10,280 --> 00:23:14,240
And the timing is perfect because I think a lot of us are looking for a better take

382
00:23:14,240 --> 00:23:20,940
on how to do monitoring and looking for something that was designed to work with automation.

383
00:23:20,940 --> 00:23:22,640
And that's where oh dear comes in.

384
00:23:22,640 --> 00:23:27,960
Go to oh dear dot app and use the promo code Linux for a $10 discount on any plan.

385
00:23:27,960 --> 00:23:33,400
Oh dear was co-founded by the author of cron dot weekly and a listener of the show.

386
00:23:33,400 --> 00:23:35,080
So they're also from the community.

387
00:23:35,080 --> 00:23:37,000
And I think that's really great.

388
00:23:37,000 --> 00:23:41,080
But you know, as somebody who does run a lot of services, I know what it's like to be informed

389
00:23:41,080 --> 00:23:44,620
by my listeners that something's out before I know it's out.

390
00:23:44,620 --> 00:23:47,200
So be the first to know when your site is unavailable.

391
00:23:47,200 --> 00:23:54,440
Oh dear has global uptime checking with servers that are worldwide that will report a problem

392
00:23:54,440 --> 00:23:59,280
as soon as it happens from multiple different angles and they can go deep into your site.

393
00:23:59,280 --> 00:24:03,620
They can crawl and index your entire website and detect a broken link and notify you about

394
00:24:03,620 --> 00:24:04,620
that.

395
00:24:04,620 --> 00:24:08,380
There's also the ability, of course, to monitor all kinds of aspects of the backend infrastructure.

396
00:24:08,380 --> 00:24:12,120
So perhaps you have scheduled tasks or cron jobs and you want to find out if they've run

397
00:24:12,120 --> 00:24:15,520
or not and look and get alerts if something doesn't execute.

398
00:24:15,520 --> 00:24:17,320
Oh dear completely accommodates that.

399
00:24:17,320 --> 00:24:21,960
Oh dear is always monitoring the performance and speed of your website over time so they

400
00:24:21,960 --> 00:24:23,840
can detect if something happens immediately.

401
00:24:23,840 --> 00:24:29,600
If you have a sudden performance impact, something gets really slow or get a historical snapshot.

402
00:24:29,600 --> 00:24:31,840
See if performance is changing over time.

403
00:24:31,840 --> 00:24:36,820
But the thing that really makes oh dear really special is the API.

404
00:24:36,820 --> 00:24:40,160
It lets you configure everything about the application.

405
00:24:40,160 --> 00:24:44,900
Everything you see in your dashboard can be controlled with an easy to use restful API.

406
00:24:44,900 --> 00:24:52,480
And of course, any changes you make via the API are visible in the dashboard in real time.

407
00:24:52,480 --> 00:24:56,300
It's the monitoring solution that embraces automation and gives you the tools to make

408
00:24:56,300 --> 00:24:58,040
it possible.

409
00:24:58,040 --> 00:25:01,600
And it's comprehensive API means there's tons of third party integrations already available.

410
00:25:01,600 --> 00:25:05,520
There's of course a command line client, but there's other neat ways to interface with

411
00:25:05,520 --> 00:25:09,120
like the notifications in the system to over the API like a telegram chat bot.

412
00:25:09,120 --> 00:25:13,400
There's a JavaScript SDK, a terraform provider and a lot more.

413
00:25:13,400 --> 00:25:15,880
So right now head over to oh dear dot app.

414
00:25:15,880 --> 00:25:20,520
Oh dear dot app and start a 10 day no strings attached trial, no credit card required.

415
00:25:20,520 --> 00:25:22,920
You can get set up in less than a minute.

416
00:25:22,920 --> 00:25:28,260
And when you do sign up for any of the plans, use the promo code Linux for a $10 discount.

417
00:25:28,260 --> 00:25:31,340
And if they ask, tell them the Linux unplug program sent you.

418
00:25:31,340 --> 00:25:32,340
It's pretty neat.

419
00:25:32,340 --> 00:25:33,920
And I think you probably agree.

420
00:25:33,920 --> 00:25:37,580
It's time to relook at how we're doing monitoring, go with a fresher take on something that is

421
00:25:37,580 --> 00:25:42,280
designed for automation with a comprehensive API and great documentation too.

422
00:25:42,280 --> 00:25:43,280
So check them out.

423
00:25:43,280 --> 00:25:47,260
It's oh dear, oh dear dot app promo code Linux for a $10 discount.

424
00:25:47,260 --> 00:25:53,080
And thanks to oh dear for sponsoring the unplugged program.

425
00:25:53,080 --> 00:25:58,800
So my conversation with Wendell continues and I asked him about his daily driver Linux

426
00:25:58,800 --> 00:25:59,800
setup.

427
00:25:59,800 --> 00:26:05,400
So before we go, I want to ask you one last question and that's just a snapshot of what

428
00:26:05,400 --> 00:26:08,360
Wendell's daily Linux drivers look like today.

429
00:26:08,360 --> 00:26:10,200
Are you still mostly a fedora guy?

430
00:26:10,200 --> 00:26:11,740
What kind of hardware, et cetera?

431
00:26:11,740 --> 00:26:13,560
My main machine is a threader for machine.

432
00:26:13,560 --> 00:26:15,560
It's a 3970X.

433
00:26:15,560 --> 00:26:18,680
It's got 128 gigabytes of memory in it right now.

434
00:26:18,680 --> 00:26:28,400
It has a Tesla V100, a 2080Ti and a, I think it's a, no, no, it's the 6800, it's a 6800

435
00:26:28,400 --> 00:26:29,400
non XT.

436
00:26:29,400 --> 00:26:30,400
Whew.

437
00:26:30,400 --> 00:26:31,400
And I'm about out of PCI-E.

438
00:26:31,400 --> 00:26:32,400
Oh, wow.

439
00:26:32,400 --> 00:26:38,280
Do you just run the whole OS at a RAM or what?

440
00:26:38,280 --> 00:26:42,280
Well, I mean, that's the, that's the goal right now.

441
00:26:42,280 --> 00:26:49,940
The V100 can, you can use the V100 as a Titan kind of sorta in a VFIO like type pass-through

442
00:26:49,940 --> 00:26:50,940
type situation.

443
00:26:50,940 --> 00:26:51,940
Oh, that's nice.

444
00:26:51,940 --> 00:26:52,940
That works pretty well.

445
00:26:52,940 --> 00:26:53,940
Yeah.

446
00:26:53,940 --> 00:26:57,400
So you can, you run it as a V100 as pure compute or you can run it as, as whatever.

447
00:26:57,400 --> 00:27:05,120
It's still, it's still a little sketchy sometimes binding and unbinding GPUs.

448
00:27:05,120 --> 00:27:10,920
So that can, that can be a little, a little weird and it's not, it's definitely not an

449
00:27:10,920 --> 00:27:12,840
ideal situation.

450
00:27:12,840 --> 00:27:15,360
I'm not running Fedora right now.

451
00:27:15,360 --> 00:27:20,920
I do have, I'm running 20.10 because I've been helping a lot of people on our forum

452
00:27:20,920 --> 00:27:21,920
use 20.10.

453
00:27:21,920 --> 00:27:26,720
I still have another machine that I do work on, which is still running Fedora, but the

454
00:27:26,720 --> 00:27:33,340
Threadripper machine is running Ubuntu and it's, it doesn't have the same optimizations

455
00:27:33,340 --> 00:27:36,880
for performance for virtual machines out of the box.

456
00:27:36,880 --> 00:27:40,800
And so people on our forum and some, and some other people will have trouble with things

457
00:27:40,800 --> 00:27:44,680
like, you know, sometimes it's crackling audio or sometimes like the virtual machine performance

458
00:27:44,680 --> 00:27:47,280
is fine until you go to write to disk.

459
00:27:47,280 --> 00:27:51,600
And I've found that I've had to do a lot more sort of hand tuning to get those things to

460
00:27:51,600 --> 00:27:58,680
work well on the Ubuntu 20.10 kernel versus Fedora.

461
00:27:58,680 --> 00:28:02,020
And I was going to try the low latency kernel, but then I ran into another problem, which

462
00:28:02,020 --> 00:28:05,680
is you don't get ZFS out of the box necessarily.

463
00:28:05,680 --> 00:28:09,880
And so like the newer kernel, it's like, okay, I'll download the, the, the devs for Ubuntu

464
00:28:09,880 --> 00:28:10,880
from kernel.org.

465
00:28:10,880 --> 00:28:13,960
I was like, oh yeah, ZFS is not a thing with those kernels.

466
00:28:13,960 --> 00:28:14,960
Crap.

467
00:28:14,960 --> 00:28:15,960
I did not realize that.

468
00:28:15,960 --> 00:28:16,960
Yeah.

469
00:28:16,960 --> 00:28:19,780
It's a, and then it's like, okay, let me get the DKMS thing and it's like, oh, this doesn't

470
00:28:19,780 --> 00:28:20,780
work either.

471
00:28:20,780 --> 00:28:24,200
Like, have I, have I painted myself into a corner here?

472
00:28:24,200 --> 00:28:27,680
So I've been, I've been forcing myself to use this setup so that I can sort of learn

473
00:28:27,680 --> 00:28:28,680
what those pitfalls are.

474
00:28:28,680 --> 00:28:29,880
Cause I didn't expect that either.

475
00:28:29,880 --> 00:28:37,080
Like I expected that when I download the Ubuntu kernel from kernel.org, you know, for 20, cause

476
00:28:37,080 --> 00:28:40,200
it's like, okay, let's try 5.10 on 20.10.

477
00:28:40,200 --> 00:28:46,520
But yeah, ZFS, the ZFS DKMS thing wouldn't, doesn't build and it's not in the kernel because

478
00:28:46,520 --> 00:28:48,480
the canonical hasn't got a hold of it yet.

479
00:28:48,480 --> 00:28:51,800
So you have to get the kernel that canonical got a hold of in order to get ZFS.

480
00:28:51,800 --> 00:28:52,800
Oh, okay.

481
00:28:52,800 --> 00:28:55,400
When you lay it out like that, I guess that makes sense.

482
00:28:55,400 --> 00:28:56,520
I see it.

483
00:28:56,520 --> 00:28:57,520
But that was a nice gotcha.

484
00:28:57,520 --> 00:29:01,920
And it's interesting that there's enough people that are using 20.10 that you felt motivated

485
00:29:01,920 --> 00:29:03,660
to switch over to it.

486
00:29:03,660 --> 00:29:07,200
And do you think people are doing that instead of using the LTSs for graphics driver and

487
00:29:07,200 --> 00:29:08,720
Mesa stack updates or?

488
00:29:08,720 --> 00:29:10,920
Yeah, that's what led to all of that.

489
00:29:10,920 --> 00:29:16,880
There was, there was a bit of a, a bit of a kerfuffle when the 6,000 series GPUs launched

490
00:29:16,880 --> 00:29:17,880
and it was like, crap.

491
00:29:17,880 --> 00:29:19,880
I'm going to have to figure this out.

492
00:29:19,880 --> 00:29:23,680
And it really, for me, it wasn't really too bad, but you know, I might be a little bit

493
00:29:23,680 --> 00:29:28,960
snow blind to it because I have so much experience with it, but it really wasn't a huge deal

494
00:29:28,960 --> 00:29:33,440
to get it working on 20.10.

495
00:29:33,440 --> 00:29:40,720
And so like, you know, AMD did a lot of work to get it working on 20.04, but 20.10 launched

496
00:29:40,720 --> 00:29:43,840
like the week before the GPUs launched.

497
00:29:43,840 --> 00:29:49,840
And so you could install the driver from AMD.com and there's, you can get the open driver or

498
00:29:49,840 --> 00:29:55,080
the proprietary driver, but the open driver was basically Abhari with the, with the closed

499
00:29:55,080 --> 00:29:56,080
driver.

500
00:29:56,080 --> 00:30:00,200
And you could get Mesa, newer Mesa and Radvi and, and some other stuff.

501
00:30:00,200 --> 00:30:03,880
I don't know if I'm saying that right, but the, all the accoutrement that goes like with

502
00:30:03,880 --> 00:30:07,760
the stuff that's not in the kernel, but it's a little bit of a, you know, I could, I can

503
00:30:07,760 --> 00:30:11,760
kind of relate because it's a little bit of a trap for newbies because it's like, oh,

504
00:30:11,760 --> 00:30:12,760
I'm running the newest kernel.

505
00:30:12,760 --> 00:30:16,520
And it's like, well, there's all this other stuff that's not in the kernel that you also

506
00:30:16,520 --> 00:30:20,000
need in order to be able to run your games and do your stuff, or you need somebody to

507
00:30:20,000 --> 00:30:24,080
backport those things into something that will run in your environment.

508
00:30:24,080 --> 00:30:30,240
And so, and then, or some poor soul somewhere has to spend a ton of time backporting the

509
00:30:30,240 --> 00:30:36,560
cool stuff in 5.10, which there's a ton of cool stuff in 5.10 and newer to like kernel

510
00:30:36,560 --> 00:30:41,000
5.8 or 5.4 in the case of 20.04.

511
00:30:41,000 --> 00:30:46,340
And so it's kind of an impossible situation because you want the people doing the development,

512
00:30:46,340 --> 00:30:51,120
doing the development on branch master, I guess, for lack of a better way to describe

513
00:30:51,120 --> 00:30:55,840
it, like on head, like you want them doing the work there because that's where it is,

514
00:30:55,840 --> 00:30:59,480
or they know where the bodies are buried, you know, wherever it was.

515
00:30:59,480 --> 00:31:05,560
And so they were doing their work all along when head was 5.4 and they know what's broken

516
00:31:05,560 --> 00:31:07,000
in 5.4.

517
00:31:07,000 --> 00:31:12,620
And so it seems like a crazy situation where, you know, somebody inside of AMD and somebody

518
00:31:12,620 --> 00:31:17,020
inside of Valve or somebody on Valve's indirect payroll, because Valve is greasing the wheels

519
00:31:17,020 --> 00:31:22,020
here very quietly with a lot of money and that is appreciated, but you know, it sort

520
00:31:22,020 --> 00:31:23,020
of gets spoiled.

521
00:31:23,020 --> 00:31:28,320
Like if it's like, oh, Valve is paying $3 million to, you know, developers all over

522
00:31:28,320 --> 00:31:32,320
the world to advance this thing forward, then, you know, as the people tend to want to want

523
00:31:32,320 --> 00:31:36,980
to want to pee in the Cheerios as it were, it's better to just keep it quiet and just

524
00:31:36,980 --> 00:31:40,560
get the work done and, you know, not not do anything for the fanfare.

525
00:31:40,560 --> 00:31:42,040
They're not necessarily in it for the glory anyways.

526
00:31:42,040 --> 00:31:43,040
Yeah, yeah.

527
00:31:43,040 --> 00:31:45,560
They just like, I just I just want a reasonable computing experience.

528
00:31:45,560 --> 00:31:46,840
That's where I am with VFIO.

529
00:31:46,840 --> 00:31:51,400
It's like the whole reason I do the VFIO stuff rather than trying to run a native is like,

530
00:31:51,400 --> 00:31:52,800
I don't, you know, I don't have time for this.

531
00:31:52,800 --> 00:31:53,800
I just want it to work.

532
00:31:53,800 --> 00:31:57,760
And it's like, yes, I would love it if everything worked perfectly on Linux, but I don't have

533
00:31:57,760 --> 00:31:59,720
time for that.

534
00:31:59,720 --> 00:32:03,680
So I want Linux to do what Linux does well, because I can count on Linux to do that.

535
00:32:03,680 --> 00:32:09,800
I don't want to bring the horrible ugliness into Linux because it's my nice, clean, pristine,

536
00:32:09,800 --> 00:32:11,360
you know, thing.

537
00:32:11,360 --> 00:32:16,320
But like the whole understanding in the community of like the whole driver thing with the 6000

538
00:32:16,320 --> 00:32:20,920
series GPUs and all that, it's just it's like when the fabs were spinning up making those

539
00:32:20,920 --> 00:32:27,840
GPUs, there were developers developing on what was then the head of development for

540
00:32:27,840 --> 00:32:31,760
the Linux kernel, which is probably like five point four or five point six or something

541
00:32:31,760 --> 00:32:38,560
in that, not five point ten or, you know, five point ten, you know, beta one or whatever.

542
00:32:38,560 --> 00:32:41,720
And Ubuntu 2004 would have been sort of the big release.

543
00:32:41,720 --> 00:32:46,000
It's what, you know, Canonical says the majority of their users are using the LTS releases.

544
00:32:46,000 --> 00:32:49,800
Of course, the enthusiasts are using the latest releases and the enthusiasts are likely the

545
00:32:49,800 --> 00:32:52,720
ones to buy new GPUs when they first come out.

546
00:32:52,720 --> 00:32:59,320
But yeah, OK, we're using an LTS support, but long term support doesn't imply that it's

547
00:32:59,320 --> 00:33:04,820
going to have the scaffolding and infrastructure to be able to support all of this stuff that

548
00:33:04,820 --> 00:33:06,640
you get with graphics.

549
00:33:06,640 --> 00:33:10,280
So like LTS support, it's like, OK, we're going to spin up our network driver.

550
00:33:10,280 --> 00:33:13,880
We're going to spin up our mouse driver because our mouse has 37 buttons and the built in

551
00:33:13,880 --> 00:33:16,400
driver doesn't handle that well or whatever.

552
00:33:16,400 --> 00:33:18,720
That's going to be fine because that device isn't changing very often.

553
00:33:18,720 --> 00:33:19,720
It's on the market.

554
00:33:19,720 --> 00:33:20,720
It's set.

555
00:33:20,720 --> 00:33:21,720
It's fixed, right?

556
00:33:21,720 --> 00:33:23,920
Yeah, the interface in the kernel is not really changing.

557
00:33:23,920 --> 00:33:25,520
But with GPUs, that's not really the case.

558
00:33:25,520 --> 00:33:29,200
The interface within the kernel is changing dramatically.

559
00:33:29,200 --> 00:33:35,880
And because of the work bringing the newer GPUs to the kernel, we see in what ways the

560
00:33:35,880 --> 00:33:38,280
old interface is deficient.

561
00:33:38,280 --> 00:33:44,220
So then it becomes a huge amount of work to backport those changes to the kernel to the

562
00:33:44,220 --> 00:33:45,220
old kernel.

563
00:33:45,220 --> 00:33:51,680
Effectively, you are, you know, just dressing up, cherry picking bits of kernel 5.10 and

564
00:33:51,680 --> 00:33:54,000
shoving it into kernel 5.4.

565
00:33:54,000 --> 00:33:55,660
And at that point, we're just deluding ourselves.

566
00:33:55,660 --> 00:33:59,160
It's like, you might as well go to kernel 5.10.

567
00:33:59,160 --> 00:34:03,800
I mean, you're probably going to introduce more bugs than you solve because you've, you

568
00:34:03,800 --> 00:34:11,400
know, packaged and backported so much functionality in kernel 5.10 that you're running more kernel

569
00:34:11,400 --> 00:34:13,320
5.10 than 5.4 at this point.

570
00:34:13,320 --> 00:34:14,480
I mean, come on.

571
00:34:14,480 --> 00:34:17,160
So what you're really saying, Wendell, is it would just be easier if the entire world

572
00:34:17,160 --> 00:34:19,480
ran Arch and was rolling all the time.

573
00:34:19,480 --> 00:34:21,320
Yeah, yeah, exactly.

574
00:34:21,320 --> 00:34:25,800
But you know, this is, I get like Linus saying, it's like, don't break user space.

575
00:34:25,800 --> 00:34:31,920
I interpret to say, Linus is saying, you can trust to update your kernel and we probably

576
00:34:31,920 --> 00:34:33,620
will not screw you.

577
00:34:33,620 --> 00:34:37,760
And so the idea of, you know, okay, we're going to have an LTS distro, but I also need

578
00:34:37,760 --> 00:34:41,560
to keep my kernel on whatever version of the kernel existed then.

579
00:34:41,560 --> 00:34:45,680
I think I could see historically like how that was a thing because yeah, I mean, I was

580
00:34:45,680 --> 00:34:46,680
guilty of that.

581
00:34:46,680 --> 00:34:52,040
You know, kernel 2. something on Debian for like way longer than I should have.

582
00:34:52,040 --> 00:34:54,200
Like guilty as charged.

583
00:34:54,200 --> 00:34:57,440
But where we are now with the Linux kernel, it's so good.

584
00:34:57,440 --> 00:35:03,040
And they are usually, not always, but usually so quick about being on top of problems that

585
00:35:03,040 --> 00:35:09,040
for workstations, long-term support means something entirely different than servers,

586
00:35:09,040 --> 00:35:10,040
I think.

587
00:35:10,040 --> 00:35:14,280
And so I think my philosophy is like, let's just roll with the newest kernel that's reasonably

588
00:35:14,280 --> 00:35:18,200
stable and we'll probably have a better experience for it, even on an LTS kernel.

589
00:35:18,200 --> 00:35:22,000
And you can totally install a newer kernel on an LTS kernel and most of the time not

590
00:35:22,000 --> 00:35:23,000
run into problems.

591
00:35:23,000 --> 00:35:24,000
All right.

592
00:35:24,000 --> 00:35:25,000
Well, thank you, Wendell.

593
00:35:25,000 --> 00:35:26,000
All right.

594
00:35:26,000 --> 00:35:33,440
It was great having Wendell on and check out Level One Tech and the link we have in the

595
00:35:33,440 --> 00:35:34,700
show notes.

596
00:35:34,700 --> 00:35:35,700
He knows so much about it.

597
00:35:35,700 --> 00:35:39,080
I just like, I like to absorb the knowledge, but I do want to do a spot of housekeeping

598
00:35:39,080 --> 00:35:41,120
before we go on.

599
00:35:41,120 --> 00:35:45,920
Do join the Luplug if you get a chance on Sundays at noon Pacific, 3 p.m. Eastern.

600
00:35:45,920 --> 00:35:47,480
It's on our mumble server, just in the lobby.

601
00:35:47,480 --> 00:35:50,400
You can get info at linuxunplug.com.

602
00:35:50,400 --> 00:35:56,120
And also a special reminder about the accessibility tools on Linux on the January 4th edition

603
00:35:56,120 --> 00:35:57,800
of the Luplug.

604
00:35:57,800 --> 00:35:59,800
And I've updated the calendar to reflect that.

605
00:35:59,800 --> 00:36:02,280
We're going to try to do that in the future.

606
00:36:02,280 --> 00:36:05,220
And also I want to mention that you might have noticed we don't have a lot of time for

607
00:36:05,220 --> 00:36:07,280
news this week.

608
00:36:07,280 --> 00:36:12,940
Linux Action News continues on and we did get to a lot of stories in episode 171, which

609
00:36:12,940 --> 00:36:14,720
came out yesterday.

610
00:36:14,720 --> 00:36:17,680
And you can get that at linuxactionnews.com.

611
00:36:17,680 --> 00:36:21,780
And a special plug for Self-Hosted 36 later this week, I review the new dedicated Home

612
00:36:21,780 --> 00:36:22,940
Assistant hardware.

613
00:36:22,940 --> 00:36:26,720
I think if you've been listening for the last few weeks, you know how much I love Home Assistant.

614
00:36:26,720 --> 00:36:28,320
Well, I got one.

615
00:36:28,320 --> 00:36:29,320
You got one?

616
00:36:29,320 --> 00:36:30,320
What?

617
00:36:30,320 --> 00:36:31,640
Oh, I'm excited already.

618
00:36:31,640 --> 00:36:32,700
Well, it's here.

619
00:36:32,700 --> 00:36:33,700
It's running.

620
00:36:33,700 --> 00:36:34,700
You know, I'll show you.

621
00:36:34,700 --> 00:36:35,880
I'll show it to you.

622
00:36:35,880 --> 00:36:37,000
It's super cool.

623
00:36:37,000 --> 00:36:41,240
And so there's just a couple of things you need to know about.

624
00:36:41,240 --> 00:36:46,360
And I talk about all that in Self-Hosted episode 36 at selfhosted.show slash 36, which will

625
00:36:46,360 --> 00:36:48,080
be out later this week.

626
00:36:48,080 --> 00:36:51,540
Not out yet as we record this here episode.

627
00:36:51,540 --> 00:36:52,540
So there you go.

628
00:36:52,540 --> 00:36:53,540
That's the housekeeping.

629
00:36:53,540 --> 00:36:58,320
I think that's all the housekeeping we got for this week, just nice and tidy right there.

630
00:36:58,320 --> 00:37:06,160
I was listening to the PeerTube instance as we went along and I didn't have any drops

631
00:37:06,160 --> 00:37:10,360
during the Wendell interview at all, nothing, no drops at all.

632
00:37:10,360 --> 00:37:14,640
It was running super solid and I was getting it from 10 other peers, which was I think

633
00:37:14,640 --> 00:37:17,280
there was something like 20 people watching it.

634
00:37:17,280 --> 00:37:21,200
And then we had as we're going to hear something like 10 people that are seating in.

635
00:37:21,200 --> 00:37:26,280
And it seems to be that when you have that many people, it really kind of smooths out

636
00:37:26,280 --> 00:37:27,280
any of the hiccups.

637
00:37:27,280 --> 00:37:28,560
Oh, that is so neat.

638
00:37:28,560 --> 00:37:31,800
You know, we were playing around in the IRC room, too, and it looks like there is just

639
00:37:31,800 --> 00:37:37,880
a regular HLS feed that you can find the playlist for and pop it in MPV or VLC or whatever client

640
00:37:37,880 --> 00:37:38,880
you like.

641
00:37:38,880 --> 00:37:41,280
I know I'll be trying it with a Chromecast later.

642
00:37:41,280 --> 00:37:42,560
So that should work with anything.

643
00:37:42,560 --> 00:37:46,340
Yeah, that's nice because if you do that, not only could you watch the video stream

644
00:37:46,340 --> 00:37:50,720
in a native Linux client like MPV or VLC, but you're not seating.

645
00:37:50,720 --> 00:37:54,900
Yeah, you wouldn't help us out with, you know, sharing with everyone else watching.

646
00:37:54,900 --> 00:37:58,040
But sometimes that's what you need or you're on and you know, mobile connection or just

647
00:37:58,040 --> 00:37:59,040
use what works.

648
00:37:59,040 --> 00:38:02,720
Yeah, well, you know, if I was if I was on vacation, but I was watching the shows just

649
00:38:02,720 --> 00:38:04,560
to make sure you guys didn't screw it up.

650
00:38:04,560 --> 00:38:06,620
I mean, so I could still watch.

651
00:38:06,620 --> 00:38:07,620
Quality control.

652
00:38:07,620 --> 00:38:08,620
Mm hmm.

653
00:38:08,620 --> 00:38:09,620
Yeah, yeah, yeah.

654
00:38:09,620 --> 00:38:10,620
I'd totally do it that way.

655
00:38:10,620 --> 00:38:11,960
So that way I wasn't burning through my LTE connection.

656
00:38:11,960 --> 00:38:15,240
So and it seems like we maybe we figured out a way we could see it without having to watch

657
00:38:15,240 --> 00:38:16,240
as well.

658
00:38:16,240 --> 00:38:20,360
So you can watch it without having to see it and you can see it without having to watch.

659
00:38:20,360 --> 00:38:23,680
This is the stuff I love about free software in this stack.

660
00:38:23,680 --> 00:38:27,920
We can poke around with this and come up with solutions that we could never put together

661
00:38:27,920 --> 00:38:32,720
with something like YouTube or even something like library, which for all effective intents

662
00:38:32,720 --> 00:38:38,160
and purposes is a crypto scheme with a centralized control that can still be had pressure applied

663
00:38:38,160 --> 00:38:40,520
to it by a federal government.

664
00:38:40,520 --> 00:38:44,620
Where PeerTube, that's decentralized, it's peer to peer and it's federated.

665
00:38:44,620 --> 00:38:47,980
You could take down Jupiter broadcasting, but who wouldn't take down the Federation

666
00:38:47,980 --> 00:38:49,820
of PeerTube instances and their videos?

667
00:38:49,820 --> 00:38:54,100
And it means that in the future, a project like Debian could have DebianTube where they

668
00:38:54,100 --> 00:39:00,120
have their how tos, tutorials, and they have their community events and conferences all

669
00:39:00,120 --> 00:39:03,200
hosted on PeerTube available for download.

670
00:39:03,200 --> 00:39:07,400
And you know, if you hear, oh, there's a Debian event and it's live, you don't have to figure

671
00:39:07,400 --> 00:39:11,860
out where or what platform or if it's on YouTube, you just know it's on DebianTube.

672
00:39:11,860 --> 00:39:14,700
All of their video stuff is on DebianTube.

673
00:39:14,700 --> 00:39:15,960
And now live streams are too.

674
00:39:15,960 --> 00:39:18,940
And it's so cool because it's a lot like YouTube.

675
00:39:18,940 --> 00:39:21,340
It's that simple as far as the user experience goes.

676
00:39:21,340 --> 00:39:23,240
It's part of the publish process.

677
00:39:23,240 --> 00:39:27,060
You publish and if your account's unable to go live, you have an option to just live stream.

678
00:39:27,060 --> 00:39:28,940
And it gives you the URL and the key.

679
00:39:28,940 --> 00:39:33,700
You plug that into OBS and you're live like if it was Twitch, it's just as easy to stream

680
00:39:33,700 --> 00:39:37,060
to as Twitch or YouTube.

681
00:39:37,060 --> 00:39:38,320
And it's incredible.

682
00:39:38,320 --> 00:39:41,940
It's incredible because we're running it all on one instance.

683
00:39:41,940 --> 00:39:48,100
And we experimented over the weekend with a Linode two core instance that was just two

684
00:39:48,100 --> 00:39:50,380
cores and four gigs of RAM.

685
00:39:50,380 --> 00:39:52,900
And we were hosting 20 people in that live stream.

686
00:39:52,900 --> 00:39:55,120
And it was about 60 percent utilization.

687
00:39:55,120 --> 00:39:57,180
We did totally max it out when we started two streams.

688
00:39:57,180 --> 00:39:58,980
Well, I had to make trouble and stream myself.

689
00:39:58,980 --> 00:40:01,720
I mean, you couldn't have all the streaming glory.

690
00:40:01,720 --> 00:40:05,220
You were even sending some pretty high res stuff and it looked good and you were able

691
00:40:05,220 --> 00:40:07,260
to play it back on the studio TV even.

692
00:40:07,260 --> 00:40:11,700
Yeah, it plays the the peer to player even plays in Safari on the iPhone.

693
00:40:11,700 --> 00:40:13,580
I mean, it passes that low bar.

694
00:40:13,580 --> 00:40:16,780
So it's like really it works anywhere.

695
00:40:16,780 --> 00:40:20,420
There's no flash required like it used to require back in the day when we first started

696
00:40:20,420 --> 00:40:21,420
streaming.

697
00:40:21,420 --> 00:40:22,420
I'm I'm pretty stoked about it.

698
00:40:22,420 --> 00:40:26,340
I think it still has a few hiccups here and there, but some of that could be implementation.

699
00:40:26,340 --> 00:40:27,860
So we're still testing it.

700
00:40:27,860 --> 00:40:30,880
But I think it's pretty exciting not only because it could act as a canonical archive

701
00:40:30,880 --> 00:40:36,420
for all of the past and current J.B. shows, but it could mean that if for whatever reason,

702
00:40:36,420 --> 00:40:41,660
you know, maybe J.B. like I was I was speculating on the pre show, maybe J.B. one day defends

703
00:40:41,660 --> 00:40:46,480
a an encryption activist who somebody who's who is publicly known for being anti backdoor

704
00:40:46,480 --> 00:40:50,680
encryption and that becomes disallowed speech on YouTube will have a peer to platform.

705
00:40:50,680 --> 00:40:51,780
Maybe it never happens.

706
00:40:51,780 --> 00:40:53,680
Maybe it's just nice to just have multiple options.

707
00:40:53,680 --> 00:40:57,120
But what's so great about it is we can just plug it into our existing infrastructure.

708
00:40:57,120 --> 00:41:01,540
We can send an RTMP feed to it and we can stream to it just like every other endpoint

709
00:41:01,540 --> 00:41:02,540
we streamed to.

710
00:41:02,540 --> 00:41:03,900
And now it's just part of that mix.

711
00:41:03,900 --> 00:41:05,740
And that's how we're starting to work with it.

712
00:41:05,740 --> 00:41:09,700
And I think it has a lot of potential for open source projects, much like I think Matrix

713
00:41:09,700 --> 00:41:10,700
does.

714
00:41:10,700 --> 00:41:12,140
There's a lot of the same shared potential there.

715
00:41:12,140 --> 00:41:17,580
Matrix for the chat and real time communication and then PeerTube for project archives and

716
00:41:17,580 --> 00:41:18,580
live stream events.

717
00:41:18,580 --> 00:41:23,420
I think the two things complement each other a lot.

718
00:41:23,420 --> 00:41:28,160
Leno dot com slash unplugged Leno dot com slash unplugged.

719
00:41:28,160 --> 00:41:30,620
That's where you go to get a one hundred dollar 60 day credit.

720
00:41:30,620 --> 00:41:31,620
I was just checking.

721
00:41:31,620 --> 00:41:32,620
There's just no way.

722
00:41:32,620 --> 00:41:33,620
Right.

723
00:41:33,620 --> 00:41:34,620
They're still giving us that deal.

724
00:41:34,620 --> 00:41:36,580
Is this possible?

725
00:41:36,580 --> 00:41:38,460
Don't tell them it's too good.

726
00:41:38,460 --> 00:41:42,820
Did you did you check with Janice in the back office because it's just too good of a deal.

727
00:41:42,820 --> 00:41:44,340
There's no way they're letting us still do this.

728
00:41:44,340 --> 00:41:45,340
She was having a sandwich.

729
00:41:45,340 --> 00:41:46,340
She gave me the thumbs up, though.

730
00:41:46,340 --> 00:41:47,340
Got the thumbs up.

731
00:41:47,340 --> 00:41:49,380
Leno dot com slash unplugged.

732
00:41:49,380 --> 00:41:52,580
You go there to get a one hundred dollar 60 day credit towards your new account.

733
00:41:52,580 --> 00:41:54,220
And of course, you support the show.

734
00:41:54,220 --> 00:41:57,900
Leno is our cloud provider of this PeerTube instance that I can't stop going on about.

735
00:41:57,900 --> 00:42:00,020
Yeah, you know it's hosted on Leno.

736
00:42:00,020 --> 00:42:03,520
It's really neat, actually, because first we set up a test instance just like a proof

737
00:42:03,520 --> 00:42:05,540
of concept in minutes.

738
00:42:05,540 --> 00:42:10,500
And you know, we chose an Ubuntu LTS base 2004, then installed Docker on top of that

739
00:42:10,500 --> 00:42:11,500
and then deployed the image.

740
00:42:11,500 --> 00:42:14,980
And we're up and going and in just minutes, really.

741
00:42:14,980 --> 00:42:18,300
And then once we validated it, we thought, how could we build it a little bit better?

742
00:42:18,300 --> 00:42:22,900
Like we could carve off large chunks of block storage because it's super easy to just add

743
00:42:22,900 --> 00:42:24,900
a bunch of block storage to a Leno host.

744
00:42:24,900 --> 00:42:25,900
That's no problem at all.

745
00:42:25,900 --> 00:42:29,380
And Leno's prices are really competitive, in fact, 30 to 50 percent less than major

746
00:42:29,380 --> 00:42:32,100
cloud providers like AWS or Google Cloud or Azure.

747
00:42:32,100 --> 00:42:35,580
So the pricing is great, but we thought we could probably do it better than that.

748
00:42:35,580 --> 00:42:40,540
We were looking at the PeerTube documentation and they have a they have a deployment approach

749
00:42:40,540 --> 00:42:43,920
where you use S3 compatible object storage.

750
00:42:43,920 --> 00:42:45,240
Well guess what Leno has?

751
00:42:45,240 --> 00:42:51,000
They have S3 compatible object storage, which means we can just use as little or as much

752
00:42:51,000 --> 00:42:52,780
space as we need.

753
00:42:52,780 --> 00:42:56,240
We don't have to carve off terabytes at a time so that way we can accommodate months

754
00:42:56,240 --> 00:42:57,820
and months of growth.

755
00:42:57,820 --> 00:42:59,980
We can just use as much or little.

756
00:42:59,980 --> 00:43:03,620
And it also means that these files that PeerTube creates, like the different derivatives for

757
00:43:03,620 --> 00:43:07,860
lower quality streaming, they're available to us via object storage for other automation

758
00:43:07,860 --> 00:43:08,860
purposes.

759
00:43:08,860 --> 00:43:12,620
Like perhaps we write some scripts that now publish those to archive.org.

760
00:43:12,620 --> 00:43:13,720
It's so great.

761
00:43:13,720 --> 00:43:15,620
Object storage is a lot of fun to play with.

762
00:43:15,620 --> 00:43:20,780
And combining it with PeerTube, I think what we maybe have built here is a super easy reproducible

763
00:43:20,780 --> 00:43:24,820
model for other open source projects out there.

764
00:43:24,820 --> 00:43:27,580
Right now we have a four core VPS because we want to play around with live streaming,

765
00:43:27,580 --> 00:43:30,880
but you could really get away with a two core VPS.

766
00:43:30,880 --> 00:43:35,420
Right now we have 16 gigs of RAM because again we're experimenting, but initially we started

767
00:43:35,420 --> 00:43:37,020
with four gigs of RAM.

768
00:43:37,020 --> 00:43:43,080
This could be like somewhere in the $5 to $10 a month territory over at Linode.

769
00:43:43,080 --> 00:43:44,080
You see what I'm saying?

770
00:43:44,080 --> 00:43:45,940
Wow, this could be really accessible for projects.

771
00:43:45,940 --> 00:43:49,820
You can one click deploy a system with Docker ready to go.

772
00:43:49,820 --> 00:43:51,180
It's really simple for them to get going.

773
00:43:51,180 --> 00:43:53,100
The entire stack is open source.

774
00:43:53,100 --> 00:43:56,400
Linode is a participating member of the Linux community.

775
00:43:56,400 --> 00:43:59,260
They've been contributing to projects and events forever.

776
00:43:59,260 --> 00:44:00,960
They've been around forever.

777
00:44:00,960 --> 00:44:04,540
They started in 2000 and I think it was actually, no, I think it was 1800s.

778
00:44:04,540 --> 00:44:06,580
Yeah, I think they've been around for 200.

779
00:44:06,580 --> 00:44:08,020
Oh no, I'm sorry.

780
00:44:08,020 --> 00:44:09,500
No, that's not quite right.

781
00:44:09,500 --> 00:44:10,980
But they've been around forever.

782
00:44:10,980 --> 00:44:12,860
They're an independently owned company.

783
00:44:12,860 --> 00:44:17,820
They started because they have a love for Linux and you just as a project now have access

784
00:44:17,820 --> 00:44:18,820
to this.

785
00:44:18,820 --> 00:44:21,900
It's like just, it became available, YouTube in a box, but it's YouTube of the good old

786
00:44:21,900 --> 00:44:26,980
days under your control and it's not stealing your information and it's on the Linode stack.

787
00:44:26,980 --> 00:44:30,740
It's with a company that's been around since 2003, so you know they're in it for the long

788
00:44:30,740 --> 00:44:32,100
haul.

789
00:44:32,100 --> 00:44:34,860
Also Linode makes it really easy to host game servers.

790
00:44:34,860 --> 00:44:36,900
I was playing around with this for my kid.

791
00:44:36,900 --> 00:44:38,740
They have multiple different types of game servers on there.

792
00:44:38,740 --> 00:44:43,620
Of course they have things like Team Fortress and CSGO and Minecraft.

793
00:44:43,620 --> 00:44:45,780
The Minecraft one, you should check that out.

794
00:44:45,780 --> 00:44:49,660
They let you set all of the options you really are going to care about, like the in-game

795
00:44:49,660 --> 00:44:53,400
server options in the Linode setup screen.

796
00:44:53,400 --> 00:44:55,100
They've automated all of that for you too.

797
00:44:55,100 --> 00:44:56,740
It's so cool.

798
00:44:56,740 --> 00:45:01,300
So if you want a safe place for your friends, your kids, your community to play Minecraft

799
00:45:01,300 --> 00:45:04,420
or one of the other many popular games like Arcs on there as well.

800
00:45:04,420 --> 00:45:06,100
It's such a nice balance point though, right?

801
00:45:06,100 --> 00:45:09,580
I mean, you get the one click, you get the easy configurability because you know how

802
00:45:09,580 --> 00:45:10,580
to do it all.

803
00:45:10,580 --> 00:45:14,340
You don't have to fuss with it this time, but if you ever need to go back in and actually

804
00:45:14,340 --> 00:45:18,380
make more changes, I mean, you've got SSH access, you've got full control, it's all

805
00:45:18,380 --> 00:45:19,380
right there.

806
00:45:19,380 --> 00:45:20,380
Yep.

807
00:45:20,380 --> 00:45:23,300
They give you the whole range, which of course appeals to Wes and I quite a bit.

808
00:45:23,300 --> 00:45:25,700
They're just dedicated to offering the best virtualized cloud computing.

809
00:45:25,700 --> 00:45:30,060
If it runs on Linux, it'll run on Linode and then however much you want, automation or

810
00:45:30,060 --> 00:45:33,860
just build it from the ground up, you choose and they make it all really accessible with

811
00:45:33,860 --> 00:45:35,100
a great dashboard.

812
00:45:35,100 --> 00:45:39,140
So get that $100 credit and play around, linode.com slash unplugged.

813
00:45:39,140 --> 00:45:43,140
You go there, you support the show, make it possible for us to give content away for free

814
00:45:43,140 --> 00:45:46,660
and you help out a great company like Linode and become a customer.

815
00:45:46,660 --> 00:45:47,660
It's a great ecosystem.

816
00:45:47,660 --> 00:45:54,220
I love it, linode.com slash unplugged.

817
00:45:54,220 --> 00:45:55,900
Let's get into some feedback, Mr. Payne.

818
00:45:55,900 --> 00:45:56,900
Yes, let's.

819
00:45:56,900 --> 00:45:58,020
We have a few emails.

820
00:45:58,020 --> 00:46:03,420
Let's start with the openSUSE feedback because as you would expect, we got a lot of it.

821
00:46:03,420 --> 00:46:05,360
We got a lot of it.

822
00:46:05,360 --> 00:46:11,420
So last week on the show, we secretly ran openSUSE Tumbleweed for a week and then gave

823
00:46:11,420 --> 00:46:16,220
you our thoughts, which in a super short summary version where there's parts of it we liked

824
00:46:16,220 --> 00:46:17,220
a lot.

825
00:46:17,220 --> 00:46:19,020
There were parts of it we were not big fans of, especially me.

826
00:46:19,020 --> 00:46:21,660
I wasn't a big fan of the Yast experience.

827
00:46:21,660 --> 00:46:24,180
I've never been a particularly big fan of Zipper.

828
00:46:24,180 --> 00:46:28,260
I was using SUSE as an enterprise user when Zipper came along.

829
00:46:28,260 --> 00:46:31,700
I wasn't a big fan of it then and I'm still not really a huge fan of it.

830
00:46:31,700 --> 00:46:33,980
I think it's one of the slower package managers out there.

831
00:46:33,980 --> 00:46:36,700
And I also think Yast is kind of slow and clunky.

832
00:46:36,700 --> 00:46:42,260
But outside of that, I think SUSE and openSUSE have really stumbled on a nice relationship

833
00:46:42,260 --> 00:46:45,940
between their enterprise products and their community products.

834
00:46:45,940 --> 00:46:48,900
And in the community space specifically, I think one of the things that SUSE is doing

835
00:46:48,900 --> 00:46:53,660
extremely well, I should say openSUSE to be clear here, is doing extremely well is they

836
00:46:53,660 --> 00:46:58,780
have Leap for your server and Tumbleweed for your desktop or your laptop.

837
00:46:58,780 --> 00:47:02,340
And they even have Micro for like a real minimal viable server install.

838
00:47:02,340 --> 00:47:06,700
So they have this really nice suite where it's all very familiar.

839
00:47:06,700 --> 00:47:09,820
If you learn one, it's totally transferable to the other.

840
00:47:09,820 --> 00:47:10,820
And that really appealed.

841
00:47:10,820 --> 00:47:12,620
And we were wondering, could it replace Arch for us?

842
00:47:12,620 --> 00:47:17,580
But at the end of the day, it just felt like there was too much that was old school Linux

843
00:47:17,580 --> 00:47:22,980
for us, specifically when it came to proprietary video card driver management and Yast.

844
00:47:22,980 --> 00:47:26,980
But Caleb wrote in and said, I love the show, but I was disheartened with your experience

845
00:47:26,980 --> 00:47:27,980
with openSUSE.

846
00:47:27,980 --> 00:47:29,100
Obviously, you'd make a valid point.

847
00:47:29,100 --> 00:47:32,220
The documentation is terrible, but they are working on it.

848
00:47:32,220 --> 00:47:37,900
And they point us to t.me slash openSUSE underscore docs if anybody wants to help.

849
00:47:37,900 --> 00:47:44,260
But Caleb suggests we try out OPI, I think OPI, you think that's OPI or OPUS?

850
00:47:44,260 --> 00:47:49,940
I like OPI because it's just a cute name, but it stands for OBS Package Installer.

851
00:47:49,940 --> 00:47:53,420
Search and install almost all packages available for openSUSE and SLE.

852
00:47:53,420 --> 00:47:55,060
Hey, yeah, that sounds pretty handy.

853
00:47:55,060 --> 00:47:59,900
I think that's interesting, and it's kind of like it's answering that AUR question and

854
00:47:59,900 --> 00:48:04,220
tying in OBS, which seems like it really should be just more integrated in because it's such

855
00:48:04,220 --> 00:48:05,540
a great service.

856
00:48:05,540 --> 00:48:09,420
But they wrap up with, lastly, I'd like to make an argument about Yast.

857
00:48:09,420 --> 00:48:12,580
OpenSUSE definitely should be clear about who it's intended for.

858
00:48:12,580 --> 00:48:16,860
Although Linux-y ways of doing things are still there for experienced users, as a sysadmin,

859
00:48:16,860 --> 00:48:18,540
I can tell you it really isn't for me.

860
00:48:18,540 --> 00:48:22,500
Nowadays, even small companies like the one I work for have dozens of servers, bare metal,

861
00:48:22,500 --> 00:48:23,980
containers, VMs, etc.

862
00:48:23,980 --> 00:48:27,780
No one in their right mind manages those with Yast over SSH or whatever.

863
00:48:27,780 --> 00:48:30,060
That's a great point.

864
00:48:30,060 --> 00:48:34,220
Who I think Yast is great for is a power user or a sysadmin who is not familiar with Linux.

865
00:48:34,220 --> 00:48:37,940
Yast does a great job of showing you what is possible in the OS and making it easy.

866
00:48:37,940 --> 00:48:41,380
Yast, building a software RAID array, and Yast doesn't directly equate to the knowledge

867
00:48:41,380 --> 00:48:42,900
of how to do that in RHEL.

868
00:48:42,900 --> 00:48:47,740
The user does know that it's possible, though, and maybe what it should look like.

869
00:48:47,740 --> 00:48:49,220
Interesting defense.

870
00:48:49,220 --> 00:48:52,820
After we wrapped up the show last week, Neil pointed out that it's actually possible to

871
00:48:52,820 --> 00:48:58,340
run OpenSUSE and remove Yast, which I figured would be like a package dependency bomb that

872
00:48:58,340 --> 00:48:59,500
would just destroy your system.

873
00:48:59,500 --> 00:49:00,500
Right.

874
00:49:00,500 --> 00:49:02,700
It feels so integrated into everything.

875
00:49:02,700 --> 00:49:04,460
I do like that defense, though, honestly.

876
00:49:04,460 --> 00:49:08,660
I think there is a class of user where, especially maybe you're just trying out Linux, you're

877
00:49:08,660 --> 00:49:12,180
an admin in your day job doing Windows or something, where you're used to this very

878
00:49:12,180 --> 00:49:17,500
structured environment, lots of GUIs to click for, lots of that kind of deep system integration.

879
00:49:17,500 --> 00:49:19,420
Maybe Yast is just what you're looking for.

880
00:49:19,420 --> 00:49:23,540
And if Neil's right here, and he usually is, we can just rip that out for folks that are

881
00:49:23,540 --> 00:49:25,620
more experienced or just want to do it on your own.

882
00:49:25,620 --> 00:49:27,780
Okay, maybe I need to give that a try.

883
00:49:27,780 --> 00:49:31,740
And then perpetuating the cycle that always puts us off from ever talking about OpenSUSE

884
00:49:31,740 --> 00:49:35,180
and probably also makes it hard for us to enjoy it.

885
00:49:35,180 --> 00:49:39,700
Of course, I had people that were berating me on Twitter, number one troll, of course,

886
00:49:39,700 --> 00:49:44,900
being Richard Brown, who said that I've had people like him provide extensive, quote,

887
00:49:44,900 --> 00:49:50,180
feedback on my, quote, misunderstandings and, quote, false assumptions, end quote, about

888
00:49:50,180 --> 00:49:56,140
OpenSUSE over the years, yet I, quote, stubbornly beat the same false drum.

889
00:49:56,140 --> 00:50:01,500
He is just bored of my rhetoric at this point, which I thought that was really, if that isn't

890
00:50:01,500 --> 00:50:04,420
quintessentially just a perfect example.

891
00:50:04,420 --> 00:50:09,620
You know, Richard Brown also publicly said I was in the pocket of big ZFS years ago when

892
00:50:09,620 --> 00:50:11,820
I criticized ButterFS when it wasn't that great.

893
00:50:11,820 --> 00:50:12,820
Do you remember that?

894
00:50:12,820 --> 00:50:13,820
That was a cute one.

895
00:50:13,820 --> 00:50:18,900
And of course, as he, even though he publicly said I was in the pocket of big ZFS, whatever

896
00:50:18,900 --> 00:50:23,500
the hell that might be, he hasn't given me any credit for my Evolve stance on ButterFS

897
00:50:23,500 --> 00:50:25,580
as the file system has improved.

898
00:50:25,580 --> 00:50:29,060
Hmm, that's interesting.

899
00:50:29,060 --> 00:50:33,060
And it's this kind of language, like when he says that me saying that I don't like to use

900
00:50:33,060 --> 00:50:38,700
Yast or that I find Zipper slow, that that's rhetoric and false assumptions about Suse.

901
00:50:38,700 --> 00:50:45,980
You know, he's saying he's using this language like rhetoric at a time when things are really

902
00:50:45,980 --> 00:50:48,180
not great in the States.

903
00:50:48,180 --> 00:50:52,020
And the words like rhetoric have a lot of meaning and a lot of power right now.

904
00:50:52,020 --> 00:50:57,800
And it feels like it's a missed place kind of energy and anger that's coming at me.

905
00:50:57,800 --> 00:51:05,380
And it's always kind of been this kind of arrogant stubbornness that has kind of radiated

906
00:51:05,380 --> 00:51:09,700
out from the project by folks like Richard Brown, and even though he's less involved

907
00:51:09,700 --> 00:51:16,240
now, he still seems to be kind of still creating that same persona around the project because,

908
00:51:16,240 --> 00:51:22,500
you know, these words I'm speaking now are going to be heard by tens and tens and tens

909
00:51:22,500 --> 00:51:24,260
of thousands of people.

910
00:51:24,260 --> 00:51:26,800
His tweet is going to be seen by a couple of people.

911
00:51:26,800 --> 00:51:29,980
So what does he think he's accomplishing with this kind of rhetoric and attack?

912
00:51:29,980 --> 00:51:33,080
And using this kind of language, it only escalates the situation.

913
00:51:33,080 --> 00:51:36,740
And it doesn't welcome anybody in to say your experiences are wrong.

914
00:51:36,740 --> 00:51:40,040
He's denying me my own personal experiences in this tweet.

915
00:51:40,040 --> 00:51:41,420
That's what stuck out to me, right?

916
00:51:41,420 --> 00:51:45,580
Because I think we were legitimately trying, whether or not you liked our take or not,

917
00:51:45,580 --> 00:51:49,540
to come at this with an open mind and sort of as a new people who had not used open Suse

918
00:51:49,540 --> 00:51:52,620
for quite some time and just get the experience.

919
00:51:52,620 --> 00:51:55,820
And many people have pointed out the things that we missed or, you know, as some people

920
00:51:55,820 --> 00:51:58,980
have said, like, no one really uses yes, like, what are you talking about?

921
00:51:58,980 --> 00:52:01,180
But that was our experience just getting into it.

922
00:52:01,180 --> 00:52:03,980
And we don't have the inside community perspective.

923
00:52:03,980 --> 00:52:06,820
I don't think we were trying to say, like, this is the truth.

924
00:52:06,820 --> 00:52:08,500
This was just our experience.

925
00:52:08,500 --> 00:52:09,500
Yeah.

926
00:52:09,500 --> 00:52:14,460
And, and I think to say my experience is a misunderstanding or a false assumption is

927
00:52:14,460 --> 00:52:15,460
unfair to me.

928
00:52:15,460 --> 00:52:17,420
My experience is that zipper is slow.

929
00:52:17,420 --> 00:52:22,220
And my experience is that Yas kind of adds a complicated layer to managing Linux that

930
00:52:22,220 --> 00:52:26,340
makes it unique experience to Suse only, which presents non transferable skills to other

931
00:52:26,340 --> 00:52:27,340
distributions.

932
00:52:27,340 --> 00:52:30,780
And, I mean, maybe that's a false assumption, but it's, it's my experience.

933
00:52:30,780 --> 00:52:32,180
It's the way I see the world.

934
00:52:32,180 --> 00:52:33,940
And I don't like that he's shutting it down like that.

935
00:52:33,940 --> 00:52:37,900
But Neil, I don't know if you want to wait in the middle of this before we wrap this

936
00:52:37,900 --> 00:52:38,900
up.

937
00:52:38,900 --> 00:52:42,140
And I don't really want to turn this into a big Suse bashing thing because I think it's

938
00:52:42,140 --> 00:52:45,220
actually a pretty great project and they got a little, a lot of great tech and engineers

939
00:52:45,220 --> 00:52:46,220
there.

940
00:52:46,220 --> 00:52:48,420
Well, I don't want to bash open Suse either.

941
00:52:48,420 --> 00:52:53,180
I mean, I'm heavily involved in the project, so it would be pretty bad if I did.

942
00:52:53,180 --> 00:52:58,260
I think there is plenty of fair criticisms about how people have generally approached

943
00:52:58,260 --> 00:52:59,340
open Suse over the years.

944
00:52:59,340 --> 00:53:05,140
I mean, and I think it's, it's somewhat fair to say that Chris, a lot of your approach

945
00:53:05,140 --> 00:53:10,300
to open Suse over the past five or so years has been influenced or colored by previous

946
00:53:10,300 --> 00:53:14,500
experiences using it professionally, which I think is fine and fair.

947
00:53:14,500 --> 00:53:20,340
But at the same time, it's also important to acknowledge that people who are longstanding

948
00:53:20,340 --> 00:53:24,420
in the open Suse project who have been using open Suse for a very long time.

949
00:53:24,420 --> 00:53:29,880
Like if you saw the end of the year survey, the majority of people who have been using

950
00:53:29,880 --> 00:53:35,060
open Suse have been using it for a decade or longer and are like twice my age, which

951
00:53:35,060 --> 00:53:38,800
is pretty insane when you think about it.

952
00:53:38,800 --> 00:53:44,420
And that means that maybe the other part that's missing is just a lack of fresh perspective

953
00:53:44,420 --> 00:53:46,620
on the project as a whole.

954
00:53:46,620 --> 00:53:52,180
And that kind of dovetails into what you said about Zipper being, it felt slower to you.

955
00:53:52,180 --> 00:53:58,140
This morning we actually, there was a mailing list post that empirically said on open Suse

956
00:53:58,140 --> 00:54:02,620
itself in a CI environment for a specific test case, mind you, like it's not proven

957
00:54:02,620 --> 00:54:07,680
across the board or whatever, but like for this specific test case, we found that Zipper

958
00:54:07,680 --> 00:54:14,220
was twice as slow as DNF for the same workload, for the same installation transaction.

959
00:54:14,220 --> 00:54:15,780
And I understand why that is.

960
00:54:15,780 --> 00:54:18,740
Like I don't want to get into the details cause it's kind of mind numbing and boring

961
00:54:18,740 --> 00:54:25,100
for most people, but it's important to recognize that you have to continue to figure out how

962
00:54:25,100 --> 00:54:29,420
to evolve and to support a growing community over time.

963
00:54:29,420 --> 00:54:34,060
And perhaps some of the issue here is that a lot of the folks in the open Suse community

964
00:54:34,060 --> 00:54:39,960
feel super defensive about their choice in the same way that, you know, 10 years ago,

965
00:54:39,960 --> 00:54:45,080
people used to be the same way about Arch and Suse and Mandriva and Magia users.

966
00:54:45,080 --> 00:54:50,820
They're all in that boat now where people often criticize them for their choice rather

967
00:54:50,820 --> 00:54:55,460
than embracing them and helping them turn into people that can help make their choice

968
00:54:55,460 --> 00:54:56,820
of distributions better.

969
00:54:56,820 --> 00:54:57,820
Yep.

970
00:54:57,820 --> 00:54:58,980
I can totally, I could totally kind of see that.

971
00:54:58,980 --> 00:55:00,700
I think that's a really fair point.

972
00:55:00,700 --> 00:55:04,300
I hope that they are able to attract new blood cause it sounds like that may be an issue

973
00:55:04,300 --> 00:55:06,940
for the project if that many people haven't have been using it for that long.

974
00:55:06,940 --> 00:55:10,260
But we, uh, you know, I, we keep an eye on it.

975
00:55:10,260 --> 00:55:15,060
It just, it seems like too, we, I think there has to be room for different distros for different

976
00:55:15,060 --> 00:55:16,060
folks.

977
00:55:16,060 --> 00:55:17,420
Yes, definitely.

978
00:55:17,420 --> 00:55:19,300
And I think that's where Suse falls down for us.

979
00:55:19,300 --> 00:55:20,960
It's like, it's not that it doesn't work.

980
00:55:20,960 --> 00:55:23,100
It's not that it's some pile of garbage.

981
00:55:23,100 --> 00:55:27,180
It's just not the distro for us and the way we've learned to work in the Linux ecosystem

982
00:55:27,180 --> 00:55:31,100
over a long time because we, we, we now we've been doing this for a while.

983
00:55:31,100 --> 00:55:34,940
Somebody coming in new and fresh, uh, like Kayla pointed out in the email that maybe

984
00:55:34,940 --> 00:55:40,380
doesn't know how to do something in Linux, but just wants to know it can be done or maybe

985
00:55:40,380 --> 00:55:42,060
needs to learn it's possible.

986
00:55:42,060 --> 00:55:43,060
Yes.

987
00:55:43,060 --> 00:55:44,060
Provides that functionality.

988
00:55:44,060 --> 00:55:49,300
I mean, there was a period of time when I was using Yast to connect my, uh, Sles storage

989
00:55:49,300 --> 00:55:52,020
servers to a, to a windows domain.

990
00:55:52,020 --> 00:55:57,380
And I knew how to do it on the command line using all the tools.

991
00:55:57,380 --> 00:56:03,220
But over time it just became a lot nicer and quicker to just go into Yast and if I install

992
00:56:03,220 --> 00:56:08,020
that module, if I hadn't, if I didn't have it installed, put the credentials in and let

993
00:56:08,020 --> 00:56:09,680
it just do its thing.

994
00:56:09,680 --> 00:56:11,780
And I use the hell out of that.

995
00:56:11,780 --> 00:56:16,100
And I told, so I can totally relate to somebody who maybe isn't particularly familiar with

996
00:56:16,100 --> 00:56:19,540
the process, being able to rely on Yast and knowing it's getting done right.

997
00:56:19,540 --> 00:56:21,460
That's just not where I'm at anymore.

998
00:56:21,460 --> 00:56:22,460
And that's just my experience.

999
00:56:22,460 --> 00:56:26,420
But anyways, let's move on because we had somebody write in that suggested that we try

1000
00:56:26,420 --> 00:56:27,420
out Alpine.

1001
00:56:27,420 --> 00:56:31,660
Jordan says, uh, I know you guys never really had a personal use case for it, but one that

1002
00:56:31,660 --> 00:56:36,140
I found for Alpine that nothing else can do is custom install media.

1003
00:56:36,140 --> 00:56:37,140
Just for fun.

1004
00:56:37,140 --> 00:56:38,140
Here's what I did.

1005
00:56:38,140 --> 00:56:39,140
I built a chroot on arch.

1006
00:56:39,140 --> 00:56:40,820
I use it to make a custom ISO.

1007
00:56:40,820 --> 00:56:44,980
Then I boot the ISO in a VM, configure the network, save the changes with Alpine LBU.

1008
00:56:44,980 --> 00:56:47,620
And then I boot that ISO with the LBU changes on real hardware.

1009
00:56:47,620 --> 00:56:48,620
Boom.

1010
00:56:48,620 --> 00:56:50,580
I have my own install image factory.

1011
00:56:50,580 --> 00:56:57,700
The biggest drawback is that it uses M U S L. Oh, instead of G lib C. Mm hmm.

1012
00:56:57,700 --> 00:57:01,340
He goes on to say the area where this is an issue is proprietary applications.

1013
00:57:01,340 --> 00:57:06,780
There is a compatibility layer for G lib C libraries, but I haven't tried steam yet.

1014
00:57:06,780 --> 00:57:08,380
Oh wow.

1015
00:57:08,380 --> 00:57:10,420
Alpine on the desktop.

1016
00:57:10,420 --> 00:57:12,180
All right.

1017
00:57:12,180 --> 00:57:16,700
What I like about this feedback was that Jordan clearly got some of our perspective, you know,

1018
00:57:16,700 --> 00:57:19,620
just that Alpine is conceptually similar to arch.

1019
00:57:19,620 --> 00:57:24,660
They write and that I like to think of it as a smaller, simpler arch.

1020
00:57:24,660 --> 00:57:28,260
What stuck with me there is that clearly they picked up on what we wanted from arch was

1021
00:57:28,260 --> 00:57:32,300
this sort of simple base, very lean and mean, and that we could actually just have an understanding

1022
00:57:32,300 --> 00:57:35,660
of everything that was going on, especially for the arch server.

1023
00:57:35,660 --> 00:57:40,500
He, I think, I think he's right though that, Hey, maybe we should try Alpine in a few more

1024
00:57:40,500 --> 00:57:41,500
places.

1025
00:57:41,500 --> 00:57:42,500
See where it fits.

1026
00:57:42,500 --> 00:57:43,500
Yeah.

1027
00:57:43,500 --> 00:57:44,500
That minimum viable server really is what appeals to us.

1028
00:57:44,500 --> 00:57:49,100
And you can kind of see why maybe SUSE doesn't necessarily appeal to us because what we want

1029
00:57:49,100 --> 00:57:55,220
is just the bare bare minimum where Wes and I can actually articulate to you the applications

1030
00:57:55,220 --> 00:57:59,640
that are installed because it's Samba and net data and everything else is in a container.

1031
00:57:59,640 --> 00:58:03,220
We can articulate to you the file system layout, everything because we built it with our own

1032
00:58:03,220 --> 00:58:07,500
hands and we only installed the packages we absolutely had to have.

1033
00:58:07,500 --> 00:58:11,220
And that's one of the ways we think maybe we've been a little more successful now with

1034
00:58:11,220 --> 00:58:16,020
arch on the server is switching to the LTS kernel and really keeping that base install

1035
00:58:16,020 --> 00:58:17,620
super, super minimal.

1036
00:58:17,620 --> 00:58:22,380
I also like it as a way for, you know, there's lots of stuff that arch or Alpine are similar.

1037
00:58:22,380 --> 00:58:25,740
They don't set up for you or maybe they give you documentation about how to set up.

1038
00:58:25,740 --> 00:58:30,000
And I, I like us having to either figure out how to do that or not do that and skip it

1039
00:58:30,000 --> 00:58:33,380
and live with the results because it also gives you a nice window into some of the stuff

1040
00:58:33,380 --> 00:58:36,940
you might get for free on a more fully featured distro like Fedora or Ubuntu.

1041
00:58:36,940 --> 00:58:37,940
Yeah.

1042
00:58:37,940 --> 00:58:40,620
And I think there's a, probably a future episode out there.

1043
00:58:40,620 --> 00:58:45,800
If we remember to wear our flame retardant pants, where we try out something like a micro

1044
00:58:45,800 --> 00:58:49,640
or some of the just enough OS stuff, maybe if it's possible to run on the raspberry PI

1045
00:58:49,640 --> 00:58:53,620
cause it seems like that'd be a great candidate for that kind of SUSE distro.

1046
00:58:53,620 --> 00:58:57,100
So I could see future content depending on what we get in feedback and the people are

1047
00:58:57,100 --> 00:58:58,260
interested in that kind of stuff.

1048
00:58:58,260 --> 00:59:03,380
I'm kind of thinking, Wes, we do a kind of a pick feedback special next week cause we've

1049
00:59:03,380 --> 00:59:07,540
got a lot of really good feedback that we haven't been able to get to, including some

1050
00:59:07,540 --> 00:59:11,900
follow up on mail spring, which I am now back again using since we heard the developer pop

1051
00:59:11,900 --> 00:59:12,900
his head up.

1052
00:59:12,900 --> 00:59:13,900
Yeah.

1053
00:59:13,900 --> 00:59:16,020
I'm using mail spring again for my email, but I want to follow up more on that later

1054
00:59:16,020 --> 00:59:17,820
cause we got some email to that.

1055
00:59:17,820 --> 00:59:19,500
We also got some people that got predictions in.

1056
00:59:19,500 --> 00:59:24,500
So I want to get those in while we can while we're still within January and a lot more.

1057
00:59:24,500 --> 00:59:28,940
So Wes, let's just jump to the pics and promise to do more feedback next week.

1058
00:59:28,940 --> 00:59:33,060
Now you may have noticed I've been thinking a lot about GPUs this week.

1059
00:59:33,060 --> 00:59:37,660
I don't know if that came across and while I was looking at what the hell's going on

1060
00:59:37,660 --> 00:59:44,780
between my X1 and the XPS 13 and of course my desktop, I wanted something that's like

1061
00:59:44,780 --> 00:59:48,460
that that utility that tells you everything about your processor that I forget what it's

1062
00:59:48,460 --> 00:59:50,860
called like X CPU or whatever.

1063
00:59:50,860 --> 00:59:56,500
Now there's GPU viewer and it's a front end to GLX info, Vulcan info, CLI info and ES2

1064
00:59:56,500 --> 01:00:00,660
info and it puts it all in a fairly decent way.

1065
01:00:00,660 --> 01:00:02,180
It's not beautiful.

1066
01:00:02,180 --> 01:00:03,300
I won't call it pretty.

1067
01:00:03,300 --> 01:00:04,300
Yeah.

1068
01:00:04,300 --> 01:00:08,300
That was my main takeaway here, but it's a lot simpler to navigate than having to know

1069
01:00:08,300 --> 01:00:11,900
all the commands and then figure out like paging in your terminal, especially if you're

1070
01:00:11,900 --> 01:00:15,580
new to this stuff and just want to figure out what's on your system and get to playing

1071
01:00:15,580 --> 01:00:16,580
games.

1072
01:00:16,580 --> 01:00:17,580
Yeah.

1073
01:00:17,580 --> 01:00:18,580
Is my Vulcan support working?

1074
01:00:18,580 --> 01:00:22,100
Am I using the accelerated GPU or am I using the open source driver?

1075
01:00:22,100 --> 01:00:25,300
These questions are immediately obvious to you with this tool and there's lots of ways

1076
01:00:25,300 --> 01:00:30,260
to get that info, but the nice thing about GPU viewer is you also get the nitty gritty

1077
01:00:30,260 --> 01:00:36,140
details like the specific driver version information and the exact video card that's detected and

1078
01:00:36,140 --> 01:00:40,620
the amount of hardware information that the thing can extract for your video card and

1079
01:00:40,620 --> 01:00:45,700
then all of the other kind of like supported 3D features in Vulcan and OpenGL and it's

1080
01:00:45,700 --> 01:00:49,020
just a nice tool for troubleshooting graphics in general and so it's called GPU-Viewer.

1081
01:00:49,020 --> 01:00:55,220
We'll have a link in the show notes at linuxunplugged.com.388 or you can probably find it on GitHub because

1082
01:00:55,220 --> 01:00:56,220
that's where it is.

1083
01:00:56,220 --> 01:00:57,220
It's on GitHub.

1084
01:00:57,220 --> 01:00:58,220
It's on GitHub.

1085
01:00:58,220 --> 01:01:01,300
It's packaged in Ubuntu 2010 and a few other places or you can install it since it's just

1086
01:01:01,300 --> 01:01:02,340
a simple Python app.

1087
01:01:02,340 --> 01:01:09,540
So easy to get a shout out to our core contributors, unpluggedcore.com.

1088
01:01:09,540 --> 01:01:12,420
They really are the hawks of this show.

1089
01:01:12,420 --> 01:01:14,300
They really they held in there.

1090
01:01:14,300 --> 01:01:18,300
I announced last week that we had this bug where people who used the founder promo were

1091
01:01:18,300 --> 01:01:24,140
not getting renewed and so we had this renewal failure rate that was like 52% or it was getting

1092
01:01:24,140 --> 01:01:25,140
pretty bad.

1093
01:01:25,140 --> 01:01:26,640
It was getting worse by the day.

1094
01:01:26,640 --> 01:01:32,100
Well I'm happy to say that the bug's been fixed and like 97% of anyone who ever used

1095
01:01:32,100 --> 01:01:33,940
the founder code has got the discount reapplied.

1096
01:01:33,940 --> 01:01:35,660
You don't have to do a dang thing.

1097
01:01:35,660 --> 01:01:39,600
So if you sat back and didn't do anything, well your procrastinating paid off because

1098
01:01:39,600 --> 01:01:41,580
they fixed it for you.

1099
01:01:41,580 --> 01:01:46,020
But I am still, for anybody who may have slipped through the cracks because 97% is not 100%

1100
01:01:46,020 --> 01:01:51,020
and anybody else who wants to lock in a membership for this show and get access to the benefit

1101
01:01:51,020 --> 01:01:55,180
goodies, I'm keeping that promo code 2021 going for a bit and that will take two bucks

1102
01:01:55,180 --> 01:01:56,180
off.

1103
01:01:56,180 --> 01:01:59,060
Just doing that for a little while, kind of like a happy new year's deal.

1104
01:01:59,060 --> 01:02:03,100
Then you get access to our feeds, either the limited ad version of the show, the same full

1105
01:02:03,100 --> 01:02:07,540
production, the version that really sounds good in the car or the one that had the Joe

1106
01:02:07,540 --> 01:02:08,540
touch.

1107
01:02:08,540 --> 01:02:09,540
And then there's also the bootleg feed.

1108
01:02:09,540 --> 01:02:13,900
The full live version, all our screw ups, the stuff that never makes it into the show.

1109
01:02:13,900 --> 01:02:16,220
If you can't join live, that's the one you want.

1110
01:02:16,220 --> 01:02:18,260
Yeah, it has that live experience, man.

1111
01:02:18,260 --> 01:02:21,860
You can put it up on the TV and like, you know, be working in the kitchen and you would

1112
01:02:21,860 --> 01:02:24,140
feel like you're listening to a live show.

1113
01:02:24,140 --> 01:02:26,180
You get the full pre and post show.

1114
01:02:26,180 --> 01:02:27,420
It's basically like a whole other show.

1115
01:02:27,420 --> 01:02:29,100
It really is.

1116
01:02:29,100 --> 01:02:33,420
And we got a couple of shout outs from diehards that make it through the entire file because

1117
01:02:33,420 --> 01:02:35,940
it's much, much longer than the main show.

1118
01:02:35,940 --> 01:02:41,180
And that's all available to anybody who wants to support us at unpluggedcore.com.

1119
01:02:41,180 --> 01:02:44,600
Mr. Payne, also, I want to mention that our friends over at a Cloud Guru have a Red Hat

1120
01:02:44,600 --> 01:02:48,260
certified administrator exam prep course that you can take.

1121
01:02:48,260 --> 01:02:49,260
Oh, ho, ho.

1122
01:02:49,260 --> 01:02:50,260
Nice.

1123
01:02:50,260 --> 01:02:51,260
Yes.

1124
01:02:51,260 --> 01:02:55,580
And in this course, they cover like the concepts necessary to pass the Red Hat exam using a

1125
01:02:55,580 --> 01:02:57,700
mix of lessons and hands on labs.

1126
01:02:57,700 --> 01:03:00,340
And then at the end, you put it all together with a challenge lab.

1127
01:03:00,340 --> 01:03:03,820
And I know people have emailed into the show asking about certifications and which ones

1128
01:03:03,820 --> 01:03:05,480
on a Cloud Guru we recommend.

1129
01:03:05,480 --> 01:03:06,480
This is the one.

1130
01:03:06,480 --> 01:03:10,340
And so we'll put a link to that in the show notes because I guess a lot of people have

1131
01:03:10,340 --> 01:03:12,100
New Year's resolutions out there.

1132
01:03:12,100 --> 01:03:14,880
So check out the Red Hat certified system administrator exam prep.

1133
01:03:14,880 --> 01:03:17,940
That's the one we recommend for that particular path if that's where you're going.

1134
01:03:17,940 --> 01:03:22,980
And we'll have a link to that specific one in the show notes so you can get it at a cloudguru.com.

1135
01:03:22,980 --> 01:03:27,900
And then we'll hold, I think, the rest of the feedback, Wes, for next show because I

1136
01:03:27,900 --> 01:03:29,820
think we'll just do a feedback special.

1137
01:03:29,820 --> 01:03:31,600
So we got to some of it.

1138
01:03:31,600 --> 01:03:33,300
But I think that's what the plan is.

1139
01:03:33,300 --> 01:03:34,460
So do join us next week.

1140
01:03:34,460 --> 01:03:36,180
See you next week.

1141
01:03:36,180 --> 01:03:38,780
Same bad time, same bad station.

1142
01:03:38,780 --> 01:03:42,620
And now is a great time to get any feedback you might have Linux Unplugged dot com slash

1143
01:03:42,620 --> 01:03:45,820
contact and hey, maybe we'll include it in next week's show.

1144
01:03:45,820 --> 01:03:46,820
Good point.

1145
01:03:46,820 --> 01:03:47,820
Look at you.

1146
01:03:47,820 --> 01:03:48,820
That's the hack, right?

1147
01:03:48,820 --> 01:03:51,260
You got something you've been wanting to get in and now you know we're looking at the feedback

1148
01:03:51,260 --> 01:03:52,260
in particular.

1149
01:03:52,260 --> 01:03:53,260
Now's the time.

1150
01:03:53,260 --> 01:03:54,260
You can just get it in.

1151
01:03:54,260 --> 01:03:56,300
You can join us live at jblive.tv.

1152
01:03:56,300 --> 01:04:00,520
We do the show at noon Pacific, 3 p.m. Eastern or get it on a download.

1153
01:04:00,520 --> 01:04:04,380
You can find the feeds for that at Linux Unplugged dot com slash subscribe.

1154
01:04:04,380 --> 01:04:07,580
And like I said, links to everything we talked about today at Linux Unplugged dot com slash

1155
01:04:07,580 --> 01:04:08,580
three eight eight.

1156
01:04:08,580 --> 01:04:35,460
Thanks for joining us and we'll see you right back here next Tuesday.

1157
01:04:38,580 --> 01:04:49,500
All right, JB titles dot com.

1158
01:04:49,500 --> 01:04:50,500
Let's go.

1159
01:04:50,500 --> 01:04:52,500
And I know we don't have a lot of time.

1160
01:04:52,500 --> 01:04:56,180
I wanted to kind of make this a slightly shorter episode because we've been going long.

1161
01:04:56,180 --> 01:05:00,020
But I did want to actually get this on air because it's something I've been meaning to

1162
01:05:00,020 --> 01:05:04,540
talk about and haven't had a place to like talk about it or troubleshoot with you guys.

1163
01:05:04,540 --> 01:05:05,540
So JB titles dot com.

1164
01:05:05,540 --> 01:05:06,540
Go boat.

1165
01:05:06,540 --> 01:05:08,660
Chris has some technical troubles.

1166
01:05:08,660 --> 01:05:13,300
Yeah, I'm having some fedora woes and it's nothing that's like it's not going to like

1167
01:05:13,300 --> 01:05:14,940
it's not a deal breaker.

1168
01:05:14,940 --> 01:05:20,900
But I have this weird problem where all of my flat pack apps have vanished from Plasma's

1169
01:05:20,900 --> 01:05:21,900
purview.

1170
01:05:21,900 --> 01:05:24,900
My launcher, my menu, K runner, what it cannot find them.

1171
01:05:24,900 --> 01:05:25,900
They don't exist.

1172
01:05:25,900 --> 01:05:27,680
I can still execute them on the command line.

1173
01:05:27,680 --> 01:05:31,900
And if I search for them and discover and then go to their entry, I can launch them.

1174
01:05:31,900 --> 01:05:33,340
So they still register.

1175
01:05:33,340 --> 01:05:34,340
They're there.

1176
01:05:34,340 --> 01:05:35,920
They're just not there.

1177
01:05:35,920 --> 01:05:36,980
But they're otherwise unknown.

1178
01:05:36,980 --> 01:05:40,420
And while they are running, I cannot right click and say pin to taskbar.

1179
01:05:40,420 --> 01:05:42,460
I cannot add them to the menu.

1180
01:05:42,460 --> 01:05:44,540
I cannot do it just the I can.

1181
01:05:44,540 --> 01:05:48,120
The option is it just you check it and nothing happens.

1182
01:05:48,120 --> 01:05:51,880
They just and then I close them and they are they are completely unfindable unless I do

1183
01:05:51,880 --> 01:05:55,220
the flat pack execute command or I launch discover again.

1184
01:05:55,220 --> 01:05:58,260
And here's and so I don't know what that's about, but and I don't know if this problem

1185
01:05:58,260 --> 01:05:59,260
is related.

1186
01:05:59,260 --> 01:06:00,260
I don't think so.

1187
01:06:00,260 --> 01:06:07,020
There's a separate kind of software discover issue where I will do a DNF upgrade, you know,

1188
01:06:07,020 --> 01:06:09,060
update whatever, and I'll update all my packages.

1189
01:06:09,060 --> 01:06:12,260
I'll get tons and tons and tons and tons of stuff installed because Fedora's always got

1190
01:06:12,260 --> 01:06:13,940
lots of goodies.

1191
01:06:13,940 --> 01:06:19,420
And then I'll reboot and I'll log in and I'll get the plasma notification that I have 14

1192
01:06:19,420 --> 01:06:20,420
updates available.

1193
01:06:20,420 --> 01:06:21,420
So I'll do a DNF update.

1194
01:06:21,420 --> 01:06:22,980
It'll say no packages available.

1195
01:06:22,980 --> 01:06:25,100
So then I do a I'll do a flat pack update.

1196
01:06:25,100 --> 01:06:26,620
It'll say no updates available.

1197
01:06:26,620 --> 01:06:31,820
I open up discover and there's like 14 packages in there, including like what looked like

1198
01:06:31,820 --> 01:06:34,960
to be just system packages.

1199
01:06:34,960 --> 01:06:35,960
And then I do the update.

1200
01:06:35,960 --> 01:06:37,620
So then so that happened one time.

1201
01:06:37,620 --> 01:06:42,020
Now the flip side has happened where I go and discover it says there's no updates.

1202
01:06:42,020 --> 01:06:43,020
I launched DNF.

1203
01:06:43,020 --> 01:06:47,500
It says there's updates and that they just don't agree like in none of them agree, but

1204
01:06:47,500 --> 01:06:49,740
they seem to be installing some of the same stuff.

1205
01:06:49,740 --> 01:06:51,080
And it's really strange.

1206
01:06:51,080 --> 01:06:54,500
So I'll do a DNF update on the command line, reboot and then get a notification.

1207
01:06:54,500 --> 01:06:55,860
Hey, you got more packages.

1208
01:06:55,860 --> 01:06:56,860
I go and discover.

1209
01:06:56,860 --> 01:06:57,860
I do an update.

1210
01:06:57,860 --> 01:06:59,140
And it's not just flat packs.

1211
01:06:59,140 --> 01:07:00,220
I know what you're talking about.

1212
01:07:00,220 --> 01:07:01,220
I know what's happening.

1213
01:07:01,220 --> 01:07:02,220
Different cache.

1214
01:07:02,220 --> 01:07:05,100
Yeah, there's two separate caches right now.

1215
01:07:05,100 --> 01:07:09,300
So one of the problems that we have right now and this is something I've been on the

1216
01:07:09,300 --> 01:07:15,180
on my spare time trying to figure out how to fix because I'm one of the by virtue of

1217
01:07:15,180 --> 01:07:16,180
happenstance.

1218
01:07:16,180 --> 01:07:19,140
I'm now one of the maintainers of package kit upstream.

1219
01:07:19,140 --> 01:07:22,420
I have been trying to figure out how to synchronize.

1220
01:07:22,420 --> 01:07:26,600
Basically the problem is because package kit and DNF don't expose APIs between each other

1221
01:07:26,600 --> 01:07:31,700
to lock the database while it is refreshing and pulling in stuff.

1222
01:07:31,700 --> 01:07:34,540
It can only do a lock when it's applying a transaction.

1223
01:07:34,540 --> 01:07:40,900
The fix quote unquote was to make it so that they fetch caches independently to avoid races

1224
01:07:40,900 --> 01:07:42,840
and all kinds of stupid stuff.

1225
01:07:42,840 --> 01:07:47,460
Like back in the days when we were using yum, everything was piped through the yum tool.

1226
01:07:47,460 --> 01:07:50,460
And what would happen occasionally is that when you ran the yum command, it would be

1227
01:07:50,460 --> 01:07:53,420
like waiting for package kit to quit waiting for package.

1228
01:07:53,420 --> 01:07:54,660
So can I ask you something?

1229
01:07:54,660 --> 01:07:56,020
So what happens when?

1230
01:07:56,020 --> 01:08:02,060
So I do a DNF update and I install all the upgrades and then I go and discover and I

1231
01:08:02,060 --> 01:08:03,380
install all the updates there.

1232
01:08:03,380 --> 01:08:06,740
Is it just reinstalling some of the same packages I just installed with DNF?

1233
01:08:06,740 --> 01:08:10,100
Yeah, what's going on actually happens on the file system?

1234
01:08:10,100 --> 01:08:11,700
Yeah, that's a good question.

1235
01:08:11,700 --> 01:08:15,660
I think what actually happens is that it silently does nothing.

1236
01:08:15,660 --> 01:08:16,660
Just chugs right along.

1237
01:08:16,660 --> 01:08:19,100
What are you supposed to going on with the flat pack thing?

1238
01:08:19,100 --> 01:08:21,340
Like all my flat pack desktop launchers are gone.

1239
01:08:21,340 --> 01:08:23,220
I'm guessing you updated the plasma 525.

1240
01:08:23,220 --> 01:08:25,460
Yeah, I always update like daily.

1241
01:08:25,460 --> 01:08:27,260
Can't keep plasma away from him.

1242
01:08:27,260 --> 01:08:33,100
I'm basically making that guess because like I've heard all kinds of random bonkers stuff

1243
01:08:33,100 --> 01:08:37,380
from different people about the plasma 525 update just today.

1244
01:08:37,380 --> 01:08:41,260
Like three different people have told me three different things that have gone wrong in 525

1245
01:08:41,260 --> 01:08:42,380
and now I'm scared.

1246
01:08:42,380 --> 01:08:45,460
It may be a little bit further back because I think this may have been going on.

1247
01:08:45,460 --> 01:08:48,420
This has probably been going on for three weeks, two weeks, two weeks.

1248
01:08:48,420 --> 01:08:51,660
Okay, so I wish I'd known this before because like I know I meant to bring it up to you

1249
01:08:51,660 --> 01:08:53,020
last week, but I forgot.

1250
01:08:53,020 --> 01:08:55,060
Okay, I think I know what's happening here.

1251
01:08:55,060 --> 01:09:02,460
So what goes on for the flat pack stuff is that flat pack in order for the desktop files

1252
01:09:02,460 --> 01:09:07,900
to show up in the desktop, what it does is it has a profile dot D snippet or environment

1253
01:09:07,900 --> 01:09:08,980
D helper or something.

1254
01:09:08,980 --> 01:09:14,740
I forget exactly what it is that tries to export a variable that adds the flat pack

1255
01:09:14,740 --> 01:09:20,700
desktop file path to the search path so that when plasma starts up or gnome starts up or

1256
01:09:20,700 --> 01:09:24,820
whatever, it'll read those additional desktop files because they're not installed in the

1257
01:09:24,820 --> 01:09:26,140
same place as everything else is.

1258
01:09:26,140 --> 01:09:31,540
I'm just saying if I wasn't using a flat pack, if I just installed a package from the AUR,

1259
01:09:31,540 --> 01:09:32,540
this would not have happened.

1260
01:09:32,540 --> 01:09:33,540
That's all I'm saying.

1261
01:09:33,540 --> 01:09:34,540
That's all I'm saying.

1262
01:09:34,540 --> 01:09:45,980
That's all I'm saying.


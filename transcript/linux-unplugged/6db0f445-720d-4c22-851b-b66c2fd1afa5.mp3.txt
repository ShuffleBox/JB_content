So this is one of those weeks where all three of us
have kind of fallen in love with a new distro.
We're all feeling that new distro energy right now.
Yeah, I'll admit it.
Thanks, Chris.
I can totally tell Brent's feeling it
because it's been like link after link after link
this morning.
And he, well, he told us that, too.
He's actually even making songs.
He's made songs to honor his new distro
that he's fell in love with.
Well, when I listen to any music now,
I just can't stop thinking of my new love, you know?
You just can't stop that feeling, Brent?
Is that what it is?
I'm hooked on a feeling, Chris.
I'm hooked.
Oh, you're hooked on a feeling.
Ha, ha, ha.
Hello, friends, and welcome back to your weekly Linux talk
show.
My name is Chris.
My name is Wes.
And my name is Brent.
Hello, guys.
Thanks for joining me on what is going to be an adventure,
a discovery, if you will, an emotional journey
into a new distro.
OK, maybe not quite.
Maybe we're oversold a little bit.
But we have met a new distro.
And it's no average Linux distribution.
This week, we're going to announce the Nyx challenge.
We'll have details on that in just a little bit.
And we're going to give a go at explaining why
we think Nyx is interesting.
And even if you never plan to use it,
maybe just try to give you a mental framework
to think about why people find it interesting.
And then we'll round it out with some great boost, maybe
some picks, maybe some more.
So before we go any further, before we
get into any of that, let's bring
the virtual lug that is packed today.
Time-appropriate greetings, Mumble Room.
Hello, hello.
Hello, hello.
Hello, Brent.
Hello, Wes.
Hello.
Howdy.
Hello.
Hello.
Hello.
Hello, thank you in there, everybody, for joining us.
Can you feel it in the air?
It's fresh distro season.
GNOME 42 is officially out.
New things are happening.
It's like springtime.
Everybody's planting their open-source gardens right now.
I guess I'm in a good mood, I guess.
Yeah, I mean, well, you should be.
It's been one of those weeks where, behind the scenes,
we've just been really nerding out super hard.
So it's like, we finally get to come on air
and talk about the thing that we've
been enjoying all week long.
But where do we start?
And the other thing that we've been waiting
to do since last episode is give another go
at getting Linux on the M1 MacBook Max.
This is a decked-out MacBook Max.
And last week, we attempted to install the Asahi Linux
Alpha.
We really did.
But there was a file system corruption issue.
Yeah, I don't know what you've been doing with this thing,
buddy, but actually, no.
Apparently, at least as Hector Martin tells it,
this is more common than we might have thought with APFS,
which is too bad.
Yeah, he kind of tweeted that right after the show came out,
that, yeah, we're hearing this from several people.
And we actually got that file system issue
resolved right after the show.
But we decided to hold up.
We just hold up right there.
We're not going to go any further.
We would wait till we were recording again to resume.
So Wes Payne, brace yourself, because it
is time to install Linux on the MacBook Max.
Here I go.
How are you feeling about it this week?
I think you're probably feeling better, aren't you?
Yeah, good.
I mean, I'm hopeful there won't be any booting into recovery
and having to learn, refresh myself on disk util
like last week.
We'll see.
I mean, the APFS FSEC did complete.
And the installer now walked in just enough
to see that it sees the new free space and partition
we were able to do.
So I don't know.
There could still be more dragons lurking here.
So how much disk space are you given the Linux install?
What have you decided to allocate to it, do you recall?
Because I think we have about 1.5 terabytes
free on the internal disk on that thing, which, you know,
there's no upgrade in that storage.
Yeah, we have 1.9 terabytes.
I gave it 80 gigs.
Oh, OK.
I was just being, I wasn't sure.
Yeah, no, that's fine.
We can always massage, too.
All right.
So we've been looking at our different options.
We think we're going to go with, what, maybe the minimum?
Or are you going to try to go all the way up to the desktop?
You're going to go for desktop?
I think you probably should.
We should probably go for desktop, right?
Yeah.
I was thinking minimum, because that's
how I think I'm going to be using this,
is like a headless setup.
But you might still want the desktop for troubleshooting,
or, you know.
I think we should go desktop.
All right.
OK, Wes Payne, we'll check back in with you momentarily.
So he'll have that going during the show.
We'll check back in to see if we manage to get Asahi Linux
on that sucker.
And it's funny, because back in the day,
you might go buy yourself a big ThinkPad, or Dell,
or maybe even a System 76, and your goal
would be to dual boot Windows and Linux on there
for those few things you still needed Windows for.
And now here we are in 2022, and the situation
is sort of flipped.
It's now you can dual boot Mac OS and Linux,
which I could see that working for a lot of people.
And then you also can at least have
the option of Apple's hardware.
Although I'm not convinced yet.
It's still the values there for Linux users, but we'll see.
I want to mention that we have a meetup just
around the corner on April 9 in Raleigh, North Carolina.
Details at meetup.com slash Jupiter Broadcasting.
It's just outside Raleigh.
There's going to be a park that we'll meet at,
and there is a barbecue joint and a brewery there.
What more could you ask for?
There's a lot of people.
So Brent is booked.
He's official, Wesley.
Now you've got to get yourself.
Oh, I'm booked too.
What?
Congratulations, gentlemen.
How exciting is that?
That's really fun.
Wow, it's going to be a good showing,
because I think we have already something like 70 people,
72 people on the meetup.
Yeah, I mean, it'd be rude not to go, right?
So we're getting to the point where
if you think you can make it, do sign up to the meetup.
I know it's a pain in the butt, but please do.
So that way, we can give the barbecue place a heads up,
because there's a lot of meat that's going to be required.
And Brent's going to help you out.
He's going to skip meat for that night just for you
guys out there.
We're still going to need better numbers.
Yeah, thank you, Brent.
Thank you for doing that.
So meetup.com slash Jupiter Broadcasting.
I'm looking forward to it, because Alex and I
are going to try to record a self-hosted in person.
Ooh, a rare treat.
And if we got the opportunity, I think
he has enough microphones that we could all
kind of sit down all the Friday stream
and record something too, possibly.
Oh.
So anything like that would probably end up on the extras,
extras.show, I would think.
So even if you can't make it, maybe
we'll try to get some of the content published
over there or something.
We don't have any specific plans at this point.
There's even an RSS for it.
If you can't make it to that meetup,
we do have something even sooner.
It's the week this episode is airing, just a couple of days.
March 31, I am holding a live stream at jblive.tv.
It's an opportunity to just sort of do an AMA
if you've got any questions related to the shows
or to the network.
That's a Thursday.
What time is it?
4 PM in Seattle, 7 PM in New York, 11 PM in London.
And I'll also be giving away some Bitcoin
to help people get their lightning wallet set up
so that way they can participate in the booths.
A little Bitcoin booth.
Yeah, so that'll be at jblive.tv on March 31.
I got to get that on the calendar.
Got to get that on the calendar.
After the show.
Yeah, right.
Yeah, I'll write down calendar.
Brent, will you write it down too so then you remember?
That way we can actually get it.
Oh, yeah.
I've already been doing that.
Yeah.
All right, thank you.
I like that you're just sort of using Brent as your memory
bank now.
That's great.
Because I don't know if he writes it down,
he'll remember, you know?
Chris and I actually call it his memory palace,
thank you very much.
Yeah.
Yeah.
Yeah.
Yeah.
OK, Wes, how are we doing over there?
Anything?
Stub OS installation complete.
We set up a pre-boot volume.
We set up a recovery volume.
We've collected some firmware now.
Is this all happening?
We're installing the OS.
Is this all happening in Mac OS?
Yeah.
Let me see the screen there.
Let me tilt it over here so I can.
So this is actually, what's kind of noteworthy about this
is this installer script that they've
built that you're running is running in a terminal window
right along your web browser inside Mac OS.
Yeah.
That is really cool.
It's actually running in the fish shell
that I installed under Nix, but that's a separate story.
We'll get to that, Wes.
All right.
I am feeling pretty good about this.
We will check back in.
So this week, we want to announce a Nix challenge
that we're going to run for the month of April.
Now, this is not a big deal.
It's going to be a low-key thing.
We may end up being, I would imagine,
a topic of conversation at the meetup.
But here's what we're thinking is
you could join at any point in the month of April.
We're going to have this challenge running
for the whole month.
And I hope that the goals are totally
achievable for anybody that's got a few hours over that month
period they can invest into this.
So one of the top goals, this is particularly personal for me,
is I need to study the Nix expression language
so I understand what I'm getting into.
And we're going to explain more of this, so don't worry.
We're going to set some of this up for you.
You've got to set up at least one Nix system.
It doesn't have to be anything super complicated.
You have to be able to install HTOP.
And you need to join the Nix Nerds Matrix
room that I set up on the Jupyter Broadcasting Matrix
server.
Just as a side note here, our Matrix community
is really incredible right now.
It's at that perfect size where there's enough people in there
that we get good, robust conversation,
but everybody's really respectful.
And everybody is sort of helpful to newcomers.
And we just set up this Nix Nerds room.
And I set it up Friday night before I left the studio.
And I just created it.
And I told one person.
I said, hey, I'm going to make this room.
I think maybe this is where we'll
talk about Nix as we start talking about on the shows
more.
I opened up Elements Saturday morning.
And there was already nearly a dozen people
in there nerding out about Nix.
That's how passionate people are.
It just exploded on its own.
Yeah, you were kind enough to invite me to the room.
And I was like, how long has it been?
Have I just missed that this was around?
No, no, it was just created.
It just got started.
And I will put a link in the show notes
because people in there have been so helpful answering
some of my newbie questions.
And it really helped me kind of wrap my head around a few
concepts that I was struggling with.
And they're not pushy.
They're not pushy.
So here's the goals.
Learn a little bit about the Nix language.
Set up at least one system.
Install HTOP.
Join the Nix nerds matrix room.
And then post a screenshot in that channel of your Nix system.
And if you want meaningless points
that won't count towards anything,
post a screenshot of like a full Plasma or Gnome or i3
or whatever floats your boat desktop.
I would also say maybe try setting up a server.
Spin up a Linoad or something and do something
you would have tried in Docker or on your CentOS
or a BungieBox and see if you can get that running with Nix.
Yeah.
It was so much fun.
And each one of us had a little kind of journey of, OK,
I'll give this a go.
We'll take a look at this.
And then as we started looking into it,
we really kind of just started getting super excited.
So I kind of want to cover why we're interested in it
and why we're suggesting that we all do an Arch style Nix
challenge from the old days, like bringing that forward now
to Nix.
Because in a lot of ways, Nix feels like an OS
that I may make my future primary distro for a lot
of stuff.
Like I feel like a big shift is happening here.
And I thought I'd kind of get into why a little bit.
So I think it's a fun challenge.
Join us for that.
And here's the sort of overview of what
we are loving about Nix.
In real simple terms, this solves a couple of big problems
that I have.
And one of those is we have a fair amount of infrastructure
that we need to build out, but we
have a very limited amount of time
to actually apply to that effort.
And then additionally, we'll deploy stuff,
and it will remain in production for a year to even,
I mean, in the cases of like J-Bot, a decade.
I don't know, 12 years.
I don't know how long J-Bot's still running, kind of.
And you come back to these projects literally
sometimes five, six, seven years later,
and there isn't appropriate documentation.
It's really not clear what we were attempting to do here.
Don't really understand why it's set up this way.
And I just got to use that.
I got to accept that technical debt,
because I don't have time to solve that,
and I got to move forward.
And then you end up building up a bunch
of technical debt over time.
So Nix, and Nix is a package manager,
and Nix OS is a base, real bare Linux system
that's built using the Nix package system.
It solves that problem, because it documents everything
via its configuration file.
Everything that you put in there, you can read it,
and you understand how the system is set up,
and then it will build that exact system.
So if a system goes out, you reload from that config file,
and it reproduces the exact system as you had it.
And that is really compelling when you think about,
we could create a J-B base Nix config
that had a certain set of users, SSH configuration,
base packages that we use,
maybe tail scales installed by default,
all these kinds of base setups that we could then deploy
on our cloud servers and our local infrastructure,
and it would always be a very common setup.
And you can accomplish a lot of this
through things like Puppet or Chef or Ansible.
There's a lot of Kubernetes, really.
There's a lot of ways to solve this problem,
but Nix is solving it at the system level, right?
It's solving it deep at the base config,
and when you use it with Nix OS,
you can actually build the whole system with this.
But you can also install the Nix Package Manager
on a lot of distributions, and even Mac OS,
and I think maybe Windows, don't know.
But I tried it on CentOS Stream 9, and it was great.
Oh, nice.
It was a real nice combo.
Okay, so I've kind of given why I find it super compelling.
I wonder, Wes, if you could give kind of a overview
of what maybe I've missed
or what you find compelling about Nix.
There's a lot to go into here,
so I'm sure we'll figure out the best ways
to talk about it as we go on.
But there's Nix, the sort of lazy functional language
that you use to describe the system and packages.
And then there's like Nix,
there's a whole bunch of Nix tooling,
and it's a build system that lets you
declaratively build packages in a reproducible fashion
in a way that really understands the graph structure
of how dependencies all relate to each other
in a more sophisticated way than we're kind of used to
from some of the traditional Linux packaging.
Yeah, my understanding too, like in there,
is when it's building software,
it'll actually build it in a sandbox
and really has a genuine map of all of the dependencies,
and that is in part what makes it reproducible.
And say, maybe this is a crazy example
that nobody would ever do,
but say you're a guy or a gal
that likes to run the Plasma desktop,
and you love Plasma, you're all in on Plasma, but then-
I know a few of those.
But, and you're talking about it all the time,
you're talking about how great it is,
and then like the new GNOME 42 comes out
and you're like, that looks great, I'd love to try that,
but I don't want to have
both Plasma and GNOME installed at the same time,
I don't want to have multiple terminal emulators
and file managers and libraries.
What a mess, right?
I don't want that.
Yeah, and I mean, in theory, you know,
you can strip those things.
Oh, sure.
But you kind of got to figure out all the things
that it actually installed, and I never do.
I just always-
It hangs around, yeah.
I just always install the other desktop.
And then whenever you're doing your auto-complete,
you get the wrong terminal, it doesn't match the desktop.
Or like when you're browsing through the menu,
it's like, I've got so many entries in there now.
So in a NIC system, you would go into the configuration
and you'd probably have like a sub-configuration file
just for your graphical environment.
And you could essentially, in there,
change it from a Plasma system to a GNOME system,
and then rebuild that box.
And it would build clean as if it had always been
a GNOME system from the very, very beginning,
as if you installed it straight off the ISO like that.
And what's great is it will test all of that,
it will make sure all of it builds correctly
and works before you actually have to accept the changes
and activate it, which is really powerful too.
All right, so I'm sorry,
I just wanted to make that example, Wes,
but I'm sure there's,
I probably interrupted you right in mid-thought.
Well, yeah, it's just that there's like a lot to NIC.
So you've got this, you've got a language to describe
how to build things, and in the case of NIC's OS,
construct a system.
And then you've got tooling to make that happen.
And then the way it all works with the NIC store,
and there's a lot of details that we probably won't get into
for this episode, but it means that you can have
all these packages safely co-installed
with different versions in a way
that you can go back and roll back at any time.
It also means that you can bring those packages with you.
A lot of the NIC's tooling is set up
so you can just install the NIC's package manager.
If you're on your Mac desktop or it's on a Linux server,
you can do both of those and that'll work just fine.
And then, so there's those things, there's the tooling,
and then there's NIC's packages, which is a repository.
Well, actually, it's really,
you can kind of think of it as a giant NIC's expression
in the NIC's language, but it's a big whole set
of NIC's expressions that describe how to build
a whole bunch of packages that you probably want already.
Yeah, and that could be all kinds of things
from VS Code to Plex, Home Assistant, NGINX.
HTOP, normal Linux stuff.
And then you can just use that to assemble.
It can build it from source
because it has a powerful build tooling built in,
but then there's also a whole bunch
of caching infrastructure that the project maintains,
which is awesome.
So it means if you're on a commonly supported architecture
like x86 Linux, then yeah, you're just gonna,
you're gonna pull down the binary stuff by default.
So it's all surprisingly fast,
which is one aspect of this I didn't really think about.
I talked a little bit in self-hosted this week.
I think it was episode 67.
I've had a lot of success
and we have a lot of applications deployed in productions
that are in containers, Docker and Podman at this point.
But when I look at building a system with NICs,
I actually see a future where maybe I'm not using containers
as much as I thought I was,
and that I'm actually using NICs
to manage most of my software,
which I think I'll get into in the future,
maybe next week when we actually kick the challenge off.
There's kind of that element of,
because it's also nicely separated out in the NIC store
and isolated from each other.
There is, you know, that initial excitement
when you first got into Linux and you were like,
oh, the package manager, there's all this software.
I can just install, but before you learned
about how like a box that had six dozen things on it,
so that sat for a year, wasn't a great pattern.
Some of that excitement has come back with NICs
where you're just like, oh, but I can do it
in a more maintainable, declarative way,
right out of the box.
I wanna let ETU get in here too,
because I know that you were a contributor
for many years to NICs.
And so maybe you could give us a little more nuance
on how the package manager is working.
It's source, but there's that binary cache, right?
Yeah, so the thing that NICs does
is that it has the NICs package tree definitions
on your local system.
And then it evaluates which packages it needs
and each package will have the set of instructions
for building a package is based upon all dependencies
and the build instructions for that package.
And then we just hash it down to a hash
and then you can ask the binary cache,
do you have this hash?
And then the binary cache can either send,
no, I don't have that hash, or send back a binary.
And then you get that exact software hash back.
I see, and so if it says no, then it just builds it?
Yes.
Aha, that hashing technique is really cool.
Yeah, this also makes it very easy
to patch software locally.
So you can, in your configuration,
just say, I want Mumble,
but with this patch applied to Mumble.
And then it will build Mumble every time you update
because some dependency changed.
But at the same time, if you don't want a patch,
then yeah, then you just get it from the binary cache.
So you have kind of the power of Gen2,
but you can choose to,
when to build or not to build, pretty much.
Yeah.
Brent, this is a pretty different approach
to how a distribution is built.
It's a different way of thinking
about even managing a system.
They call it a declarative configuration.
And I'm curious to know what your take is
coming at something that's probably
a pretty new way of looking at Linux.
Yeah, when you first suggested
that we really dive into this,
which we've been thinking about for months.
We've gotten mail from various listeners.
And for months now,
I've been slowly gathering articles
that describe why we shouldn't do this.
So I was super skeptical to dive in,
especially that this felt kind of, hmm,
like a perfect West way to build a system
and maybe not a perfect Brent way to build a system.
Hey, ouch.
I feel judged over here.
No, no, no, no.
I think it's a compliment actually.
That's a compliment for sure.
More of like a developer's approach.
I've looked at a few accounting softwares
and some of them are user-friendly
and some of them are really developer focused
and they seem really interesting.
And then I start getting into them.
I'm like, I don't have the skills for this.
And so Nix felt like that for me at first.
So I probably spent 80% of the time
we spent doing research,
just trying to understand what this all was
and if I could even get into it.
And it turns out that it takes a bunch of concepts
that we're used to in sort of what I'll call legacy Linux
ways of doing things and sort of flips them
and gives them a whole bunch of features
that I have secretly been trying to learn for a few years.
Places where I think Ansible seems interesting
and I know we'll talk more about that,
but Nix feels like, at least Nix OS feels like a way of,
accomplishing a lot of things all at once
and once you wrap your head around it,
is super user-friendly in a strange kind of way.
So that's what excites me is that the learning curve,
I think for the concepts was like,
oh, this is just a total paradigm shift,
which I think are important to explore
and are worth the time of trying to wrap your head around.
But then the actual implementation,
I found actually surprisingly easy, which is great.
Lino.com slash unplugged,
go there to get $100 in 60 day credit on a new account.
And you go there to support this here show.
That is fast, reliable cloud hosting right there.
Go try it for yourself for a project.
Woo-wee, boy, I just, I slipped right into that.
I apologize, I just get excited about Lino.
You know, and then I get into like a cowboy mode.
Yeah, it's natural.
Did you know I got a CentOS box going on Linode
that has Nix installed on it?
Nice.
And they actually have a guide
if you want to do Nix OS on Linode.
It's a great example of why I love Linode.
They just let you go all the way if you want.
You know, also, I happen to notice that the Linode CLI,
that's packaged in Nix, so even better.
That is, that is so great.
I love that command line tool and they have a great API
and they have fantastic documentation.
You bring all that together, that means
if you get a wild hair or if you have something
you need to build, you're gonna have the support
in both documentation and actual customer support
to pull it off.
They have great 24-7, 365 customer support.
They don't do that escalation thing or none of that.
You just get your problem solved.
And they've been doing this for 19 years
and they've learned they need to constantly invest
in their infrastructure and their tooling.
And so they're doing it.
They just are relentless about that.
Rolling out new hardware and new features all the time.
They always give me something new to talk about
all the time.
You know, like right now they're rolling out
a beta of a database as a service and it's so slick.
It's all the great stuff about Linode,
but brought to like managing a database for you.
And they've just got done upgrading their fast rigs
to MVME PCIe storage, so that's always screaming.
And they took the time, they spent the effort.
They did the hard work to make their network connections
as fast as possible and they became their own ISP.
I mean, I could go on and on and on.
So just go try it yourself.
Go give them the unplugged boost to go say hello
and thanks for supporting by going to linode.com
slash unplugged.
Get $100 in 60 day credit on a new account
and you support the show.
It's linode.com slash unplugged.
All right, Wes Payne, let's check in over there
on the M1 Linux install.
How are we doing?
Oh, we're doing well so far.
I've proceeded through a prompt
where I was quite carefully warned to read carefully
lest I leave the system in an unbootable state.
So you just skip right past that.
Yep, skip right past that.
I've now shut the system down as instructed.
And I think we're getting ready to reboot into Asahi.
Yeah, things have been extracted and installed.
So it's off right now and you're gonna power it up.
Yeah, we had to wait 15 seconds
for the system to fully shut down.
It's important that the system be fully powered off
before this step.
So does that imply that when you turn a Mac off,
it's actually still on for 15 seconds?
Kind of does, yeah, doesn't it?
Huh, that's an interesting little discovery.
All right, well, let's turn it on.
Let's see here.
Do you have to hold down a button?
I do, yeah, press and hold the power button.
All right, then you'll get a boot menu.
Loading startup options.
Okay.
Once I see a spinner or it says entering startup options,
I'm supposed to release, okay.
Got some options, spinning.
You do, you got a spinner?
Yeah, here you go, take a look.
Oh, and hey.
Look at that, there's an Asahi Linux boot entry.
They even have their logo on there.
That looks good.
Click that, Wes, click it.
Let's see what we get.
All right, booting up.
But why is it the Mac OS booting?
It said that you might see a recovery screen for a second.
You will briefly see a Mac OS recovery dialogue.
Okay.
Sometimes you might be asked to select a volume to recover.
Choose your normal Mac OS volume.
Oh, yep, okay, I bet I can do this.
I made Wes's user avatar poo.
So he's the poo emoji.
It's appropriate.
I'm an adult, I'm an adult.
All right, should we check back in
or do you think it's gonna go quick?
We'll see, I'm just about to, the installer popped up here.
So we're running some recovery installer scripts.
So like we gotta fix something on the main Mac install?
No, I think it's just using this environment
to help bootstrap itself.
Oh, interesting.
So if you were gonna do Nix or Fedora,
you'd still have to go through this part, wouldn't you?
Yeah, they do have an option when you're installing it.
Like you could do the desktop Asahi Linux install
or a minimal sort of install, which is Arch Linux arm.
But then they also had one that just sort of bootstrap
the Linux environment and UEFI.
And I think from there you can install other stuff.
I think that's the base that the OpenBSD early support
goes off of as well.
Local policy update is in progress.
Oh, we're getting updates.
It's asking if I'm sure we wanna do something.
I don't really know what it says.
I'm gonna hit yes.
Go for it.
YOLO, Wes.
YOLO, mom, you only MacBook once.
But no, that's not quite right.
Yeah, this wasn't an expensive machine at all.
So it doesn't matter if we break it.
I feel like we'll have to come back.
Yeah.
Cause you know, I've kinda, I wanna,
I got more Nix stuff to talk about.
All right, come back to me.
All right, you give me a, give me a, boy.
Installation complete.
Press enter to reboot.
Okay, okay, hold on now.
We can't go, we can't go.
We gotta finish this up now.
Oh, boy.
Let's see, Wes.
All right, don't you have to hold down the power button
or else it's gonna go into macOS?
I don't know.
It just said press enter to reboot.
I think you gotta.
Oh, no.
Oh.
Asahi is the default.
Asahi logo, U-boot logo.
Oh, it's going, Wes.
Oh, that's a good sign.
Grub.
We got grub.
What are you doing?
Press enter.
Come on, let's go.
What's it doing?
What's it doing?
Holy shit.
That was fast.
Whoa.
Whoa, Wes.
That's a win right there though.
Holy crap.
Yeah, we got a plasma setup going on.
Holy crap.
So, so well, here's what happened in studio
is I was like, come on, Wes, hit enter on the grub
and Wes hit enter and then the next thing
that flashed on the screen was the plasma desktop.
It was that fast.
It was remarkable.
That was really great.
So that's fun.
So now we have a plasma desktop going on the M1 Max.
We're gonna give that a go.
Ha ha, look at that, Wes.
Nicely done.
Now, gentlemen, I know we've been playing with this
for a few days now, but I want you to go into details.
Chris, what did you do that got you so excited?
You know, we all took different routes.
Tell me about yours.
Mine started when I was thinking about my home setup.
I talked about this recently on the show.
I'm thinking about redoing everything.
And I was thinking about these problems I want to solve
about trying to understand how I put a system together
after I look at it a year later,
trying to make it really simple to recover during an outage
because I don't necessarily just have a few days
set aside to fix something
and trying to solve for these problems.
Essentially, it all started for me when Home Assistant
decided they needed to upgrade their Python version
where dropping support for my Z-Wave integration
and I realized I had to redo my whole setup.
Python version upgrades.
It's such a reasonable thing.
I totally understand it from a project standpoint,
but it causes me such a huge amount of work
that I just decided, well, I'm going to use this
as an opportunity to just rebuild my entire home network.
And now my thinking is,
depending on the status of Asahi Linux,
I think instead of using a couple of Raspberry Pis
as my home servers, I'm considering doing Asahi Linux
on an M1 Mac Mini.
Oh, consolidating down from the Pis
onto one beefy M1 system.
Running Nix.
Oh.
Yeah, yeah.
So that's the connection here.
Yeah, and I think I would run a lot of this stuff
natively in Nix and not in containers.
I'm not totally sure about Home Assistant yet,
but I have to test it.
So my journey was just that, Brent.
I started essentially building a parallel version
of my home server in a Nix VM.
Jup's network 2.0.
Yeah, yeah, and just to see
what are the pros and cons of doing this.
And that's when I realized, oh, geez,
this is a game changer in how I'm going to manage my systems.
And I don't really see me using anything else
because you really just have to figure out
that Nix language and how to structure that.
And then once you have that problem solved,
you can just read the config as documentation,
it self-documents, it's so simple to deploy.
And I can run it on an M1, I can run it on an x86 box,
I can run it on a Raspberry Pi, like it's flexible.
And it's very simple.
Sort of one of the things that appeals to me
about an Arch system is that it's a bare system
that I build up, as opposed to maybe
a more traditional distro that you kind of pare down,
perhaps secure with AppArm or SE Linux
and you kind of pare it down.
Much like Arch, Nix OS is very bare and you build up.
And while initially that often comes
with some additional setup overhead as you're getting going
and more things that need to be tweaked initially,
it has sort of been a universal truth
that the simpler the system, the longer it is maintainable,
the simpler it is to update,
the less problems it tends to have, et cetera, et cetera.
And so I find that to be really super compelling as well.
And it solves all these problems.
I was thinking like, do I go Proxmox and set up like a NUC
and maybe I just do everything as VM.
Like it just, all of that goes away, it all melts away
when I look at the way Nick solves it for me.
It too has some advice there.
Maybe Home Assistant stays in Docker,
but it's interesting that you have the option.
Yeah, so it sounds like that's sort of not
like a great experience.
I saw somewhere on the website,
I think it's like 70% supported or something like that.
At least they give you a number.
Yeah.
But Wes, I wondered,
I think you were playing with a few containers and such.
So I wondered if you had some insights in this
or at least tell me what avenue you went down.
Yeah, well, okay.
So to start, one thing that you pointed out
in the excellent NixOS manual was I mentioned that
because it's really easy to get Nix bootstrapped,
Nix the package manager bootstrapped on systems,
you can kind of install it in interesting ways.
And from the Arch side of things,
I've always loved that you can bootstrap Arch systems
from existing Linux and you can do the same thing with Nix
and it's so much simpler.
I was really impressed by that.
So I spun up a Alma Linux box
and that was working fine, got it up to date.
And you just install Nix like the normal way
and you run a couple of commands.
There's a command to generate the new NixOS system,
Nix expression config,
and then it can generate all the new boot stuff for you.
And you move your old boot out of the way and you reboot
and then it's smart enough to go figure out
all the stuff under your old root.
It'll just move out of the way,
set up the new Nix environment for you, boot into it.
And then you can preload it with SSH keys
and even like a hash of what you want the password to be.
So it was kind of just like run a couple of commands,
edit the config a little bit to configure the system
I wanted it to be, reboot,
and then I was able to just SSH with my SSH key
like into the new system and it was an Xbox.
That's so rad.
Doesn't that feel kind of magical?
And then you can actually roll back
to the old system if you want,
or you just rm, rf slash old root and it's gone.
That is, that's fun.
You've assimilated that machine, that's what you've done.
Whenever you go into one of these alternative systems,
I think some of the docs even say like random stuff
like reboot, download, or binaries,
like they're probably not going to work on Nix
just because of how different like the Nix OS
and the Nix store setup is from traditional Linux systems.
So you have to wonder like, okay,
why am I going to have all the apps that I need?
What kind of escape hatches do I have?
And so I wanted to explore a little bit like,
well, what would it look like?
We run a lot of our stuff
in kind of simple container setups right now.
What does that look like on Nix OS?
So I got traffic installed, but just in Nix,
Nix OS set up in the config, you just kind of say services,
traffic enabled equals true,
and you can set everything up with let's encrypt,
just you specify the traffic config in your Nix right there,
which was really neat.
And then I tried a tool I'd seen mentioned
in some of the community called Arian,
which is sort of like a Nix wrapper
on top of Docker compose.
And so you can use the Nix language and you can specify,
and then it's a separate tool.
You can integrate it directly into Nix if you want,
or it can kind of run on its own.
And then that used the built-in Nix OS support
for running containers, either with Podman or Docker,
or I'm sure there's other run times too.
Those are the two I played with.
Right, right, right.
Well, that does sound like a blast.
I think it's one of those,
I was talking to the matrix in the matrix Nix nerds room.
It's like one of those things where I've been looking at it
almost solely as a server platform.
And people in there were like, oh, no, no, no,
it also makes for a great desktop.
And I just haven't made that connection yet,
but I could kind of see it here in like a studio environment
where we want really predictable, solid Linux workstations.
I could kind of see it, Wes.
So it depended on the way that this challenge goes
in the month of April,
we may end up deciding to actually use Nix OS
on our studio recording systems, I think.
I think that's gonna be the determining factor out there.
What do you think?
You down?
Yeah, I'm down.
Oh, it's exciting.
It feels to me like much how we use scripts to set up
sort of the environment on top of the OS
on some of the studio machines.
Now you're using sort of a script
to just define the entire system.
And so it's really just a progression
of what we've already been doing in a really beautiful way.
You know, when I started looking at this too,
I was very much in the head space of Nix versus Ansible,
because we were trying to solve multiple problems
and we were starting to think,
well, maybe the way to do all of this
would just be to manage our infrastructure with Ansible.
And then I started looking at Nix and I thought,
oh, well, no, screw Ansible.
We're gonna do everything with Nix
and it's just Nix for everything.
And as we've talked and as we've looked at it,
I don't actually think the two are mutually exclusive.
And so I kind of want to encourage people
not to kind of get hung up on the whole,
like there's a lot of ways to manage
and define a system aspect of it.
I mean, it's definitely a part of the discussion,
but I think there's a lot of compelling good stuff
in here to look at.
And I would like us not to get too hung up
on that particular aspect.
Yeah, and just like that those two tools
and all the tools in the space,
like there's a lot of overlap
and then there's parts that they address entirely different
or don't necessarily compete on as well,
so that they can all be useful.
Yeah, it's gonna be an interesting future
because I tried to do it on SUSE and I ran into problems.
And I don't know what this means,
because I know we promised to run OpenSUSE
on our server, but if we kind of are redefining everything
and we end up wanting to go with Nix,
I don't wanna like rule it out,
but that's an awkward thing we're gonna have to resolve.
So that's, but we have until the end of the challenge,
I feel like until, because it may very well be
that we get to the end of the challenge
and we decide not to, I don't know.
We're just really at the very beginning of this.
Yeah, okay, so we both went down kind of the server route,
but Brent, you braved NixOS in the desktop, right?
You say brave, but it seemed like the thing to do.
Mostly because I felt like it solves one of the problems
I've been trying to solve for years too.
And so it seems to me like that's what defined
each direction that we went into.
But I decided, yeah, the desktop feels like
mostly what I use on a daily basis.
And it feels like over a few years,
any OS I've tried always gets kind of crafty
and things start to like fall apart
at about the like two or three year mark.
And I don't know, maybe it's just a feeling,
but this seemed like, oh, maybe this is a way
to not ever get that, which was very interesting to me.
So I booted up the NixOS Plasma ISO,
of course I went Plasma.
And I thought, okay, well, one of our challenge objectives,
you know, one of our goals that we're putting out there
is to install the desktop.
And I'm surprised neither of you went that direction,
but I sure did.
And it was fascinating because it forced me
to change the way I see a desktop system.
So for instance, installing was almost exactly
how Wes described, you know,
I used the seemingly wonderful NixOS Generate Config
to just kind of grab the current system
and make a configuration template out of that,
which I thought was really magical
and made it so easy to just dive in.
So I enabled a few things in there,
but upon rebooting, I learned a lot of things.
So I rebooted into the installed system,
which was fast and great.
And then I realized that none of the changes
that I was making, so for instance,
dark themes and like, you know, bookmarks in Firefox,
or even just history, like bash history,
none of that was persisting across reboots.
What you'd kind of like, right?
Well, I thought that was essential
for being a usable desktop environment.
And then I just reminded myself
that the system gets sort of erased
and regenerated on every reboot,
which is a new concept to throw your head around,
and yet one of its strengths.
So I had to actually add a home directory
to my user in the config, which seemed like the thing,
because my home directory was getting recreated
on every reboot, so of course nothing was persisting.
So as soon as I added that, that solved the problem,
but it really, that was one of the moments
that really solidified to me
also some of the strengths of this approach,
which is that everything you want or have defined
is there when you reboot every time,
and the cruft kind of goes away on every reboot,
which is really fascinating.
And another thing, Chris, that I've only got interested in,
but I know you played with was
that there's some modularity to the config file,
which I thought was really fascinating.
Yeah, back in my day, we called them includes, right?
But they're just essentially sub-configuration files.
And so I have like a vpn.nix
that I can put on all of my Nix boxes, and I have,
and it just defines everything
to install and connect to tail scale,
right as I build the system, it's so great.
And Nev, I noticed something you said in the chat room,
maybe you could mention here in the Mumba room,
it kind of changes the way maybe you view a Linux box,
and depending on your perspective,
it seems pretty practical.
Yes, as like the home labber,
or like the last 12, 13, 14 years,
I've ultimately learned that every Linux distribution
that I've ever installed on a client system,
I've always just learned to treat that as install
as disposable.
Right, I was just saying to Wes before the show too,
it's like, it's a difference between a toy and a tool.
NixOS feels very much like a tool.
And if you take what Linux is really great at,
and you turn it up to 11,
I think it really exemplifies a lot of that.
And I think it would make for a really good
rock solid workstation for somebody like Brent.
I think Brent, you'd be,
I think once you wrapped your head around it,
you'd have something that's super reliable for you,
and probably safe and secure too.
You know, something gets weird, you just reboot.
That's nice.
Well, and the rollback features too, seem really great,
cause you can try something new for a little bit,
and then roll back to them.
So it integrates, I think, some modern technologies
that I've been craving.
So I, you might have tempted me, Chris.
No, I do think it means, you know,
you're kind of committing to staying
at least a little bit engaged with the,
you know, the Nix language,
and understanding how Nix works a little bit,
if you're gonna base all your systems around it.
Yeah.
So that's, you know, that's one thing to,
similar with other like configuration management systems,
where, you know, you gotta learn the language
of the system that you're using.
But if you're willing to do that,
and that's where I'm kind of fascinated
about this challenge to see,
cause for me, you know, I'm a software developer by day,
so kind of used to reading new programming languages,
but I'm curious to see, and this is a, you know,
sort of ML inspired, functional, pure, lazy.
It's probably different than languages
you guys have seen before.
So I'm gonna be fascinated to see
how you guys get on with it.
I will totally admit upfront, full disclosure here,
this aspect of Nix is probably why I have put this off
for as long as I have,
because the audience has been asking us
to talk about Nix years, since like 2004.
Well, but you know, the truth of the matter was,
is I just felt like,
is it worth learning something so specific and unique?
But what I have realized is, and this is,
I'm sure a lot of you out there can relate to this
because you've probably experienced this.
You maybe are like aware of something
and then you begin to look into it
and you begin to learn more about it
and you discover it is an entire world unto itself
that has a ginormous community with passionate contributors.
And you just kind of, sometimes you just stumble
across these kinds of things every now and then.
You're like, oh, there's something wonderful here.
That's Nix.
And you realize this is worth investing in
because this community and the available packages
and everything is so rich, the payoff is obvious
once you understand the depth of it.
So that is a transition for me
because I didn't really wanna have to take a,
I didn't wanna have to go to school
to figure out how to install my software.
But now that I realize it's gonna help me solve
these problems that I've been recently,
I've had a mind shift change.
And you guys have probably noticed a lot
that we've talked more about Bitcoin,
we've talked more about Boost,
we've talked more about decentralized services
like Matrix, we've been talking more
about this kind of stuff because I've kind of recently,
I don't know, maybe it's because I've turned 40,
maybe that, maybe it's just because I've hit
like the 15 year mark of doing podcasts
and that kind of feels like a point to reflect.
And I've been thinking about how I wanna build things
for JB over the next couple of years.
So that way it sort of just can run itself
after a certain sustainable as possible.
Yeah, and so that come,
and that's been a full spectrum thing
like how we distribute the shows,
the backend infrastructure, the front end infrastructure,
how we monetize the shows, all of that, right?
That's all been in here.
And so to come across Nix kind of during this time
and seeing how it can solve some of the problems
that I'm facing, that's a huge deal.
And it reminds me very, very much
of why I even started the Linux Action Show to begin with
is I was in IT and I was crazy excited
about the problems I was solving with Linux.
And I just felt this undeniable urge.
I just couldn't stop myself.
I had to talk about it.
I'm still that way today.
And that was really my motivation for starting the show.
And it was the problems that it was solving for me
that I felt like I needed to tell people
you could solve these problems with Linux.
And like, it was things like Samba and NFS
and Squid and Apache.
And I just felt like the world 15 years ago
it needed to know you could solve problems.
And I feel like we're arriving at another precipice
where Nix is solving some serious problems.
And I'm really excited about that.
And value for value models and lightning network payments
and boosts are solving some real problems.
And I'm very excited about that.
And I just wanna pull on a conversation
that I had with my co-host Mike and Coder 458.
So we get into it more there, but a group
that does studies of the podcast industry, Edison Research,
recently published their latest version,
they do one every year,
of kind of a state of the podcasting industry.
And last year when they did their report,
if you wanted to reach 50%
of all weekly podcast listeners.
So if you're a, I'm talking about you,
if you're a weekly podcast listener,
and if you wanted to reach them as an advertiser,
you targeted like the top seven podcast networks
and platforms.
But one year later now,
there has been considerable acquisitions
of independent shows and in just 12 months,
now to get 50% of those weekly listeners,
you only need to buy advertising on four podcast networks.
So in one year, we went from seven to four,
Spotify, iHeartRadio, NPR, SXM Media,
these are the main platforms
where people are consolidating to.
And Edison Research ends with this quote,
they say, if indie podcasters don't find a way
to organize and consolidate their buying power,
some monetization options are just not going
to be available for them, for you.
And I think what they're saying there
is there's gonna be less and less advertisers
because between platforms like YouTube
and the fact that you can go to Spotify
and iHeartRadio and NPR and get 50% of all listeners,
why would you spend three to six months
creating an ad deal with some, you know.
Smalls and twos and, right.
This is a dramatic problem.
And I think recently I said,
I think we have three to five years.
I think we probably have two years at best.
And this is something that I've kind of thought
was coming for a while.
That's why we launched the membership programs.
That's why we have the Unplugged Core contributors.
Thank you so much.
And we also have the Jupiter Party.
Like this has been part of hedging
for the direction this is going.
And we knew, I could tell personally,
I could tell just maybe,
I don't know if it was just the economy,
if it was just, I don't know, the shift from work.
Something changed in the advertising business
and I could tell that we needed more runway.
We needed more flexibility.
I needed to be able to say no
because we get all kinds of people
that want to sell scams on air.
They really just, all kinds of scammy stuff.
And I have to be able to say no to that kind of stuff.
And the membership programs have really been key to that.
But it's like it can't be the only solution.
So that's why we've been talking more about boosts
and the podcasting 2.0 movement and value for value.
And so that's why, again, I want to mention
I'm having a live stream on March 31st.
I'm going to give away some Bitcoin
to help you load up a lightning wallet.
I like Fountain FM as an app, Cast-O-Matic is a great app,
but just go to newpodcastapps.com.
There's always new apps getting added there.
Anything that supports value for value and boosts will work.
And you get that set up,
we'll have all the details on the live stream.
I'll help everybody kind of get started on that
because my thinking here is that
if we get some of the podcast listeners on this network
and then an open source project comes online,
they already have a network of listeners
that are just ready and willing to support.
So I'm not going to go on about this every episode.
I really am not.
But it is sort of, there is kind of this coming together
of all of these almost kind of movements in history.
And I want to just talk for a moment about it
and then this will be the episode we address it
and then we don't have to keep talking about it all the time.
So I want to talk a little bit briefly
about value for value
because I think it applies to free software
and I think it applies to content creation.
And I think there's a lot of reasons
why we should pay attention to these kinds of things.
So Boost, Lightning and value for value
are not all the same thing.
We talk about them all a lot together
but they are not the same thing.
Value for value is a support and content model.
It was pioneered by Adam Curry and John C. Dvorak
about 15, 14 years ago.
And as time has gone on,
it has sort of continued to prove out
for various different reasons that that model
is likely the most sustainable model
for independent content.
And the idea is very simply as the name implies,
we, Jupiter Broadcasting, all of us here,
all of us on the show,
we put our value into the show,
our time, our talent and our treasure.
The audience gives value in return,
your time, your talent or your treasure.
Your time can be maybe helping out in the JB community
like so many people do.
Maybe you're like Cole or New West,
you come up to the studio or the RV
or maybe you just take your time
to introduce someone to the show, right?
That is a contribution,
that is value given back to the show.
Your talent could maybe be helping out JB
with something that's social.
Maybe it's code, maybe it's mechanical, right?
It's something you're taking your unique talent
and you're helping contribute value back using that talent.
And of course, treasure is really straightforward
and it's often the most available to anybody who's busy,
has a lot going on.
It's, you're often in a position
where you don't have time to contribute your talent,
your skills, you've got a lot going on.
So value is the most straightforward way to contribute.
And the Lightning Network
is a free software peer-to-peer payment network
that enables sending fractions of a penny
for stupid cheap fees to send that value.
Boosts are a brand new way to send messages into the show
along with a contribution of value
which is sent over that peer-to-peer
free software Lightning Network.
And to give the boosters value back,
we try to read as many of those boosts here on the show
as we can,
because that's kind of the content aspect,
one of the content aspects of the value for value model.
If you send us a boost as a thank you in return for value,
we try to read that on the show.
This model, if you think about what I'm talking about here
and you remove the technologies like Lightning or PayPal
or whatever it might be,
this is a platform agnostic model
that can be applied to whatever model works for your business.
So in our case, it's a combination of memberships,
direct value for value, treasure contributions,
and more and more limited sponsorships, right?
It's kind of like a basket of these revenue sources.
It is a model that can be resistant to content censorship
because the advertisers are just part of that basket.
We could, in theory, eliminate them.
And because it is not necessarily dependent on people,
dependent on a PayPal or a Stripe or a Patreon,
it is a sustainable platform.
So not only is it resistant to censorship,
but it's a sustainable platform for the next 15 years of JB.
And the way we're using it with Lightning Payments,
the entire stack is built on free software
and runs on Linux, the entire stack.
For the first time ever in the history of my business,
the payment stuff is now running on Linux.
This is huge, right?
Completely self-hostable.
And because the actual value side of it,
the monetary side of it in the value for value system
comes from the audience,
it's as sustainable as there is an audience.
It's powered by the audience.
So this is a 15-year solution.
And it's a strategy that aligns completely with JB's values.
Like this makes a lot of sense.
It's using free software.
It's orienting our primary focus towards the audience
as our main customer.
And I think we're figuring all of this out
at a critical moment in podcasting and mark my words,
this is a path that we are going down
that other podcasters are going to follow.
And eventually I think free software projects will follow.
This I think has a lot of potential.
And so that's why it's been brought up more on here
because it's just,
it's like a matrix of all this stuff coming together, Wes.
Yeah, there's a lot going on right now.
Yeah, there is a lot going on right now.
And so that's just sort of the phase of the time
that this show is in.
This show has done this before.
Like I've said before,
you have your Star Trek The Next Generation,
which is Planet Monster of the Week.
Great show, really good show, right?
That's Linux action news, right?
That's Linux action news.
And then you got your Deep Space Nine
where you got your character development,
you got your story arcs that go over a whole season.
Surprising betrayals.
Don't even get me started on Kai Win and Golda Khan.
But you know, that's what this show is, right?
And this is that phase.
And you can probably feel it, I would imagine.
If you've been listening for a while,
you can probably tell.
And if you're savvy enough in this particular area,
you can probably get a sense that I might be right,
but the implications are a little scary
and the details seem a little difficult.
And I acknowledge I have gotten really passionate
about this.
You know, I've jabbed ribs when I didn't really need to
because this is my baby, right?
These shows, podcasting, it's my life's work at this point.
I've been making podcasts since listeners
were burning them to CDs
and listening to Linux action show
and cast a blast on their CDs in their car.
Pretty sure you've been making this kind of stuff
before I knew what Linux was.
And so it's really at a fragile,
interesting inflection point.
And to see research that sort of really demonstrates that,
even though I knew it already,
it kind of does make it a little more alarming.
And it seems like we have an opportunity here
to build a network.
And the great thing about it is like,
it's not super easy to get started today.
I admit the onboarding is a pain in the ass right now.
And by the way, if you're in the US,
the easy way is just to get the Strike app.
It's really low fees, it's a good team,
it's a good simple app.
You can buy just a small, tiny amount,
a couple of bucks worth of Bitcoin
and you can send it via lightning to your podcast app.
The Strike app, get a little bit in there,
you send it to your podcast app, you're done.
It takes minutes.
It's really nice.
If you're outside the US or even in the US,
Blue Wallet is a really good, safe, trustworthy
mobile wallet for Android and iOS
that has in-app purchases for Bitcoin
that you can then send over lightning to your podcast app.
And I am risking pissing off a lot of my audience
by talking about this so much.
That's a real problem we have.
People are sick and tired of hearing about this.
But what would you do?
What would you do if you help pioneer a medium
and you have worked your ass off for 15 years full time
to make that medium possible
and now you see something that is an existential threat to it
and you see something that has a real possible solution,
a real network effect is being built here.
And the great thing is,
is while onboarding is a pain in the ass today,
there's a lot of companies working on that, right?
This is a problem because it's an open network.
It's like SMTP.
It's like POP3.
Other people are building solutions
on top of this open network and they're solving problems
and they're making it easier.
So today, yeah, it's a pain in the butt
and it seems kind of hard.
You gotta, like for the podcast hosts,
you gotta get this umbral thing
and then you gotta go figure out what the podcast index is
and then you gotta figure out how to embed a value tag.
I mean, that just all sounds really complicated.
You gotta do it on all of your feeds.
Right, and then as the audience,
you gotta figure out how to get your hands on,
it doesn't have to be a lot of Bitcoin, but a few,
like a few pennies worth
and you gotta figure out how to then put that in a wallet
and it's all very complicated today.
But let me tell you,
I've been talking about this for 12 years, Bitcoin
and it is so much easier today than it was 12 years ago
to get your hands on this safely
and to just have a really slick experience.
It's like, it's like Linux.
It just keeps getting better.
The experience just keeps getting better.
People keep building on top of it
and when you revisit it, you realize, wow,
something has really changed here.
It's that same kind of effect.
So that's my end of my soapbox.
It's done.
I'm really gonna try not to talk about it anymore.
In part, this comes up because the live stream
is March 31st.
That's sort of the apex of all of this.
After we give the Bitcoin away
and we get people loaded up with their wallets,
we'll be done talking about it.
And I do wanna mention,
because I think this is noteworthy
and I think it's really awesome,
Bearded Tech, who is a listener,
who is working on an open source project called Fever,
which is a Frigate event video recorder.
It works alongside the Frigate video recording system
that works with Home Assistant
that you can plug your cameras into.
Yeah, this just looks great.
Yeah, it's like a free self-hosted camera viewing app.
It's really nice.
And he's built some really cool features in Fever
and he's just a few days away
from putting his project on the Lightning Network
to take contributions as a value for value model
and to take that value over Lightning.
He will be one, but the next person will start a trend
and it just kind of grows from there.
And what an opportunity we have right now.
So of course I have to talk about it.
It's almost negligent because quite frankly,
I think most of my peer group
doesn't even understand what the hell I'm talking about.
And so they're not gonna talk about it
because it's so damn complicated
and there's scams around every corner.
They don't wanna go on air and tell you guys
to do something that's gonna get you scammed
or something like that.
Like they're just gonna sit this out for a bit.
Let Chris figure it out.
You know what?
He figured out a lot of this stuff first, right?
Let him figure this one out.
He can burn his ass on this, piss everybody off.
And then if it actually works out,
then I'll sign up and we'll get it working.
It'll be fine, right?
Like that's the state of things.
So that's what we're doing here right now.
That's the stage we're in, but it's moving quick.
So anyways, join me for the apex of it on March 31st.
And before we get out of here,
why don't we do some boosts?
And now as the French say, it is time for the boost.
Well, Jay wrote in two days ago.
Thanks Jay.
He says, you convinced me boosts.
I'm already a fan of the brave browser
and its model to use attention tokens
to give back to creators.
Longtime Linux user, first distro was MCC Linux in 1994.
Once a career and now a hobby again,
I've become a system admin of humans
rather than machines, IES psychologist.
And that's why it's fun again.
Love your podcasts.
A sys admin of humans.
That's amazing.
Isn't that great?
I like brave.
I'm still figuring out if I like the bat tokens.
I think I get it, you know,
but I'm still, I'd love people's input on that too.
Send us a boost and let us know what you think about that.
The coin lizard also wrote in with 25,000 sats.
Chris, I've been listening to you
since roughly episode 60 of Linux action show.
Wow.
Yeah, I know.
I took my first hard look at Bitcoin
as a result of your podcast plan B.
Do you remember that?
I'm happy to see you promoting the value for value model
from the lightning networks.
It's truly powerful to be able to support content creators
in an uncensorable way.
Thank you for the amazing content
that you've provided for the last 15 years.
We don't have to read that part.
Don't read, that's embarrassing.
Well, I don't know.
It seems kind of nice, but all right.
Thank you Bitcoin lizard for sending that in.
I hope you made a good chunk of money.
Cause if you've been listening since plan B,
I looked at the last recorded episode of plan B
and I think the price of Bitcoin at that time was $124.
A different era.
NorCalGeek boosts in with 5,000 sets.
Commenting on Linux Unplugged 450 went real bad.
I enjoyed the GNOME 42 review slash preview.
Looking forward to getting it at Fedora 36.
Yeah, us too.
Keep up the great work.
I appreciate your honesty.
Ah, thank you NorCal.
Miss you.
It's been a while since we've been able to meet up with him.
Yeah, no kidding.
By the way, I saw that OpenSUSE at Tumbleweed
shipped 42 this week.
So they technically, they got it first.
We got to give them credit.
Also Clear Linux shipped it.
So got to give a Clear Linux some credit too.
Go get that GNOME 42, however you have to get it.
Remaking Eden wrote in three days ago with a thousand sets
also in response to episode 450 said,
I really hope that the value for value movement
gathers momentum.
It's the first so-called web three project
I felt like I can get behind and we'll do some good.
I'd hate for Spotify to gobble up something as important
as podcasts.
Web three is kind of a nebulous term,
which I guess can encompass anything that has blockchain.
Value for value itself, again,
that's a content and monetization model.
Lightning is the payment network, right?
And Bitcoin is the form of payment.
Does that make sense?
Yeah, right.
And you can use those things to implement something
in the value for value system.
You got it, you got it, you got it.
Matthew wrote in 5,000 sats four days ago.
He says, hi, thanks for the show.
Do you know when Fountain will support Apple CarPlay?
That's the only thing that keeps me on Apple podcasts.
Fountain, yes, does not yet support Android auto
or CarPlay, but I happen to have it from a reliable source
that it is the number one requested feature
and that it is going to be released soon.
Thanks.
Yeah.
Eric Padre writes in four days ago with 2,000 sats.
Let's go Linux community and lightning.
Let's bootstrap this fantastic idea.
And that was it.
That's it.
That's a short one.
I expected there to be more,
but then I realized the other bullet points
were just notes to ourselves.
You know, there's a character maximum,
not a character minimum, Chris.
You know what?
I like the short ones actually.
Thank you everybody.
Thank you for sending those in.
So the way you send in a boost
is you go to newpodcastapps.com.
You get an app that supports boost like Fountain.
You charge up that lightning wallet
and then you send one in.
Boost to grand.
Yeah, that's great.
That's, I don't know.
I feel like I've officially got it out of my system
and this live stream thing's happening this Thursday.
I hope you'll join us.
We have a special guest that's gonna join us
and do a brief interview.
We're gonna do the Bitcoin giveaway.
Of course, we're also gonna help you get Matrix set up.
And last but not least, of course,
somebody, a friend, maybe Wes, is gonna join me.
We'll chat.
I don't know.
I feel like there's something else I'm forgetting
that's gonna be on the live stream,
but we have a good show planned.
Said special guest, right?
Mm-hmm, mm-hmm, mm-hmm.
Bitcoin giveaway.
Mm-hmm, mm-hmm.
Matrix set up.
Ask Chris anything.
The AMA stuff, that's what I was forgetting.
Oh, I thought you were gonna say Levi there for a sec.
Maybe he could make a special appearance.
I mean, he's kinda, you know, he's hard to get.
Yeah. He's booked out.
That's true.
If you'd like to get more show,
go check out linuxactionnews.com.
Wes took the week off, but he'll be back this week, right?
Yeah. Right?
Of course. Of course.
We cover the tech news, what's going on.
Don't miss a single episode, linuxactionnews.com.
It's like, we should probably consider a combo feed.
Now that I think about it.
Whoa.
We have the all shows feed, but we should-
Right.
We should, if people be interested,
send us a boost, tell us that.
Yeah. Arbitrary feed remixes?
Yeah.
And also you can always join us on Sunday at jblive.tv.
We do the show at noon Pacific, 3 p.m. Eastern.
We got the mumble room going.
That's always a lot of fun.
We got the chat room going.
We don't have the JBLive FM stream going at the moment,
but we will be working on that.
We will.
That is in the plans.
Just went out, okay?
I'm sorry. I'm sorry.
But links to everything we talked about today
are at linuxunplug.com slash 451.
The show's RSS feeds are over there.
If you'd like to send it to somebody,
recommend your favorite episode and send them a link.
We appreciate that a whole bunch.
And of course, join us on our matrix.
Details on our website.
Thanks so much for joining this week's episode
of the Unplugged program.
See you right back here next Sunday.
We'll be right back.
The Unplugged program is brought to you by
All right, JBtitles.com, let's go title this thing.
It's worth mentioning before we get out of here,
we talked all about NICs this week,
but Fedora 36 and Ubuntu 2204 have their betas coming out.
And both these are big releases because 36 has that nice,
beautiful upstream GNOME 42.
And of course, 2204, it's gonna be an LTS.
So that's also one that really could have some value
to get as much testing as possible,
because that just has a lot of long-term benefits
for the Ubuntu community.
So that's exciting.
It's a busy week.
Get out there and get your beta.
Yeah, right.
Which, you know, I gotta get 2204 going again,
because I got 36 installed right now.
Same, yeah.
Hmm, but I feel like I need to give 2204
a couple of weeks.
There's a lot going on.
There's too much.
And we got the NICs challenge.
Plus then, during the middle of April,
we're traveling, or the early part of April.
So that's kind of one of the reasons
why I wanted to make the NICs challenge a month long,
is because I wanted to give people who are busy
a chance to participate.
Smart.
Yeah, and also, since all of us are
traveling to North Carolina in a couple of weeks,
I don't think there'll be a lot of NICs testing going on that
week for the JV crew.
So I wanted to give us a little extra time in there.
We have some pretty long flight rides,
so I feel like there might be NICs in the air.
Hadea and I are already talking, though,
about maybe watching a new TV series during that time.
So that time may already be claimed.
You know, that's the debate right now.
I was thinking of Wes, really.
Come on.
Oh, yeah.
Wes will probably spend his entire time
just trying to hack the in-flight Wi-Fi
to get free internet.
That's always so fun.
Ha, ha, ha, ha.

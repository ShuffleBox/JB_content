You realize you've got three different distributions in front of you right now?
You've got Nix, you've got Arch, and you've got Ubuntu going on right now.
This is a busy day for Wes Payne.
He's like frantically trying to get things installed.
How are you doing over there? I know it's a big task for today's show.
Well, plan A didn't work out just yet, but plan B? Going to plan?
Plan A required me nuking and paving my perfectly awesome Fedora 36 setup.
That was going to happen regardless of the plan.
Okay, maybe.
So then I put Arch on there because we wanted some newfangled kernel patches for today's show.
And I look over there, and you're loading Nix on that thing.
Hello, friends, and welcome back to your weekly Linux talk show.
My name is Chris.
My name is Wes.
And my name is Brent.
Hello, gentlemen. Coming up on the show today, HP has announced a new laptop that ships with Pop OS aimed at developers.
We'll share our thoughts on that.
And then why we're getting excited about BcacheFS and how it compares to ButterFS.
Your workstation's got a new file system inbound.
If you do anything in media production or have large files or perhaps gaming, you're going to want to stay tuned to this.
And then we'll round out the show with some boosts and picks and a lot more.
So before we go any further, let's say time appropriate greetings to our virtual Linux users group.
Hello, Mumble Room.
Hello.
Hello, Chris.
Hello, Wes.
And hello, Brent.
Hi, everyone.
Good to have you here.
Our Mumble Room is open every Sunday when we do the show.
Mumble is free software.
And we have a quiet listening lobby if you just want a low latency Opus audio stream.
And then, of course, we have the on air area.
And then we use Mumble for office hours and other productions here on the network.
So it's always nice to have it ready to go.
And we often have community events on there, too.
We have more details at Linux Unplugged dot com slash Mumble.
Speaking of meetups and community, though, it looks like Alex is putting together a London meetup for Saturday, August 6, 2022 in the London area.
We'll have details at meetup dot com slash Jupiter Broadcasting.
Oh, I wish I could go.
Oh, my goodness.
Me, too.
So go in our Stead audience.
Make sure Alex won't be there by himself.
Yeah.
Make sure it's a party.
Take some pictures.
Share them.
Make us jealous.
So that way we have to go to the next one.
I already have something booked for that first week of August.
I want to go so badly.
But if you're in the London area or anywhere near there and you'd like to go, we'll have the details at meetup dot com slash Jupiter Broadcasting.
I think Alex is still taking input from the community, too, on ideas and whatnot.
Yeah.
So now's the time to put your input in.
If you think you might be available or want to make it.
But we all just got done traveling.
All of all three of us were just traveling.
And we survived.
We did.
Honestly, sometimes I don't know how we do it.
That last bit of my drive was really crazy.
But we all had, I think, a pretty decent trip considering what could have gone wrong.
Brent, I believe you successfully smuggled back something from the United States into Canada.
Do you want to out yourself?
You say something like it was only one thing.
So I'm not exactly sure which one you're talking about.
Any hints?
Oh, you tell us.
Well, it's that one extra organ.
Oh, actually, I wonder which one you're latching on to.
But maybe one of the one that's exciting me is Alex gave me a phone that is not like a potato, which a potato on fire, which I think is a really good thing.
Your last one here was actively hazardous to those around you.
Yeah, I mean, it's a good conversation starter.
Yeah, I mean, I've heard stories of battery expansion, but I've never actually seen one that bad in person and then seen somebody continue to use it.
So I'm surprised they even let you on the airplane with that bomb.
It keeps my thigh warm, you know.
Well, so are you going to transition to the new phone now?
You got a whole strategy.
Well, you know, I know Drew's listening and I got into a car accident trying to get the lovely phone he gave me.
So thank you, Drew.
And then basically Alex had one for me as well because they're both sweethearts.
And he said I couldn't live in his house anymore if I didn't switch phones.
So he forced me to switch to this new wonderful one plus six that he had kicking around like he does.
I got to say, Chris, like the transition was the thing that I was dreading.
I feel like we're so used to having the desktop and things are, I don't know, seem much easier to transition there than they do on an Android phone.
And I was right.
It was a total pain and I haven't even moved everything over and I just so cringy.
It was just I tried a few, you know, pieces of software that are trying to help you and none of them worked.
And some people will say, well, Google has this thing where you just, you know, backs up your entire phone and then gives it back to you.
But that's not in my realm of interest.
So I did it the old way and I had to, you know, peck at the phone for about six six different sessions.
It's probably a little more challenging because you're trying to do this, I would imagine, without using Google services.
Yeah. Well, I figure, you know, you should be able to do this on the local network, right?
I guess you should. Oh, it's painful. Yeah, it's painful.
And the other thing is, I don't think I'm maybe a representative regular user.
I would imagine we all have so many different little I have like two or three VPN different types of VPNs on there now.
And that's just a small example of all the different crazy stuff I'm working with on there.
So you do make your own life difficult. Maybe that's a nice way to put it.
You know, though, I think once you're done, it's going to be worth it. That's a good phone.
It's going to last you a good while, especially how long you get out of these phones.
It'll be a worthwhile transition. And every time you do these transitions to at least for me, I always find like, oh, I need to do a better job at figuring out my two factor stuff or I need to do a better job at making sure this is backed up.
So it's, you know, in a way, it's better to identify this stuff now than just when your phone actually caught on fire.
I did also take the opportunity to install lineage on there, which I haven't used since the cyanogen mod days way back.
I had like a dream that I installed it on. It's nice to catch up like that, too.
Yeah. So I'm so far they just came out with a new version is a little bit buggy, but they've been putting out updates like crazy.
So I'm excited to find out how that's going to be.
I would love to hear your experience with that as time goes on.
We'll be able to do a little bit of a long term look back and see what you think.
Wes, you were on assignment last week, assignment to party.
Tell the class where you went and how it went.
Yes, I was in the fine city of New Orleans.
That's nice. It was warm, I imagine.
Yes. 91 and incredibly sticky.
The last day I was there, which I chose to sort of wander around as much as I could, but I was quite tired for the ride home worked out nicely.
No, it was great. I mean, amazing food, amazing drinks.
But there was one drink I didn't I didn't get to have.
So it's curious maybe if there's any audience members out there who have good places in mind next time I'm back.
And that's the the Ramos gin fizz. Oh, that sounds great.
It's tall, creamy, citrusy with sky high foam.
You've got gin, lemon, lime, cream, simple syrup, orange blossom water, egg white and soda.
Egg white? The original recipe calls for 12 minutes of shaking.
It's more of a meringue at that point.
It does sound like a dessert.
But, you know, you want a good one. And it's it's mostly these days considered a brunch drink, is my understanding.
So you need to find a place that, you know, has a bar staff who's willing to make you this this fancy ass drink and make it for you at like 11 a.m.
That's very true. Well, I'm glad you got a chance to go down there and enjoy yourself.
That sounds really like I have probably a handful of places in the US that I've never been to that are really high on my list.
And that's definitely one of them. Sounds like it was probably a really good time.
Did you, Wes, did you enjoy any music while you were there? It seems like that would be a thing to do.
Oh, yeah, of course I did. I mean, you'd have to be an idiot not to.
Well, you just wander around the French Quarter and there's music spilling out of all the doorways.
So that does sound really nice. That's great for somebody who likes to walk around to like yourself and you take it all in.
Well, maybe one day we'll do a meet up down there. Get a chance to check it out.
You can show me around. I also have a story on my travels that involves a drink because you know how I am when I read like usernames.
Super accurate. Yeah. Very good at pronunciations.
And I'm very, very good at figuring out people's usernames and reading them completely accurately and pronouncing them accurately.
And so that really good skill I have apparently also applies to like looking up restaurants.
And I kid you not. I found a place called Mamosas and I didn't even think of Mamosas, right?
Because I'm an idiot and I don't know what's wrong with how I read, but that's just how my brain works.
So I like let's go get breakfast to this place called Mamosas.
We show up and of course it's like a brunch place that specializes on all of these different Mamosas and a bunch of other really good things.
That sounds like a great find. And I got myself like a pomegranate Mamosa and it was fantastic and just really hit the spot.
So I was in southern Oregon in the Grants Pass area and it was beautiful.
You know, mid May, mid to late May. It's just such a gorgeous time down there.
And I was getting some repairs done. Brent knows that we just took horrendous damage coming into Denver.
And it resulted in some of my suspension kind of just getting smashed.
And so I was just getting the last bits of that fixed up and then I was getting upgraded leaf springs put in.
So now JOOPS is better equipped for the rougher road conditions that seem to be out there.
And I think in part the roads have just gotten worse since I've gotten the RV.
There's just a lot of infrastructure that needs work.
So when I take her in, I get her fixed and I tend to do a little upgrading.
And now I've got these really new robust custom made leaf springs put in there.
And I've got a bunch of Kony shocks and all this really nice stuff like Sumo springs and sway bars.
I mean, she's really, she's really dialed in. She's a better drive than the day she came off the lot.
No doubt about it. And we're just wrapping up.
And we thought we'd get out of there Tuesday evening. I figured I'd get back up here.
I'd be here for Self Hosted and the Bitcoin Dad podcast and we'd be we'd be good to go.
Tuesday evening rolls around like, you know, guys, this is taking a bit longer than we expected.
Do you think you'd be OK heading out Wednesday?
Well, yeah, you know, it's fine. We've got our home here.
I'll contact Wes. We'll figure out how we're going to record land.
We'll get it all. We'll get it all solved.
Wednesday comes rolling by.
Oh, man, guys. So here's the thing. We have we found this. We think we should probably get this fixed.
It's pretty important for your steering. It's going to be an issue if you don't solve it.
And in the back of my mind, I know all these shops, they're booked out till the end of September.
So if we want to go on a J.B. road trip this summer, I got to get this fixed now.
Now or never. Now or never, Wes. I mean, literally, they're all booked out till the end of September because I've called around.
Let's take care of it. So Thursday day goes by. They get it all taken care of.
We're looking really good. They want to do a test drive. So we schedule all that for Friday morning.
I think we're going to get it. We're going to get out of here. It's going to be fine. Should be all right.
As they're wrapping up doing their test drive.
Can you guys can one of you guess a completely unrelated system that exploded that left us stranded and put us right up against the last minute?
And it's not Levi. No, Levi was good.
Completely unrelated to the work we're doing, just as they're about to wrap up, just as we're about to pull out of the lot.
We had literally another system in the RV blow up.
Any guesses? Anybody have a guess? I have a guess from trends.
I'll call them trends. And I don't want to say that this might be it.
But is it related to a clear fluid that gives life to most things on Earth?
Water? No. No. Really? I was sure it was going to be water.
Thankfully, it was not water. Well, that's good.
No, we had a hydraulic line that we use for our jacks rip open and spew hydraulic fluid all over the motor and the transmission, which created a tremendous amount of smoke.
And there is a lot of hydraulic fluid, so it just dumped.
But here's the other thing. When the hydraulic system is pulling the jacks up, that's when it pressurizes.
And so the jacks began to fall down because the system was losing pressure as the RV is moving.
So then the pump kicks in in overtime to pull the jacks back up.
Right. So then it's just it's just pumping as much hydraulic fluid through the system as it possibly can because it's trying to keep those jacks up.
And so there is just fluid dumping all out the bottom of dupes, all right down over the transmission, because that's right where the hydraulic lines run over is the transmission.
The transmission, of course, is like one hundred and seventy five degrees.
So it ignites. Right. We're getting we're getting we're getting like close to like full on combustion.
This all happens in the lot of the shop. So we stop the rig, shut it all down.
We figure out the hydraulic pump is running like crazy. We go out there, we disconnect it from power.
So it shuts down. We let everything cool down. It's a mess.
And then we're trying to figure out what went wrong.
And you look through you follow the hydraulic line through the engine up over the transmission where they have it hooked to the chassis with like a loop that's running through a metal loop.
And that metal that metal loop had a little bit of a rubber on there to help to help just keep things from rubbing.
But that rubber had fallen off. And so these hydraulic hoses were just chafing against a metal loop over the transmission.
And so it just cut them until they burst.
Yeah. So totally unrelated to the work. But they told us that they've had customers rigs burned down.
You're so lucky this happened where it did and when it did. Imagine we were on the road or something.
I know. I imagine I was on the freeway. Oh, my. If it was even hotter out.
Not only that, but then the shop like sprung into action. They brought the rig back into the shop.
They personally like the techs personally went over to another business in town,
brought them our busted line and had that shop manufacture us a custom new line to fit, which is more robust.
And then they brought it back and hooked it all up for us and got us out of there by the afternoon.
So we can make it back here for the kids and do the show. Just a huge, huge win.
Henderson's lineup in Grants Pass, Oregon. Totally recommend them.
And now, you know, not only that, but juice is in better shape than ever with the suspension.
But for a hot moment there, it got really treacherous. So I'm glad I'm glad that they took care of it for us.
I'm glad it happened there in the parking lot, literally in the parking lot where we could react quick.
We could jump out, figure out what's going on, disconnect the power to the pump and and take care of it before anything got on fire.
And if she was up to full temperature, who knows what would have happened? I don't know.
I know I'm always telling you the horror stories here on the show. I feel like I'm looking at the chat room right now and I feel like the chat room is like,
oh, my God, this sounds like a disaster. First of all, yeah, don't get an RV.
But second of all, what I don't tell you is like all of the great memories and the cool places we'd park and, you know, all that stuff that happens all the time.
I'm just telling you about the really dramatic things that are fun to share on air.
But we are looking forward to a West Coast summer road trip coming up later this year.
And I want to be ship shape and we want to do several meet ups down the road.
So we're going to have more details about that. We're brainstorming and planning that in the office hours podcast, which you can catch at office hours dot here.
But let's talk about Linux for a moment. It's for people who like to mess with computers.
So HP has announced the HP Dev one.
It is an AMD powered Linux laptop, has an AMD Ryzen seven pro processor.
It also has an AMD GPU, a 14 inch anti-glare display, one terabyte of NVMe storage by default, 16 gigs of RAM by default.
But perhaps the most interesting detail about this laptop is that it ships with Pop OS pre-installed.
Pop OS from System 76 is pre-installed on this laptop.
And our understanding is that this has been a relationship that has been months in the making and includes System 76's staff training a team at HP to support Pop OS.
And then a contract or something in place that keeps System 76 as a backup to HP support.
So if you have an issue with this HP Dev one, you go through HP and then they can escalate to System 76.
I have two questions that come to mind from this.
Minimac, I'm curious what your reaction is hearing Pop OS pre-installed on a HP developer laptop.
Yeah, we talked about that in the pre-show.
I was asking myself, could it be that Pop OS has become like a new stable standard for the user that expects that in five years from now his desktop will look the same as it does right now?
We had the same thing like five years ago. If you installed Ubuntu, you could be sure that in two or four years your system would still look the same.
And that starts to change a little bit.
So Pop OS could become some kind of standard for Linux entry user. I don't know.
I mean, you could see a I see what you're saying with like the cosmic desktop could create a standard user interface.
You combine that with something like an Ubuntu LTS base.
I think the other kind of big question there is why Pop OS, right?
You have you have sort of the assumed standard for developer laptops for years.
If you go by the original of this formula, which is the Sputnik is stock Ubuntu. In fact, that was a very intentional choice.
Dell had to learn the hard way not to do a custom Linux, and they took that feedback in from the community.
And one of the lessons they internalized was that you do stock Ubuntu.
But now we see someone going down this path in 2022 and they've chosen Pop OS.
And Brent, I'm curious to know your thoughts about this choice.
I'm a little puzzled. I mean, I love this choice, but I'm a little puzzled because.
HP is kind of, you know, they've been around a while and Pop OS, while they really know their stuff, as we know, is a relatively new distribution.
So it feels like a gamble maybe on their part, although it does sound like they're building a nice connection with those building the software on both sides.
It sounds like a really nice, from what we know, relationship that's happening there.
So it's not like they're just going into it blind. But I'm curious who, you know, they must have looked at choices and landed on Pop OS.
And I have many more questions that I I guess have answers at this point.
And maybe we'll gather some of those in the future. It feels both exciting and kind of like risky at the same time.
And surprising, right? Because there is the obvious element of somewhat cross competition and hardware here.
You could argue that maybe the CUDA laptop is competitive with the dev one or something.
And so there is maybe a clever, like a fox strategy at play here by system 76. I agree with Brent. I've got a lot of questions.
I've been pondering this. I have the sense that system 76 will probably answer any questions we have to the best of their ability.
I just haven't asked them yet because I'm still kind of processing this. What about you?
Actually, in one hand, it's kind of comforting knowing that, you know, system 76 by this point kind of knows their way around this exact task and sector.
And how would I feel about, you know, let's say HP wanted to do this but didn't have their help.
I could see this going kind of kind of poorly if they don't have their their beat on the Linux community in the same way.
And I guess the Sputnik model, I mean, it's old, right? Sputnik happened a long time ago.
And this is a sign that people are not sure exactly where Canonical's focus is.
Not saying they're not in the desktop space, but it's just a different world for them than it was when Sputnik launched.
Yeah, it is. And, you know, when Sputnik launched, everybody was all about the Intel chipset.
And now everybody would love to see a really nice Ryzen laptop. And that's exactly what HP is doing here.
So that's kind of interesting.
And I wonder if in a world of supply chain shortages and whatnot, if this isn't an area that system 76 could apply a little bit of leverage,
because they probably know the needs of a manufacturer like HP better than most shops because they're a hardware manufacturer themselves.
So that makes them sort of a sort of specially suited to interface with for a job like this.
You know, I wonder as well if from HP's perspective, this might be a nice distinguishing factor.
Nobody else is really doing this yet, and though it is kind of exciting. So maybe that's a that's a good thing for HP.
Yeah, it does. It does add sort of a special value that the other laptops don't have.
You mentioned support as well, which is kind of an exciting add on, isn't it?
Yeah, this is still really early, too. We just know basically everything we've told you.
Yeah, I'd really like to be able to go try out some configuration here because, I don't know, I'm not super wowed by the base.
Some of the marketing materials like a little it's a little much, you know, they're really trying to hit this like dev line up hard,
but it's not that shiny in that respect.
Yeah, it feels like it's not quite hitting the note they're looking for.
It's coming across a little too obvious, a little too on the nose.
But, you know, you can see how these have these organizations work, right?
They've identified a category of user.
And the great thing about dev is it's kind of like the way Apple uses the term pro.
I think a lot of people just buy the dev edition that are considered themselves technical.
Yeah, I'm technical. I need I need the fancy one, right?
Yeah. And so it's sort of a it's sort of a term that they can kind of use that tells pretty much anybody who's an enthusiast.
This might be the machine for you.
You know, I look at this kind of stuff from the lens of media production.
We do all of our media production on Linux.
And so one of the things that we do to try to make that as smooth as possible is we try to use hardware that's well supported by the kernel, you know, stuff that's just baked in.
And the shortcut to that is just use stuff that has open source drivers.
And that's the nice thing about this AMD hardware is the GPU driver is open source.
And that solves so many of the stability problems on desktop Linux right there.
So, you know, that's it's that's what makes it appealing to me.
We'll have a link if you want to check it out.
Send us your questions. Linux Unplugged dot com slash contact or boost them into the show.
We'll collect some of them and then try to open up some communications between HP System 76 and get some answers for you all.
Linode dot com slash unplugged. Go there to get one hundred dollars in 60 day credit on a new account.
Yeah, you go there to support the show. Linode is a sponsor I am thrilled to work with because I honestly feel like they've been part of my secret sauce.
Bringing Jupiter broadcasting independent again, going from zero to one hundred miles per hour, right?
Demerging and creating a new business and keeping everything going, keeping all the lights going.
It's like it's like fixing the bus as it's going down the road.
And it would not have been possible without spinning up infrastructure at Linode and the tooling to do that, their API, the command line clients, the pricing, the support behind it.
It all plays a factor.
They've been focused on this for nearly 19 years, making it possible to just run applications on Linux and make it work great.
And of course, I love the fact that they make it super simple to run any distribution you'd really want to, including the latest centos stylings out there, as we could call them.
And of course, when you take advantage of our offer by going to Linode dot com slash unplugged, you get that hundred dollars.
So you could try deploying some of their epic processor systems, try out their super fast rigs.
They've got 11 data centers around the world. They have MVME PCI storage available.
Of course, they've got SSDs and everything as well.
I mean, the options and the tiers are going to fit perfectly with what you need, either for a personal site or something for your business.
And I can say that because that's exactly what I do.
I've got systems up there that just act as support systems to my RV.
So that way I can synchronize and move data up into the cloud and then down to my RV over cellular connections.
I use Linode to sort of like support infrastructure.
I consider them like my orbital systems that are supporting my RV, and I personally pay for that.
But over on the J.B. side of the house, we've been deploying to our audience and hitting higher numbers than ever.
And Linode's been scaling with us all along the way.
So they're for something personal or something for your business.
They've got the infrastructure for you and they're not trying to lock you into some esoteric, crazy platform.
Go try something, go learn something and go support the show and go try out the best cloud hosting in the business
and get $100 while you do it. Just go to linode.com slash unplugged.
Now, gentlemen, I was just listening to the Linux action news this morning before we came on air,
and you were talking quite excitedly about BcashFS.
And I'm curious if Wes got his paws deep, deep into this.
This is something that we've been following for a while.
Wes and I are both big fans of Kent Overstreet, the primary developer of BcashFS,
because he's creating a file system that could be a great replacement for my beloved XFS and ButterFS in one file system.
You know, something that supports copy on write, something that has snapshots, but also really good performance.
I mean, I think that's what attracts you to it as well, right?
It's another chance at a modern file system.
You know, I mean, even ButterFS, which is pretty gosh darn new in terms of, you know, file systems.
It started a long, a long time ago and has seen many different eras at this point.
And we have new ideas. We've learned a lot in the intervening years.
BcashFS is kind of neat because it comes from Bcash, which was already sort of almost the bottom half of a file system.
You know, it had a lot of the similar operations already sort of implemented in the kernel.
Now, you know, there needed to be some updates, and that's part of the work that Kent has been doing,
is sort of modernizing and improving things as the kernel has changed over the years there as well.
But it means it, you know, wasn't totally starting from scratch.
It's just kind of adding a lot of the nicer file system stuff on top, which means not saying go put a bunch of precious data in BcashFS.
Let's get that out of the way right now.
But it's come a surprisingly long way.
And I think in today's episode, we're just suggesting if you're curious,
it's getting a little easier to actually give it a try and maybe even use it.
Yeah, this is it's now entering the we want to be confident when we switch to this.
So let's start trying this out years in advance.
I've lost track of how many years you and I have been tracking BcashFS.
It's been a long time.
Yeah, you know, Kent's got a Patreon.
He gives some some updates.
But, you know, depending on how things are going, that's maybe a couple of times a year.
What changed recently is he gave a presentation at a conference about it,
and then LWN did a great write up of sort of detailing what they were talking about.
Yeah, we recap that in Linux Action News, and we'll also have it linked here in the show notes.
So you can read up on it.
But the long and the short is, is that there's been some big work done
and we're getting within the home stretch for mainlining it.
So perhaps in the next six months to a year, we're going to see it land in the Linux kernel.
Along with that, we're also, you know, getting an opportunity.
To really see how something like this comes along in the free software community.
I was just speculating before the show started.
I wonder how much money Apple spent developing APFS.
I think I read somewhere.
We don't really know. They don't share these details, right?
But I think I read somewhere they spent five to six years internally developing APFS.
You got to figure they had probably at least somewhere between three to a dozen engineers,
perhaps more, a project manager at least.
How many millions do you suppose Apple spent developing APFS?
And we've been watching BcashFS created out in the open.
A file system that has a focus on performance.
In fact, Kent says that some of the early adopters of BcashFS
are video production shops that need multiple 4k streams.
They're already using it.
And we've watched this rollout and we're going to see it land in the Linux kernel.
A multi-year project.
And we get it for absolutely free.
We get it for free as users and we can see the whole thing be made.
And this is truly how free software works.
And so that's one of the reasons we've watched this project too.
But now it's really not that hard to get a module installed on a current Linux box
and get BcashFS support.
So you built a custom Nix OS image, which is one of the nice things you can do with Nix.
Yeah, okay. So one way or another you're going to have to get a new kernel.
Do some kernel building anyway and get the BcashFS patches integrated in.
How you want to do that, you know, you have a few options.
But yeah, Nix OS makes it super easy.
Arch is another good candidate because there's both the user space tools
and the kernel packaged up in the AUR.
But of course, you got to still build that.
And Nix, Nix has the Linux testing kernel with BcashFS available
and built in in their caches already.
So that makes it really pretty darn quick to get it up and going
and built and installed and available.
And then because Nix is awesome, you can follow some directions in the Nix OS Wiki
to build yourself a custom installer ISO.
And then you can just right there, just in the same way you would on your system,
you can specify like, hey, I want this kernel, I want these things installed.
So when we started thinking, all right, it's time,
we've been sort of, you know, oohing and ahhing from the sidelines for ages now.
Let's try and get our hands at least a little bit dirty and try this stuff out.
How are we going to do it?
I don't know, it didn't seem like making you and Brent sign up
for custom compiling your own kernel wasn't necessarily fair.
Thank you.
It seemed like a nice easy way to try to like bridge the gap a little bit
because here's an ISO you could just boot up in a virtual machine
or on real hardware, and then you would have that stuff ready to go.
This is why we were really attracted to Nix OS.
Picture what he just said and apply it to something like a workstation or server environment.
He has the primitives to build his own distro using the Nix tooling,
and his distro comes preloaded with BcacheFS and the Ferronix test suite and stuff like that.
But we could just as easily have a distro that comes preloaded with our specific Linux desktop environment,
our favorite Linux application for recording audio, which is called Reaper,
Mumble, and a web browser, and you could have a ready to go ISO image
that just deploys the absolute latest versions of all that stuff on a box
that Wes cooks up ahead of time.
Now we're doing it for testing, which I could see us doing this more often too, right?
This opens up a whole new world for us.
So how is it going?
Yeah, I will also just say a little bit more with the Nix love.
That was like 12 lines because you just say like, hey, import the Nix config
for the existing graphical GNOME install environment
and then customize these couple of things.
So, you know, I put Nano on there for you guys.
Thank you.
Thank you for doing that, Wes.
We do appreciate that.
I noticed Vim in there too, though.
Oh, yeah.
Well, I mean, I'm not a monster.
So we wanted to maybe do a little A and B between BcacheFS and ButterFS.
We also just kind of wanted to get some general numbers.
So we're going to play around with this, and we thought maybe one of the ways
we could kind of get some workstation-based performance metrics
would be to throw the Ferronix test suite at it.
So you got that loaded on there now?
I'm working on that at the moment.
Oh, okay, okay.
Well, it's going to take a long time to run is the main problem.
So we do have FIO as well.
But maybe we should see like what all do we want to run?
Because part of my ideas here with Arch as well was maybe we put you on
BcacheFS's route and see what happens there.
I think there's kind of an open question of exactly all the ways
we might want to evaluate this new file system.
Right.
Yeah, there's like how does it do in just high-demand burst performance?
How does it do as a daily driver?
How does it do over a sustained period of time?
Because it already has – not everything's there.
Like send and receive, not there yet.
There's some optimizations that you'll see in the docs,
which also need improvement that haven't been applied yet.
But there's already compression support.
There's already multi-device support.
There's already encryption support baked in.
There's already snapshots baked in and seemingly like kind of different snapshots.
So that's where it's neat too.
Okay. I like this.
Very similar user space interface as ButterFS.
So you can just create a new subvolume.
They're called subvolumes.
You can either create an empty subvolume or you can create one as a snapshot
of another subvolume and by default they're writable.
And then you can snapshot those again so you can make like trees of snapshots
however you like.
And they're very cheap to create.
At least here's what the docs say.
They're not based on cloning of copy-on-write B-trees as with ButterFS,
but instead are based on versioning of individual keys in the B-trees.
Many thousands or millions of snapshots can be created
with the only limitation being disk space.
So I guess have at it.
So that's part of the stuff too.
Like it'd be nice to maybe run some performance benchmarks on, you know,
some of these XFS, say, ButterFS and Bcache
and then go a little crazy with big files on there,
put a bunch of snapshots, change some things in those snapshots.
Yeah, like which one snapshots faster?
Which one ends up eating my disk up more?
Well, yeah, does it get sluggish after that?
Does it start to take a long time to take a snapshot?
Yeah.
So BcacheFS also, like I mentioned earlier,
is a modern copy-on-write file system which is what you want.
In general, they've gone for a really clean, simple,
and high-performance implementation of copy-on-write.
So again, you're getting features that ZFS and ButterFS have,
but you're getting them with an implementation towards performance.
And BcacheFS itself is architected more like a file system
that lives on top of a relational database
with tables for the different file system data types.
So you have different tables in there for your extents,
your inodes, your extended attributes, et cetera.
So it can look it up super fast.
Now, before we do any benchmarks,
we do want to see how things line up performance-wise.
I know Brent's got some questions.
I've got some questions, but I'll hand the mic over to Brent.
Go ahead.
Get your questions in, Brent.
Okay.
Well, I think my very first question is,
I heard rumors that there might be some Rust connection here,
maybe in a client or something,
or they're trying to interact in a really nice way.
Is that true?
The Rust connection I think that you're thinking of
is there is conversations about using some of the kernel's
upcoming Rust support with BcacheFS.
Sounds like Kent is definitely interested there.
And I guess there's maybe already some Rust
in some of the user space stuff.
I would assume there's some features in Rust
that are helpful in this case.
I don't know any of it, but it seems to me like
those two might be a really nice complement.
Well, there's also just, I mean, besides all the, you know,
fancy compiler stuff and memory tracking and wrangling,
you just get a nice developer experience, you know?
It's got modern tooling with cargo.
And you've got people who are excited to work in it and learn it.
You've got momentum there too,
which I think makes a difference.
And so you take something that's new like BcacheFS
and you kind of work with something that's got a lot of excitement
like Rust, and you can kind of see how it makes sense
for some developers.
Kent said that if other developers are passionate
about getting Rust support in the Linux kernel,
that they should speak up more because they want to see that happen.
Although it's going to happen.
It's definitely going to happen.
I think my second question is
maybe more of a philosophical exploration.
I know for like the last decade we've been talking about sort of,
you know, quote unquote, modern file systems,
and ZFS and BUNNERFS have been wonderful.
I'm sure there are others I don't know about.
Personally, I feel like I'm always behind on that game,
but my question then becomes—
You're still running ext3? Wow.
Right? It's so stable, well understood, question mark.
I guess my question is, do you think there will be a point
at which we have all of the file systems we need?
You know, some of the recent features that have come out
in modern file systems are really, really helpful.
But is there an end, you know, is there an end point?
Or are we just going to consistently keep getting new
and newer and newer file systems every, you know, five to ten years?
It may be hard to separate that question from the underlying technology too.
You know, like some stuff like F2FS sort of came around
when Flash really became popular.
To some extent, if the systems that we, you know,
are storing things to change, then maybe our file systems have to.
In a vacuum, I don't know, that might depend on our, you know,
how many new cool theoretical or implementation tricks
have we come up to make them faster.
Yeah, I know that there are also just different approaches
developers take depending on the type of storage medium.
There is just different things about spinning rust
than there is about an NVME storage drive.
And so you can optimize a file system for those differences
and take advantage of that performance.
And I think because we're always looking for faster performance
and storage is generally increasing, I would imagine,
and because you're always seeing different types of application workloads
with different file requirements,
I'd imagine we're always going to see new file systems coming around.
But the ones that really solve the high-end workstation use case,
I think those are a little more rare.
I wanted it to be ButterFS.
I think ButterFS works great on like a laptop SSD or on a Raspberry Pi.
But maybe BcacheFS could be even better for that role.
I feel like you could go too far.
You know, you could always have new file systems all the time.
But experience has shown us that I think the Linux kernel is actually,
they're very careful about this kind of thing,
and they don't just let any file system in.
And Overstreet has been working on this for years
to try to make this perfect as close as it can be to perfect.
It's kind of funny in that regard because he's being quite cautious
around when to submit for mainlining.
Yeah, because nothing's going to be perfect software-wise.
But it's as close to stables he can get it before he submits it.
To the point that some of the other file system developers are like,
hey, are you going to get this thing in or what?
Because even some of the ButterFS folks have said,
look, there's some stuff we might want to copy or learn from
that you've been doing here that we might be able to take advantage of.
Yeah, that'd be nice to see too.
So yeah, I think it's always going to be evolving, Brent.
And I think there's just some for the different jobs and different hardware.
That makes sense.
I mean, as long as there's someone to maintain it, then it's all right.
Well, let's hope there's always someone.
All right, with those questions out of the way,
let's see how it stacks up.
ButterFS, BcashFS, BcashFS still in the pre-release phase.
ButterFS, years in development, now in production.
Compared side-by-side, how'd they do, Westpain?
ButterFS has the edge.
Oh!
Perhaps an unexpected result.
563 megabytes per second compared with 531 for the newbie BcashFS.
Well, not too surprising, I suppose, really, right?
I mean, you got ButterFS on that system, years of production optimization.
But you know, that seems kind of already decently competitive.
Now these are early numbers and we're just doing basic benchmarks here.
And default mount options.
That's right.
I haven't customized a darn thing.
Now we could throw XFS in here just to see.
You got enough room on there?
I could do that, yeah.
Okay.
All right, Westpain.
How long will it take Westpain?
I can barely get a sentence out today,
so we'll see how long it takes him to get a partition out.
Oh, it's already partitioned.
Now we got FIO running.
Oh, okay.
Well, I just stole the ButterFS partition.
Oh, yeah.
You know, we should mention while that benchmark is running,
there is a BcashFS convert function.
Like, you can convert.
You can migrate.
Yeah.
So far, I've only tried it with ext4, but we could try it with this.
It's kind of neat though.
You know, it kind of takes up the rest of the remaining space with its own file
and then does some neat sort of offset tricks.
So then you can go in, mount the new file system,
take a look at its backup that basically gets you backup of your old file system.
And then if that all looks good, delete the old stuff and reclaim your space.
Okay, Westpain.
I think your time is just about up.
How did BcashFS compare to the tried and true XFS,
which has been around for decades, finely tuned,
refined a file system I've used in production on terabytes and terabytes of data?
At the moment, you can't shrink either of them, so they share that in common.
Oh.
How do they do performance-wise?
Which one stacks up?
Oh, I'm sorry to say XFS looks like it's the coal year winner by about 100 megs per second.
Yeah, so bottom of the bunch is BcashFS, our newbie and somehow already a new favorite.
531 megs.
ButteButterFS is next at 563.
And then at the top is XFS 629.
Look, guys, we're going to bounce back from this.
We're going to build back this file system even better.
We're going to optimize.
It's going to be fine.
We're going to recover from this.
I believe in Kent and the folks that contribute to this file system.
It's early days.
But it's not about performance before they submit to the kernel.
It's probably more about stability.
Maybe the performance stuff doesn't really start getting worked out until it's on a lot of different systems.
If you are going to start poking around with this,
there is a PDF doc, sort of like a maintainer administrator's guide.
And well worth a read, there's a lot of some details about the underlying structure
and what's different compared to stuff you might know like ButterFS or ZFS.
And yeah, you'll see in there that there's definitely a lot of optimizations that Kent's got ideas about
that are sort of planned, but just haven't been dotted those eyes yet.
And I'll say this, too.
BcashFS has followed that tradition that ZFS followed
where they really tried to get it rock solid and build on top of it
and not have something they're trying to fix after the fact all the time,
which I think is where some of the criticisms toward ButterFS have come from.
Oh, here we go.
I'm just going to migrate this XFS file system to BcashFS now that we're done with it.
Yeah, we're not.
So you can do ButterFS as far as we know.
ButterFS, Extended4, and XFS.
I haven't tried ButterFS yet, but I could.
I mean, I'm just curious.
But it's exciting to watch this be developed.
And it is, for us, a moment just because it is getting so close.
Kent just did that update, which we'll link to.
It's nigh.
And I think when it ships, we'll give it another look
to see if the performance situation has changed at all,
see what the stability situation is looking like.
And maybe in the meantime, we'll keep it on that system for a while.
Yeah.
Why not?
Yeah.
Play around with it.
Play around with the snapshots.
Because that's part of the story, too.
This is one test of many.
And so we can throw the Ferronix Workstation benchmark at it.
We could see what the snapshot performance is like and get a better picture.
I'd also really like to play with some of its multi-disc support
because it's got its own take on erasure coding.
It's got its own version of RAID 5.6 sort of functionality
that's totally a bit different than the failed ButterFS take,
which is exciting on its own and the way that CFS does it, too.
Bitwarden.com slash Linux.
Go there to get started with a free trial of Teams, Enterprise, or a personal plan.
Just try it out right now by going to Bitwarden.com slash Linux.
This is the easiest way for you as an individual or your team or your business
to share, store, and synchronize sensitive data.
And Bitwarden is open source.
It's trusted by millions of individuals, teams, and organizations.
It's what Wes and I use to manage our passwords and our secrets.
And we got an email in from listener Brett.
He said, you know, I tried out Bitwarden after you guys mentioned it on the show.
I loved it so much for my personal use.
I even got the paid tier to support them.
And then I went one step further.
I managed to convince my manager of the awesomeness of Bitwarden
and then the CIO, which resulted in me getting to roll out
the self-hosted Enterprise instance for our entire IT team.
I don't know how we managed without it now.
Brett, I totally know what you mean.
In fact, it's a little scary to think how it used to get managed before Bitwarden.
It's great for individuals.
It's great for teams.
It's even great for your friends and family because having secure passwords,
having a unique secure password at every site and service they use
is probably the number one thing everyday users could do to keep themselves protected.
And now Bitwarden has added a username generator.
So now you can have a unique random username and password
at every site and service you use.
And they just make it all so simple and straightforward.
I love using Bitwarden.
It's really taken my security game to the next level.
Once I added my two-factor token codes in there, please.
I can't believe I wasn't doing it this way before.
And I love the fact that I can self-host if I want that option too.
And they've got a big community of DIYers and folks using the cloud service.
And the pricing is absolutely reasonable.
So go try it out for free as an individual user
or go get a free trial for teams and enterprise plans.
It's all available over at Bitwarden.com slash Linux.
Individual or team, enterprise or just yourself.
Go try it out.
Start practicing better security.
Or maybe send that link to someone you know who needs to start doing that.
Bitwarden.com slash Linux.
Once again, we got some great feedback.
You can go to linuxunplugged.com slash contact to send some of that.
Thank you very much.
Peter wrote in with some great suggestions,
continuing the conversation on booting ARM.
So in Linux Unplugged 4.5.6 and also 4.5.7,
where the issue of booting an ARM and the general fragmentation of the ARM platform was discussed,
he mentions that there's a great project that, in his opinion,
needs to be mentioned in this context called TauBoot.
That's TauBoot.org.
TauBoot has the goal of making booting on ARM boring,
which I think in this case is probably a good thing.
It's a U-Boot distribution that implements EBBR for UEFI,
like booting, and is a true game changer for the devices it supports,
notably the Pine64 PinePhone Pro and the PineBook Pro.
Installing the generic ARM64 Fedora image on the PineBook Pro was a breeze.
Now I can use Grub on my ARM notebook and press a key to boot from SD card or USB instead.
Bonus, he says, TauBoot was started by Samuel Dion Riel,
who's a NixOS Committer and the founder of mobile NixOS.
That is so neat.
You know, my dream setup is netbooting a bunch of like CM4s or something in the studio.
Like you turn on the studio, they all netboot into like an OS that's living on the server somewhere.
Boot to Reaper, perfect.
Yeah, I don't know why I've always been into that, but I always have.
I've always loved the idea of essentially just a thin client on the front end
and then a centralized backend server that I control, that I update the image on,
that we deploy once and then everything gets it.
We can build some sweet NixOS pixie images, that's for sure.
Totes good, totes.
And now it is time for Le Boost.
Hey, I want to mention for, I don't know, the next few weeks at least,
we are doing a 15% split with all of our boosts.
So this is something that's possible with the value for value block in the podcasting 2.0 namespace.
We have added the OpenSATS organization to our split.
So when you boost the show, 15% of your SATS will go to support contributors for free and open source projects.
The OpenSATS Foundation is a nonprofit.
100% of the money that they raise goes to free software projects that are taking Lightning payments.
And there's some projects in there that I think are really great.
A BTC pay server, Sparrow, several other projects in there that I think are fantastic.
And so I just want to encourage the idea of using these splits to help support open source development.
And so we're going to throw 15% of your SATS over to OpenSATS.
All you got to do is send us a boost and they get a contribution for, I don't know,
I think we'll do it for like three weeks or something like that while we experiment with this.
Michael wrote in with a boost with 15,000 SATS. Thank you.
He writes, Hi, Chris and team. I have listened to JB podcast since 2012 and love it.
2012, that's a long time.
It's older than you are, Brent.
Nearly.
I hope you find a good, sustainable way for you and your team.
I like the value for value model with the pay SATS while streaming. Thanks.
Well, thank you, Michael.
Yeah, the value for value model has been something that I think is resonating really well with some of you out there.
Some people are still warming up to the idea.
But I think when we expand the idea to free software, it's really going to be magic.
We got a double boost from Michael.
I didn't even know that was allowed.
Yeah, a double boost, 3000 SATS, and he just was feeling the value for the NVIDIA coverage.
This is a good example.
Like he listened to our coverage on LAN and Linux unplugged.
I think he got a better understanding out of that, and he wanted to return that value with 3000 SATS.
And he sent a note specifically thanking us for LUP 458 coverage, which Christian joined us for that to help cover some of the deets with NVIDIA's new driver situation, which is really exciting.
The Golden Dragon boosted in with 1111 SATS just to make it hard for us to read.
The more and more I hear about this foray into putting the kernel stuff is open source.
The more excited I get for the future of the Linux desktop experience.
Currently, I have to use a script to control my GPU cooling fans.
So maybe once this is complete, this will just work flawlessly.
I'd love to see these kinds of things improve now that the driver itself will be open source.
I could see a future where it doesn't matter if you have an Intel GPU, if you have an AMD GPU, if you got an NVIDIA GPU.
You could be in your desktop environment, like say, GNOME Shell, where they have those new power modes, those three different power modes.
And I could see a future where when you choose a power mode, it has actual input over how your GPU behaves, the whole stack.
I think that future is nigh.
Yeah, but if people don't have to write weird UDEV rules, how will they ever learn?
Yeah, and it does probably kill a whole generation of bash scripters.
Back in my day, Wes, back in my day.
Marcel wrote in with one, two, three, four sets.
Thanks for the level headed coverage on the NVIDIA stuff.
Most things I see online are extremely entitled.
Wow. Yeah, I know.
I think if we're hostile to NVIDIA's first major foray into open source, they won't be likely to go further.
We should thank them, not dismiss the whole thing because they didn't open source the firmware.
I guess I too was a little surprised at first that we went so quickly to, oh, well, this doesn't matter because the firmware.
But then I realized that now I think I think people are a little jaded.
They've heard promises and commitments before.
They've seen things specifically around GPU driver promises before.
And I think there is just some skepticism that's built up over the years around that.
And so then I kind of then I kind of understood it.
I, however, remain very optimistic about this entire thing.
I think the evolution of more of these controls being baked into the firmware has been in the works for years.
I don't think NVIDIA did anything new or different here.
I don't know if I love it, but I love the idea of at least everything on my machine being open source and free software.
Yeah. I mean, maybe it cements us forever in this world of big old binary blobs.
But we work unfortunately kind of there already.
Yeah, that might be true. And at least they're going to work well. Right.
Yeah. Yeah. Yeah. I suppose I suppose that could be true.
I don't know how I feel about that.
You know, I feel like that's a topic.
The firmware topic is something I'd like to talk to more people about that work in the industry and maybe get a more, you know, a more nuanced take on it because that does feel like a pretty complicated issue.
We did get a double boost from the Golden Dragon to this week.
Double boosting today. Yeah.
Conversation on tail scale makes me want to swap from zero tier over to this.
I don't think as many people knew about tail scale as I thought, which is great.
I use the crap out of it.
I think it's a fantastic, fantastic service.
I tell you what, I was using tail scale on this trip even for sure.
B-O-O-S-T.
We did get some thank you boosts.
Twelve hundred sixty three sats total from Cass Peeland and Robert Hand, who just wanted to say thank you or streaming in sats while we were doing the show.
If you'd like to send a boost into the show and support independent content on a totally free and open network with no middleman,
you can go to newpodcastapps.com and grab one of those and then you just load up that lightning wallet and send them in.
And good news, the sats are cheap right now.
Sats are going to be on sale this summer.
Same old sats just now on sale.
Now, there's no official pick this week.
We wouldn't we wouldn't have any backup picks, would we?
Yeah, I got one right here in my back pocket.
You got a sneaky pick.
And it's one I'm surprised hasn't come up before.
OK, so here I am on my on my flight, right, getting ready to go on vacation, sitting next to my traveling buddy.
And then it turns out that a family kind of got separated.
They'd like to sit together.
No big deal.
I'm happy to make that move.
But we were kind of planning to to plan a couple of projects together.
You know, we're going to use the plane time.
So we thought, well, it'd be nice to at least still be able to to chat with each other.
There's got to be a way to do that on Android, right?
In comes the pick Briar secure messaging anywhere.
And this was like a really handy little app.
Of course, it's on F-Droid.
But as they note here, there's back on the Google Play Store again.
So it was super easy to get even just while like last minute waiting for pushback on the plane.
Right. And it's really neat.
Like we could just you know, before we separated, we could scan a QR code to get ourselves authenticated with each other.
And you could do that either totally offline or you can do it.
You know, it has a mode for doing that if you happen to be next to each other as well.
And then after that, we could do it either with Wi-Fi or Bluetooth right on the plane.
It'll do a peer to peer Bluetooth network.
Yeah, really. And it just pretty much just worked.
That is cool.
So you didn't even need a Wi-Fi connection to chat.
No, no.
That'll be limited, of course, by the strength of your Bluetooth and such.
But I was impressed.
Like, I don't know how super feature rich it was, but I was in a pinch and in a pinch it was there for me.
So maybe worth a shot if you're in that kind of offline situation.
It's called Briar Briar.
So we'll put a link to that in the show notes.
The show notes can be found at Linux Unplugged dot com slash four or five nine or generally in your podcast app of choice as well.
Of course, you can just scroll down and find them there.
But I like I like to tell you about the website because that's where you go to get things like our mumble server info.
That's where you go to get the contact page, our RSS feeds and of course, any of our previous episodes.
So I do like to mention you go to Linux Unplugged dot com slash four or five nine for that info.
And don't miss Linux Action News.
There's always something in there going on every single week in the world of free software, open source and Linux.
So Wes Payne and I break it down for you.
It's like a companion show.
That's right.
Lean, mean, just what you need to know.
We don't waste your time.
None of this tomfoolery they have on love.
That's right.
None of that tomfoolery.
See you next week.
Same bad time, same bad station.
And of course, I'd love to have you join us live on a Sunday.
We do it noon Pacific, three p.m. Eastern over JB live dot TV.
You never know what we got cooking up.
There's usually a lot more show.
You can become a member.
Support this production.
Give us the runway to make choices with the sponsors we want to work with.
And as a thank you, we got two feeds ad free and of course, the full live stream.
And don't worry that ad feed's not going away.
I make one comment one time.
You scared people.
I did.
No, we make both feeds available as a thank you for supporting Unplugged Core dot com.
If you want to become a member.
Thanks so much for joining us on this week's episode of the Unplugged program.
We'll see you right back here next week.
You know, Chris, office hours, is that coming up on Tuesday?
This here Tuesday.
Oh, geez, Brent.
What?
What?
What?
I was just thinking about your hair and I thought.
Oh, yeah.
I better get in.
I better take a shower, huh?
No, no, no.
I mean, if you got it in the URL, you got to make sure it's like.
I need CG hair.
I know.
Yeah, I didn't pick the dot hair as a as like it's just that it was like that or I can't
remember.
It was something else really.
Oh, power shell.
No, limo.
It was like my because I didn't want to spend a lot of money.
And office hours is a really common term.
Horrible name.
Worst, worst podcast name ever, actually.
And I didn't want to spend money on the domain because, you know, I mean, this is just a
thing I'm doing.
So I like how normally you're like, you know, a new podcast.
It's a new relationship.
Yeah.
You got to take it seriously.
It's a marriage.
And then this was sort of like this was a fling Thursday afternoon.
Yeah.
Yeah.
This this is this is the podcast that when I'm traveling to a particular town that I
often know you're doing this show.

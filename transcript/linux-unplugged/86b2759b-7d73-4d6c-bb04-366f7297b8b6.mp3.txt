Add this to the list of reasons to never run Windows.
Office Depot's name's getting dragged through the dirt
this week when it was revealed that they will be paying out
$35 million in refunds for tricking people
with bogus malware scans.
Yeah, I don't know.
This is just, it's been so long since I've bought computers
this way, it felt so foreign.
But you gotta feel bad for people who just want to get
a new machine and end up as part of this scam.
Windows users would come in.
They'd say, take a look at my computer, it's running slow.
That's because it runs Windows.
I mean, I'm sorry, I'm sorry.
I know a lot of people, I'm just having fun.
And so then they would bring it in and Office Depot
would scan it and they had the software rigged
to show false detections, false threats.
And then they'd be like, all right, $300 to fix that.
I mean, how could you not, right?
You don't know, you're bringing your stuff to Office Depot
so you obviously have no idea how computers work.
I know, it's such a shame though because like,
you could grab a great SSD for that price
and that would make the machine way faster
without a doubt, right?
Of course.
Also, maybe put Linux on there.
This is Linux Unplugged, episode 295 for April 2nd, 2019.
Oh, hey y'all, welcome in to your weekly Linux talk show,
Linux Unplugged.
This week, it's a special episode.
We are packed.
My name is Chris.
My name is Wes.
Hello, Mr. Payne.
So aside from a full cast of characters this week,
we have a big batch of community news
that we'll be getting into.
Mozilla is doing quite a few useful things.
We'll tell you about them this week.
NGINX wants to reassure you, everything's gonna be okay.
And Raspberry Pi has new accessories for you to buy
and they got me with one of them.
I'll tell you which new Raspberry Pi accessory
I picked up this week.
And we'll get into some big news for elementary OS
and the slick update the Ubuntu Mate project has
for Raspberry Pi users.
There's something really sweet in there.
I don't know, for me, it's like a game changer.
We'll talk about that in a little bit.
And then towards the end of the show,
assuming we have some time,
we have some deep, deep thought provoking feedback
to get into.
Well, at least some decent feedback.
I don't know if I'd say it's deep and thought provoking.
Stick around and find out.
Yeah, maybe that's the way to put it.
But as we're getting close to episode 300,
I feel like we've got some great stuff lined up,
including, like I mentioned earlier,
a great cast of characters.
In our Mumble Room joining us this week,
we've got Billy, Brandon, Brent,
Cassidy from elementary, Cubicle Mate, Foursquare,
Fundament Utils, Mini-Mech, NE1, Nero Burner,
Skull Leader, Social Happiness, awesome to see you, Emma,
Tech Mav, oh man, great to see you,
and of course, Mr. Wimpress.
Time appropriate, greetings, Mumble Room.
Hello, everybody.
Good evening, how's it going?
Wow.
I'm just looking at the waveform there.
This is incredible.
That was great.
Hello, everybody.
It is really good to have you here today.
Our main duty for this episode this week
was to avoid putting April Fool's stories
in the news lineup.
That was job one.
And this is Tuesday.
April Fool's was yesterday.
We were really close, really close.
So I had to look and had to reject a lot of stories.
We all, we've got a team now.
We've got a team now, including folks
that are just dedicated to researching this stuff.
It's a team, it's pretty great.
And there was one story that, it's fake,
but it really made me chuckle.
Did you see this one?
I did.
You did see this one?
Hackaday had their April Fool's story.
GNU slash Linux distros drop support for Vi.
It's about time.
No more VI, the war is over.
They say the reasons for this move
aren't entirely clear to us,
but from what we can see on the GNU slash Linux mailing list,
the confusing modal interface
and the fact that it's been hard for novice users
was the only cause of the decision.
Well, you can speak to this, Chris.
I thought you would say that.
Actually, before I realized it was,
because I mean, I was reading a bunch of fake stuff
and real stuff, right?
There was still real news that day.
Yeah, which we'll get to.
I thought this might've just been
like deprecating VI compatibility mode or something.
I thought this was a real change.
So they definitely got me.
I've never installed GNU slash Linux.
Yeah, and of course, the only thing
that would've made the story better
is if everything was switching over to Nano by default.
We were here earlier in the studio
working on a configuration file
and Wes was standing next to me and I had to make a point
of not only do I, when Wes is next to me,
not only do I edit Nano, but I use Nano dash W
because you gotta have the wide Nano.
You gotta go all in.
So that's what I did.
You're a Nano expert.
All right, well, let's get into the real news this week.
There is actually some news.
Not all of it is fake.
So kicking off, we have an announcement for the Apache
Foundation.
They have hit their 20th anniversary.
So another big happy birthday this week
goes out to what they bill as the world's largest
open source foundation, which provides 20 billion worth
of software for public good at 100%, no cost by now.
Happy birthday, I guess.
Yeah, I mean, we should take some time and appreciate.
There's a lot of really good software under that
and supported by that foundation.
So big thank you to the Apache Foundation and happy birthday.
They were founded in 1999, which makes
me feel like an old man and makes me realize
that that was 20 years ago, which we will just
move right on from that and continue in.
Here's to many more of those years for both of you.
I hope I'm still here.
I hope I am here talking about their 40th.
Wouldn't that be amazing?
I'll see you there.
And then let's play this clip.
Perfect.
All right, hello future Chris.
Now, let's move on to the Mozilla is useful category.
And I like this.
I like looking at the stuff Mozilla
is doing that is either advancing the web in a good way
or is maybe even a project outside of Firefox
and Thunderbird.
Not really context, we talk a lot about Mozilla.
So first for Firefox users, this is a fascinating one
that I think we're all going to agree
is a very, very good feature they need to just adopt.
Don't even experiment, just go with it immediately.
And that is reducing notifications for permissions
to have notifications on your computer.
Websites, how do I put this because I'm butchering this.
Everyone wants to send you push notifications.
And they want to notify you about their intent
to send you those notifications.
They say, in the interest of protecting our users
and the web platform as a whole, we
plan to experiment with restricting
how and when websites can ask for notification permissions.
You can see a little bit of their motivation
as they write anecdotal evidence, AKA people
complaining, tells us that there is
an issue with notification permission prompts
among our user base.
As we browse the web, we regularly
encounter these prompts.
And more often than not, we become annoyed at them.
Or, and this was true, I remember distinctly
for some reason the first time I saw one of these
because they accidentally clicked allow.
And then suddenly I was getting notifications
showing up on my browser and everywhere that I was signed in.
They're just confusing.
And I don't think, especially people already familiar
with the way the web works, they're
sort of this weird, new, out of band system.
And you never know what they really want to use it for.
So you're asked to make a decision before you even
understand what the content is that you're
going to get delivered.
And then you combine it with the cookie notice policy
and the user data notice policy or the hey,
would you like to sign up for our mailing list policy
thing that comes up or the hey, don't use an ad blocker.
All these things that come up at once now when I load a website
are horrible.
Nothing like when I use the web when it was originally started.
These are awful.
But it's more interactive, Chris.
Yeah.
I've got to have me and my notifications.
That's for sure.
They do have some interesting data here.
So it's not all just anecdotes from people
running the Firefox beta from December 21 from 2018
to January 24, so about a month of data.
There was 18 million prompts shown.
And these are just people on the beta.
And not even 3% were accepted.
It's negative in the freedom dimension.
Not even 3%?
Ouch.
Not even 3%?
I know, right?
That's devastating.
18 million prompts and not even 3% of them were accepted.
It's devastating.
That doesn't work.
Wow.
Well, I mean, there's always architects
in the chat room suggestion.
Break it all, just turn off JavaScript.
And that's one way.
Yeah, there you go.
That'll solve the problem.
Just actually, you know what else you could do?
You could switch everything to AMP.
That'll solve the problem too.
Problem solved with AMP, everybody.
Now, here's something else that Mozilla's doing
that maybe one day could surplant,
although it's probably not likely,
but could become at least a competitive alternative
to Electron if I'm not misreading this.
And Mozilla's bringing up the point
that with WebAssembly now becoming a thing
and all major browsers supporting it,
more and more folks are trying to develop applications
beyond the browser.
They say doing that provides a fast, scalable, and secure way
to run the same code across all your machines.
But we have yet to have a solid foundation
in which to build upon.
Code outside of a browser needs a way
to talk to the system, a system interface.
And the WebAssembly platform doesn't have that yet.
Now, Mozilla has been working on a runtime for the desktop
that allows you to run WebAssembly applications
as a desktop application.
But you needed, I guess, a standard to pull this off.
And that seems to be what they're coming out
with is this WASI standard.
Am I getting that right, Wes, W-A-S-I?
There you go, W-A-S-I.
Not wasabi, but WASI.
That might taste better.
Yeah, that might.
What are they trying to accomplish here?
They're exploiting the fact that we've made WebAssembly,
and it doesn't run on real hardware, right?
We just described this abstract machine
that we had already worked out how to run
and are actively working out how to run fast in our browsers.
So this is just all the little extra details
you need when you want to think, OK, well,
this could probably run a lot of other places, too.
Yeah, much like we do with Electron,
only using the Chrome runtime, essentially.
Or it's the reverse of Java applets and Java and network.
Yeah.
Yeah, it's nice to see Mozilla doing these kinds of things.
Yeah, let's figure out a way to do this.
They have been actively involved in all kinds
of great WebAssembly stuff.
And actually, they've got some of the best documentation.
If you're getting started with WebAssembly,
you want to learn about some of the concepts.
Yeah.
We did also recently see Lucet, which
is the Fastly Corporation's WebAssembly runtime.
And there's a couple other open source projects.
So there's clearly a lot of stuff going on.
It's nice to have a standard now early in the process
so we don't end up with a whole bunch of divergent runtimes.
WebAssembly is coming.
And it's going to come to your desktop, too.
And maybe that'd be good.
Maybe it'll make a good competitor to Electron
and keep both of them very, I guess,
actively engaged in pushing the boundaries.
I mean, yeah, one thing's for sure.
It's rare that we see things fade away.
We just have more things on our systems.
Yeah.
Yeah, things don't really go away anymore.
No.
Yeah.
They're too big to fail after a certain point.
Now, there's one last thing that Mozilla along with,
I think, the folks behind Vorbis are working on.
It's a Mozilla employee who was involved
with the Speaks codec and also Opus.
So this guy really knows his stuff.
Those are some credentials.
And they're working on LPCnet.
This is a codec in which they can transmit audio
in as little as 1.6 kilobytes.
Wow.
They're doing this with essentially a synthesis.
So instead of actually capturing the entire audio waveform,
it's almost like taking audio.
This is a super rough layman translation.
But it's almost like taking it and making it an SVG.
Yeah, you're trying to capture just enough detail
to recreate it, not perfectly, but be
able to describe it in a way that's good enough.
We have Mr. Bacon here, Mr. Cheese Bacon,
now part of our team.
Cheese, I'm going to butcher this.
So I want you to kind of help explain this to me.
But an SVG, it's a vector graphic which is scalable.
And so it's like the math for the image.
And then it renders the final image.
And you can rescale it to any size you want.
You can transmit a tiny SVG, but you
could have a huge image that you produce from it, correct?
Correct.
So I mean, it's a vector image.
And it stands for scalable vector graphic.
And it'll allow you to support transparencies with it.
Once you've created the SVG, you can open it up in a text editor
and edit it.
You can actually add like early animation type work to it.
SVGs are really cool.
And you can reduce their size.
And since they're vector graphics, of course,
they can be scaled infinitely.
So if you needed to use that same SVG on a billboard
or the side of an 18-wheeler or wherever
you needed to use that image, you
could scale it without losing resolution
or having an issue where it looked
aliased or something pixelated or something like that.
Exactly.
Now, I admit my analogy is weak here.
But now imagine taking that same concept
and applying it to audio, where you take the data
and you vectorize it.
And then you can re-synthesize it later on.
And you can improve the recreation process
down the road.
You can have better and better models and better and better
ways to do speech.
They're getting there now.
They're getting there to the sense
that you almost can recreate speech using,
guess what, machine learning, to have something
that sounds very accurate.
So I'm going to play you a demo here.
Here is the old technology using a great codec.
So it's still really good compression.
But it's old synthesis.
The birch canoe slid on the smooth plex,
glue the sheet to the dark blue background.
Now, it sounds like a speak and spell a little bit.
But the one thing you have to give it
is it's like two kilobits of audio a second.
It sounds like a really bad phone call.
But it is kind of understandable.
And you could use that to get speech
in the worst case connections, which is really impressive.
Because that brings in all kinds of packet radio possibly.
I don't know, all kinds of solutions.
Here is what this LPCNet project that's
getting contributed by Mozilla employee that
is bringing this further using the machine learning I just
talked about.
This is their more current sample now.
Add the sum to the product of these three.
Thieves who rob friends deserve jail.
Now, I don't know what that is about.
But that's just 1.6 kilobits of data.
Wow, that's pretty tiny.
And it sounds really, I mean, it's not bad.
It's totally understandable.
Like, I'm going to play just a second.
Add the sum to the product of these three.
That is much better than.
The birch canoe slid on the smooth plex.
Right, that's a much better.
And you could see where later on the decoder and the thing
that reconstitutes the speech could get much, much better
to the point where it could sound like a podcaster.
Oh, yes.
Honestly, those are pretty good.
Right now, and it's kind of interesting,
they've done a great job of explaining it.
All the stuff that most people are familiar with
are called waveform coders.
And then this is a vocoder.
Yeah.
And waveform coders are stuff like Opus
and all the stuff you might use for music.
Everything we're familiar, right?
And they basically try to take the natural waveform that
is sound and transcribe that as closely as possible
and capture all of that detail.
Now, maybe with MP3, you start throwing some of that away.
But essentially, you're recreating the waveform, right?
Vocoders, on the other hand, as you said,
they're really synthesizers.
They try to, like, in this mode, you have the encoder.
And it tries to grab a bunch of high-level stuff,
like pitch, shape of the vocal tract.
You have this model that you fill parameters for.
So instead of trying to actually track the waveform,
it's more like describing, you could
think of a really high-level version
would be a transcript and then feeding a transcript back.
Yeah.
Right?
But this is a little lower level because it's
trying to recreate it at a more accurate level with tone
and character of voice.
That's basically what they're doing here.
And I think that demo really shows how you can hear it.
The difference is now that machine learning
has built some high-quality synthesis algorithms,
they can apply that here.
Before, all this still worked.
Vocoders had been around since the 70s.
Right.
They just sucked.
Yeah, they sure did.
They were speak and spell.
And now they're getting kind of legitimate.
It's for people who like to mess with computers.
So the folks over at NGINX are protesting a little bit
too much.
But they're getting a lot of heat.
We had a pretty mild reaction to the NGINX purchase.
Yeah, I thought so.
You know, I didn't get Wimpy's hot take on it.
I don't know, Wimpy, did you have any hot take reactions?
First thoughts?
What are other really zippy terms people
use for immediate reactions?
What are your first reactions to NGINX
getting purchased by F5?
Huge controversy, Wimpy?
No, I think it speaks to the success of NGINX
and how it dominates that space now.
So I think congratulations to NGINX for all of the hard work
that a lot of the people there have put in.
And I hope they're going to benefit from that acquisition.
I'm sure some of them will be getting some kickbacks.
And I think it will cement NGINX's position
in the market as the sort of Swiss army knife of proxying,
reverse proxying, and fast serving of assets.
Right, well said.
Unfortunately, apparently you are a completely unreasonable
shill, according to the open source community,
because they are upset.
But NGINX have had the open source
and pro version of NGINX for years already.
So that open core model is being established for some time,
just because it's changed ownership.
I mean, what does that change?
Nothing.
I don't think anyone was really thinking
about the company behind it before.
And suddenly, suddenly we are.
It's the license, stupid.
I mean, that really should be the tagline there.
But NGINX writes on their blog, we've heard it loud and clear.
We need to continue to demonstrate our commitment
to open source.
They go on to say, let me take a moment to be very explicit.
F5 is committed to not only supporting
the development of NGINX, the open source edition,
as well as other NGINX open source projects,
but also increasing our investment over time.
Just to repeat that, F5 is committed
to NGINX's open source technologies, developers,
and community.
I swear.
OK, I might have added that last part.
But they're really hitting this hard.
They are.
And to make an interesting point here,
we're also seeing increased acceptance
of mainstream companies as stewards
of open source technologies.
Microsoft bought GitHub, VMware bought Heptio,
and IBM bought Red Hat.
The assumption that big fish eats little fish
means big fish kills open source project is outdated thinking.
Going back to your point, Wimpy, that's
the result of success to a degree.
As they become more successful, large market players
scoop them up.
And also, before the acquisition, the pro version of NGINX
provided the funding that organization needed,
such that the open core version of NGINX
was available as open source to all of us,
so that your website and my website and millions of others
are able to run with a well-supported, cutting edge
web server and provide all sorts of nifty stuff
like object caching.
And if you are at web scale, you're
obviously going to be making some money.
And those pro features you can buy into
are probably of importance to you
and not so important to the likes of you and I.
So I'm quite happy for these organizations
to be producing open source software
and have a markup on an enterprise version that
means that they can continue to fund the open source stuff.
Yeah.
In fact, this live stream we're doing
as we record the show right now is
being powered by NGINX in multiple different ways.
It is a Swiss Army knife of tools.
And F5 is savvy for scooping it up.
It shows that they're watching the market
and they understand where there's overlap there.
So there are moments where it's a little uncomfortable.
I think that's particularly in open core.
I think it's hard because the test is how engaged are they
with the open source project?
Because if they're just making money off proprietary features
and not developing, then just dropping
like a GZIP or a ZIP file somewhere,
OK, there we've complied with the license has technically
been complied with.
So it can be hard, I think, especially as an outsider.
But I don't think that's ever been the NGINX community.
No, as NGINX were transitioning to their pro model,
it used to be the case that you had to compile your modules
into the NGINX binary at build time.
And they went to great lengths to make
that a modular architecture as they moved to the pro model
so that they could continue to develop
the core of NGINX independently of the modules that make up
the pro enterprise version.
So they've demonstrated in the past
that they're committed to maintaining the open source
roots of the project.
Yeah, I think really the solution here
is for NGINX to have said nothing.
Just look at the absolute outrage
over the GitHub purchase.
And they just, as everybody was doing their mass exodus
to GitLab, they just stayed cool.
They didn't say anything.
While GitLab was doing blog post after blog post
about how to migrate and tweeting like crazy,
they just sat there and didn't say anything.
And now nobody talks about it.
It's like, it's going to happen.
And by the time the deal is finalized,
it'll be like, oh, yeah, right, that, OK.
And the only thing that can really prove their point
is what's going to happen in the future
and their continued involvement.
Yeah, they say that here in the blog post.
And it really, that is, I think, your and my overall opinion
on these big acquisitions is sit back and see what happens.
Just watch what happens, and then make your judgment then.
And the great thing about open source
is it comes back to that license, stupid.
You've got that license.
So if you don't like what they're doing, you're good to go.
So let's talk to Mr. Cassidy, who joins us
from the elementary project, who just had one of those,
like, it had to be a calculated decision, Cassidy, I imagine.
Like, do we do an April Fools announcement or not?
Like, that must have been, right there, a hard call.
Yeah, we've done April Fools in the past, and they've been fun.
But this time we had some actual news,
and we thought, why not just release that on April 1st?
You know, have some fun.
So you guys are announcing that the App Center
will be using Flatpak.
And I think it makes sense, you know, local repository
that you curate yourself and all of that.
I guess my first thought is, why is this an announcement,
in a sense, and not to take away from it,
but why is this an announcement to begin with?
And walk me back from that.
Like, why does this matter?
How will this impact users and all of that?
Yeah, so I mean, ever since these newer packaging formats
started showing up with containerization
and sandboxing, people have been asking elementary,
you know, when are you going to jump on board?
When are you going to jump on this bandwagon?
And we've taken the approach of being, you know, kind of slower,
methodical, intentional about not just jumping
on a bandwagon.
And to your credit, I'd say I've seen the project attend events
from both communities, from the Flatpak and Snap community.
So you've been active in both communities completely.
Exactly, yeah.
We've been kind of surveying the technologies,
watching them really closely and engaging with people,
but not just jumping on a bandwagon.
So the difference now is that we've been, you know,
since about 2015, we've been working on these technologies
and talking to people.
And I think Flatpak is really in a place
now where it's getting more mature.
We understand it a lot better, and we're
starting to see those advantages.
We're also starting to grow with App Center
to a point where the advantages of a format like Flatpak
would benefit both us and our users.
So it really just is the right time
to jump onto one of these new formats.
And after a lot of back and forth and discussion
with both our first party developers and our third party
developers and the people who are making these formats
themselves, we decided that Flatpak was most closely
aligned to our needs.
So why not just do like a little quiet sneaky implementation
on the back end?
Why do the whole announcement about it?
I think we've started to actually do
the sneaky implementation on the back end in a few places.
There's a branch of App Center that supports Flatpak already.
And people are going to start seeing those things
and start talking.
So we might as well get out in front of it
and really be intentional about the message around it.
I was surprised because I wasn't sure how you felt as a project
that it seemed like some of the what would be otherwise
kind of like elementary OS exclusives
were getting Flatpacked up by the community
and spread around other distros.
And it's kind of like at one point,
that's great because it means more open source software.
Native applications on the desktop
are available to everybody.
But in another way, it's not as great
because these applications are designed
to be part of a larger environment.
And they kind of feel out of place on other desktops.
And I feel like it doesn't do a full service
to the complete elementary OS experience.
And not to mention, you get like these probably crazy bug
reports from somebody on Fedora Rawhide
that's trying to get somebody who's
making an elementary OS app to fix their problem.
So I thought maybe as a project, you guys were not
a big fan of that arrangement.
There's kind of three aspects of these newer containerized
formats like Flatpack.
There's the packaging itself, just like Debian packaging
or whatever.
There's the containerization or sandboxing.
And then there's the cross-platform aspect.
We're really adopting that first of three elements to start.
We're just adopting it as a packaging format to start.
And that means it should be really seamless.
Nobody should really notice any differences on elementary OS.
The sandboxing part is the reason we're adopting it.
It's the better security and privacy.
We've been doing a lot of work on that front.
And that's the kind of future we're moving towards,
that A, it'll make app reviews easier on the app center side.
And B, it also just makes users' devices more secure
and respecting their privacy more.
The third aspect, the cross-platform part,
isn't really a concern or a driving factor
at all for us with elementary.
It's neat.
It's cool.
It's a thing that exists there.
But the cross-platform part, while it's
very loudly one of the primary reasons for these formats
to exist, it's not actually one of the reasons
we're adopting it or one of the things we're really
investing time in.
Yeah.
Yeah, I understand.
I think there's probably some advantage, too,
that Flatpack is very closely tracking GNOME features
and GTK features, which elementary OS uses a lot of GTK.
So there's some advantages there, right,
when they make a change that affects the overall GTK
ecosystem that is overall maybe something very nice,
like a new way to access a device or something like that.
You, as a project, automatically get to take advantage of that.
Exactly.
Yeah, it's really closely aligned
with the stack of technologies we use.
As we work more and more with folks that work on GNOME,
we see projects like GTK actually
get better because there's multiple projects using GTK.
If GTK was only used by GNOME, it
might be a little bit restricted in how it can be used.
But because you have XFCE and elementary
and other desktops that are using GTK, it makes GTK better.
We feel the same about Flatpack.
It's not technically a GNOME project,
but a lot of people from GNOME are working on it.
And so by having yet another project
throw their weight behind it, it will
make the technology itself better as well.
So this is going to be something you guys work on probably
for a period of time because it sounds like it may not even
land as the default way to package software for Juno
itself.
So this could be something that takes a little while
to implement.
Right, yeah.
So today, nothing is changing as far
as how apps are being developed and distributed
on elementary OS.
It's still using the App Center dashboard
with the Debian formatting.
But we wanted to get this out there
to kind of let our developer community know what's coming
and start to get feedback from them
as we work through these issues.
So there's two main things we have to do.
We have to implement it in App Center itself, the client side
app, which work is progressing there really well.
And then we also have to implement it on the back end,
what we call App Center dashboard, where developers
actually submit their applications.
That work hasn't started yet, but we're
starting to look at that and kind of investigate
how we're going to do that.
So it's going to be a long process,
and it may not even come to Juno itself as an update.
We're still deciding how that migration will work.
But we wanted to get the news out there for our app developers
to know what's coming.
So I guess my last question would really be with this.
Is there anything in this that really inherently
prevents elementary OS from continuing to just use snaps
if the user wants to install a snap themselves?
No, of course not.
We're deciding to use Flatpak for the out-of-box experience
of App Center and elementary OS.
Developers or users are always free to do whatever
they want on their own systems.
They can install Snap, or they can install Debs,
or they can sideload whatever they can compile from tarballs.
So whatever the user wants to do, it'll still work.
This is just about the supported default experience
for Map Center.
Right, and in a sense, it's an implementation detail, isn't it?
It's really not a user-facing concern.
Exactly, yeah.
If we do our job correctly, then most users
shouldn't even really realize what's going on under the hood.
Yeah, and it makes total sense.
You want your own repo.
You want to curate it yourselves.
You've got your own App Center.
You want to publish applications for that.
It totally makes sense.
And it seems like you guys are thinking a lot about security,
too, which I really appreciate, especially
as this is the distro I recommend to friends and family.
It does seem like a particularly good match in that sense,
the same abstractions that are trying
to fight the same problems.
Yeah, yeah.
Exactly.
Well, thanks, Cassie.
Thanks for joining us and explaining it to us.
And we'll have a link to the entire Medium post, which
goes into a lot more details.
Was there anything else you wanted
to mention to make clear before we continue on, or is that?
Are we good?
I'm probably going to write up a follow-up post about this.
But we've been getting a lot of great feedback on social media,
people having concerns about, oh, I've
had issues with accessing external devices
with Flatpaks, or I've had issues with app sizes being
huge or downloading giant SDKs with Flatpaks.
And I do want to clarify that the way we're
implementing Flatpak will be a very, very specific
and considered implementation.
So to start, we're going to make sure that those permissions can
be very permissive, because we already review and curate
and test all apps that are submitted to App Center.
So we don't have to have the locked down permissions
to start that might break things like external devices.
So to start, there shouldn't be any big difference there
as far as issues that other people have seen
with other Flatpak implementations and things
like app sizes.
Similarly, we'll have a specific SDK
that developers must target when they submit to App Center.
So it's not like you'll download the entire GNOME
3.22 SDK for one app.
It'll use the SDK that's already installed on the system,
so it won't have a 2 gig download or whatever,
like people have seen with a lot of things on Flathub.
So Flatpak is just a technology.
It has lots of different implementations,
and we're being really careful with our implementation
to make sure that it solves these issues.
You're going to get it right, it sounds like.
That's a very good detail, because it's
a totally separate implementation.
So if you might have had a bad experience,
that's no reason to write off all the hard work
you guys are doing.
Yeah, all right.
Well, Cassidy, thank you very much.
Cassidy from the Elementary OS Project,
check out the link in the show notes.
It was good to have you with us.
Thank you, sir.
You're welcome to stick around for the show.
We'll just cover a couple more community news stories
before we get out of here.
First up, the Raspberry Pi Foundation.
They're actually not actually positive,
because there's two different branches.
So I don't know if this is the foundation or not,
but Raspberry Pi folk have an official keyboard and mouse
that is available for sale.
And one of the selling pitches of the keyboard,
besides its small size, is it's integrated with a USB hub.
I mean, you're going to need one of those anyway, right?
There's no way your laptop has anywhere enough ports.
Mine, I mean, actually, this one's pretty good.
Yeah, or Raspberry Pi.
Yeah, I mean, whatever device you're plugging into.
I was just immediately thinking that it looks so nice
that I would probably be using it not just on my Pis,
but on all my systems.
Yeah, you could.
It's just a cute little three-button scroll wheel
optical device with Raspberry Pi logos for the mouse.
It's a little USB cable, but it's white and red,
which is a cute little color scheme.
Yeah, it looks nice.
And then just like a pretty standard 78-key matrix
for the keyboard, which you probably would see on a laptop
keyboard.
What's interesting, though, is they've
worked on some custom firmware so that hopefully,
with a little magic, it can auto-detect
what country the keyboard is configured for
and just sort of work right.
So you'll be able to get a keyboard that's
manufactured in a simple, easy way that will work wherever
you are in the world.
Yeah, it's kind of worth reading the Raspberry Pi blog
post in the show notes, because they
talk about the care they went to to make it a good keyboard
experience.
And they're like, this turned out
to be a little more challenging than we expected, turns out.
The Raspberry Pi official keyboard and mouse
are available now from approved resellers.
And I decided to do it.
I got the keyboard.
The mouse wasn't available from the place I wanted to buy from.
So I got the keyboard.
I ordered it this morning.
I'm going to be curious to try it.
It wasn't bad.
It was like, I think it was like maybe after shipping and tax
and everything, it was like $27.
Yeah, that's not bad.
No.
And the mouse is something like around $20 US.
And maybe I'll pick it up later, but I
was thinking about doing a segment about a cheap Amazon
LCD HDMI screen and using this and just
like the cheap, easy, bare bones Raspberry Pi setup that
makes it easy to just bang out Raspberry Pi projects,
like a segment around that.
And so I thought, you know, I was actually,
literally when I was thinking about that segment,
I was like, I don't have a great keyboard.
And then, I'm not even joking, I woke up
and I saw this announcement.
So I thought, maybe it was a sign I should try this.
That or it's a good excuse to order a $20, $30 keyboard.
So I'll let you know what I think about it.
Also, something that I thought was kind of neat
is I think this might have been sent into the show too.
Make Pro Audio.
This is a DIY kit that you can get for the Raspberry Pi.
And you build modules around it, turn it
into a professional audio.
I'll just leave in the show notes.
We don't need to go into it a lot.
I think the thing that's really cool about it,
it's a company that's well known for make your own audio
gear.
The Make Pro Audio company, that's what they're known for.
And they have all kinds of modules
they've already built for other things.
So they're sort of known for creating these platforms
to build very professional audio kits around.
And they're doing a build your own audio gear
platform for the Raspberry Pi.
Right.
So you already have a huge access
to just a huge number of modules.
And now they have the code needed
to fit the Raspberry Pi into that existing platform.
Yeah.
And it snaps in there.
And then you've got a fancy Linux computer controlling
all that kind of stuff.
It's really cool.
It's really neat.
Well, go check it out.
For those of you who care, go check it out.
It'll be in the show notes.
I already want a little Raspberry Pi mixer
for my home studio closet.
I'm not going to lie.
Yeah.
I know, right?
I know.
You and I geek out on this kind of stuff.
Well, our last bit of community news for this week
is from our own Mr. Martin Wimperis in the mumble room
right now.
And it is Ubuntu Mate 1804 Beta 1.
So it's the LTS for Raspberry Pi.
It's a beta pre-release.
So it's hot off the presses right now.
It's a great opportunity to give Martin your feedback.
And Wimpy, you know what I'm most excited about
is that hardware-accelerated VLC.
That's huge.
You like that, do you?
I like that a lot.
I mean, I thought maybe you would get there.
But when we were kind of chatting off the show,
my expectations had been set for this maybe not
to happen in this release.
And then I see the announcement, and you nailed it.
So I'm curious how we went from, I
don't think it's going to happen, to, oh, by the way,
it's a feature now.
We were rather fortunate in, as I was entering the final stages
of preparing these images, the Raspberry Pi Foundation dropped
patches for current versions of VLC and some other software,
which made it possible for me to enable this.
So all down to the work that they're doing, yeah.
Open source is amazing.
Isn't it?
That is so great.
Jeez.
So not only VLC, but FFmpeg as well.
So kind of the standout here is maybe now the web browser.
Is that right?
So I'm a fair way along in doing that.
I actually have a build of Chromium
that is fully accelerated for the Raspberry Pi,
again, because literally this weekend, the Raspberry Pi
Foundation dropped patches for current versions of Chromium.
Now, the issue that I have is a rather complicated one
in that the builders for ARM in Launchpad are based on ARM64.
And obviously, the Raspberry Pi is a 32-bit ARM.
And the cross-build environment is
leaking a bit of the 64-bit nature of the host underneath.
And I'm running into a few issues
where it's picking up, oh, this should be 64-bit
when actually it's 32-bit.
So I'm just having to patch my way through that.
But the problem is Chromium takes about 26 hours
to build on ARM, even in Launchpad.
So my iteration cycle is currently around 11 hours
to find out whether or not my fixes are working.
So I had a failure condition at about four hours and a half,
and then at seven and a half hours.
And now the current problem I'm fighting
is about 11 and a half hours into the build.
So I'm slowly getting there.
But I hope, maybe not for release,
but it'll certainly be a post-install option,
an accelerated version of Chromium.
I'd like to have it baked in, but we'll just
have to see how it goes.
Like I say, the iteration time is pretty long.
That is brutal.
So even more kudos to you for fighting through that.
I love that ffmpeg and VLC at least got this.
Because if you think about it, this is the 1804 LTS.
So this could be running on some Pi's for a while.
This could stick around for a while.
So it's really nice to see that.
I think the other thing that's really clever
that you've included in this release is Steam Link.
How'd you get that idea?
Well, yeah, so that was obviously
made available for the Raspberry Pi
shortly after Valve discontinued the hardware
devices of Steam Link.
And it just occurred to me that that is a really good use
case for a Raspberry Pi to create a head-end unit
for your Steam streaming.
So yeah, I put a bit of work in there.
This is actually the opposite kind of problem,
where I had to port older libraries to the system
and not have them tread on the newer versions that are in 1804.
So there was a little bit of delicate refactoring
of some packages to provide some older versions of things
that sit alongside current versions of things.
But yeah, I'm pretty happy with that.
Something I would like people to test,
I can't obviously fix Steam Link itself,
because that's all built from upstream binary blobs.
I can't recompile it, but I'd certainly
appreciate some feedback on how it's working.
You know what strikes me about creating a distribution
for the Raspberry Pi?
Most distros have to be compatible with almost all
of the x86 machines in the market, in theory.
You expect that if it's an x86 machine with standard hardware,
a distro will run on it.
But a distribution built for the Raspberry Pi,
there's really only like four or five, maybe three,
devices you should expect it to run really well on
that you have to test on.
I'm not trying to say it's easy.
I'm saying it is an opportunity.
If this was a full-time job, and you
had a team of developers, you could
buy each one of them, the entire range of Raspberry Pis.
They could do all of their quality assurance testing
on that.
They could stamp it with their quality seal of approval
and say, Mr. Wimpy, we have tested on every single Raspberry
Pi.
It is a manageable, scopable problem.
And that's interesting.
I have all four of the Raspberry Pis that this will run on.
And it's not an expensive outlay to buy all four of them.
It's under $100 to own all four of those computers.
But unlike x86, everything about this is extremely bespoke.
It's got its own bootloader.
It's got its own custom kernel.
It's got its own bespoke way of enabling Bluetooth and Wi-Fi.
It's got its own considerations regarding GPIO.
Then you've got things like Python module support,
adding things like USB boot support, frame buffer support.
And then we've got all that we've
talked about with hardware acceleration.
And then you have people who have some expectation of what
you do with a Raspberry Pi because of Raspbian
and the tools that exist in Raspbian.
And if those tools are not available in a Raspberry Pi
distro, then that is alien because a lot of the time,
people using the Raspberry Pi don't think of themselves
as Linux users.
They think of themselves as Raspberry Pi users.
So you have to then make sure that those tools are available
and ported because there are, in fact,
considerable differences between Raspbian and Ubuntu.
So there's a tool called RaspiConfig
that a lot of people will be familiar with.
And I've ported that from Raspbian to Ubuntu
and catered for the differences that exist
between the two platforms.
Yeah, it is not as easy as I just made it sound.
But it's a fascinating, it almost,
Billy, doesn't it kind of remind you of the Android versus iOS
development paradigm?
Yeah, exactly.
Maybe a little bit lesser because on Android,
we're working with Java, but definitely.
Yeah, and Billy does a little Android development.
And he says sometimes, he feels a little jealous
when you look over at the iOS side.
There's less devices to target.
Yeah, it's not just a big old mess.
Imagine if the Raspberry Pi was much, much, much, much larger.
And it was maybe much more mainstream.
Maybe that's where the bulk of the users were.
So it wasn't so bespoke.
I don't know if that'd be a great future.
But in a way, it would be less fragmentation.
I think it's a really great device to target.
I mean, I think they announced just recently they've
sold 25 million Raspberry Pi.
Now, I don't know how many of those
are the Raspberry Pi 2, 3, 3 Plus, and 3a Plus.
But I imagine it's probably the lion's share of those.
So it's a large audience to hit.
So it's a great way to do this.
And the one thing I've done this time, of course,
we've got 32-bit ARM and 64-bit ARM images.
Now, there's some caveats with the 64-bit version.
But it does mean that now, on an expensive device,
if you want to create projects to target Ubuntu on ARM,
you've now got a ubiquitous platform
that you can now test your applications on 32-bit ARM
and 64-bit ARM.
They're good enough for that.
The 64-bit systems are missing pretty much all
of this hardware acceleration that we've
discussed because it's simply not available for 64-bit ARM.
It's really, I mean, it's amazing that all of this
works as well as it does on such a different environment.
I know.
It does feel like it's moon computers.
It's a totally different system.
And we're making contact.
And they're building the spaceships
to get us there right now.
Well, I think it's looking like a solid release.
It's in beta right now.
So folks, go give it a try.
And it's just one SD card flash away.
So why not?
That's one of the things I think that makes the Raspberry Pi so
approachable is you can get a fairly reasonably priced SD
card, throw an image on there, and try it and swap it out.
Or use that fancy new USB boot.
You know what it's like?
It's like floppy disk.
Back in the day, I would have my entire operating system
on a floppy disk.
And I would have custom bespoke floppy disk
for different games with optimized environments.
And I would boot from a floppy drive.
And now we're doing it with SD cards and Raspberry Pis.
And I just now made that connection.
Why is it taking me so long to realize
these are floppy disks all over again?
Now, where can we find a floppy disk
reader for the Raspberry Pi?
That's my next question.
Yeah, well, you know what?
It's got to be out there.
There's a floppy disk that has an SD card.
It's like an SD card adapter, like the floppy.
That's got to be a thing.
That has got to be a thing.
I'm not trying to get all the secrets out of System76.
But I'm wondering if Emma would tell us, on a scale of 1 to 10,
maybe.
I don't know.
If there's any kind of hint, maybe,
that System76 has looked at these ARM devices
and thought, maybe there's something here we could ship.
Maybe there's a product out of this.
What can you reveal, Emma?
I really don't think that they have been
looking into that at all.
So no all-pink Raspberry Pi?
No ARM laptop or something like that?
I mean, it's possible.
But I haven't been part of any of the discussions.
I know the ARM server is our biggest performer
with the ARM market.
So you do sell an ARM product, then, I guess,
in the server space.
Yeah.
It's a bit of a beast, too, if I recall.
Yes, the ibex.
Yeah.
Are you looking it up right now?
Yeah, Wes is going over there right now to go check it out.
I'm going to go over to System76 real quick.
Yeah.
As you do, you know.
I don't know what I'd ever use an ARM server for,
but I wish I had a use for it.
It just seems super cool.
I guess a NAS.
I could build a NAS out of an ARM server.
Well, I'm going to hold out.
I see a future one day where there
is a laser-engraved System76 aluminum laptop with an ARM.
I don't know why I care, actually.
I think x86 is doing great.
Long live x86, I say.
Hey, long live x86.
All right, a little housekeeping.
Some big things to talk about, including some awards
and whatnot coming down the pipe.
Award shows.
Did you know that the open source community
has award shows?
I did not.
Not only does it have award shows,
apparently it's had them for years.
I probably even talked about them on the show before.
God, what is the matter with me?
Clearly, you place a very high value on awards.
Yeah.
I really, I really, yeah, OK.
Anyways, but you know, some people do.
Some people do, and it's totally fine.
Are we going to have a viewing party here at the studio?
That's what you're saying?
Oh, yeah.
You know what?
If they live stream it, we should.
I'll tell you what.
If they live stream it, that would actually be pretty cool.
But we do have a couple of big things to talk about.
Wes just got done with an Ansible study group.
Just did one before the show.
Oh, yeah, yeah.
With demos and all.
And he and Elle went through the basics of Ansible,
described a little about use cases of Ansible,
and then you even gave a demonstration.
A nice one, too.
A nice, clear, easy to understand demonstration.
A demo, if you will.
And it's done now.
The live stream has concluded, but we
will release that video in the future on the YouTube channel.
Something to look forward to.
We'll have probably a link next week.
In the meantime, if you missed it
and you just prefer to take it, Elle
has now released the Ansible Quick Start course for free,
along with a bunch of other things,
including using Ansible for configuration management
and deployments, Google App Engine Deep Dive,
DevSecOps Essentials.
See, what's so dangerous here is you start with the Ansible
Quick Start, and you get a whole bunch of servers set up.
And then now, since you can configure them with Ansible,
you take all the rest of that free content,
and suddenly you're hooked on the cloud.
I know, that's true, yeah.
PowerShell Core for Linux admins.
You know, I got to admit, I'm just a tiny bit curious.
Like, I kind of am curious.
So we have this community edition thing,
and that's what Elle and I are in charge of.
We release these courses every month.
There's a whole bunch that are always free,
and then there's new ones that get released every month.
Some get turned back to paid only.
But you can sign up for a community account
and go try them out.
It's pretty good.
I'll have a signed-in link in the show notes
for the Ansible ones.
So if you're logged into the platform
and want to go right to the course,
I'll have a link in the show notes.
That works great.
Yeah.
That'd be pretty cool.
So I just want to let you know about that.
So we'll have that posted up on the YouTube channel, Wes's
study group soon.
It'll be a little bit, because we got to encode it,
and that takes a long time.
Just a little post-processing.
We got rid of all of our video computers,
and then all of a sudden, we decided to do a video thing.
So we got to go back into the garage.
No, I'm kidding.
I'm kidding.
It'll just take a little bit.
Now, we also do have these open source awards, the UK Open
Source Awards 2019 in Edinburgh, June 12, 2019.
70 days, 8 hours, 54 minutes, and 15 seconds
from when we record.
The awards event will be at a university,
and you can go there.
There's going to be, I think, a little drink
section, a little show thing.
It's kind of like a show and an event kind of thing.
So there'll be booths and all that kind of stuff, I think,
and as well as awards.
And the nominations are still open as well in five categories
for individuals and organizations
who have, in the last year, shown exceptional initiative
with free software and open source software.
Well, obviously, Wes Payne, you should
get the individual award, company award,
and public sector award.
Yeah, I'm all right with that.
I assume that comes with a free ticket
to the event, which sounds lovely.
But really, there are so many projects
that can fit that bill, so go out and nominate.
Yeah, OK, maybe not.
But I feel like, you know, maybe you could nominate.
Somebody could go and nominate, Wes,
because the nominations are still open, right?
So somebody should nominate him for something.
You saying I haven't done that for myself already?
You know, we do have some stuff up on that GitHub repo.
We do have some stuff.
You know, cheese, while we're still in housekeeping,
we ought to just, like, tease a little bit is the big look
change that's coming, like, within days,
within days as we record this.
Yeah, we're nearing the first rollout phase.
Which means we're, right now, in crunch time.
Cheese, right now, is in crunch mode.
Yeah, I'm working on stuff as we're in the show
right now, actually.
We've just strapped the microphone to his face.
He's still designing with his hands, it's sad.
You're podcasting and designing at the same time, huh?
Well, there's so many, there's so many.
I wish we had an account.
We don't have time to count, but there's maybe
1,000 art assets in total.
Way more than I expected.
There's a ton of stuff out there.
Plus, you know, we're also getting the swag.
Most of those orders have all been placed,
so I think people are going to be happy with that.
Yeah, Linux Fest Northwest way.
You know, and I've had some people asking me, you know,
if I show up or, you know, do I not get the stickers?
Can I not get them?
We do have some stuff in the works, some things in the work
to make those items available to other individuals.
Yeah, initially, they're just going to be at Linux Fest, but.
Sort of a trial run here.
Yeah, down the road, down the road.
It should be available to more people.
Yeah, that's going to be really cool.
Also, along with all of that, we're probably doing too much.
But it's so exciting to have our own designer now.
It's amazing.
She's just the best.
We kind of went crazy.
We also are working on revamping the website a little bit.
Cleaning it up, trying to make it a little faster,
updating the look.
There will be a couple of features
that get removed initially, and then we'll work them back
in a new way.
Stuff like that is coming soon to the website.
It's definitely evolving.
I think people are going to find it's a lot easier
to identify the shows that they like
and they want to listen to.
I think it's going to be, you know,
people have been asking for it.
We've been listening.
I'm here to try and help this all happen.
We got a new look.
The individual show pages will get updated as well
with the new look.
It's a full spectrum new look.
We may start, just to get it right,
we might roll it out in phases.
So you might see it update in a few places,
and then there'll still be some art assets out there
that we haven't gotten to.
And then in a couple of days, we'll get to those.
In a couple of days after that, we'll get to the rest.
But there's so many.
Just today, I was logging into Twitch,
and I'm like, oh yeah, right, Twitch.
We got Twitch.
We got a Twitch art thing we got to do.
And Ustream's got a background for when we're not
streaming that has to get updated.
There's so much stuff.
Because we're doing the network logo.
We're doing everything.
It's very, very exciting.
And of course, nobody likes a logo change.
So give it a little time.
Let it sink in.
I think everyone will find something to like.
Yeah, I hope so.
I think it'll make a lot of sense to people,
the brand change for JB.
And one of the best benefits of this job
is that after I'm done grinding away on this stuff all day,
I can actually go take Linux Academy courses.
That's true.
Yeah, you did that last night, you maniac.
Another free one out there that I really recommend people check
out is the one that Kenny did.
And I think you mentioned it on a previous show, the Linux
operating system fundamentals.
I'm just starting from the very bottom,
basically all of the community courses.
And I'm going to work through that
and hopefully be able to give you guys some feedback on those
as well.
Right on.
Well, come say hi to Cheese, Wes, and myself,
as well as Wimpy and many others at Linux Fest.
And get the new swag items there.
And then we'll get them up in other ways as well.
But that's the housekeeping.
Thank you, everybody.
Now, let's get to some feedback.
This is something that you hear thrown around
in the community a lot.
So I thought it'd be fun to read on the show.
Sigflup writes, and he says, I find
it's a common misconception that compiling programs
makes them run faster than if you
were to install the same program via a binary package.
I personally don't think this is the case,
because compiling something is often
just a mirror of how the package was built
and you produce the same binary for more or less.
Do you think I'm wrong?
Maybe try to change my mind.
I'd like to hear a discussion about compiling things
from source and its advantages.
Thanks, Sigflup.
So what do you say, Wes?
Let's take a first stab at this.
Is there a difference between pulling down a software package
and building it yourself versus the binary package?
I think it all depends on what options you use.
So perhaps depending on your system,
there may be some tunables that they can't
apply in the general case.
And you could have a little bit of a speed up.
And in many cases, there are not.
But I think, actually, yes, Mr. Martin Wimpress,
who's been stuck over in linked library hell,
probably has a lot of thoughts about this.
Yeah, I think you're dead right that the performance
optimizations that build from source distributions tout
are usually because each of the architectures
that you run those distros on have tuned compiler flags
specifically for that architecture.
And you can get, for clever use of each of the options,
you can get a small gain in performance.
But then by aggregation of small margins,
you can get a measurable improvement in performance.
And this is what something like Clear Linux does.
It's a single architecture-focused distro.
It's x86, 64-bit.
So consequently, they can tune that specifically
to Intel CPUs.
And that's why it runs so well on that architecture.
But when you're making a multi-architecture distro,
then you have to be more conservative in the compiler
directives that you set as defaults to make sure
that stuff works reliably across all of your architectures.
And the gains are modest.
But certainly, the rises of Gen 2 past,
it's not quite like it used to be anymore.
And that's, hey, that's me.
Yeah, when I ran Gen 2, it was really
to get access to things that weren't quite mainstream
yet that now every distro does.
And it's not a big deal.
And there's no reason that I needed to build it myself.
But traditionally for me, I've always
built software because I either needed a version that
was newer than the distro shipped.
Yeah, that's a good reason.
Or it's the only way it's distributed.
Or in the past, and when I say past,
it's like the far distant past now.
Because I needed something that maybe distributions
weren't building by default. Maybe
they weren't optimizing for that particular architecture.
Because back then, people were still
shipping packages that were compatible with i386.
It was a long time ago.
And it just seemed like problem solved as time moved on.
That's been my biggest go-to.
I think there's really no performance advantage inherently
to just grabbing the same exact packages in your repo
versus grabbing something off of GitHub and building it.
If it's the same version, same features,
even if you could come up with a few ways
to optimize it in the build, they're
probably imperceptible in the performance of the application.
So there's really no point from a performance standpoint.
Just save yourself the time.
And don't build it if you don't need to.
One other advantage, I'd say, is
sometimes for whatever reason, there's
some types of software that I like
to have in a bin subfolder in my home directory.
And I like to have just certain programs that are just there.
My package manager isn't aware of them.
It's not trying to update them.
It's not reliant on libraries throughout my system.
It's like it lives in this folder.
And sometimes that might be a reason
why I might build something from source if it's simple enough.
Right.
Yeah, you might want to have a whole separate little thing.
Maybe not necessarily all the way into a container or cheroot,
but just a separate little dependency chain.
How often do you build things from source manually these days?
So not like from the AUR or anything like that,
where you actually think, right, here's
a thing I need to go and download a tarball
and compile it from source.
The last thing I tried to build from source
was but, B-U-T-T, the broadcast utility that does ice cast
streams.
Yeah, I think audio stuff ends up
making us both do it a little bit more than otherwise.
Yeah, didn't you just build something recently too?
Yep, totally.
Yeah, so there's some weird esoteric tools here and there.
But otherwise, I would say since the invention of snaps.
Yes, right.
Yeah, I mean, not for distribution.
It's just gotten a lot better, snaps, PPAs,
people just shipping devs.
Yeah, what about you, Whitby?
I mean, it must be different for you.
No, no.
So I've just upgraded from 18.10 to 19.04 today.
So the first thing I noticed is I only had one PPA on my system.
So there was none of that nonsense
to be dealing with post-install.
And also, the PPA in question had a disco release,
and it automatically transitioned.
I'm sorry, did you say?
Everybody's too much to take on.
Sorry, I had to.
But I have got one bit of software
that I compiled from source on my system
right now that I had to rebuild post-upgrade,
and that is Green with Envy, which I love, by the way.
That is one of my favorite bits of software right now.
It is brilliant.
Remind me what Green with Envy does.
For Windows users, this is MSI Afterburner
for NVIDIA GPUs for Linux.
It's so good, and I've used this to really aggressively
overclock my 2080 Ti.
It's amazing.
And that's distributed as source right now?
Well, it's available as a flat pack.
They're working on a snap, and it's available as source.
But because I'd, you might remember some months ago,
talked about writing scripts to do
all of this overclocking stuff, I
wanted to poke around inside it.
So I've been having a play, and there's
a feature I'm working on that I want to send back upstream.
OK, Brent, so when's the last time you, or if ever,
have had to build software on Linux?
Would that be interesting?
Have you ever been forced to try to give it a go before?
Great question.
So I actually used to do it a lot.
Well, I say a lot compared to some of you.
I used to do it sometimes, kind of the same reason as you,
Chris, whenever I'd find some tool that I really
felt that I wanted to try but wasn't available,
either in the repo or something like that.
I thought, wow, this is worth the effort
of jumping down a tunnel or a rabbit hole
that I don't completely understand to try to make it go.
And I'd say 50% of the time I'd get it going.
50% of the time I wouldn't, but it'd be many, many hours.
And I was like, ugh.
You never know how that.configure is going to go.
Yeah, these days I just sort of cringe whenever I see
I need to do that, and I just look away and try something
else.
But I would say that for the tools
that I really need most of the time,
I never have to do it anymore, or even think about it.
So we've come a long way.
Yeah, I do the math.
I'll be honest, I've probably just been like,
I've noped out now a few times.
I've probably noped out a couple of times in the last year,
but it's only been a couple of times.
I do think sometimes, at least audio stuff stands out,
but any time you have that thing,
it's kind of like a superpower.
You perform the incantation, and then at the end,
the software worked.
Well, maybe.
I think that's why people like to build their own kernels.
That's like the ultimate.
Yeah, you get to customized options,
and it can be a good way to start learning stuff, right?
There is that.
But that's a pretty niche case.
That's not, hmm, no.
It's probably not, not really.
Everybody could probably, if you don't do it very often,
why not try it?
Why not see it?
That's probably something we could do more of.
We have such ubiquitous access to all of these great,
from complex to simple, open source applications,
and that's such an easy way to learn that we kind of just
avoid now.
Even if you don't intend to use that as a way
to manage software, why not give it a go and just to learn it?
And our operating systems and the culture behind it
make it easy to do so, right?
You don't have to go set up some crazy Windows development
environment with proprietary compilers.
It's all there in just a regular package way.
I'll tell you, I went from kind of like,
I understood the concept of kernel modules
and proprietary modules that link to the kernel.
I got that.
But it's nothing like actually building your own kernel
where you're choosing which modules are build versus not
and truly understanding really how this works
and how you can have stuff just built into the kernel
because it's free software, so you can just build it right in.
Going through the process of building your own kernel
and getting it to boot and creating an image out of it
and all of that and updating grub,
it's a very educational process.
And there's so much documentation on how to do it
that it's probably worth doing in a controlled environment,
maybe like in a VM or on a spare system you don't need.
Yeah, that's the way to do it.
I used to do it on my main computer.
It's like car maintenance, but where
you can afford a practice car.
Yeah, that's probably true.
It probably is probably the same advice
you could give to maintaining your own vehicle.
All right, well, you know what?
I think that's probably a good way to leave it right there.
If you want to get your question into the show
and have us discuss it, go to linuxunplug.com slash contact
and send it in.
Let us know.
We'd love to hear it and kick it around
on a future episode of The Unplugged Program.
That's linuxunplug.com slash contact.
You'll also find links to everything
we talked about today at slash 295
as well as in your podcast catcher.
And you can subscribe to future episodes of The Unplugged
Program on that page as well.
We've got links all over that site.
Everywhere.
Well, you know, I got to say, I really
enjoyed the last TechSnap.
Aw, thank you.
You guys, killing it.
Killing it.
Ways that people could attack you in the supply chain.
Like, things I never even thought about.
Basically everywhere.
Yeah, it was a little hard to sleep that night.
Yeah, don't listen if you're overly scared,
but do go check it out, TechSnap.systems.
Also, the Ubuntu podcast, rumor has it, may be returning soon.
Oh, boy.
I don't know.
I don't know, I would just make sure I'm
subscribed to the Ubuntu podcast right now.
That's what I'm saying.
I'd make sure you do that this week.
Yeah.
Yeah, I'd just say that's a good idea.
Just make sure you're subscribed to Ubuntu podcast.
Thank you for joining us, Wimpy.
Now, thank you all for making it.
We appreciate it very much.
I encourage you to join us live over jblive.tv.
We do it on a Tuesday.
Go to jubilabroadcasting.com slash calendar
for your time zone.
See you then.
And we'll see you next time.
Next Tuesday!
I mean, I don't want to disappoint.
All right, now we've got to pick our title, jbtitles.com.
Thank you, guys.
Great show.
Really enjoyed chatting with everybody.
Look at that huge Mumble Room still there.
Amazing.
You guys even stuck around for the whole show.
And the post-show.
So what should we call this thing?
jbtitles.com.
Everybody go vote.
In the meantime, Mr. Bacon has a little community news
to share with the class.
Oh, yeah, yeah, yeah.
So let me jump back here.
Mr. Lonnie Webb, one of our community members,
has a Kickstarter going right now called Killing Wryth One.
And I could drop that link in the IRC here shortly,
or we'll also put it in the show notes.
Right now, basically, he's doing a comic.
His goal is $750.
He's at 59.
He has 28 days to go.
So if we could go over there and give him some love,
I'm sure he'd appreciate it.
And his stuff is actually really cool, man.
I like it.
It's the little image that he has, the video
that he has there.
I don't know, it reminds me of just this Orwellian pre-cyberpunk
kind of look.
It's really cool.
I think everyone should go take a look at it.
Is he using free software to make this comic?
He does not say.
But I'm sure I could reach out to him and ask him.
We're going to assume he does.
Let's just pretend he does.
I know that a lot of it is done, it
appears to be that he sketches a lot of it out first.
So my guess is that he goes back in and inks it later.
But I mean, I just love his style.
I think it's super cool.
I think a lot of people would enjoy it themselves.
So take a look and give him a few bucks if you can.
Boom.
Nice.
Hopefully it works out.
It's nice to see community members working
on stuff like that.
All right, we've got to pick this title,
and then we've got to go.
Yeah, you thought your work was done
when you suggested a title?
Oh, no, my friends.
This is the hardest part, because there are some really
quality titles today.
This is interesting to see YouTube getting a lot of crap
today.
A piece over at Bloomberg, YouTube executives
ignored internal warnings from staff.
Concerns that were brought up about toxic videos
were ignored, and proposals to change recommendations
were dismissed in favor of all-out chasing engagement.
And they have documents as recently as 2017,
it looks like, showing briefings to upper management
in the Alphabet Corporation about how they need to pursue
the engagement strategy.
It's just not looking good for YouTube these days, is it?
No.
Boy.
Meanwhile, today is the day to uninstall the Google Plus
app from your phone, because we are just hours away
from Google Plus being taken off the line.
Right, I had a search result that had a Google Plus answer,
and I clicked it, and I got a page that said,
Google Plus is going away.
So I was like, well, remove it from the search result, Google.
You're the one that gave me the link.
Like, yeah, I'll take your stuff.
Look, it's hard when you cancel that many products, you know?
I know.
This is, it really is kind of hitting home right now,
that Inbox is going away, which was actually kind of nice.
I'll say, there was one bill I didn't know about that Inbox
gave me a push notification.
It was like, hey, homes, you better pay this thing.
I was like, oh, my god.
The robots are good at reading your email.
Yeah.
So Inbox just got shut down.
Google Plus just got shut down.
Meanwhile, we have multiple ways to listen to music.
You have YouTube Music and Google Play Music.
You've got multiple ways to do text chatting.
You've got multiple ways to do video calling.
Oh, Hangouts is ending later this year, too.
Yeah, it's weird what remains.
And it's weird what they do decide to kill.
And it is becoming part of their brand.
They launch fast, and they kill fast.
And so you don't know if Stadia is going to go away.
And now you don't know about any of this kind of stuff.
Well, that's just dumb fresh meat entering the abattoir
right now, isn't it?
What, Stadia?
Yeah.
You think so?
You think it's never going to really stick?
No, I'm being facetious.
I think this is one of those moon shoots that will probably
pay off, I think, when we looked back at how crazy the Chromium
Chromebooks were when they started that initiative.
Everything wasn't aligned for that
to be successful at the time.
And I think that Stadia, certainly the technologies
are not aligned right now for that to be a success.
But it will take somebody like Google to make it successful.
And I've got mixed feelings about how successful I
want Stadia to be.
Yeah.
And I would imagine from a game developer standpoint,
I would really have to really think about,
how much development time do I want
to spend to customize my game for a platform that
is controlled by Google versus open platforms?
I guess they do that for consoles.
So I suppose you could look at it.
It's almost like another console.
But in this case, it could be.
I mean, you already have a whole bunch of proprietary platforms
to target.
It will be interesting to see what we have to take.
But at least when you make a console,
it's out there for a while, right?
This, they can turn off any time.
But the flip side is, when the new console comes out,
you can't play the old games.
But with streaming, in theory, you
could play everything from DOS games
to the most recent crazy games.
Right.
And what I'm looking forward to seeing
is those game studios in the past that
have been absolutely ardent, we're never doing Linux,
to see what their position on Stadia is going to be.
Because whether or not you get a desktop Linux
version of a game because you've targeted it at Stadia,
that's a separate point.
But you have to target Linux in order
for it to run within the Stadia infrastructure.
So it will be fascinating to see whether anyone, Epic,
for example, changes their opinions about porting to Linux.
And in a way, it only has to be somewhat successful, perhaps,
for that to happen.
Even because it's a whole retooling that has to happen
on the dev shops part.
So if Stadia is even semi-successful,
you may see shops begin to retool around Linux, which
could have long-term.
Well, then they have some pretty good, like Real and Unity
both have or are getting support.
And you could see others falling in line, which could
have good long-term ramifications.
It's just so, it could go either way.
It's a fascinating story in that regard.

WEBVTT

00:00.000 --> 00:03.240
It's for people who like to mess with computers.

00:03.240 --> 00:06.680
This is Linux Unplugged, episode 308,

00:06.680 --> 00:08.840
for some time in the future.

00:08.840 --> 00:20.680
Oh, hey there, yeah, you.

00:20.680 --> 00:23.080
Thanks for tuning in to your weekly Linux talk show.

00:23.080 --> 00:23.960
My name is Chris.

00:23.960 --> 00:25.120
My name is Wes.

00:25.120 --> 00:26.120
Hello, Wes.

00:26.120 --> 00:28.240
This week, we're doing something kind of special.

00:28.240 --> 00:30.280
We're throwing out the regular format,

00:30.280 --> 00:34.440
and we're making an episode all about PCI Passerby.

00:34.440 --> 00:35.920
Wait, wait, finally.

00:35.920 --> 00:36.560
I know.

00:36.560 --> 00:37.440
I know, finally, really.

00:37.440 --> 00:38.880
Actually, this is actually something

00:38.880 --> 00:41.680
I've been wanting to do for, oh, I don't know, about five years.

00:41.680 --> 00:42.840
And we finally get to do it.

00:42.840 --> 00:45.740
But wait, if it's not for you, I encourage you to stick around.

00:45.740 --> 00:46.800
You may learn something.

00:46.800 --> 00:48.640
Maybe it will pique your interest.

00:48.640 --> 00:51.360
This is something that solves a lot of problems.

00:51.360 --> 00:55.120
If you want to run Windows, Mac OS, and Linux at the same time,

00:55.120 --> 00:57.400
maybe you even want to run Windows games

00:57.400 --> 00:59.640
without having to mess with proprietary drivers

00:59.640 --> 01:01.640
on your main Linux desktop.

01:01.640 --> 01:04.400
This is something that can help you achieve that.

01:04.400 --> 01:08.320
And PCI Passerby can also just be a great way

01:08.320 --> 01:10.720
to get full performance when you distro hop.

01:10.720 --> 01:14.440
And I use the term full performance a little vaguely,

01:14.440 --> 01:17.240
but full graphical performance, if nothing else.

01:17.240 --> 01:19.200
For distro hopping, that's such a great way

01:19.200 --> 01:21.280
to try out different Linux distributions

01:21.280 --> 01:25.160
without having to nuke and pave every single time.

01:25.160 --> 01:29.560
Or the slowness and artificial properties of using a VM.

01:29.560 --> 01:32.000
Oh, Wes, oh.

01:32.000 --> 01:37.680
I have got a long sort of sordid history with virtualization.

01:37.680 --> 01:41.040
It really stems back from maybe even

01:41.040 --> 01:45.400
pre-PowerPC on the Macintosh System 7 platform.

01:45.400 --> 01:51.360
You had Virtual PC, which would emulate the entire Intel stack.

01:51.360 --> 01:55.400
It had to do translation from Intel to PowerPC

01:55.400 --> 01:57.840
to execute on a PowerPC system, where

01:57.840 --> 02:00.240
it might have been an 8086 system back then.

02:00.240 --> 02:01.440
I don't remember what they were.

02:01.440 --> 02:02.800
Those were the days.

02:02.800 --> 02:05.440
So you were really in real virtualization.

02:05.440 --> 02:08.360
As time went on, if money was available,

02:08.360 --> 02:11.120
you could buy a expansion, I think

02:11.120 --> 02:13.160
it was NetBus card, that you would

02:13.160 --> 02:16.140
install that had an Intel processor and memory on it.

02:16.140 --> 02:19.560
It was like an entire PC on an expansion card

02:19.560 --> 02:22.280
that would then communicate with proprietary, expensive

02:22.280 --> 02:25.680
virtualization software.

02:25.680 --> 02:28.440
So desktop virtualization has come a long way.

02:28.440 --> 02:31.440
And server virtualization has come even further.

02:31.440 --> 02:34.200
I have a long history with VMware and server

02:34.200 --> 02:35.640
virtualization, too.

02:35.640 --> 02:37.440
One of the best things about desktop Linux

02:37.440 --> 02:39.960
is we can take advantage of all of the developments

02:39.960 --> 02:43.720
and progress in the server space right here on our workstations.

02:43.720 --> 02:46.520
So there are a few caveats about PCIe Pass.

02:46.520 --> 02:48.320
There's a few things you have to know.

02:48.320 --> 02:50.720
But I thought we'd start with describing our hardware setup

02:50.720 --> 02:53.000
so you have an idea of what works for us.

02:53.000 --> 02:54.400
And maybe you can build your setups around there.

02:54.400 --> 02:56.020
So let's start by going around the horn,

02:56.020 --> 02:59.580
because also on the line we have Cheese, Alex, and Drew.

02:59.580 --> 03:03.240
Alex, let's start with your virtualization setup.

03:03.240 --> 03:03.840
Right then.

03:03.840 --> 03:06.960
So this topic is something that I've

03:06.960 --> 03:09.720
been secretly hoping you would cover for years.

03:09.720 --> 03:13.520
And I'm so happy that I'm around whilst you're doing it.

03:13.520 --> 03:18.200
PCIe Pass got me into Linux in the first place in 2013.

03:18.200 --> 03:20.440
I'm just looking back at the Linux server blog.

03:20.440 --> 03:23.640
And I have a post dated 10th of August, 2013,

03:23.640 --> 03:28.180
how to compile a custom kernel ready for Xen and Ubuntu

03:28.180 --> 03:30.120
Server 1304.

03:30.120 --> 03:30.800
Oh, boy.

03:30.800 --> 03:31.960
So that's going back a bit.

03:31.960 --> 03:33.720
Yeah, I think you probably have the longest

03:33.720 --> 03:35.460
standing on the panel here.

03:35.460 --> 03:36.960
Back then, there was a whole bunch

03:36.960 --> 03:39.120
of stuff you had to consider.

03:39.120 --> 03:41.080
But there's a few things that have remained

03:41.080 --> 03:42.440
constant throughout that period.

03:42.440 --> 03:44.720
And the most important thing to get right

03:44.720 --> 03:46.480
is your physical hardware.

03:46.480 --> 03:50.160
So there's a few prerequisites that you need.

03:50.160 --> 03:52.680
First of all, your CPU must support

03:52.680 --> 03:57.960
what's called VT-D or VTX if you're in the Intel world.

03:57.960 --> 03:59.200
I forget the name of the AMD one,

03:59.200 --> 04:01.540
but there's a similar equivalent.

04:01.540 --> 04:04.100
So not only must your CPU actually support it,

04:04.100 --> 04:05.980
and you can use the Intel Arc to tell you

04:05.980 --> 04:08.280
whether it does or not, your motherboard

04:08.280 --> 04:09.520
must also support it.

04:09.520 --> 04:13.200
But on top of that, your specific BIOS version

04:13.200 --> 04:14.080
must support it.

04:14.080 --> 04:17.160
So there have been cases where BIOS updates have

04:17.160 --> 04:18.880
broken PCR pass-through for people

04:18.880 --> 04:20.040
and they've had to downgrade.

04:20.040 --> 04:24.680
So it's cutting edge, a lot less so

04:24.680 --> 04:26.960
than it was five, six years ago.

04:26.960 --> 04:30.200
But it's still, some assembly is required.

04:30.200 --> 04:30.960
Yeah, that's fair.

04:30.960 --> 04:32.160
That's definitely fair.

04:32.160 --> 04:34.760
Now, most Xeons, in fact, I think all Xeons

04:34.760 --> 04:37.960
have shipped with VT-D extensions for the longest time.

04:37.960 --> 04:41.000
So you don't need to worry if you have a Xeon-based system,

04:41.000 --> 04:42.560
because servers and things like that

04:42.560 --> 04:47.280
have been using pass-through for NICs and SATA controllers

04:47.280 --> 04:50.200
and all sorts of stuff for a long time.

04:50.200 --> 04:52.900
What got me the most excited about this stuff a few years

04:52.900 --> 04:57.280
ago was being able to put a video card in my system.

04:57.280 --> 05:00.800
So back then, you used to need an AMD card.

05:00.800 --> 05:04.680
But nowadays, you can use an AMD card or an NVIDIA card

05:04.680 --> 05:07.040
with some caveats, which we'll probably come to later.

05:07.040 --> 05:10.240
And when you say passing through the video card,

05:10.240 --> 05:13.160
you essentially are blacklisting it

05:13.160 --> 05:15.180
from the underlying operating system

05:15.180 --> 05:17.960
and exclusively making it available to the virtualization

05:17.960 --> 05:19.160
subsystem.

05:19.160 --> 05:22.840
And it shows up in your VM as if it was plugged right

05:22.840 --> 05:24.920
into that VM's PCI bus.

05:24.920 --> 05:26.920
And the operating system in your VM

05:26.920 --> 05:29.640
is responsible for the driver and the communication

05:29.640 --> 05:31.800
with the hardware, the whole lot.

05:31.800 --> 05:34.320
The VM has no idea that it's not directly connected

05:34.320 --> 05:37.240
to the PCI bus as if it was a native machine.

05:37.240 --> 05:40.180
So that's why the performance is roughly

05:40.180 --> 05:43.360
between 95% and 98% of bare metal performance,

05:43.360 --> 05:46.280
which is, for all intents and purposes, pretty good.

05:46.280 --> 05:47.740
Pretty, pretty good.

05:47.740 --> 05:50.480
And then there's also the visceral experience,

05:50.480 --> 05:52.240
in my case, although there's other ways

05:52.240 --> 05:53.680
to do this, which we'll cover.

05:53.680 --> 05:57.680
I have then a physical monitor plugged into that video card.

05:57.680 --> 05:59.920
And I'm also using a physical mouse and keyboard that are

05:59.920 --> 06:02.000
plugged into dedicated USB ports.

06:02.000 --> 06:05.720
So the VM that I am using feels completely

06:05.720 --> 06:07.520
to my monkey brain like a dedicated PC,

06:07.520 --> 06:09.320
because it's got a screen, it's got a mouse,

06:09.320 --> 06:11.960
it's got a keyboard, and everything's fully accelerated.

06:11.960 --> 06:16.280
Now, CPUs prior to Skylake, Intel did some skew,

06:16.280 --> 06:19.680
skull-doggery, ooh, that's a nice phrase,

06:19.680 --> 06:23.820
where they limited VTD to non-K chips only.

06:23.820 --> 06:26.560
So traditionally, the K chips were their overclocking chips,

06:26.560 --> 06:29.400
and the non-K chips were not.

06:29.400 --> 06:31.500
And if you wanted to do this virtualization

06:31.500 --> 06:32.920
pass-through, PCI pass-through, you

06:32.920 --> 06:38.480
had to buy an i5-3570, not the 3570K, for example.

06:38.480 --> 06:41.160
So from Skylake onwards, though, I

06:41.160 --> 06:45.200
think pretty much every CPU included VTD.

06:45.200 --> 06:48.580
But use the Intel Arc to double check what the CPU does

06:48.580 --> 06:49.600
and does not support.

06:49.600 --> 06:51.880
Sounds especially annoying for gamers, right?

06:51.880 --> 06:54.840
You might want to overclock, and then you couldn't

06:54.840 --> 06:56.080
use something like pass-through.

06:56.080 --> 06:59.000
Yeah, it's one of these things that really turns me off Intel,

06:59.000 --> 07:01.800
to be honest, and makes me hate them.

07:01.800 --> 07:04.240
There's some stuff that Nvidia have done as well,

07:04.240 --> 07:05.260
which we'll come to.

07:05.260 --> 07:08.560
But these big guys, they just have

07:08.560 --> 07:11.720
this way of differentiating their products that is just BS,

07:11.720 --> 07:13.440
and it's really annoying sometimes.

07:13.440 --> 07:16.200
Yeah, it comes down to artificial limitations,

07:16.200 --> 07:19.560
so that way they can charge more for the enterprise-grade chips.

07:19.560 --> 07:21.280
In the case of Intel, it's Xeons.

07:21.280 --> 07:25.400
And in the case of Nvidia, it's their higher-end graphics card

07:25.400 --> 07:26.960
that they sell to businesses.

07:26.960 --> 07:29.120
Now, we'll circle back to video here in a moment,

07:29.120 --> 07:31.080
because there's still some fundamentals that your system

07:31.080 --> 07:32.440
has to be able to support.

07:32.440 --> 07:34.120
And there's a very important concept

07:34.120 --> 07:35.600
that you have to understand in order

07:35.600 --> 07:38.880
to group these PCI devices together and allocate them

07:38.880 --> 07:39.440
to your VM.

07:39.440 --> 07:42.920
Do you want to cover the IOMMU grouping stuff real quick?

07:42.920 --> 07:44.680
Yeah, so to pass a device through,

07:44.680 --> 07:47.560
you must pass an entire IOMMU group.

07:47.560 --> 07:49.720
Yeah, I'm sorry, but just to interrupt really quick,

07:49.720 --> 07:52.880
what is an IOMMU group in really basic terms?

07:52.880 --> 07:54.680
So far as I understand it, and I'm probably

07:54.680 --> 07:57.760
going to butcher this, but it's a logical grouping of devices

07:57.760 --> 07:58.800
on the motherboard.

07:58.800 --> 08:01.680
So I think it's got something to do with PCI lanes

08:01.680 --> 08:05.160
and how they're presented to the CPU and all that kind of thing.

08:05.160 --> 08:08.560
So often, what you'll find on consumer-grade motherboards

08:08.560 --> 08:11.920
is that two or three different PCI slots are grouped together

08:11.920 --> 08:13.160
into a single group.

08:13.160 --> 08:14.620
And that doesn't sound like a big deal

08:14.620 --> 08:19.380
until you're doing one VM has a graphics card,

08:19.380 --> 08:21.720
and then you want your host to also have a graphics card

08:21.720 --> 08:22.620
as well, for example.

08:22.620 --> 08:24.960
So you've got two GPUs in this system.

08:24.960 --> 08:27.960
Now, if they're both in the same IOMMU group,

08:27.960 --> 08:32.520
then you're unable to tell the VM to only grab

08:32.520 --> 08:33.480
that single device.

08:33.480 --> 08:36.080
It will try and grab everything in that group.

08:36.080 --> 08:40.360
So the same is true of USB controllers or SATA controllers

08:40.360 --> 08:40.840
or anything.

08:40.840 --> 08:43.840
Each thing has to be in its own group for separation.

08:43.840 --> 08:45.680
And you have to bring over the entire group.

08:45.680 --> 08:48.120
So here's a perfect example that just about anybody

08:48.120 --> 08:50.520
doing video pass-through will run into.

08:50.520 --> 08:55.040
Most modern video cards have an HDMI port.

08:55.040 --> 08:58.320
Well, that HDMI port includes audio.

08:58.320 --> 09:01.400
And so that actually, the audio component of HDMI

09:01.400 --> 09:04.560
shows up as a separate device on the PCI bus.

09:04.560 --> 09:07.840
And you need to blacklist both of those devices

09:07.840 --> 09:10.320
and then allocate them to the VM,

09:10.320 --> 09:13.640
because they're all in that IOMMU group.

09:13.640 --> 09:16.580
And the other thing that, in my case, was very relevant

09:16.580 --> 09:20.040
is a Thunderbolt 3 device, all of those devices

09:20.040 --> 09:23.480
in that Thunderbolt 3 device are in a PCI group

09:23.480 --> 09:25.640
or an IOMMU group.

09:25.640 --> 09:27.600
And that, in my case, worked really well,

09:27.600 --> 09:29.760
because I could dedicate the entire dock to the VM

09:29.760 --> 09:30.800
in that instance.

09:30.800 --> 09:32.200
Yeah, and like server equipment.

09:32.200 --> 09:34.120
So we talked about Xeons being well-supported.

09:34.120 --> 09:39.440
Server motherboards often have very generous IOMMU groups.

09:39.440 --> 09:42.320
So they have one group per PCI slot, for example,

09:42.320 --> 09:44.240
because they know that a lot of their customers

09:44.240 --> 09:45.840
are going to be doing this.

09:45.840 --> 09:47.160
So all hope is not lost.

09:47.160 --> 09:49.280
If you have bought a consumer-grade motherboard

09:49.280 --> 09:54.400
that groups multiple PCI ports together under the same group,

09:54.400 --> 09:57.360
you can apply an ACS kernel patch,

09:57.360 --> 10:01.480
which will artificially separate those devices out

10:01.480 --> 10:03.160
into separate groups, allowing you

10:03.160 --> 10:07.120
to have multiple devices in the same physical group.

10:07.120 --> 10:09.140
But so far as your OS is concerned,

10:09.140 --> 10:10.760
they're in a different logical grouping.

10:10.760 --> 10:12.440
So it works just fine.

10:12.440 --> 10:14.960
There are some security concerns.

10:14.960 --> 10:16.320
And I forget exactly what they are.

10:16.320 --> 10:18.640
But you want to be sure that you understand

10:18.640 --> 10:21.520
the ramifications of this ACS patch before you apply it,

10:21.520 --> 10:25.340
because it can allow for some nasty things, breakouts

10:25.340 --> 10:27.080
from the VMs, for example.

10:27.080 --> 10:30.880
Yeah, it essentially does not guarantee isolation

10:30.880 --> 10:33.040
for a particular device.

10:33.040 --> 10:36.880
So while it does get quote unquote isolated,

10:36.880 --> 10:42.080
it's not quite the same where something could potentially

10:42.080 --> 10:46.080
use it to break out of a VM and attack the host.

10:46.080 --> 10:47.680
Right, and to be clear, this is only

10:47.680 --> 10:51.880
if you're using that workaround, that ACS patch.

10:51.880 --> 10:54.420
And in my case, this actually works out fantastic,

10:54.420 --> 10:57.680
because I'm passing through Thunderbolt 3 devices.

10:57.680 --> 10:59.820
And on these Thunderbolt 3 devices,

10:59.820 --> 11:01.360
I want the gigabit ethernet.

11:01.360 --> 11:02.720
I want the USB bus.

11:02.720 --> 11:05.320
I want the sound card, the display port, the GPU.

11:05.320 --> 11:08.200
I want it all to go to the virtual machine.

11:08.200 --> 11:11.160
So it just happened to be in my particular setup.

11:11.160 --> 11:12.880
Having to group all these together anyways

11:12.880 --> 11:16.920
made it actually simpler to just pass the entire Thunderbolt 3

11:16.920 --> 11:18.640
devices through to the VM.

11:18.640 --> 11:20.720
And in my case, I'm not breaking any isolation.

11:20.720 --> 11:22.140
I'm not running any risk.

11:22.140 --> 11:23.400
It's perfectly safe.

11:23.400 --> 11:28.400
I'll tell you another use case where this ACS patch is useful.

11:28.400 --> 11:30.840
So if you have multiple identical graphics cards

11:30.840 --> 11:34.440
in the same system, let's say you've got two RX 560s,

11:34.440 --> 11:37.240
for example, or two 1060s, or something,

11:37.240 --> 11:41.520
two GPUs that present themselves as their PCI IDs

11:41.520 --> 11:45.240
as the same device, that can be really tricky.

11:45.240 --> 11:47.800
And sometimes you need to move the physical devices around

11:47.800 --> 11:49.520
in the actual slots on your motherboard

11:49.520 --> 11:51.760
to get the host to pick up the right GPU first.

11:51.760 --> 11:54.320
So in my system here, for example,

11:54.320 --> 11:57.400
I have an RX 560 and a 1080 Ti.

11:57.400 --> 11:59.680
The 560 is in the top slot on the motherboard,

11:59.680 --> 12:01.760
and the 1080 is in the second slot, which

12:01.760 --> 12:05.040
is the other way around to what you would think to get the 16x

12:05.040 --> 12:06.960
and the 8x slots.

12:06.960 --> 12:08.600
In reality, that performance difference

12:08.600 --> 12:12.840
is so negligible that I don't actually care about that.

12:12.840 --> 12:15.800
And by having it this way around, my arch host

12:15.800 --> 12:20.240
can pick up the AMD GPU first and use that for Linux

12:20.240 --> 12:22.560
with all the native kernel support it has.

12:22.560 --> 12:25.240
And then my guest just picks up the second slot,

12:25.240 --> 12:27.720
and it just works.

12:27.720 --> 12:30.160
Now we'll get more into our individual setups,

12:30.160 --> 12:33.880
because each one of us has a very different setup.

12:33.880 --> 12:35.640
But one thing that's going to be common

12:35.640 --> 12:40.040
is all of these VMs will use an open source UEFI firmware.

12:40.040 --> 12:42.920
They have to be on UEFI firmwares for this to work.

12:42.920 --> 12:45.920
Yeah, so the magic that makes all this possible is OVMF.

12:45.920 --> 12:49.160
That was one of the things a few years ago

12:49.160 --> 12:51.160
that caused a lot of headaches.

12:51.160 --> 12:54.520
So if I look at one of my really old blog posts

12:54.520 --> 12:58.160
from September 2013, I am looking at a Windows 8 VM,

12:58.160 --> 13:00.840
just to give you an idea of the context of where

13:00.840 --> 13:04.280
we were at that point, kernel 3.10 for Linux.

13:04.280 --> 13:05.880
So it's quite a long time ago.

13:05.880 --> 13:08.680
You used to have to eject your graphics card

13:08.680 --> 13:12.760
before rebooting the VM, because if you didn't do that,

13:12.760 --> 13:15.360
then the firmware on the graphics card didn't reset.

13:15.360 --> 13:17.520
So when you reboot your system, there's

13:17.520 --> 13:19.880
a whole bunch of resetting of different firmwares.

13:19.880 --> 13:22.320
And basically, the graphics card has a small BIOS on it

13:22.320 --> 13:24.080
as well.

13:24.080 --> 13:26.080
That doesn't sound like too big of a deal

13:26.080 --> 13:27.880
until something like Windows Update

13:27.880 --> 13:33.160
comes along and just randomly reboots your VM for fun.

13:33.160 --> 13:37.240
So I had to write these very basic scripts back in the day

13:37.240 --> 13:41.400
that ran in a registry key that ejected the graphics

13:41.400 --> 13:44.040
card at startup and shut down in the Windows VM

13:44.040 --> 13:45.640
to get around that problem.

13:45.640 --> 13:49.200
Now, these days with OVMF, it's so easy

13:49.200 --> 13:52.680
that the UEFI BIOSes on all these cards

13:52.680 --> 13:56.880
just handles the resets, even in a VM scenario, just fine.

13:56.880 --> 14:01.840
So you can reboot, shut down, reattach to a different VM.

14:01.840 --> 14:04.040
You can go to town and go crazy, and it will just

14:04.040 --> 14:06.720
continue to work, and it won't lock up the host anymore.

14:06.720 --> 14:11.560
I have had bad luck with my RX 570

14:11.560 --> 14:14.960
doing a full reset, where in some cases with Windows

14:14.960 --> 14:18.680
and Mac VMs, I have to power off the system

14:18.680 --> 14:20.400
or sleep the system, the host system,

14:20.400 --> 14:22.240
before the graphics will reset.

14:22.240 --> 14:25.400
Did not have that issue with the NVIDIA graphics,

14:25.400 --> 14:26.200
which surprised me.

14:26.200 --> 14:28.280
I thought it'd be the other way around.

14:28.280 --> 14:30.000
OK, now why don't we get into our setups?

14:30.000 --> 14:32.360
Because I think that's an interesting bit here is,

14:32.360 --> 14:33.880
and then we'll get into configuring

14:33.880 --> 14:35.200
the various aspects of it, depending

14:35.200 --> 14:35.880
on what your setup is.

14:35.880 --> 14:37.240
I also want to get into something

14:37.240 --> 14:39.680
like Looking Glass, if you don't necessarily

14:39.680 --> 14:43.080
want to have a dedicated monitor, dedicated hardware.

14:43.080 --> 14:44.620
There's other solutions there too.

14:44.620 --> 14:49.800
But Alex, let's start with your current PCI pass-through setup.

14:49.800 --> 14:50.680
I have two.

14:50.680 --> 14:54.720
So my main desktop rig is, as I've said,

14:54.720 --> 14:57.920
it's got an RX 560 and a 1080 TI in it.

14:57.920 --> 15:00.720
The 1080 is dedicated to Windows,

15:00.720 --> 15:03.680
and the RX 560 is dedicated to Linux.

15:03.680 --> 15:05.300
And to be honest with you, the only reason

15:05.300 --> 15:07.200
I have Windows lying around these days

15:07.200 --> 15:09.740
is for Adobe stuff, for Lightroom and Photoshop

15:09.740 --> 15:11.200
and that kind of thing.

15:11.200 --> 15:18.560
It's an Intel CPU, an 8700K, and 32 gigs of RAM.

15:18.560 --> 15:21.440
So not that much RAM, but it works just fine.

15:21.440 --> 15:23.440
You're doing a dedicated disk, or are you just

15:23.440 --> 15:25.320
doing a Cal file or somewhere?

15:25.320 --> 15:26.240
How are you doing that?

15:26.240 --> 15:27.240
Oh, yes.

15:27.240 --> 15:28.760
Disks are important to talk about.

15:28.760 --> 15:32.640
So when you've got two machines on your system,

15:32.640 --> 15:34.720
you're probably going to want to make sure that there's

15:34.720 --> 15:38.440
at least a SSD per machine.

15:38.440 --> 15:41.200
Now, you can run your virtual machine out of a QCOW image

15:41.200 --> 15:43.280
on the same SSD as your host OS.

15:43.280 --> 15:45.200
Obviously, that's going to limit performance,

15:45.200 --> 15:47.600
because there's only so many inputs and outputs

15:47.600 --> 15:51.120
physically a device can do in any given time.

15:51.120 --> 15:54.240
So I have a dedicated SATA controller

15:54.240 --> 15:58.560
that I pass through to the VM so that the guest just

15:58.560 --> 16:02.200
sees a native SSD as if it was plugged straight in.

16:02.200 --> 16:05.400
Now, there is one other thing that's worth talking about.

16:05.400 --> 16:07.360
There's these VertIO drivers.

16:07.360 --> 16:09.480
Now, they are developed by Red Hat,

16:09.480 --> 16:13.680
and they enable a huge performance leap over just

16:13.680 --> 16:15.680
standard SATA emulation.

16:15.680 --> 16:17.180
Now, when you're installing Windows,

16:17.180 --> 16:19.560
there's a few hoops you'll need to jump through in terms

16:19.560 --> 16:20.760
of enabling drivers.

16:20.760 --> 16:24.240
So in the installer, you'll need to load up

16:24.240 --> 16:27.200
not only the Windows ISO, but also a VertIO ISO,

16:27.200 --> 16:28.680
which is available in the show notes.

16:28.680 --> 16:29.920
There's a link.

16:29.920 --> 16:35.280
And with that VertIO ISO, you'll need to browse through

16:35.280 --> 16:39.720
and find the storage driver to enable Windows

16:39.720 --> 16:41.360
to see the VertIO drive.

16:41.360 --> 16:43.760
Otherwise, when you get to the Install page,

16:43.760 --> 16:45.840
and it says, select the device you want to install,

16:45.840 --> 16:47.760
it will just be a blank list.

16:47.760 --> 16:49.780
And that foxed me for quite a while.

16:49.780 --> 16:52.640
The fun of Windows, ooh.

16:52.640 --> 16:56.140
VertIO is amazing, because the system, the driver,

16:56.140 --> 16:57.640
is aware that it's virtualized.

16:57.640 --> 16:59.960
And so it communicates intelligently

16:59.960 --> 17:01.160
with the hypervisor.

17:01.160 --> 17:04.400
And just a quick rabbit hole tangent to that,

17:04.400 --> 17:06.200
QMU developer, I think Alex, you're

17:06.200 --> 17:08.160
the one that noticed this, thinks

17:08.160 --> 17:13.160
that it looks like Apple is adding early support for VertIO

17:13.160 --> 17:18.360
and frame buffer graphics to the latest iterations of Mojave

17:18.360 --> 17:20.440
and Catalina.

17:20.440 --> 17:25.460
So it looks like Apple is adding virtualization VertIO driver

17:25.460 --> 17:29.560
support to Mac OS, which is going to make this even easier

17:29.560 --> 17:30.320
down the road.

17:30.320 --> 17:33.440
Would that justify $100,000 cheese grater to you?

17:33.440 --> 17:37.360
No, because I can run this on a custom built Linux box

17:37.360 --> 17:39.400
and get GPU performance in Mac OS.

17:39.400 --> 17:40.900
In fact, we'll get there in a moment.

17:40.900 --> 17:43.940
But is there any other notes on your setup?

17:43.940 --> 17:46.120
That's a pretty comprehensive review.

17:46.120 --> 17:46.720
I like that.

17:46.720 --> 17:48.080
I like the SATA pass-through tip.

17:48.080 --> 17:51.760
I am using a QCOW file on my laptop disk,

17:51.760 --> 17:54.200
because obviously I can't stuff a ton of SATA disk in there.

17:54.200 --> 17:58.160
And I do notice a bit of a performance impact.

17:58.160 --> 18:00.320
Nothing major, ones like games are loaded and stuff.

18:00.320 --> 18:03.840
But yeah, during patching and whatnot, it's brutal.

18:03.840 --> 18:06.260
As a few other things, like CPU pinning, for example,

18:06.260 --> 18:07.040
for performance.

18:07.040 --> 18:09.100
So you need to ensure that your host system has

18:09.100 --> 18:12.440
at least one full core available to use at all times.

18:12.440 --> 18:16.760
Otherwise, if your host system runs out of CPU time,

18:16.760 --> 18:18.560
you're going to have a bad time.

18:18.560 --> 18:20.440
The other thing is, how do you handle

18:20.440 --> 18:22.900
sound and keyboard and mice?

18:22.900 --> 18:24.520
So sound is a tricky one.

18:24.520 --> 18:27.440
There's lots of different options here.

18:27.440 --> 18:28.920
The one that I'm using at the moment

18:28.920 --> 18:32.200
is to stream from the guest through to Pulse Audio

18:32.200 --> 18:33.320
on the host.

18:33.320 --> 18:34.680
And that works fine.

18:34.680 --> 18:36.280
It can be a little crackly at times,

18:36.280 --> 18:39.720
but not enough that I bothered to fix it.

18:39.720 --> 18:42.440
The other thing is, you could just buy a USB DAC,

18:42.440 --> 18:43.800
for example, sound card.

18:43.800 --> 18:45.400
Plug that in and pass that through.

18:45.400 --> 18:49.080
And that will give you audio directly from the host.

18:49.080 --> 18:53.960
Another neat way to do it is to use the HDMI headphone out

18:53.960 --> 18:57.480
on your display to plug into your sound that way.

18:57.480 --> 18:59.680
So when you switch the input on a display,

18:59.680 --> 19:02.080
you're automatically switching the sound input as well.

19:02.080 --> 19:03.480
So that's another way to do it.

19:03.480 --> 19:05.720
I'll add, just for context, what I decided to do

19:05.720 --> 19:07.780
was get a USB gaming headset.

19:07.780 --> 19:09.320
And I use that for all kinds of stuff.

19:09.320 --> 19:11.440
And if I want audio, I just plug that in.

19:11.440 --> 19:15.560
OK, Drew, so you've recently set up a PCI pass-through.

19:15.560 --> 19:17.800
And I think it's a little different than what we're doing.

19:17.800 --> 19:19.000
So tell me about your setup.

19:19.000 --> 19:22.480
So my setup is on a Ryzen-based system.

19:22.480 --> 19:27.860
So I am using AMD-V instead of VTD.

19:27.860 --> 19:30.280
And that works fine.

19:30.280 --> 19:32.600
That I had no problems with at all,

19:32.600 --> 19:36.880
was pretty much out of the box on the latest kernel, which

19:36.880 --> 19:41.720
at the time is 5.1.2, I want to say.

19:41.720 --> 19:42.760
Are you on Fedora?

19:42.760 --> 19:43.600
Currently, yes.

19:43.600 --> 19:47.960
And the reason I'm on Fedora is I had started this journey

19:47.960 --> 19:49.240
on Ubuntu.

19:49.240 --> 19:52.040
And I ran into some issues because I

19:52.040 --> 19:56.660
do have an RX 580 and an RX 480.

19:56.660 --> 19:59.920
And they do show up with the same device IDs.

19:59.920 --> 20:03.000
So while they were in different IOMMU groups,

20:03.000 --> 20:07.880
I could not select just one of them to pass through.

20:07.880 --> 20:11.720
And I started, I even rolled a whole kernel.

20:11.720 --> 20:15.440
But I couldn't get the init RAM FS script that

20:15.440 --> 20:18.200
would detect the boot GPU and then pass

20:18.200 --> 20:20.940
through the non-boot GPU through.

20:20.940 --> 20:23.600
I couldn't get that to run reliably.

20:23.600 --> 20:25.840
So I ended up going back to Fedora

20:25.840 --> 20:29.840
because in all honesty, I'm just more comfortable with Drakut

20:29.840 --> 20:32.600
and using their init RAM FS system.

20:32.600 --> 20:35.540
To me, it's more transparent and easier for me to read.

20:35.540 --> 20:38.320
I'm sure I probably could have gotten there on Ubuntu.

20:38.320 --> 20:40.440
But it would have taken a lot more time.

20:40.440 --> 20:42.120
And I wanted to get this going.

20:42.120 --> 20:44.440
So yeah, over to Fedora.

20:44.440 --> 20:48.320
And it turns out I needed to use the ACS patch.

20:48.320 --> 20:51.720
Well, there is a handy dandy pre-built kernel for it

20:51.720 --> 20:54.400
in copper.

20:54.400 --> 20:55.880
So I grabbed that.

20:55.880 --> 20:57.880
That'll be linked in the show notes.

20:57.880 --> 21:01.380
And loaded up the init RAM FS script

21:01.380 --> 21:03.400
that I grabbed from the Arch Wiki

21:03.400 --> 21:07.720
and dropped that into Drakut and off to the races.

21:07.720 --> 21:14.520
It immediately put that second RX card into the VFIO drivers

21:14.520 --> 21:17.600
and dropped it out of the host system entirely.

21:17.600 --> 21:20.680
So like that monitor, boot up, that monitor's black.

21:20.680 --> 21:22.240
It's not picking up anything.

21:22.240 --> 21:24.520
And I could pass it straight through

21:24.520 --> 21:26.880
to the VM, which is great.

21:26.880 --> 21:31.480
Now, currently, the way I'm doing keyboard and mouse

21:31.480 --> 21:37.680
is I am also passing through the USB 3.1 ports on my tower.

21:37.680 --> 21:41.800
And I have a little USB 3 breakout

21:41.800 --> 21:46.200
that I can plug between the front panel on my computer

21:46.200 --> 21:51.880
to a USB extension that runs back to that USB 3.1

21:51.880 --> 21:53.040
that I'm passing through.

21:53.040 --> 21:54.280
And these are different devices.

21:54.280 --> 21:56.800
So you still have USB ports for the host system.

21:56.800 --> 21:58.640
But then you have a separate USB controller

21:58.640 --> 22:00.720
that you can pass through to the guest?

22:00.720 --> 22:01.600
Exactly, yeah.

22:01.600 --> 22:05.520
So I just move that USB hub from one port to the other.

22:05.520 --> 22:09.960
And boom, donzo, I've switched from controlling my host

22:09.960 --> 22:11.560
to my VM.

22:11.560 --> 22:14.160
So that was the simplest, easiest solution.

22:14.160 --> 22:18.080
There's a fun little USB switcher thing

22:18.080 --> 22:21.120
that you can buy, which is a box which has two USB cables coming

22:21.120 --> 22:21.780
out the back.

22:21.780 --> 22:24.880
One you plug into one bus, one you plug into the other bus

22:24.880 --> 22:26.480
that's passed through to the VM.

22:26.480 --> 22:27.640
And then there's a button on top of it

22:27.640 --> 22:29.360
that you can physically press.

22:29.360 --> 22:30.880
Where do I find this?

22:30.880 --> 22:33.200
I'll find a link and put it in the show notes.

22:33.200 --> 22:33.880
Thank you.

22:33.880 --> 22:37.160
Yeah, I need that real bad.

22:37.160 --> 22:41.560
So now for disks, I had originally

22:41.560 --> 22:46.280
started trying to use a spare partition that I had.

22:46.280 --> 22:49.480
But because this is UEFI, you can't really

22:49.480 --> 22:51.600
use just a single partition.

22:51.600 --> 22:54.360
The UEFI just does not work properly,

22:54.360 --> 22:58.680
because it'll see that there is another UEFI on that same disk

22:58.680 --> 23:00.040
and try to boot through that.

23:00.040 --> 23:02.600
You have to do a whole disk.

23:02.600 --> 23:04.260
And Alex, you can correct me if I'm wrong.

23:04.260 --> 23:09.000
Maybe I didn't do it right, but it did not work for me.

23:09.000 --> 23:11.800
So I think I need to go out and buy another SSD

23:11.800 --> 23:14.820
and slap it in my tower to really do it right.

23:14.820 --> 23:18.120
But right now, I'm using a raw image, not QCOW, but raw.

23:18.120 --> 23:20.480
Why raw over QCOW?

23:20.480 --> 23:24.040
Just because it's a little more performant.

23:24.040 --> 23:27.680
And since I'm just using this for gaming and nothing

23:27.680 --> 23:30.740
business facing, I don't really need the extra safety

23:30.740 --> 23:32.440
that QCOW provides.

23:32.440 --> 23:33.480
Yeah, that makes sense.

23:33.480 --> 23:35.960
Yeah, I had the same internal debate myself.

23:35.960 --> 23:38.480
So that's curious.

23:38.480 --> 23:40.800
So once everything was all said and done with the pass-through

23:40.800 --> 23:45.160
and all of that, did you run into any issues with the VM?

23:45.160 --> 23:46.720
In particular, like Windows, when

23:46.720 --> 23:48.520
you're working with an NVIDIA card,

23:48.520 --> 23:51.160
it can kind of suss out that it's in a VM.

23:51.160 --> 23:54.040
And the NVIDIA driver can essentially disable itself.

23:54.040 --> 23:56.880
And that's where you get this really common code 43

23:56.880 --> 23:58.680
in the event log that says, or it's

23:58.680 --> 24:01.160
even when you just go into Device Manager

24:01.160 --> 24:03.200
and you look at the driver, it'll be disabled.

24:03.200 --> 24:06.000
And you go in there, and it'll say error 43 or code 43.

24:06.000 --> 24:07.800
Device could not be properly initialized.

24:07.800 --> 24:09.200
Did you run into any of that kind of stuff?

24:09.200 --> 24:10.240
That's really common.

24:10.240 --> 24:13.160
No, I use AMD because they don't pull

24:13.160 --> 24:14.840
those kind of shenanigans.

24:14.840 --> 24:15.280
You know what?

24:15.280 --> 24:15.940
You say that.

24:15.940 --> 24:16.500
You say that.

24:16.500 --> 24:22.120
However, I also, in this whole journey,

24:22.120 --> 24:27.480
I switched from an NVIDIA card to an AMD RX 570.

24:27.480 --> 24:31.360
And man, it worked perfectly under Windows 10.

24:31.360 --> 24:33.640
And Mac OS just automatically detected it.

24:33.640 --> 24:35.100
Never got it to work under Linux,

24:35.100 --> 24:36.800
so I wonder if something's wrong there.

24:36.800 --> 24:40.540
But under Windows 10, it works perfectly, full acceleration,

24:40.540 --> 24:43.940
until I upgrade to the absolute latest Insider build,

24:43.940 --> 24:46.120
so that way I could try out the WSL 2.

24:46.120 --> 24:47.960
We were going to do a little report on it.

24:47.960 --> 24:50.700
And when I do that, when I get to the latest build of Windows

24:50.700 --> 24:55.240
and it sucks down a newer version of the GPU driver,

24:55.240 --> 24:58.520
it disables my card, and I actually get code 43 now

24:58.520 --> 25:02.180
in Event View or in the log for my AMD card.

25:02.180 --> 25:04.480
It goes from working to not working.

25:04.480 --> 25:06.820
I'd be cautious about throwing shade

25:06.820 --> 25:10.640
based on an Insider build, though, that's pre-release.

25:10.640 --> 25:11.480
Yeah.

25:11.480 --> 25:13.040
Yeah, however, I did.

25:13.040 --> 25:16.840
So get this, Daddy-O. I went back

25:16.840 --> 25:20.520
to a clean Windows 10 standard install, which is up to date,

25:20.520 --> 25:24.020
but it's just on a regular default track,

25:24.020 --> 25:27.120
and downloaded the latest AMD driver from their website,

25:27.120 --> 25:28.680
installed that, same issue.

25:30.040 --> 25:32.960
I don't know, because I pulled the latest AMD driver

25:32.960 --> 25:36.160
off the website just yesterday to do the install,

25:36.160 --> 25:37.300
and it worked fine for me.

25:37.300 --> 25:39.720
I'm loving Drew calling you on this, Chris.

25:39.720 --> 25:40.560
I know.

25:40.560 --> 25:42.840
Well, it really could be something in my setup,

25:42.840 --> 25:44.480
because it's a new video card.

25:44.480 --> 25:46.360
So you've got to work these things out.

25:46.360 --> 25:47.200
Well, that's a pretty solid.

25:47.200 --> 25:48.460
So what are you using it for, Drew?

25:48.460 --> 25:49.920
Is it Windows stuff you're using it for,

25:49.920 --> 25:52.480
or what's the utility you get out of this?

25:52.480 --> 25:54.400
Windows 10 gaming.

25:54.400 --> 25:57.520
So my wife is obsessed with this game called Arc,

25:57.520 --> 25:59.920
and they just put out a new map,

25:59.920 --> 26:01.760
and occasionally I like to play with her.

26:01.760 --> 26:06.520
Now, Arc has a native Linux build, but it's terrible,

26:06.520 --> 26:10.680
and trying to run it through Proton technically works,

26:10.680 --> 26:15.680
but it also uses BattleEye, so it's real hit or miss.

26:16.640 --> 26:18.120
And so I thought, well, okay,

26:18.120 --> 26:20.560
I want to play with her on this new map,

26:20.560 --> 26:23.560
so why don't I try this pass-through thing?

26:23.560 --> 26:26.440
And yeah, I was able to get into the game

26:26.440 --> 26:29.720
and play a little bit, and it works just great.

26:29.720 --> 26:31.580
It's the only way I'm going to run Windows now.

26:31.580 --> 26:33.640
It's like, it's Windows with a safety net,

26:33.640 --> 26:35.480
because you've got snapshots,

26:35.480 --> 26:38.720
you can physically copy the image file around.

26:38.720 --> 26:41.880
It really, it feels like safe Windows to me,

26:41.880 --> 26:43.800
and I like it.

26:43.800 --> 26:47.640
So I'll just briefly, my setup is two different setups.

26:47.640 --> 26:50.720
I've got what I call a virtualization go-bag,

26:50.720 --> 26:51.640
and I'm very proud of this.

26:51.640 --> 26:52.720
I showed it to Wes the other day,

26:52.720 --> 26:54.480
and I was just going on and on about it.

26:54.480 --> 26:56.160
I am so jealous,

26:56.160 --> 26:58.720
and since I have the same backpack you used,

26:58.720 --> 27:00.080
I might have to copy you.

27:00.080 --> 27:03.200
Yeah, I use the swag backpack we got from Red Hat Summit,

27:03.200 --> 27:06.400
and I use that as my virtualization go-bag.

27:06.400 --> 27:07.960
So it's a companion backpack

27:07.960 --> 27:09.840
that goes with my laptop backpack,

27:09.840 --> 27:11.520
and I don't take it with me everywhere,

27:11.520 --> 27:14.760
but I do sometimes take it between the studio and the RV.

27:14.760 --> 27:19.760
And inside this backpack is a tiny HDMI 1080p LCD screen.

27:21.120 --> 27:23.260
It's brilliant, because it's so compact.

27:23.260 --> 27:24.880
Like, it's just super dense pixels,

27:24.880 --> 27:26.280
and it just looks gorgeous,

27:26.280 --> 27:28.040
and it's a very vibrant screen.

27:28.040 --> 27:33.040
HDMI cable that goes into the Thunderbolt 3 Lenovo GPU dock

27:33.640 --> 27:34.480
that I got.

27:34.480 --> 27:35.720
I've talked about it before on the show.

27:35.720 --> 27:37.360
This is why I bought the GPU dock too,

27:37.360 --> 27:38.800
because I plan to do something like this, you know?

27:38.800 --> 27:40.320
And so I have that in there,

27:40.320 --> 27:41.740
which has a Thunderbolt 3 cable

27:41.740 --> 27:44.080
that connects to the ThinkPad T480.

27:44.080 --> 27:47.080
I've got a USB gaming headset, a USB mouse,

27:47.080 --> 27:49.520
and a tiny portable USB keyboard

27:49.520 --> 27:50.680
that all go in this backpack,

27:50.680 --> 27:53.120
plus the power adapter that powers the whole thing.

27:53.120 --> 27:55.640
I bust all that stuff out, I hook it up.

27:55.640 --> 27:58.560
And in that, I've essentially got in that backpack

27:58.560 --> 28:03.560
a Mac, a Win 10 VM, and an Ubuntu 1910 VM,

28:04.640 --> 28:07.240
which I use for all kinds of different testing.

28:07.240 --> 28:09.560
The host system, like I said, is the ThinkPad.

28:09.560 --> 28:13.920
It runs Fedora 30, and it's been a dream to set this up.

28:13.920 --> 28:16.480
I use Vert Manager as the software front end

28:16.480 --> 28:17.860
to manage my VMs.

28:17.860 --> 28:19.820
I love it, because I also have Vert Manager

28:19.820 --> 28:22.320
connected now to the on-premises server

28:22.320 --> 28:24.440
that we have here at the studio,

28:24.440 --> 28:26.080
and I can manage those virtual machines

28:26.080 --> 28:30.680
and my local virtual machines all through one UI.

28:30.680 --> 28:35.080
It also is a very easy way, by the way, BT dubs,

28:35.080 --> 28:36.740
to go through and select the PCI devices

28:36.740 --> 28:39.200
you wanna pass through to the guest.

28:39.200 --> 28:42.360
It's just nice, because I like seeing the device names,

28:42.360 --> 28:45.280
selecting it, hitting apply, and then it's boom, it's set up.

28:45.280 --> 28:46.520
Oh, that sounds really nice.

28:46.520 --> 28:47.840
Yeah, you gotta do the blacklisting

28:47.840 --> 28:50.260
of the PCI devices first, but once you've got them

28:50.260 --> 28:52.960
blacklisted on the host system, which is not hard to do,

28:52.960 --> 28:55.500
it's really just a matter of getting a list

28:55.500 --> 28:57.960
of the PCI devices on your Linux box.

28:57.960 --> 28:59.160
Checking it twice, I'm sure.

28:59.160 --> 29:02.860
Yeah, and we'll have some guides linked in the show notes.

29:02.860 --> 29:04.160
That's worth mentioning, Wes,

29:04.160 --> 29:06.120
because if you blacklist the wrong device,

29:06.120 --> 29:08.240
your system may not boot, because suddenly

29:08.240 --> 29:10.960
the hard drive's ripped out from under the feet of the OS.

29:10.960 --> 29:12.280
Just be careful with that.

29:12.280 --> 29:13.120
Pro.

29:13.120 --> 29:16.160
Yeah, yeah, yeah, so you get a list of the PCI devices,

29:16.160 --> 29:19.120
you blacklist their individual IDs, you reboot,

29:19.120 --> 29:21.100
and then you go into Vert Manager,

29:21.100 --> 29:22.680
and as you're setting up the VM,

29:22.680 --> 29:24.960
you can go in and configure it for the additional options,

29:24.960 --> 29:27.960
and you add hardware, and one of them is pass-through devices,

29:27.960 --> 29:29.400
and you just start clicking on them.

29:29.400 --> 29:31.960
It won't let you add a device you haven't blacklisted.

29:31.960 --> 29:34.840
If a PCI device is in use, it won't let you assign it

29:34.840 --> 29:36.960
to a VM, so it's pretty easy.

29:36.960 --> 29:40.000
You can't put a square thing into a round hole in this case.

29:40.000 --> 29:41.920
And once you have it all set up, you double click it,

29:41.920 --> 29:43.400
you start it.

29:43.400 --> 29:45.880
When you start it, it is such a sensation,

29:45.880 --> 29:49.560
because you start what feels like a piece of software

29:49.560 --> 29:53.000
on your laptop, and all these other physical hardware

29:53.000 --> 29:54.320
devices light up.

29:54.320 --> 29:56.840
The monitor comes on, the keyboard lights up,

29:56.840 --> 29:59.560
the USB audio card turns on, the blue light comes on,

29:59.560 --> 30:01.120
I hear that pop in the speakers.

30:01.120 --> 30:03.480
It is amazing.

30:03.480 --> 30:06.000
You've just magicked up another computer.

30:06.000 --> 30:06.600
Exactly.

30:06.600 --> 30:07.900
I've conjured it from nothing.

30:07.900 --> 30:09.320
I've conjured it from nothing.

30:09.320 --> 30:12.200
And what's crazy about it is, with modern systems,

30:12.200 --> 30:15.240
with SSDs, and eighth generation processors,

30:15.240 --> 30:19.320
and et cetera, et cetera, you don't even really

30:19.320 --> 30:20.760
feel it on the host.

30:20.760 --> 30:22.160
I'm just sitting there, I'm still

30:22.160 --> 30:25.040
running like a dozen and a half electron apps,

30:25.040 --> 30:30.080
I'm browsing websites in Chrome, I'm updating packages.

30:30.080 --> 30:32.200
You don't even feel it on the host system,

30:32.200 --> 30:34.200
because there's so much power to spare.

30:34.200 --> 30:36.200
I've got cores for days, right?

30:36.200 --> 30:38.720
And I've got 32 gigs of RAM in a laptop.

30:38.720 --> 30:41.840
So it's just brilliant, because you've

30:41.840 --> 30:45.840
got so much horsepower to spare that you can actually

30:45.840 --> 30:48.560
have another complete environment.

30:48.560 --> 30:53.280
And if you're even the slightest distro hopper or distro curious,

30:53.280 --> 30:56.720
this is so wonderful, because I finally

30:56.720 --> 30:59.360
got the perfect Linux desktop.

30:59.360 --> 31:02.440
I am so happy with this setup.

31:02.440 --> 31:05.840
I am so happy with where things are at right now in 2019,

31:05.840 --> 31:09.480
because Linux is just doing so well.

31:09.480 --> 31:12.920
The Mac is finally getting interesting again.

31:12.920 --> 31:15.520
Windows 10 is not like Windows before.

31:15.520 --> 31:18.120
That's something else I've learned in this experiment,

31:18.120 --> 31:21.280
is they're doing different stuff with Windows 10.

31:21.280 --> 31:24.980
When you bring Windows 10 up to the latest Insider builds,

31:24.980 --> 31:26.440
and you get everything up to date

31:26.440 --> 31:32.600
so you can run WSL and all those new goodies, it's a new OS.

31:32.600 --> 31:36.080
It's absolutely something Microsoft would have held back

31:36.080 --> 31:39.080
and made a different OS in years past.

31:39.080 --> 31:42.200
I mean, I'm talking different UI, different assistance pop-up,

31:42.200 --> 31:44.520
different menu options, completely different

31:44.520 --> 31:46.280
configuration options.

31:46.280 --> 31:48.040
It's a different start menu.

31:48.040 --> 31:49.960
The login screen is different.

31:49.960 --> 31:53.360
Everything changes in these later Insider builds.

31:53.360 --> 31:55.120
And it's so exciting to watch.

31:55.120 --> 31:56.680
I'm not going to switch to Windows 10.

31:56.680 --> 31:58.800
I'm not going to switch to the Mac.

31:58.800 --> 32:01.720
But it is fun right now.

32:01.720 --> 32:04.520
The platforms are actually getting interesting again.

32:04.520 --> 32:06.560
I happen to think Linux is the best right now.

32:06.560 --> 32:08.920
And now it's letting me play with these other things

32:08.920 --> 32:10.360
occasionally.

32:10.360 --> 32:14.200
But more importantly, I can keep trying out the latest Linux

32:14.200 --> 32:18.020
distributions without wiping my main setup.

32:18.020 --> 32:26.160
And that's where I can fence off all the proprietary crap.

32:26.160 --> 32:29.520
All of the closed source video card drivers,

32:29.520 --> 32:34.800
like for the NVIDIA card, or proprietary games and software,

32:34.800 --> 32:37.160
that's all now in these VMs.

32:37.160 --> 32:41.600
And my desktop is like this pure open source stack.

32:41.600 --> 32:43.500
That's just a rock solid machine.

32:43.500 --> 32:45.500
And if nothing else, that's what I love about it.

32:45.500 --> 32:46.580
It seems like it would work really well

32:46.580 --> 32:48.040
for any sort of appliance, right?

32:48.040 --> 32:49.800
Like maybe if you were going to record a show

32:49.800 --> 32:52.720
and you could just sort of dock your ThinkPad into this setup

32:52.720 --> 32:54.600
and have all the sound devices ready,

32:54.600 --> 32:57.000
software configured in the VM set to go,

32:57.000 --> 32:59.200
and you don't have to fuzz with it.

32:59.200 --> 33:01.960
As we're recording this, we're recording this a little early

33:01.960 --> 33:04.320
because of travel.

33:04.320 --> 33:07.160
Last night, the Linus Tech Tips channel

33:07.160 --> 33:12.280
released a video with something like six editors, one PC,

33:12.280 --> 33:16.960
where they're using this technology with a GUI on top.

33:16.960 --> 33:20.540
They're using Unraid as a KVM management tool.

33:20.540 --> 33:25.360
And they're allocating each developer an SSD,

33:25.360 --> 33:27.840
like 30 gigs of RAM or something like that,

33:27.840 --> 33:30.560
a Titan video card.

33:30.560 --> 33:33.360
And they're essentially setting up one Linux

33:33.360 --> 33:36.120
PC to power six editing stations.

33:36.120 --> 33:38.000
Yeah, it did cost them $100,000.

33:38.000 --> 33:41.280
So it's in Mac Pro price territory.

33:41.280 --> 33:43.520
So my other setup is I recently got,

33:43.520 --> 33:46.480
and I'll have a link to this, a Mantiz eGPU dock.

33:46.480 --> 33:51.240
And this thing's pretty neat because a Mantiz,

33:51.240 --> 33:56.620
it's with a Z, it has not only a full sized PCI slot

33:56.620 --> 34:01.360
for a full graphics card, so I put a AMD 570 in there.

34:01.360 --> 34:05.560
But it also has a SATA enclosure inside,

34:05.560 --> 34:08.800
so you can have a dedicated SATA disk.

34:08.800 --> 34:15.480
It has a USB hub, so it's got, I think, five USB 3 ports.

34:15.480 --> 34:18.160
And it's got gigabit ethernet.

34:18.160 --> 34:22.240
That's everything you need to make a virtual machine

34:22.240 --> 34:24.280
essentially a real PC.

34:24.280 --> 34:26.240
There's really not much fake about it at that point

34:26.240 --> 34:30.520
because I'm using real USB, real ethernet, real graphics,

34:30.520 --> 34:33.320
real physical devices to interact with it.

34:33.320 --> 34:35.520
It's running inside a VM, but it's not really

34:35.520 --> 34:39.640
that much more unusual than a regular machine at that point.

34:39.640 --> 34:42.300
You just happen to be using the CPU virtually.

34:42.300 --> 34:43.520
Everything else is real.

34:43.520 --> 34:45.200
Right, yes, absolutely.

34:45.200 --> 34:48.280
Right, yeah, you're just kind of loaning it some compute.

34:48.280 --> 34:51.640
Yes, and it's all coming in over one Thunderbolt 3

34:51.640 --> 34:54.160
cable, which also, by the way, happens

34:54.160 --> 34:55.880
to supply power to my laptop.

34:55.880 --> 34:59.040
So I'm doing all of this with literally only a single cable

34:59.040 --> 35:00.240
coming out of my laptop.

35:00.240 --> 35:03.320
Now, there's video cable and USB cables and stuff

35:03.320 --> 35:05.720
coming out the back of the eGPU box.

35:05.720 --> 35:09.480
But the laptop, it's one cable, and it does all of this.

35:09.480 --> 35:11.280
But still, shut up and take my money.

35:11.280 --> 35:12.500
That sounds amazing.

35:12.500 --> 35:14.160
It's so great.

35:14.160 --> 35:16.640
It's so fun.

35:16.640 --> 35:18.260
And to really be able to play around

35:18.260 --> 35:23.000
with these operating systems and feel like they're full speed,

35:23.000 --> 35:24.000
I'm never going back.

35:24.000 --> 35:27.240
And I can honestly see myself not really needing

35:27.240 --> 35:29.560
to reload my laptop, as long as the base OS continues

35:29.560 --> 35:30.400
to run fine.

35:30.400 --> 35:32.960
The base OS matters less than ever,

35:32.960 --> 35:36.600
with Docker and containers and this and everything.

35:36.600 --> 35:37.600
I looked last night.

35:37.600 --> 35:41.680
I haven't reloaded my art system in 18 months,

35:41.680 --> 35:42.720
because I don't need to.

35:42.720 --> 35:45.660
Every time I get this itch, I can just spin up a VM

35:45.660 --> 35:48.840
and pass the graphics card through, and it's so good.

35:48.840 --> 35:50.520
Proxmox is another way to do this, right?

35:50.520 --> 35:52.720
Doesn't Proxmox now support PCIe pass-through?

35:52.720 --> 35:56.440
Yeah, so Proxmox just uses KVM under the hood anyway.

35:56.440 --> 35:57.840
And this was a second setup, which

35:57.840 --> 36:00.320
I realized I forgot to talk about.

36:00.320 --> 36:02.600
So in my basement, I have a file server,

36:02.600 --> 36:07.740
which is serving Plex and a whole bunch of other stuff.

36:07.740 --> 36:10.360
I also have a PFSense VM on there.

36:10.360 --> 36:15.560
Now, that VM has a 4 gigabit Intel NIC card,

36:15.560 --> 36:18.400
with two of those ports pass-through.

36:18.400 --> 36:21.200
One plugs into the WAN port on the back of my router,

36:21.200 --> 36:23.120
and the other one plugs into my LAN.

36:23.120 --> 36:25.240
And so I have a fully virtualized PFSense,

36:25.240 --> 36:27.280
and I've been running it now since I moved here,

36:27.280 --> 36:28.920
so since September.

36:28.920 --> 36:31.240
And it's been great.

36:31.240 --> 36:33.860
The only time I've had an issue is when the power's gone out,

36:33.860 --> 36:36.720
and I haven't been home, because my router hasn't rebooted

36:36.720 --> 36:37.680
properly or something.

36:37.680 --> 36:38.760
But that's on the sysadmin.

36:38.760 --> 36:42.200
That's not on the software being a problem.

36:42.200 --> 36:42.800
Right, true.

36:42.800 --> 36:47.420
So yeah, I pass through also to my main file server.

36:47.420 --> 36:49.880
I also pass through three different SATA controllers.

36:49.880 --> 36:53.000
One's an MVME one, and then I have one that has,

36:53.000 --> 36:55.200
I think, 12 disks connected, and another one that

36:55.200 --> 36:58.280
has another four disks connected or something.

36:58.280 --> 37:01.520
So you can really take this technology and run with it.

37:01.520 --> 37:05.100
And if you can think it, you can do it.

37:05.100 --> 37:06.060
You just have to know how.

37:06.060 --> 37:08.440
Right.

37:08.440 --> 37:10.560
Yeah, I liked your note in the show notes, like, hey,

37:10.560 --> 37:13.160
by the way, not a bad way to mine crypto.

37:13.160 --> 37:13.840
Oh, yeah, no.

37:13.840 --> 37:15.840
So when I was getting into Bitcoin mining,

37:15.840 --> 37:19.760
this was when December, what, two years ago?

37:19.760 --> 37:21.720
When Bitcoin was going bonkers, I

37:21.720 --> 37:25.320
built a Bitcoin mining rig with like seven GPUs in it

37:25.320 --> 37:26.280
or something.

37:26.280 --> 37:29.320
Turns out, Windows has a four GPU limit.

37:29.320 --> 37:30.120
So what did I do?

37:30.120 --> 37:33.000
I created two Windows VMs and passed through four GPUs

37:33.000 --> 37:35.920
to each VM, or four and three to each VM,

37:35.920 --> 37:37.640
and got around the problem that way instead,

37:37.640 --> 37:39.520
rather than doing all sorts of crazy registry

37:39.520 --> 37:41.160
hacks that the internet was suggesting.

37:41.160 --> 37:41.880
Problem solved.

37:41.880 --> 37:45.040
I mean, one potential reason you could even

37:45.040 --> 37:48.960
justify installing a video card in the server we have here

37:48.960 --> 37:51.360
at the JB Studio is something else you could do

37:51.360 --> 37:54.920
is run a headless VM of Windows that's accelerated,

37:54.920 --> 37:57.480
and then do steam streaming, and just

37:57.480 --> 37:59.740
pass through a whole bunch of games to all your Linux

37:59.740 --> 38:01.000
boxes on the network.

38:01.000 --> 38:04.080
That works stupidly well, except for one caveat.

38:04.080 --> 38:07.320
You're going to need some kind of a dummy dongle

38:07.320 --> 38:09.480
to go into the HDMI port to trick it

38:09.480 --> 38:10.980
into the correct resolution.

38:10.980 --> 38:14.400
So you can buy these things on Amazon that are 1080p,

38:14.400 --> 38:17.400
like headless, tricky dongle things.

38:17.400 --> 38:18.480
I don't know the name.

38:18.480 --> 38:20.400
It's not technical, is it?

38:20.400 --> 38:22.120
Yeah, but it's been around for a while.

38:22.120 --> 38:24.360
You need them for a lot of Bitcoin mining setups, too.

38:24.360 --> 38:26.720
Yeah, I have a question about this.

38:26.720 --> 38:32.040
So I tried to steam stream from my Windows

38:32.040 --> 38:36.400
pass-through VM to my Linux desktop that was a host,

38:36.400 --> 38:43.440
and it did crash Steam on the host, not on the guest.

38:43.440 --> 38:45.320
Is there anything special that needs

38:45.320 --> 38:48.920
to be done to support this, like do I

38:48.920 --> 38:51.920
need to pass through a discrete NIC,

38:51.920 --> 38:58.800
or does it only work if the disk is fully passed through

38:58.800 --> 39:00.640
and it's got a discrete disk?

39:00.640 --> 39:02.280
Where am I going wrong?

39:02.280 --> 39:04.700
Or is it just that this particular game is just

39:04.700 --> 39:07.800
horribly buggy, which is certainly true?

39:07.800 --> 39:09.000
Games don't have bugs in them.

39:09.000 --> 39:10.480
Who are you kidding?

39:10.480 --> 39:13.000
So there's a couple of ways to skin this turkey.

39:13.000 --> 39:16.280
First of all, I don't know what you've done with your NICs,

39:16.280 --> 39:18.520
but the traditional way is to use

39:18.520 --> 39:22.320
Vert.io to have a 10 gigabit ethernet link

39:22.320 --> 39:23.720
between the host and the guest.

39:23.720 --> 39:25.440
So I'm assuming that's the way you go,

39:25.440 --> 39:27.160
because that's what all the guides do.

39:27.160 --> 39:28.720
You could do what Chris did and pass

39:28.720 --> 39:30.840
through an actual physical NIC, which is also

39:30.840 --> 39:32.720
another way to do it.

39:32.720 --> 39:34.640
But what you might be running into

39:34.640 --> 39:38.600
is the CPU pinning thing that I talked about earlier.

39:38.600 --> 39:41.560
If one or either of the VMs or the host

39:41.560 --> 39:44.840
runs out of enough CPU time, there

39:44.840 --> 39:46.320
can be some contention issues there.

39:46.320 --> 39:49.680
So it's worth pinning those CPU cores.

39:49.680 --> 39:51.440
That is one thing I haven't gotten to yet,

39:51.440 --> 39:53.000
so I will give that a shot.

39:53.000 --> 39:53.800
Same.

39:53.800 --> 39:55.160
Also, something else Drew might consider

39:55.160 --> 39:56.600
is maybe just not doing this setup,

39:56.600 --> 39:58.800
but playing around with something like Looking Glass.

39:58.800 --> 40:02.080
Yeah, so Looking Glass is super duper cool.

40:02.080 --> 40:05.720
So the frame buffer technology that Chris talked about

40:05.720 --> 40:08.160
being potentially added to Mac OS,

40:08.160 --> 40:13.480
this technology was developed by a chap on the Level 1 Tech

40:13.480 --> 40:14.280
Forums.

40:14.280 --> 40:17.200
Gniff, I think, is his moniker.

40:17.200 --> 40:21.400
Wendell and all those guys over on Level 1.

40:21.400 --> 40:25.400
So Looking Glass allows you to capture the frame buffer

40:25.400 --> 40:27.080
output from the HDMI port.

40:27.080 --> 40:29.480
So when Windows renders a frame, it

40:29.480 --> 40:33.160
writes that very short term to a piece of memory.

40:33.160 --> 40:36.400
What Looking Glass does is it hooks into that piece of memory

40:36.400 --> 40:39.560
and makes it available from the guest to the host.

40:39.560 --> 40:41.000
And there's also another patch that

40:41.000 --> 40:42.760
lets you view that frame in a VM.

40:42.760 --> 40:45.560
So you could effectively share this piece of memory

40:45.560 --> 40:48.520
between two VMs via the host, which

40:48.520 --> 40:51.240
is kind of meta and amazing.

40:51.240 --> 40:54.680
And what this allows you to do is capture, basically,

40:54.680 --> 40:58.480
in real time the HDMI output from the guest

40:58.480 --> 41:01.840
and display it in a window on your Linux desktop.

41:01.840 --> 41:02.360
Oh, wow.

41:02.360 --> 41:04.280
So you could effectively marginalize

41:04.280 --> 41:06.760
Windows to be nothing more than just a window.

41:06.760 --> 41:09.400
And no physical monitor, physical keyboard.

41:09.400 --> 41:10.360
Nope.

41:10.360 --> 41:13.400
And the latency is sub-5 milliseconds.

41:13.400 --> 41:16.720
So it's just as good as anything.

41:16.720 --> 41:18.200
And it's pretty amazing.

41:18.200 --> 41:19.960
It's better than some monitors.

41:19.960 --> 41:20.600
Yeah.

41:20.600 --> 41:22.400
Now, really, you can tie all that together

41:22.400 --> 41:23.880
by getting some input in there, too,

41:23.880 --> 41:25.920
with something like Synergy, which the audience tells us

41:25.920 --> 41:28.320
all about all the time, and we never really talk about it.

41:28.320 --> 41:33.400
But Synergy is there's a couple alternatives, too.

41:33.400 --> 41:37.160
But it lets you move a mouse between hosts on your LAN

41:37.160 --> 41:39.960
or the host and the VM.

41:39.960 --> 41:41.040
Yeah.

41:41.040 --> 41:43.120
We talked briefly about keyboard and mice earlier.

41:43.120 --> 41:45.000
So there's the USB switcher option,

41:45.000 --> 41:46.360
which is in the show notes.

41:46.360 --> 41:48.680
There's Synergy, which allows you to just move your cursor

41:48.680 --> 41:50.440
from one window to the next seamlessly

41:50.440 --> 41:52.720
as if it's multiple windows on the same system.

41:52.720 --> 41:55.440
It's like magic, and it's amazing.

41:55.440 --> 41:57.480
There are other ways to do it using EV dev,

41:57.480 --> 42:01.240
so you can actually pass the devices through that way.

42:01.240 --> 42:03.560
Or you can use vrsh attach device,

42:03.560 --> 42:07.880
which is a command that allows you to interact with your VM.

42:07.880 --> 42:09.840
You need to write a couple of XML files,

42:09.840 --> 42:14.080
and I've provided a couple of templates I use from my VFIO

42:14.080 --> 42:16.760
repo on GitHub.

42:16.760 --> 42:18.320
And it's a very simple.

42:18.320 --> 42:21.400
You can just script it and bind it to a hotkey.

42:21.400 --> 42:25.680
So I have a hotkey that changes the monitor inputs using

42:25.680 --> 42:30.640
ddutil and also passes through my keyboard and mouse

42:30.640 --> 42:31.660
at the same time.

42:31.660 --> 42:33.280
And then I have the same thing in Windows,

42:33.280 --> 42:36.400
but it just SSHs into the host remotely

42:36.400 --> 42:37.960
and then undoes what it's just done.

42:37.960 --> 42:40.680
So you have to give it some thought,

42:40.680 --> 42:44.560
but it's not too hard to get a slick setup going.

42:44.560 --> 42:45.320
Yeah.

42:45.320 --> 42:48.000
So Chris, I know that one of the things that you've mentioned

42:48.000 --> 42:53.040
is using macOS in a PCIe pass-through setup.

42:53.040 --> 42:56.760
And would this be a way for me to possibly get away

42:56.760 --> 43:02.160
from having to run macOS as being my daily driver

43:02.160 --> 43:05.720
because I need those Adobe applications?

43:05.720 --> 43:09.760
And then, two, how will that affect those Adobe

43:09.760 --> 43:10.360
applications?

43:10.360 --> 43:15.120
So whenever I go to render out, most often it's 1080p.

43:15.120 --> 43:18.440
But whenever I go to render out 1080p video,

43:18.440 --> 43:20.800
am I going to see a performance hit there on the rendering

43:20.800 --> 43:22.520
side?

43:22.520 --> 43:25.080
How exactly would this work out?

43:25.080 --> 43:28.040
Because I would love to eventually have

43:28.040 --> 43:31.080
a system like this where I have a rock solid Linux

43:31.080 --> 43:34.640
base with VMs and pass-throughs.

43:34.640 --> 43:39.080
I could see this being great for not only my desktop,

43:39.080 --> 43:43.220
my personal desktop, but also my travel work laptop,

43:43.220 --> 43:45.880
just being able to plug in, pass everything through,

43:45.880 --> 43:50.360
get work done, shut it down, or not necessarily

43:50.360 --> 43:53.200
have to feel like I need to reload an old beater machine

43:53.200 --> 43:55.440
to test out maybe a different distro.

43:55.440 --> 43:56.040
Totally.

43:56.040 --> 43:58.120
But be able to play around with it a little bit more.

43:58.120 --> 44:00.440
Well, I'll start with the latter half.

44:00.440 --> 44:01.960
So the last half of the question is,

44:01.960 --> 44:03.280
is it a performance penalty?

44:03.280 --> 44:06.920
I think it depends on how you look at it.

44:06.920 --> 44:09.560
I think to get a Mac that could outperform

44:09.560 --> 44:12.700
what I can match in commodity PC hardware would probably

44:12.700 --> 44:15.280
cost me thousands of dollars.

44:15.280 --> 44:19.440
Could I buy an iMac Pro that would outperform this VM?

44:19.440 --> 44:20.520
Yes.

44:20.520 --> 44:21.680
Could I afford one?

44:21.680 --> 44:22.160
No.

44:22.160 --> 44:23.760
And the other thing that's nice about this

44:23.760 --> 44:28.040
is this eGPU setup also can benefit the host system

44:28.040 --> 44:29.120
down the road if I want.

44:29.120 --> 44:31.120
I could plug this into another computer

44:31.120 --> 44:33.520
and just use it as a video card if I want later.

44:33.520 --> 44:35.760
It doesn't have to be used for VMs.

44:35.760 --> 44:37.320
And obviously, I'm using this hardware

44:37.320 --> 44:39.920
for multiple operating systems, which that wouldn't necessarily

44:39.920 --> 44:42.480
be the case with Mac OS, even with Boot Camp.

44:42.480 --> 44:44.880
You could even bring it to the Sprint or something, right?

44:44.880 --> 44:46.800
And you're sharing your GPU with others.

44:46.800 --> 44:48.520
Yeah, I mean, I've got the Go Bag.

44:48.520 --> 44:50.080
I've got the Virtualization Go Bag.

44:50.080 --> 44:54.040
And I would say that that is going to probably easily

44:54.040 --> 44:56.300
outperform a laptop or a Mac Mini.

44:56.300 --> 44:59.560
So that's where I look at the performance aspect.

44:59.560 --> 45:01.360
And you could go all in, right?

45:01.360 --> 45:03.280
You could get a really expensive PC,

45:03.280 --> 45:05.360
and you could probably allocate just a portion of that

45:05.360 --> 45:06.700
to outpower a Mac, unless you were

45:06.700 --> 45:08.400
looking at the really high end.

45:08.400 --> 45:09.440
Now, the other side of it.

45:09.440 --> 45:12.280
Could you use it to run Final Cut and whatnot?

45:12.280 --> 45:14.720
I haven't actually done a full edit session yet.

45:14.720 --> 45:17.020
But you and I are on the same page here.

45:17.020 --> 45:18.560
This is what I'm thinking is I'd really

45:18.560 --> 45:20.280
like to get back into flying the drone

45:20.280 --> 45:23.080
and doing drone videography and photography.

45:23.080 --> 45:25.240
And as soon as I do that, I'm going to want to edit.

45:25.240 --> 45:26.700
I'm going to want to color correct.

45:26.700 --> 45:28.960
I'm going to want to fix it up a little bit.

45:28.960 --> 45:30.800
And I'm going to want to use Final Cut,

45:30.800 --> 45:34.200
because in my opinion, my experience, it's just the better

45:34.200 --> 45:36.640
editor for online media.

45:36.640 --> 45:38.520
Now, maybe I'll try some other ones over time.

45:38.520 --> 45:41.680
Like, I'm not announcing some intention here.

45:41.680 --> 45:44.520
It's just something that's been in the back of my mind.

45:44.520 --> 45:46.120
I thought, well, OK, let's see.

45:46.120 --> 45:46.720
Let's just see.

45:46.720 --> 45:50.080
Could I, as a thought experiment,

45:50.080 --> 45:53.080
before I go learn Blender or before I go spend

45:53.080 --> 45:56.320
a whole bunch of time with DaVinci or et cetera, et cetera,

45:56.320 --> 46:01.140
could I get Mac OS working in a VM that could actually

46:01.140 --> 46:02.980
be hardware accelerated and use Final Cut?

46:02.980 --> 46:04.320
Because in theory, I could easily

46:04.320 --> 46:08.440
buy a video card that's nicer than 90% of the Mac video cards

46:08.440 --> 46:10.880
that you get when you buy a Mac.

46:10.880 --> 46:15.240
And to that end, there are surprisingly more and more

46:15.240 --> 46:18.520
guides and systems to get Mac OS,

46:18.520 --> 46:23.660
even the latest betas of Catalina, running under VM.

46:23.660 --> 46:27.920
So I would say it's like hackintoshing,

46:27.920 --> 46:31.080
but it's like the most Mac way possible to hackintosh,

46:31.080 --> 46:33.720
because you have a known set of hardware

46:33.720 --> 46:35.940
that you have a known set of drivers for.

46:35.940 --> 46:39.140
So it's like how Apple develops Mac OS for the Mac.

46:39.140 --> 46:40.680
It's like hackintoshing that way.

46:40.680 --> 46:44.820
It's becoming like the go-to way to run Mac OS really easily

46:44.820 --> 46:46.060
on PC hardware.

46:46.060 --> 46:49.320
It's sort of the most reliable way to hackintosh right now.

46:49.320 --> 46:50.440
Does that make sense?

46:50.440 --> 46:51.160
There's some risk.

46:51.160 --> 46:53.800
I mean, it's not a Mac, but it's probably the most solid.

46:53.800 --> 46:57.320
And with Apple seemingly adding VertIO driver support

46:57.320 --> 47:01.720
to later versions of Mac OS, it may be even easier soon.

47:01.720 --> 47:03.480
There's a big caveat there, isn't there?

47:03.480 --> 47:05.440
Don't you need a Mac to create the install

47:05.440 --> 47:06.760
media in the first place?

47:06.760 --> 47:08.280
No.

47:08.280 --> 47:09.200
Not anymore.

47:09.200 --> 47:11.120
You used to could, as my kids would say.

47:11.120 --> 47:14.400
But have you seen this simple Mac KVM guide going around?

47:14.400 --> 47:14.880
Nope.

47:14.880 --> 47:17.160
You're going to tell me all about it now, though, right?

47:17.160 --> 47:17.840
Yes.

47:17.840 --> 47:20.520
We'll have a couple of links in the show notes.

47:20.520 --> 47:21.720
It's pretty brilliant.

47:21.720 --> 47:25.560
So there is a little tomfoolery going on to make it possible.

47:25.560 --> 47:28.360
The author of this script, which is an open source script,

47:28.360 --> 47:30.440
I think, I have not looked into it,

47:30.440 --> 47:33.960
but I think is presenting to the Apple servers

47:33.960 --> 47:40.680
a Apple user agent ID, because it's an HTTP request.

47:40.680 --> 47:43.360
And I think this is maybe the only tomfoolery happening here.

47:43.360 --> 47:46.760
But what you have is he's got two scripts, basic.sh,

47:46.760 --> 47:49.520
and then there's a second script that essentially launches

47:49.520 --> 47:52.480
the VM for you and does some of the pass-through commands.

47:52.480 --> 47:56.800
And what basic.sh does is it says,

47:56.800 --> 47:59.080
hey, what version of Mac OS would you like?

47:59.080 --> 48:03.320
And you just add it with a TAC Catalina, TAC Mojave,

48:03.320 --> 48:04.440
or whatever.

48:04.440 --> 48:06.880
And then it goes and it knocks on Apple's recovery server

48:06.880 --> 48:10.320
doors and says, hi, I'm a broken iMac,

48:10.320 --> 48:14.120
and my user needs to reload their operating system.

48:14.120 --> 48:16.400
Can I stream the installer from you, please?

48:16.400 --> 48:20.200
And it says, OK, here's the URL on the Akamai CDN.

48:20.200 --> 48:23.080
We'll blast you those packets as fast as humanly possible,

48:23.080 --> 48:25.320
or actually electronically possible.

48:25.320 --> 48:27.320
And so it tells the recovery service

48:27.320 --> 48:28.960
that you're a broken iMac.

48:28.960 --> 48:31.520
And you can then, without ever having

48:31.520 --> 48:35.960
to download from the Mac store and flash a USB disk

48:35.960 --> 48:39.480
or anything, it'll get you the recovery ISO.

48:39.480 --> 48:41.840
Then you boot that in the VM, and it just pulls down

48:41.840 --> 48:43.520
the installer like a net install would.

48:43.520 --> 48:46.080
Does it work with modern Nvidia GPUs?

48:46.080 --> 48:50.240
Because Apple haven't shipped 10 series, have they?

48:50.240 --> 48:51.960
Now, your mileage there is going to vary.

48:51.960 --> 48:55.960
This is that fun corner of Hackintosh, isn't it?

48:55.960 --> 48:58.280
Yeah, you're going to have a much better time with an AMD

48:58.280 --> 48:58.880
graphics card.

48:58.880 --> 49:03.040
Is that the same for AMD and Intel

49:03.040 --> 49:06.200
as far as being supported by Hackintoshing?

49:06.200 --> 49:08.800
See, this is where doing it in a VM

49:08.800 --> 49:11.200
actually makes things a little easier,

49:11.200 --> 49:14.000
because that stuff is a little more abstracted.

49:14.000 --> 49:15.920
It's just standard VM stuff at that point.

49:15.920 --> 49:18.880
And so it just looks like a regular Intel system

49:18.880 --> 49:20.200
or whatever to the Mac OS.

49:20.200 --> 49:23.520
So it doesn't care about the underlying chip architecture

49:23.520 --> 49:24.020
at all?

49:24.020 --> 49:27.720
No, not really, as long as your CPU supports all the stuff.

49:27.720 --> 49:30.920
Now, to be clear, I have run into issues with networking

49:30.920 --> 49:31.720
support and whatnot.

49:31.720 --> 49:34.460
I'm not here proclaiming that it works flawlessly yet.

49:34.460 --> 49:36.800
I've gotten close.

49:36.800 --> 49:38.680
But I have not gotten it all working yet.

49:38.680 --> 49:42.000
I have not gotten through a full test of Final Cut yet.

49:42.000 --> 49:44.040
I have not brought in 4K footage.

49:44.040 --> 49:45.100
So it's up in the air.

49:45.100 --> 49:47.320
I have gotten Linux and Windows VMs.

49:47.320 --> 49:49.760
Those are my priority.

49:49.760 --> 49:52.360
And no surprise here, guess what operating system

49:52.360 --> 49:55.240
works the best, Linux.

49:55.240 --> 49:57.440
I actually now have decided that I'm

49:57.440 --> 49:59.840
going to do all of my gaming in a VM.

49:59.840 --> 50:05.400
I'll just have a VM image, or actually this SSD disk,

50:05.400 --> 50:07.280
if I can say that, this SSD disk that's

50:07.280 --> 50:11.960
in my eGPU is just going to be loaded with a VM that's

50:11.960 --> 50:14.520
got all my Steam games and all my GOG games installed

50:14.520 --> 50:16.780
and all my Lutris games always installed

50:16.780 --> 50:19.700
with all of the proprietary graphics drivers installed.

50:19.700 --> 50:22.440
I hook that up to my base system, and I start playing.

50:22.440 --> 50:23.600
No more downloading.

50:23.600 --> 50:25.080
Maybe I have to patch a little bit.

50:25.080 --> 50:26.000
No big deal.

50:26.000 --> 50:29.240
Linux is such a great guest in this setup.

50:29.240 --> 50:32.120
So it's like, even if you never have

50:32.120 --> 50:35.160
any intention of running Windows or Mac OS,

50:35.160 --> 50:37.720
it's absolutely worth it just to play with Linux.

50:37.720 --> 50:40.720
I thought, though, too, Wes has talked about this a little bit

50:40.720 --> 50:42.120
on and off in the past.

50:42.120 --> 50:44.720
But since we're doing different crazy great ways

50:44.720 --> 50:46.900
to run Linux and other operating systems

50:46.900 --> 50:49.340
without having to nuke your install,

50:49.340 --> 50:51.760
Wes has got a clever way that he likes to run machines.

50:51.760 --> 50:53.760
I know you've played around with a few different things.

50:53.760 --> 50:55.760
What do you want to share with the class today, Wes?

50:55.760 --> 50:57.260
Oh, man, there's just so many ways.

50:57.260 --> 51:00.460
I was disappointed to hear that some of this pass-through stuff

51:00.460 --> 51:04.800
might not work with partitions because just having

51:04.800 --> 51:08.160
a separate partition can be an easy way down that road

51:08.160 --> 51:09.640
where you can boot into something,

51:09.640 --> 51:13.600
or it's really easy to use virtualization to just attach

51:13.600 --> 51:15.000
to an existing partition.

51:15.000 --> 51:16.620
And as long as you're not accessing that

51:16.620 --> 51:20.160
or have it mounted in the host, then away you go.

51:20.160 --> 51:22.240
I love that just because anytime I

51:22.240 --> 51:26.220
can use the host system to install a new operating system

51:26.220 --> 51:29.040
without having to reboot and go through that painful cycle

51:29.040 --> 51:30.800
of disconnecting everything I'm doing

51:30.800 --> 51:33.400
or having to go get a second computer,

51:33.400 --> 51:34.800
I just don't want to be bothered.

51:34.800 --> 51:38.080
You know, I do kind of walk kind of a happy medium here.

51:38.080 --> 51:43.320
I'm passing through ISO images, and I am doing a Cal file.

51:43.320 --> 51:46.360
But I also, for the Windows installation,

51:46.360 --> 51:48.880
before I wanted to get everything all plugged in

51:48.880 --> 51:52.180
and everything, I just clicked in the VM

51:52.180 --> 51:53.760
and had it grab my mouse and keyboard.

51:53.760 --> 51:55.360
I actually did the whole Windows install

51:55.360 --> 51:59.280
with a laptop mouse and keyboard on the laptop screen using,

51:59.280 --> 52:01.200
it's like a VN, they call it Spice,

52:01.200 --> 52:02.740
where you can just remote view.

52:02.740 --> 52:05.040
I did that, and then once the installation was done,

52:05.040 --> 52:07.300
I hooked up all the physical hardware.

52:07.300 --> 52:08.880
So I kind of do like a balance there.

52:08.880 --> 52:11.360
Windows can actually boot from a raw image

52:11.360 --> 52:13.800
as long as you make it in the VHD format.

52:13.800 --> 52:18.380
So if you already had, say, a shared NTFS drive,

52:18.380 --> 52:20.280
that's one way you can easily do it from a file

52:20.280 --> 52:22.320
if you don't want to muck about with separate drives

52:22.320 --> 52:23.840
or even a separate partition.

52:23.840 --> 52:25.880
So that's nice, too, is if you're clever about it,

52:25.880 --> 52:29.240
you can often boot into files, especially on Linux,

52:29.240 --> 52:32.200
because you can make Linux do anything.

52:32.200 --> 52:33.520
You can have a virtual machine image,

52:33.520 --> 52:34.960
set it up in a virtual machine,

52:34.960 --> 52:38.000
and then if you play around with your init RAM FS

52:38.000 --> 52:40.160
or your grub setup a little bit,

52:40.160 --> 52:41.600
you can reboot right into that

52:41.600 --> 52:43.700
and not have to mess with having a separate system.

52:43.700 --> 52:45.000
You just got to know how, huh?

52:45.000 --> 52:46.360
You just got to know how.

52:46.360 --> 52:48.280
So that's something that I use quite heavily.

52:48.280 --> 52:50.820
I actually switched away from grub to system de-boot

52:50.820 --> 52:51.720
on my host.

52:51.720 --> 52:53.800
It makes it a lot easier to specify

52:53.800 --> 52:56.280
which particular kernel I'm booting into

52:56.280 --> 52:58.360
or things like that than I found grub.

52:58.360 --> 53:00.900
So give system de-boot a try.

53:00.900 --> 53:02.420
Oh, yeah, it's fantastic.

53:02.420 --> 53:04.560
And the configuration files are easy to read

53:04.560 --> 53:06.080
and easy to modify.

53:06.080 --> 53:06.920
Very good.

53:06.920 --> 53:08.680
And then I suppose for something completely different,

53:08.680 --> 53:09.920
if you don't feel like virtualizing,

53:09.920 --> 53:11.000
there's always kexec,

53:11.000 --> 53:12.960
which we've talked about that before, too,

53:12.960 --> 53:16.340
which is sort of like live switching to a whole new kernel.

53:16.340 --> 53:17.820
Wes likes to make it extra spicy.

53:17.820 --> 53:21.240
By then, when you kexec, you also are running his,

53:21.240 --> 53:23.000
he runs his disk out of RAM.

53:23.000 --> 53:25.120
So it's like the whole thing is just like.

53:25.120 --> 53:28.180
Right, I mean, if you're not sure about a distribution,

53:28.180 --> 53:29.320
you just want to give it a try.

53:29.320 --> 53:31.640
You really don't want to commit.

53:31.640 --> 53:33.480
That's about as close as I can get.

53:33.480 --> 53:35.160
You could just, the ultimate rage quit,

53:35.160 --> 53:36.160
you turn off the power button

53:36.160 --> 53:37.880
and the entire thing is erased.

53:37.880 --> 53:40.560
You know, it's gone, it's so satisfying.

53:40.560 --> 53:42.320
I wonder how fast Windows would feel

53:42.320 --> 53:43.720
if I ran it from RAM.

53:43.720 --> 53:44.600
I might try that.

53:44.600 --> 53:45.420
Oh, you should.

53:45.420 --> 53:47.520
I think Windows Update would still take forever.

53:47.520 --> 53:48.620
I'll tell you what.

53:48.620 --> 53:50.360
Oh, that's been one thing

53:50.360 --> 53:52.600
that I have just shaken my head at.

53:52.600 --> 53:55.480
They've tried to make it better in the later builds,

53:55.480 --> 53:57.820
but what they did is they added like six more screens

53:57.820 --> 53:58.660
of options.

53:58.660 --> 54:00.720
That's a lot.

54:00.720 --> 54:03.320
I really just appreciate package managers after that.

54:03.320 --> 54:04.920
All right, well,

54:04.920 --> 54:07.320
I know we just kind of given you the basics to get started,

54:07.320 --> 54:09.480
but this is one of those things you'll have to go deep dive.

54:09.480 --> 54:11.480
We'll have some additional resources in the show notes

54:11.480 --> 54:12.700
and a surprise here.

54:12.700 --> 54:13.860
Shocker, everybody.

54:14.920 --> 54:17.440
The Arch Wiki is also a great resource.

54:17.440 --> 54:18.720
Who would have known?

54:18.720 --> 54:20.720
We'll be back with a regular format

54:20.720 --> 54:24.640
at our regularly scheduled live time over at jblive.tv.

54:24.640 --> 54:29.640
Right here next Tuesday.

54:54.640 --> 54:59.640
Oh, man.

55:01.800 --> 55:05.520
I apparently in last week's code radio,

55:05.520 --> 55:08.240
I leaked what the next free study groups are

55:08.240 --> 55:10.480
on Linux Academy.

55:10.480 --> 55:11.920
I didn't mean to.

55:11.920 --> 55:14.200
I guess I did talk about it

55:14.200 --> 55:15.520
before it was public on there.

55:15.520 --> 55:16.360
Oops.

55:16.360 --> 55:17.360
Well, I don't know.

55:17.360 --> 55:19.440
You know, this is one of those episodes

55:19.440 --> 55:20.840
I have been wanting to do PCI.

55:20.840 --> 55:21.680
I know I said this beginning,

55:21.680 --> 55:23.800
but I really been wanting to do a PCI pass-through

55:23.800 --> 55:26.480
since it was ever, ever a thing.

55:26.480 --> 55:28.280
And it always seemed,

55:28.280 --> 55:31.220
it always seemed like just like way too much work

55:31.220 --> 55:32.320
to get started with.

55:32.320 --> 55:33.380
Yes.

55:33.380 --> 55:34.400
I've been following it too, right?

55:34.400 --> 55:36.040
Cause it's always been that sort of holy grail,

55:36.040 --> 55:37.760
like, oh, maybe you need windows.

55:37.760 --> 55:40.180
You don't want to deal with separate machines or rebooting.

55:40.180 --> 55:42.560
You can have everything and I guess you can.

55:42.560 --> 55:43.960
Yeah, I think it's totally worth it.

55:43.960 --> 55:45.720
And it's not that bad anymore.

55:45.720 --> 55:47.800
If you've got modern hardware, that's really the keys.

55:47.800 --> 55:50.520
You gotta happen to have some current stuff,

55:50.520 --> 55:53.200
but eventually everybody's going to have this stuff.

55:53.200 --> 55:54.960
And then we're really going to be cooking with gas.

55:54.960 --> 55:56.320
Like it's going to be,

55:56.320 --> 55:58.400
I'm just really excited about the potential.

55:58.400 --> 56:01.120
And now that I have an Nvidia setup and an AMD setup,

56:01.120 --> 56:02.640
I feel like I'm going to really be able to get to play.

56:02.640 --> 56:04.160
Like neither one of the setups

56:04.160 --> 56:05.720
are particularly high end graphics wise,

56:05.720 --> 56:07.160
but there's still so much to learn

56:07.160 --> 56:09.880
and see how systems respond with different graphics stacks.

56:09.880 --> 56:13.080
And that's going to be a particular area of interest

56:13.080 --> 56:14.040
for me, I think.

56:14.040 --> 56:17.720
I've just dropped into Slack a link to a file

56:17.720 --> 56:21.600
that might help your networking issue on OS 10.

56:21.600 --> 56:25.840
This BRNetFilter thing needs to be called by sysctl

56:25.840 --> 56:29.840
at boot time to allow the IP tables, I think,

56:29.840 --> 56:30.720
to be modified.

56:30.720 --> 56:34.360
So I think my Windows VM wouldn't get an IP address

56:34.360 --> 56:35.720
until I enabled this.

56:35.720 --> 56:37.520
So that's worth considering.

56:37.520 --> 56:41.960
It's in that archvfio repo that's on my GitHub.

56:41.960 --> 56:42.800
Of course.

56:42.800 --> 56:43.640
And in the show notes.

56:43.640 --> 56:45.600
Yeah, I was going to say.

56:45.600 --> 56:51.720
OS, you're on top of it.


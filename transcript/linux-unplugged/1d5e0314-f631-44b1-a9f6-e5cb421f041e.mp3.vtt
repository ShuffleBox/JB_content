WEBVTT

00:00.000 --> 00:05.560
This is Linux Unplugged Episode 39 for May 6, 2014.

00:30.000 --> 00:40.560
Welcome to Linux Unplugged, your weekly Linux talk show that's still not exactly sure what

00:40.560 --> 00:46.480
the Internet of Things even is. My name is Chris. My name is Matt. Hey there, Matt. Episode 39,

00:46.480 --> 00:51.560
buddy. Forty's just around the corner. Are you feeling it? I am feeling it. Yeah, now, it feels

00:51.560 --> 00:56.240
like I don't want to brag too much because this week Coda Radio just said episode 100, which is

00:56.240 --> 01:01.480
pretty exciting. So, congrats to my co-host over there, Mr. Dominic, for 100 weeks in a row, too,

01:01.480 --> 01:07.200
which is pretty awesome. Now, Matt, coming up on this week's show, there's been a couple of things

01:07.200 --> 01:11.600
that have been sort of gnawing away at the back of me. We look at the Linux landscape in the

01:11.600 --> 01:17.760
context of where things are going to be in a few years, and there's a lot of change. You've got the

01:17.760 --> 01:21.980
number one Linux desktop, Ubuntu is going to make huge changes over the next few years, roll out new

01:21.980 --> 01:27.640
applications based on QT. You've got Wayland that's going to be in the market at the same time that

01:27.640 --> 01:32.840
Mir and X11 are going to be in the market. That's going to be a sort of fragmentation. But then,

01:32.840 --> 01:37.560
also, you've got this other end of it, this Internet of Things. It's going to be a bunch of

01:37.560 --> 01:43.320
little devices from light bulbs that run Linux, don't laugh, that's actually a thing, to devices

01:43.320 --> 01:47.680
in your kitchen that control your toaster, all running Linux, all different iterations of Linux,

01:47.680 --> 01:52.280
but none of them quite compatible with each other. There's a lot of types of fragmentation that are

01:52.280 --> 01:55.640
coming up, so I want to talk about some of those this week, identify some of the ones that are

01:55.640 --> 02:00.480
concerning us, and then what I'd love to kick around with the Mumble Room is, hey, what would

02:00.480 --> 02:06.280
we like to see the outcome be? What would we like to do? If we could just wave a magic wand and the

02:06.280 --> 02:10.580
future turned out in a certain way so that way applications could be written for Linux desktop

02:10.580 --> 02:14.400
and it wouldn't matter what distribution you're on, things like client-side decoration could just

02:14.400 --> 02:19.280
be magically cleared up. The QT GTK war automatically sorts itself out. Like, if we could

02:19.280 --> 02:23.080
just pick from these things, what would we pick and where would that leave us? I want to talk

02:23.080 --> 02:28.440
about that in today's show. We'll do that in just a little bit. But Matt, there's something I like

02:28.440 --> 02:33.840
to follow up on from time to time. Yeah, that's a Valve update, Matt. We got to do a little Valve

02:33.840 --> 02:39.520
update because I think this is, the work that Valve is doing is one of those interesting stories

02:39.520 --> 02:43.360
in the Linux landscape where you have a vendor who's working on a lot of open source

02:43.360 --> 02:48.320
infrastructure. The end result is it makes their commercial platform more successful. It makes

02:48.320 --> 02:52.600
they sell more closed source software, some of which or most of which is even wrapped in DRM.

02:52.600 --> 02:58.680
But to accomplish that ends, the means is improving open source. And I think this is a

02:58.680 --> 03:03.280
really interesting dynamic for us to watch. So our Valve update this week is a story that

03:03.280 --> 03:09.880
ran on Ferronix yesterday. Improvements to MESA are MESA done by Lenard G and sponsored by Valve

03:09.880 --> 03:17.240
are now an open source patch set. Get ready for this. It's a total of 21 patches that these changes

03:17.240 --> 03:22.080
reduce the startup time of applications that can handle deferred compilation of GSL shaders. Like,

03:22.080 --> 03:26.200
okay, that's interesting. That's good. In practice, after these patches are applied,

03:26.200 --> 03:32.920
a game like Dota 2 is running with a 20 second reduction in loading times across the board for

03:32.920 --> 03:38.480
Intel Power Gigabyte Bricks Pro systems. Valve's already merging those patches into the SteamOS

03:38.480 --> 03:42.320
MESA branch and will be shipping as part of their next driver release cycle for SteamOS,

03:42.320 --> 03:49.320
which will be open source. This is the third or fourth story now we've done where there's some

03:49.320 --> 03:56.520
boring piece of underlying code that was apparently just ripe for the optimization. And now we all

03:56.520 --> 04:00.840
benefit from that. And I think this, what we're going to be talking about today is going to be a

04:00.840 --> 04:05.640
lot of commercial companies that are building on the backs of open source. But when it's done right,

04:05.640 --> 04:08.720
and I don't want to sit here and just be Mr. Valve fanboy, but when it's done right,

04:08.720 --> 04:14.600
like Valve is doing right here, everybody benefits. Well, and it seems like they really nailed it

04:14.600 --> 04:18.520
because I mean, like, you know, at first pass, someone hears this and they think, eh, whoop-de-do,

04:18.520 --> 04:22.120
they're doing something, whoop-de-do, you know, Valve does stuff kind of thing, right? And then

04:22.120 --> 04:25.080
you actually see the benefit of it and you're like, you kind of do a double-take and think,

04:25.080 --> 04:29.240
oh, hey, whoa, now I care. 20 second reduction in load time is like something that I can actually

04:29.240 --> 04:33.880
grok. I understand what that means. And I want that on my games. Definitely. Pretty cool.

04:33.880 --> 04:38.680
Definitely. It's all early days, but it's just, I don't know. It's the right direction. I really

04:38.680 --> 04:42.760
like what we're seeing. I really like the way Valve is going about this. And I just kind of

04:42.760 --> 04:47.800
want to highlight it because I want to encourage it. Before we get to our first email, we got a

04:47.800 --> 04:52.760
Magia question that came in, and he's going to put us to task, Matt. He's going to stick it to us,

04:52.760 --> 04:57.880
and rightfully so, I will add. Magia has been missing from the discussion a lot,

04:57.880 --> 05:01.480
so Aaron's going to talk to us about that. But first, I want to thank our first sponsor this

05:01.480 --> 05:05.480
week, and that is Ting. What is Ting? Ting is mobile. That makes sense. Ting is my mobile

05:05.480 --> 05:09.000
service provider and Matt's mobile service provider. And this is why I'm going to tell

05:09.000 --> 05:12.600
you about them right here right now, because you've got to know about Ting. Here's the best

05:12.600 --> 05:19.160
part. No contracts, no early termination fees. You only pay for what you use. You only pay for

05:19.160 --> 05:23.080
what you use. It's a flat $6 a month, and then it's your individual usage on top of that. Ting

05:23.080 --> 05:26.280
takes your messages, your megabytes, your minutes. They add them all up at the end of the month.

05:26.280 --> 05:31.880
Whatever bucket you fall into, that's what you pay. Included hotspot tethering. Also included,

05:31.880 --> 05:37.160
no hold customer support. And they have some serious devices. But what is also great about

05:37.160 --> 05:42.440
Ting is they do some fun initiatives. They've just launched their Drop Your Data Challenge.

05:42.440 --> 05:46.920
This is one of those things that I think is brilliant, because not only is it, as a nerd,

05:47.480 --> 05:51.640
I'm ready to take on the challenge of figuring out how to game the system and get my data usage

05:51.640 --> 05:56.440
down. I'm all about that anyway, save me some money. This is one of those challenges that you

05:56.440 --> 06:01.000
save money while you're doing it, but they're also opening this up to non-Ting customers.

06:01.000 --> 06:04.760
You don't have to be a Ting customer to participate. In fact, non-Ting customers can

06:04.760 --> 06:11.720
take the Data Savings Challenge and be entered a random drawing to win $1,000 cash, or three

06:11.720 --> 06:15.960
people will get $150 of Ting credits. Now, of course, Ting customers, you can save even more

06:15.960 --> 06:19.960
while you're doing this by bringing your data usage down. And if you're not yet a Ting customer,

06:19.960 --> 06:23.880
in addition to being entered to win a random prize, they'll give you a Ting credit for the

06:23.880 --> 06:28.680
percentage of your data savings from week to week to help you make the move even better.

06:28.680 --> 06:36.120
So, in other words, if you cut your data usage by 74%, then Ting will give you a $74 Ting credit.

06:36.120 --> 06:39.640
So they're already starting up. You can go get it right now. They got an app you can use to track

06:39.640 --> 06:45.960
this for you, or they'll take the native stat tracking in the Android or iOS system settings.

06:45.960 --> 06:48.920
Pretty nice. They got a couple apps they'll recommend. And they've even got a Google

06:48.920 --> 06:52.600
calendar where you can add to your calendar for the length of the Drop Your Data Challenge.

06:52.600 --> 06:56.680
If you already want to do this anyways, because why not? You drop your data usage,

06:56.680 --> 07:00.360
you're going to save money, you're saving battery, you're lowering your bill, and you have an

07:00.360 --> 07:04.600
opportunity to win. So go over to linux.ting.com. That's where you can find out more, and that's

07:04.600 --> 07:10.200
where you can get started, linux.ting.com. Also, if you want to make the switch, linux.ting.com

07:10.200 --> 07:15.240
will take $25 off your first device. If you've already got a device, like the HTC One, or maybe

07:15.240 --> 07:20.200
you've got an iPhone 4, 4S, or 5, maybe you've got an S3, an S4 you want to bring over, well,

07:20.200 --> 07:25.640
then that linux.ting.com URL will just take $25 off your first month of Ting. Or actually,

07:25.640 --> 07:30.040
however long the $25 lasts. Since it's only $6 a month, it might last you a little while.

07:30.040 --> 07:34.680
linux.ting.com. And a really big thank you to Ting. And go try out their Drop Your Data Challenge.

07:34.680 --> 07:38.680
You can find out more at ting.com slash blog. Go to linux.ting.com. First that,

07:38.680 --> 07:44.120
let them know you appreciate them supporting the show. Okay, Matt. Let's get honest. Let's

07:44.120 --> 07:49.080
fess up. Let's read Aaron's email about Magia. Okay. He says, hi. I'm a follower of Last and

07:49.080 --> 07:53.640
Unplugged. I'd like to see some discussion of Magia. It seems to be a popular distro that

07:53.640 --> 07:58.040
follows free software principles, a la Debian. Currently, I'm running Fedora 20. I'm wondering

07:58.040 --> 08:04.040
how or if these distros compare. Thanks, and keep up the great work. So I'm going to be honest right

08:04.040 --> 08:09.640
now. For some reason, I have not been particularly interested in checking out the more recent

08:09.640 --> 08:13.880
Magia builds. Have you downloaded an ISO and thrown it on a rig at all, Matt?

08:13.880 --> 08:19.320
Honestly, never had a real reason to. I mean, it's great. I'm sure it's fine.

08:19.320 --> 08:24.120
I have a passing curiosity, but I don't. So Mumble Room, I'll open up to you. Anybody in here want to

08:24.120 --> 08:28.200
take the Magia defense position or maybe why they're not interested in Magia? Because I'll

08:28.200 --> 08:31.560
tell you where I'm sitting at Mumble Room is I'm kind of like, okay, I love that they're still

08:31.560 --> 08:37.000
going. That's great. Bore power to them. But I feel like my needs between all the other distros

08:37.000 --> 08:41.240
are pretty much already solved. What is Magia offering me that I don't already have anywhere

08:41.240 --> 08:48.280
else? I think it's a good somewhere else to go if you don't like what options you have on offer.

08:48.280 --> 08:53.800
There's a guy I met at a recent conference who said he left and he contributes to Magia because

08:53.800 --> 09:00.440
he wasn't accepted in whatever other community that he was trying to contribute to. Are you

09:00.440 --> 09:04.760
saying it's like a Linux refugee camp? I think so, yeah. But in a good way.

09:04.760 --> 09:12.040
Yeah, pretty much. If you don't want to use OpenSUSE because it's all the Microsoft

09:12.040 --> 09:15.400
backing and all that stuff, you just don't want to use Fedora and then there's Magia.

09:17.640 --> 09:22.440
Magia has an awesome software manager. It's just by default, they have some weird things

09:22.440 --> 09:26.680
that's going wrong with it. But the software manager is cool because you can get all different

09:26.680 --> 09:33.800
repos and there's options of 40 to 50 repos that you can activate. But by default, they're all

09:33.800 --> 09:39.480
disabled, which I find weird. Are they still using URPMI?

09:41.000 --> 09:41.800
Do you know? I'm pretty sure, yeah.

09:44.200 --> 09:49.320
So it's pretty cool that you can do that. You can easily go from beta packages to stable packages

09:49.320 --> 09:53.480
and stuff like that just by getting a checkbox. But it's annoying to set up in the first place,

09:53.480 --> 09:56.520
but once you get it set up, it's very nice. Yeah, I do like that.

09:57.080 --> 10:02.360
Also, Magia has the closest thing to Yast that you can get outside of OpenSUSE.

10:02.360 --> 10:05.560
Right. Is it still called DracConfig?

10:06.520 --> 10:07.720
Oh, the old Mandrake, yeah.

10:08.920 --> 10:15.000
Here's a good question. Does Magia have something similar to the OBS or the AUR?

10:16.040 --> 10:17.080
Not really. No.

10:18.520 --> 10:20.680
Repos are kind of limited too. It's the only thing.

10:22.520 --> 10:27.880
Technically, in a way, they have an AUR because all the beta repositories that they support,

10:27.880 --> 10:32.120
but it's not like in an official one place you can go to to get everything and have

10:32.120 --> 10:38.440
any kind of writing system. And to be honest, I kind of am really annoyed by Magia's packaging

10:38.440 --> 10:43.960
structure because if you don't have Magia installed, you can't really tell what versions

10:43.960 --> 10:48.520
they have of anything because their packages are all listed out on mirrors. So you have to find

10:48.520 --> 10:52.120
a mirror that has the files. Yeah, yeah. Forget that.

10:52.840 --> 10:55.320
Yeah, from a developer standpoint, that's a nightmare.

10:56.040 --> 10:59.400
From a user standpoint, that's a nightmare. I want to know what I'm using or what I'm going

10:59.400 --> 11:03.560
to be using rather. Well, once you have it installed, it's fine. You can easily just open

11:03.560 --> 11:08.920
up the software manager or whatever they call it. I forgot, but it's nice, but you have to

11:08.920 --> 11:12.040
install it first. So I'm looking to see what dependence they have by default.

11:12.040 --> 11:17.640
I have to load up Magia before I can find out. Interesting. Okay. Well, good info. And I think

11:17.640 --> 11:22.120
it's something that Matt and I, it's our nature to keep an eye on these kinds of things. So we'll

11:22.120 --> 11:26.280
watch it. And when there's something there that sort of tickles our fancy, we might jump in and

11:26.280 --> 11:31.080
do a review at some point. I don't think we have any immediate plans, but it's not something we

11:31.080 --> 11:35.080
would never do. It's something we would consider when there's a moment and it seems like the right

11:35.080 --> 11:36.440
time. Definitely.

11:36.440 --> 11:40.840
Corky writes in. He had an idea for a recap episode. I'm not so sure about that, but he said,

11:40.840 --> 11:46.840
I came across your episode from April 14th, 2013 about Linux's use as a media creator.

11:47.560 --> 11:52.920
You criticized Linux's lack of tools for use for you and it meant you needed to edit on a

11:52.920 --> 11:58.200
Hackintosh. Well, a year has gone by and a lot has changed since then. Perhaps a recap episode

11:58.200 --> 12:02.360
would be a good idea. You mentioned tools such as Telestream. I know quite a lot's changed. So

12:03.400 --> 12:10.920
an update. I can give them one right now. It still sucks. Honestly. And I do edit stuff on

12:10.920 --> 12:19.480
Linux now. Yeah. There's tools, right? There's tools. And here's my new philosophy that I'm

12:19.480 --> 12:27.000
coming at this. I got a new angle for solving this problem, Matt. One is Rekai works with us

12:27.000 --> 12:34.360
now and he's now taken over the editing. So that's taken that off my plate. So that's really nice.

12:34.360 --> 12:40.600
And what I've been thinking about doing as time moves on is sort of building up a kind of a mobile

12:40.600 --> 12:46.680
setup. And that would entail in itself, if I'm out on the road and things like that, its own separate

12:46.680 --> 12:52.120
workflow anyways. And it seems like the time to switch over and, you know, I talked a lot with

12:52.120 --> 12:56.440
Noah from who joined us for Linux Fest about this. Maybe the time to switch over to Lightworks,

12:56.440 --> 13:01.640
for example, for editing is the time when I'm already setting up a new workflow anyways. And

13:01.640 --> 13:07.400
now that I'm not handling the day to day show post-production, I can kind of zoom out a little

13:07.400 --> 13:15.160
bit and look at all of my options and I can now afford to sort of kill time trying out different

13:15.160 --> 13:20.760
stuff and don't have to worry about interrupting the flow of every single show. And so I'm excited

13:20.760 --> 13:26.040
about the opportunity to kind of build a new workflow and then maybe one day that workflow

13:26.040 --> 13:32.280
will become competent and inclusive enough that it could replace the old workflow as sort of a

13:32.280 --> 13:36.120
wholesale upgrade at some point when all the pieces are there. Now on the back end, some of

13:36.120 --> 13:40.680
the changes that have already happened with the new studio move is Rekai has written this great

13:40.680 --> 13:46.680
script that automates a lot of the encoding and tagging process that I have done that at different

13:46.680 --> 13:51.400
points but had sort of just abandoned my automation and was doing it all manually by hand. And the

13:51.400 --> 13:55.320
great thing about that system is it's taking that encoding process and that's completely

13:55.320 --> 13:59.640
portable. That can run on a Mac if you install Brew or that could run really straightforwardly

13:59.640 --> 14:04.120
on a Linux box. And so we can move it around depending on where horsepower is at. So some

14:04.120 --> 14:08.920
of the tools we're using now are open source just based on the new workflow that we have.

14:08.920 --> 14:15.800
The editing is still Final Cut. The problem is it's just a good product. Despite what the internet

14:15.800 --> 14:20.200
will tell you, it actually is a good product, especially for online media production. So what

14:20.200 --> 14:26.120
I'm curious to see is can Lightworks be comparable? And I won't know that until I've used it for a

14:26.120 --> 14:30.200
while and I've set up a new workflow. But that's my new goal is to kind of go down that path on

14:30.200 --> 14:35.240
a new setup. The Bonobo is certainly powerful enough to do mobile editing. I have two drives

14:35.240 --> 14:39.560
in that so I can read from one drive and write to another drive. I've been experimenting with it on

14:39.560 --> 14:47.080
the Ultra Pro. Also completely usable. And you can even get two drives in the Ultra Pro. When

14:47.080 --> 14:51.960
Noah was up here, he had it loaded on his Pixel. He had a Chromebook Pixel running Ubuntu that he

14:51.960 --> 14:55.720
had Lightworks on there. And he says it's usable. So I'm excited to give that a go.

14:57.880 --> 15:01.720
There's other things we use too, like the YouTube download script for certain clips.

15:01.720 --> 15:07.480
OSHA audio is an open source audio editor. Audacity, those are already in our tool chain as

15:07.480 --> 15:13.160
well. So some components, more components since that episode in April 14th of 2013, definitely

15:13.160 --> 15:18.200
more components are open source. Everywhere it makes sense. But the editing, at least probably

15:18.200 --> 15:22.840
for the rest of this year and into next year, I don't think will change unless I really come

15:22.840 --> 15:27.560
across something pretty fantastic in the new setup. And that would be nice to see. I mean,

15:27.560 --> 15:32.360
for myself personally, I've all but given up on OpenShot. Kdenlive is what's kept me sane,

15:32.360 --> 15:36.280
just because it won't crash on me. I love the fact that regardless of the environment I'm in,

15:36.280 --> 15:41.480
I can depend on it. It gives me the functionality I want, and it's not going to take it up on me.

15:41.480 --> 15:47.080
So that's awesome. Audio, Audacity. So I do use the tools, and I actually was fighting with

15:47.080 --> 15:51.880
Audacity earlier this morning. So it's certainly not without its issues. But I do live in that

15:51.880 --> 15:56.040
world. I actually eat my own dog food on that. And I do think it has a ways to go. It really does.

15:56.040 --> 16:00.120
Yeah. And it's not just one particular program. I think that's what I want to underscore, right?

16:00.120 --> 16:04.520
It doesn't just take having an editor, right? Because then once you have a good editor,

16:04.520 --> 16:08.840
well, what is your codec situation? And once you have that solved, okay, now what's your motion

16:08.840 --> 16:13.160
graphics suite? Because Blender is great, but if you just want to be able to grab a motion template

16:13.160 --> 16:15.880
and edit it, well, you're out of luck. If you want to grab an After Effects template, edit it,

16:15.880 --> 16:19.320
you're out of luck. So we don't have to have a one-to-one. Because you're married to Blender

16:19.320 --> 16:23.080
templates at that point. Right. They are limited in comparison, because believe me, I've looked.

16:23.080 --> 16:27.320
Yeah. They really are. Yeah. That's it. That's the problem. It's not insurmountable,

16:27.320 --> 16:33.000
but it also means it's not just about perfecting and replacing one single application,

16:33.000 --> 16:37.640
but an entire suite of applications. And that is more challenging. But you know what?

16:37.640 --> 16:43.080
Things change. Things change in big ways. And I would not say it will never be possible. I think

16:43.080 --> 16:47.720
it is possible. And I think we're working towards it right now. And we're just... Sometimes you just

16:47.720 --> 16:51.480
come up with new ways of doing your work too, and then the different tools make more sense.

16:51.480 --> 16:56.520
All right, Matt. Our last email today comes in from Captain Kirk. And he says,

16:56.520 --> 17:02.760
Chris and Matt, last week you touched on Ubuntu One closing and made some recommendations

17:02.760 --> 17:07.960
regarding replacing Ubuntu One. When I learned Ubuntu One was to close, I got a DigitalOcean

17:07.960 --> 17:13.720
Droplet and I put ownCloud on it. It is working fine for me. But since ownCloud was not among

17:13.720 --> 17:18.600
your recommendations to replace Ubuntu One, I've become concerned. Is there a reason I should not

17:18.600 --> 17:23.880
use ownCloud? Is it flawed in some way that I don't know about? Best regards, Captain Kirk.

17:23.880 --> 17:27.720
Well, you know what? I will answer Kirk's question right then and there. But first,

17:27.720 --> 17:32.840
this is a great opportunity to thank our sponsor this week, and that is DigitalOcean. Here's what

17:32.840 --> 17:37.320
I want you to do right now. Go over to DigitalOcean.com, use our brand new promo code

17:37.320 --> 17:43.720
UnpluggedMay. UnpluggedMay will get you a $10 credit. Now, what is DigitalOcean? DigitalOcean

17:43.720 --> 17:47.480
is simple cloud hosting dedicated to offering the most intuitive and most effective

17:47.480 --> 17:52.920
offering, the most intuitive and easy way to spin up a cloud server. And that is a huge deal.

17:52.920 --> 17:58.040
That really changes the game. Users can create a cloud server in 55 seconds and pricing plans

17:58.040 --> 18:04.920
start about $5 per month, which will get you, not about, it is $5 per month. That will get you 512

18:04.920 --> 18:11.160
megabytes of RAM, a 20 gigabyte SSD, one CPU, and a terabyte of transfer. A terabyte of transfer,

18:11.160 --> 18:16.440
you guys. We had somebody write in and he said, hey, you know, I don't really use like half my

18:16.440 --> 18:22.920
bandwidth on DigitalOcean. So when Ubuntu 14.04 came out, I just spun up a seed and I used a web

18:22.920 --> 18:27.560
transmission to help seed for a little while because I had about 500 gigs left on my cap.

18:27.560 --> 18:31.640
And that's a really cool way to just like, hey, I got a machine, I can help out the Linux community

18:31.640 --> 18:36.840
a little bit. And the web transmission client makes that super easy. And DigitalOcean has

18:36.840 --> 18:41.640
data center locations in New York, San Francisco, Singapore, and Amsterdam. Their interface is so

18:41.640 --> 18:46.520
simple. The control panel is very intuitive and power users can replicate that control panel on

18:46.520 --> 18:52.040
a larger scale with their straightforward API. It's really about the dashboard too. The dashboard

18:52.040 --> 18:57.720
takes all of these different technologies, things that you really used to have to be an expert to

18:57.720 --> 19:02.920
take advantage of, things that I used to be able to charge lots of money for my clients to implement

19:02.920 --> 19:08.120
for them are now so straightforward that it's kind of amazing. They have this droplet system where

19:08.120 --> 19:12.280
you can create image backups. You can move them around. You can snapshot before you make any big

19:12.280 --> 19:17.000
changes. You can move them between data centers. They also now support private networking. There's

19:17.000 --> 19:21.480
lots of really great features all built around this really simple and intuitive dashboard.

19:21.480 --> 19:26.840
It gives you an HTML5 console so you can look at the machine as it boots up right at the BIOS level

19:26.840 --> 19:30.760
all the way up through post. Two factor authentication if you want to be secure.

19:30.760 --> 19:34.760
It's so great. And there's more and more cool community applications that take advantage of

19:34.760 --> 19:39.720
their awesome API. So use our promo code Unplugged May when you check out. That's going to get you

19:39.720 --> 19:45.080
the $10 credit so you can try the $5 rig. I've been using the $5 rig for months and months now.

19:45.800 --> 19:50.680
When you combine the power of KVM sitting on top of these SSD drives with tier one bandwidth and

19:50.680 --> 19:55.000
data center locations all over the world, the combination is absolutely insane. And you can

19:55.000 --> 19:59.800
try it for free for two months with that $5 rig Unplugged May. And a big thank you to Digital

19:59.800 --> 20:06.200
Ocean for sponsoring Linux Unplugged. It's a great service. Okay. So to answer his question about

20:06.200 --> 20:13.960
own cloud. I haven't brought up own cloud as a sync solution simply because every time I've

20:13.960 --> 20:21.480
implemented own cloud, I have ran into some serious performance issues. And I don't know

20:21.480 --> 20:27.800
if it's my setup. I don't want to presume that own cloud inherently has some sort of problem.

20:27.800 --> 20:32.840
But I have had significant performance issues. And I think it's because of the amount of files

20:32.840 --> 20:37.560
that I have deployed. And I have tried it on everything from a Raspberry Pi to a fairly high

20:37.560 --> 20:43.720
end i5 home server. And I still have not been happy with the performance. That's not the case

20:43.720 --> 20:48.920
for everybody. And that's why it doesn't come front to my mind. But if it works for you, then

20:48.920 --> 20:51.640
have at it, man. That's awesome. Own cloud is a great solution for you.

20:52.280 --> 20:55.560
Well, and to elaborate. So when you're talking about performance, if I'm not mistaken,

20:55.560 --> 20:59.800
you're actually talking about the actual performance of accessing a file or actually

20:59.800 --> 21:03.000
getting something to sync. Not merely bandwidth, but going deeper than that.

21:03.000 --> 21:07.480
Yeah, yeah. Like the UI and retrieving the directory listing and all those things for me

21:07.480 --> 21:13.400
has been a little slow. Now, Fayther in the chat was pointing out, you can change the database

21:13.400 --> 21:17.800
back end. And perhaps it was just my database back end selection. Now, I've done it a couple

21:17.800 --> 21:22.440
of times. I do not remember which database back end I used each time. I believe I've varied it up

21:22.440 --> 21:27.640
with still limited success. I don't know, Mumble Room, anybody in here who had similar experiences

21:27.640 --> 21:31.480
with own cloud or an opposite experience with own cloud that you want to chime in with?

21:32.520 --> 21:38.200
Well, I just tried setting it up one time just on a server, just on a little server rig. And

21:39.080 --> 21:44.040
I don't know if I did something wrong or what it was, but it was just a pain in my butt the

21:44.040 --> 21:49.720
whole time. It never worked right. I got it set up easy enough, but I didn't

21:49.720 --> 21:54.840
have a use for it because I have ridiculously fast network at my house. And so I don't want

21:54.840 --> 21:57.720
to sync to the internet. Yeah. Odair Devon, what was your experience?

21:58.360 --> 22:05.000
Well, my experience was really weird. I think at least I got the impression that they're trying to

22:05.000 --> 22:10.840
make it hard because they have this duality of the community edition and their own edition for

22:10.840 --> 22:17.080
enterprise. So I think they're kind of trying to get people to approach their services. I don't

22:17.080 --> 22:22.440
know. It just like even you do the installation, everything is correct. And you just trickle

22:22.440 --> 22:29.240
everything and images start missing, things not loading. That was my experience with it.

22:29.240 --> 22:33.160
And I've retried and it appears that each version installation gets difficult.

22:33.960 --> 22:35.400
I hate duplication.

22:37.880 --> 22:40.040
Doesn't CISO Studio have a version of own cloud?

22:41.560 --> 22:46.280
Oh, yeah. I mean, yeah, yeah. And it's not difficult to install in pretty much any distro.

22:46.280 --> 22:49.560
And I'm seeing comments in the chat room right now saying, hey, we're using it in production at

22:49.560 --> 22:53.640
my work. It's just fine. So I think it depends on maybe the database back end setting, how many

22:53.640 --> 22:57.800
files you have in there, those kinds of things. Because to be honest, I was loading mine up with

22:57.800 --> 23:02.520
a ton of pictures and music. And if maybe you're more document focused and more calendar focused

23:02.520 --> 23:08.200
and contact focus, it might just work just fine. And maybe if I didn't have to put 10,000 pictures

23:08.200 --> 23:13.160
in there and 20,000 songs. That could work a little better.

23:13.160 --> 23:17.800
Okay. So I want to talk about a topic with you guys. Now, Poby, don't take offense. This is just

23:17.800 --> 23:24.440
food for thought. But and he actually doesn't. I'm going to say let's look at this in the context of

23:25.000 --> 23:29.800
a post Ubuntu dominant desktop world. But it actually is just as applicable if Ubuntu is still

23:29.800 --> 23:34.280
the number one Linux distro. So it actually works either way. But something that's been sort of

23:35.080 --> 23:41.800
gnawing away at the back of my head for the whole year, at least, is a very awkward future we're

23:41.800 --> 23:45.000
going into in the next couple of years. It's come up a couple of times on the show. But this week,

23:45.000 --> 23:49.160
I want to kind of take a different take on it. We have a few things that are coming up soon.

23:49.160 --> 23:53.640
Sooner than I think we'll all realize. It'll just be here. Number one, let's stick on the Ubuntu

23:53.640 --> 23:59.320
thread. Now, caveat, 1404 will be out for five years. LTS. Okay, we're all establishing that.

23:59.320 --> 24:04.520
Now, the newer releases of Ubuntu based on Unity 8 are going to have, on the desktop side,

24:04.520 --> 24:09.880
brand new applications written in QT that, just like always happens in the Linux community,

24:09.880 --> 24:14.920
some people will think are great and praise them for being innovative and the right direction.

24:14.920 --> 24:21.320
And some people will hate them. And they'll declare that Ubuntu has ruined the desktop,

24:21.320 --> 24:26.360
and they'll leave. And it'll probably be pretty, you know, there'll probably be a lot of people

24:26.360 --> 24:32.200
on both sides of that aisle. And I think the likely outcome of that would be people who are

24:32.200 --> 24:36.600
frustrated, they're not just all going to jump to one distribution. You know, they're not all going

24:36.600 --> 24:42.120
to go in unison and say, all right, it's time to make OpenSUSE our new distro. And all of a sudden,

24:42.120 --> 24:45.720
OpenSUSE becomes the big fat lizard of the Linux community. Or they're not all going to go to

24:45.720 --> 24:51.320
Fedora or Mangia or Arch, right? It's not going to be any of those instead. You know, if anything,

24:51.320 --> 24:59.160
it's probably going to be a mass spreading out across all of the distributions. And it won't be

24:59.160 --> 25:04.360
like devastating for Ubuntu. I would foresee more folks moving out that are unhappy with

25:04.360 --> 25:12.840
some of the changes. But that brings with it that elephant in the room that a lot of developers who

25:12.840 --> 25:19.720
are targeting Linux desktop like to mention, and that is fragmentation. And not only will we have

25:19.720 --> 25:23.880
this sort of user-based fragmentation over the next couple of years, but we will also have

25:23.880 --> 25:28.760
display server fragmentation. We'll have Wayland, we'll have Mir, and we'll also have distributions

25:28.760 --> 25:33.800
that just elect to stay on X11 for very legitimate reasons for a lot longer than we've been doing for

25:33.800 --> 25:39.560
a lot longer than we all expect. And so we will have fragmentation at that layer. And then at the

25:39.560 --> 25:47.480
same time, there is a really interesting development battle brewing where GTK is starting to

25:47.480 --> 25:52.520
maybe not become the preferred targeted framework for new desktop Linux applications. A lot of

25:52.520 --> 25:57.800
people are talking about QT. It offers a lot of advantages. It's great with mobile platforms. It's

25:57.800 --> 26:02.360
a good technology in general. Obviously, the canonical folks are switching over to it. So

26:02.360 --> 26:06.120
fragmentation there. And then on top of that, you've got just a general desktop environment

26:06.120 --> 26:11.160
fragmentation where some desktop applications handle notifications in one way, another desktop

26:11.160 --> 26:15.800
environment handles it in another way. Some draw borders, some don't draw borders, right? It's all

26:15.800 --> 26:21.000
over the map. And this is just going to be in the next few years. And I'm trying to wrap my brain

26:21.000 --> 26:26.200
around this, and I'm thinking at the same time at the hardware side of things, it sounds like calling

26:26.200 --> 26:30.440
it the cloud, but you've got this internet of things, right? All of these devices from

26:30.440 --> 26:39.080
Philips light bulbs to the toaster to the TV to your garage door opener to your front door locks,

26:39.080 --> 26:42.200
there's going to be devices out there running Linux talking to each other,

26:43.560 --> 26:46.840
but they're not going to be compatible Linux boxes. They're not going to be able to run

26:46.840 --> 26:49.800
the same applications. You're not going to be able to write once and run it anywhere.

26:49.800 --> 26:54.200
They're not going to have the same processors. It's another type of fragmentation. Not but not

26:54.200 --> 27:00.280
one I am particularly worried about. The Linux core itself, it's pretty solid.

27:00.280 --> 27:02.840
You know, you know that you're going to have glib see, you know, you're probably going to

27:02.840 --> 27:06.440
have G streamer or cutie, you know, you're probably going to have cups for printing,

27:06.440 --> 27:11.320
you know, you're probably going to have web kit, if you need to draw an HTML box. So those things

27:11.320 --> 27:15.320
are kind of standardized, the core, the kernel, system D, all that kind of stuff is pretty

27:15.320 --> 27:18.680
standardized. So I'm not so worried there. But I am pretty worried about the desktop,

27:18.680 --> 27:23.160
because I can't see where this is going, where end users don't lose out and where developers

27:23.160 --> 27:26.680
where developers don't get so frustrated, they just put their hands up and say, screw it,

27:26.680 --> 27:30.040
I'm going to write an application for the Mac, because I know they'll spend money.

27:30.040 --> 27:32.920
And I only have to write it for one operating system. And let's be honest,

27:34.040 --> 27:40.360
all this is happening when the dominant desktop Linux or the dominant commercial desktop platforms

27:41.400 --> 27:45.960
are getting pretty boring. You know, they're not changing very much. And a lot of developers like

27:45.960 --> 27:50.040
that they like that particular brand of boring because it's easy for them to make money on.

27:50.680 --> 27:56.520
That's definitely not a brand Linux has to offer. So I thought maybe we could discuss with

27:56.520 --> 28:02.680
the mumble room with our virtual lug how we'd like to see this play out. What would we what

28:02.680 --> 28:08.360
if we could wave a magic wand and push the future of desktop Linux in a certain direction

28:08.360 --> 28:12.760
to prevent some of these problems to save ourselves this obvious hassle that we're all

28:12.760 --> 28:17.640
about to encounter? I mean, it's like we're all driving down this freeway going 80 miles per hour,

28:17.640 --> 28:21.400
and we know that there's a bunch of trouble up ahead and the bridge is out, but we're still

28:21.400 --> 28:25.320
going. And we don't you know, we just hope that when we get to the bridge, I will just jump that

28:25.320 --> 28:30.600
I will just jump that gap and nobody will notice the bridges that nobody notices. But if we could

28:30.600 --> 28:35.000
like somehow build that bridge before we got there, what would we make that look like? And

28:35.000 --> 28:40.120
that's one of the things I thought maybe we could toss around today. I have a certain tea pot.

28:40.120 --> 28:46.440
Go ahead, Ick. Yeah, I think we got tempted to say a teapot. So many people I talked to at

28:46.440 --> 28:51.480
Linux Fest Northwest about the direction Unity is going and how it's going to be mostly QT based

28:51.480 --> 28:57.960
seemed really happy about that. Yeah, they seem like it'd be more solid. So that was my take away

28:57.960 --> 29:04.280
too. Yeah, easier program, easier to program on. Heck, I keep seeing QT programs on Windows too.

29:04.280 --> 29:10.520
So you know, it's it's cross platform, you can do you can go anywhere with QT. So it's it's easier

29:10.520 --> 29:16.120
for purposes of making cross cross platform application. So you're saying in your Linux

29:16.120 --> 29:21.640
desktop of the future, QT is sort of emerged as the dominant framework that applications are

29:21.640 --> 29:27.240
developed with. I think so, because it's more cross cross platform. Therefore, more people can

29:27.960 --> 29:34.600
program with it and it can be port easily, easily portable. And I want to see more of that.

29:34.600 --> 29:38.520
All right. I'll go to heaven's next and then popes up. So go ahead, heavens. What were you going to

29:38.520 --> 29:47.000
say? Well, I would like the next iteration of what I wanted Chrome OS to be. Right now,

29:47.000 --> 29:54.920
Google kind of screwed up what I imagined Chrome OS to actually be. QT and GTK both have embedded

29:54.920 --> 30:00.920
JavaScript interpreters or ECMAScript interpreters, which actually make them do their beautiful magic

30:00.920 --> 30:10.200
QML and GJC, the JavaScript inside of GTK, which makes it absolutely Mac ish pretty. So I think

30:10.200 --> 30:17.320
because JavaScript was invented to control UI elements as it's fundamentally, that's what its

30:17.320 --> 30:25.000
design goal was. It's cross platform. It can go to Mac, Linux, Windows or run on your car. It doesn't

30:25.000 --> 30:31.960
have to be Windows or C++ or compiled. No, it's perfect for this. It's perfect for this Internet

30:31.960 --> 30:35.720
of Things future. Now, before we go to Popey, Tyler, you wanted to kind of dovetail on something

30:35.720 --> 30:41.000
that Ick was just saying. Oh, yeah. I wanted to also say part of our discussion when we were at

30:41.000 --> 30:46.360
Linux Fest Northwest also involved talking about Mir versus Wayland and the direction I'd like to

30:46.360 --> 30:53.800
see the video card companies go is develop the kernel drivers open source like AMD wants to move

30:53.800 --> 31:00.760
towards or Intel. And so that kind of reduces some of the compatibility issues that we would have with

31:00.760 --> 31:06.360
proprietary drivers. Now, Popey, I want to I want to throw something in your face. So let's say here

31:06.360 --> 31:09.880
when I'm saying, you know, the future desktop, what I'm saying is like there's some sort of

31:09.880 --> 31:14.520
overall consensus in the development community that when we're writing a desktop application

31:14.520 --> 31:19.880
for Linux, these are the things we target. And it's sort of the whole hive mind in some

31:19.880 --> 31:23.880
magical future is sort of bought off on this. Popey, what would you like to see in that scenario?

31:24.920 --> 31:30.360
So I'm going to take a step back and not answer that, because I think your argument is flawed for

31:30.360 --> 31:38.200
two reasons. First is, even if Unity is pure Qt, that doesn't stop applications being GTK or some

31:38.200 --> 31:43.720
other toolkit. So, you know, whilst it's great that Unity is moving towards Qt, that's just one

31:43.720 --> 31:48.600
of the platforms Unity has been implemented on. It's been reimplemented multiple times,

31:48.600 --> 31:53.080
and we've still been able to run Qt, GTK and other toolkit applications on top of that.

31:53.080 --> 31:57.080
We don't we don't stop that happening. So no, no, I wouldn't say so.

31:57.080 --> 32:03.480
So implying that in six months or a year or wherever the full Unity eight mirror lands on

32:03.480 --> 32:09.160
the desktop, implying that that means the world is Qt and forget GTK or forget anything else.

32:09.160 --> 32:13.320
You can't run those things on Ubuntu, therefore it's gone. What's the post apocalyptic world

32:13.320 --> 32:21.240
going to look like? I think you're a little sensitive, because what I'm saying is what

32:21.240 --> 32:25.560
the frustration is and the developers that I've heard from is that there's too many choices,

32:25.560 --> 32:30.200
right? And so what I'm trying to come to is something that doesn't look fragmented,

32:30.200 --> 32:33.960
something that doesn't look out of place. I'm trying to come to some sort of consensus where

32:33.960 --> 32:38.760
we can have a desktop operating system that's filled with choice. Because one of the good

32:38.760 --> 32:44.520
things honestly is like each distro solves a particular niche and they're good for those

32:44.520 --> 32:51.320
areas. So how do we come to something that is sort of each in each area looks like it belongs,

32:51.320 --> 32:56.120
look like it's in place. And what I'm what I'm suggesting is maybe if we could if we could sort

32:56.120 --> 33:02.600
of come to a consensus to perhaps let's just say some sort of utopian future where the Qt

33:02.600 --> 33:06.120
transitions go so well that more and more people jump on board. Wouldn't that actually be a good

33:06.120 --> 33:10.120
thing? I don't think that's dystopia. I think that's good. Right. So I'm not saying there's

33:10.120 --> 33:15.240
a dystopia. My reading was that the implication was, you know, that there's going to be this mass

33:15.240 --> 33:21.720
exodus from Ubuntu when this happens. Maybe I read that wrong. Well, yeah. No, what I'm saying there

33:21.720 --> 33:25.640
is that there's going to be whenever you change applications like that, there's just going to be

33:25.640 --> 33:31.720
people who will make a big fuss, right? They make a big change. Change equals bad. So that'll add

33:31.720 --> 33:34.920
fragmentation. What I'm saying there is that's going to add fragmentation in the user base,

33:34.920 --> 33:41.240
what they're using. So I would say the best thing about this is you can take the comments that Ike

33:41.240 --> 33:46.920
made and the comments that Heaven's made, which is basically QML and Qt are great. JavaScript is

33:46.920 --> 33:54.600
great as well. We've implemented our toolkit in QML, but we're also implementing it as HTML5. So

33:54.600 --> 34:00.680
if you want to bring your JavaScript app across, it will look the same on Ubuntu, whether it's a

34:00.680 --> 34:06.600
QML app or an HTML5 app. So you can get that same look and feel across different tools. That is

34:06.600 --> 34:10.360
possible. You know, that was sort of the pitch. Well, in a sense, that was the pitch to the

34:10.360 --> 34:15.560
Firefox OS guy made at Linux Fest, as he said, you know, the developer can make a make a phone

34:15.560 --> 34:21.160
app and then, you know, they just redesign the layout or maybe it automatically relays out.

34:21.160 --> 34:25.480
And it's a web app, too. And you've you've written the application once and it runs in both spots

34:25.480 --> 34:31.320
and it saves the developer having to duplicate work. And if you could, even with minor tweaks

34:31.320 --> 34:36.360
to make it integrate properly, take one application and move it across Ubuntu Touch, Ubuntu Desktop,

34:36.360 --> 34:41.800
Firefox OS and anybody who has a browser capable of rendering HTML5, that seems like a pretty

34:41.800 --> 34:47.800
compelling incentive for developers to target that, even if one of the individual platforms

34:47.800 --> 34:52.520
doesn't have that much traction. Because in whole, there's a considerable amount of traction and a

34:52.520 --> 34:58.600
reduced amount of development time, which that's why I that's why I really do think Qt has a strong

34:58.600 --> 35:03.400
future, not just on the Linux desktop, but everywhere. And and maybe it's Qt and a combination

35:03.400 --> 35:08.040
of HTML5 apps. Are we worried about that, though? Is that a good thing? I mean, do we want a bunch

35:08.040 --> 35:14.840
of web apps? My response as far as Qt goes, I'm really hoping that if Ubuntu is heading towards

35:14.840 --> 35:18.840
Qt, popular applications like, let's say, Firefox or Chrome will start pulling their

35:18.840 --> 35:25.400
theming from Qt instead of GTK. But Chrome has stopped pulling from GTK anyways. They're doing

35:25.400 --> 35:29.800
their own thing. Aurora, right. Do you guys have a lot of problem with the fragmentation? Like I'm

35:30.600 --> 35:36.120
honestly sitting on a Windows computer running a GTK app and a Qt app side by side and with my

35:36.120 --> 35:40.520
Windows app. I don't care. This is exactly where I wanted to go, because I think if you look at

35:40.520 --> 35:47.160
actual in production, I don't know of a Linux desktop that at least is on x86 that doesn't have

35:47.160 --> 35:52.280
Chrome or Firefox like Thunderbird, right? I'm just naming applications that are already cross

35:52.280 --> 35:57.480
platform VLC. We all have these, even though there's supposedly so much fragmentation already

35:57.480 --> 36:02.120
that developers could never target Linux. But yet I've been using applications across

36:02.120 --> 36:05.720
multiple different Linux desktops for years and years and years, and they're the same applications.

36:05.720 --> 36:09.080
I get them at the same time for the most part. I haven't had any problems. So let me ask you this.

36:09.080 --> 36:13.640
Is fragmentation just a bunch of crap? Is it hype? Is it just like something the developers use as

36:13.640 --> 36:19.720
an excuse to be lazy? I don't understand. Alan, I'd say as far as my response goes for wanting

36:19.720 --> 36:25.160
a beautiful desktop, GTK apps, and I'm a KDE user, do not fit into KDE that well at all,

36:25.160 --> 36:30.440
unless you are limiting yourself to like a certain set of themes. But it works. It works,

36:30.440 --> 36:35.960
but it doesn't look good. Right. Yeah. And that bugs me. Well, that doesn't bother me.

36:36.840 --> 36:41.560
And it doesn't bother most normals. I don't think it does either. Yeah. I think most users-

36:41.560 --> 36:47.560
The guy who write programs, it would probably be an easier idea if you have a layer to

36:48.840 --> 36:53.240
connect all the toolkits and stuff so that they only use one set of interfaces.

36:53.240 --> 36:57.400
Well, but you know who does care actually are developers themselves. They don't want to make...

36:58.440 --> 37:02.360
PC Wiz, close your mic. They don't want to make something that they think looks ugly,

37:02.360 --> 37:04.680
right? They're not going to put their time and effort into something that-

37:04.680 --> 37:08.840
Well, that depends on which kind of developer you're talking about. Because some types are like,

37:08.840 --> 37:14.280
I don't care what it looks like. It has this really odd design because that's how I like it.

37:14.280 --> 37:16.920
Right. And then you look at- And I'd like to add onto it,

37:16.920 --> 37:20.360
normals might care about it because you have this beautiful desktop,

37:20.360 --> 37:24.040
and then you have this GTK app that might look like it came from Windows 98.

37:24.040 --> 37:27.800
I mean, I think normals might care when like, for example, the client-side decoration thing,

37:27.800 --> 37:30.840
where you've got two close bars, two title bars. I mean-

37:30.840 --> 37:33.080
Well, yeah, that's just confusing. Yeah.

37:33.080 --> 37:37.400
Wow, you have a real B in your bunny about client-side decorations. That's like the

37:37.400 --> 37:39.080
fourth episode of the show that you mentioned.

37:39.080 --> 37:43.480
Second episode, but fourth mention. Yes. Second episode, fourth mention. I agree.

37:44.600 --> 37:51.240
No, it's because it is the beginning of this particular type of this brand of fragmentation

37:51.240 --> 37:56.520
that I'm talking about and where it's happening right now. And as a GNOME user, you know what?

37:56.520 --> 38:02.600
I'm of two minds of it. So I'm trying to wrap my brain around it because I picture myself

38:02.600 --> 38:08.280
showing this to my mom, who has been a graphic designer for almost all of her professional life.

38:08.280 --> 38:13.800
And that means she's used Macs since the 80s to right now. And I try to put her down in front of

38:13.800 --> 38:18.280
an Ubuntu box because she wanted a new computer. And I was showing her GIMP, and I could not even

38:18.280 --> 38:22.600
begin to describe to you how badly that went. And it's things like that that she just would

38:22.600 --> 38:27.000
look at it and she would think, is this why it's free? That's literally what she'd say.

38:27.000 --> 38:33.720
Ouch. Right now for the client side decorations, I think we're just in a phase. It is something

38:33.720 --> 38:40.600
that the desktop environments have to solve. It's not the responsibility of other things

38:40.600 --> 38:44.360
right now. The client side decorations is desktop specific.

38:44.360 --> 38:50.440
Yeah. Yeah. So I want to just kind of close out my thoughts on the perfect desktop. I would love

38:50.440 --> 38:56.520
to see more targeting of things that work across all desktops, not just Linux desktops, but all of

38:56.520 --> 39:02.040
them. And I'm willing to give this transition to more web apps a proper go because I feel like in

39:02.040 --> 39:06.440
the last couple of years, we've actually started to see web applications that are impressive.

39:06.440 --> 39:09.480
And I don't know if you guys have played around with it, but if you install Chrome,

39:09.480 --> 39:15.400
and then there's the Chrome apps, I think all of the Linux desktops, it will add those Chrome apps

39:15.400 --> 39:20.680
as individual launcher icons, like in your menu or activity screen, whatever you're looking at.

39:20.680 --> 39:26.200
And I launched the Plex one, and it looks like I'm running a standalone Plex application. And

39:26.200 --> 39:28.840
it's just a Chrome application. And it actually works.

39:30.280 --> 39:30.780
Go ahead.

39:32.040 --> 39:36.680
The only thing I don't like about the Chrome applications is that they use one session for

39:36.680 --> 39:43.320
all of them. So if you have multiples of the same web app you want, you can't log in separately.

39:43.320 --> 39:48.520
You have to log in just once, and then it makes a duplication. But if you look at Midori, they have

39:48.520 --> 39:54.200
an applications thing very similar to the way Chrome does it, but they have every single

39:54.200 --> 39:56.840
application being made, has its own individual session.

39:57.480 --> 39:59.960
What if I had the Firefox version of that?

39:59.960 --> 40:03.720
I remember that was called Prism.

40:03.720 --> 40:04.600
Prism was the application.

40:04.600 --> 40:08.760
Yeah, bad name now. Dave, you were going to say maybe it's more about how the applications

40:08.760 --> 40:09.800
communicate with each other?

40:10.760 --> 40:15.880
Yeah, I mean, think about how these different devices that we use actually connect to each

40:15.880 --> 40:21.720
other. I mean, I have two phones, two laptops, and a desktop in my home, and they're all on the

40:21.720 --> 40:27.560
same Wi-Fi network. So I don't think at the end of the day it matters what graphical toolkit it's

40:27.560 --> 40:32.280
actually running or what the UI is. If they're all accessing the same file and writing to and

40:32.280 --> 40:37.480
from the same file, then they'll work together. For example, the Plex app. The Plex app is still

40:37.480 --> 40:41.240
reading from the same server, whether it's on your phone, whether it's on your laptop,

40:41.240 --> 40:47.320
or, you know, on the cloud. So what I'm saying is I think we need a standardized

40:47.320 --> 40:54.840
back-end network interface for phone applications and desktop applications and HTML cloud

40:54.840 --> 41:00.440
applications to talk to each other. We need a back-end connection, like say something like

41:00.440 --> 41:06.200
Unix sockets or a standardized network interface where these things can talk to each other and

41:06.200 --> 41:11.560
they can work together with each other and just exchange data regardless of what the

41:11.560 --> 41:13.000
individual UI is.

41:13.000 --> 41:15.480
Right, as long as it can be implemented safely. Now,

41:15.480 --> 41:20.440
Daredevilin, you were going to make a point about how you just want to get into a nice pair of

41:20.440 --> 41:27.960
comfy toolkit jeans and just walk around and feel good, right? Did I make a point for you or did

41:27.960 --> 41:28.680
you want to add to that?

41:29.240 --> 41:34.200
No, yeah. I mean, if I'm familiar with the toolkit, I probably know how to leverage that

41:34.200 --> 41:40.440
toolkit to look just exactly how I want. And I'll do my application to look the best I can,

41:40.440 --> 41:45.480
and that's going to be my effort. Now, if a distribution later on that uses a different toolkit

41:45.480 --> 41:51.160
wants to pick it up, well, they better support my toolkit. And in the end, it will benefit every

41:51.160 --> 41:56.840
single user because there's more developers that just do like I do. They focus on what they know

41:56.840 --> 42:02.760
because it's easier. I mean, if you're going to jump on toolkit to toolkit, sometimes you will

42:02.760 --> 42:08.920
gain extra benefit. Like, for example, you go to elementary OS, you will have a very valid GTK

42:08.920 --> 42:15.400
focused environment. You will get runtime performance, consistency with their teaming

42:15.400 --> 42:19.240
because they have these toolkits, these widgets that you can use.

42:19.960 --> 42:25.640
No, I mean, it works, but you have to have the elementary OS photo viewer and the elementary OS

42:25.640 --> 42:31.240
music application and the elementary OS this and the elementary OS that. And to be honest with you,

42:31.240 --> 42:35.480
they're not a multimillion dollar company that can hire dozens and dozens of developers to work on

42:35.480 --> 42:41.720
each individual application. At best, they get a mild feature improvement after each release.

42:41.720 --> 42:47.320
And this is my issue here is when you reinvent these applications, when you recreate them,

42:47.880 --> 42:52.440
there is a massive technical debt that you undertake to make them as featureful as all

42:52.440 --> 42:55.800
of the other applications have been around for potentially 10 years.

42:56.840 --> 43:02.920
But that's not what I mean. I'm not saying that the elementary way is to go. I'm just saying that

43:02.920 --> 43:09.560
if I selected that toolkit and those tools when I'm going there, it's going to make my life easier

43:09.560 --> 43:15.320
there. And because they select this path, it's going to be very clear that if I do GTKR, we'll

43:15.320 --> 43:20.040
get a few things for free, such as the widgets. When they change, it will change in my application

43:20.040 --> 43:27.320
as well. Same way that you do in Mac OS X with Cocoa. But I really don't think this is a problem

43:27.320 --> 43:31.720
just because, I mean, developers have been using their toolkits and when the toolkit is not there,

43:31.720 --> 43:37.960
some of them will actually compile the toolkit there. I think the best is for the developers

43:37.960 --> 43:42.280
to focus on getting a good experience on their application, regardless of the toolkit, and then

43:42.280 --> 43:48.440
worry about, okay, can I port? Unless it's like a mobile platform where the resources are

43:48.440 --> 43:51.960
constrained and then you have to deal with just one tool.

43:51.960 --> 43:58.840
I guess I just look at, I'm sitting back and I'm looking at the successful, really successful

43:58.840 --> 44:05.560
Linux-based platforms. And two that come to mind are Android and Chrome OS. And both of those

44:05.560 --> 44:11.000
involve a limited set of choices for developers. Both of those involve a very narrow scope of what

44:11.000 --> 44:15.960
you can and cannot do and how you do those things and then where you publish those things. They all

44:15.960 --> 44:21.560
have a very set of strict lanes that you have to drive down and rules you have to follow. And the

44:21.560 --> 44:29.000
desktop is nothing, nothing like that. It is a wild west and a cornucopia of choice, but that's

44:29.000 --> 44:33.240
not necessarily a good thing. Now, that said, I mean, I don't want to be all Mr. Anti-Forking

44:33.240 --> 44:39.480
and whatnot because Jake Edge over at LWN.net had a good piece about Linux and the Internet of

44:39.480 --> 44:44.920
Things. He was talking about Tim Byrd, who was giving a keynote at the Embedded Linux Conference.

44:44.920 --> 44:50.760
This piece was at the end of April of this year. And he brought up a point that Linus made about

44:50.760 --> 44:56.760
forking the kernel. But Linus is actually, this was in an Ask Linus column from years ago, when

44:56.760 --> 45:01.800
somebody asked Linus, do you get all upset when people fork the kernel and sort of start reinventing

45:01.800 --> 45:08.680
the wheel? And Linus says, actually, he thinks that when folks targeting a new market where Linux

45:08.680 --> 45:13.240
does not have a presence, it actually makes a lot of sense to fork. He said, well, you know,

45:13.240 --> 45:18.040
it makes a lot of sense to fork. He says, just as a new market, and we need a new base camp to

45:18.040 --> 45:21.720
attack from it. So when they fork, they're essentially creating a new base camp in that

45:21.720 --> 45:27.400
new market. And, you know, you look at how Android started. Android was originally a fork. And then

45:27.400 --> 45:31.880
later, they've been folding much of the Android changes back into the mainline Linux kernel after

45:31.880 --> 45:38.120
years. And so he says, and Linus, I have to agree with, he says, you know, the key to getting in

45:38.120 --> 45:42.920
there is to have some place to start from. And sometimes fragmentation at the beginning looks

45:42.920 --> 45:47.720
of the world, or it looks like it's going to be a huge mess. But because the code is open,

45:47.720 --> 45:52.760
and the changes can be readopted if those upstream want them, it sometimes actually works out for the

45:52.760 --> 45:57.080
better. And, you know, in this case, the Linux kernel has gotten a lot better because of these

45:57.080 --> 46:01.000
kinds of forking. And I think that's telling, because if you can do it at the kernel level,

46:01.000 --> 46:05.720
you can certainly do it at the file manager level. Or you can, I mean, who says somebody

46:05.720 --> 46:10.600
doesn't take the new Qt file manager for Ubuntu, and it becomes three, four years down the road,

46:10.600 --> 46:14.360
it becomes the default KDE file manager, they fork it, and they make a new dolphin based around

46:14.360 --> 46:18.360
it or something like that. I mean, you just never know what could happen. So maybe it won't be that

46:18.360 --> 46:23.480
bad. Well, you have to bait the hook to suit the fish, right? I mean, that's what he was saying.

46:23.480 --> 46:28.680
Yeah, that's very good. Yeah, that's very true. Yeah, I think the market will just eventually

46:28.680 --> 46:33.080
sort it out, just like it's always done. Like the Linux community is pretty resilient when

46:33.080 --> 46:38.200
it comes to that stuff. So like, eventually, it might not happen right away. But over time,

46:38.200 --> 46:46.840
things will get sorted out. As far as the client side decorations, those just need to go and burn

46:46.840 --> 46:55.400
in a pit somewhere. Oh, I mean, that's a little extreme. Yeah. With my app, actually what we're

46:55.400 --> 47:01.640
doing is separating the UI and the core. So the core is being written completely without a UI,

47:01.640 --> 47:07.080
and then we can put any UI on top of it. So it could be Qt, it could be GTK or whatever.

47:07.080 --> 47:12.040
And the reason we're doing this is because it allows us to make one core that can support

47:12.040 --> 47:18.280
mobile and desktop. So we were working on an Android version. And that particular that

47:18.280 --> 47:21.480
core will work also on the desktop with whatever toolkit we pick.

47:23.000 --> 47:30.680
Yeah, that's the that's what the KDE guys were doing. I saw this video OS something OS connect,

47:31.240 --> 47:36.840
where they this is KD's vision as far as I understand it. The basic toolkit has to be

47:36.840 --> 47:44.200
the same KD lives, hasn't been upgraded from 4.9 because they're kind of halting it. The UI

47:44.200 --> 47:48.920
they believe has to be different for tablets, different for phones and different for desktop.

47:48.920 --> 47:53.320
And this is exactly what is going on. You know, fragmentation is good. If it's done properly,

47:53.320 --> 47:59.000
we have to, you know, make the hook to suit the fish. Phone UI is different. And it needs a

47:59.000 --> 48:03.960
different ground. It needs a different implementation from the ground up from the

48:03.960 --> 48:08.840
kernel to the GUI toolkit to the actual interface. Right. The same with the desktop. Right. So,

48:08.840 --> 48:16.280
you know, I think that's what we're ignoring here that we can't have the same UI across the board.

48:16.280 --> 48:22.120
And we have to both embrace the fragmentation and find a way to connect the dots, basically.

48:22.120 --> 48:27.800
Can I be different? Yeah, I also think, you know, earlier, the inter app communication was brought

48:27.800 --> 48:35.160
up. I think the difference this time with this type of future we're going into is actual,

48:35.160 --> 48:41.400
reliable and performant back end processing is literally today's reality. You know, you could

48:41.400 --> 48:46.760
throw something up on DigitalOcean Droplet, on a Rackspace machine, on Windows Azure,

48:46.760 --> 48:51.480
and you can have essentially as much processing power as you need. So, if you need to have

48:51.480 --> 48:56.440
different applications across a phone and a desktop communicate, we have a solution for that

48:56.440 --> 49:02.360
now. You know, you look at all these, the augmentation you can add to help smooth out the

49:02.360 --> 49:06.520
rough edges between these different form factors and different types of devices that need to

49:06.520 --> 49:10.760
communicate with each other is much more of reality now. It doesn't have to be device to

49:10.760 --> 49:16.680
device anymore. There can be a middle processor that does that logic work, that does the storing,

49:16.680 --> 49:21.480
does the state information. And that's going to be extremely powerful. And I think, I'm hopeful,

49:21.480 --> 49:27.480
that's going to help smooth some of this stuff out too. A back end. Yeah, exactly. Which we're

49:27.480 --> 49:32.120
seeing different iterations of that now. It's just going to become more prevalent. You know,

49:32.920 --> 49:38.840
imagine a Linux distribution that maybe has, instead of, now I don't know if people would

49:38.840 --> 49:42.360
like this, but instead of each individual installation going out and doing a package

49:42.360 --> 49:48.280
refresh and pulling down all the repo information, maybe that distribution just has a single server

49:48.280 --> 49:52.200
that just, when you do an update, your Linux box just connects to that server and says,

49:52.200 --> 49:55.640
hey, what's the latest package? Okay, thanks. And it's like this, they're doing the back end

49:55.640 --> 49:59.240
refreshing of all the repos. They're doing the back end caching, even with your own personal

49:59.240 --> 50:02.760
repos. And they're just delivering you a single answer across all your devices. It's a weird

50:02.760 --> 50:09.560
example, but you could see how back end processing could be applied at all different levels of these

50:09.560 --> 50:13.080
things. It could really change things up. And that's just something we can't really wrap our

50:13.080 --> 50:16.520
brains around right now because we're just starting to see the beginnings of that. And that's

50:16.520 --> 50:21.000
going to be a major game changer down the road. So that's my thoughts on that. Yeah.

50:21.000 --> 50:24.840
Cloud computing isn't a buzzword anymore. It is a reality.

50:24.840 --> 50:27.720
Yeah. We just don't have to call it that. Let's just not call it that.

50:27.720 --> 50:31.800
It's still a buzzword because you can't describe to me what it actually means.

50:31.800 --> 50:35.240
Yeah. But computing. There you go. I did it for you.

50:35.240 --> 50:37.800
All right. Just bring it down to the earth and make a fog.

50:40.600 --> 50:44.760
Or how I describe it, it's anytime the system is opaque and you can't tell what's going on

50:44.760 --> 50:51.000
inside of it. Right. Anytime it's magic. Before we go, I wanted to give a special shout out to

50:51.000 --> 50:56.120
Irrational Number in the Linux Action Show subreddit. He's been doing an Ubuntu challenge

50:56.120 --> 51:01.000
and he's really going at this. This is a really interesting journey he's taking. It came up

51:01.560 --> 51:08.040
actually during an IRC conversation from Linux Unplugged a few weeks ago. So with 14.04,

51:08.040 --> 51:14.760
he made the switch over as a long-time Arch user to using Ubuntu. He did a great post that outlined

51:14.760 --> 51:20.440
his goal and then he's done a great write-up on his first week and what he ran into and what

51:20.440 --> 51:27.240
kind of struggles he had and how he just posted two hours ago, week two, another really good post.

51:27.960 --> 51:30.760
You know what? This is the kind of thing you start reading and it's actually very interesting.

51:30.760 --> 51:34.280
And then there's some good conversations that are starting up around these posts too. So I

51:34.280 --> 51:38.600
will link to these in the show notes if you guys want to read these. I thought they were pretty

51:38.600 --> 51:43.720
interesting to follow. And then one last thing I wanted to cover before we run was a question that

51:43.720 --> 51:47.640
came in today to our subreddit. It says, my children's school district, this is a gray wolf

51:47.640 --> 51:52.360
night, my children's school district is looking at testing various options for replacing XP.

51:52.360 --> 51:56.840
Probably a lot of people are. Right now, they mostly have one main CPU, three to four workstations

51:56.840 --> 52:03.320
per room. They're trying Chromebooks for teachers and Windows 8. I would like to provide them with

52:03.320 --> 52:07.480
another solution. The school district doesn't have a lot of money, so I'm hoping to get a solution

52:07.480 --> 52:10.680
to help teachers and students. I was hoping to reach out to see if anyone out there has ideas

52:10.680 --> 52:15.080
for a desktop window manager and programs. I like sugar idea, but I have a hard time with it,

52:15.080 --> 52:19.240
so I'm not ready to make that work. I was able to get IT department to try out open office,

52:19.240 --> 52:22.680
but any more solid programs, especially for teachers, thanks to anyone who has some suggestions.

52:22.680 --> 52:25.320
I will tell you what I've seen work. I don't know if you're going to like my answer.

52:25.880 --> 52:31.080
Linux terminal services project, Google Docs. The thing about the Google Docs is,

52:31.080 --> 52:34.360
and this is what you can't get around, and you can make the same argument with open office,

52:34.360 --> 52:38.280
but then it requires parents at home to install software on the computer. The thing about the

52:38.280 --> 52:43.640
Google Docs is they just need to have the web browser. Google just launched Google Classroom,

52:44.440 --> 52:47.240
where schools are going to be able to do assignments and integrate that with Google

52:47.240 --> 52:51.960
Docs, and students will be able to check in. Again, all you have to do is just have the browser,

52:51.960 --> 52:57.160
and Google just announced that they also will not be doing tracking or ad sales against educational

52:57.160 --> 53:01.480
accounts, so the creepy factor has been reduced, too. I don't know what that means exactly,

53:01.480 --> 53:05.640
but they're supposedly not going to be scanning the content of children's Google drives,

53:05.640 --> 53:12.200
and won't be displaying ads against that. That seems good. That's one solution. Linux terminal

53:12.200 --> 53:17.800
servers work really well. As long as you have even semi-decent connectivity, it works even over Wi-Fi,

53:18.360 --> 53:22.760
one box, and then you just have a multitude of front-end clients, you will be amazed at how

53:22.760 --> 53:26.600
smooth it works. Matt, do you have any other suggestions for a cheap way to get boxes in a

53:26.600 --> 53:31.560
school? Boy, I think you really nailed it. I know here at a local community college,

53:31.560 --> 53:37.160
Google Docs and Moodle, those are the two. They have great success with that,

53:37.160 --> 53:39.880
and it actually works really well. I feel a little dirty recommending Google

53:39.880 --> 53:44.360
Docs because it's not A, open source, and B, there is going to always be some kind of tracking.

53:44.360 --> 53:48.840
But at the end of the day, it's kind of like, you just can't get past that. They don't even have to

53:48.840 --> 53:52.120
run Linux at home, right? They could be on Windows, they could be on Mac, and they could still work on

53:52.120 --> 53:56.680
those same school docs. That's a pretty compelling use case for students in schools.

53:56.680 --> 54:01.480
Well, yeah, I mean, because my nephew uses a Windows machine at the school, then comes home,

54:01.480 --> 54:07.320
and we only use Linux here, so he has a Linux laptop in his room, and he just logs into that,

54:07.320 --> 54:10.120
and it doesn't care. It just works. Yeah, and chatroom is bringing it up,

54:10.120 --> 54:12.840
too. Edubuntu is a great distro to run. Sure.

54:14.200 --> 54:19.640
I've also done it with Fedora. There are specific spins of distros that are targeted for Linux

54:19.640 --> 54:26.120
terminal services, so try it out. Edubuntu is a great start because it's really focused

54:26.120 --> 54:30.840
at the educational market. Okay, Matt, well, guess what? That brings us to the end of this

54:30.840 --> 54:35.480
week's Linux Unplugged. How about that? Did you know? Hey, were you aware, Matt? This is brand

54:35.480 --> 54:38.360
new. We just launched this. Did you know you could watch this show live? How about that?

54:39.000 --> 54:44.360
You can. I know. It took a little working, but I found this company called ScaleEngine,

54:44.360 --> 54:45.480
and they hooked us up. Yeah.

54:45.480 --> 54:49.640
So here, you could... Hey, maybe you guys didn't know it, so come over at jblive.tv. We start at

54:49.640 --> 54:54.600
2 p.m. Pacific, or go to jupiterbroadcasting.com slash calendar to get in your local time zone.

54:54.600 --> 54:59.560
Oh, and go over to teespring.com slash cr100 for the Coderradio 100 shirt. All right, Matt,

54:59.560 --> 55:01.640
I'll see you on Sunday, okay? See you Sunday.

55:01.640 --> 55:16.040
All right, everyone. Have a great week. We'll see you right back here next Tuesday.

55:31.640 --> 55:42.040
Bye.


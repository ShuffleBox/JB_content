Before we get the show rolling today,
I'm wondering if any of you in the Mamba Room
are working on any cool projects
we can share with the class.
I've been playing with some new things this week.
Oh yeah, what?
Well, an old thing renewed,
so I've been working on bringing Ubuntu MATE 18.04
to the Raspberry Pi 2, 3, and 3 Plus.
But in doing so, I have reacquainted myself
with SystemD Endspawn,
and I'm having a little love-in
with SystemD Endspawn this week.
Wes talks about this all the time.
This is like a way to kind of do like little mini containers
with using nothing but SystemD, right?
Yeah, it's a part of the SystemD tool set
that is for container management,
and it can do most of the things
most of the container tools can do.
But what I've been doing is pairing it up
with a piece of software called QMU User Static,
which is a fast processor emulator for ARM and MIPS
and a whole bunch, and PowerPC,
a whole bunch of sort of unusual processor architectures,
and I've been able to create containers
of ARM 32-bit and ARM 64-bit,
and actually do my build and testing
on my Intel workstation using foreign architecture
containers, even taking it to the point
where you can bind mount into the container
for things like X authority and pulse audio
and the display environment variables
and the X socket, and you can actually launch
X applications for ARM inside the container
and run them on your host operating system,
so it's really great for sort of debugging
and getting stuff tested.
Holy smokes, what's the speed impact like?
It's negligible overhead, this one certainly is,
but you know, I've done this sort of thing
inside CH routes in the past,
but there's some overhead you have to manage there yourself,
whereas system dnspawn does all of the isolation
for you automatically, and you don't have to do things
like binding to dev PTS and all that kind of monkeying
around it, it caters for that,
but in terms of performance, it's brilliant.
For me, operating these things and running
quite complicated build environments inside them,
it's like native performance.
A lot of fun when you bring up things like system monitors
and it tells you it's ARM 32-bit running
on an i9-9900K with 64 gigabytes of RAM,
but you know, it's, which I posted on Twitter
and had a few people looking sideways at the screenshot,
but yeah, it's a really potent combination
of QMU user static and system dnspawn.
That is pretty great, that's a hell of a way
to start a show.
This is Linux Unplugged, episode 291, for March 3rd, 2019.
Oh, hi there, and welcome into your weekly Linux talk show
that this week is packed full of community news.
Looking at the price of the cloud,
has a bit of a rant about our home folders,
a few pics for you, and much, much more.
My name is Chris.
My name is Wes.
Hello, Mr. Payne, and this week,
I'm super excited to say in studio,
joining me is the CEO and founder of Linux Academy,
Anthony James.
Hello, Anthony.
Hey, thanks for having me, it's exciting to be here.
You got a nice little spot set up.
Do you like what I built here?
I do, very relaxing.
I know, the final piece really was that lamp.
That lamp really did it.
Not the giant penguin?
That was the first thing I put in here, actually.
Got to.
Coming up on this week's episode,
we got a really special episode,
because not only is Anthony here,
but we're joined by an outstanding cast of characters
in that Mumble Room.
Time, appropriate greetings, Mumble Room.
Hey, everyone.
Good evening.
Hello, hello, virtual lug.
Yeah, in the room today, we got Bashful, Brent,
Cheese Bacon, Daniel Foray, Popey, and Wimpy,
all joining us to gather around the community news,
to curvuts about our home folders,
and to talk about potentially a realistic,
a real possible video editor for Linux.
We'll see.
We'll give you two different picks that we like right now.
You can walk away with at least one of them that will work.
But before we get to any of that,
let's kick off the community news with a bit of an update
for you Firefox users, which I know is a lot of you
out there.
Firefox 67 is going to take a new step
to help improve memory usage.
This has been something that you could do via an extension
for a long time now.
But Mozilla plans to introduce a new feature in Firefox 67
that will aim to improve the browser's memory usage
by essentially offloading tabs you don't use very often.
It's a pretty good idea.
Yeah, I think so.
Interestingly, the bug's been around for eight years,
and work kind of just started.
But as someone who does use those extensions
on another browser I won't name sometimes,
this seems like a great thing to have by default.
Now, right now, it's basically going to occur in low memory
situations, and they've got a simple priority list
to determine what actually gets unloaded.
So first it's regular tabs, then pin tabs,
then regular tabs that play audio,
and pin tabs that play audio, which
seems reasonable to me that'll probably
unload the things that you're not actually using.
Yeah, yeah, I could see the ones playing audio
would probably be, if you're letting them play,
you're probably using that tab, something like a YouTube video
or something playing in the background.
It is available right now in Nightly.
Why are we not letting the kernel do the right thing?
Because it already knows which pages of memory
you're using and which you're not,
and throws out the things you're not using.
Why are we re-implementing this at the application layer
as well?
Us platform compatibility.
Well, there's that, I think, in part
because they have to take whatever steps they can
to reduce the criticism they get for the memory usage.
They can't just wait around for the operating system to kill,
because people will look at their process list
and go, three gigabytes, what the heck is going on?
So they're not resolving the issue
by reducing the amount of RAM they're using.
They're throwing stuff out that they
think you might not be using, but you might actually
come back and need to use later on, a bit like swapping.
Yeah, that's exactly what they're doing.
Yeah, I'm not saying it's brilliant,
but it does seem like it would functionally
fix a bit of the problem.
I do kind of like, for the Chrome plug-in I use,
I kind of like, and maybe it's just an illusion
and it would all work better done in a different way,
but it's nice to be able to sort of pick and choose,
because I can suspend stuff if I know I'm just
about to launch a bunch of VMs.
And I want to keep these tabs, but I don't need anything
to do with them right now.
And I can unsuspend the ones I want.
That's a good point.
Well, it'll be landing in Firefox 67
either way, which is currently scheduled
to be released May 14, 2009, if you are subscribed
to the Stable channel.
So that'll be coming soon.
Why don't we talk about Chrome?
Seems like only fair.
We got to do equal representation.
I'm more of a Chrome user.
What about you, Anthony?
I use Chrome.
Are you?
Yeah.
Yeah.
I've tried to switch back to Firefox.
Have you ever tried to do that?
I use that for my cross, my dual browser testing.
Sure.
I got them both installed.
Yeah.
Oh, yeah.
Oh, yeah.
It feels, I don't know why, this is completely arbitrary.
It feels chunky.
Yeah, I feel like Chrome scrolls smoother,
and the pages load in a little smoother.
So the perception is it's smoother.
Yeah.
I know that Firefox has made a lot of improvements.
So I like to follow it.
I do keep it.
It's my second browser.
I usually have three web browsers on a computer,
and it's my second one.
What's your third web browser?
It depends on the system I'm on.
So if I'm on, like, Epiphany or GNOME Web would be a go-to.
Or if I'm on Plasma, a lot of times
I actually use Opera as my third browser.
If I'm on the Mac, I'll use Safari as a third browser.
So it just kind of depends on the desktop I'm on.
What about you?
Are you a three-browser man?
Yeah.
I use Firefox, Brave, and Opera.
OK.
Brave, huh?
Yeah, you know, I should work Brave in.
Oh, my god, you should.
For about three years now, Brave is my only browser on my phone.
So I disable and uninstall other browsers.
That's the only browser I've used for the longest time on my phone.
And I use Brave on my PCs for anything personal stuff-related.
So I use Firefox for work, and I use Brave for my home stuff.
And Opera is my, I want to test how things are looking and working
in another browser.
So what is it about Brave that draws you into it?
On the phone, it's because you get basically the same user experience
and reliability of the Chrome browser, because Brave is based on that.
But you get all of the ad stripping and privacy guarding
baked into the browser.
So you don't need to mess around with ad blockers.
You know, you don't need to root your device
and put ad blockers on at a system level.
The browser takes care of it for you.
And you can opt into their program of actually choosing
how you monetize in at the sites that you want to monetize based
on their value to you as an individual.
And the same is true for the desktop, too.
You know, it just mops up all of that cruft
that you have that is just pervasive on every website that you visit now.
OK.
That's a compelling reason to try it out.
I could add that as a third.
I could see that.
I was a fully paid up Chrome guy.
And then I think you convinced me to try out Firefox some time ago.
And I switched to Firefox, and that's it.
I stayed on it.
Once they figured out how to do container tabs properly,
that's a game changer for Firefox, container tabs.
Yes.
Yes.
That was the missing feature that I needed
to be able to successfully switch back to Firefox.
And I think I've been on Firefox again for just a touch over a year.
So whenever that feature got introduced.
Yeah, that's one of the great features.
And it's the only way I'm even like halfway
feeling comfortable ever going to Facebook
is because I have a container for it.
So I was actually queuing us up to talk about Chrome OS
because there's interesting things developing over there.
Two things that we picked out this week.
Number one is on Chrome OS 74, they seem
to be putting a lot of effort into improving the experience of running
Linux apps on Chromebook.
So a feature they recently added is the ability
to actually run desktop Linux applications on a Chromebook.
We've talked about this on and off.
And with the new version, they're making it a little more
like a real desktop application.
You're going to get audio playback.
You'll get hardware acceleration to be able to watch videos
because that was a challenge before.
You couldn't listen to music.
You couldn't watch videos.
Now, don't get your hopes up, Wes, because we're not
going to be podcasting from Chromebooks.
There's no support for audio in.
Oh, but I'd already made plans and bought several Chromebooks.
Whoops.
I kind of do feel like it's starting to get time
to get a Chromebook, though.
So what, this is 10 years after they come out with Chromebooks?
Yeah, yeah.
But now they're finally running desktop Linux applications.
They're going to support sound and audio.
I could see that.
I don't know.
I could see trying it out.
I was thinking about for my wife, who's writing a book right now,
and she just needs a system with a keyboard.
And she's actually ended up preferring
writing in Google Docs.
I think she's crazy.
I can't stand Google Docs.
But she loves it.
It's definitely a class of user that
would benefit from using a Chromebook with the added
functionality of having a catalog of Linux software.
But for me, there isn't a Chromebook
that's manufactured that has got the raw processing
power and storage that I need to do what I need to do.
And I imagine that that's true not just for developers,
but for people that are working with video or high end
photography as well.
Oh, for sure.
Sometimes you just need a little more oomph.
Does that mean that creative professionals and developers
are going to become more and more marginalized
by their hardware choices in the future?
I think that's what's already happening on the Mac side.
I think you're already seeing that reality on the Mac side.
That's why MacBooks have four ports at best.
And they offer them in like three sizes.
And it's a total reduction of choice over there.
That's something that my co-host, Michael Dominic,
had to struggle with quite a bit and ended up
switching the majority of his workload over to Linux
because of the limited hardware choices
that he needed just to be able to build software.
I think it is a big problem.
I don't know if you stepped into an Apple store recently,
but they offer workshops in the store, right?
Recently, my girlfriend went in to go do a video editing
workshop.
And all of their stuff is focused on iPad and iOS apps
on iPad.
They don't have glasses for video editing
on their professional hardware in their store anymore.
Wow.
Crazy.
I wouldn't blame them.
I'm struck by how often when I'm traveling,
and I see people at the airport or in an airplane that
are using iPads, and the diversity of types of people
from young children with these big rubber
cases around their iPad to individuals
that have got to be in their late 70s to early 80s
that are all joining the Wi-Fi network.
They're browsing the media that's available on the plane.
They're all able to use this device.
And I've never really experienced anything
like that in my life.
In fact, I remember when the iPad first started selling,
one of the things that was remarkable
was that Angela's parents hate technology.
They have one PC that they have to have to do business stuff.
And they've really taken to the iPad.
They have several iPads now.
And it seemed to cross a barrier for people that don't normally
use technology were able to pick up the iPad.
And so if I was Apple, I'd be looking at that going,
that's a huge market.
That is a way bigger market potential
than the Mac ever was.
Because the Mac fundamentally is a computer with a file system
and computer problems and accessories
that aren't compatible, all this stuff
that you just don't really have.
The accessory is either certified by Apple
or it doesn't work on the iOS land.
Well, I hate to say it, but if you think about it,
the reduction of choice forces simplicity,
which for the mass market and what they need to do,
specifically now what you can do with the video editing
on an iPad, it's very opinionated on how you do it.
You don't have all the extra applications on there,
the extra things that cause issues for the components.
It's more limited, but what works just works, right?
What's the major workflow they're trying to solve?
And then for every other workflow,
that's 10% video editors, high-level video production,
high-level graphic production, so on and so forth.
Right.
And I think the Chromebooks are eating
into another area of this market,
like an area that is more like Hadia's workload right now,
which her primary thing she wants
is she wants a very reliable computer with a decent keyboard
that gives her good access to Google Docs,
that if she goes somewhere to do a presentation,
she can hook up to a projector and it's going to work.
And if she comes back here and picks up,
she has a laptop running Plasma, Kubuntu,
then she can open that up and get access to the same doc.
And she can open up on her phone and read the same doc.
That's what her main use case is.
For her, it's kind of hard not to say, well, that's a Chromebook.
Well, now she has audio in her presentation.
Right.
That'll work.
Yeah.
She could install Open Office Presenter or Libre Office
Presenter or whatever and give a presentation.
You know, what's interesting is, and you probably already
know the answer to this, because honestly, I've
never been that interested in the Chromebooks to look into it.
But for what they're trying to do
to get the Linux apps and components working on there,
and for as bare minimum and as configurable
you can make a similar lightweight desktop for that,
it's interesting they decided just
to go a whole route of a whole operating system.
Because it's now almost like, hey, all you need is a browser.
Except for that's not true.
You need these other things.
So we're just going to add it in there where it already exists.
Isn't that fun?
Yeah.
I think that's about reaching the developer market.
I think it's about trying to reach a more technical audience
and bringing, like they've reached a certain saturation
with the Chromebook.
And now they want to get that market that maybe needs
a text editor, wants their favorite terminal,
maybe needs GIMP, and wants to be able to SSH into their box
that they're working on or something like that.
Right.
Just enough technical tools to keep you placated.
Yeah.
Or maybe Android Studio.
Maybe they're targeting Android developers in the future.
Make an Android development workstation out of Chrome OS.
That's true.
I wonder if the dumbed down devices
are going to maintain that hold as the generations move on.
Looking at the people who've grown up with technology
and whether they're going to want to be able to directly access
the power versus having that dumbed down experience, which
sure, maybe was great for my dad who's 70 and a bald cowboy who
loves it.
But what about the people that grew up with it?
Wait, is your dad really a cowboy?
Yeah, that's a whole other story.
Yeah, I grew up in the prairies.
Canada has cowboys in prairies?
Oh, yeah.
We got lots.
Lots and lots.
Tons.
I thought cowboys.
Whole provinces.
I don't understand this.
I got to learn the history of cowboys.
Even in British Columbia, there is a very large cattle industry.
And then you just start going east, all the way to Manitoba,
all the way into Ontario.
It's full cattle country.
Of course.
It makes total sense.
Can we think seriously about the phrase dumbed down?
You look how powerful the iPhone and Android devices
and the iPad is.
There are people now being empowered to be able to do stuff
like video editing, or even just like simple photo editing,
or full-on design with an Apple Pencil and iPad Pro,
stuff that was absolutely not possible 10 years ago
on a bog-standard PC, or even a high-end PC,
or stuff that would have been very difficult and out
of the price range of mere mortals.
I think dumbing down is the wrong phrase,
because just because we think that we had the capability
to do those things a few years ago,
there's a much wider and diverse range of the population who
are enabled with these devices and are
able to do stuff that they would never have dreamed
doing before with a thing that they
can carry around in their pocket or a thing
they can put in their purse.
That's a good point.
I guess after having said dumbed down and hearing that context,
I actually agree with you.
Yeah, I can agree completely too in the photography space,
because I've seen huge, massive swaths of populations
getting amazing cameras in their pockets.
And my initial reaction many, many years ago
was like, oh, as a photographer, all these people
are taking photos that feel substandard to what
I'm creating.
But now these days, that perspective
has completely changed.
And I think enabling anyone to be creative in any way,
whether it be photography, or design, or even some audio
stuff, it feels like everybody can
get a voice for much less buy-in to this technology.
It's really a huge success for the population.
It feels like a reset.
We've gone along an uphill, a bit like Moore's law.
It's going up, and up, and up, and up, and up.
And then we've kind of gone jump down a tiny bit in power.
These devices are very powerful, but they're not i9.
And we've kind of gone down.
But we've gone up in usability and up
with the creative capability of these devices
and the empowerment that these things give you,
even if we haven't gone full on with power.
But that will come.
I think every year a new Apple chip comes out,
a new Qualcomm chip comes out that's
more powerful than everything that's ever been before it.
I think we've just had a bit of a reset for a short period,
and it will climb again.
Maybe.
I hate to compare computers to cars.
But if you look at cars and you consider
how much has changed in the last 50 years
on what's accessible under the hood,
or how complicated they are, or how productized they are,
you could see technology going that general trend, where
the hood is a little more welded shut, as the old saying goes.
But the consumer isn't disadvantaged to say.
They're disadvantaged in terms of getting access
to those components, but they're enabled
by the plentiful accessibility to the technology,
the reduction in cost, the market options.
Like there's other things that improve when
other things are taken away.
And I don't know, maybe I'm wrong.
But I, having, and I've made this point on the show before,
but having worked in education, then taking 10 years off,
and then going back, there was a huge, huge gap in the interest
the students had.
We could fill three labs of students, 30 students each
in each lab, the first time I was in the education system.
When I came back, it was a team of five students.
So can I jump on this car analogy real quick?
I don't know if this makes sense.
It makes sense in my head, so follow with me here.
So it's a new baseline.
So I can talk to this, to the videos.
We'll start with the car.
If you think about it, 30 years ago,
even when I was growing up, 18, 19 years ago as a teenager,
it used to be the coolest thing ever
to be able to change an oil or change a headlight, right?
Something you would want to know.
You'd get in there like, hey, I can change my oil.
Nowadays, you've got to take off the first part of the car
to be able to change oil.
But instead of having teenagers or whoever
is interested in cars, like, hey, I can change my oil,
they're now modding their cars from a higher standpoint
with this new technology implementation, right?
And I haven't dove much into it.
I've just seen some stories on it.
Same thing for video.
15 years ago, to see some of the basic iPhone editing stuff,
that was professional level, $10,000 to have made,
needed giant computers.
But the baseline of knowledge, the baseline of capability
for the upcoming generation starts off
with what used to seem impossible for us to achieve.
Now that just means, what's that next impossible step that
seems impossible to them that we can't even imagine?
Yeah, you're right.
To Popi's point, it's more people I have access to.
My daughter has an iPad with a 1080p stabilized camera in it.
She has an HD camera in her tablet.
I would have loved to have something like that
when I was six years old.
I always wanted to have one of those game gears that
plugged in the TV antenna.
Yeah, that would be great.
I remember my first car, I had to do some maintenance on it.
And I stripped the engine down and regrounded the valves.
And I put a new drive shaft on it.
I did loads of work on that car.
These days, there's no way I'm going to do that.
I'll throw it at a man and give him a small bag of money
and hope he fixes it for me.
But there are people out there who still want to do that.
I think that's the key, is there are still
people out there on Linux, for example, who still
like editing their Xorg.conf, whereas the vast majority
of people don't care about that kind of thing
and don't really want to do that.
They just want the thing to work.
And I think the iPad and these generations of devices
service a very large proportion of the population who
don't want to put their hands under the bonnet of a car
and don't want to edit an Xorg.conf.
They want to edit a video.
And this services that need perfectly.
We can have both, right?
Yeah, we live in a world where you can have iPads
and you can go get a Raspberry Pi to play around with.
But do you think that Linux can offer both?
I remember Linux, maybe even 10 years ago,
was a lot more tinkery than it is now.
It seems to be getting far more user friendly.
So do you think that we can get there and offer both for anybody
in the same package?
I feel like that's kind of a fair criticism.
I think that is true to a degree.
I've never installed GNU slash Linux.
But I actually have a story in here
about the systemd free Debian derivative, dev1.
They're planning a get together this spring.
There's going to be a dev1 conference.
They call it the, I think they call it the init system
independence conference or something like that.
So there are still circles with Slack out there, Brent.
I mean, there's still those circles
that are fully empowered.
When they first started, we laughed at them and said,
they're ridiculous.
But this is what happens.
People laughed at the Marte developers
when Marte was first created.
And they pointed out, oh, they're just doing a global search
or a place on the GNOME 2 code base.
But if you get enough enthusiasts who
are like-minded and feel passionately about the thing
that they're making, then you're going
to get conferences arranged around that project.
It's inevitable.
And it's bad on us for laughing and pointing the finger
at these people who don't want systemd on their distros.
Fair enough, they've got the choice.
And we've given them the tools to make it possible.
They're just making use of it.
I think something to keep in mind
is the nature of operating systems and computers
and technologies are changing so much,
sticking with the car analogy, moving to electric vehicles
where the vehicles do not have oil to change anymore.
But the common thread that we really
need to care about is things like telemetry
and these connected devices and our privacy.
And I think those are things that we
need to focus on more so than what
are the technical underpinnings that make the thing run.
Yes, that's a fair point.
I think that is something that we, as a community,
are particularly good at.
And we are always kind of asking those questions
and kind of watching that kind of stuff.
It is kind of hard, though, because there's so much of it
now.
It's just a full spectrum.
And maybe I'm just feeling that way
because we just got out of Mobile World Congress,
but holy smokes.
So let's shift gears for a moment
and let's talk about some good old traditional desktop stuff.
Gnome 3.32 is just a few weeks away.
And the biggest feature we've been waiting for for quite
a while has landed just recently.
Fractional scaling just squeezed in
before the big freeze.
Oh, that's right.
It's in the Git branches now, nearly three years
after the bug was first opened.
And of course, if you're not paying attention
or you don't have a high DPI screen,
maybe you don't know what fractional scaling is.
But I mean, it's really exactly what
it sounds like, having the scaling that is a fraction,
not just two, three, one, whatever.
So you can get just the right scaling for whatever size
display you might have.
It's nice to see it.
And it was looking like Gnome 3.32, 3.32, as I should say,
would be another cycle without it, which would be
another lap for elementary OS.
But it looks like it snuck in.
Yeah, it's just nice to see constant improvements, right?
This is Gnome 3.32, is that what you said?
Yes.
So there have been as many Gnome 3 releases now
as there were of Gnome 2 releases.
Wow.
Soak that in for a moment.
Wow, it feels like it's been a long haul to get here.
It really does feel like it's been a long haul.
OK, I just have one more community news story.
So let's cover this one pretty quickly.
Because I think this is, from a big picture,
pretty important for Canonical.
I think Canonical has a good advantage
when it comes to Kubernetes deployments.
And they have an announcement this week.
That they do.
Canonical today announced support for Container D
in the 1.14 release of the charmed Kubernetes
and their MicroK8s distributions,
which we talked about previously on Unplugged.
And Container D seems like it gets more and more momentum.
Wes, remind me again why Container D is the hotness.
I mean, really, it's just some simplification
to the whole craze that is the container runtime stack.
Before, you had stuff like, I mean, really, it all
started off with Docker, at least in the public's mind
recently, right?
And Docker did everything.
Container D spun off to have a nice, simple, separate daemon
that could just do all the container stuff, right?
Handle all the container lifecycle events
that you need, push and pull images.
Now, Docker, you can still use Docker if you know that
workflow.
But under the hood, it can just talk to Container D.
So it's just kind of simplification
and standardization within the industry, really.
Yeah, some much needed simplification, you might say.
That's good to know.
All right, well, then, before we move in to the meat
of the show, let's do a bit of housekeeping, a few items
to cover.
Next weekend is scale.
Come say hi to Wes.
Poppy and I, we're going to be at scale.
Very excited about that.
We have dinner planned.
You can get details for that at meetup.com
slash Jupiter Broadcasting, Saturday, March 9 at PF Chang's.
We'll be there stuffing our faces
and would love to hang out with you.
Looks like we have about 20 people signed up so far.
So if you're thinking about going,
go sign up so that way we can let PF Chang's know
what to expect.
Then when you're over at the meetup page,
check out the study groups we have coming up.
Today after the show, we're doing a study group
with Kenny on the fundamentals of Linux,
some really cool stuff on there.
We recently did a YAML study group.
We have virtual Linux Ansible fundamentals coming up,
as well as Kubernetes fundamentals
just around the corner.
We're doing a second study group in March.
All of those details up at meetup.com slash Jupiter
Broadcasting, including that second one
is going to be before the unplugged program.
So if the timing hasn't been working out for you,
this one might.
And then a plug for the seventh birthday of Linux Academy.
Congratulations.
That's huge.
It's a big day.
Does it feel like it's been 20 years,
or does it feel like it's been three?
Approximately 15 is what it feels like.
Not as bad.
So how do we go from, OK, I'm just curious, short version,
how do we go from, hey, it's our birthday,
to let's burn Chris's mouth off?
How did that, how to go from, hey, we've got a birthday,
to let's make Chris feel all the pain?
I'm happy to say that I had nothing to do with that.
Oh, really?
Outside of, of course, hosting it.
Yeah.
But that was not my idea.
Yeah, OK.
Well, there is a video coming up soon.
We did a chili challenge where Anthony asked us
trivia questions about the company.
And of course, because I'm the new guy,
there was small shot.
I had a small shot.
Well, you did know how many podcasts are offered.
Yeah, I got that one right.
Yeah, that was a good one.
And my mouth burned off.
And that video will be out soon.
Check out the Linux Academy com Twitter account
for when that gets posted.
And we have a whole bunch of live events coming up in April,
too.
So linuxacademy.com slash live, if you're
listening after the factor, you can remember that one.
Meetup.com slash Jupiter Broadcasting, though.
That's where all the good stuff's going on for scale.
I'm very, very excited about that.
I think it's going to be a lot of fun.
Mostly just because Popeye's going to be there.
Since Popeye's going to be there, it's solid now.
Oh, yes.
I've just signed up for the meetup.
I didn't realize.
I thought I'd already done it, but I've actually
signed up for the Linux Fest Northwest one.
So I'm now going to two JBE meetups.
Great.
Super fan.
Yep, that's right.
The Linux Fest Northwest one is on there as well.
All right, so we also have another meetup
we should probably mention, speaking of Popeye.
Popeye and Wimpy are getting together
with their audience for the Ubuntu podcast
on March 16th, gettogether.com.
Or is it gettogether.community?
For that, I'll have a link in the show notes.
The Brew Dog, March 16th, 3 PM.
We've not had one of these before.
We did a tweet out at the end of last year
when we finished our last season and asked everyone, hey,
what kind of meetup would you like?
Would you like to have hacking session on laptops?
Would you like presentations?
Or should we go to a pub?
And overwhelmingly, everyone said, let's go to the pub.
So yes, we're doing that.
No way.
Surprise, surprise.
Yes, I know.
Yeah, who would have thought it?
English people voted to go to the pub.
Shocker.
My meetup advice is make sure the payment
stuff is clear up front.
Whatever it might be, make sure it is clear up front, right?
I'm editing it right now.
Don't tell anybody this.
Don't release this on the internet.
But I was somewhere once where I think
I watched Anthony get suckered into picking up
like a $2,100 meetup tab.
Yeah, Texas Linux Fest.
Yes.
And it was my bad because I brought the crowd.
It was, we're going to go out to lunch.
And it was like, oh, let's go out and do something.
And there was quite a crowd that followed us.
Plus, we had some of the staff, and it was just.
I just love doing that, though.
You know what I mean?
It's a give back to the community.
And plus, there's nothing better than hanging out
and just talking Linux and stuff with people.
All right, well, let's talk a little Linux.
Wes brought a soapbox into the studio about two weeks ago.
Just trying to keep it clean, you know.
Yeah, I mean, I'm usually the one that brings these.
Usually, it's about online journalism
and how it impacts open source communities.
That's usually my favorite one.
And it's even got a few trademarks on it now.
But Wes really brought this shiner in.
It's one that's been in my soapbox closet
for so long, and I'd never even thought
about talking on the show.
I thought maybe I was a crazy person.
But have you ever noticed how many damn hidden files
are in your home directory?
You do a good old-fashioned ls, it's not so bad.
Maybe you got a few inner case folders, things like that.
But you do an old ls-a, and all the hidden files are revealed.
It's a mess of it.
I encourage the listener, if you are in front of a computer
right now, do an old ls-a on your home directory.
It is extremely overrun with directories
that applications have crapped all over your home folder,
not following any particular standard,
making a mess out of things.
And I've just always thought it was just me
being a little precious, thinking
that it was my special computer, how dare they mess it up.
But I've seen a few articles.
And then when Wes walked in the door with this soapbox,
I knew I wasn't alone.
Let's see, I'm looking right now.
I have 42 directories, starting with a dot in front of them,
just littered around.
And then 27 files, totally separate from that.
You're an amateur.
Oh, really?
Oh, yeah, let's bring it, guys.
I've got 42 directories, like normal directories
in my home directory, and 117 hidden.
So yeah.
117?
What are you doing over there?
You're installing a bunch of software, aren't you?
This is the whole point.
They're hidden.
I don't care.
I don't see them.
Like, why should I care?
But they're there.
Because they're there.
That's like saying you shouldn't wash your hands.
So bed bugs, but I don't care.
They're hidden.
If I can't see them, they're not there.
That's good enough for me.
I'm surprised to hear this from a man of hygiene as yourself.
I agree.
Like, just get over yourself.
It's unfortunate that there are specifications
that you should be adhering to, to actually take care of where
these dot files get placed.
But the world isn't perfect.
And therefore, there is dot file proliferation.
But just, you can't, outside, out of mind, just get over it.
So you're saying there's no validity to the fact
that there is an XDG desktop standard that says clearly
that developers should put their configurations in the.config
folder and go to town in there to keep the user's home
directory clean.
Right.
And even the XDG specification doesn't say put it in.config.
It says use this environment variable declared
by your operating system that will put your.files
in the right place as prescribed by that OS.
So it's not even like randomly make it in.config.
Because on other platforms, that may not
be the right place to put it.
That aside, does it matter?
I think what it is is it's a result of the Unix and Linux
permissions model, where the developers have
no other guaranteed place to safely write something
that the user will have access to that won't
get destroyed on a reboot.
And so out of a lack of a better design,
they've had to just crap these files everywhere.
I think it's a bit of a shame.
I can think of two more reasons why.
Like one, that the application, let's look at Vim, for example,
predates the Free Desktop spec.
Sure.
So they can say, we're grandfathered in.
Screw you guys.
So Vim is in.vim in my home directory.
But what about developers who put stuff in the home directory
because that just looks like the right place to put it.
And they didn't know about the Free Desktop spec.
Maybe the Free Desktop spec isn't as well-publicized.
Maybe it's because we don't have rock-solid APIs like Apple
do, that people just go free-for-all, oh, that'll do,
and dump it in your home directory.
I'm looking at you, Thunderbird, that's in my home directory.
Yes, it's another one.
Yeah.
Thunderbird doesn't even ship a.desktop file, does it?
Or at least Firefox still doesn't.
Really?
Yeah, they do.
Yeah, they do.
Did they start adding one?
Because I remember it had to be patched in in the Ubuntu
Archive.
Yes, you're right.
Yeah, it was vendor-patched, wasn't it?
Wasn't this because of the branding debacle?
And now that's all gone away.
That does ring a bell.
That does ring a bell.
I'm pretty sure they don't carry a.desktop upstream.
Dan, you must agree with me.
This is a mess, right?
This is a mess.
This should be tidy.
There should be a platform solution to it.
And it should be all in one nice, clean spot
that is easy for the user to back up,
that doesn't make a mess of the root of the home directory.
Please tell me, Dan.
You're on my side.
Yeah, I kind of feel like the reason
that we need developers to care about this stuff
is so that we can provide platform features.
But if you're not actually providing those features,
there's no real incentive for them to follow the spec.
So I don't know.
Maybe containers will save us and will force developers
to do things more cleanly.
I have no idea.
No, the container file system will just be a horrible mess.
It'll just be inside the container.
Dang.
All right.
Wes, I tried.
I tried to represent the soapbox for you as best I could.
I'm sorry I failed you.
No, I mean, I think ultimately, it doesn't really matter.
It's just one of those small inconveniences.
And really, I only notice it when
I'm trying to teach new users.
And it's pretty far down on the list.
You know, I kind of just incidentally manage it.
And really, if you manage your backups or system at all,
you've found the few files that you might actually
need to care about already.
OK, now, I stood definitely on the I don't care bus
as I was traveling down the road.
But ding, ding, I want to get off.
I'm now looking at the things that are in my home directory.
And it is now starting to piss me off.
Amazing.
I love it.
I love it.
I love it.
I love it.
Whatever.
I can see a dot mumble overlay pipe, a dot mumble socket,
dot pulse dash cookie, dot selected underscore editor.
What the hell are these things doing in my home directory?
They're messing it up.
They're messing it up.
Disrespecting your home folder is the one spot
on the system that's truly yours.
And I go to great lengths to organize my home folder.
It's just very disappointing.
Are there any tools to clean this stuff up?
I found a good one.
Dot Lightworks, dot there can be only one.
It's a zero byte file as well.
Wimby, don't you have a dot file manager
that backs these things up?
And does it clean these things up too?
Well, potentially it cleans them up
if you reinstall your system and then you restore your dot file.
So yes, I use a bit of software called Yadim,
which is yet another dot files manager.
You can find that at yadim.io.
And it's basically a wrapper around git
with a means of expressing these are the dot files or dot
directories that I want to put under version control.
And as you move between machines,
you can check out and check in your configuration files
so that your carefully curated configurations
follow you everywhere.
That makes it worse.
Surely you're like spreading the virus far and wide
to every machine.
Well, these dot files are going to exist
whether you like it or not.
Dot git config, dot SSH, dot bash RC, the list goes on.
So I may as well have my versions of those files.
I don't get to choose where they get placed,
but I can choose what gets placed inside them.
So that's why I use a dot file manager.
And I use it for more than just the dot files.
Now I actually have, there are common directories
you see in your home folder, downloads, music, videos.
I have a couple of my own, my favorite
being Cruft and another one called Development,
for example.
And those are in Yadim.
So when I go to a new system I've just installed,
I pull down my Yadim config, and it stands up
all of my common directories.
And even a folder called scripts,
which is my tool belt of common stuff, is in there.
So it makes the folders, too.
Oh, yeah.
Yeah, I've got a whole heap of stuff in there,
all of my useful scripts.
So I never have to worry, oh, where's
that file that magically does this thing?
Every computer, it's all the same.
It's very fast.
In fact, I had a disk fail earlier today about lunchtime.
That is no biggie.
I mean, I've got good backups.
And because I've got these dot file things,
I'm now up and running.
So not going to name names, Popey, looking at you.
But I was able to log into Mumble
and move into the on-air channel because all
of my Mumble certificates and everything
are all in my dot file manager.
And I was just back up and running within 20 minutes.
Yet another dot file manager?
Yeah, that one's pretty good.
Follow Martin, too, except I did mine with Ansible scripts.
And all of my configuration, software installations,
and everything are done by a Git check-in.
And then the script self-installs
a cron job that uses Ansible pull
to suck the configuration down to each machine that's
configured.
Very good.
I don't think we're ever going to pick this stuff
and make it sane until we have a free desktop cloud storage
portal and a cloud settings portal
so that users are complaining like, hey, GIMP
didn't sync my settings to my next cloud.
Use the things portal, and then it'll
stop littering everywhere.
That'd be a nice service that somebody could offer, really.
That'd be good.
That'd be really good.
I like having a junk folder in my home directory.
I like having a build folder in my home directory and a bin
folder.
So if I download something that is just
like something to execute directly,
I always move it to the bin folder.
Or if it's something I have to build,
I usually will do the git checkout in the build folder,
build it there, and then move it to the bin directory.
And then I'll create a.desktop file for it
and actually integrate it into the Plasma launcher
or something like that.
I have a source folder that I use for downloading stuff
that I'm compiling from source.
And then development is my own projects
that I have tucked away.
Nice.
It's a good setup.
And that's why I care.
I know I shouldn't care, but that's why I care so much.
People have been tweeting me and telegramming me
their pictures all week.
It's been really funny to see the different junk
in people's folders.
And you get an idea of what kind of programs they run.
I kind of enjoy looking at it.
You can see those directories, though.
You know, downloads, music, in your case, junk, in my case,
cruft.
But you can't see the.files.
Unless you want to turn it on your file manager,
and why would you do that yourself,
see.files every time you open the file manager?
You know, you don't see them.
What's the big deal?
Yeah, it's not really so much.
It's just sort of the principle of it.
And every now and then, it strikes me.
And I had an opportunity to really think about it
when Wes brought that soapbox into the studio.
And I was just sitting there looking at that shiny box.
And I thought, you know, you're right.
That's my home folder, Wes.
He likes to get me fired up like that.
Wes will go in there and switch out an editor to Vim,
maybe alias nano to Vim.
You're just so fun to troll.
It's not my fault.
I think this is a slippery slope.
And next, you'll be one of these nutters
that is refusing to run a Linux desktop environment
if there's any D-Bus in it.
And you'll be compiling out D-Bus from every application
imaginable.
I happened across one such blog this week.
And I was just looking at it thinking,
why would you do this to yourself?
Why would you go to these links to remove a useful technology
from the Linux desktop?
Were they on dev1 by chance?
No, no, they were not.
But you know, I was just reading it,
thinking, Carlos, there's a lot of effort to go to.
And I'd love to know the rationale as to why
you would want to do that.
Yeah.
Yeah, some people like the challenge.
Is there a desktop environment that doesn't use D-Bus at all?
I don't think there is.
I mean, doesn't XFCE, they use XConf.
But I don't know if that's using D-Bus behind the scenes
or not, or if it's their own X settings sort of overlay.
What kind of system can you run without D-Bus?
Well, I know, right?
This is why sitting there and compiling,
removing it from build options and what have you,
it's just crazy to me.
It's, you know, modern technology requires a means
for inter-process communication.
Yeah, we could have actually used a lot more of that.
I find it curious that throughout this whole blog post,
they didn't actually give the rationale for everything
you were reading.
No, that's just an assumed.
Yeah, no, it was just describing the length
they'd gone to to remove it.
It was astonishing.
Did it work at all afterwards?
I mean, were they happy with the results?
Well, they had to make a number of compromises
in the applications that they were prepared to use.
Because as Dan points out, there's
a whole catalog of software that is a hard requirement now.
Right, including like Network Manager and?
Even like system level stuff like DNS Mask
wants to use D-Bus by default now.
You know, as our buddy Richard says,
I think it's wasted effort.
I think that is some wasted effort there, my friends.
All right, well, I'm glad Anthony's here for this story.
This is our last story of the day before we get to the picks.
And I'd love to get your perspective on this one.
So Lyft is doing an IPO.
And as part of that, it has come out
that they are paying Amazon at a minimum of $8 million
a month until the end of 2021.
It's all buried in there.
They're contractually obligated to pay at least $300 million
to Amazon Web Services.
They're committed to spending between $8.33 million
and $8.57 million a month to AWS.
Really what struck me is that, I mean,
they're committed to this, right?
If they don't hit or exceed that $300 million threshold,
well, they're going to have to pay the difference.
Yeah.
Is it based on a commitment?
Or is it based on something like reserved instances
or something silly like that?
Yeah, it's like a price deal they got.
Yeah, so what's happening, and we
got to experience this with one of them as well.
So what they're doing is they're locking in these contracts.
And they're contractually obligated
to hit a certain amount of revenue
as part of the contract.
Now, there's things that they do in return.
Sometimes they're partnerships.
Sometimes it's just access to stuff.
Or they'll come in and help you with their infrastructure.
It just depends on what you negotiate
with the cloud provider.
But it's contractually obligated to hit it.
This is really remarkable, because the information
recently reported that several companies have
found that their AWS bills are getting surprisingly high.
Dropbox notably recently switched off
AWS to their own on-premises infrastructure
due to monthly run costs.
There was another startup that announced
that they were also contractually
obligated to make a certain payment level,
like they would have a certain level of usage.
And it strikes me, well, I guess the first thing that
strikes me about this is what an intense amount of money
to use what is essentially hosted free software
at the core of it.
Like, what a striking amount of money.
That is really, really something.
Per month, $300 million is what they
have to pay total, which works out to be almost $9 million
a month.
It's good to be AWS, huh?
I mean, there's companies that don't even
get close to making that much money in an entire year.
Yeah, but it's not unfeasible, though.
Think of Lyft, at least Uber is.
But Lyft's a global company.
They've got to run at scale.
They've got to run it high available.
You don't want your Lyft application going down.
Right, especially when you're driving somebody.
Yeah, just to manage all the servers and application
and development on that, the salary alone
to run all that in-house and all the infrastructure
and everything starts getting up there
to be expensive versus AWS, where you
can offload a lot of that.
You still have a lot of control, but you
don't have to own the hardware, worry
about the scaling, and you can do it quicker.
So sometimes for that convenience
and that kind of safety net, it's what you're paying for.
It's almost a little security versus.
Right, and it's the core of their business.
It's like what they do is that they're a service.
They have to be online.
Oh, yeah.
Well, and they've got to be able to scale, too.
And I mean, you've got to be able to scale up and scale down.
And I mean, I guess at the end of the day,
that's one of my favorite questions.
Are they a hardware company?
Are they an engineering?
What do they specialize in?
And then offload the stuff that you
don't specialize in to somebody who does.
Even if it costs a little bit of a premium,
you need to stay focused on your core business.
So it sounds like they're doing that.
But I'll tell you what, I feel a lot better about our cloud
bills now.
That is good news.
Yeah, well, that gives you an idea
of where they could go, though.
Here's another way to look at it,
even when you're not the size of a Lyft.
So I'm going to speak from experience
here at my last company.
When I started, we had 11 IT people.
We could barely keep up with the engineers.
We shifted everything into Amazon.
Our staffing cut down to four people.
We still kept up, and we were saving about $700,000 a year
based on salaries, benefits, and everything like that.
Sure.
Well, if it wasn't for the cloud,
we wouldn't be here today.
We couldn't offer.
I mean, when Linux Academy started, I had nothing.
Like, I had dollars to my name.
Wouldn't be able to do anything if it wasn't for the ability
that you pay for what you use.
I mean, if you would have had to pre-provision co-location
space, or hardware, dedicated hosting, or something like
that, it's just too expensive.
Were the first systems on a dedicated box?
No.
It was all AWS when we first started.
Now we're across the different stuff.
It was all AWS.
If your bills are getting expensive,
it's because you're not managing your costs,
because there's always going to be that discussion
and evaluation of what your business requirements are.
And if you have to accomplish x, you're going to have a cost.
And if you're outside of your budget,
it's because you're not watching it,
or there's been a variable change in your business.
And it's an evaluation.
It's constantly changing.
You constantly have to evaluate it.
And if you need to stick to that hardcore budget,
well, then you need to make some decisions on what
you're going to cut to stay there.
Yeah, yeah, I agree.
And in a past role, we actually took a decision
that it was cheaper to re-architect the application
that we were deploying to use microservices and stay on AWS
and manage our AWS instances better than it
was to bring everything in-house, so to speak,
and stick it on our own metal and continue
operating our application in the way it was currently
architected.
So you do have to think creatively
when you use Amazon and, or AWS, rather.
And it's not a replacement for, I
have a big server in the corner, and now I
want a big server in the cloud.
That is not what these cloud providers are
designed to offer at all.
That's a whole different scenario.
I even had a VDI deployment where our hardware aged out.
And the cost of replacing that hardware alone,
we would have paid it off using the cloud in about four
and a half years.
By that time, you're almost ready for a hardware refresh
again.
It was a break even, but then you
get all the management capabilities
that you're not even breaking a sweat.
Right, yeah.
I remember this story.
A few years ago, it came out, and I just looked it up again,
and it turns out it's now a case study on AWS website,
but it's from Zynga, or Zynga, or however they pronounce it,
Z-Y-N-G-A, the gaming company.
Zynga, I think?
Zynga, yeah.
And so what they did was when they,
FarmVille or whatever on Facebook was huge,
and they ended up thinking, hey, it's
going to be cheaper for us to just host our own data center.
And so they started on AWS, and they moved it
onto their own data center.
And there was a whole bunch of stuff that happened.
The technology change that they had to do,
the popularity of their games went down,
and they had this complete overall cost commitment.
Now, this kind of goes back to the article, though.
If they would have had a contract like this,
would they still have the cost commitment?
Does Lyft have that cost commitment,
or is there something in the contract that says,
hey, maybe if the business starts going south?
Because if you start removing the benefits of scaling up
and down and paying for what you need
and being tied into obligations, that's
when it's potential that you start losing some
of the advantages of the cloud.
I think what's, to me, very clear
is for a very, very long time now,
and this really bears it out, the actual cost
of the core software itself is a very minor factor
in enterprise deployments.
And so the way we're seeing that bear out here
is the fact that AWS is often implementing
open source software and then providing that as a service,
the fact that the very similar functionality
is available for completely free,
and that's not acting as sort of a backstop to these costs.
The costs seem to be independent of the fact
that they're all based on software that's absolutely free.
Like, that does not seem to be impacting the cost of AWS
at all.
All AWS is doing in these cloud providers
is they're taking something that exists
and they're putting their wrappers around it.
Postgres, MariaDB.
They're just wrapping RDS around it
and writing some code to manage it on their end.
I think it really underscores the cost of software
isn't a huge deciding factor for businesses,
because otherwise they'd be using the free stuff.
It's everything else.
It's the staffing, it's the implementation,
it's the maintenance, it's the future proofing,
it's the scaling.
It's so many other things that go into it.
Right.
Cost might be a factor, right?
It's one of those, but you can't ignore that.
So you might not go with the premium Oracle database
because Postgres is free.
But yes, you still have to pay to keep the thing online
and do your backups.
One of the big sort of commercial avenues for Ubuntu
is Bootstack, which is where we manage and operate
clouds on behalf of organizations.
So it's all the same open source stuff
that everyone's familiar with.
But they want professionals to just look after that.
As Anthony said earlier, if IT is not your core business
mission, then why would you do that?
Pay somebody else to look after that bit for you
so you can get on with the business
of actually running your operation.
Yeah, you've got to focus, right?
You've got to choose only a few things
to focus on as a company.
Because if you've got to focus on and be experts
in a lot of different things, that's a staffing nightmare.
That's an expertise nightmare.
That's an institutional knowledge nightmare.
It's a risk.
Yeah.
Yeah, it's something to see it, though,
just to see it in hard numbers.
You get glimpses because this stuff is usually all private,
like how much people are paying and stuff.
But when you file an IPO, these things come out.
And so now we're seeing it.
Now, when Uber goes for their IPO, we'll get an idea
of what they're spending on this infrastructure cost, too,
I would imagine.
$300 million by 2022, though.
That's significant.
Really curious what that lock-in details.
The Business Insider article says
that Lyft still has to pay it, even if they
don't reach that usage level.
But you never know.
There could be something else in the contract that says,
hey, if we go completely bottoms up, this is over.
Who knows, right?
And what do they get in exchange?
Because when you look at the traditional model,
simply the only way they lock you in on anything,
as far as a duration, is reserved instances.
That's your largest cost savings.
That's your contractual obligation.
Outside of that, it's consume what you use and pay for that.
So speaking from experience, what I can say
is they try to entice you with some stuff,
like you can have access to some of our in-house developers
to help you solve some of your big technical challenges.
And you get priority attention.
And you get access into product managers.
And they help.
Those are the type of deals that actually
help influence the feature roadmap inside of services.
Yeah, where you're a big enough customer that can come in
and say, hey, you've showed up on our radar.
Let's talk.
Or if the customer goes and says, hey, we have this problem.
We need this.
They will prioritize it in terms of development for them
internally.
It's not even size-driven, though.
So I work for an MSP.
We resell a managed Amazon service.
So we manage Amazon for customers,
because they don't even want to do that.
Amazon, for the smallest deals, throws us
a huge amount of credits to hand off to the customer.
Like, I have a new customer that's three servers.
They just issued me a $5,000 credit US for no reason
other than to entice them to come in,
because they know full well that once you're in there,
you're going to spend.
And that's just all there is to it.
So they will go over backwards with architecture help.
You get access to product managers.
You can walk into their office and sit down
and meet with them.
They just want to get you hooked in,
because they know you will spend.
Simple.
It's almost like the entire Amazon business model.
Go in for market share.
Get them on there first.
Worry about profits later.
But AWS is exceptionally profitable, actually.
Well, market leader, they're just there first, right?
It's like anyone who gets there first, you have an advantage.
Yeah, and it's everybody else's game now to catch up.
Well, so I think, still, there's something about it, though,
that strikes me, just to conclude our thoughts.
Just something about it strikes me
that you could build something similar with free software
yourself.
Like, it's a very interesting time
where something very similar is achievable on your own
if you have the right time, the resources, and the reasons.
Or you can go flip a switch and have it
on this almost what seems like infinite scale.
But it's the same essential free software underneath it all.
Don't reinvent the wheel.
Spend time inventing something new.
Yeah.
Yeah.
And there's occasions when, depending
on what you're working on, the focus of the business,
you can't use the public cloud.
You know, you may be the custodians of data
that you simply don't have the agreement to put somewhere
in a public instance.
And one of the companies I worked for in the past,
we created our own data center, effectively our own cloud.
And we operated it because the customers that we were servicing,
they all had sensitive data.
And there was no way we would be successful as a business
if we were using public cloud infrastructure.
So we had to build our own.
Right.
There's stuff like VoIP comes to mind
are the things we have latency guarantees
that you have to make.
Yeah.
I'm not going to mention the nature of the business.
But yeah, there's a lot of different strata
of organizations where you simply cannot put it
in the public cloud.
The other thing that strikes me is
it's harder sometimes to build those private clouds these days
because people are using so much cloud infrastructure.
Unless you're giant and can pay top dollar,
those people go to build the public clouds,
and they're not going to build yours.
But even look at what Amazon's doing without posts,
if you're familiar with it.
It's basically Amazon in a box in your data center
that they fully manage from the same console using
the same APIs.
When the cloud first came out, I was sitting here thinking,
I don't know why it popped in my head.
But I'm sure it's popped in everybody's head.
They're just going to get rid of everybody's job.
And then if they just spin stuff up,
you don't have to worry about stuff.
And then every year that goes by, every year that goes by,
I would actually argue to say that architectures these days
are more complicated than they were 10 years because
of the cloud.
You have 100 and some different AWS services,
an infinite number of combination of things,
awesome architectures like event-driven architectures
that you're empowered to do.
And now you can specialize in a specific component
of expertise and just that in the cloud.
Yeah, you're right.
It's a continuing expansion.
We were talking on Linux Action News this week
about these little microcontroller devices
for valves and whatnot that are now getting connected to AWS
and getting managed by AWS.
It's really everything.
Not for everybody.
We wouldn't be just very much pointed out very clearly.
There are still plenty of use cases.
Yeah, and you're right.
It's getting even more complex now.
And it gets even crazier when you start going multi-cloud
or you have some on-premises, some on-cloud.
It can be really complicated now.
Well, Chris, if you were ever going
to start a high-speed frequency trading software company,
you would for sure have to have your own on-premises
environment.
I do know that.
Oh, yeah?
Yeah.
The speed matters.
That makes sense.
Or what about Bitcoin?
No, probably not Bitcoin.
No, not Bitcoin.
You can spin up all the GPUs.
Well, before we get out of here, why don't we
do a couple of app picks?
I promised you at the top of the show that we would give you
not one, but two different potential video editors
for the Linux desktop this week.
Both have brand new versions that came out just this week.
First off, the one, the only Flowblade,
describes itself as fast, precise, and stable.
It's a GPL3-licensed video editor
based on the MLT framework, which
just got a brand new update.
And one of the big things in here
is composite, mix, filter, and animate.
My review of this is it's still in early days,
but it's getting better.
When I mentioned that in the pre-show,
Mr. Wimpris jumped in with Shotcut.
Yeah, I'm deeply, deeply in love with Shotcut.
I'm by no means a well-versed video editor,
but I did some research in the middle of last year
to choose a video editor that I was going to learn and use
for projects in the future.
And Shotcut came out as my preferred choice.
And the guys behind Shotcut, and this is Dan Denady,
he's got a long history in the video post-processing
and video editing industry, and is also
the guy behind MLT itself.
So Shotcut is kind of like the reference implementation
of what Melt can do on the back end.
And there's lots of killer features,
but the things that have really started to stand out
in recent months in Shotcut is the key frame support.
You can now have multi-point key frames,
so you can move effects and transitions
through multiple curves.
Color grading is excellent.
And the thing that I really love is first class
encode your video, render your video out on the GPU, which
for listeners at home, you only want to do on NVIDIA GPUs
because the quality on AMD is particularly bad.
It's quite bad on Intel.
On 10-series NVIDIA cards, it's acceptable.
And on 20-series NVIDIA cards, it's excellent.
Ah, good to know.
Yeah, and conveniently, snap, install Shotcut.
You'll always have the latest version.
Oh, I love it.
Also, the new version not only updates
to a new version of Qt, but it's got some feature in here,
a new feature, added English Great Britain translation.
I don't know what that would be.
I don't know what that would be.
Oh, yeah.
That's strange.
Yeah, it's excellent now that we have the text appearing
in the application in traditional English
rather than simplified English.
Well, thank you for the pick.
Shotcut and Flow Blade, we'll have links in the show notes.
LinuxUnplugged.com slash episode number, which insert
episode number here, which is 291.
Or the links will be in your mobile podcast player.
Guys, good luck.
I think we have one more week or two before the meetup.
But good luck with your Ubuntu meetup.
And Popey, looking forward to seeing you at scale, sir.
Oh, yes.
I cannot wait.
Yeah, it's going to be good times.
All right, with that, we will begin to wrap it up.
Go follow Anthony on Twitter, AnthonyDJames.
I'm at ChrisLAS.
Go follow Wes at WesPayne.
Go check out Wes on the TechSnap program, TechSnap.Systems.
I was hanging out with Jim Salter this week talking
about proper passwords, right?
Is that what it was?
Oh, yeah.
How to do proper password storage, not plain text.
Never, never plain text.
No, it was a really good episode.
It was a good take on a topic that we've heard before.
I really liked it.
A lot of good information in there.
Hey, coming up in just a little bit,
if you're listening live, is the study group.
But if you missed it, there may be a YouTube channel
in the meantime.
Come back here next Tuesday.
I'll see you guys next time.
All right, let's do a little post-show and get out of here.
Do our titles.
We didn't have the votes going this week,
so we've got to figure out what the heck we're
going to title this thing.
Brent's doing some great work, working
the doc with some titles.
Maybe you should read those out here.
Propose them, Brent.
Oh, really?
Good job, Brent.
See, you're going to win this one.
Well, I'm not up against very many people here,
so some of the best, I must say.
That's true.
That's true.
What do you like the best, though?
Is there one of them you like?
Lifting the clouds.
Lifting the clouds, flipping the switch on FOSS, dot or dash.
I like that one.
And clouding out open source.
Clouding out?
Clouding out, like crowding out?
Like that kind of thing?
Like crowding?
Let it be what you want.
$8 million a month in AWS.
What?
Really?
Oh, oh, oh.
I thought you meant that was, I was like, no way.
I thought you said that.
You think that was our bill?
Yes.
No way, I was going to say.
Isn't that what it was from Lyft, in the $8 million?
Yeah, it was $8 million, $8.9 million a month, I think.
All right, so dot or dash, clouding out open source,
lifting the clouds, flipping the switch on FOSS?
What about flipping the switch?
What was that about?
That was about ease of use.
You mentioned it for, you can just
turn the switch on a server now and concentrate
on something more interesting.
But if you had to ask, maybe it means it's not right.
Hmm.
All right.
Well, that's horrible then.
That's horrible.
What are you guys doing for the rest of the evening?
Assuming you're not listening to the study group.
Nobody's going to tell me what they're doing tonight?
Yeah, my wife just came in to give me
my daughter's passport.
Yeah, sorry.
Good, keep that handy.
I also, I'm building up a packing list for scale.
Making sure I'm bringing along everything
I need to bring along, because otherwise I'll forget.
I'm terrible.
My memory's awful.
What's the most important thing on there?
I can't tell you.
It's a surprise.
Oh.
Oh.
Oh.
I bet it's for the bad vultures thing.
Yeah, loads of stuff.
They're just like, just in case.
Because you know when you want to stand at an event,
you've got to have everything just in case.
All the extra bits involved, USB keys, and a Raspberry Pi,
SD cards, and HDMI cables, and USB chargers, and all that crap.
Always feel better with a pie in your pocket.
Yes.
Hadid got pulled over by TSA for traveling with my microphone.
Really?
This happens a few times, yeah.
I meant to take the bag with me, but just the way it worked out.
I guess it looks like a pipe bomb.
Oh, I've had that.
When I was flying to the States once,
they said the check at the gate, just before I got on the plane,
he emptied out my laptop bag.
And I had my Zoom microphone in there.
And he said, what's this?
I said, it's a microphone.
He said, what's that for?
And I said, interviewing people.
And he goes, are you a journalist?
I was like, no.
He goes, oh, because if you were a journalist,
you wouldn't be allowed into the States on the visa you've got.
I was like, uh, what?
No, I'm not.
So I was like, oh, shit.
That's crazy.
I always get stopped, both for the microphone and then
a bag full of just photo gear that seems like no one would ever
carry that much, and then a glass jar full of oatmeal.
They always give me a strange look for that one.
A glass jar full of oatmeal, Brent.
I love you.
You're so great.
Yeah, what kind of glass jar?
Like a mason jar, I'm picturing.
It's got to be a mason jar.
With a metal lid, though?
Does it have a handle?
No handle.
It takes up too much room.
Of course.
But you get hot water on the plane
and throw some chocolate in there, you're all good.
Oh, my goodness.
Clever.
This is a travel hack we're getting.
So you're getting the advantages of a dry, packable meal
that you can then get hot water on the plane, you add,
and you are also packing chocolates.
This is huge, Brent.
This is mind blowing.
I am totally doing this on Wednesday.
Why not just have a granola bar?
Because it's hot and comfy, and the look on their face
when they see a glass jar full of who knows what is priceless.
Is that not considered, I guess, oatmeal's,
I guess it makes sense.
It's not like it's made oatmeal when you're going through TSA.
It's not like liquid, right?
I could see them thinking it's pretty weird.
How far can you push the boundaries
on taking stuff that is not liquid,
but very clearly is made much better
with hot water on the plane?
How far can you go?
Pobie, you do know that we have food in the States.
You can just eat here.
You don't have to pack the food.
Well, yeah.
So that's a big thing.
All your filthy chlorine-washed chicken
and like beef pumped full of barbiturates and stuff.
I don't know if I can eat that.
I've got to bring some oats.
That's what I've got to do.
Yeah.
Ha, ha, ha, ha, ha, ha.

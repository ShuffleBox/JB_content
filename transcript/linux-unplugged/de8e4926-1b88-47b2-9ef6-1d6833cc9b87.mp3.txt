We are in an alternate location today.
We are in a backup location.
Super secret.
Location A was right outside
where they have this secret room that we can go into,
but we're not allowed to tell you what is said in there
and we're not allowed to record anything.
Oh.
But outside that room, we set up camp
where they have these tables
and that's where we did Coda Radio Live yesterday.
Right. Yeah.
So we were at the Hilton in downtown Seattle
at the Sprint event.
And the problem was, is next to the Sprint event,
the room over, so the doors are side by side,
they're two different ballrooms,
and the door over was a practical marketing strategy,
training session.
Oh boy.
And so all of these people
who have been sent to practical marketing training
by their companies were coming out
and seeing these two guys in apparently servant clothing,
asking us questions like,
what's the bathroom code?
Where do I get food?
My favorite one is a lady interrupted Coda Radio
to ask me if they have non-dairy creamer.
Like you're sitting here doing the live show.
I have this headset on.
Oh my God.
Which is the headset
like the ESPN broadcasters are wearing, right?
We're coming into,
we have both Noah and I are sitting there talking.
We're loud because we're on the air.
We're looking at our laptops.
We have a mixer there.
There's wires everywhere.
So clearly you're there to take live questions
about the hotel.
Non-dairy creamer.
So today we're like, boy,
we should really find an alternate location.
We should really, cause that didn't work well
cause we got interrupted a couple of times.
And we arrive at outside the secret room again
to discover a bit of, I would say, hushed chaos.
Like the room was tense.
And we're like, what's going on?
Why is the room so tense?
Did somebody fart?
And so we're walking around
and I'm trying to get on the wifi
and I'm getting frustrated.
And I give my laptop to Noah.
I say, Brown bear, will you get me on the wifi?
I got it.
He's got the special touch.
Yeah, I got a touch base with JV1.
And as I'm walking around,
Wimpy comes around the corner and says,
oh, the wifi is down.
What's that?
Oh no.
The network's down here at the switch.
The switch lost its config.
And the APs that are wired into the switch
are essentially without any network connectivity right now.
You get a little tipsy with the switch.
You misplace it and you leave it behind at the bar.
And it was this weird experience.
So right before that,
I don't know if you were there for this happen,
but I was just walking away.
So it was in the, yeah.
I was just walking.
I was just going into the restroom
or coming out of the restroom.
And this guy, this weird old guy,
and you all know what I'm talking about, right?
Like he has his phone in his hand.
What you're gonna look like in about 45 years.
Yeah, but this guy, it's like,
you're not quite sure if he knows
that the screen is on or off,
and he's not quite sure what those icons are.
And he's mumbling about, I can't get connected.
Are you on the wifi?
That's when he comes up to Noah.
As I'm walking away here, hey, are you on the wifi?
The wifi.
So I said, no.
And then I was afraid he was gonna want me
to help him with his phone,
and maybe he wanted to be my friend
or something else terrible like that.
I do not have time for this.
And so I was looking at him.
I just kind of brushed it off.
And then he mutters.
He goes, oh, we lost the switch configuration,
and I, ah, so the whole wifi's down.
And I was like, dude, wifi does not come from switches.
Wifi comes from access points.
And this further confirms that you are some old guy
that doesn't know how to use this technology.
Obviously, the wifi works just fine.
I'm not connected.
And then Wimpy comes out and says, oh, the wifi's down.
And then it dawns on me,
that dude is actually the tech from the hotel.
He's here to fix it, and he was probably right.
It probably was a lost configuration.
So the hotel went into problem-solving mode
because they got a big client here, Canonical,
who is doing, has people, has industry
from all over Washington and local areas here,
working on things that are all connected to the internet.
And this is a big part of why they're here.
And so the hotel has a problem to solve.
And I see these,
I see all these different discussions going on.
I got a little audio, but I might tell the story again,
and Linux one plugged a little bit with the audio.
But they decide we gotta move hotel rooms.
Long story short, we decide we gotta move hotel rooms.
Yeah, and so we're now in the backup location.
That's a big backup last-minute change.
But now here we have wired, we have wired ethernet.
We've got like, we've got 300 up, 300 down.
So we're sending uncompressed PCM audio
for this live event from downtown Seattle.
That's amazing.
Live from downtown Seattle,
this is Linux Unplugged episode 234 for January 30th, 2018.
Welcome to Linux Unplugged,
Jupyter Broadcasting's weekly Linux talk show
that is live from a Canonical Snap event
in a fancy hotel ballroom.
My name is Chris.
My name is Wes.
Hello, Wes.
Hello, sir.
Nice to see you downtown.
So I came to you this week.
You sure did.
Well, you're so nice.
Well, you know, that's the least I could do
when Canonical's in town.
Yeah, we're gonna give you a peek
at what it takes to actually make a Snap package.
Get a company on board with Snaps.
We're at a SnapCraft summit right now.
But we also have some breaking news
12 minutes before the show went on the air.
We'll talk about, we have big other community news
we will discuss as well as a very frank discussion
about Gnome, something I'm trying for a little bit.
And we'll end it with my favorite terminal emulator
of all time.
Whoa.
Yeah, yeah.
Those are strong words, Chris.
I know, I know.
And Wes, if that's not enough, Noah's here too.
Hello, brown bear.
Hey, thanks for having me.
Yeah, hey, thank you for running the board
during the show.
Yeah, no problem.
I've actually, I've gotten two,
we'll see if we, we'll see if I do a good job,
but I got the bottom two of your show now.
That's true, yeah, yeah.
You are a machine.
Yeah, you know what you ought to do?
I don't know, man, we should pull someone in for Ask Noah
because Ask Noah's coming up right after the show.
We're doing that live from here too.
Oh, yeah?
One of us ought to crash his show.
Oh, yeah, absolutely.
Make it fair.
Yeah, all right, well, let's also have the Mumble Room
crash our show because every single episode
of the Unplugged program is joined by our virtual lug,
even when we're alive on this occasion in downtown Seattle.
Hello, Mumble Room, time appropriate greetings.
Well, hey, how's it going?
Hello.
Hello, hello, you know, the old saying,
a watched Mumble Room doesn't boil.
I have no eyes on the Mumble Room today,
but I am told that we have great.
They're stronger than ever.
Yeah, we have a great turnout today.
It just takes us being live at a canonical event.
So what is this thing that we're at?
These sprints is kind of a rough definition.
Well, canonical describes it as something
similar to old-style bar camps.
And it's an agenda that's totally free-form.
The attendees drive the agenda.
And that kind of sounds like, oh, it must be free-floating.
But holy hell if these guys don't hustle their asses off
from actually 8 AM.
Technically, it starts at 9 AM, but they technically
start at AM, really, because they
have a company breakfast where everybody starts networking
and setting up expectations for the day at 8 AM.
They start on the schedule at 9 AM,
and they don't finish until 6 PM.
And it is go, go, go, go, go the entire time.
So they work with a bunch of different companies
that have come in, in what they say from companies
from different domains, from GUI to electron-based
applications and all kinds of things in between,
robotics included.
They all bring these different companies
in to work on a common set of frameworks and SNAP packages
and so we are here to observe that.
And this event is pretty different than the New York
event.
It is much, much more of a nose to the grindstone,
work really hard, which I thought New York was,
because it's not like they were screwing around in New York.
But this is at a whole other level,
because there's some big names here,
which we'll talk about more in a little bit
that we've chatted with.
And so I think the pressure is really on to produce something.
And there's areas here that are off limits to us,
but they're still very accommodating.
Right now, we're not in an area where
there's any canonical folks around us,
because everything they're talking about,
they're being very careful because of the partners
involved, not because they really have a preference,
but their partners have a preference.
Strategic partnerships, you have to do it the right way.
Speaking of strategic partnerships,
this will be impacting you and I on TechSnap in the near future.
Just before we went on air, now it's like 15, 16 minutes ago,
Jim Whitehurst, CEO of Red Hat, just
tweeted and announced that Red Hat has acquired CoreOS
as part of their Kubernetes strategy.
Is that right?
Yeah.
Wow.
Yeah.
Isn't that huge?
That is huge news.
Yeah.
So Red Hat is going to be acquiring CoreOS, expanding,
this is the tweet, expanding their hashtag Kubernetes
and hashtag containers leadership.
That's not even really an overstatement there.
Like, CoreOS is defining some of the core fundamentals
about containerization.
And they, I think, have sort of prevented
the total Docker takeover of containerization
to some degree.
Yeah, I think it's also been really interesting,
and it makes sense that Red Hat would be also interested,
is that they've really been approaching it
from the platform.
You know, Ubuntu has their own Kubernetes sort of spin
and set up, but there's a lot of people that just,
they're rolling it themselves on whatever infrastructure.
CoreOS provided a whole stack.
You had a lot of tooling built in and a whole environment
designed with that first.
What about the, doesn't some of the cloud first initiative,
what is that we talked about last week in TechSnap?
Oh, the Cloud Native Computing Foundation.
Yeah, that's part of the subpart of the Linux Foundation.
Isn't there some technology in that group that's from CoreOS?
Yeah, the Rocket Runtime.
Right, and now Red Hat owns that.
They sure do.
And so one of the core container technologies
that the Linux Foundation is putting their weight behind
is something that Red Hat owns.
Yeah, it really gets them a piece of the market.
Yeah, that sure does.
And that just happened, I mean, the ramifications of that
are going to be really big.
We just did, to sort of perfect timing,
go to TechSnap.Systems, and we just did an introduction
to Kubernetes.
Episode 353.
Thank you.
Yeah, episode 353, TechSnap.Systems slash 353,
Too Many Containers.
And it's an introduction to why are people even
talking about Kubernetes, where did it come from,
what is its open source heritage,
and why is it getting so much credence and credibility
right now in the marketplace?
Why has it come from like zero to 100 miles per hour
in the last year and a half?
What is all that about, and what does it accomplish?
That's explained in 353.
And then if you listen to that, and then you
hear this Red Hat news, it really
puts it all in context.
That's really good timing on that episode.
I'm just saying.
It sure is.
I was kind of really glad we did that.
I'm sure there's going to be a ton more as this develops.
We'll actually see what changes.
Yeah, man, I don't know, Noah.
I know that you work a big part in virtualization.
That's a huge part of what you do.
Much with containers, are they at the alta speed?
No, not really.
And part of that is a lot of our businesses,
we do subcontracting for some very large businesses
like Walmart and Sport Clips and stuff like that.
But the primary focus of our business
is all in a lot of really small businesses, right?
And so for there, if there is containerization,
we're the ones that are doing the containering.
But for the most part, we're just virtualizing that stuff.
It's nice to have tools to manage all that when
you've got a lot of them.
When you get a chance, check your Discord chat.
Got to scroll down to the bottom.
Put like a thumbs up in there for me or something, you know?
So Noah has, not only is he providing the connectivity,
because he's, well, I guess technically the hotel's
providing the connectivity.
But the gear he brought, he has whittled this thing down
to this incredible tiny package that he can throw in a bag.
Yeah, you guys can't see it, but from our perspective,
it's like a mostly empty table with a couple laptops
and a magic machine making this whole thing possible.
And by the way, the laptops are, right now,
I'm simple-helped into a client's computer.
So I'm not, the laptop has nothing to do with
the actual show.
Yeah, exactly.
The laptops are just for our web browsers and our chats.
Like there's nothing, the reason why I bring this up
is years past when we've done live events
for the last Linux Action Show or this show,
like there's literally been events where we're building
entire PCs hours before we go on air.
And it's like this complicated, thick, multi-computer,
three-laptop, huge sound mixer operation.
You wouldn't even need two people to carry this setup.
It's really remarkable.
And it's all because this guy's been playing around
with the actual radio.
Turns out, he becomes a radio professional.
All of a sudden, he gets the inside secrets,
stuff they don't tell the podcast.
I guess they already figured that out.
Who would have thought?
I guess it's something they've had to solve before.
Speaking of something you have to solve,
the cellular companies in this country have gone crazy.
Solve that high bill, switch to Ting.
Go to linux.ting.com, it's a smarter way to do mobile.
Your average Ting bill is just $23 per phone per month.
It's pay for what you use.
A fair price for however much you talk,
however much you text, and however much data you use.
More on that in a moment.
They have nationwide coverage, no contracts,
it's $6 for your line, and then it's pay for what you use.
Well, when it's $6 for the line,
that enables cellular connectivity at a level
that you don't normally think about
how you can integrate cellular connectivity.
And I'll give you an example.
If you go to linux.ting.com, check out their store page.
It's like shop, but first go to linux.ting.com.
Support the show, right?
You gotta go there.
$9 SIM card.
Sure enough, this maniac across the table from us,
Noah's got a couple of these Ting SIM cards in his bag.
Yeah, he's got them right on his belt, right?
He just whips them out, ready to go.
It's funny you say that, actually.
He has them in his credit card holder.
So he's got a wallet credit card holder
with one credit card and multiple Ting SIM cards.
It really is how he does it.
And so a canonical employee comes out,
and he's from London,
and he doesn't have any cellular service.
He's got one of these cell phones
that he brought a cell phone with him,
but he doesn't have a SIM card.
And it was just a meet and greet
the night before the whole event kicked off.
And we're just sitting around drinking some Mac and Jacks,
and he mentions, you know,
I kind of wish they had Wi-Fi down here
because this phone's dead without Wi-Fi
because I don't have a SIM card in there.
And Noah says, well, would you like one?
And the guy looks at him like maybe Noah's
like a salesman or something.
And he's like, what are you offering?
He's like, no, really, I just carry these around.
And you know what?
You don't even have to put it on.
I'll just activate it.
It's six bucks.
What do I care?
I'll just turn it off after the weekend.
And he just gives,
so sure enough, he gives the guy the SIM card,
activates it on the spot, gets it all going.
The guy comes back, pops it in.
The only thing that slowed us down,
the only hitch is that he didn't have
one of those SIM remover pins.
You mean those tiny little pins, yeah.
But actually we realized we were at a hotel.
You just go to the front desk, they'll probably have it.
So that was a resolvable problem.
But the story just relays the flexibility
you have with Ting.
What other network could you do?
I don't think it'd be possible without it.
And when it's your own device,
when you're trying to troubleshoot something,
it's that same kind of flexibility.
If you wanted to buy a phone,
they have a bunch of great devices.
If you want to bring a device,
they have CDMA and GSM networks.
Just check their BYOD page.
Now, I was mentioning the data.
So they have a post right now.
I've mentioned it on a couple of other shows,
but I haven't mentioned it here.
And I just want to draw some attention to it.
They have a Hack Your Phone Plan blog post,
which I love because they've essentially
written up everything I do as a Ting user.
And it's how to have a smartphone plan under $20.
And that's really just because Uncle Sam's cut.
Otherwise, it'd be like $16.
I mentioned this on Linux Action News.
I'm probably going to mention it one more time
just because this is it.
People ask me all the time,
how do you have three Ting phones
and you're paying like around 40 bucks a month?
How are you doing that?
Well, this is how I do it.
That's the thing, they're even telling you.
They want to help you out and help you save money.
They're honey badger, dude.
Exactly.
So check it out, linux.ting.com.
It is a better way to do mobile.
Linux.ting.com, big thank you to Ting
for sponsoring the unplugged program.
So I was kind of planning to have somebody join us today
for the show to talk about the SnapCraft event,
just because why not get it from the horse's mouth.
However, they're really busy.
I was going to say,
sounds like they've got a lot on their plate.
And so these guys are so dedicated to this thing
that we are scheduling our interviews after hours tonight.
And we're going to be conducting interviews
into the evening when they're done working
because they got a lot of stuff they're trying to accomplish.
And then the other thing, the other wrinkle
is everybody's moving hotels around
because of the connectivity issue.
So that added a wrinkle to our plans.
But I have been collecting audio snippets here and there
and interviewing people, doing sidebar conversations.
So we still have tons of stuff to talk about.
And I want to back up just a little bit
because we got an email into the show a few weeks ago
and it said, you're talking about Flatpak,
you're talking about snaps.
I have no idea what you're talking about.
And I think it's because we've gotten so far
into universal packaging.
We've gotten so far into this discussion now.
There's some users out there
who just haven't used them at all.
Yeah, and so snaps are containerized software packages
that are supposedly supposed to be really simple
to create and install.
And in modern terms, when you say simple to create,
a lot of times what they're talking about is automated.
So you can connect it to like a GitHub repo.
And every time you upload a new build to GitHub,
it also generates a snap package.
Some CI server somewhere goes, does a new build,
runs tests, publishes it out there.
Yeah, and then the snap software on the client itself
checks in every 24 hours and can auto update if set.
And so it can be a way for like say Telegram
to just constantly be publishing new versions of Telegram,
auto update like you would a smartphone app only.
And the risks of doing that are minimal
because all of the dependencies,
all of the changes are contained to the snap.
The snap actually mounts as a file system
and it's a runtime in there.
And they have these portals out,
I think that might be Flatpak terminology,
but it's essentially to have these portals out
that allow them to get access to certain things.
I think that right there.
So like as a normal user,
I think right now I'd still be asking,
all right, so I can package them.
How is this different?
I already make devs today.
Why would I wanna try one of these new types of dependent,
you know, new types of systems?
Right, well, so let me tell you
who some of the people I've talked to while we've been here
to kind of put this in perspective.
Because I think that kind of makes the difference
because you gotta view it from their perspective.
Was it last week or two weeks ago,
we looked at MB and Plex.
Yep.
And I remember one of the things that I didn't expect
when I started looking into,
well, what does Plex do that is open source?
And I discovered they have just this monstrous amount
of open source projects.
Their GitHub page is like three or four pages deep
of open source projects.
You just next, next, next, next, next,
and there's still the full page of open source projects.
And they target my QNAP.
They target my Linux box.
They target Windows, Macs, Android devices,
all these different NAS devices.
All the smart TVs in the world.
Anything that can either be a Plex client
or a Plex server, they're targeting it.
So they actually have a team
that is just packaging up software constantly.
This is what this team does.
And how do you suppose they do that?
They do it with a series of scripts and systems.
Different for each different platform.
And every time it's time to add another platform,
it's this whole, geez, can we do another batch of work?
Can we do another platform?
Can we deliver it on a regular basis?
What are the esoteric issues?
Because this is ARM version this,
and this is an x86 version.
And then, oh, by the way, on some of these systems,
we're shipping something that opens up a web server
and listens to incoming connections and has an API.
Yeah, right, yeah, exactly.
Which is candidate number one
for containerized applications,
is anything that's taking remote connections.
So you can start to understand
how a universal packaging format
is extremely appealing to a company like Plex
that is contemplating, well, geez,
imagine if Chris's QNAP that runs Linux
actually has Ubuntu on it,
could just install Snap packages.
And then they could write one package.
And the thing about Snaps is you can have one Snap name,
and you can have a 32-bit version, and a 64-bit version,
and an ARM 32-bit version, and an ARM 64-bit version,
all published to the Snap store.
And when the user searches, Snap search Plex,
they just get the one that matches their-
Right, the client picks the architecture you're on, and-
That also solves another huge problem for them.
So Plex is one of the companies that's here.
Slack is here this week.
Folks from the Azure team are here this week.
Electron, specifically the builder side of Electron,
so maybe output to Snaps from Electron builder.
Right from the tooling.
.NET team is here, Skype team is here,
and Visual Studio Code team, as well as several,
I mean, those are just the companies
that I can remember talking to.
But there's several other companies here,
probably another handful of companies that are here,
all talking about how to solve these problems,
or this is what it can't do for me yet,
or this is what we'd like to see have done with it.
And then Canonical, and the people here in these rooms,
have to sit back and listen to all these people and go,
yeah, that's something we could do,
or, boy, I'm not sure if there's a use case,
but maybe we can make a compelling argument.
Their stance is, you give me a good enough reason, Plex,
and maybe we'll add that,
because we're in that phase right now.
And that's an important step, right,
is to solicit input from all the different parties
that might use your tooling,
so you can make the right design decisions.
And I feel like it is a competitive advantage
that Canonical has
for specifically driving this kind of adoption.
So I talked about what does it take to build a snap?
Well, it takes more than having a technical idea
and a way of building something.
It takes a business calling another business
and saying, you have something of value
that a user base wants.
We'd like to work with you,
and we'd like to solve a problem that you're having.
And that business goes,
we would really like that problem solved.
We will send resource X, Y, and Z to location B
that you have chosen business,
and the business is very good.
We will send personnel A, B, C, and D to this location,
and they will resource together.
Right, the kind of really boring, everyday details
that just needs to happen to make this make progress.
One of the few things that bureaucracies
are actually particularly good at
is this particular thing.
And when you're trying to get outreach and adoption
from folks like Electron and Unity
and Microsoft Azure,
you need somebody that's picking up the phone
and calling somebody else on the other end of that phone.
And as awesome as open source volunteers
and other things can be,
sometimes you just need someone whose job it is
explicitly to, nope, you'll be there these regular hours,
and you're making the phone call.
And you call it, well, you're on developer outreach.
That's what you might call it.
You're on developer outreach,
and so you're gonna be on developer outreach.
Well, what that means is it's your job
to get snaps adopted.
So go out there and find people that have problems to solve
and start solving them so that way we get adoption.
But somebody up ahead looking at the 50-foot level said,
you need to drive adoption for this.
How we're gonna drive adoption for this
is by listening to what they need,
adding it back into the product,
and then working with them to solve the problems.
So for Plex, that individual's gonna walk back
pretty much knowing this is gonna work for us or not.
Like, there is real, tangible value for Plex.
We spoke with insiders.
We've got commitments or not.
We did an attempted,
because the other thing is they're writing real code here too.
It's so they're, if you got an idea, let's write it out.
We can't go in the rooms.
We can't talk about it.
But at the same time,
like they've invited us to their Slack discussion.
So I'm seeing things that they're producing.
Oh, interesting.
And I can see things they're experimenting with
that they might try adding.
And you see it's, hey, you know, I'm just making,
I'm not gonna give any specific examples,
but Bob from Microsoft has this idea
of how we could scale this this way.
And I just did, I just, I just tried this.
So check out this branch and give it a go
and let me know what you think.
And then you see somebody else go,
well, yeah, that's a great idea,
but what about this dependency over here?
And it, to me, what it feels like a little bit is
sort of putting it directly.
You have a bunch of, you get a bunch of heavy hitters
together in a room for a little while.
And when they're out working in the remote field,
they're good, they're producing stuff.
They have control over their own,
they are masters of their own domain.
But sometimes for it to really hum,
you gotta get all the heavy hitters in one room
and you gotta connect them with partners
that you've created these relationships with,
and they gotta send their heavy hitters.
And it, to me, what I've noticed now here
and at NYC is it seems like you can get
eight or nine months of work done in four or five days.
Yeah, right, you have the right incentives
and you have synchronous communication, right?
All the people you want to talk with
or who could knock down walls for you,
they're right next to you.
And they're going to breakfast with you,
they're going to dinner with you,
and they're at the lunch.
That's the whole point of every one of your conversations.
Yeah, and you know, they're breaking off
into like beers on this night and stuff like that.
And you know what happens?
They talk about work.
In an excited way, right?
That's where you can really have those good ideas.
That's what they all have in common, right?
Is they have work.
And so same with the folks that they're bringing in
from out of town.
I feel like part of this discussion too should be that
a lot of these are companies or projects
that haven't fit into the typical Linux dependency story.
They're not part of Fedora.
They're not part of the standard Debian distribution.
They're really third party packages
and we haven't had a consistent answer.
And so that's why it's important that we have businesses
and major Linux stakeholders who are pushing forward on this.
Yeah, and it doesn't necessarily detract from AppImage
or Flatpaks either because I think what it really is doing
is it's just defining each of their marketplaces.
Like this is going to be the area
where snaps are especially competitive.
But I was having this conversation with Noah,
an area where I think Flatpaks are more competitive
is when you want to subscribe to an entire repository
of available possible software
that you could install and update at any future point.
And so as just an example, as Flatpaks,
the number one competitor to snaps,
essentially all of the development builds
of GNOME software are available as Flatpaks.
In the past, to get development builds of GNOME,
like if you wanted to run the next version of GNOME,
you would either have to run some distro
that was way out on the edge,
but even that would generally be delayed,
or you could get these builder scripts
that GNOME had created to build GNOME from source.
Right, it's not just apt-get.
It's like, okay, go figure out everything you need to know
to be a GNOME developer just to try this out.
And that's one thing when you're building an application,
when you're building in a desktop environment
and it's something that's getting frequently updated.
Yes, multiple layers of dependencies,
multiple applications.
And then imagine if you're a GNOME developer
and you just want to test against
the latest version of gedit.
What a nightmare.
Because you don't need all of GNOME,
but that's how you get it.
So what they've done is they've broken out
all the development packages of GNOME
into individual Flatpaks.
And so you subscribe to the Flatpak development repo
and you can get nightly, you can get different betas,
and I'm just giving kind of a rough example,
but you can subscribe to the software that you want,
and then from that repo you can install
and choose Polari or gedit.
You know, things, just individual components.
Interesting.
And they come down as Flatpaks, self-contained,
they don't mess with your main GNOME desktop's GTK
dependencies.
It's all packaged, compartmentalized, contained for you.
And I think that's something that Flatpak
will continue to be more competitive at
than Snap packages are.
Because Snappaks are like delivering
an individual application.
And Flatpak is capable of delivering an entire repository
that could show up as a browseable software menu
in GNOME software.
Whereas Snappaks show up as individual Snap entries.
Right.
I think it also kind of says, you know, this is still new
and we're still really fleshing out
what the full problem domain is.
What problems need to be solved
and in what approach will you take?
Yeah, they're just, they're not sitting still.
No, right?
It's very exciting.
They're like, well, we're going to figure out our stuff
right now.
So I think Bashful Fruit, you in the mobile room
said that your team in engineering
is looking at using Snaps.
Tell me about that a little bit.
Basically, here, I'm, yeah, hey, hey, how it goes.
Okay, so we are basically looking to use Snaps
to package up a bunch of our, I don't know,
I'm going to call them enterprising apps.
It has to do with remote access, things like that.
But we have Linux agents, Linux clients,
all that other kind of stuff.
And on an offhand chance today in a meeting,
I made a mention about them.
And now all of a sudden I've got like two or three
engineering teams coming over to talk to me about it
because they didn't know.
Now they kind of are peaked and interested and looking to go.
You've been experimenting, snapping up a few things,
haven't you?
Yeah, I got a few things.
I mean, up on the forums and stuff, I just finished Restic.
Popey took over the MumbleSnap that I started
mostly just because I got sidetracked.
And other than that, yeah, and then we're also looking
at how we're going to leverage it and Budgie as well.
So lots going on.
Yeah, the Mumble one could be particularly helpful for us
because sometimes people get hung up on installing Mumble
before they can join the show.
I mean, some people have problems with that.
So being able to just say, install this,
snap install Mumble.
Oh, that'd be great.
I literally installed it right before the show.
So yeah, you've had some experimentation.
So you feel like you're comfortable recommending it
to your place of work, huh?
Yep, definitely.
I don't see any problems with it.
Any of the little points to be ironed out,
they're already on their way.
So I mean, that's exactly why they're doing this
get together, so.
The main thing for me is theming,
but they're working on that.
Yeah, there's some-
Some of the server side stuff too, so.
I know that there's a sort of a big push on that right now.
I believe I've seen some threads going on about it
and they're looking at how they're going to sort of make
that look and work.
And I'd even seen another thread where they're talking
about being able to distribute themes as a snap.
So don't like 100% quote me on that,
but I've seen some talk about that as well.
But the fix is coming.
Hey, look at that, Dan from elementary says
he's using the mumble snap too.
Nice.
Dan actually has a little news from the project
I think we're going to talk about here in just a moment.
So Dan, get your medium post ready.
We'll bring that up here in just a couple of minutes.
I don't know.
Do you have anything else you think we should mention
about the event?
I think I'll probably play some of the audio we have
next week once we've had a chance to just review everything.
Yeah.
Initial impressions as our first.
My initial impressions, I guess would be
that it's been interesting to get insight
into the culture and community and stuff like that.
And being able to have some of the discussions,
even though we can't talk about them on air,
even though we can't record them or anything like that,
it informs our opinion and it makes us valuable
as a contact network because we're the only broadcasters
that are here.
That's true.
There are so many people that have this kind of insight.
We're lucky it's in our neck of the woods.
Yeah.
Well, you know, I think they recognize
that Jupiter Broadcasting is more important than that
because they brought us all the way up to New York
for that too, right?
Yeah, yeah.
In the same way.
Well, we brought ourselves out there,
but we were invited.
Invited, right.
So from the perspective of when people are looking
for tech news, and this is something I talked about
on our Snow Show last week, when people look for tech news,
you want people that have informed opinions,
people that are inside of the things
that they are talking about.
Man, I can't make the case any better.
I mean, we're sitting here with the Ubuntu guys
at the same rally where they're figuring this stuff out.
I don't want to give the impression though
that we're also getting like,
we're not getting the red carpet either.
Like we're working it.
Like we have to work for what we're getting too,
which is fair, fair enough.
I mean, they're here doing their thing.
We're here doing our thing.
That's how it should be really.
Yeah.
But yeah.
Okay, Mumbler, I thought I heard somebody speaking.
Does anybody want to jump in before we,
yeah, last bit of, yeah, go ahead.
I wanted actually to say that even though I can enjoy
that Canonical is doing all of this,
I just wish that they actually were,
had a more concerted developer documentation set.
And when they decide to build something,
to build that something actually maintain it.
As a developer, being a company or being, you know,
just an open source developer,
I want to be able to go to Canonical's page
or Ubuntu's page and go to developer docs.
Click there, click there, learn about that stuff
that there are the recommended tools
and be able to build, not need to attend an event
to figure how the things work.
I understand that they're doing research
and that's what they want to get out of that type of event
and so that they can build it better.
But you know, if they just actually do that part well,
I don't think we wouldn't even be spending that much
discussing these events.
Every company does these events.
I'm not taking this as a wild thing.
I think I disagree.
So I would say, first of all,
I wouldn't necessarily undersell docs.snapcraft.io.
I would check out docs.snapcraft.io
because it's pretty good documentation.
But the thing is, and somebody who's had clients,
it was an IT relationship, but I can tell you,
there are certain companies because of their status,
because of their workload,
because of their funding structure.
There is a trillion different reasons,
but I can tell you for sure that some of them
just have to have, by the way, Noah's got a call.
That's Noah's emergency Batline phone right there
if you heard that.
I can tell you there is some companies
that really have to have their handheld
and I don't want to sit here in Microsoft Bash,
but sometimes if you want to get Microsoft
to play ball a little bit,
you know, it just seems to be the way it goes.
I agree though, it would be great
if everybody could be involved
or if they could live stream this,
that would be really useful.
Look, no, not even asking for that.
That would even, you know,
if you just kind of get a...
This is one of the things that I've pointed out
multiple times that I believe that elementary
has done better than any other distro.
It has a set of tools that you can follow.
Like I'm not particularly a huge fan
of everything elementary does,
but this is the one thing done right.
You can look at it and know,
okay, this is what I need to pick up
to build for elementary.
And you go to Windows, Windows says,
C-sharp is the way to develop Windows.
Have you checked out that?
Apple says Swift.
I mean, I'm looking at it right now.
No, hold on a second.
First of all, I don't know that Windows,
I don't know that Windows is...
I don't know that you can compare the two.
Can you really compare Windows with Canonical?
No.
I mean, I would say just check out docs.snopcraft.io.
I'm not here to defend them.
I'm not here to say that one is better
or how they do it is better.
From my perspective, this is sort of
the way the business industry works.
And they're not doing it because it's not documented.
Because, and all again, all of this,
even like the YAML files and all of that
is pretty well documented.
So I feel like it's more about
connecting with certain companies
that need their hands held,
that need that one-on-one
or have a special pony problem.
And then the reason we're here
is to relay that that's what this is about.
There's a motivation from Canonical's standpoint
to have Jupyter Broadcasting here.
And it's not because they're big fans of Linux Unplugged.
I mean, maybe it is.
But I think it's probably because they want somebody
relaying to the community what happens here.
And what they want, and they're not telling us
what to say, but...
Talking about it, right?
But Canonical wants to be shown
that they're building these things.
They're building these things.
And this is what's happening in these events.
So I think, because I think what the narrative could be
if this wasn't, if we weren't here
and there wasn't a third party sort of arbiter eyes
on these, somebody could say,
well, they're having these secret meetings
with these secret companies.
And they're not even saying what companies are there.
They're not even disclosing any of this.
They're just doing all these things behind the scenes
and pulling the Canonical strings
so that way Mark Shalloworth can orchestrate
his master takeover over the Linux landscape
because Mark Shalloworth wants to dominate Linux via snaps.
And that is the narrative that gets perpetuated
when they do these kinds of events.
I think they've gotten hip to that.
And they realize that they have to have
some eyes on it.
They have to have somebody watching, otherwise-
That don't have an agenda.
Yeah, otherwise it just gets spun like crazy.
I mean, I can tell you that if this was like a,
if this was like one of those,
we'll have them come in here
and we'll just have them just tell people what we're doing.
And then we don't have to,
you know, we'll just, this will all be taken care of.
We wouldn't start the show
with a Red Hat story buying out CoreOS
because that's something that is directly goes
against what Canonical's interests are
in the enterprise and server market.
I think it's, so they understand
that we don't really have any,
we don't have a particular skin in the game,
but they still want people to know what happened.
Right.
And because otherwise it does come across as some,
like it comes across as if Mark Shuttleworth
is pulling some sort of puppet string.
Yeah, exactly.
He's not even here.
He wants snaps to still feel like, you know,
it's a community effort by an open source company.
Yeah.
Even if you don't get to see every last thing that-
Right, I mean, the people that are working on it
that are interfacing with these companies,
like the Azure team and Plex are Wimby and Popey.
And the people from Canonical, you've heard of before,
they're just doing it in a setting
that's sort of like common ground.
Yeah, and I would be great, like,
if you could have like pop-up, you know,
how about this as an idea, like pop-up snap events
where you need to different locations at a lug meetup
or at a Linux event, maybe there's other ways to do this.
But I don't think with, I think, I guess what I get back to
is if AppImage had been doing this for every six months
for the last couple of years,
they'd probably be way ahead.
If Flatpaks had, if Red Hat was cutting,
I mean, $50,000 checks every six months,
I mean, New York was way more than $50,000 probably.
But this, you know, this is probably a 50, 25,
you're paying all these people, you got hotel rooms,
you got dinner, lunch, drinks for everybody for a whole week.
It really shows an investment by the company.
You're flying these people out from the UK,
I mean, the majority of the staff
are all coming from London and other places
all over the world, they're not coming from the States.
Some of them are, but most of them aren't.
And that is a huge financial investment.
I gotta believe that if Flatpaks did that,
if another packaging format were doing that,
it could do that, they would be doing that,
because this is what it takes.
It takes a sort of industry collaboration
because you're reaching out not to other,
you're not reaching out to businesses
that have been making an open source product
for the last 15 years, right?
You're not trying to get crossover to package as a snap,
because eventually they're gonna see the light
because they're smart folks
and they work in the open source community.
You're reaching out to companies
that have never done this shit before.
And if I'm gonna pivot the packaging of my product,
I wanna know there's someone I can call on the other side
and be like, look, we need to get this fixed,
you said you would help us.
You want me to retask this 25-member team
to package in your package format?
How is this not a play for you to take over Lyft?
You gotta make it as easy for them as possible.
What problem are you solving for me
to even wanna consider this, right?
But there is also a comfort level in,
oh, I can call up this canonical company
and I can tell them they've gotta fix this problem
or else we're out, so I see both sides of it.
I do see both sides of it and I see why they have us here.
I see what, I know what their motivation is.
They want to make sure it's sort of understood
what they're trying to do.
It's a complicated thing.
It really is.
And we're here to observe like flies on the wall, Wes,
searching out bandwidth at every opportunity.
Linux-based flies, let's be clear.
Yeah, hey, you know, there's one nice thing
about coming to these kind of events
is just about everybody, it's like a 95% Linux operation.
You got a few people coming in from different companies,
but even the people that are coming in
from different companies, a lot of them are running Linux.
Nice. Yeah.
And it's a lot of MacBooks running Linux.
It's a lot of MacBooks running Linux.
Okay, I can take that.
I saw some Unity bars. You walk around,
you walk around, you see the front of it
and it's like, oh man, and then you start walking around
behind them, start looking over their shoulder
and they're like, ah, those are all Mac.
Yeah, yeah, yeah, it is.
It's all Unity. You wanna see a tricked out setup.
Oh, I know what you're gonna say.
Wimpy's XPS 15 with Ubuntu MATE, he's got.
Is that Ubuntu MATE? Yeah.
Or is it Windows? No, no. Or is it Mac?
Or, or, ah.
He's got, he's got. I don't even know.
He's got like, he's got all these different desktops
set up with different stuff.
Plus he's got virtual machines
and he's got experimental high DPI builds
where like stuff is dialed in on this version of MATE
that is like, he's getting ready to, you know,
put out there. Yep.
Ooh, I had not seen it in person and it is.
All the new hotness right there.
It looks amazing.
I think he's switching people to it just by.
Just by using it, being around it.
Yeah, Popey's switching.
Yeah, Popey's like, I'm gonna give it,
I'm gonna give it a go.
Yeah, so, yeah.
I actually, I actually switched, not to MATE.
I switched to something completely,
I got rid of, I got rid of my desktops.
I won't go, I'm gonna save it for the show,
but here, I'll give you a little hint.
If you can, you can see right there.
You see that right there?
Oh, we're gonna, we're gonna, I gotta do an ad.
We gotta do an ad, then we're gonna.
You're right, yep.
I just got distracted.
All right, so let me tell you about DigitalOcean
and then we'll get back there.
DigitalOcean.com, I didn't forget.
I just meant, I was just getting there.
DigitalOcean.com, go over there and sign up.
You know what, in fact, why don't,
I'm gonna make this up right now.
Let's just use a promo code.
Let's just say it's DO Unplugged.
Let's just say that, DO Unplugged, one word.
You apply it to your account, you get a $10 credit.
Let's just say, once you have a $10 credit,
you can run the $5 rig two months for free.
Let's just say that.
And then maybe you discover
that this machine's incredibly powerful
and you didn't know Linux could do that much
for $5 a month.
And then say you get hooked,
you wanna deploy another machine.
Maybe you got an application you wanna deploy.
You can get deployed, I mean,
you got deployments for days.
Deployments for days.
You know, and if you wanna go play
with some of that fancy new snap technology,
go spin up an Ubuntu machine on DO, perfect.
You can set up an automated build system
or you can just play with some snaps.
Boy, can you.
The nice thing about DigitalOcean too
is you just don't have to deal
with any of those complex pricing structures.
It's just simple.
You always know what you get.
It's predictable, it's scalable, it's reliable.
99.99% uptime.
You have an SLA for all services.
You can deploy an entire application stack.
Like the base Linux system, the software,
like it's a GitLab, everything in one click.
Or you can deploy the base Ubuntu system
or base CoreOS system or CentOS system
and then build on top of that.
You get SSH access in, you get HTML5 console access.
You can just get started faster.
If there's some new open source project
you wanna try out, see if it's worth your time.
You don't wanna muck up your system.
Oh, it's the best for that.
So what I do, I go to this.
And then the thing is, is it's so fast.
It has easily increaseable storage.
It has eight data centers all over the world.
DigitalOcean's got data centers for days,
data centers for days.
So I just leave it in production.
I just think it's perfectly good.
And they've got all the little things
you might want to make that work too.
Firewalls, monitoring, built right in.
Yep, yep, easy, easy peasy.
In fact, it's really easy now
with their new DigitalOcean spaces to do automated backups.
If you check out their community page,
they posted on my birthday a blog,
or no, I guess a tutorial, because blog
would be underselling it.
Because these are well-crafted, well-written tutorials.
Beautifully done, elegant tutorials.
Johnny Ive white room tutorials.
And they're great.
And so this is one about doing automated backups
with DigitalOcean spaces.
Go there, try it out.
DigitalOcean.com, use the promo code DOUNPLUGGED.
I wouldn't be in this hotel ballroom
if it wasn't for DigitalOcean.
So thanks DigitalOcean, and thanks to you guys
for sponsoring the show.
DigitalOcean.com.
Linux boot, let Linux do it, is their tagline.
And that should be everyone's tagline.
Just let Linux do it.
That should be Ask Noah's tagline.
Yeah, right, so I think the big deal here
is that from the user perspective, UEFI works okay.
But it's a giant, bigger than the kernel,
inscrutable code base.
It's a big mess.
And we already have a code base that we know and love.
And it's called Linux.
Yeah, and it does a great job, it does.
And so they write, are you tired, like this,
are you tired of reinventing the wheel
by implementing drivers for firmware again and again?
Not with Linux boot.
To the rescue.
Yeah, I know, just set it and forget it.
So Linux boot is a firmware for modern servers
that replaces specific firmware functionality,
like UEFI DXE phase, with a Linux kernel and a runtime.
They say it will improve boot reliability
by replacing the lightly tested firmware in drivers,
improves boot time by just removing unnecessary code,
makes it 20 times faster to boot,
which is actually kind of nice on a server,
especially when you're trying to get up in an outage.
And they say it's a proven approach
for almost 20 years in military, consumer electronics,
and supercomputing systems,
whenever reliability and performance are paramount.
I don't actually know what that means,
because the only supercomputers that I've had experience with
are actually often initiated by other computers.
So an entire standard PC boots up
and then initiates the cluster of supercomputers.
So I don't really know what that means.
Yeah, I'm a little curious what they mean.
But I'll go with it, I'll roll with it.
I mean, you know, Linux has been data center for a while.
And they may just mean the approach, too.
You know, they just mean simplifying
and relying on one shared code base.
Linux boot, linuxboot.org.
See, I'm pretty excited, because you know me, Chris.
I just love me some Kexec.
And that's a whole integral part here.
You are a big guy.
So that's how they're doing this?
Well, yeah, so the idea here is that-
Wes will literally go two weeks
and not even install a bootloader on his machine.
He's like, I just Kexec it.
I just load in the one that works and Kexec it.
Yeah, it works so well.
Yeah, so the idea here, right,
is like you still have some firmware,
and that'll vary.
Maybe it's a little bit of UEFI.
Maybe it's core boot or, you know,
you boot on one of those ARM systems.
That does some of the firmware initialization,
the bare sort of stuff to get the CPU started,
the system running, and then you just boot a kernel.
Because the kernel already has a whole bunch of code
for driver and device initialization.
I see.
So you get that.
You have a little helper in it, RAMFS, if you need.
There's a couple different implementations of that.
And then, you know, get your root device supported.
You do some pixie booting if you need to.
Once you get the real kernel, Kexec in there.
Away you go.
Bob's your uncle.
Yep.
That is great.
It's funny how quickly,
I guess funny isn't the right word to say,
but it's awesome, it's so badass,
how Linux really gets its shit together quickly
on this stuff.
It's like, oh, we've got these three or four
technology stacks that we could leverage to do this now.
Where like stuff in Windows comes along,
and it'll literally sit in Windows for 20 years unused,
and it just never gets taken advantage of.
The system never really improves.
But we come up with these three or four disparate projects,
and we all combine them together,
and now you've got a head secure runtime.
You're using Nerfs for, or just Nerf and Uroot,
and a NITRAMFS, and all this crazy great kernel functionality
that are all being written by different people.
And smoosh it all together,
and I think you've got something great
that seems like it doesn't happen
on the commercial platforms as much.
And it's interesting here too,
because you see some of the big names involved here.
People like Google and Facebook,
and they're seeing some real problems they have
in their actual businesses that they're trying to solve.
And they're doing that by leveraging open source technology,
working together to extend it,
which is pretty exciting.
Well, we'll see.
We'll see how long it takes to actually get out there.
Yeah, right now there's about two test devices you can use,
so whether or not the C's real world data set
or deployments, I don't know.
I just want it on a laptop.
Yeah, exactly.
Ooh, you know, that would be so great.
Something on there.
So yeah, I guess I'm feeling this
because I've been reloading machines.
Again, this is the cross that I bear.
I can't help myself.
I can't help myself.
Yeah, you stopped being the Linux switcher,
and yet you're still the Linux.
Somehow, somehow.
Yeah, so Marko is just joining us.
Marko joining us live over at jblive.tv.
We do Linux Unplugged live on Tuesdays.
This week we're on location in downtown Seattle,
and we are live at a canonical Snap event,
their January SnapCraft Summit,
I think is what they're calling it.
And we're here sort of being flies on the wall.
And so Wes is joining me, Noah is joining me,
and the Mumble Room is joining me,
and now Marko in the chat room is joining us.
So you can join us too.
Go to discord.me slash Jupiter Colony,
and the chat room, there's a Linux Unplugged chat room
in there that goes all the time.
So if you wanna join the show and talk about anything
that you saw going across the chat screen,
if you watch the video version,
you can go in there and find it, you can get links.
The conversation continues in there.
So there's a really big conversation kicking off this week
around client-side decorations again.
I don't know if you guys remember client-side decorations,
but they're like those header bars on No Maps,
GEdit's got it, Corebird's got it.
Funny, most GNOME desktop applications have it now
except for Nautilus and Terminal,
which is the ones I use the most.
But client-side decorations is sort of solving
a couple of problems for the GNOME desktop,
and so they're pretty hot on it.
It is solving some Wayland transition issues
where applications would be responsible
for drawing their own decorations.
And when I say decorations, I'm talking like the title bar.
I'm talking like the close, minimize, maximize.
The title bar around your application,
the borders around your application
are often referred to as decorations.
And the GNOME project is pretty keen on the idea
of applications drawing their own borders,
drawing their own titles, their own decorations,
and doing it in a way that sort of brings everything
into that bar.
So instead of having a separate file edit menu
and a title bar, it's all in one combined bar.
And if you go look at screenshots of GNOME Builder,
you'll see exactly what I'm talking about.
And in a blog post that they did recently,
there is, Tobias, I believe, did it,
there is a blog post that shows,
what would Telegram and Slack look like
if they use client-side decorations?
And they're down there towards the bottom of the post.
And I gotta admit, it legitimately looks good.
And this is a conversation that they've started before
that the folks on the Plasma and KDE side of the camp
have rejected, saying, we've come up with a cross-desktop
protocol that we could use,
we have these server-side decorations
that we think are great, and oh, by the way,
if you've got client-side decorations,
if that application crashes, well, it's responsible
for drawing title bars, so now the title bars crash,
so it's much harder to move it around,
and the windows froze, and they've been iterating
and discussing these problems and iterating
on that discussion, what's wrong with client-side
decorations, and so there was just sort of a stalemate.
Gnome went ahead and just kept doing some stuff,
client-side decorations, CSDs, but it kind of slowed down,
not a lot of projects.
Probably haven't even talked about it
for it seems like at least a year.
No, although in the background, so Firefox 59's
coming out next, and it's implementing client-side
decorations as an option when you go configure the toolbars.
So I thought, I really need to get a perspective on this,
because as funny as it is, this problem isn't going away,
and every time it comes up, each camp gets even more
sort of entrenched in their view of what's right
and what's wrong, and the language is getting
a little more hostile now, it's getting
a little more aggressive, and so.
Away from a technical discussion,
and suddenly people have stakes now, and it's emotional.
And so what is it all about?
Does this even matter?
Is this all a bunch of crap for very little gain?
So I wanted to understand why the Gnome project wants this,
because I get why the K-Win developers
think it's not so great, and we'll get to all of that
in just a moment, I'll talk about some of that.
So, even though I thought I was gonna be staying
on Unity 7 until 1804 came around, I.
You've been singing Unity's praises for months now.
I thought, you know, I need to just have
some handle on this, so I Gnomed up.
I Gnomed up all over the place.
I started with that Arch machine that you had
on the MacBook, got it all up to date,
got my Gnome 3 all dialed in, I was like,
all right, well now I'm just gonna move another machine,
another machine, another machine, it's how I do.
And each time I sort of build on it and build on it.
And I went all in, I got a beta build of Gnome,
or I'm sorry, I had a Firefox 59,
so I had Firefox with client-side decorations.
I configured MailSpring to use client-side decorations.
I loaded up CoreWord, which uses client-side decorations.
I went.
You went full CSD.
Yeah, I went full CSD, full, full CSD.
So I'm gonna talk a little bit about that.
I want to talk about what Martin, the K-Win developer,
why he doesn't like this, and where I ended up.
And then we'll wrap it all up, like I said,
at the top of the show with an app pick
that I think's the best terminal emulator I've ever used.
So that's where we're going next.
So why don't we take a moment and thank Linux Academy.
LinuxAcademy.com slash unplugged.
You go there to sign up for a free seven-day trial.
Learn more about Linux and support the show.
It's a full-featured training library
with everything you need to learn new skills
and advance your career in Linux
and open source in general.
LinuxAcademy.com slash unplugged.
Go there, sign up for that free seven-day trial
and get a sense of the scale of the platform.
How about that, huh?
That's, I get a sense of the scale of the platform.
It really is, it's everything you need,
from hands-on labs to instructor mentoring,
learning paths, which are a series of courses
and content that is planned by instructors
for specific career tracks.
If you're busy as heck, they got course schedulers
so you can set a timeframe and fit to it
and it'll help you set learning goals.
If you're a bad tester, they have practice exams
to help you get ready for certifications,
test what you've learned,
and they also have courses created specifically
to prepare you for certification exams.
They have cloud servers that they spin up on demand
to help you do the courseware
in real-world production situations.
Shoot, that's worth it right there.
LinuxAcademy.com slash unplugged.
And you can also go all NOAA, go full Brown Bear
and go offline with their comprehensive study guides,
their lesson audio, their personal notebooks.
You don't need the cloud for any of that.
You can learn Linux with that stuff too, offline.
LinuxAcademy.com slash unplugged.
And check out the community section, like the forums.
You may find a fellow Jupiter broadcasting member lurking.
There's plenty of them.
A vibrant community that's there to help you.
They fork study cards.
They really make it worth it.
And then Linux Academy is revising content.
They're keeping it up to date
and they're adding new content and an incredible clip,
consistently making your subscription worth it.
Right, I mean, they can't make it no work.
You're still gonna have to put in some time,
learn the content, play around with Linux,
but they knock down just about every single other obstacle
I can think of.
And they're gonna help you get your head around it.
Yeah.
LinuxAcademy.com slash unplugged.
So let's talk about the Kaywin side of things here.
So Gnome likes it for the aesthetic value
that solves some Wayland problems for them.
And the number one thing is it uses less
vertical real estate.
You know, you're getting less stuff up in the top.
Some of the well done ones, it looks pretty nice.
Yeah. I don't hate it.
And on widescreen displays,
it's nice to get more vertical real estate.
But Martin on his blog writes that
he's not a big fan of this and he calls it a situation.
He says that the Gnome shell and Western require client
side decorations, but KDE Plasma and Sway do not.
In fact, the Plasma folks,
which I believe Martin was the one who drafted this,
created a protocol supported by GTK,
although it is broken currently, I've been told,
that allows to negotiate with Wayland compositor,
whether it's using server side decorations
or client side decorations.
In fact, he says the don't believe Gnome,
don't implement CSDs.
You can ask them to support server side decorations
if that's how you feel.
They could do it because they need to do it
for X Wayland anyways.
That's a good point right there.
If you've got to do it for X Wayland anyways.
Hmm.
He says that I totally don't understand.
I totally understand you toolkit developers
that don't want to implement your own client side decoration.
It's a lot of work and it's difficult to make it look good
and not alien on different desktop environments.
I don't know.
You know, I don't know.
If you ever seen Slack on Windows or Mac,
I think that's using client side decorations essentially.
So you can make it work, but they have a good point.
You have to solve this problem for X Wayland anyways.
You still have all of these developers
who aren't going to want to create that
because it's a pretty big visual piece of your application
all of a sudden that you maybe aren't even out
for designing correctly.
So I see both sides of the camp.
So I say, I got to just run these.
I got to run this.
And I'll say, you know, I'll say it's nice.
It is really nice from a visual standpoint,
but I ran it for just three days.
And in that time, sure as shit,
Gnome crashed on me four times at least.
And our friends at Canonical just recently iterated
that one of the reasons they're shipping XOR and 1804
as default is because when Gnome crashes,
when Gnome shell crashes on Wayland, it is catastrophic.
Oh yeah, I mean, that's it.
It is the display server.
That's it.
See, when you're on X, yeah, when you're on X,
you have the luxury of X still running.
You can reconnect to X and Gnome just sort of pops back up
and your applications look all shitty for a second
and everything's fine.
But on Wayland, it's a crash.
And I'm sitting like, this thing crashed on me four times,
four times in three days.
And oh my gosh, if Gnome hasn't had some Gnome issues here.
This isn't, I don't mean to be a Gnome bashing issue,
but this matters.
You've had full crashes.
And if we were in a Wayland future.
Well, here's my issue.
We went to sit down to do shell prep today.
And I think I was sitting there next to you
for when I pulled my laptop out for 35 seconds,
oh, Gnome crashed.
And what was frustrating was I was,
the reason I pulled my laptop out.
You had a great idea.
Why have the memory fish of a goldfish?
Yeah, you have the memory of a goldfish.
Yeah, and so I wanted to dump something down
and I opened up a text editor, got one sentence into it
and the whole thing just dumps.
Of course, I lose all my work.
And you don't know what you were trying
to write down anymore.
Right, well, it was frustrating.
And then I went to recover
and the entire, the system locked up so hard
that I had to physically power the computer off
and then power back up.
And by the time I got through that
and remembering my encryption password
and getting back into Linux
and opening up the text editor
and getting back to what I was doing,
by the time I did all of that,
I forgot what I was going to say,
which turned out not to be a big deal
because about five minutes after that, it crashed again.
And then we closed and moved rooms
and I came back into a different room
and it crashed a third time.
And so, and the question,
what you and I were talking about is.
What are they going to do about this?
Yeah, I'm the dedicated,
I'm a pretty dedicated Linux user, right?
Like to the point that, you know,
if my choice was between Linux
and no computer at all,
I'd probably use no computer at all.
And if I am getting frustrated
and joking about, well, maybe I should use Windows
so at least I can get through the show
and then I'll go back to using Linux.
If I'm making those jokes,
what is the next guy that's like,
ah, I was kind of in between, but you know.
And here's what has me scared a little bit.
And I mean scared,
it actually really is something
that I'm a little worried about here is
the GNOME team has a fork in the road ahead of them.
And what they're discussing right now
up on their Wiki and on the IRC room and whatnot
is GNOME 4, do we re-architecture GNOME
and make it modular?
So we break out mutter,
we break out all the compositing stuff completely separately.
We break out the shell,
we break out the graphics effects,
we break out the extension architecture,
which also means we create a standard API.
We have to create an IPC communication system
for all these different modularized components
to communicate with each other.
There can't be any drop in state or delay,
or, and if we do that,
we break every single extension in existence today.
And mind you today, these guys,
the way the extensions work in GNOME Shell 3
is they're just hot swapping out JavaScript code
in the GNOME Shell.
It's not like these extensions are talking to GNOME
and saying, I would like to put a meter up in the toolbar.
They're just slicing that code in their hot dog style,
a hot dog down a hallway.
And that is dangerous.
That's not how you want a professional desktop run.
You know what I'm saying?
Like, so they, but at the same time,
critical functionality of GNOME 3
is provided by these extensions.
And we want that, we would,
especially if GNOME's gonna concentrate
on sort of a small core,
you're gonna need those for a workable desktop.
And so the GNOME project's like,
well, you know, we tell people
if we get rid of the system tray
to go to the top icons extension.
Well, we tell people when we get rid of desktop icons
to go to the desktop extension.
And now do we go break all extensions on people?
Imagine if Firefox took away bookmarks
and said, we'll just use an extension for bookmarks.
And then two releases later,
they broke the bookmark extension.
So there's no more bookmark extension.
Well, you just told me to get the bookmark extension.
How can you go and break it two releases later?
That's the position they're in now.
So they either break all extension in existence
that make GNOME a usable environment to begin with,
or they kick the can down the road.
They create maybe an API or something,
and they don't address this core architectural issue
that if you think about it is a massive challenge.
And so it's not that I,
GNOME is my favorite desktop environment, hands down.
It's the one I, if it never crashed on me,
it would be the one-
You'd be there all day.
I'd be at the top of the roof right now at this hotel,
29th floor, screaming about how great GNOME Shell is.
I just, I can't when I can't even make it a few days
without it taking a huge dump on me.
And now having a little more insight
into what's causing these problems,
I see that they have a massive technical hurdle to overcome.
And-
It feels very different, right?
Like for a while, especially after like 320 or something,
we kind of talk about, GNOME felt stable again, right?
It was like, okay, let's see what they've done.
As any software project grows though, right?
And as you add more extensions,
and the answer can't be no extensions.
It just loses, it just,
I think also Wes, the thing is,
it's the Wayland pressure because now crashes
have way more consequence.
It's not just a repop of the shell.
It's you lose everything that you're working on
and you reboot the machine.
And we're in that awkward middle ground now
where before it was sort of like,
oh, if Wayland's a crashy mess, it doesn't matter.
No one's really using it,
but people are starting to use it for real things
in real production applications.
And if it's not up to the task, that's a serious issue.
Yeah, well, they're making hard decisions in GNOME Shell
that if they can't figure out how to do it in Wayland and X,
and they can only figure out how to do it in Wayland,
they just drop the X version.
Some of the things we're seeing happen to GNOME Shell
are really about getting ready for Wayland.
And just a couple of weeks ago,
we talked about how the Kaywin project
is a Wayland first project now.
And X11 is now in indefinite maintenance mode for them.
So we are making that transition.
It's happening whether you want to or not.
Fedora's shipping it, Ubuntu 17.10 is shipping it.
And GNOME is making a huge ask with these client-side
decorations when they're in sort of a tedious position.
Because the tedious part of it is,
they have bigger distro support than they've ever had.
All of the major distros are shipping GNOME desktops
right now, all of the corporate desktops.
It's kind of their heyday in one sense.
Right, unless you're Blue Systems,
everything you're shipping is a GNOME desktop.
So they are in a great position,
but the tedious part of it is they can't really use
that leverage because there's these fundamental
architectural issues that everybody
behind the scenes is going,
this is a big problem, I don't know what the hell
we're gonna do about this, I'm freaking out.
Yeah, what's gonna happen with GNOME, we don't know.
Yeah, and so it was with that background
that I was like, okay, this is an interesting time
that they're choosing to bring this up.
Dan, I don't know if we have Mr. Dan Rabbit's audio again,
but I wonder if anyone has thoughts on the client-side.
Yeah, Dan, what do you think about this client-side
decoration conversations come up again,
especially from an elementary OS desktop standpoint?
Well, we've been all in on client-side decorations
for a couple of releases now, so they work fine.
And like you said, the space-saving thing is really good.
One big thing about client-side decorations that you get
is they're actually integrated with applications
that wanna use the dark style instead of server-side
decorations that aren't aware of the application's content
so they can't adapt correctly.
We also have a facility in elementary OS for developers
to be able to set brand colors in their applications.
So a lot of the title bars for applications in App Center
are branded colored instead of just plain,
you know, with the same for every app.
Like there's a lot more interesting color in the UI.
Yeah, I have seen that and I do really like
the way that looks.
I've also seen people make certain buttons stand out more
that, you know, like my eyes drawn to it more
because it's like a certain color of blue
that really pops or something.
So that's, you know, and the red buttons really stand out.
Don't click that unless you really wanna lose this document.
I like that.
So do you have any kind of sense of where the Kwin project's
coming from and see like that?
Well, do the server-side decoration thing instead
because you still gotta solve this problem for Exwayland.
I mean, I don't know.
I'm not sure I fully understand the argument against
having client-side decorations, to be honest.
It kind of seems like you can do everything
you could do with server-side decorations
with client-side decorations.
I know I see some people saying like,
oh, well, that means that all the apps draw
where their own window positions are
and I don't want my apps to have
different window button positions.
That's not really how it works on the GTK side.
Like it's a widget and you as an app developer
just use the widget and you pack everything
in between the window decorations.
But GTK itself decides where the buttons go.
So if it was solved in that same way
with a Qt widget on their side,
like that completely removes that argument too.
Yeah, it does seem solvable on their side.
In fact, it almost seems like it'd be easier for them
to support the client-side decoration stuff.
So I teased it a bit.
Do you want to also touch on the switch from CMake
while we have you?
Yes, that'd be great.
Yeah, cause audio dropped out back there.
Yeah, no, that's okay.
We'll circle back to this.
So yeah, tell me about the switch from CMake
and what's that all about?
And what are you switching to?
Yeah, so we're actually really excited about this.
So we were running, if people don't know,
like CMake is a build system
and a build system is what you use to take your source code
and turn it into like executable binaries.
So every application has to have a build system
of it has compiled code.
We're using CMake for a long time
and CMake's pretty good.
But one of the things we have to do to make CMake work
for all our use cases is we carry like this big set
of modules that helps us do things like internationalization
or using like G resource
or like all kinds of little plugins like that.
Well, we recently-
So you need to have that sort of hack those on.
Yeah, and so developers kind of have a choice
where they either add a dependency package
that is only shipped in elementary OS
or they shove all these modules into their upstream project
and try to stay in sync with our module package.
That's like not a super great experience.
But we've been looking a lot into the Mason build system
because more and more people are adopting it.
It's in system D now, it's in GTK plus.
And so we've talked with their developers upstream
and we're actually able to get some patches in there
to solve some issues we had with Bala support
and translations and things like that.
And they've been super awesome and responsive to us.
And we're totally all in on Mason.
We're migrating all of our projects over to it.
That's awesome.
Wow.
From like a project standpoint,
is that like something you guys like have like a powwow on
or is that like somebody decides on high?
Like what's the structure on making a change like that
in elementary?
It kind of started off as just like a,
hey, have you heard of this Mason thing?
Like, oh yeah, I don't know, yeah.
And then like, I think actually it was me
who first used it in one of my little side projects.
And then I showed somebody and I was like,
hey, check this out.
And it was like the amount of lines of Mason it took
to build the app was like such this tiny,
like neat, nice little file that everybody was like,
holy crap, I got to look at that, you know?
And so it just kind of spread out from there.
Yeah, and then we're all kind of like,
okay, let's just do this for everything now.
Those are the best guys.
That is great.
I got to say, I really appreciate that your blog post
had such an easy example,
because I've seen a lot of other projects write
about switching and it's easy to say,
oh yeah, it's an easier config,
but your example really lays it out.
Like it's just simpler.
Yeah.
Yeah, I will link to that.
Thanks, yeah.
That is a very good point.
I want to now, I want to shift back to,
let's wrap up this plasma conversation real quick.
Thank you, Dan, for the insight on that.
I was curious, I've been really getting
the elementary OS itch recently.
Trying to hold off on the itch before release
just so I don't, but boy do I,
every time you come on here, it gives me the itch.
Or that's the rash, I'm not sure.
But either way, I appreciate it.
Thank you very much for giving us the update.
So this was sort of, I sort of did this too,
because Wimpy's like, you need to try out plasma on Wayland
and see what that's like compared to a gnome on Wayland
if you're having all these troubles.
And as is typical, Wimpy was right.
And so I tried out KDE Neon, I got the user edition,
and I loaded it on the AirMaster broadcast machine
that's having some issues.
I loaded it on my laptops,
and I've been sort of changing my perspective
on plasma desktop.
I've always liked it initially,
and I tend to sort of trail off,
because I tend to start to get annoyed
with having to change all of these settings.
Every time, the first time I launch
any plasma desktop application,
I just have to go through all these configuration changes.
Everything, Dolphin, every app on the desktop.
You know, if you have, like this,
my XPS 13 has a high DPI screen.
I gotta change, I have to go into the display output,
and I have to scale the display output.
I have to go into the font settings,
I have to scale up my fonts.
I have to go down to my panel, I have to resize my panel,
and I have to go into the mouse settings
and change my mouse cursor to support high DPI.
So it supports high DPI if I change four different settings
in four completely different locations
in the system settings, then I get high DPI.
After I've done all that, you know, it's nice, it's fine,
it's great, I don't need to change it again.
That's true for everything, Dolphin, console,
everything's like that.
Having those knobs are nice on one system
if you really want it to be just the way you want,
but when you have five systems,
you kind of just want the nice default.
I was laughing, like I got into a,
I got down into it, and I'm like,
yeah, I'm like configuring how many lines my screen scrolls
when I move my mouse scroll wheel one notch.
I'm like, this is probably at a level of detail
I don't need to be at anymore.
So that in the past would piss me off,
like what are these guys doing?
Why don't they just add some sane defaults?
Why doesn't anybody just add a sane default?
But I'm flipping on that now.
And I have a different perspective
after getting just dumped on by Gnome a lot.
You know, this is an ongoing issue.
It affects our OBS where I get the studio.
It's a constant problem.
And I've come to the realization that
having to change defaults for six months
is a lot better than having my desktop
crash on me all the time.
And so if I'm gonna live with one annoyance,
I'll live with the fact that I can change the defaults,
and if nothing else, maybe this will finally
get me off my butt to actually sync
my configuration amongst my machines.
I've threatened to do it for years.
You have threatened to do it for years.
You know what I mean?
Yeah, absolutely.
Every time I get into Plasma,
I start to threaten it even more,
but now that I'm sitting around West
doing tech snap all the time,
I think I may finally get off my duff
and sync this config around.
Wes, are you a C file fan?
You know, I have used it, but I don't use it currently.
Oh, okay.
What do you, are you Dropbox?
Are you a sync thing guy?
I have a sync thing for some things,
and then some Chef-based config for other things.
Okay, so what would it take to get you
to try C file for syncing these configs?
Just some time to do it, I suppose.
Maybe we try it tonight if we get back to studio.
I'm telling you, here's a Noah Redbook prediction
for Chris.
Once Chris tries C file, he will never go back.
Because here's the thing, and I think,
I feel like I've said this a couple of times
throughout this weekend, but there are projects
that I like because they're open source projects,
and I just think they're really good open source projects,
and then there's good on the level of,
this is such an amazing product, the license be damned.
It's just a good product,
and that's how I feel about C file.
It's just, it's one of those things I installed.
I haven't looked at C file in ages.
I installed it one time on one server,
installed the sync client to all of my computers,
and I change a lot of data.
I've got video files and audio files
and all the source files for this show, or my show.
It integrates with Collabra online server, too.
Yeah, syncs all over the place,
and I never once, not one single time,
have it bite me, and the closest I ever get
is let's say I leave a file open on one computer
and I open up on another computer, and I do some really.
You get a conflict copy?
Yeah, I get a conflict copy, and it timestamps it for me
and says, here, boss, here's all the files you have.
Which one did you want to actually, amazing.
So their pricing is based on amount of users,
not amount of storage?
Well, C file is free.
You can pay for them to host it for you.
Oh, I see, I see.
But you can also just run it yourself.
If we make it back before 10 p.m. tonight,
we should try to set this up.
All right.
Because I gotta try this, because I gotta tell you,
now that I have this plasma, I was going around
and showing some of the canonical guys, too.
I'm like, let me just show you this, right?
I got a pretty sweet desktop.
Yeah, yeah, and I'm like, and you know what?
The consensus is, once you get it set up,
these plasma guys really know what they're doing.
They have built this thing real well,
and it's perhaps better positioned for our Wayland future
than I think.
It's kind of in the dark horse, right?
We talk about Martin's excellent blog posts here and now,
but they've just been churning away in the background,
making stuff work.
Yeah, and it sort of strikes me that
it is actually visible just Noah and I
were sitting in the studio.
We had AirMaster running Unity 7, which is good.
You know, it's pretty performant,
unless it's been running for a week,
but if you reboot and it's been like 48 hours, it's good.
And we moved.
We just did like a, we just sat there.
We didn't even stand up.
We didn't move.
We just reloaded the machine to KDE Neon with plasma,
and he and I both look at each other and go,
this is noticeably faster.
This is just, we can just look at the screen
and you can just tell it's noticeably faster.
And that was with the open source driver.
Then we loaded the NVIDIA blob,
and all of a sudden, it's like, snap.
Yeah, and I know it's a fresh install,
but these aren't, we weren't replacing
super complicated installs.
These are pretty minimal.
They're pretty minimal machines, yeah.
Oh my, it's smooth, it's clear, the transparencies.
You know, to illustrate that point,
and you'd have to be there to really understand it,
but to illustrate that point, the boot time was so fast
that he thought, he literally thought
we were waiting for the BIOS to post
and then getting to BIOS, and it was actually,
we were waiting for the log on screen to actually show up.
Yeah, and part of it, I think, is I switched out LightDM,
and I think that makes a difference,
because it doesn't flash as much and all that kind of stuff.
I know I do this.
I know people that have been listening for a while
know that Chris moves around.
Chris is on that new thing?
Yeah, no, I know, so I'm doing this specifically
to sort of live client-side decorations for a bit,
live the plasma wayland, just get some perspective
on these particular issues that are coming up
and get a feel for it, and so right now,
I'm running here on this XPS 13, plasma,
the current version of plasma for the KDE Neon distribution,
or don't call it a distro, high DPI, Wayland driver,
or using Wayland for display,
and getting great battery life, getting great performance,
getting noticeably better battery life.
I did all of Koda Radio.
I never do a show on battery.
I never do a show on battery.
Well, you're a professional.
Ever, and we got here in the morning.
Koda Radio's at noon.
I did the whole show.
I did the morning prep.
I did the show all off on battery.
Wow.
And then plugged it in later,
just so that way I wouldn't be inconvenienced later on,
not because I had to, and yeah, I'm just relaying
if this is something that's crossed your mind,
if you've been wondering about where GNOME's going,
what's gonna happen with GNOME Shell.
I noticed, too, on our GNOME, on Reddit,
there are weekly posts about what's going on
with GNOME Shell's lag.
Why is GNOME so laggy?
There's constant discussion about it.
People are starting to see it more and more,
because there's more people using GNOME than ever before,
and so more and more people are noticing this stuff,
but you can go to Launchpad and look at the bug tracker
for 17.10, and look at all the stuff on there
for Wayland and GNOME 3, and see that there's,
I could be wrong on this,
because I haven't looked for a month,
but I think they're getting more bugs related to Wayland
than they've ever gotten on anything.
Wow.
Yeah, it's not even an LTS release.
I'd have to recheck the numbers,
because this was when 17.10 was kind of new,
but that's not a good sign.
So this has all given me pause recently,
and it's something that I've been talking to you guys
about behind the scenes, like I am really worried
that we are barreling down the GNOME 3 highway,
Canonical's shipping it, which means Dell is shipping it,
System76 is basing Pop!OS off of it,
CentOS and Red Hat are selling to corporate customers
on GNOME 3, and the more and more esoteric edge cases
that we bring into the fold,
and the more desktop use cases that we bring into the fold,
and the more pressure we're putting on Wayland,
the more cracks we're seeing, not necessarily in Wayland,
because Wayland is a protocol.
It is all of the software that's attempted
to write their own implementations.
Yes, exactly.
Yeah, and it's fundamentally bringing up
architectural issues that we've been able to punt for years
because X helped cover it up, or XYZ helped cover it up.
Or no one was really using anything that used Wayland yet.
And so when you see projects like elementary OS
that have their own desktop,
or Solus that have their own desktop,
you go, oh, that's sort of why they did that.
That's sort of why they, they must've been hip to this.
They didn't wanna say anything.
You know, it's not cool to publicly shit
on another open source project,
but behind the scenes they go,
people are gonna get hip to this,
and we've gotta come up with something else.
And the Plasma project, to their credit,
has been, since the 5 release,
has been working at this problem,
and making their architecture sound,
and cleaning their house for release after release
after release, they're now getting into the feature,
you know, they're now getting into piling
the features back on.
Yes.
Which, that'll be interesting to see how that goes,
because it's been a lot about refinement,
and now Plasma feels like, like 5.13,
man, they're adding some cool stuff.
Like, you're gonna have full Chrome integration
with notifications, so like, downloads in Chrome
will show up in the Plasma notifications.
Oh, just write in the native notifications?
Oh, wow.
You're watching a YouTube video,
you can click the volume icon on the Plasma desktop,
you can pause the YouTube video.
Ah, yes.
Yeah, like, we're talking like,
nice features are coming.
They just recently.
These are like Windows level features.
Yeah, they just recently introduced the vol,
like, things are good, like, it's good stuff,
and they're doing a good job of it.
But they have sort of crossed that threshold
of refinement, refinement, refinement,
to let's try doing this now, let's add this.
So now they're going down Uncharted Territory 2,
but they do seem to have a better foundation.
So how long did it take for you
to get that up and running, customized,
and to a way that you could use it?
That's a good question.
Being deep in Gnomeland, which has a pretty easy
and, like, well-defined normal.
Two days.
If I could interject, if I could interject,
as far as how long did it take him to use it,
zero, he used it fresh, because he, you installed,
I think you installed some programs,
like, to get Telegram and stuff,
but you had to do, we didn't have time to customize it.
So he did show prep.
He did the first, the first day he used it, stock.
Just stock, yeah, okay.
And then you started tweaking it.
Yeah, and, you know, in all of the installs,
I also timed how long it took, roughly timed,
not, like, super anal about it,
but roughly timed how long it took
before I had to install GTK apps
and a bunch of GTK dependencies.
Yes, right, oh yeah, that's another factor.
It's about, on average, about 15 minutes.
Oh, oh, because sometimes I just don't know,
like, I want a gdebi.
If I'm on an Ubuntu system, I want gdebi.
It's my favorite.
Turns out there's, like, essentially a cute Debi alternative,
right, but I didn't know that, I didn't remember.
Takes time to find those alternatives, yeah.
But sure enough, so one of the things I've done, Wes,
is I've gone, only you can see this,
so I'm gonna just tell you, is I've just gone with,
I've got a lot of windows open.
I've just gone with a really simple one bar at the bottom,
just a couple of applets here, the clock,
my task launcher, my virtual desktop.
Pretty simple, pretty traditional desktop setup.
Yeah, so I'm not going with, like, lots of plasmoids.
I'm not doing, you know, I don't have menu meters
all over the place, and, you know, stats,
and big slideshows on my desktop like I've done in the past.
It's just minimal plasma setup, keep it nice,
did a dark theme.
Yeah, it's handsome.
I actually installed ArcDark.
And then I went and set ArcDark on the GTK stuff,
because they have, in the plasma settings,
you can go in there and set your GTK appearance settings.
They make it really easy, actually, yeah.
Yeah, yeah, it looks better than it did under Unity 7.
So I'll show you right here, you know.
So when you're in the studio and the machines are rebooted,
as you know, oh, this doesn't have, this is Intel.
But as you know, in the studio on AirMaster,
when we reboot, you have to launch the NVIDIA control panel.
Go reset up all your settings.
Right, so that way the capture cards work
and get all the refresh rates right.
And it is a bright white GTK application
that doesn't match the desktop theme at all,
because it's being run as pseudo or root or whatever.
Sure enough, with Plasma Desktop,
when you set GTK appearances and you say prefer dark themes,
every GTK app, it fits.
So I actually have my GTK apps, because I'm
using ArcDark in Plasma, and I have my GTK app set to ArcDark,
I can open these apps side by side.
And you just get one consistent.
If you took out Sherlock's magnifying glass,
you could find inconsistencies.
Like the OK button on a Qt app is a different shape slightly
than the GTK version.
But it's the same shading, it's the same theme,
it's the same color, it's the same title bar,
because I'm not using client-side decorations.
And I opened that, I went, look at this, Noah, look at this.
You can't even tell this is a GTK application.
If I was an average user, I would be completely oblivious
that there was two different toolkits on my screen.
And that was really nice, because it sort of gave me
permission to use a couple of GTK apps
and not feel like I'm paying a penalty.
You don't have to bend the world to jump into this new place.
You can just use the software you want.
Yep.
So that's where I'm at.
Plus, you combine that with Firefox has a breeze theme,
a breeze dark theme that you can install
that kind of makes it look nice on the Plasma desktop.
Oh, while we're talking about it,
the other thing I did this install around is no Chrome.
Just not even installing Chrome at all.
I'm just going all in on Firefox.
And Firefox already has some of that integration
with the Plasma desktop I was talking about for Chrome.
Firefox already got some of that.
So you get that stuff today with the current version
of Firefox on the current version of the Plasma desktop.
This is a whole new Chris.
No longer gnome in Chrome.
I know.
I know.
I know it's weird.
I know, meanwhile, Noah's over there installing Windows.
Not really.
You know what's funny?
You really have to be careful.
So I still, to this day, dude, I still
get telegrams and emails going, dude,
how's FreeBSD working out for you?
Oh, yeah, from that April Fool's.
The whole episode, we talked about how it was a joke.
At the end, we talked about how it was a joke.
And there are still people that are like,
I talked about it one time for like 15 minutes.
And people are like, oh, yeah, he's a BSD guy now.
You're going to actually think I'm installing Windows.
I do have a backup plan, as JJ asked.
My backup plan, if for some reason
the Firefoxing doesn't work out, is to maybe go with Vivaldi.
I've been hearing a lot of people talk good stuff.
So right before I wiped my boxes, one of them
I put out in Vivaldi.
It is great.
Vivaldi, it is slick.
It feels faster than regular Chrome.
I love the way it shows loading stuff.
If you're on Linux and you want a browser that
feels like it's turned up to 11 a little bit,
Vivaldi is pretty good.
And they just implemented sync support.
They're getting bigger, I think.
A lot of people are telling me Vivaldi.
Have you tried Brave?
No.
Joe likes Brave.
He's talked to me a little bit about Brave.
I haven't tried it myself.
It seems like both have gotten some good buzz.
Yeah.
Now, Brave's on the desktop too, right?
Because I think it's available as one
of the universal packages.
Yeah.
Bashful makes a good point about Netflix.
Actually, no, I watched Netflix in the new Firefox.
That's happened.
I've done that.
I've been there.
I specifically watched 35 Seconds of Star Trek Deep Space
9 in Firefox just to verify that it worked.
And then I was like, OK, good enough.
I don't have time right now.
Anyways, I should probably move on.
But I guess this Snap event, having
seen people here that really know their stuff talking
about architectural issues that they're not sure how to solve,
that they're not even sure they have the leverage upstream
to have upstream work with them to solve.
Yeah.
It sort of underscored some stressing
that I've been doing about the future of Gnome.
When Canonical announced that they were switching to Gnome,
I was pretty excited that we were
going to have as the same, what is it, a lot of wood
behind a single arrow?
Yeah.
Because that's not something we commonly have in open source.
I think that's something these corporate people would say.
And I thought, great.
This is a great opportunity.
Right, once we have some focus.
Right.
But what really has given me tremendous pause,
and maybe this is wrong, I hope.
I hope, and somebody can correct me if I'm wrong,
but what's giving me tremendous pause as I looked into it
before this show, at least according to the Gnome wikis,
is they haven't even decided if they're
going to address these architectural issues.
Wow.
That to me is, that just gives me a moment of pause.
When they're like, yeah, I mean, we
don't want to break extensions, but we also
don't like desktops crashing.
Seems like too totally, the thing is, too,
and the things I find slightly unforgivable,
and I'll leave it at this, is, yeah,
I'll leave it at this, is it's not
like multiprocessor architecture was a new concept when
Gnome Shell came around.
Gnome Shell is a relatively new piece of software,
and the problems that they failed to solve
were well understood at that point.
They made a conscious decision to architect Gnome like this,
maybe to cut corners, I'm just assuming.
I don't know why you would design a modern desktop
environment like this.
But they did, they made that choice.
And now, they seem to be almost willing to repeat
the mistake again.
And the worst thing about it is, this is my last point,
and really, we are so screwed either way.
If they don't fix the problem, then we
have a joke of a primary platform for our desktop
environment, because it's as bad as classic Mac OS
at this point.
And if they do solve it, they're throwing out
all of this established momentum behind Gnome 3,
right as all of this wood is behind the arrow,
and it's the perfect time to seize the developer, DevOps,
SysOps market, except for, once again, we're
going to reboot our desktop environment.
I would submit to you that we are far more screwed if they
decide not to fix the problem.
I really think, because I really think,
even if everyone comes onto Linux, and I agree,
it's a really terrible time, for like the third time in a row,
so it's like we have a habit of really terrible timing.
Yes, we do.
But at least there is light at the end of the tunnel,
because right now, you're going to have a bunch of people
coming over, and Gnome 3 is not great to begin with.
I love it.
No, no, no.
As far as if you sit down at stock Gnome 3, it's not great.
Oh, yeah, yeah.
I've got to at least put minimize and maximize back on.
And you know how to do that, a lot of people.
And so we're already starting behind the curve,
and now we're going to add to the fact that at some point
in the distant future, either we're
going to deal with a crappy desktop for a little bit,
or a desktop with a huge problem,
or we're going to have to reboot it somewhere down the road
after everyone's already switched.
Those are not good options to me.
I would have Dan chime in, but I know we've got to move on,
because I didn't want this to be a Gnome bashing thing,
because I love the Gnome project.
I love the Gnome desktop, but Dan makes a good point
in the Discord chat room that this is really
kind of a consequence in a way of designing for Wayland
and trying to either have this IPC system that
is secure and safe, versus just not even bothering
with that particular problem.
And I can completely understand that.
So either way, and you know what,
I'm still very appreciative of the hard work they have done,
even if we're at this point.
I do really appreciate it.
And when it's working right, nothing
sings to me like Gnome 3 does.
It's really great.
So I'll leave it at that for now.
But if you've been thinking about that,
I'd say go give KDE Neon a try.
It's a pretty great way to get your hands on KDE Neon.
And it's one of the strengths, right?
It's a part of the open source Linux community.
We do have options, and it's worth our time
to explore those and take advantage.
Speaking of those options, let's wrap this up
on one of the favorite applications
I came on when I was using Gnome.
I was looking for client-side decorated apps,
and I came across Tilex.
Tilex?
It's a replacement for Gnome Terminal.
OK, I thought this was like a shower cleaning tool.
I know, right?
It's a pod that you can eat.
Oh, yeah.
I was like, how is Gnome Terminal not client-side
decorated?
Like, what is going on?
This is their terminal.
Yeah, so I wanted to find one that was,
and I came across Tilex.
And as the name kind of implies, it's
a Tiling Terminal emulator that follows the Gnome head.
It uses client-side decorations.
And it lets you split it into multiple,
like vertical, horizontal panels.
You can synchronize input across all of them.
It supports persistent layout.
It has very good transparency support,
unlike the regular Gnome Terminal.
Drag and drop support, notifications
that can actually go into the Gnome notifications area,
custom links, which are nice.
You can click on hyperlinks and add custom terminal hyperlinks
to open things in your terminal.
And you can layer the panes, if you will, the west panes.
You can put them in any arrangement
that you really like.
And so what I did is I also combined that
with an extension for Gnome Shell that
allowed me to always open up applications
on a certain virtual desktop.
So Tilex always opens up on virtual desktop 3,
for example.
That's your terminal desktop.
Slack and Telegram on desktop 2, and they're
tiled next to each other.
That's awesome.
Yeah, and so it was a nice workflow
when you combine that extension.
So I always knew my terminal was always here.
Everything in its right place.
Yeah, I always have Guake I can go to for a quick install.
But when it's time to sit down and live
in the shell for 20 minutes or something like that,
or I want to kick off a job and just check in on it
with a quick virtual desktop dropdown, this was it.
Tilex, you can find a link in the show notes
because the URL is sort of crazy.
But you can also just Google T-I-L-I-X, the advanced GTK3
tiling terminal emulator that has client-side decorations,
which is really what I was just trying to all in on CSDs
if I could.
It's also kind of nice that it feels sort of modern,
and I feel like a lot of times terminal emulators feel
like somehow Mac still has one of the best ones,
yet we are the terminal people.
So that's nice, too.
Somebody could tell this project about the good word
of universal package formats, though,
because they literally have packages for Antigros, ASIC OS.
I don't even know, Arch Linux, CentOS, 7.3, Debian, Fedora,
OpenSUSE, Ubuntu, and then they just make a targes available
if you just want to pull it down in old school.
I love it, though.
Of course, it's open source.
They have it up on GitHub.
And you can also find it on the hashtag,
hashtag Termex in the IRC free note.
Well, you know what?
I'll be installing later today.
Yeah, that is pretty cool.
And it kind of makes me miss Nome a little bit,
kind of makes me does.
Console is pretty solid, too.
Console supports some of the stuff, just out of the box.
I'm just saying.
All right, well, that's going to bring us
to the end of this program, because we
got to get the heck out of here.
So that way, the Ask Noah show continues on.
So if you're joining live, don't go anywhere,
because the fun, you just got through the first part
of the sandwich, really.
And now there is the other half of the sandwich
and some homemade potato chips.
Oh, yeah, absolutely.
There's a nice aioli on there.
Oh, yeah, maybe a little chipotle aioli,
a little brownberry aioli, that's on there, too.
So go get more Wes Payne.
He's at Wes Payne on the Twitters.
That's right.
And TechSnap.Systems, for our other program,
covered all kinds of stuff, including some meltdown
and specter issues.
And like we said earlier, Kubernetes,
you can get some more Noah in your face at asknoahshow.com.
That's Noah's main landing page.
I think he has a Twitter account.
It's at ChrisLES, I think.
That's right.
Yes, it is.
Stealing my Twitter.
At criticalinuxtheshow, at AskNoahShow.
The AskNoah dashboard, asknoahshow.com.
I said that part.
Oh, did you?
Oh, sorry.
No, I said mine.
Once you get me started, I'm like, you know, I just.
You're good.
And sure enough, if Noah didn't pull off a live broadcast
from the car on the drive down here yesterday,
he did a live, he did like a 15, 20 minute live show
from the car on the drive down here.
So yeah, that piece of gear he brought with him is pretty.
Only because you said I couldn't.
Yeah, exactly.
It seems like we just strapped that right to his back.
He can walk around, just be on air all the time.
Just give him time.
It'll probably happen.
The whole network is at Jupiter Signal.
You can join us live, jplive.tv, jupiterbroadcasting.com
slash calendar for the live time.
And last but not least, linuxunplugged.reddit.com
and jupiterbroadcasting.com slash contact for all the ways
to get a hold of us.
We'll be back next week.
Thanks for joining us.
I'll see you next Tuesday.
How to contain the code, know his magic box.
Containing the future?
No.
Oh, that's kind of, I don't know, I wouldn't click that.
Future is a snap.
A pod you can eat.
Crafting of snaps.
Hey, I'm not at the studio, and I just
want to make sure that this is actually going to work.
So can you just say hi to me and just make sure
that this is working, Sarah?
Hi, yeah, I can hear you.
Thank you.
Yeah, OK, thank you.
Yep.
Do, do, do, do, do.
Live from locations.
This is a pretty crazy setup we have.
You're talking with Sarah.
We're talking about Mumble Room.
Those people in the Mumble Room are literally all over the world,
and we're sitting here in Seattle in a hotel room right now.
And there's like, what, at best, a 2, 3, 4, 15 millisecond,
30 millisecond delay between us?
Wild.
Remarkable.
And none of us are using a phone.
Well, Sarah is probably using a phone.
Yeah, so one of us is even on a phone.
That's crazy.
That is amazing, really.
Confluence of technology.
All right, the only thing we can't do
is pick a title, apparently.
So we've got to do that, because the Ask No Shows
are the ones we're worst at.
There's also stuff going on in Discord.
Now that he has his own show, isn't that interesting?
Now that you've got your own show,
you turn around on the title thing.
Let's see how it is.
I see it.
You giving me shit?
45 episodes in, and I still didn't care about titles.
And it wasn't until you were like, here's what happened,
because he's really good at this.
Great.
I know it's going to be bad.
No, he's really good at this.
So he knows if he just comes out and says, you're an idiot,
you should do this, I'll be like, I'm not an idiot.
Let me show you why.
I'm never going to do that ever again.
And he uses that in the opposite way, too.
You can't do a live broadcast.
We do a live broadcast.
You won't be able to do that.
So he tells me, I give him this idea, I'm bouncing it off,
and he answers all of my questions exactly how he has.
And doesn't say, don't do that, do this.
Answers all of them just exactly the way.
Two hours go by, then I get a message.
Hey, I say this with love, but I just want you to consider,
you could do all of that work, or you could pay some attention
to titles.
And description.
And description.
And it would make a really big difference.
And you could just try it, just see,
that's just a thought for you or whatever.
And what's funny is, see, my mind, he knows how my mind works.
And this just floats in over Telegram, right?
So you can see this friendly message.
And the thing is, I'm sure this is planned in his mind.
In my mind, I'm just like, oh, that
was a nice little follow-up.
Yeah, that's a really great idea.
And then when I go back and read it, I'm like, wait a minute.
Well, I mean, it's your call.
I'm not like, yeah.
No, but so anyway, so then I did.
And sure enough, you start looking at the download numbers
when you actually pay attention to the title, turns out
it really matters.
The guy that's been podcasting for 15 years
actually knows something about podcasting.
Pretty darn smart.
Oh, well.
Damn you, Chris.
The check is in, or the bill is in the mail, Noah.
Sprint, snap, and core.
Here's what I came up with.
I came up with peeking at canonical
and behind canonical's curtain.
I kind of like behind canonical's curtain.
Yeah, that's nice.
It's got a ring to it.
OK.
We should probably just go with that,
so that way we can get out of here fast, Noah.
But thank you guys for helping.
Because I did face-hustle.
If people aren't interested in canonical,
then they probably aren't interested in this episode.
That's a good point.
That's a good point.
Mac OS Terminal is the worst.
I agree.
I guess it doesn't have Plasma or Gnome in it.
That's the only thing.
But also, it's not that, like, we talk about that all the time.
Yeah, we literally do.
I almost didn't even want to mention the fact
that I'd move back to Plasma because I'm like,
geez, people have got to be sick and tired of this.
But you're all over the place, Waffler.
I know.
Well, I really thought, the only reason,
I thought I was moved in.
I thought I'd moved into Unity.
You know, I set up my lights outside.
I got my rugs down.
I got my couches moved in.
I put my big screen TV up.
I thought I was set.
And then I realized that my neighbors were assholes
and that my foundation was leaking and that my roof sucks.
So I was like, well, now what am I going to do?
Move to an RV.
Yeah.
The RV in Plasma.

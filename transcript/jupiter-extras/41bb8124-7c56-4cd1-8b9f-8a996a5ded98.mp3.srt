1
00:00:00,000 --> 00:00:03,360
So we have a very special guest coming on the show this afternoon.

2
00:00:03,600 --> 00:00:06,960
And he is the developer behind Merger FS.

3
00:00:07,320 --> 00:00:11,960
But joining me in studio today is the host of Choose Linux, Drew.

4
00:00:12,400 --> 00:00:12,920
Hello, hello.

5
00:00:13,080 --> 00:00:15,880
And I also have the one and the only Brent.

6
00:00:16,040 --> 00:00:16,880
Well, hello.

7
00:00:17,040 --> 00:00:22,560
And the reason we have these two folks is Brent has never used Merger FS before.

8
00:00:22,920 --> 00:00:24,480
He is a curious mind.

9
00:00:24,480 --> 00:00:30,640
He is looking to build the ultimate photo backup storage solution.

10
00:00:30,640 --> 00:00:31,120
Is that right?

11
00:00:31,520 --> 00:00:33,840
I don't know about ultimate, but I need something that really works for me.

12
00:00:33,840 --> 00:00:35,720
Yeah, that pile of external hard drives.

13
00:00:36,200 --> 00:00:37,880
Don't tell them too much about that.

14
00:00:39,400 --> 00:00:40,000
Oh, my goodness.

15
00:00:40,000 --> 00:00:44,440
I was watching a video with Linus Tech Tips and the guy behind, what was it?

16
00:00:45,240 --> 00:00:46,160
Smarter Every Day.

17
00:00:46,960 --> 00:00:52,160
And Linus went to this guy's house and he lives in Alabama near the, near

18
00:00:52,160 --> 00:00:53,520
the like rocket city, what's it called?

19
00:00:53,520 --> 00:00:54,960
Just outside of Atlanta anyway.

20
00:00:55,440 --> 00:00:58,400
And this guy had huge plastic totes.

21
00:00:58,400 --> 00:01:02,600
I'm talking, he had over a hundred terabytes worth of external hard drives, all

22
00:01:02,600 --> 00:01:03,440
neatly labeled.

23
00:01:03,840 --> 00:01:06,280
And this guy went to a spreadsheet and looked at, right.

24
00:01:06,280 --> 00:01:08,000
I want to reference this project.

25
00:01:08,000 --> 00:01:09,800
I want to look for Apollo landings.

26
00:01:10,040 --> 00:01:12,280
I need to go to hard drive Q37.

27
00:01:12,280 --> 00:01:16,600
So you go to box Q, get out hard drive 37 and copy that folder to his.

28
00:01:17,000 --> 00:01:19,720
Was he a librarian before he started doing this?

29
00:01:19,760 --> 00:01:20,560
I have no idea.

30
00:01:20,560 --> 00:01:22,440
Did he use the Dewey Decimal System?

31
00:01:22,440 --> 00:01:27,840
It's a heck of a system when we have projects like Merger FS in the world.

32
00:01:27,840 --> 00:01:31,680
So, Drew, what's your, what's your background with Merger FS?

33
00:01:31,920 --> 00:01:37,280
I've been using it since I found your blog post talking about Merger FS and

34
00:01:37,320 --> 00:01:40,080
it's joys and I've been loving it.

35
00:01:40,080 --> 00:01:45,640
I run it on a Ubuntu 18.04 server with a bunch of Docker containers and

36
00:01:45,680 --> 00:01:46,840
Linux containers you mean?

37
00:01:47,320 --> 00:01:47,960
Well, yeah.

38
00:01:48,000 --> 00:01:49,000
I mean, okay.

39
00:01:49,000 --> 00:01:52,280
So yes, they are kind of like, they're like, they're like,

40
00:01:52,280 --> 00:01:54,320
containers running under Docker.

41
00:01:54,320 --> 00:01:55,960
I call them Docker containers all the time as well.

42
00:01:55,960 --> 00:01:56,960
I'm just as guilty.

43
00:01:57,120 --> 00:01:58,600
Well, I'm using it with Docker.

44
00:01:58,600 --> 00:02:01,280
If it were Podman, then they'd be OCI containers.

45
00:02:01,280 --> 00:02:01,800
Correct.

46
00:02:02,480 --> 00:02:05,320
So the funny thing is before the show, actually, we were just talking and I

47
00:02:05,320 --> 00:02:09,320
showed Drew my blog post from 2016 and he went, I've read this before.

48
00:02:09,320 --> 00:02:09,720
Yes.

49
00:02:09,880 --> 00:02:12,880
Before we, long before we met, cause we first met at LinuxFest Northwest this

50
00:02:12,880 --> 00:02:13,600
year in April.

51
00:02:13,720 --> 00:02:14,080
That's right.

52
00:02:14,400 --> 00:02:19,440
And, uh, it's just funny how the internet is so, it's such a small community

53
00:02:19,440 --> 00:02:21,000
that you never know who you're going to run into.

54
00:02:21,160 --> 00:02:22,040
Yeah, it's a little world.

55
00:02:22,040 --> 00:02:26,480
But yeah, it's, uh, that got me up and running with, uh, MergerFS and SnapRate

56
00:02:26,480 --> 00:02:29,800
on top for Parity and I am a big, big fan.

57
00:02:29,800 --> 00:02:31,920
So I'm really excited to talk to Antonio here.

58
00:02:32,160 --> 00:02:32,960
And what do you do with it?

59
00:02:32,960 --> 00:02:34,160
Is it mainly media files?

60
00:02:34,520 --> 00:02:39,000
It's media, Nextcloud, mail, uh, you know, I got a little bit of everything going

61
00:02:39,000 --> 00:02:39,200
on.

62
00:02:39,200 --> 00:02:42,600
It's a big, big server with lots of RAM and lots of storage.

63
00:02:42,600 --> 00:02:45,400
And so you're not running databases off this thing then?

64
00:02:45,680 --> 00:02:47,760
Um, well, there's a Nextcloud database.

65
00:02:47,760 --> 00:02:48,320
Does that count?

66
00:02:48,960 --> 00:02:49,720
Maybe not.

67
00:02:49,920 --> 00:02:50,720
Yeah, maybe not.

68
00:02:50,720 --> 00:02:52,400
I mean, nothing, nothing high power.

69
00:02:52,400 --> 00:02:54,760
For your container app data, how do you handle that?

70
00:02:54,760 --> 00:02:55,920
Do you have a separate mount point?

71
00:02:56,080 --> 00:03:00,400
Yeah, so I found that MergerFS wasn't very good with databases, so I ended up

72
00:03:00,400 --> 00:03:06,360
moving all of my databases and what I call control for my containers over to an

73
00:03:06,360 --> 00:03:12,320
SSD and then it's just data, just dumb, dumb data living on the MergerFS pool.

74
00:03:12,320 --> 00:03:13,800
And it does a great job.

75
00:03:14,160 --> 00:03:15,440
Write once, read many.

76
00:03:15,440 --> 00:03:16,400
That's where it excels.

77
00:03:16,520 --> 00:03:17,240
Exactly.

78
00:03:17,240 --> 00:03:21,040
Large, static, often unchanging data sets.

79
00:03:21,040 --> 00:03:24,560
And so we've heard from Drew and Brent, uh, I'd like to pull in Antonio at this

80
00:03:24,560 --> 00:03:29,160
point, who is the main developer, I think the only developer of MergerFS actually

81
00:03:29,160 --> 00:03:30,160
looking through the GitHub.

82
00:03:30,160 --> 00:03:36,400
He has 69,000 lines of code to his name and the rest of the world has about 70.

83
00:03:36,400 --> 00:03:38,600
So Antonio, it's great to hear from you.

84
00:03:38,800 --> 00:03:39,640
Thank you for having me.

85
00:03:39,960 --> 00:03:40,920
Well, thanks for being on the show.

86
00:03:40,920 --> 00:03:47,960
So first of all, I wanted to, uh, ask you, what is MergerFS in your own words?

87
00:03:48,280 --> 00:03:51,920
It's a, uh, union file system.

88
00:03:52,680 --> 00:03:53,160
I don't know.

89
00:03:53,200 --> 00:03:58,760
Uh, I ha I think my, uh, tagline on, uh, on GitHub right now is a

90
00:03:58,880 --> 00:04:01,600
featureful, uh, union file system.

91
00:04:02,200 --> 00:04:09,840
It's just a simple way of, of taking a union of all the directories and files

92
00:04:09,840 --> 00:04:15,040
that you may have on a, uh, across a number of file systems or even the same

93
00:04:15,040 --> 00:04:17,280
file system, but from different, uh, paths.

94
00:04:17,840 --> 00:04:26,320
So it's more or less just a proxy with some smarts for routing where the, uh, the

95
00:04:26,320 --> 00:04:32,040
specific functions of a file system, uh, get, uh, dispatched to.

96
00:04:32,520 --> 00:04:37,560
So it's, it's really just, uh, like any other proxy, uh, mostly, I mean, there's

97
00:04:37,560 --> 00:04:42,240
some additional features that are relevant for, uh, the file system space.

98
00:04:42,360 --> 00:04:45,600
But if you think of a web proxy or anything else, it's

99
00:04:45,600 --> 00:04:47,440
largely doing the same thing.

100
00:04:48,000 --> 00:04:54,880
And, uh, the purpose is just to simplify that, that workflow, that, that behavior.

101
00:04:54,880 --> 00:04:59,680
There's many use cases for unionizing, uh, existing file systems.

102
00:04:59,920 --> 00:05:04,800
And, uh, there are many different implementations and I created MergerFS

103
00:05:04,800 --> 00:05:11,240
due to a, I think, uh, a technical limitation that existed in, in the

104
00:05:11,240 --> 00:05:14,520
different popular, uh, implementations that were out there at the time.

105
00:05:14,960 --> 00:05:16,520
Yeah, I use it a lot.

106
00:05:16,560 --> 00:05:20,840
And, um, the way I would explain it is it allows you to take just a bunch of

107
00:05:20,840 --> 00:05:24,880
drives and make them appear as if they're an array of devices, if you like.

108
00:05:24,920 --> 00:05:31,320
So you could have five, 10, 20, uh, different hard drives, each with an

109
00:05:31,320 --> 00:05:35,520
individually readable file system on it and present that under a single mount

110
00:05:35,520 --> 00:05:37,640
point for your applications to use.

111
00:05:38,040 --> 00:05:41,400
Is there a limitation out of interest on the number of devices that

112
00:05:41,400 --> 00:05:42,920
we can put together under Merger?

113
00:05:42,920 --> 00:05:44,160
Not a specific one.

114
00:05:44,560 --> 00:05:48,320
Um, 65,536, I guess, right?

115
00:05:49,200 --> 00:05:53,000
Not even that it'd be the amount of RAM that you probably have.

116
00:05:53,040 --> 00:05:57,520
Uh, I think you're going to run out of, uh, connections before you run out of,

117
00:05:57,520 --> 00:06:01,520
uh, like physical connections to mount drives before you run out of, uh, the

118
00:06:01,520 --> 00:06:03,160
ability to, to merge them together.

119
00:06:03,520 --> 00:06:06,520
Uh, I had a question about, um, you mentioned there was a feature that was

120
00:06:06,520 --> 00:06:10,920
missing, uh, in most of the popular, um, system alternatives that you were

121
00:06:10,920 --> 00:06:11,920
looking at previously.

122
00:06:11,920 --> 00:06:15,560
Um, can you, can you mention that specific feature that kind of made you dive in?

123
00:06:16,200 --> 00:06:20,040
Well, I think the biggest, this might not be a feature per se, but support

124
00:06:20,280 --> 00:06:26,280
was a big one, um, MHTDFS, which I think a lot of people, uh, used to use and

125
00:06:26,280 --> 00:06:31,800
I find, uh, a number of people still use, um, the author had abandoned it quite

126
00:06:31,800 --> 00:06:32,640
some time ago.

127
00:06:32,640 --> 00:06:35,880
That was one of the primary reasons I started looking into this space.

128
00:06:36,480 --> 00:06:42,200
And, um, when I did, I recognized quickly that there was a lot of, uh, security

129
00:06:42,200 --> 00:06:48,040
issues with the software and, um, lack of configurability.

130
00:06:48,080 --> 00:06:54,680
So I think one of the biggest features for MergerFS versus MHTDFS is the ability

131
00:06:54,680 --> 00:07:01,960
to choose what I call a policy, um, in the, the way in which it figures out which

132
00:07:01,960 --> 00:07:05,520
drive or which branch to work on within the union.

133
00:07:05,920 --> 00:07:10,160
So this is a really interesting feature of MergerFS that I absolutely love.

134
00:07:10,280 --> 00:07:12,360
And this is the create policies.

135
00:07:12,840 --> 00:07:16,240
So how, how would you explain it to the layman, right?

136
00:07:16,240 --> 00:07:21,040
Cause the, the, the first, uh, and the default setting is existing path, most

137
00:07:21,040 --> 00:07:21,760
free space.

138
00:07:21,760 --> 00:07:23,840
So, I mean, how would you explain that to the layman?

139
00:07:23,840 --> 00:07:27,720
Uh, so most free space should be somewhat obvious.

140
00:07:27,760 --> 00:07:31,400
You know, each drive has X number of bytes.

141
00:07:31,440 --> 00:07:37,080
And if we look at the more simple version of that, those, that policy is just most

142
00:07:37,080 --> 00:07:44,360
free space at the time a create request comes in, it simply looks at all the drives

143
00:07:44,360 --> 00:07:50,560
at that time, takes a snapshot of those values of how many bytes are free and just

144
00:07:50,560 --> 00:07:51,640
picks the one with the most.

145
00:07:51,640 --> 00:07:53,200
Uh, it's a very simple algorithm.

146
00:07:53,520 --> 00:07:57,920
Most of the algorithms are quite simple and it's a snapshot in time, unless it's

147
00:07:57,920 --> 00:08:03,400
being cached, there's some caveats there, but, um, the existing path part in

148
00:08:03,400 --> 00:08:07,000
retrospect, I actually regret making that the default because it leads to a lot of

149
00:08:07,000 --> 00:08:12,760
confusion, but the intent was, uh, so existing path, there's a behavior in

150
00:08:12,760 --> 00:08:15,080
mergerFS called path preservation.

151
00:08:15,080 --> 00:08:23,360
So imagine you have four drives and you want, uh, media of some sort on one, say

152
00:08:23,360 --> 00:08:28,640
movies, uh, TV shows on the second drive, and you have a lot of eBooks and you want

153
00:08:28,640 --> 00:08:34,400
them on the other two drives and, uh, the path preservation would allow you to sort

154
00:08:34,400 --> 00:08:41,480
of manually go in, create the paths, uh, in each of those drives that you wish to

155
00:08:41,480 --> 00:08:46,680
have that particular data on. So you might make a movies directory on the first one

156
00:08:46,680 --> 00:08:50,880
and the TV directory on the second one and, and books on the third and fourth.

157
00:08:51,360 --> 00:08:58,280
And so the path preservation will filter out in effect, the drives when it's making

158
00:08:58,280 --> 00:09:01,720
decision based on the path, the relative path of that file.

159
00:09:02,040 --> 00:09:07,000
So it's kind of, basically it does a, uh, a, uh, der name.

160
00:09:07,000 --> 00:09:12,640
If you were thinking of it from like a command shell, uh, perspective and looks

161
00:09:12,640 --> 00:09:15,000
for that path across all the devices.

162
00:09:15,080 --> 00:09:22,120
And if it finds it, it is included in the kind of secondary filter, which is most

163
00:09:22,120 --> 00:09:22,920
free space.

164
00:09:23,280 --> 00:09:27,960
Um, and there's other filters too that happen at that time, but so it's kind of

165
00:09:27,960 --> 00:09:30,920
creating sub pools based on the directory hierarchy.

166
00:09:31,640 --> 00:09:35,000
Could you see this as almost like a hybrid approach in a way that it's

167
00:09:35,000 --> 00:09:38,840
kind of, you know, the defined folders that you've preset on those specific

168
00:09:38,840 --> 00:09:44,200
drives are sort of, um, chosen ahead of time are sort of the legacy way of

169
00:09:44,200 --> 00:09:46,320
storing data as we typically see it.

170
00:09:46,640 --> 00:09:50,920
Uh, and then everything else that you pull on those drives is just sort of, um,

171
00:09:50,960 --> 00:09:52,840
dealt with through the algorithms.

172
00:09:52,960 --> 00:09:54,880
Would that be a way of seeing it?

173
00:09:55,240 --> 00:09:55,560
Yeah.

174
00:09:55,600 --> 00:10:00,760
I mean, most people, you know, grow out their collection or of devices, their

175
00:10:00,760 --> 00:10:03,160
storage devices, pretty organically.

176
00:10:03,160 --> 00:10:05,040
Unless you're a business or whatever.

177
00:10:05,400 --> 00:10:11,200
And, uh, you tend to kind of just put a, this drive's going to have X and this

178
00:10:11,200 --> 00:10:15,080
drive's going to have Y and that drive's going to have said, and then you have to

179
00:10:15,160 --> 00:10:20,080
remember which drive is where, which one contains which data sounds familiar.

180
00:10:20,640 --> 00:10:21,000
Right.

181
00:10:21,040 --> 00:10:25,400
This data manages that, or this behavior, I should say, manages that for you.

182
00:10:25,480 --> 00:10:27,800
Um, it does require a little overhead.

183
00:10:27,800 --> 00:10:35,040
It does require you to either seed those paths, um, or to, at some point, you know,

184
00:10:35,040 --> 00:10:38,360
in the future to manage them, if a drive becomes more full or not.

185
00:10:38,840 --> 00:10:43,080
Um, and, and that's why I was saying that there tends to be confusion because as

186
00:10:43,080 --> 00:10:50,160
default, if you follow through step-by-step of, if you have a pool of, of a number of

187
00:10:50,160 --> 00:10:53,840
drives and they're all empty, then the first time you create a directory, it's

188
00:10:53,840 --> 00:10:57,440
going to end up on one of those drives with the defaults.

189
00:10:57,760 --> 00:11:02,320
And so a lot of people get caught up and they're like, Oh, I just copied over a huge

190
00:11:02,320 --> 00:11:05,440
amount of data to my pool and it's all going to one drive.

191
00:11:06,000 --> 00:11:12,320
And that's because the very first maker happens on one drive and they all had the

192
00:11:12,320 --> 00:11:14,240
same amount of space free effectively.

193
00:11:14,960 --> 00:11:20,160
And then that one, that one path is then used for, you know, all the sub directories

194
00:11:20,160 --> 00:11:24,840
are associated with that path.

195
00:11:24,840 --> 00:11:29,720
So it's something I can't really change now, uh, because it's the default, but, uh, if

196
00:11:29,720 --> 00:11:32,240
there's a merger FS three, I might change that.

197
00:11:32,440 --> 00:11:37,240
If you were to change it, what would be your preferred default now?

198
00:11:37,320 --> 00:11:39,160
Just, uh, most free space.

199
00:11:39,160 --> 00:11:43,640
I think the, the average person using merger FS is that's what they're expecting.

200
00:11:44,320 --> 00:11:49,800
Uh, some people would prefer a percentage wise or least free space or whatnot, but

201
00:11:49,800 --> 00:11:54,480
I think, um, most free space is kind of the, the common expectation.

202
00:11:55,280 --> 00:11:56,400
I think that's wise.

203
00:11:56,440 --> 00:12:02,920
Uh, I'm, I'm a merger FS user myself, and I was, uh, a little taken aback when I

204
00:12:02,920 --> 00:12:07,640
first discovered that it was not using least free space or, uh, most free space,

205
00:12:07,640 --> 00:12:12,920
excuse me, and ended up, you know, switching to that and then balancing the

206
00:12:12,920 --> 00:12:16,200
drives, uh, which leads me to another question.

207
00:12:16,200 --> 00:12:20,560
Is there a particular reason that you decided to keep the merger FS tools

208
00:12:20,560 --> 00:12:24,000
separate instead of including them in the base package?

209
00:12:24,200 --> 00:12:28,360
Mostly the release cadence, um, and the language.

210
00:12:28,400 --> 00:12:34,560
So merger FS is C plus plus and the tools they're written in Python three.

211
00:12:34,640 --> 00:12:38,000
And the reason there is just, they're doing very simple things.

212
00:12:38,000 --> 00:12:39,960
It's, it's kind of easier to get off the ground.

213
00:12:39,960 --> 00:12:44,920
And I wanted the tools to be more easily manipulated by third parties,

214
00:12:44,920 --> 00:12:50,600
cause it really started as examples of how to accomplish certain things out

215
00:12:50,600 --> 00:12:53,560
of band so that they didn't have to be in merger FS.

216
00:12:54,160 --> 00:12:59,640
The concern I have is that, you know, I'm the file system or merger

217
00:12:59,640 --> 00:13:03,360
FS is your file system, or at least a proxy for your, your data.

218
00:13:03,840 --> 00:13:08,440
And if I ever screw something up in merger FS, I can screw up your data.

219
00:13:08,720 --> 00:13:13,360
Uh, worst case, I could corrupt it silently, uh, best case, you know,

220
00:13:13,360 --> 00:13:19,640
maybe it crashes or it, uh, you know, deletes a file, hopefully that's.

221
00:13:20,320 --> 00:13:24,000
You know, in a, in an obvious way or whatever, but there's a lot of subtlety

222
00:13:24,000 --> 00:13:30,120
there and granted merger FS is way, way, way more simplistic than most file

223
00:13:30,120 --> 00:13:35,240
systems, but fuse, uh, historically has not always been the most stable.

224
00:13:35,240 --> 00:13:39,280
So I was kind of bounded by the stability of lib fuse and the kernel.

225
00:13:39,280 --> 00:13:44,200
And for any of those who've followed a fuse or merger FS over the years,

226
00:13:44,200 --> 00:13:48,080
they've seen that there's a number of issues that are outside of my control.

227
00:13:48,080 --> 00:13:54,040
And, uh, so with that in mind, I've tried very hard to limit what I put

228
00:13:54,040 --> 00:13:59,320
into the main product so that if there are any issues, these things can be

229
00:13:59,320 --> 00:14:04,960
managed out of band, um, or, or, or at least like even if merger FS isn't there.

230
00:14:04,960 --> 00:14:08,760
Cause one of the nice things, one of the appealing aspects of merger

231
00:14:08,760 --> 00:14:14,480
FS that a lot of users, uh, say is why they like it is, is that you can always

232
00:14:14,480 --> 00:14:16,520
take it out and you can always remove it.

233
00:14:16,520 --> 00:14:20,320
And there's no merger FS isn't really a file system.

234
00:14:20,560 --> 00:14:25,080
I mean, technically it is, but in terms of the traditional sense where it's

235
00:14:25,080 --> 00:14:29,360
controlling the blocks on the device, it's not doing that.

236
00:14:29,400 --> 00:14:34,120
It's just a proxy and as a result, you can always remove it and all your data

237
00:14:34,120 --> 00:14:36,920
is going to be totally accessible.

238
00:14:37,240 --> 00:14:38,800
Um, and that has other side effects.

239
00:14:38,800 --> 00:14:43,120
Meaning if you have a drive that dies, you only lose that one drive, your stuff,

240
00:14:43,120 --> 00:14:46,160
full access in real time to all your other data.

241
00:14:46,720 --> 00:14:53,680
Um, but making everything the separate repo, separate apps, uh, it allow it,

242
00:14:53,680 --> 00:14:58,680
it's, it's in that vein so that, uh, if you want a balance tool and I didn't

243
00:14:58,680 --> 00:15:01,040
write the balance tool the way you want, it's Python.

244
00:15:01,040 --> 00:15:04,040
There's a lot of people that know Python, uh, go at it.

245
00:15:04,320 --> 00:15:06,640
So you touched on the balance tool just then.

246
00:15:06,720 --> 00:15:09,960
Um, which of the other tools do you think that people need to know

247
00:15:09,960 --> 00:15:11,280
about that they perhaps don't?

248
00:15:11,760 --> 00:15:14,080
The dupe tool can be useful.

249
00:15:14,440 --> 00:15:24,160
Uh, so it, uh, it allows you to point at a directory or a file and give like

250
00:15:24,160 --> 00:15:29,160
a number of copies that you want and it will find the drives with the most

251
00:15:29,160 --> 00:15:34,360
free space and make, uh, uses rsync under the covers because I'd rather, rather

252
00:15:34,360 --> 00:15:39,800
than trying to create all that very solid logic of copying files, uh, safely.

253
00:15:40,080 --> 00:15:45,360
I just leverage rsync, but, um, Python is orchestrating that and it will go and.

254
00:15:46,600 --> 00:15:52,440
Uh, find a drive, make end copies, and, uh, it'll just kind of recursively go

255
00:15:52,440 --> 00:15:58,200
through the path that you have instructed it to that's quite useful if you're

256
00:15:58,200 --> 00:16:05,520
if, uh, I know the drive pool has the ability to replicate across, uh, a number

257
00:16:05,520 --> 00:16:11,040
of drives mergerFS doesn't, and in some ways that's purposeful, but, uh, this kind

258
00:16:11,040 --> 00:16:17,240
of allows you on a schedule to do something similar, uh, there's the FSCK

259
00:16:17,240 --> 00:16:21,880
tool, which I don't think I've updated in quite some time, but, uh, a lot of issues

260
00:16:21,920 --> 00:16:26,760
with mergerFS come down to permissions and that tool can help suss out some

261
00:16:26,760 --> 00:16:28,120
of those permission issues.

262
00:16:28,480 --> 00:16:32,320
For instance, if you have two relative paths on two different drives that have

263
00:16:32,320 --> 00:16:38,040
different, um, permissions or, uh, owners, then it can help you find that.

264
00:16:38,400 --> 00:16:40,040
I ran into that issue the other day, actually.

265
00:16:40,480 --> 00:16:42,000
So I now know how to fix it.

266
00:16:42,000 --> 00:16:42,440
Thank you.

267
00:16:43,080 --> 00:16:43,440
Yeah.

268
00:16:43,480 --> 00:16:49,000
Uh, one of my coworkers, uh, has for long has, uh, for a long time, uh,

269
00:16:49,040 --> 00:16:53,800
complain that I allow there to be inconsistencies on the underlying drives,

270
00:16:53,800 --> 00:16:58,360
but the, the problem is with it being a file system, you really don't have a good

271
00:16:58,360 --> 00:17:03,320
API or mechanism for reporting that you found these inconsistencies.

272
00:17:04,000 --> 00:17:10,360
And while I could in effect, just when I notice it, report it in some log

273
00:17:10,360 --> 00:17:16,880
somewhere, uh, why add that to the main product and complicate the code when

274
00:17:16,880 --> 00:17:20,960
it's just as simple as right, uh, to, to write something in Python that just

275
00:17:20,960 --> 00:17:22,200
doesn't audit once in a while.

276
00:17:22,200 --> 00:17:26,800
Uh, usually the only time you need that is when you're mucking around underneath,

277
00:17:27,040 --> 00:17:30,600
uh, merger FS or you're adding in preexisting drives.

278
00:17:30,960 --> 00:17:34,800
So it tends not to be something you need that often, but I think it

279
00:17:34,800 --> 00:17:36,160
was the full first tool I wrote.

280
00:17:36,480 --> 00:17:39,000
I guess the other question there is, could the file system just be doing

281
00:17:39,000 --> 00:17:42,560
that since it has, you know, maybe that's a job it should be doing as well.

282
00:17:42,960 --> 00:17:45,640
So merger FS really needs to be running as root.

283
00:17:45,640 --> 00:17:52,080
And certainly I could go and change permissions, um, or change, uh, owners

284
00:17:52,080 --> 00:17:56,840
or whatnot and try to make them consistent, but what's the heuristic, right?

285
00:17:56,840 --> 00:18:01,760
So if you have four drives and three of them say it's owned by nobody and, and,

286
00:18:01,800 --> 00:18:05,920
uh, the fourth one says it's owned by root, w what do you choose?

287
00:18:06,480 --> 00:18:10,640
Do you choose the one based on the policy for stat?

288
00:18:10,640 --> 00:18:14,520
Do you do it based on a different policy for a different function?

289
00:18:14,960 --> 00:18:20,680
It's not really clear and to try to make it configurable adds like a whole

290
00:18:20,680 --> 00:18:23,880
another level of configuration to the product that would almost

291
00:18:23,880 --> 00:18:25,520
never be used by most people.

292
00:18:26,120 --> 00:18:30,840
I wanted to touch on the fact that you say that it's safe to run as root.

293
00:18:31,280 --> 00:18:35,880
And I was just wondering, um, if we could, if we could talk about

294
00:18:35,880 --> 00:18:39,480
the security of it a little bit, I'd like to know a little bit more about

295
00:18:39,480 --> 00:18:42,400
what safeguards you have in place for that.

296
00:18:42,960 --> 00:18:43,400
Sure.

297
00:18:43,440 --> 00:18:47,760
I mean, there's a section in the docs, which I try to recommend everyone

298
00:18:47,760 --> 00:18:49,080
look at the merger FS docs.

299
00:18:49,120 --> 00:18:55,320
Uh, I have a long career in software development and documentation tends

300
00:18:55,320 --> 00:18:57,080
to be very crappy for most products.

301
00:18:57,080 --> 00:18:59,480
And I spend a lot of time working on docs.

302
00:18:59,480 --> 00:19:02,000
So when in doubt, first check the documents.

303
00:19:02,240 --> 00:19:06,200
From a, from a user to the developer, I'd just like to say a huge thank you.

304
00:19:06,200 --> 00:19:10,280
It makes such a difference when someone puts this much effort into the docs.

305
00:19:10,280 --> 00:19:12,800
So yes, please, if you're listening and haven't read them and are

306
00:19:12,800 --> 00:19:14,320
interested, go take a look.

307
00:19:14,400 --> 00:19:18,840
And these are some of the best written docs I've seen in any

308
00:19:18,840 --> 00:19:20,560
project in a long, long time.

309
00:19:20,560 --> 00:19:23,320
They are really fantastic and robust.

310
00:19:23,560 --> 00:19:24,960
So yes, thank you.

311
00:19:25,000 --> 00:19:25,440
Thank you.

312
00:19:25,520 --> 00:19:29,240
Uh, that said, um, I am biased.

313
00:19:29,280 --> 00:19:33,920
It is my software and I've been using it for a long time and I've, I'm very

314
00:19:33,920 --> 00:19:35,880
intimate with systems level development.

315
00:19:36,120 --> 00:19:41,480
So if there's anything that is unclear for some, uh, Linux newbie, which that

316
00:19:41,480 --> 00:19:46,720
tends to be the, uh, the, the issue, um, feel free to contact me.

317
00:19:46,800 --> 00:19:49,720
There's all the co all my contacts are also in the documents.

318
00:19:49,720 --> 00:19:53,800
So I'm happy to try to reword anything to make it more clear, but, uh,

319
00:19:53,840 --> 00:19:55,160
back to the original question.

320
00:19:56,040 --> 00:20:01,960
So there is a section in there where I go over this relative to M8, uh, MHC

321
00:20:01,960 --> 00:20:05,320
DFS, so MHC DFS could be run as root.

322
00:20:05,480 --> 00:20:08,080
And in fact, generally expected you to run it as root.

323
00:20:08,480 --> 00:20:14,320
If you were, if, if you were only ever running stuff as one user ID, then you

324
00:20:14,320 --> 00:20:18,000
probably wouldn't ever notice if you didn't run it as root, but in the code,

325
00:20:18,000 --> 00:20:23,960
there are very explicitly, um, assumptions that it has the ability to

326
00:20:24,200 --> 00:20:26,600
shown or chmod any random file.

327
00:20:26,920 --> 00:20:30,440
And the way it worked was let's say it creates a file and it's

328
00:20:30,440 --> 00:20:32,360
was, let's say it creates a file.

329
00:20:33,240 --> 00:20:37,640
It would create the file as root and then change the owner to whatever

330
00:20:37,640 --> 00:20:42,080
it was supposed to be based because the way fuse works, you get an instruction

331
00:20:42,080 --> 00:20:48,480
or command from the kernel and a part of the payload is to say, uh, this is

332
00:20:48,480 --> 00:20:52,320
the PID it came from, and this is the user ID and the group ID and some other

333
00:20:52,320 --> 00:20:52,920
metadata.

334
00:20:53,280 --> 00:20:58,040
And so, you know, who has made this request on the other side from the client

335
00:20:58,040 --> 00:21:05,080
app and, uh, MHDFS would simply shown or chmod the file after creating it as root.

336
00:21:05,280 --> 00:21:08,760
Now, from a security perspective, that's not actually a bad idea.

337
00:21:09,160 --> 00:21:15,360
However, that leads to non-posix standard behavior, because if you're root,

338
00:21:15,960 --> 00:21:23,240
uh, you cannot, uh, well in traditional file system APIs, you couldn't, you

339
00:21:23,240 --> 00:21:30,440
couldn't really replicate the permission checking that would happen at, in the

340
00:21:30,440 --> 00:21:32,760
same way that would happen by the current via the kernel.

341
00:21:33,200 --> 00:21:38,560
So your root, you can, uh, ignoring capabilities and such, you can basically

342
00:21:38,560 --> 00:21:43,360
open any file and in certain circumstances, it would allow you to, so

343
00:21:43,360 --> 00:21:46,680
you would be able to do things through MHDFS running as root that you

344
00:21:46,680 --> 00:21:47,840
shouldn't be able to do.

345
00:21:47,840 --> 00:21:54,240
Uh, the proper behavior, uh, is to change before you're do any of these, uh,

346
00:21:54,280 --> 00:21:59,600
commands to change to that user, to that effective user or effectively change

347
00:21:59,600 --> 00:22:04,280
that user user, I should say, and, uh, that's what merger FS does.

348
00:22:04,320 --> 00:22:10,200
So anytime a request comes in where the user ID is relevant, because not all, um,

349
00:22:10,240 --> 00:22:12,840
there's a overhead to changing user IDs.

350
00:22:12,840 --> 00:22:17,640
And so I don't do it if it's unnecessary for like a read and a write, um, the

351
00:22:17,640 --> 00:22:20,080
kernel doesn't actually check the permissions.

352
00:22:20,120 --> 00:22:27,640
So if you chmod or chown a file while you're reading and writing it, um, it's

353
00:22:27,720 --> 00:22:31,600
that's irrelevant to, to, uh, the situation.

354
00:22:31,640 --> 00:22:35,080
And so I don't actually change in those for those commands, but anything else

355
00:22:35,080 --> 00:22:42,600
like a stat or create, mkdir, et cetera, you, it, the only solution that I

356
00:22:42,600 --> 00:22:47,960
use secure way to do that is to become that user and then to, uh, take that

357
00:22:47,960 --> 00:22:50,440
action just like you would normally.

358
00:22:50,920 --> 00:22:56,120
And so that's, that's the biggest security change, um, relative to the,

359
00:22:56,240 --> 00:23:01,000
uh, MHDFS and some others, similar file systems out there.

360
00:23:01,000 --> 00:23:04,000
It's in effect, the same thing that, uh, Samba does.

361
00:23:04,000 --> 00:23:05,840
And I use the same tricks that they do.

362
00:23:05,840 --> 00:23:12,160
So in Linux, or I should say POSIX in general, uh, says that every thread within

363
00:23:12,160 --> 00:23:17,920
a process needs to be the same user ID, but Linux doesn't work the same way as

364
00:23:17,920 --> 00:23:18,840
traditional Unix.

365
00:23:18,880 --> 00:23:24,880
And it uses for those who are familiar, the clone system call, which is a much

366
00:23:24,880 --> 00:23:28,560
more flexible version of fork basically.

367
00:23:28,560 --> 00:23:35,240
And every thread it can have its own, uh, user ID and its own credentials.

368
00:23:35,400 --> 00:23:41,480
And so I abuse that, uh, by calling directly into the kernel so that as a

369
00:23:41,480 --> 00:23:45,840
multi-threaded application, merger FS can simulate being multiple users at once.

370
00:23:45,840 --> 00:23:49,280
And this is a behavior that, uh, Samba also uses.

371
00:23:49,680 --> 00:23:50,920
That's super interesting.

372
00:23:51,480 --> 00:23:55,520
Uh, I always wondered why there was so many processes showing up in top or

373
00:23:55,520 --> 00:23:56,560
something, and now I know why.

374
00:23:56,560 --> 00:23:58,480
The number of threads are configurable now.

375
00:23:58,520 --> 00:24:05,040
Um, that was something that I, when I vendored the libfuse library, I, uh, made

376
00:24:05,040 --> 00:24:08,320
that more configurable because you do lose some throughput when you increase the

377
00:24:08,320 --> 00:24:12,960
number of threads, because there's more contention on the pipe going into the

378
00:24:12,960 --> 00:24:18,320
kernel, but, uh, generally, yeah, that's, that's why you, you by default will get

379
00:24:18,320 --> 00:24:22,800
one thread per core and then the, there's a primary thread.

380
00:24:23,280 --> 00:24:24,800
Um, let's shift gears a little bit.

381
00:24:24,800 --> 00:24:28,600
What, uh, what considerations do people need to make in terms of CPU?

382
00:24:29,040 --> 00:24:34,400
Because traditionally one of the limitations in fuse has been it's high,

383
00:24:34,680 --> 00:24:36,680
quote unquote, high CPU usage.

384
00:24:37,880 --> 00:24:40,880
What sort of CPUs are people going to need to, to sustain a

385
00:24:40,880 --> 00:24:42,320
gigabit transfer, for example?

386
00:24:43,000 --> 00:24:44,920
That's hard to say.

387
00:24:45,160 --> 00:24:54,440
Um, for those who don't know fuse is a serial protocol that, uh,

388
00:24:54,440 --> 00:24:58,920
that the kernel exposes to user space.

389
00:24:59,440 --> 00:25:04,080
And it allows an app, a user land application to serially communicate

390
00:25:04,120 --> 00:25:07,760
over, uh, a device dev fuse.

391
00:25:08,440 --> 00:25:15,920
And every time, uh, say your client app is, uh, LS every time it's making some

392
00:25:15,920 --> 00:25:21,480
system call that's, that's a file system API, it's got to go into the kernel when

393
00:25:21,480 --> 00:25:27,400
the syscall say an open is, is called, there's the open from the app gets

394
00:25:27,400 --> 00:25:32,880
translated, there's a wrapper for the C library, then that calls a system call

395
00:25:32,880 --> 00:25:37,400
into the kernel and with fuse, it's got to see, Oh, okay.

396
00:25:37,400 --> 00:25:40,160
You're talking to a fuse file system.

397
00:25:40,480 --> 00:25:44,640
So I have to look up who's on the under other end of this file system,

398
00:25:44,880 --> 00:25:48,080
transfer that through this, uh, character device.

399
00:25:48,640 --> 00:25:51,120
And that's kind of where this overhead comes from.

400
00:25:51,120 --> 00:25:58,240
So you have to go into kernel space, into user space from user space back at well,

401
00:25:58,240 --> 00:26:00,720
as a proxy, I'm going back into kernel.

402
00:26:00,720 --> 00:26:04,760
Like, so merger merger FS is going back into the kernel to ask the question like,

403
00:26:05,200 --> 00:26:09,080
okay, I need to start this file, whatever the original app was asking.

404
00:26:09,680 --> 00:26:14,360
So that's another round back into the kernel, then back into user space and then

405
00:26:14,360 --> 00:26:16,080
back into the kernel and then back to the original app.

406
00:26:16,080 --> 00:26:20,280
So it's, it, there's a lot of latency there because it's serial.

407
00:26:20,280 --> 00:26:24,160
It's, uh, copying this data back and forth into the kernel and that there's

408
00:26:24,160 --> 00:26:31,640
a lot of overhead to that and it's CPU intensive, not in the traditional way.

409
00:26:31,680 --> 00:26:33,840
So it's, it's more IO intensive.

410
00:26:35,160 --> 00:26:39,760
And because it's a user land app, you're seeing the CPU utilization.

411
00:26:40,080 --> 00:26:48,200
So if you're using ZFS or butter FS or similar, those can take a lot of compute

412
00:26:48,200 --> 00:26:52,960
as well, but because they don't represent themselves in user space in quite the

413
00:26:52,960 --> 00:26:59,880
same way, uh, you don't see the CPU grinding away doing block deduplication

414
00:26:59,880 --> 00:27:04,440
or in ZFS or, or the raid behavior or whatnot.

415
00:27:05,040 --> 00:27:09,440
Um, and so in some ways, I think fuse gets a bad rap because of that, because

416
00:27:09,440 --> 00:27:15,800
you're seeing the actual compute that it needs that said there is this extra

417
00:27:15,800 --> 00:27:19,400
latency introduced because there's these extra hops going in and out of the

418
00:27:19,400 --> 00:27:26,560
kernel and the speed at which you can do that, um, Is it doesn't seem

419
00:27:26,560 --> 00:27:28,320
dependent entirely on the CPU.

420
00:27:28,400 --> 00:27:33,960
So I have had people use raspberry PI twos and no problem whatsoever.

421
00:27:33,960 --> 00:27:39,080
Fully, you know, uh, getting full throughput as they would expect either

422
00:27:39,080 --> 00:27:44,200
from the Nick or the drives they have connected and minimal CPU utilization.

423
00:27:44,200 --> 00:27:48,720
And I've had people on Xeons say that their CPU utilization is through the

424
00:27:48,720 --> 00:27:53,720
roof and I haven't been able to figure out why that is, uh, I've had similar

425
00:27:53,720 --> 00:28:02,120
systems, same kernel, same OS, uh, different drives and HBAs or controllers

426
00:28:02,360 --> 00:28:06,080
for the drives and had different behavior between the two.

427
00:28:07,080 --> 00:28:09,040
And I'm still trying to figure out why that is.

428
00:28:10,080 --> 00:28:11,440
I don't know if it's a driver issue.

429
00:28:11,440 --> 00:28:13,200
I don't know if it's a drive issue.

430
00:28:13,200 --> 00:28:17,760
Um, if it's a, there's a bunch of other crap going on on the machine that's not

431
00:28:17,760 --> 00:28:20,960
being accounted for issue, uh, it's hard to say.

432
00:28:21,120 --> 00:28:26,080
And, uh, what I really need to do is there's all these variables and arguments

433
00:28:26,080 --> 00:28:31,360
that I allow to be modified in merger FS that I would like to hide from the user.

434
00:28:32,160 --> 00:28:35,120
But the reason that they're there is because I've found that different

435
00:28:35,120 --> 00:28:40,000
people get different performance, um, based on those different options.

436
00:28:40,000 --> 00:28:44,120
And what I really need to do is stop being lazy and build a, uh, like a

437
00:28:44,120 --> 00:28:47,560
benchmarking tool that just kind of goes through all the different permutations

438
00:28:47,560 --> 00:28:52,760
of those arguments and then runs, you know, very simple DD kind of benchmark

439
00:28:52,800 --> 00:28:58,000
and tries to find the best, um, the best permutation of values.

440
00:28:58,320 --> 00:29:01,280
You heard it here first folks, measure of first three is going to have a built

441
00:29:01,280 --> 00:29:02,720
in tool for testing performance.

442
00:29:03,040 --> 00:29:03,560
Nice.

443
00:29:04,800 --> 00:29:06,560
Um, so I had another question for you.

444
00:29:06,560 --> 00:29:10,160
Uh, how long has measure of first been around and what was your, your

445
00:29:10,160 --> 00:29:11,680
motivation really to create it?

446
00:29:11,720 --> 00:29:15,800
I know you touched on that at the beginning with the, uh, the lacking

447
00:29:15,800 --> 00:29:20,120
features in other products, but, uh, just curious, really sure how long it's been

448
00:29:20,120 --> 00:29:22,480
around, um, we'd have to check it hub.

449
00:29:22,640 --> 00:29:25,800
It's been longer than I, than I'd probably say.

450
00:29:25,880 --> 00:29:31,200
Um, cause if, for instance, this other tool I have BBF that I've been working

451
00:29:31,200 --> 00:29:36,000
on recently, which is a tool that is kind of bad blocks, plugs and

452
00:29:36,000 --> 00:29:42,520
blocks plus, uh, HD parm, um, plus some extra features, uh, that tool I thought

453
00:29:42,520 --> 00:29:45,160
I wrote like a year ago and it turned out I wrote it three years ago.

454
00:29:45,240 --> 00:29:47,600
So, um, my memory is not so good.

455
00:29:47,680 --> 00:29:47,880
Yeah.

456
00:29:47,880 --> 00:29:48,600
Time flies.

457
00:29:48,600 --> 00:29:49,320
It really does.

458
00:29:50,240 --> 00:29:57,720
But the, uh, I guess a little backstory is that I've always been a, uh, media

459
00:29:57,720 --> 00:29:58,280
collector.

460
00:29:58,320 --> 00:30:04,960
So in the eighties and nineties, I had all the CDs and all the movies.

461
00:30:04,960 --> 00:30:13,600
And once it became, uh, financially viable to store digital media, um, in

462
00:30:13,600 --> 00:30:22,000
bulk, I started doing so, and I had a iRiver H, uh, three 40 with all my

463
00:30:22,000 --> 00:30:29,520
AUG level six encoded or AUG Vorbis, um, level six encoded, um, music.

464
00:30:29,960 --> 00:30:33,920
And I had to immediately when I bought it, I bought an upgraded hard drive

465
00:30:33,920 --> 00:30:37,320
on the, you know, third, third party and took it apart and upgraded the hard

466
00:30:37,320 --> 00:30:42,400
drive to like 60 gigs, I think it was, um, just because I had a bunch of music

467
00:30:42,400 --> 00:30:44,200
and I wanted all my music in one spot.

468
00:30:44,200 --> 00:30:50,360
And, uh, as my music collection grew and hard drive prices declined, I

469
00:30:50,360 --> 00:30:56,440
started ripping my DVDs and, uh, I never liked the idea of transcoding it to

470
00:30:56,440 --> 00:31:01,040
some other format, especially because even if you're not someone who's ripping

471
00:31:01,040 --> 00:31:07,160
and then selling, which I don't, I just have tons, tons and tons of, uh, um,

472
00:31:07,720 --> 00:31:12,560
CD holders, DVD holders up in the closet, but just re ripping stuff as a pain.

473
00:31:13,040 --> 00:31:16,880
And so I ended up slowly building this hard drive collection.

474
00:31:17,720 --> 00:31:20,960
And it became, as soon as I got to a point where one hard drive couldn't

475
00:31:20,960 --> 00:31:24,640
hold the full collection of certain types of media, it got really annoying.

476
00:31:25,040 --> 00:31:29,720
And that's when I started looking for a solution, which led me to MHDFS.

477
00:31:29,720 --> 00:31:32,080
And cause that was so simple to do.

478
00:31:32,080 --> 00:31:36,320
And I, you know, I wasn't gonna spend the money for a raid set up or whatever.

479
00:31:36,480 --> 00:31:38,960
I think we both use MHDFS for a while.

480
00:31:39,360 --> 00:31:46,400
Cause before I use mergerFS, uh, I used MHDFS and AUFS and Unraid for a bit too.

481
00:31:46,400 --> 00:31:50,920
And I even tried FreeNAS, uh, and then your tool literally came out of nowhere.

482
00:31:50,920 --> 00:31:53,160
I've just found the first commit was March, 2014.

483
00:31:53,200 --> 00:31:53,480
Yeah.

484
00:31:53,480 --> 00:32:00,440
And I, I had a coworker who was also using MHDFS and, you know, it was a data hoarder.

485
00:32:01,040 --> 00:32:02,880
And, oh yeah, I love that subreddit.

486
00:32:02,880 --> 00:32:03,200
Do you?

487
00:32:04,040 --> 00:32:08,840
Oh, I'm on there and you'll find me, uh, anytime there's a, I have a, uh, if

488
00:32:08,840 --> 00:32:12,080
then, then that, uh, search for mergerFS.

489
00:32:12,080 --> 00:32:15,960
So people apparently know that anytime something comes up, I

490
00:32:15,960 --> 00:32:17,520
come in and snipe a response.

491
00:32:17,800 --> 00:32:18,480
You do.

492
00:32:18,560 --> 00:32:22,160
I've noticed that every time I post something, there you are, like a bad smell.

493
00:32:22,160 --> 00:32:24,680
So what does your home server look like?

494
00:32:24,720 --> 00:32:26,280
How many terabytes are we talking?

495
00:32:27,080 --> 00:32:34,560
I have, um, so, uh, I do have a Wiki page on the mergerFS GitHub, uh,

496
00:32:34,600 --> 00:32:40,920
account or whatever repo, and I invite people to go there and add their own home

497
00:32:40,920 --> 00:32:42,440
setup, um, mine's on there.

498
00:32:42,680 --> 00:32:48,680
So I have currently, uh, so I just redid my system.

499
00:32:48,680 --> 00:32:52,640
So I actually don't have that fancy of a setup, um, though I do have a lot of

500
00:32:52,640 --> 00:33:00,320
storage, so I used to just have a four port, uh, eSATA, AS media based multiple,

501
00:33:00,360 --> 00:33:03,360
um, can, uh, eSATA controller card.

502
00:33:03,760 --> 00:33:09,840
And then I had four IC dock port multiplier, four port, uh, enclosures.

503
00:33:09,960 --> 00:33:11,760
They fit well in my entertainment center.

504
00:33:12,320 --> 00:33:14,120
You know, I don't need a lot of throughput.

505
00:33:14,240 --> 00:33:14,960
It worked.

506
00:33:14,960 --> 00:33:18,920
Uh, but when it doesn't work, it really doesn't work because unfortunately port

507
00:33:18,920 --> 00:33:22,160
multipliers, uh, don't handle failing drives particularly well.

508
00:33:22,760 --> 00:33:28,600
And so just about a month ago, I decided I was fed up and I bought a old, uh, uh,

509
00:33:28,640 --> 00:33:41,000
LSI 90 201, uh, four port 16 or 16 port, um, uh, HPA, and I bought two generic, uh,

510
00:33:41,000 --> 00:33:45,120
eight bay, three and a half inch drive enclosures.

511
00:33:45,440 --> 00:33:48,520
I assume you flashed that LSI thing to it mode.

512
00:33:49,160 --> 00:33:50,000
Yes, yes.

513
00:33:50,200 --> 00:33:54,160
And, uh, these enclosures I linked to them on the Wiki page.

514
00:33:54,320 --> 00:33:55,680
I'd never come across them before.

515
00:33:55,680 --> 00:33:59,440
They're basically the, if you've ever seen an eight port SANS digital, it's

516
00:33:59,440 --> 00:34:03,080
that enclosure, but without anything, without a backplane or anything.

517
00:34:03,480 --> 00:34:08,440
Um, and so it's pretty bare bones, but at $70 shipped, it's pretty good.

518
00:34:08,440 --> 00:34:11,120
Nice if you're just kind of putting your own thing together and you don't have

519
00:34:11,120 --> 00:34:15,000
rack space, which I don't, I'm in a Manhattan apartment, uh, downtown.

520
00:34:15,000 --> 00:34:24,920
So I bought two of those and I bought four, um, For, uh, mini SAS to four port

521
00:34:24,960 --> 00:34:31,120
SEDA connector cables and just fish the wires through and hooked it all up.

522
00:34:31,120 --> 00:34:32,760
And, uh, that's what I'm on now.

523
00:34:32,760 --> 00:34:33,160
It works.

524
00:34:33,240 --> 00:34:34,360
It's way more stable.

525
00:34:34,360 --> 00:34:39,560
So I have, uh, let's see, I have 12, eight terabyte drives.

526
00:34:40,280 --> 00:34:45,920
I have a few thrown in there that were like dying drives, like a one, a two, one

527
00:34:45,920 --> 00:34:51,000
and a half, something like that, that I'm using as guinea pigs for my, uh, hard

528
00:34:51,000 --> 00:34:51,680
drive tool.

529
00:34:52,240 --> 00:34:57,800
And then I have a, uh, the audio isn't bad.

530
00:34:57,840 --> 00:35:00,760
Um, or, you know, how loud the drives are, aren't that bad.

531
00:35:00,760 --> 00:35:01,800
They're all sitting in the car.

532
00:35:01,800 --> 00:35:04,520
You know, how loud the drives are, aren't that bad, they're all sitting in my

533
00:35:04,520 --> 00:35:05,040
living room.

534
00:35:05,720 --> 00:35:07,560
Um, and I I'm in Manhattan.

535
00:35:07,560 --> 00:35:10,560
There's a lot of outside noise, so kind of all drones together.

536
00:35:10,560 --> 00:35:16,760
It's not the biggest of deals, but in terms of heat and the noise, especially

537
00:35:16,760 --> 00:35:20,360
from the fans gets annoying at times, um, I have updated the fans, so they're,

538
00:35:20,440 --> 00:35:25,160
they're less awful, but in any case, I've kind of started moving to two and a half

539
00:35:25,160 --> 00:35:26,480
inch, five terabyte drives.

540
00:35:26,480 --> 00:35:31,640
The, um, Seagate, oh, I forget what the serial numbers are, but

541
00:35:31,640 --> 00:35:34,600
in any case, they're the only five terabyte, two and a half drives out there.

542
00:35:34,880 --> 00:35:38,320
They're reasonably priced per terabyte and I've started using those.

543
00:35:38,320 --> 00:35:40,480
So I have, uh, three of those now.

544
00:35:40,920 --> 00:35:44,600
And so my total capacity is around a hundred terabytes.

545
00:35:45,000 --> 00:35:47,240
And unfortunately it's almost full.

546
00:35:47,520 --> 00:35:48,360
So that's really impressive.

547
00:35:48,360 --> 00:35:49,840
Do you have any kind of parity on there?

548
00:35:50,120 --> 00:35:51,000
Uh, I don't.

549
00:35:51,240 --> 00:35:58,320
So I used to use snap raid, but I kind of, I was using crash plan.

550
00:35:58,320 --> 00:36:05,440
So if you look in the trap exit, get hub, um, account, you'll find a repo.

551
00:36:05,440 --> 00:36:09,560
That's just, uh, examples on how to set up different environments, different

552
00:36:09,560 --> 00:36:13,360
storage environments and how to use different tools for maintenance and

553
00:36:13,360 --> 00:36:14,720
formatting and et cetera.

554
00:36:15,200 --> 00:36:19,200
And you'll notice that there's numerous mentions to crash plan, which I still

555
00:36:19,200 --> 00:36:22,960
technically have a crash plan plan, but I haven't been using it much lately.

556
00:36:22,960 --> 00:36:28,120
Uh, and for those who don't know, they were kind of the last, maybe

557
00:36:28,120 --> 00:36:35,720
kind of still are besides, um, well, I guess the only cross-platform fully,

558
00:36:35,800 --> 00:36:42,280
um, unlimited backup service, like true backup service, not a cloud, um, kind

559
00:36:42,280 --> 00:36:44,840
of data source like G drive or Dropbox.

560
00:36:45,360 --> 00:36:48,440
And so a lot of, I know a lot of data hoarders, including myself use that for

561
00:36:48,440 --> 00:36:52,280
years, but the company I don't think is doing that great or whatever.

562
00:36:52,280 --> 00:36:56,640
So that was kind of my backup plan because it, once I successfully backed

563
00:36:56,640 --> 00:36:59,720
up all my data, that was fine, right?

564
00:36:59,720 --> 00:37:04,440
Cause I have, I also have another tool called scorch, which is used to find bit

565
00:37:04,440 --> 00:37:04,800
rot.

566
00:37:05,000 --> 00:37:09,760
So if I ever lost a file or drive, if I ever found bit rot, I could just

567
00:37:09,760 --> 00:37:11,320
restore it from crash plan.

568
00:37:11,320 --> 00:37:14,960
And because it was true backup in the same way that maybe time machine or

569
00:37:15,200 --> 00:37:20,200
snapshots and in ZFS or butter FSR, then it really wasn't a big deal.

570
00:37:20,200 --> 00:37:25,800
I really didn't need, um, parody, um, or any sort of, uh, backup like snap rate.

571
00:37:26,600 --> 00:37:31,560
Uh, when that started giving me a problem, mostly because they store all their data

572
00:37:31,560 --> 00:37:33,440
when they're scanning your drive in memory.

573
00:37:33,440 --> 00:37:36,480
And so you need a ton of Ram to, uh, scan.

574
00:37:36,480 --> 00:37:39,680
And the more data you have, the more Ram you need and it just doesn't scale well.

575
00:37:40,400 --> 00:37:47,960
Uh, I did move to, uh, to snap rate for a while, but I realized that if I had a

576
00:37:47,960 --> 00:37:52,040
different backup service, then I could get rid of that again and get that storage

577
00:37:52,040 --> 00:37:54,800
back, which at the time I really needed similar to now, I guess.

578
00:37:55,400 --> 00:37:59,840
And so I kind of got off of snap rate at that point when I found a better backup

579
00:37:59,840 --> 00:38:04,880
service, which is I use G-suite now and our clone and that works quite well for me.

580
00:38:05,200 --> 00:38:05,760
Very well.

581
00:38:05,800 --> 00:38:06,080
Yes.

582
00:38:06,080 --> 00:38:07,160
I use that myself as well.

583
00:38:07,560 --> 00:38:13,320
Um, so you got, you mentioned snapshots just then, um, is there any technical

584
00:38:13,320 --> 00:38:17,840
reason why snapshots couldn't ever make it into merger FS one day?

585
00:38:17,840 --> 00:38:20,000
Is that something you might consider adding at some point?

586
00:38:20,560 --> 00:38:25,760
It would have to be based on top of existing technologies.

587
00:38:25,800 --> 00:38:30,880
Like the underlying file system would have to support it in some way, uh, because

588
00:38:30,880 --> 00:38:33,600
there's just too much going on there for me to replicate.

589
00:38:34,160 --> 00:38:39,840
I do have a number of optimizations that I really don't talk about because you

590
00:38:39,840 --> 00:38:44,880
wouldn't notice, but if you've ever used the CP, the GNU CP tool, right?

591
00:38:44,880 --> 00:38:47,160
Like CP, you're copying a file around.

592
00:38:47,560 --> 00:38:50,480
If you look in the man page, there's the ref link argument.

593
00:38:50,920 --> 00:38:56,320
And so certain file systems like ZFS, butter FS, and new versions of XFS have

594
00:38:56,320 --> 00:38:57,240
this ref link thing.

595
00:38:57,240 --> 00:39:02,240
So this copy on right, the ability to say that this file and this file use the same

596
00:39:02,240 --> 00:39:02,920
blocks.

597
00:39:03,000 --> 00:39:08,640
And so if you're going to copy a 10 terabyte file, it can happen in, in a, you

598
00:39:08,640 --> 00:39:13,960
know, in a second because it's really just making references to preexisting data,

599
00:39:13,960 --> 00:39:15,880
which is how snapshots work.

600
00:39:16,360 --> 00:39:22,720
And so in merger FS, when it is needing to copy a file from one location to another,

601
00:39:22,720 --> 00:39:27,920
and there's a few situations where that may occur, uh, it'll try to use those

602
00:39:27,960 --> 00:39:30,720
optimized, um, behaviors.

603
00:39:30,720 --> 00:39:35,200
And if they fail, it falls back to just traditional, you know, read from one file,

604
00:39:35,280 --> 00:39:36,840
copy and write to the other file.

605
00:39:36,840 --> 00:39:40,440
And so I could in effect extend on that.

606
00:39:40,560 --> 00:39:46,600
And if certain commands were made to, uh, merger FS, I could forward them

607
00:39:46,600 --> 00:39:51,440
appropriately to the underlying file system, but because merger FS is really

608
00:39:51,440 --> 00:39:56,560
just a proxy and I'm not messing with the data itself, there isn't a real way for

609
00:39:56,560 --> 00:40:01,040
me without in effect rewriting the whole product to offer snapshots.

610
00:40:01,160 --> 00:40:02,360
Yeah, that makes a lot of sense.

611
00:40:02,360 --> 00:40:08,720
You mentioned very briefly earlier how, um, if merger FS is removed from the

612
00:40:08,720 --> 00:40:12,400
system, uh, then the drives are still, the data is still available on the drives.

613
00:40:12,440 --> 00:40:16,280
Um, that is one thing that has kept me from exploring various options.

614
00:40:16,280 --> 00:40:20,720
I'm, I'm looking to build my own sort of storage system, uh, in my place.

615
00:40:20,720 --> 00:40:24,440
And I've been sort of looking at a bunch of tools, but haven't jumped in.

616
00:40:24,760 --> 00:40:28,240
Although Alex has convinced me that merger FS is probably the way to go.

617
00:40:28,280 --> 00:40:28,800
It is.

618
00:40:28,840 --> 00:40:30,480
Um, and so you can stop looking.

619
00:40:30,480 --> 00:40:36,600
One big question that I have is, and which I have applied to all of my systems, uh,

620
00:40:36,640 --> 00:40:41,760
in various ways is that I want to be able to understand the data if something goes

621
00:40:41,760 --> 00:40:42,080
wrong.

622
00:40:42,080 --> 00:40:46,080
So can you give me sort of a run through of what the data might look like if

623
00:40:46,080 --> 00:40:46,800
something goes wrong?

624
00:40:47,200 --> 00:40:49,720
Exactly as you would expect if it was a single drive.

625
00:40:50,040 --> 00:40:54,240
Well, I guess, uh, to dive into that a little bit, like I know the, let's say I

626
00:40:54,240 --> 00:41:01,200
write a file, it gets sent to the, um, free most drive.

627
00:41:01,440 --> 00:41:06,720
And so if I'm looking at several drives, um, that have a similar folder, for

628
00:41:06,720 --> 00:41:08,280
instance, uh, right.

629
00:41:08,320 --> 00:41:12,880
So, uh, I mean, in, in that case, what you're going to have is a federation of

630
00:41:12,880 --> 00:41:16,880
that data across those drives, um, but at a file level, right?

631
00:41:16,880 --> 00:41:23,160
So you're not going to be, let's say you've got an album and, uh, you've got

632
00:41:23,160 --> 00:41:28,640
most free space enabled, um, that album, you know, say of three drives and

633
00:41:28,640 --> 00:41:33,560
there's 10, 10 songs and they all happen to be around the same size, you might

634
00:41:33,560 --> 00:41:37,600
end up with three files, three files and four files, uh, across those three

635
00:41:37,600 --> 00:41:41,560
drives, uh, that's really not predictable at any one time.

636
00:41:41,560 --> 00:41:45,360
I mean, obviously at the specific time of creation, it's predictable.

637
00:41:45,360 --> 00:41:46,800
That's how merger FS is working.

638
00:41:46,800 --> 00:41:52,960
Um, though there is a random option, uh, policy, but, uh, you're not going to

639
00:41:52,960 --> 00:41:56,160
know ahead of time, obviously where that data exists.

640
00:41:56,200 --> 00:42:00,560
However, it will be in the same relative path.

641
00:42:00,720 --> 00:42:05,800
You'll be able to very easily see that this specific data, I mean, you'll know

642
00:42:05,800 --> 00:42:09,560
that that data is missing, but you're not going to be missing like half a file.

643
00:42:09,920 --> 00:42:15,360
You'll be missing maybe half an album, but, uh, you'll know every, every drive

644
00:42:15,360 --> 00:42:18,520
will have the same, largely the same layout.

645
00:42:18,840 --> 00:42:22,680
They'll all have the same directories or at least, uh, the directories that

646
00:42:22,680 --> 00:42:25,080
matter to be on multiple drives.

647
00:42:25,120 --> 00:42:30,400
You'll see this, the same relative layout, but so defined like a specific

648
00:42:30,400 --> 00:42:37,000
file, we would then use find or locate or whatever search tool against the drive

649
00:42:37,000 --> 00:42:40,440
Mount paths rather than the merger FS pool, correct?

650
00:42:40,520 --> 00:42:40,960
Right.

651
00:42:40,960 --> 00:42:46,160
And, uh, and my tool scorch, uh, to plug that a little bit, I actually use

652
00:42:46,160 --> 00:42:48,400
that, uh, for this kind of use case.

653
00:42:48,720 --> 00:42:52,960
I need to enhance the tool to make it so right now it hashes everything.

654
00:42:53,040 --> 00:42:57,080
I want to make the hashing algorithm configurable, and that includes no hash.

655
00:42:57,400 --> 00:43:01,240
So that would make the tool more of an indexing tool, but when you're merging

656
00:43:01,240 --> 00:43:05,920
together all these different drives and you lose a random drive, it's incredibly.

657
00:43:06,360 --> 00:43:08,520
Frustrating to not know what data you're missing.

658
00:43:08,520 --> 00:43:12,320
Like it's convenient that I still have my other drives live.

659
00:43:12,480 --> 00:43:15,400
Um, and I'm missing only this one drive, but then you have to go through

660
00:43:15,400 --> 00:43:17,160
the process of fixing that situation.

661
00:43:17,640 --> 00:43:23,040
And I started writing scorch in part because of that, where I wanted

662
00:43:23,040 --> 00:43:27,360
to know very simply, I wanted to have a database in effect that I can say, okay,

663
00:43:27,480 --> 00:43:33,120
show me every file in this system that I'm missing, uh, since my last, uh, you

664
00:43:33,120 --> 00:43:34,720
know, update of the database.

665
00:43:34,720 --> 00:43:41,560
And if you pointed that to the mounts rather than say the union, then you could

666
00:43:41,560 --> 00:43:44,440
find exactly what files you are missing.

667
00:43:44,680 --> 00:43:50,320
Now I'm going to probably release these random scripts that I have, um, where it

668
00:43:50,320 --> 00:43:54,280
kind of creates an audit of every drive that's in my pool every day and then

669
00:43:54,280 --> 00:43:59,360
creates a diff and so, and I use like a log rotate to keep those for 90 days or

670
00:43:59,360 --> 00:43:59,720
something.

671
00:43:59,720 --> 00:44:04,320
So if I miss a drive or accidentally delete something or, um, you know,

672
00:44:04,320 --> 00:44:10,160
whatever, I can just kind of unzip the file, check, do a quick grep and find

673
00:44:10,160 --> 00:44:13,920
where the file was at any particular time in the past 90 days.

674
00:44:14,480 --> 00:44:20,440
Um, and then that combined with scorch, which gives, I use to index all the data

675
00:44:20,440 --> 00:44:23,600
in my main union, uh, mount point.

676
00:44:24,120 --> 00:44:28,960
I can very easily find the data that I need to help me reconstruct the situation.

677
00:44:29,160 --> 00:44:30,760
I need to start using this scorch tool.

678
00:44:30,760 --> 00:44:33,600
It sounds wonderful, but just to expand a little bit on what's just been

679
00:44:33,600 --> 00:44:38,440
said, um, the, the key thing that merger FS lets you do, and to be honest, it's

680
00:44:38,440 --> 00:44:42,280
the same with, um, unraid and many of these other kinds of union file systems

681
00:44:42,800 --> 00:44:46,600
is you still have a, an individually readable file system on each disc and how

682
00:44:46,600 --> 00:44:52,920
that differs from traditional raid or, uh, ZFS or something is that rather than

683
00:44:52,920 --> 00:44:56,040
the data being striped, uh, across multiple drives.

684
00:44:56,040 --> 00:45:00,320
So if you lose disc five, you better hope that the stuff that was on disc five is

685
00:45:00,320 --> 00:45:05,280
striped somewhere on disc one through four, whereas with merger FS, like, um,

686
00:45:05,600 --> 00:45:10,840
Antonio said, it writes entire files to a disc rather than partial files or

687
00:45:10,840 --> 00:45:11,480
anything like that.

688
00:45:12,120 --> 00:45:17,360
Um, and so if you pull any of these drives from underneath merger FS and stick it in

689
00:45:17,360 --> 00:45:22,080
another Linux system, you'll be able to read that ext four or that XFS or that

690
00:45:22,080 --> 00:45:26,520
ZFS drive, but you know, that, that for me is the real win of these kinds of

691
00:45:26,520 --> 00:45:30,120
systems rather than striping dates or it's individually readable on each drive.

692
00:45:30,120 --> 00:45:30,720
So, yeah.

693
00:45:30,720 --> 00:45:35,080
And there are certainly, I am in, and I try to make this very clear in the FAQ

694
00:45:35,080 --> 00:45:39,840
section for merger FS, uh, that this is not a substitute for certain

695
00:45:39,840 --> 00:45:41,400
workflows and workloads.

696
00:45:41,720 --> 00:45:47,080
Um, you know, raid has its place, uh, granted with very large hard drives,

697
00:45:47,080 --> 00:45:54,040
raid is becoming precarious, but that aside, um, merger FS is really meant for

698
00:45:54,040 --> 00:45:59,960
the casual user who has numerous random drives and they just want to have some

699
00:46:00,040 --> 00:46:08,480
kind of single view into their data or prosumer who knows the risk or is using

700
00:46:08,480 --> 00:46:13,840
some other tool like snap raid or has full backups or whatever, and is willing

701
00:46:13,840 --> 00:46:18,480
to take these trans, uh, these trade-offs between, okay, I can lose one drive and

702
00:46:18,480 --> 00:46:20,640
the rest of my system will continue to work just fine.

703
00:46:20,640 --> 00:46:22,640
And I don't have to worry about, you know, okay.

704
00:46:22,640 --> 00:46:24,840
If two drives go, oh, that sucks.

705
00:46:24,840 --> 00:46:28,200
I'm going to have to restore a bunch of data, or maybe I've used a path

706
00:46:28,200 --> 00:46:29,960
preservation policy.

707
00:46:29,960 --> 00:46:33,480
So I put all the data that I really don't care about on these two drives.

708
00:46:33,480 --> 00:46:35,320
So if they die, you know, so what?

709
00:46:35,320 --> 00:46:40,280
And I back up the other number of five drives, whereas on raid, you may, if you

710
00:46:40,280 --> 00:46:42,760
lose two drives, you know, all your data is gone.

711
00:46:43,240 --> 00:46:46,360
So it's, it's really just about offering another tool.

712
00:46:46,520 --> 00:46:52,440
And I try to be very clear about where merger FS falls flat and where it is,

713
00:46:52,440 --> 00:46:55,000
uh, more beneficial than some of these other technologies.

714
00:46:55,520 --> 00:47:02,440
And because it's so much more simplistic to use, um, you know, certain people try

715
00:47:02,440 --> 00:47:06,280
to make raid systems like, you know, uh, free NAS and un-raid, they try to make

716
00:47:06,280 --> 00:47:08,160
things extremely simple.

717
00:47:08,320 --> 00:47:10,080
I don't think it's safe for un-raid.

718
00:47:10,080 --> 00:47:12,440
I don't think it's the cost that is a barrier to people.

719
00:47:12,720 --> 00:47:17,560
I think it's, you know, it's closed source or it's just scarier, you know,

720
00:47:17,560 --> 00:47:19,160
there's just a lot more knobs to tweak.

721
00:47:19,200 --> 00:47:22,320
I mean, granted, there's a lot of knobs to tweak and merger FS, but out of

722
00:47:22,320 --> 00:47:23,800
the box, it just kind of works.

723
00:47:24,320 --> 00:47:25,920
And, um, yeah.

724
00:47:25,960 --> 00:47:30,560
So most people, I think understand that trade-off and, uh, it, for a lot of us,

725
00:47:30,560 --> 00:47:31,080
it's worth it.

726
00:47:31,600 --> 00:47:31,880
Yeah.

727
00:47:31,880 --> 00:47:35,840
But un-raid, uh, has a GUI and merger FS doesn't, so it must be better.

728
00:47:36,320 --> 00:47:37,720
Uh, you know, I'm trying to fix that.

729
00:47:37,800 --> 00:47:43,040
Uh, the problem is I'm, I'm very much a low level developer and web development

730
00:47:43,040 --> 00:47:50,320
makes me want to rip my eyes out and, uh, uh, no offense to the web people, but.

731
00:47:50,320 --> 00:47:52,480
The web people, the web people.

732
00:47:52,520 --> 00:47:52,960
I love it.

733
00:47:52,960 --> 00:47:53,680
The web people.

734
00:47:53,840 --> 00:48:01,800
Um, anyway, uh, so I, uh, I've looked into doing it myself and, uh, that's

735
00:48:01,800 --> 00:48:03,080
probably just not going to happen.

736
00:48:03,080 --> 00:48:07,440
I ideally in the same way that I try and make merger FS as simple as possible.

737
00:48:07,680 --> 00:48:11,960
I know the guys over at, uh, open media vault, they have, you know, their front

738
00:48:11,960 --> 00:48:16,160
end and they have a merger FS exclusively as their union file system

739
00:48:16,160 --> 00:48:18,280
option, which thank you for them.

740
00:48:18,280 --> 00:48:23,480
Uh, but you know, it, their UI is very simplistic and obviously you have to have

741
00:48:23,480 --> 00:48:26,320
the whole package and not everyone wants to use open media vault.

742
00:48:27,240 --> 00:48:32,000
Um, what I would like to be able to do is have a simple binary or.

743
00:48:32,560 --> 00:48:35,760
You know, script that someone can download that it's its own web server

744
00:48:36,080 --> 00:48:41,720
that you run as root, um, or give proper permissions to access the merger FS,

745
00:48:41,800 --> 00:48:46,440
um, control runtime API that would allow you to kind of just start up a web

746
00:48:46,440 --> 00:48:51,760
browser, go to, um, whatever machines IP address that you've launched it on and

747
00:48:51,760 --> 00:48:56,280
just kind of drag and drop drives that you have, you know, it'll query my, the

748
00:48:56,280 --> 00:49:00,000
way I imagine is with query all your drives, look at the ones that are probably

749
00:49:00,000 --> 00:49:04,440
your boot drive, separate them out from your data drives, and then give you click

750
00:49:04,440 --> 00:49:08,120
boxes or dropdowns for all the different options and for merger FS.

751
00:49:08,120 --> 00:49:12,720
And then maybe I think it would be nice after if I could get that done to add

752
00:49:12,720 --> 00:49:17,160
maybe some snap raid stuff since that's a very common tool to use with merger FS

753
00:49:17,160 --> 00:49:18,960
and anything else in that space.

754
00:49:19,360 --> 00:49:25,320
But, um, I do have a number of web, uh, developer friends, but none of

755
00:49:25,320 --> 00:49:27,160
who are in this space.

756
00:49:27,520 --> 00:49:33,720
So I've been meaning to go on like data hoarder and, and home lab or any of those

757
00:49:33,720 --> 00:49:38,600
subreddits and just throw out a, um, requests to see if anyone's interested.

758
00:49:39,240 --> 00:49:41,040
I wanted to say thank you very much for joining us.

759
00:49:41,040 --> 00:49:44,920
It's been a pleasure speaking with you and, uh, from the community as well.

760
00:49:44,920 --> 00:49:47,920
I know that many, many people are very grateful for all the work you've

761
00:49:47,920 --> 00:49:50,160
done on this, on this amazing tool.

762
00:49:50,720 --> 00:49:54,320
Um, do you have any way you'd like to send people to follow you like Twitter

763
00:49:54,320 --> 00:49:55,840
maybe, or plug your GitHub?

764
00:49:56,080 --> 00:49:59,640
Yeah, just, uh, you can find me.

765
00:49:59,640 --> 00:50:03,400
I mean, trap exit is, uh, so that username comes from Erlang.

766
00:50:03,400 --> 00:50:09,760
I was a big Erlang or am a big Erlang fan and, uh, kind of, uh, use that as my handle.

767
00:50:09,760 --> 00:50:14,200
It's you'll almost always find any, any service.

768
00:50:14,200 --> 00:50:16,040
If you look up trap exit, it's probably me.

769
00:50:16,040 --> 00:50:18,480
There's a few that aren't, but that's pretty rare.

770
00:50:18,720 --> 00:50:22,240
If you just go to github.com slash trap exit, you'll find all my stuff.

771
00:50:22,280 --> 00:50:25,000
And, uh, I work on all these tools regularly.

772
00:50:25,000 --> 00:50:29,440
You can find me on Reddit or email, whatever, like contact me

773
00:50:29,440 --> 00:50:30,760
any way you will, you wish.

774
00:50:30,800 --> 00:50:34,040
I have a discord as well for those who want to chat about stuff.

775
00:50:34,520 --> 00:50:36,960
Um, yeah, I'm very open.

776
00:50:37,240 --> 00:50:38,400
Feel free to contact me.

777
00:50:38,400 --> 00:50:40,080
Contact me any which way.

778
00:50:40,600 --> 00:50:41,400
Well, thank you very much.

779
00:50:41,400 --> 00:51:08,480
Thank you for having me.


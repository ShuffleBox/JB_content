Well, hello, everyone. Welcome to Brunch with Brent. Joining me today is Stuart Langridge.
Stuart, how are you? And thank you so much for joining me.
Hi, Brent. And thank you very much for inviting me.
Anytime. Some may know you from co-hosting the podcast Bad Voltage. I think many will
recognize your voice. It's one of a kind. And I know for sure that your laughter is
something that always gets to me. So that's appreciated. Tell me a little bit about Bad
Voltage. What is it? How does it start for you? And where's it going, maybe?
Okay, so Bad Voltage is a technology podcast. The intention is that it's about things that
the hosts find interesting. The hosts now are myself, John O'Bacon, who people might
have heard of as the, he was a community manager of Ubuntu. Then he worked for XPrize and GitHub.
Now he runs John O'Bacon Consulting. And Jeremy Garcia, who runs Linux Questions and has been
around forever. He used to work for himself. And the three of us do the podcast once a
fortnight. And the intention, as I say, is that it's a general technology focus. It tends
to skew a little bit towards the open source end of the universe. But that's mostly because
the three of us are quite interested in that area. So you'll hear the word Linux turn up
on it more than you might do on, say, The Verge podcast. But the key point here is that's
not what it's about. We occasionally get people who will show up and complain that we're not
covering the release of a distribution or something. And we're like, we're not a Linux
podcast. We're not an open source podcast. The fact that we came out of that area, I
mean, perfect example of someone else who came out of that area. I used to go to the
GNOME summits, the GUARDEC. This is the GNOME User and Developer Summit, which happens every
year. And one of the first people I met at one of those back in 2004, 2005, was a chap
called Nat Friedman, who was working on GNOME. And now he's CEO of GitHub. So not everyone
who necessarily starts in the free software arena ends up in that place. And having a
wider arena, I think, is interesting. It gives us the opportunity to talk about things that
affect the technology world from a bigger perspective and things in technology that
affect the wider world more generally. One of the nice things about doing Bad Voltage
as well is that we get to do live shows. So we'll do a stage performance, a live performance
of the show. We've done those six or seven times now, I think. We've done most of them
at scale, the Southern California Linux Expo, which I got back from, what, two weeks ago,
I think. And we had an absolute whale of a time. The live show is always brilliant.
That's lovely.
Yeah. One of the things we've been talking about is maybe doing more live shows and shaking
up the format a little bit. But that's still under discussion. So I'm not going to reveal
the discussions just yet. But if you're interested in what we might be doing, then listen to
the show.
What I appreciate about the show, actually, is its flexibility in content. Because the
three of you clearly have experiences and a depth of experience in the kind of topics
that the Linux-y and open source-y folk like us tend to appreciate. But some topics that
have come up have been questions like, what does privacy mean in the current era? Each
perspective has been explored, which I appreciate. It's like, well, there's the idealistic side
of it, but also the pragmatic side of it. And just the discussions that you each had
there I thought was really rich. So thanks for putting that out there.
Thank you. I mean, that's obviously the intention behind these things is to at least attempt
to look at a problem somewhat pragmatically, somewhat idealistically. I mean, in general,
I probably end up being the most idealistic of the three of us, but it depends quite dramatically
on what the topic is. Jeremy's the most knowledgeable and Jono's the most fervent. But Jono would
say he was the most practical. I would say I was the most knowledgeable and I'd be wrong.
But I think that exactly the goal is to attempt to look at big picture things. I mean, we've
done quite a lot of looking at privacy, so we're probably going to move on from that
now. But we have spent quite some time looking at various different angles of things like
facial recognition and big companies gathering our data and stuff like that. And obviously,
I have a certain amount of interest in this kind of thing myself. I've spoken at conferences
about it and things like that. So it's attempting to take that half a step back and look at
the bigger picture. But it might be the bigger picture around something relatively small.
One of the shows we did recently was essentially a full show review of an email client called
Superhuman.
This was a fascinating episode.
It turned out even more interesting than I thought it would, I think, because it was
a review in the New York review of books style, a review where you spend the first 30 seconds
talking about the product and then the rest of it essentially talking about something
vaguely related to it in order to give you an excuse to talk about the bigger picture
thing. So we segued quite relatively quickly into the bigger picture of email clients in
general and whether email is important and user experience and user interface and how
Gmail was streets ahead of the competition. And now it isn't, but no one else has really
stepped up to take that play and maybe Superhuman are it. Is it a good idea to trust your email
to a company like this? So it's all kind of larger thoughts prompted by a particular thing.
And again, that was interesting because we got some feedback from people saying, why
would you spend the whole time talking about a proprietary email client? And we were like,
why wouldn't we? It's an interesting product if you're an email power user.
Jono certainly loves it to bits. I don't get anywhere near enough email to warrant this
kind of thing. But as with everything else, I mean, we reviewed a Kindle one, say, you
know, which was 10 years old at the time. But the whole point is that it's a stepping
stone into a larger question. It's very rare that we talk about a thing just for the sake
of the thing itself.
And no product is isolated. It's always in an environment interacting with all sorts
of other things. So it warrants that exploration, I think. And that's often missed.
There is almost nothing I own, which, as you say, I use in isolation. There isn't anything
like that. Everything has a cultural context, a technological context. You might think of
it as compatibility, but it's not technological compatibility. It's not, are there drivers
for this in my Ubuntu kernel? It's more, is it compatible with the way I live the rest
of my life? There's no point in buying a device to control your smart home if you have no
intention of buying any smart home light bulbs.
Right.
And similarly, there's not a lot of point in buying one smart light bulb for your house
because what's the point, you know? So if you've decided to invest yourself in a particular
area of technology, you've got to think, does all this stuff fit together? Does it fit in
with my life? What am I going to do when new people walk into the house? That kind of thing.
So that, I think, that cultural context of how does it fit into my life? How does it
fit into the larger scheme of technology as a whole? Is this product an example of something
which is taking us in a direction that we want to go in or a direction that we don't
want to go in? Is anyone else doing it better? That, to me, is almost more interesting than
the thing itself.
Which is why spending an episode on a proprietary email service, while that seems like you spent
the entire episode simply on that product, that's not true at all, right? So there's
a real value in exploring kind of what's rubbing shoulders with that email service because
obviously it got there somehow and it's necessarily a cultural indicator.
That's precisely the plan. I mean, certainly I remember when Gmail first came out, everyone
was super duper impressed with it because it was fast and it basically never got spam
wrong and it was easy to use. And that was great. But as far as I can tell since then,
since 2012 or something, it's kind of stagnated. And there's been ample opportunity. People
say, well, why don't you use Thunderbird or whatever? Yeah, okay. But Thunderbird is exactly
the same now as it was in 2008.
Yeah, it really is.
There's a whole bunch of space for people to innovate in the way they handle my email.
This is not about innovating in what email is because companies tend to think, hey, let's
innovate in email by getting rid of all the things that make email good. Like the fact
that it's free and I can run my own server. But the last big change in the way I think
email was handled was Gmail inventing conversations. And you forget, if you go back to a non-Gmail
way of looking at your mail, you forget that conversations aren't part of how email works.
They're a Gmail thing. And still to this day, as far as I can tell, no one's actually caught
up with that. And that was nearly 10 years ago. So the idea that someone is going to
say, let's find a way of handling email, which is more in tune with the way email works today,
I think is really interesting. One of the things that has, one of the accusations I
should say, that's often been levelled at the open source community is that we're towel
light chasers. That there's no innovation going on. That all we know how to do is wait
till a proprietary product comes along and then clone it. Now, I don't think that's true.
Part of the reason I don't think it's true is that every time someone comes up with a
new WYSIWYG proprietary thing, someone is always able to point to a half-finished, half-written
GTK app from 2006, which did basically what this was talking about and say, see, no, we
invented it first. What we are not good at as a community, in my opinion, is actually
doing the final mile. Turning a thing from a project into a product, turning a thing
from a proof of concept into something that real people can use. And they can be real
people like me. They don't have to be real people like my family, who aren't very technological
at all. I've got no problem if they're real people who need a bit of technical knowledge,
but I would like to see us have the confidence in our innovations. I mean, places where we
do lead the world, if you look at stuff the Linux kernel does with things like containers
and so on, they said, okay, we think it's a good idea to enable this concept of containers.
And they created the cloud, right? People were doing VMs before, but this stuff didn't
really take off until the Linux container stuff really got started. And so some people
in the kernel team go, we're going to invent these things called containers to enable you
to namespace and sandbox a Linux installation on top of another Linux installation. Created
the cloud, which now dominates the whole technology industry. That's what happens when you get
something right. And it's something that happened in open source first. And for everyone who
says, I don't understand why YouTube is so interesting. I invented YouTube by sketching
the answer on the back of a cigarette packet in 2004. The answer is because the idea of
going, I know what I'll do. I'll let people upload video and then download it to their
own computers. That's not the revelation. Ideas are not the hard bit. Execution is the
hard bit. Delivery is the hard bit. And I'd love to see us doing more of that.
I like how you mentioned that final mile because that's so true. It feels like, well, maybe
I'll put a question to you. Do you think that that final mile is such a challenge because
of some of the economic realities of open source projects? Like creating a stereotypical
successful business around a project isn't necessarily in line with open source ideals.
Would you agree with that? Or what do you think?
Oh, now there's a contentious opinion. I don't think that making money is inimical to open
source ideals. I think they are perfectly compatible. Some of the reason I think, and
this discussion has come up quite a lot recently, the idea about making a Linux app rather than
making another distribution. What we don't see is a lot of apps coming out. And that's
disappointing to me at least. And I think some of the reason for that is that that last
mile is not very well documented. So people think that, well, that can't be that hard.
But actually, once you've finished writing an app which does something, the amount of
work it takes to go from there to getting it into someone's hands in a delightful state
is just as much work as building the thing was in the first place. So if you say, well,
okay, I've written the code, now it's on GitHub, just download it and install it. You've only
actually done half the work at that point, right? You've got to sit down and design the
icons for it and get them drawn. And you've got to think about the UI and make sure that
everything's spaced correctly, everything's laid out correctly. And you've got to make
sure that right to left text works. And you've got to make sure that you can paste emojis
into your app and it doesn't crash. And you've got to give it a good name. And you've got
to give it a good strap line. And you've got to upload it to one of two or three different
stores depending on who you go with. And then after you've done all that, you've got to
get the word out to people. And marketing is really hard. And our community has a habit
of sneering at marketeers. And there's a small amount of truth in this. Because there are
certainly plenty of people, or plenty of products, I should say, which are basically worthless
but got to be popular because they had good marketing. But, and this is important, not
everything is like that. Yes, you can occasionally make something popular by having a really
strong marketing team, even if the thing itself doesn't deserve popularity. Fine, we can sneer
at celebrities or Dasani water all we like. But the flip side of that is that building
a better mousetrap doesn't work either. The fact that you have better technology does
not ensure that you will be successful. And you do have to do all the other work as well.
The fact is a thing needs to be, or it should be, beautiful and available and viable, as
well as working. And I'd very much like to see the focus of the open source community
shift to making that kind of thing more possible.
I wonder if it's because the open source, you know, our open source community is filled
with, or seemingly filled with generally engineers, and that the slow trickle of people coming
to it now, perhaps are those who are strong in design and marketing, and that maybe there's
a void there in the teams and collaborations that is only now getting filled.
I would certainly agree. Yeah, the history is that way. I've had a bunch of really interesting
conversations about this with Alan Puck, who I know you've already had on, who you've already
had brunch with.
Yes.
One of the things which is my opinion on this, which not everybody shares, is that, yes,
as we came primarily from an engineering background as a community, we tend to overweight engineering
concerns and underweight other things. The flip side of that is historically, if you
look at people who used Macs, they came out of a very designer focused community, which
meant that you got beautiful apps and that kind of thing, which is great. But every now
and again, you'll see an app which converts Celsius to Fahrenheit, and it's a beautiful
app. And someone downloads this app and then runs it on the desktop. And I think to myself,
but that's like one line in a terminal.
Now, there are a couple of things here. The first one is, yes, it's one line for someone
like me. It's not a tall one line for, say, my dad. And that's critically important. There
is the accusation, again, leveled at our community that we tend to be, just open a terminal and
do everything and real people can't do this. And that was historically true. Unfortunately,
it still is true for some parts of our community. I'll give you an example. If I say to someone,
hey, install this piece of software. So, do that by opening a bunch of software center
and then searching for the name of it and then clicking search, you know, like real
people do. You'll get a bunch of feedback saying, why don't you just tell people to
open a terminal and type sudo apt install. Actually, what they'll say is sudo apt get
install, which annoys me. Slight diversion. If you're getting if people are kicking to
use commands, at least use the up-to-date ones rather than the ones from 2006. But anyway,
ignore that. I mean, these days, it might be sudo snap install or sudo flat pack install.
Anyway, there is a certain amount of power in the command line stuff. You shouldn't demand
that people use it. But equally, power users can find this kind of thing more important.
To give you an example, and this harks back slightly to the superhuman thing we were talking
about a moment ago. One of the things that superhuman have done, their email client,
is to give you the ability to run almost any command by giving you a little pop up command
palette, they call it. This is very similar to the command palette that you get in Visual
Studio Code, for example, the editor or Sublime Text, where anything the editor is capable
of doing is available with a little summonable command palette, which gives you basically
a box you can type in to search for a command it can run. Which means that the way a bunch
of these power user tools have managed to make them more suitable to power users here
in 2020 is to put a command line back in. Which is, you know, great. But I think it's
interesting that there is that value in this stuff. But equally, and more importantly,
they're power user tools. So they're not necessarily suitable for an ordinary person. But, and
I'd be interested in your thoughts on this, actually. If you asked a whole bunch of people,
how do I convert 71 Fahrenheit to centigrade? I think what they'd do is they'd open a browser
and type 71 Fahrenheit centigrade into Google.
Yes.
And as far as I can tell, that's a command line command, right? You get a box to type
things into, and you type commands into it in a particular format, and it gives you the
answer. I mean, conceptually, that's quite a lot more like a command line than it is
like a graphical application, isn't it?
Yeah.
But why have we not managed to seize that? Why have we, an engineering led culture, which
Google is as well, why do they get credit for doing that, whereas our community are
decried for occasionally wanting the same thing? So I'd be interested in your thoughts
on that.
Very curious juxtaposition there. I love it. I think what Google got right, and why someone
like me goes to, I don't use Google very much, but why we go to search engines to find such
simple information like that, is that they are a true success in converting a variety
of English or any language really into the answer that we're actually looking for. So
you don't need to be as precise as you would on, say, a classic command line to get the
answer you're looking for. So if you open a command line for any regular user, it's
daunting, I think, for two reasons. One, because you need to be so exact, otherwise the possibility
of screwing something up is quite high, but also that the discoverability in most terminals
is quite awful. You can't just really play easily to discover what you're looking for,
where looking at a search engine, it's very difficult to do anything wrong in a search
engine, and yet you can just play and try things until you get it right, which maybe
we can learn something from that.
I wholeheartedly agree with this, to the point where I went back in time and did a talk about
this at about 10 different conferences last year. So I have talked with UX of text, and
it's about precisely this, the user experience of text interfaces, because two other places
where we're seeing textual interfaces get used outside a terminal and a Google search
box or a DuckDuckGo search box or start page search box, wherever it is you like, two other
places where we see a textual interface used are chat bots on Facebook Messenger or WhatsApp
or Telegram or Discord or whatever it is you use, and secondly, voice assistants. So Google
Home or the Amazon Echo, and those things are essentially textual interfaces. Yes, you
are speaking out loud to them, but you are doing so with words, as opposed to a GUI,
where you're essentially identifying a picture and clicking on it. You point and grunt like
a caveman. One of the things that led us out of caves and created modern society was language,
and the idea that language, that text has a user interface and has user experience and
needs to be optimized is something which the technology community as a whole, not just
the open source, but the whole technology community has slighted rather over the last
40 or 50 years. But there are people who are very good at this, and they are authors and
poets and writers. There's an example in a Neal Stephenson book, Snow Crash, I think
it was, about a woman in the book, and she gives an example of being at a dinner with
her grandmother, and she was, I think, recently pregnant or something along those lines. And
just by saying that, she never mentioned it at all, and her grandmother, wise old woman,
picked up on the nuances of her expression and the kinds of things she was saying and
deduced what had happened without ever having been told. And it's that kind of nuance that
I think is interesting. I'll give you an example. Who's your favorite fiction author?
Hmm. The book that hit me the most that comes to mind first in 1984.
That's a good example. Orwell's a very good example of this, to the point where he wrote
essays about word choice and how to think about things. But that's the thing. If you
think about a book that you've liked, if an author is good at what they do, they can use
one or two words in a way that puts a whole picture into your head, and in a way in which,
in theory, you could use a synonym for any one of those words, and the sentence would
still mean the same thing, but it wouldn't give the same impression. It wouldn't give
you that sense of immersion into the world they're describing. I mean, the holy grail
of this kind of thing is Patrick Rothfuss, for people who are fantasy readers like I
am, who spends an absurd amount of time over word choice and things like that, precisely
because he's hugely aware of the impressions that each individual word gives. To give you
a Rothfuss example, he's describing in The Wise Man's Fear, which is one of his books,
there's a kind of an underground complex, and there's a woman who lives in this underground
complex, and she's a bit weird. Lives down there on her own, doesn't like talking to
people, but she's named all the different areas of this, which is obviously some kind
of ancient, abandoned catacomb with bits of machinery in it and so on.
It sounds lovely.
Yeah, well, you know, I don't think I want to live in it, but then I'm not hour-y. She's
named all the different rooms and different areas of this complex, and they're all named
with things which sound like words, but aren't actually words we know. So a bit is called
downings, and a bit is called cricklet, and one bit is called billows. And each of these
things are evocative in a particular way. If I said to you the word cricklet, it's not
a word that necessarily means something to you, because it's not a word, right?
Yeah, just by hearing it, I can approach perhaps what it might look or feel like.
Yes.
And that's simply with language, which is exactly, I think, your point.
And that is exactly precisely my point. And that's the kind of thing that I'd like to
see people doing more of, thinking about the user experience of text. Think of the amount
of care and attention that goes into a graphic application or a website from a designer.
They'll spend days, weeks, considering things like the flow of the text and how much space
there is in between each individual thing and exactly how rounded the corners should
be. And those people who are listening to this, who have a history in development and
working with design, will probably be aware of the frustration when you build something
and the designer says, but that's not right, because it's really important that these things
are 14 pixels apart, and you've got them 16 pixels apart, and you want to just say, why
does it matter? But the point is it does matter because they're the designers and they understand
this stuff and developers don't as much. So you take their word for it. But that level
of care and attention to detail is just as applicable to text. And that happens in, I
think, two ways. The first one is when you have a conversation with a piece of software,
whether that's an Amazon Echo, or it's a chatbot, or it's, you know, the shell in your terminal,
or it's the Google search box. We need to work out a way of guiding people, as developers,
we need to work out a way of guiding people towards the correct answer without making
it their fault that they don't have the correct answer. Now the terminal, precisely as you
say, if you get something even a tiny bit wrong, it just put in syntax error, get lost.
Computer says no.
Chastises you for wanting to learn or not knowing.
Yeah. And as you say, Google search box, it's almost impossible to do something wrong. Back
when I was a child here in the UK, you had eight bit computers. So the Acorn Electron
and the Single S Spectrum and the Corridor 64 and so on. I know there are different ones
in other countries. But the principle back then, you got a machine, you turned it on,
it booted immediately because all the stuff was in ROM. And then you had a command line.
And that command line was basically a way of entering basic commands. But one of the
things that stuck in my head is, I think this was in the manual, start programming with
the Electron, which is the book you got with the Acorn Electron, which was an extremely
naughty eight bit computer in about 1983. And it said very near the beginning, you can
type anything you want into this, you will not damage your computer. It gave you the
freedom to play, to explore. You think, well, the worst that can happen is that it just
says no. Now admittedly, it had that very command line experience of just printing syntax
error or no or mistake. If you did anything other than exactly what you needed to, which
is why computers didn't take off as much in the 80s as they have done now. I mean, yes,
it's fine. They were popular then. But now everyone on earth has a computer in their
pocket. Was not the case in 1984. But I think putting that level of care and attention into
how to guide people through a conversation in such a way that they feel empowered the
whole time, they feel they're making progress the whole time, but still having them end
up where you, the developer, want them to be. That's a real skill. To take a real world
analogy to this, it's like those of us who've worked in a job will know the experience of
managing your manager. You want your manager to do something, but you can't command them
to do it because they're your boss and you aren't. How would you guide your manager into
ending up at the decision you would like them to make without ever being able to just command
it so? And that skill, which some people are unaware even exists, some people are not very
good at, and some people are spectacularly brilliant at. That skill is one of the skills
that the developers of a user interface need, and especially a textual user interface, whether
that's the Google search box or Amazon Echo. I'm carefully saying Amazon Echo, not the
name of it, because if I say the name of it, then my one will wake up. I don't want it
to.
We don't want that.
We do not.
It's the skill of very gently nudging users into their own perceived successful outcome,
even if you don't know what that outcome is going to be at the onset, which is no small
thing.
Imagine a butler in Victorian England or a lieutenant in the army. Are you a lieutenant
or a lieutenant?
Canadian. Yes. You know, I've heard both. Some military folk is lieutenant, but I've
heard lieutenant repeatedly. So I think, you know, we can't decide whether we're British
or American.
I shall strike one tiny blow for the diminishing island of Albion and say lieutenant for now,
but feel free to correct it in your heads, Americans. So imagine the skill of a lieutenant
not being able to say, no, sir, that's a terrible idea. There's a way of saying, okay, sir,
which gives the impression you really shouldn't do this without actually saying so. And that
sort of vibe, that sort of skill, I think, is really important. So careful word choice,
understanding how to manage your manager, because in this environment, your Amazon Echo
or the Facebook chat bot that you're talking to, to order dinner or pay your taxes or whatever,
it's operating as essentially a butler, a personal assistant, something which is attempting
to guide you into, as you said, to the destination that you want to reach. And this feels to
me like a skill that we, the open source community, ought to be all right at, because we've always
been believers in the power of text. We have, as a community, up until relatively recently
spent all our time sneering at the idea of people who thought the text was a bad thing.
So maybe this is something where we could, as a community, get out ahead of this. But
it does require us to let go of this idea that you've either got it right, or you need
to learn more. The bash command line, not a friendly user interface, exactly as you
said.
And yet the default in many areas.
Yeah, absolutely. And we've got people working on the graphical UI and so on. And I think
a lot of the, or at least a decent proportion of the accusations leveled at our desktops,
that you spend all your time opening a terminal, they are not the truth. They're being leveled
at us by people who've not actually sat down and used Ubuntu, for example, or elementary
or whatever it is you prefer. But I'd like to see us be better at things. And one of
the areas where I do think we ought to be able to steal a march on this is with something
like the Echo, or with chatbots, with textual interfaces, at least partially because we're
not attempting to overcome a massive entrenched victory on someone else's part. Making the
Linux desktop be popular, even if it was literally the best thing that ever existed, will be
hard because we're at 2% and the rest of the market is 98%. Whereas the Echo or Google
Home is essentially untouched ground. There's no one there with any entrenched advantage
other than Amazon and Google themselves, of course. And I'm not talking about building
an alternative to the Echo, I'm talking about building on the Echo as a platform. So this
is not what Mycroft are doing. Mycroft are working away at this and I have one on my
desk and well done to them. But the thing that they don't have, and Amazon do have,
is a billion customers already. But I see no reason why we can't use existing platforms
and then build software on top of them, a way that really exhibits the skills that we
as a community should have. I mean, think about it this way, right? A decent textual
interface needs to be good at two things, doing text and being the underdog and getting
stuff done anyway. And if there's anything more suited to the Linux community, I don't
know what it is. It seems absolutely ideal.
Well, perhaps what you're saying is we've been good at this and yet we've been holding
on to old ideals around these technologies. And so we've got to progress and move on and
use those skills and improve them to be more appropriate for modern times.
This is another one of my people don't necessarily agree with this thought. But I am of the opinion
that our community's worst enemy is itself. There is a reasonable proportion of the community
who are, first of all, louder than everybody else. But secondly, consider it more important
that their rivals in open source lose than the open source as a whole wins. There are
people out there who would rather see open source not become a success if that meant
that Ubuntu were the people who'd done it. They'd rather say, no, we'd rather open source
wasn't a success than have it be successful through a distribution or a piece of software
or a person who they personally don't like.
And I find it infuriating. I mean, we're not alone in this. Other people who feel like
this are, for example, phone manufacturers or phone carriers. If you are T-Mobile, apparently
doing something which means that you win and Vodafone wins and Sprint wins and AT&T wins
is not that important. You're OK with doing things where T-Mobile wins and everyone else
loses.
I'll give you another example. Think about storage formats. You know how Sony every five
minutes would bring out a brand new format which is incompatible with everything else?
And that's because businesses tend to have this thought where they go, we've invented
a new thing. We'd like it to be the massively dominant monopolistic thing in whatever field
it's in because then everyone on Earth buys one and we get $1 every time they do that.
And it normally takes about five years for the four or five different competitors in
that market to say, you know what, maybe we should start cooperating after all. And why
people don't learn the lesson from this and start cooperating on day one because they're
going to eventually anyway escapes me, but they don't.
So this is something which I think our community is guilty of as well. That for everyone who
says, OK, let's build a great new graphical interface that people said, oh, that's because
you hate the command line or why are you doing this in GTK? It's the worst. Or why are we
not building this in Rust? Or Gnome Shell uses JavaScript or KDE's got too many clocks
or whatever.
And it's just, I mean, I hate to sound trite about this, but if you can't find anything
nice to say, don't say anything. Sounds like something one's grandmother might say, but
there's a certain amount of truth in it. Not necessarily because your objection isn't viable,
but because it degrades the viability of open source as a whole in the eyes of the mainstream.
It's a negative externality. So for every time that someone in open source attempts
to do something outreaching and they're clawed down by other people in open source, people
in the outside world don't look at this and go, great, there's a good Darwinian process
going on there and I'll definitely choose whichever one wins. They just go, what the
hell is this? Every time one of these open source things comes up, it just seems to be
an enormous bun fight. I just don't want to be involved in that. And then they go and
buy Windows 10.
Because I mean, yeah, Microsoft might have a bunch of problems, but what they don't do
is fight with themselves about which one of their computers you should buy. I think for
those people who've read Unseen Academicals by Terry Pratchett, this is a crab bucket
thing, where if you've got a bucket full of crabs and one crab tries to crawl out of the
bucket, the other crabs will all pull it down.
What a terrible situation, really.
I know. As far as I can tell, the success we have achieved, we have achieved despite
ourselves or at least despite some of our community. And it makes me sad because I mean,
I was about to say, I've dedicated my life to open source, which sounds way more like
I want to be a martyr than I actually am. And I haven't, because at least some of my
life is dedicated to getting paid, which comes back to a point you made earlier. But I've
certainly spent a lot of my life building, releasing, working with open source software.
I worked for Canonical for five years. I release software to this day. I constantly agitate
for the web to be and remain open. So I have a certain amount of skin in this game, right?
And I'd very much like to see us and our mindset become more successful. But I'd like to see
it become more successful along with the ideals behind it. I mean, if you look at the technology
world outside strictly open source things, most of it is open source. We won that battle.
If you go looking for programmers now, they're all doing JavaScript, right? JavaScript itself
is open source. NPM is the library of JavaScript libraries, the repository of JavaScript libraries,
and that's all open source. People routinely publish their source code on GitHub. We are
now in a world which was unimaginable 20 years ago, where most of the software you need to
use most of the time. You could see the source code if you wanted to. That's great. We won,
you know, but no one seems to be taking a victory lap about that because the last 10%
isn't done.
Are you saying that perhaps many of us and perhaps I should say those that are causing
us issues in our own community are fighting a battle that we've already won? So it's an
outdated mission or effort to try to win that over?
Some people are. Not that many, but there's still enough of them. The sort of people who
still put a dollar sign in the word Microsoft are fighting a battle that was over years
ago. I mean, I don't know whether we won or we lost. It's like asking who won the Cold
War, right?
Nobody did.
Exactly. Either nobody did or everybody did. Difficult question to answer, but the point
is it doesn't matter. Stop litigating the old battles. So yes, since I mentioned Microsoft,
let's take them as an example. They now own GitHub, who now own NPM as of about two days
ago, so being topical. They also produce VS Code, which came from nowhere to be as far
as I can tell the most popular editor around. They're doing a lot of open source stuff more
generally as yours become quite dominant and a lot of the work they're doing there is open.
And there are certainly reasons to take a step back and say, maybe we shouldn't just
stick all our eggs in one basket, especially a basket with the Microsoft logo on it. But
I think that's different from just flat up mistrusting them the whole time without any
way of them proving things to be different. If you find someone who says Microsoft shouldn't
have all this stuff because they're Microsoft and they embrace extended extinguished and
they think Linux is a cancer, you say, well, okay, they did 18 years ago. I get that, right?
What could they do today to prove they're no longer like that? And if the answer is
nothing, then you're not making a rational argument. If the answer is something, then
I mean, for me, it took a while to change this and I still don't fully trust their company
and say, well, I don't fully trust Apple or I don't fully trust Google. You said yourself,
you don't use Google very much because you've presumably taken a stand on this front. And
that's cool. But there are still products they do that I find useful. There are moves
they make that I'm prepared to treat with an open mind. And if there is a list of things
that would convince that what Microsoft are doing is becoming a better company, I'm sure
that some of the things on that list have already been ticked off.
Yeah.
Well, at least one would hope so.
I agree completely. And what more could they do? You know, I think they have been fairly
good stewards of open source in the last few years. And I don't know if you could come
up with a reasonable list and I'd love to hear it if there is one, but a reasonable
list of what they could do better if you kind of look at it from an objective perspective.
Yeah. I mean, I think the key word there is reasonable because there'll be some people
who go, okay, thing number one on the list, open source windows.
But what would that give? That's the question.
Yeah. I mean, it helped wind people quite a lot, I imagine. And there certainly are
a whole bunch of things that the company as a whole do, which I don't particularly like
to this day. And Microsoft is a very big church, right? And certainly some parts of the business
have moved in our direction quite a lot more than others. Try and get open source stuff
working on the Xbox, for example.
Okay.
You know, when Windows Phone was around, attempting to get anybody to even tell you how to send
things to it by USB was close to impossible. But at least there are some parts of the business
who are doing that. And what I want to see is culture change. But I think there is some
value in our community deciding what it is they want to stand for. Because if what you
want to stand for is that you won't work with anything unless it's all completely open source
and you don't like the phone you've got because it has a non-free firmware to run the baseband
control or whatever, then okay, you're making a stand for that and that's great. But it's
fundamentally incompatible with being mainstream. And if you're okay with that, then I'm fine
with that too. But if someone is interested in getting into the mainstream, stop throwing
stones at them because they're pursuing a different goal.
And both are honorable.
Yeah, absolutely. There's no problem with doing either of them. But it feels like, I
don't know, what does it feel like? It's like seeing that the people next door are cooking
a curry and then shouting at them because they're not cooking Chinese food or fish and
chips. And you say, well, there's not one that's any better than any other. I just happen
to fancy that this evening. That's what I wanted. The fact that you happen to prefer
this other food. I mean, that almost captures the absurdity of it to my mind that there's
criticism because they're failing to meet up to goals that the person doing it doesn't
have in the first place.
Well, it's taking someone else's project, ignoring perhaps their intentions for that
project and then throwing it into your own system with your own objectives and seeing
how it doesn't align. But that's completely unfair because it was never designed to align
with your objectives. It was designed to align with theirs.
Yeah, absolutely correct. I completely agree with that.
So Stuart, I would say typically I spend the first part of this conversation getting to
know you a little bit, but we took a single topic and extrapolated it in about 20 different
fascinating angles. And so thank you for that. To give some transparency in my process a
little bit, I usually have this little page in front of me. I talked with Chris on his
podcast, The Chris Last Cast, a bit about my process. But I just have a page here that
I write some notes on for us to maybe dive into during the conversation. And I've crossed
off exactly one out of a list of maybe 20. But I loved all of those directions that we
went in. I think I'm going to need to definitely have you on a few other times to check off
some more items on this list.
I'm fine with that.
Lovely. I will put a question to you and maybe it will hit on some points that we discussed
earlier. Maybe it'll even be a manifesto of sorts. But is there something that you want
to put out to the community? Something you want them to think about? Something you want
them to try or go see or put their energy into?
I have been thinking about this a bit.
Perhaps you have a list.
Well, I kind of do have a list. But I think to be honest with you, the importance of any
list I might have is probably obviated at the moment by the fact that the world is in
a massive crisis. And one of the things I've seen, I've been looking into recently and
hearing people talk about is the number of people who are going to end up disenfranchised
and suffering by the fact that we have a world in lockdown through essentially no fault of
their own. I mean, and I have to put up my hand declare a certain amount of self-interest
here. I work for myself, right? We are currently in a position where because everything's very
uncertain and everyone's very worried and no one really knows what's going on. There
aren't that many people who are saying, you know what we should do? Start this new project
that Man Language was pitching for. But there are an awful lot of people in my position
who are going to increasingly find it difficult to find work and so on. I mean, I have the
advantage that I do a few different things. So I consultant CTO kind of thing, but I also
do development work and I also write for a living. So I'm shading myself more towards
the writing end of things for the moment, because that's easier to convince people that
you want me to write about this thing for you. Here it is. But there are a lot of people
both in our community and out there in the world who run a restaurant or who run a pub
or who run a flower shop who are going to struggle an awful lot. I don't think anyone
knows how long this whole coronavirus crisis is going to go on, but the bite is really
going to start to set in. We're currently about, well, it depends on where you are in
the world, but here in the UK, things went from, oh, blimey, I wonder if the coronavirus
is going to be a problem to, oh my goodness, no one leaves the house in the space of about
three days and that was last weekend. So we're currently about four days into this and it
might last months. So basically what I'd like to ask people to do is kind of be kind. We
as a community, we have a reasonably high proportion of people who work on their own
or live on their own, whose primary contact with people is maybe over the internet. We
have a reasonably high proportion of people who are introverted, who maybe feel more anxious
than others. And it would be lovely to see the depths of love that I've experienced within
our community actually coming out in this fashion. Because for all that I complained
about loud vocal complainy elements of our community earlier, most of it's lovely. I
wouldn't have spent 20, 25 years doing this stuff if it wasn't for the warm embrace of
the community. And one of the things that we are good at, in theory at least, is pulling
together when there are problems, having people's back. And I'd like to see people thinking
of ways to make that happen. So small example, did you see the thing about the 3D printed
respirator valves in Italy?
No, but tell me more. I'm very curious.
So they are having difficulty getting enough respirators. I don't understand the medical
details here. So if I'm explaining this slightly wrong, cut me some slack, medical engineers.
But they need more respirators for people in hospital and they didn't have enough. And
one of the things that we're short on is a particular kind of a valve. So a couple of
people from, as far as I can tell, it's the local maker space, took a 3D printer into
a hospital and then measured one of the valves they already had and then 3D printed a replica
and went, here you go, try it out. And it worked. And so now the hospital's got loads
of valves. Now, there are a bunch of legal issues around this and apparently the people
who make the valves are suing them for it, which we're not going to get into. And obviously
this is a temporary stop gap. And the people who make the real things, you know, are probably
making them to high tolerances and they'll last 10 years rather than a 3D printed one,
which will last a week. But equally, probably a good idea to have a shedload of respirator
valves more than you need, even if they do only last a week because we can 3D print more.
And that kind of thing, I think, is something we're just cutting through the red tape and
being direct, a direct person to person connection. We're good at interoperating with people over
the internet. We're good at seeing places for technology to help humanity. And we talk
a big game about how that's what open source is good at and it's what proprietary companies
are not good at because all they want is money. So this, I think, is our chance to put it
into practice. So look at how your software can help people or how you might build software
that could help people. Check out the members of our community who might need your help,
who might not want to reach out, but would really appreciate just a note saying, hey,
everything okay? You know, I haven't heard from you for a couple of days. Just want to
make sure you stay connected. This is a chance, I think, to demonstrate that we're decent
people, that the underlying ethos of our community about supporting everyone, about making sure
that everyone is included. This is our chance to do it for real. And frankly, the world
needs it. So much as I'd like to say, well, here's this bit of software I've written,
you should all go and download it. I think there are more important things on everyone's
minds and now is maybe the time to put those into practice.
I think you're right. It's our time to shine. So I will put something out there. If anyone
wants to reach out to me and say hi at any point, please do. You can find me either in
the Jupiter Broadcasting Telegram group, which I'll link to. You can find me on Twitter,
which I'll also link to. And just say hi if you want to have a five-minute conversation
or something like that. That's my little gift out there in the world. Stuart, do you have
a place where people can reach you or a place where people can find a community around bad
voltage or otherwise?
Certainly. First of all, I will say exactly the same thing that Brent did. If you just
want to chat to me, check in, that's fine. Just give me a shout, no problem. Places you
can find me, badvoltage is at badvoltage.org and you can get the podcast there. Cool. Download
it, listen to it, you'll like it. Me personally, probably the best couple of places to get
hold of me are either on Twitter where I'm at, S-I-L, SugarIndigoLima. It's the advantage
of Twitter. I think popped up, I think today or yesterday, saying it was my 13th anniversary
on Twitter, which is rather disturbing.
Congratulations.
And then the other way of getting hold of me, or all the other ways of getting hold
of me are via my website, which is Cryogenics.org, K-R-Y-O-G-E-N-I-X.org. There are about a million
different content details there. I write things there. You can get talks that I've done and
things that I've written and work that I've done and people I've worked with and things
like that are all there. But yeah, if you want to get hold of me quickly, Twitter is
the way. If you want to get hold of me more detailed, then my email address is on my website.
I love email, send me email. I hang out in a few Telegram channels, but Twitter is probably
a better way.
Great. Well, Stuart, thank you so much for your time. And as promised, I think you and
I are going to have to do this again to fill out some extra details. So I'm looking forward
to that.
I am more than happy to come back on and use another hour and knock another one thing off
your list. I apologize for that.
That's great. Looking forward to it.

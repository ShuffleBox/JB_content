Tim, thanks for joining me on season two of Brunch with Brent, really appreciate having
you.
Well, thanks.
It's great to be here.
Tim, for those who don't know, you joined us early last year on Linux Unplugged.
Could you give us a little bit of an introduction of who you are and what you do?
Well, I am a software engineer at NASA's Jet Propulsion Laboratory in Southern California.
And for those who might not know, you have NASA as a whole, but then there are centers
around the country that have various responsibilities.
And the Jet Propulsion Lab, their responsibility has always been robotic spacecraft.
We don't have a pilot, we don't do man launches.
So all these spacecraft you've read about over the years like Voyager and Cassini and
the Mars rovers, those were all built and launched and operated by the Jet Propulsion
Lab.
And so I started there in 1991 coming out of school and I've been there ever since except
for one brief trip out to industry in the mid-90s, but I've been back and doing that
ever since.
And my background is I'm an electrical engineer, but during my studies, I also studied computer
architectures and software.
So much of my career spent living and straddling that world between software and hardware.
And so over the years, I've worked on a number of projects at JPL.
When I first came out of school, I worked in their deep space network.
For those who may not be familiar, JPL has three sites around the globe so that as the
globe rotates, all these deep space spacecraft can be in view of the earth.
So there are these gigantic antennas, one of them is 70 meters across.
If you can imagine an antenna that's most of the width of a football field wide.
So early in my career, I worked writing software to operate those systems.
And then as my career went on, I switched to the flight side, worked on Cassini for
a while, worked on the Curiosity rover, the one that's been on the surface for 10 years
now.
Much of that software was brought forward to the Perseverance rover, so I have software
running on that rover as well.
But obviously, in the last five years or so, I've been working on the Mars helicopter,
which is a small, semi-autonomous helicopter that is a companion to the Perseverance rover.
And so we operate the helicopter via the rover, and it does flights around in the vicinity
of the rover doing scouting, taking pictures, getting a lot of great flight data.
And so that project launched with the rover last year.
We landed in February, so we're almost coming up on a year of the rover being on the surface.
And then during April, we did a series of primary flights to prove the concept of flying
on Mars.
And then they went so well, and we got so many awesome pictures that they decided to
extend our mission.
So we've been doing an extended mission of flying around and doing scouting for the rover
ever since.
So as of January 14th, the helicopter is still operational, and we're doing a series of repositioning
flights back to the north to kind of meet the rover as it traverses around some of the
features on the surface of Mars.
So that's my background.
I was asked to be the software lead, so I led a team of four to five developers to write
the software and the operations tools, meaning the software used once the helicopter is on
Mars, it downlinks a bunch of data, and our team wrote tools to digest that data and do
analysis on that data and so on.
And so I transitioned from the flight software lead to the operations lead.
And I still carry on that role to some extent now.
We've gotten in somewhat a routine that I turned over much of the daily operations to
another very enthusiastic young engineer, and I'm actually consulting on some other
projects at JPL now as well that look to taking advantage of what we learned in helicopter
and putting it forward into future projects.
Oh, that sounds fun.
I was going to say, after a year of the successives you've had, I was going to be curious about
what you're doing now, but it sounds like you've handed that day to day torch over to
someone who's equally as excited about it.
And the things you're working on now, I suppose, is kind of keeping you interested and maybe
even bringing some of your expertise and innovating in new areas, which is keeping you probably
pretty excited about what you're working on, I would imagine.
Yes, very much so, because JPL and NASA are in some way starting to reexamine how they
deploy hardware because of projects like helicopter.
We used a lot of commercial hardware where a typical NASA project will use very, very,
very reliable, but very, very old processing hardware to do their software.
For instance, the rover itself has a processor that was essentially designed in the mid-90s.
But stable, right?
So yeah, but it's designed from the ground up to be radiation tolerant and have wide
thermal ranges, but it's also large and heavy and consumes a lot of power and the compute
power compared to the helicopter.
For instance, our helicopter, the main processor that we have in the helicopter is about 120
times more powerful than the processor on the rover.
And it's in a tiny, compact little size, about the size of one of those mini matchboxes,
if you remember those.
It's not very large at all, but it's enormously powerful for its size.
And so because that miniaturization gives you a lot of power, NASA is taking a longer
look at those and saying, well, how can we take this newer technology and wrap it in
kind of proven ways of fabrication that make it more resistant to the kind of hazards you
have in space, like radiation and the thermal variations that I mentioned?
Because just in space, because there's no atmosphere to mitigate the temperatures, just
a rotating spacecraft can swing through 100 degrees in temperature from one side to the
other.
So you get thermal cycling where things expand and contract and you have to design hardware
so it just doesn't fall apart from the expansion and contraction.
So there's a whole field of how you build this hardware to make it more durable for
space.
So what we're looking at is things like, can we combine these two where we have these methods
of building that are very robust, but then also take advantage of these powerful processors
that industry is producing?
Yeah, because it sounds like in many ways, the processor that you've thrown on the helicopter
has kind of outdone itself in some ways, and not only the processor, but the entire system.
So I wonder if that's informing some of the deep battle tested nature of some of the,
you know, bigger, older hardware that you're using.
So simply by being there for such a long time, you know, it's almost been a year now, that
that's probably informing a lot of future decisions, I would imagine.
Yeah, sure.
And it's I think it's making them look at it a lot more closely, because they see the
advantages of the kind of sheer processing power you can get from these offers.
But you know, we also don't want to throw out all of our experience that we've gained
through years and years of hard lessons in building this really robust hardware.
We don't want to just say, oh, we'll just do everything like helicopter, just buy it
off of a catalog and throw it on there, you know.
It's just a cell phone, right?
And so we want to try to walk this middle ground where we say, okay, let's take advantage
of our experience, but also open up possibilities for incorporating this new technology.
You know, it really reminds me of I don't know if you've heard or listened to it, but
I really got into BBC's 13 minutes to the moon podcast where they explore the Apollo
11 and Apollo 13 missions.
And it really, you know, diving into some of the conversations that you shared on Linux
Unplugged, where you kind of do a deep dive on the technology that has enabled all of
this.
It reminded me of how crazy the technology was back then when, you know, the moon landings
happened.
Because one of the episodes they go into detail about the computer that made all of the guidance
possible.
And when you compare what that computer is like compared to today's standards, it seems
absolutely ridiculous.
But at the same time, what they were able to accomplish with those kind of computers
with very, very dedicated instructions to those computers is kind of amazing.
And it sounds like you're kind of carrying that on, but just with completely new technologies.
Yeah, and I think the term disruptor might be overused a bit, but even the notion of
putting a computer on a spacecraft and trusting it to humans back in the Apollo days was considered
like a major paradigm shift.
Because back then, the thing that people trusted was analog circuitry and mechanical systems
because it was much more tangible.
We're going to put this thing called the computer on a spacecraft and let it do the guidance
instead of the pilots.
So you can imagine the people's reaction to that at the time.
So they had to push through those barriers even to put computers on.
And you know, so you see these similar kind of paradigm shifts going on where, you know,
more and more in the modern space field, much more is going into software.
You know, the hardware is becoming more and more of a shell to contain the software because
people are starting to see the advantages of putting more and more intelligence in the
software and the fact that if you get it wrong, you know, assuming it doesn't kill your mission,
there's always a chance of updating it.
Whereas if you have very complicated hardware that you see some problem develop that you
can't fix, you're kind of stuck.
And Mars or another planet is no place to be stuck, is it?
No, especially when you invested the kind of money and time into developing these projects
to say, well, there's a hardware problem we can't fix.
We're done.
Sorry.
You know, that that is just something that people don't want to have to face down.
Not acceptable, is it?
Yes.
And it sounds like you were in part, let's say in part, but you can you can accept the
whole thing if you like, in part responsible for some of the Linux adoption that went into,
you know, I think this was a deep project where you it's kind of experimental.
And you were telling me earlier how Linux was a natural progression from things like
Solaris back in the day.
How was that transition for you from one to the other?
And why was Linux interesting to you back then?
And why is it interesting to you again today?
Well, coming from the Linux angle, about 15 years ago, when we were when JPL was very
much a Solaris house was, I saw kind of the democratization of the platform as a good
thing.
Because with Solaris, you know, it was this big corporate package, and you bought their
hardware with it.
And it was very much a silo, bought the hardware with the software with the services all together.
And they were also extremely expensive to rewind like the internal clock.
You know, back in the 2002 2003 era, you know, one of the one of the standard sun workstations
was anywhere between 15 and $20,000 a pop, they're very expensive.
Back then, that was actually even more money than we think about these days, right?
Exactly.
And as I mentioned, and I think it was this podcast, you know, our previous the Linux
unplugged one was I discovered Linux, and I put together a system out of basic parts
you can buy from Fry's electronics, may it rest in peace, you know,
I was thinking you were gonna say Radio Shack.
But I put together a PC for a couple grand at work and ran Linux on it.
And it compiled our code at the time twice as fast as the sun machine did that cost seven
to eight times more.
But I'm surprised that that experiment hadn't been done before, in a sense, like that the
Solaris guys weren't like, Oh, we kind of really keep track of what else is out there.
And and so what was the incentive for you to even give that a try?
Well, I was trying to, you know, I saw some of these tool environments that I kind of
like that were in Linux, you know, build build environments and things like that, and compilers
and and I saw it as a way to take advantage of them.
And also, just trying to be a good, if you will, a good steward of JPLs money, right,
if we could have a project where we could sometimes the developers would have to share
machines because they were just so expensive.
And you know, the idea that you could, you could have more machines that were more powerful
and more people's desks, just kind of was a multiplier of people's efficiency and a
better use of JPLs money.
And so I that's why I started looking into it for my project.
And we essentially turned on a dime at that point.
And we would switch from Solaris to Linux.
And then when I was hired on to do Curiosity, the rover project, they were still using or
were planning and using sun boxes from the previous project.
And I just said, well, let's try this, you know, let's switch and use these Linux machines
instead because they're much more powerful and they're cheaper.
So we can buy more of them and for more developers.
And you know, they were skeptical at first, but once I made, you know, I showed from my
trade study that we did that it worked better, they pretty much switched to and now it's
very pervasive on the flight side of the house of JPL to use Linux for not only development,
but the ground systems themselves, they run on Linux.
And so back 15 years ago, and I don't want to claim sole credit for this because there's
other people that were advocating for it, I was just in a position where I could actually
do it.
But what's happened in the last five or 10 years is that there's been a big switch to
containerization and cloud tools, right?
So I was able to get us to, we're actually using Linux on physical boxes, which was a
big change.
And then in recent years, they've switched to, you know, running a big giant VMware instances.
Now they're starting to transition to doing everything on the cloud.
So there's like this AWS government cloud where the AWS provides services to run containers.
And so JPL is switching a lot of their infrastructure to use them instead of physical machines.
But it's still all living within a Linux world.
And so I'm glad I played a part in that.
I don't want to overstate my role, but I think it was, it happened at the right time to kind
of catch the trend.
Well, in many ways, it sounds like you're really just taking the attitude that, you
know, new technologies need to be looked at and considered and implemented if they really
make sense.
And that I would imagine at a place like JPL is kind of, it should be the way to go.
And okay, we rely on what we know, but we need to still stay very current because some
of the new technologies allow things like, you know, the Mars helicopter to be as small
as it is and to do some of the things it's doing.
So I would say kudos to you for keeping your thumb on new technologies and not being afraid
to continue to dive in even, you know, even even this far into your experience with with
all that stuff to not stagnate is no small thing, I'd say.
And I don't think it's overt, but it's very likely that JPL getting a lot of institutional
experience with Linux to the point where they trusted it for some of their critical tools,
for the ground systems or for development, and even some of the enterprise tools that
they use, you know, that are business related.
When it came time to proffer up the helicopter as a platform running Linux, you know, they
at least had some institutional comfort with Linux as an idea because back when I was first
doing it, it was kind of viewed as this, how do I put it, like the crazy uncle who's got
everything wired up in his basement.
You know, the people that were pushing Linux were kind of fringe, you know, that's how
they were viewed because they didn't have these enterprise solutions like Sun offered
at the time.
And so if we had come completely out of the cold and just said, hey, we're going to fly
Linux on a helicopter, you know, they there could have been a lot more resistance to it
had we already not made the transition.
Take a moment to go to Jupiter.party to support the entire Jupiter Broadcasting Network.
We include ad-free versions of all the shows, plus bonus features such as the Linux-unplugged
entire live stream, the coderly report where Mike and Chris chat about topics of the quarter,
and the self-hosted post show.
And also in the near future, I will be doing a special mail time with Brent where I read
some feedback from you.
Again, help support the entire network of your favorite shows with a membership by visiting
Jupiter.party.
And so back then, you're a little bit, you know, pushing the envelope a little bit to
try new technologies.
Do you still find yourself these days being as adventurous maybe as you were back then
when you were younger?
Yeah, though, you know, it's been tempered somewhat by my background on a big flight
project, you know, Curiosity, I spent the better part of seven years on that project
in the aughts, as they like to say in the 2000s, and it did give me an appreciation
for the kind of rigor that you have to do to design a flight system.
And JPL has a very good history of just designing these really exotic flight systems that just
work and they're challenging and difficult.
And so I was able to follow that arc of a development on the flight side using kind
of the traditional approach, which is how Curiosity was designed.
We didn't fly Linux, you know, we didn't do anything exotic like that.
We flew VxWorks, which is a Wind River real time operating system that JPL has become
comfortable with over the years.
But not just the software side, but how they designed the hardware to be redundant and
safe and reliable.
Being able to go through that arc as an engineer, it gave me an appreciation that's valuable
too.
So maybe as I was a younger engineer, I was like, hey, just burn it all down and start
over because there's cool stuff, right?
And having had that arc of experience kind of lets me hopefully in a rational way blend
the two approaches where, yes, things like Linux are cool, but still have to show the
kind of care in designing the systems that we did before.
And not just have a rose-colored glass when it comes to Linux, because Linux has its own
personality, its own shortfalls and advantages that you have to have your eyes completely
open when you're deciding to use it on a project.
I would imagine having all of that experience allows you to know when it's reasonable to
try something new and know when it's essential to stick with the proven.
And like you said, blending those two is actually the real strong point, right?
Doesn't make sense to run too far in any direction.
Yeah, that's my hope is that I can successfully blend those.
And yes, so you can go to a new project and say, look at the great experience on helicopter,
but we also understand.
And so let's propose this new project with that kind of experience, giving it weight
rather than just kind of being all gung-ho for the latest technology and maybe showing
poor judgment and how far you let it penetrate your design and then cause some kind of big
public visible failure that would, in the long run, maybe even hurt the implementation
or the incorporation of these new things into the whole space technology culture.
And yet I would imagine in your personal life, you get interested in certain technologies
that may or may not apply at work.
Are there things you're working on these days that excite you and that you could see maybe
would find themselves in your work environment?
Or is there some stuff even that excites you that would never do that?
Well, it's going to shock you, but I'm not as much of a tinkerer as home at home with
all that with doing really wild out there technologies.
I would imagine you get your fix from nine to five or yes, it's in some ways when you're
spending time expending so much, so many brain cycles at work to try to solve some of these
things, sometimes it's fun to come home and just do the brainless stuff like work out
in the garage and fix a sprinkler or something like that.
It's kind of a way to drain off some of that buildup of stress.
And what's ironic for me is I learned this pattern for myself over the years and I actually
highly recommend it for young engineers because sometimes young engineers are like, okay,
we got this technical problem.
I'm struggling with it.
I need to pull an all-nighter and just keep hammering at it, hammering at it, hammering
at it.
And I'm like, you know, sometimes if you just go off and do something completely unrelated,
your brain is processing this in the background.
I've had many, many times over my careers where I'm doing something completely unrelated,
like as I said, in the shop fixing something or in the shower or walking my dog in the
neighborhood when all of a sudden like a soap bubble, soap bubble, it'll pop.
And I will hear in my head, I'll say, wait, that's how we could do it.
And there was several thorny problems during helicopter that we were grappling with.
And I just said, I'm just going to go home and just do something else for a while.
And the solution presented itself.
So I think there's a life balance that sometimes it's good to get away from the technology
and do something else and try to divest yourself with technology for a while.
Because believe it or not, the analog world is kind of cool too.
It turns out.
Sometimes if you get really involved in these big movements, you can neglect your family
and do the kind of things, going on hikes, going to their track matches and things like
that, going to their recitals, you need to achieve that life balance.
And so at home, the kind of things I tinker with is, of course, I've got a whole network
set up with an NAS, Synology NAS that I tinker with packages on there.
And I have a Raspberry Pi that I've played with to do like multimedia kinds of things.
And so I like to set up that thing.
My wife despairs if something ever happened to me that she'd have to call in like a team
of network engineers to figure out all the things that I did.
Well, we're here to help if ever you guys need.
So in some ways, I've intentionally tried to declutter my life a little bit technologically
at home so I can get that balance.
But you know, there's always things that I like to read up on.
One of my fascinations is with automobiles, you know, I'm a big car buff.
I like to read the car magazines.
I think if I could have some ideal other career, I could just make it up and do it for six
months and be like an automotive journalist.
These guys that go out and test cars go out in these big, you know, take it to the track
and try it out or take it through these long canyons.
So things like that and the intersection of technology with cars, I'm very fascinated
with how, you know, the in-car entertainment systems and the in-car autonomy and driver's
aids are getting more and more advanced and so much of that is software.
The car industry, people just get in the car and drive, but they don't realize how much
it's changed in the last 20 years from a largely analog system to completely computerized where
some of these modern automobiles will have 16 or 17 different computers doing some aspect
of operating the car.
So I'm always very fascinated with how they do that, how they build cars and how they
interact with the driver, you know, they have these new augmented reality heads-up displays
that'll superimpose an arrow right on the street so you know exactly where to turn and
some very cool stuff happening in the automotive world.
And ironically, the automotive world has a lot of similarities with space because the
automobile is a very hostile environment for electronics to operate and software has to
be very reliable because you have human lives in your software hand, you know, if some autonomous
system or some driver aid, like an automatic braking system, all these modern cars that
will use their cameras to detect that you're approaching an obstacle and you're not realizing
it's there and so the car will brake for you.
Well, what if that does that in the middle of the freeway at 80 miles an hour?
Not what you're looking for, right?
Yeah.
Yeah, that would be very bad.
And so I'm fascinated, so I read up a lot about that and enjoy that kind of thing as
a hobby to read up on those.
You know, now that you describe it in detail with your sort of fascinated voice, which
I appreciate, the links between the two are quite clear.
Like I would imagine a lot of inspiration for one comes from the other and surely there's
some talent that moves from one space to the other as well because like you said, there's
so many different aspects that are quite similar and maybe an extra challenge in vehicles actually
is that there typically is a human driving, where for you guys, you don't have that, right?
And the averages catch up with you in automobiles because you put out a few million automobiles
a year.
Like JPL may fly a few missions a decade with highly complex software and they may get lucky.
There may be a bug lurking in there, but they don't operate the spacecraft in the way that
exposes it.
But the automotive world, when you have people out driving in every kinds of situations,
every kind of weather, every kind of way that people interact with their cars, eventually
it will expose if there's a problem.
That's why they have recalls and software updates for cars now and they're getting to
the part where they're doing over the air updates.
One of the things that Tesla brags about is that, well, we'll just download over the weekend
that the car will automatically download its update for the software.
You don't have to go to the dealership and have them plug in the car anymore.
We'll just download it over the internet directly to your car.
And so the automotive world is a very good space for proving out technology because people
just hammer their vehicles and not intentionally, but just so many people acting as testers
for the automotive companies, that things will come out and they learn lessons.
And one of the things that the space industry is doing is they were kind of insular for
a while.
Like, okay, we're super smart.
We know exactly how to operate spacecraft and we don't really need to talk to anybody
else.
But they've started to turn their eye towards the automotive world and said, they probably
learned some stuff that we could take advantage of in the way that they structure their control
systems and how they design their hardware, that maybe we could leverage a lot of that.
Because the other thing that works for the automotive world is they have volume.
They can design a very reliable system and make millions of copies of it.
So there's a certain economy of scale there too that the space field can take advantage
of and maybe reduce costs.
So there's all these ways that these two industries can actually interact and maybe learn from
each other.
Fascinating.
I know in the industrial world they have the advantage that they can iterate quite quickly.
One year to the next, they're coming out with a new version of the vehicle where for you
it's kind of, well, you put all your eggs in one basket and send it to a different planet,
right?
That's a little bit of a different cadence.
Yes, absolutely.
The design cycles for space hardware are a lot longer and a lot more expensive because
just from the scale of economies, it's a smaller market.
And so a lot of these manufacturers build space hardware for the prestige, not for making
lots of money.
Have you interacted at all with any of the new mining technology?
Because it kind of touches on this realm too.
I'm from Sudbury, Ontario, which is a mining town in Northern Ontario.
And I know there's a lot of innovation these days, similarly to the automotive market,
but in sort of driverless mining vehicles that have to go through some pretty rigorous
terrain as you could imagine underground.
I wonder if you've had any interest in that field or maybe I'm giving you something to
go have a look at.
Well, I've brushed up against it, I'll put it that way.
One of the panels I was on last summer was there's an Australian Space Consortium.
And in Australia, and I didn't know this, I was educated during this conference and
this panel was that Australia has a very advanced mining field.
I mean, the very advanced mining enterprise where they've, because the outback and places
in Australia are very remote and very hard to get to and very hard to set up places for
people to live near the mining sites, they've actually gotten very good at mining automation.
And so there are a number of talks on how different companies have been able to automate
operations to the point where you can have much of the company's personnel in a city
like Adelaide or Perth, and they can be in a data center there and they just do everything
remotely.
They have a mining facility that might have a half a dozen engineers there to fix stuff,
but the equipment is operated remotely, the vehicles are operated remotely.
And so it was very intriguing, I found it very intriguing.
And the point of the conference was there's a young and growing Australian space industry
or space agency, and they're trying to look to the mining industry to figure out, well,
how can we take advantage of what they've learned?
Because one of the Australia's takes on space, because they are such a big mining economy,
is to figure out, well, how can we do space mining?
Because there's been estimates that the asteroid belt and some of these other free-floating
asteroids have vast amounts of ore and other things that are very difficult to get to on
Earth.
But because there's a lot of big pieces floating around in space, there's a lot of potential
for mining.
And if you've watched The Expanse at all, it's one of my new favorite sci-fi shows,
there's the whole culture of the Belters, this whole kind of loose confederacy of groups
that are out mining the asteroid belt.
So that's something that the intersection of mining and space right there is, how do
we get out of the gravity well?
How do we get to the point where we can, in a cost-effective way, mine in space?
And yes, so there is some interesting intersection there.
I'll freely admit I haven't dug into it since then, but it was a very fascinating topic
when I was listening in on it.
So I have a photography background doing professional photography all over the country of Canada,
and so I had a chance to do a bunch of mining stuff with a friend of mine in past years.
And just going down there, the darkness, it's a very dirty place as well, and yet there's
all this really amazing technology down there.
There's something about it that I think for people like you and I, it's just fascinating
how we can get so much done in these really punishing environments, to put it plainly.
And all of that used to be done just through human effort, but these days, the machines
that are enabling us to do some of that cool stuff is super fascinating.
And when you see how that transition is happening in so many different industries with some
of the same technologies, there's Linux in the automotive sector, there's Linux in the
mining sector, there's Linux on the stuff you're working on.
It's sort of really neat to see those technologies and how they can solve problems in so many
different fields.
One of the things that I've enjoyed about Linux over the years is its adaptability.
And you can see it because on one hand, you have it running giant server farms, on the
other hand, you have it running IoT, and on the third hand, you have it actually acting
as a desktop environment for people who are able to deal with some of the learning curve
of deploying Linux for the desktop, they really enjoy it.
So it's become a very adaptable environment.
That's why it finds its way to all these different environments, because you don't really see
Windows running on embedded platforms.
I know they have this Azure IoT product they're trying to push, but Windows is really primarily
a user-focused environment.
And there's just a lot of different places you can go with Linux, and I think part of
what really fueled that was open source, because you can go and get the kernel and you can
adapt it to your purpose, and you don't have to pay somebody royalties to do it.
You can just get the kernel and use it.
And so if you're going to build a thousand door switches for your alarm system, you can
get a tiny little Linux kernel that just does that, and you can program for it quickly and
deploy it, and you don't have to pay a bunch of licensing.
And so I think part of what's driven all this is Linux as a core product is pretty flexible,
but also the whole open source model has allowed it to just propagate everywhere, and even
act as an undergird, if you will, for commercial products like Android, because I don't know
if a lot of people really realize, I'm sure this crowd does because we're much more up
the curb on Linux, but Android has at its core a Linux kernel.
Yeah, I would think most people don't realize that.
Yeah, they think Android is like iOS or something.
It's a custom operating system.
And so in that sense, Linux has a vast penetration just in handsets that people use.
I wonder how open source has been important at JPL as well.
It sounds like you've dove into it and at least understand for yourself personally how
important it is.
But is there an aspect of the open source ethos that really drives innovation at JPL,
for instance?
I would say that it's quite prevalent in the non-flight area of JPL, because JPL has flight
products which are very carefully designed and managed, and if you want to use the term
configuration managed, like certain specific sets of tools.
But on the ground side, when you're designing ground software to ingest the data, analyze
the data, do planning, it's pretty pervasive.
So I've seen lots of lunchtime talks where some group is doing rover planning, and they'll
find some tool that does what they want.
So they incorporate it, and they link it to another tool, and they get this whole constellation
of tools.
I mean, even for the helicopter, we use Python for all of our ground tools.
That's an open source product.
And as our backend for a database to store all the data from the helicopter, we use Elastic
Search, which is also an open source technology, and it's been great.
And we didn't have to pay for a big Oracle license or something for a database.
We just instantiated Elastic Search, and we use tools like all these open source Python
tools.
There's one called matplotlib that's a plotting tool, a plotting module for Python.
And so when we do all of our downlink of the data from the helicopter and we plot all these
different things like temperatures and battery voltages and flight paths and all this sort
of thing, we use matplotlib, and it's basically you have an open source tool inside of an
open source language like Python, and we use GitHub Enterprise to do all of our activities.
We use GitHub issues to record everything we do when we do the downlink and the uplink.
We have all this automation now that will downlink the data, the tools will process
the data, and then basically generate plots and then push them to a GitHub issue.
It's all automated.
It spits out in like five minutes.
When it used to be, when we first started doing it a year and a half ago to practice,
everything was manual.
It would take us like an hour, hour and a half to do it by hand, right?
And so we use it a lot on the ground, and JPL among many projects around the lab uses
open source because it's an adage that I've learned as an engineer is that if I'm thinking
of something like, hey, why don't they do it this way?
Or how do you solve this particular problem?
I know I'm not that smart that I'm coming up with a problem that nobody else has thought
of, and I could probably execute it perfectly if I wanted to implement a solution.
And so I've really learned over the years that if you're thinking of a problem, somebody
has probably addressed it somewhere.
It's a matter of finding it, and that's where open source comes in.
Okay, so how do we take 1,000 images and convert them from one format to another, right?
Well, I could sit there on the command line and I could open up a program, load it up
and save it as a PNG and do that for 1,000 files, right?
Or you find an open source tool that does the same thing, right?
Batch converts.
Because I'm probably not the first person who thought of something like that.
It's actually kind of hilarious when you think much of what you guys are doing are actually
just repeating what a lot of us are doing on the ground, except you're just putting
it together in a way that allows you to accomplish things that humanity hasn't done yet.
And so that's actually kind of fascinating in a way.
I was giggling the whole time you were talking about if I wasn't the first person to think
about this thing.
I've said that to myself so many times, and then you just kind of open up a browser and
start typing away some keywords and try to find someone else who's solving this issue
more intelligently or longer than you have.
And what a great resource, right?
Yeah, and we're trying to pull the perimeter of open source closer and closer to the flight
world in that we want to take advantage of all these things.
Because if you have a helicopter project like we had or a technology demonstrator, you don't
have a whole army of people to go and invent stuff.
You want to take advantage.
You're always looking for some tool you can use, some environment you can use to make
your life easier.
And so it has a big payoff in that you can concentrate on the stuff that are particular
to your task, like flying a helicopter on Mars, not solving problems of database design
and, you know, and data processing, you know, all these different things, writing code to
do plots.
Why would you spend a couple of months doing that when what you really want to do is design
how to fly a helicopter on Mars, right?
Because almost like 80% of it, if you just put the tooling together in a novel way, is
kind of already done for you.
And you guys really want to concentrate on that last 90% of like, okay, how do we use
all of that back end to do something really innovative?
Right.
And even in the flight world, the software that we use for helicopter, it's an open source
framework called f prime.
You can actually go on GitHub and search for it and find it.
It's something we developed back and started in 2013 or 2014 at JPL, it was part of our
group's work and it was something that I architected, which was, well, how can we do the same thing
on the flight side?
Because there's common things that spacecraft do, right?
They process commands, you know, you want a command to do certain things, it gathers
telemetry and it sends it to the ground, it stores files, it transfers files.
There are these common things that every spacecraft needs to do and every spacecraft kind of wants
a ground system.
So an environment you run on the ground to receive the data and decode it and display
it and allow you to send commands to the spacecraft.
And so if you're a project, you don't want to have to reinvent that every time.
And you want to write the software that's particular to your project, like controlling
a helicopter.
And so this framework that we developed in our group serves that role on the flight side
where a project can take the code and use what we've already developed and then add
their own on top and much more quickly get to the point where they're ready to actually
execute a mission.
And so the helicopter gave that particular framework a lot of visibility.
We actually trended on GitHub for almost a week as the highest visited site on GitHub
because-
Is that right?
Yeah, it was very interesting.
That's cool.
Because I had done this article in the IEEE spectrum, which is probably what led to the
Linux unplugged appearance is what I talked about the fact that the helicopter use Linux
and that kind of got its own life.
And because the software framework is on GitHub, the CEO of GitHub noticed and was tweeting
all about f prime and everything.
And there's a number of projects on JPL who are using this now and some universities,
because when you have a student population, building a spacecraft as a project, you want
to get there as quickly as you can.
And so the same concept is playing out on the software side.
And it's been beneficial because I don't think we could have done it on helicopter if we'd
had to do it completely from scratch.
We were able to take advantage of this framework and get a big boot up on what we had to do.
That sounds amazing.
Does it feel to you in a way, feel nice that you're giving back in a sense like I wondered
if having your open source software be used by others is kind of a nice way to to share
some mentorship in a way?
Yeah, it's, it's been exciting for me personally, because it was my own kind of idea in the
beginning.
And it's taken, it's taken a hold and gathered a lot of momentum.
And you're right about the mentorship, because one of the things that JPL as an institution
likes to do is it likes to recruit from schools where they know that students have had some
kind of a background in doing embedded programming or even better designing a spacecraft.
That's why we love to go to universities that have a CubeSat program, where you've seen
students getting a technical problem, doing trade-offs, finding solutions, working around
problems they encounter, writing code that actually runs in that kind of environment.
JPL likes to see that when they go to recruit graduates.
And so the extra dimension to this is what we've been doing as a group.
Our group at JPL is we will basically form a partnership with the university and then
introduce them to this software framework.
And then we actually have a class that we teach.
It's been a little constrained because of COVID, but before COVID we were making a couple
trips a year to universities and giving classes on how you design flight software, the kind
of principles you have to keep in mind when you're designing flight software that's different
than say a web backend or Microsoft Word or something like that.
There's different priorities and different techniques.
And so it's been an outreach tool as well for us to prepare students so that when they
come out of university, they are ready to go when it comes to working at JPL.
I mean, we have one engineer now on the helicopter team who went to San Luis Obispo, Cal Poly,
and became familiar with F Prime and he popped out literally as a graduate, went right to
work on the helicopter and is doing really well because he had that background already
when he was coming out of school and it was less of a curve for him to come up to understand
the JPL culture and the way you design spacecraft.
So that part is very personally gratifying, but it also helps JPL as an organization recruit
new students because we can do this kind of outreach and kind of pre-train them before
they graduate.
Yeah, it sounds like everyone's winning.
How fun as a student to be using the framework that's actually identical to what's going
on up in space.
I would assume that's pretty fascinating.
One of the things I commonly say to students when I introduce myself and talk to them,
I said, you know, I got to admit I'm very jealous of you because when I came out of
school in 1991, there was nothing like this.
Yeah, and yet you have a similar trajectory to that engineer you were just mentioning
in that out of school, you went almost immediately to JPL in a sense, right?
And it would have benefited me to have had some of that pre-training because the kind
of labs I did in college were not particularly geared towards the space industry, everything.
So I had to learn, you know, I had to learn a lot more than some of the students today
when they're coming out, when they've already been involved in like a project where they
build a CubeSat, they go through a lot of good in the trenches training and school of
hard knocks kind of learning that I wish that I had had because I had to do that kind of
on the job.
Unfortunately, I've come out of the other end with some good experience, but I would
have loved to have had that background too.
So that's why I tell them, I said, I'll say to them, you know, I'm really jealous because
I would have loved to have been in this kind of class as an undergraduate and doing the
kind of projects that you're doing.
And just because number one, it helps prepare me, but number two, they're just cool, just
fun projects.
You can imagine as a sophomore, you know, 19 or 20 year old, you built this little loaf
of bread sized spacecraft that, you know, a year later is in orbit doing measurements
and you know, you put it together.
That's just really cool.
In many ways, we live in kind of a golden age for that kind of accessible innovation.
And I think we need to keep that going.
I totally agree.
And the fact that you can get a little IOT processor with Linux on it that has sensors
and the ability to control devices and you can buy it for about a hundred bucks and have
your own little development environment set up.
That's amazing.
It's just, you couldn't do that 10 and 20 years ago, but now it's so pervasive that
it's very easy for somebody to jump right in and learn that environment without a big
investment in personal expenses or time because you get all these kits, you bring them together
and all of a sudden you have a little robot driving around your living room avoiding chairs
and you know, you're having a great old time.
Yeah.
It feels like something like the Raspberry Pi has also enabled this kind of tinkering
and I think even the F Prime framework can run on it.
Is that right?
Yes, as a matter of fact, if you download from GitHub, there are directions on how to
build for Raspberry Pi and running on Raspberry Pi.
And we actually have our continuous integration server that we run to check the code out every
night and build it.
It actually checks it out, builds it for the Raspberry Pi, copies it over to the Raspberry
Pi and runs a little set of tests on it.
That's very fun.
So yeah, you can take a Raspberry Pi and you can download the code and you'll have a much
of the same code that's on the helicopter.
And then you can take that and you can basically, because it's a framework with a couple of
demonstration pieces of software, you can basically delete that demonstration part and
write your own custom software to do whatever you want on the Raspberry Pi.
So yeah, it is very accessible.
That was one of the points that we wanted to achieve when we deployed F Prime was that
it should be really easy for somebody to download it and just run a quick demo.
And what's happening in the open source aspect of that is there's people outside who are
contributing back configuration files for other build environments, like Arduino and
other embedded Linux boards, other operating systems, because there's a number of different
embedded operating systems out in the industry, so people are writing ports to that.
And so there's a certain amount of momentum growing in people outside of JPL contributing
back to the repository, their own development, which is really cool.
That's kind of what we wanted to see happen.
When you were first designing F Prime, did you think it would be doing this?
I frankly did not know it would grow to the extent it did.
It's very cool, isn't it?
We were kind of a guerrilla team in some ways.
That's G-U-E-R, not G-O-R, although I've been accused of being a guerrilla before, that's
not the spelling.
Fair enough.
Is there a mentor that you got kind of connected to when you were younger that really made
a difference for you?
Oh, absolutely.
I think that's a really important aspect of engineering is finding people who are wise.
Would you consider yourself that now?
Have you heard of the imposter syndrome?
Yes, absolutely.
That's what I frequently feel when people look at me like I'm some sort of a guru or
a mentor.
But that in itself is a lesson, isn't it?
I think there's a lesson to be learned that you should always approach these things with
a high level of humility, right?
And also to take the approach that you're never too experienced to keep learning or
being approachable by somebody who finds a flaw in your approach or your reasoning.
You don't want experience to turn into arrogance, you want experience to turn into a truly open
way of approaching the world and trying to learn from anybody, especially the young people
today who come out and they're wizards at certain technologies.
And I feel like I'm just stumbling along just trying to keep up, right?
And I try to learn from them even though they're younger than I am or earlier in their career,
I still think I can learn from them.
And I think that's what the best engineers are, not to call myself the best engineers,
but they're the ones that are always trying to learn and be open to learning and being
open to learn from somebody else.
And so I did have several of those people in my career who took the time to kind of
teach me the ropes and give me principles about approaching engineering and approaching
flight projects.
You know, there's been two or three of those people through my career who I've really looked
up to that took the time to sit down with me and say, okay, instead of just calling
you stupid, this is how it works and this is the thing that you have to keep in mind
and this is the approach that you can take.
And it really, really helped me in my career.
So when I encounter younger engineers, I try to do that myself and try to teach them that
trying to learn a system, becoming a system engineer, you know, that system engineer in
the classic sense is one who has a grasp on kind of all the operating principles in the
system and knows how they interrelate is that in some sense, every engineer should be a
system engineer.
If you're too compartmentalized, you can become kind of set in your ways or you don't see
the importance of other perspectives or things that are important to make the whole thing
work better.
And so I've tried to do that throughout my career because these people in my past have
taught me that.
It's taught me to look at the whole system and try to understand your place in it.
And you'll just do a better job as an engineer if you do that.
Not to mention taking inspiration from cross industry technologies as well, as we talked
about earlier.
Yes, absolutely.
Well, Tim, is there anything you would like to share with our listeners, something you're
passionate about or some, I don't know, life advice or something that you'd like them to
know?
Well, I guess it's just a reiteration of what we just mentioned is that I think if you're
in any field, if you're technical or anything else, it's this constant desire to keep learning.
And learning outside of your typical world, I joke about the automotive world, but there's
other worlds.
Like you talk about photography, right?
You're a photographer.
That adds another dimension to your life, which gives you richness and gives you another
thing to learn because if I've learned something over the years, it's that when you're coming
into a field for the first time, there's kind of a freshness or a kind of an eager anticipation
of learning about a field.
And if you're in one field for too long, sometimes you can get a little stagnated and you're
a little tired of the same thing.
But if you try to expand your horizons and learn about a number of different areas, not
just technically, but in your own personal life, different topics, different areas of
interest and always remember that there's cool technology, but there's also people and
that you don't want to become so sterile in your life that you're not interacting with
people.
One of the great qualities of all the work from home is that JPL is a very vibrant place.
It's very much like a college campus in many ways with lots of incidental interactions.
And you see somebody, you ask them what they're doing and they tell you about this field and
you're like, wow, that's really cool.
And it just makes your life richer when you learn those things.
And so having that well-rounded life where you're looking into different things and especially
the people behind them, because you're passionate about your photography, I'm passionate about
space exploration.
Somebody else might be passionate about marine biology and they get really excited and talk
about their field.
That's what I think is the richness of the interaction.
And so if you're a young engineer, my advice is always become well-rounded as an engineer,
but also become well-rounded as a person.
So that may not be profound.
I'm sure people before me have thought many of the same thoughts, but that would be my
advice and just be humble through it all.
I think it's very wise advice and we can't be reminded of it often enough, for sure.
Well, Tim, thank you for joining me.
This was a lovely conversation and I really appreciate your time and actually look forward
to hearing what else you get into.
It sounds like maybe you're going to push the boundaries for another few decades as
you continue your work, so I'm looking forward to that.
Yeah, well, thanks for having me and I really enjoyed this talk and I've always also enjoyed
the Linux Unplugged podcast.
I've been learning some good tips and tricks and new technologies that I've started to
look into for my own career, my own life from that broadcast too, so you guys keep up the
good work as well.
Nice.
Well, thank you.
Can I ask what might be one or two technologies that you've grabbed from there?
Well, I was very fascinated with the quick EMU package because we grapple a lot with
VMs at work to try to spin up something quickly to try and experiment on a particular flavor
of an OS.
Just the fact that you could bring up on the command line, I thought that was a really
cool utility.
Forgive me if I forget the name of it, but little packages like I have some security
cameras at home and you guys mentioned on your broadcast at one point about a package
that runs on the Raspberry Pi that acts as a DVR, an open-source security video recorder,
and so I've been tinkering with that.
I hear about these little packages, I hear about different versions of the operating
system like Papo as or Debian, which ones work for you guys better, which windowing
systems.
It's one of those things where I'm interested, but it's hard for me to justify the time to
go and just exhaustively explore all these different packages.
When a package pops up on the broadcast, I'll be like, that's pretty cool, save a link to
that, go look at that, and then I don't have to spend as much time surfing that world to
find stuff.
That's been very helpful.
Nice.
Yeah.
It's like a learning shortcut while you're out walking your dog, you could just learn
a new trigger too.
Yeah, and it's actually the truth is that that's typically when I listen to the broadcast
is walking the dog.
Lovely.
Well, thanks for joining me again and thanks so much.
You are quite welcome.

Well, hello, everyone. I'm joined today by Heather Ellsworth. Heather, how are you doing?
I'm well, how are you?
I'm doing good. We got connected through Popey, actually, those who know Alan Pope. He said,
hey, you should really have a chat with Heather. She's pretty darn interesting and would be
a great guest for Brunch with Brent.
Yeah, thanks for having me. I feel very honored.
Yeah, absolutely. Now, I wanted to just give a little taste of sort of the things that
you're doing these days, but we'll dive into a bit of your history in a moment. So I know
a few that you're newly on the canonical team, I guess the Ubuntu desktop team specifically,
is that right?
That's right. I've been there for like five months, just about.
Okay. So somewhat fresh, but just finding your feet now.
That's right. Five months and two days, actually. I realize.
Well, happy five month and two day anniversary.
Yeah, I would say that I'm still learning the ropes, but that also means like I'm still
learning that there are more ropes to learn. There's an infinite number of ropes to learn.
The more you learn, the more you realize you don't know.
Yeah, but one nice thing is that everybody at canonical is super nice and down to earth
and happy to answer silly questions for newcomers like myself.
You know, they were all newcomers at one point, too. So I'm sure there's some empathy there.
Yeah, but not everybody usually remembers that. But in this community, it seems like
they do. So that's quite nice.
Oh, nice. Yeah. And I've heard that often of canonical that it's really kind of a human
centric environment. Would you agree with that description?
I would absolutely agree with that. Yeah.
Does that feel nurturing in a way that maybe you haven't experienced in the past?
Yes, definitely. Especially like an open source. I've experienced kind of both spectrums where
some people can be quite antagonistic and mean unnecessarily. And it's just kind of
like, why? And then it's really nice to be surrounded by people that are the opposite
that are happy to help and happy to chat, especially being like in a remote position
where sometimes you can feel isolated and siloed, get frustrated on your own. So it's
nice to have that sort of base that you can reach out to.
Sounds like a really strong support system, really, that allows you to do your best work.
I would imagine on the flip side when there's that antagonistic environment, how then can
you do your best work if you're sort of surrounded by that energy?
Yeah. I tend to mirror the energy that I experience. So if someone's going to be a jerk to me,
I am going to push it right back because that's kind of what you have to do. Like that's,
you know, a thick skin bounces stuff off, right?
Well, it's important to defend yourself. Like I tend to be quite conflict avoiding, I would
say in general.
Oh yeah, me too.
That has been my nature and it sounds like yours too. And certainly my parents are sort
of that way. And I've observed that in myself as being a really nice trait, but not a hundred
percent of the time.
Yeah. It's not good to be too squishy.
Thank you for describing me as squishy.
I think I'm squishy sometimes. If someone that's more experienced than I comes and says
like, oh no, you have to do it this way. I say, oh, okay. Yeah. You're more experienced.
I believe you. And then if someone else comes along and says, oh no, don't do it. That person
says, well, dang it. I don't know what else to do.
Tricky, eh?
Yeah. But I find that the community at Canonical has been really helpful and in all ways. So
I am very happy to be there.
Lovely. Well, that sounds amazing. And how was the onboarding for you? Cause I know you're
working remotely, so at a distance, but you're also a huge like time zone difference. So
was that kind of an adjustment as well?
Not so much because my previous role was a time adjustment as well. I mean, at least
in this role, there is another person on my team that is in the US.
You're not the only one.
Yeah. Right. Whereas in my last team, well, no, I guess there was someone in the US, but
most of the people I worked with were in Germany. So the central European standard of time.
And now it's a little bit better. So I used to have a lot of meetings that started at
like 7am and I'm not a super morning person. So it's hard to be like caffeinated and ready
to like run meetings by seven. So now I have to, you know, it's more of like an eight to
five thing. It's much more comfortable.
So why don't you guide us through what you do at Canonical?
Yeah. So I was hired to work on snaps. If your listeners don't know what snaps are,
there's a lot of documentation out there, but it's basically a containerized application
system. And it's really kind of fun to just like write metadata to snap things. That's
how it started, but then it quickly led to improving the snap craft build tool itself
and adding an extension to make snapping gnome snaps a lot easier since I am a devout gnome
user and I'm a gnome foundation member and I love gnome. So I've been kind of working
in this like snap and snap craft space. And then there was a need for someone to take
on the maintainership of LibreOffice. So I said I would happily do that, not really knowing
what I was signing up for.
Sometimes the best things we run into are the things where you just kind of take a chance,
right?
Yeah. My life motto has always been like, how hard can it be? Sometimes it's gotten
me into trouble.
And yet I imagine that also stretches you in a bunch of ways.
Yeah, definitely. I learned so much having that attitude. I am still learning a lot about
LibreOffice and I still want to call it OpenOffice. It seems like a new bug is opened about that
every day. So it's like every day I'm like, oh, how do I reproduce that? How do I do that?
I don't know. So that's what I'm doing now. Yeah. Kind of snap stuff and helping out with
LibreOffice.
LibreOffice seems like a big project.
It is a beast. Yeah.
I was being kind. And so I would imagine then that people must look quite fondly at the
work that you've done in the past to give you that kind of responsibility.
I sure hope so. Either that or they're desperate or some sort of combination.
I was going to say, how's that feeling?
But I can tell you that I do my best every day, whatever the problem is I'm working on,
whether it's snap stuff or LibreOffice. And it probably looks like I'm kind of slow, but
I've been here five months and I'm still learning the infinite ropes. So I'm slowly but surely
I will master this. It's funny because I'm really competitive. And when LibreOffice was
handed over to me, my boss said, hey, it's being handed to you in a pretty good state.
And I thought, oh, this is a good state. And I made note that there are 372 bugs. One day
I'm sure I will hand this off and I want to make sure that there's less than 372 bugs.
And if I do, then I will feel like I have won somehow.
That's your own internal metric?
Yes. Yes, absolutely. I like to win. I like to set goals. I don't know, just all over
the place. I'm a big planner and goal setter. And I mean, I track all kinds of like metrics
in my personal life just for the heck of it.
Can you give us a few?
Yeah, I like to just try and measure things, random things, seemingly.
They must be measured somehow.
Yeah, yeah. But like, like coffee. I guess it's been a couple of years ago. So I buy
my coffee in bulk and I love my coffee and I drink the same amount of coffee every day.
So I wanted to know how much does a cup of coffee cost me every day? I'm happy to pay
too much for bulk, delicious coffee. But I wanted to know like how much cheaper is it
than like if I were to go to whatever local coffee shop and get a black coffee. And so
yeah, I did this for like three-ish months and it turns out it costs 80 cents a day.
Now 80 cents, is that 80 cents total or 80 cents more than the other option?
Nope, that's 80 cents total. So when I do go to coffee shops, when I'm, you know, when
I need to get out of the house, you know, a cup of black coffee is about $3. So it's
a lot cheaper. And even if it wasn't cheaper, I probably wouldn't go to a coffee shop every
day just cause that's more of a commute than I'm used to. Just walking downstairs.
Yeah, I'm with you on that one.
When I was in grad school, I did a more complicated measurement on the milk. So, you know, I always
have milk around and I wanted to know like, you know, the sell by date. Is that really
when I should stop drinking the milk or, so I measured all kinds of things about like
when I opened the milk relative to when the sell by date was. And I had sort of a flavor
like numerical profile I would attach to every day.
I'm loving this.
Yeah, I just, so I did this for like only maybe a month or so because it was kind of
intense and I was a grad student and I didn't have time to do that. And yeah, so I stopped
drinking milk exactly at the sell by date.
There you go, listeners. You don't have to do that for yourself.
I just enjoy taking notes about little things in my life like that.
Oh, it sounds like you're optimizing in many ways, right? And then you don't have to think
about that topic at all forever unless something drastic changes.
That's right. I love efficiency, so.
Now that process you just described sounds quite scientific to me and I know that you
have a scientific background. So can you walk us through that background?
I'm a software engineer, but I didn't take any computer science classes. I am a physicist
by trade.
It all makes sense now.
Yeah, I did my bachelors in physics and then I did my masters in high energy physics, experimental
high energy physics. I'm not a theorist. And I worked at CERN for a year while I did that.
Yeah, no, that was amazing. I lived in France, just on the French Swiss border, rode my bike
to CERN every day, worked in building 42.
That sounds so romantic.
It was lovely. I worked on the ATLAS detector, so I could talk for hours about high energy
physics, but I think we don't have that kind of time. But what I did was I worked on a
piece of the detector that didn't have a good protection from the radiation. So the signal
going through each of those kind of areas was not usable. So I came up with a scheme
to calibrate those so that the energy that went through those sections could be actually
used towards finding the Higgs. So I was lucky enough to be a published author on the Higgs
paper among 3000 other physicists.
That seems pretty cool. That's like world class stuff. And when you say Higgs, for those
who don't know the shorthand, that would be?
Oh, right. Higgs boson.
When that was sort of just all happening. Man, did I ever throw myself into a whole
bunch of reading all about that. And it's so fascinating. Like, you have a certain perspective
of it. But, you know, as someone in the public, it was still really quite exciting. Some of
the discoveries that are happening at CERN and around the Higgs, especially, it seemed
like a really cool time.
I still follow, you know, the physics that comes out of CERN specifically. I mean, it's
quite interesting. And I just love physics. But so when I was doing my master's, that's
when I learned how to write some code because you had lots of data coming through the detector
every day and that had to be analyzed. And you're kind of racing against, you know, the
other general purpose detector, which is CMS. And so there's like a healthy rivalry there.
Of course, ATLAS is objectively the best.
Perfect for you.
Yeah. There was a lot of kind of statistics. Well, a lot of similar things actually with
what goes on in machine learning today. You know, there was a lot of data. My advisor
was just like, write some C code to make these plots. And you got to, you know, just figure
it out. So I Googled my way to writing some working C code.
Wow.
I hated it at first, but after I was able to actually do things with it, I really loved
it. And then after I graduated, I started my PhD in physics. But after one semester
I was like, you know what? I think I'm good on grad school and feeling constantly guilty
that I'm not working 24 hours a day. So I went and got a job writing Perl tests at HP.
Really?
Yeah.
Sounds cool.
So I was happy to do that for several reasons. I mean, I am from Texas. And then I moved
to Colorado to start my PhD and the town I lived in, which was Fort Collins was absolutely
amazing and I didn't want to leave. And so it was nice to be able to stay in Fort Collins
and have a job making real person money and have time to like read books for leisure and,
you know, pursue hobbies and that kind of thing. And I don't miss school. However, I
do miss doing math on a daily basis. Just pages of math was so much fun. Oh my God.
There are so many of the inclinations that you're describing in yourself, like your love
of math and deep interest in physics and in measuring things that is of course like multi
disciplinary benefits. So I could see how those would translate into what you're doing
now in a really beautiful way, even if, you know, clearly there's a little bit less math,
but a lot of those principles still carry over in a, in a really beautiful way. So at
least you're still using some of it in many ways.
Absolutely. I think that computer science is a little bit more of a challenge relative
to physics because physics is very much recipes. Here's a recipe to do a thing. You follow
that recipe and discovering recipes to do things. But in computer science, there's like
multiple ways to do one thing. Like how to make a Debian package. Well, it kind of depends
on some things, you know, how does that project do things? Do they use get build package or
maybe they use, you know, pristine tar balls or just Deb build or P builder or who knows,
like
But could those not be described as like a variety of recipes or at least like sub recipes
to a greater recipe?
Definitely. But then it's all about kind of determining what recipe you need to do to
solve this problem. Instead of like in physics, it's like, here's your recipe to this.
But is that only because someone else has figured the recipe out for you? Like in some
of your research in physics, I would imagine like that would still be an unknown.
Yeah. I think, you know, the research in physics, um, you're always asking yourself a question,
at least in my experience, I was asking a question, you know, I want to answer this
particular thing with this data set. So what plots, what graphs, you know, can I make to
answer that? And then that answer would always lead to another question that always involved
making more plots based on the data to answer that question. And so it was just like a linear
trail of questions. It was a lot of fun. Yeah. I quite enjoyed it. Sometimes I wish, you
know, I'd had more of a traditional computer science background, but I had so much fun
in physics, especially getting to, you know, work at CERN that I, I don't think I would
take it back for anything.
Why do you say that sometimes you could see a more traditional path as helpful? Like what
is it about that traditional path that you feel like you're, you've missed out on or
that you would benefit from?
Just, there's like foundational concepts I've come across in the last, I guess I've
been a software engineer for like nine years now.
Congratulations. That's awesome.
Oh yeah. Thanks. Yeah. Like there's, there's just been several times over that nine years
where I've, you know, having some piece of fundamental computer science knowledge would
have really helped me out because I didn't have that. Then it was a bit more of a struggle
and maybe a little frustrating to get there. But that's kind of why I like to write documentation
so that I can help myself learn those things and kind of build up that foundational knowledge,
even if it's a little late.
Right. Because with documentation, you have to sort of understand the underlying principles
in order to communicate effectively. So self-serving. Interesting.
Yeah, that's right. I mean, everything we do is self-serving.
Fair enough. Fair enough. Even if we don't want to admit it.
Right. Yes.
But you were saying, yeah, learning it yourself, like in order to teach someone else, you have
to learn it yourself.
Yeah. Yeah. I mean, I learned a lot of physics just by teaching labs to undergrads. You know,
they would ask questions and be like, oh, well, that's a good question. I will go find
that out. Like just to be able to explain, you know, the concept. This is what today's
lab is about. You know, when you're preparing for things like that, it leads you to do some
more research to understand maybe some finer points that you weren't so sure on.
How would you describe either similar or different the creative space in either realm? Like because
there's, as you know, quite a lot of creativity in software, but there's also quite a lot
of creativity. I have some friends who are, well, you included, but some other friends
who are also deeply in the physics realm. Do you find that creativity to be similar
or complimentary or is it totally different?
Yeah, I guess it is similar. I mean, it is like the creativity comes from the logic and
the logic, you know, they're both logical things, computer science and physics, although
sometimes one or both of those might seem a little illogical, but there's definitely
some method to the madness. So yeah, I think that they are quite similar in their creativity.
I certainly get creative whenever I just write some code, especially like if I'm doing it
at home for personal use or something. I'm not the kind of programmer that seeks to write
the tightest code in the world. I'm a physicist programmer and what we do is we write code
that works.
To get you to the next point, right?
Yeah. So a couple of jobs ago I was writing some Python tests and this coworker was kind
of looking over this function I had written and he was like, oh, you could do these like
four lines in like two lines. And I was like, so? Like, I really don't care. Ain't nobody
got time for that. Like this works. Let's move on. As long as there's not some like,
you know, major performance hit then. Yeah. In my development experience, and you're
going to agree with this, I know already, and it's true of my background in photography
and perhaps even yours in physics, but it's, there's something essential about like gleaning
when you need to compromise. So when is, you know, really elegant code important, you know,
in terms of performance would be a perfect example. But then there's also something to
be said for your own development time and energy and creativity, right? So if you got
four lines that work as well as those two lines and that's not really going to have
any, you know, play a different role, then maybe there is more value in just moving on
and working on the next, you know, the next four lines. That's an area that fascinates
me is in my trying to break my own leanings towards perfectionism is knowing when enough
is good enough, you know, like, like a B plus is maybe enough in this case. And maybe the
true skill is knowing how to evaluate that for each situation.
Yeah, I do agree. I mean, I could play the devil's advocate and say that I could see
an argument for the other side that would give you an opportunity to learn the language
a little bit better to learn this, you know, maybe a new feature of the language. I'm not
going to learn that unless I don't use it. But I tend to kind of barrel through things
as you know, I want to get to my goal as quickly as possible. Maybe that goes back to the competitive
thing. But yeah, so I just want to write something that works and then move on. That's yeah,
that's typically how I approach things. I think what's lovely is that there are so
many different types of us right of people and approaches to solving problems. So I would
imagine in an open source environment, having several people looking at some code, and I
don't know if that's your experience, but having several different types of people looking
at the same code might be helpful in that way, because you'd have, for instance, you
who barrels through as you suggested, but solves the problem and then someone else who
comes through behind you and just maybe, I don't want to say clean it up, because that's
that's kind of suggest that that what you've written is sort of under a negative light,
but just maybe add some elegance or performance to that kind of stuff.
Definitely. I mean, diversity is important in all aspects of our life. So yeah, I mean,
having more eyes on code by all walks of life is always a good thing.
And that brings me back to your mentioning how you wish sometimes that you had that sort
of classic computer science background, because I think there is an argument to the benefits
of not having that, you know, you look at problems a little differently than someone
who's, I'll call it classically trained, but someone who's gone through the standard learning
path may be trained to see problems a certain way, but that diversity that you're bringing
from not having that might also be a benefit. So don't be too hard on yourself.
That's a good point. No, that's a good point. I mean, and I think honestly that employers
have seen that maybe before I have, because they say, oh, a physicist. And I'm like, hang
on there. You know, I'm not like a genius or anything. Just anybody can study physics.
You say that.
In physics, we make things sound harder than they really are. We like to use complicated
terms like calorimeter and, you know, boson. We actually read an article the other day
about how scientists like to do that. They like to, you know, jargon things up to make
it sound fancy. But when the layman reads, you know, a scientific article or something
with that jargon, it actually deters them from wanting to pursue science in general.
That's unfortunate.
That's a challenge, isn't it? Because I see that in my photography realm as well, is that
there's all these terms that are very helpful if you're sort of deep in that topic because
it points to a very specific, I don't know, instrument or concept, for instance. But you're
right. It does push some distance between maybe the, I'll call it the uninitiated to
approach those topics. And I imagine that's true in software as well.
Yeah. I mean, I think people in general like to create a niche little space for them and
their kind, right? Like...
It's our tribe.
Yeah, it's our tribe. Exactly. It makes it feel special and exclusive. But that's a double
edged sword, right? So...
Maybe it's the role of documentation to sort of guide people from one realm to the other.
Yeah. Yeah. I think documentation is such a key of communication. I write all kinds
of documentation for myself, especially if I have to learn something new, then I want
to write everything down. That way I can hand it off to someone and not have to remember
anything about it or come back to it in six months and be able to pick it back up pretty
quickly. So anytime I'm learning something new, I write a ton of like personal documentation
and it feels so good. It feels like I don't have to remember this. So if I go to sleep,
you know, tonight and then the morning I'm like, oh yeah, what was that command? I can
just go look at it.
And so you find the time dedicated to documenting worthwhile in the end?
100%. Maybe that's why I am kind of slower when I do things because I make sure to document
alongside at the same time. I just need it. Like it's cathartic and it helps me when I
need to refer back to it. I find, you know, projects that have good documentation. I think
like, I wonder who wrote this. I would like to meet that person. They did a very good
job. I would like to buy them a beer, you know?
I've heard repeatedly the value of documentation and yet so often the people who write good
documentation are sort of hidden away in the shadows.
Not everybody loves it and I don't understand that, but I do love it and I am definitely
going to continue to write documentation.
Thank you for loving it. We need people like you.
Yeah, sure. I enjoy it. So it's win-win.
Can I ask you about your personal documentation infrastructure?
Sure.
Like how do you capture these things and how are you storing them long-term, et cetera,
et cetera?
Well, there's an application that I absolutely love. I've been using Cherry Tree for about
nine years. I found it when I found software engineering. And it's kind of like OneNote,
but for Linux and it's very simple and amazing. And so I absolutely love this project. I've
actually told several people, converted several people to be Cherry Tree users, snapped it.
It's in the Snap Store.
Also self-serving.
I can't live without it. It's fantastic.
Oh, wow.
Yeah. So I use Cherry Tree daily for like, well, really for everything. But I like to
take a lot of notes on what I do with my workday every day, just to kind of make sure that
I'm capturing the work that I do, that I can communicate that.
So tracking your progress through time?
Tracking my progress. Yeah. And kind of make a summary every week to share that with my
coworkers. But also I have another Cherry Tree document that's just like full of how-tos.
So yeah, it's just been growing over the years. The way I write documentation is very similar
to Markdown. But yeah, it's really a rich text editor that I just love.
So I've not heard of Cherry Tree. I'm going to dive into it because this is a topic I
really like, this sort of personal documentation stuff. And I'm a huge believer and have been
for many years. But what's the underlying infrastructure? Is this being synced to various
devices of yours or is it just at a single workstation?
It's on my workstation, but I have a hacky script to kind of sync it on my devices.
It's a B plus script, it sounds like.
Yeah, I mean, it works, right? So whenever I am using my laptop, I can just run this
little script and it'll grab the latest changes. There's no like mobile Cherry Tree. So I am
at a loss with my phone. I have to email myself things to put in Cherry Tree.
It sounds like something you wish existed.
Oh my God, yes. Yes. Well, I mean, once I have a Linux phone, then...
It's coming.
I know.
So maybe that's actually a really nice segue. I wanted to ask you a little bit more about
your documentation in the professional realm. And I know you've spent some time at Purism
doing some documentation stuff there. Can you walk us through that a little bit?
Before Purism, I was just writing, you know, how-tos for myself, for other coworkers. And
I was browsing Reddit one day and I saw that the Librem 5 project was launched and dove
into that and applied for a job and was really happy to be hired as the documentation engineer.
Amazing.
I set up the VM and the NGINX and, you know, the Sphinx documentation there and just started
writing it. Worked with some amazing engineers to try and document the fantastic technologies
that they were putting together for the Librem 5. And that was a lot of fun. I really enjoyed
it.
I'm not with Purism anymore, just because after my maternity leave, I became a project
manager. I thought, I can give this a shot. It was a hole that needed to be filled. And
it turns out I really didn't like that at all. And it wasn't really a good path for
me to kind of go back to what I was doing.
Ah, got it.
So yeah, I mean, I am really honored to have written so much documentation for Librem 5
and to work with the engineers on that team. They are absolute rock stars.
It sounds like once again, you are sort of on the trailblazing side of some pretty cool
technology.
Yeah, I feel really like lucky to have had that opportunity.
It also sounds like you're seeking it.
Yeah, of course. We should always be seeking to make ourselves happy, right?
If trailblazing is what makes you happy, go for it. That's awesome. But I admire how you
sort of discovered a project, saw how it's something that you could really believe in
and then threw yourself 100% at it. That's really quite lovely and honorable, I think.
Oh, yeah. Thanks. I mean, I'm going to chase after whatever makes me happy and that definitely
fit the bill.
I really do like writing documentation. I sadly haven't had enough time to do that in
my current role because I think the SnapCraft documentation could use some additional effort
from myself. I mean, it's definitely being maintained and the community is awesome and
they help out. But I think I have some to give in that realm too. I just got to find
some time.
Well, I would imagine for you being kind of new on the desktop team that there's quite
the learning curve you're going through. So maybe as that settles a little bit, you'll
find some time.
That's kind of what I'm hoping. I mean, I am kind of documenting some stuff just for
myself on the side in Cherry Tree, like everything to do with, oh, not open office, LibreOffice.
And so yeah, like I have documented some stuff about SnapCraft, but mostly I've used kind
of what's out there.
I've read only like kind of surface level stuff and I found it quite nice. But I would
imagine like any project, there's always more that can be done.
At Purism, that was one thing. That was standing up a whole documentation thing from the ground
up. So I got to lay it out however I wanted to, however I felt was the most intuitive.
Whereas this is completely different, right? There's an established like documentation
tree, hierarchy already out there that maybe that's not how exactly how I would have laid
it out, but we can always add more links, right?
And I think referencing relevant pages at relevant times can always improve existing
documentation. So I would like to find some time to do that maybe in the next year or
so.
One topic I wanted to touch on is we sort of chatted about it very briefly when we talked
a few days ago and I wanted to come back to it because it was one of those moments where
I was like, no, no, no, no, let's keep it for when we chat. And we had quickly explored
the topic of the economics of open source. And I know that's something that's close
to your heart that you feel is often misunderstood. And I just wondered some of your additional
thoughts on that.
I'm passionate about open source. And when I started working at HP, I was very proprietary
and I didn't really understand open source. I've been a Linux user exclusively for a long
time actually, maybe 15 years. But it didn't contribute. There was a point where I tried
to contribute, but I got shot down in a very mean way. And then I was kind of gun shy.
How come and why? What was the environment like? And you don't have to mention a project
specifically.
Yeah, no, I just I wanted to help out on a package. And I thought I'd like I'd read
the project's documentation and it was misleading. And so I offered to take over maintainership
because I thought that that's the way you did that. And it was wrong. And what I should
have done is I should have offered to improve the documentation. But instead, I was terrified
of this faceless community. So I just stood back and watched for many years until I found
the Gnome community and they've been very nice.
And what was it about that Gnome community that convinced you that it was a safe environment
to rejoin?
The people, they were just so nice and willing to help and answer questions. And they were
real people with real faces that I met.
That makes all the difference, doesn't it?
It does.
To know that there's another human being on the other side of that that code or that that
documentation.
Yeah, I'm I'm a visual person. And so I like to see faces. So I went to LinuxCon in 2015,
which now it's like all things are open source summit. That's what it is. But in 2015, it
was LinuxCon and it was amazing. And I was standing outside of some talk that was full.
I forget what it was. And I was just kind of standing like at the door, open doors.
And right behind me was this booth for the Free Software Foundation. And I started talking
with some of the guys there and I ended up buying Freedom 2.0, which is Richard Stallman's
book. And I read it and loved it. And it answered a lot of questions for me. But it also kind
of led me to read Cathedral and the Bazaar, which is almost like a response. And the combination
of those two books really helped me kind of understand the history of open source and
why we need it, even just like the terms open source versus free software, how there can
be some contentiousness there. And then, you know, in my various jobs, not every manager
understands the value of open source and why it's good to contribute back. A lot of companies
just think like, oh, we'll take from open source and we'll modify it so it meets our
needs and then we'll kind of keep it closed. And so even just knowing that if you take
something that's under GPL and modify it, and then if a customer wants to see that code,
like you have to give it to them. I learned a lot about licenses and I mean, there's still
so much that I don't know. And then how companies can make money off of like support and other
services or even just like bring you in with this open free product and then sell you some
other things. So just like how people make money, how companies can make money off of
open source, that didn't make sense to me for a long time. But now it does. And I think
it's awesome.
Yeah, I think you're right in that it's often misunderstood. You know, even I've run into
that speaking, you know, when people ask me what I do on a daily basis, as soon as I introduce
the concept of Linux and open source and how that works for those who are interested enough
to want to learn a little bit more, often that's the question that guests ask is, well,
okay, if you're giving this stuff for free, how does anybody make money? I get that often.
And I think you're probably right, like having a deep understanding of that realm and the
history to it and the social aspects that are connected to these topics really gives
you a perspective on why the work you're doing is important to you, but also why it's important
to share it. And so do you find that that's something that allows you to kind of venture
on and do the hard work and to inspire you to continue to push yourself?
Absolutely. Even just knowing that any code I put out there is going to be possibly viewed
by, you know, hundreds or maybe even thousands of people. It drives you to write more readable,
more maintainable, nicer code, not necessarily more efficient code, but I am all about communication.
So yeah, definitely more readable code for sure. I've tried to explain it to people like
my parents and they still don't get it. So I think I still need to work on my communication
about that specifically. It is kind of a hard topic for some people.
In open source, we tend to be quite giving. How does that compare to the scientific community?
When you're doing research, it's free flowing amongst your colleagues, but there are going
to be rivalries in any area of the sciences. And so of course you want to kind of keep
your research details from them while being, you know, so there's definitely some reflection.
I think the open source community is more giving, more open. It's all open. That's what
it's about. It's got open in the name. There's no like open science, open physics.
Heather, I wanted to ask you a question if you had an ask of our community, of the listeners.
Is there something that you'd want to put to them? Something you'd like them to try
or go and explore or maybe something to go read?
I actually have two things. One of them is to be empathetic. It's good to do that in
all walks of life, but when you're opening bug reports, and I hope that if any listener
finds a bug or find something that even just doesn't seem right, they're not sure it's
a bug, just file a bug. But when you file a bug, try and think about the person that's
going to receive that and kind of, you know, add things to the bug report that you would
need if you were that person. So how to reproduce the bug. What version of the software were
you using? Maybe what version of the operating system are you running? Any little details
like that. People that receive bugs that, you know, it's their job to fix them really
appreciate good bug reports. And I think good bug reports come from empathy.
I like that a lot. I think you're right in that empathy can be applied in so many different
areas. But in this one specifically, it reminds me of what we touched on earlier, how there's
a human element to every side of software, even though sometimes that seems stripped
away. But yeah, bringing empathy to the person who's trying to help you get rid of the bug
in the future. Sounds super powerful and reminds me of bringing solutions to a problem instead
of just problems to a problem.
Definitely. Yes, it's always good to try and offer a solution. And so my second ask would
be a little abstract, but I think that it's always good to sharpen critical thinking skills.
And so I would implore your listeners to go play a board game.
I love that.
I love board games. I play them any chance I get. So yes, please go find a board game
and play it.
When you said critical thinking, that was not going to be the first area I expected
you to mention. But what is it about board games for you that really touches on that
critical thinking area?
When you play a strategy game of some sort, if you're trying to win, then you have to
think critically about, you have to analyze, did I make the best decisions here? Even if
you feel almost territorial of like, my strategy is the best. Well, is it though? And stop
and think and do your best and if you win, then you win.
Is there a game or two that you recommend that really kind of grabs you?
So there's a game called Onitama, which is a two player chess-like game where you kind
of have pictures with little grids on them. And it tells you like how you can move each
piece. And there's five cards. So each player has two cards and there's another card. And
whenever you play a card, then it kind of goes into this other pile and then it eventually
rotates to the other player. So that's a lot of fun. It's not super interactive.
For a long game, my favorite game would probably be a feast for Odin, which is a worker placement
game kind of like Agricola. I also really like Norse mythology. That's kind of why I
bought that game.
It helps.
Yeah, but that's actually a really good game. I have lots of games and I love to play them.
Magic the Gathering. I'm also a big magic nerd.
Sounds lovely. Heather, if people wanted to get connected with you, where would you like
to send them?
People can email me. I am hellsworth at gnome.org. I am on Twitter, although I don't make my
way over to Twitter very often. Only when I'm procrastinating.
For some of us, that's often.
I know, right? Email is the best. I will answer my emails.
Sounds great. Well, Heather, thank you so much for your time and for connecting on all
these super fun topics. I really, really appreciate it.
Sure. Anytime.
Okay, great. Let's chat soon.

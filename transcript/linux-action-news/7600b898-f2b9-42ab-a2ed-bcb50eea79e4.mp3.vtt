WEBVTT

00:00.000 --> 00:08.160
Hello, and welcome to Linux Action News, episode 218, recorded on December 5, 2021.

00:08.160 --> 00:09.160
I'm Chris.

00:09.160 --> 00:10.160
I'm Wes.

00:10.160 --> 00:11.160
Hello, Wes.

00:11.160 --> 00:12.160
Let's do the news.

00:12.160 --> 00:15.840
We start with some fantastic news from the Blender project, which just released version

00:15.840 --> 00:20.440
3.0, a significant update for the leading open source 3D modeling application.

00:20.440 --> 00:24.520
3.0 introduces the Big Cycles 10 upgrade to its Cycles rendering engine.

00:24.520 --> 00:28.720
Now, what that really means is performance and a lot of it.

00:28.720 --> 00:32.680
And there's been some work in this version to also support special AMD hardware, Nvidia

00:32.680 --> 00:35.360
hardware, and Apple's new SoC.

00:35.360 --> 00:39.000
Really performance throughout this release seems to be one of the big takeaways.

00:39.000 --> 00:43.800
Blender 3.0 features many animation improvements, faster opening of large files, the standard

00:43.800 --> 00:48.880
compression of blend files, VR controller input improvements, and just a whole bunch

00:48.880 --> 00:49.880
more.

00:49.880 --> 00:50.880
Oh, man.

00:50.880 --> 00:52.640
I actually could see a use case for VR with Blender.

00:52.640 --> 00:55.240
That sounds kind of like a blast.

00:55.240 --> 00:59.680
I noticed that Michael Arbel over at Ferronix is planning to publish some CPU and Nvidia

00:59.680 --> 01:02.880
GPU benchmarks with the 3.0 release in the coming days.

01:02.880 --> 01:04.880
So if you're interested, keep your eyes peeled for that.

01:04.880 --> 01:09.960
But in a big way, many of these new features, they're just visual in nature.

01:09.960 --> 01:14.860
And the Blender project has done a really solid job of posting a few videos that explain

01:14.860 --> 01:20.120
what Blender is and really what the new goodies are, including their new features in six minutes.

01:20.120 --> 01:21.440
It's definitely worth checking out.

01:21.440 --> 01:25.160
We'll have a link to their channel in the show notes.

01:25.160 --> 01:29.120
We've been covering the incredible growth of the Linux vendor firmware service since

01:29.120 --> 01:30.120
its inception.

01:30.120 --> 01:35.680
And this week, Richard Hughes of Red Hat announced he had just deployed the first bits of significant

01:35.680 --> 01:38.640
new functionality since the launch of the project.

01:38.640 --> 01:43.700
It's going to be called the best known configuration, and it will be in the next release of Fwupty.

01:43.700 --> 01:48.120
It's a feature that really reflects the increased adoption of LVFS in the server hardware and

01:48.120 --> 01:49.420
data center space.

01:49.420 --> 01:55.480
The idea is vendors can flag their quote best configuration when a system has a lot of different

01:55.480 --> 02:00.760
possible firmware packages from UFI to different types of controllers, network hardware, and

02:00.760 --> 02:04.840
of course, just a wide array of other upgradable firmware and microcode that might be in a

02:04.840 --> 02:06.480
modern data center rack.

02:06.480 --> 02:10.400
Which is a problem that gets more complex when you also have various generations of

02:10.400 --> 02:12.560
hardware out in production.

02:12.560 --> 02:16.840
With Fwupty's best known configuration option, it's now easy to convey those recommendations

02:16.840 --> 02:18.980
as a compatible set.

02:18.980 --> 02:23.080
The option works for both upgrading and downgrading firmware, and you'll still have the ability

02:23.080 --> 02:28.040
to bypass the best known configuration for a given system if you'd like to.

02:28.040 --> 02:33.200
Fwupty 1.7.3 is due out before year's end, and should include support for this exciting

02:33.200 --> 02:35.920
new functionality.

02:35.920 --> 02:38.020
Linode dot com slash LAN.

02:38.020 --> 02:42.560
Go there to get $100 in 60 day credit on a new account, and you go there to support the

02:42.560 --> 02:43.560
show.

02:43.560 --> 02:45.600
So that's Linode dot com slash LAN.

02:45.600 --> 02:49.560
Linode provides virtual servers that make it easy and affordable for you to host anything

02:49.560 --> 02:50.560
in the cloud.

02:50.560 --> 02:55.320
If you're a gamer, Linode has a great DIY system, or you can do one of their easy one

02:55.320 --> 02:58.560
click apps like Minecraft or a CSGO server.

02:58.560 --> 03:00.160
Maybe you want to build your own website.

03:00.160 --> 03:05.120
Most entry level hosting services are fine for a while, but eventually you want to be

03:05.120 --> 03:06.120
in control.

03:06.120 --> 03:09.600
You want to be able to do what you want, and you want to actually own your website.

03:09.600 --> 03:14.000
Linode is your step up to a powerful, totally customizable cloud hosting.

03:14.000 --> 03:17.960
If you're into gaming, maybe you want to build a website, or you just want to put something

03:17.960 --> 03:22.160
up in the cloud and access it anywhere, Linode is there for you.

03:22.160 --> 03:26.780
And they have VPN friendly virtual servers if you'd like to set it up as a VPN system.

03:26.780 --> 03:30.840
And every plan comes with Linode's amazing human powered customer support.

03:30.840 --> 03:34.760
If you need help, someone will pick up the phone, respond to your email, or reply to

03:34.760 --> 03:38.720
you on social, 24-7-3-65.

03:38.720 --> 03:42.920
Linode has a bunch of great features on top of their virtual hosting as well.

03:42.920 --> 03:48.360
They have bare metal servers now rolling out, S3 compatible object storage, Kubernetes support,

03:48.360 --> 03:51.560
a powerful DNS manager, VLAN support.

03:51.560 --> 03:53.420
There's a great opportunity to learn.

03:53.420 --> 03:56.960
They also have Alma Linux and Rocky Linux if you want to give those a go, as well as

03:56.960 --> 04:01.960
just a bunch of great distros, all the great distros, as they say.

04:01.960 --> 04:04.380
So go try it out for yourself and support the show.

04:04.380 --> 04:06.440
It's linode.com slash LAN.

04:06.440 --> 04:11.120
Go there to get $100 in 60 day credit on a new account, and go there to support the show.

04:11.120 --> 04:14.880
It's linode.com slash LAN.

04:14.880 --> 04:16.320
Linux.ting.com.

04:16.320 --> 04:19.840
If you're sick of overpaying for cell service, go see how much you could save and then take

04:19.840 --> 04:23.960
25 bucks off at linux.ting.com.

04:23.960 --> 04:27.000
Ting's an MVNO or a mobile virtual network operator.

04:27.000 --> 04:31.640
That means Ting mobile customers get access to the big carrier networks nationwide, but

04:31.640 --> 04:36.040
they get Ting's great customer service and a lower cost for service.

04:36.040 --> 04:42.200
Ting has all of the coverage, a great mix of plans, LTE, and 5G, but you interface with

04:42.200 --> 04:46.320
Ting who can focus on customer support because they're not digging holes in the ground to

04:46.320 --> 04:47.640
stand up towers.

04:47.640 --> 04:50.680
And I say that, but really it's not just the holes in the ground, it's all of the local

04:50.680 --> 04:51.680
regulations.

04:51.680 --> 04:56.340
I had a past client who was in that business and it is mind blowing how much time and money

04:56.340 --> 04:59.120
is wasted in just businesses there.

04:59.120 --> 05:02.720
Just so many different people taking a little cut there.

05:02.720 --> 05:04.840
Ting bypasses and resets all of that.

05:04.840 --> 05:07.480
Ting operates on top of multiple carriers.

05:07.480 --> 05:11.640
They become like a meta carrier and then you interface with them for customer support,

05:11.640 --> 05:14.080
which is fantastic, the best in the business.

05:14.080 --> 05:18.120
Or you can use their great dashboard to manage your account directly, which again, best in

05:18.120 --> 05:19.120
the business.

05:19.120 --> 05:22.680
I mean, these are things that have kept me with Ting since 2013.

05:22.680 --> 05:26.920
I've had a Ting account, I've had a Ting plan active since 2013.

05:26.920 --> 05:30.960
Ting mobile is just a smarter way to do it with plans that start at $10 a month and work

05:30.960 --> 05:32.840
their way up depending on what you need.

05:32.840 --> 05:36.760
You know that I love their set 12 plan, for example, you get 12 gigs of data and unlimited

05:36.760 --> 05:38.920
talk and text for 35 bucks a month.

05:38.920 --> 05:41.120
If you're a family, they got plans that'll work for you.

05:41.120 --> 05:46.480
Every plan gets access to Ting's great customer service and no contracts, no contracts.

05:46.480 --> 05:49.400
It's simple to switch to Ting too, pretty much any phone will work because they support

05:49.400 --> 05:50.400
multiple networks.

05:50.400 --> 05:53.200
So get started at linux.ting.com.

05:53.200 --> 05:56.060
Check your current phone, see if it'll work, create an account, pick the plan that's right

05:56.060 --> 05:57.060
for you.

05:57.060 --> 06:00.080
Ting will then send you a SIM card, you pop that in your phone and you're gonna get active

06:00.080 --> 06:01.140
in minutes.

06:01.140 --> 06:02.360
It's a great way to do mobile.

06:02.360 --> 06:06.280
It's a smarter way to do mobile and it's the next generation of Ting mobile.

06:06.280 --> 06:09.720
Go see how much you could save and then take 25 bucks off of that.

06:09.720 --> 06:14.080
It's time, linux.ting.com.

06:14.080 --> 06:19.440
On Friday, December 3rd, Red Hat announced the release of CentOS Stream 9, which comes

06:19.440 --> 06:23.980
just ahead of CentOS 8, reaching end of life at the end of the year.

06:23.980 --> 06:29.520
In that announcement, Red Hat touched on where CentOS Stream fits in the enterprise ecosystem,

06:29.520 --> 06:34.640
saying, quote, CentOS Stream is a continuous delivery distribution serving as the next

06:34.640 --> 06:36.040
point release of RHEL.

06:36.040 --> 06:41.440
Before a package is formally introduced to Stream, it undergoes a battery of tests and

06:41.440 --> 06:47.120
checks both automated and manual to ensure it meets the stringent standards for packages

06:47.120 --> 06:49.640
that are included in RHEL.

06:49.640 --> 06:54.080
Updates posted to CentOS Stream are identical to those posted to the unreleased minor version

06:54.080 --> 06:56.120
of Red Hat Enterprise Linux.

06:56.120 --> 07:01.080
So to talk about CentOS 9 and Apple 9, Carl George from Red Hat is joining us.

07:01.080 --> 07:02.720
Carl, welcome to Linux Action News.

07:02.720 --> 07:03.720
Howdy.

07:03.720 --> 07:08.300
So I noticed in the announcement for Stream 9, so let's start there, that they're using

07:08.300 --> 07:11.620
the term now continuous delivery distribution.

07:11.620 --> 07:12.620
What does that mean?

07:12.620 --> 07:16.800
Really, the big change that happened was that we got rid of minor versions.

07:16.800 --> 07:20.760
They're still a major version, but we're not batching up a whole lot of updates and delivering

07:20.760 --> 07:26.080
them every six months as a CentOS 8.3, 8.4.

07:26.080 --> 07:29.960
We originally tried to describe that as a roll-in release because it rolls from one

07:29.960 --> 07:31.680
minor version to the other.

07:31.680 --> 07:36.080
The kind of oversight there was that roll-in release is a well-established term that kind

07:36.080 --> 07:39.080
of means no major versions and no EOL dates.

07:39.080 --> 07:41.800
So that was kind of a slip up.

07:41.800 --> 07:44.440
We've moved away from the roll-in release terminology.

07:44.440 --> 07:48.840
What we're going with now is the continuously delivered model, which it still is a major

07:48.840 --> 07:52.040
version and you're not upgraded from one major version to the next.

07:52.040 --> 07:56.080
You still stay on that major version with those stability guarantees there, but you

07:56.080 --> 07:57.760
just don't have any minor versions.

07:57.760 --> 08:01.800
So there's no big update every six months that you have to plan out.

08:01.800 --> 08:03.360
It just comes in a little out of time.

08:03.360 --> 08:05.400
Yeah, that seems like the part that people have been confused about.

08:05.400 --> 08:08.560
It's like, what exactly is going to change in my packages and how much are they going

08:08.560 --> 08:09.560
to change?

08:09.560 --> 08:10.560
Because that's really what matters here.

08:10.560 --> 08:15.600
And that kind of mirrors the, I think that's where the new messaging is coming from is

08:15.600 --> 08:20.080
it kind of mirrors the CICD workflows that a lot of development teams are moving towards

08:20.080 --> 08:23.920
rather than having a massive relief with a whole bunch of changes.

08:23.920 --> 08:30.340
Just deploy often, deploy regularly, so that way you know that it works all the time.

08:30.340 --> 08:33.200
You can catch an upgrade that you have to make a swipe tweak to a config file or something.

08:33.200 --> 08:36.520
You can do it right now and not have to figure out why that changed six months ago and go

08:36.520 --> 08:37.520
figure it out then.

08:37.520 --> 08:38.520
Right.

08:38.520 --> 08:41.600
And that's not for professional sysadmins.

08:41.600 --> 08:46.360
It's not really that big of a change because any sysadmin that was just applying updates,

08:46.360 --> 08:51.480
even to a stable system like RHEL, and just apply the updates, reboot, and just cross

08:51.480 --> 08:55.320
your fingers, that was never really responsible or recommended.

08:55.320 --> 09:00.480
Professional sysadmins usually do, for a minor release, maybe they do snapshots for in-between

09:00.480 --> 09:01.480
releases.

09:01.480 --> 09:05.040
They at least have a maintenance window and they'll apply the updates on a non-production

09:05.040 --> 09:08.080
system first to make sure that everything works as expected.

09:08.080 --> 09:09.360
And really nothing's changed there.

09:09.360 --> 09:15.520
You do the same thing with Stream and on a system like RHEL, maybe 99 times out of 100,

09:15.520 --> 09:17.120
the updates apply perfectly fine.

09:17.120 --> 09:19.680
And then on Stream, maybe 98 times out of 100.

09:19.680 --> 09:21.480
It's not really that different.

09:21.480 --> 09:23.520
Those are made up numbers, of course.

09:23.520 --> 09:24.520
Right.

09:24.520 --> 09:30.520
So Stream 9 seems like a very special release for one very kind of significant and only

09:30.520 --> 09:33.100
ever going to be in this release kind of moment.

09:33.100 --> 09:37.920
And that is Stream 8, and you can correct me if I'm wrong, but it seems like that's

09:37.920 --> 09:42.520
where the idea of the CentOS Stream model was validated, was in Stream 8.

09:42.520 --> 09:47.240
But Stream 8 was born in an era where CentOS was in a more traditional release model.

09:47.240 --> 09:52.540
Stream 9 is the first CentOS release that is born in the now Stream era.

09:52.540 --> 09:55.200
It's like a Stream-first distribution.

09:55.200 --> 09:58.840
How does that change things in Stream 9 as a result of that?

09:58.840 --> 10:00.800
Well, it makes things much better.

10:00.800 --> 10:02.240
You're spot on with your description.

10:02.240 --> 10:07.040
RHEL 8 launched first, and then we launched CentOS 8 and CentOS 8 Stream.

10:07.040 --> 10:11.520
And it was kind of a proof of concept as far as the development workflows and how it's

10:11.520 --> 10:12.520
built.

10:12.520 --> 10:13.880
It's really bolted on after the fact.

10:13.880 --> 10:19.480
We talk about rebuild distributions, and CentOS Stream 8 is still a rebuild distribution.

10:19.480 --> 10:23.400
It's just rebuilt from the RHEL sources at a different point in time before they're released

10:23.400 --> 10:25.820
as the public RHEL product.

10:25.820 --> 10:31.440
With 9, how things change is that the RHEL maintainers actually are doing their builds

10:31.440 --> 10:37.000
in CentOS first, and then RHEL basically forks off from that work later.

10:37.000 --> 10:38.440
That's a big change.

10:38.440 --> 10:41.720
It makes the development workflows make a lot more sense.

10:41.720 --> 10:44.820
There's a lot less confusion, and it makes our contribution path a lot cleaner, which

10:44.820 --> 10:48.920
is the biggest changes with CentOS Stream is that we wanted people to be able to contribute

10:48.920 --> 10:51.080
to RHEL from outside the company.

10:51.080 --> 10:54.760
And in order to do that, we had to open up our development processes, and that's what

10:54.760 --> 10:56.880
Stream's really all about.

10:56.880 --> 11:00.800
We started that with 8, kind of a proof of concept model, but we're still figuring it

11:00.800 --> 11:01.800
out.

11:01.800 --> 11:04.480
And with 9, that's really coming home, and we're getting a lot more contributions.

11:04.480 --> 11:09.080
We actually have proper pull requests for the sources for Stream 9.

11:09.080 --> 11:12.600
We had the contribution model in 8, but there was no actual pull request you could do.

11:12.600 --> 11:14.980
Now those sources are in GitLab.

11:14.980 --> 11:19.120
That same workflow model, you can do that now, and it's made things a lot smoother and

11:19.120 --> 11:20.840
easier for people to understand, I think.

11:20.840 --> 11:23.840
I'm kind of excited as our view, you know, we're onlookers on the side watching this

11:23.840 --> 11:26.820
happen, and so much more of this is happening out, you know, not just behind the closed

11:26.820 --> 11:27.820
doors of Red Hat.

11:27.820 --> 11:31.000
So there's new contributions, but we also get to see that play out, which is exciting.

11:31.000 --> 11:35.320
Yeah, it feels like in Stream 8, people really did take advantage of the model.

11:35.320 --> 11:38.800
When it was announced, it was, this is a possible benefit.

11:38.800 --> 11:41.520
People can participate in upstream RHEL now.

11:41.520 --> 11:45.760
But I've actually seen several reports of Facebook and Alma Linux and others contributing

11:45.760 --> 11:49.440
now to Stream, so it really does seem like it's gaining some traction in that regard.

11:49.440 --> 11:50.440
Absolutely.

11:50.440 --> 11:53.080
You know, with Facebook, they're using Stream directly.

11:53.080 --> 11:54.080
They like it.

11:54.080 --> 11:57.120
They like getting those updates faster, and I mentioned kind of the professional sysadmin

11:57.120 --> 12:01.540
outlook of, you know, you apply updates in a less important area first, make sure they

12:01.540 --> 12:05.680
work as expected, like a non-prod environment, a staging environment, and then you apply

12:05.680 --> 12:07.800
the same updates in production.

12:07.800 --> 12:12.400
That is, I don't know a lot about how their systems work, but I have a good feeling based

12:12.400 --> 12:17.640
on clues externally that they take those kind of precautions, like most professional enterprise

12:17.640 --> 12:19.260
organizations do.

12:19.260 --> 12:21.640
And for the rebuilds, they have the big advantage now.

12:21.640 --> 12:24.720
They have a huge advantage that traditional CentOS never had.

12:24.720 --> 12:29.260
They can actually make changes rather than just having to accept what we call bug-for-bug

12:29.260 --> 12:31.800
compatibility at face value.

12:31.800 --> 12:34.440
Those communities, you know, they're focused on using it and consuming it.

12:34.440 --> 12:37.560
They can, you know, there's definitely a community there, and they can help, okay, well, here's

12:37.560 --> 12:39.660
how you set this thing up and here's how you do this.

12:39.660 --> 12:44.520
But when you actually hit a bug, the answer a lot of times is just, well, the same bugs

12:44.520 --> 12:47.260
in RHEL, so that's how it is.

12:47.260 --> 12:48.260
You can work around it.

12:48.260 --> 12:49.260
That's what you wanted, right?

12:49.260 --> 12:50.260
Yeah.

12:50.260 --> 12:52.300
That's what bug-for-bug compatibility gets you.

12:52.300 --> 12:56.040
But now, you know, that was the way it was in, you know, traditional CentOS as well.

12:56.040 --> 13:00.160
It was just, hey, if you can reproduce this bug on RHEL, then there's nothing we can do.

13:00.160 --> 13:06.560
But now, you know, those distributions, and I've even seen it on the AlmaLinux FAQ, where

13:06.560 --> 13:11.480
if you have a bug like that, you can actually go to CentOS, reproduce it there.

13:11.480 --> 13:16.760
And if CentOS Stream, of course, reproduce it there, file a bug report, and even send

13:16.760 --> 13:21.020
in a fix yourself to say, hey, here's the problem, here's how it's fixed.

13:21.020 --> 13:25.880
Get that into the CentOS Stream first, and then that gets into the next RHEL minor release,

13:25.880 --> 13:30.080
which then those rebuild distributions can rebuild into their own distributions and get

13:30.080 --> 13:31.080
things fixed.

13:31.080 --> 13:36.000
So, I'm looking at this chart, and I think you've put some of these together that kind

13:36.000 --> 13:41.320
of explain how the different releases are based off of what versions of Fedora and etc.

13:41.320 --> 13:45.400
And if I'm getting this right, it looks like Stream 9 is based off of Fedora 34, so it

13:45.400 --> 13:51.480
means in there we're getting Pine64, RockPro 64 support now in Stream, and it also means

13:51.480 --> 13:56.080
if anyone wants to try it out as a desktop, we have GNOME 40 and Pipewire in there, too.

13:56.080 --> 13:57.080
Right.

13:57.080 --> 13:59.240
I'm not going to guarantee any of all of those specific things.

13:59.240 --> 14:01.280
I know GNOME 40 is in there.

14:01.280 --> 14:05.640
The kernel changes a good bit, so not everything is identical as far as hardware support.

14:05.640 --> 14:07.000
There may be more, there may be less.

14:07.000 --> 14:08.640
Some things may not be supported.

14:08.640 --> 14:14.080
I know that they're still building the Stream 9 kernel with ButterFest disabled, which unfortunately

14:14.080 --> 14:18.440
I like ButterFest, a lot of other people do, but at this time the RHEL engineers aren't

14:18.440 --> 14:22.960
prepared to support that in the product, so they're not going to put anything in Stream

14:22.960 --> 14:25.920
9 that they're not prepared for to go into RHEL.

14:25.920 --> 14:30.460
So hopefully in the future we can, you know, as Fedora keeps doing awesome things with

14:30.460 --> 14:34.520
ButterFest and, you know, like our friend Neil keeps proving out awesome features and

14:34.520 --> 14:38.920
things that it unlocks, hopefully, you know, RHEL customers see that and start demanding

14:38.920 --> 14:44.500
that of Red Hat, and so that way, you know, it becomes worth our time to put, to re-enable

14:44.500 --> 14:47.080
ButterFest and the RHEL kernel at some point in the future.

14:47.080 --> 14:50.440
A little disappointing perhaps for us enthusiasts over here, but I can certainly appreciate

14:50.440 --> 14:52.840
that, you know, you only want to support what you're committed to supporting that you know

14:52.840 --> 14:54.480
won't cause more pain than gain.

14:54.480 --> 14:55.800
Yeah, and it's a server OS.

14:55.800 --> 14:56.800
It's not a desktop.

14:56.800 --> 14:57.800
It's not focused at the desktop.

14:57.800 --> 15:01.440
I just have dreams of an ultimate stream-based workstation one day.

15:01.440 --> 15:02.920
Oh, me too.

15:02.920 --> 15:06.760
I think that, I think they'd be really good, but, you know, like you said, one of the,

15:06.760 --> 15:10.720
what they're prepared to support, sometimes I say we, sometimes I say they, you know,

15:10.720 --> 15:12.840
I'm not directly working on RHEL.

15:12.840 --> 15:16.760
I'm more on the CentOS side, and there's a lot of, you know, tons of people involved,

15:16.760 --> 15:21.040
but one of the reasons that RHEL is so good and so stable as it is, is because of that

15:21.040 --> 15:25.960
real strict, you know, mentality and that development process of we only ship a limited

15:25.960 --> 15:27.440
number of packages.

15:27.440 --> 15:30.680
We're going to support what we ship, you know, there's varying levels of support depending

15:30.680 --> 15:35.480
on what repo is in the service level, but we're not going to put something in there

15:35.480 --> 15:37.880
just because, oh, well, it might as well go in there.

15:37.880 --> 15:41.840
No, that's not how you create a real stable distribution and how you create a good product

15:41.840 --> 15:42.840
on that end.

15:42.840 --> 15:43.840
Right.

15:43.840 --> 15:44.840
That is the product right there.

15:44.840 --> 15:45.840
Totally fair.

15:45.840 --> 15:48.400
So let's talk a little bit about Apple 9.

15:48.400 --> 15:52.440
So this is extra packages for enterprise Linux, and I know this is something you work directly

15:52.440 --> 15:57.180
on and it fits in with the overall Red Hat 9 beta, Stream 9.

15:57.180 --> 16:03.000
So could you just give a brief layman's explanation of what Apple is and why it's kind of a lifeline

16:03.000 --> 16:06.960
for those of us that might be running older distributions, older enterprise Linuxes?

16:06.960 --> 16:09.380
So Apple's been around for a while.

16:09.380 --> 16:12.440
It stands for extra packages for enterprise Linux.

16:12.440 --> 16:18.760
And what that is, is it is a sub-project of the Fedora project where whenever, like in

16:18.760 --> 16:22.440
that chart you're referencing that's in the Stream 9 announcement, it kind of has lines

16:22.440 --> 16:27.200
showing how Stream 9 development forked off from Fedora 34.

16:27.200 --> 16:31.480
It wasn't every package in Fedora 34 that follows that model, it was a select subset

16:31.480 --> 16:33.560
of packages.

16:33.560 --> 16:39.720
Every package in Fedora that doesn't get selected to be in Stream 9 and then RHEL, they then

16:39.720 --> 16:46.160
become eligible to be part of the Apple project, which is Fedora packages rebuilt to be compatible

16:46.160 --> 16:47.960
with enterprise Linux.

16:47.960 --> 16:48.960
That's been around for a while.

16:48.960 --> 16:50.960
It's not a new thing with 9 or anything.

16:50.960 --> 16:52.200
I don't remember the very first one.

16:52.200 --> 16:58.640
I think it might have been Apple 4 for RHEL 4, but it is probably the most popular third

16:58.640 --> 17:03.520
party repository for, I say third party, it's from the Fedora project, but it's still technically

17:03.520 --> 17:06.000
third party because it's not from RHEL.

17:06.000 --> 17:10.920
And it's probably the most popular repository and the qualifications for packages to get

17:10.920 --> 17:14.920
into it, it's just what I said, anything that's in RHEL can't be in it.

17:14.920 --> 17:19.480
So it has a reputation for being extremely safe and stable.

17:19.480 --> 17:23.920
There's some third party repositories that you might add to a RHEL system that upgrade

17:23.920 --> 17:28.200
packages in the base release that can cause problems with other packages installing or

17:28.200 --> 17:30.860
instability and Apple doesn't do that at all.

17:30.860 --> 17:35.360
It is strictly extra packages, only things that aren't in the distribution already.

17:35.360 --> 17:38.880
We were just talking about how seriously Red Hat takes the support that they provide.

17:38.880 --> 17:42.480
So there must be a lot of pressure on Apple to get that right if you're adding extra packages,

17:42.480 --> 17:45.960
but like you say, you really don't want that to add any instability to your enterprise

17:45.960 --> 17:46.960
system.

17:46.960 --> 17:49.280
So how do you go about doing that?

17:49.280 --> 17:54.220
And those extra packages, it's a very clear line of we're not allowing things that can

17:54.220 --> 17:56.520
change the base distribution.

17:56.520 --> 17:59.000
Apple to be clear is it's from Fedora.

17:59.000 --> 18:04.280
It is not supported in any way, shape or manner at all other than, you know, supported is

18:04.280 --> 18:10.760
a very overloaded term, but as far as actual paid RHEL support, it's not supported in any

18:10.760 --> 18:11.760
way.

18:11.760 --> 18:15.400
Now, Red Hat is supporting the project in a different way, kind of like they support

18:15.400 --> 18:19.600
Fedora by providing resources and infrastructure and things like that.

18:19.600 --> 18:24.400
In fact, just a few months ago, I think y'all covered it on land also that there's an announcement

18:24.400 --> 18:29.600
that CPE, community platform engineering team inside Red Hat was going to staff Apple work.

18:29.600 --> 18:33.600
That's the team I'm on and I am part of that staffing.

18:33.600 --> 18:39.560
So we're having a few people on my team be allowed to primarily focus on Apple and getting

18:39.560 --> 18:43.680
it ready, which is we're seeing the direct result of that now, Apple 9 is ready well

18:43.680 --> 18:45.680
before the RHEL 9 launch.

18:45.680 --> 18:50.880
And historically, that was something that happened after the fact, usually, I think,

18:50.880 --> 18:56.600
you know, three to six months after a RHEL major release, the corresponding Apple repository

18:56.600 --> 18:58.360
will come online.

18:58.360 --> 19:03.640
And it was just, that was a side effect of it always kind of being everyone, something

19:03.640 --> 19:08.680
everyone liked and wanted to work on, but it was never anyone's primary responsibility.

19:08.680 --> 19:11.320
It was always just kind of a spare time thing.

19:11.320 --> 19:15.760
And that's what Red Hat wants to change, because even though it's not supported, there are

19:15.760 --> 19:21.320
a lot of customers that say, I'm not upgrading to the next major version of RHEL until these

19:21.320 --> 19:23.600
other packages that I depend on are available.

19:23.600 --> 19:26.800
I don't care that they're not supported, I just need them to exist.

19:26.800 --> 19:28.160
And that's what Apple provides.

19:28.160 --> 19:32.480
And that's why it's important for Red Hat, even though it doesn't directly affect anything

19:32.480 --> 19:38.720
with support and with customers, it does affect the customers and what major version of RHEL

19:38.720 --> 19:39.720
they can be using.

19:39.720 --> 19:41.880
I think that, you know, there's so many different layers here.

19:41.880 --> 19:45.040
And as you mentioned, support is an overloaded word, but that's what makes watching this

19:45.040 --> 19:46.040
so fascinating.

19:46.040 --> 19:49.600
You know, not only is there the business angle of Red Hat, but there's all these different

19:49.600 --> 19:53.360
layers of people using it and relying on the open source ecosystem around it.

19:53.360 --> 19:58.980
And another interesting thing is that a lot of times packages in Apple can sort of get

19:58.980 --> 20:01.280
promoted to RHEL.

20:01.280 --> 20:05.040
That's a gross oversimplification, but that's kind of how it works.

20:05.040 --> 20:09.680
Basically a package can be in Apple, can get proven out and shown to work.

20:09.680 --> 20:13.860
And as more and more, you know, customers depend on that, those customers can push eventually

20:13.860 --> 20:18.240
and say, okay, well, we said we only cared about it being available, but now it's got

20:18.240 --> 20:21.080
some problems and we really want more work on it.

20:21.080 --> 20:24.740
And you know, we listen to our customers and if enough customers are pushing for that,

20:24.740 --> 20:28.360
that's something that, you know, the RHEL product people can decide, this is something

20:28.360 --> 20:33.480
that we're prepared to support and we'll add it to the distribution at which time it becomes

20:33.480 --> 20:36.380
ineligible to be in Apple and it'll get retired there.

20:36.380 --> 20:41.200
But then the maintainership switches from a Fedora package maintainer to a RHEL engineer

20:41.200 --> 20:43.240
that'll maintain it at that point.

20:43.240 --> 20:46.080
Thank you to Carl George for coming on and explaining all of that to us.

20:46.080 --> 20:50.240
Sent Off Stream 9 really does seem like a special release, but there's a lot going on

20:50.240 --> 20:52.280
and just a few more episodes left in the year.

20:52.280 --> 20:56.920
So check out linuxactionnews.com slash subscribe for all the ways to get those new episodes

20:56.920 --> 21:01.660
and linuxactionnews.com slash contact for ways to get in touch.

21:01.660 --> 21:07.120
And don't miss Self-Hosted 59, where I attempt to give Portainer a try.

21:07.120 --> 21:10.700
I'll let you check it out, selfhosted.show slash 59.

21:10.700 --> 21:15.160
As for us, well, we'll be back next Monday with our weekly take on the latest Linux and

21:15.160 --> 21:16.840
open source news.

21:16.840 --> 21:17.840
Thanks for joining us.

21:17.840 --> 21:42.880
That's all the news for this week.


WEBVTT

00:00.000 --> 00:16.020
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

00:16.020 --> 00:20.400
This is episode 63, recorded on July 22nd, 2018.

00:20.400 --> 00:21.400
I'm Chris.

00:21.400 --> 00:22.400
And I'm Joe.

00:22.400 --> 00:23.400
Hello, Joe.

00:23.400 --> 00:30.560
I'm so excited to be connected with you, and I am elated to announce that Reaper 5.93 is

00:30.560 --> 00:32.400
now available for Linux.

00:32.400 --> 00:33.400
What, what, what?

00:33.400 --> 00:34.880
Wait, let's stop here for a second.

00:34.880 --> 00:35.880
What's Reaper?

00:35.880 --> 00:41.560
Reaper is a proprietary piece of audio software that you and Noah absolutely love, and I won't

00:41.560 --> 00:45.880
touch with the barge pole because up to now it's been some dodgy binary downloaded from

00:45.880 --> 00:46.880
a website somewhere.

00:46.880 --> 00:48.840
Well, tell people how you really feel, Joe.

00:48.840 --> 00:50.280
Yeah, that's exactly it.

00:50.280 --> 00:54.920
Actually, in fact, I don't talk a lot about it because I felt like it could go away at

00:54.920 --> 00:59.760
any moment, and so I didn't want to get people's hopes up, but Reaper is proprietary.

00:59.760 --> 01:01.520
Let's make sure that's totally clear.

01:01.520 --> 01:02.520
Joe just mentioned it.

01:02.520 --> 01:06.640
It is proprietary, and there are free software solutions like Ardour.

01:06.640 --> 01:11.000
It's a DAO or a digital audio workstation or a DAW, however people might pronounce that,

01:11.000 --> 01:13.500
and it's a full featured one at that.

01:13.500 --> 01:18.360
Reaper is really enterprise grade, and we've been using it at Jupiter Broadcasting since

01:18.360 --> 01:23.360
January, and I think Noah's been using it for about a year-ish, more than that, and

01:23.360 --> 01:24.600
I switched everything over.

01:24.600 --> 01:28.840
When I edit a show and I record a show, it's all done on Reaper under Linux now, and it

01:28.840 --> 01:33.460
was one of the last components that let me go 100% Linux.

01:33.460 --> 01:38.180
Every show produced in the studio is recorded and has been recorded since January at least

01:38.180 --> 01:43.600
with Reaper, but today they're making the Linux build officially available.

01:43.600 --> 01:48.240
Now it does require GTK 3, although if you want to hack on it a bit, you actually can't

01:48.240 --> 01:49.840
make it work with GTK 2.

01:49.840 --> 01:55.360
I don't know why you would want to, but you can, and you need to either be on a 64-bit

01:55.360 --> 02:02.880
x86 platform or an ARM 7 platform like a Raspberry Pi, which is pretty cool because I have definitely

02:02.880 --> 02:10.400
been considering building a Raspberry Pi 3-based backup recorder using Reaper because why not?

02:10.400 --> 02:13.400
So the Linux build is still considered experimental.

02:13.400 --> 02:18.480
It works with also jack and pulse audio, as well as one of Reaper's great features, dummy

02:18.480 --> 02:21.640
audio interfaces where you can loop audio around.

02:21.640 --> 02:27.240
It also has an open control surface API that has a ton of user-developed extensions that

02:27.240 --> 02:31.240
are available to control different surfaces or initiate remote recordings and all those

02:31.240 --> 02:35.080
kinds of things, and it's a full-featured multi-track recorder.

02:35.080 --> 02:41.600
In the Jupiter Broadcasting Studio, I have a Behringer X32 mixer, 32 channels plus 32

02:41.600 --> 02:42.600
inputs.

02:42.600 --> 02:48.880
This is a big mixer, and it all connects into a Reaper workstation running Kubuntu 18.04,

02:48.880 --> 02:52.720
and Reaper is able to actualize every one of those channels.

02:52.720 --> 02:55.160
I can record each channel independently.

02:55.160 --> 02:58.440
I can apply different effects, and if you have more than a two-core processor, you can

02:58.440 --> 03:01.480
do some really great mixing in Reaper in real time.

03:01.480 --> 03:04.800
I mean, this is some serious enterprise-grade software here.

03:04.800 --> 03:09.080
I've been using it to produce shows for seven months, like this one right now is being recorded

03:09.080 --> 03:13.360
my end on Reaper through my mixer on Linux.

03:13.360 --> 03:16.860
This is a big deal that they've been working on for a while that before we weren't really

03:16.860 --> 03:18.300
supposed to be talking about.

03:18.300 --> 03:22.440
They didn't really want to tell anybody that you could do this, and now they're making

03:22.440 --> 03:23.480
it official.

03:23.480 --> 03:28.020
And the big thing is it's dang near feature parity with the Mac and Windows versions.

03:28.020 --> 03:30.080
It's just dang, it's like perfect, Joe.

03:30.080 --> 03:31.440
It's perfect.

03:31.440 --> 03:32.680
I'm kind of excited.

03:32.680 --> 03:34.720
So what makes this different from Ardour then?

03:34.720 --> 03:39.320
Why would you choose a proprietary solution over a free software one like Ardour, which

03:39.320 --> 03:43.240
I understand is pretty much feature complete and could do all of the stuff that you've

03:43.240 --> 03:44.240
just said?

03:44.240 --> 03:45.240
Yeah.

03:45.240 --> 03:49.660
And if I was making music, I definitely would be skewed towards Ardour, 100%.

03:49.660 --> 03:54.520
But I'm recording vocals and audio, and I'm trying to split things out onto multiple tracks

03:54.520 --> 03:55.740
in real time.

03:55.740 --> 03:59.640
And then I want to export out individual tracks into FLAC files, and I want to have a whole

03:59.640 --> 04:01.880
open source workflow.

04:01.880 --> 04:04.480
Ironically, Reaper gives me that.

04:04.480 --> 04:09.720
When it records in real time, it's always recording to a WAV file that I can grab at

04:09.720 --> 04:12.600
any point, even if the recorder crashes.

04:12.600 --> 04:13.600
So it's architected.

04:13.600 --> 04:18.800
The recording mechanism is architected in a way that is conducive to podcast production.

04:18.800 --> 04:20.760
With music, you're sitting there, you're recording a program.

04:20.760 --> 04:25.160
Yeah, man, it sucks if your program crashes, but you can pick back up and you can keep

04:25.160 --> 04:26.160
playing.

04:26.160 --> 04:31.280
But with a production like this, if our programs were to crash and we were to lose our entire

04:31.280 --> 04:34.960
conversation, you and I would seriously be like, ah, maybe we should just call it this

04:34.960 --> 04:35.960
week.

04:35.960 --> 04:38.920
And then we would sit there and grouse for a bit, and we would load it back up, and we

04:38.920 --> 04:41.680
would have to rerecord the whole episode.

04:41.680 --> 04:47.040
But with the way that Reaper is architected, it's saving to your hard drive in real time.

04:47.040 --> 04:49.600
And you can go in there and say, you know what I want you to do, Reaper?

04:49.600 --> 04:54.480
I want you to save to multiple hard drives at the same time, because I want to have redundancy

04:54.480 --> 04:56.960
with these recordings, which I love.

04:56.960 --> 05:02.600
So I can record to an SSD and a RAID in this rig that I have for Reaper, and it gives me

05:02.600 --> 05:06.820
that peace of mind that if this application were to ever lock up and crash on me, I've

05:06.820 --> 05:09.440
got two separate real time backups.

05:09.440 --> 05:14.080
But I'll mention this, just speaking of stability, this instance of Reaper has been running on

05:14.080 --> 05:18.600
this Kubuntu 1804 machine for 60 days without issue.

05:18.600 --> 05:21.440
I have not even closed the application in 60 days.

05:21.440 --> 05:25.240
I close the project, I create a new one, and I record, in part because I have been on the

05:25.240 --> 05:28.840
road for almost two months, remoting into these systems.

05:28.840 --> 05:32.800
They have to be absolutely rock solid reliable, because when I'm on the road, I can't really

05:32.800 --> 05:34.280
troubleshoot these things.

05:34.280 --> 05:36.560
And Reaper has been so solid.

05:36.560 --> 05:40.960
So while Ardour is great, and it's open, and I've actually contributed to Ardour before,

05:40.960 --> 05:45.560
and I may again, this is perfect for recording vocals, recording podcasts.

05:45.560 --> 05:49.960
And what gets me super excited, and the reason why I'm really kind of, I've just been bursting

05:49.960 --> 05:54.360
at the seams to talk about Reaper, is because I feel like it can move the needle on podcast

05:54.360 --> 05:56.280
production on Linux.

05:56.280 --> 06:00.680
This software makes Linux a great podcast production platform.

06:00.680 --> 06:02.740
Yeah, but it's proprietary, so I don't care.

06:02.740 --> 06:03.740
So let's move on.

06:03.740 --> 06:06.680
Let's talk about Atari and their VCS.

06:06.680 --> 06:12.800
They posted an update and an FAQ this week, which I think on LUP you felt quite positive

06:12.800 --> 06:15.440
about, but I don't, I'm afraid.

06:15.440 --> 06:17.000
I'm curious why you're concerned.

06:17.000 --> 06:21.520
So yeah, Atari, over on their Medium page, has posted an update saying they're going

06:21.520 --> 06:25.880
with the AMD Bristol Ridge family of APUs, and they talk about the thermal reasons and

06:25.880 --> 06:28.820
the performance gains and losses for that.

06:28.820 --> 06:32.820
They talk about building the different hardware and the UI elements, and building out their

06:32.820 --> 06:36.840
Atari store, and creating technical requirements for submitting apps.

06:36.840 --> 06:38.320
This all looks pretty positive.

06:38.320 --> 06:44.480
We've gotten details on Atari OS, which is a customized version of the Linux kernel that

06:44.480 --> 06:50.200
they're calling Atari OS, and even some details on how you can load your own OS inside a hypervisor

06:50.200 --> 06:54.260
that gives you full access to the GPU and disk and things like that.

06:54.260 --> 06:57.920
So if you want to just load straight, standard Linux on this thing, you're going to be able

06:57.920 --> 06:58.920
to.

06:58.920 --> 07:02.520
I read this whole thing, checking off all the boxes for me, Joe, perfectly happy with

07:02.520 --> 07:06.040
the multiple hundreds of dollars I've now committed to my crowd funder.

07:06.040 --> 07:07.040
I'm not concerned at all.

07:07.040 --> 07:09.040
No, no, Joe, I'm not nervous.

07:09.040 --> 07:10.040
Okay.

07:10.040 --> 07:14.880
Well, eight gigabytes of RAM, up from the four that they originally said, that's got

07:14.880 --> 07:16.640
to be a good thing.

07:16.640 --> 07:20.640
However, it's not the hardware that I have a problem with, it's this software situation.

07:20.640 --> 07:26.560
The fact that they are running their own hypervisor, they're writing their own hypervisor here,

07:26.560 --> 07:28.600
which is a custom version of Linux.

07:28.600 --> 07:32.920
If you want to boot your own version of Linux on the machine, then it's not going to have

07:32.920 --> 07:34.160
full hardware access.

07:34.160 --> 07:38.000
Okay, the hypervisor is going to give it pass through to the GPU and all the rest of it,

07:38.000 --> 07:43.240
but you're not going to be able to completely put your own operating system on this thing,

07:43.240 --> 07:48.720
which means that when their support dries up, when the company goes bust, you're not

07:48.720 --> 07:52.520
going to get any security updates for that hypervisor bit, which is crucially important.

07:52.520 --> 07:56.920
Well, I would completely agree with you, Joe, except for I don't believe anything they wrote

07:56.920 --> 07:57.920
there.

07:57.920 --> 08:02.880
When I read Atari OS Virtualizer, I quite literally translated that in my brain as KVM.

08:02.880 --> 08:06.200
I would expect it just to be standard KVM virtual machines.

08:06.200 --> 08:08.920
Nobody would be stupid enough to write their own, right?

08:08.920 --> 08:13.920
I would think so, especially when it's kind of an Ubuntu derivative to begin with, which

08:13.920 --> 08:17.120
comes with that and you're using a modern kernel.

08:17.120 --> 08:20.760
It would literally be lunacy to try to recreate your own hypervisor.

08:20.760 --> 08:22.160
KVM is fantastic.

08:22.160 --> 08:23.160
It's really good.

08:23.160 --> 08:26.120
So you would be nuts not to use that.

08:26.120 --> 08:29.920
But they talk about the process of being in secure mode and stuff like that, which makes

08:29.920 --> 08:35.680
me think that maybe it's going to have a secure boot that you can't turn off and it won't

08:35.680 --> 08:40.780
boot anything apart from the implementation of this hypervisor, which you potentially

08:40.780 --> 08:42.720
can't change.

08:42.720 --> 08:45.040
It's still not exactly clear, is it?

08:45.040 --> 08:50.320
There's almost more questions raised by this Q&A, FAQ, whatever you want to call it, than

08:50.320 --> 08:51.320
are answered.

08:51.320 --> 08:52.320
Right.

08:52.320 --> 08:55.120
And to your earlier point about long term, like if this doesn't work out, what happens

08:55.120 --> 08:57.520
to the hardware, this is the point of concern.

08:57.520 --> 08:59.160
I think you've identified it here.

08:59.160 --> 09:00.160
And I'll say this.

09:00.160 --> 09:05.240
It seems like what they're doing is they are creating their own signed boot system.

09:05.240 --> 09:09.720
And the way it will work is it will check the internal disk for a signed operating system,

09:09.720 --> 09:11.120
and it will load that.

09:11.120 --> 09:16.000
But before it checks the internal disk, it will check all of the USB subsystems to see

09:16.000 --> 09:20.880
if there is a device attached that has a loadable system.

09:20.880 --> 09:25.720
And in this FAQ, they say they're going to release example code based on standard upstream

09:25.720 --> 09:27.660
Ubuntu on how to do that.

09:27.660 --> 09:32.920
But you'll essentially have an external USB drive with a loadable Linux system on there

09:32.920 --> 09:35.080
that will be an open spec.

09:35.080 --> 09:40.160
And if it's detected at boot time, it'll boot that first before it even checks the internal

09:40.160 --> 09:43.160
disk on this Atari VCS.

09:43.160 --> 09:48.000
And they claim that when it boots that external drive, you'll have full access to the disk,

09:48.000 --> 09:52.880
the GPU, the network, that the virtualizer will pass it all through.

09:52.880 --> 09:53.880
That is legitimate.

09:53.880 --> 09:54.880
That is how it works.

09:54.880 --> 09:58.640
Because if you think about it, the kernel is the one that's doing the driver enumeration

09:58.640 --> 10:00.080
to the virtual operating system.

10:00.080 --> 10:01.400
Well, guess what?

10:01.400 --> 10:02.400
News.

10:02.400 --> 10:05.680
The kernel is also what's doing the enumeration to the actual host operating system.

10:05.680 --> 10:08.000
So it's the same job for the kernel either way.

10:08.000 --> 10:09.600
And it has the same plumbing either way.

10:09.600 --> 10:11.200
And so it is actually very performant.

10:11.200 --> 10:12.440
It works very well.

10:12.440 --> 10:13.680
So you will have a good experience.

10:13.680 --> 10:15.180
And on that, you could load Kodi.

10:15.180 --> 10:18.460
You could load Plex or VLC, whatever you want to watch.

10:18.460 --> 10:20.240
You could load that on that external experience.

10:20.240 --> 10:21.560
And it should be pretty good.

10:21.560 --> 10:25.160
But when you detach that drive, it then goes into this signed mode where it has to be a

10:25.160 --> 10:26.840
signed operating system.

10:26.840 --> 10:30.720
So that way, you can load up the quote unquote experience where you have the store, you can

10:30.720 --> 10:32.520
buy apps and that kind of stuff.

10:32.520 --> 10:35.960
Yeah, and by the time we've moved on to kernel six and seven, and this thing's still running

10:35.960 --> 10:39.000
kernel four dot something, that'll be fun, won't it?

10:39.000 --> 10:40.000
That's a good point.

10:40.000 --> 10:43.960
I mean, after they're done, after they get this thing out, assuming they managed to ship

10:43.960 --> 10:46.320
it, they're going to have to be good stewards of a platform.

10:46.320 --> 10:49.960
They're going to have to deliver updates in a consistent manner.

10:49.960 --> 10:53.820
And because they didn't base it off of something like SteamOS, because they are rolling their

10:53.820 --> 10:56.960
own OS, they will be responsible for that.

10:56.960 --> 11:00.920
And we just won't know how they do until it's shipped, because obviously, we just have to

11:00.920 --> 11:01.920
wait and see.

11:01.920 --> 11:03.120
But I hope they can nail it.

11:03.120 --> 11:08.520
If you think about it, because they didn't build some crazy, esoteric, ARM-based platform

11:08.520 --> 11:13.520
with some custom GPU, they should be able to do this.

11:13.520 --> 11:15.440
It's all upstream.

11:15.440 --> 11:21.040
So they just have to repackage all of the hard work the upstream developers have done

11:21.040 --> 11:26.960
in a consumer-friendly way and ship it over what I assume will be an HTTP connection to

11:26.960 --> 11:28.840
these Atari VCS boxes.

11:28.840 --> 11:31.960
It should technically be possible.

11:31.960 --> 11:32.960
I guess we'll wait and see.

11:32.960 --> 11:36.800
Well, let's hope it's HTTPS rather than HTTP, but yeah.

11:36.800 --> 11:39.960
I hope it's Telnet, Joe, and I want it to stay that way.

11:39.960 --> 11:42.280
Well, we'll see.

11:42.280 --> 11:46.260
I look forward to hearing about your adventures with it when it finally arrives.

11:46.260 --> 11:48.720
I will give you a full report when I get the machine.

11:48.720 --> 11:51.720
But in the meantime, let's talk about our mobiles.

11:51.720 --> 11:56.160
If there was one thing that could really be a game changer, it would be the Librem 5 being

11:56.160 --> 11:59.360
a success, and we've got a progress update from Purism.

11:59.360 --> 12:01.440
Yeah, which is kind of a mixed bag, really.

12:01.440 --> 12:07.400
They're making some good progress with the software, but it looks like the prototype

12:07.400 --> 12:13.300
hardware has slipped from their original predicted date, which means presumably the final delivery

12:13.300 --> 12:14.460
is going to slip.

12:14.460 --> 12:20.680
They were saying January or certainly early 2019 for the final product, but that's looking

12:20.680 --> 12:22.840
increasingly unlikely now, isn't it?

12:22.840 --> 12:24.840
I think we've got two things to talk about here.

12:24.840 --> 12:29.200
So first of all, yeah, the dev boards have missed their shipping window of June.

12:29.200 --> 12:33.720
It looks like maybe they've been punted a month or so as a few things get worked out.

12:33.720 --> 12:39.120
But one thing that is jumping out at me, and this is the second one, is there is an issue

12:39.120 --> 12:44.120
I see developing here that also plagued the Ubuntu mobile project.

12:44.120 --> 12:49.800
And that is that they're building everything around a different version of the system on

12:49.800 --> 12:53.180
a chip than what they hope will ship in the final phone.

12:53.180 --> 13:00.000
So right now they are working with iMX6 system on a chip images, but eventually they want

13:00.000 --> 13:06.360
to actually ship the iMX8 based development boards, which have some significant improvements.

13:06.360 --> 13:12.200
And they're hoping that they can build it around the iMX6 and then bring it up to date

13:12.200 --> 13:13.840
to work with the iMX8.

13:13.840 --> 13:19.880
But the issue as of right now is you have very basic main kernel support for the iMX8

13:19.880 --> 13:21.240
board.

13:21.240 --> 13:24.860
Early days, it's hard to get Linux fully running and what does work doesn't include the graphic

13:24.860 --> 13:26.640
stack and things like that.

13:26.640 --> 13:31.000
Now it could technically work out, but in the case of Ubuntu mobile, this turned out

13:31.000 --> 13:36.480
to be a very costly calculation before they shipped it on some hardware that ended up

13:36.480 --> 13:41.040
being not well received because of a lot of rough edges that didn't materialize until

13:41.040 --> 13:43.280
they were on a newer version of the system on a chip.

13:43.280 --> 13:45.640
Yeah, that is definitely a concern.

13:45.640 --> 13:51.680
But have you actually tried out the QEMU image that they have put out there for you to test?

13:51.680 --> 13:53.640
No, I did not try it out.

13:53.640 --> 13:54.640
Did you give it a go?

13:54.640 --> 13:55.640
I didn't realize they had.

13:55.640 --> 13:59.880
Yeah, it's one of the many, many links in this update on their blog.

13:59.880 --> 14:02.720
If you follow it, there's pretty clear instructions how to get it running.

14:02.720 --> 14:07.480
I used boxes because that's just such an easy GUI to use.

14:07.480 --> 14:12.040
And I tried it on a really old laptop first and it was just terrible.

14:12.040 --> 14:13.920
So I thought, okay, I better try it on a decent laptop.

14:13.920 --> 14:18.400
It turns out you need more than four gigabytes of RAM on your laptop to be able to actually

14:18.400 --> 14:19.400
run this.

14:19.400 --> 14:20.400
Oh boy.

14:20.400 --> 14:21.400
Yeah.

14:21.400 --> 14:25.320
So it means that I can't run it on my old test hardware to run it on some decent hardware,

14:25.320 --> 14:27.480
but it was all right.

14:27.480 --> 14:31.560
It wasn't perfectly smooth, but then you have to assume that that's kind of hardware acceleration

14:31.560 --> 14:32.800
issues and stuff like that.

14:32.800 --> 14:38.680
But you did get a glimpse at the UI and the UI is very minimal.

14:38.680 --> 14:39.880
It's hard to describe really.

14:39.880 --> 14:44.720
You've got just an arrow at the bottom that you click and then that brings up an overlay

14:44.720 --> 14:47.720
of shortcuts on the left-hand side.

14:47.720 --> 14:49.760
And there are not many of them to start with.

14:49.760 --> 14:54.880
There's a browser and a calendar and a terminal, which is good.

14:54.880 --> 14:58.880
Obviously the first thing I did, open the terminal, apt-get update, dist-upgrade, yeah,

14:58.880 --> 14:59.880
that's working fine.

14:59.880 --> 15:00.880
Install VLC.

15:00.880 --> 15:03.320
So it's a proper Linux box, which is what we expected.

15:03.320 --> 15:05.040
It's pure OS.

15:05.040 --> 15:09.800
But the problem is you've got this phone screen that's in portrait mode and none of the

15:09.800 --> 15:11.960
applications are optimized for it yet.

15:11.960 --> 15:15.600
You can only see a little bit of the screen before you're having to scroll sideways.

15:15.600 --> 15:21.120
And it's just very much a work in progress, which you'd kind of expect, but that's kind

15:21.120 --> 15:22.960
of a red flag as well, isn't it?

15:22.960 --> 15:26.920
At this stage, they should be a little bit further on now.

15:26.920 --> 15:32.560
It's not even six months until they're planning to ship these things if they want to hit their

15:32.560 --> 15:33.560
original date.

15:33.560 --> 15:37.760
Okay, maybe you might say eight or nine if they slip a little bit, but I would really

15:37.760 --> 15:41.600
have hoped to have seen it a little bit further along than this at this stage.

15:41.600 --> 15:44.080
The clock is definitely ticking and there's more work to be done.

15:44.080 --> 15:48.160
I mean, there is patches they're trying to submit upstream to support things like Redshift.

15:48.160 --> 15:51.080
They're trying to work with Epiphany to render better on the screen.

15:51.080 --> 15:55.960
But I think you bring up a good point is so many of these applications are optimized for

15:55.960 --> 16:02.600
a widescreen aspect ratio and the phone experience is predominantly portrait.

16:02.600 --> 16:06.160
This is going to be, I think, long-term their biggest source of pain.

16:06.160 --> 16:10.620
Once they get the basic OS going, once they get their Wayland client working, once they

16:10.620 --> 16:15.760
get their Gnome Shell working, they're going to have to solve this problem.

16:15.760 --> 16:21.800
And I just, I feel like that's the rabbit hole that never truly ends.

16:21.800 --> 16:26.720
I wish them the best, but that's where I almost have to ask myself, would you be happy with

16:26.720 --> 16:32.440
some basic applications, Telegram or messaging, phone calls, and then you can plug it into

16:32.440 --> 16:38.720
an HDMI port and you can just use those applications in their regular aspect ratio on a real computer?

16:38.720 --> 16:41.000
You know, that original convergent stream?

16:41.000 --> 16:42.640
I could make that work, Joe.

16:42.640 --> 16:43.640
I could live with that reality.

16:43.640 --> 16:50.840
Well, if I were them, high up my list of priorities would be making screen rotate work flawlessly.

16:50.840 --> 17:02.960
Dio.co.co action, get a $100 credit at DigitalOcean when you sign up with a new account, Dio.co.co

17:02.960 --> 17:03.960
action.

17:03.960 --> 17:04.960
That's the URL to go to.

17:04.960 --> 17:09.360
Now, you can deploy a pre-built application or maybe just like a stack, like go for the

17:09.360 --> 17:14.080
lamp stack, or maybe you want to mess around with MongoDB, Node.js or Docker.

17:14.080 --> 17:20.760
You can click one button and all of the essentials get deployed, like the base Linux machine

17:20.760 --> 17:25.400
and the appropriate software sources, the appropriate software installations.

17:25.400 --> 17:30.000
One of the best experiences I ever had on DigitalOcean was when I just deployed an Ubuntu

17:30.000 --> 17:35.640
LTS stack with Docker because I had recently just gone through the process of building

17:35.640 --> 17:36.640
that.

17:36.640 --> 17:41.000
And so I was able to go through and kind of check how they did it, and it was spot on,

17:41.000 --> 17:42.360
like perfectly done.

17:42.360 --> 17:44.560
And that's when I really got a sense that they know what they're doing.

17:44.560 --> 17:49.320
They work upstream with these individual projects to make sure that they're working within their

17:49.320 --> 17:50.320
expectations.

17:50.320 --> 17:51.320
And that's a big part.

17:51.320 --> 17:55.960
And that makes a big, big, big difference when you're deploying this software.

17:55.960 --> 17:57.920
They're working with the FreeBSD project.

17:57.920 --> 17:59.640
They're working with Canonical.

17:59.640 --> 18:01.280
They're working with the Docker project.

18:01.280 --> 18:02.800
They're working with the Ghost project.

18:02.800 --> 18:06.740
They're working with each individual project to make sure that what they're deploying is

18:06.740 --> 18:09.920
how the projects would expect it and matches documentation.

18:09.920 --> 18:10.920
It's brilliant.

18:10.920 --> 18:15.080
And when you sign up with a $100 credit, you can deploy a super big system.

18:15.080 --> 18:17.320
My favorite one is $0.03 an hour.

18:17.320 --> 18:21.660
My Nextcloud and my Mumble instance, all on $0.03 an hour.

18:21.660 --> 18:25.000
But you can get something as low as $5 a month.

18:25.000 --> 18:26.000
Could you imagine?

18:26.000 --> 18:30.640
$5 a month for what used to be thousands of dollars a month in a data center.

18:30.640 --> 18:35.480
Plus they have baked-in monitoring cloud firewalls so you can block traffic at the network level

18:35.480 --> 18:37.360
so it never has to hit your machine.

18:37.360 --> 18:41.920
And team management, which has been amazing to work with because we have members in our

18:41.920 --> 18:44.780
audience that want to help us build infrastructure.

18:44.780 --> 18:49.080
We have super talented people, so I can use these team management and account tools to

18:49.080 --> 18:53.240
work with different individuals in our community so they have full control over the machines

18:53.240 --> 18:54.240
that they need.

18:54.240 --> 18:56.180
And I have backups going all the time.

18:56.180 --> 18:57.180
It's super easy to do.

18:57.180 --> 18:58.240
That's one checkbox.

18:58.240 --> 19:00.620
And snapshots before we make any big changes.

19:00.620 --> 19:04.640
And monitoring to make sure we're always as fast as possible.

19:04.640 --> 19:06.160
I combine all that together.

19:06.160 --> 19:09.720
You'd think I spend tons and tons and tons of time a week managing this, but Digital

19:09.720 --> 19:10.960
Ocean makes it so easy.

19:10.960 --> 19:15.080
And then you combine that with things like block storage, data centers all over the world,

19:15.080 --> 19:20.040
SSDs for every machine, and a super, super nice interface to manage all of it.

19:20.040 --> 19:21.440
And you can't go wrong.

19:21.440 --> 19:25.000
Just start by going to do.co.co action.

19:25.000 --> 19:34.960
OK, so it's been a fairly bad week for Google because the EU have decided to fine them $5

19:34.960 --> 19:41.680
million for antitrust violations in Android, specifically that they have been forcing manufacturers

19:41.680 --> 19:49.360
to install the Google search app and the Chrome browser if they want to have the Play Store.

19:49.360 --> 19:56.080
Also they've been making payments to manufacturers and mobile carriers to make them install just

19:56.080 --> 19:58.100
the Google search app.

19:58.100 --> 20:04.340
And I think most egregiously, they've been forcing manufacturers to not ship any other

20:04.340 --> 20:10.920
version of Android or any other OS if they want to ship Android on any of their phones.

20:10.920 --> 20:13.240
That for me is worth the $5 billion fine alone.

20:13.240 --> 20:17.360
I just have to say, I am so torn about this particular situation.

20:17.360 --> 20:22.600
I would love to hear the audience's reaction LinuxActionNews.com slash contact.

20:22.600 --> 20:25.000
But the key bit in here, you just you mentioned it.

20:25.000 --> 20:30.360
It's the key bit is you have to bundle Google search and Chrome as a condition to get access

20:30.360 --> 20:31.520
to the Play Store.

20:31.520 --> 20:36.440
I believe looking at this entire thing, this is the straw that broke the camel's back.

20:36.440 --> 20:39.360
That really is the part where they're playing heavy handed.

20:39.360 --> 20:43.200
And there is a bit in here that I think is fascinating for our audience and I want to

20:43.200 --> 20:44.520
draw attention to it.

20:44.520 --> 20:48.560
They talk about Android forks and they talk specifically about how Google has tried to

20:48.560 --> 20:52.960
squash them and they call out Amazon's Fire OS.

20:52.960 --> 20:55.360
So I want to pull this out and read this for the audience.

20:55.360 --> 21:02.200
They write in 2012 and 2013, Amazon tried to license to device manufacturers its Android

21:02.200 --> 21:04.600
fork called Fire OS.

21:04.600 --> 21:09.680
It wanted to cooperate with manufacturers to increase its chances of commercial success

21:09.680 --> 21:12.460
and manufacturers were interested.

21:12.460 --> 21:17.880
But due to Google's restrictions, manufacturers could not launch Fire OS on even a single

21:17.880 --> 21:18.880
device.

21:18.880 --> 21:22.800
They would have lost the right to sell Android phones with key Google apps.

21:22.800 --> 21:30.080
Nowadays, very few devices run with Fire OS, namely only those manufactured by Amazon themselves.

21:30.080 --> 21:33.000
This is not a proportionate outcome.

21:33.000 --> 21:38.100
So this discussion is in serious danger of getting pretty political here and I'm fairly

21:38.100 --> 21:41.520
libertarian I think when it comes to these things.

21:41.520 --> 21:45.280
And so I think that if people want to ship your product, the Play Store, then it's fair

21:45.280 --> 21:48.240
enough to impose certain restrictions on them.

21:48.240 --> 21:53.800
I think they may be a bit heavy handed to force Chrome and Google search, but where

21:53.800 --> 21:58.680
it crosses the line is stopping manufacturers from shipping other OSes on other devices

21:58.680 --> 22:00.800
that have got nothing to do with you.

22:00.800 --> 22:04.400
And you know, that really is fair enough.

22:04.400 --> 22:08.080
That's what I said at the top of this, they should be stopped from doing that.

22:08.080 --> 22:12.400
And the interesting thing here is that they haven't been given very long at all to fix

22:12.400 --> 22:13.400
this, have they?

22:13.400 --> 22:19.720
No, and I kind of feel like this is a punishment for success to a degree.

22:19.720 --> 22:26.000
Maybe this is because of the time I've recently spent in Texas, but I don't really believe

22:26.000 --> 22:30.520
anything Google has done in the last five years has been anything other than addressing

22:30.520 --> 22:36.360
shortcomings to compete with iOS, because iOS is a fully integrated solution.

22:36.360 --> 22:39.680
And that sounds like a douchebag term, but it really matters.

22:39.680 --> 22:43.520
It means the people that are creating the CPU and the GPU are talking to the people

22:43.520 --> 22:46.440
that are creating the operating system, that are creating the drivers, that are creating

22:46.440 --> 22:51.040
the App Store, that are then going out and making relationships with certain application

22:51.040 --> 22:52.560
developers.

22:52.560 --> 22:57.820
It very much is an integrated stack, and you don't see the EU going after Apple for bundling

22:57.820 --> 22:59.960
Safari and the App Store.

22:59.960 --> 23:04.640
It's almost a punishment for success simply because of the massive degree of success that

23:04.640 --> 23:06.440
they have achieved here.

23:06.440 --> 23:11.280
And Google's position there is really without stewardship, without heavy-handed management,

23:11.280 --> 23:14.200
open source projects and platforms could become a hot mess.

23:14.200 --> 23:19.680
And without their clever guidance, Android would be a dumpster fire.

23:19.680 --> 23:21.120
That is such a spurious argument though.

23:21.120 --> 23:24.540
I mean, okay, look around at the rest of the open source ecosystem.

23:24.540 --> 23:29.120
There's quite a lot of fragmentation there, but the best stuff floats to the top and becomes

23:29.120 --> 23:30.120
the most popular.

23:30.120 --> 23:31.120
Yeah.

23:31.120 --> 23:37.640
And the irony is the very Linux kernel that they have based Android around, which is GPL2

23:37.640 --> 23:39.840
and about as free as they come.

23:39.840 --> 23:45.640
And yet somehow Android has been a success, but yet Google manages to argue that they

23:45.640 --> 23:48.160
are concerned about the decision.

23:48.160 --> 23:53.280
They say that without the careful balance they have struck with Android, it would send

23:53.280 --> 23:59.680
a troubling signal in favor of proprietary systems over open platforms.

23:59.680 --> 24:06.920
And that if the EU does this, open source loses and closed software like iOS will win.

24:06.920 --> 24:09.600
But Android is mostly closed source these days anyway, isn't it?

24:09.600 --> 24:14.840
If you buy an actual phone that's blessed by Google, all the play stuff is proprietary.

24:14.840 --> 24:15.840
Yes.

24:15.840 --> 24:16.840
Okay.

24:16.840 --> 24:21.080
The AOSP stuff underneath is open source, but they're trying to make it as proprietary

24:21.080 --> 24:22.240
as possible, aren't they?

24:22.240 --> 24:23.240
Yeah.

24:23.240 --> 24:24.720
That's the irony of Google's argument here.

24:24.720 --> 24:29.600
You see all the stuff that is open and free is the stuff that they try to lock down with

24:29.600 --> 24:33.160
the Play services, the Play API, and the Play Store.

24:33.160 --> 24:36.020
And they're trying to centralize it around Chrome and the Play Store.

24:36.020 --> 24:38.680
But Android is not the only solution here.

24:38.680 --> 24:40.540
You have iOS, which is pretty strong.

24:40.540 --> 24:42.560
You have others in the wings, of course.

24:42.560 --> 24:45.520
We recall that Google just recently invested in a competitor.

24:45.520 --> 24:47.800
Perhaps that has something to do with this.

24:47.800 --> 24:52.320
All of it is out there now, and you really see Google's tenuous position and their tenuous

24:52.320 --> 24:55.220
control over the Android ecosystem.

24:55.220 --> 25:00.680
And their argument is, the more control that we have exerted, the better it is for consumers.

25:00.680 --> 25:04.880
And you know, I can't necessarily argue with that core premise.

25:04.880 --> 25:08.760
Well, surprisingly enough, I agree with my beloved EU on this.

25:08.760 --> 25:09.760
Really?

25:09.760 --> 25:13.320
I thought you felt this was Microsoft 2.0, that they were being ridiculous here.

25:13.320 --> 25:15.680
Well, my first reaction to this was, what?

25:15.680 --> 25:19.360
This is just heavy-handed authoritarianism.

25:19.360 --> 25:24.360
But then when you really look through it, and specifically that third point, which I

25:24.360 --> 25:29.920
keep coming back to about not allowing the freedom to ship other OSes, that is where

25:29.920 --> 25:31.000
they've really crossed the line.

25:31.000 --> 25:38.400
If it was only forcing the bundling of Chrome and the Google search, then I'd be kind of

25:38.400 --> 25:39.840
much lighter on Google.

25:39.840 --> 25:45.600
But forcing manufacturers to only ship your product, or take your ball and go home with

25:45.600 --> 25:48.200
you, that's just not on as far as I'm concerned.

25:48.200 --> 25:49.980
Ideally, I don't disagree with you.

25:49.980 --> 25:53.880
But from a market practice standpoint, I have to look at Android.

25:53.880 --> 25:58.000
When I think of those first devices that shipped, the ones with the little balls that you would

25:58.000 --> 26:03.600
move around the UI with, to what we have now, Google really did start from an idealistic

26:03.600 --> 26:04.800
standpoint.

26:04.800 --> 26:08.320
Every major app on the phone was really an open-source app.

26:08.320 --> 26:14.200
And then over time, because of the realities of OEMs and what bastards they are, and carriers

26:14.200 --> 26:20.800
and what jerks they are, Google has slowly become more closed and more dogmatic about

26:20.800 --> 26:23.020
what they require.

26:23.020 --> 26:28.520
And I don't really feel like it's been out of malice, I feel like it's been out of what

26:28.520 --> 26:32.880
delivers the most consistent and competitive Android experience.

26:32.880 --> 26:36.040
I can't believe I'm going to say this, but I think I side with Google.

26:36.040 --> 26:40.540
I feel like this thing is overreaching, and that what Google has done over time has gotten

26:40.540 --> 26:45.400
more pragmatic and been responding to the competitive nature that iOS brings to the

26:45.400 --> 26:46.480
field.

26:46.480 --> 26:53.760
And as an iOS user, the changes they have made have, over time, made me consider using

26:53.760 --> 26:58.040
Android as my primary phone operating system more and more.

26:58.040 --> 27:01.920
And I wish we could just remove free software and open source from the conversation altogether

27:01.920 --> 27:07.440
and just look at it from what they offer consumers as features and a consistent experience.

27:07.440 --> 27:11.120
Well, if you take the open source and free software aspects away, then iOS is clearly

27:11.120 --> 27:12.120
better.

27:12.120 --> 27:13.120
There's no doubt.

27:13.120 --> 27:15.280
As you said, they control the whole stack.

27:15.280 --> 27:17.880
Of course, it's going to be a better experience.

27:17.880 --> 27:18.960
Features wise, I don't know.

27:18.960 --> 27:22.960
It feels like it kind of goes back and forth on that front.

27:22.960 --> 27:29.700
But yeah, from my fairly limited experience of iOS, it is way more stable and just better

27:29.700 --> 27:31.280
all around than Android.

27:31.280 --> 27:32.760
But it's not customizable.

27:32.760 --> 27:34.180
It's not at all open source.

27:34.180 --> 27:36.120
So that's why I use Android.

27:36.120 --> 27:39.160
But there's no doubt that something Google have done recently is good.

27:39.160 --> 27:44.440
And that is the data transfer project where they've teamed up with Microsoft, Twitter,

27:44.440 --> 27:49.120
and Facebook to enable you to transfer your data between the services without having to

27:49.120 --> 27:50.600
download it and re-upload it.

27:50.600 --> 27:53.960
And it's all open source and it's potentially going to grow beyond those services, which

27:53.960 --> 27:54.960
is good.

27:54.960 --> 27:58.760
This is a big deal if it takes off.

27:58.760 --> 28:04.780
If it takes off, it solves a problem that really cloud computing has failed to address

28:04.780 --> 28:06.640
in an embarrassing way.

28:06.640 --> 28:11.240
With traditional applications, it just seems ridiculous to even point this out, like obvious.

28:11.240 --> 28:16.400
But with a traditional application, I could open up, say, K-Write, and I could say, Joe

28:16.400 --> 28:20.280
smells like beans, and I could save that to a text file.

28:20.280 --> 28:26.120
And then I could go open that up with Libre Docs or whatever, a different text editor,

28:26.120 --> 28:30.580
Sublime Text, and I could just read the file because it's on my file system.

28:30.580 --> 28:32.600
Like that's just how computers work.

28:32.600 --> 28:36.960
But in cloud computing, we've really sort of just submitted ourselves to these data

28:36.960 --> 28:37.960
silos.

28:37.960 --> 28:43.400
Well, apparently, good guy Google is trying to push forward the data liberation front

28:43.400 --> 28:47.800
to the next level, where you can move your data between services.

28:47.800 --> 28:50.280
And they call out different use cases.

28:50.280 --> 28:56.160
Say for example, you have all of your photos on Google Photos, but a new photo book services

28:56.160 --> 28:59.240
launches and you want to move your photos over.

28:59.240 --> 29:03.640
Google will facilitate that ability through this initiative.

29:03.640 --> 29:08.320
Or let's say you're using a chat network, and they've changed their terms of services,

29:08.320 --> 29:12.280
and you no longer like those terms of services, but you would like to move over your message

29:12.280 --> 29:17.760
history and your pictures to a new service where you do agree with their terms of service.

29:17.760 --> 29:20.520
This is supposed to facilitate that as well.

29:20.520 --> 29:21.600
We'll have a link in the show notes.

29:21.600 --> 29:25.600
Go over to linuxactionnews.com slash 63 for details.

29:25.600 --> 29:28.680
But I read through the white paper for you, so that way you don't have to.

29:28.680 --> 29:32.160
And the way this really works is pretty good.

29:32.160 --> 29:34.800
It kind of checks out, guys, I got to say.

29:34.800 --> 29:36.720
Everything is encrypted in transit.

29:36.720 --> 29:38.080
Everything is encrypted at rest.

29:38.080 --> 29:41.240
I know that's your number one concern, and they've taken care of that.

29:41.240 --> 29:48.080
The only real blocker for different cloud services to participate is they have to build

29:48.080 --> 29:53.120
what is essentially a connector or a translator, so that way they can take the standard REST

29:53.120 --> 29:56.560
based API and they can translate it to their services.

29:56.560 --> 29:57.960
But Google's going to work on this.

29:57.960 --> 30:02.000
It started as a small skunks works project in Chicago, actually, and now it's really

30:02.000 --> 30:06.440
developed into a full-fledged initiative that has involved Google reaching out to Microsoft

30:06.440 --> 30:12.480
and Facebook and others and really building an industry-wide standard that may facilitate

30:12.480 --> 30:18.080
you one day going into one social network and saying, I want to transfer all of my information

30:18.080 --> 30:21.720
to a different network, or one service to another service.

30:21.720 --> 30:22.880
Doesn't have to be social.

30:22.880 --> 30:25.360
It could be anything.

30:25.360 --> 30:28.720
It's legitimately awesome, and it could be great, especially when you start considering

30:28.720 --> 30:34.520
things like Google Drive, Dropbox, OneDrive, and photo services, and all of these include

30:34.520 --> 30:37.000
a facility for you to download them as well.

30:37.000 --> 30:43.000
It's really about standardizing a interface that can talk between the services, and it's

30:43.000 --> 30:45.840
all done with a translator on each end of each service.

30:45.840 --> 30:50.880
So you have a limited buy-in right now, but potentially this could pick up some traction

30:50.880 --> 30:53.200
because you're seeing some wide adoption initially.

30:53.200 --> 30:59.840
I had this dawning realization a few years ago that open standards for data is potentially

30:59.840 --> 31:05.140
more important than open source or free software because it's not much use having a completely

31:05.140 --> 31:12.200
open source text editor or word processor if the resulting files can't be read anywhere

31:12.200 --> 31:13.520
else, right?

31:13.520 --> 31:19.160
And so it's almost better to use proprietary software that is using open standards than

31:19.160 --> 31:24.720
free software that isn't or isn't using a widely adopted standard.

31:24.720 --> 31:29.640
I say almost because I know there's a lot of purists or whatever, and this isn't them

31:29.640 --> 31:34.520
saying that they're moving to open standards, but it's probably the best that we're going

31:34.520 --> 31:38.200
to get in a sort of pragmatic view of the world.

31:38.200 --> 31:44.040
You're not going to get Facebook and Twitter and Google and Microsoft to all of a sudden

31:44.040 --> 31:50.400
open up their APIs and make everything completely open standards and interoperable.

31:50.400 --> 31:54.880
But this sort of bridging software here, I think realistically is the best we're going

31:54.880 --> 31:55.880
to get.

31:55.880 --> 32:00.120
So that's why I think, well, be grateful for what you get at the end of the day.

32:00.120 --> 32:03.800
I like some of the screenshots that we'll have linked in the show notes where they show

32:03.800 --> 32:06.680
exporting Google photos over to Microsoft.

32:06.680 --> 32:11.160
That's just, I don't know, it's just neat to see Google blogging that.

32:11.160 --> 32:15.640
But it really does depend on each service creating what Google calls an adapter.

32:15.640 --> 32:17.840
But the backend mechanisms, they check out.

32:17.840 --> 32:22.480
Like I said, I read through it all, and they're using things like OAuth for the authorization,

32:22.480 --> 32:27.200
and they're using perfect forward secrecy where each item you have has a unique key

32:27.200 --> 32:31.240
which is generated for each transfer, and they have a framework which allows partners

32:31.240 --> 32:35.880
to support any authorization mechanism they choose, which enables partners to leverage

32:35.880 --> 32:41.400
their existing user account database and their existing security infrastructure for authorizing

32:41.400 --> 32:42.400
accounts.

32:42.400 --> 32:47.840
So Google's really trying to do this in a way that is very friendly to third party interfaces,

32:47.840 --> 32:51.520
including even like their graphics and all of that when you're accepting all of this.

32:51.520 --> 32:57.600
It's a good system, and it really could be a file system for the web for some of our

32:57.600 --> 32:59.000
most popular services.

32:59.000 --> 33:05.320
It's never, ever going to replace having control over your own data and having your own files.

33:05.320 --> 33:09.520
But for the users out there that live online, that live on their mobile devices, that live

33:09.520 --> 33:17.040
on Chromebooks, that live on cloud services, this may finally enable them to move data

33:17.040 --> 33:19.560
between competing services.

33:19.560 --> 33:23.800
And in the white paper, Google specifically calls that out and says that's something they're

33:23.800 --> 33:25.360
trying to enable.

33:25.360 --> 33:30.280
Somebody changes a policy and they want to move to a competing service, this is supposed

33:30.280 --> 33:31.360
to enable that.

33:31.360 --> 33:32.360
So we'll see.

33:32.360 --> 33:38.280
This is over at opensource.googleblog.com, and they call it the Data Transfer Project,

33:38.280 --> 33:42.520
an open source platform for promoting universal data portability.

33:42.520 --> 33:46.640
Yeah, and this is clearly due to the GDPR stuff.

33:46.640 --> 33:50.600
So it's another win for the EU, but let's not go on about that too much.

33:50.600 --> 33:54.280
Let's end the news with Slackware turning 25.

33:54.280 --> 33:57.800
It's the oldest actively developed Linux distribution.

33:57.800 --> 34:01.360
And having installed it last night, yeah, you can tell.

34:01.360 --> 34:06.040
Yeah, that is exactly my interpretation as well.

34:06.040 --> 34:10.400
And not necessarily a bad way, like it's kind of awesome in a certain way, like I really

34:10.400 --> 34:11.400
appreciate it.

34:11.400 --> 34:16.480
But you really feel the ethos of Slackware, you know, it's supposed to be simple.

34:16.480 --> 34:22.200
And that simplicity in this instance is really being the removal of barriers between you

34:22.200 --> 34:24.320
and the Unix experience.

34:24.320 --> 34:28.360
It's really all about that Unix experience with Slackware as close as you can get with

34:28.360 --> 34:29.360
a Linux distro.

34:29.360 --> 34:34.060
I mean, it all got started in July of 1993.

34:34.060 --> 34:38.020
It was really aimed to be the most Unix-like Linux distribution.

34:38.020 --> 34:43.360
And the team has managed 30 releases over the years, with the latest being 14.2 on June

34:43.360 --> 34:48.160
30, 2016, which is based on the 4.14 kernel.

34:48.160 --> 34:50.000
I love Slackware.

34:50.000 --> 34:53.360
It has been a constant in my Linux life.

34:53.360 --> 34:56.200
And of course, original SUSE's were based off of it.

34:56.200 --> 35:02.680
And the name, in 1994, for an interview with Linux Journal, the then 27-year-old benevolent

35:02.680 --> 35:08.200
dictator of Slackware said, I think I named it Slackware because I didn't want people

35:08.200 --> 35:11.880
to take it all that seriously at first.

35:11.880 --> 35:17.520
Which I don't know, when you think about 25 years afterwards, it just makes me like it

35:17.520 --> 35:18.520
more even.

35:18.520 --> 35:23.400
You're talking to someone who's running XFCE, so I don't like change for its own sake.

35:23.400 --> 35:26.240
And I do appreciate that Slackware hasn't changed much.

35:26.240 --> 35:28.960
It's kept very much to its original principles.

35:28.960 --> 35:34.640
But on the other hand, it really makes you appreciate Fedora, Ubuntu, other distros

35:34.640 --> 35:39.760
like that, and how far we've come, and how much polish has been added to the whole experience.

35:39.760 --> 35:45.120
Yeah, either way, 25 years and still being famous for its simplicity, only Linux could

35:45.120 --> 35:46.120
deliver that.

35:46.120 --> 35:47.120
I love it, Joe.

35:47.120 --> 35:48.120
I love Slackware.

35:48.120 --> 35:51.280
Even though I'm not a daily user of it, I have so much respect for the project.

35:51.280 --> 35:56.320
Well, a project we have a lot of respect for is Firefox, and we made an error last time,

35:56.320 --> 35:58.200
so we need to correct that error.

35:58.200 --> 36:02.320
We were talking about them making changes on Android, and we incorrectly said that they

36:02.320 --> 36:08.020
were moving away from Gecko as a rendering engine to WebKit, but they're not, so we needed

36:08.020 --> 36:09.020
to make that correction.

36:09.020 --> 36:12.800
Yeah, it actually looks like a great initiative, and it's one that I'll be following in the

36:12.800 --> 36:13.800
future.

36:13.800 --> 36:15.600
And as things develop, we'll keep you posted.

36:15.600 --> 36:19.900
Go to linuxactionnews.com slash subscribe for all the ways to get new episodes.

36:19.900 --> 36:23.120
And go to linuxactionnews.com slash contact for ways to get in touch.

36:23.120 --> 36:27.160
Yeah, and you can support the whole network and everything we're doing over at patreon.com

36:27.160 --> 36:28.160
slash jupitersignal.

36:28.160 --> 36:32.480
We'll be back next Monday with our weekly take on the latest Linux and open source news.

36:32.480 --> 36:33.920
I'm at Chris LAS.

36:33.920 --> 36:35.320
I'm at Joe Rissington.

36:35.320 --> 36:38.280
Thank you for joining us, and we will see you next week.

36:38.280 --> 36:54.200
Have a good night, sir.


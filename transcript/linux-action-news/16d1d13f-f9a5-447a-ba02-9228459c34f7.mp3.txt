Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.
This is episode 13, recorded on August 6th, 2017.
I'm Chris.
And I'm Joe.
Hello, Joe.
Happy fake episode 13 to you.
That's a little inside joke.
Yeah, technically the 14th because of the beta episode we did.
It's our secret, Josh.
That's our little secret.
Although you'd almost think it was the actual episode 13 because of some of the bad luck
the Corita Foundation has had recently.
Yeah, so it turns out that being a nonprofit and also selling stuff at the same time can
land you in serious trouble with the tax authorities, at least in the Netherlands.
Yeah, yeah.
I guess the Corita Foundation thought everything was going along smooth when they set up their
foundation in 2013, they took advice of a local tax consultant and thought, okay, we've
got this all dialed in until Dutch tax authorities told them otherwise.
Essentially, they were operating as a charity, but also operating as a corporation to use
US parlance.
And that sort of got them in a catch 22 situation.
Yeah, they had claimed some VAT back that they shouldn't have and ended up with a 20,000
euro tax bill.
Yeah, that's awful.
And even after they were able to get it reduced to 15,000 euros, their accounting bill was
4,000 euros.
So, geez.
Yeah, so.
That's bad.
Yeah, that's really bad.
And, you know, initially I thought, why does Corita need a foundation?
And I don't mean any disrespect to the project because actually quite a bit of the artwork
here at Jupiter Broadcasting was designed by artists using Corita.
So I really think it's a great tool, but I thought, why do they need a foundation?
And then I realized, oh, it's because, you know, they're paying Dimitri full time to
work on Corita and they have other obvious expenses.
It kind of shows you how much is involved just to build a great design application.
Once it gets to a certain size, it's more than code, Joe.
Well, yeah, that happens to a lot of projects, doesn't it?
You grow to a point where you want to get paid to do it and you can put your time into
it full time and then you need to have some sort of legal framework in place.
Yeah.
But even though they thought they had it in place properly, this has still come back to
bite them.
It's not ever going to be their strong suit.
They want to focus on code.
They want to focus on community.
They don't want to focus on tax law.
Who does?
Yeah.
But thankfully the community have come to the rescue.
Indeed.
In fact, it looks like a pretty big outpouring of support just days after their announcement.
In fact, on their blog, they write, we didn't expect the incredible response from all of
you.
9,500 awesome people have donated 9,562 euros at the time of writing this post.
But that's not all, actually.
They also had private internet access, a VPN provider step up and offer sponsorship of
20,000 euros, which is going to be fantastic for long-term investment.
And also very encouraging, 14 different people have joined the development fund, which is
also going to help with long-term development of Corita.
You said 9,500 euros there.
Well that was after one day and here we are a few days later and it's up to 36,000.
So they are completely sorted basically going forward.
I love it.
Watch out Adobe.
Corita's coming for you.
Yeah, maybe.
Over on the GTK side of things, Guadic 2017 just wrapped up and it looks like it was a
whole bunch of upstream love in between Canonical and the Gnome development team.
Yeah, and it looks like some firm decisions have been made now for Ubuntu 17.10.
And for me, the most important one, moving the buttons back where they belong to the
right-hand side.
You went right for it, didn't you?
Yeah.
It seems like a trivial thing, but I actually think it's huge.
They say it's because of a larger design philosophy about the dock and etc.
But on the right-hand side where you expect those window controls to be says, we are Linux,
we are like everybody else, we don't have to have our buttons on the left.
Yeah, exactly.
I mean, that's kind of trivial, really.
The big news, really.
You mentioned the dock thing there, so they're going to have a dock that's not DasherDock,
which is a bit strange, but okay.
But really the big news is Wayland, that they really are going to go for it as default.
Wayland will be the default session.
I don't know.
I think there's also really big news in here.
So there's two things I think are really big news in here, actually.
First, a list of everything you're not going to get that you would expect from Unity, and
I think maybe we could just bang this off really quick.
This was from off the top of the head, it was no global menus.
The HUD's going to be gone, alt-tab behavior is changing, messaging menus are gone, volume
notifications are different, launcher integration via running apps and software center obviously
is different, lenses and scopes are gone, and other tweaks that are just Unity-specific
probably won't end up in GNOME, at least the version that's going to ship in 17.10.
Well, much like with Wayland, 17.10 is a real test release, isn't it?
Because not that many people are realistically going to use it, because you only get nine
months of support with it.
So it's really a testing ground for 18.04, which is what the majority of people are going
to use.
And so we're going back to the old days of instead of these interim releases just being
boring snooze fests, this is actually going to be really exciting and interesting.
And things are going to break probably, and they're going to have to use that development
cycle over the next nine months until we get to 18.04 to fix everything and make it ready
for the important one, the LTS.
Because although 17.10 is important and it's certainly academically interesting, realistically
are you going to put it on any of your machines for more than just testing purposes?
Not unless I'm planning to go to 18.04, if 18.04 is solid.
So I think you're right, now here's the thing I think will need the most testing.
I think there's some really big news tucked in this post that we have linked in the show
notes.
So a lot of talk about working upstream, and it sounds like at Guadic there was a lot of
back and forth from the GNOME developers on how to implement some of the modifications
that Canonical wants to ship with GNOME, extensions, the doc stuff, the ambient theme.
How do they do that without just stacking GNOME full of extensions?
In this post, they talk about implementing modifications as a GNOME shell mode, not as
a bunch of extensions and themes lacquered on top of GNOME, but as a mode that would
be listed at the login manager, just like the way GNOME Classic is implemented.
This will enable Canonical to deliver another session using their upstream fonts, icons,
and their theme, and also a standard session that uses the upstream GNOME fonts, the Adwadia
theme, the upstream shell theme, with no extensions applied, like a stock GNOME.
So you'll have multiple options, and when you choose the Canonical session, it's going
to be all built in.
And after reading this implementation, it left me wondering why isn't this the way every
distribution ships their implementation of GNOME?
Well, because it's kind of a non-standard way to do it.
Surely the standard way is make it stock with extensions, which can then be removed.
And OK, Canonical are going to ship the option to have stock GNOME, but that's not going
to be default, is it?
And I think that's why other distros don't do that.
This to me feels a little bit like the old Canonical that we thought had changed, not
invented here.
Oh, I completely disagree.
So not only does my gut tell me that this was the way the folks at Guadic suggested
Canonical go, like this was their advisement, I think Canonical was going to do it the way
you just outlined.
Then they went to Guadic and they said, you know, we've built this mechanism, and we've
even designed GNOME Classic to try to show people how to do it, so that way you can deliver
an experience using GNOME that doesn't have to depend on all of these breaky things.
And it was designed for that.
GNOME Shell was created to allow this.
So it seems to me the way that the GNOME project would actually recommend people do it and
not just sort of hack on a bunch of extensions and themes and then ship it and then just
hope that everybody's packages hit the repo at the right time when you're doing your updates.
Well, I suppose so.
But it does feel like it's Canonical taking on more of the, well, not technical debt,
but you know, taking on more of the development.
Yeah, yeah, I suppose so.
I'll dig around.
I'll do some more reading about it and see if we can't ask some folks that work at Canonical
and get a better sense of this implementation, because it was a little vague in the blog
post too.
So it's an area, I think, that probably deserves further discussion.
Yeah.
All right, well, let's talk about blue phones, BLU.
This is a story that I almost put in last week, but I thought, I don't know if it's
necessarily true.
And it's come back around this week in that Amazon stopped selling them for a while.
So these are low budget Android phones, basically, which are actually these days surprisingly
quite well-specced for the price.
Indeed, yeah.
So Cryptowire found out, I think it was a few months ago, wasn't it, that these phones
were phoning home, haha, back to China with information about text messages and all sorts
of stuff that you want to keep private and don't want to be sending to some server in
China.
Sure.
And it seemed that BLU had sorted it out, but now Cryptowire are saying that they haven't
and that's why Amazon pulled the phones, but now they've basically put them back on the
site or certainly some of them.
So it's a very confusing story that there seems to be a lot of misinformation here.
Yeah.
And what I parsed out from this is a couple of odd things happened on the back end.
Amazon pulled them down, but then other resellers stepped up to do fulfillment.
So the phones essentially continued to ship even though the official BLU store was shut
down, which, come on, Amazon, do your job right.
But in fact, these phones were sending data back to China.
BLU is a Chinese company and there's a piece of software installed on these phones that
sends back different metrics.
And like all of these wonderful pieces of software, the vendor can choose how much they
turn it up and how much they turn it down.
So they can send all the things and they can send just diagnostic metrics, version information
and basic details, which BLU claims that's what they're sending.
But even that, I don't really want to happen.
Maybe if you could opt into it or at least opt out of it.
But if it's happening in the background without you realizing it, I don't know.
This is just what I dislike about OEM generally and stock ROMs.
That's why I use Lineage and other custom ROMs, because at least it's mostly open source.
There you go.
Yeah, that's definitely a safer way to go, I would assume.
This seems to be a reoccurring story, especially on the lower priced Android phones.
And I almost wonder, this is nobody's really going to love this suggestion, but maybe the
better solution would be for Google to share all the data they collect on all of us with
the OEMs.
Now, I don't like it, but then these guys wouldn't be rolling their own software that
uses who knows what type of encryption implementation and is talking to who knows who and is including
who knows what information.
And it might be better if Google just took every little bit of information they're recording
about you, anonymized it, and shared it back with the hardware vendors.
You said gave and shared there.
I don't think that's going to happen.
Maybe sold back to the OEMs.
Yeah, good point.
Good point.
And you know what?
Either way, it just makes Android more creepy.
If the vendors are doing it or if Google's doing it, it's creepy.
Yeah, just send it all back to Apple, eh, like you do.
Yeah, well, it could be worse.
It could be sending it to some unknown open source project that's doing god knows what
with it.
DigitalOcean.com.
Sign up and use our promo code, here's the thing, to support the show and get a $10 credit
on some really, really great services.
DigitalOcean is infrastructure in seconds.
You can sign up and deploy a droplet, that's their parlance, in 55 seconds or less.
One of the things that makes it super fast is they use SSD storage everywhere for your
droplet and for the block storage you can attach as you need it.
They have lightning fast network, 40 gigabits to each hypervisor, highly available storage.
They have built-in monitoring and alerting team accounts if you want to work together
with people.
And one of my favorite things for testing, pre-built droplets with entire open source
stacks or just a base system.
I really love that feature.
Well, I suppose my favorite feature is the straightforward pricing.
DigitalOcean.com, go over there and use our promo code, here's the thing.
You create the account, then you apply it and you're good to go.
DigitalOcean.com, promo code, here's the thing.
Okay, so we've gone 13 proper episodes without mentioning Bitcoin and now we have to do it.
Lucky 13.
Yeah.
So I'm not massively interested in Bitcoin because it's basically a Ponzi scheme as far
as I'm concerned, which may be a controversial opinion, but there you go.
Okay.
That's a big event happened that I've been watching over the last few months unfold.
And it happened this week.
It was basically forked as Bitcoin Cash.
And so if you had Bitcoin already, you're going to keep them, but you've also got these
Bitcoin Cash now, so money has just appeared from nothing.
Well, this is the interesting thing that stands Bitcoin Cash out from all of the other alternative
cryptocurrencies.
They didn't just fork the code.
They forked the blockchain.
They forked the ledger.
And when they made that fork, all of the transactions that have ever occurred on the network went
with them.
So essentially, it's like a parallel timeline now.
It's a side five parallel timeline where the transactions that happened are still valid
in both of these now two separate blockchains.
And it did surprisingly well, didn't it?
Some people were saying that it was just going to tank straight away.
Yeah.
There's been a lot of mounting pressure since I did a podcast a couple of years ago about
Bitcoin called Plan B, and this was beginning to really simmer because it's a core issue.
Original Bitcoin, just BTC, has a limitation of a shared transaction ledger.
Each one of the blocks is limited to one megabyte.
And that's good and bad depending on who you talk to.
And that's one of the things that Bitcoin Cash wanted to change is they wanted to increase
that size.
And that's also good and bad depending on who you talk to, but it actually just comes
down to this really trivial, quote unquote, change.
One megabyte limit to a higher value.
And when you make that change, it has huge ramifications because it means machines that
are trying to download the blockchain and process transactions have to download more
data or less data depending on which blockchain you're on.
That means it may isolate out smaller players who don't have huge amounts of storage and
enable big players or vice versa depending on who you talk to.
So all of the transaction history prior to August 1st, 2017 is in both of these blockchains.
And now we just get to sit back and see which principle is essentially better and watch
which Bitcoin companies step up to support it.
Like Coinbase has been sort of dragging their feet and now they've announced months down
the road they're going to implement Bitcoin Cash support.
Yeah it hasn't had the support that I think the Bitcoin Cash people wanted, has it?
Perhaps yeah, maybe it hasn't.
I think people are waiting to see where it goes.
And I think there's a bigger open source story here.
Blockchain technology itself, distributed database technology that is cryptographically
verified is something that IBM and Oracle and the Linux Foundation and Bank of America
and a lot of other really big players are investing heavily in right now.
So I wonder if they're sitting back and trying to see which is better because they're going
to be basing a lot of their future transaction technology off of blockchain technology.
It's crazy to say it, but these huge players are getting into blockchain applications.
But the bigger block size for them isn't going to be a huge issue because they're not consumers.
It's not everyday people.
They've got the money to pay for huge servers that don't really care whether it's one megabyte,
eight megabytes or even bigger.
And they may do entirely different backend data storage techniques than what we see today
in the open source project.
But it's still interesting to see the organic blockchain stuff really struggling to figure
this out.
There may be a similar sort of battle in the commercial space, different feature sets of
different blockchains.
And this is just the beginning of it.
So you didn't just immediately sell out your Bitcoin cash because you've got a few bitcoins.
You know, I'm just standing by at this point and just kind of going to see where it goes.
Bitcoin itself, as we record, is at thirty two hundred dollars right now.
Yeah, it's nuts.
So I feel like at this point, it could go all the way to the moon and it could crash
down to nothing.
So I'm just going to hold and see where things go.
How much was it worth back in the plan B days, then a couple of hundred?
Yeah.
Yeah, I think so.
Yeah, that's what I mean.
I don't think I ever paid more than two hundred dollars for a Bitcoin.
Maybe not even that much.
Hundred and seventy five.
Yeah.
Man, I thought about investing at the time and I just kept thinking, it's going to crash.
It's going to crash.
It just keeps on going up and up.
That's the classic Bitcoin conundrum.
Well, that's why it's a Ponzi scheme, because, you know, the people who get in now are just
not, you know, they're not going to make any money.
Or maybe they will.
They'll go up to maybe a hundred thousand dollars a Bitcoin, because that's it's got
that built into it, these tiny fractions.
And that was kind of always the plan, wasn't it?
That one no one would trade in one Bitcoin.
It would be tiny fractions of it.
Yeah.
Yeah.
You never know, Joe.
Maybe eventually, eventually you'll set up an online business and take Bitcoin as a payment
and you'll make it big.
You'll become a Bitcoin billionaire.
You never know.
In the meantime, Firefox has a few more experiments that you could burn some time while you watch
the Bitcoin market.
Yeah.
So Mozilla have been spending their Yahoo money on more stuff.
The most interesting one to me is send.firefox.com, which works, I understand, in other browsers.
And it's private encrypted file sharing.
So it's kind of a competitor to WeTransfer, where you basically send a file through email.
So you email them a link.
And in this case, it gets stored on the server for one day or for one download.
And then it's deleted forever.
Isn't that sort of the interesting feature is that it's a limited time link, which means
maybe Mozilla doesn't have to be as concerned about what people are uploading because it
all gets deleted?
Well, does it really get deleted, though, because it's on AWS.
So I suppose it gets deleted after a fashion.
But if there's something that the authorities really want to know about, then they're going
to find it, I would imagine.
This is a really odd thing for them to be working on.
It sure is handy.
But boy, if you're running on S3, that's just nothing but a cost center for them.
If you look at testpilot.firefox.com, there's a couple of other ones that jump out at me,
like a snooze tabs experiment and a container experiment for Firefox.
Not like Docker container, but you can create containers for different social media accounts
or Google accounts.
And every tab in this container will be logged in as one account.
And you can have multiple tabs with multiple containers all up on the screen at the same
time.
So in one tab, I could have my work account.
In another tab, I could have my personal account.
And it's not incognito.
It's contained profiles.
Pretty nice feature, sort of similar to how Chrome does personas, but even a bit nicer
than personas.
I do worry about the CPU and RAM overhead for that, though.
Just throw all the hardware at it, Joe.
It's the modern workload.
It's the web browser workload of the future.
These kind of features, though, where they're building in things like snoozing tabs and
containers into Firefox, that stuff strikes a, that's what I want Mozilla working on kind
of know with me.
Send, pretty nice to have.
But if it went away tomorrow, there'd still be 100 alternatives.
And they wouldn't all be cost centers for the Mozilla project.
But it's a pretty nice one at that.
Yeah, and what's interesting to me about Send is that it's our own source, the Mozilla
public license.
So you can host it yourself.
Yes, you can.
That is really nice.
It's up on GitHub.
I was looking at that.
And that is impressive.
It's cool to see them working on, well, I don't know, code stuff, you know, and not
like so much political stuff or huge, like, the common voice stuff is great, but it seems
so massive and so nebulous, whereas this feels like I can actually apply it to my Firefox
experience right now.
It's like it's really tangible.
So I like to see that kind of stuff.
Well, the common voice, it seems that they are implementing it already with their voice
search.
So they're pretty serious about that stuff.
Mm-hmm.
Yeah.
Red Hat's pretty serious about file systems.
And so that's why when they announced that they were deprecating ButterFS, it caught
a lot of attention.
It doesn't look good for B2FS, ButterFS at this point, does it, if even Red Hat's given
up on it?
Yeah.
Yeah.
They say the ButterFS file system has been in technology preview state since its initial
release of Red Hat Enterprise Linux 6.
And that Red Hat will not be moving ButterFS to a fully supported feature, and it will
be removed in future major releases of Red Hat Enterprise Linux.
Well, here we are a year, more than a year, after Canonical put ZFS into Ubuntu 16.04,
and they still haven't been sued, and it looks like they've got away with it.
They would say there was nothing to get away with in the first place.
But Red Hat is just not willing to take that risk, by the looks of things.
They'd rather develop something completely new, because they don't have any faith in
B2FS, and they don't want to take the risk on ZFS.
So that really speaks volumes to me, that I thought that Canonical would be the test
ground, and if they got away with it, then Red Hat would follow suit.
Do you suppose it's because Red Hat's principally a US company, and so perhaps they have a different
target painted on their back?
That is certainly possible, yeah.
I wonder.
It is damning for ButterFS, because I think what it really speaks to, and I go back to
this, is it seems like eventually ButterFS could be turned into something pretty great,
because it's close.
But that name is now associated with a dumpster fire file system, and it's bad branding.
And if you don't want to be the consultant or the sys admin going in and saying, yeah,
I'd like to deploy all of these terabytes and terabytes and terabytes of very important
files on ButterFS, that's a really weak case to make, and it just takes somebody Googling
your proposal and then just totally shooting you down.
It's essentially a toxic brand.
Yeah, whereas XFS that Red Hat seems to be doubling down on doesn't have that baggage.
Right.
XFS is really, really well respected.
I've deployed it myself in production for years.
It's a solid file system, it has a great lineage, and if you combine Red Hat's newfound love
for XFS with some recent acquisitions and an overall project they're working on, you
start to see the story of what could be their ZFS alternative.
So on August 1st, Red Hat announced they've acquired Permabit, which is a company that
builds data duplication, or sorry, de-duplication and compression software.
You may not have heard of them because they focused on selling directly to OEM, so they
would bundle their solution on top of Linux.
It includes kernel modules and Red Hat seems to think it's better for containers and virtualization
where they have really fast storage and they want to compress down on that really fast
storage.
Having talked to Alan Jude about this, it actually is a very common work case because
CPUs are so fast and NVMe storage and SSDs are so fast that the system can read and write
more when it's compressed and read it faster because the files are small, so you actually
get higher throughput using compression and you get more storage space.
It's not like your grandpa's compression.
It's some really modern day stuff and Permabit's one of the companies that's working on this
on Linux, well, and now they're owned by Red Hat.
And so their new strategy is going to be called Stratis, which is not ready yet and it's looking
like it's maybe two or three years out before we have feature parity with ZFS, but they
are really going for it.
Yeah, Stratis is an interesting approach.
So a lot of you out there will love the fact that it's supposedly it's written in Rust,
which if you're going to be building file system layered tools, Rust is a good language
to use.
So in this scenario, you could take a base file system like XFS and then Stratis takes
a layered approach to replace ZFS's individual components.
So Stratis can lay on a copy on write layer using components that are pretty much already
built into Linux, a raid layer using, again, stuff already built into Linux.
In fact, most of the functionality in ZFS is throughout Linux in all these different
parts.
It's just not all in one single file system.
So Stratis is a layered approach that will sit on top of XFS or potentially other file
systems and bring in these types of features, probably using a little LVM on the back end
too.
Now, some of you may cringe at this, it's taking some of Linux's most well-developed,
tried and true features and bringing them all under the Stratis umbrella to all work
together.
It's actually a pretty solid approach.
If you take tools that are tried and true in production in the enterprise environment
for years and get them all working together, it's probably going to work pretty quick.
It's probably going to be pretty solid and trusted.
Or you could just use ZFS.
Or yes, you could just use ZFS.
In fact, this is the big competition is canonical is saying, hey, look, you want an Ubuntu LTS,
you got live patch, lots of people love to run it in production, and now we've got the
ZFS file system.
Come on, we've already got this stuff.
And you've got to imagine this is Red Hat going, crap, ButterFS didn't get there.
We've got to get this going.
It has to be production ready.
Enterprise customers are expecting a certain level of performance reliability out of the
box today.
We've got to pivot.
We've got to, quote unquote, pivot, Joe, and make this change.
And this has got to be a response in at least some little amount to Ubuntu shipping ZFS.
I just have to see it that way.
But it just goes to show that BtreeFS must be in a pretty ropey state.
Otherwise, why don't Red Hat just put their resources into that and make it better and
improve it?
I think it's the brand thing.
I think it's the dumpster fire branding.
It's just gotten to the point where nobody's really, well, it's a joke.
It's a bit of a joke file system.
And I think they're just saying, well, we can't compete with that.
We're not getting a lot of traction.
It's a hard sale.
And I think the other question I have to ask now is, when does SUSE make a change?
Or will they?
Well, I was going to say, tell that to Richard Brown.
See what he says.
Well, I would ask him.
You're going to see him soon.
You should bring it up.
Yeah.
Well, when I last spoke to him, I asked him about it.
And he said, it's fine.
They just don't put in the RAID stuff that is broken, and otherwise, it works fine for
them.
Yeah.
You use a couple of build flags.
You throw on a couple of patches.
You disable a couple of features.
It's fine.
There's nothing wrong with that.
The file system should work.
I wonder if they will move away from it, because they do seem pretty sold on it, don't they?
Yeah.
It's pretty well integrated.
Part of me, to be honest, hopes they don't.
Wouldn't it be great if they just don't care about the dumpster fire branding, and they
just kept hacking away at it?
And say, five years, we come back to it, and it's solid.
They've really made it into a great product.
That could be great for everybody.
Yeah.
And then we've got three options at that point.
Yeah.
Take that, ZFS.
A proper Linux thing.
In one replacement, we build three great ones that all have their own advantages, and nobody
can decide.
That's how it should be.
Yep.
Exactly.
Yeah.
OK.
Good.
Well, in the meantime, keep following the news by subscribing to Linux Action News.
Go to linuxactionnews.com slash subscribe for all the ways to get new episodes.
And check out linuxactionnews.com slash contact for ways to get in touch with us.
Yeah.
And you can support the whole network at our Patreon page, patreon.com slash Jupiter signal.
We'll be back next Monday with our weekly take on the latest Linux and open source news.
I'm at Chris LAS.
I'm at Joe Rissington.
Thank you for joining us, and we'll see you next week.
See you later.

WEBVTT

00:00.000 --> 00:05.240
Hello, and welcome to Linux Action News.

00:05.240 --> 00:08.920
Episode 155, recorded on September 20th, 2020.

00:08.920 --> 00:09.920
I'm Chris.

00:09.920 --> 00:10.920
And I'm Joe.

00:10.920 --> 00:11.920
Hello, Joe.

00:11.920 --> 00:12.920
Good to be connected with you.

00:12.920 --> 00:15.600
And we start this week with a brand new shiny GNOME.

00:15.600 --> 00:22.800
Yeah, there's quite a lot of GNOME news this week, but yeah, 3.38, Orbis, has been released.

00:22.800 --> 00:26.440
Lots of small improvements that add up to a pretty good GNOME release.

00:26.440 --> 00:27.440
Absolutely.

00:27.440 --> 00:33.440
As a result of six months of hard work by the GNOME community, 27,000 changes, 901 different

00:33.440 --> 00:34.720
contributors.

00:34.720 --> 00:38.360
And for users of the desktop, there's a lot of quality of life improvements.

00:38.360 --> 00:44.160
I'll tell you the couple that jump out to me is the revamped screen capture app is great.

00:44.160 --> 00:47.760
They've redone the way screen recording works using PipeWire now.

00:47.760 --> 00:51.360
That's really awesome to see that because you know I'm a big PipeWire fan.

00:51.360 --> 00:57.840
We just recently did a update on PipeWire with the developer in Linux Unplugged 3.70

00:57.840 --> 01:01.520
and just totally refreshed my excitement for the way PipeWire is going.

01:01.520 --> 01:05.240
So it's great to see efficiencies built into GNOME now, just thanks to the hard work that's

01:05.240 --> 01:06.600
gone into PipeWire.

01:06.600 --> 01:09.160
But I'll tell you the one that surprised me, Joe.

01:09.160 --> 01:14.760
This time around, I decided to spend a little time with GNOME Maps.

01:14.760 --> 01:19.840
And I got to say, I really like, and I think they're using OpenStreetMap, I really like

01:19.840 --> 01:24.380
the way it displays street labels and highway labels.

01:24.380 --> 01:27.680
It is clearer and easier to read than Google Maps.

01:27.680 --> 01:29.080
And it's nice having it in a native app.

01:29.080 --> 01:32.960
And I've never given Maps really a fair shake.

01:32.960 --> 01:34.440
I just thought, oh, this is interesting.

01:34.440 --> 01:37.540
But unless I was using this on a phone, I don't really get it.

01:37.540 --> 01:41.160
But now when I was trying to like research a route and stuff, I just found it the easiest

01:41.160 --> 01:44.800
to read and the fastest because it's right there on my device.

01:44.800 --> 01:45.960
I actually really like it.

01:45.960 --> 01:48.880
I've been using it on Fedora 33 for a couple of weeks.

01:48.880 --> 01:53.840
For me, what stands out are the little changes they've made, like adding restart as an option

01:53.840 --> 01:59.600
in the system menu and allowing you to put the battery percentage next to the icon.

01:59.600 --> 02:07.160
It's just those little things that GNOME 3 is now so mature that they can focus on adding

02:07.160 --> 02:12.560
those little details to it and tweaking it in little ways to just polish all of the rough

02:12.560 --> 02:13.680
edges off.

02:13.680 --> 02:16.360
I like the ratio we're getting with these releases.

02:16.360 --> 02:21.600
There is a solid ratio of back end performance improvements that are still in that noticeable

02:21.600 --> 02:27.280
category, which if you think about often time, software improvements for performance are

02:27.280 --> 02:32.280
really minor and their net effect can sometimes be felt, but individual fixes aren't typically

02:32.280 --> 02:33.280
felt.

02:33.280 --> 02:37.120
But we are still in that phase with GNOME Shell where individual fixes can still be

02:37.120 --> 02:38.120
felt.

02:38.120 --> 02:41.560
And that's exciting because as an end user, I know that each release gets a little bit

02:41.560 --> 02:42.560
better.

02:42.560 --> 02:46.760
But if you mix in the UI improvements, the quality of life improvements with that, and

02:46.760 --> 02:50.160
I think you get a good ratio and it makes the desktop kind of compelling for somebody

02:50.160 --> 02:55.220
like me who's been on Plasma for a while, I'm looking at this thinking when it ships

02:55.220 --> 03:00.760
in the distros I end up using, I may actually switch back to GNOME with this release.

03:00.760 --> 03:07.440
Also in part because GNOME Web is becoming a more usable secondary browser for me.

03:07.440 --> 03:12.240
I have my primary browser, I have three browsers, I just got so many accounts that I log into

03:12.240 --> 03:17.440
I got like work browsing, personal browsing and fun browsing, or just like I want to have

03:17.440 --> 03:21.520
a web page up or maybe this is just an inbox and that's where the tertiary or secondary

03:21.520 --> 03:25.800
browser comes in and GNOME Web is kind of getting there for me.

03:25.800 --> 03:29.680
There's been a number of improvements in this cycle and I can't believe I'm actually saying

03:29.680 --> 03:32.300
this, but it's kind of appealing to me.

03:32.300 --> 03:36.800
I did play around with the applications grid and how you can reorder it now and you can

03:36.800 --> 03:40.080
drag icons on top of each other and make folders.

03:40.080 --> 03:46.160
I found that a little bit buggy, like once I'd made a folder I had to go back to the

03:46.160 --> 03:50.920
desktop and then back into the application grid for it to work.

03:50.920 --> 03:55.540
This was on the daily image of Ubuntu 2010 though, so I'm not sure exactly where that

03:55.540 --> 03:56.540
bug lies.

03:56.540 --> 04:01.320
Hopefully it'll be fixed by the time it comes out, but I do like that customization because

04:01.320 --> 04:06.580
GNOME traditionally hasn't been that customizable, so anything that adds customizability is going

04:06.580 --> 04:08.200
to be good in my book.

04:08.200 --> 04:13.080
True, and while we're talking about issues with 3.38, keep in mind this one also ships

04:13.080 --> 04:14.120
with a new tracker.

04:14.120 --> 04:16.440
That's the file system indexer.

04:16.440 --> 04:21.360
This could be fine, but it also could have some performance trade-offs.

04:21.360 --> 04:23.340
I have not properly tested this yet.

04:23.340 --> 04:25.200
I'm not saying that it does.

04:25.200 --> 04:29.760
I'm saying this is an area that requires further testing and monitoring here at JB and then

04:29.760 --> 04:33.560
I'll be able to report on the full impact, but it's going to take a little bit because

04:33.560 --> 04:36.840
you got to build up this index, you got to use it for a while, so this is one of those

04:36.840 --> 04:42.400
things where performance implications of this might not be felt until weeks into usage of

04:42.400 --> 04:43.400
3.38.

04:43.400 --> 04:47.480
However, the project seems to be pretty happy about it, and they say some of the major improvements

04:47.480 --> 04:52.340
in Tracker 3 is that the search engine and database make the Flatpak application sandbox

04:52.340 --> 04:57.680
more secure by allowing control over what kinds of data your apps can search and query,

04:57.680 --> 05:01.360
so you have a little more control there as well, or potentially as an end user I would

05:01.360 --> 05:05.480
think you could just turn it off and say Tracker can't index this app at all, if that's your

05:05.480 --> 05:06.480
preference.

05:06.480 --> 05:10.680
But you know, I tried this out on my little Vivo book, which is pretty old, I think it's

05:10.680 --> 05:16.960
like a second generation i3, so it's really not very powerful, and it did feel a bit sluggish,

05:16.960 --> 05:22.400
but then I logged out, changed the session to Xubuntu, and it was much faster.

05:22.400 --> 05:28.200
I know, okay, maybe that's not the target hardware for it, but it's still, for all the

05:28.200 --> 05:32.640
performance improvements, it's still not going to compete with something like XFCE.

05:32.640 --> 05:37.160
Do you think you perceive just the rendering time, like animating things in and out, as

05:37.160 --> 05:41.600
a performance difference, where I would assume in XFCE there is no fade in or fade out of

05:41.600 --> 05:45.840
menus of any such, it's just as fast as it can render to the screen?

05:45.840 --> 05:47.480
That could be it, possibly.

05:47.480 --> 05:54.240
It could be just a feeling, but even websites seem to be quicker, as if there was just more

05:54.240 --> 05:58.360
resources to go around, because this laptop I'm talking about, it's an old i3, it's only

05:58.360 --> 06:04.960
got 4 gigabytes of RAM, not upgradable, so you really need something light, and it could

06:04.960 --> 06:05.960
be perception.

06:05.960 --> 06:10.440
I don't know, I didn't do any benchmarks, but I just went back into XFCE and just felt

06:10.440 --> 06:14.280
much more at home, and things just felt much quicker.

06:14.280 --> 06:15.280
Yeah, fair enough.

06:15.280 --> 06:19.280
I mean, I could see there's probably not only your experience with it and your familiarity

06:19.280 --> 06:23.320
with it, but I could see on a lower end system the GPU's doing less stuff, maybe it does

06:23.320 --> 06:25.120
render things a little faster.

06:25.120 --> 06:31.520
For me, I'm comparing it to Plasma as my daily driver, but I'm also very familiar with Gnome

06:31.520 --> 06:37.800
Shell, and so I see this as a performance improvement from where I've been at, which

06:37.800 --> 06:40.880
is kind of funny, so that's my experience, it's like, oh, this is great.

06:40.880 --> 06:46.080
Yeah, well I'm sure on my 10th Gen i5 desktop it would be absolutely fine, but I wanted

06:46.080 --> 06:50.800
to test it on some older hardware to see how these performance improvements have worked,

06:50.800 --> 06:56.640
and I think it is faster than it once was, but it still just can't compete with desktops

06:56.640 --> 06:59.280
that are just older-fashioned, I suppose.

06:59.280 --> 07:04.360
I'm curious what your older-fashioned preference thinks about the new Gnome versioning scheme,

07:04.360 --> 07:05.560
so get ready for this.

07:05.560 --> 07:11.880
The next version of Gnome due to be released in March 2021 will be Gnome 40.

07:11.880 --> 07:18.840
Well, one thing is it's going to stop people saying 3.38 when they mean 3.38, so that's

07:18.840 --> 07:19.840
good.

07:19.840 --> 07:23.960
And I think that it ultimately makes more sense.

07:23.960 --> 07:26.800
At first I thought, this is ridiculous, what are you doing?

07:26.800 --> 07:32.080
But then if you actually read what Emmanuel Bassi says about this in his post on the Gnome

07:32.080 --> 07:38.960
Discourse, you realize that it does make sense, because I was expecting Gnome 4 to be when

07:38.960 --> 07:45.640
they changed to GTK 4, but what he's saying is that they don't want to have huge changes

07:45.640 --> 07:50.320
happen at specific milestone numbers.

07:50.320 --> 07:55.060
They want it to be much more incremental, and they don't want to have a huge change

07:55.060 --> 08:00.480
like from Gnome 2 to Gnome 3, which was just a complete paradigm shift.

08:00.480 --> 08:09.160
They want to gradually introduce things, and making it 40.1.2.3 makes more sense to do

08:09.160 --> 08:10.160
that, I think.

08:10.160 --> 08:11.680
Yeah, that's a compelling argument.

08:11.680 --> 08:16.480
I will admit my reaction was also sort of like, what the hell, and then my second reaction

08:16.480 --> 08:21.160
was, have they talked to the OpenSUSE folks who are trying to undo the 4.2 versioning

08:21.160 --> 08:23.160
scheme that they came up with?

08:23.160 --> 08:25.440
Maybe they should synchronize.

08:25.440 --> 08:26.720
Don't even get me started on OpenSUSE.

08:26.720 --> 08:31.360
I could not tell you what version they want of anything, I'd have to look it up.

08:31.360 --> 08:38.360
At least with Gnome, it was obvious that this is 38 now, and you know that the even numbers

08:38.360 --> 08:42.400
are stable releases, the odd numbers are development releases.

08:42.400 --> 08:47.560
But Emmanuel makes the point in this post as well, that those even odd numbering things

08:47.560 --> 08:51.320
don't really make any sense anymore, because everything's developed with continuous integration

08:51.320 --> 08:55.280
and stuff that no one's really using the development releases anymore.

08:55.280 --> 08:58.200
No, the more and more of the world is moving to rolling.

08:58.200 --> 08:59.200
Rolling or CI.

08:59.200 --> 09:00.200
It is.

09:00.200 --> 09:01.200
I know.

09:01.200 --> 09:04.680
I'm just teasing you a little bit.

09:04.680 --> 09:09.440
Honestly, I think you've got to read this post, because he does lay it out in such logical

09:09.440 --> 09:14.240
detail, and you might be thinking, no, that's just ridiculous if you only read the headline

09:14.240 --> 09:18.800
like I did, and it sounds like you did as well, but I was convinced by this.

09:18.800 --> 09:22.940
And he says in that post as well, we're not changing the way GTK is versioned.

09:22.940 --> 09:29.120
So that kind of when you realize, okay, yeah, that would have been confusing to have Gnome

09:29.120 --> 09:34.000
4 and GTK 4, but not really have them be one in the same and not have them connected.

09:34.000 --> 09:37.240
He preemptively answers in this post his question.

09:37.240 --> 09:39.200
This is nonsensical.

09:39.200 --> 09:41.480
Why do you want to change the versioning scheme at all?

09:41.480 --> 09:42.480
It's just numbers.

09:42.480 --> 09:46.660
And his answer is, numbers, like words, have meaning and tell a story.

09:46.660 --> 09:50.280
With a change in the versioning scheme, we wish to communicate the fact that Gnome doesn't

09:50.280 --> 09:55.680
see major versions of the development platform as the driving force behind major changes

09:55.680 --> 10:00.560
in the user experience, and that radical changes to the user experience are going to be introduced

10:00.560 --> 10:07.240
progressively, so that we can refine and iterate them over time, instead of dumping them in

10:07.240 --> 10:09.100
our user's lap.

10:09.100 --> 10:14.640
So what this really means for end users of Gnome Desktop is in March 2021, what it says

10:14.640 --> 10:19.240
in the Gnome version in the about section of Gnome Control Center, we'll say 40.

10:19.240 --> 10:21.120
That's really the end user impact here.

10:21.120 --> 10:25.120
Yeah, and there won't be a huge change when GTK 4 comes.

10:25.120 --> 10:29.660
They're going to try and make it less of a huge upsetting change.

10:29.660 --> 10:35.200
Maybe this is more reflective of the position Gnome has as a bit of a workstation OS on

10:35.200 --> 10:38.400
almost every OEM system that ships with Linux right now.

10:38.400 --> 10:42.960
Well, yeah, and every big distro that's shipping a desktop is shipping Gnome.

10:42.960 --> 10:49.040
But also making this workstation grade is finally addressing the extensions.

10:49.040 --> 10:52.680
I think there's a clear market for Gnome Shell extensions.

10:52.680 --> 10:57.640
They add clear utility and value to my desktop experience, and it seems many others.

10:57.640 --> 11:02.840
And so there is a bit of an initiative to reboot the project's approach to extensions.

11:02.840 --> 11:06.000
Yeah, and they're calling it extensions rebooted.

11:06.000 --> 11:07.560
What is extensions rebooted?

11:07.560 --> 11:13.520
It is an attempt to address the myriad of issues around the Gnome Shell extension ecosystem.

11:13.520 --> 11:19.080
Primarily, they want to build a process around how extensions are accepted into the extensions

11:19.080 --> 11:22.040
website and how they are supported.

11:22.040 --> 11:26.560
Rather than being the free for all that it has been, they want some order out of the

11:26.560 --> 11:27.560
chaos.

11:27.560 --> 11:31.880
And I don't know if this is manifesting so much as like, here's a stable Gnome extensions

11:31.880 --> 11:33.880
API for you to use.

11:33.880 --> 11:39.840
But it may manifest as proper documentation on how extensions work and reasonable expectations

11:39.840 --> 11:45.360
to be an extensions developer, how to participate in the Gnome extensions community, a CI pipeline

11:45.360 --> 11:50.080
that has a virtual machine on the back end that can spin the desktop up in multiple versions

11:50.080 --> 11:55.720
and test these things, centralizing extensions for break testing on the Gnome GitLab space,

11:55.720 --> 11:59.240
and potentially maybe even creating a forum for extension developers and extension writers

11:59.240 --> 12:01.700
to work together for a Gnome release cycle.

12:01.700 --> 12:05.640
They all kind of go off into their own individual extension islands right now, and then just

12:05.640 --> 12:07.160
rush to update.

12:07.160 --> 12:10.800
There's some collaboration, but not nearly as much as there could be.

12:10.800 --> 12:15.120
And if maybe the project could even facilitate just those things, I could see that potentially

12:15.120 --> 12:16.560
going a really long way.

12:16.560 --> 12:21.400
Yeah, just starting the conversation and getting people together could be enough to at least

12:21.400 --> 12:25.620
improve the situation where you're not worrying whether your extensions are going to break

12:25.620 --> 12:26.620
every update.

12:26.620 --> 12:28.400
Yeah, very much so.

12:28.400 --> 12:33.520
Sharing some of that work to get the extensions working with the next release could be a huge

12:33.520 --> 12:35.600
relief for the community.

12:35.600 --> 12:39.360
And if this initiative really, like you say, does nothing other than just get these individual

12:39.360 --> 12:44.580
developers talking to each other and collaborating, that made itself just be a success and improve

12:44.580 --> 12:46.320
the situation on Gnome.

12:46.320 --> 12:50.840
I mean, if I had a checklist of things I'd love to see, it'd be everything we just discussed.

12:50.840 --> 12:54.800
And also, here's a stable API for you to use.

12:54.800 --> 12:55.800
You just might not be there.

12:55.800 --> 12:59.280
And maybe I'm just naive, but it seems like that would be fantastic.

12:59.280 --> 13:03.300
But absent of that, all of this initiative seems like it really could get us a long way

13:03.300 --> 13:08.960
to improving that experience, which as a potential switcher back to Gnome Shell, making sure

13:08.960 --> 13:13.400
the extensions I choose stick around really matters to me.

13:13.400 --> 13:18.280
Because I have put a ton of work into whittling down the ones I use to just the essentials.

13:18.280 --> 13:21.640
And the ones I stick with, I really want, I really want.

13:21.640 --> 13:25.260
But I always know in the back of my mind, it's a risk that they could go away with the

13:25.260 --> 13:26.260
next release.

13:26.260 --> 13:30.640
Yeah, I always worry about that when I'm using Gnome every day.

13:30.640 --> 13:33.480
Now you're more worried about what's going on with Chromebooks.

13:33.480 --> 13:39.540
How do you think you say this one, lacrosse?

13:39.540 --> 13:45.800
I think I would say lacrosse, as in the game, where you have those sticks with the baskets

13:45.800 --> 13:46.800
on them, maybe.

13:46.800 --> 13:50.480
Yeah, I would prefer it to be Lacroix, which I wish I had right now.

13:50.480 --> 13:59.560
But this kind of has been spotted by 9to5Google, who caught changes in the upstream ChromeOS

13:59.560 --> 14:00.560
code, right?

14:00.560 --> 14:04.020
Yeah, this has kind of been filtering through various news sites with different people picking

14:04.020 --> 14:07.380
up on different aspects of it over the last couple of weeks.

14:07.380 --> 14:09.560
But it caught my attention this week.

14:09.560 --> 14:16.420
And the crux of it is that Google are in the process of decoupling Chrome, the browser,

14:16.420 --> 14:18.020
from ChromeOS.

14:18.020 --> 14:21.200
And that means that they can be updated independently.

14:21.200 --> 14:27.960
So what Google is doing is creating a Linux desktop that runs a web browser application.

14:27.960 --> 14:31.640
Yeah, rather than it being completely baked into it.

14:31.640 --> 14:36.880
Like we saw with Firefox OS, where you could only update the browser by updating the whole

14:36.880 --> 14:39.500
system, which didn't make any sense.

14:39.500 --> 14:44.180
But with Google's frequent updates with Chromebooks, that's not really been a problem up until

14:44.180 --> 14:45.240
now.

14:45.240 --> 14:51.560
But maybe they're thinking longer term here, that once they stop supporting a particular

14:51.560 --> 14:56.600
Chromebook, the OS doesn't get any updates, but they can at least update the browser potentially,

14:56.600 --> 14:58.100
if it's decoupled.

14:58.100 --> 14:59.640
That has to be part of this.

14:59.640 --> 15:01.640
Some Chromebooks, you know, eight years of support.

15:01.640 --> 15:03.960
That's a long time to update the OS.

15:03.960 --> 15:09.560
So I could also see wanting to decouple that just for testing purposes and shipping purposes.

15:09.560 --> 15:13.360
But something else that's kind of interesting in this story is part of what's making this

15:13.360 --> 15:19.240
possible for Googles to do with a fully accelerated setup the way they want is utilizing Wayland.

15:19.240 --> 15:25.240
So in this new, separated Linux distro with a Chrome browser on top of it, all of the

15:25.240 --> 15:30.320
native 3D accelerated experience that they guarantee on a Chromebook today is going to

15:30.320 --> 15:33.160
be delivered with Chrome on Wayland.

15:33.160 --> 15:34.160
Yeah.

15:34.160 --> 15:37.600
When I was reading this, it was almost like I could hear your bell ringing in my head

15:37.600 --> 15:38.600
when I saw that.

15:38.600 --> 15:43.840
I thought, hmm, this means that Chrome, which is the most popular browser and let's face

15:43.840 --> 15:50.000
it is very well used on Linux, not by me personally as a full time browser, but nevertheless it's

15:50.000 --> 15:51.000
still installed.

15:51.000 --> 15:57.300
But it means that Chrome on Linux is going to get first class support from Google.

15:57.300 --> 16:01.060
They're going to really care about this on Wayland as well.

16:01.060 --> 16:05.080
This is good news for the Linux desktop if you use Chrome.

16:05.080 --> 16:06.240
And I have to caveat that.

16:06.240 --> 16:11.000
Obviously there are a lot of people who will only use free software and default to Firefox,

16:11.000 --> 16:15.480
but I think there's a lot of people out there on the Linux desktop running the Chrome browser

16:15.480 --> 16:17.720
and this is very good news for those people.

16:17.720 --> 16:18.720
Yeah.

16:18.720 --> 16:22.600
It seems to me that you could look at this as potentially Google acknowledging that there

16:22.600 --> 16:27.960
is a important division of users that they want for their browser that are on the Linux

16:27.960 --> 16:33.160
desktop and the best way to deliver the best version of Chrome is to focus on the Linux

16:33.160 --> 16:36.960
desktop app and then ship that on their Chrome OS distro.

16:36.960 --> 16:42.360
They note in their lacrosse documents that they do expect there to be a slight performance

16:42.360 --> 16:47.040
impact by this change because instead of it all being one integrated piece where the browser

16:47.040 --> 16:51.960
is literally integrated with their display manager, Chrome browser will have to use APIs

16:51.960 --> 16:54.680
to now communicate with its Chrome host OS.

16:54.680 --> 17:00.760
And so they warn of maybe a one to two millisecond skew in performance.

17:00.760 --> 17:05.080
Now I don't know really at the end of the day how you even know if you're a Chrome OS

17:05.080 --> 17:06.360
user this has happened.

17:06.360 --> 17:09.720
It may just be one day Chrome OS updates and they've just separated the two and there's

17:09.720 --> 17:13.040
really no obvious front end user experience to it.

17:13.040 --> 17:14.040
But I agree with you.

17:14.040 --> 17:18.560
I think this is great news for Chrome users of Linux and to me it suggests that Google

17:18.560 --> 17:23.820
sees a larger market here that they need to address and that their current half-assed

17:23.820 --> 17:28.840
approach to Chrome on Linux is insufficient and this is them getting their game together

17:28.840 --> 17:34.400
for the Linux desktop and that to me is even a louder signal than this what seems to be

17:34.400 --> 17:36.800
a much overlooked move for Chrome OS.

17:36.800 --> 17:37.800
I disagree.

17:37.800 --> 17:41.480
I'm afraid I don't think they particularly care about the Linux desktop.

17:41.480 --> 17:46.720
I know that it's growing and it's a valuable segment of the market because there's a lot

17:46.720 --> 17:50.800
of developers and IT professionals and all the rest of it is in Linux but I think there

17:50.800 --> 17:56.320
are far far more people using Chrome OS and I think that it's much more of a sort of happy

17:56.320 --> 18:00.040
byproduct that it's going to be good for the Linux desktop.

18:00.040 --> 18:02.440
I don't think that was forefront in their mind at all.

18:02.440 --> 18:08.680
I think it was all about Chrome OS and making that easier to update and support longer term.

18:08.680 --> 18:10.380
Maybe that is extremely possible.

18:10.380 --> 18:17.480
The one thing that gives me pause with that is they knew going in to building these Chromebooks

18:17.480 --> 18:22.180
and building Chrome OS and signing up for eight years of support they knew this would

18:22.180 --> 18:23.180
be a problem.

18:23.180 --> 18:25.340
Those engineers at Google are very clever.

18:25.340 --> 18:30.720
And so they've now decided to fundamentally change the way they architect that OS in a

18:30.720 --> 18:34.800
radical way and it's a pretty big shift and something's driving that.

18:34.800 --> 18:41.140
It's either the technology to enable that only now recently exists, Wayland, or they've

18:41.140 --> 18:46.160
had a rethink of how they're treating the Linux ecosystem in general and they just want

18:46.160 --> 18:51.440
to forgive the saying essentially kill two browser birds with one browser stone.

18:51.440 --> 18:52.440
Maybe.

18:52.440 --> 18:53.440
Maybe.

18:53.440 --> 18:56.400
Linux.ting.com.

18:56.400 --> 18:57.400
What is Ting?

18:57.400 --> 18:58.400
It's simple wireless.

18:58.400 --> 19:01.120
Just six dollars a month plus your usage on top of that.

19:01.120 --> 19:04.680
What I love about it for me is I'm here at the studio pretty much all the time.

19:04.680 --> 19:05.680
Maybe it's a problem.

19:05.680 --> 19:09.720
And then I head home and in both locations I'm on Wi-Fi.

19:09.720 --> 19:12.000
Why would I pay for data when I'm not using it?

19:12.000 --> 19:13.960
And I'm pretty good at thinking stuff to my phone too.

19:13.960 --> 19:17.280
So that's also like for the tech crowd a leg up.

19:17.280 --> 19:21.040
You pay for what you use a fair price for how much you talk, text and data you use.

19:21.040 --> 19:24.760
They have nationwide coverage, three different carriers coast to coast you can choose from.

19:24.760 --> 19:28.280
I currently am on Verizon but in the past T-Mobile was better for where I sat but I'm

19:28.280 --> 19:29.680
in a new location now.

19:29.680 --> 19:32.240
And something I love about Ting is no contracts.

19:32.240 --> 19:34.000
They don't lock you into a commitment.

19:34.000 --> 19:36.120
You could try Ting risk-free.

19:36.120 --> 19:38.240
Start by going to linux.ting.com.

19:38.240 --> 19:43.560
You'll get a $25 service credit or $25 towards a device and they have a really easy way for

19:43.560 --> 19:44.560
you to check your phone.

19:44.560 --> 19:47.920
When you go to linux.ting.com there's a check your phone link right there.

19:47.920 --> 19:51.120
Just put in your information and that'll give you a pretty good snapshot of your starting

19:51.120 --> 19:52.400
position with Ting.

19:52.400 --> 19:54.960
And then once you do sign up, because I think you'll probably want to when you look at the

19:54.960 --> 19:57.100
pricing, you're in complete control.

19:57.100 --> 19:58.920
You can see your usage at a glance.

19:58.920 --> 20:01.800
You can set usage alerts which is really handy for kid devices.

20:01.800 --> 20:05.740
Think about that too for family members who are not heavy phone users but you want them

20:05.740 --> 20:06.960
to stay connected.

20:06.960 --> 20:08.840
Ting is perfect.

20:08.840 --> 20:10.000
I'm looking at you mom.

20:10.000 --> 20:13.200
And people love using Ting because the customer support is there when you need it.

20:13.200 --> 20:17.400
That dashboard makes things simple and they have a bunch of great devices to choose from.

20:17.400 --> 20:21.680
From a SIM card by itself all the way up to the Galaxy S10 down to a flip phone.

20:21.680 --> 20:22.680
They have the flip phone.

20:22.680 --> 20:26.880
You can also get the iPhone SE directly from Ting but I think a lot of people in our audience

20:26.880 --> 20:31.200
they bring a device because then you can take that $25 credit, you apply it to your account

20:31.200 --> 20:35.840
and it'll likely cover your first month because like the average Ting bill is $23 a month.

20:35.840 --> 20:40.480
You just get started at linux.ting.com.

20:40.480 --> 20:45.120
Well bad news for anyone who was waiting for Firefox send to come back and even worse news

20:45.120 --> 20:47.000
if you also used Firefox notes.

20:47.000 --> 20:49.160
Yeah, double whammy this week.

20:49.160 --> 20:54.060
Now Firefox send was my favorite of the recent tools when they looked like they were going

20:54.060 --> 20:55.920
into different service categories.

20:55.920 --> 21:01.280
And I think it got a loyal audience and I'd used it several times but unfortunately Mozilla

21:01.280 --> 21:06.280
writes some abusive users were beginning to use send to ship malware and conduct spear

21:06.280 --> 21:07.660
phishing attacks.

21:07.660 --> 21:13.240
So this summer they took send offline to address that and they're just kind of leaving it offline.

21:13.240 --> 21:16.600
And I always wondered when they launched it how are they were going to solve this problem.

21:16.600 --> 21:17.600
Yeah, exactly.

21:17.600 --> 21:18.600
You didn't have to sign up or anything.

21:18.600 --> 21:20.360
It was so convenient to use.

21:20.360 --> 21:23.000
It just seemed obvious that it would be abused.

21:23.000 --> 21:26.240
Now it is an open source project so someone may conceivably fork it.

21:26.240 --> 21:32.080
There are some neat like command line implementations already out there and I'll just give a friendly

21:32.080 --> 21:36.300
plug for magic wormhole little quick command line app that I love to send files to folks

21:36.300 --> 21:37.740
just peer to peer.

21:37.740 --> 21:43.000
And notes was a browser extension that you could use to sync text between your computer

21:43.000 --> 21:47.680
and your phone and it was all encrypted and everything and it was well loved by a small

21:47.680 --> 21:49.560
number of people by the sounds of things.

21:49.560 --> 21:55.960
But I just don't think that it had the adoption to justify its existence, which we have to

21:55.960 --> 22:00.240
expect to see more of this as Mozilla have shed a bunch of staff, they're looking to

22:00.240 --> 22:02.960
cut costs, they're going to be casualties.

22:02.960 --> 22:06.000
It sort of makes sense and I think Mozilla is pretty upfront about it in this post.

22:06.000 --> 22:11.400
They say it was essentially us working out our sync back end and we needed a project

22:11.400 --> 22:14.720
that wasn't people's super important passwords.

22:14.720 --> 22:18.680
So it was notes but you know we figured out the tech and now we don't really have the

22:18.680 --> 22:22.720
resources to run it and I think it's pretty fair on that one.

22:22.720 --> 22:27.160
And send also in the grand scheme of things is it looks like a high cost low return kind

22:27.160 --> 22:29.760
of project and it's completely fair they killed it.

22:29.760 --> 22:34.440
One could argue maybe should never have launched but that's a separate discussion and I would

22:34.440 --> 22:38.000
love to see some projects fork this and people have their own self-hosted implementations

22:38.000 --> 22:39.000
of it.

22:39.000 --> 22:41.680
So that's not a bad contribution to the world in the end.

22:41.680 --> 22:44.200
Yeah we can add it to our self-hosted pocket instances.

22:44.200 --> 22:47.800
Oh hang on, still waiting for the source code on that one.

22:47.800 --> 22:50.160
You know they get a lot of goodwill with that one.

22:50.160 --> 22:54.200
But you know I've got a friend who's somewhat interested in Linux and hasn't quite made

22:54.200 --> 22:59.200
the switch yet and he said to me that he used both of these and he was very annoyed that

22:59.200 --> 23:05.480
they were being shut down and it was just yeah okay thanks Mozilla, yet more disappointment.

23:05.480 --> 23:09.240
Yeah that's completely understandable from an end user standpoint who's relying on this.

23:09.240 --> 23:12.360
I think what you're seeing here is Mozilla's had to make some hard choices and we're still

23:12.360 --> 23:14.920
watching the fallout from that.

23:14.920 --> 23:18.720
Yeah and I think there's going to be a lot more hard choices to come and ultimately that's

23:18.720 --> 23:20.120
probably good.

23:20.120 --> 23:26.520
They should be focusing on their core products, the browser, maybe Thunderbird as well and

23:26.520 --> 23:30.800
the products that are going to make the money, the services and everything, not on all of

23:30.800 --> 23:34.820
these folly ideas I suppose you could say.

23:34.820 --> 23:38.720
And I think there are going to be more casualties here as they realize that they have to cut

23:38.720 --> 23:40.880
costs and focus more.

23:40.880 --> 23:46.440
And ultimately that's the only thing that's going to save them I think long term is focus.

23:46.440 --> 23:49.240
That's the scope of the problem we're talking about.

23:49.240 --> 23:56.200
It's not lost on me and it's not lost on Joe that almost every week there is another piece

23:56.200 --> 24:00.880
to the story about Mozilla on this show and that's remarkable if you think about it.

24:00.880 --> 24:06.200
That is the unwinding of a very complicated story that we are all seeing play out in front

24:06.200 --> 24:11.600
of us happening in real time and this is another piece in that chain.

24:11.600 --> 24:15.640
And I suspect the links earlier made these links inevitable.

24:15.640 --> 24:17.680
It doesn't mean that Firefox isn't still shipping.

24:17.680 --> 24:22.400
In fact Firefox 81 is now rolling out to users of the Play Store on Android.

24:22.400 --> 24:25.560
Yeah and this is something that you need to update to.

24:25.560 --> 24:31.520
If you've been stuck on 68 deliberately because you know that a bunch of things have changed

24:31.520 --> 24:37.100
and let's face it they're not improvements it's a bad idea to stick on 68.

24:37.100 --> 24:43.380
You need to update because simply being connected to the same LAN as an attacker and having

24:43.380 --> 24:48.360
the browser open is enough to make you pretty vulnerable.

24:48.360 --> 24:51.720
Sticking around on version 68 that's something that people are doing on the Android platform

24:51.720 --> 24:52.720
right now?

24:52.720 --> 24:58.440
Yeah there was a huge gap between Firefox 68 on Android and Firefox 79 where they were

24:58.440 --> 25:03.860
keeping 68 updated while they worked on 79 and then they dropped 79 and pretty much

25:03.860 --> 25:08.940
everyone hated it because they just pulled out all the features and so at least my understanding

25:08.940 --> 25:13.860
is there are a bunch of people who are still stuck on 68 kind of waiting for things to

25:13.860 --> 25:19.340
shake out a little bit but really you'd be foolish to do so now with this vulnerability

25:19.340 --> 25:20.340
out there.

25:20.340 --> 25:24.980
The developer that found this Chris Mobley has released a proof of concept so there's

25:24.980 --> 25:31.000
that aspect of this as well which means this is easier for malintended developers let's

25:31.000 --> 25:32.680
say to replicate.

25:32.680 --> 25:37.040
The target just simply has to have the Firefox application running on the phone.

25:37.040 --> 25:38.040
That's it.

25:38.040 --> 25:39.560
You don't need to access any malicious website.

25:39.560 --> 25:41.960
You don't have to click any malicious link.

25:41.960 --> 25:45.000
There's no man-in-the-middle application required.

25:45.000 --> 25:50.000
They can just simply be in a coffee shop the classic cliche coffee shop on the Wi-Fi and

25:50.000 --> 25:53.960
the malicious intender can trick Firefox on your phone into triggering Android's intent

25:53.960 --> 25:57.580
URIs with zero user interaction.

25:57.580 --> 26:02.660
Now the good news is Chris has already reported this issue directly to Mozilla and it's encouraging

26:02.660 --> 26:04.860
to see that they responded right away.

26:04.860 --> 26:09.140
He writes they were quite pleasant to work with providing some good info on where exactly

26:09.140 --> 26:14.100
they think the bug came from and he goes on to say that if you find a Firefox bug he definitely

26:14.100 --> 26:15.920
recommends sending it straight to them.

26:15.920 --> 26:20.680
He says the process was very easy the team members are smart and friendly and it was

26:20.680 --> 26:25.080
a good way to support the project and it helped shape the way people use the web.

26:25.080 --> 26:28.960
That is great to hear that when Mozilla does find out about an issue they seem to handle

26:28.960 --> 26:29.960
it with a lot of grace.

26:29.960 --> 26:33.580
I'm not surprised to hear that at all I've often heard a lot of good things about the

26:33.580 --> 26:35.360
people working at Mozilla.

26:35.360 --> 26:39.340
Well get ready to live with the new Microsoft normal they have submitted a series of patches

26:39.340 --> 26:44.460
to the Linux kernel with the aim being to create a complete virtualization stack with

26:44.460 --> 26:48.060
Linux with the Microsoft hypervisor.

26:48.060 --> 26:52.820
We're talking here Linux running in the root partition with direct access to hardware that

26:52.820 --> 26:55.500
doesn't require Windows for Hyper-V.

26:55.500 --> 27:00.700
Yeah these patches are just RFC request for comments at this stage so this isn't happening

27:00.700 --> 27:06.120
just yet but this is the very first beginnings of it and as you say this means that once

27:06.120 --> 27:11.940
all this gets pushed into the kernel you won't have to have Windows on the root partition

27:11.940 --> 27:18.340
of Hyper-V you can have a complete Linux stack asterisk apart from Hyper-V running on Azure

27:18.340 --> 27:24.180
or potentially other places like maybe Windows subsystem for Linux.

27:24.180 --> 27:25.180
Maybe.

27:25.180 --> 27:32.900
Someone else interesting in this RFC is Microsoft's principal software engineer acknowledged publicly

27:32.900 --> 27:39.180
that quote we drew inspiration from the Zen code in Linux noting that Hyper-V's architecture

27:39.180 --> 27:42.260
is more similar to Zen than it is to KVM.

27:42.260 --> 27:47.260
I just think that's noteworthy having that acknowledgement on the public record that

27:47.260 --> 27:51.700
Zen inspired Hyper-V and a lot of people have good things to say about Hyper-V.

27:51.700 --> 27:56.740
Yeah and it's yet more acknowledgement from Microsoft that Linux is very important and

27:56.740 --> 28:01.100
we'll link to a register article about this and there's something towards the end of it

28:01.100 --> 28:07.100
that really jumped out at me and that was that Windows 10 is on a path to becoming hybrid

28:07.100 --> 28:12.980
Windows slash Linux system and it made me think about how years ago people would predict

28:12.980 --> 28:19.080
that the next version of Windows would be Linux based and they just cut away all the

28:19.080 --> 28:23.740
dead wood all the old compatibility kind of do an Apple pretty much and maybe have some

28:23.740 --> 28:28.760
sort of compatibility layer but base their desktop on Linux and I also know that's ridiculous

28:28.760 --> 28:36.540
that couldn't happen but the more I read about WSL 2 and Azure and Hyper-V the more I think

28:36.540 --> 28:42.860
that maybe just maybe that is where they're going but they're not going to do it overnight

28:42.860 --> 28:47.500
they're not going to have a big Apple style reveal and that's it we're getting rid of

28:47.500 --> 28:52.340
x86 and going to ARM and just deal with it over two years.

28:52.340 --> 28:56.680
It's going to be just creeping bit by bit they'll make the developer story better and

28:56.680 --> 29:02.380
better with the Linux kernel and they'll put more and more stuff over to that until eventually

29:02.380 --> 29:07.740
the NT stuff will just fall by the wayside and you'll end up with a Linux desktop.

29:07.740 --> 29:10.260
I mean is that crazy of me to think that?

29:10.260 --> 29:15.340
I think so I mean I don't want to be the guy that was like no it's never going to happen

29:15.340 --> 29:22.340
and then like in two years it happens but I think this is all about Azure still and

29:22.340 --> 29:28.020
yeah these changes will definitely eventually trickle down to desktop Windows 10 but if

29:28.020 --> 29:34.460
you look at this I believe what they are trying to do is solve a problem for Azure customers

29:34.460 --> 29:39.700
and that is right now if you go run VMs on Azure even if they're Linux VMs underneath

29:39.700 --> 29:44.200
it all they're running on a Windows box and that ultimately has performance limitations

29:44.200 --> 29:48.440
especially when you're trying to scale and that is a limiting factor I think in my opinion

29:48.440 --> 29:54.340
what do I know for Azure and now they can offer a quote complete virtualization stack

29:54.340 --> 30:00.300
with Linux end quote I think that's a key thing for them and along with that they've

30:00.300 --> 30:04.960
also ported Intel's open source cloud hypervisor tool which is a virtual machine monitor written

30:04.960 --> 30:12.160
in rust that normally runs on KVM but they've ported it over to Hyper-V but it's early still

30:12.160 --> 30:15.760
but I think it's an indicator of where their head is at with this is they're looking at

30:15.760 --> 30:22.240
this very much from a services offering standpoint I could see it trickling down all the way

30:22.240 --> 30:27.700
to desktop but I don't know if it has as much practice there because in reality you kind

30:27.700 --> 30:33.260
of achieve this with dual booting right I mean in a way so I don't know for sure I think

30:33.260 --> 30:38.900
it could indicate a future trend line but I'm still not buying the rumor that one day

30:38.900 --> 30:44.300
we're gonna see an official desktop Linux for Microsoft I just I think the GPL is not

30:44.300 --> 30:49.980
necessarily attractive to them in the desktop context in the server side development tools

30:49.980 --> 30:54.380
area I think they're comfortable with it now I don't see that with them on the desktop

30:54.380 --> 31:01.740
yet and going all Linux and shipping the Linux environment means touching a lot of GPL code

31:01.740 --> 31:06.560
yes but they're already doing that they're already shipping Linux kernel updates via

31:06.560 --> 31:11.460
Windows update yeah because it's GPL 2 not 3 and maybe they were worried that it might

31:11.460 --> 31:15.540
switch over to 3 and that would cause them a lot more problems but it's pretty clear

31:15.540 --> 31:20.260
that at least while Torvalds are still around it's going to be GPL 2 and I can't imagine

31:20.260 --> 31:25.540
the Linux Foundation wanting to go the GPL 3 route yeah and so that problem seems to

31:25.540 --> 31:31.860
be solved and I'm not talking two years that's ridiculous I'm talking 10 plus years I'm talking

31:31.860 --> 31:38.620
very very slowly piecemeal bit by bit it starts to rely more and more on the Linux kernel

31:38.620 --> 31:43.460
I don't know I still think it's it's unlikely but it's it seems that it's possible it now

31:43.460 --> 31:49.140
looks like it's possible for the first time to me and the question I think is what happens

31:49.140 --> 31:55.180
if the kernel team says nice but no thanks will Microsoft run their own fork of the kernel

31:55.180 --> 31:59.100
that seems like something they are capable of doing they already do with Azure sphere

31:59.100 --> 32:03.820
so perhaps they would do this for Azure virtualization options as they would just be a Microsoft

32:03.820 --> 32:09.540
kernel and you're right you're like at that point they're so deep in a GPL code that I

32:09.540 --> 32:14.980
think my concern may not be founded because they're about as GPL as it's going to get

32:14.980 --> 32:19.620
now they're right in there with the kernel you know I don't think that these patches

32:19.620 --> 32:25.460
will be rejected because as long as it doesn't affect anything else then it doesn't really

32:25.460 --> 32:29.120
matter and as long as the code is up to scratch and Microsoft's got enough experience now

32:29.120 --> 32:34.020
with dealing with Torvalds and team I don't think that that's going to be a problem right

32:34.020 --> 32:38.940
and they're a valuable member of the Linux Foundation which pays a couple of those paychecks

32:38.940 --> 32:43.780
on the Linux kernel team and I think it's a clever strategy to go in and say it's a

32:43.780 --> 32:50.300
lot like Zen it's you know it's like Zen but with some differences I suppose and whatever

32:50.300 --> 32:53.700
happens with that story and everything else we've been tracking this week we'll keep you

32:53.700 --> 32:58.580
updated we'll keep an eye on it go to linuxactionnews.com subscribe for all the ways to get this particular

32:58.580 --> 33:03.180
show but maybe even better yet go get the all Jupiter broadcasting shows feed you can

33:03.180 --> 33:06.680
get it on the main site or just search in your podcast client not only do you get this

33:06.680 --> 33:12.140
show but anything new we launch you'll get it there first and you can go to linuxactionnews.com

33:12.140 --> 33:16.220
slash contact for ways to get in touch with us we'll be back next Monday with our weekly

33:16.220 --> 33:21.060
take on the latest Linux and open source news you can find me at chrislass.com and you can

33:21.060 --> 33:41.660
find me at joelress.com thanks for joining us and we will see you next week see you later


WEBVTT

00:00.000 --> 00:09.040
Hello, and welcome to Linux Action News, episode 207, recorded on September 19th, 2021.

00:09.040 --> 00:10.040
I'm Chris.

00:10.040 --> 00:11.040
And I'm Wes.

00:11.040 --> 00:12.040
Hello, Wes.

00:12.040 --> 00:13.120
Let's do the news.

00:13.120 --> 00:17.680
We've been focused on the server and the enterprise the last few episodes.

00:17.680 --> 00:22.800
So this week, we wanted to start with the good old Linux desktop and some good news

00:22.800 --> 00:25.560
for HDR monitor users out there.

00:25.560 --> 00:30.940
Red Hat is hiring specifically for a full time position to work on the Linux desktop

00:30.940 --> 00:35.480
graphic stack and focus on HDR display support.

00:35.480 --> 00:39.880
The job posting reads, quote, the Red Hat workstation engineering team is looking for

00:39.880 --> 00:46.560
an experienced senior software engineer to work on the desktop, compositor and GPU support

00:46.560 --> 00:50.400
for high dynamic range formats and displays for Linux.

00:50.400 --> 00:57.160
The post also specifically mentions GNOME when talking about job responsibilities, saying

00:57.160 --> 01:01.960
he will contribute to feature enhancements, bug fixes and major subsystems like Linux

01:01.960 --> 01:09.320
kernel, Wayland and GNOME, all in support of implementation of HDR on Linux.

01:09.320 --> 01:14.800
While they do talk about working upstream in general, no other desktop environment is

01:14.800 --> 01:16.900
specifically mentioned.

01:16.900 --> 01:21.600
That does make me a touch nervous there, Wes, because it well, it seems like a full stack

01:21.600 --> 01:22.600
job, right?

01:22.600 --> 01:26.180
Like it seems like you got to do the lower level driver stuff.

01:26.180 --> 01:30.120
You have to do the Wayland stuff and you have to do the toolkit and desktop environment stuff

01:30.120 --> 01:36.300
all has to support HDR and the full color range you need for HDR.

01:36.300 --> 01:40.600
And so I would think the plasma is going to need similar work to enable this in the plasma

01:40.600 --> 01:45.280
desktop and the cute developers love to do similar work to enable this in Qt.

01:45.280 --> 01:51.560
So it does leave me wondering how plasma can kind of keep up and offer a similar functionality.

01:51.560 --> 01:53.720
So there is some parity between the two major desktops.

01:53.720 --> 01:58.920
And maybe if anyone has an understanding of some work or anything that is already ongoing

01:58.920 --> 02:03.700
to support this, let me know at our contact page at linuxactionnews.com slash contact.

02:03.700 --> 02:07.320
But you did do some digging into the state of HDR and Qt.

02:07.320 --> 02:13.040
Yeah, well, a few years ago, 2019, Krita was looking at adding HDR support, which makes

02:13.040 --> 02:14.640
sense, right?

02:14.640 --> 02:19.080
And at the time, they found that Qt could really only support up to an eight bit color

02:19.080 --> 02:20.080
space.

02:20.080 --> 02:24.960
They wanted something more like 10 bit or 16 bit for like full HDR support.

02:24.960 --> 02:29.960
They were able to get there basically by hacking up Qt a bit and changing things and making

02:29.960 --> 02:32.560
more of it color space aware.

02:32.560 --> 02:36.420
But sadly, at the time, there was really only HDR support from Windows.

02:36.420 --> 02:38.320
So that's where this work was done.

02:38.320 --> 02:41.640
I don't really know what the state is on Linux today.

02:41.640 --> 02:49.760
Yeah, but I think the silver lining here, and it's a pretty nice silver lining.

02:49.760 --> 02:55.160
Even if not all of that work is usable outside of GNOME and GTK, a lot of it is going to

02:55.160 --> 02:59.120
be work that will be and it's all going to be upstream.

02:59.120 --> 03:03.720
So everyone can benefit because there will be some lower level components that are improved

03:03.720 --> 03:05.020
for this.

03:05.020 --> 03:08.320
And the stuff that may or may not be done to GTK and GNOME is all going to be out in

03:08.320 --> 03:09.320
the public.

03:09.320 --> 03:12.240
It'll be there for the documentation for everyone to see.

03:12.240 --> 03:14.200
So there will be benefits universally.

03:14.200 --> 03:16.680
This is it's a 100 percent a good move.

03:16.680 --> 03:21.560
And I'm I'm grateful that Red Hat still does some of this very heavy lifting, even though

03:21.560 --> 03:27.960
they don't directly sell a desktop product outside of a few rail desktop installations.

03:27.960 --> 03:31.080
And I guess those clients are important enough or whatever it is.

03:31.080 --> 03:33.080
I am just so grateful that Red Hat does this.

03:33.080 --> 03:37.280
I'm not trying to take away from that, but I am always looking out for my my favorite

03:37.280 --> 03:38.280
desktop.

03:38.280 --> 03:41.720
It's just a difficult world where we have a lot of competing interests in Linux and

03:41.720 --> 03:43.080
there are a lot of upsides, right?

03:43.080 --> 03:48.440
Because Plasma is very distinct from GNOME, but there are some downsides, too.

03:48.440 --> 03:52.120
If you're interested in helping out with this work, well, you'll need to be highly

03:52.120 --> 03:55.100
proficient in C, of course.

03:55.100 --> 03:58.760
And Red Hat says you'll need to be familiar with contributing to the development of a

03:58.760 --> 04:02.760
major desktop Linux distribution, their words.

04:02.760 --> 04:09.800
And then as examples of that, you've got Fedora, Ubuntu or Google Chrome OS.

04:09.800 --> 04:14.560
You can work remotely or in a Red Hat office up to you, but you do have to work in a country

04:14.560 --> 04:17.160
where Red Hat is registered to do business.

04:17.160 --> 04:21.000
Well, sticking with the desktop for a bit longer, Canonical has announced that they

04:21.000 --> 04:25.800
are shipping Firefox as a snap in future versions of Ubuntu.

04:25.800 --> 04:30.760
This is apparently the work and result of cooperation between the desktop team at Canonical,

04:30.760 --> 04:35.280
the snap team at Canonical and developers over at Mozilla.

04:35.280 --> 04:39.360
And it seems to be the first step towards a dab to snap transition that will take place

04:39.360 --> 04:42.080
during the 20204 development cycle.

04:42.080 --> 04:47.200
It's not clear exactly what happened behind the scenes in the Firefox 92 release notes,

04:47.200 --> 04:52.820
though Mozilla say that Canonical is now building the official Firefox snap.

04:52.820 --> 04:57.320
At the same time, Ubuntu has said Mozilla is in charge of publishing the snap.

04:57.320 --> 05:01.640
I'm hoping that mostly just means they've got well-connected CI systems.

05:01.640 --> 05:05.080
Either way, it does sound like Mozilla and Canonical have spent some considerable time

05:05.080 --> 05:09.600
together to make sure this goes well, including making sure that things like Firefox user

05:09.600 --> 05:13.200
profiles are brought over to the snap version when they make the transition.

05:13.200 --> 05:16.680
Yeah, OK, that's good, and I'm glad they thought of that.

05:16.680 --> 05:21.480
And so to be clear here, if you're a Firefox user on Ubuntu, this is going to impact users

05:21.480 --> 05:28.360
of the Ubuntu desktop installing 2110 or upgrading to 2110 and then the full transition is targeting

05:28.360 --> 05:30.780
2204.

05:30.780 --> 05:35.080
On the upside, if you're a fan of these kinds of things, it does appear this snap is using

05:35.080 --> 05:36.960
strict confinement.

05:36.960 --> 05:41.440
That is good to see, but I am struck by the fact that if you rewound this story a couple

05:41.440 --> 05:46.520
of years, I think this announcement would have been met with outrage online.

05:46.520 --> 05:48.720
And I've seen a little, but I see not much.

05:48.720 --> 05:51.640
I mean, it's very little compared to what I think it would have been.

05:51.640 --> 05:59.480
And I wonder maybe if in 2021 people are just used to the concept of universal sandbox apps.

05:59.480 --> 06:00.480
Is it becoming normal?

06:00.480 --> 06:06.320
I mean, I'm not sure what I attribute this rather mediocre, mild reaction to.

06:06.320 --> 06:09.280
Yeah, I mean, part of it might be normalization.

06:09.280 --> 06:13.880
It's already packaged up as a flat pack, say, and Canonical have been moving more and more

06:13.880 --> 06:18.080
things to a snap, including other browsers like Chromium, right?

06:18.080 --> 06:23.720
But it also might be just that there's less usage of Firefox in general, sad as that is

06:23.720 --> 06:25.440
to say.

06:25.440 --> 06:29.080
But really, to my mind, I'm just not that upset either.

06:29.080 --> 06:33.640
I mean, it's a little strange because Firefox is kind of the default browser on a lot of

06:33.640 --> 06:36.320
these, you know, open source operating systems these days.

06:36.320 --> 06:39.840
And thinking of it being in a non-traditional package is a bit strange.

06:39.840 --> 06:44.200
But I think you're right, for a browser, for something that changes all the time, it kind

06:44.200 --> 06:45.640
of makes sense to be packaged this way.

06:45.640 --> 06:49.760
I mean, heck, Mozilla even distributes a tarball you can just download and run, which is how

06:49.760 --> 06:51.720
I've been trying out the latest versions anyway.

06:51.720 --> 06:52.720
Yeah.

06:52.720 --> 06:53.720
And you make a good point.

06:53.720 --> 06:54.720
It has been a flat pack.

06:54.720 --> 06:56.960
And truthfully, I don't mind having my browser a little extra sandbox.

06:56.960 --> 06:59.720
That seems like a good thing.

06:59.720 --> 07:00.720
And I think you're right.

07:00.720 --> 07:02.440
If people really care, they'll just grab the tar.

07:02.440 --> 07:05.400
The type of people who would care could just grab the tarball.

07:05.400 --> 07:06.400
That's fine.

07:06.400 --> 07:10.720
If you've got questions or thoughts and Ubuntu is still collecting feedback as well, that's

07:10.720 --> 07:15.320
all happening over on the Ubuntu discourse where they've got an FAQ and they've posted

07:15.320 --> 07:17.520
some of their rationale for going through this.

07:17.520 --> 07:22.400
We will, of course, have that linked in the show notes.

07:22.400 --> 07:27.760
Rather impressively, there are already some new developments in the effort to port Linux

07:27.760 --> 07:30.200
to Apple's M1 platform.

07:30.200 --> 07:37.560
Alissa Rosenzweig spoke this week at the VirtualX.org Developers Conference about that ongoing work

07:37.560 --> 07:40.680
and the reverse engineering challenges involved.

07:40.680 --> 07:46.840
Hello, and welcome to this magical talk in the magical world of Toronto, Canada.

07:46.840 --> 07:48.120
It's not really that magical.

07:48.120 --> 07:49.920
We have construction, though.

07:49.920 --> 07:52.880
And this is the talk on the occult of Apple GPU.

07:52.880 --> 07:59.720
I'm Alissa Rosenzweig, your resident witch, and we'll be going on a magical adventure.

07:59.720 --> 08:04.660
Listening to the talk from XDC, you really learn to appreciate just how complicated the

08:04.660 --> 08:11.160
entire task of getting just the M1 GPU stack up and working on Linux really is.

08:11.160 --> 08:17.680
One of the most difficult obstacles so far has been dealing with the graphics co-processors.

08:17.680 --> 08:22.200
So first, I would like to talk about the DCP, which is responsible for the display side.

08:22.200 --> 08:27.360
The DCP is the acronym based on our best guess, based on the behavior of it.

08:27.360 --> 08:29.440
It stands for diabolical cluster puck.

08:29.440 --> 08:32.400
Wait, that can't be right.

08:32.400 --> 08:34.720
This is the display co-processor.

08:34.720 --> 08:36.200
It manages the display controller.

08:36.200 --> 08:38.300
It is not the display controller.

08:38.300 --> 08:39.300
That's a key distinction.

08:39.300 --> 08:42.960
It is a co-processor that has its own co-processor.

08:42.960 --> 08:44.840
It's co-processors all the way down.

08:44.840 --> 08:47.640
There are seven megabytes of firmware on this thing.

08:47.640 --> 08:51.520
Linux or Mac OS does not talk to the display controller itself.

08:51.520 --> 08:54.200
Those registers are just not even in the device tree.

08:54.200 --> 08:58.200
There's this massive pile of firmware with its own pile of firmware that does all of

08:58.200 --> 09:00.040
the display controller interaction.

09:00.040 --> 09:03.840
We just have an API to deal with in the kernel space.

09:03.840 --> 09:06.000
Yeah, I don't know either.

09:06.000 --> 09:11.120
Like, what is happening here?

09:11.120 --> 09:12.120
Co-processors all the way down.

09:12.120 --> 09:16.440
But you know, honestly, the display side really is making great progress.

09:16.440 --> 09:20.640
And the AGX Gellium 3D driver is getting into good shape now.

09:20.640 --> 09:25.960
She also noted that at some point soon, a Vulkan driver will become important as well.

09:25.960 --> 09:30.000
But for the moment, that's a challenge for the future.

09:30.000 --> 09:32.640
However, I think we should all keep our expectations in check.

09:32.640 --> 09:34.160
We're going to get this up and going, it looks like.

09:34.160 --> 09:36.400
I mean, I'm starting to bet on that now.

09:36.400 --> 09:39.400
But I think it's going to be a complicated answer.

09:39.400 --> 09:44.480
Like there's going to be some perhaps gaps in OpenGL support, at least historic OpenGL

09:44.480 --> 09:45.480
support.

09:45.480 --> 09:49.440
Apple has the luxury of being able to look at the same exact sets of features and just

09:49.440 --> 09:51.080
saying, you know what, we don't need those.

09:51.080 --> 09:53.240
We're getting rid of them in hardware.

09:53.240 --> 09:57.860
And basically anything that's deprecated in OpenGL, you're not going to find hardware

09:57.860 --> 09:58.860
support for.

09:58.860 --> 10:06.320
I mean, the M1, huge amounts of the geometry pipeline are done in shaders, which is fast

10:06.320 --> 10:08.160
enough in practice.

10:08.160 --> 10:15.760
The net result is that well-written applications on Linux will run just as fast as their metal

10:15.760 --> 10:17.080
counterparts.

10:17.080 --> 10:23.120
But there will be a lot of hoops to jump through if we ever want to become conformant and support

10:23.120 --> 10:27.380
all the random ancient legacy things and want to pass all the piglets.

10:27.380 --> 10:33.040
In the Q&A portion of the talk, the question of how firmware will be distributed on the

10:33.040 --> 10:34.840
M1 came up.

10:34.840 --> 10:37.680
Something we've worried about could be legally tricky.

10:37.680 --> 10:43.040
It's apparently seemingly straightforward, at least in one regard.

10:43.040 --> 10:48.360
And one last question, Patrick Jacobson asks, is the DCP firmware redistributable or do

10:48.360 --> 10:53.880
you need something like a download script like we have for FaceTime HD webcam drivers?

10:53.880 --> 10:56.120
So this is a very interesting question.

10:56.120 --> 10:58.320
I wish I touched on this earlier.

10:58.320 --> 11:03.160
It's not redistributable, but that doesn't actually matter for our case because Linux

11:03.160 --> 11:06.520
never touches this firmware.

11:06.520 --> 11:09.040
It's on an internal system partition.

11:09.040 --> 11:13.160
So it's on the internal storage, but not on the operating system partition.

11:13.160 --> 11:17.720
It's loaded by the bootloader, presumably it's signature checked by the bootloader,

11:17.720 --> 11:19.540
and then the firmware is locked.

11:19.540 --> 11:25.800
So the operating system, be it Mac OS or Linux, just does not touch this firmware.

11:25.800 --> 11:33.400
This is unfortunate to us because it means we can't modify the firmware to be less ridiculous.

11:33.400 --> 11:37.680
We could not replace it with an open source version even if we wanted to.

11:37.680 --> 11:45.680
However, it neatly avoids all of the legal questions because from Linux's perspective,

11:45.680 --> 11:47.700
there's no firmware being used at all.

11:47.700 --> 11:52.960
And this is one of the great ironies of Asahi Linux to me, is that with the exception of

11:52.960 --> 11:56.320
the Wi-Fi, everything will work on Linux Libre.

11:56.320 --> 11:58.320
And this is very much not a Libre chip.

11:58.320 --> 12:02.300
Now, I'm still seeing it argued online that maybe this work is just a waste of time.

12:02.300 --> 12:06.400
But personally, I feel like that ship has sailed and is a moot point and we should kind

12:06.400 --> 12:07.400
of move on.

12:07.400 --> 12:11.080
But I think if we think about this beyond just getting Linux on this Apple hardware,

12:11.080 --> 12:18.140
which is no doubt going to extend the life of this hardware and also be a boon for developers.

12:18.140 --> 12:24.000
But another result of this is we are getting a deep look at the Apple M1 platform and we're

12:24.000 --> 12:29.280
getting insights into the hardware that Apple doesn't typically share.

12:29.280 --> 12:33.140
The DCP runs the RTKit operating system.

12:33.140 --> 12:35.040
This is the real-time kit.

12:35.040 --> 12:39.960
It is Apple's secret real-time operating system that is running on every piece of firmware

12:39.960 --> 12:46.580
or not every, with the exception of the SecureNClub, which has its own SecureNClub operating system.

12:46.580 --> 12:51.320
It's running on essentially all of the coprocessors on Apple devices.

12:51.320 --> 12:54.840
It's also running on things like the AirPods.

12:54.840 --> 13:01.980
It's a fairly large operating system, not by Linux or Mac OS standards, but by the sorts

13:01.980 --> 13:05.640
of things you'd run on a firmware with real-time constraints.

13:05.640 --> 13:07.800
I mean, it's a whole system.

13:07.800 --> 13:13.240
Some other recent developments in this space include the USB-C support code going out for

13:13.240 --> 13:20.840
testing, GCC announcing plans to support the M1 in an upcoming version, and just today

13:20.840 --> 13:24.000
Alyssa announced she got internal storage working.

13:24.000 --> 13:30.040
Yeah, in fact, while we are recording this very episode, she is live streaming her development

13:30.040 --> 13:34.920
of Linux for the M1, running Linux on the M1, all from the internal disk.

13:34.920 --> 13:36.640
It's looking really good.

13:36.640 --> 13:41.700
When you look at the areas the entire Asahi Linux team is tackling and the speed at which

13:41.700 --> 13:47.440
they are doing it and how it's all going upstream or will be going upstream, it's just so damn

13:47.440 --> 13:48.440
impressive.

13:48.440 --> 13:53.280
It's truly amazing, impressive work being done right now, and the team is just killing

13:53.280 --> 13:54.280
it.

13:54.280 --> 14:03.440
And just a note of congrats to the LVFS project, who just recently served up 2 million firmware

14:03.440 --> 14:05.940
downloads in the past month.

14:05.940 --> 14:12.060
In just one month alone, firmware troublemaker and LVFS project lead Richard Hughes wrote

14:12.060 --> 14:17.700
on Twitter, we hit 2 million firmware downloads in the last 30 days for the first time.

14:17.700 --> 14:26.360
There are now over 3,000 firmware files available on LVFS, with over 100 vendors using 50 different

14:26.360 --> 14:27.360
protocols.

14:27.360 --> 14:30.960
It's been a huge amount of work, but it feels pretty awesome.

14:30.960 --> 14:33.840
It really has been a huge amount of work.

14:33.840 --> 14:40.040
LVFS launched 6 years ago, way back in March of 2015.

14:40.040 --> 14:45.640
Over time, more and more vendors began adopting LVFS for distributing those important firmware

14:45.640 --> 14:51.720
updates, and then in 2019, LVFS joined the Linux Foundation.

14:51.720 --> 14:55.600
You can hear our coverage in Linux Action News 189 for that.

14:55.600 --> 14:56.600
Indeed.

14:56.600 --> 15:01.640
You know, I think for a while, we've been of the opinion that part of what has made

15:01.640 --> 15:07.860
LVFS so successful is their sort of practical approach of adopting standards and not doing

15:07.860 --> 15:10.320
things their own way for no reason.

15:10.320 --> 15:16.340
And a good example of that is them using the same.cab files that Windows uses to distribute

15:16.340 --> 15:18.100
the firmware files.

15:18.100 --> 15:22.520
In a big way, the vendors didn't have to do anything different to package up their updates

15:22.520 --> 15:28.000
to play nice with LVFS and FlopD, so kind of made it more approachable and easier to

15:28.000 --> 15:29.000
adopt.

15:29.000 --> 15:30.400
Yeah, I think that's definitely a factor.

15:30.400 --> 15:34.580
And I think something else that helped with adoption is, although it was really truly

15:34.580 --> 15:39.480
created to solve a problem for the desktop, LVFS and FlopD, the software itself, work

15:39.480 --> 15:44.680
great on phones, tablets, IoT devices, and headless servers, which has been huge.

15:44.680 --> 15:48.200
It has proven to be a very flexible, flexible tool.

15:48.200 --> 15:49.520
It's great.

15:49.520 --> 15:54.120
You've also got things like industry trends helping, like UEFI in general, which kind

15:54.120 --> 15:57.360
of created some standards for all these updates.

15:57.360 --> 16:03.080
And of course, key support from vendors like Dell early on, proving out the concept.

16:03.080 --> 16:05.120
The future seems bright though.

16:05.120 --> 16:10.280
Intel just recently announced they're working on rebootless firmware updates for UEFI systems.

16:10.280 --> 16:16.440
Could really see how a project like LVFS would be interested.

16:16.440 --> 16:17.960
Linode.com slash LAN.

16:17.960 --> 16:23.400
Go there to get $100 in 60-day credit on a new account and go there to support the show.

16:23.400 --> 16:28.080
This episode of Litx Action News is made possible by Linode's sponsorship and by you taking

16:28.080 --> 16:30.360
advantage of our sponsors.

16:30.360 --> 16:34.880
Linode started in 2003 as one of the very first companies in cloud computing.

16:34.880 --> 16:39.360
And now 18 years later, well, they are the largest independent cloud provider in the

16:39.360 --> 16:42.520
world with 11 data centers around the world.

16:42.520 --> 16:47.320
And you know that checks my boxes, but Linode has really remained focused since the very

16:47.320 --> 16:51.440
beginning, making cloud computing simple, affordable, and accessible.

16:51.440 --> 16:55.240
And if you haven't tried it out yet because you think it might be complicated or maybe

16:55.240 --> 17:00.080
it's going to be too, I don't know, server-y, well, don't worry.

17:00.080 --> 17:05.600
You can take advantage of our $100 offer and deploy one of Linode's many ready to go systems.

17:05.600 --> 17:07.360
Like Nextcloud, for example.

17:07.360 --> 17:12.040
If you just go to Linode.com slash LAN, you create an account, you get that $100, and

17:12.040 --> 17:15.160
then you can deploy a Nextcloud instance in seconds.

17:15.160 --> 17:17.320
Or maybe you want to build a discourse community.

17:17.320 --> 17:20.320
Well, they've got a click for that as well.

17:20.320 --> 17:24.140
Or maybe it's time to replace Zoom with something like Chitsi.

17:24.140 --> 17:27.560
You can do that with a one-click deployment on the note as well.

17:27.560 --> 17:32.980
Just get started by going to Linode.com slash LAN and see why we use them for everything.

17:32.980 --> 17:37.200
From development tools to game servers, Linode makes it easy to get started in just a few

17:37.200 --> 17:38.200
clicks.

17:38.200 --> 17:42.480
And then once you're there, you'll find they also have an easy to use powerful cloud

17:42.480 --> 17:47.340
dashboard and S3 compatible object storage that we absolutely love.

17:47.340 --> 17:50.920
They have bare metal servers, if your workload demands that.

17:50.920 --> 17:56.440
Cloud firewalls, DDoS protection, VLAN support, a powerful DNS manager, and even Kubernetes

17:56.440 --> 17:57.800
support if that's how you roll.

17:57.800 --> 17:58.920
It's all in there.

17:58.920 --> 18:01.160
Plus they are their own ISP.

18:01.160 --> 18:03.600
So their networking is just wicked fast.

18:03.600 --> 18:06.280
And they've invested in the best hardware.

18:06.280 --> 18:09.040
There's really so much I could go on about Linode.

18:09.040 --> 18:13.160
And their pricing is 30 to 50% cheaper than other major cloud providers.

18:13.160 --> 18:17.280
And if you ever run into any trouble getting something set up or something goes sideways,

18:17.280 --> 18:22.520
Linode comes with amazing 24 seven customer support by phone or by ticket.

18:22.520 --> 18:25.840
And they have hundreds of guides, tutorials, and they're constantly investing in new

18:25.840 --> 18:28.800
content to help people get things set up.

18:28.800 --> 18:31.400
They really have a deep support for the community.

18:31.400 --> 18:34.320
They made our Jupiter colony reunion road trip possible.

18:34.320 --> 18:39.380
And they invest in content creators that create educational material to help people get started

18:39.380 --> 18:40.920
on Linux.

18:40.920 --> 18:42.200
There's so much to check out.

18:42.200 --> 18:46.480
You just got to go do it for yourself and take advantage of that $100.

18:46.480 --> 18:51.240
Go to linode.com slash land, get that hundred dollars, create a new account and you support

18:51.240 --> 18:52.240
the show.

18:52.240 --> 18:56.800
That's linode.com slash land.

18:56.800 --> 19:00.920
This episode of Linux action news is also made possible by Ting.

19:00.920 --> 19:04.640
And if you're sick of overpaying for cell service, go see why I switched to Ting back

19:04.640 --> 19:11.520
in 2013 and take 25 bucks off by going to the linux.ting.com.

19:11.520 --> 19:15.040
Ting is an MVNO or I guess you could call them a mobile virtual network operator.

19:15.040 --> 19:19.840
But what that means is Ting mobile customers get access to the big carrier networks, but

19:19.840 --> 19:22.840
with way better customer service and pricing.

19:22.840 --> 19:28.880
Ting mobile offers nationwide coverage, a great mix of plans, fast data on LTE and 5G

19:28.880 --> 19:29.880
networks.

19:29.880 --> 19:32.360
And Ting's plans are simple and straightforward.

19:32.360 --> 19:35.060
That's why I've stuck with them since 2013.

19:35.060 --> 19:39.120
They're a mobile operator that's smarter and they have plans that start at $10 and stop

19:39.120 --> 19:40.120
at $55.

19:40.120 --> 19:45.520
I think their set 12 plan could be a great plan for a family and everyone gets access

19:45.520 --> 19:48.040
to Ting's award winning customer service.

19:48.040 --> 19:52.140
And of course, that nationwide LTE and 5G where it's available.

19:52.140 --> 19:54.380
It's really simple to switch to Ting.

19:54.380 --> 19:57.640
Pretty much any phone is going to work because of the networks they support.

19:57.640 --> 20:00.600
But you just get started by going to linux.ting.com.

20:00.600 --> 20:04.600
Check your current phone, go create an account, pick a plan that's right for you.

20:04.600 --> 20:06.560
Ting figures it out and sends you a SIM card.

20:06.560 --> 20:09.080
You pop that in your phone, you get activated in minutes.

20:09.080 --> 20:12.400
And if you ever have any troubles, you contact their great customer service and they get

20:12.400 --> 20:13.400
you sorted out.

20:13.400 --> 20:16.360
So go over to linux.ting.com.

20:16.360 --> 20:21.080
Get that $25 discount and switch to a much better mobile operator.

20:21.080 --> 20:22.600
It's the next generation of Ting mobile.

20:22.600 --> 20:23.600
It's here.

20:23.600 --> 20:26.920
Go see how much you could save and take $25 off of that.

20:26.920 --> 20:27.920
Linux.ting.com.

20:27.920 --> 20:37.280
Black Lotus Labs, the threat research group at Lumen Technologies, formerly SentryLink,

20:37.280 --> 20:43.480
revealed on Thursday that it had discovered new malware that uses the Windows subsystem

20:43.480 --> 20:46.160
for Linux to avoid being detected.

20:46.160 --> 20:50.760
They seem to identify several malicious files that were written primarily in Python and

20:50.760 --> 20:55.400
compiled in the Linux binary ELF format specifically for Debian.

20:55.400 --> 20:59.960
These files acted as loaders running a payload that was either embedded within a sample or

20:59.960 --> 21:04.720
retrieved from a remote server and then injected into a running process using standard Windows

21:04.720 --> 21:05.720
API calls.

21:05.720 --> 21:12.240
I think many of us speculated that this could happen, but now we've got a documented case

21:12.240 --> 21:17.380
of it actually happening, in fact, happening two different ways.

21:17.380 --> 21:19.440
One was a pure Python version.

21:19.440 --> 21:23.920
There was another variant that used Python plus PowerShell.

21:23.920 --> 21:28.320
Once installed, the malware would attempt to kill any antivirus programs it could find

21:28.320 --> 21:31.760
and then spawn a reverse shell.

21:31.760 --> 21:36.440
I think really a big part of the challenge here is that most of the endpoint client security

21:36.440 --> 21:42.560
like antivirus programs and whatnot are just simply not designed to analyze ELF files,

21:42.560 --> 21:44.280
at least on their Windows versions.

21:44.280 --> 21:47.920
Yeah, I guess they'll have to learn.

21:47.920 --> 21:53.520
I just hope this doesn't mean that more enterprises will start locking down access to WSL by

21:53.520 --> 21:54.520
default.

21:54.520 --> 21:57.120
I mean, some places took them forever to even enable the thing.

21:57.120 --> 21:58.120
I know.

21:58.120 --> 21:59.600
I could really see IT departments doing that.

21:59.600 --> 22:03.720
It's just sort of an easy way to solve this problem and then only turning it on for people

22:03.720 --> 22:06.880
who really, really beg to have access to it.

22:06.880 --> 22:11.720
You hate to see that happening, but then again, when you see things like the Linux kernel

22:11.720 --> 22:16.840
adding file servers into itself, well, maybe it's not such a bad idea to lock that thing

22:16.840 --> 22:17.840
down.

22:17.840 --> 22:22.720
It sure didn't take long, but there is already an important security fix inbound for Samsung's

22:22.720 --> 22:25.720
new KSMBD in-kernel file server.

22:25.720 --> 22:31.440
Yeah, this weekend security vulnerability is an issue handling dot dot that basically

22:31.440 --> 22:37.080
leads to files outside of the SMB3 share being accessible to clients.

22:37.080 --> 22:41.600
And oh yeah, there are also three more patches currently undergoing review and testing looking

22:41.600 --> 22:43.000
at buffer overflows.

22:43.000 --> 22:47.080
I hope this is an indication people are taking a real close look at this thing and maybe

22:47.080 --> 22:51.040
it gets a few more eyeballs on it before it ships.

22:51.040 --> 22:55.340
But either way, we'll keep tabs on what happens and keep you informed on that and every other

22:55.340 --> 22:57.280
story in the world of Linux and open source.

22:57.280 --> 23:04.400
So go to linuxactionnews.com slash subscribe for all the ways to get new episodes and linuxactionnews.com

23:04.400 --> 23:06.960
slash contact for ways to get in touch.

23:06.960 --> 23:11.480
And if you haven't subscribed to extras, go to extras dot show slash subscribe and get

23:11.480 --> 23:15.760
subscribe because we have some exclusive content from the road trip coming up soon.

23:15.760 --> 23:21.280
As for us, we'll be back next Monday with our weekly take on the latest links and open

23:21.280 --> 23:22.920
source news.

23:22.920 --> 23:24.080
Thanks for joining us.

23:24.080 --> 23:25.640
And that's all the news for this week.


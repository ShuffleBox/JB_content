WEBVTT

00:00.000 --> 00:16.120
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

00:16.120 --> 00:21.280
This is episode 103, recorded on April 28th, 2019.

00:21.280 --> 00:22.280
I'm Chris.

00:22.280 --> 00:23.280
And I'm Joe.

00:23.280 --> 00:24.280
Hello, Joe.

00:24.280 --> 00:26.360
Good to be in studio with you.

00:26.360 --> 00:27.720
Happy Linux Fest Northwest weekend.

00:27.720 --> 00:31.760
Yeah, it's pretty strange to be actually looking at you while I'm doing this.

00:31.760 --> 00:36.880
Well, it also means that we were running around barbecuing and festing a whole bunch.

00:36.880 --> 00:39.920
But never fear, we still have some stories for you.

00:39.920 --> 00:43.640
Let's kick things off with a big Docker Hub hack story.

00:43.640 --> 00:49.760
It appears that a Docker Hub hack has exposed data of 190,000 Docker Hub users.

00:49.760 --> 00:51.720
Yeah, this is kind of a breaking story.

00:51.720 --> 00:53.880
We only really became aware of it on Friday evening.

00:53.880 --> 00:57.000
So the details are a little bit sketchy at the moment.

00:57.000 --> 01:01.720
But whichever way you look at this, it does not look good for Docker.

01:01.720 --> 01:06.440
The whole thing really came to light when Docker started emailing customers around April

01:06.440 --> 01:07.440
25.

01:07.440 --> 01:12.760
They wrote, on Thursday, April 25, 2019, we discovered an unauthorized access to a single

01:12.760 --> 01:17.880
Docker Hub database storing a subset of non-financial user data.

01:17.880 --> 01:20.760
That's according to the director of Docker support in the email.

01:20.760 --> 01:24.440
But they did say the hacker had access to the database for only a short moment, which

01:24.440 --> 01:31.920
meant about 190,000 users or around 5% of their entire user base for Docker Hub.

01:31.920 --> 01:35.440
Now, if you are a Docker Hub user, there are some warnings that have been issued and some

01:35.440 --> 01:38.440
steps you can take to somewhat mitigate this.

01:38.440 --> 01:42.240
Yeah, that same director of support went on to say for users with auto builds that may

01:42.240 --> 01:46.680
have been impacted, they've revoked the GitHub tokens and access keys.

01:46.680 --> 01:51.040
And they're asking you to reconnect your repositories and check your security logs for like a GitHub

01:51.040 --> 01:54.360
login to see if anything has been accessed.

01:54.360 --> 01:58.420
You'll also have to reconnect the OAuth for automated builds and you'll have to roll over

01:58.420 --> 02:02.340
affected passwords and API keys that were stored in private repos.

02:02.340 --> 02:05.860
That's just good practice, not required, but it's something you probably need to do.

02:05.860 --> 02:10.720
And of course, last but absolutely not least, change your password on Docker Hub.

02:10.720 --> 02:15.000
Now, there's been a lot of criticism online, obviously Reddit, they've been going crazy

02:15.000 --> 02:16.060
about this.

02:16.060 --> 02:20.340
And one particular thing that stood out to me was the lack of two-factor authentication

02:20.340 --> 02:26.440
with Docker Hub, which is a feature that was requested four years ago and still hasn't

02:26.440 --> 02:27.440
been implemented.

02:27.440 --> 02:31.800
But it's not clear whether that would have actually helped in this situation.

02:31.800 --> 02:33.080
There's some argument there.

02:33.080 --> 02:37.780
I don't think it would have helped completely, but come on, it can't hurt to have two-factor

02:37.780 --> 02:39.120
turned on.

02:39.120 --> 02:40.660
Two-factor just is always a great idea.

02:40.660 --> 02:45.600
In this particular case, if the attacker gets a database with hashed passwords, then they're

02:45.600 --> 02:49.080
still going to have that data, which means they'll know what passwords you used.

02:49.080 --> 02:53.760
And if you use that anywhere else or anything that might be exploitable because maybe the

02:53.760 --> 02:56.760
two-factor system isn't perfect, it's just not a complete solution.

02:56.760 --> 03:02.200
But you're right, this was requested 43 months ago, 43 months people have been asking for

03:02.200 --> 03:03.920
two-factor authentication.

03:03.920 --> 03:04.920
It'd be good.

03:04.920 --> 03:05.920
It would be good.

03:05.920 --> 03:07.200
I don't know if it necessarily would have changed much here.

03:07.200 --> 03:11.240
You'd still want to go change your passwords and whatnot, but yeah, let's get that going

03:11.240 --> 03:12.440
Docker Hub.

03:12.440 --> 03:13.440
You know what?

03:13.440 --> 03:15.960
If you're going to be at the enterprise level, that's something you need to do.

03:15.960 --> 03:19.840
This is really not the Docker story that I expected to be talking about right now because

03:19.840 --> 03:22.280
earlier in the week, they announced a new partnership with Arm.

03:22.280 --> 03:24.760
Yeah, it's funny you say that because they're really excited about this.

03:24.760 --> 03:29.080
I bet they are a little disappointed that this isn't the lead story and Arm is really

03:29.080 --> 03:31.480
making a big stink out of this as well.

03:31.480 --> 03:34.600
It's this new capability they're all excited about, which will work for applications that

03:34.600 --> 03:41.680
are written in JavaScript or, you know, node, Python, Java, C++, Ruby,.NET Core, Go, Rust

03:41.680 --> 03:43.600
and PHP.

03:43.600 --> 03:48.180
Then next week, or the week that you listen to this, will be a tech preview that Docker

03:48.180 --> 03:52.520
will host at its annual North American Developer Conference in San Francisco.

03:52.520 --> 03:57.320
Elle will be there from our crew and there they will demonstrate the capability for developers

03:57.320 --> 04:03.480
to build and assemble Docker image stacks on their laptop and then the applications

04:03.480 --> 04:09.020
inside of which will be compiled and executable on Arm servers.

04:09.020 --> 04:14.880
Think of like the Amazon A1 instances that are often cheaper than the x86 machines.

04:14.880 --> 04:17.560
There's some immediate cost savings benefit there.

04:17.560 --> 04:20.120
Now it's not all Arm processors.

04:20.120 --> 04:23.500
This is an extension of the Arm Neoverse platform.

04:23.500 --> 04:27.880
We've talked about that before, but these are the Arm chips that are targeted at the

04:27.880 --> 04:29.800
data center, the enterprise.

04:29.800 --> 04:34.720
And Arm's whole pitch here is, hey, look, now you've got a solution that goes from the

04:34.720 --> 04:38.240
data center all the way to the IoT Edge device.

04:38.240 --> 04:45.360
It's Arm all the way down and now you can manage those crazy IoT applications with containers.

04:45.360 --> 04:47.680
That'll solve it all, containers.

04:47.680 --> 04:51.400
And Docker is more than happy now with their new enterprise focus.

04:51.400 --> 04:55.120
They just got done relining their business around enterprise.

04:55.120 --> 04:56.960
What was it back in the end of February?

04:56.960 --> 05:00.800
They laid off a bunch of people and really said, okay, now it's all about the enterprise.

05:00.800 --> 05:04.200
Well, this is a manifestation of that.

05:04.200 --> 05:06.040
And I guess it's not a horrible idea.

05:06.040 --> 05:09.480
I just, as time has gone on, I've become more of a skeptic.

05:09.480 --> 05:12.240
Remember when we covered that story where Linus really kind of broke down why he doesn't

05:12.240 --> 05:15.000
think Arm and the data center is ever really going to make sense?

05:15.000 --> 05:18.280
At least at the application level, he convinced me.

05:18.280 --> 05:19.280
Linus is a smart man.

05:19.280 --> 05:20.720
He knows what he's talking about.

05:20.720 --> 05:24.280
And it's not that I don't see uses for Arm in the data center, because that'd be a stupid

05:24.280 --> 05:25.280
thing to say.

05:25.280 --> 05:26.720
They're already here today.

05:26.720 --> 05:30.600
It's just I am not as personally thrilled by this idea.

05:30.600 --> 05:35.520
I don't really foresee a future where enterprise grade applications can be created on one

05:35.520 --> 05:41.320
platform built for a completely separate platform and then deployed without something not going

05:41.320 --> 05:42.320
quite right.

05:42.320 --> 05:43.320
Well, that is true.

05:43.320 --> 05:45.080
But they're trying to lower the barrier of entry here.

05:45.080 --> 05:49.700
They're trying to take at least one of those problems away by making it trivial.

05:49.700 --> 05:55.160
Because you could already do this with tools that are available for Linux.

05:55.160 --> 05:59.080
But what they're doing is just packaging all that stuff together to make it super easy

05:59.080 --> 06:02.000
for developers to not even have to think about it.

06:02.000 --> 06:06.600
And yes, okay, the argument that Torval's made about testing on a different platform

06:06.600 --> 06:10.240
and the problems that you're going to have does make sense.

06:10.240 --> 06:13.560
But also, the bottom line makes a lot more sense.

06:13.560 --> 06:20.080
And if you can deploy applications for significantly less cost on Arm-based machines, then companies

06:20.080 --> 06:21.400
are just going to do that.

06:21.400 --> 06:25.520
And they're just going to swallow the cost of the bugs that crop up.

06:25.520 --> 06:27.000
And they're just going to have to work through that.

06:27.000 --> 06:28.280
Well, and I'll give it this.

06:28.280 --> 06:32.160
If you're working with.NET Core and Ruby and Java and Python, you're going to have

06:32.160 --> 06:35.640
probably a pretty good chance this is going to work fine.

06:35.640 --> 06:41.040
And enabling developers to build on an x86 platform and then deploy on an Arm platform

06:41.040 --> 06:45.880
is likely going to mean more use cases for Arm, more deployments of Arm when you reduce

06:45.880 --> 06:47.260
one of those barriers.

06:47.260 --> 06:50.280
So it's obviously clearly a good business idea.

06:50.280 --> 06:54.840
I'm just, I guess, from an end user's perspective, not thrilled at what I'm likely going to be

06:54.840 --> 06:55.840
consuming.

06:55.840 --> 07:02.040
You know, like, this is probably going to be half-assed, overloaded, slow-bloated hardware

07:02.040 --> 07:07.440
for a very long time until, at least at the edge devices, the hardware in there gets a

07:07.440 --> 07:08.440
lot better.

07:08.440 --> 07:09.600
I know I'm a skeptic of this kind of stuff.

07:09.600 --> 07:12.680
I really should try to see more positive aspects of this.

07:12.680 --> 07:16.880
But to me, it just seems like a perfect platform to shovel crap into a container and throw

07:16.880 --> 07:18.920
it down on an underpowered Arm device.

07:18.920 --> 07:20.760
Don't be so cynical.

07:20.760 --> 07:23.520
That's my job, isn't it?

07:23.520 --> 07:27.200
So something that we talked about on the Friday stream was something that surprised me, I

07:27.200 --> 07:34.920
must say, that Apple reportedly spends more than $30 million a month on AWS.

07:34.920 --> 07:40.140
I think there's a bigger metastore going on here, too, that is going to create a new level

07:40.140 --> 07:41.360
of cloud lock-in.

07:41.360 --> 07:46.600
So the report claims the amount Apple spent on AWS during the first quarter of 2019 is

07:46.600 --> 07:49.200
up 10% over previous year.

07:49.200 --> 07:56.880
If the current usage levels persist, then the firm will have spent a total of $360 million

07:56.880 --> 08:00.440
on procuring services from Amazon this year alone.

08:00.440 --> 08:04.740
It's also further claimed by the report, and there's a source in there that they're using

08:04.740 --> 08:12.120
for this, that Apple has made a five-year commitment to spend at least, in quotes, $1.5

08:12.120 --> 08:14.080
billion with AWS.

08:14.080 --> 08:19.080
So this is the bigger part of the story because I've had recent experience with a couple

08:19.080 --> 08:25.460
of companies that have been approached by either Google Cloud or Amazon, offering them

08:25.460 --> 08:28.700
a sweetheart deal if they move off of a competitor.

08:28.700 --> 08:32.640
So in the case of Google Cloud, the offer was to move off of AWS, and in the case of

08:32.640 --> 08:35.940
AWS, the offer was to move off of Azure.

08:35.940 --> 08:39.400
So if you move off of Azure, we'll cut you a sweetheart deal, you lock that in for this

08:39.400 --> 08:42.920
many years, and now you're an exclusive AWS customer.

08:42.920 --> 08:47.040
They're going around to large companies, but not companies that are significantly large.

08:47.040 --> 08:51.360
We know of a company that has been approached with an offer like this, including there's

08:51.360 --> 08:53.760
some money involved in all of it.

08:53.760 --> 08:55.280
It's a really sweet deal.

08:55.280 --> 09:00.000
And there were media reports back in February that suggested that Apple was cutting ties

09:00.000 --> 09:01.800
with Microsoft.

09:01.800 --> 09:06.840
Some security documentation was updated that removed mentions of Azure in the documentation,

09:06.840 --> 09:08.000
and then we see this story.

09:08.000 --> 09:14.000
And this is a similar story that we just saw from an IPO and another story we saw recently.

09:14.000 --> 09:19.560
These stories keep coming out, and I think what is happening here is Amazon and Google

09:19.560 --> 09:26.440
and Microsoft are building their fences and trying to land as many whales exclusive to

09:26.440 --> 09:29.880
their platform, to their cloud platform, as possible.

09:29.880 --> 09:34.360
And I think that's what's happening here, and you're going to end up with a whole new

09:34.360 --> 09:35.360
era of lock-in.

09:35.360 --> 09:40.800
Well, that goes back to IBM's strategy with the hybrid cloud approach and how they keep

09:40.800 --> 09:42.240
going on about that.

09:42.240 --> 09:47.320
I've been speaking to sysadmins here at the fest, and they are all very concerned about

09:47.320 --> 09:48.320
lock-in.

09:48.320 --> 09:52.560
And a lot of their managers are basically forcing them down this route, and they're

09:52.560 --> 09:55.080
just not comfortable with that.

09:55.080 --> 09:59.160
And you can see IBM's pitch against this sort of thing.

09:59.160 --> 10:03.300
And it seems to be almost the cloud wars right now.

10:03.300 --> 10:06.920
And it's not a surprise that Apple has gone down the cloud route.

10:06.920 --> 10:12.080
They have tried to build new data centers, and they realize that it's more hassle than

10:12.080 --> 10:13.080
it's worth.

10:13.080 --> 10:18.400
They may as well pay that premium to use the cloud, because otherwise you end up with these

10:18.400 --> 10:24.820
protracted planning permission issues and disputes with contractors and everything.

10:24.820 --> 10:29.360
And so their data center expansion plans have just not gone how they wanted.

10:29.360 --> 10:33.120
So I'm not surprised that they're cutting deals with the likes of Amazon Web Services

10:33.120 --> 10:38.160
to just move on from that and just chuck it in the cloud and forget about it.

10:38.160 --> 10:42.520
Well, and we are going into a big era of services.

10:42.520 --> 10:47.640
Everyone wants to monetize that monthly user, and they've got to build out and expand content

10:47.640 --> 10:49.680
and services around that.

10:49.680 --> 10:50.680
And they're not the only ones.

10:50.680 --> 10:54.760
A lot of businesses are getting into streaming and this kind of stuff, and it's all going

10:54.760 --> 11:01.440
to require big fat internet pipes with large internet providers and hosts like Amazon.

11:01.440 --> 11:02.440
It's going to be a bonanza.

11:02.440 --> 11:04.160
It is a bit of a cloud war.

11:04.160 --> 11:11.300
And maybe this is probably not true, but maybe they're all rallying around right now trying

11:11.300 --> 11:15.360
to get ahead of the IBM Red Hat acquisition.

11:15.360 --> 11:21.340
Because they are uniquely positioning themselves as the anti-lock-in vendor solution.

11:21.340 --> 11:24.440
And so maybe they're trying to get as much lock-in as possible.

11:24.440 --> 11:30.040
There's a funny thing that happened in my neighborhood a decade ago for a brief, beautiful

11:30.040 --> 11:35.760
moment in time, Verizon, our local ISP, was coming in and digging ditches and laying fiber.

11:35.760 --> 11:41.600
It was so beautiful, Joe, beautiful fiber optic internet service right to the home.

11:41.600 --> 11:48.020
And I kid you not, two days before they started digging ditches in my neighborhood, Comcast

11:48.020 --> 11:49.560
reps brought a van.

11:49.560 --> 11:53.000
They all jumped out of the van and spread out around our neighborhood and tried to get

11:53.000 --> 11:57.900
everybody set into a two-year contract because they knew in two or three days the Verizon

11:57.900 --> 12:00.640
diggers would be here running fiber to everybody's home.

12:00.640 --> 12:01.880
And they wanted to get ahead of that.

12:01.880 --> 12:05.240
And that could be what we're seeing happen here with Amazon right now, with AWS.

12:05.240 --> 12:08.400
Well, that's what Google is attempting to do with Anthos.

12:08.400 --> 12:10.680
We talked about that a couple of weeks ago.

12:10.680 --> 12:13.040
But I've spoken to people about that here at The Vest.

12:13.040 --> 12:18.080
And they're concerned that Google is trying to give you the illusion of choice and the

12:18.080 --> 12:21.680
illusion that you're not being locked in, but the keys to the mechanism that allow you

12:21.680 --> 12:27.800
to spread your data around the various clouds and have some on-prem are held by Google.

12:27.800 --> 12:30.080
And so you are essentially locked in there.

12:30.080 --> 12:33.160
So that's their attempt at combating this.

12:33.160 --> 12:39.200
Whereas maybe Amazon's attempt is just offer some sweet deals for people and just get them

12:39.200 --> 12:45.320
locked in and have them just not worry about the lock-in because the deal is so much better

12:45.320 --> 12:46.980
than not being locked in.

12:46.980 --> 12:52.600
Which is even crazier to think that $30 million a month might be a good deal.

12:52.600 --> 12:55.520
That's why everybody just needs to switch to NextCloud Joe and host it themselves and

12:55.520 --> 12:59.680
save about $29 million a month, depending on their size.

12:59.680 --> 13:00.680
It'll vary.

13:00.680 --> 13:01.680
Yeah.

13:01.680 --> 13:05.600
Well, now with NextCloud 16, they've got machine learning-based security.

13:05.600 --> 13:06.600
Ooh.

13:06.600 --> 13:12.680
We were having a laugh about this at The Vest, too, because not that it's not cool.

13:12.680 --> 13:18.480
It's just the actual suggestion was, it was Alan Judy said, you know, if you were to launch

13:18.480 --> 13:22.520
fail to ban, you know, that tool fail to ban for SSH logins today, you would say it's machine

13:22.520 --> 13:23.520
learning.

13:23.520 --> 13:24.520
Yeah.

13:24.520 --> 13:29.840
Because it's looking at IPs and learning who's trying to attack you.

13:29.840 --> 13:32.240
And that's essentially what we're talking about here.

13:32.240 --> 13:33.240
Yeah.

13:33.240 --> 13:35.320
They call it suspicious login detection.

13:35.320 --> 13:40.600
And it uses a locally trained neural network to detect attempts to log in by a malicious

13:40.600 --> 13:41.600
actor.

13:41.600 --> 13:45.280
There's also other systems in here, like a share recommendation system or whatnot.

13:45.280 --> 13:48.460
But I wanted to focus in on the security thing because this is really cool.

13:48.460 --> 13:50.820
So it does use this locally trained neural network.

13:50.820 --> 13:54.880
So there's no sending off to remote cloud servers or anything like that.

13:54.880 --> 13:56.800
I absolutely appreciate that.

13:56.800 --> 14:00.260
The app tracks successful logins on the instance for a set period of time.

14:00.260 --> 14:01.880
The default is 60 days.

14:01.880 --> 14:05.580
And then it uses the generated data to train its own neural network.

14:05.580 --> 14:09.720
As soon as the first model is trained, the app starts classifying logins from then on.

14:09.720 --> 14:11.360
So it's always learning.

14:11.360 --> 14:16.240
Should it detect a password login classified as suspicious by that now trained model, it

14:16.240 --> 14:21.960
will add that entry, the login entry, to a suspicious login table, including the timestamp,

14:21.960 --> 14:26.320
the request URL, the ID of the client, all of that that it can collect.

14:26.320 --> 14:29.160
And then the user will get a notification.

14:29.160 --> 14:33.120
And the system administrator will be able to see that information in the log.

14:33.120 --> 14:37.000
When the user is notified, they can go to the security section in their settings.

14:37.000 --> 14:40.720
They can terminate that suspicious setting, immediately clear it out.

14:40.720 --> 14:43.400
And then they'll proceed to set a new password.

14:43.400 --> 14:47.760
The administrator can also opt to take action, like disabling the user account or having

14:47.760 --> 14:50.640
the option to just force it to change their password.

14:50.640 --> 14:53.620
And that machine learning stuff also sort of does apply to their new recommendation

14:53.620 --> 14:54.620
and sharing system.

14:54.620 --> 14:58.080
Like, hey, I've noticed you often share these types of files with this person.

14:58.080 --> 14:59.440
And it'll make suggestions around that.

14:59.440 --> 15:04.280
But the suspicious login one, I think, is probably the one that has the most user appeal.

15:04.280 --> 15:08.980
Because honestly, when you have something like Nextcloud exposed to the web, that is

15:08.980 --> 15:10.720
a useful feature.

15:10.720 --> 15:14.200
One new feature that jumped out at me was in the mobile client.

15:14.200 --> 15:19.160
Instead of having to manually enter the server details and the login and password, you can

15:19.160 --> 15:23.420
now just scan a QR code and it just automatically logs you in.

15:23.420 --> 15:26.240
That seems just like a no brainer at this point.

15:26.240 --> 15:28.160
I haven't tried this new feature out.

15:28.160 --> 15:32.920
But if you have found some issues with storage speed, especially on large instances that

15:32.920 --> 15:37.560
are using object storage solutions, there has been a series of improvements on how Nextcloud

15:37.560 --> 15:43.640
handles that code and should result in improved snappiness, they say.

15:43.640 --> 15:45.480
That's funny you mentioned snappiness.

15:45.480 --> 15:47.120
I would have normally tried this.

15:47.120 --> 15:48.960
We've been very busy with the fest.

15:48.960 --> 15:52.320
I did have a quick look to see if the snap had been updated to 16.

15:52.320 --> 15:54.060
Unfortunately, it hasn't yet.

15:54.060 --> 15:56.600
So I wasn't able to even quickly test this.

15:56.600 --> 16:00.120
But I do look forward to doing those tests when I get back to the UK.

16:00.120 --> 16:03.800
Because it feels like Nextcloud is starting to really mature now.

16:03.800 --> 16:08.480
And it's something that I need to give a proper assessment to.

16:08.480 --> 16:12.280
Because it's been a long time since I properly tested it.

16:12.280 --> 16:16.240
And I wasn't very impressed with the consistency of it at the time.

16:16.240 --> 16:20.240
Because it only has to not work once for me to not want to use it.

16:20.240 --> 16:23.240
But maybe now's the time that it could go into production.

16:23.240 --> 16:24.240
I don't know.

16:24.240 --> 16:25.240
I need to test it.

16:25.240 --> 16:28.280
Yeah, it seems Cheese Bacon on our team has been having some success with it.

16:28.280 --> 16:31.480
He uses it to manage some of his photos and share some assets that he creates for the

16:31.480 --> 16:32.480
team.

16:32.480 --> 16:33.480
And yeah, he did it through the snap.

16:33.480 --> 16:35.640
So he's running version 15 through the snap.

16:35.640 --> 16:36.800
And it seems like it's worked.

16:36.800 --> 16:41.120
I've tried it out a bit, the older version, through the snap so that I thought it would

16:41.120 --> 16:43.520
maybe self-update and whatnot.

16:43.520 --> 16:45.840
And I found it remarkably simple to get going.

16:45.840 --> 16:50.080
There's so many different ways now to use Nextcloud, from hosted to container images

16:50.080 --> 16:53.960
to snaps or just traditional installations, that if you've been toying with the idea,

16:53.960 --> 17:00.000
you'll find an installation, I guess, methodology that is approachable, regardless of your skill

17:00.000 --> 17:01.000
level.

17:01.000 --> 17:04.760
We are rolling out this update to 16 in a staged fashion.

17:04.760 --> 17:09.000
So don't be surprised if it takes a while to get updated to it.

17:09.000 --> 17:12.780
But you can switch to the beta channel if you want it sooner rather than later.

17:12.780 --> 17:18.760
And to bring it all back around, our last story of the week is another success story.

17:18.760 --> 17:20.400
Well, I guess for the hacker.

17:20.400 --> 17:25.560
Yeah, this is the French government's fork of Riot, which I think is called Chap or

17:25.560 --> 17:26.560
Chap.

17:26.560 --> 17:27.560
I don't know.

17:27.560 --> 17:28.980
I'm not good at French.

17:28.980 --> 17:31.160
Which is a matrix client.

17:31.160 --> 17:35.120
And we talked about this a few weeks ago, how they were moving all of the messaging

17:35.120 --> 17:41.520
infrastructure to matrix, which is a huge win for open source in government.

17:41.520 --> 17:46.800
But unfortunately, it seems they didn't do an amazing job of the implementation of this.

17:46.800 --> 17:49.820
No, the issue really came down to something pretty simple.

17:49.820 --> 17:55.840
And it resulted in the app getting compromised within about an hour.

17:55.840 --> 17:56.840
That's rough, Joe.

17:56.840 --> 18:04.720
Yeah, it was really just a simple email parsing mistake in a Python script that parsed input

18:04.720 --> 18:08.640
to validate if this was a government email address or not.

18:08.640 --> 18:13.340
And it would issue a token that would be sent to an address that the attacker could get

18:13.340 --> 18:19.000
changed or could influence and then get access to the chat system and have his way with it.

18:19.000 --> 18:21.360
And you know, the thing is, is they haven't been dissuaded.

18:21.360 --> 18:24.420
They say the French government will continue to roll it out.

18:24.420 --> 18:29.100
They want to encourage people to stop using WhatsApp and Telegram for any informal communications

18:29.100 --> 18:33.680
between government employees, agencies, and some handpicked non government organizations

18:33.680 --> 18:34.680
and contractors.

18:34.680 --> 18:35.680
So they're still going to use it.

18:35.680 --> 18:38.320
They just got to fix that Python script problem.

18:38.320 --> 18:39.320
Yeah.

18:39.320 --> 18:42.320
It was quite embarrassing for them, though, because some of the groups and stuff they've

18:42.320 --> 18:45.340
got in there are just like, what are they doing?

18:45.340 --> 18:48.280
Like sharing pictures of yellow things and stuff.

18:48.280 --> 18:49.360
They're bonding, Joe.

18:49.360 --> 18:50.360
They're bonding.

18:50.360 --> 18:51.360
It's team building, Joe.

18:51.360 --> 18:52.360
Yeah.

18:52.360 --> 18:55.560
I suppose we probably share worse things in our Slack.

18:55.560 --> 18:59.720
I don't know about things of yellow pictures of things, but we definitely have some weird

18:59.720 --> 19:00.720
things in our threads.

19:00.720 --> 19:01.720
That's true.

19:01.720 --> 19:05.700
And it's funny that the hacker calls himself Elliot Anderson and he's obviously obsessed

19:05.700 --> 19:06.700
with Mr. Robot.

19:06.700 --> 19:07.700
Yeah.

19:07.700 --> 19:08.700
Yeah.

19:08.700 --> 19:09.700
It's about half a Linux fest in Northwest.

19:09.700 --> 19:10.700
And it was a great fest.

19:10.700 --> 19:12.700
Thank you everybody who made it out this year.

19:12.700 --> 19:15.920
We had our biggest barbecue ever.

19:15.920 --> 19:20.360
Well over 100 people out there that we were cooking for and we had to go out and do emergency

19:20.360 --> 19:21.360
pizza runs.

19:21.360 --> 19:24.500
Yeah, I think more like 300 really came.

19:24.500 --> 19:26.600
It was an amazing party.

19:26.600 --> 19:32.440
And yeah, look out for the pictures of Noah on Twitter in a pink leotard or swimming costume.

19:32.440 --> 19:33.440
It happened.

19:33.440 --> 19:34.440
It happened.

19:34.440 --> 19:35.440
It was a great fest.

19:35.440 --> 19:36.440
We learned a lot.

19:36.440 --> 19:38.100
I had a bunch of good conversations.

19:38.100 --> 19:40.120
We were able to record some of our talks and all of that.

19:40.120 --> 19:43.640
So keep your ears out for updates on that in the future.

19:43.640 --> 19:48.080
But in the meantime, be sure to go to linuxactionnews.com slash subscribe for all the ways to get new

19:48.080 --> 19:49.920
episodes every single week.

19:49.920 --> 19:53.520
And go to linuxactionnews.com slash contact for ways to get in touch with us.

19:53.520 --> 19:58.220
Now we'll be back next Monday with our weekly take on the latest Linux and open source news.

19:58.220 --> 20:00.520
I am at Chris LAS.

20:00.520 --> 20:02.320
I'm at Joe Rissington.

20:02.320 --> 20:05.240
Thank you for joining us and we will see you next week.

20:05.240 --> 20:23.560
Until then, have a great day, and we'll see you later.


WEBVTT

00:00.000 --> 00:09.340
Hello, and welcome to Linux Action News. Episode 220, recorded on December 19, 2021. I'm Chris.

00:09.340 --> 00:10.340
And I'm Wes.

00:10.340 --> 00:12.420
Hello, Wes. Let's do the news.

00:12.420 --> 00:18.280
And we start this week with a real mess. Following up on our story last episode, it appears the

00:18.280 --> 00:24.420
previous mitigations to address the log for shell vulnerability may not be enough. The

00:24.420 --> 00:29.040
log for J Team has released a new patch to fix issues that have been discovered at a

00:29.040 --> 00:30.040
rapid pace.

00:30.040 --> 00:34.080
A mess indeed, Wes. And it's been dubbed a design failure of catastrophic proportions

00:34.080 --> 00:38.280
by security researchers. If you didn't catch last week's episode, the crux of the issue

00:38.280 --> 00:42.500
really is log for J. That's where this vulnerability exists. It's part of a Java based Apache

00:42.500 --> 00:47.440
library that's present in lots of cloud software, local software, and it's used in a lot of

00:47.440 --> 00:51.480
industries and governments. It's a real go to tool. It's about as ubiquitous as these

00:51.480 --> 00:56.120
kinds of things get. And so there's globally millions of servers that have this logging

00:56.120 --> 00:58.600
tool installed and are vulnerable.

00:58.600 --> 01:03.920
For a sense of just how bad, well, cybersecurity firm Check Point revealed on Monday that since

01:03.920 --> 01:10.160
the weekend, there have been over 830,000 attacks using this exploit. Making matters

01:10.160 --> 01:15.500
worse, the team has had to issue two separate patches causing server and application administrators

01:15.500 --> 01:20.800
to have to perform a series of emergency updates. We've been hearing from many of you that staffing

01:20.800 --> 01:26.240
is tight around the holidays, adding a particular end of year pressure to an already bad situation.

01:26.240 --> 01:30.040
Okay, so to try to make all this clear, we're going to break it break it down into a timeline

01:30.040 --> 01:35.080
for you. So all of this happened obviously in 2021. And it starts on Wednesday, November

01:35.080 --> 01:40.240
24. That is when the log for J vulnerability is first disclosed to the Apache foundation

01:40.240 --> 01:46.640
by a developer at the Alibaba cloud security team. Then on Friday, November 26. That's

01:46.640 --> 01:50.840
the date that the vulnerabilities actually recorded into the CVE list.

01:50.840 --> 01:55.480
But it isn't until Thursday, December 9, that reports actually surfaced about a new

01:55.480 --> 02:02.180
zero day vulnerability termed log for Shell impacting Minecraft servers of all things.

02:02.180 --> 02:07.640
Then just a day later on Friday, December 10, the public became aware of log for Shell.

02:07.640 --> 02:12.640
And we learned that steam and iCloud among several other prominent online services were

02:12.640 --> 02:18.640
vulnerable. Then on December 11, Jen Easterly, the director of the US Cyber and Infrastructure

02:18.640 --> 02:22.960
Security Agency known as CISA released the following statement.

02:22.960 --> 02:28.920
The log for J vulnerability is the most serious vulnerability that I've seen in my decades

02:28.920 --> 02:36.040
long career. Everyone should assume that they are exposed and vulnerable and to check and

02:36.040 --> 02:37.940
make sure that they're not vulnerable.

02:37.940 --> 02:42.600
Then on Tuesday, December 14, reports of 200,000 attempted attacks across the globe came in

02:42.600 --> 02:46.640
from checkpoint and cybersecurity companies CrowdStrike and Mandiant said that they saw

02:46.640 --> 02:52.200
Chinese and Iranian state actors leveraging the log for J vulnerability. And then on Wednesday,

02:52.200 --> 03:00.400
December 15, an updated fix a second log for J vulnerability patch was issued CVE 2021-45-046,

03:00.400 --> 03:03.800
prompting the Apache Foundation to try to get the word out as fast as possible.

03:03.800 --> 03:09.520
Now as we record on Sunday, December 19, most of the activity observed so far appears to

03:09.520 --> 03:14.560
be pretty much just low level threats, basic use of these new exploits. But as the volume

03:14.560 --> 03:19.800
of log for Shell attacks increases, higher level threats like ransomware will surely

03:19.800 --> 03:27.280
follow. Because there's more than 35,000 Java packages, something like 8% of the Maven Central

03:27.280 --> 03:31.800
repository that are impacted by log for Shell. I mean, this thing's everywhere.

03:31.800 --> 03:38.040
Oh, yeah, no doubt. This is gonna be something we'll be hearing about well into 2022. There

03:38.040 --> 03:42.080
is some promising numbers coming in. There's a lot of stats we can throw at you. But I

03:42.080 --> 03:46.080
think this one really shows you how hard the open source community is working because in

03:46.080 --> 03:54.860
less than a week, 4620 of those affected packages, that's about 13% have been fixed. That really

03:54.860 --> 03:59.160
shows you the hustle of the community. And of course, the information security researchers,

03:59.160 --> 04:03.720
Apache Foundation, and the log for J developers who are really working hard to try to get

04:03.720 --> 04:10.000
all of us secure. Our thoughts, though, really, at the end of the day, are with the admins

04:10.000 --> 04:14.560
that have to spend that extra time those late evenings or those weekends to get this stuff

04:14.560 --> 04:19.440
installed. So that way, we're all secure. Our thanks to you.

04:19.440 --> 04:25.480
Now for a bit of good news, everyone. A project we haven't updated you on for a while has

04:25.480 --> 04:32.040
a new update with some great features. Pipewire 0.3.41.

04:32.040 --> 04:36.360
I have to admit it is hard for us not to jump on every single release and tell you all about

04:36.360 --> 04:41.240
it in each episode because these releases have been great. And they're regular, they're

04:41.240 --> 04:47.760
constantly releasing new updates. But Pipewire 0.3.41 delivers on some special improvements

04:47.760 --> 04:51.620
that we wanted to tell you about. Number one with a bullet right there is Flatpak Sandbox

04:51.620 --> 04:55.880
applications are going to behave a lot better with Pipewire. So think of all of the potential

04:55.880 --> 05:00.520
AV applications that might be Flatpak either now or in the future. Also, there was continued

05:00.520 --> 05:04.480
work on enhancing jack compatibility. And one of those Flatpak apps I talked about,

05:04.480 --> 05:09.120
OBS, can now capture from monitor devices again when using Wire Plumber, which we had

05:09.120 --> 05:13.280
for a bit, we lost and it's back and it's back in a better way now. And then you got

05:13.280 --> 05:17.520
your standard memory leak fixes, your improved buffer memory allocation, all that stuff you

05:17.520 --> 05:19.600
always like to see in a project as well.

05:19.600 --> 05:23.880
And for you AirPlay users out there, well, you might appreciate that there's a new module

05:23.880 --> 05:30.640
that you can use to stream right to your AirPlay devices. And if you're stuck in the zoom lifestyle,

05:30.640 --> 05:36.680
like I certainly am, well, the echo cancellation module has voice detection enabled now. This

05:36.680 --> 05:43.120
should be trickling down to a distribution near you sometime sooner than you might think.

05:43.120 --> 05:48.160
In Linux land, even old tried and true assumptions can get revised, revisited and disrupted on

05:48.160 --> 05:52.340
the regular. And this week we have news of changes are coming to your precious extended

05:52.340 --> 05:57.260
for file system, at least how it mounts. Now this change has actually been in the works

05:57.260 --> 06:01.640
since about 2018. But if you've been keeping an eye on the Linux kernel development, all

06:01.640 --> 06:04.540
signs are pointing to this change shipping soon.

06:04.540 --> 06:12.320
It looks like in Linux 5.17, ext4 could be making use of the kernels new mount API. This

06:12.320 --> 06:17.000
new API is meant to address limitations in the older mount design. Here's canonicals

06:17.000 --> 06:21.880
Christian Bronner from last year's open source summit explaining some of the advantages of

06:21.880 --> 06:22.880
the new API.

06:22.880 --> 06:28.480
Well, the obvious cool thing is that it's, instead of being path based, something I just

06:28.480 --> 06:34.440
critiqued seconds earlier, the new mount API is file descriptor based. In fact, you can

06:34.440 --> 06:40.080
use the new mount API without using any paths at all, which is obviously always excellent

06:40.080 --> 06:47.160
for security. And instead of having a single syscall to do all of the things at the same

06:47.160 --> 06:51.520
time, the new mount API splits is split into multiple syscalls.

06:51.520 --> 06:56.160
Now I'm not a developer that's pushing the limits of current mount API possibilities,

06:56.160 --> 07:00.000
but Bronner articulates a list of issues in the full talk, which we will have linked in

07:00.000 --> 07:03.800
the show notes. Right now, the extended four patches have been landing in the development

07:03.800 --> 07:09.020
branch for Linux 5.17. And it looks like all the necessary stuff is in place for the transition

07:09.020 --> 07:12.880
to happen with the release of Linux 5.17.

07:12.880 --> 07:21.000
Well, speaking of Linux 5.17, a big patch of code to support Apple's M1 has been submitted.

07:21.000 --> 07:25.600
And it appears work to support the M1 Pro and Max chips is going pretty well.

07:25.600 --> 07:30.480
Well, project lead Hector Martin noted in an end of year update that some of the challenges

07:30.480 --> 07:36.000
posted by the new SSE did throw them for a loop. Apple in the M1 Max and Pro has shifted

07:36.000 --> 07:39.440
from using a component that seemingly had ties all the way back to one of the original

07:39.440 --> 07:45.440
iPhones to now something that apparently can scale up in both terms of memory and CPU cores,

07:45.440 --> 07:50.520
potentially hinting at more powerful future Macs. But it did require Hector and the team

07:50.520 --> 07:54.840
to make updates to support the increased physical address space.

07:54.840 --> 08:00.000
Amusingly, Martin wrote, while implementing support for this in Linux, we ran into a bug

08:00.000 --> 08:06.600
in Linux's ARM SMMU support that had been there ever since 52 bit address support was

08:06.600 --> 08:12.640
introduced. This was breaking systems with more than 256 terabytes of RAM. I wonder why

08:12.640 --> 08:19.040
nobody noticed. Either way, Linux now correctly supports standard ARM systems with up to four

08:19.040 --> 08:20.280
petabytes of RAM.

08:20.280 --> 08:25.240
When you see people online asking the cliche question, is this worth the effort? Well,

08:25.240 --> 08:29.620
this is a great example of how the effort to port to Apple's M1 SoC has benefited the

08:29.620 --> 08:35.320
wider Linux ecosystem, and why it's important that everything they're doing is going upstream.

08:35.320 --> 08:39.900
And just as we record Hector just got Wi Fi working after what he calls a quote, dumb

08:39.900 --> 08:45.640
fix. And the team also recently got the touchpad and keyboard working on the M1 powered MacBooks

08:45.640 --> 08:50.000
as well as audio playback. And to help you kind of sort where they're at in all of this,

08:50.000 --> 08:54.280
they have published a visual overview of sorts that gives you a state of component support

08:54.280 --> 08:55.280
right now.

08:55.280 --> 08:59.000
Yeah, that's really nice. And just about the only way I managed to keep track of all of

08:59.000 --> 09:05.760
these developments. But perhaps the most surprising update came from Hector directly on Twitter,

09:05.760 --> 09:11.680
tweeting that Apple had recently made a change to Mac OS 12.1. That's only purpose seems

09:11.680 --> 09:17.400
to be to help the Asahi team writing quote, looks like Apple changed the requirements

09:17.400 --> 09:24.360
for Mako kernel files in 12.1, breaking our existing installation process. And they also

09:24.360 --> 09:31.080
added a raw image mode that will never break again, and doesn't require Mako. And people

09:31.080 --> 09:35.040
said they wouldn't help. This is intended for us.

09:35.040 --> 09:40.160
Yeah, he was actually pretty insistent about that. Even in following threads. He said,

09:40.160 --> 09:44.320
Seriously, I can't think of a single reason why they would add this for themselves. They

09:44.320 --> 09:50.440
build real Makos with their own process. They have no use for raw images. They are basically

09:50.440 --> 09:55.580
saying, he says, quote, Hey, use this, it's easier, and we won't break it in the future.

09:55.580 --> 09:58.840
He follows up by saying this is for Asahi.

09:58.840 --> 10:03.640
Well, some in the thread speculated, perhaps this was a move to help Microsoft get Windows

10:03.640 --> 10:07.500
Arm Edition working on these new Macs. But Hector disagreed.

10:07.500 --> 10:11.880
You know what, I actually agree with Hector, this tracks with how Apple often behaves.

10:11.880 --> 10:17.480
When you look at other past examples outside of the space, it's, in one word, strange,

10:17.480 --> 10:20.680
but there is a bit of a rhyme to their reason. You see, Apple's never just going to come

10:20.680 --> 10:25.280
right out and release documentation, they're not going to hold a session at WWDC. It really

10:25.280 --> 10:29.280
just comes down to Apple's middle management will never okay an allocation of valuable

10:29.280 --> 10:33.440
developer time like that, it's just not going to happen. But there are engineers inside

10:33.440 --> 10:38.560
the company that recognize they can make these small little changes that make a big difference.

10:38.560 --> 10:42.120
And they're small enough changes that upper management would literally never notice even

10:42.120 --> 10:48.460
in 100 years until, you know, we start talking about it. And why wouldn't they want this?

10:48.460 --> 10:53.160
Think about it. Surely Apple would like to use their own SoC in their data centers. Apple

10:53.160 --> 10:59.240
is a big Linux user internally on x86. Right now, they use it for iCloud servers, and they

10:59.240 --> 11:03.040
use Linux for a lot of internal hardware testing on prototypes on the routine.

11:03.040 --> 11:08.080
Yeah, I could definitely see that. And either way, I think we're both of the mindset. Who

11:08.080 --> 11:13.240
cares exactly why they're doing this? I mean, the positive change that looks like it's going

11:13.240 --> 11:18.040
to be a change that sticks around, which should make it a lot easier to run Linux on this

11:18.040 --> 11:24.760
shiny new Mac hardware. That's going to benefit a lot of users for a long time.

11:24.760 --> 11:29.400
lino.com slash LAN go there to get $100 in 60 day credit on a new account. And you go

11:29.400 --> 11:34.080
there to support the show. Linode is really the Linux geeks cloud. They've got 11 data

11:34.080 --> 11:38.280
centers worldwide. And they've been hard at work for 18 years making this the best experience

11:38.280 --> 11:42.520
for running applications on Linux. If you want to build it yourself and really start

11:42.520 --> 11:45.700
from the ground up, or you want to deploy something with a single click, they've got

11:45.700 --> 11:50.440
excellent options for you. And regardless of which direction you go, the performance

11:50.440 --> 11:54.800
is always incredible. I wouldn't be sticking with Linode for all these years if it didn't

11:54.800 --> 11:59.040
actually just scream. I mean, that's the bottom line for me right there. But then I realized

11:59.040 --> 12:03.000
like the dashboards, great, the customer service is the best in the industry. There's all these

12:03.000 --> 12:07.000
things too, right that are just fantastic. But when you really start to use Linode for

12:07.000 --> 12:11.280
a while, you kind of start picking up on some of the little improvements you can use by

12:11.280 --> 12:15.680
the command line tool or taking advantage of the API or maybe you're already ahead of

12:15.680 --> 12:19.560
me and doing something like ansible to manage your infrastructure like I should be Linode

12:19.560 --> 12:23.720
works great with all of that stuff as well. terraform, kubernetes Yep, absolutely. So go

12:23.720 --> 12:28.560
try it out because with $100 that's really saying something. That's Linode saying we're

12:28.560 --> 12:32.200
confident enough that if we give you $100 on our platform, you're going to really get

12:32.200 --> 12:36.400
a chance to try it. And when you try it, when you can really try it with that $100 you're

12:36.400 --> 12:40.840
going to like it. That's the message they're sending there. I think that's a real confident

12:40.840 --> 12:44.080
move on their part and I love it. And I think you're gonna like it too. I think it's a great

12:44.080 --> 12:48.640
fit for our audience. So go over there right now grab that $100 in credit and support the

12:48.640 --> 12:53.440
show go learn something go try something go deploy something in production. It's linode.com

12:53.440 --> 12:59.160
slash LAN and also a big holiday thank you to Ting for making the show possible and for

12:59.160 --> 13:03.320
all of you who support the show by going to linux.ting.com that's where you go if you're

13:03.320 --> 13:07.360
sick of overpaying for your cell service. Go see how much you could save and then take

13:07.360 --> 13:13.120
25 bucks off that linux.ting.com ting is going to give you access to the big carrier networks

13:13.120 --> 13:17.180
nation donation wide networks you know the big ones that you heard of but at a way better

13:17.180 --> 13:21.720
rate with way better customer service and no contracts ever that is essentially the

13:21.720 --> 13:26.720
ting recipe you go over there to linux.ting.com you put your phone information in they're

13:26.720 --> 13:30.200
gonna have something compatible because they support the big networks once you get everything

13:30.200 --> 13:33.200
sorted ting will send you a SIM card you pop that in you go to their dashboard which is

13:33.200 --> 13:39.000
great by the way and you get activated in minutes it really is a smarter way to do mobile

13:39.000 --> 13:44.080
I've been a ting customer since 2013 I mean I'm not sure but I think that's longer than

13:44.080 --> 13:48.520
I've had a kid possibly maybe not but it's close to at least one of the ages of my kids

13:48.520 --> 13:53.880
and there's a reason it's smarter it's a better way to do mobile it's simple and ironically

13:53.880 --> 13:59.280
the fact that there's no contract actually makes me want to stick around longer it's

13:59.280 --> 14:04.480
just one of those things and why not get access to the same big networks you already have

14:04.480 --> 14:10.080
but pay less for it that's the ting idea linux.ting.com just about any phone will work and you can

14:10.080 --> 14:13.360
get started in minutes and it's a great way to support the show and save yourself some

14:13.360 --> 14:18.120
money so head over there right now linux.ting.com and see how much you could save and then take

14:18.120 --> 14:26.280
25 bucks off that linux.ting.com we wanted to end today by checking in on something that

14:26.280 --> 14:32.760
matters to all of us keeping podcasting healthy and decentralized to that end we had a chance

14:32.760 --> 14:38.920
to sit down with Dave Jones from the podcasting 2.0 index Dave shared with us their very simple

14:38.920 --> 14:43.560
mission preserve protect and extend the open podcasting ecosystem we started by asking

14:43.560 --> 14:48.960
Dave what was the motivation to create a brand new open source podcast index I guess the

14:48.960 --> 14:53.800
abbreviated version of that is that a guy I've been working with for a long time widely

14:53.800 --> 14:59.960
known in podcasting co-invented podcasting is Adam Curry and Adam and I had been friends

14:59.960 --> 15:07.720
for you know probably 10 years or more working on various projects around RSS and feed aggregation

15:07.720 --> 15:16.800
and OPML and we built jointly built a show notes system for his podcast the no agenda

15:16.800 --> 15:23.100
show and which you know it's huge got about a million listeners and so we we had kind

15:23.100 --> 15:30.280
of been through the trenches in in software our aggregation software and RSS but he called

15:30.280 --> 15:38.360
me about a year and a half ago and said maybe a little bit longer back said hey you know

15:38.360 --> 15:45.060
this this whole thing with Apple sort of controlling the default search the sort of the yellow

15:45.060 --> 15:51.440
pages of podcasting number one makes no sense and number two it's concerning because with

15:51.440 --> 15:57.080
all the deplatforming going on and and all this kind of thing and so you know they're

15:57.080 --> 16:04.200
you have what you end up with is this what's supposed to be an open decentralized system

16:04.200 --> 16:10.720
of podcasting built on RSS and that's true it mostly operates that way but then when

16:10.720 --> 16:18.120
you look at in in practice where do you go to find podcasts and where do all those things

16:18.120 --> 16:24.240
live everything goes to Apple which is you know the literally the largest company in

16:24.240 --> 16:29.940
the world so you have this this huge dichotomy here between what podcasting is supposed to

16:29.940 --> 16:34.920
be at a technical level and what it actually is in practice and he's like you know what

16:34.920 --> 16:40.840
we've we really need to change this and we have we have the chops to do it so why don't

16:40.840 --> 16:51.400
we get together and create a an index to begin with an open directory of podcasts and then

16:51.400 --> 16:58.160
tie an API to it to where any app developer can write an app and just hook into it for

16:58.160 --> 17:04.460
free we'll have it be donation based and not you know not a paid product and then we'll

17:04.460 --> 17:09.520
do a podcast to go along with it and as we build it we'll just podcast about what we're

17:09.520 --> 17:17.140
doing and hopefully we'll get a whole bunch of app developers on board that are struggling

17:17.140 --> 17:22.120
to pay for all the infrastructure that it takes to run a back end for a podcast app

17:22.120 --> 17:26.840
we'll make that easier for them and in the in the process we'll build this alternative

17:26.840 --> 17:32.720
directory to Apple so that we can take that centralization away and then in the process

17:32.720 --> 17:37.360
we'll we'll get or excuse me one of the one of the elements of it will be we'll give the

17:37.360 --> 17:43.060
whole database away so that's I was like you know hey that sounds like a challenge sounds

17:43.060 --> 17:48.120
fun to do yeah let's do it and so that's kind of where it was born about a year and a half

17:48.120 --> 17:53.600
ago Dave and I had so much to talk about and there are a lot of great features and abilities

17:53.600 --> 17:57.040
that they want to enhance podcasting within the RSS standard and when I looked through

17:57.040 --> 18:02.120
it I liked all of them really I really couldn't be more excited about this and I think I also

18:02.120 --> 18:05.920
feel like it couldn't have come at a better time with companies like YouTube and Facebook

18:05.920 --> 18:10.380
just announced they want to get into podcasting within like the last week and one that we've

18:10.380 --> 18:15.520
been watching closely in this space is Spotify as well and of course Apple who continues

18:15.520 --> 18:21.800
to dominate so major players clearly want a piece of the action a decentralized tool

18:21.800 --> 18:26.800
that innovates around an open standard could be what manages to keep podcasting indie yeah

18:26.800 --> 18:31.520
I mean what they're trying to accomplish with the podcast index and podcasting 2.0 is essentially

18:31.520 --> 18:37.480
prevent a YouTube of podcasts where you have one company controlling the entire media which

18:37.480 --> 18:41.520
is what they would like to do the YouTube initiative clearly would be a success when

18:41.520 --> 18:45.760
they have more podcasts exclusively on their platform that's how they all work here so

18:45.760 --> 18:51.400
that's what Adam Curry and Dave Jones are trying to prevent and there was a lot more

18:51.400 --> 18:55.280
we discussed with Dave including some of those new features they want to bring to RSS and

18:55.280 --> 18:59.640
to make podcasting better and we'll have a complete chat with all of that and a lot more

18:59.640 --> 19:03.960
in Linux unplugged in early January so don't miss that and don't miss a single episode

19:03.960 --> 19:08.840
of Linux action news be sure you go to linuxactionnews.com slash subscribe for all the ways to get new

19:08.840 --> 19:14.240
episodes and at linuxactionnews.com slash contact for ways to get in touch good news

19:14.240 --> 19:17.800
for our patrons and those of you who've wanted to support the network we have a new network

19:17.800 --> 19:22.260
membership and you'll get Linux action news completely ad-free when you join and all the

19:22.260 --> 19:26.800
other shows go to Jupiter.party to sign up for that and we'll be back next Monday with

19:26.800 --> 19:31.760
our weekly take on the latest Linux and open source news thanks for joining us and that's

19:31.760 --> 19:47.080
all the news for this week.


1
00:00:00,000 --> 00:00:08,960
Hello, and welcome to Linux Action News, episode 184, recorded on April 11th, 2021.

2
00:00:08,960 --> 00:00:09,960
I'm Chris.

3
00:00:09,960 --> 00:00:10,960
And I'm Wes.

4
00:00:10,960 --> 00:00:11,960
Hello, Wes.

5
00:00:11,960 --> 00:00:12,960
Let's do the news.

6
00:00:12,960 --> 00:00:17,540
There's been some impressive progress towards an important milestone for getting Linux up

7
00:00:17,540 --> 00:00:25,680
and running on the Apple M1, and some indications that full desktop support might be achievable.

8
00:00:25,680 --> 00:00:31,640
But last week, the co-maintainer of the ARM SoC kernel tree merged the Apple M1 branch

9
00:00:31,640 --> 00:00:37,060
into Linux Next, which is the staging area for code expected to land in the next kernel

10
00:00:37,060 --> 00:00:38,200
merge window.

11
00:00:38,200 --> 00:00:42,460
And that also means that it's not yet accepted by Linus.

12
00:00:42,460 --> 00:00:46,120
And it's months from shipping if he does accept it.

13
00:00:46,120 --> 00:00:50,760
But at this time, as we record, there is no indication or reason to suspect that Linus

14
00:00:50,760 --> 00:00:51,760
will reject this.

15
00:00:51,760 --> 00:00:54,980
In fact, it seems quite the opposite that he will accept it.

16
00:00:54,980 --> 00:00:59,440
And it's a mind bending initial set of patchwork that's been contributed by Hector Martin

17
00:00:59,440 --> 00:01:03,120
and his team at Asahi Linux.

18
00:01:03,120 --> 00:01:04,720
I think that's how you say it.

19
00:01:04,720 --> 00:01:09,000
This new branch includes basics to get the Apple M1 systems booting.

20
00:01:09,000 --> 00:01:14,400
But also in there is that brand new bootloader the team built to make this possible that

21
00:01:14,400 --> 00:01:19,160
accommodates USB oddities and whatnot that we covered in a previous episode of Linux

22
00:01:19,160 --> 00:01:20,160
Action News.

23
00:01:20,160 --> 00:01:25,560
Now don't get too excited once you've got it booted up, Asahi's environment only has

24
00:01:25,560 --> 00:01:29,320
a serial and frame buffer console for access right now.

25
00:01:29,320 --> 00:01:34,180
But this is important work to actually get future drivers developed.

26
00:01:34,180 --> 00:01:36,920
We reached out to Hector Martin for comment.

27
00:01:36,920 --> 00:01:37,920
And he said,

28
00:01:37,920 --> 00:01:42,480
I want to emphasize that what we upstream just gives you a serial console, but it represents

29
00:01:42,480 --> 00:01:48,220
figuring out a lot of deep platform details about the ports, changes to core kernel code

30
00:01:48,220 --> 00:01:52,760
and settle several technical questions that required a lot of back and forth, including

31
00:01:52,760 --> 00:01:58,160
things like what the bootloader is responsible for versus what Linux is responsible for.

32
00:01:58,160 --> 00:02:02,360
As we've talked about before, there's a lot of work and conversation that has to go in

33
00:02:02,360 --> 00:02:05,120
before you get this kind of stuff merged.

34
00:02:05,120 --> 00:02:08,600
Asked about the next steps for M1 support, Hector said,

35
00:02:08,600 --> 00:02:13,160
So the next step is drivers and I expect that it will get a lot quicker than most people

36
00:02:13,160 --> 00:02:17,920
might think after we spent three months on just getting a serial console working.

37
00:02:17,920 --> 00:02:22,920
Hector Martin is already sending in the M1 IOMMU driver for review and we are working

38
00:02:22,920 --> 00:02:29,400
on PCIe bring up and we found Linux code that matches the controllers in other SOCs.

39
00:02:29,400 --> 00:02:35,240
Hector also relate to us that he and the team are dedicated to shaving all the required

40
00:02:35,240 --> 00:02:39,240
YACs to get this thing to be a high quality port.

41
00:02:39,240 --> 00:02:40,560
Clearly they care a lot about this.

42
00:02:40,560 --> 00:02:43,740
There's a lot of pride, I think, involved in the work and they want to see the shine

43
00:02:43,740 --> 00:02:44,740
if it's possible.

44
00:02:44,740 --> 00:02:50,360
Yeah, he pointed to a couple of examples of abandoned Android platforms where they have

45
00:02:50,360 --> 00:02:55,320
just created this unmaintainable code dump that is just essentially a fork of Linux.

46
00:02:55,320 --> 00:02:57,080
That's not what they're going for at all here.

47
00:02:57,080 --> 00:03:01,840
They want something that's long term and maintainable and I think they're going to get there at

48
00:03:01,840 --> 00:03:02,840
this stage.

49
00:03:02,840 --> 00:03:04,360
I'm cautiously optimistic.

50
00:03:04,360 --> 00:03:09,880
I'm confident that we're going to get a text based Linux booting on this thing that you

51
00:03:09,880 --> 00:03:13,680
could use to say rescue hardware and do data recovery and security forensics.

52
00:03:13,680 --> 00:03:17,280
I think we're really close to that and that's going to be valuable just as Apple begins

53
00:03:17,280 --> 00:03:21,740
to sell millions of these devices and professionals need these tools available to them.

54
00:03:21,740 --> 00:03:24,960
So Hector Martin and his team are going to do a service, even if they never get the graphical

55
00:03:24,960 --> 00:03:27,920
environment going here, it will be a use case.

56
00:03:27,920 --> 00:03:31,720
But I am actually getting cautiously optimistic they're going to go all the way.

57
00:03:31,720 --> 00:03:35,680
I mean, it's obviously not time to buy an M1 Mac right now with the intention of running

58
00:03:35,680 --> 00:03:39,800
Linux on it, but it seems like it's going to be possible more than ever right now.

59
00:03:39,800 --> 00:03:44,000
Yeah, I mean, for his part, Hector Martin seems pretty confident that he's going to

60
00:03:44,000 --> 00:03:49,680
be able to get a fully working desktop on the M1 sometime this year.

61
00:03:49,680 --> 00:03:54,240
In response to Michael Larable over at Ferronix, who had doubted the project would reach that

62
00:03:54,240 --> 00:03:59,740
milestone, Hector responded with just challenge accepted.

63
00:03:59,740 --> 00:04:05,400
And what might also be a positive sign with this is that as the Asahi team has moved along,

64
00:04:05,400 --> 00:04:11,440
they don't really seem to be running into a lot of artificial barriers from Apple.

65
00:04:11,440 --> 00:04:15,320
Maybe I'm wrong, but it kind of seems that in some respects, like how firmware gets loaded,

66
00:04:15,320 --> 00:04:21,280
how much stuff is handled in the hardware, it might be simpler to get this going on the

67
00:04:21,280 --> 00:04:24,880
ARM side than it was on the on the x86 version.

68
00:04:24,880 --> 00:04:25,880
Isn't that funny?

69
00:04:25,880 --> 00:04:29,720
And the opposite of what you would expect is in some cases, the hardware is doing the

70
00:04:29,720 --> 00:04:34,400
like the firmware blob loading for you, the OS doesn't even have to touch it.

71
00:04:34,400 --> 00:04:41,260
And you almost wonder if there if there isn't some fire to the smoke about rumors that Apple

72
00:04:41,260 --> 00:04:46,740
is running Linux in the bowels to internally test hardware in the early development stages.

73
00:04:46,740 --> 00:04:51,720
Apple very well may have a few M1 test systems running Linux in-house because it seems like

74
00:04:51,720 --> 00:04:53,720
they haven't gone out of their way to lock this out at all.

75
00:04:53,720 --> 00:04:57,940
In fact, they just simply haven't done anything to make it work, but they also haven't tried

76
00:04:57,940 --> 00:04:58,940
to prevent it.

77
00:04:58,940 --> 00:05:02,980
And if you think about it, if Apple was running Linux down in the skunk labs, would they say

78
00:05:02,980 --> 00:05:07,440
a word about it or would they keep mum so that way people didn't ask them GPL questions?

79
00:05:07,440 --> 00:05:13,040
But additionally, if I were Apple and I saw the roadmap of the M platform, I think I'd

80
00:05:13,040 --> 00:05:16,560
want to run these in my own iCloud data center.

81
00:05:16,560 --> 00:05:20,520
There's got to be obvious efficiencies to some of the ML stuff that's built into the

82
00:05:20,520 --> 00:05:25,280
chip, but also just running their own gear in their own hardware and having more confidence

83
00:05:25,280 --> 00:05:30,180
in supply chain security and also the performance and power savings when you're running your

84
00:05:30,180 --> 00:05:33,520
data center off a solar system, which they do with their Nevada data center.

85
00:05:33,520 --> 00:05:38,520
And I know they use Azure and they use AWS and they use Akamai quite a bit, but they

86
00:05:38,520 --> 00:05:42,640
also have a ginormous data center with actual physical hardware in it.

87
00:05:42,640 --> 00:05:45,520
And you'd think they'd want to rack up their own M systems instead of continuing to buy

88
00:05:45,520 --> 00:05:46,520
x86 boxes.

89
00:05:46,520 --> 00:05:49,320
And if they're going to run that in a data center, it's probably going to be running

90
00:05:49,320 --> 00:05:50,720
Linux, at least on some of them.

91
00:05:50,720 --> 00:05:51,720
Yeah.

92
00:05:51,720 --> 00:05:56,360
I mean, Amazon, Microsoft, Google that are all already building their own custom ARM

93
00:05:56,360 --> 00:05:57,720
systems for the data center.

94
00:05:57,720 --> 00:06:01,400
You could really understand why Apple might want to do the same.

95
00:06:01,400 --> 00:06:06,680
Really though, this story is just getting started before Linux 513 comes out with these

96
00:06:06,680 --> 00:06:09,800
initial patches, which should be sometime around June.

97
00:06:09,800 --> 00:06:16,740
You can expect kernel 512 as early as this week or sometime in late April or early May.

98
00:06:16,740 --> 00:06:18,640
We'll see either way.

99
00:06:18,640 --> 00:06:23,600
It's got loads of exciting new features and we'll have those details whenever it ships.

100
00:06:23,600 --> 00:06:30,800
Well speaking of Linux 513, also very likely for inclusion in that release is a new PCIe

101
00:06:30,800 --> 00:06:37,280
host controller driver for the much anticipated Psi 5 High 5 unmatched board system.

102
00:06:37,280 --> 00:06:39,360
The unmatched has 16 gigs of RAM.

103
00:06:39,360 --> 00:06:41,520
It has USB 3.2.

104
00:06:41,520 --> 00:06:50,800
It has one PCI express 16 slot that is operating at 8x speed and one MVME slot and gigabit

105
00:06:50,800 --> 00:06:52,000
ethernet.

106
00:06:52,000 --> 00:06:54,920
And might you be able to get your hands on one of these?

107
00:06:54,920 --> 00:07:00,200
Well, the pre-order page from Mouser Electronics, which will be one of the potential suppliers

108
00:07:00,200 --> 00:07:06,480
anyway, is currently indicating they're expecting the High 5 unmatched to arrive sometime around

109
00:07:06,480 --> 00:07:08,120
the end of May.

110
00:07:08,120 --> 00:07:14,120
And that means that by the time people actually start receiving those units, this new PCIe

111
00:07:14,120 --> 00:07:17,920
host controller driver will be shipping pretty soon.

112
00:07:17,920 --> 00:07:21,840
Or maybe already have shipped to end users.

113
00:07:21,840 --> 00:07:23,000
That's pretty exciting.

114
00:07:23,000 --> 00:07:30,400
And if you want to take part and try this thing out, the pricing remains at $665.

115
00:07:30,400 --> 00:07:32,480
Linode dot com slash LAN.

116
00:07:32,480 --> 00:07:37,200
Go there to get a $100 60 day credit towards your new account and of course support the

117
00:07:37,200 --> 00:07:38,200
show.

118
00:07:38,200 --> 00:07:39,200
It's easy.

119
00:07:39,200 --> 00:07:40,200
Linode dot com slash LAN.

120
00:07:40,200 --> 00:07:43,280
$100 means you can actually kick the tires.

121
00:07:43,280 --> 00:07:46,000
Linode is the largest independent cloud computing provider.

122
00:07:46,000 --> 00:07:51,040
It's where we host everything for JB 3.0 and they make it easy no matter what skill level

123
00:07:51,040 --> 00:07:53,160
you're at to get up and going.

124
00:07:53,160 --> 00:07:56,880
And they have all the different distros you could possibly want to choose from to host

125
00:07:56,880 --> 00:07:57,880
on.

126
00:07:57,880 --> 00:08:03,680
If you run into any trouble as well, Linode has outstanding, amazing 24-7 customer support

127
00:08:03,680 --> 00:08:05,720
by phone or ticket.

128
00:08:05,720 --> 00:08:08,880
All with hundreds of guides and tutorials to help you get started.

129
00:08:08,880 --> 00:08:14,880
In fact, in the notes, I'll link a guide to covering how to secure PHP MyAdmin.

130
00:08:14,880 --> 00:08:15,880
I get it.

131
00:08:15,880 --> 00:08:18,740
It's a useful tool and I've worried about it too.

132
00:08:18,740 --> 00:08:20,200
That's what's great about their guides.

133
00:08:20,200 --> 00:08:23,920
They give you some peace of mind running this stuff in production.

134
00:08:23,920 --> 00:08:28,540
Linode is easy to use and has a powerful cloud dashboard and you can kind of grok if you're

135
00:08:28,540 --> 00:08:33,640
a longtime Linux user that the people that run and build Linode are Linux users too.

136
00:08:33,640 --> 00:08:37,680
And their S3 compatible object storage is so useful you'll find hundreds of uses for

137
00:08:37,680 --> 00:08:38,680
it.

138
00:08:38,680 --> 00:08:42,400
And then they have great features like cloud firewall, simple one click application deployment,

139
00:08:42,400 --> 00:08:47,040
super fast networking and much, much more.

140
00:08:47,040 --> 00:08:48,880
That's why you just got to go check it out for yourself.

141
00:08:48,880 --> 00:08:52,640
Try one of those one click app deployments, something like that and just see what we've

142
00:08:52,640 --> 00:08:57,240
been talking about, because Linode is truly fantastic and the only way I would host things

143
00:08:57,240 --> 00:08:58,240
today.

144
00:08:58,240 --> 00:09:01,120
So sign up today at linode.com slash LAN.

145
00:09:01,120 --> 00:09:06,000
Get a $100 60 day credit towards your new Linode account and of course support the show.

146
00:09:06,000 --> 00:09:10,160
That's linode.com slash LAN.

147
00:09:10,160 --> 00:09:16,820
When Firefox 88 is released later this month, it'll finally be making the long anticipated

148
00:09:16,820 --> 00:09:22,360
switch to using Web Render as the default rendering engine on Linux.

149
00:09:22,360 --> 00:09:27,880
This is that final piece of all of the performance we were promised with Project Quantum back

150
00:09:27,880 --> 00:09:31,200
in like Firefox 67 timeframe.

151
00:09:31,200 --> 00:09:36,320
This is though, this is one of those updates where it's impressive depending on how you

152
00:09:36,320 --> 00:09:41,080
have your system configured and the kind of hardware that you might have in your box.

153
00:09:41,080 --> 00:09:46,660
Interestingly, Web Render actually comes out of Mozilla's work on Servo and first made

154
00:09:46,660 --> 00:09:53,400
an appearance in Firefox way back in Firefox 67, which was released on May 21st, 2019.

155
00:09:53,400 --> 00:09:57,720
But of course, this was behind a config option and was not the default.

156
00:09:57,720 --> 00:10:03,980
You had to go into about config and set gfx.webrender.all to true before you could play with any of this

157
00:10:03,980 --> 00:10:05,560
new shiny.

158
00:10:05,560 --> 00:10:11,120
And Chris, you'll be pleased because of that Servo heritage, yes, Web Render is written

159
00:10:11,120 --> 00:10:12,120
in Rust.

160
00:10:12,120 --> 00:10:13,120
That's right.

161
00:10:13,120 --> 00:10:18,080
A lot of our, a lot of Rust and its progress is actually kind of tied back to Servo.

162
00:10:18,080 --> 00:10:20,420
So it's, it all comes together.

163
00:10:20,420 --> 00:10:24,880
And also kind of in the Firefox vein, we have a link in the show notes for you.

164
00:10:24,880 --> 00:10:29,240
Have you ever noticed that extensions just seem to work better under the Fox?

165
00:10:29,240 --> 00:10:34,800
Well, it turns out there actually may be several technical reasons why extensions are better

166
00:10:34,800 --> 00:10:36,280
under Firefox.

167
00:10:36,280 --> 00:10:43,040
The uBlock Origin developer wrote a post that kind of goes over some of these highlights,

168
00:10:43,040 --> 00:10:44,920
and a couple of them stood out to us.

169
00:10:44,920 --> 00:10:49,880
Yeah, one of the reasons that uBlock Origin just kind of does better on Firefox is it

170
00:10:49,880 --> 00:10:54,800
has a better ability to unclog third party servers that use CNames to make it look like

171
00:10:54,800 --> 00:11:01,160
their first party, so called CName unclogging, but really just means uBlock Origin is better

172
00:11:01,160 --> 00:11:05,280
able to figure out where you're going and then if it needs to, it can block it, which

173
00:11:05,280 --> 00:11:07,320
means you get more blocked sites.

174
00:11:07,320 --> 00:11:12,860
There's just a whole list, like the ability to filter HTML before it's passed and parsed

175
00:11:12,860 --> 00:11:17,740
by the browser, improvements about the way Firefox brings extensions up.

176
00:11:17,740 --> 00:11:22,240
But the one that struck me, because I'm sure this affects a lot of extension developers,

177
00:11:22,240 --> 00:11:28,000
is the Firefox version of uBlock Origin makes use of WebAssembly code for like the core

178
00:11:28,000 --> 00:11:30,240
filtering paths.

179
00:11:30,240 --> 00:11:35,840
That's just not the case with the Chromium based ones, simply just because of creating

180
00:11:35,840 --> 00:11:41,040
a smoother user experience in the Chrome Web Store, and if they wanted to use WebAssembly

181
00:11:41,040 --> 00:11:46,840
code for the filtering code pass, they'd have to ask for an additional permission at install.

182
00:11:46,840 --> 00:11:51,200
It would reduce the amount of deployments they get because other plugins don't do this,

183
00:11:51,200 --> 00:11:55,120
and so they don't do it, and it takes a slower path on Chrome, and it's just kind of an example

184
00:11:55,120 --> 00:12:00,040
of something that's both technical and political that makes it just not as ideal to develop

185
00:12:00,040 --> 00:12:01,840
an extension for Chrome.

186
00:12:01,840 --> 00:12:05,760
It's just because there's so many dang users that people do it, but I have noticed this

187
00:12:05,760 --> 00:12:06,760
with the Fox.

188
00:12:06,760 --> 00:12:11,720
I've noticed it seems like extensions that I use in both browsers do work better in Firefox,

189
00:12:11,720 --> 00:12:13,040
and it's got to be some of this.

190
00:12:13,040 --> 00:12:18,940
Yeah, you know, Mozilla has a long history of being the extension forward browser vendor,

191
00:12:18,940 --> 00:12:21,540
so I think they've just figured out some of the things that you need, where the right

192
00:12:21,540 --> 00:12:27,120
hooks should go, but really this is just the excuse maybe you needed to give Firefox a

193
00:12:27,120 --> 00:12:28,120
try again.

194
00:12:28,120 --> 00:12:31,320
We'll talk about more future desktop Linux stuff.

195
00:12:31,320 --> 00:12:35,200
One of the challenges about our Wayland futures, it means sometimes we're actually introducing

196
00:12:35,200 --> 00:12:40,280
fragmentation and multiple implementations to do something, and that is exactly what's

197
00:12:40,280 --> 00:12:46,820
happening around extended display identification data, which is information that Linux can

198
00:12:46,820 --> 00:12:52,680
use to learn more about monitors that are connected, and currently there's no de facto

199
00:12:52,680 --> 00:12:58,640
EDID parsing library for Linux, and so what we've ended up with, as you are probably fearing

200
00:12:58,640 --> 00:13:03,920
right now, is multiple implementations, and most Wayland compositors are just rolling

201
00:13:03,920 --> 00:13:05,760
their own solution.

202
00:13:05,760 --> 00:13:09,720
Now this extended display identification data, that's the good stuff that the kernel needs

203
00:13:09,720 --> 00:13:14,040
to learn everything about your monitor or monitors, and then it passes that along to

204
00:13:14,040 --> 00:13:19,360
user space and offers various metadata for the different tools to set up your displays.

205
00:13:19,360 --> 00:13:23,520
But the problem that we have today is the various tools that we do have in user space,

206
00:13:23,520 --> 00:13:24,520
they need more information.

207
00:13:24,520 --> 00:13:29,440
They need metadata about high dynamic range, refresh rate, all kinds of additional things,

208
00:13:29,440 --> 00:13:34,120
and so they're implementing their own solutions to this, and it's not consistent.

209
00:13:34,120 --> 00:13:39,040
A prominent Wayland developer is suggesting that instead of exposing all of that parsed

210
00:13:39,040 --> 00:13:44,760
information from the kernel directly, there should instead be a unified Linux EDID parsing

211
00:13:44,760 --> 00:13:51,760
library, that hypothetically at least would be a free desktop.org hosted project, MIT

212
00:13:51,760 --> 00:13:56,640
licensed, offer, you know, a way to use it from C of course, and probably just take one

213
00:13:56,640 --> 00:14:01,720
of the existing EDID parsing libraries, sort of flesh it out, make it work, and hopefully

214
00:14:01,720 --> 00:14:02,720
the standard.

215
00:14:02,720 --> 00:14:06,260
That I think is the clever aspect to this, is take something that already exists that

216
00:14:06,260 --> 00:14:10,440
people are kind of comfortable with, and then modify it as needed to solve the remaining

217
00:14:10,440 --> 00:14:17,240
edge cases, and this would cut down on code duplication across Wayland compositors, and

218
00:14:17,240 --> 00:14:22,480
really solve differences that might end up being frustrating to end users, and kind of

219
00:14:22,480 --> 00:14:24,660
make it a more unified experience.

220
00:14:24,660 --> 00:14:28,000
This is early, the call was made on the Wayland mailing list just recently, and is currently

221
00:14:28,000 --> 00:14:31,480
up for discussion, but we'll keep an eye on this one.

222
00:14:31,480 --> 00:14:37,680
Before we leave the world of graphics, and with the crazy high prices of GPUs right now,

223
00:14:37,680 --> 00:14:42,640
we wanted to pass along a neat little tool that might help you get a lot more out of

224
00:14:42,640 --> 00:14:45,600
your existing NVIDIA cards.

225
00:14:45,600 --> 00:14:49,760
It's called VGPU Unlock, and what does it unlock?

226
00:14:49,760 --> 00:14:57,480
Well VGPUs, or virtual GPUs, which normally are only supported on a few Tesla cards, but

227
00:14:57,480 --> 00:15:02,480
if you happen to have the right GeForce or Quadro card that shares the same underlying

228
00:15:02,480 --> 00:15:09,440
physical chip as the Tesla, it turns out that's just a software limitation, and now there's

229
00:15:09,440 --> 00:15:12,320
software that tries to fix this.

230
00:15:12,320 --> 00:15:18,220
And really, it's a fascinating deep dive into how NVIDIA pulled this off, and how these

231
00:15:18,220 --> 00:15:22,680
intrepid hackers worked around NVIDIA's handcuffs.

232
00:15:22,680 --> 00:15:27,800
If you'd like to learn more and get the technical nitty gritty details, we'll have a link in

233
00:15:27,800 --> 00:15:33,280
the show notes.

234
00:15:33,280 --> 00:16:02,480
Thanks

235
00:16:02,480 --> 00:16:07,040
20 gigs a month there's a perfect ting plan for you and every ting plan gets

236
00:16:07,040 --> 00:16:12,280
access to tings award-winning customer service with nationwide multiple LTE and

237
00:16:12,280 --> 00:16:17,880
5g networks for you to choose from and the freedom of no contracts ever and

238
00:16:17,880 --> 00:16:20,800
with these three great networks you can choose from you pick the one that has

239
00:16:20,800 --> 00:16:24,680
the best coverage in your area but it also means likely the phone you got

240
00:16:24,680 --> 00:16:28,400
today will work with ting if you like your phone bring it ting will give you

241
00:16:28,400 --> 00:16:32,680
$25 in service credit when you go to linux.ting.com check your current phone

242
00:16:32,680 --> 00:16:35,680
create an account and pick the plan that's right for you they got a wizard

243
00:16:35,680 --> 00:16:39,120
that guides you through all of it and then boom ting sends you a SIM card you

244
00:16:39,120 --> 00:16:42,840
pop that in your device and you're rocking on ting in minutes you'd be

245
00:16:42,840 --> 00:16:45,840
amazed how much you can just manage through tings dashboard and all through

246
00:16:45,840 --> 00:16:49,480
their website and cutting your phone bill has never been easier with ting

247
00:16:49,480 --> 00:16:56,960
mobile's brand new plans get it all at linux.ting.com back in January we told

248
00:16:56,960 --> 00:17:00,920
you about the challenges the KDE community was facing with the release of

249
00:17:00,920 --> 00:17:06,640
Qt 6 but if you don't recall the important detail is that Qt projects

250
00:17:06,640 --> 00:17:11,560
licensing model means long-term supported releases and updates to those

251
00:17:11,560 --> 00:17:16,960
well those go commercial only once there's a new development release out

252
00:17:16,960 --> 00:17:22,240
that meant Qt 5 support in particular went proprietary and behind a paywall

253
00:17:22,240 --> 00:17:27,320
when Qt 6 was released now you might think what's the problem here just jump

254
00:17:27,320 --> 00:17:32,000
ship and start using Qt 6 but unfortunately Qt 6 is still a work in

255
00:17:32,000 --> 00:17:36,520
progress in missing some essential features which makes any porting efforts

256
00:17:36,520 --> 00:17:42,480
kind of difficult and that is why most if not all KDE applications are still

257
00:17:42,480 --> 00:17:47,680
using Qt 5 that's why back in January we did hear that news we went well how is

258
00:17:47,680 --> 00:17:53,200
this going to impact all of KDE and in particular my beloved plasma desktop how

259
00:17:53,200 --> 00:17:56,520
are they gonna manage this because clearly they still need time before

260
00:17:56,520 --> 00:18:00,820
plasma desktop and all of the other KDE projects and lots of Qt applications

261
00:18:00,820 --> 00:18:05,840
are ready for Qt 6 there's still work they need to do with Qt 5 but as time

262
00:18:05,840 --> 00:18:10,640
goes on with Qt 5 there's gonna be security fixes that need to be patched

263
00:18:10,640 --> 00:18:15,720
in or just general bugs that have to be fixed and the Qt company will not be

264
00:18:15,720 --> 00:18:20,360
releasing those so what were they going to do that was really the big question

265
00:18:20,360 --> 00:18:25,340
we were left with and now we have an answer because this week the KDE project

266
00:18:25,340 --> 00:18:31,720
announced their Qt 5 patch collection quote as Qt 5 support is drawing to a

267
00:18:31,720 --> 00:18:37,080
close and we shift to Qt 6 we need to ensure that KDE products are as reliable

268
00:18:37,080 --> 00:18:41,920
as ever to this end KDE will be maintaining a set of patches with

269
00:18:41,920 --> 00:18:47,320
security and functional fixes so that we can enjoy good KDE software still based

270
00:18:47,320 --> 00:18:53,560
on Qt 5 until our software is reliably based on Qt 6 it's good to see the KDE

271
00:18:53,560 --> 00:18:59,080
project do this because it kind of is smoothing out the nuances if you will of

272
00:18:59,080 --> 00:19:03,920
Qt licensing in a way that doesn't really impact the wider community I

273
00:19:03,920 --> 00:19:07,680
think they're I think they're going out of their way to be intentional about

274
00:19:07,680 --> 00:19:13,120
calling this a a patch collection don't call it a fork it's not a fork of Qt 5

275
00:19:13,120 --> 00:19:18,120
it's a it's a gentle collection of patches that will just maintain alongside

276
00:19:18,120 --> 00:19:22,960
of Qt 5 and that's that's a smart way to go about it because it kind of keeps

277
00:19:22,960 --> 00:19:28,040
this on the DL it's not this bold statement that we're going our own way

278
00:19:28,040 --> 00:19:32,840
it's just this simple humble we're gonna have our own nice little collection I

279
00:19:32,840 --> 00:19:37,360
mean it's a complicated relationship to manage here right KDE and plasma they're

280
00:19:37,360 --> 00:19:41,800
big users of the Qt framework and that is a relationship they have to keep

281
00:19:41,800 --> 00:19:44,860
managing they want to keep benefiting from the open source but here they're

282
00:19:44,860 --> 00:19:48,600
also kind of stepping up because you know many open source developers

283
00:19:48,600 --> 00:19:51,360
themselves including they can't afford to pay that paywall there's no budget

284
00:19:51,360 --> 00:19:55,780
for that they got to do something and here's the band-aid before we go a quick

285
00:19:55,780 --> 00:20:00,400
update on that adorable Linux powered helicopter on Mars named ingenuity we

286
00:20:00,400 --> 00:20:05,380
were expecting a possible test flight today as we record followed by about a

287
00:20:05,380 --> 00:20:10,200
13-hour delay in finding out the results of that test flight unfortunately

288
00:20:10,200 --> 00:20:15,040
however NASA has chosen to reschedule the ingenuity Mars helicopters first

289
00:20:15,040 --> 00:20:21,400
experimental flight to no earlier than April 14th that's because during a

290
00:20:21,400 --> 00:20:25,880
high-speed spin test on the rotors on Friday the command sequence controlling

291
00:20:25,880 --> 00:20:31,120
the test ended early due to a watchdog timer expiration you know these things

292
00:20:31,120 --> 00:20:34,480
go wrong it's experimental that's true I mean that's what they're trying to

293
00:20:34,480 --> 00:20:38,120
catch right now yeah this occurred just as they were transitioning from the

294
00:20:38,120 --> 00:20:42,960
flight computer to the pre-flight flight mode and so there's this watchdog timer

295
00:20:42,960 --> 00:20:46,600
that oversees the command sequence and then alerts the system to any potential

296
00:20:46,600 --> 00:20:50,840
issues it detects yeah really it just helps the system stay safe by not

297
00:20:50,840 --> 00:20:55,160
proceeding if an issue is observed and working as planned and you need those

298
00:20:55,160 --> 00:20:59,600
kinds of fail-safe when you're a million miles from home right now the helicopter

299
00:20:59,600 --> 00:21:02,920
team is reviewing the telemetry they've got to see if they can diagnose and

300
00:21:02,920 --> 00:21:08,200
understand what went wrong following that we'll get a rescheduled full-speed

301
00:21:08,200 --> 00:21:12,640
test yep nobody ever said space travel was easy but we'll be keeping an eye on

302
00:21:12,640 --> 00:21:16,620
that story because we're nerds and love the idea of a Linux powered helicopter

303
00:21:16,620 --> 00:21:21,400
flying on the surface of Mars so be sure to get every episode because you don't

304
00:21:21,400 --> 00:21:24,760
want to miss that go to Linux action news comm slash subscribe for all the

305
00:21:24,760 --> 00:21:28,400
ways to get new episodes like what we're doing or want to let us know about a

306
00:21:28,400 --> 00:21:32,840
Linux news story we missed hey just head on over to Linux action news comm slash

307
00:21:32,840 --> 00:21:38,600
contact for ways to get in touch and don't miss your celebratory 400 beer

308
00:21:38,600 --> 00:21:43,720
Stein for Linux unplugged we have a special beer mug at la plug dot beer for

309
00:21:43,720 --> 00:21:48,600
a limited time we'll be back next Monday beers in hand with our weekly take on

310
00:21:48,600 --> 00:21:52,820
the latest Linux and open source news thanks for joining us and we will see

311
00:21:52,820 --> 00:22:11,240
you next week


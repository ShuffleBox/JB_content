WEBVTT

00:00.000 --> 00:08.920
Hello, and welcome to Linux Action News Episode 187, recorded on May 2nd, 2021.

00:08.920 --> 00:09.920
I'm Chris.

00:09.920 --> 00:10.920
And I'm Wes.

00:10.920 --> 00:11.920
Hello, Wes.

00:11.920 --> 00:12.920
Let's do the news.

00:12.920 --> 00:19.740
Our top story this week is Fedora 34, which was just released last Tuesday.

00:19.740 --> 00:24.340
There are many reasons to give Fedora 34 a look, but one of them that might interest

00:24.340 --> 00:30.780
you is that Fedora 34 will be the basis for the next release of Red Hat Enterprise Linux,

00:30.780 --> 00:32.800
the upcoming RHEL 9.

00:32.800 --> 00:37.160
Now, of course, before we get to that point, we're going to need a new version of CentOS

00:37.160 --> 00:38.160
Stream.

00:38.160 --> 00:39.160
We're on 8 right now.

00:39.160 --> 00:46.320
We'll need to get to Stream 9, which we're told to expect sometime Q2 2021.

00:46.320 --> 00:47.320
That's coming up.

00:47.320 --> 00:48.560
I mean, that's right now.

00:48.560 --> 00:49.560
That is now, isn't it?

00:49.560 --> 00:51.040
Sooner than it seems.

00:51.040 --> 00:56.740
And back to Fedora 34 itself, the workstation spin is getting a lot of the attention this

00:56.740 --> 00:59.940
release cycle because it features the new GNOME 40.

00:59.940 --> 01:05.620
That's the big release that has the new horizontal layout, also features GTK 4 and a ton of updated

01:05.620 --> 01:08.540
apps in the GNOME ecosystem.

01:08.540 --> 01:11.820
It's getting a lot of attention just for that alone.

01:11.820 --> 01:16.900
Another huge change this time around is a new default sound server.

01:16.900 --> 01:21.180
Yeah, so long PulseAudio, hello PipeWire.

01:21.180 --> 01:26.700
This is a big change, but Fedora has been here before way back in 2007 and Fedora 8.

01:26.700 --> 01:31.940
That was when Fedora switched to PulseAudio the first time, so it had a pretty good run.

01:31.940 --> 01:35.320
New stuff is the name of the game for Fedora 34.

01:35.320 --> 01:38.940
Some Fedora releases feel really incremental and others feel huge.

01:38.940 --> 01:45.280
You know, GNOME 40, PipeWire is big, but for the plasma spin, Fedora 34 is the version

01:45.280 --> 01:48.420
where plasma went to Wayland by default.

01:48.420 --> 01:50.620
That was big for several reasons.

01:50.620 --> 01:51.620
Number one, it's a big statement.

01:51.620 --> 01:57.320
Now, both major spins of Fedora are Wayland first, but number two is it drove a lot of

01:57.320 --> 02:02.400
additional Wayland improvements within the plasma project to get things ready for 34,

02:02.400 --> 02:07.300
so it meant all plasma users benefited and everyone got improved Wayland support, which

02:07.300 --> 02:08.300
is really nice to see.

02:08.300 --> 02:13.140
Enough of that desktop nonsense, I know what our audience wants, and it's nitty gritty

02:13.140 --> 02:19.860
system details, one of those this time around is the enabling of ButterFS transparent compression

02:19.860 --> 02:20.860
by default.

02:20.860 --> 02:23.900
I mean, at least if you're using ButterFS, that is.

02:23.900 --> 02:29.180
And of course you might be because the last Fedora release saw the switch to using ButterFS

02:29.180 --> 02:30.180
by default.

02:30.180 --> 02:34.300
So this is a big sign that things are going well and they're comfortable twiddling a

02:34.300 --> 02:35.300
few settings.

02:35.300 --> 02:39.380
Now, this is much like PipeWire, it's one of those changes you just shouldn't have to

02:39.380 --> 02:43.860
notice if everything goes well, except maybe it'll be a little bit faster to access things

02:43.860 --> 02:45.220
off your file system.

02:45.220 --> 02:49.660
It also means less SSD writes if you use it on an SSD because the compression means less

02:49.660 --> 02:54.100
actual individual writing and it could expand and extend the life of your disk and maybe

02:54.100 --> 02:56.860
even slightly reduce power consumption.

02:56.860 --> 03:02.040
Well, if you're worried about your memory usage, good news for you, Fedora is continuing

03:02.040 --> 03:06.460
their development of early out of memory detection in user space.

03:06.460 --> 03:12.020
Now, before they'd rolled out early OOMD, but that's now being switched to system D

03:12.020 --> 03:13.020
OOMD.

03:13.020 --> 03:14.020
Yeah, that's right.

03:14.020 --> 03:15.620
System D has a daemon for that.

03:15.620 --> 03:20.060
I know that you could roll your eyes and all system D swallows another project, but it

03:20.060 --> 03:22.220
seems like it kind of makes sense to put it here.

03:22.220 --> 03:26.100
And it seems like the configuration is a lot more straightforward this way, too.

03:26.100 --> 03:27.100
Definitely.

03:27.100 --> 03:28.100
And you're right.

03:28.100 --> 03:31.300
I mean, system D is already setting things up, managing C groups, and that's a big part

03:31.300 --> 03:34.840
of what enables system D OOMD to work so well.

03:34.840 --> 03:38.860
Also part of that is the Linux pressure stall information that it's got access to now.

03:38.860 --> 03:44.060
Thanks to Facebook rounding out the low level changes, we were pretty impressed with the

03:44.060 --> 03:47.620
cleanup work being done for grub configuration.

03:47.620 --> 03:51.620
Fedora runs on all kinds of systems with different methods of booting.

03:51.620 --> 03:56.300
But when you were doing things on EFI, that was in particular a little bit messy, but

03:56.300 --> 03:59.940
they've standardized, they've cleaned things up, and now you should have a consistent experience

03:59.940 --> 04:03.940
no matter where you're running Fedora, what type of server or workstation environment

04:03.940 --> 04:09.020
you can look at exactly the same place to find your grub dot CFG, although here's hoping

04:09.020 --> 04:10.020
you don't have to.

04:10.020 --> 04:13.900
Yeah, that is a really, really nice change.

04:13.900 --> 04:15.580
There's a ton of stuff in this release, though, West.

04:15.580 --> 04:17.240
We just scratched the surface here.

04:17.240 --> 04:25.340
If you want more details, then do check out our in-depth review in Linux Unplugged 403.

04:25.340 --> 04:29.380
And now an update on our top story from last week that involved that University of Minnesota

04:29.380 --> 04:30.600
kernel ban.

04:30.600 --> 04:36.020
We've sourced some of this news from LWN, but I take you back to April 20th, 2021, when

04:36.020 --> 04:40.900
the world became aware of a research program that had been conducted out of the University

04:40.900 --> 04:46.860
of Minnesota that involved submitting intentionally buggy patches for inclusion into the Linux

04:46.860 --> 04:48.440
kernel.

04:48.440 --> 04:52.140
As you probably would figure, there's been some updates since last episode.

04:52.140 --> 04:56.500
A paper that was resulting from all of this work, that research paper that was going to

04:56.500 --> 05:01.740
be revealed at the IEEE symposium at the end of May, that's been withdrawn.

05:01.740 --> 05:02.740
That's off.

05:02.740 --> 05:04.160
They're not doing that anymore.

05:04.160 --> 05:09.700
Various letters have gone back and forth between the Linux Foundation and the university, and

05:09.700 --> 05:12.060
a giant audit has kicked off.

05:12.060 --> 05:15.700
So really, we need to kind of go through all of this because some of these details really

05:15.700 --> 05:16.700
matter.

05:16.700 --> 05:22.140
And we have more information than we had last week that I think fills in a lot of this stuff.

05:22.140 --> 05:28.440
And one of those details that's worth making really clear right now is that the most recent

05:28.440 --> 05:35.080
patch from early April, that was from a totally different developer, not connected to the

05:35.080 --> 05:37.260
hypocrite research paper.

05:37.260 --> 05:42.760
The patches for the paper, those were submitted back in August of 2020.

05:42.760 --> 05:49.000
But that said, the recent patches' poor code quality along with its source led kernel maintainers

05:49.000 --> 05:54.420
to suspect that maybe the effort to submit intentionally malicious patches was still

05:54.420 --> 05:55.420
ongoing.

05:55.420 --> 06:00.660
Now, since then, it has become apparent that is not the case.

06:00.660 --> 06:07.140
But by the time the full story became clear, well, the discussion was already well underway.

06:07.140 --> 06:12.380
The fundamental issue was is that the university violated the kernel team's trust by conducting

06:12.380 --> 06:13.380
this research.

06:13.380 --> 06:16.500
So essentially, all patches became suspect.

06:16.500 --> 06:21.340
On April 22nd, the Linux Foundation and the Technical Advisory Board sent a letter to

06:21.340 --> 06:26.460
the university researchers outlining how the situation should be addressed in their view.

06:26.460 --> 06:31.900
The letter asked for a complete disclosure of the buggy patches sent as part of the project.

06:31.900 --> 06:37.780
And it also asked the team to withdraw the paper that was resulting from this work.

06:37.780 --> 06:42.500
In response, the researchers posted an open letter apologizing to the community, followed

06:42.500 --> 06:47.100
by a few days later, a summary of the work they did as part of the Hypocrite Commits

06:47.100 --> 06:48.100
project.

06:48.100 --> 06:52.140
They outlined five patches submitted overall from two sock puppet accounts.

06:52.140 --> 06:56.860
But one of them was an ordinary bug fix that was sent from the wrong sock puppet account

06:56.860 --> 06:59.380
by mistake.

06:59.380 --> 07:04.280
Of the remaining four patches, one of them was an attempt to insert a bug that was itself

07:04.280 --> 07:05.280
buggy.

07:05.280 --> 07:07.720
So the patch was actually valid.

07:07.720 --> 07:10.140
And the other three contained real bugs.

07:10.140 --> 07:13.860
None of the three were accepted by maintainers, though the reasons for rejection were not

07:13.860 --> 07:16.820
always the bugs necessarily themselves in question.

07:16.820 --> 07:21.740
Yeah, some of those were just things like basic code quality and style.

07:21.740 --> 07:26.940
So while the researchers had managed to find some potential issues in the kernel, their

07:26.940 --> 07:32.540
execution and attention to detail in all of this research got in the way of any potential

07:32.540 --> 07:34.580
insights that we might have gathered.

07:34.580 --> 07:39.540
And that's, that's really unfortunate, because as you mentioned, it has cost both the time

07:39.540 --> 07:42.220
of the kernel community and the trust.

07:42.220 --> 07:43.220
Yeah.

07:43.220 --> 07:47.140
I mean, it was not only the time to review patches that were essentially worthless, but

07:47.140 --> 07:53.540
now the massive undertaking of reviewing all of the patches ever from the university.

07:53.540 --> 07:55.740
That's pretty wild.

07:55.740 --> 07:59.860
So you want to talk about time sick now it's 190 patches that have been identified.

07:59.860 --> 08:03.040
And they're still going through all of them.

08:03.040 --> 08:05.060
So far, things look pretty acceptable.

08:05.060 --> 08:08.260
And those that are acceptable, they're keeping them, they're not just like throwing stuff

08:08.260 --> 08:09.260
out.

08:09.260 --> 08:13.460
And it does turn out some of them are a little trickier to rip out than maybe originally

08:13.460 --> 08:15.340
thought and they're going to require another pass.

08:15.340 --> 08:18.180
But we'll see the review is not yet complete.

08:18.180 --> 08:24.460
And in there, there are also some that probably shouldn't have been merged in the first place.

08:24.460 --> 08:28.740
And that's kind of one interesting aspect of this whole conversation is that while we

08:28.740 --> 08:32.820
like how fast the kernel develops, I mean, we all want to get the shiny new features

08:32.820 --> 08:40.220
or hardware enablement at some level, that rapid pace of development might be incompatible

08:40.220 --> 08:46.580
with the other serious goal of good rigorous patch review and just having a low number

08:46.580 --> 08:48.060
of bugs overall.

08:48.060 --> 08:53.460
Yeah, it leaves that sinking feeling that potentially the model is a little vulnerable

08:53.460 --> 08:57.140
because you have maintainers who are very overworked.

08:57.140 --> 09:00.900
That doesn't in itself right there when you just stop and we think about what a time precious

09:00.900 --> 09:05.460
resource kernel maintainers are, that itself doesn't feel very maintainable.

09:05.460 --> 09:10.120
And then when you look at the velocity of development on the kernel, which is just,

09:10.120 --> 09:11.120
it's mind boggling.

09:11.120 --> 09:12.940
We covered some of the numbers last week.

09:12.940 --> 09:13.940
Mind boggling.

09:13.940 --> 09:14.940
Yeah.

09:14.940 --> 09:20.080
I mean, we'll see if there are any changes to the kernel development process as a result

09:20.080 --> 09:23.780
of this whole embarrassing little kerfuffle.

09:23.780 --> 09:29.580
But with the paper no longer being presented and rightfully so, I'm kind of a little worried

09:29.580 --> 09:37.100
that the conversation has been more about punishment than prevention.

09:37.100 --> 09:38.820
Linode.com slash LAN.

09:38.820 --> 09:43.300
Linode is the largest independent cloud computing provider, and they are our cloud computing

09:43.300 --> 09:44.300
provider.

09:44.300 --> 09:47.800
No matter what skill level you're at or what technology stack you use, Linode can help

09:47.800 --> 09:50.280
your ideas come to life on the web.

09:50.280 --> 09:54.300
And if you ever run into any trouble, if it's your production system that's critical for

09:54.300 --> 09:59.540
your work, or if it's just a system you like to play Minecraft on, Linode has amazing 24

09:59.540 --> 10:02.380
seven customer support by phone or by ticket.

10:02.380 --> 10:04.380
And they have hundreds of guides and tutorials.

10:04.380 --> 10:09.660
In fact, in the show notes, my friends, I'll link you to a guide on getting Twitch in a

10:09.660 --> 10:12.060
box up and running on Linode.

10:12.060 --> 10:17.340
If you want to self host a live stream service, you should check out Owncast, which you can

10:17.340 --> 10:20.540
deploy in one click on Linode.

10:20.540 --> 10:22.540
It's great for just getting a stream up and going.

10:22.540 --> 10:28.100
And it's a great way to use that $100 credit when you go to Linode.com slash LAN.

10:28.100 --> 10:33.580
New accounts can sign up at Linode.com slash LAN and get $100 for 60 days.

10:33.580 --> 10:37.620
Once you're on, you can find out Linode is easy to use and has powerful tools and a great

10:37.620 --> 10:38.620
cloud dashboard.

10:38.620 --> 10:41.340
And I love their S3 compatible object storage.

10:41.340 --> 10:46.080
What a simple way to back up your configuration or maybe a few systems on your LAN to object

10:46.080 --> 10:47.860
storage in their cloud.

10:47.860 --> 10:53.020
Or a great way to have a static website that loads crazy fast with no crazy weird web server

10:53.020 --> 10:57.700
in front that loads all this stuff, I'm looking at you WordPress.

10:57.700 --> 10:58.880
That's really cool.

10:58.880 --> 11:02.660
And it makes you look great for a portfolio too when you have a crazy fast static website.

11:02.660 --> 11:07.120
They also have cloud firewalls and all of those one click applications beyond just Owncast.

11:07.120 --> 11:11.540
And what I love about Linode is they're super fast networking, 11 data centers worldwide

11:11.540 --> 11:13.820
and they are their own ISP.

11:13.820 --> 11:17.220
There's so much to like about Linode that you need that $100.

11:17.220 --> 11:23.220
So go to Linode.com slash LAN, get $100 for a new account for 60 days and try out all

11:23.220 --> 11:27.380
the great things we're always going on about and see why Linode is where we host everything

11:27.380 --> 11:33.780
for Jupiter Broadcasting 3.0, linode.com slash LAN.

11:33.780 --> 11:39.580
There have been several important updates in the land of Enterprise Linux this week.

11:39.580 --> 11:45.820
And first, let's note the arrival of Red Hat Enterprise Linux 8.4, which Red Hat described

11:45.820 --> 11:49.900
as a system designed to be deployed on the computing edge.

11:49.900 --> 11:56.000
I guess that's our sign that AI and blockchain aren't hip anymore because Red Hat is pushing

11:56.000 --> 12:00.420
this so hard as an OS that's great for the edge.

12:00.420 --> 12:04.540
Which is funny because I just don't completely agree with their assessment, but it is what

12:04.540 --> 12:05.540
it is.

12:05.540 --> 12:10.100
What everyone seems to be really excited about this week, though, are the CentOS clones.

12:10.100 --> 12:13.980
Rocky Linux 8.3 RC1 was released over the weekend.

12:13.980 --> 12:18.820
I think they were targeting for a Friday release and it ended up landing on Saturday, but on

12:18.820 --> 12:20.260
the same weekend.

12:20.260 --> 12:24.460
Rocky Linux, of course, is one of the first distributions that was announced after CentOS's

12:24.460 --> 12:28.740
development track switched to Stream from the traditional release model.

12:28.740 --> 12:33.500
Since the founding of the project to the end of last year, Rocky Linux has seen some growth,

12:33.500 --> 12:34.500
considerable growth.

12:34.500 --> 12:36.140
Their Slack channels have exploded.

12:36.140 --> 12:40.180
Their interest has really grown and the project has announced this milestone release with

12:40.180 --> 12:44.820
the following statement saying, Rocky Linux Enterprise Software Foundation is pleased

12:44.820 --> 12:48.900
to announce the general availability of Rocky Linux 8.3.

12:48.900 --> 12:56.500
What I think is kind of neat, Wes, is it has support for ARM64 and of course x86-64.

12:56.500 --> 13:01.140
Also did you see in here, because I mean this is the state of Red Hat Enterprise Linux 8,

13:01.140 --> 13:04.820
which this is based on, that it's still Rockin' Kernel 4.18.

13:04.820 --> 13:08.060
Yeah, that was a solid kernel.

13:08.060 --> 13:10.400
I might even still have a machine running it.

13:10.400 --> 13:12.140
We have one even older in the studio.

13:12.140 --> 13:17.380
We have a machine Rockin' Kernel 4.15, an 1804 machine, so we actually do have that

13:17.380 --> 13:18.380
beat.

13:18.380 --> 13:22.740
The desktop environment is GNOME 3.3.2, so there's that, I suppose.

13:22.740 --> 13:25.420
Hey, that almost sounds surprisingly modern.

13:25.420 --> 13:29.500
Almost, but then 40 comes along and makes everything look old again.

13:29.500 --> 13:36.860
Well, while you're talking about making things look old again, Alma Linux, yet that other

13:36.860 --> 13:41.560
RHEL clone, released a beta of 8.4.

13:41.560 --> 13:46.700
So if you're excited about the things Red Hat talked about in the arrival of 8.4, well

13:46.700 --> 13:49.100
Alma Linux right now looks like your best bet.

13:49.100 --> 13:51.180
Rocky is still plain catch up.

13:51.180 --> 13:56.180
Yeah, so there is a couple of things when you're looking at what sets these CentOS replacements

13:56.180 --> 13:57.500
apart.

13:57.500 --> 14:04.020
One is the governance structure, which both Alma Linux and Rocky Linux are now community

14:04.020 --> 14:08.400
driven, although I think Rocky Linux probably more so, just out of its nature.

14:08.400 --> 14:13.260
But also how does it track Red Hat Enterprise Linux releases, and what is the delay there?

14:13.260 --> 14:17.340
What I think Alma Linux is saying with their 8.4 beta is we're going to try to be as close

14:17.340 --> 14:21.660
to RHEL's official releases as possible.

14:21.660 --> 14:26.020
And they're doing something else that I think is also going to be a nice differentiator,

14:26.020 --> 14:29.020
is they're kind of setting up obvious support conduits.

14:29.020 --> 14:32.420
So if you get Alma Linux going, you got it in production, and now all of a sudden this

14:32.420 --> 14:37.940
website that you built is making an income and it's important to you, there is a route

14:37.940 --> 14:41.620
you can take to call up support when something breaks.

14:41.620 --> 14:45.000
Or maybe you deploy these as some part of your back end infrastructure and one day they

14:45.000 --> 14:46.620
became valuable to you.

14:46.620 --> 14:53.500
You can kind of step into a support cycle with SLAs and 24 by 7 incident support.

14:53.500 --> 14:57.380
It's kind of a nice package because you get community control, theoretically, I mean I

14:57.380 --> 14:59.420
think that's still fully materializing.

14:59.420 --> 15:04.900
They appear to be releasing pretty quickly in line with main RHEL, and now they have

15:04.900 --> 15:08.700
this hey if you want it support package, much like Ubuntu LTS has.

15:08.700 --> 15:13.940
Yeah, that sounds pretty nice in theory, but we don't have a lot of details yet on exactly

15:13.940 --> 15:18.100
how this will work or what it will cost.

15:18.100 --> 15:21.580
I'm sort of assuming it'll be cheaper than RHEL though, right?

15:21.580 --> 15:24.420
It seems like it should be, or else what's really the value here?

15:24.420 --> 15:31.160
Yeah, they say the details will be available in May 2021, a multi-tiered support system.

15:31.160 --> 15:35.420
So at least some of those you'd think are presumably cheaper, but yeah, otherwise people

15:35.420 --> 15:36.420
just buy RHEL.

15:36.420 --> 15:38.060
That's a great point, Wes.

15:38.060 --> 15:44.160
Ubuntu also has a warning out to folks this week for 21.04 breaking older machines with

15:44.160 --> 15:45.160
EFI.

15:45.160 --> 15:50.340
A patch is in route or probably already out now, but you'd have to have an ISO that has

15:50.340 --> 15:51.400
it applied.

15:51.400 --> 15:57.660
This problem mostly affected older machines like a 2012 MacBook Air and some older ThinkPad

15:57.660 --> 16:03.040
models, but it was enough for Ubuntu to delay the rollout of that little notification prompting

16:03.040 --> 16:07.620
you to upgrade just on the off chance that it might affect your computer and render it

16:07.620 --> 16:09.500
unbootable.

16:09.500 --> 16:13.700
And there is a workaround that people could use if they really want 21.04 right now.

16:13.700 --> 16:19.780
Yeah, you'll just need to go copy the EFI boot files from a working 20.04 ISO.

16:19.780 --> 16:26.160
And while we're still in Ubuntu land, it's been 370 days since Ubuntu 20.04's release

16:26.160 --> 16:33.440
on April 23rd, 2020, and this week we got the first beta for elementary OS 6, which

16:33.440 --> 16:40.220
is based on Ubuntu 20.04 and looks really sharp with completely revamped notifications

16:40.220 --> 16:46.980
and a major shift in several ways they build the OS, including how you get it installed.

16:46.980 --> 16:53.780
Yeah, there's a brand new installer for elementary OS, which should bring faster and more straightforward

16:53.780 --> 16:58.660
installs for both regular old end users, but also for OEMs.

16:58.660 --> 17:03.060
The elementary team also notes here that they would really appreciate a lot of testing across

17:03.060 --> 17:06.940
different hardware and configurations, so if you do have a non-primary machine laying

17:06.940 --> 17:11.780
around you don't mind trying a beta on, maybe give elementary OS 6 beta a shot.

17:11.780 --> 17:15.900
Yeah, you don't have to be a master developer to run through the installer and provide the

17:15.900 --> 17:17.620
team some feedback if you hit a bug.

17:17.620 --> 17:18.620
It's a great way to help out.

17:18.620 --> 17:22.100
I should note though, if you want to help out from the ARM side just right now, as far

17:22.100 --> 17:27.780
as I know, there's no early builds of this beta for ARM systems, so keep an eye out.

17:27.780 --> 17:29.760
You'll have to wait a little bit, I think.

17:29.760 --> 17:34.940
But when you do get it on a system that is supported, you get some really nice new updates

17:34.940 --> 17:37.920
to the look and feel of elementary OS 6.

17:37.920 --> 17:42.340
There's a ton of things under the hood, because for elementary OS users, Wes, they're getting

17:42.340 --> 17:47.420
everything that comes with 2004, plus the new look, plus the new Flatpak integration

17:47.420 --> 17:52.700
with App Center, and this new style sheet that just looks really slick.

17:52.700 --> 17:57.020
Yeah, system-wide accent colors that you can tweak to your preference, that sounds pretty

17:57.020 --> 18:03.180
nice, and they're finally introducing a dark style preference, that's dark mode, for the

18:03.180 --> 18:07.240
first time, which I'm definitely excited to try.

18:07.240 --> 18:14.700
There's also a redesigned system settings view, where they'd also love some feedback.

18:14.700 --> 18:16.100
Linux.ting.com.

18:16.100 --> 18:19.980
If you're sick of overpaying for your cell service, go see how much you could save, and

18:19.980 --> 18:24.380
then take $25 off that at Linux.ting.com.

18:24.380 --> 18:29.320
I also know a good family plan is hard to find, and Ting's newest Flex plan addresses

18:29.320 --> 18:34.020
that particular pain point in a really customer-friendly way.

18:34.020 --> 18:37.820
You can add as many lines on your account as you need for just $10 a line.

18:37.820 --> 18:42.180
Every line has unlimited texts and calls, and every line shares the same pool of data.

18:42.180 --> 18:49.380
If you need two gigs or 20 gigs, there's a perfect Ting plan just for you, LTE and 5G,

18:49.380 --> 18:53.380
and every plan gets access to Ting's award-winning customer service.

18:53.380 --> 18:59.020
With nationwide LTE and 5G coverage, it means you've got three networks to choose from,

18:59.020 --> 19:01.680
and a ton of great possible coverage.

19:01.680 --> 19:05.700
And that also means it's simple to bring just about any device to Ting.

19:05.700 --> 19:09.380
With that wide network support, that's a lot of compatibility.

19:09.380 --> 19:12.520
So get started by going to Linux.ting.com.

19:12.520 --> 19:16.020
Check your current phone, create an account, pick the plan that you think is right for

19:16.020 --> 19:17.020
you.

19:17.020 --> 19:21.260
Next up, Ting will send you a SIM card, you'll pop it in your phone and get activated in

19:21.260 --> 19:22.260
minutes.

19:22.260 --> 19:25.900
Getting your phone bill in half has never been easier with Ting's new plans.

19:25.900 --> 19:29.460
The next generation of Ting Mobile is here, so go see how much you could save and take

19:29.460 --> 19:34.700
$25 off at Linux.ting.com.

19:34.700 --> 19:41.420
Well now for a story we're still learning more about, a series of new Spectre-like exploits

19:41.420 --> 19:44.700
that bypass all previous mitigations.

19:44.700 --> 19:49.420
Thanks to Tom's Hardware for the help with our reporting on this story.

19:49.420 --> 19:54.180
Researchers from the University of Virginia and University of California San Diego have

19:54.180 --> 19:59.820
published a paper describing three new types of potential Spectre attacks using vulnerabilities

19:59.820 --> 20:01.980
of micro-op caching.

20:01.980 --> 20:07.260
The team of researchers, led by Ashish Venkat, discovered that hackers can potentially steal

20:07.260 --> 20:11.460
data when a CPU fetches commands from the micro-op cache.

20:11.460 --> 20:19.220
And that's a problem, since all modern AMD CPUs and Intel CPUs since 2011 and since 2017

20:19.220 --> 20:22.840
on the AMD side use micro-op caches.

20:22.840 --> 20:28.660
So all of them in theory are vulnerable to this hypothetical attack.

20:28.660 --> 20:33.140
I do couch it, but I think it's also important to recognize it goes back quite a ways.

20:33.140 --> 20:35.420
And more bad news!

20:35.420 --> 20:40.540
Researchers believe that mitigating these new vulnerabilities will cause even more significant

20:40.540 --> 20:44.100
performance penalties than we had the first time around.

20:44.100 --> 20:50.020
Oh boy, I think the good thing to keep in mind here is that we really have no idea how

20:50.020 --> 20:53.620
easy these are to actually exploit in the real world.

20:53.620 --> 20:58.740
The damage may be limited to very directed attacks, people that are extremely motivated.

20:58.740 --> 21:03.620
The research will tell us more soon, but at this stage, I'm in the wait and see mode.

21:03.620 --> 21:05.500
I know you, living dangerously.

21:05.500 --> 21:07.380
Spectre mitigations disabled.

21:07.380 --> 21:08.580
And logged in as root, Wes.

21:08.580 --> 21:09.580
You know me.

21:09.580 --> 21:16.100
Well, if you'd like to know more, the researchers will be presenting at ISCA next month and

21:16.100 --> 21:19.500
we'll have the white paper linked in the show notes.

21:19.500 --> 21:23.740
Well you might just be running Linux on a platform that may not be affected by any of

21:23.740 --> 21:26.460
this, that Apple Silicon.

21:26.460 --> 21:33.060
One quick but important step on the road to getting Linux fully working on the M1 is of

21:33.060 --> 21:35.700
course the GPU driver.

21:35.700 --> 21:42.620
Well the Asahi Linux team is now able to run OpenGL workloads like GLX Gears and GLMark2

21:42.620 --> 21:46.340
on the M1 with a fully open source stack.

21:46.340 --> 21:54.900
Hey, it's not just running, they're also passing about 75%, that's a C, of the OpenGL ES 2.0

21:54.900 --> 21:57.620
tests that are used to establish Chronos conformance.

21:57.620 --> 22:02.660
The really big news this week is that stuff that is working, the compiler and the driver,

22:02.660 --> 22:04.940
are now upstreamed to Mesa.

22:04.940 --> 22:11.340
This GPU work really is key to getting Linux working on Apple Silicon in any meaningful

22:11.340 --> 22:12.340
way.

22:12.340 --> 22:17.700
We'll have a link to the blog post that captures a lot of the journey of reverse engineering

22:17.700 --> 22:23.620
that went on to figure out what does work and what does not work on these custom Apple

22:23.620 --> 22:24.620
GPUs.

22:24.620 --> 22:26.100
Yeah, just to bounce off that, Wes.

22:26.100 --> 22:29.420
If you are kind of interested in this stuff, one of the things that's captured in that

22:29.420 --> 22:36.100
journey is the discovery that Apple's custom GPUs, while they've culled them and made them

22:36.100 --> 22:42.380
really specific, they still support older APIs that are way outside Metal, which is

22:42.380 --> 22:44.820
Apple's proprietary graphics API.

22:44.820 --> 22:48.300
So they have support in there for OpenGL stuff directly.

22:48.300 --> 22:50.460
I guess the question is how far does that go, right?

22:50.460 --> 22:51.460
Yeah, right.

22:51.460 --> 22:56.300
The Asahi team are wondering just how many of those are there and could we leverage them

22:56.300 --> 23:00.620
to implement some non-Metal APIs that otherwise they just wouldn't be able to?

23:00.620 --> 23:06.500
Well, you can leverage our RSS feed to embrace a free and open source podcast ecosystem by

23:06.500 --> 23:11.300
going to linuxactionnews.com slash subscribe for all the ways to get new episodes.

23:11.300 --> 23:16.420
And linuxactionnews.com slash contact for ways to get in touch.

23:16.420 --> 23:20.900
And things might be sold out right now over at jupytergarage.com, but keep an eye out.

23:20.900 --> 23:26.740
Some limited classic retro last swag is going up for sale at jupytergarage.com.

23:26.740 --> 23:32.340
We'll be back next Monday with our weekly take on the latest Linux and open source news.

23:32.340 --> 23:52.860
Thanks for joining us and we will see you next week.


1
00:00:00,000 --> 00:00:11,320
Hello, and welcome to Linux Action News. Episode 254, recorded on August 17, 2022. I'm Chris.

2
00:00:11,320 --> 00:00:12,320
And I'm Wes.

3
00:00:12,320 --> 00:00:15,020
Hello, Wes. Let's do the news.

4
00:00:15,020 --> 00:00:21,880
We start with Android 13. Once the makings of a big news cycle, these days Android has

5
00:00:21,880 --> 00:00:28,080
matured to the point that yet another release is a fairly standard affair. Combine that

6
00:00:28,080 --> 00:00:33,400
with the limited uptake of a new Android release, and sometimes, a new version goes totally

7
00:00:33,400 --> 00:00:41,120
unnoticed by most. But, as we record, Android 13 is rolling out to Pixel devices, and then

8
00:00:41,120 --> 00:00:46,860
soon to Samsung Galaxy devices, Asus, OnePlus, and others.

9
00:00:46,860 --> 00:00:51,760
And most importantly, at least I think, it's landing upstream in AOSP right now, so that's

10
00:00:51,760 --> 00:00:56,640
great to see. Actually, there's some stuff in here that is really good, including multi-language

11
00:00:56,640 --> 00:01:02,280
support for apps, but also one I like to see a lot landing in Android 13, is official built-in

12
00:01:02,280 --> 00:01:08,320
support for Bluetooth LE audio, so developers can now start using LE capabilities on compatible

13
00:01:08,320 --> 00:01:13,080
devices. That means battery life on some of these Bluetooth LE devices is just going to

14
00:01:13,080 --> 00:01:17,540
be mind-blowing. It's great to see that built in now. We're also seeing the beginning of

15
00:01:17,540 --> 00:01:21,840
a new feature that's coming to Android, and developers need access to it now so they can

16
00:01:21,840 --> 00:01:26,880
start baking support in, hopefully, to future versions of their apps. And this caught my

17
00:01:26,880 --> 00:01:32,960
attention. It's called predictive back gesture. So, in Android 13, they've introduced a new

18
00:01:32,960 --> 00:01:39,280
API where your app can tell the system how it's going to handle back events in advance.

19
00:01:39,280 --> 00:01:44,080
In practice, they call it the ahead of time model. They say this new approach is part

20
00:01:44,080 --> 00:01:50,280
of a multi-year effort to help prepare your apps to support the new predictive back gesture,

21
00:01:50,280 --> 00:01:54,680
which is available in testing right now if you turn on the developer options. Another

22
00:01:54,680 --> 00:02:00,920
headline feature this time around is tablet support. Google says 13 has been optimized

23
00:02:00,920 --> 00:02:06,520
for large screen layouts, though, honestly, the implication in the release announcement

24
00:02:06,520 --> 00:02:12,120
is a lot more work needs to be done around the tooling. Notification permissions and

25
00:02:12,120 --> 00:02:17,240
photo library access are now more in line with the iOS style of asking the user for

26
00:02:17,240 --> 00:02:24,040
permission first. Oh, I like that. I also like that application performance has got

27
00:02:24,040 --> 00:02:30,520
a big boost in Android 13, thanks to some updates to the art runtime. And the good news

28
00:02:30,520 --> 00:02:35,920
there is Google plans to ship those improvements to other versions of Android through Google

29
00:02:35,920 --> 00:02:42,680
Play updates. It's great for those of you who use the Play services. And overall Android

30
00:02:42,680 --> 00:02:47,480
13 looks like a really nice update, perhaps what Android 12 just should have been all

31
00:02:47,480 --> 00:02:52,960
along. Google is asking developers to start testing now. And I think hopefully, since

32
00:02:52,960 --> 00:02:57,240
this isn't really a life changing upgrade, we'll see a significant uptake from the hardware

33
00:02:57,240 --> 00:03:02,120
vendors out there.

34
00:03:02,120 --> 00:03:07,520
Just when we thought Linux was entering an era of gaming utopia, rolling release Linux

35
00:03:07,520 --> 00:03:12,960
users discovered some bad news I'm afraid we're all going to have to deal with sometime

36
00:03:12,960 --> 00:03:13,960
soon.

37
00:03:13,960 --> 00:03:20,420
And it really touches on what should be the upstream responsibility for long term compatibility

38
00:03:20,420 --> 00:03:24,880
and stable ABIs. And unfortunately, for some users, they're finding themselves trapped

39
00:03:24,880 --> 00:03:30,360
right in the middle of that debate as their anti cheat enabled games began breaking after

40
00:03:30,360 --> 00:03:37,560
recently updating to glibc version 2.36. The breakage stems from the DT underscore hash

41
00:03:37,560 --> 00:03:41,440
section being dropped in the GNU C library altogether.

42
00:03:41,440 --> 00:03:47,800
The GNU C library or glibc as it's often known, has traditionally supported two ways to get

43
00:03:47,800 --> 00:03:55,460
your hash on DT underscore hash and the newer GNU underscore DT underscore hash. Now these

44
00:03:55,460 --> 00:04:01,160
days most consider the GNU version to be better structured and DT GNU hash has been around

45
00:04:01,160 --> 00:04:06,820
for a decade and a half at this point. But as you're probably already guessing since

46
00:04:06,820 --> 00:04:12,180
we're talking about this, makers of anti cheat software are still relying on the old

47
00:04:12,180 --> 00:04:14,080
non GNU version.

48
00:04:14,080 --> 00:04:19,080
Yep, and once rolling Linux users like Arch users began updating their system, they got

49
00:04:19,080 --> 00:04:25,600
that new version of glibc, the one that only has the GNU hash section. And well, understand

50
00:04:25,600 --> 00:04:29,880
it's not just anti cheat games that are getting broken, other Linux apps are as well such

51
00:04:29,880 --> 00:04:35,880
as lib strangle, but really anything that relies on the traditional DT underscore hash

52
00:04:35,880 --> 00:04:40,760
section is breaking with glib 2.36 due to this change.

53
00:04:40,760 --> 00:04:44,760
Over the past week and a half, this issue has been discussed pretty darn thoroughly

54
00:04:44,760 --> 00:04:50,000
on Valve's Proton bug tracker. Thankfully for those on Arch Linux where the problem

55
00:04:50,000 --> 00:04:57,300
was first reported, glibc 2.36-2 is currently in testing and reverts the earlier change

56
00:04:57,300 --> 00:05:03,280
so both styles of hash are still included. And being those rolling release maniacs, Arch

57
00:05:03,280 --> 00:05:08,520
users have already tested that testing package and confirmed that anti cheat enabled games

58
00:05:08,520 --> 00:05:11,720
are once again working correctly.

59
00:05:11,720 --> 00:05:17,320
As far as getting the fix upstream for this issue, or maybe just rolling the change back

60
00:05:17,320 --> 00:05:22,480
upstream, well, it's not really clear what's going to happen right now. A Proton developer

61
00:05:22,480 --> 00:05:28,160
at Valve says that the upstream glibc discussion on DT underscore hash isn't coming out in

62
00:05:28,160 --> 00:05:33,440
the direction of prioritizing compatibility with pre-existing applications. They added

63
00:05:33,440 --> 00:05:39,820
in a tweet thread, quote, every such instance contributes to damaging the idea of desktop

64
00:05:39,820 --> 00:05:44,400
Linux as a viable target for third party developers.

65
00:05:44,400 --> 00:05:50,600
I can definitely appreciate that. I mean, I don't want my games to break. But as ever

66
00:05:50,600 --> 00:05:57,080
in Linux, there's multiple parties, multiple projects and multiple developers involved.

67
00:05:57,080 --> 00:06:00,920
On the glibc side, there's definitely been some discussion about how best to address

68
00:06:00,920 --> 00:06:07,180
this issue going forward. Carlos O'Donnell, a glibc steward said, quote, what I would

69
00:06:07,180 --> 00:06:13,160
like to see is more feedback from the anti cheat teams about exactly what they need.

70
00:06:13,160 --> 00:06:18,840
He also pointed out that, quote, depending on DT hash and specific loader semantics is

71
00:06:18,840 --> 00:06:23,280
going to break at some point. To make this issue a little more complicated, although

72
00:06:23,280 --> 00:06:29,000
perhaps also a potential avenue for a fix, is that the old style of hash is still marked

73
00:06:29,000 --> 00:06:36,080
as required in the upstream specification. So a change at that layer might at least signal

74
00:06:36,080 --> 00:06:41,120
to downstream consumers like anti cheat software that they really shouldn't rely on just the

75
00:06:41,120 --> 00:06:48,160
old style of hash sticking around. And of course, because this is Linux, right now,

76
00:06:48,160 --> 00:06:53,880
a lot of the control rests in the hands of distributions. Carlos also emphasized that

77
00:06:53,880 --> 00:07:00,640
DT underscore GNU underscore hash was added way back in 2006, and has kind of been the

78
00:07:00,640 --> 00:07:06,720
standard on Linux for the last 16 years. Also, this most recent glibc change was made to

79
00:07:06,720 --> 00:07:13,080
allow distributions to choose how backwards compatible they want to be. So really, at

80
00:07:13,080 --> 00:07:18,540
least from some perspectives in the glibc camp, the choice to have DT hash or not is

81
00:07:18,540 --> 00:07:23,160
with distributions. If this breaks specific applications, then those developers need to

82
00:07:23,160 --> 00:07:28,400
engage with those distribution ecosystems or adapt their software.

83
00:07:28,400 --> 00:07:32,400
Yeah, it's stories like these, Wes, where I think the Valve developers are thinking

84
00:07:32,400 --> 00:07:36,800
to themselves, well, I'm glad we built SteamOS because they're clearly going to mitigate

85
00:07:36,800 --> 00:07:41,200
this at the distribution level, and other distribution makers are going to have to make

86
00:07:41,200 --> 00:07:45,960
the same decision. There is some good news out there this week for Linux gamers, though.

87
00:07:45,960 --> 00:07:51,600
Proton 7.0.4 shipped just a couple of days ago, and it brings a whole batch of new Windows

88
00:07:51,600 --> 00:07:57,240
games to the Linux fun. It's not just better game compatibility, though. There's an exciting

89
00:07:57,240 --> 00:08:04,560
lower-level improvement shipping with Proton 7.0.4. It's support for file system copy-on-write

90
00:08:04,560 --> 00:08:11,440
behavior, at least for supported file systems like our dear ButterFS. The goal here is to

91
00:08:11,440 --> 00:08:17,400
reduce space used by game prefixes, which is really nice to see for some of us on smaller

92
00:08:17,400 --> 00:08:23,640
NVMe drives like me.

93
00:08:23,640 --> 00:08:28,240
Linus Torvalds released the first release candidate of Linux 6.0 this week, officially

94
00:08:28,240 --> 00:08:34,760
making this current cycle the big 6.0. But if you want to call this release 5.20 or whatever,

95
00:08:34,760 --> 00:08:38,480
Linus said you can, quote, go right ahead.

96
00:08:38,480 --> 00:08:44,320
Fun games aside, it is kind of nice to have that settled. Or, well, at least as settled

97
00:08:44,320 --> 00:08:50,200
as anything is in the world of Linux. But, you know, we've talked a lot about how many

98
00:08:50,200 --> 00:08:55,960
features are getting packed into this release, and there are a ton. But one of the things

99
00:08:55,960 --> 00:09:02,120
that seems to have missed the RC window is Rust. Torvalds lamented about that a bit in

100
00:09:02,120 --> 00:09:06,800
the release notes, writing, quote, I actually was hoping that we'd get some of the first

101
00:09:06,800 --> 00:09:15,240
Rust infrastructure and the multigen LRU VM, but neither of them happened this time around.

102
00:09:15,240 --> 00:09:18,880
He did emphasize, though, that, quote, there's always more releases.

103
00:09:18,880 --> 00:09:24,320
Indeed, I hope so at least. I kind of find it a riot, though, to just watch the metastory

104
00:09:24,320 --> 00:09:30,940
develop around Linux 6.0 and also to watch Linus consistently try to tamp down expectations

105
00:09:30,940 --> 00:09:36,040
and just call this not a big deal constantly. But the media outlets, they're all in. They've

106
00:09:36,040 --> 00:09:39,760
been playing all kinds of games this week, and I think you could be forgiven for actually

107
00:09:39,760 --> 00:09:44,440
thinking the final version of Linux 6.0 had actually shipped. The headlines going around

108
00:09:44,440 --> 00:09:48,480
are just totally detached from reality now. Here's a couple of examples from just the

109
00:09:48,480 --> 00:09:54,120
last few days. ZDNet's headline, quote, Linux 6.0 arrives with performance improvements

110
00:09:54,120 --> 00:10:01,600
and more Rust coming. The register also had a doozy. Linux 6.0 debuts missing some rusty

111
00:10:01,600 --> 00:10:06,840
bits, making it sound like it's a shipped product. I assume just to get the clicks.

112
00:10:06,840 --> 00:10:11,200
Maybe it's been a slow new cycle over the summer. I don't know. But none of it really

113
00:10:11,200 --> 00:10:15,920
matters, I would guess, at least not to Linus. He wrote himself, quote, the kernel version

114
00:10:15,920 --> 00:10:21,760
numbers are really entirely made up and have no intrinsic meaning. I don't know. I mean,

115
00:10:21,760 --> 00:10:26,680
there is something to like. The numbers sure seem to matter to some people. He can keep

116
00:10:26,680 --> 00:10:32,040
hammering that point away. But alas, I'm not sure it's really going to change everyone's

117
00:10:32,040 --> 00:10:39,080
minds. This release cycle also left the kernel just 50 patches away from real time support

118
00:10:39,080 --> 00:10:44,640
finally being integrated. But there appear to still be some roadblocks that kept those

119
00:10:44,640 --> 00:10:50,880
patches out of the tree, at least for the 6.0 RC1 release. Yeah, unfortunately that

120
00:10:50,880 --> 00:10:54,720
was one of the other big headline features for this release. But I think the other way

121
00:10:54,720 --> 00:11:01,120
to look at that is we're just about 50 patches or so from this actually landing. So hopefully

122
00:11:01,120 --> 00:11:09,960
this real time work will manage to cross the finish line later this year with Linux 6.1.

123
00:11:09,960 --> 00:11:18,840
August 16th was Debian's 29th anniversary. So we wanted to send them a big happy birthday

124
00:11:18,840 --> 00:11:24,400
from all of us here at Jupiter Broadcasting. The project is helping local Debian groups

125
00:11:24,400 --> 00:11:30,240
worldwide plan Debian Day celebrations. If you're interested, we'll have a link to the

126
00:11:30,240 --> 00:11:43,560
local Debian groups page in the notes.

127
00:11:43,560 --> 00:12:03,840
Great way to support the show, Linode is fast, reliable cloud hosting with the best support

128
00:12:03,840 --> 00:12:14,200
over the last 19 years. Nobody has them matched in this area. And they're 30-50% cheaper than

129
00:12:14,200 --> 00:12:15,200
the hyperscalers that want to lock you into their crazy platforms and try to upsell you

130
00:12:15,200 --> 00:12:18,320
every single day on all their little services that they all have to have cute little esoteric

131
00:12:18,320 --> 00:12:24,040
names for. And by cute I mean horrible. But on top of that, Linode has the best performance.

132
00:12:24,040 --> 00:12:28,720
They've got 11 data centers around the world you can choose from. And of course their interface

133
00:12:28,720 --> 00:12:34,680
is simple, straightforward and easy to understand with great documentation and an API that lets

134
00:12:34,680 --> 00:12:39,560
you do everything. And then they have a bunch of great features on top of that. Object storage,

135
00:12:39,560 --> 00:12:45,040
cloud firewall, simple elegant backups, Kubernetes and Terraform and Ansible support and so much

136
00:12:45,040 --> 00:12:49,100
more. And if you're a performance hound, your application needs a lot of throughput, go

137
00:12:49,100 --> 00:12:55,460
check out Linode's MVME storage and dedicated AMD EPYC CPU rigs. So go build something,

138
00:12:55,460 --> 00:13:00,240
go learn something, try it for yourself and support the show. You just go to linode.com

139
00:13:00,240 --> 00:13:06,120
slash LAN. That gets you the $100 so you can really try the service. You can get a genuine

140
00:13:06,120 --> 00:13:10,760
idea of what it's like to use it, what the performance is, what the feature set is and

141
00:13:10,760 --> 00:13:15,200
you can get that for 60 days. Go lock it in and kick the tires. Go to linode.com slash

142
00:13:15,200 --> 00:13:23,360
LAN. One more time, support the show, linode.com slash LAN.

143
00:13:23,360 --> 00:13:28,680
Linode.com slash LAN. Collide is endpoint security that uses the most powerful untapped

144
00:13:28,680 --> 00:13:33,440
resource in your entire organization, the end users. You know, when you're trying to

145
00:13:33,440 --> 00:13:37,200
achieve security goals, maybe it's an internal goal, maybe it's one for a third party auditor.

146
00:13:37,200 --> 00:13:41,680
I had to do that for years. Maybe it's just something the boss wants done. The traditional

147
00:13:41,680 --> 00:13:47,260
approach is treating every device like it's Fort Knox. With old school tools like MDMs

148
00:13:47,260 --> 00:13:52,500
that force disruptive agents onto employees' devices, Rex Performance makes the machines

149
00:13:52,500 --> 00:13:57,760
feel like they're five years older than they really are and it turns IT admins and users

150
00:13:57,760 --> 00:14:03,500
into enemies. Plus, a lot of these tools create their own security problems. Let's be real,

151
00:14:03,500 --> 00:14:08,400
Collide does things differently. Instead of forcing changes on users, Collide sends them

152
00:14:08,400 --> 00:14:14,640
security recommendations via Slack. Collide will automatically notify your team when their

153
00:14:14,640 --> 00:14:20,180
device is insecure and it'll give them step-by-step instructions on how to solve those problems.

154
00:14:20,180 --> 00:14:24,420
By reaching out to employees via a friendly Slack DM and educating them about company

155
00:14:24,420 --> 00:14:30,320
policies, Collide can help you build a culture in which everyone contributes to security

156
00:14:30,320 --> 00:14:35,820
because everyone understands how and why to do it. And for IT admins, Collide provides

157
00:14:35,820 --> 00:14:40,560
a single dashboard that lets you monitor the security of your entire fleet. Maybe they're

158
00:14:40,560 --> 00:14:44,400
on a Mac, maybe they're on Windows, or maybe they're on Linux. Doesn't matter. You can

159
00:14:44,400 --> 00:14:48,200
see it all with a glance. See which employees have used disk encryption, which ones have

160
00:14:48,200 --> 00:14:52,900
kept their OS up to date, if they have a password manager installed, it really makes it easy

161
00:14:52,900 --> 00:14:57,960
to prove compliance to the auditors, to your customers, to leadership, whoever it be. So

162
00:14:57,960 --> 00:15:05,080
that's Collide. User-centered, cross-platform, endpoint security for teams, Slack. You can

163
00:15:05,080 --> 00:15:11,500
meet your compliance goals by putting users first. Visit collide.com slash LAN to find

164
00:15:11,500 --> 00:15:14,420
out and when you go there, they're going to hook you up with a goody bag that includes

165
00:15:14,420 --> 00:15:21,020
a free t-shirt just for activating a free trial. How great is that? So go to K-O-L-I-D-E

166
00:15:21,020 --> 00:15:29,020
dot com slash L-A-N. That's collide.com slash LAN.

167
00:15:29,020 --> 00:15:35,160
John Deere has famously been at the center of the right to repair fight for years now,

168
00:15:35,160 --> 00:15:40,540
locking their farmers out of their own equipment, forcing the use of company service options.

169
00:15:40,540 --> 00:15:47,660
Well, a new jailbreak announced at DEFCON by SICK codes might just tip the balance of

170
00:15:47,660 --> 00:15:54,100
power in favor of the equipment owners. Under pressure from the right to repair movement,

171
00:15:54,100 --> 00:15:58,880
John Deere had already announced some plans to open up some of its software to owners

172
00:15:58,880 --> 00:16:05,600
of the equipment, but many had emphasized that this was just too little, too late.

173
00:16:05,600 --> 00:16:09,660
And now the next shoe has dropped and surprise, surprise everyone. John Deere's embedded

174
00:16:09,660 --> 00:16:16,460
systems, they're running old versions of Linux and Windows CE. So to develop this jailbreak,

175
00:16:16,460 --> 00:16:21,020
SICK codes got his hands on numerous generations of John Deere tractor control touchscreen

176
00:16:21,020 --> 00:16:26,380
consoles. He ultimately decided to just focus on a few models and SICK codes then decided

177
00:16:26,380 --> 00:16:32,300
to solder controllers directly onto the circuit boards and eventually was able to bypass system

178
00:16:32,300 --> 00:16:37,580
protections, even protections that John Deere had tried to recently update. Once set up,

179
00:16:37,580 --> 00:16:42,100
he used an attack on a reboot check to restore the device as if it was being accessed by

180
00:16:42,100 --> 00:16:47,380
a certified dealer. He found that when the system was in this mode, it would offer more

181
00:16:47,380 --> 00:16:52,460
than 1.5 gigabytes worth of logs. And of course, this log data revealed the path to another

182
00:16:52,460 --> 00:16:57,980
potential timing attack that he could use to get even deeper into the system.

183
00:16:57,980 --> 00:17:03,540
And boy did it. Not only did SICK codes find that all the firmware's code is running as

184
00:17:03,540 --> 00:17:08,300
root because of course it is, but it also turned out that once you were able to get

185
00:17:08,300 --> 00:17:13,300
your own software onto the equipment, it would just accept whatever code you put on there

186
00:17:13,300 --> 00:17:19,820
and happily execute it. SICK codes emphasized saying, the main bug is that nothing's encrypted

187
00:17:19,820 --> 00:17:23,980
or checks on properly or anything like that.

188
00:17:23,980 --> 00:17:30,260
It's impressive how fragile this empire is. This empire of service repair and locking

189
00:17:30,260 --> 00:17:36,900
farmers out wasn't really that well protected once you got physical access to it. Kyle Waynes,

190
00:17:36,900 --> 00:17:43,860
the CEO of iFixit and also a right to repair advocate himself, he attended SICK codes presentation

191
00:17:43,860 --> 00:17:50,180
and he recounted the experience on Twitter saying, SICK codes has jailbroken a John Deere

192
00:17:50,180 --> 00:17:55,740
and this is just the beginning. Turns out our entire food system is built on outdated

193
00:17:55,740 --> 00:18:00,860
unpatched Linux and Windows CE hardware with LTE modems.

194
00:18:00,860 --> 00:18:07,460
Yikes. Also, we should note that there's no patching around this flaw, so we suspect

195
00:18:07,460 --> 00:18:11,380
this is really just the beginning for people who want to repair their tractors and other

196
00:18:11,380 --> 00:18:17,700
farm equipment themselves. Also, now that we know with certainty that GPL software is

197
00:18:17,700 --> 00:18:23,300
used on their equipment, you've got to wonder if John Deere has been in compliance with

198
00:18:23,300 --> 00:18:25,820
the terms of that license.

199
00:18:25,820 --> 00:18:30,920
I suspect we may find out in time. And yes, dear listener, they've already got doom running

200
00:18:30,920 --> 00:18:34,140
on these devices. You have to wonder what else they're going to get running on these

201
00:18:34,140 --> 00:18:38,220
John Deere tractors. What other functionality could they bring to these tractors? Could

202
00:18:38,220 --> 00:18:43,580
we one day see an updated Linux distribution for tractors? Who knows, but the possibilities

203
00:18:43,580 --> 00:18:47,780
are pretty endless, just like so many other things in the world of Linux and open source.

204
00:18:47,780 --> 00:18:51,980
So we'll keep an eye on all of it. Be sure you go to linuxactionnews.com slash subscribe

205
00:18:51,980 --> 00:18:56,700
for all the ways to get new episodes so you don't miss a thing. And linuxactionnews.com

206
00:18:56,700 --> 00:19:01,340
slash contact for ways to get in touch. And be sure to go check out our buddy Alex from

207
00:19:01,340 --> 00:19:07,560
Self Hosted on episode 190 of Late Night Linux recorded during the recent London Meetup.

208
00:19:07,560 --> 00:19:12,060
As for us, well, we'll be back next week with our take on the latest Linux and open

209
00:19:12,060 --> 00:19:32,460
source news. Thanks for joining us. And that's all the news for this week.


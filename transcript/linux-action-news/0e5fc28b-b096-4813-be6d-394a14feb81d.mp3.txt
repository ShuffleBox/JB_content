Hello and welcome to Linux Action News, episode 241, recorded on May 17, 2022. I'm Chris.
And I'm Wes.
Hello, Wes from a possibly noisy remote location. Let's do the news.
We start this week with what Google is calling Assured Open Source. It's a program they're
launching that curates open source software using Google's own in-house testing tooling.
In the announcement, Google states that, quote, the Assured Open Source software service will
extend the benefits of Google's extensive software auditing experience to cloud customers.
They say all open source packages made available through the service, Google Cloud, will also
be the ones that are used internally by Google. So what it seems they're announcing here is
the open source packages you probably already know and use when you're on Google Cloud,
will now be checked against their own set of internal tools as a type of a service for
Google Cloud customers.
You can find the list of the so far 550 major open source libraries that Google's testing
on GitHub and as a link in our show notes. And of course, you can just go look these
up and then download them independently of Google. Honestly, it's a list of really good
teams and they're open source packages, right? Go get them. What Google's adding with Assured
Open Source is specific audited versions that have been run through their test suite and
then distributed directly through Google Cloud. And something else we noticed from the company
recently was the formation of an open source maintenance crew, a team that would aim to
work upstream with maintainers of popular libraries directly in an effort to improve
security.
Now that I like to see the open source maintainers crew, huh? Okay, all right, going upstream,
I'm all about that. I think that's really great to see. So the curated service here,
the Assured Open Source program, that's just an early testing right now, but it should
be available for more Google Cloud customers in quarter three of 2022. So far, the biggest
pushback I've seen online is that some people say that Google is basically monetizing security
issues in open source instead of fixing the root of the problem, at least for everything
we have announced today. I don't know, Wes, there is only so much one company can do.
What do you think of that criticism?
I do get it. I think the sort of distribution to Google Cloud customers in some senses rubs
me the wrong way. Makes me feel a little uncomfortable. But I don't know, it's a mixed bag. On one
hand, they're kind of doing the right thing in that, you know, the library, the tooling,
the testing tooling, that's all open source, they've got a repo, go pull it down, they've
got docs to help you run it on your own infrastructure. But that's kind of as far as it goes. And
you have to go do that work yourself, unless you're a Google paying customer. And that's
fine for you know, some of the other big players. But it means you know, if you or I wanted
to do it, we'd have to go pull all this stuff kind of get scripts up and going, we have
to set up the infrastructure to run it and then actually run it and pick versions and
then do the publishing ourselves. So that's that's kind of the offering they're doing,
whether or not you think that's a fair value add on top. I could see either way. But I
do think you're right, you know, you got to balance whatever grossness you see there with
their efforts to do this testing to share that tooling, their efforts with project zero,
and then actually, just recently, Google, along with the Open Source Security Foundation
and the Linux Foundation, met up at the White House to discuss open source security. And
it seems there was an attempt to kind of expand that bring in other groups, folks like Amazon,
Intel, Microsoft, and get them all together, shell out some money and focus on improving
this mess.
That seems good, right? I mean, it seems like this is what we've been asking for is pay
attention to this stuff. This stuff is infrastructure, you should treat it as infrastructure like
you do roads and bridges. So yeah, I think it's good. I just I have a very mixed reaction
myself. It seems like something limited to Google Cloud is only going to have so much
reach, it's only going to have so much impact. And I think I've just been looking at this
problem of underfunding free software and underfunding key libraries for so long, it
feels like for over 20 years. And I'm just kind of losing faith that any of these companies
are going to solve this. I mean, maybe that's changing with this, it definitely seems like
they're getting more serious. But it just still seems like it's always going to be limited
in reach, limited in impact. And I hate to say it, but probably also only survives as
long as there's an advocate at Google that's pushing for this program. You know, I think
about Linux, that was a community solution to a problem that the commercial interest
at the time, just we're not willing to solve. And I feel like now we need a community driven
solution to address free software funding, at least an effort that improves the baseline,
maybe we're not going to give full time wages to all these developers. But if we could improve
the baseline of their lives, make it worth their time, incentivize them to keep working
on it, that would be tremendous. And we have the technology, we just seem to not have the
will.
Well, it looks like the Software Freedom Conservancy might just be about to land a major win for
the right to repair and our beloved GPL.
Yes, after attempting to work with Vizio, the TV manufacturer since 2018 to get them
to comply with the GPL, because of some software that they ship on some of their televisions,
the SFC decided to file a lawsuit in the state of California back in October of 2021. So
they worked with them since 2018. The lines of communication kind of go dead in 2020.
They file a lawsuit in October of 2021. And then in December of 2021, Vizio tries to get
this lawsuit kicked out of California.
Yeah, Vizio basically argued that no, no, these claims should be superseded by copyright
and therefore handled in a federal copyright case, not in the jurisdiction of California.
But what happened this week is a ruling stating that the claim from the Software Freedom Conservancy
succeeded in the quote, extra element test, which holds that state law claims are not
preempted by copyright, if the state law claim at issue has one or more qualitatively different
elements from a normal copyright claim. And that's important in particular for this case,
because the qualitatively different elements here are those extra rights granted to us
by the GPL.
Yes. And this also would be historic, not only because of that, but because it's the
customer suing Vizio, not a copyright holder. That means you and me users of GPL software
could have a win here. The SFC notes the ruling is a watershed moment in the history of copyleft
licensing. They say this ruling shows that the GPL agreements function as both copyright
license and as a contractual agreement.
Now that's just great on its own, right, especially for us free software lovers. But we're also
folks who buy electronic devices and televisions and want to maintain them. And this is also
good news for the right to repair, quote, this claim is central to the right to software
repair, as it allows users to exercise the right to copy, share, modify, and reinstall
the software on the devices that they receive. And you could totally see how, you know, this
ruling and actually enforcing compliance with the GPL might just help some efforts down
the line to help maintain some of these no longer supported televisions or other electronic
systems.
Absolutely. I just really think that itself could be some great precedent. But I think
you also when you just read through the details here, you get the sense that the Conservancy
has played this really savvy, like they've been really smart in how they have maneuvered.
And this could actually be a big win for all of us. And this is great to see because I
think anybody listening to this can just see the obviousness of all of this on its face.
Giant company used free software for a fancy feature they wanted because it would sell
more televisions. But they don't want to follow the rules of the free code. That's just not
how it works. If they don't want to follow the rules, then they should have written the
code from scratch themselves. They didn't want to do that. They want to take advantage
of something that somebody else already created. And now they have to respect the rules of
that license. And that's how it should be. We don't have final decisions here, but we
are in the right direction now.
Sometimes life on the rolling edge can have a few paper cuts. That definitely happened
to Arch users recently, a little tricky transition with pipeline. Now, a little background, Arch
has been shipping pipeline for years now, but there are a few complications. Much like
in the world of Jack, the actual pipeline daemon, it doesn't do any of the connection
logic to route all of your audio. It does the parts where it's interfacing with the
lower level kernel and user space components and talking to your devices. But you need
to tell it where everything should go. The burden of doing that, well, that's on a component
called the session manager. And right now there's kind of two there's the default sort
of baseline testing. Here's an example of how to make a session manager, which is called
pipeline media session. And then there's the new wire plumber, which is the fancier fully
featured scriptable solution that will be the future. Arch had just started attempting
rolling out wire plumber, but ran into a few problems. Yeah, started is right. They did
have to roll it back. It seems like it's kind of one of those snags you do hit in the arch
land. So we want to let you guys know about it this week. If you had a situation where
you decided you still wanted to use pulse audio or also on your arch system, and then
wire plumber comes down as an update. That was causing you some problems sometimes because
it would grab all of the audio input for pipewire because it would just assume that you were
going full pipewire on that box. Yeah, that's kind of the tricky bit here. You know, arch
arch isn't fedora. There's no one decree in that, you know, we're gonna target Wayland,
we're gonna switch everything to pipewire. arch is a lot more all the cart, right? You
got to assemble your system yourself. And well, audio nerds like you and I, Chris, well,
we've been jumping on full pipewire systems, basically, the minute it wouldn't crash our
laptops. But some folks don't really have a problem with pulse audio, or you know, they've
got devices that they have set up, and they don't really need to switch everything out.
Or they just want pipewire to work with the you know, fancy screen recording under Wayland
and all the nice new stuff that pipewire has. So I get it. And that's just the thing about
arch, right? You are on the bleeding edge. And you're kind of sort of building your own
distro at least a little bit. Sometimes that means a little bit of pain. Don't worry, though,
the fix, if you did run into it, it's pretty darn easy. Details and commands in the show
notes.
linode.com slash LAN go there to get $100 in 60 day credit on a new account. And you
go there to support the show. Linode is really the Linux geeks cloud. You know what I mean?
When you're working with a company and you can tell they really get Linux, that's Linode.
And they've got 11 data centers around the world. They've been working hard at making
this the best way to run applications on Linux for nearly 19 years. They've built it up from
the ground up based on customer requests. And it really shows because they have the
best support in the business. Super fast systems. They've just added MVME storage and a great
interface. Plus, they have a bunch of back end features that I personally just use the
crap out of things like s3 compatible object storage, a powerful DNS manager, DDoS protection,
load firewalls, super fast networking. They have infrastructure management support, a
really clean, useful API. I mean, that stuff's just, you know, top of my list that I use
all the time on a daily. But of course, I've been using for like two and a half years.
What really got me though, was the pricing and the performance. That's what got me to
stick around. They're 30 to 50% cheaper than the hyperscalers that want to lock you into
their platforms. And they're just screaming fast. They're just absolutely screaming fast.
We run all of our stuff for the last couple years up there. Go try it out and get $100
while you support the show. Go build a website. Go run something for the back end on your
company. I don't know. Maybe go click something. One boom, click deploy. And you're done. You
got like Nextcloud going. That's how great it is. It's so nice. And you get $100 to play
around and try it out. Just go to lino.com slash lan. Get $100 for 60 days on a new account
and you support the show. lino.com slash lan.
Linux.ting.com and a big thank you to Ting for also sponsoring this here podcast. If
you're sick of overpaying for cell service, if you're ready to save a little bit of money,
go to Ting and see how much you could save and take 25 bucks off of your device or get
$25 in credit. Ting is a mobile virtual network operator that rides on top of the big nationwide
carriers with LTE and 5G, but you're interfacing with Ting, who focuses on customer support,
who focuses on simple plans that are easy to understand and easy to afford. And Ting
Mobile was recently named the number one carrier by Consumer Reports in 2021. Ting's plans are
simple and straightforward and there's no contract. There's really no better way to
do mobile. That's why I've been a customer since 2013. Ting plans started unbelievable
prices and they work great for the individual. They have plans that work great for your family.
If it's time to start giving your kids some mobile service, that's the situation I'm looking
at. Of course I'm going to use Ting. There's just no better way to save money every single
month for me right now than just taking some of these low hanging fruits like my overly
expensive monthlies and replacing them with something that's much better priced. And in
the case of Ting, give me the same service. It's so simple to switch to Ting. Pretty much
any phone's going to work. So just start by going to linux.ting.com. Check your phone,
create an account and pick the plan that's right for you. You'll save 25 bucks when you
go to linux.ting.com.
Listeners of this show know we've been following BKeshFS for years now, always keeping an eye
on where things are at. Well, this week, LWN did a fantastic job at summarizing a recent
progress report from the Linux Storage Summit at the start of May.
This storage summit sounds like it must have been quite the party and Kent Overstreet,
the project creator of BKeshFS gave a talk where we got all kinds of updates, some of
the most details we've gotten in a while, and Overstreet answered some questions from
his fellow developers.
One of the first ones that stood out to us was, what's the use case for BKeshFS exactly?
You know, we've already got a bunch of file systems. I really liked Kent's answer though.
Quote, the answer is everything. What does that mean? Well, his longstanding goal has
been to be, quote, reliable and robust enough to be the XFS replacement.
I mean, think about that. This is a file system with the same snapshot interface as ButterFS
with sub volumes with all kinds of fancy features, but that's also being designed at the same
time to be as robust and reliable as one of our old time favorites. I really want this
to happen.
Yeah, really. I love XFS, used it forever, and I have a lot of hopes that I'll use BKeshFS
in a lot of those places. Like on a Raspberry Pi, this could be killer to have something
like this. And BKeshFS has had a lot of hard work going into it recently. The allocator
was recently rewritten. It's been tested on 50 terabytes storage arrays. There is all
kinds of lessons that are getting at least considered from ButterFS, which I think is
good to see. Overstreet said that the to-do list is always expanding, but the quote, really
big pain points have mostly been dealt with at this point.
Another interesting question that popped up was, is BKeshFS being used in production anywhere?
And Overstreet did note that he definitely didn't have an exhaustive list of which companies
and mostly found out about it with people asked for help or questions on the mailing
list. But he did point out that several video production companies have been using it because
they need to deal with multiple 4K streams for editing multi-camera setups, say. They've
actually been using it for several years now, which is kind of saying something considering
BKeshFS has been developed on a lot and has changed significantly over the last few years.
Apparently, BKeshFS was chosen because it had better performance, but similar features
as ButterFS. And at the time, had some unique features that other file systems couldn't
quite match.
So then the other question was, well, like, what's holding back BKeshFS? Why isn't it
upstream yet? And Overstreet said that he is concerned about the amount of bug reports
that will come in once it's just in the hands of more users. So he wants to make sure that
there's some bigger development projects that just get taken care of, get handled before
it gets to that point. He did point, though, to the documentation coming along pretty well
in the principles of operation document, at least as a starting point for new users, which
might be you out there, probably a lot of us for BKeshFS. So the principles of operations
document will be linked in the show notes. It's up to 25 pages at this point, and it's
organized by features. And it's probably going to get even more details, get a little more
fleshed out soon, too.
One developer wondered, when might the Rust rewrite be happening exactly? And okay, I
kind of assumed that might have just been a joke question. But no, Overstreet said that
there's actually already some user space Rust code in the repo. And as soon as Rust support
lands in the kernel, he's ready to use it, saying, quote, so many little quality of life
improvements in Rust.
It sounds like some other people chimed up and said, you know, there's a few of us waiting
for that Rust support in the kernel. And then Overstreet suggested that, well, if you're
waiting for Rust support, maybe make some noise about that. Let the kernel devs know
there's some of us out here that really want to see this.
Yeah, it almost seems that maybe Rust support and BKeshFS are in something of a little race
to see which lands in the kernel first. And of course, that was one of the big questions
many folks were asking. When is mainlining happening? What's your timetable, Kent? Well,
the answer, he'd like to see it happen within the next six months. And based on recent bug
reports, he actually thinks that is a realistic goal.
You know, six months, I could get behind that. I'd love to see where this goes. Of course,
we'll keep an eye on this and everything else going on in the world of Linux and free software.
So be sure you get every episode by going to linuxactionnews.com slash subscribe for
all the ways to get the new episodes. And linuxactionnews.com slash contact to ask us
all the BKeshFS questions you want. Don't miss episode 458 of Linux Unplugged. We've
got some more details on the NVIDIA GPU drivers that are now free software and an interview
with one of the co-founders of Tailscale, Varian Lightning. As for this show, well,
we'll be back next week with the latest Linux and open source news. Thanks for joining us.
And that's all the news for this week.

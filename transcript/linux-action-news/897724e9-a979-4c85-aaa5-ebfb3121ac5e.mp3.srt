1
00:00:00,000 --> 00:00:16,400
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

2
00:00:16,400 --> 00:00:21,960
This is episode 94, recorded on February 24th, 2019. I'm Chris.

3
00:00:21,960 --> 00:00:22,960
And I'm Joe.

4
00:00:22,960 --> 00:00:27,400
Hello, Joe. Good to be connected with you. We kick things off this week with some great

5
00:00:27,400 --> 00:00:28,880
news out of the KDE camp.

6
00:00:28,880 --> 00:00:34,160
Yeah, they've decided to embrace matrix and add it to their instant messaging infrastructure.

7
00:00:34,160 --> 00:00:37,480
They're going for something modern, but freedom respecting.

8
00:00:37,480 --> 00:00:41,760
I'm really pleased to see this story. So just backing up here for a second to make it clear.

9
00:00:41,760 --> 00:00:45,940
We're talking about the project and how they communicate. I mean, I'm sure we'll see this

10
00:00:45,940 --> 00:00:51,360
influence trickle down into some of the KDE applications. But this is big because communication

11
00:00:51,360 --> 00:00:56,340
is something the project has struggled with. Inside the KDE group, there's different camps

12
00:00:56,340 --> 00:01:01,120
of messaging, you have Telegram, Discord, IRC, different IRC servers and rooms, and

13
00:01:01,120 --> 00:01:05,840
a mixture of all of these, which has led to some complaints in the project about making

14
00:01:05,840 --> 00:01:10,320
it hard to communicate, staying up to date on what everybody's working on, keeping everybody

15
00:01:10,320 --> 00:01:12,580
pulling in the same direction.

16
00:01:12,580 --> 00:01:17,520
This sort of solves that because it introduces bridges to some of these different endpoints.

17
00:01:17,520 --> 00:01:22,900
But it also brings a lot of advanced communication and routing features. Matrix is really nice.

18
00:01:22,900 --> 00:01:27,200
And when you combine it with something like Riot IM, which they will be, you have a lot

19
00:01:27,200 --> 00:01:32,200
of the features of Slack and more. And that's why it's so great to see this because Slack

20
00:01:32,200 --> 00:01:36,920
for some projects is quicker to get started with. It's got a network effect. It's free

21
00:01:36,920 --> 00:01:42,160
for certain types of usage. And it's really tempting because there is for a lot of cases

22
00:01:42,160 --> 00:01:46,840
a workflow improvement. And so the projects are tempted to just hit that button, start

23
00:01:46,840 --> 00:01:51,360
up a Slack, boom, now we're collaborating. Deploying something like your own matrix server

24
00:01:51,360 --> 00:01:57,000
and loading Riot IM on top of that depending on which way you go can be a much larger investment.

25
00:01:57,000 --> 00:02:02,700
But it's open source. So it's an open source project using another open source project

26
00:02:02,700 --> 00:02:08,740
to communicate, which makes both projects better. And it means this stuff isn't locked

27
00:02:08,740 --> 00:02:14,900
up in some proprietary database and some company that's keeping all this stuff for profit reasons,

28
00:02:14,900 --> 00:02:19,360
which they have every right to, but might not mesh with the same goals of a project

29
00:02:19,360 --> 00:02:20,360
like KDE.

30
00:02:20,360 --> 00:02:26,440
Well, that's exactly it. This is decentralized. It's open source. It really fits perfectly

31
00:02:26,440 --> 00:02:32,480
with the KDE ethos. And as for the network effect, I don't think it's a huge issue because

32
00:02:32,480 --> 00:02:39,040
the kind of people who use KDE and the Plasma desktop are the kind of people who care about

33
00:02:39,040 --> 00:02:44,020
software freedom. And so I think they're more likely to use matrix than maybe users of some

34
00:02:44,020 --> 00:02:49,600
other open source software that's maybe a bit more pragmatic. And am I off base there?

35
00:02:49,600 --> 00:02:53,400
Do you think that KDE users tend to be more freedom loving?

36
00:02:53,400 --> 00:02:57,000
I don't even know if it really matters because they certainly will be more inclined to use

37
00:02:57,000 --> 00:03:01,200
matrix now because that's what the project is using. And if they as users want to get

38
00:03:01,200 --> 00:03:05,240
involved with the project, they'll be using matrix. And it creates its own network effect

39
00:03:05,240 --> 00:03:09,280
when a large open source project starts to use this. And this is just more good news

40
00:03:09,280 --> 00:03:14,600
for matrix. That might be the bigger story here is matrix has had a really good year.

41
00:03:14,600 --> 00:03:19,400
They've confirmed that they are the basis for France's secure instant messaging application,

42
00:03:19,400 --> 00:03:24,240
which is huge. Again, they're using like a fork of riot IM to do this. And there was

43
00:03:24,240 --> 00:03:28,280
a FOSDM talk that went into details about it, Joe. I know you probably saw that talk.

44
00:03:28,280 --> 00:03:32,040
And it looks like it's full fledged, like government level implementation that will

45
00:03:32,040 --> 00:03:37,120
have jobs created for contractors and for people doing implementation and IT. It looks

46
00:03:37,120 --> 00:03:39,960
like it's going to have a massive effect for matrix.

47
00:03:39,960 --> 00:03:43,960
Yeah. And the more people use it, the better it's going to get. And to be fair, KDE is

48
00:03:43,960 --> 00:03:48,000
not abandoning the old methods of communication. As you said, there are bridges there and they

49
00:03:48,000 --> 00:03:53,960
will continue to use things like IRC. But hopefully, it's going to push forward matrix

50
00:03:53,960 --> 00:03:59,520
and make some people check out who have never actually done so before. And maybe we can

51
00:03:59,520 --> 00:04:06,200
finally have, in the open source world, a standard way to communicate that is modern

52
00:04:06,200 --> 00:04:11,920
and does support the features that we need that IRC doesn't necessarily. But that isn't

53
00:04:11,920 --> 00:04:15,400
something like Telegram or Slack that is ultimately proprietary.

54
00:04:15,400 --> 00:04:22,920
I remember talking to the project at a conference when they were brand new. And the big thing

55
00:04:22,920 --> 00:04:28,360
they were emphasizing at, I think maybe it was OSCON or I don't remember, but it was

56
00:04:28,360 --> 00:04:33,480
this connection system that they have, these bridges they could do. And it's not just to

57
00:04:33,480 --> 00:04:41,080
like IRC and Telegram, it's to PBX systems and video conferencing systems. It's incredible.

58
00:04:41,080 --> 00:04:44,620
And it handles all of this plumbing for open source projects or for businesses that want

59
00:04:44,620 --> 00:04:49,920
to use it. So when you see government level adoption, and when you see large project scale

60
00:04:49,920 --> 00:04:55,560
adoption, you begin to set a new standard, you begin to set something that is bigger

61
00:04:55,560 --> 00:05:00,080
than it was before. Because as they write on the Matrix blog, we expect this will drive

62
00:05:00,080 --> 00:05:07,680
a lot of effort in the maturing the end-to-end encryption and the Matrix React, iOS and Android

63
00:05:07,680 --> 00:05:09,640
SDKs and applications.

64
00:05:09,640 --> 00:05:16,640
They believe with France's federated network of Matrix server, you're going to see an ecosystem

65
00:05:16,640 --> 00:05:21,600
of businesses around that. That could be, you're starting to see bots that get built

66
00:05:21,600 --> 00:05:26,320
for Slack that get sold for a certain amount, or when businesses want to have a new HIP

67
00:05:26,320 --> 00:05:30,520
friendly interface for modern businesses, they create a Slack interface to their project.

68
00:05:30,520 --> 00:05:33,600
You'll start to see people think a lot more about Matrix for those kinds of things. And

69
00:05:33,600 --> 00:05:36,920
I think that's a pretty necessary component. There's already some momentum there, so I

70
00:05:36,920 --> 00:05:40,720
think this is just going to make it even better. It's a year of Matrix, Joe.

71
00:05:40,720 --> 00:05:45,400
Well, let's hope so. But is it also the year for OnionShare?

72
00:05:45,400 --> 00:05:51,760
Maybe. It wasn't that bad. We tried it out. It's kind of cool. OnionShare is an open source

73
00:05:51,760 --> 00:05:58,440
tool for securely and anonymously sending and receiving files using Tor Onion Services.

74
00:05:58,440 --> 00:06:03,400
Surprise, surprise. It's kind of neat because most of the work is done on the sending side.

75
00:06:03,400 --> 00:06:08,000
So whoever wants to send a file, you install OnionShare. And when you run it, it starts

76
00:06:08,000 --> 00:06:12,760
a local web server directly on your computer, which it then makes itself accessible on the

77
00:06:12,760 --> 00:06:17,880
Tor network. And it would generate a Tor web URL that you can share to somebody. And as

78
00:06:17,880 --> 00:06:22,440
long as they have the Tor browser, they pop that URL into their browser, hit enter, and

79
00:06:22,440 --> 00:06:23,960
they're on my little mini web server.

80
00:06:23,960 --> 00:06:28,440
Yeah, and we've tried this out. And it wasn't the fastest in the world, as you'd expect

81
00:06:28,440 --> 00:06:34,040
over the Tor network. But it worked perfectly well. So no complaints there. And of course,

82
00:06:34,040 --> 00:06:39,160
we're talking about OnionShare 2, which is a major new release with tons of new features.

83
00:06:39,160 --> 00:06:43,120
So it's nice. It's cross platform. It's open source. It's a great way to securely send

84
00:06:43,120 --> 00:06:47,280
files. They write in here about how this could be great for journalists to transfer files

85
00:06:47,280 --> 00:06:53,000
around and whatnot. But the part that was, I think the nice user experience aspect of

86
00:06:53,000 --> 00:06:57,880
this was when Joe downloaded the video I sent, he didn't have to install anything if he already

87
00:06:57,880 --> 00:07:00,560
had a Tor browser, which I assume you probably already did, Joe.

88
00:07:00,560 --> 00:07:05,480
No, I actually just grabbed it. I don't generally use Tor very much because it's so slow. And

89
00:07:05,480 --> 00:07:09,360
I don't really have anything to hide. But it's easy enough. You don't have to actually

90
00:07:09,360 --> 00:07:13,680
install anything. You just download the tar file, extract it, and run the binary. And

91
00:07:13,680 --> 00:07:14,680
boom, just works.

92
00:07:14,680 --> 00:07:18,240
Yeah, and I think there's some snaps of it, too. And there's a browser extension. There's

93
00:07:18,240 --> 00:07:22,000
several ways you can get it pretty quickly if you don't have it. And then you just need

94
00:07:22,000 --> 00:07:26,760
that URL. The fact that it runs a local web server is, yeah, it's a little iffy from a

95
00:07:26,760 --> 00:07:30,960
security standpoint. But you just got to keep it up to date and watch the project. And it

96
00:07:30,960 --> 00:07:35,040
does add that sort of ease of use aspect to it where there's no real software needed on

97
00:07:35,040 --> 00:07:38,120
the other end, which is pretty nice.

98
00:07:38,120 --> 00:07:42,960
And that web server doesn't last very long. As soon as the files are downloaded, it kills

99
00:07:42,960 --> 00:07:47,000
that for you. So it's not like it's running all the time, although you can make it run

100
00:07:47,000 --> 00:07:51,280
all the time if you want to. So you could use this to distribute files to multiple people

101
00:07:51,280 --> 00:07:52,280
at once if you wanted to.

102
00:07:52,280 --> 00:07:55,460
Yeah, and you can watch the transfers as they go out. So you can see what speed they're

103
00:07:55,460 --> 00:07:59,000
going at and what percentage they're at. And you can track them all. And you're right.

104
00:07:59,000 --> 00:08:02,960
By default, once our transfer was done, I think like three minutes after that or whatever

105
00:08:02,960 --> 00:08:07,480
it was, a 90-second timeout or something, it killed the web server. And the URL was

106
00:08:07,480 --> 00:08:11,400
no longer usable. It doesn't have any built-in way to share that URL. So you're going to

107
00:08:11,400 --> 00:08:17,920
need Signal or Wire or Keybase or, I don't know, text message, whatever you want to use

108
00:08:17,920 --> 00:08:19,440
to send that URL around.

109
00:08:19,440 --> 00:08:20,440
Matrix, even.

110
00:08:20,440 --> 00:08:26,680
Yeah, you could use right I am on top of Matrix to send it to your buddies. And then, yeah,

111
00:08:26,680 --> 00:08:30,040
you can download several files or just one. It'll do some compression for you if you put

112
00:08:30,040 --> 00:08:34,080
some uncompressed stuff in there to make it one file on the other end. It does that automatically.

113
00:08:34,080 --> 00:08:40,280
And version 2 is a lot more secure because it generates much longer addresses. And it's

114
00:08:40,280 --> 00:08:46,680
much harder to guess what those are. And if people do try and brute force it, then after

115
00:08:46,680 --> 00:08:54,280
20 goes, it just shuts it down. So it's pretty much unbrute forcible. So maybe secure is

116
00:08:54,280 --> 00:09:00,340
the wrong word. It's all about privacy, isn't it? It's about being anonymous and essentially

117
00:09:00,340 --> 00:09:03,280
hiding the fact that you're sending stuff to people.

118
00:09:03,280 --> 00:09:08,320
Well, if you think about it in a journalism context or perhaps in another country in an

119
00:09:08,320 --> 00:09:13,040
activism context or even here in the States, you could see why privacy could really matter.

120
00:09:13,040 --> 00:09:18,080
That's why I think one of the major new features of version 2 that's pretty slick and really

121
00:09:18,080 --> 00:09:23,320
matters like in that journalism context is it can do essentially private Dropbox mode.

122
00:09:23,320 --> 00:09:27,920
A secure drop, not like Dropbox, the file sync, but like in the journalism context,

123
00:09:27,920 --> 00:09:35,720
like a private secure drop. When you use Onionshare to receive files, you turn it into like a

124
00:09:35,720 --> 00:09:40,680
Tor hidden Dropbox. Think of it like a lightweight version of secure drop that anyone can just

125
00:09:40,680 --> 00:09:45,480
run on their own laptop or on a server instance somewhere on your own desktop without really

126
00:09:45,480 --> 00:09:46,480
having to set anything up.

127
00:09:46,480 --> 00:09:53,480
You just run this app, you get a URL that people can send files to and you start receiving

128
00:09:53,480 --> 00:09:56,920
mode and it'll just sit there waiting to receive a file. Now, obviously there's some security

129
00:09:56,920 --> 00:10:03,080
implications with that, but in certain contexts, that's massively valuable. Imagine if Glenn

130
00:10:03,080 --> 00:10:07,400
Greenwald had this when Edward Snowden was trying to work with him to exchange files.

131
00:10:07,400 --> 00:10:09,080
This would have been a game changer for them.

132
00:10:09,080 --> 00:10:12,840
Yeah, and if you're running it on the desktop, then you need to have that desktop running

133
00:10:12,840 --> 00:10:17,040
all the time, but you can run it headless on a server if you want to, which again could

134
00:10:17,040 --> 00:10:19,520
be very handy for people like Glenn Greenwald.

135
00:10:19,520 --> 00:10:23,680
Well, enough with the dark web. Let's go back over to, I don't know, maybe the commercial

136
00:10:23,680 --> 00:10:28,540
web. At least there's a lot of money to be made in the land of databases or I suppose

137
00:10:28,540 --> 00:10:29,540
potential money.

138
00:10:29,540 --> 00:10:34,840
Well, there's a lot of VC funding. We know that much. Redis Labs have raised $60 million

139
00:10:34,840 --> 00:10:35,840
in VC funding.

140
00:10:35,840 --> 00:10:40,880
Yeah, they raised $146 million now in total, Joe. That's a lot of money. So if you're listening

141
00:10:40,880 --> 00:10:45,000
and not familiar with Redis, you might be wondering why is it worth $146 million potentially?

142
00:10:45,000 --> 00:10:51,320
Well, it's an open source project for essentially an in-memory key store, which is a way to

143
00:10:51,320 --> 00:10:56,480
say a database that's in RAM and really fast and optimized for certain types of database

144
00:10:56,480 --> 00:11:01,240
structures. And those types have worked really great in cloud applications, mobile applications,

145
00:11:01,240 --> 00:11:05,240
when you're trying to pull in a lot of data for a lot of users very fast. And on top of

146
00:11:05,240 --> 00:11:10,000
that, now they're nearly 10 years old. On top of that, they've built Redis Labs, and

147
00:11:10,000 --> 00:11:14,720
they have the Redis Enterprise offerings, which is their commercial product, which has certain

148
00:11:14,720 --> 00:11:18,960
features that make it nice for managing Redis at a certain large scale.

149
00:11:18,960 --> 00:11:24,960
But although the core of Redis is open source, some of the modules that they have for it

150
00:11:24,960 --> 00:11:30,240
aren't. And we talked about this towards the end of last year. They changed the license

151
00:11:30,240 --> 00:11:35,920
to Apache, but added something called the commons clause, which essentially meant that

152
00:11:35,920 --> 00:11:42,520
it was still open source in effect, but you couldn't use it to make money. And then the

153
00:11:42,520 --> 00:11:46,340
community said, well, hang on, that means it's not open source anymore.

154
00:11:46,340 --> 00:11:52,940
Which was a clear move to try to prevent Amazon from, as they saw it, taking their code, running

155
00:11:52,940 --> 00:11:58,240
away with it, and making a super, super profitable product off of their backs and not giving

156
00:11:58,240 --> 00:12:01,680
anything back to them. And this was their move to prevent that in the future.

157
00:12:01,680 --> 00:12:05,880
But this week, they've decided to clarify that license, and they've changed it to what

158
00:12:05,880 --> 00:12:10,680
they're calling the Redis source available license, which to be fair, is a much more

159
00:12:10,680 --> 00:12:13,580
descriptive and much less confusing name.

160
00:12:13,580 --> 00:12:17,240
That's probably the biggest change here, is this name. Instead of calling it Apache 2

161
00:12:17,240 --> 00:12:22,520
modified common clause, which was confusing to everybody, it's just the Redis source available

162
00:12:22,520 --> 00:12:27,840
license now. That's kind of standard terminology for this type of stuff. It's something we've

163
00:12:27,840 --> 00:12:33,160
seen before in this business model, and I think it's a good clarification to be made.

164
00:12:33,160 --> 00:12:39,520
The question you have to ask yourself, though, is to what end? They're taking this in this

165
00:12:39,520 --> 00:12:43,320
strange direction as a company. There's quotes in here, which we'll have linked in the show

166
00:12:43,320 --> 00:12:44,960
notes that you can go read.

167
00:12:44,960 --> 00:12:49,720
Or if you just follow them on Twitter, they clearly see themselves as a victim of large

168
00:12:49,720 --> 00:12:54,780
commercial providers like Amazon who are stealing from them. They write on their website, some

169
00:12:54,780 --> 00:12:59,600
cloud providers have repeatedly taken advantage of successful open source projects without

170
00:12:59,600 --> 00:13:05,000
significant contributions to their communities. They go on to write, they repackage software

171
00:13:05,000 --> 00:13:10,120
that was not developed by them into competitive proprietary service offerings and use their

172
00:13:10,120 --> 00:13:15,720
business leverage to recap substantial revenues from these open source projects. Their new

173
00:13:15,720 --> 00:13:22,400
license was designed to help prevent this, but they treat it as if this is some new battle

174
00:13:22,400 --> 00:13:28,120
that they're fighting. In fact, they declare the open source model no longer functional,

175
00:13:28,120 --> 00:13:33,800
and it must be rethought, they say. Open source is fundamentally flawed in the age of cloud

176
00:13:33,800 --> 00:13:34,800
computing.

177
00:13:34,800 --> 00:13:39,440
And that's scary stuff. MongoDB's kind of said something similar. That's provocative,

178
00:13:39,440 --> 00:13:44,440
but it's also lessons we've learned in the 90s. Apache had this same problem when the

179
00:13:44,440 --> 00:13:50,560
LAMP stack became popular. This isn't a new issue. We've had this problem before, and

180
00:13:50,560 --> 00:13:53,600
it's something that you probably should have been aware of when you chose an open source

181
00:13:53,600 --> 00:13:55,080
license to begin with.

182
00:13:55,080 --> 00:14:00,360
Well, exactly. If you don't have a viable business model with open source, then don't

183
00:14:00,360 --> 00:14:06,840
use open source. You can't pivot halfway through and start making things proprietary because

184
00:14:06,840 --> 00:14:11,600
you're going to have a huge backlash. And I probably shouldn't be saying that don't

185
00:14:11,600 --> 00:14:17,380
use open source, but I think the better way to say it is find a business model that works

186
00:14:17,380 --> 00:14:22,240
with open source. And to have not seen this coming was just short-sighted of them.

187
00:14:22,240 --> 00:14:25,600
And now they're trying to retroactively fix it with a license change so that way they

188
00:14:25,600 --> 00:14:30,180
can go to the VCs and say, well, look, now we've got a handle on our future property.

189
00:14:30,180 --> 00:14:33,580
Our value add, we've got a real handle on that now. It's licensed properly. People have

190
00:14:33,580 --> 00:14:38,560
to come to us. And their business is growing. They say they've got around 8,000 customers

191
00:14:38,560 --> 00:14:44,000
right now that use their hosted services. That's not Amazon scale, even a little tiny

192
00:14:44,000 --> 00:14:47,840
bit, but it's something. It's generating them a nice little bit of cash and they want to

193
00:14:47,840 --> 00:14:51,400
grow that. And so they're going to the VCs and they're saying, well, now that we've re-licensed,

194
00:14:51,400 --> 00:14:57,000
that's all tidied up. We've got that in the can now. And the proposition seems to be in

195
00:14:57,000 --> 00:15:02,080
the future, we're going to invent some stuff for the enterprise side that's so great, they'll

196
00:15:02,080 --> 00:15:07,400
have to use our services. But I would very much doubt that. I would just simply think

197
00:15:07,400 --> 00:15:12,520
that if they created something that added value, Amazon could just replicate it on their

198
00:15:12,520 --> 00:15:16,160
own using their own development team at a much larger scale and integrate it into their

199
00:15:16,160 --> 00:15:21,240
product pipeline. They've now got the base, right? There's no putting the genie back in

200
00:15:21,240 --> 00:15:26,480
the bottle, if you will. The core source code's out there and now they can build value on

201
00:15:26,480 --> 00:15:32,000
top of it forever. Apache fought this same issue in the 90s and Apache decided to double

202
00:15:32,000 --> 00:15:36,440
down into open source and say, well, look, it gets our product out there as a standard.

203
00:15:36,440 --> 00:15:43,280
Now Apache is a platform. There's a lamp stack now and it furthers open source. So there

204
00:15:43,280 --> 00:15:48,320
is a net win for Apache in that direction and there's a net win by Apache becoming the

205
00:15:48,320 --> 00:15:54,080
standard. And nobody's walking around with Apache money buying Teslas here and there,

206
00:15:54,080 --> 00:15:59,320
but it was the right way to handle this because of the license they used. And Redis is treating

207
00:15:59,320 --> 00:16:04,240
this as if open source has gone bankrupt and Amazon's running away with the source code,

208
00:16:04,240 --> 00:16:08,680
as if no one's ever done that before. Yeah. So really it boils down to they should have

209
00:16:08,680 --> 00:16:14,160
done the foundation route rather than making Redis Labs a commercial entity because there's

210
00:16:14,160 --> 00:16:19,240
not really that much money to be made that way. If you're a foundation that doesn't have

211
00:16:19,240 --> 00:16:25,000
to chase growth and revenue, you can just concentrate on making a good open source product

212
00:16:25,000 --> 00:16:30,200
and the finances will just sort of work themselves out. And as you say, no one gets rich, but

213
00:16:30,200 --> 00:16:34,960
it is sustainable. Yeah. Who's to say? Maybe they can pull off a competitive commercial

214
00:16:34,960 --> 00:16:39,440
offering. I mean, they are the creators of the software. If anybody could compete, it

215
00:16:39,440 --> 00:16:45,200
should be them. So perhaps Redis Labs will pull something out here and in a couple of

216
00:16:45,200 --> 00:16:49,760
years they'll have tens of thousands of customers using their hosted solution and they'll still

217
00:16:49,760 --> 00:16:54,640
be a good core open source application for us all to use. That could very well happen.

218
00:16:54,640 --> 00:17:00,040
We'll see. But I do think it feels a little disingenuous to say that open source is fundamentally

219
00:17:00,040 --> 00:17:04,400
flawed and that the cloud is ruining open source. The cloud is powered by open source.

220
00:17:04,400 --> 00:17:09,320
Yeah. Well, we wouldn't have had the cloud without open source probably. And for it to

221
00:17:09,320 --> 00:17:15,400
kill it just seems a bit of rigging the pudding to me. I think that it might kill certain

222
00:17:15,400 --> 00:17:20,320
business models like Redis Labs, but I think ultimately open source will be fine.

223
00:17:20,320 --> 00:17:25,800
New technology waves often do that. They disrupt one business model and new ones emerge. Just

224
00:17:25,800 --> 00:17:29,760
ask the news industry. But that doesn't mean the cloud won't always be powered by open

225
00:17:29,760 --> 00:17:35,080
source and Linux in some form or another. The business models around it will continue

226
00:17:35,080 --> 00:17:42,120
to change as the industry changes, but that GPL cancer, that's not going anywhere. Maybe

227
00:17:42,120 --> 00:17:44,680
the cloud will be powered by ARM processors soon, Joe.

228
00:17:44,680 --> 00:17:48,740
Yeah, that's the question. Is this finally going to happen? How long have we been talking

229
00:17:48,740 --> 00:17:55,320
about ARM in the data center and it just doesn't ever seem to fully take off. But now ARM have

230
00:17:55,320 --> 00:18:01,440
announced Neoverse processors that they're at least claiming are going to disrupt the

231
00:18:01,440 --> 00:18:06,440
x86 side of things. And we are finally going to get these ARM data centers that we've been

232
00:18:06,440 --> 00:18:07,440
long promised.

233
00:18:07,440 --> 00:18:12,800
Here they come. Yeah. ARM claims the design provides as much as 2.5 times more processing

234
00:18:12,800 --> 00:18:18,120
power for certain server workloads than previous ARM architectures. And they say moreover,

235
00:18:18,120 --> 00:18:25,160
it's 60% speedier when assessed by how fast it processes integers, which are a basic unit

236
00:18:25,160 --> 00:18:32,860
of data. They also hype the artificial intelligence support. I don't doubt that ARM CPUs are going

237
00:18:32,860 --> 00:18:39,320
to see a continued adoption of the data center, especially on the edge devices. Absolutely.

238
00:18:39,320 --> 00:18:44,740
Accelerators, purpose built devices. Clearly, I think ARM is going to probably see a ton

239
00:18:44,740 --> 00:18:51,760
of success there. New telco equipment. Absolutely. ARM based. I can clearly, clearly see that.

240
00:18:51,760 --> 00:18:56,360
That seems obvious to me. But I'm on board with Linus on this one. Anything that's going

241
00:18:56,360 --> 00:19:00,680
to be in the application stack, anything that lives in layer seven, that's going to be running

242
00:19:00,680 --> 00:19:03,800
on x86 processors for a very long time.

243
00:19:03,800 --> 00:19:09,560
Yeah, that's what everyone's talking about. This email thread where Linus has basically

244
00:19:09,560 --> 00:19:16,960
said, nah, this is not going to happen. They're not mature enough. It can't compete with x86.

245
00:19:16,960 --> 00:19:23,320
And the fundamental reason that he said is, people are developing on x86 workstations,

246
00:19:23,320 --> 00:19:29,960
and they want to deploy to x86 servers, which is a very valid point. People don't want to

247
00:19:29,960 --> 00:19:35,980
have to deploy to a different architecture, because you're inevitably going to find various

248
00:19:35,980 --> 00:19:39,240
bugs that are on one architecture, but not on the other.

249
00:19:39,240 --> 00:19:44,520
And look how slow enterprise is to adopt changes like these large scale enterprise applications.

250
00:19:44,520 --> 00:19:49,080
You know, there's still systems running on Windows 7 and Windows XP, because it runs

251
00:19:49,080 --> 00:19:56,260
along just fine, and that business class application needs that operating system. It's a slow moving,

252
00:19:56,260 --> 00:20:00,080
very slow moving industry when it comes to software. And I think he nailed it when he

253
00:20:00,080 --> 00:20:06,800
said as long as people will have to cross build for x86 and ARM at the same time, it's

254
00:20:06,800 --> 00:20:10,160
just not going to be that great. Like you have to get to a point where it's the only

255
00:20:10,160 --> 00:20:14,080
platform people are developing for, for the software to get really great and to be really

256
00:20:14,080 --> 00:20:19,160
good server grade at that higher level where you're creating user applications.

257
00:20:19,160 --> 00:20:24,360
But the thing is, we know that all developers use MacBooks, right? Even if it's in secret.

258
00:20:24,360 --> 00:20:29,840
And it looks like Apple are going to switch to ARM very soon. They proved with the iPad

259
00:20:29,840 --> 00:20:38,440
Pro that they can have desktop class performance with an ARM device. And so there are strong

260
00:20:38,440 --> 00:20:45,320
rumors that in the next year or two, Apple will be shipping at least some machines that

261
00:20:45,320 --> 00:20:47,280
are completely ARM based.

262
00:20:47,280 --> 00:20:52,680
You're referring to some reporting that was out of Axios this week that was citing, quote,

263
00:20:52,680 --> 00:20:58,200
developers and Intel officials that were familiar with the matter. And I guess on Intel's roadmap,

264
00:20:58,200 --> 00:21:03,720
they are planning for Apple to transition to ARM by like, yeah, 2020, 2021, something

265
00:21:03,720 --> 00:21:11,640
like that. That seems like it would be a pretty big mistake for that developer market that

266
00:21:11,640 --> 00:21:17,860
bought a lot of MacBooks so that way they could have a system that could run their proprietary

267
00:21:17,860 --> 00:21:20,680
applications or whatever it is they wanted, but then they could click a button and have

268
00:21:20,680 --> 00:21:26,440
the bash terminal and have access to some of the standard Unix user land applications.

269
00:21:26,440 --> 00:21:31,100
That was a huge selling point for the MacBook. And I watched conferences, I just watched

270
00:21:31,100 --> 00:21:35,320
it take off like wildfire year after year. You go to several, you go to several a year

271
00:21:35,320 --> 00:21:38,720
and at every event there'd be more MacBooks. We talk about it on the shows, we'd be like,

272
00:21:38,720 --> 00:21:43,800
there's so many MacBooks now. And it was clear what they were doing. They were SSHing into

273
00:21:43,800 --> 00:21:49,560
Linux boxes. And I think a big part of it was they could do some of that local development

274
00:21:49,560 --> 00:21:53,760
right there. They could install Ruby, they could install Pearl or Python and do development

275
00:21:53,760 --> 00:21:58,080
right there in a terminal and then upload it to their cloud instance or whatever it

276
00:21:58,080 --> 00:22:03,760
might be. And it just seems like you lose a huge part of that value if it's not x86.

277
00:22:03,760 --> 00:22:10,280
I might be wrong, but it would seem like that to me. And I think I just, I completely agree

278
00:22:10,280 --> 00:22:14,740
with Linus's point and I'll link it in the show notes so that way you guys can read it.

279
00:22:14,740 --> 00:22:18,680
I think it's very, it's just a compelling point. Like that's why x86 took over the server

280
00:22:18,680 --> 00:22:23,640
market to begin with. When I got into IT, there were alpha processors and risks processors

281
00:22:23,640 --> 00:22:31,480
and x86 processors and power PC processors. And it basically all went away except for

282
00:22:31,480 --> 00:22:37,880
x86. And it in a huge part was because of Windows. Because developers were writing on

283
00:22:37,880 --> 00:22:41,800
Windows on their x86 PCs. And that's why.

284
00:22:41,800 --> 00:22:47,240
However, where Apple leads, the rest of the industry generally follows. And so we might

285
00:22:47,240 --> 00:22:53,240
end up seeing ThinkPads with ARM processors in them. It might just become the standard.

286
00:22:53,240 --> 00:22:58,520
I'm not saying that it's going to happen this year or maybe even in 2020, but within the

287
00:22:58,520 --> 00:23:04,480
next five years, ARM processors could catch up and we could get enough performance, not

288
00:23:04,480 --> 00:23:09,440
to mention the incredible battery life that we get as a result of that. And it might be

289
00:23:09,440 --> 00:23:10,600
that they take over.

290
00:23:10,600 --> 00:23:16,800
I do tend to agree. If you zoom out the timeline enough, you kind of do think it has a bigger

291
00:23:16,800 --> 00:23:21,280
possibility of working out. And Apple makes their own chips in house. So they'd be a pretty

292
00:23:21,280 --> 00:23:26,080
key vendor to switch over their desktop or laptop line. Maybe just be a few machines

293
00:23:26,080 --> 00:23:30,120
or one machine at first. And they could just throw a few of their A series processors in

294
00:23:30,120 --> 00:23:33,920
there like they do in the iPad. Just throw six of them in there.

295
00:23:33,920 --> 00:23:39,120
I mean, maybe. And maybe that takes off and the PC vendors do it. And all of a sudden

296
00:23:39,120 --> 00:23:42,720
you got a bunch of people that are writing software on ARM CPUs. And so the server market

297
00:23:42,720 --> 00:23:46,680
makes a transition. I've always thought ARM would be successful in the data center as

298
00:23:46,680 --> 00:23:51,480
we break things off into more purpose-built appliance hardware, which is a super common

299
00:23:51,480 --> 00:23:55,060
trend in the data center. There's so many appliances and accelerators for different

300
00:23:55,060 --> 00:24:00,220
things now. And why wouldn't you start with a pretty competitive CPU platform that has

301
00:24:00,220 --> 00:24:04,200
lower power usage and produces less heat? It's just obvious. And there's just going

302
00:24:04,200 --> 00:24:10,020
to be more and more of that. So maybe there'll be parity in a five to 10 year time period.

303
00:24:10,020 --> 00:24:16,640
It could be before that. I saw a poppy tweeting about wanting to test snaps on ARM this week

304
00:24:16,640 --> 00:24:23,200
week. So it's something that obviously is on Canonical Employees Radar, Linux on ARM.

305
00:24:23,200 --> 00:24:28,720
And we've had the Raspberry Pis and hacker boards and everything. But maybe the tide

306
00:24:28,720 --> 00:24:35,440
is starting to turn and we might end up in an ARM world on our workstations and servers

307
00:24:35,440 --> 00:24:37,080
before we thought we would.

308
00:24:37,080 --> 00:24:40,920
I'd be willing to give it a go. I have nothing necessarily against it. The Wine Project's

309
00:24:40,920 --> 00:24:47,360
investing time into it. Their hangover 0.4 alpha release came out, which is a project

310
00:24:47,360 --> 00:24:57,080
for running wine applications, x86 and even 64-bit wine applications on 64-bit ARM CPUs.

311
00:24:57,080 --> 00:25:02,000
So they're doing not only the Windows API translation, but under the hood, they're taking

312
00:25:02,000 --> 00:25:08,880
QMU and they're virtualizing x86 components to run that Windows application on a Linux

313
00:25:08,880 --> 00:25:10,480
box with an ARM CPU.

314
00:25:10,480 --> 00:25:16,360
So just last week we were talking about those cheap Windows laptops that are ARM based and

315
00:25:16,360 --> 00:25:20,440
the struggle to get Linux running on them and how, okay, it's not quite there yet, but

316
00:25:20,440 --> 00:25:25,640
it is happening. And it's great to see that the wine developers are keeping a pace with

317
00:25:25,640 --> 00:25:31,080
this. It's very early days and things aren't working very well, but it's not something

318
00:25:31,080 --> 00:25:34,800
that they're ignoring. And so it is great to see that you might end up being able to

319
00:25:34,800 --> 00:25:39,040
play Windows games on Linux on ARM machines.

320
00:25:39,040 --> 00:25:43,320
It's going to take a lot of ARM processors or they're going to have to get a lot faster

321
00:25:43,320 --> 00:25:48,680
because right now, as you would imagine, there is, as they put it, a quote unquote cost due

322
00:25:48,680 --> 00:25:57,320
to emulating the whole x86 or x86-64 architecture. And as their documentation states, quote,

323
00:25:57,320 --> 00:26:06,100
don't expect this to be fast. So it's got some work, but I wonder if that old trucks

324
00:26:06,100 --> 00:26:11,360
versus cars analogy that got applied to tablets and PCs a lot, I wonder if that might be updated

325
00:26:11,360 --> 00:26:16,620
in the near future where the x86 systems are your trucks and your cars, just your daily

326
00:26:16,620 --> 00:26:19,200
drivers are ARM based systems.

327
00:26:19,200 --> 00:26:23,760
Yeah, or maybe a more apt analogy would be like a scooter or something. One of those

328
00:26:23,760 --> 00:26:28,440
electric scooters that you can get with the apps on your phone.

329
00:26:28,440 --> 00:26:33,040
Well, if it develops, Joe, you know what? If we see it developed into something, we'll

330
00:26:33,040 --> 00:26:36,120
cover it right here on the show. Well, that and all of the other things that matter in

331
00:26:36,120 --> 00:26:40,520
Linux and the open source world, go to linuxactionnews.com slash subscribe for all the ways to get new

332
00:26:40,520 --> 00:26:41,520
episodes.

333
00:26:41,520 --> 00:26:44,960
And go to linuxactionnews.com slash contact for ways to get in touch with us.

334
00:26:44,960 --> 00:26:48,600
Yeah, I'd love to hear from you. If you think ARM is going to take over the data center,

335
00:26:48,600 --> 00:26:54,400
go read the link for Linus's post and then go to their contact page and make your case.

336
00:26:54,400 --> 00:26:59,240
Also, if you are a full stack Ruby on Rails developer, Linux Academy is hiring a full

337
00:26:59,240 --> 00:27:04,400
time remote position. Go to linuxacademy.com slash careers, or we'll have a link at the

338
00:27:04,400 --> 00:27:07,480
bottom of the show notes in this episode if you'd like to apply.

339
00:27:07,480 --> 00:27:11,760
We're also doing another freebie study group after Linux Unplugged on March 5th. It's about

340
00:27:11,760 --> 00:27:16,800
Linux system fundamentals and some history. Go to meetup.com slash Jupiter Broadcasting

341
00:27:16,800 --> 00:27:20,920
for more details on when and how to participate and all that kind of stuff.

342
00:27:20,920 --> 00:27:24,600
We'll be back next Monday with our weekly take on the latest Linux and open source news.

343
00:27:24,600 --> 00:27:26,360
I'm at Chris LAS.

344
00:27:26,360 --> 00:27:27,960
I'm at Joe Ressington.

345
00:27:27,960 --> 00:27:30,600
Thank you for joining us and we will see you next week.

346
00:27:30,600 --> 00:27:59,960
See you later.


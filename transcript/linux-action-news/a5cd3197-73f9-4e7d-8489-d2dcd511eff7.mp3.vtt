WEBVTT

00:00.000 --> 00:08.320
Hello and welcome to Linux Action News, episode 204, recorded on August 28th, 2021.

00:08.320 --> 00:09.320
I'm Chris.

00:09.320 --> 00:10.320
And I'm Wes.

00:10.320 --> 00:12.880
Hello, Wes from Albuquerque, New Mexico.

00:12.880 --> 00:13.880
Let's do the news.

00:13.880 --> 00:16.640
We start this week with the Linux kernel.

00:16.640 --> 00:22.760
With releases becoming more and more anticipated in recent years, 5.14 has seen a considerable

00:22.760 --> 00:27.400
amount of attention, in part because much of the focus this time around has been on

00:27.400 --> 00:29.560
security and performance improvements.

00:29.560 --> 00:33.760
Yeah, you're right about that, Wes, there does seem to be more hype building with each

00:33.760 --> 00:34.760
release.

00:34.760 --> 00:38.760
And the kernel team has been pretty good about releasing every nine to 10 weeks.

00:38.760 --> 00:43.720
But I feel like 5.14 is getting a little extra attention for a good reason because this release

00:43.720 --> 00:47.360
cycle features that new core scheduling functionality that's been in the works for the past few

00:47.360 --> 00:52.000
years by multiple vendors with the aim of securing symmetric multithreaded systems and

00:52.000 --> 00:56.000
help mitigate processor level vulnerabilities like Spectre and Meltdown.

00:56.000 --> 00:59.920
Now just to put this in perspective, this feature alone, and there's a bunch in 5.14,

00:59.920 --> 01:03.380
but this feature alone, the core scheduling functionality, is enough that it caught the

01:03.380 --> 01:07.600
attention of Sean Michael Kerner over at TechCrunch who wrote up a rather lengthy article for

01:07.600 --> 01:11.200
their general tech audience about a new Linux kernel release.

01:11.200 --> 01:15.120
Unexpected indeed, but I can understand it.

01:15.120 --> 01:18.200
This one feature alone is kind of a big deal.

01:18.200 --> 01:23.800
That thousand foot view is that the new functionality of core scheduling is trying to limit things

01:23.800 --> 01:30.120
so that an untrusted task can't run on the same CPU core as a trusted task.

01:30.120 --> 01:34.920
And that kind of thing is rather important if you're a large public cloud who wants to

01:34.920 --> 01:40.440
keep hyperthreading enabled so you can sell all those virtual CPUs.

01:40.440 --> 01:45.720
Another area of security innovation in Linux 5.14 is a feature that's been in development

01:45.720 --> 01:51.440
for over a year and a half and that should help protect system memory in a far better

01:51.440 --> 01:53.760
way than before.

01:53.760 --> 01:58.400
Now you may already know that attacks against Linux, and other operating systems, often

01:58.400 --> 02:02.400
target memory as a primary attack surface to exploit.

02:02.400 --> 02:08.120
But with this new kernel, there's now a new capability known as MemFD Secret, which will

02:08.120 --> 02:13.700
enable an application running on a Linux system to create a memory range that is inaccessible

02:13.700 --> 02:31.560
to anyone else, I mean, we mean anyone here, including the kernel.

02:31.560 --> 02:52.880
And finally, after what seems like years, Dell's hardware privacy laptop features, which

02:52.880 --> 02:56.840
I think is like some setting for the screen or something, is finally in there after what

02:56.840 --> 03:00.120
seems like a decade of them developing it.

03:00.120 --> 03:03.040
So if you have one of those Dell laptops or you're thinking about one now, you're going

03:03.040 --> 03:05.480
to have mainline kernel support for that as well.

03:05.480 --> 03:06.800
There's just a ton of stuff in this one.

03:06.800 --> 03:10.400
We'll have a link with all of the details in the show notes, of course.

03:10.400 --> 03:15.280
Now we just have to wait back and see when this ships in a Linux distro near us.

03:15.280 --> 03:20.240
Fedora and OpenSUSE have said they're already making plans.

03:20.240 --> 03:24.640
The notable and loved QEMU project had a new release this week.

03:24.640 --> 03:28.840
QEMU, if you don't know, is an open source machine emulator and virtualizer.

03:28.840 --> 03:35.040
X86 and 6.1 landed and it sees a lot of new and improved work for emulated device support.

03:35.040 --> 03:40.040
But what we love to see is specific work was put into PowerPC, including extending the

03:40.040 --> 03:44.520
number of CPU cores and RISC-V.

03:44.520 --> 03:48.760
And of course, like every great release, there is new features for X86 that landed.

03:48.760 --> 03:54.520
So don't worry, X86 is still getting tons of support and they got to clean up, you know.

03:54.520 --> 03:56.280
Every release, they got to do some cleanup.

03:56.280 --> 04:00.840
This time, they got rid of some old CPU targets like the Moxie CPU.

04:00.840 --> 04:01.840
Never heard of it.

04:01.840 --> 04:02.840
Sorry.

04:02.840 --> 04:03.880
Sorry for you Moxie users.

04:03.880 --> 04:08.840
And Unicore32, which when I first read, I thought was Unicorn32 and I actually felt

04:08.840 --> 04:09.840
bad.

04:09.840 --> 04:10.840
But then I saw it was just Unicore32.

04:10.840 --> 04:11.840
That sounds lame.

04:11.840 --> 04:14.800
So of course, they removed support for that.

04:14.800 --> 04:18.320
And as always, every release sees some bug fixes.

04:18.320 --> 04:23.480
One of my favorite recent projects has another great update.

04:23.480 --> 04:32.040
CompWire 0.3.34 is out and maintains compatibility with the previous 0.3.x releases.

04:32.040 --> 04:38.520
I think the notable highlights for this release has got to include Bluetooth battery status

04:38.520 --> 04:45.080
support for headset profiles, including support for Apple extensions.

04:45.080 --> 04:52.400
Good news for you AirPod users, you can now get battery status info on your Linux desktop.

04:52.400 --> 04:58.240
They've also added fast stream codec support amongst a whole bunch of other new features

04:58.240 --> 04:59.800
and bug fixes.

04:59.800 --> 05:04.520
And just a general note of perhaps some things to come in the not too distant future, CodeWeavers,

05:04.520 --> 05:09.360
the longtime supporters and developers of wine have another job opening for a quote,

05:09.360 --> 05:14.520
general wine developer, who will obviously work on Proton and wine.

05:14.520 --> 05:18.360
And we wanted to mention this because when CodeWeavers makes a hire like this, well,

05:18.360 --> 05:20.480
the community tends to see big results upstream.

05:20.480 --> 05:21.720
Yeah, no kidding.

05:21.720 --> 05:26.680
I mean, Valve hired CodeWeavers to build the wine compatibility layer into the Steam client

05:26.680 --> 05:34.000
for Linux, which is what we now call Proton, and that has had a huge effect on Linux gaming.

05:34.000 --> 05:39.100
And really, this is how the hard work in free software often gets done.

05:39.100 --> 05:45.060
Now if you think this might be a job for you, you'll need strong C skills, familiarity with

05:45.060 --> 05:51.920
developing on Linux, and of course, zero exposure to that evil Microsoft code base.

05:51.920 --> 05:55.000
If that sounds right, consider applying.

05:55.000 --> 05:59.120
CodeWeavers says the position can be done remotely, or if you'd like, join them in their

05:59.120 --> 06:02.520
Minnesota office.

06:02.520 --> 06:06.440
We recently talked about Microsoft, Google and others partnering up with the Linux Foundation

06:06.440 --> 06:13.280
to bring eBPF, the new and very exciting Linux kernel technology to other platforms.

06:13.280 --> 06:16.080
So this week, the first eBPF Summit kicked off.

06:16.080 --> 06:17.080
All right.

06:17.080 --> 06:24.080
So there is no better way but to start off eBPF Summit and with fantastic news.

06:24.080 --> 06:28.200
Last week, we announced the formation of the eBPF Foundation.

06:28.200 --> 06:34.320
Facebook, Google, iSurveillance, Microsoft and Netflix, we've all come together as founding

06:34.320 --> 06:37.460
members to create the eBPF Foundation.

06:37.460 --> 06:42.100
It is part of the Linux Foundation and will enable even better collaboration between the

06:42.100 --> 06:50.380
various eBPF projects and also ensure eBPF itself can grow and expand to additional platforms.

06:50.380 --> 06:54.540
An example of this is the expansion to the Windows kernel, which we'll hear more about

06:54.540 --> 06:57.480
in one of the talks later on.

06:57.480 --> 07:04.200
Commercial interest in eBPF, often just called BPF, seems extremely high.

07:04.200 --> 07:09.020
Corporations and open source projects from across the entire spectrum of the industry

07:09.020 --> 07:14.760
attended this summit, from the Rust community to giant corporations like Apple.

07:14.760 --> 07:15.760
They're all in.

07:15.760 --> 07:21.760
Before we do that, however, I'd like to discuss why the Linux kernel team at Apple loves BPF.

07:21.760 --> 07:26.080
There are inherent risks with running kernel modules that run third party code in the Linux

07:26.080 --> 07:27.080
kernel.

07:27.080 --> 07:31.640
Kernel modules have full access to all kernel data structures and kernel functions.

07:31.640 --> 07:37.840
BPF programs, on the other hand, are limited to the BPF virtual machine, BPF helper functions,

07:37.840 --> 07:40.960
and are verified by the in-kernel BPF verifier.

07:40.960 --> 07:47.360
This makes them easier to audit and greatly reduces the impact of bugs and vulnerabilities.

07:47.360 --> 07:54.000
We also love that BPF programs reduce our usage of heavy, out-of-tree kernel bypass

07:54.000 --> 07:59.560
frameworks, large modules, and modules that are running third party code that we have

07:59.560 --> 08:00.920
to audit.

08:00.920 --> 08:07.400
We also love that we can reduce these modules into small BPF programs that are dedicated

08:07.400 --> 08:11.960
to a certain type of processing, such as XP programs for packet processing, probes and

08:11.960 --> 08:17.720
trace points for event tracing, and socket filters for filtering network traffic.

08:17.720 --> 08:21.560
Watching a lot of the introductions of these talks, the excitement around the technology

08:21.560 --> 08:22.560
is palatable.

08:22.560 --> 08:25.920
I mean, you can just like, it's almost, if we had smell-o-vision, you could smell the

08:25.920 --> 08:27.340
excitement coming off of them.

08:27.340 --> 08:32.640
The presenters are just totally stoked about what they can do with BPF and the troubles

08:32.640 --> 08:34.240
it's going to save them.

08:34.240 --> 08:39.200
However, I can't help but watch this and feel like what we are seeing here is institutionalized

08:39.200 --> 08:43.080
harvesting of innovation in Linux and open source.

08:43.080 --> 08:47.440
Because other, you know, other projects have done BPF before too, but it seems like industrialized

08:47.440 --> 08:51.840
harvesting of innovation that is then funneled through the Linux Foundation and their paying

08:51.840 --> 08:55.000
partners into commercial products.

08:55.000 --> 08:59.920
And I worry that this is being done now at a scale that is beyond anything the original

08:59.920 --> 09:02.080
vision of free software ever considered.

09:02.080 --> 09:05.520
Yeah, I'm kind of of two minds on this.

09:05.520 --> 09:10.920
On one side, it seems like this is the natural course of, if eBPF shows itself to be a very

09:10.920 --> 09:15.920
useful technology in a whole range of domains, it makes sense that if it's open source and

09:15.920 --> 09:20.200
people can use it or learn from it or take it as an example, of course they're going

09:20.200 --> 09:21.240
to do that.

09:21.240 --> 09:25.800
But what kind of rubs me the wrong way is we don't get to do this in the Linux community

09:25.800 --> 09:27.440
from, say, the Windows kernel.

09:27.440 --> 09:31.840
They've got some neat ideas there too, but we don't get to take from their basket.

09:31.840 --> 09:32.880
You might've just nailed it.

09:32.880 --> 09:34.240
What was bothering me about this?

09:34.240 --> 09:38.220
Because I recognize and I totally appreciate, you know, it's free software and if they comply

09:38.220 --> 09:41.320
with the license, they can do what they want with it.

09:41.320 --> 09:43.800
That's the name of the game, that's the deal, et cetera, et cetera.

09:43.800 --> 09:46.800
But you're right, there's an unbalanced unfairness to it.

09:46.800 --> 09:51.120
And there's also sort of this legitimacy that the Linux Foundation gives to the process

09:51.120 --> 09:55.360
by being such a generous donor to the Linux Foundation.

09:55.360 --> 09:58.200
You know, they get these perks that we don't really talk about very often.

09:58.200 --> 10:04.840
But it seems like honestly, if just eBPF came over to the Windows kernel and that was it,

10:04.840 --> 10:09.120
and Microsoft does give a talk on that, that we'll have linked in the show notes.

10:09.120 --> 10:12.540
If that was it, that would be worth the thousands of dollars of membership they've paid.

10:12.540 --> 10:17.160
Just that one set of features alone added to their operating system make any penny,

10:17.160 --> 10:20.820
any dime they've ever spent with the Linux Foundation totally valuable and worth it.

10:20.820 --> 10:27.920
And I just see this as kind of like an industrialized farming of free software innovations.

10:27.920 --> 10:34.000
And I worry that if we're constantly robbing Peter to pay Paul, eventually the open source

10:34.000 --> 10:37.400
ecosystem that's generating all these innovations will suffer.

10:37.400 --> 10:39.800
And it just doesn't seem sustainable.

10:39.800 --> 10:43.860
And I know it's not as bad as a picture as I'm painting, but there's something about

10:43.860 --> 10:48.760
watching this happen with eBPF where we've watched this project from birth to now this

10:48.760 --> 10:51.120
stage that is rubbing me the wrong way.

10:51.120 --> 10:54.000
And I think you got pretty close to nailing what it is.

10:54.000 --> 10:59.940
First containers, now eBPF, something tells me this won't be the last innovative Linux

10:59.940 --> 11:04.000
kernel feature that jumps ship.

11:04.000 --> 11:05.400
Linode.com slash LAN.

11:05.400 --> 11:10.000
Go there to get $100 in 60 day credit on a new account and you go there to support the

11:10.000 --> 11:11.000
show.

11:11.000 --> 11:14.360
This show is made possible by you taking advantage of our sponsors offered.

11:14.360 --> 11:17.240
Linode is one that we enthusiastically endorse because we use it.

11:17.240 --> 11:20.640
We've been using Linode for two and a half years and really just about everything we've

11:20.640 --> 11:25.920
built has just gone right on Linode and that's because they got the mix right.

11:25.920 --> 11:30.440
Good performance, 11 data centers around the world, a straightforward dashboard, a powerful

11:30.440 --> 11:35.600
DNS manager, and you know, of course, like some really fast systems to choose from.

11:35.600 --> 11:40.740
They have dedicated CPU systems with AMD epic processors, crazy fast native SSDs, 40 gigabit

11:40.740 --> 11:42.560
connections coming into them hypervisors.

11:42.560 --> 11:43.880
I mean, it's fast.

11:43.880 --> 11:47.980
And then we also use their S3 object storage a whole bunch for all kinds of different applications.

11:47.980 --> 11:53.040
I had a chance to work side by side with some from the Linode team and I realized not that

11:53.040 --> 11:57.480
I was totally eye spying their screens or anything, but I totally noticed that they

11:57.480 --> 12:01.680
were using next cloud on Linode and they I asked them about it and they said yes, they

12:01.680 --> 12:05.380
are also using their S3 compatible object storage.

12:05.380 --> 12:11.120
That is such a killer combo and I can say that it works next cloud on Linode using their

12:11.120 --> 12:15.220
object storage as the back end storage mechanism for next cloud.

12:15.220 --> 12:16.220
It's fireman.

12:16.220 --> 12:20.520
We've been using it for just over a year now and it's rocking and we use it every day in

12:20.520 --> 12:21.520
production.

12:21.520 --> 12:22.520
We're transferring files around.

12:22.520 --> 12:26.540
Man, have we been using the crap out of it on this road trip.

12:26.540 --> 12:30.120
So they've just got so many great features and so many great arrangements of software

12:30.120 --> 12:31.120
and hardware.

12:31.120 --> 12:34.760
You can do one click deployments in their marketplace and get an entire setup going

12:34.760 --> 12:35.760
in just a few minutes.

12:35.760 --> 12:38.780
And if you just need something like a five dollar a month rig because maybe you just

12:38.780 --> 12:41.560
want to do like an SSH jump post and a sync thing box.

12:41.560 --> 12:43.200
I use a five dollar machine for that.

12:43.200 --> 12:44.200
It's great.

12:44.200 --> 12:48.760
Honestly, their pricing is just fantastic, 30 to 50 percent cheaper than other major

12:48.760 --> 12:49.760
cloud providers.

12:49.760 --> 12:53.860
There's really a lot to check out and you'll see that Linode's community support runs deep

12:53.860 --> 12:55.880
when you go over there and you check out their social media.

12:55.880 --> 12:58.100
So I just like you to go take it all in.

12:58.100 --> 13:01.960
Go take advantage of that one hundred dollars, 60 day credit on your new account and you

13:01.960 --> 13:02.960
support the show.

13:02.960 --> 13:03.960
You keep Linux action news going.

13:03.960 --> 13:08.600
So you go to linode.com slash LAN, get one hundred dollars and 60 day credit and support

13:08.600 --> 13:09.600
the show.

13:09.600 --> 13:13.480
That's linode.com slash LAN.

13:13.480 --> 13:14.600
Linux dot ting dot com.

13:14.600 --> 13:18.520
If you're sick of overpaying for cell service and who wouldn't be, go see how much you could

13:18.520 --> 13:22.940
save and then take twenty five bucks off of that and you support this year's show.

13:22.940 --> 13:24.960
Linux dot ting dot com.

13:24.960 --> 13:25.960
Here's the deal.

13:25.960 --> 13:29.960
Ting is an MVNO or a mobile virtual network operator and I have been a customer since

13:29.960 --> 13:31.280
2013.

13:31.280 --> 13:37.240
So I know to my core what that means is I get the same networks as the nation's coast

13:37.240 --> 13:38.480
to coast big networks.

13:38.480 --> 13:41.280
I get all access to that, but I pay Ting's rates.

13:41.280 --> 13:44.520
I pay Ting's prices because Ting's not the company that's digging the holes and putting

13:44.520 --> 13:45.680
the towers in.

13:45.680 --> 13:48.360
They are a mobile virtual network operator.

13:48.360 --> 13:52.040
You get the same coast to coast coverage as you would, but you just pay less for it.

13:52.040 --> 13:55.440
That's why I've stuck with them and they've been flexible with my various usage patterns

13:55.440 --> 13:59.760
when I'm on the road from time to time or when I'm at home and when I'm at home my Ting

13:59.760 --> 14:03.360
bills are so ridiculously low.

14:03.360 --> 14:05.080
I love that about Ting.

14:05.080 --> 14:08.440
I have to say they have more plans now too than when I first signed up.

14:08.440 --> 14:10.880
Like they have plans now that just meet everybody's needs.

14:10.880 --> 14:13.120
I think their new set 12 plan is a real winner.

14:13.120 --> 14:18.440
You get 12 gigabytes of data with unlimited talk and text for 35 bucks a month and you

14:18.440 --> 14:21.720
can put other lines on there for just super low rates.

14:21.720 --> 14:23.480
Ting really has this figured out.

14:23.480 --> 14:27.200
A good family plan is hard to find and you can go find one that will address your family's

14:27.200 --> 14:28.800
need with their flex plans.

14:28.800 --> 14:34.040
That's a huge deal because you get access to the big nationwide carriers including 5G

14:34.040 --> 14:35.320
at Ting's rates.

14:35.320 --> 14:38.880
So if you use two gigs or 20 gigs or maybe a lot more there's going to be a Ting plan

14:38.880 --> 14:42.380
that will work for you and it's really simple to switch to Ting.

14:42.380 --> 14:45.520
Pretty much any phone is going to work because they do support so many networks.

14:45.520 --> 14:48.000
So get started by going to linux.ting.com.

14:48.000 --> 14:49.000
Check out your current phone.

14:49.000 --> 14:52.760
They've got a really easy web page you put in your information for your phone and it

14:52.760 --> 14:54.440
checks the compatibility.

14:54.440 --> 14:55.520
You're pretty much done in minutes.

14:55.520 --> 14:58.600
They'll send you a SIM card once that arrives you pop that in you do a couple more things

14:58.600 --> 15:02.360
online and you're good to go because of course they've got a great dashboard to manage all

15:02.360 --> 15:03.360
of it.

15:03.360 --> 15:04.360
That's how we roll around here.

15:04.360 --> 15:07.780
Cutting your phone bill has never been easier with Ting's new plans.

15:07.780 --> 15:11.120
So go check them out at linux.ting.com.

15:11.120 --> 15:19.000
It's the next generation of Ting mobile and you can get 25 bucks off that at linux.ting.com.

15:19.000 --> 15:25.760
Alyssa Rosenweig has been working on reverse engineering the Apple M1 GPU since January

15:25.760 --> 15:33.360
has now posted a screenshot of quote gnome shell on the Apple M1 bare metal.

15:33.360 --> 15:39.420
A terminal in that screenshot shows that it's running a pre-release of the 514 kernel, Debian

15:39.420 --> 15:43.680
Linux and GNOME 3.38.4.

15:43.680 --> 15:46.360
No sadly not GNOME 40.

15:46.360 --> 15:53.220
She went on to note that no it's not GPU accelerated but honestly it's usable.

15:53.220 --> 16:01.480
Not great but usable on a near mainline kernel and if missing most drivers is this snappy

16:01.480 --> 16:06.120
when everything else is done Asahi Linux will run like a dream.

16:06.120 --> 16:09.960
They seem to be getting excited over at Ashi Linux like I think they're feeling the momentum

16:09.960 --> 16:14.560
build and she further explained that the kernel that they used included patches for the pin

16:14.560 --> 16:20.640
control subsystem PCIe and the work in progress display driver that gets display USB and Ethernet

16:20.640 --> 16:21.640
all up and going.

16:21.640 --> 16:26.160
Those drivers are at least there if not complete yet.

16:26.160 --> 16:30.640
She described it as a nice milestone on the way to building a complete DCP driver.

16:30.640 --> 16:36.760
Now this DCP is a co-processor for the GPU in Apple Silicon Macs and obviously getting

16:36.760 --> 16:43.980
full GPU acceleration on these M1 Macs is critical to a nice polished usable Linux desktop

16:43.980 --> 16:47.800
and the team seems to be making good progress really with the trickiest bit for future Linux

16:47.800 --> 16:52.280
M1 users possibly being matching compatible firmware.

16:52.280 --> 16:55.880
Earlier this month the project lead Hector Martin said that Linux would only support

16:55.880 --> 17:02.760
specific firmware versions since the DCP interface is not stable and changes with every Mac OS

17:02.760 --> 17:03.760
version.

17:03.760 --> 17:11.400
If you were on the internet this week it was hard to miss the celebration of Linux's 30th

17:11.400 --> 17:12.400
birthday.

17:12.400 --> 17:16.320
Fitting really since the internet is powered by Linux.

17:16.320 --> 17:23.460
Although commonly accepted that Linux's birthday is August 25th there is some dispute.

17:23.460 --> 17:29.800
The first news group post is from August 25th with headers and all that to confirm the date.

17:29.800 --> 17:36.560
But there is also a 0.01 release that was never released publicly only in private to

17:36.560 --> 17:39.760
a few people who had already shown interest.

17:39.760 --> 17:43.760
Unfortunately none of those emails survive.

17:43.760 --> 17:50.140
But you can still find the September 17th date in the tar file of that release.

17:50.140 --> 17:54.440
In a post celebrating the anniversary Red Hat said that quote the reason that Linux

17:54.440 --> 17:59.400
has been arguably the most successful operating system of all time is due to the fact that

17:59.400 --> 18:06.240
its license allowed copying, improvement, distribution and required sharing of changes.

18:06.240 --> 18:12.640
In a throwback quote from Linus he also noted the importance of the license saying I actually

18:12.640 --> 18:18.280
originally released Linux with complete sources under a non GPL copyright that was actually

18:18.280 --> 18:21.760
much more restrictive than the GPL.

18:21.760 --> 18:28.200
It required that all sources always be available and it also didn't allow any money to be exchanged

18:28.200 --> 18:30.160
for Linux at all.

18:30.160 --> 18:35.440
He went on to say I changed the copyright to the GPL within roughly half a year.

18:35.440 --> 18:40.680
It quickly became evident that my original copyright was so restrictive that it prohibited

18:40.680 --> 18:44.080
some entirely valid uses.

18:44.080 --> 18:48.960
Making Linux GPL was definitely the best thing I ever did.

18:48.960 --> 18:53.560
Hmm interesting and it was it was also a good read over the register that had an interview

18:53.560 --> 18:59.160
with Greg KH to note the 30th anniversary and Greg has such a pragmatic view of everything

18:59.160 --> 19:04.760
he's still very much head down working kind of answers but there was a specific exchange

19:04.760 --> 19:07.760
in there that we will link to that caught our attention.

19:07.760 --> 19:12.800
The register asked do the Linux maintainers see any other technology projects in a competitive

19:12.800 --> 19:20.480
light e.g. Google's fuchsia effort if not why not and if so how does that inform decisions.

19:20.480 --> 19:26.600
Greg answered with I would love some real competition in operating system kernels.

19:26.600 --> 19:30.280
We lost some good feedback loops when we'd work with the BSD kernel developers in the

19:30.280 --> 19:36.060
past but unfortunately most of them went to work for Apple and disappeared.

19:36.060 --> 19:41.160
Some of the ideas in fuchsia look interesting and I've talked with the developers there

19:41.160 --> 19:47.560
about some of them maybe our eventual future future won't be so disastrous after all maybe

19:47.560 --> 19:52.360
a little competitive kick in the butt is exactly what the kernel needs not that it's not doing

19:52.360 --> 19:57.320
great the competition always seems to make things better either way a lot's going to

19:57.320 --> 20:00.680
happen and there's a lot to keep track of and we do it every single week so go to Linux

20:00.680 --> 20:05.360
action news dot com slash subscribe for all the ways to get new episodes and Linux action

20:05.360 --> 20:09.200
news dot com slash contact for ways to get in touch.

20:09.200 --> 20:13.340
And don't miss my short appearance on the Linode YouTube channel.

20:13.340 --> 20:17.400
They caught up with me while I was in Denver and that video is now up on their YouTube

20:17.400 --> 20:20.280
channel and I remain on the road.

20:20.280 --> 20:24.020
You can see my journey live at colony tracker dot live.

20:24.020 --> 20:29.320
As for us we'll be back next Monday with our weekly take on the latest Linux and open source

20:29.320 --> 20:30.320
news.

20:30.320 --> 20:43.640
Thanks for joining us and that's all the news for this week.


1
00:00:00,000 --> 00:00:10,780
Hello, and welcome to Linux Action News, episode 263, recorded on October 19, 2022. I'm Chris.

2
00:00:10,780 --> 00:00:11,780
And I'm Wes.

3
00:00:11,780 --> 00:00:14,360
Hello, Wes. Let's do the news.

4
00:00:14,360 --> 00:00:21,120
We start this week with Google solving the big problem of not having enough operating

5
00:00:21,120 --> 00:00:28,840
systems. Called KataOS and aimed at what Google calls secure embedded systems running ambient

6
00:00:28,840 --> 00:00:31,280
machine learning workloads.

7
00:00:31,280 --> 00:00:37,600
I think I dig their jive here, though. It's, it's a new OS for a new type of workload with

8
00:00:37,600 --> 00:00:42,680
a different focus. We'll get into this. They want something that is hyper focused on the

9
00:00:42,680 --> 00:00:46,960
embedded hardware that is doing what they call this ambient machine learning, kind of

10
00:00:46,960 --> 00:00:51,800
always monitoring the environment, taking in data constantly, sensors galore. And on

11
00:00:51,800 --> 00:00:56,160
top of that, they want to build it with some modern technologies that are a little more

12
00:00:56,160 --> 00:01:00,820
verifiable, and a little more hip and their announcement they write, KataOS provides a

13
00:01:00,820 --> 00:01:07,200
verifiably secure platform that protects users privacy, because it's logically impossible

14
00:01:07,200 --> 00:01:12,780
for applications to breach the kernels hardware security protections, and the system components

15
00:01:12,780 --> 00:01:19,620
are verifiably secured. KataOS is also implemented almost entirely in rust, which provides a

16
00:01:19,620 --> 00:01:25,080
strong starting point for software security, since it eliminates an entire class of bugs,

17
00:01:25,080 --> 00:01:29,760
such as off by one errors and buffer overflows.

18
00:01:29,760 --> 00:01:36,960
Guess that means fuchsia is old and busted now, or maybe just destined for smart speakers.

19
00:01:36,960 --> 00:01:43,000
KataOS on the other hand, well, it's part of Google's Project Sparrow, which is something

20
00:01:43,000 --> 00:01:49,480
of a demonstration project, which combines KataOS with a secured hardware platform built

21
00:01:49,480 --> 00:01:55,960
on top of RISC-V. The GitHub repo for KataOS, well, it's been extant for a couple of months

22
00:01:55,960 --> 00:02:02,840
now, but as we record, just two days ago, it was updated with a full readme and a lot

23
00:02:02,840 --> 00:02:08,480
more details. We'll have a link for the curious in the show notes. The current GitHub

24
00:02:08,480 --> 00:02:13,560
release, well, it includes most of the KataOS core pieces to hear it from Google, including

25
00:02:13,560 --> 00:02:20,080
the frameworks they use for Rust, an alternate root server written in Rust, and more. Google

26
00:02:20,080 --> 00:02:26,240
also says their goal is to open source all of Project Sparrow when the time is right.

27
00:02:26,240 --> 00:02:30,440
But in the meantime, they're focusing a lot on KataOS and how it's built and how what

28
00:02:30,440 --> 00:02:35,480
they say it's critical for this new generation of embedded devices that are going to collect

29
00:02:35,480 --> 00:02:40,560
this data constantly. They must be what Google says, quote, mathematically proven to keep

30
00:02:40,560 --> 00:02:47,600
the data secure. In this case, Google's trying to meet those lofty goals by building on top

31
00:02:47,600 --> 00:02:54,180
of SEL4, which is an advanced microkernel that's been notable for having comprehensive

32
00:02:54,180 --> 00:03:00,000
formal verification, way beyond what any popular commercial operating system is really using

33
00:03:00,000 --> 00:03:05,880
these days, and doing so without compromising performance, at least to hear the project

34
00:03:05,880 --> 00:03:12,320
talk about it. Then on top of your small verifiable microkernel, they use a framework called

35
00:03:12,320 --> 00:03:17,720
Camkiz to build all of your system components. That's because Camkiz, well it's a software

36
00:03:17,720 --> 00:03:23,680
development and runtime framework designed to build secure microkernel based operating

37
00:03:23,680 --> 00:03:24,680
systems.

38
00:03:24,680 --> 00:03:30,440
They might be on to something here. And some of that is really what draws I think a bright

39
00:03:30,440 --> 00:03:36,160
distinction line between say, Fuchsia and CataOS or what exists out there today is they're

40
00:03:36,160 --> 00:03:38,960
really bringing all of this together.

41
00:03:38,960 --> 00:03:44,560
All the exciting technology aside, the real question here with any Google platform or

42
00:03:44,560 --> 00:03:51,400
operating system, how much adoption will this see outside of Google? And how much support

43
00:03:51,400 --> 00:03:57,280
will it get once it's no longer a fun new research project? Well, of course, only time

44
00:03:57,280 --> 00:04:06,120
can tell on that one. But why not send us a boost with your best guess?

45
00:04:06,120 --> 00:04:10,320
Security researchers in Germany alerted the SUSE development team to buffer overwrite

46
00:04:10,320 --> 00:04:15,860
issues they found in the Linux kernel that they could trigger just with Wi-Fi packets.

47
00:04:15,860 --> 00:04:21,840
The SUSE team quickly then informed the Linux kernel security team who jumped into action.

48
00:04:21,840 --> 00:04:27,680
During the team's research, aided by Intel, they found multiple problems in the WLAN stack,

49
00:04:27,680 --> 00:04:30,680
also exploitable over the air.

50
00:04:30,680 --> 00:04:35,000
Now we don't have all the details just yet, but looking at the commit series, it seems

51
00:04:35,000 --> 00:04:40,640
the code that got fixed all came from the first quarter of 2019 with the bulk of the

52
00:04:40,640 --> 00:04:47,360
issues being introduced in the 5.1 or 5.2 kernel. So unfortunately, I think that means

53
00:04:47,360 --> 00:04:52,000
these flaws have likely shipped in plenty of distributions by now.

54
00:04:52,000 --> 00:04:57,520
Yeah, we've got five separate CVEs related to this by my account. The good news is Linus

55
00:04:57,520 --> 00:05:03,320
has already merged the patches in the Linux 6.1, which just hit RC this weekend. We'll

56
00:05:03,320 --> 00:05:07,080
have more details on that in a few minutes. But also, you're going to have to wait for

57
00:05:07,080 --> 00:05:11,520
distro makers who will need to backport those fixes to their kernels that aren't based

58
00:05:11,520 --> 00:05:17,000
on 6.1, at least not yet. And well, I just have a terrible feeling for all those Android

59
00:05:17,000 --> 00:05:23,320
users out there who are maybe lucky enough to get Android based on Linux 5. I just doubt

60
00:05:23,320 --> 00:05:27,880
they're going to see any updates for this. And they're walking around scanning for Wi-Fi

61
00:05:27,880 --> 00:05:29,400
all the time.

62
00:05:29,400 --> 00:05:34,840
Really all Linux users will need to be vigilant when using Wi-Fi these days. A buffer override

63
00:05:34,840 --> 00:05:40,120
triggered remotely by a malicious Wi-Fi packet. Yeah, that's no fun. The most serious flaw

64
00:05:40,120 --> 00:05:45,480
here, it seems to be triggered when just scanning for open APs.

65
00:05:45,480 --> 00:05:49,520
Now as for public exploits that people have seen actually in the wild, none have been

66
00:05:49,520 --> 00:05:56,000
spotted so far. But it won't take long. There are several proofs of concepts that are posted

67
00:05:56,000 --> 00:06:00,300
online on GitHub and various places shared in security threads. They're getting linked

68
00:06:00,300 --> 00:06:06,360
around already. I was able to find a fully working tool rather quickly this morning when

69
00:06:06,360 --> 00:06:08,520
doing a little research for this story.

70
00:06:08,520 --> 00:06:14,860
So that's what's been happening with my laptop. Garnet, Chris. Now on the plus side, we do

71
00:06:14,860 --> 00:06:24,760
expect patches to get backported pretty quickly. So good time to keep an eye on your updates.

72
00:06:24,760 --> 00:06:29,560
Mozilla has given us a reason to cover Firefox this week. A brand new version 106 is getting

73
00:06:29,560 --> 00:06:34,800
a lot of attention by most people for its much improved PDF viewer. And it does have

74
00:06:34,800 --> 00:06:38,560
support now for text writing, drawing and signatures.

75
00:06:38,560 --> 00:06:44,520
And I'll be honest, that sounds pretty nice. But what we think is fantastic are the improvements

76
00:06:44,520 --> 00:06:52,720
to the Fox's WebRTC capabilities. Firefox is now using LibWebRTC 103 with better screen

77
00:06:52,720 --> 00:06:59,960
sharing support for Wayland users and lower CPU usage. Also on Wayland, Firefox 106 now

78
00:06:59,960 --> 00:07:05,560
has gesture support for swiping right or left to go back and forwards in the browser.

79
00:07:05,560 --> 00:07:11,500
You know, if we're honest, Firefox's lagging WebRTC has been a bit of a challenge for us

80
00:07:11,500 --> 00:07:16,920
here at Jupiter Broadcasting. And I've got to imagine for all of you out there also living

81
00:07:16,920 --> 00:07:18,640
the virtual meeting lifestyle.

82
00:07:18,640 --> 00:07:25,120
Yeah, seeing them get up to date on that LibWebRTC library, I think is great. That was an area

83
00:07:25,120 --> 00:07:29,940
where I felt like Firefox was lagging behind the Chromium based browsers, and otherwise

84
00:07:29,940 --> 00:07:35,440
has been crushing it recently. Also in web browser news this week, the impervious browsers

85
00:07:35,440 --> 00:07:42,040
public alpha was released and as of now, it's only available for Mac and Linux platforms.

86
00:07:42,040 --> 00:07:47,120
This new browser bills itself as a suite of peer to peer tools for various things like

87
00:07:47,120 --> 00:07:52,200
communication, data transport, payments, that sort of stuff. It's all built directly into

88
00:07:52,200 --> 00:07:58,240
the web browser along with a secure messenger, support for group video calls, live collab

89
00:07:58,240 --> 00:08:04,680
doc editing, decentralized identities, and even Bitcoin lightning support. I'm not sure

90
00:08:04,680 --> 00:08:08,120
really where this one's going, but they're offering an awful lot and you can find out

91
00:08:08,120 --> 00:08:17,560
more at impervious.ai and we'll have a link to the project's GitHub in the notes.

92
00:08:17,560 --> 00:08:25,240
If all goes as planned, Fedora 37 is scheduled to release mid next week, and the project

93
00:08:25,240 --> 00:08:32,280
is throwing a virtual release party. Good news, you're invited. The project says that

94
00:08:32,280 --> 00:08:36,620
the virtual release party is a great way to learn more about the latest Fedora Linux

95
00:08:36,620 --> 00:08:43,840
release, but more importantly, it's your chance to spend time with the wonderful Fedora community.

96
00:08:43,840 --> 00:08:47,160
They hope to include informational sessions that will feature updates about things like

97
00:08:47,160 --> 00:08:52,900
Fedora Core OS, the new installer interface preview, and let you meet some new project

98
00:08:52,900 --> 00:08:59,520
members. The event takes place on November 4th and 5th. Registration is free, and of

99
00:08:59,520 --> 00:09:05,000
course, we'll have a link in the notes.

100
00:09:05,000 --> 00:09:10,680
Linode.com slash LAN. Go there to get $100 in 60-day credit on a new account, and it's

101
00:09:10,680 --> 00:09:14,360
a great way to support the show. Linode is fast, reliable cloud hosting, and they've

102
00:09:14,360 --> 00:09:19,120
been a longtime sponsor of Linux Action News because our audience loves Linode. They become

103
00:09:19,120 --> 00:09:23,280
passionate customers once they sign up. It's why we run everything over there because we

104
00:09:23,280 --> 00:09:26,240
love it too. Everything we've built in the last couple of years that runs in the cloud,

105
00:09:26,240 --> 00:09:30,560
it runs on Linode. I think the best part is how they've built their business up. Over

106
00:09:30,560 --> 00:09:35,160
19 years nearly, they've had to just build a really good competitive business. That means

107
00:09:35,160 --> 00:09:39,560
things like their support department have real humans all day, every day. That means

108
00:09:39,560 --> 00:09:44,480
their system performs, right? All their systems, their network connections, the hard drives,

109
00:09:44,480 --> 00:09:49,180
the CPUs, even their GPU rigs, which I just recently had the fortune to actually try one

110
00:09:49,180 --> 00:09:53,560
out. And they're 30% to 50% cheaper than the hyperscalers out there that want to lock you

111
00:09:53,560 --> 00:09:58,480
into their crazy esoteric platforms with their crazy names for everything. And I think they

112
00:09:58,480 --> 00:10:02,800
outperform all of those hyperscalers, and independent studies have shown that as well.

113
00:10:02,800 --> 00:10:07,720
With that $100, you can go find out for yourself. Today, Linode has 11 data centers and a dozen

114
00:10:07,720 --> 00:10:12,180
more coming next year with great features such as object storage and cloud firewalls

115
00:10:12,180 --> 00:10:18,720
and backups and Kubernetes and Terraform support and so much more, as well as one-click deployments

116
00:10:18,720 --> 00:10:23,160
for things like Nextcloud, game servers, blog servers, web servers, control panels, their

117
00:10:23,160 --> 00:10:27,520
marketplace is packed full of good stuff. So go try something. Go learn something. Go

118
00:10:27,520 --> 00:10:33,280
build something and try it out while you support the show. Linode.com slash LAN. That's Linode.com

119
00:10:33,280 --> 00:10:38,280
slash LAN.

120
00:10:38,280 --> 00:10:44,160
And a thank you to Kalyde. Kalyde.com slash LAN. Kalyde is endpoint security that uses

121
00:10:44,160 --> 00:10:49,720
the most important, powerful, untapped resource in IT, the end users. When you're trying to

122
00:10:49,720 --> 00:10:54,920
achieve security goals for yourself, for a new boss, for an auditor, been there. The

123
00:10:54,920 --> 00:10:59,320
conventional wisdom has been to lock every single device down, old school style, like

124
00:10:59,320 --> 00:11:04,360
MDMs that force disruptive agents onto employees' devices that make them run slow or sometimes

125
00:11:04,360 --> 00:11:08,760
incompatible with apps and often introduce security issues of their own. You know it's

126
00:11:08,760 --> 00:11:16,720
true. It's like the old way of doing IT, and it puts IT and end users kind of at odds.

127
00:11:16,720 --> 00:11:21,320
Kalyde does things differently. Instead of forcing changes on users, Kalyde sends them

128
00:11:21,320 --> 00:11:25,780
security recommendations via Slack. Kalyde will automatically notify your team when their

129
00:11:25,780 --> 00:11:29,800
devices are insecure and then give them step by step instructions on how to solve that

130
00:11:29,800 --> 00:11:33,960
problem. And by reaching out to employees via a friendly Slack DM and educating them

131
00:11:33,960 --> 00:11:38,400
about company policies, Kalyde helps you build a culture in which everyone contributes to

132
00:11:38,400 --> 00:11:45,040
security because everyone understands how and why to do it. And for IT admins, Kalyde

133
00:11:45,040 --> 00:11:49,520
gives you a dashboard for days. You can monitor the security of your entire fleet. It can

134
00:11:49,520 --> 00:11:54,560
be on Macs, Windows, and of course, beautiful Linux. You can see at a glance which employees

135
00:11:54,560 --> 00:11:58,640
have their disks encrypted, if they have their OS updates installed, a password manager,

136
00:11:58,640 --> 00:12:03,320
etc. Just making it easy to run reports and prove compliance to your auditors, customers,

137
00:12:03,320 --> 00:12:08,920
leadership, and yourself. So that's Kalyde. User-centered, cross-platform, endpoint security

138
00:12:08,920 --> 00:12:14,900
for teams that slack. You can meet your compliance goals by putting users first.

139
00:12:14,900 --> 00:12:19,420
Just visit Kalyde.com slash LAN to find out how. You go there, you sign up for a free

140
00:12:19,420 --> 00:12:23,520
trial, they're going to hook you up with a goody bag that includes a t-shirt. I don't

141
00:12:23,520 --> 00:12:27,360
know if that t-shirt has a picture of my face on it. I wouldn't expect that. I don't know

142
00:12:27,360 --> 00:12:31,680
why you thought it would. But you get one when you go to Kalyde.com slash LAN and you

143
00:12:31,680 --> 00:12:40,120
activate a free trial. That's K-O-L-I-D-E.com slash L-A-N.

144
00:12:40,120 --> 00:12:46,440
We wrap up today by looking ahead a bit at the Linux 6.1 release and the path to get

145
00:12:46,440 --> 00:12:52,320
there. It seems Linus has been getting just a bit frustrated with all the last minute

146
00:12:52,320 --> 00:12:58,440
commits coming in this time around, writing, quote, let me just say, that after I got my

147
00:12:58,440 --> 00:13:04,280
machine sorted out, caught up with the merge window, I was somewhat frustrated with various

148
00:13:04,280 --> 00:13:10,840
late pull requests. I've mentioned this before, but it's really quite annoying to get quite

149
00:13:10,840 --> 00:13:15,400
a few pull requests in the last few days of the merge window.

150
00:13:15,400 --> 00:13:19,580
He then continued with a bit more insight into why he can find it just so annoying.

151
00:13:19,580 --> 00:13:26,520
He says, quote, yes, the merge window is two weeks, but that's very much to allow me time

152
00:13:26,520 --> 00:13:31,880
to look things over. Not two weeks to hurriedly put together a branch that you send to Linus

153
00:13:31,880 --> 00:13:36,560
on Friday of the second week. The whole do an all nighter to get the paper in the day

154
00:13:36,560 --> 00:13:42,060
before the deadline is something that should have gone out the window after high school.

155
00:13:42,060 --> 00:13:44,520
Not for kernel development.

156
00:13:44,520 --> 00:13:51,060
Well we do want our kernel developers to be healthy, happy, and well rested. Linus also

157
00:13:51,060 --> 00:13:56,800
seems to be trying to manage expectations a little around Rust. While true, 6.1 will

158
00:13:56,800 --> 00:14:04,840
feature initial Rust support, he describes that support as, quote, the initial Rust scaffolding,

159
00:14:04,840 --> 00:14:09,720
no actual real Rust code in the kernel yet, but the infrastructure is there.

160
00:14:09,720 --> 00:14:16,200
Yeah, and that seems fair and probably a good idea. We saw things get really crazy with

161
00:14:16,200 --> 00:14:21,240
the 6.0 cycle when it sounded like maybe the initial Rust support would get in there and

162
00:14:21,240 --> 00:14:26,080
then they pulled way back when we discovered it wouldn't land in there. And I think we

163
00:14:26,080 --> 00:14:31,600
need to set the expectations here. This is just the beginning of Rust support, but we

164
00:14:31,600 --> 00:14:36,320
really will probably get pretty excited when something is actually written in Rust shipping

165
00:14:36,320 --> 00:14:40,180
inside the kernel. That's probably the moment to really celebrate.

166
00:14:40,180 --> 00:14:44,680
You know, once we can use a driver, say, that's written in Rust on some real hardware we have

167
00:14:44,680 --> 00:14:46,240
in front of us, perhaps?

168
00:14:46,240 --> 00:14:50,720
Yeah, exactly. So the stuff in 6.1 that we're going to dig into will probably be the things

169
00:14:50,720 --> 00:14:55,700
that we suspect will impact day to day Linux users the most. There's a lot of work going

170
00:14:55,700 --> 00:15:02,440
into improve AMD platforms on Linux, specifically the Zen4 processors. And of course, one of

171
00:15:02,440 --> 00:15:09,060
the big ones for us is the improvements to ButterFS. Kernel 6.1 introduces async buffer

172
00:15:09,060 --> 00:15:13,640
writes with more than twice the throughput for file operations.

173
00:15:13,640 --> 00:15:19,680
We've also seen some chatter that 6.1 might just end up as the next LTS release of the

174
00:15:19,680 --> 00:15:25,560
kernel, which could be just in time for a future Debian stable release, among others.

175
00:15:25,560 --> 00:15:30,560
After being prompted on the kernel mailing list, Linux stable maintainer Greg Groh-Hartman

176
00:15:30,560 --> 00:15:36,240
commented, I usually pick the, quote, last kernel of the year, and based on the regular

177
00:15:36,240 --> 00:15:43,280
release cycle, yes, 6.1 will be that kernel. But I can't promise anything until it's released

178
00:15:43,280 --> 00:15:45,480
for obvious reasons.

179
00:15:45,480 --> 00:15:51,280
Fair enough. Linux 5.15 LTS is last year's long term kernel version. That is currently

180
00:15:51,280 --> 00:15:56,780
set to be maintained through October 2023. Now that can be extended if there's enough

181
00:15:56,780 --> 00:16:03,480
interest and people that are willing to help Greg maintain that. And if Linux 6.1 did become

182
00:16:03,480 --> 00:16:10,560
the next LTS, that would be supported at least through December 2025. So if everything stays

183
00:16:10,560 --> 00:16:16,000
on course with the current development cycle for 6.1, we will likely see the final version

184
00:16:16,000 --> 00:16:22,160
ship either December 4th or 11th of 2022. So we'll just keep an eye on all of this because

185
00:16:22,160 --> 00:16:25,880
it's moving fast and there's a lot still to be worked out. And we'll share the relevant

186
00:16:25,880 --> 00:16:31,280
updates on the kernel and everything else going on in the world of Linux and open source.

187
00:16:31,280 --> 00:16:36,840
So check out linuxactionnews.com slash subscribe for all the ways to get every episode. And

188
00:16:36,840 --> 00:16:42,200
linuxactionnews.com slash contact for ways to get in touch. And we just recently reviewed

189
00:16:42,200 --> 00:16:47,880
the newly updated Thaleo workstation from system 76. Go check out our review in Linux

190
00:16:47,880 --> 00:16:53,480
Unplugged 480. We'll be back next week with our take on the latest Linux and open source

191
00:16:53,480 --> 00:17:13,200
news.


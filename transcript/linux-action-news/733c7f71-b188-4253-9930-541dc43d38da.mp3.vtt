WEBVTT

00:00.000 --> 00:10.200
Hello, and welcome to Linux Action News, episode 180, recorded on March 13th, 2021.

00:10.200 --> 00:11.200
I'm Chris.

00:11.200 --> 00:12.200
And I'm Wes.

00:12.200 --> 00:13.200
Hello, Wes!

00:13.200 --> 00:14.200
Let's do the news.

00:14.200 --> 00:20.240
We're starting this week with a story that might have positive ramifications in the future.

00:20.240 --> 00:25.200
The Linux Foundation, with the support of Google, Red Hat, and Purdue University, is

00:25.200 --> 00:31.160
launching a service called Sigstore to help developers sign the code they release.

00:31.160 --> 00:36.520
Signing code involves associating a cryptographic signature with a specific digital artifact

00:36.520 --> 00:41.560
â€“ think release files, container images, and, of course, binaries.

00:41.560 --> 00:46.020
That way, the person or entity consuming and using the software can check the code signature

00:46.020 --> 00:51.080
to verify that the release is authentic and hasn't been altered by someone along the

00:51.080 --> 00:52.080
way.

00:52.080 --> 00:57.000
What Sigstore enables is for all open source communities to sign their own software.

00:57.000 --> 01:02.760
That combines province, integrity, and discoverability to create a transparent and audible software

01:02.760 --> 01:04.520
supply chain.

01:04.520 --> 01:10.280
And Sigstore aims to make that available to essentially anyone who wants it.

01:10.280 --> 01:13.600
And software supply chain is the key topic here.

01:13.600 --> 01:18.320
Yeah, with the recent SolarWinds hack, people are talking about the security of the quote

01:18.320 --> 01:22.080
unquote software supply chain more and more.

01:22.080 --> 01:23.880
What do they mean when they say that?

01:23.880 --> 01:28.840
Well, the software supply chain is generally what the industry considers anything that

01:28.840 --> 01:35.600
goes into or affects your code, from development through CICD, until it gets deployed into

01:35.600 --> 01:36.960
production.

01:36.960 --> 01:41.560
And trusting that open source software has not been tampered with is also on people's

01:41.560 --> 01:46.740
mind, because face it, we're all using a lot of open source software.

01:46.740 --> 01:52.040
And as Google put it, installing most open source software today is equivalent to picking

01:52.040 --> 01:56.600
up a random thumb drive off the sidewalk and plugging it right into your machine.

01:56.600 --> 02:01.640
It seems, I don't know, maybe a bit of an exaggeration.

02:01.640 --> 02:04.280
But they're trying to get the point across, I guess.

02:04.280 --> 02:09.760
And really, currently, very few open source projects go through the trouble of cryptographically

02:09.760 --> 02:11.880
signing their software releases.

02:11.880 --> 02:14.160
I mean, think about the challenges there.

02:14.160 --> 02:16.120
They would have to maintain the keys.

02:16.120 --> 02:18.720
There'd have to be some sort of key management.

02:18.720 --> 02:21.760
If there was ever any kind of compromise, they'd have to have a process to properly

02:21.760 --> 02:24.600
revoke the key and inform their users.

02:24.600 --> 02:28.860
And it's not like the distribution of the keys is obvious.

02:28.860 --> 02:33.300
There's not necessarily a way that is just standard right now in the open source community.

02:33.300 --> 02:38.160
And it's really at present kind of up to end users, the system administrator, or just the

02:38.160 --> 02:45.440
user of a box to suss out if something has been tampered with or not, and if it's safe.

02:45.440 --> 02:48.480
And a lot of times, it's getting abstracted away from us.

02:48.480 --> 02:53.640
Maybe somebody's working with NPM or another set of tools that goes out and installs dependencies

02:53.640 --> 02:54.920
automatically.

02:54.920 --> 02:57.960
And it just gets more and more removed from user oversight.

02:57.960 --> 02:58.960
Yeah.

02:58.960 --> 03:02.960
And without a standardized process, it's hard to have standardized tools that can really

03:02.960 --> 03:03.960
leverage this.

03:03.960 --> 03:07.720
Plus, you've got, as you mentioned there, Chris, kind of the difficulty of managing

03:07.720 --> 03:09.000
all this infrastructure.

03:09.000 --> 03:13.380
That's just a whole bunch more sort of, hate to say this, but sysadmin work, when you're

03:13.380 --> 03:17.640
just trying to develop some software for your day job and hopefully contribute it upstream,

03:17.640 --> 03:18.640
say.

03:18.640 --> 03:22.800
Linux distributions have solved this for a while at the package layer.

03:22.800 --> 03:24.540
Maintainers will sign a package.

03:24.540 --> 03:26.340
And that's great and works really well.

03:26.340 --> 03:29.980
But that doesn't necessarily mean it was signed by the original developer of the software.

03:29.980 --> 03:36.880
And of course, doesn't include all of the software outside of the distribution's repository.

03:36.880 --> 03:41.880
So it seems like Google, Red Hat, Purdue, they've come together under the Linux Foundation

03:41.880 --> 03:49.760
to create a signing system that uses ephemeral keys that is backed by OpenID Connect and

03:49.760 --> 03:52.520
transparency logs that are going to be publicly audible.

03:52.520 --> 03:53.520
Yeah.

03:53.520 --> 03:58.100
I guess the idea here is OpenID Connect sort of brings in who you are.

03:58.100 --> 04:01.800
And then they've got a system that you can leverage to get ephemeral keys, use those

04:01.800 --> 04:07.380
keys to sign your releases through an API integrated with automation so it can just

04:07.380 --> 04:11.720
happen as part of your pipeline, much like, say, Let's Encrypt, which seems like a big

04:11.720 --> 04:13.840
inspiration in this space.

04:13.840 --> 04:15.500
And then that just all gets out there.

04:15.500 --> 04:16.940
There's methods to verify it.

04:16.940 --> 04:19.400
And crucially, that's added to transparency logs.

04:19.400 --> 04:22.600
So everyone can check and see and be aware, when was that signed?

04:22.600 --> 04:24.320
Who was it signed by?

04:24.320 --> 04:25.500
Who's responsible for this?

04:25.500 --> 04:26.500
And has it been revoked?

04:26.500 --> 04:29.640
Now, if you're listening to this and you're thinking, this kind of sounds like what Apple

04:29.640 --> 04:36.080
does with Mac apps and iOS apps and Google with Android apps, you're kind of right.

04:36.080 --> 04:38.360
This is going to be more approachable, though.

04:38.360 --> 04:41.800
There's not going to be any criteria to use the service like with Apple.

04:41.800 --> 04:42.800
You have to be a developer.

04:42.800 --> 04:43.800
You have to be approved.

04:43.800 --> 04:45.200
You got to pay for that.

04:45.200 --> 04:52.160
This will be a nonprofit process, a free service with no need to apply and join.

04:52.160 --> 04:58.020
They want as many people as possible to use this, like Let's Encrypt.

04:58.020 --> 05:01.320
The better it is for everyone, the more people that use something like this, they feel.

05:01.320 --> 05:07.480
So while it shares some similarities in its intent with the way, say, Mac OS or iOS or

05:07.480 --> 05:13.320
Android try to do this, it's much more open and I think, well, at least I hope, appealing

05:13.320 --> 05:14.800
to the open source community.

05:14.800 --> 05:19.440
I think that's kind of yet to be seen, Wes, as if we're going to really see many open

05:19.440 --> 05:21.520
source developers adopt this.

05:21.520 --> 05:25.640
It seems like maybe those who are trying to address users in the enterprise space would

05:25.640 --> 05:26.640
be the first.

05:26.640 --> 05:27.640
Right.

05:27.640 --> 05:31.120
I mean, you have to have a user base that actually cares and is going to take the time

05:31.120 --> 05:33.360
to verify things on the flip side.

05:33.360 --> 05:37.520
But yes, I think having this out there, at least getting the bar lowered so that it's

05:37.520 --> 05:40.160
easy to do, so it's possible to do in the first place.

05:40.160 --> 05:43.200
You don't have to learn GPG, you don't have to set up your own infrastructure and hire

05:43.200 --> 05:45.480
security engineers to keep all that running.

05:45.480 --> 05:48.640
You can just, in theory, integrate with Sigstore.

05:48.640 --> 05:49.640
That's the first step.

05:49.640 --> 05:54.800
The second step is people on both sides of the model actually adopting it.

05:54.800 --> 05:58.380
And you make an interesting comparison with Apple there.

05:58.380 --> 06:02.960
That is a crucial difference in that in the App Store, say, there's a blessing of trust

06:02.960 --> 06:03.960
from Apple.

06:03.960 --> 06:07.080
That not only have they set up this infrastructure and signed things and let developers sign

06:07.080 --> 06:11.760
and they're involved, but they're also saying, yes, this can be in our store and endorse

06:11.760 --> 06:12.760
it.

06:12.760 --> 06:14.620
And that part is different here.

06:14.620 --> 06:18.720
Much like with TLS, just because you connect over a secure connection doesn't mean you

06:18.720 --> 06:20.640
should trust what's on the other side.

06:20.640 --> 06:26.360
And this setup will let you be sure that that developer did in fact make this artifact.

06:26.360 --> 06:28.360
Doesn't guarantee you should trust the developer though.

06:28.360 --> 06:32.500
So I think you're right that an enterprise use case where maybe you've got a couple partners,

06:32.500 --> 06:35.840
you've got agreements with, and you just want to make sure that even though you're using

06:35.840 --> 06:39.480
the open source infrastructure, maybe they still release on GitHub.

06:39.480 --> 06:43.120
Because you've got these extra cryptographic guarantees, you can still get your software

06:43.120 --> 06:44.120
that way.

06:44.120 --> 06:45.120
Right.

06:45.120 --> 06:46.120
OK.

06:46.120 --> 06:47.120
So, Wes, how about a real world example here?

06:47.120 --> 06:52.700
The people behind Sigstore cited a developer working on a Node.js app and wanting to publish

06:52.700 --> 06:55.400
to NPM the package repository.

06:55.400 --> 06:58.560
You would just run a command to sign your app, this developer.

06:58.560 --> 07:02.480
Your browser would open it up and you'd complete the open ID connect authentication flow and

07:02.480 --> 07:05.620
it supports two factor authentication as well.

07:05.620 --> 07:10.600
And then a certificate gets issued to you to the email that you've provided them.

07:10.600 --> 07:13.080
And then you would upload and provide that to NPM.

07:13.080 --> 07:17.360
So it's a pretty straightforward process for this developer who's who's just trying to

07:17.360 --> 07:22.960
quickly create some sort of Node.js tool or app to actually get it signed and then supply

07:22.960 --> 07:25.840
that to NPM if NPM makes the changes.

07:25.840 --> 07:30.400
And then as an end user, when you go to check, you could even build that support into the

07:30.400 --> 07:31.400
NPM package manager.

07:31.400 --> 07:33.680
So it checks to see if a signature is on file.

07:33.680 --> 07:35.280
All of that has to be built in.

07:35.280 --> 07:39.560
But their goal at Sigstore is to create that infrastructure.

07:39.560 --> 07:40.560
Right.

07:40.560 --> 07:44.020
I think another good example here and one that you can see already kind of coming together

07:44.020 --> 07:49.860
is if you take a look at what open source exists already under the Sigstore GitHub organization.

07:49.860 --> 07:55.000
And one of those is something called Cosign, which is all about container signing and verification.

07:55.000 --> 07:56.320
And doesn't that make a lot of sense?

07:56.320 --> 08:00.680
Sure, you might just want to run all your stuff on on the latest Ubuntu container out

08:00.680 --> 08:01.680
there.

08:01.680 --> 08:03.920
But you also want to make sure that you're actually getting the real thing.

08:03.920 --> 08:07.800
Luke Hins, the security engineering lead at Red Hat said, I'm very excited about Sigstore

08:07.800 --> 08:12.040
and what this means for improving the security of software supply chains.

08:12.040 --> 08:16.440
Sigstore is an excellent example of an open source community coming together to collaborate

08:16.440 --> 08:22.160
and develop a solution to ease the adoption of software signing in a transparent manner.

08:22.160 --> 08:23.920
I really hope that is true.

08:23.920 --> 08:29.840
The fact that Google, Red Hat, Purdue, and the Linux Foundation are all involved in this

08:29.840 --> 08:36.200
does make it feel sort of vendor neutral, which does up its chances of success, I think.

08:36.200 --> 08:40.720
But we don't know when that success may or may not be just yet.

08:40.720 --> 08:45.720
It's still very early days for Sigstore, although they do have some code already up on GitHub

08:45.720 --> 08:49.920
that you can start checking out and playing with and in theory using, I think there'll

08:49.920 --> 08:54.240
definitely be some time before we're ready to see it deployed to production.

08:54.240 --> 08:57.040
Hopefully it'll be signed.

08:57.040 --> 08:58.600
Linode.com slash LAN.

08:58.600 --> 09:03.600
Go there to get $100 in credit and of course support the show.

09:03.600 --> 09:07.840
Linode makes cloud computing simple, affordable, and accessible.

09:07.840 --> 09:10.460
Linode is our cloud hosting provider.

09:10.460 --> 09:15.080
Anything we've spent up for JB 3.0 that has been on Linode's cloud.

09:15.080 --> 09:18.280
First of all, they've got 11 data centers for me to choose from, which means that I

09:18.280 --> 09:20.640
can pick something that's close to the audience.

09:20.640 --> 09:25.840
But also I started using Linode a couple of years ago because I just liked how into Linux

09:25.840 --> 09:26.840
they are.

09:26.840 --> 09:28.700
I'll be completely honest with you.

09:28.700 --> 09:29.700
That's what drew me in.

09:29.700 --> 09:33.820
But what made me stick around was what great service they offer.

09:33.820 --> 09:38.080
They have all kinds of rigs and I've got just about every kind you might need except for

09:38.080 --> 09:43.800
I don't really have any of the really large GPU compute systems, but they have those as

09:43.800 --> 09:44.800
well.

09:44.800 --> 09:50.120
Linode in 2003 is one of the first companies in cloud computing, so they just focused in

09:50.120 --> 09:51.120
on it.

09:51.120 --> 09:54.360
Instead of doing like a hundred different things like you'll see some cloud providers

09:54.360 --> 10:01.040
try to do, they picked a handful of things and they just do them really, really well.

10:01.040 --> 10:03.920
And as a result, people recognize it.

10:03.920 --> 10:09.320
They have just received the People's Choice Stevie Awards for the favorite customer service

10:09.320 --> 10:14.760
in the computer services category, which is a huge category.

10:14.760 --> 10:18.280
That's a massive win for the Linode team, and that's one of the things I hear from the

10:18.280 --> 10:22.160
audience when they switch over to Linode is just how great the service is.

10:22.160 --> 10:25.880
But their cloud manager makes it easy to back up your system, take a snapshot before there's

10:25.880 --> 10:27.040
any big change.

10:27.040 --> 10:31.480
I like having the peace of mind of having auto backups, so that's something I turn on

10:31.480 --> 10:33.240
on all of my Linodes.

10:33.240 --> 10:35.760
I think that's really great.

10:35.760 --> 10:39.080
Recently I had a guest that just needed to get a couple of asset files so that way they

10:39.080 --> 10:43.000
could show them to their marketing and show them to their legal and do all the things

10:43.000 --> 10:45.000
that guests have to do.

10:45.000 --> 10:46.960
Linode's object storage is perfect for that.

10:46.960 --> 10:50.920
I threw them up on the Linode object storage, then I generated public links, sent them off

10:50.920 --> 10:53.800
in emails, and they could pull them down blazing fast.

10:53.800 --> 10:57.960
Linode's object storage is also the backend storage for our Nextcloud instance and our

10:57.960 --> 10:59.640
PeerTube instance.

10:59.640 --> 11:01.040
It just doesn't make any sense anymore.

11:01.040 --> 11:03.160
For me, I prefer to use object storage.

11:03.160 --> 11:07.180
It just works great to just use the storage as I need it, but there's lots of options

11:07.180 --> 11:08.180
with Linode.

11:08.180 --> 11:10.880
However you like to build a box, they have a way for you to do it.

11:10.880 --> 11:15.360
If it's a one-click deployment or if it's something you build from the ground up.

11:15.360 --> 11:20.780
Lots of options, some great choices, go try them out, linode.com slash lan.

11:20.780 --> 11:25.760
See what I've been talking about, get that $100 credit, and you support the show.

11:25.760 --> 11:30.480
It's a great way to learn and try and support one of your favorite podcasts, linode.com

11:30.480 --> 11:33.280
slash lan.

11:33.280 --> 11:36.240
Well it looks like the rumors were true.

11:36.240 --> 11:41.760
Soos is targeting a pre-summer initial public offering in a deal that may value the private

11:41.760 --> 11:46.360
equity-backed company at more than $9 billion.

11:46.360 --> 11:55.280
Soos, founded in 1992, was of course acquired two years ago by EQT from Microfocus for $2.5

11:55.280 --> 12:01.240
billion, and since then has strengthened its portfolio, especially in the cloud, with acquisitions

12:01.240 --> 12:05.000
such as that of Rancher Labs last July for $600 million.

12:05.000 --> 12:09.560
Yeah, we've really seen them refine their business model, focus more on the cloud, bring

12:09.560 --> 12:15.120
in Rancher Labs, like you mentioned, to get their Kubernetes operation, I suppose, under

12:15.120 --> 12:16.120
one house.

12:16.120 --> 12:17.520
You gotta get your Kubernetes fix.

12:17.520 --> 12:21.080
Yeah, well you gotta have your Kubernetes play and you gotta have all of that for this

12:21.080 --> 12:22.080
cloud stuff.

12:22.080 --> 12:24.400
But it really actually seems to have worked out for them.

12:24.400 --> 12:31.960
Their revenue has been increasing, and this seems like the natural result of an investment

12:31.960 --> 12:32.960
firm buying them?

12:32.960 --> 12:35.560
Like, where was that, where else was this gonna go, right?

12:35.560 --> 12:39.880
Yeah, either it's gonna go public or they're gonna pawn it off on the next guy, which has

12:39.880 --> 12:42.720
kind of been what's been happening, right?

12:42.720 --> 12:47.720
Maybe that means there'll be a period of relative stability for Soos, at least if the financials

12:47.720 --> 12:51.320
are healthy, but it's hard to say with this one.

12:51.320 --> 12:57.960
$8.4 billion or $9.5 billion, somewhere in that range, would be a pretty nice return

12:57.960 --> 13:01.960
on what they paid for Soos, so that'd be pretty good.

13:01.960 --> 13:06.280
And you know, I've been reading the reactions this week online to this, because this has

13:06.280 --> 13:07.440
been slow-dripped.

13:07.440 --> 13:13.180
We saw a rumor like this about three months ago, but this is coming from multiple sources

13:13.180 --> 13:20.960
now and appears that they're targeting a May-ish kickoff, and I think the number one concern

13:20.960 --> 13:24.000
I have seen is, what does this mean for Tumbleweed?

13:24.000 --> 13:29.400
Because you know, once they become a public company, Wes, they're gonna be all serious,

13:29.400 --> 13:33.200
they're gonna be all about that revenue, and people are worried they're gonna cut off Tumbleweed.

13:33.200 --> 13:37.640
Yeah, it reminds me, this has kind of always been an open question around Red Hat of, you

13:37.640 --> 13:42.680
know, all right, how legitimately do you view your open source contributions actually contributing

13:42.680 --> 13:47.240
to your bottom line and being an essential part, or how much do your shareholders agree

13:47.240 --> 13:48.240
with that?

13:48.240 --> 13:50.560
And that will definitely be a concern for Soos.

13:50.560 --> 13:54.160
Now, you've got to think that their huge investment with Linux and their history will go a long

13:54.160 --> 13:57.880
way here, but hey, that's up to the market at the end of the day.

13:57.880 --> 14:04.720
And I would not be surprised if the acquisition of Rancher Labs was really all kind of getting

14:04.720 --> 14:11.320
this lined up, because in this Reuters article, they report that this has been in the works

14:11.320 --> 14:17.440
since well into 2020, that this was something that they've been planning to do for a while,

14:17.440 --> 14:23.280
and I could see them lining things up, positioning the brand as more of a cloud-ready brand,

14:23.280 --> 14:27.880
than just kind of letting the revenue come in the door, get all of the numbers looking

14:27.880 --> 14:30.120
good, and then make this move.

14:30.120 --> 14:34.760
But it's funny that it keeps kind of like sneaking up on us.

14:34.760 --> 14:39.120
Instead of just happening, we keep getting these little bits of leaks over time.

14:39.120 --> 14:44.560
Clearly there are some interested parties out there, although I doubt I'll see you investing

14:44.560 --> 14:46.400
in this particular stock.

14:46.400 --> 14:53.260
Well speaking of Soos, one of their developers is queuing up a virtual sound driver for virtual

14:53.260 --> 14:54.260
I.O.

14:54.260 --> 14:56.200
And these Virtio drivers are pretty special.

14:56.200 --> 15:02.280
Yeah, Virtio drivers are para-virtualized drivers for KVM and Linux that enable direct

15:02.280 --> 15:08.200
access to devices and peripherals, instead of using slower, emulated access.

15:08.200 --> 15:13.460
And this driver in particular implements the Virtio sound device specification, which was

15:13.460 --> 15:18.960
proposed last year for cases where having audio is needed, but device pass-through or

15:18.960 --> 15:21.720
device emulation don't meet the job.

15:21.720 --> 15:26.280
Yeah, this is interesting and I could definitely see a future where I'm building a virtual

15:26.280 --> 15:29.040
machine that would take advantage of this.

15:29.040 --> 15:33.560
Unrelated, but yet I still see a future where I'm going to use these things together.

15:33.560 --> 15:40.040
GNOME 40's version of Mudder is introducing headless native backend, which includes virtual

15:40.040 --> 15:41.040
monitors.

15:41.040 --> 15:44.920
Now, what this really means is that in software you can spin up virtual monitors and do stuff

15:44.920 --> 15:50.500
to them, but it could mean also long-term on a server, if you needed a graphical session

15:50.500 --> 15:53.840
for some reason, you could spin up a virtual monitor.

15:53.840 --> 15:57.960
Well now, imagine a headless virtual machine that you could spin up a virtual monitor and

15:57.960 --> 15:59.120
have a virtual sound card.

15:59.120 --> 16:01.840
I mean, you just see where this is going, of course.

16:01.840 --> 16:07.480
It's a lot of fun and shenanigans when I'm on my ginormous arm-powered workstation emulating

16:07.480 --> 16:10.120
the x86 past.

16:10.120 --> 16:13.840
These are both exactly those kinds of Linux features where, okay, right now, I'll be honest,

16:13.840 --> 16:18.800
I don't know exactly how I might take advantage of them, but down the road, I'll be in a pinch.

16:18.800 --> 16:22.400
I'll be trying to come up with some crazy solution, and it's these two things that are

16:22.400 --> 16:25.160
going to save my butt.

16:25.160 --> 16:26.800
Linux.ting.com.

16:26.800 --> 16:29.580
It's never been a better time to try out Ting.

16:29.580 --> 16:34.500
If you're budget-minded, they have Ting's Set 5 plan for $25 a month.

16:34.500 --> 16:40.200
You get unlimited talk and text, yes, I said unlimited, 5 gigabytes of LTE or 5G data,

16:40.200 --> 16:46.560
which you can use as a hotspot, nationwide LTE coverage, 5G wherever available, no contracts,

16:46.560 --> 16:51.880
yes, 5G with no contracts, yes, and if you use 2 gigs or 20 gigs, whatever it is, Ting's

16:51.880 --> 16:53.600
got the perfect plan for you.

16:53.600 --> 16:57.840
But if you know how to sync your music and sync your podcasts on Wi-Fi before you hit

16:57.840 --> 17:00.600
the road, you could really save some money.

17:00.600 --> 17:04.080
When you go to linux.ting.com, you'll get 25 bucks to work with.

17:04.080 --> 17:09.760
Well, some of these Ting plans, they cost less than $25 a month, and every single Ting

17:09.760 --> 17:16.520
plan gets access to their award-winning customer service and three LTE networks to choose from.

17:16.520 --> 17:21.040
I'm on Verizon at the moment, but I love knowing that there's other ones to move to if I happen

17:21.040 --> 17:23.760
to go somewhere where the coverage might be different.

17:23.760 --> 17:28.160
And you know me, I love the freedom of no contracts.

17:28.160 --> 17:32.320
There's a plan that fits every user and three great networks to choose from.

17:32.320 --> 17:37.280
It's simple to switch to Ting, and with all those networks, that means just about all

17:37.280 --> 17:38.960
phones are gonna work with Ting.

17:38.960 --> 17:42.560
So go to linux.ting.com to check your current phone, create an account, and pick the plan

17:42.560 --> 17:43.840
that's right for you.

17:43.840 --> 17:48.320
Ting lines up, Ting will send you a SIM card, or you can buy one from Ting directly.

17:48.320 --> 17:51.960
There's kind of all the options in the world, whatever works best for you.

17:51.960 --> 17:55.520
But just get a sense by going to linux.ting.com.

17:55.520 --> 17:58.680
Get started by going there, linux.ting.com.

17:58.680 --> 18:02.700
Cutting your phone bill in half has never been easier with Ting's brand new plans.

18:02.700 --> 18:03.700
Go check them out.

18:03.700 --> 18:04.960
It's the next generation of Ting mobile.

18:04.960 --> 18:07.040
It's here, and you could save a lot.

18:07.040 --> 18:08.600
It's never been a better time to switch to Ting.

18:08.600 --> 18:13.380
I've been a customer for a long time, and it truly is the best time.

18:13.380 --> 18:20.640
So go get $25, support the show, and check them out, linux.ting.com.

18:20.640 --> 18:26.040
It's been a long time coming, but it finally looks like there's a new version of Grub on

18:26.040 --> 18:27.680
the horizon.

18:27.680 --> 18:36.240
Grub 2.06 was originally anticipated for release in 2020, but then the boothole security vulnerability

18:36.240 --> 18:38.320
foiled those plans.

18:38.320 --> 18:45.640
And this week on Friday, Grub 2.06-RC1 was released by prominent Grub developer Daniel

18:45.640 --> 18:47.320
Kipper of Oracle.

18:47.320 --> 18:49.520
Oracle of all places, Wes.

18:49.520 --> 18:51.800
Yeah, he's been there for a bit.

18:51.800 --> 18:56.560
And this is great to see because you may have noticed the distributions out there will sometimes

18:56.560 --> 19:00.720
just go grab the latest build they can and ship it to solve problems.

19:00.720 --> 19:04.680
And they're not actually shipping quote unquote released versions of Grub.

19:04.680 --> 19:08.920
With this release, 2.06, we're seeing that after increased cooperation among developers

19:08.920 --> 19:13.200
and distributions following that boothole security vulnerability.

19:13.200 --> 19:19.520
And this is going to mark the first major Grub bootloader update since Grub 2.04 shipped

19:19.520 --> 19:21.620
in July of 2019.

19:21.620 --> 19:27.420
And among the changes in this new version is expanded ButterFS RAID support, Lux2 encrypted

19:27.420 --> 19:31.760
disk support, and the boothole patch as we mentioned, as well as other security work

19:31.760 --> 19:34.400
and a number of routine updates.

19:34.400 --> 19:36.160
This is definitely nice to see.

19:36.160 --> 19:41.760
I mean, Grub is a rather important piece of many systems, at least unless you're using

19:41.760 --> 19:43.440
system D boot.

19:43.440 --> 19:50.440
Regardless, if all goes well, fingers crossed it does, Grub 2.06 stable will be out sometime

19:50.440 --> 19:51.440
in April.

19:51.440 --> 19:54.240
You know, thinking of it, Wes, it's another piece of open source software.

19:54.240 --> 19:56.280
I wouldn't mind if it was signed.

19:56.280 --> 20:02.040
But in our effort and pledge to keep you up to date on the efforts to get Linux on the

20:02.040 --> 20:07.280
M1 with the most minimal amount of you having to actually care, we have a nice summary of

20:07.280 --> 20:11.360
some recent developments of getting Linux on that new Apple hardware.

20:11.360 --> 20:16.560
Now of course, this is a more difficult task than maybe it should be because Apple Silicon

20:16.560 --> 20:21.400
Macs have a boot process that is not based on any existing standard.

20:21.400 --> 20:27.400
It's a bespoke Apple mechanism that has slowly evolved from the early days of iOS devices.

20:27.400 --> 20:33.400
Now, the wide variety of smaller embedded ARM Linux systems almost invariably use the

20:33.400 --> 20:35.320
device tree standard.

20:35.320 --> 20:38.200
That's how most Android devices boot.

20:38.200 --> 20:43.280
Say what you will about device tree, but it's much simpler than a CPI.

20:43.280 --> 20:49.460
Interestingly enough though, Apple uses their very own version of a device tree on Apple

20:49.460 --> 20:52.760
Silicon called Apple Device Tree.

20:52.760 --> 20:57.840
This is because both it and the open device tree standard are actually based on the open

20:57.840 --> 21:03.720
firmware specification, which is how many PowerPC systems boot, including those old

21:03.720 --> 21:05.400
PowerPC Macs.

21:05.400 --> 21:07.080
The Apple legacy.

21:07.080 --> 21:08.400
Exactly.

21:08.400 --> 21:15.840
So to adapt the Apple world into a device tree world, Asahi Linux are developing M1n1,

21:15.840 --> 21:19.480
a bootloader for Apple Silicon machines.

21:19.480 --> 21:22.480
What will this look like in a new M1n1 world?

21:22.480 --> 21:23.800
Well, first you'll have the hardware.

21:23.800 --> 21:24.800
It'll start up.

21:24.800 --> 21:30.320
It will boot M1n1, which will in turn boot U-Boot, the regular ARM bootloader that seems

21:30.320 --> 21:35.320
to be very popular, which will then boot Grub, which I suppose us desktop Linux users are

21:35.320 --> 21:36.720
more familiar with.

21:36.720 --> 21:40.280
And finally, if everything else goes well, Linux.

21:40.280 --> 21:42.820
I do love that there's a little bit of grub in there.

21:42.820 --> 21:47.480
And the other thing that M1n1 will do is it will get information from Apple's iBoot system

21:47.480 --> 21:50.800
and help set up the frame buffer for that early stuff.

21:50.800 --> 21:56.080
It turns out, too, that these new M1 Macs actually have a serial port on them.

21:56.080 --> 21:59.880
Yeah, although it's just not quite where you would expect it.

21:59.880 --> 22:06.600
It's tucked into the USB-C port and you have to do some fancy data magic over the USB-C

22:06.600 --> 22:09.280
power protocol.

22:09.280 --> 22:15.360
And when you send the right signals, you get access to a serial port on these old Macs.

22:15.360 --> 22:19.480
Can I just say I'm glad Hector Martin and co are the people figuring this out and not

22:19.480 --> 22:20.480
me.

22:20.480 --> 22:21.840
And it's good to see that getting done.

22:21.840 --> 22:22.840
And they're upstreaming.

22:22.840 --> 22:24.520
You know, that's always the thing we like to note.

22:24.520 --> 22:28.880
And this could be a great way for people to keep these old Macs when people retire them,

22:28.880 --> 22:31.600
keep them running or maybe even get them running on new machines.

22:31.600 --> 22:35.360
I don't know about that, but the Corellium folks, that's the other team who are also

22:35.360 --> 22:41.880
working on getting their their work they had done for iPads working for M1 desktop machines.

22:41.880 --> 22:43.580
And it seems they've made some good progress.

22:43.580 --> 22:50.720
They now have Ethernet working on the Mac Mini and Wi-Fi working in general on the M1s.

22:50.720 --> 22:53.720
So that's a pretty big accomplishment for Corellium as well.

22:53.720 --> 22:55.280
Let's see that stuff get upstream now.

22:55.280 --> 22:56.340
That would be great.

22:56.340 --> 22:58.400
Very impressive indeed.

22:58.400 --> 23:04.440
But as you say, upstreaming and then later downstreaming into a distro I might actually

23:04.440 --> 23:05.440
use.

23:05.440 --> 23:07.400
That'll be the real test to my mind.

23:07.400 --> 23:11.520
I don't think I'll be buying an M1 to run Linux on just yet.

23:11.520 --> 23:15.960
Yeah, in the meantime, Wes, you can just save up all your doge and everyone else can go

23:15.960 --> 23:20.600
to LinuxActionNews.com slash subscribe for all the ways to get new episodes.

23:20.600 --> 23:25.360
And LinuxActionNews.com slash contact for ways to get in touch.

23:25.360 --> 23:31.360
Join Coder Radio's Coder Happy Hour every Monday at 5pm Pacific, 8pm Eastern.

23:31.360 --> 23:36.280
As for us, we'll be back next Monday with our weekly take on the latest Linux and open

23:36.280 --> 23:37.680
source news.

23:37.680 --> 23:41.840
Thanks for joining us and we will see you next week.


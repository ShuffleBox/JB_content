WEBVTT

00:00.000 --> 00:09.660
Hello, and welcome to Linux Action News, episode 185, recorded on April 18th, 2021. I'm Chris.

00:09.660 --> 00:10.660
And I'm Wes.

00:10.660 --> 00:12.680
Hello, Wes. Let's do the news.

00:12.680 --> 00:17.320
And we start with news from Dell, who've announced they'll spin out their stake in

00:17.320 --> 00:22.340
VMware, with the two companies agreeing to continue to operate without major changes

00:22.340 --> 00:24.620
for the next five years.

00:24.620 --> 00:29.920
On a conference call for investors, Dell founder and CEO Michael Dell emphasized the short

00:29.920 --> 00:35.840
term benefits to shareholders, saying, as much as we grew the revenues of VMware, the

00:35.840 --> 00:41.080
market does not appear to appreciate a hardware-software combination.

00:41.080 --> 00:45.240
It's interesting to see Michael Dell flip his position from a total 180 in August of

00:45.240 --> 00:51.360
2019, when he was asked about why Dell EMC and VMware were good together. His explanation

00:51.360 --> 00:55.280
was companies like that combination of hardware and software.

00:55.280 --> 01:01.320
Yeah, look, I think customers have told us very clearly, they don't want to be systems

01:01.320 --> 01:07.040
integrators anymore. And they're looking for fewer partners and bringing together, you

01:07.040 --> 01:14.160
know, a broad set of capabilities across the infrastructure, security, client devices,

01:14.160 --> 01:21.320
the cloud, digital transformation, enabling all those capabilities for customers. They'd

01:21.320 --> 01:25.680
much rather work with one leading company than 20 or 30.

01:25.680 --> 01:29.560
Perhaps what Dell learned was that industries don't really like lock into hardware and

01:29.560 --> 01:33.800
software vendors at the same time. And maybe they want some flexibility there. But either

01:33.800 --> 01:38.120
way, we'll save that for the analysis. Back to the story details here. Like Wes said,

01:38.120 --> 01:42.560
this deal includes a five year agreement on the two businesses essentially just carrying

01:42.560 --> 01:49.120
on as they do today, followed by an automatic annual extension to the deal unless one of

01:49.120 --> 01:53.060
the companies says no more, we're calling it off. Dell, which is an important aspect

01:53.060 --> 01:59.320
of their revenue will continue to resell VMware products, makes up about 35% ish of their

01:59.320 --> 02:03.400
revenue right now. So you can imagine the sales department was pretty relieved to see

02:03.400 --> 02:05.220
that deal would stay in place.

02:05.220 --> 02:10.480
It's also worth noting that Michael Dell will keep his seat on VMware's board and retains

02:10.480 --> 02:15.700
the right to appoint another director. And while the announcement was made after markets

02:15.700 --> 02:23.280
closed, Dell shares popped 8% in after hours trading. VMware rose 1.5%. The deal is expected

02:23.280 --> 02:27.900
to close sometime in the fourth quarter of this year, but could still be called off if

02:27.900 --> 02:32.520
it isn't done by early 2022. If either of the companies backs out or if something goes

02:32.520 --> 02:34.720
pear shaped in any other way.

02:34.720 --> 02:40.180
I guess initially, the market seems to like this. Little birdies have been hinting to

02:40.180 --> 02:44.320
Wes and I behind the scenes that this was coming for a while. Our buddy Drew actually

02:44.320 --> 02:50.280
predicted this on Linux Unplugs annual predictions episode and VMware's leader, like they're

02:50.280 --> 02:56.320
what is now going to be their CEO, was hinting back in September of 2019 that maybe things

02:56.320 --> 03:01.220
would be just fine if the two companies spun off from each other. You could see that there

03:01.220 --> 03:06.280
was a need for some breathing room by VMware. The market's getting competitive for them.

03:06.280 --> 03:10.680
They do a lot today. They still have a very strong market share and a very good market

03:10.680 --> 03:16.640
position. However, companies like IBM and Red Hat and many others are coming for their

03:16.640 --> 03:22.440
lunch, their core bread and butter. And my read of this situation is they just needed

03:22.440 --> 03:27.620
more flexibility. They needed to divorce themselves from a particular hardware vendor and make

03:27.620 --> 03:32.100
themselves more universally available. I imagine that's exactly what they're going to achieve

03:32.100 --> 03:33.100
with this.

03:33.100 --> 03:36.900
They're a legacy company in many ways, or at least from an older era, who've been trying

03:36.900 --> 03:41.840
to establish themselves in the new world of cloud and the marketplaces there, and I think

03:41.840 --> 03:47.340
have made some good inroads. But being tied to other legacy companies like Dell that really

03:47.340 --> 03:53.600
are invested in non-cloud areas or EMC before that, maybe it's just holding them back. What's

03:53.600 --> 03:59.020
interesting is this announcement coming from Dell because it doesn't seem as advantageous

03:59.020 --> 04:00.020
for them.

04:00.020 --> 04:06.600
When they purchased EMC, when Dell purchased EMC, which included VMware, it was a 67 billion

04:06.600 --> 04:13.200
dollar transaction, the largest in tech history, just a ginormous acquisition. And VMware makes

04:13.200 --> 04:17.920
up a pretty big part of that EMC acquisition. It was like clearly a big part of why they

04:17.920 --> 04:22.960
bought it. And the idea was is Dell had now the hardware to do the storage, the compute

04:22.960 --> 04:27.240
and the software to do the virtualization. And if you want to go big centralized storage,

04:27.240 --> 04:32.040
they've got all this EMC tech as well. But it just didn't quite bloom into what I think

04:32.040 --> 04:38.320
they were expecting. And I do think that a big part of their core business today is on

04:38.320 --> 04:42.840
premises data centers, small business data centers, large businesses who want to run

04:42.840 --> 04:47.560
their own infrastructure. That's still their bread and butter. But obviously, as the world

04:47.560 --> 04:53.080
changes and a lot of these shops go to a hybrid setup, they have to have some sort of solution

04:53.080 --> 04:57.360
there. And they've got like three or four irons in that fire right now trying to solve

04:57.360 --> 05:02.000
that problem. And none of them really have anything to do with Dell. And so when you

05:02.000 --> 05:06.200
look at it from like what's VMware doing today and how is VMware positioning themselves?

05:06.200 --> 05:11.800
They were already kind of leaving Dell behind before this even happened. I'll be interested

05:11.800 --> 05:16.280
to see if anything changes with VMware's role at the Linux Foundation. You know, they do

05:16.280 --> 05:20.360
contribute a lot of things to open source and are involved in standards bodies and different

05:20.360 --> 05:27.600
organizations as an independent company. Are they going to be able to keep doing that?

05:27.600 --> 05:33.060
System 76, makers of Linux hardware, has announced they are developing Cosmic, the computer operating

05:33.060 --> 05:39.920
system main interface components, a set of in-house extensions developed for GNOME Shell.

05:39.920 --> 05:45.240
The initial release of Cosmic is due in June alongside with Pop! West 2104 and will be

05:45.240 --> 05:51.900
based on GNOME 3.38. Cosmic itself is not a fork of GNOME, which it has been described

05:51.900 --> 05:53.200
by as some.

05:53.200 --> 05:58.360
System 76 said it studied user behavior and sought to refine key elements of the desktop

05:58.360 --> 06:03.920
accordingly. Say, for example, the activities overview, the core navigation tool in the

06:03.920 --> 06:10.560
GNOME desktop. It's now been split under Cosmic into two views, one just for workspaces, open

06:10.560 --> 06:16.380
windows and virtual desktops, and one for launching applications. Cosmic is also adding

06:16.380 --> 06:23.560
a dock by default because, at least according to System 76, over 56% of Pop! West users

06:23.560 --> 06:26.920
already use Dash to Dock or Dash to Panel.

06:26.920 --> 06:33.900
We asked Karl if they consider Cosmic to be ultimately a fork of GNOME or just a set of

06:33.900 --> 06:35.560
super extensions.

06:35.560 --> 06:40.880
Cosmic is an extension that creates a unique user interface while maintaining compatibility

06:40.880 --> 06:47.000
with GNOME, GNOME extensions, and the GNOME app ecosystem. We haven't found anything that

06:47.000 --> 06:52.980
we want to do yet that requires a fork, and we hope doing so is not required. Avoiding

06:52.980 --> 06:57.400
forking makes our work useful to people in other distributions.

06:57.400 --> 07:03.320
I like hearing that. When asked if they just considered basing the whole thing on the Plasma

07:03.320 --> 07:05.720
desktop, which would let them customize some of this, Karl said,

07:05.720 --> 07:11.600
Most of our work over the years has been in GTK. It would be a much larger decision to

07:11.600 --> 07:16.640
port that work over. We spent some time investigating writing larger portions of the desktop from

07:16.640 --> 07:22.760
scratch and did look at Plasma, but we haven't been persuaded that we'd had a lot of value

07:22.760 --> 07:25.240
in either of those directions.

07:25.240 --> 07:29.800
Fair enough if your team is more of a GTK team. That just makes sense. So we gave it

07:29.800 --> 07:35.600
a go before the show today, and I'd say individually, the components that make up Cosmic on their

07:35.600 --> 07:41.640
own are subtle. They subtly change the GNOME shell experience. It still feels like core

07:41.640 --> 07:49.160
GNOME, but when you bring all of the Cosmic components together, it begins to feel still

07:49.160 --> 07:54.080
like GNOME, but a unique GNOME, differentiated from all of the other desktop experiences

07:54.080 --> 07:59.760
out there. And of course, it requires this new Cosmic experience, this extension that

07:59.760 --> 08:05.920
breaks out workspaces and applications into two individual windows. The whole experience

08:05.920 --> 08:10.520
that requires everything they've built, all of the extensions from tiling, window management,

08:10.520 --> 08:15.120
and now this Cosmic stuff, along with their theme, kind of really make it all shine and

08:15.120 --> 08:16.920
a unique experience.

08:16.920 --> 08:21.000
It takes a lot to make a GNOME experience that's out of this world.

08:21.000 --> 08:26.640
I guess that's true. And they've done a pretty good job. I'm not 100% sure that I like breaking

08:26.640 --> 08:31.400
out the overview of your windows and your applications. I actually think one of the

08:31.400 --> 08:37.920
nice things the GNOME team did was brought all of that into one interface. I don't know,

08:37.920 --> 08:39.000
we'll see.

08:39.000 --> 08:44.440
System 76 seems to be implying that they're using data and user surveys to drive some

08:44.440 --> 08:49.500
of these design decisions. So they may have somewhere that they're aiming for. We'll have

08:49.500 --> 08:54.760
to really wait till June and they release ISO images for that complete experience, though.

08:54.760 --> 08:59.480
I know there's been a lot of speculation about how System 76 would continue to have developed

08:59.480 --> 09:04.240
the GNOME desktop after all the work they've been putting in Pop OS and Pop Shell and adding

09:04.240 --> 09:08.600
these changes. And I think that's why there's so much conversation and confusion about,

09:08.600 --> 09:12.840
is this a fork? Because it seems like folks are worried that there might be a fork in

09:12.840 --> 09:17.120
the future here. But so far, it's kind of impressive how much they've been able to do

09:17.120 --> 09:18.120
just with extensions.

09:18.120 --> 09:23.560
Yeah, it makes you wonder if that isn't going to be a challenge for them as the GNOME team

09:23.560 --> 09:28.760
starts to address some of their extension shortcomings, but also begins to address other

09:28.760 --> 09:34.800
technological shortcomings in the GNOME Shell. Will System 76 have a hard time keeping up?

09:34.800 --> 09:39.800
And I guess, will Ubuntu? Because they are already basing this on GNOME 3.3.8. Well,

09:39.800 --> 09:44.380
my laptop over here is running GNOME 40. So that means to use this, I have to go back

09:44.380 --> 09:50.440
a version of GNOME, which all said, I probably wouldn't really lose much, you know, because

09:50.440 --> 09:53.960
they've got a nice experience here, but it already kind of puts them behind the ball.

09:53.960 --> 09:57.200
And it's not really their fault. That's just what Ubuntu, which they're based on, is doing.

09:57.200 --> 10:03.560
But what I see here is maybe the first signs that highly customizing GNOME like this does

10:03.560 --> 10:09.880
kind of put you behind a little bit. And with so much coming down the pipe to make the GNOME

10:09.880 --> 10:14.520
experience better, I'm kind of of the opinion that I want to be on the latest and greatest

10:14.520 --> 10:18.840
GNOME all the time. And maybe they can get it there, especially if Ubuntu gets it there.

10:18.840 --> 10:22.400
Maybe they just inherit all of that work. But right now, I'm wondering if we're just

10:22.400 --> 10:26.720
kind of seeing some of the early signs of when you go in heavy on customizations, you

10:26.720 --> 10:31.840
end up behind. I guess we'll have to wait till 2110 to find out. If you're curious,

10:31.840 --> 10:36.360
though, and you'd like to give the Cosmic components a try before the beta is out, you'll

10:36.360 --> 10:42.520
find the packages in the System76 POP PPA. Otherwise, the sources are on GitHub and in

10:42.520 --> 10:48.720
our show notes. But do keep in mind, this is far from the final product. System76 also

10:48.720 --> 10:54.960
says they're looking for Windows and Mac users to experience Cosmic firsthand. If that might

10:54.960 --> 11:02.960
be you or someone you know, you can help out by contacting UX at System76.com.

11:02.960 --> 11:08.360
Linode.com slash LAN. Go there to get a $100 60 day credit towards a new account. And of

11:08.360 --> 11:12.680
course, you go there to support the show. Did you know Linode is the largest independent

11:12.680 --> 11:17.300
cloud provider out there? They started in 2003 as one of the first companies in cloud

11:17.300 --> 11:23.200
computing three years, three years before AWS or other enterprise providers, and they

11:23.200 --> 11:29.040
are still independently owned and doing it right. They have refined it to an art and

11:29.040 --> 11:33.620
no matter what skill you're at, or whatever technology stack you use, Linode can help

11:33.620 --> 11:39.480
your ideas come to life on the web. If you run into any kind of trouble or any kind of

11:39.480 --> 11:46.720
problems, Linode comes with amazing, fantastic customer service 24 seven by phone or by ticket.

11:46.720 --> 11:50.160
They're going to help you if you've got one Linode or you got 100. They're going to make

11:50.160 --> 11:54.420
sure you get it taken care of. There's also hundreds of guides and tutorials to help you

11:54.420 --> 11:58.500
make sure you're getting things set up just right and have the confidence to actually

11:58.500 --> 12:03.280
put those things into production. That's what I love about their guides. Sometimes I just

12:03.280 --> 12:06.360
want to make sure I'm doing it right. And they got lots of good guides to help you do

12:06.360 --> 12:11.160
that and Linode is easy to use with a powerful cloud dashboard. And you can tell there's

12:11.160 --> 12:15.840
little hints in there that the people that build this stuff love Linux. And one of the

12:15.840 --> 12:19.480
features outside of just server hosting that I think is fantastic, even though they got

12:19.480 --> 12:24.240
11 data centers around the world, super fast 40 gigabit connections, crazy fast native

12:24.240 --> 12:31.800
SSDs, AMD epic processors for their dedicated CPU rigs. They also have s3 compatible object

12:31.800 --> 12:38.280
storage. Chew on that for a second. Just marinate that in your brain on what you could do with

12:38.280 --> 12:44.120
Linode s3 compatible object storage. And yeah, they got cloud firewalls. And of course, they

12:44.120 --> 12:49.800
got simple one click application deployments, and so much more. That's why you got to check

12:49.800 --> 12:56.640
it out yourself. So go to linode.com slash LAN, get that $100 60 day credit on your new

12:56.640 --> 13:01.380
account and kick the tires. See what I've been talking about and help make this show

13:01.380 --> 13:07.400
possible all at the same time. That's linode.com slash LAN.

13:07.400 --> 13:12.320
It should come as little surprise, especially given the recent news of Google allowing rust

13:12.320 --> 13:17.480
to be used for Android system level code, that engineers at the search giant are in

13:17.480 --> 13:23.080
support of rust being used in the Linux kernel. In addition to that this week, there was a

13:23.080 --> 13:27.680
rust RFC for the Linux kernel and that discussion is still taking place in the Linux kernel

13:27.680 --> 13:32.200
mailing list. We'll get back to that. But Google engineers, they wanted to optimize the

13:32.200 --> 13:37.960
moments and express their support on the Google security blog stating that we feel that rust

13:37.960 --> 13:44.400
is now ready to join C as a practical language for implementing the kernel. It can help us

13:44.400 --> 13:50.080
reduce the number of potential bugs and security vulnerabilities in privileged code while playing

13:50.080 --> 13:54.520
nicely with the core kernel and preserving its performance characteristics.

13:54.520 --> 14:00.720
Holy moly guacamole, Wes. This seems like this is actually happening. Linus's reaction

14:00.720 --> 14:07.440
to the RFC seems fairly positive, inquisitive, you might say. He definitely has some questions

14:07.440 --> 14:14.480
he wants answered. But he said, quote, on the whole, I don't hate it. But he also said

14:14.480 --> 14:20.320
that the runtime failure panic is a fundamental issue. So, Wes, I was hoping you kind of explain

14:20.320 --> 14:25.640
to us what this runtime failure panic is that Linus is referring to.

14:25.640 --> 14:31.080
I thought you might ask, but I'm going to punt to Steve Klabnik, Rust core team member

14:31.080 --> 14:36.360
who said on Hacker News that the short explanation, this code wasn't in its final form yet, but

14:36.360 --> 14:40.520
good enough to ask for a high level review. The review came back said, hey, this looks

14:40.520 --> 14:46.360
OK overall, but I have some questions. So really, the RFC never claimed to be in a shape

14:46.360 --> 14:50.600
to be immediately mergeable into the kernel. Part of the problem is about the way Rust

14:50.600 --> 14:55.460
panics. And this is kind of a big moment for Rust because up to now, yes, it has been used

14:55.460 --> 15:01.000
for some kernel development. Look at the Zircon kernel over in Fuchsia or Redux OS, but nothing

15:01.000 --> 15:07.320
quite as big in production as the Linux kernel. Of course, there are a lot of Rust applications.

15:07.320 --> 15:11.200
And in those, most of the time, those applications don't really handle the situation of running

15:11.200 --> 15:15.860
out of memory well. And you want something like a panic where you just kill that thread,

15:15.860 --> 15:20.800
give up, something's gone wrong, you don't have memory, try again or just crash the system.

15:20.800 --> 15:24.960
That's bad in the kernel. You don't want the kernel to die. The kernel is the one in charge

15:24.960 --> 15:28.840
of memory allocation. So you need it to get a reasonable result back and then be able

15:28.840 --> 15:31.640
to do something else to try to free up memory, whatever has to happen.

15:31.640 --> 15:34.680
Yeah, you definitely don't want it panicking while it's in the kernel.

15:34.680 --> 15:39.620
Definitely. But the nuance that got lost here was really the use of alloc, just the call

15:39.620 --> 15:43.760
in Rust to allocate memory, the normal one. That was just a temporary measure to speed

15:43.760 --> 15:48.500
up development. And that's why the RFC really wasn't meant to be merged as is. The point

15:48.500 --> 15:52.040
of this discussion is to say, yes, there's some work to do, we need to make the memory

15:52.040 --> 15:56.600
allocation do some fine tuning there as long as the rest of this looks good. And if it

15:56.600 --> 16:00.680
does look good, which at least sounds like to Linus and many other folks, it does in

16:00.680 --> 16:05.840
kernel Rust support is to the point that prototyping modules can start now. We can work out some

16:05.840 --> 16:10.720
more of that binding code, figure that out, get that, you know, up to Linus's satisfaction,

16:10.720 --> 16:12.400
but go start trying to use it.

16:12.400 --> 16:16.680
Well, and what Linus has identified as an issue here sounds like they also already think

16:16.680 --> 16:21.700
is an issue and are working towards solving. So that's pretty positive. Android is taking

16:21.700 --> 16:25.560
this a step further, right? They're doing like their Bluetooth stack in Rust. And you

16:25.560 --> 16:31.720
look at things that are inherently low hanging fruit, like the wireless driver support stack

16:31.720 --> 16:36.140
in the Linux kernel. And you wonder if maybe that wouldn't be better rewritten in a more

16:36.140 --> 16:40.420
memory safe language. But additionally, on top of all this, besides the what could be

16:40.420 --> 16:46.200
some nice technical advantages supporting Rust, there's the human advantage. It allows

16:46.200 --> 16:51.840
the kernel team, which skews a little older Wes to tap into new hype around Rust and maybe

16:51.840 --> 16:56.840
appeal to new developers that are willing to contribute to the kernel, but just don't

16:56.840 --> 17:00.360
like contributing in C, they want to contribute in Rust.

17:00.360 --> 17:04.600
Yeah, I think that despite Rust obviously having its own learning curve, you know, C

17:04.600 --> 17:10.680
is an old language, you might not know what resources to use. And just beyond all of that,

17:10.680 --> 17:14.360
Rust is modern. It's got a linter, it's got a package manager built right in. Now, you're

17:14.360 --> 17:17.260
not going to use all those things in the kernel world, it's definitely going to be different.

17:17.260 --> 17:21.360
But just as a language to learn and try to bridge to get someone who might just be doing,

17:21.360 --> 17:24.640
you know, web development on the side, but wants to start playing with the kernel, Rust

17:24.640 --> 17:25.640
seems like a good fit.

17:25.640 --> 17:30.800
Well, speaking of the kernel, if all goes as planned, we will have a brand new Linux

17:30.800 --> 17:36.520
5.12 next weekend. It was supposed to land this weekend, but after looking at everything,

17:36.520 --> 17:42.360
the team decided to put out one more release candidate and hold off on the release until

17:42.360 --> 17:47.240
next week, which all in all is probably a pretty good decision because the 5.12 release

17:47.240 --> 17:50.720
cycle has been kind of bumpy, slightly.

17:50.720 --> 17:55.240
Caution is good in a project like Linux kernel, but you can't fool me, Chris. I know you were

17:55.240 --> 18:01.320
just waiting for that N64 support, but you'll have to wait one more week. Don't worry, though.

18:01.320 --> 18:06.600
We'll have all the details about 5.12 in the next Linux Action News.

18:06.600 --> 18:12.280
Linux.ting.com. Ting is my mobile service provider, and it has never been a better time

18:12.280 --> 18:18.520
to try out Ting in all of the years I have ever used Ting. Linux.ting.com will get you

18:18.520 --> 18:23.400
$25 off. And I know it's hard to get a good family plan, too, and I want to mention this

18:23.400 --> 18:28.600
for everyone. Ting has solved this particular pain point. As many lines as you need on your

18:28.600 --> 18:35.000
account, it's just $10 per line. Every single line has unlimited texts and calls, and every

18:35.000 --> 18:40.360
line shares that same pool of data so you can budget and plan accordingly. And if you

18:40.360 --> 18:45.280
use two or 20 gigabytes or even more of data, there's a perfect Ting plan for you. Every

18:45.280 --> 18:50.880
plan gets access to Ting's award-winning customer service. Award-winning customer service.

18:50.880 --> 18:55.360
Not just like regular customer service, but like the extra good kind of customer service.

18:55.360 --> 18:58.480
And that matters. You'll notice that if they got good customer service, I'm going to tell

18:58.480 --> 19:02.720
you about it, and Ting does. Something else I love from a technical side, though, is they

19:02.720 --> 19:08.320
have nationwide LTE and 5G networks to choose from. I'm presently on the Verizon network,

19:08.320 --> 19:11.440
but there may be something in your area that has great signal, and they have all of the

19:11.440 --> 19:16.080
maps to help you figure it out. One thing about Ting to keep in mind is they keep things

19:16.080 --> 19:21.040
simple. It's really easy to switch to Ting, and it's really easy to get your new phone

19:21.040 --> 19:24.880
or an old phone set up. Pretty much any phone's going to work on Ting because they got so

19:24.880 --> 19:30.480
many dang networks. So just head to linux.ting.com to check your current phone, create an account,

19:30.480 --> 19:35.140
and pick up the plan that's just right for you. Right for you could be something very

19:35.140 --> 19:39.040
different than what I use, but that's the beautiful thing about Ting. You get what's

19:39.040 --> 19:42.080
right, they send you a SIM card, you pop it in, you go to their website, within minutes

19:42.080 --> 19:46.200
you're going. Really, that's it. Like the time it takes you to hear this, you could

19:46.200 --> 19:50.840
be up and running on Ting. Cut your phone bill in half in minutes and get started with

19:50.840 --> 19:56.120
Ting. Just go to linux.ting.com.

19:56.120 --> 20:01.640
The team behind Matrix, Element Matrix Services, also known as EMS, have announced they're

20:01.640 --> 20:08.120
launching a hosted bridge for Microsoft Teams. A single Microsoft Teams bridge supports unlimited

20:08.120 --> 20:14.120
users across unlimited channels. And the pricing is actually based on the number of active

20:14.120 --> 20:20.680
users that are using the bridge from Microsoft Teams at a cost of 50 cents per user per month.

20:20.680 --> 20:24.740
And then all of the other traffic and stuff related to that is free. But what's notable

20:24.740 --> 20:29.720
about this release, at least if you're not a Microsoft Teams user anyway, is that when

20:29.720 --> 20:35.660
they were asked if the bridge would be open source, they said no. The bridge itself is

20:35.660 --> 20:41.160
not going to drop into the open source matrix code anytime soon. This is an entirely new

20:41.160 --> 20:46.920
bridge that we've built exclusively for Element Matrix Services, which is the SaaS hosting

20:46.920 --> 20:52.240
platform we provide in order to keep the lights on for Matrix development and for Element

20:52.240 --> 20:53.240
in general.

20:53.240 --> 20:57.360
Yeah, they kind of make a joke about how if you're rich enough to pay for Teams, you're

20:57.360 --> 20:59.120
rich enough to pay for our bridge.

20:59.120 --> 21:03.600
You know, I have to give them some credit there. Matrix is pretty neat. It's definitely

21:03.600 --> 21:09.480
a useful product and you have to fund it somehow. I think this just caught some of us by surprise.

21:09.480 --> 21:15.160
Yeah, not going open source. Yeah, I agree. But I think when you look at the client for

21:15.160 --> 21:18.560
this, these are clients that use Teams that are trying to get to platforms maybe that

21:18.560 --> 21:23.520
Teams isn't on. Or another use case that I think they mentioned in their press announcement,

21:23.520 --> 21:28.440
but I know companies I've worked for would be all over this, is DR, disaster recovery,

21:28.440 --> 21:34.200
is it like maybe Teams is down option or a backup in searchable index of Teams. That's

21:34.200 --> 21:38.240
super valuable there too. And you don't even have to do it for all your users necessarily.

21:38.240 --> 21:44.440
So there's really, when you look at the customer base here, Wes, I think I see their logic.

21:44.440 --> 21:48.160
It would be nice if you could self-host this, right? Like if you could just run this on

21:48.160 --> 21:52.760
your own VPS or your own on-premises box, that would be ideal.

21:52.760 --> 21:56.160
And to that point, I suppose I should note that there's nothing stopping a willing developer

21:56.160 --> 22:00.400
out there for making an open source Teams bridge if they want. Although it's not going

22:00.400 --> 22:01.400
to be me.

22:01.400 --> 22:06.200
This is why friends just don't let friends use Teams.

22:06.200 --> 22:12.720
Speaking of Microsoft, Microsoft's WSL team has just shipped the latest Linux 5.10 series

22:12.720 --> 22:18.720
kernel to Windows Insiders. And the new update brings some nice to see improvements.

22:18.720 --> 22:23.800
The way Microsoft works on the Linux kernel is fascinating. They have a Linux system group

22:23.800 --> 22:28.400
that is responsible for creating the WSL2 kernel, as well as the ones that run on Azure

22:28.400 --> 22:34.400
and a lot of their other devices. They have like a department at Microsoft that is dedicated

22:34.400 --> 22:39.080
to Linux kernel development. And once they say they have a new version ready, they pass

22:39.080 --> 22:44.560
it on to the WSL team. The WSL team runs it through a series of tests. They test it internally

22:44.560 --> 22:49.680
extensively. And then once it's passed those tests, they ship it off to the Windows Insiders.

22:49.680 --> 22:54.280
Those crazy batch of living on the edge Windows users then pull down the latest Microsoft

22:54.280 --> 22:58.880
updates and in this one, they're going to get a Linux kernel update that will add Lux

22:58.880 --> 23:06.200
disk encryption. And with some nice WSL fancy command line love, you will be able to mount

23:06.200 --> 23:10.100
those Lux disks inside of a Windows host.

23:10.100 --> 23:16.340
This shiny new kernel also fixes a clock sync issue that caused WSL2 instances to have a

23:16.340 --> 23:21.760
different time than the actual time on the host machine. Not what you'd expect. Windows

23:21.760 --> 23:26.480
Insiders out there just need to run Windows update and they'll be upgraded to the latest

23:26.480 --> 23:32.360
kernel version. Microsoft shipping Linux kernels in Windows update. I'm still not used to

23:32.360 --> 23:36.880
it.

23:36.880 --> 23:41.160
And one last story in the Microsoft and Windows world. Thank you to Michael over at Ferronix

23:41.160 --> 23:45.880
for noting that Hangover had a new release. Hangover 0.65 is now available. Forgetting

23:45.880 --> 23:50.720
wine up and running with cross architecture support so you can enjoy the likes of Windows

23:50.720 --> 23:56.360
games and Windows applications under 64 bit arm and even IBM power hardware that's running

23:56.360 --> 23:57.360
Linux.

23:57.360 --> 24:01.600
Yeah, that's right. Hangover, of course, is the project that crafts wine with a modified

24:01.600 --> 24:10.460
QEMU and other bits, allowing x86 32 bit and 64 bit Windows programs to run on alternative

24:10.460 --> 24:16.760
architectures under Linux. But hey, who you call an alternative? As for Wednesday's release

24:16.760 --> 24:23.960
of Hangover 0.65, it now supports starting QEMU automatically if needed amongst a variety

24:23.960 --> 24:24.960
of other improvements.

24:24.960 --> 24:31.280
Well, if those massively powerful arm or even IBM power workstations ever do develop, we'll

24:31.280 --> 24:35.200
tell you about it and everything else that happens in the world of Linux. So just go

24:35.200 --> 24:39.400
to LinuxActionNews.com slash subscribe for all the ways to get new episodes.

24:39.400 --> 24:43.720
And LinuxActionNews.com slash contact for ways to keep in touch.

24:43.720 --> 24:47.740
And a special heads up for you Coder Radio fans. Just for this week, the live time has

24:47.740 --> 24:53.680
moved to Tuesday. Tuesday at 5pm Pacific, 8pm Eastern. It's a special live event. Come

24:53.680 --> 24:58.260
for Linux Unplugged and stay for Coder. That's one huge Tuesday.

24:58.260 --> 25:04.360
And we'll be back next Monday with our weekly take on the latest Linux and open source news.

25:04.360 --> 25:24.680
Thanks for joining us and we will see you next week.


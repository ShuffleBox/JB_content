WEBVTT

00:00.000 --> 00:09.140
Hello, and welcome to Linux Action News, episode 161, recorded on November 1st, 2020.

00:09.140 --> 00:10.140
I'm Chris.

00:10.140 --> 00:11.140
And I'm Wes.

00:11.140 --> 00:12.140
Hello, Wes.

00:12.140 --> 00:13.920
Welcome aboard the Linux news train.

00:13.920 --> 00:15.020
It's good to be here.

00:15.020 --> 00:19.620
And we start off with Fedora 33, it officially released this week.

00:19.620 --> 00:20.820
We've both been running it.

00:20.820 --> 00:21.820
That's right.

00:21.820 --> 00:22.820
Enjoying it, you could say.

00:22.820 --> 00:27.700
And I'd say the headline feature of the workstation version is both GNOME Shell 338, which has

00:27.700 --> 00:31.720
lots of great fixes and improvements, it's a really great release.

00:31.720 --> 00:36.860
But the headline bold feature in the workstation version is ButterFS as the default file system

00:36.860 --> 00:38.640
if you do a new install.

00:38.640 --> 00:40.720
That's a big change.

00:40.720 --> 00:42.440
And it's one that you and I have been pounding.

00:42.440 --> 00:44.400
You can say that again.

00:44.400 --> 00:50.660
I mean, really, I've thrown several machines post release, and we also threw some machines

00:50.660 --> 00:52.560
at it for the beta test.

00:52.560 --> 00:57.500
And then we got a bunch of the Linux Unplugged audience to do some beta testing on it too.

00:57.500 --> 01:00.760
So we really put the ButterFS through its paces.

01:00.760 --> 01:02.000
I mean, tried to break it.

01:02.000 --> 01:04.800
I managed to kind of screw my system up once in all of it.

01:04.800 --> 01:06.040
Yeah, that's pretty impressive.

01:06.040 --> 01:07.160
It really is.

01:07.160 --> 01:11.580
You know, I installed this thing probably a dozen times by now, Fedora 33.

01:11.580 --> 01:13.660
I wouldn't have known anything was different.

01:13.660 --> 01:16.160
It just worked like normal.

01:16.160 --> 01:21.100
And I suppose maybe that's really the nice thing is it seems like it really hasn't been

01:21.100 --> 01:25.160
very disruptive for such a significant change under the hood.

01:25.160 --> 01:28.120
We really have not gotten any reports of massive failures or...

01:28.120 --> 01:30.880
Yeah, I think that's definitely a sign of a successful deployment.

01:30.880 --> 01:36.320
I reached out to Matt DM, the project leader, and I asked him, just how's it going after

01:36.320 --> 01:37.320
the release?

01:37.320 --> 01:38.320
Yeah.

01:38.320 --> 01:39.320
You know, are you pulling your hair out?

01:39.320 --> 01:40.320
That kind of stuff.

01:40.320 --> 01:41.320
And he said, actually, everything's going really well.

01:41.320 --> 01:43.260
Lots of praise and positive reports.

01:43.260 --> 01:47.280
They believe this was one of the most heavily participated in betas that they've seen with

01:47.280 --> 01:48.860
Fedora.

01:48.860 --> 01:52.320
And they hope that translates to post release enthusiasm.

01:52.320 --> 01:56.640
We don't know yet, but they hope it translates to people getting excited and downloading

01:56.640 --> 01:57.640
it.

01:57.640 --> 01:58.640
It is a pretty great release.

01:58.640 --> 02:04.320
He also mentioned that there is a secure boot issue that is lingering in the future, which

02:04.320 --> 02:06.720
we'll tell you about more soon.

02:06.720 --> 02:13.240
And that may require the Fedora project to respin the Fedora 33 releases in February,

02:13.240 --> 02:15.200
but they'll communicate about that.

02:15.200 --> 02:16.200
It's something they've been working on.

02:16.200 --> 02:17.560
It's something Canonical's working on.

02:17.560 --> 02:21.120
It's a known issue, but it's going to be problematic in the wild for some people.

02:21.120 --> 02:23.040
And Matt wanted to raise our attention.

02:23.040 --> 02:29.200
Yeah, this is all from that boot hole vulnerability, a problem with grub 2.

02:29.200 --> 02:33.960
Because of secure boot, grub 2 was patched, but you also got to update with a new signature

02:33.960 --> 02:37.480
because all the old vulnerable grub 2s, they still have valid signatures and you can use

02:37.480 --> 02:39.800
them with secure boot.

02:39.800 --> 02:43.560
And until you revoke that, well, you're not really fixing the problem.

02:43.560 --> 02:44.800
Yeah, that's a problem.

02:44.800 --> 02:48.880
That means a lot of systems that have the old signatures won't be able to boot.

02:48.880 --> 02:51.200
Hence why we'll have to potentially spin new media.

02:51.200 --> 02:54.440
And then of course they should have the fix baked into Fedora 34.

02:54.440 --> 02:58.680
I will say, I am glad that they're working on this, that someone out there is keeping

02:58.680 --> 02:59.680
track.

02:59.680 --> 03:01.520
Yeah, it does sound like they're on top of it.

03:01.520 --> 03:09.120
Now we also have a new edition, a new official edition starting with the 33 release series.

03:09.120 --> 03:14.000
Fedora IoT has been promoted to an official edition.

03:14.000 --> 03:18.040
Really not sure if this is big news or just some news, but I think it will make Fedora

03:18.040 --> 03:19.600
IoT a little more prominent.

03:19.600 --> 03:25.520
I mean, hey, we're talking about it and it is now an official edition alongside workstation

03:25.520 --> 03:26.520
and server.

03:26.520 --> 03:27.520
You know, we went and looked it up.

03:27.520 --> 03:29.120
We're like, okay, who were they targeting this at?

03:29.120 --> 03:35.360
And they do address that both in their documentation and in some talks that are on YouTube.

03:35.360 --> 03:39.640
And it seems to be they're really targeting this at just developers who already exist

03:39.640 --> 03:45.520
in the Fedora ecosystem and they want to have an official answer with the IoT version.

03:45.520 --> 03:47.280
And there seems to be some interesting bits to this.

03:47.280 --> 03:48.280
Yeah, right.

03:48.280 --> 03:51.280
And maybe the story is you already like Fedora, you deploy it elsewhere in your ecosystem

03:51.280 --> 03:55.060
or your stack and now, well, you have the ability to target IoT.

03:55.060 --> 04:00.520
And there's aspects of Fedora IoT that make it more appealing to Internet of Things devices

04:00.520 --> 04:06.400
that have perhaps a consumer deployment where they need updates to be really robust and

04:06.400 --> 04:08.680
easy and also revertible.

04:08.680 --> 04:09.680
Exactly.

04:09.680 --> 04:14.440
And yep, Fedora IoT definitely has that, you know, things like immutability and image based

04:14.440 --> 04:16.720
deployments where you've tested your image all the way.

04:16.720 --> 04:18.920
You know that it's good and then you roll it out.

04:18.920 --> 04:24.420
But IoT does that with things like RPM OS tree, which is sort of the hybrid image slash

04:24.420 --> 04:25.800
packaging system.

04:25.800 --> 04:29.500
It also means updates are atomic and easy to roll back.

04:29.500 --> 04:33.040
So even though, yeah, you've tested your image, you also have some good capabilities in the

04:33.040 --> 04:35.280
field if something does go wrong.

04:35.280 --> 04:36.280
Yeah.

04:36.280 --> 04:40.280
And while, you know, I don't know how many people are really going to use this in production

04:40.280 --> 04:44.520
today, I could see someone wanting to target some hardware that they release in a couple

04:44.520 --> 04:45.940
of years.

04:45.940 --> 04:48.920
It might make a lot of sense to build on Fedora today.

04:48.920 --> 04:50.960
That will be the future of the ecosystem.

04:50.960 --> 04:51.960
We've certainly seen that.

04:51.960 --> 04:58.700
Well, a RISC-V future got a little bit closer this week when Psi-5 unveiled their plans

04:58.700 --> 05:02.840
for a Linux PC with a RISC-V processor at the heart of it.

05:02.840 --> 05:04.540
Yeah, this is interesting.

05:04.540 --> 05:08.360
It's got a mini ITX motherboard with a standard ATX power connector.

05:08.360 --> 05:10.840
So hey, I've got plenty of those laying around.

05:10.840 --> 05:16.880
Eight gigs of DDR4 RAM and 32 megs of QSPI flash memory to boot.

05:16.880 --> 05:22.520
It's also got a gigabit ethernet port and USB 3.2 connectors.

05:22.520 --> 05:26.040
There's also a PCIe 3.0 X8 slot.

05:26.040 --> 05:27.040
Oh, yeah.

05:27.040 --> 05:28.040
Really?

05:28.040 --> 05:30.400
So you could put something like a graphics card, FPGA.

05:30.400 --> 05:31.600
Like a real PCI card in there.

05:31.600 --> 05:33.120
Like a real PCI card.

05:33.120 --> 05:34.120
Yeah, that's pretty neat.

05:34.120 --> 05:35.120
That's kind of exciting.

05:35.120 --> 05:36.120
And there's an M.2 connector.

05:36.120 --> 05:38.640
So, you know, maybe you've got an SSD you want to slide in.

05:38.640 --> 05:41.800
Yeah, or Wi-Fi or Bluetooth dongle could go in there, too.

05:41.800 --> 05:42.800
Totally.

05:42.800 --> 05:46.320
Yeah, this sounds really, really promising.

05:46.320 --> 05:53.880
But I don't think it means you're going to get a Linux PC in 2021 powered by a RISC-V

05:53.880 --> 05:54.960
processor.

05:54.960 --> 05:56.760
You got to set your expectations accordingly.

05:56.760 --> 05:58.220
This is a developer's tool.

05:58.220 --> 06:01.020
This is not going to result in a laptop yet or anything like that.

06:01.020 --> 06:06.660
James Pryor from Psi-5 was interviewed by Wendell on Level One Techs, and he touched

06:06.660 --> 06:09.320
on the goals of the RISC-V machine.

06:09.320 --> 06:10.320
Here's a clip of that.

06:10.320 --> 06:13.880
The intent here is not to go after PC market share.

06:13.880 --> 06:18.320
We're not trying to build a laptop or a PC for watching videos or doing email.

06:18.320 --> 06:25.760
What we're trying to do is enable Linux developers to build new kernels, new drivers, new everything

06:25.760 --> 06:32.200
that they want to build or real time OS that they can use in their company's strategic

06:32.200 --> 06:34.400
use of RISC-V.

06:34.400 --> 06:38.520
We're really focusing on the professional developer for our partners.

06:38.520 --> 06:44.000
And that's the main focus here is just to really kick start the ecosystem, kind of like

06:44.000 --> 06:48.660
how Microchip have done with their Polifier SoC icicle kit.

06:48.660 --> 06:53.200
That's a great board for building prototype applications because you've got.

06:53.200 --> 06:59.960
So what has been released here is a really fast native RISC-V development platform with

06:59.960 --> 07:01.660
serious options.

07:01.660 --> 07:05.800
And if you go to the RISC-V site, we'll have a link in the show notes, they have this really

07:05.800 --> 07:07.280
cool chip configurator.

07:07.280 --> 07:08.280
Have you played with this?

07:08.280 --> 07:09.280
Oh, man, this is so neat.

07:09.280 --> 07:13.560
Yeah, it's like building your very own custom chip right here on their website.

07:13.560 --> 07:15.580
You go through the customization.

07:15.580 --> 07:17.880
You can add on machine learning capabilities.

07:17.880 --> 07:21.500
You can take the slider from one core to six cores.

07:21.500 --> 07:26.520
You can say, yes, I would like to have a supervisor mode, a user mode and machine mode.

07:26.520 --> 07:30.960
And then you go through each component, how you want the memory to work, the ports available,

07:30.960 --> 07:33.720
the security features, the debug interface.

07:33.720 --> 07:38.720
And then you design something for test, you have a power management section you work through.

07:38.720 --> 07:44.260
And by the end of it, you've essentially built this custom RISC-V chip with everything you

07:44.260 --> 07:50.000
need on the board to run your embedded application from toasters to routers and printers.

07:50.000 --> 07:53.720
And importantly, everything you didn't need, well, that's not in there, right?

07:53.720 --> 07:55.280
You can have a minimal security profile.

07:55.280 --> 07:58.720
You can select just the features that are going to make it, you know, the price that

07:58.720 --> 08:01.040
you need and the features that you need.

08:01.040 --> 08:06.000
Yeah, I would recommend that interview with Wendell because it gives you insight into

08:06.000 --> 08:11.320
how Sci-5 plans to bring value to what is an open platform and an open spec and an open

08:11.320 --> 08:12.320
chip.

08:12.320 --> 08:13.320
Yeah.

08:13.320 --> 08:14.600
And I think one of those ways is that, yeah, you can pick and choose.

08:14.600 --> 08:16.480
You can make it just whatever you need.

08:16.480 --> 08:17.800
Yeah, it is so neat.

08:17.800 --> 08:21.880
Even if you don't really understand any of this stuff, just to see how they can kind

08:21.880 --> 08:26.400
of stand out, it's worth checking out the link in the show notes and catching that interview.

08:26.400 --> 08:27.880
I think it turned out pretty good.

08:27.880 --> 08:31.080
So Codeplay has joined the RISC-V Foundation.

08:31.080 --> 08:34.680
Codeplay is joining the RISC-V Foundation and bringing their tools to the platform along

08:34.680 --> 08:38.760
with their tools around AI, which I think is going to be a big play.

08:38.760 --> 08:40.920
OpenCL also, some of their tools around there.

08:40.920 --> 08:41.920
Yeah, absolutely.

08:41.920 --> 08:47.040
Well, and, you know, as RISC-V comes online and develops, the world we live in is, yes,

08:47.040 --> 08:51.600
we still have general compute, but there's all kinds of different options, specific accelerations,

08:51.600 --> 08:55.680
things for machine learning, machine vision, or all kinds of embedded applications where

08:55.680 --> 09:01.360
you just need a specialized chip, and I think RISC-V is very well posed to take over a lot

09:01.360 --> 09:02.360
of those new markets.

09:02.360 --> 09:07.160
And it's worth noting that they've had some recent investment money land, and they've

09:07.160 --> 09:14.400
also got a new CEO, Chris Latner, who's known for working at Apple on Swift, worked at Tesla,

09:14.400 --> 09:17.640
he worked at Google and invented LLVM.

09:17.640 --> 09:22.760
He now works at RISC, or he now works at Sci-5 on RISC-V.

09:22.760 --> 09:23.880
And that's a pretty big get.

09:23.880 --> 09:27.560
They also got a Qualcomm guy as their CEO now.

09:27.560 --> 09:29.520
So Qualcomm knows about chips.

09:29.520 --> 09:30.520
Yeah, right.

09:30.520 --> 09:33.040
It seems like there's a lot of good pieces falling in line.

09:33.040 --> 09:34.040
Still early days.

09:34.040 --> 09:35.040
We're going to see what's happening.

09:35.040 --> 09:39.000
And, you know, as we said, you won't really be running it on your desktop anytime soon.

09:39.000 --> 09:42.320
But there's more options to start playing with it, start designing, start seeing where

09:42.320 --> 09:47.040
it might make sense if you are in any of these spaces.

09:47.040 --> 09:48.360
lino.com slash land.

09:48.360 --> 09:52.360
Go there, get a $100 60-day credit towards your new account and support the show.

09:52.360 --> 09:57.740
This episode is sponsored by Linode, the world's largest independent cloud for developers.

09:57.740 --> 10:01.960
They started in 2003 as one of the first companies in cloud because they saw what was coming

10:01.960 --> 10:05.640
down the pipe in the Linux kernel and they knew what they could do with it because they're

10:05.640 --> 10:06.760
Linux users.

10:06.760 --> 10:08.120
That's one of the things I love about them.

10:08.120 --> 10:10.700
And they've been around three years before AWS.

10:10.700 --> 10:13.320
So they're independently owned and they're founded on the love for Linux.

10:13.320 --> 10:17.960
That's why they support projects like Kubuntu, Linux Fest Northwest, and yes, your humble

10:17.960 --> 10:18.960
news program.

10:18.960 --> 10:23.720
And, you know, just recently you were, we were taking advantage of Linode and you didn't

10:23.720 --> 10:24.720
even know it.

10:24.720 --> 10:27.440
It was like happening transparently in the show.

10:27.440 --> 10:28.480
Get ready for this.

10:28.480 --> 10:33.680
The clip we just played earlier from Sci-5 played from object storage on Linode.

10:33.680 --> 10:35.200
I know it's crazy.

10:35.200 --> 10:37.240
It blows your mind, but it is true.

10:37.240 --> 10:38.880
We use it for the production here on the show.

10:38.880 --> 10:40.840
We use it as our backend infrastructure.

10:40.840 --> 10:43.800
The fact that they're independently owned and the way they run Linode is all part of

10:43.800 --> 10:44.800
it.

10:44.800 --> 10:48.360
But then if you ever run into any trouble, if you have any trouble getting set up or

10:48.360 --> 10:54.280
have any problems with Linode itself, they have 24-7 customer support by phone or ticket.

10:54.280 --> 10:57.440
And then on top of that, they have hundreds of guides and tutorials to get you started.

10:57.440 --> 11:01.400
They've got a YouTube channel that's got content on it that introduces you to concepts like

11:01.400 --> 11:05.280
Kubernetes, which you can easily manage Kubernetes on Linode.

11:05.280 --> 11:07.920
That's actually one of the things that people love about it.

11:07.920 --> 11:12.280
That and I hear from Alex that it has fantastic Terraform support as well.

11:12.280 --> 11:15.720
But I'm all about the VPSs and the object storage.

11:15.720 --> 11:19.040
Now they have systems that start at $5 a month and you can ramp it up from there.

11:19.040 --> 11:26.000
You got systems with tons of GPU and CPU and even when you go all in with a baller system,

11:26.000 --> 11:30.560
they're still 35% to 50% cheaper than the big platforms.

11:30.560 --> 11:35.160
And you're getting it from a company who's an independent Linux-based company and been

11:35.160 --> 11:38.320
in the community forever, which is just so great.

11:38.320 --> 11:39.520
But I talk about their object storage.

11:39.520 --> 11:40.520
What is it?

11:40.520 --> 11:43.920
If you don't know, object storage is an easy way for you to store and access data without

11:43.920 --> 11:45.600
the need for a front-end server.

11:45.600 --> 11:49.080
You can upload something to their cloud object storage, generate a URL and share it if you

11:49.080 --> 11:53.920
like or set up a static website and have it load crazy fast.

11:53.920 --> 11:57.020
Really they're just dedicated to offering the best virtualized cloud computing as well.

11:57.020 --> 12:01.500
So between all of their services, at the end of it, the core of it is that if it runs on

12:01.500 --> 12:03.300
Linux, it runs on Linode.

12:03.300 --> 12:07.400
And if you go to linode.com slash coder, you get a $100 60 day credit towards your new

12:07.400 --> 12:09.160
account and you support the show.

12:09.160 --> 12:13.880
You let them know you heard about it here as linode.com slash land.

12:13.880 --> 12:17.560
Thanks to Linode for sponsoring Linux Action News and thanks to everyone who supports the

12:17.560 --> 12:22.660
show by visiting linode.com slash land.

12:22.660 --> 12:28.100
It's about to get a lot simpler to install Ubuntu on WSL too, at least if you like the

12:28.100 --> 12:29.100
command line.

12:29.100 --> 12:31.680
Yeah, you could just say Ubuntu is going to be the default now.

12:31.680 --> 12:38.320
On the command line, if you do wsl.exe space dash dash install, when that begins the process,

12:38.320 --> 12:45.520
it will finish now by downloading and installing Ubuntu, which I think this is huge for Canonical.

12:45.520 --> 12:50.200
And it was theirs to announce Canonical led with the story on their company blog.

12:50.200 --> 12:51.400
And it's coming, right?

12:51.400 --> 12:56.040
It's not shipping today in Ubuntu or it's not shipping today in Windows, I should say,

12:56.040 --> 12:58.600
but it's coming with preview builds.

12:58.600 --> 13:03.600
You'll be able to get it and then later on they'll backport it to older versions of Windows

13:03.600 --> 13:04.600
as well.

13:04.600 --> 13:07.920
So you don't actually have to be on the latest and greatest eventually once it's out there.

13:07.920 --> 13:08.920
It is easy.

13:08.920 --> 13:12.280
You know, I'm pretty glad that I don't have to mess up with PowerShell commands anymore

13:12.280 --> 13:16.960
or dig through trying to find the right Windows feature to enable because it's just not how

13:16.960 --> 13:17.960
I'm used to using computers.

13:17.960 --> 13:22.280
And when I am on Windows, the quickest I can get Linux set up in there, the better.

13:22.280 --> 13:27.820
Yeah, I'll actually say I thought the process was kind of crappy before because I didn't

13:27.820 --> 13:28.820
really know what I was doing.

13:28.820 --> 13:31.880
So I went into the add remove features and I added the subsystem, but then I had to go

13:31.880 --> 13:35.720
to the store for some stuff and I didn't necessarily do it in the right order.

13:35.720 --> 13:37.320
And so the experience was really crap.

13:37.320 --> 13:42.040
Like, so I thought if I just went to the store and I tried to install Ubuntu, it would say,

13:42.040 --> 13:43.760
in order to install this, you need the subsystem.

13:43.760 --> 13:44.800
That would make sense.

13:44.800 --> 13:49.840
So I ended up taking multiple trips to the Microsoft store to complete this one task.

13:49.840 --> 13:51.440
And I really did just want Ubuntu.

13:51.440 --> 13:58.280
But you have to wonder if this became the default WSL and just, you know, how the default

13:58.280 --> 13:59.800
reigns supreme.

13:59.800 --> 14:04.420
Does this potentially open the door for a new generation of Ubuntu developers who start

14:04.420 --> 14:10.800
on Windows 10 and then deploy on Azure and never actually have a full-fledged Ubuntu

14:10.800 --> 14:11.800
system locally?

14:11.800 --> 14:17.440
They might never see the GNOME desktop or have a conception of that as Ubuntu.

14:17.440 --> 14:18.440
Maybe we're deluding ourselves.

14:18.440 --> 14:19.880
We don't think that's already the case.

14:19.880 --> 14:20.880
Yeah, maybe so.

14:20.880 --> 14:25.480
I mean, it used to be the big sales pitch of macOS was get a graphical environment that's

14:25.480 --> 14:30.400
polished with commercial applications like Microsoft Office and Adobe Photoshop while

14:30.400 --> 14:33.960
you get access to a powerful Unix command line.

14:33.960 --> 14:37.480
Well, the one thing that macOS doesn't have is it's not Linux.

14:37.480 --> 14:39.440
No, it's just different enough.

14:39.440 --> 14:40.440
Yeah.

14:40.440 --> 14:44.520
And so this is even more compelling because it's all of that same argument plus whichever

14:44.520 --> 14:46.600
user land from Linux you'd like to have.

14:46.600 --> 14:47.600
Right.

14:47.600 --> 14:50.320
And I mean, as you've been seen with all the hard work Canonical has been doing, this is

14:50.320 --> 14:52.280
like a supported version of Ubuntu.

14:52.280 --> 14:53.280
It is Ubuntu.

14:53.280 --> 14:59.080
Yeah, I think that's the bigger story here is it seems to indicate a pretty healthy relationship

14:59.080 --> 15:04.280
and a pretty healthy position of trust because for Microsoft to make it so that way when

15:04.280 --> 15:09.720
you install WSL flagship feature now of Windows 10 for developers, the fact that they are

15:09.720 --> 15:15.040
bundling by default someone else's operating system, I think that's a remarkable statement

15:15.040 --> 15:16.440
of trust for Microsoft.

15:16.440 --> 15:18.920
Yeah, this is going to be what's happening, right?

15:18.920 --> 15:21.400
This short little command line is going to be copy and pasted everywhere.

15:21.400 --> 15:25.640
It'll be in all the default guides and people will be running the latest and greatest Ubuntu

15:25.640 --> 15:26.640
LTS.

15:26.640 --> 15:27.640
Yeah.

15:27.640 --> 15:32.800
So if you're on the Insiders developer channel, you'll be seeing this land on Windows 10 soon.

15:32.800 --> 15:35.360
But otherwise, just sit tight.

15:35.360 --> 15:39.880
You will eventually get it because Microsoft has committed to backporting this particular

15:39.880 --> 15:42.400
feature to previous versions of Windows 10.

15:42.400 --> 15:47.600
Additionally, when you're doing that WSL.exe TAC TAC install, there is an option where

15:47.600 --> 15:52.360
you can do dash D or TAC D and specify the distro or version you want.

15:52.360 --> 15:57.560
So you could actually install Ubuntu 18.04 or 16.04 this way, or potentially another

15:57.560 --> 15:59.160
distro entirely, I think.

15:59.160 --> 16:02.840
I'm not particularly familiar with it, surprise, surprise, not a big Windows 10 user, but it

16:02.840 --> 16:06.280
looks like there's going to be some flexibility and options there.

16:06.280 --> 16:07.800
I like it.

16:07.800 --> 16:13.660
Keeping you up to date on the YouTube DL situation, you may recall last week, YouTube DL was taken

16:13.660 --> 16:18.640
off of GitHub after a takedown notice from the RIAA leveraging the DMCA.

16:18.640 --> 16:24.600
Well, this week, the Software Freedom Conservancy is publicly asking Microsoft to resign from

16:24.600 --> 16:28.920
the RIAA over the YouTube DL takedown.

16:28.920 --> 16:34.560
Some of their reasoning involves YouTube's substantial, as they say, non-infringing uses.

16:34.560 --> 16:38.920
They write that, well, there are many, but to name a few, things like enabling users

16:38.920 --> 16:43.800
to watch YouTube videos without installing any non-free software.

16:43.800 --> 16:48.640
Or watching YouTube at different speeds, including speeds that YouTube doesn't offer.

16:48.640 --> 16:51.400
It's going to be an important feature for accessibility.

16:51.400 --> 16:55.480
Another example is being able to change YouTube's video quality setting manually, especially

16:55.480 --> 17:00.240
in situations where maybe YouTube's algorithm just isn't cutting it, like on an LTE connection.

17:00.240 --> 17:02.120
Yeah, buddy, you can say that again.

17:02.120 --> 17:08.920
I'm often stuck on a connection where my carrier forces 480p, and the way they do that is by

17:08.920 --> 17:13.600
just butting heads with the YouTube client until it forcibly downgrades to 480p.

17:13.600 --> 17:14.600
Ouch.

17:14.600 --> 17:19.400
Yeah, it's a really muddy experience, especially for those pretty drone shots from vlogs.

17:19.400 --> 17:22.520
I just prefer to download the videos and watch them offline.

17:22.520 --> 17:24.440
It's a huge use case for me.

17:24.440 --> 17:26.600
That's why I'm a YouTube premium subscriber.

17:26.600 --> 17:31.600
But additionally, and the Software Conservancy points this out as well, there's a lot of

17:31.600 --> 17:35.920
journalistic reasons to have something like a tool like YouTube DL, including just being

17:35.920 --> 17:40.000
able to fact check easier video analysis, which comes in all the time.

17:40.000 --> 17:42.400
And another big one is bandwidth saving for a team.

17:42.400 --> 17:47.160
There's no reason why we all need to download the same video when I can put it on our shared

17:47.160 --> 17:49.640
system and we can all work from that file.

17:49.640 --> 17:54.440
So there's a lot of use cases for YouTube DL, and I'm really glad the Software Conservancy

17:54.440 --> 17:55.640
is pointing these out.

17:55.640 --> 18:01.400
They go on to say that they view Microsoft's membership in the RIAA as a bigger liability

18:01.400 --> 18:04.840
to the community now that Microsoft controls GitHub.

18:04.840 --> 18:06.880
And I think that's the key point.

18:06.880 --> 18:10.800
It's not that this is just any company with any interest.

18:10.800 --> 18:12.640
It's Microsoft and it's GitHub.

18:12.640 --> 18:15.880
And this is kind of going to be an ongoing conflict of interest, I think.

18:15.880 --> 18:20.280
Yeah, doesn't it kind of feel like the Microsoft joined together with RIAA?

18:20.280 --> 18:24.520
Feels kind of like old business-y Microsoft, and these days we've got a different view,

18:24.520 --> 18:28.440
more code-focused, more open Microsoft, at least in theory.

18:28.440 --> 18:33.740
And the reality is pretty much anyone in any kind of capacity that's dealt with the music

18:33.740 --> 18:35.680
industry ends up in the RIAA.

18:35.680 --> 18:39.040
So Microsoft selling music tracks.

18:39.040 --> 18:43.600
I understand why they're in it, but it does seem to be a nasty conflict of interest.

18:43.600 --> 18:49.900
And this is going to come at a time where it appears the RIAA is really ramping up their

18:49.900 --> 18:54.600
approach and their attempt to take down YouTube ripping platforms.

18:54.600 --> 18:58.440
Torrent Freak has been following this issue pretty closely for a while, and they had a

18:58.440 --> 19:00.440
post on October 29th.

19:00.440 --> 19:05.360
The RIAA is ramping up the pressure on a wide range of platforms allegedly involved in music

19:05.360 --> 19:06.360
piracy.

19:06.360 --> 19:12.720
Two DMCA takedown subpoenas obtained against Cloudflare and Namecheap require that the

19:12.720 --> 19:18.480
companies hand over all information they hold on more than 40 torrent sites, streaming portals,

19:18.480 --> 19:20.360
and YouTube ripping services.

19:20.360 --> 19:26.560
Now, if you're not familiar, a DMCA subpoena is just one tool in the toolbox the RIAA has

19:26.560 --> 19:31.560
here, but it's pretty handy because it's easily obtained from a U.S. court without much oversight

19:31.560 --> 19:32.560
needed from a judge.

19:32.560 --> 19:36.960
And it can be served on various companies, requiring them to hand over information on

19:36.960 --> 19:39.120
their allegedly infringing clients.

19:39.120 --> 19:44.360
When it comes to these DMCA subpoenas, well, naming them at Cloudflare is a popular choice.

19:44.360 --> 19:48.680
The company not only has access to the customer information handed over as part of the signup

19:48.680 --> 19:53.120
process, but in some instances, it's right in front and can identify the true server

19:53.120 --> 19:57.040
locations or IP addresses of the pirate site servers behind them.

19:57.040 --> 20:01.040
And you can see how this would be a popular destination like at Namecheap, too.

20:01.040 --> 20:04.800
You go after their domain registration or perhaps even their hosting there.

20:04.800 --> 20:08.800
And Namecheap and Cloudflare are legally required to comply with these.

20:08.800 --> 20:09.800
No choice.

20:09.800 --> 20:12.280
So this is going to be more of a thing.

20:12.280 --> 20:17.080
And I really kind of worry about Microsoft's conflict of interest there, especially as

20:17.080 --> 20:20.320
the RIAA feels like they need to take this on.

20:20.320 --> 20:25.200
However, it doesn't appear to be all bad news.

20:25.200 --> 20:30.780
On October 26, one of the YouTube DL developers tweeted a screenshot where it seems that Nat

20:30.780 --> 20:37.560
Friedman, the CEO of GitHub, came in to their IRC, found them, and opened a dialogue with

20:37.560 --> 20:43.560
the developers on what steps need to be taken to get their GitHub project relisted and back

20:43.560 --> 20:44.560
online.

20:44.560 --> 20:47.220
Yeah, isn't that interesting?

20:47.220 --> 20:50.120
The users there asked, you know, okay, well, what might need to happen?

20:50.120 --> 20:55.040
And we previously discussed the issues around linking to some copyrighted material over

20:55.040 --> 20:56.040
on YouTube, right?

20:56.040 --> 20:57.040
Okay.

20:57.040 --> 20:59.880
In the test, there were some test cases and examples in the readme chain like, yeah, here,

20:59.880 --> 21:04.040
here's a video, even if the whole file wasn't technically downloaded.

21:04.040 --> 21:05.080
That would need to be removed.

21:05.080 --> 21:11.360
But also, Nat notes some stuff about a rolling cipher circumvention and suggests that, too,

21:11.360 --> 21:12.360
would have to come out.

21:12.360 --> 21:13.360
Uh-oh.

21:13.360 --> 21:17.780
Okay, so can you tell me a little bit about this rolling cipher circumvention code?

21:17.780 --> 21:20.680
Something tells me that's kind of critical to how YouTube DL works.

21:20.680 --> 21:23.880
Yeah, and this is part of the DMCA where, you know, you can get in trouble for trying

21:23.880 --> 21:26.760
to break controlled access to things.

21:26.760 --> 21:30.120
What's going on here is, well, when you go to a YouTube page, the publicly accessible

21:30.120 --> 21:34.520
version, you also have to go figure out what the actual link to the file that is going

21:34.520 --> 21:35.920
to get played is.

21:35.920 --> 21:38.080
And Google's got some code to do that.

21:38.080 --> 21:42.120
So it's a public URL for that, say, MP4 file on the back end, but they obscure it from

21:42.120 --> 21:43.120
the client.

21:43.120 --> 21:44.120
Exactly.

21:44.120 --> 21:47.400
And YouTube DL, of course, has to have code to take the public URL, the main one that

21:47.400 --> 21:51.280
you go to actually watch the video, and then determine the real URL for the file hosted,

21:51.280 --> 21:55.200
even though, as you say, once you have the URL, there's no controls on it, you can just

21:55.200 --> 21:56.200
download it.

21:56.200 --> 22:01.280
So the controlling cipher circumvention code figures out what the private URL is from the

22:01.280 --> 22:03.160
public URL of a YouTube video.

22:03.160 --> 22:04.160
Exactly.

22:04.160 --> 22:05.880
Still all operating on public stuff.

22:05.880 --> 22:10.600
They've just figured out what Google's doing to go, you know, track from the original stuff

22:10.600 --> 22:13.360
to the secret, quote unquote, secret stuff behind.

22:13.360 --> 22:16.800
And this kind of explains why sometimes you need to update YouTube DL for it to work,

22:16.800 --> 22:17.800
right?

22:17.800 --> 22:19.120
Because there's probably something in this area has changed.

22:19.120 --> 22:22.760
Yeah, you know, as YouTube changes things, updates the cipher, tweaks things here or

22:22.760 --> 22:24.520
there, YouTube DL has to keep up.

22:24.520 --> 22:28.080
Now, we should say, right, YouTube DL does download from a whole bunch of stuff that

22:28.080 --> 22:30.960
isn't YouTube very handy.

22:30.960 --> 22:33.620
But it's right in the name, it's one of its major use cases.

22:33.620 --> 22:39.320
So yes, they might get their GitHub repo back, but will it be the full working system?

22:39.320 --> 22:43.720
Right, you could see a situation where, okay, they clean up the docs, they get the music

22:43.720 --> 22:45.800
video links out of there.

22:45.800 --> 22:51.760
And then they post a version up on GitHub that doesn't have this rolling cipher circumvention

22:51.760 --> 22:54.400
code that you have to then go get separately.

22:54.400 --> 22:58.320
And from like a Linux user's perspective, there'll probably be the YouTube DL package

22:58.320 --> 23:00.920
and then the YouTube DL cipher package.

23:00.920 --> 23:02.320
Reminds me of the days of Codex, really.

23:02.320 --> 23:04.120
Yeah, YouTube DL dash YouTube, again?

23:04.120 --> 23:05.120
I don't know.

23:05.120 --> 23:09.720
I mean, you could see something like that, although from a project, they have to be looking

23:09.720 --> 23:12.480
at this going, maybe we'll just self host, screw this.

23:12.480 --> 23:14.800
This is just not going to work for us.

23:14.800 --> 23:16.640
I don't know, there's pros and cons to that.

23:16.640 --> 23:20.280
We discussed that further in Linux Unplugged, so I'll leave that conversation there.

23:20.280 --> 23:25.760
But I hope someone on that development team has at least gotten some legal advice.

23:25.760 --> 23:29.520
Because this is getting, when you look at what the RIA is up to, and you look at the

23:29.520 --> 23:33.800
complications here, and the fact that this rolling cipher circumvention code appears

23:33.800 --> 23:39.000
to be part of the issue, that's where I start to think, this project needs some legal consulting.

23:39.000 --> 23:44.320
Yeah, I mean, this issue's not going away anytime soon, I'm afraid.

23:44.320 --> 23:49.760
Right now, all that said, there is a brand new fresh version of YouTube DL out.

23:49.760 --> 23:54.040
So go get your updates if you can, it'll probably be packaged soon.

23:54.040 --> 23:55.040
It's good to see.

23:55.040 --> 23:58.240
Yeah, easiest place, it's just their homepage, youtube-dl.org.

23:58.240 --> 24:03.600
We were looking at the story on Hacker News, and the top comment on Hacker News is, quote,

24:03.600 --> 24:08.360
I'd never heard of YouTube DL prior to this whole saga, but I used it for the first time

24:08.360 --> 24:10.500
yesterday and it works great.

24:10.500 --> 24:16.000
I should be thanking the RIA for cluing me in.

24:16.000 --> 24:19.560
If that isn't a perfect example of the Streisand effect right there.

24:19.560 --> 24:20.800
It really is.

24:20.800 --> 24:24.760
And kudos to the YouTube DL project, tool I use all the time.

24:24.760 --> 24:28.980
Well that does bring us to the end of this week's Linux Action News, but go to linuxactionnews.com

24:28.980 --> 24:31.680
slash subscribe for all the ways to get new episodes.

24:31.680 --> 24:35.440
And linuxactionnews.com slash contact for ways to get in touch.

24:35.440 --> 24:38.400
And if you haven't done this already, why not get the all shows feed?

24:38.400 --> 24:42.080
You can find that in your podcast catcher, just search for all Jupiter Broadcasting shows,

24:42.080 --> 24:43.080
or there's a link on our website.

24:43.080 --> 24:47.960
We'll be back next Monday with our weekly take on the latest Linux and open source news.

24:47.960 --> 24:50.440
Thanks for joining us and we will see you next week.


Hello, and welcome to Linux Action News, episode 179, recorded on March 7th, 2021. I'm Chris.
And I'm Wes.
Hello, Wes. Let's do the news.
We start this week with a story that might have been passed over by some, but could end
up having a big impact on future Linux desktop apps. During the Flutter Engage live event
on March 3rd, Google announced Flutter 2, with tons of new updates. It includes Flutter's
web support being upgraded from beta to stable, and among many other things, expanded Linux
support. For those not in the know, Flutter is an open source UI SDK created by Google
to help those who want to build quick and modern applications for a wide range of operating
systems, including Android, Linux, Mac, iOS, Windows, Google's own Fuchsia, and the web.
And if the title of the show didn't clue you, what we are interested in is how this impacts
Linux. And it seems, it seems there could be some long term impacts. This week, Canonical's
engineering manager for the Ubuntu desktop at Canonical joined Google during that Flutter
event.
Hello, I'm Ken Van Dyne, engineering manager for Ubuntu desktop at Canonical.
And Ken wanted to give a bit of context for the level of commitment that Canonical was
making to Flutter. So Ken gives us an insight into the work that Canonical has done so far
to bring Flutter to the Linux desktop.
When desktop application support in Flutter was announced, we saw an exciting opportunity
to make Linux distributions, including Ubuntu, an attractive target platform for Flutter
app developers. Flutter's native multiplatform story is growing rapidly, and we wanted to
be at the vanguard. We worked with the Flutter team to bring desktop Linux support to Flutter.
It's still early days, but Canonical is working on improving Flutter's Linux support.
To do so, we will work to bring full multi-windows support to Flutter for desktop across all
the desktop platforms that Flutter supports. We are working with the Flutter team at Google
on the specification now, and we will start the engineering work very soon.
Of course, plugins are an essential part of the Flutter app ecosystem as well. We are
working on enabling popular Flutter plugins for Linux, including Flutter support for Firebase,
Bluetooth, network connectivity, desktop notifications, and more.
And it's pretty clear Canonical is not messing around here. They see the future of desktop
Linux applications as being Flutter-based, and Ken says that's why they chose to build
their new Ubuntu installer in Flutter. It's a statement of their commitment.
Now that we have enabled Flutter for Linux, for other app developers, it's time to further
our commitment by building our own Linux apps with Flutter. As we've already announced,
we are developing our next-generation Ubuntu desktop installer in Flutter. Soon, every
user who installs Ubuntu desktop will be doing so with our new installer built in Flutter
using the Yaru style. Choosing the installer as our first app written in Flutter is a bold
move to say the least. It's the first thing our users see, and as everyone knows, that
first impression is critical.
And they're not stopping with the installer. Canonical is planning to use Flutter for all
future desktop apps they make.
The desktop team had not only worked to make Linux a first-class citizen in Flutter. Flutter
is the default choice for future desktop and mobile apps created by Canonical.
I think the community is having a bit of a challenge at processing this information.
I think some don't know if they should just dismiss it. Others worry that it's not invented
here syndrome all over again. Why don't they just use a good old classic native Linux application
that's GTK, etc, etc, etc. But it turns out that is actually one of the advantages of
Flutter and might be one of the things that is attracting Canonical. It's actually the
opposite of not invented here because it's Google that invented it, and it's Canonical
hitching themselves to Google's wagon. And then when Flutter builds, when a Flutter app
builds, it builds to a native Linux application. So unlike Electron, which is running inside
a Chromium runtime, your application like Slack, Flutter apps are actually native Linux
desktop applications and quite quick. We played around with building one before the show.
Yeah, I think that's maybe one of the good ways to frame this is Electron apps fill a
lot of the space from, you know, commercially designed applications, proprietary stuff,
but even a lot of open source applications, especially if they're cross-platform. Electron
is a nice value to be able to just port it there instantly. But Electron is kind of a
clue, right? We just bottled up a web browser, people knew JavaScript anyway. Whereas Flutter
and the Dart language underneath, it's all been designed for this purpose and therefore
it can be a lot faster and leaner.
Yeah, and as you touched on earlier, it's still kind of early days. Dart itself is not
necessarily ideal on Linux. There is still a lot of work to be done to make these applications
feel like full-fledged desktop Linux application, multi-window support being one of them, themes
support and just overall performance improvements. But those are all areas that Canonical has
committed to Google that they're going to work on directly. And their statement of basing
their installer on this is their way of saying, this is something that's going to stick around
for many years. We're going to ship this in LTSs, which means we have decades ahead of
us of working with Flutter.
So if you're a Linux desktop application developer and you want to target our desktop, you can
ship in Flutter. It will be Yaru themed. It will be a GTK application, but yet you get
all the development kind of perks, a lot of the development perks of electron development.
You can, when you're building a Flutter application, it's kind of like a real time thing. You can
make an update and immediately see how the application responds. It's running in a VM
while you develop it.
Yeah, you get a lot of the modern workflow that people come to expect for developing
from the web or developing mobile applications, but you get it for basically the whole range
of things Flutter supports. That's nice.
And we're not necessarily trying to advocate one thing over another, but when something
comes along that offers a lot of the benefits of building an electron app, but with the
benefits of native on Linux and also Windows, Mac OS, Android, and iOS.
Well, yeah, I think part of this too is, we like to complain about not having native apps
or Linux or not enough of them, but it's just a different platform, right? People have to
use that. We almost have to have a sales pitch to developers of like, how do you do this?
Flutter is going to be something people use for all kinds of other stuff. They might be
making web apps, they might be using it to make a mobile app at work, and they can just
transfer those skills to make Linux apps that maybe we won't hate. I'm not sure. It's very
much early days. It's still in beta really. So this could all not work out, but it's interesting
to watch.
How do you think Canonical is doing this? I mean, it seems pretty obvious why Google
would do it. There's a lot of competitive reasons for Google to do this, but why is
Canonical getting so into this? Like they're developing resources to improve Google's product
essentially. What do you suppose the advantage for them is?
I think part of it must be just, there's a lot of resources they can leverage. If they
can add some of their expertise, and it does make me a little more confident having a bunch
of Canonical involved here managing some of these Linux implementations rather than say
Google doing it themselves directly. I mean, they know what they're doing in this space,
they have experience. I think what they might be getting out of it is just that they can
have developers, they can hire people that don't necessarily have to be specifically
skilled targeting the Linux platform, help them bridge that gap, but get access to all
the experience they have.
Just the brief playing around we did before the show to get some experience with it was
clear there's a lot of tooling advantages. Flutter is very modern. They've taken a lot
of ideas from different places.
You get fancy type hints, it works with like IntelliJ, your IDEs people are already using
in the field.
Yeah. And so it could be, yeah, it's just a tool that makes sense for them from an organizational
standpoint. I think there's the other element of this is Canonical has really become a multi-vendor
player here. They've got a pretty tight relationship with Microsoft and Azure. We talked about
that sales channel that they have. Plus they have WSL, that relationship there. Then we've
also seen that Canonical has a good relationship with AWS for deploying Canonical supported
Ubuntu images on AWS. And now here we see Canonical buddying up with Google to work
with Flutter.
Now, obviously there's some in the community, they're going to go, God, that's gross. But
there's others in the community that go, that's the thing, you need somebody to make those
interfaces with these giants.
In some ways they're sort of representing a big chunk of the Linux using world.
And who else really could do it? They're in a unique competitive position where they can
interface with all of these different vendors who are competitors with each other and sort
of play the neutral player part.
Yes. They're a sort of independent entity. They've got expertise in a sort of a specific
layer of the stack, which isn't necessarily where those other people are directly competing.
Just makes sense.
Keeps things friendly with the big players as well. So that's got to be a part of why
they're choosing Flutter.
But then I think there's a third reason outside the tooling, outside the relationships. Ken
says something in his little bit in the keynote, and he says that Canonical is going to base
all of their future applications on Flutter. And that I think is maybe a more telling statement
than it seems like at first.
They must have some, this is strategy. They must have something they're building, something
they've identified that needs to be deployed on the desktop. That's a Canonical creation.
Because when you think about it, they make their installer, they make their welcome screen.
I mean, there's not a lot of graphical tools. There's a lot of software Canonical writes.
Snap store, I guess.
But there's not a lot of desktop applications Canonical makes. And Ken said in that keynote
that future Canonical Ubuntu desktops will be based, desktop apps will be based on Flutter.
So there's got to be something they have in the works and they've identified this is the
tooling chain that they want to use. And so I think it's these three strategic reasons
coming together, the relationship, the fact that this will be a native application that
looks good on Linux. It's very accessible to developers. That's all got to be playing
a role here. But I don't see it necessarily equaling great success in the Linux ecosystem.
I think it's tied to Dart. Its connections to Google will not make it like the default
go-to solution for Linux developers. But for people who are trying to write high-performant
multi-platform applications, I could definitely see it being a contender.
And I'd say it's definitely one of those still in the interesting to watch stage technologies.
Flutter and Dart haven't yet taken over everything. Google's putting a lot of work behind it.
It seems like there are folks that are interested and more and more apps are being made with
it. I don't know that we've crested that hill yet. I think that is just going to be
a huge part of it too. If Flutter really takes off, maybe this is more of a success. Otherwise,
it might just be a niche tool set that Canonical chooses to use. And if it works, that's fine.
It could end up being that. I think Google would like to see it go otherwise. If you
had a Magic West wand, what would you have them use instead of Flutter or Electron? Is
there something else that comes to mind that would solve this problem?
Not immediately. At least that offers the same stuff. The elementary folks have come
closer in their own ways with Vala and their own tool set. But it's still kind of a niche
Linux technology. You're not going to get exposed to that if you're not specifically
targeting desktop apps or even those distributions. That's the main thing that it offers. And
that's what's happening with Electron. It's pretty rare that you see something that's
cross-platform. Maybe GTK and Qt can do that, but then you are riding all those hooks yourselves
to interface at the lower levels. You just don't worry about that as much with something
like Flutter.
Yep, for sure. My kind of irrational, really no-facts-back-this-up worry about this is
that Flutter is a hit. What do I know? I got it up and running with your help, but what
do I know?
You're a Flutter developer now.
I built an app. And I thought, oh yeah, okay, that was actually pretty painless. I could
see this being successful. And then we build all these Flutter apps, and then Fuchsia comes
along and says, oh, by the way, Flutter? Just one click to run your apps on Fuchsia OS.
Part right over from Linux in one click.
I guess Ubuntu will become a Fuchsia distribution.
Linode.com slash LAN. Go there to get a $100 60-day credit, and of course you support the
show. Linode makes cloud computing simple, affordable, and accessible. They're our cloud
hosting provider of choice, and a lot of you have tried them out by going to linode.com
slash LAN. And a very common bit of feedback I get, besides how exceptional their support
is, is it seems like their network is just a bit faster than anybody else you've ever
tried before.
Well, this is one of the advantages of being around forever in cloud computing. They started
in 2003 as one of the first businesses in this gig. And that meant that they had time
to build things up and make great deals. And in 2016, they went all in on controlling their
network future. They became their own ISP and built out a global network, which gave
them tons of benefits, including having full control over where their network goes in the
future, strategic buying opportunities for multiple providers, and obviously the best
peering agreements they could get. And it set a foundation for them to tackle a global
data center network. And now they have 11 data centers worldwide. But this kind of thinking
radiates the entire Linode service. And it's exceptional. From $5 a month rigs to super
powerful and fast systems that can do GPU compute, check them out and get that $100
60 day credit and see what works for you. Try out object storage, check out their cloud
management dashboard, their API, which is fantastic, their documentation, which is extensive,
all of it. Linode.com slash LAN and a big thank you to everybody who goes there and
supports the show. Linode.com slash LAN. Google announced they're tweaking the release
cycle of Chrome to make it a bit faster. They note on their blog, as we've improved our
testing and release processes for Chrome, and deployed bi weekly security updates to
improve our patch gap became clear that we could shorten our release cycle and deliver
new features more quickly. Not surprised to see this at all. It was towards the end of
2019 that Mozilla started shifting the Firefox release cycle to four weeks. And well, Google,
you know, they can't be undone. They have to have the big version numbers and the fast
releases as well. But I don't know, Wes, maybe it's the old sys admin in me. But it seems
like web browsers are getting developed at a breakneck pace. I really can't can hardly
keep track of even the version numbers anymore. Well, they are some of the most important
applications we use on a day to day basis. And both Mozilla and Google cite that users
want features faster, more features faster. It does sound like me. And the browser has
kind of just become more like a back end service. It's not really a classic versioned application.
It's being developed almost continually and deployed almost often. If that makes you nervous,
there is some good news in this post, which we will have a link to this in the show notes
they say that they're going to add a new extended stable option, which kind of reminds me of
Firefox's ESR release. It'll have a milestone update every eight weeks. Extended stable
will be available to enterprise administrators and chromium and betters. But they also note
that security updates on the extended stable version will be released every two weeks.
So you're still going to see some updates coming, but they're not feature changes. They're
just security fixes. And then of course, Chrome OS, a bit of a question mark in all of this
as well. They say that they plan to support multiple stable release options and that they're
going to have more information for Chrome OS users and administrators soon. But the
core issue that Google's really dealing with and honestly Firefox as well, is the web is
not standing still. It is constantly a moving target. Well, because the rest of the web
is an online, you know, there's not versioned different webs. It's all the web that's live
all the time. And so a browser has to have some of those elements in some ways, right?
It does have features that, you know, might change between versions, but fundamentally
it's connected to the real world as it exists right now. Yeah, I guess I don't really have
a problem per se with software updating super frequently. I mean, I love rolling distributions.
I like new software. But if something's going to get updated on a really regular basis,
I strongly prefer it's managed by a distro package manager. I'll give you an example
where I draw the line. So Reaper, which we use to record and produce this show, the audio
editor, it has updates every so often. And so it's not a big deal to go get the tar file
and download and extract it and essentially quote unquote, install it. I don't mind that
being a manual process from time to time, but if my web browser is going to update once
a month and I have two browsers that are updating once a month and they're a pretty crucial
piece of software, like you say, I just trust that to be done by the package manager. I
have had experiences even recently that were like the worst of the Windows days where I
took an old MacBook and I dusted it off. I cracked it open for the first time. It had
legitimately been a little while. And if I maybe in being generous here with 10 minutes,
it may have even been 20 minutes that that thing just sat there burning CPU. I sent you
screenshots. It's just burning CPU doing app updates. And every time I'd launch an app,
I'd get an update prompt asking me if I want to quit and relaunch when I'm in the middle
of just trying to get something done. And it's just this hodgepodge mess on the Mac.
It's not so bad if you run a Mac 24 seven. But if you just visit occasionally and you
fire it up, it's it's a crap experience now because all of these updates that are frequently
happening and each update is being managed by the developer directly. And it sounds good
in principle, but the end result as a user is a real, real crappy 10, 20 minutes when
you turn a box on for the first time in a few weeks. And that's where I just trust a
distribution package manager to handle this stuff a lot smarter.
That at least gives you control.
Yeah, it's on my terms. It's not what I'm just trying to do something. And Chrome, Chrome
does that on the Mac, on the Mac and on Windows, I think, too. It self-updates and it just
sort of does it in the background without any warning or any prompting. And while I
get the idea and it's important to get those updates down to end users, I don't like not
having any control over when it just all of a sudden demands a lot of resources from my
machine.
Well, it's a good thing you're not running Windows then. And really, this problem in
a larger context is something the Linux Mint distribution is also struggling with right
now. And in upcoming releases, developers may insist that users install some of those
darn patches.
This is a big change. And in what has turned into a series of blog posts, we've learned
that Linux Mint server side statistics give us an indication that around 30% of users
apply updates in about less than a week, 30%. And then it's kind of a drop off after that.
But even more concerning is that their stats indicate around five to 30. And Clem says
it's not super clear. They don't have great data here. But around five to 30% of their
users are still running Linux Mint 17, which was end of life in April of 2019.
Yeah, that's a big range. And it's kind of hard to put these numbers into context without
some data to compare it to other distributions. And I guess, ideally, some more and better
data. But it's clear that the Mint Devs think this is an issue.
Yeah, I mean, they've written a post that just says update your computer exclamation
mark. I mean, they're really trying to address this. I think they've realized there's been
an issue that's kind of become the culture of Mint users, I think, to avoid updates.
And the part of the challenge, it seems, for the developers to really solve this is they
don't have a great set of data to work with. Clem says in the next release, the update
manager won't just look for available updates, but will also keep track of particular metrics
and be able to detect cases where updates are overlooked. In some cases, the update
manager will be able to remind you that you should probably apply these updates. And in
certain cases, it sounds like it's going to kind of insist that you install the updates.
You know, I'm not really clear what that means. But the component of this where it's going
to provide better, more complete information, reminders that there are updates that are
available and that you might need to install for security reasons, that seems like a good
thing or at least a good intention.
Yeah, it'll be one to watch because I think Linux Mint made a little bit of hay out of
trying to create an environment that didn't change more than it needs to. And one of the
ways that that was accomplished was by assigning sort of a number level to updates. You're
probably familiar with the Mint updater.
I remember this.
Yeah, you get these different numbers. And it kind of is an implicit statement that some
updates are less important than others. When you have kind of a more complex situation
when it comes to software on a Linux distribution where so many things are linked to other things,
you kind of have to update everything and keep it all up to date. And I think by calling
some updates out and saying, this is a level one update, this is a level four update, it
sort of set an acceptance among users that it's okay to skip certain updates. And I think
that bears out in this data that's been released here is that there's a bit of a culture of
skipping updates and some users even consider that potentially a feature of Mint. And so
to now try to move that culture towards one that's more accepting of updates is going
to be a tricky thing for the project to pull off, not only from a cultural standpoint,
but from a technology standpoint, too. They got to build the tools that their users are
going to find appealing to use.
Yeah, it's kind of the start of a new conversation.
He does point out timeshift is available.
For the most part, these updates should just work. And if they don't, well, they need to
figure that out. Also, they have to get fixed one way or another.
Snapshots are your friend.
You know, I can certainly appreciate why they want this to happen, though, when you're doing
all the hard work to get those updates shipped, especially if they're important, they might,
you know, fix some of the bugs your users are complaining about, or it might be an important
security update. It kind of sucks to have people not using them. Like, for example,
that recent Cinnamon update.
That's a great example. So users are having this problem where the memory usage on their
system just keeps going up and up and up. Clem writes that they expect the desktop,
a clean Mint desktop to take somewhere between 80 megabytes of RAM, and maybe a gigabyte,
but users are seeing two, four, six gigs of RAM. And some of these systems are not very
high end boxes. And Clem writes they don't know what's causing these Cinnamon desktop
memory leaks yet, but they have a workaround that essentially watches to see free memory
and will just restart Cinnamon for you. It's kind of a clunker, but I guess it's better
than your whole system locking up from a low memory condition. But if people are not installing
these updates, they can't get the workaround.
Linux.ting.com. I understand you've got a lot of subscriptions. There's a lot of things
to pay for these days. A crazy expensive mobile bill shouldn't be one of them. And if you
know how to sync your podcast or your music or just take advantage of being on Wi-Fi before
you hit the road, you can save a ton of money with Ting. It's never been a better time to
join Ting. Now they have plans for anybody at any data size or usage, but Ting has some
really clever plans right now. If you can be strategic about how you use your data,
you can save just a substantial amount of money. What I love about Ting is they have
three nationwide networks to choose from. I mostly bounce between AT&T and Verizon,
but I love that flexibility. And they even have 5G coverage where it's available. But
the great thing about Ting is no contract. And if you use two gigs, 20 gigs or more,
there's a perfect plan for you now over at Ting. And every single plan gets access to
Ting's award-winning customer service. With nationwide LTE and 5G coverage, you're going
to have coverage wherever anyone has coverage. That's a really nice piece of mind thing
about Ting. And with the plan to fit every user and three great networks to choose from,
it's really simple to switch to Ting because just about every darn phone is supported now.
You can figure out if your phone works and you can just bring it right over by going
to linux.ting.com. Take a look. If it does, they're going to give you $25 in service credits.
That might just pay for your first month. That's how good of a deal Ting is. Now if
you need a new phone, they'll sell one to you and you can take our linux.ting.com $25
and apply to that as well. But I'm going to make a bet that if you have a kind of a modern
phone and you're on one of the major carriers now, Ting's going to work. They'll just send
you a SIM card and you'll be up and going in minutes once you receive it in the mail.
That's awesome. And cutting your phone bill in half has literally never been easier. I've
been a Ting customer forever and I can tell you these brand new plans are spicy. Go check
them out right now. The next generation of Ting mobile is here. See how much you could
save and get $25 off at linux.ting.com.
In one of my favorite moments this week, Linus Torvalds wrote on the Linux kernel mailing
list, hey peeps, hey Linus. He went on and it only gets worse from here unfortunately.
Some of you may have already noticed that in my public git tree, the 512 RC1 tag has
magically been renamed to 512 RC1 don't use.
Don't use? It turns out there was a severe data corruption bug that hit systems that
use a swap file rather than a dedicated swap partition.
Linus went on to say, as far as I know, all the normal distributions set things up with
swap partitions, not files, because honestly, swap files tend to be slower and have various
other complexity issues.
That might be true, but if that smells a little funny to you, I agree. I mean, just top of
mind, Ubuntu has been using swap files by default for a long time. But this reminds
us really of the role that distributions play. This is a bug that we never really have to
worry about. It's managed by the distribution and these kind of kernel updates are specifically
watched by the people putting the distributions together.
So really, we kind of get the best of both worlds. We get to sit back and watch this
really kind of remarkable piece of software be created and and watch the team respond
with really no immediate consequences to us as users.
Yeah, and Linus was very clear to point out this was caught in the RC stage during, you
know, mostly normal testing. But to me, his tone seemed a little bit sheepish. I mean,
I think this is a little embarrassing for the kernel. And perhaps rightfully so. They
take data integrity seriously and having swap just spraying all over your file system. It's
kind of embarrassing. As he put it, I want everybody to be aware of this because if it
bites you, it bites you hard. You can end up with a file system that is essentially
overwritten by random swap data. This is what we in the industry call double on good.
Indeed. Well, a quick PSA before we go. The container plumbing days is just around the
corner as we are recording this. So save the date March 9, through the 10th. It's a two
day event that investigates, discusses hacks and learns and celebrates the lower level
of open source container technologies. If this is something you've wanted to learn,
well, this could be your chance to do it. Here's a taste of some of the topics being
explored container runtimes, security and isolation, virtualization inside containers,
and of course, Linux c groups, namespaces and other kernel features that power containers.
Our plumbing days is sponsored by Red Hat. It's never really too late to learn or get
a refresher, right? And while you're doing that, don't worry. We'll keep you updated
on the latest Linux news that you should know about just go to Linux action news.com slash
subscribe for all the ways to get new episodes and Linux action news.com slash contact for
ways to get in touch. If you're considering a last pass alternative right now check out
self hosted.show slash 39 we run down our favorites and the ones that we self host.
We'll be back next Monday with our weekly take on the latest Linux and open source news.
Thanks for joining us and we will see you next week.

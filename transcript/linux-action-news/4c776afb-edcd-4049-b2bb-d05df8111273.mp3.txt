Hello, and welcome to Linux Action News, episode 230, recorded on March 2nd, 2022.
I'm Chris.
And I'm Wes.
Hello, Wes.
Let's do the news.
We start this week with a quick state of the deck.
Valve's team held a series of interviews, and during one chat with IGN, Valve's Lawrence
Yang touched on the overall production of the deck, mentioning, quote, in production
terms, it'll ramp up very quickly.
In the first month, very quickly, we'll be in the tens of thousands.
By the second month, we'll be in the hundreds of thousands.
And beyond that, it'll grow even quicker.
Woohoo, here come the decks, and here come the OS updates, which are still landing, as
you maybe might expect.
Viewers on Reddit reported some rather nasty thumbstick drift, which is an issue that has
impacted many controllers over the years.
However, this one seemed to be caused by a regression in a recent firmware update, and
Valve has now corrected that issue.
Unfortunately, it's not all bug fixes and good news.
We've gotten some bad news as well.
Bungie, makers of the popular game Destiny 2, have threatened to ban players who attempt
to bypass compatibility requirements on the deck.
Okay, maybe that doesn't sound so bad.
Until you realize that those compatibility requirements, well, they mandate Windows.
This is such a shame.
You know, Bungie has a long history, and their start was in supporting platforms that didn't
necessarily have mainstream support.
So it's a shame to see this.
But they updated their help page to give us all a hand so we can sort ourselves out, and
the new section is titled Steam Deck and Destiny 2.
And I'll just read a little bit to help everybody get on the same page.
It reads, Destiny 2 is not supported for play on the Steam Deck or any system utilizing
Steam Play's Proton unless Windows is installed and running.
Players who attempt to launch Destiny 2 on the Steam Deck through SteamOS or Proton will
be unable to enter the game and will be returned to the game library after a short time.
Players who attempt to bypass Destiny 2's incompatibility will be met with a game ban.
And man, what a shame, because speaking for myself, I'm very disappointed.
For one reason, this is like the number one game I wanted to play on the deck.
I really kind of fell in love with Destiny 2 when I tried it out on Stadia.
And that's my other point in all this.
I don't really understand even why Bungie is doing this, because I played Destiny 2
on Stadia, which runs on Linux.
So they have a Linux port of Destiny 2.
So it's clearly just like a lazy, heavy-handed way to ensure that their malware-styled anti-cheat
crap still works.
They don't even really seem to give deck owners a full answer here.
I mean, yeah, okay, they tell you what's going to happen, but they don't make it clear
why or what the issue is.
We're left to just assume it's anti-cheat related, because historically that's been
one of the issues with Proton support for a variety of games, despite all of Valve and
Collabra's hard work in this area.
I suppose one plausible interpretation that is maybe a little more charitable is to suggest
that Bungie might be buying some time to get that Stadia Linux version actually working
on the Deck.
And they don't really want users trying to half-ass the game support in another way in
the meantime, and perhaps having a bad experience.
If that's true, just tell us.
I'm sure Valve and Collabra will be happy to help.
Right.
Great point.
Yeah, they've offered.
You know, speaking of Collabra, we did get a little more insight into what they did to
get the Deck where it is in collaboration with Valve in a blog post on their website,
which we will have linked.
They go into some detail about all of this, and they talk about specifically the AB update
system they had to create for SteamOS 3, which is now Arch-based.
They also note in that post that the active operating system, it's a read-only partition.
They also go into some juicy details about just exactly how those updates work.
Quote, when upgrading, a new operating system image is written to whichever partition is
not currently in use before rebooting the system.
Then a specialized bootloader module automatically selects the newest operating system and boots
into it.
If that upgrade went successfully, you can continue to just use that new OS, and the
old system partition is going to be used for the next upgrade.
But if the upgraded version does not successfully boot, the bootloader automatically falls back
to the previous system partition, and you can try that update again later.
And maybe most interesting of all, they write, of course, new operating system images are
downloaded with block-based deltas, so only the changed parts need to be redownloaded.
That's super cool.
I love that kind of stuff that's going to save you download time, especially when you're
just trying to get this thing going and you want to play a game.
You don't want to wait for all the updates to download, but you also don't want to get
far behind.
You know, really, we're just following the highlights here.
But Liam over at Gaming on Linux has been really keeping his ear to the ground, doing
great work capturing the day-to-day developments, as well as Michael Larable over at Ferronik.
So those are two resources to check on the daily if you're interested in that level of
developments around this device.
But otherwise, we're going to keep an eye out for any major updates, any of the big
picture macro stuff, but I suspect at this point, we're going to see incremental things,
theme updates, compatibility improvements, that sort of stuff, and the next big news
items will land when consumers actually start getting these things into their hands at some
actual scale.
But we'll keep an eye on it for you.
Most of the time on this program, we're busy getting excited about some hot new file system
that might be entering the kernel.
Think BcashFS, perhaps?
But this week, it's a little different.
Consumers actually talk of removing a file system, a relatively rare event for the kernel.
The file system in question?
Our old friend, RiserFS.
Now this isn't due to some bug that was recently caught in RiserFS, no, there haven't actually
been any user-spotted bugs since at least 2019.
The issue is one of maintenance.
Code has costs, as has been observed by many kernel developers over the years, and RiserFS
is preventing some maintenance and modification, using some ancient API calls that nothing
else still is.
Oh, they hate that, don't they?
They don't like those old API calls.
So I guess if RiserFS support matters, you better speak up now.
But I'm wondering, and I'm hoping, I know this sounds weird, but I'm actually hoping
they find a middle ground here and just maybe keep read-only mode for a while.
I don't think I have any disk formatted in RiserFS.
But there was a time, Wes, back in the day, where RiserFS was actually, it was a go-to
file system for me.
See, I had this situation where we had like two terabytes of disk to deal with, which
was an astronomical amount of space in like 2002, 2003.
It was a lot.
And we had just transitioned to a check imaging system.
So we were a bank, and we would process people's checks, and we would get an image of every
check.
And it's like a 100 kilobyte JPEG.
And we had to store hundreds of thousands of these little files.
And that was an area where RiserFS really excelled, was when you needed a lot of little
files.
And it had a few tricks for that.
And on top of that, especially on SUSE back then, it was one of the few file systems that
supported extended attributes.
So you could support NTFS-style file permissions.
And I could expose the checks to users as needed on Windows boxes with the correct permissions
to make sure that only a very certain group could get access to these files.
And RiserFS, back in the day, was really the only file system on Linux that offered this.
XFS also had some of the extended attribute support, but not all of the small file tricks
that RiserFS had.
And otherwise, it was like extended to.
So I could definitely see some old installations out there, so maybe some disks that are still
archived in corporate America or in old banks that are formatted in RiserFS that they may
one day like to fire up and retrieve the data from.
So get in like a read-only kind of support, because I think the big bug and the issue
they're running into with the old APIs, it really comes down to just write support.
It seems like that'd be a good compromise.
Just read-only.
Yeah, read-only support has been proposed on the mailing list.
Actually a user of RiserFS showed up to say, hey, I'm still using the latest kernels and
still using this old file system.
I figured I'd still have time since it's not quite the year 2038 yet.
That's another factor here is the kernel is actively considering some maintenance to try
and drop some of these file systems that aren't year 2038 compliant, which some of the maintainers
like Dave Chinner were quick to point out, look, we already did that for some of the
XFS stuff.
That's been removed.
We do this all the time.
But aside from the conversation around benefits to maintainers versus benefits to users, we
should just note that don't worry, it's not going away right now.
Turns out there are still some RiserFS developers out there because one of them contributed
a patch for the immediate annoyance that surfaced this week.
An area we should probably be talking about a little more is Linux in the automotive industry.
And a little while ago, the CentOS folks set up the Automotive Special Interest Group.
Well this week they announced the Automotive Stream AutoSD Linux distribution.
Okay, so it's really pretty much CentOS, but the idea is the Automotive Stream distribution
will be upstream to what eventually will be a official Red Hat automotive product.
Yeah, rather than just stuffing plain old CentOS into cars or having to carry a bunch
of patches themselves, well, this special interest group and now this distribution is
kind of copying the stream model, right?
There'll be this open collaborative space that anyone really interested in developing
this can contribute to.
And then at the same time, it gives a nice base that can be customized for this, well,
special interest that RHEL can develop a stable product based on.
An example of where things might diverge is, well, the Linux kernel.
They've got a special kernel automotive package planned rather than relying on CentOS Stream's
stock kernel, which, hey, in industrial use cases, might be a good idea.
Beyond the nerdy specifics of exactly what technical changes one wants to make trying
to adapt Linux to cars, I think this development is also worth following just as commentary
on the larger change to CentOS Stream and the new models of developing RHEL and RHEL
based products that we've seen.
It's one thing to have a special interest group, several of those exist now.
It's another to take a step towards advancing a product and having a custom distribution.
Linode.com slash LAN.
Go there to get $100 and 60-day credit on a new account so you can really try Linode
and you can support the show.
Linode is fast, reliable cloud hosting.
You got to try it out for your next project.
It's worth giving it a go because if you haven't tried Linode yet, you're missing something
special and they're always rolling out improvements to their infrastructure, so Linode's constantly
getting better.
They have 11 data centers around the world, so you'll find something near you or your
customers.
It's been nearly 19 years, so they really know what they're doing.
They have the absolute best customer service in the industry, comes up over and over again
from Linux Action News listeners who have made the switch to Linode.
They're always blown away because you build something, something goes sideways, you got
some questions.
It makes all the difference in the world to have an expert there who doesn't try to escalate
you to some other tier.
They just take care of it.
They know customer support is critical, so they've invested in having the best in the
business, and that even extends to documentation.
Just a couple of days ago, they did a big update, a big update in documentation around
deep learning frameworks, documentations for new Linux utility guides, just a whole bunch
of stuff.
They highlight that kind of stuff on their blog, it's just such a great resource too
if you want to get into something like machine learning or you want to learn a particular
thing like, you know, awk or sed or grep.
I suppose you could go dig into some training guides somewhere, but Linode has some great
documentation too, and it's just a great platform to use to learn as well.
It's my R&D lab all the time, and then I flip it into production, and it's built for huge
enterprise scale uses or individual uses, and their pricing is 30 to 50% less than the
major hyperscalers out there that are just going to try to lock you into their platform.
Linode's also a fantastic part of a multi-cloud strategy.
Go check it out, get $100 in credit and really kick the tires, linode.com slash lan.
And a big thank you to Ting, linux.ting.com.
If you're sick of overpaying for self-service, go see how much you could save and then get
25 bucks off that by going to linux.ting.com.
Ting is what mobile should be, it's a smarter, simpler way to do mobile.
They ride on top of the large carrier networks, but instead of having to interface with those
monopolies, you get to interface with Ting who focuses on value.
They focus on customer service, and they focus on multi-network compatibility.
They really have rates that nobody can touch because Ting doesn't have to dig holes in
the ground, right?
That's not their aspect, they focus on you, and that's why they were named the number
one carrier by Consumer Reports in 2021.
It also means they have multiple nationwide networks for you to choose, great plans, great
mix of 5G or LTE, it's just a lot of perks.
That's why I've been a customer since 2013.
They got plans to start around $10 a month, plans with unlimited messaging, unlimited
text, all kinds of data options, and every single plan gets access to Ting's award-winning
customer service.
And of course, no contract ever.
It's simple to switch to Ting, and pretty much any phone's gonna work with Ting because
they do support so many networks.
So just head to linux.ting.com, go check your current phone out, create an account, and
pick a plan that's right for you.
What'll happen is, once you get all your information, you figure out what your phone's compatible
with, Ting's gonna send you a SIM card that works great in your area.
You pop that in your phone, and you get activated in minutes.
It's impressive how much you can just do from their beautiful dashboard.
The first time I signed up for Ting, it was like, I don't know, 10, 11 o'clock at night,
something like that, everybody had gone to bed, and I just decided I was sick of overpaying
for cell service, and I did it all online in one night.
So just get started, and cut your phone bill in half.
It's never been easier.
Go to linux.ting.com.
Recently, the Core Boot Camp has raised some awareness about an issue facing the future
of Intel-based systems that might make them less friendly to open-source firmware.
Core Boot developer Philipp Deppenweis, CEO of German-based security firm Immune and founder
of Nine Elements Security, through which he's heavily involved in the open-source firmware
space, shared some concerns on Twitter this week.
Yeah, he drew attention to the new Intel FSP 3.0 next-gen firmware support package,
along with what they call their universal scalable firmware.
And he says, basically, this is just going fully closed-source on the firmware side forever.
And when you combine these types of firmware changes that Intel is working with, along
with ideas like software-defined silicon, which it seems the kernel team is already
on board with, it just really reminds me how freaking badly we need an open-source processor.
But I have to say, I look over at RISC-V, and now that we're in Q1 of 2022, and there's
still no RISC-V Pi-like board that you could buy and try, I'm honestly losing hope that
RISC-V is ever going to be a consumer solution.
I think if we don't have Raspberry Pi-type systems by now, it's probably never going
to happen for us consumers.
There's a few.
I should make it clear.
There are some, right?
You can find some.
I'm talking like an ecosystem, right?
I'm talking about something more than just for software developers that are maybe building
a RISC system in the future.
We've definitely been fairly excited about RISC-V for a while now, at least looking at
the Linux action news.
Tags for episodes that include RISC-V?
Yeah, it comes up a lot.
And there's a lot to like about it, an open architecture, some open-source implementations
out there.
But you're right.
We talk about it a lot, but we haven't really got to play with it yet.
And it's kind of frustrating, it's kind of disappointing.
And as we see continued wide-scale adoption of ARM, I can see why you're worried.
Yeah, I think if I zoom out long, long term, it still feels like the slow adoption of RISC-V
into other areas of computing is probably inevitable.
But at least with a lot of consumer devices like laptops and desktops, and Chromebook
type systems, I think ARM is really the winner for a while.
And obviously, the momentum that x86 will continue.
But I just have kind of, about two years ago, I was still holding out hope pretty strongly
that in a few years, I'd have a RISC-V laptop.
Now pretty much all that hope has collapsed.
And I think where I kind of went wrong is it's a very frequent and common occurrence
in free software news and coverage to kind of go all the way to the natural, logical
conclusion of how far this technology could possibly go and write about it from that perspective.
And maybe not pay as much attention to the actual market demands for such a product,
how the actual market's going to use that thing, that piece of software, that hardware
device.
But when you look at the actual market reality behind RISC-V, it's pretty understandable
that it's people that are building specialist systems, people that need the integration
of the software and the CPU for a particular kind of workload that they're doing.
There isn't a big consumer application for it.
Maybe it just wasn't super obvious initially.
And maybe it just took a couple of years to realize that's where this is going.
Or maybe it was there all along.
Maybe it was always obvious, Wes.
What do you think?
Well, on one hand, I'm not sure it was obvious that RISC-V would have gotten as far as it
has today.
I mean, we are talking about it, we've seen, you know, Intel and many other folks show
interest in it, especially compared to stuff like OpenPower, OpenSpark, OpenRisk, you know,
there's a long history of various public domain or open architectures.
But you're right, there's not been a lot of exposure to it.
And so far, the things we have heard, well, they're Western Digital using them in their
hard drives.
They're just customized AI chips that are probably running proprietary models.
And I think we tend to see something like, you know, free or open source.
And in the Linux ecosystem, our minds jump immediately to how this can enable the freedom
and self control of someone using a Linux desktop, say.
But at least right now, the real selling point for RISC-V, like the reason you might use
it over something like an ARM chip that's, you know, probably better optimized, it's
been around longer that might have more vendors already, is because of that flexibility, because
you need to do something custom.
In some ways, there are parallels with, you know, some of the tooling on Linux.
If you want to go put yourself in customized arch based system, you can get something really
great.
But it's not necessarily going to be super useful for someone else who has different
use cases.
And that's the stage of adoption and use and interest in RISC-V right now.
The tooling that's being developed around this open instruction set, around reinvigorating
sort of these open designs, and for folks that are trying to design this, or developers
in that space, really exciting.
But for those of us who just want a new desktop that isn't powered by proprietary architecture,
yeah, I don't know.
I know, I know.
You're totally right.
And it's also like Linus Torvalds said, like even back in 2016, Linus said that it's not
so much the instruction set, it's everything else around the CPU that really matters.
And you got to have the entire ecosystem around the CPU, the entire platform matters before
you're going to see mass adoption in something like a PC.
And he's right.
And you know, with these types of open source things, it is a very slow burn, as the industry
is often five, 10, 15 years out on some of their design plans, right?
It's entire life cycles that they have to go through before they start looking at retooling.
But we do have some great resources in the show notes, if you're curious about where
Intel is going with their software to find silicon, or their new firmware stuff, or even
a recent update on RISC-V, we have links to all of that in the show notes.
And of course, Linux Action News is back every single week.
So be sure you go to linuxactionnews.com slash subscribe for all the ways to get new episodes.
And linuxactionnews.com slash contact for ways to get in touch.
Hey, we have an East Coast Meetup coming on April 9.
That's a Saturday, details at meetup.com slash Jupiter Broadcasting, we would love to see
you there.
But don't worry if you can't make it, we'll be here for you every single week with our
take on the latest Linux and open source news.
Thanks for joining us.
And that's all the news for this week.

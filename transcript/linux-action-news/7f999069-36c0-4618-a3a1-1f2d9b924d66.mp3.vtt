WEBVTT

00:00.000 --> 00:16.680
Hello, and welcome to Linux Action News, our weekly take on Linux and the open source world.

00:16.680 --> 00:20.960
This is episode 50, recorded on April 22nd, 2018.

00:20.960 --> 00:21.960
I'm Chris.

00:21.960 --> 00:22.960
And I'm Joe.

00:22.960 --> 00:23.960
Hello, Joe.

00:23.960 --> 00:28.500
It's good to be connected with you, especially on a week when we have so many new releases.

00:28.500 --> 00:30.320
Let's kick it off with Triskel 8.

00:30.320 --> 00:36.600
Yes, hot on the heels of the last release, 7, which was released in November 2014.

00:36.600 --> 00:39.160
So three and a half years ago.

00:39.160 --> 00:40.160
Hmm.

00:40.160 --> 00:44.640
And this is based on Ubuntu 16.04.

00:44.640 --> 00:47.320
And what's coming up next week, Ubuntu 18.04.

00:47.320 --> 00:52.240
So it's kind of a little bit out of date, which is a real shame because this is a great

00:52.240 --> 00:53.880
release of Triskel.

00:53.880 --> 00:59.920
It's now based on Marte, which as we know is a rock solid desktop that I love second

00:59.920 --> 01:02.520
only to XFCE for me.

01:02.520 --> 01:05.120
And I could use this distro as a daily driver.

01:05.120 --> 01:11.360
Yes, it's completely free software, but it turns out that I don't tend to use that much

01:11.360 --> 01:12.520
non free software.

01:12.520 --> 01:16.080
And if you want to install Chrome, well, spoiler, you can actually do that on this.

01:16.080 --> 01:18.800
I've tried it just for the lulz and it worked absolutely perfectly.

01:18.800 --> 01:19.800
Huh.

01:19.800 --> 01:20.800
You know, I'm actually kind of surprised, Joe.

01:20.800 --> 01:22.400
I thought you'd be more impressed.

01:22.400 --> 01:25.880
You run Triskel as a sort of a validation testing against hardware all the time.

01:25.880 --> 01:28.640
So you are a kind of a frequent Triskel user.

01:28.640 --> 01:32.320
And something based on 16.04 is going to be supported for a few more years.

01:32.320 --> 01:37.600
And they do say in the post, they're going to be hot to trot on 8.0 based on 18.04.

01:37.600 --> 01:41.280
They think they're going to have it out pretty close to the 18.04 release.

01:41.280 --> 01:45.740
And the other thing that strikes me is who's using Triskel Linux that wants the totally

01:45.740 --> 01:46.740
latest stuff?

01:46.740 --> 01:51.280
Because you got to bear in mind this is shipping with the Linux Libre kernel, which we talked

01:51.280 --> 01:52.880
about last week.

01:52.880 --> 01:54.920
And it's 4.4 by default.

01:54.920 --> 01:57.040
It's not like you're looking for the latest software here.

01:57.040 --> 01:58.520
Well, I don't think that's fair.

01:58.520 --> 02:02.640
Just because you're into 100% freedom doesn't necessarily mean you're not interested in

02:02.640 --> 02:04.920
the latest versions of stuff.

02:04.920 --> 02:09.580
What if you've got a really new laptop that needs a newer kernel?

02:09.580 --> 02:14.280
And what if you rely on applications that have been revved in the last couple of years

02:14.280 --> 02:17.760
significantly and have features that you depend on?

02:17.760 --> 02:22.600
It's I don't think it's fair to kind of put those people in a box of just, oh, they want

02:22.600 --> 02:24.040
crusty old stuff or whatever.

02:24.040 --> 02:25.880
Because look at this release.

02:25.880 --> 02:28.200
Look at the desktop that's in front of you.

02:28.200 --> 02:34.720
It's a really nice professional looking Marte implementation that's based on Ubuntu, but

02:34.720 --> 02:36.200
just happens to be totally free.

02:36.200 --> 02:38.560
I think that it's not their fault.

02:38.560 --> 02:41.840
I'm not blaming them because obviously they are lacking developer resources here.

02:41.840 --> 02:44.880
And that's why it's taken so long to get this out the door.

02:44.880 --> 02:49.640
And hopefully this release will generate enough buzz to then attract a few more developers

02:49.640 --> 02:55.880
in and hopefully get this next version out that's based on 18.04 within the next year

02:55.880 --> 02:58.200
or so and play catch up.

02:58.200 --> 03:03.320
You know, funny enough, I think you might have just described the ideal PureOS user.

03:03.320 --> 03:10.000
Really because PureOS is based on Debian, but it's using Gnome 3 and Wayland.

03:10.000 --> 03:15.240
It's much more modern, but it goes for the same sort of user where they're free and Libre

03:15.240 --> 03:17.120
software only.

03:17.120 --> 03:21.840
Privacy is a huge part of PureOS, and it's backed by Purism.

03:21.840 --> 03:26.000
So you may be a PureOS user, not a Triskel user, Joe.

03:26.000 --> 03:31.240
Yeah, but Gnome, no thanks, whereas Marte, yes, please.

03:31.240 --> 03:34.440
Hey, now save the Gnome commentary for later in the show.

03:34.440 --> 03:36.400
Yeah, I suppose.

03:36.400 --> 03:39.920
But Triskel to me seems more relevant than it ever has done.

03:39.920 --> 03:45.640
People are starting to really care about software freedom because it goes hand in hand with

03:45.640 --> 03:46.640
privacy.

03:46.640 --> 03:51.080
And so it seems like maybe this stuff was a little bit forgotten in the past, but in

03:51.080 --> 03:54.520
the past few years, people have started to pay more attention to this.

03:54.520 --> 03:57.640
Companies like Purism have come along and capitalized on that.

03:57.640 --> 04:04.120
And it seems that if they can keep this momentum going and get this version nine out as soon

04:04.120 --> 04:07.240
as possible, then they could potentially get some real traction with it.

04:07.240 --> 04:08.420
So fingers crossed.

04:08.420 --> 04:09.440
You know that I do agree with.

04:09.440 --> 04:13.760
You and I both kicked the tires on this release to just do a little bit of prep for the show.

04:13.760 --> 04:17.760
And I was really pleasantly surprised with their implementation of the Marte desktop.

04:17.760 --> 04:19.680
You would think they've been shipping this thing for years.

04:19.680 --> 04:20.900
It looks so good.

04:20.900 --> 04:22.840
So it's a solid release.

04:22.840 --> 04:27.960
And if Triskel is appealing to you and you're okay with the 1604 base, I would encourage

04:27.960 --> 04:29.600
you to go to the website and give it a go.

04:29.600 --> 04:31.480
I was pleasantly surprised when I tried it.

04:31.480 --> 04:32.480
What about you, Joe?

04:32.480 --> 04:33.720
Yeah, I wasn't that surprised.

04:33.720 --> 04:37.500
The one thing is the menu, they're going for the old school menu, and it'd be nice if they'd

04:37.500 --> 04:42.360
integrated Brisk, which as we know in Ubuntu, Marte is an option now and it's a really great

04:42.360 --> 04:47.180
menu, which I think it is possible to get it running in Triskel, but it's not there

04:47.180 --> 04:48.180
by default.

04:48.180 --> 04:51.760
So that's the only sort of little thing I would say they ought to change.

04:51.760 --> 04:54.240
But hopefully in the next release, they'll do that.

04:54.240 --> 04:55.240
Fair enough.

04:55.240 --> 04:58.960
I didn't notice that because I've been too busy running React OS this weekend.

04:58.960 --> 05:00.520
I'm a bit of a fanboy now, Joe.

05:00.520 --> 05:01.520
Yeah.

05:01.520 --> 05:04.360
So this is a completely open source operating system, but it's not based on Linux.

05:04.360 --> 05:10.020
It is its own thing and it aims for binary compatibility with Win32.

05:10.020 --> 05:12.920
So it's essentially open source Windows.

05:12.920 --> 05:18.400
Now I was really disappointed that I could not get this to run on any of my machines,

05:18.400 --> 05:20.960
but I understand that you got it running in a virtual machine.

05:20.960 --> 05:21.960
Yeah, I did.

05:21.960 --> 05:27.800
In VMware Player set up to run a Windows VM, I managed to get the latest React OS to boot,

05:27.800 --> 05:29.400
which just came out.

05:29.400 --> 05:35.200
It's React OS 0.4.8, and there is a ton of cool stuff.

05:35.200 --> 05:36.400
It's peak Windows.

05:36.400 --> 05:41.120
If you liked Windows 2000 era Windows, but you like some of the control panel functionality

05:41.120 --> 05:47.280
of Windows 98, but you like NT compatibility and stability, React OS is trying to aim for

05:47.280 --> 05:48.280
that.

05:48.280 --> 05:52.880
Now they haven't gotten there with the stability, but when you download the ISO, it's tiny.

05:52.880 --> 05:56.640
Once it's installed on your system, it takes 500 megabytes of hard drive space.

05:56.640 --> 05:59.140
It can operate in 96 megabytes of RAM.

05:59.140 --> 06:00.640
It's been written from scratch.

06:00.640 --> 06:08.200
It has over 100 active developers contributing to it, and it is blazing fast.

06:08.200 --> 06:13.440
I have not used an operating system this fast, including even Windows 7 in classic mode on

06:13.440 --> 06:18.840
modern hardware with an SSD is not as fast as React OS was, which makes sense.

06:18.840 --> 06:22.720
It's a slim early days OS, but it's so great.

06:22.720 --> 06:28.080
It's this weird alternate dimension of Windows where when you go in there and say you want

06:28.080 --> 06:33.960
to turn on anti-aliasing, well, in the Microsoft world, that would be using clear type.

06:33.960 --> 06:39.860
But in React OS, because it's free software, you see all of these familiar free tools to

06:39.860 --> 06:45.160
do anti-aliasing, or when you go set up the quote network time in Windows, it's actually

06:45.160 --> 06:47.760
pointing to pool.ntp.org.

06:47.760 --> 06:54.820
It's using like open source community resources and technology, and it's on top of this weirdo

06:54.820 --> 06:59.320
Frankenstein version of Windows that's faster and cleaner and more efficient than Windows

06:59.320 --> 07:01.140
ever was.

07:01.140 --> 07:02.140
It's remarkable.

07:02.140 --> 07:06.160
I got to say, Joe, I've never run React OS until today.

07:06.160 --> 07:11.700
I did it for this show, and I am going to be an avid follower of this project now because

07:11.700 --> 07:15.880
it's perfect for somebody who occasionally might need Windows compatibility with something,

07:15.880 --> 07:19.820
and if they can get there, if they can make it stable and they can make it work, this

07:19.820 --> 07:21.520
is going to be a remarkable project.

07:21.520 --> 07:25.120
I think it's going to be a true challenger to desktop Linux if they can get there.

07:25.120 --> 07:29.160
I think that's going a bit far because they've got a long way to go to make it totally stable

07:29.160 --> 07:33.640
and support as much hardware as Linux does, but with this release, what really jumped

07:33.640 --> 07:39.500
out at me is that now they're supporting Vista, Windows 8, and Windows 10 software, and so

07:39.500 --> 07:44.580
I was very keen to try and get some of the big hunking proprietary music applications

07:44.580 --> 07:50.640
that I use in Windows to try and get my electric drums working and the amp modelers and stuff

07:50.640 --> 07:55.240
that I make my music with, but I just could not get it running on hardware, and that was

07:55.240 --> 07:56.940
so disappointing.

07:56.940 --> 08:01.320
That's why I didn't really bother with a VM because you're never going to be able to do

08:01.320 --> 08:05.000
that kind of stuff with USB, and you're going to have latency issues and all the rest of

08:05.000 --> 08:06.000
it.

08:06.000 --> 08:07.000
Yeah.

08:07.000 --> 08:09.040
I don't really think it's ever going to get there either, but if it could somehow, it

08:09.040 --> 08:12.360
would be really remarkable because, so as an example, another thing that landed in the

08:12.360 --> 08:18.780
new release in 0.48 is this new NTFS driver that came up during a couple of Google summers

08:18.780 --> 08:24.960
of code, a couple of them accumulated in new code that landed in ReactOS for the NTFS driver.

08:24.960 --> 08:29.320
You've got free type 2.9 baked into this thing, but then there's other things in here that

08:29.320 --> 08:34.320
are really kind of cool like support for Extended 2 and Extended 3.

08:34.320 --> 08:35.440
Why not?

08:35.440 --> 08:36.960
Why not have that built in?

08:36.960 --> 08:40.240
And it's like a power user's version of Windows Explorer.

08:40.240 --> 08:42.240
It's better than Windows Explorer ever was.

08:42.240 --> 08:46.800
It's like a cross between Dolphin and Windows Explorer, and I was able to get a couple of

08:46.800 --> 08:51.600
Win32 apps to run, but I was so taken away by the whole OS and how fast it was, how simple

08:51.600 --> 08:57.500
and clean it was, and how Windows has really changed over the years from what I consider

08:57.500 --> 09:03.160
peak Windows, which is around Windows 2000 professional desktop as a professional Windows

09:03.160 --> 09:04.160
workstation.

09:04.160 --> 09:05.160
I really loved it.

09:05.160 --> 09:08.320
I thought that was when they did a great job, and this is it.

09:08.320 --> 09:09.840
That's what ReactOS is.

09:09.840 --> 09:14.440
So to see this new release land, to see it be really great, I can see it going two ways.

09:14.440 --> 09:15.880
I think you're probably right.

09:15.880 --> 09:19.760
It's never going to quite get to the level that Linux is in terms of hardware support

09:19.760 --> 09:22.840
or even robust architecture support.

09:22.840 --> 09:27.220
But if you can nail that hardware or if you can get it in VMware, it really is quite impressive,

09:27.220 --> 09:31.400
and it's an amazing statement of what open source development is capable of, a complete

09:31.400 --> 09:33.840
re-implementation of peak Windows.

09:33.840 --> 09:38.360
Yeah, who knew that Linux Action News would be your preeminent ReactOS podcast, but there

09:38.360 --> 09:39.360
we go.

09:39.360 --> 09:41.800
It is part of that open source world after all.

09:41.800 --> 09:42.800
Yeah.

09:42.800 --> 09:47.520
Well, speaking of the open source world, the German government is going to be using NextCloud

09:47.520 --> 09:49.080
on quite a big scale.

09:49.080 --> 09:54.240
I guess there was a pilot program running with about 5,000 users since October 2016.

09:54.240 --> 09:55.680
I hadn't heard much about it.

09:55.680 --> 09:57.780
That's not too uncommon.

09:57.780 --> 10:04.080
But now it looks like that pilot program is going to get rolled out to 300,000 users in

10:04.080 --> 10:06.280
different federal agencies.

10:06.280 --> 10:10.400
This is coming from Der Spiegel, which is a famous paper from over there, and they confirmed

10:10.400 --> 10:17.320
that the focus of this is to construct a private cloud for the German federal government to

10:17.320 --> 10:22.360
address concerns within the government for a platform that is fully controlled, that

10:22.360 --> 10:28.560
would not allow access to data by any third party, and was fully GDPR compliant.

10:28.560 --> 10:33.080
Yeah, the NextCloud guys must be rubbing their hands at this GDPR stuff, because I presume

10:33.080 --> 10:36.000
that it's not just going to be Germany who's going to be looking at them, there's going

10:36.000 --> 10:37.800
to be other governments all over Europe.

10:37.800 --> 10:41.800
Yeah, kind of funny, on the other side of the pond over here in the States, our federal

10:41.800 --> 10:45.280
government agencies are going more and more with AWS.

10:45.280 --> 10:50.160
That's been a big trend with the CIA and other agencies that want to have a secure public

10:50.160 --> 10:56.300
cloud is they've been contracting with Amazon to build them a private version of AWS.

10:56.300 --> 11:01.200
This route seems way more sustainable, way better, and they can run it on their own internal

11:01.200 --> 11:02.200
servers.

11:02.200 --> 11:05.640
I guess it's a different scale, but I really like to see the direction of the German government

11:05.640 --> 11:07.520
here going with NextCloud for this kind of thing.

11:07.520 --> 11:10.840
And they could even probably afford to hire a few developers to contribute to areas that

11:10.840 --> 11:11.840
they feel might need it.

11:11.840 --> 11:13.360
Well, that was my next point.

11:13.360 --> 11:16.520
With 300,000 users, that is a good stress test, isn't it?

11:16.520 --> 11:20.880
And it means that little corner cases and bugs that people didn't even know about will

11:20.880 --> 11:25.360
be found, and they'll presumably have the budget to fix them, and then we will all benefit

11:25.360 --> 11:26.360
as a result.

11:26.360 --> 11:29.080
I wonder if I'll bump into anyone from NextCloud at Linux Fest Northwest.

11:29.080 --> 11:34.480
I'd love to pick their brain about this development, because you have to wonder if that recent

11:34.480 --> 11:40.080
announced end-to-end encryption on a per-folder basis, and NextCloud Talk as well, didn't play

11:40.080 --> 11:42.080
a role in sealing this deal.

11:42.080 --> 11:44.160
Oh, I would have thought that would be a big part of it.

11:44.160 --> 11:46.440
I mean, the end-to-end encryption, definitely.

11:46.440 --> 11:48.480
The talk stuff, maybe not.

11:48.480 --> 11:53.200
I mean, it's an attractive feature, but I think that the end-to-end encryption is huge,

11:53.200 --> 11:57.620
isn't it, in terms of enterprise, and in this case, government.

11:57.620 --> 11:59.600
You need to have that to be enterprise-grade.

11:59.600 --> 12:01.200
Yeah, I completely agree.

12:01.200 --> 12:05.640
Although, I think Dropbox shows us you don't necessarily need to have end-to-end encryption,

12:05.640 --> 12:10.040
but this story may also be showing us that it could be the thing that seals the deal,

12:10.040 --> 12:15.800
that little extra that pushes it over the edge.

12:15.800 --> 12:17.160
Last.ting.com.

12:17.160 --> 12:20.120
Go there to sign up for mobile that is smarter than unlimited.

12:20.120 --> 12:22.020
It's pay-for-what-you-use wireless.

12:22.020 --> 12:23.160
Think about this for a second.

12:23.160 --> 12:27.840
It's $6 for the line, and then you just pay for the minutes, the messages, and the megabytes

12:27.840 --> 12:28.840
that you use.

12:28.840 --> 12:32.520
Ting has a GSM and a CDMA network that you can choose from, and that means they have

12:32.520 --> 12:36.000
a bunch of devices they support, so check their BYOD page.

12:36.000 --> 12:40.880
If you go to last.ting.com and you bring a device, they will give you $25 in service

12:40.880 --> 12:41.880
credit.

12:41.880 --> 12:44.000
That's likely going to pay for more than your first month.

12:44.000 --> 12:48.440
The average Ting bill is just $23 per month per phone.

12:48.440 --> 12:53.980
That's nationwide coverage, pay-for-what-you-use, no contracts, no service agreements.

12:53.980 --> 12:58.040
They have a great control panel that lets you manage everything, see your usage at a

12:58.040 --> 13:01.240
glance, and you can also set usage alerts.

13:01.240 --> 13:04.520
They have a great range of devices since they have the two different network technologies

13:04.520 --> 13:08.560
to choose from, and you can rest assured that Ting's a great mobile service provider because

13:08.560 --> 13:14.840
they just rocked the Consumer Reports rankings in 2017 that came out just a bit ago.

13:14.840 --> 13:17.400
It's a great report, and you can see it on Ting's website.

13:17.400 --> 13:19.080
Go to last.ting.com.

13:19.080 --> 13:21.560
They are a strong contender, and then they wrap it all up.

13:21.560 --> 13:23.280
They back it up, if you will.

13:23.280 --> 13:26.600
They back that thing up with great customer service.

13:26.600 --> 13:30.880
Tell people who really help, and right now you can go to last.ting.com, and you can grab

13:30.880 --> 13:36.760
the Motorola E4 Plus for $134 US greenbacks, no contract, no service agreement, out the

13:36.760 --> 13:37.760
door.

13:37.760 --> 13:38.760
You own the device.

13:38.760 --> 13:43.260
It's got a 13 megapixel camera, 2 gigabytes of RAM, a 5,000 milliamp battery, and that

13:43.260 --> 13:46.820
Moto UI is thin, and they keep that thing up to date.

13:46.820 --> 13:57.120
For $134, no contract, no service agreement, you're good to go, last.ting.com.

13:57.120 --> 14:01.360
Okay let's talk about our favorite company again, Microsoft, and they have announced

14:01.360 --> 14:03.160
an operating system.

14:03.160 --> 14:04.160
It's based on Linux.

14:04.160 --> 14:05.160
It's not a big thing.

14:05.160 --> 14:08.560
Yeah, it's just the next big thing from Microsoft that's going to ship on tens of billions of

14:08.560 --> 14:11.760
devices a year if their predictions work out.

14:11.760 --> 14:16.760
I had a great chance to actually chat with the people behind Azure Sphere OS, and they

14:16.760 --> 14:19.560
would like you to think of it as a three-part solution.

14:19.560 --> 14:21.940
It's an MCU hardware device.

14:21.940 --> 14:25.920
It's a secured operating system that's powered by the Linux kernel, and then it's a cloud

14:25.920 --> 14:30.800
service that performs metrics, data collection, and a support channel for updates that last

14:30.800 --> 14:31.800
10 years.

14:31.800 --> 14:37.840
And the idea is you can build an IoT product around this MCU, and that ranges from stuff

14:37.840 --> 14:42.360
like a coffee pot that just needs a simple real-time operating system to something more

14:42.360 --> 14:43.640
sophisticated.

14:43.640 --> 14:46.840
And while I was talking to Microsoft, I said, why not Windows?

14:46.840 --> 14:50.080
Windows seems like that would have been the route of Microsoft of the past.

14:50.080 --> 14:54.600
You know, cram NT down on this thing and call it Windows ROT.

14:54.600 --> 14:55.600
So why Linux?

14:55.600 --> 15:02.000
And they said, simply enough, we couldn't get Windows down to that size, and quite frankly,

15:02.000 --> 15:05.240
hardware manufacturers want to get innovating right now.

15:05.240 --> 15:07.560
They want something that they can start building on top of.

15:07.560 --> 15:11.360
They don't have to call some bureaucrat at Microsoft and say, please sir, can I have

15:11.360 --> 15:13.120
a license for your Windows source code?

15:13.120 --> 15:17.120
I'd love you to share the code with me so I can build my next product, sir.

15:17.120 --> 15:18.480
They don't want that.

15:18.480 --> 15:21.360
The market that they're trying to sell to just simply is not interested in that when

15:21.360 --> 15:24.520
they can go grab the Linux source code and start building tomorrow.

15:24.520 --> 15:28.640
So they have to be using Linux, essentially, to be competitive in the market and to get

15:28.640 --> 15:30.200
down to the size they want.

15:30.200 --> 15:34.200
But keep in mind, there's other things at this level that Microsoft is implementing

15:34.200 --> 15:36.040
that are outside of Linux.

15:36.040 --> 15:41.120
They brought over some of the boot validation and security code from the Xbox system and

15:41.120 --> 15:46.440
the crash metrics and update systems from Windows to layer it into this OS.

15:46.440 --> 15:50.360
So there's some additional Microsoft innovation mixed in here.

15:50.360 --> 15:54.120
This is by no means the Linux that we're used to, is it?

15:54.120 --> 15:59.120
At the core, it is Linux 4.9, straight up GPL Linux 4.9, and they're using containers

15:59.120 --> 16:04.080
and namespaces to do isolation of processes and to keep everything secure.

16:04.080 --> 16:06.320
But when it boots, that's Microsoft technology.

16:06.320 --> 16:09.720
When it crashes and has an error report, that's Microsoft technology.

16:09.720 --> 16:14.120
The cloud services it's connecting back, obviously, Microsoft technology.

16:14.120 --> 16:17.240
But in a way, that's what the market wants.

16:17.240 --> 16:22.720
It's what Microsoft's great at, Azure and 10 years of support, combined with what open

16:22.720 --> 16:25.240
source is great at, the Linux kernel.

16:25.240 --> 16:28.520
Microsoft has really brought those two things together with this product, and they're selling

16:28.520 --> 16:34.200
it to people that are not necessarily great at building these things, creating this aspect

16:34.200 --> 16:35.200
of the product.

16:35.200 --> 16:39.920
So Microsoft is kind of solving a problem for the crockpots and sous vide machines of

16:39.920 --> 16:42.560
the future that must connect to Wi-Fi.

16:42.560 --> 16:48.120
But once again, this is just more pragmatic use of open source by Microsoft, who are a

16:48.120 --> 16:53.440
company who needs to make money, and like many, many companies out there who need to

16:53.440 --> 17:00.160
implement solutions, a profitable way to do that is to take advantage of open source.

17:00.160 --> 17:04.780
And you've got a lot of people kicking up a stink about this, saying that it's embrace

17:04.780 --> 17:08.880
extend extinguish and all that, but I'm just not buying that anymore.

17:08.880 --> 17:12.400
The bottom line is that open source makes business sense.

17:12.400 --> 17:16.360
Microsoft is a business that is historically quite good at making money.

17:16.360 --> 17:21.880
And so they are moving with the times and getting into IoT a very sensible way using

17:21.880 --> 17:22.880
Linux.

17:22.880 --> 17:26.980
Yeah, and I think the capitalist hard truth of the matter is, it's just going to sell

17:26.980 --> 17:31.560
more if it's Linux at the core instead of Windows, and Microsoft is aware of that.

17:31.560 --> 17:35.000
And it comes down to just those simple market dynamics.

17:35.000 --> 17:38.920
It definitely isn't embrace extend and extinguish simply because if they extinguish it, then

17:38.920 --> 17:41.600
they won't be able to make money off it anymore.

17:41.600 --> 17:46.760
Microsoft of 2018 knows how to make money off of Linux free software and open source.

17:46.760 --> 17:49.600
And if they extinguish it, there goes their revenue stream.

17:49.600 --> 17:54.520
Yeah, and the idea that they're somehow controlling Linux or open source seems to be absolutely

17:54.520 --> 17:55.520
nonsense to me.

17:55.520 --> 18:00.220
Yes, they've contributed patches that are specific to Azure, but the rest of us who

18:00.220 --> 18:04.520
aren't using Azure, we're not using those patches, and we'll just happily carry on using

18:04.520 --> 18:08.160
AWS or DigitalOcean or on premises or whatever.

18:08.160 --> 18:12.640
So I just don't understand all the hatred towards Microsoft.

18:12.640 --> 18:18.200
Yes, they've got this horrible history of calling Linux a cancer, and the patent shakedowns

18:18.200 --> 18:20.320
with Android and all the rest of that.

18:20.320 --> 18:24.860
But in terms of what they've been doing with the subsystem for Linux, and that Linux based

18:24.860 --> 18:31.520
switch OS that they were using internally on Azure, and now this, it's all just pragmatism.

18:31.520 --> 18:36.300
It's all just them making money with Linux, and I don't think they've got evil intentions

18:36.300 --> 18:42.500
beyond making tons of money using open source, like someone like Red Hat is doing.

18:42.500 --> 18:48.400
They are a company who are making tons of money using open source, and Microsoft see

18:48.400 --> 18:52.240
that and see that the future is with open source.

18:52.240 --> 18:53.800
You've mentioned free software a couple of times.

18:53.800 --> 18:59.360
You're never going to hear them use that term, but they're interested in using Linux to make

18:59.360 --> 19:02.360
money like so many other people are.

19:02.360 --> 19:03.360
That's exactly it.

19:03.360 --> 19:05.320
There's a couple of school of thoughts.

19:05.320 --> 19:10.480
Microsoft is trying to squish Linux down into some sort of controllable form that they have

19:10.480 --> 19:16.920
great influence over, and then the other school of thought is that Microsoft is a clever calculating

19:16.920 --> 19:21.580
business that has figured out different revenue paths based on what the consumer market that

19:21.580 --> 19:23.600
they serve is demanding.

19:23.600 --> 19:27.180
My experience shows me that whatever route is going to make a company more money, they're

19:27.180 --> 19:32.760
likely to take, and in this case, simply shipping Linux, supporting open source on Azure and

19:32.760 --> 19:39.680
on now Azure Sphere OS and the Windows subsystem for Linux is truly about selling to customers

19:39.680 --> 19:41.120
that are asking for those things.

19:41.120 --> 19:44.720
If they didn't have customers demanding them, they probably wouldn't be making them, but

19:44.720 --> 19:46.940
they are, and so they're happy to sell to them.

19:46.940 --> 19:48.400
That's always been the case.

19:48.400 --> 19:53.860
If you go way back into Microsoft's history, Microsoft began making money selling desktop

19:53.860 --> 19:56.660
software for the Macintosh.

19:56.660 --> 19:58.840
You understand that they didn't care.

19:58.840 --> 20:02.760
They're happy to make software for any platform that has customers.

20:02.760 --> 20:06.440
If your platform has customers, Microsoft will make something for you.

20:06.440 --> 20:11.160
That is in the DNA of this company way, way, way back before the good old Linux versus

20:11.160 --> 20:12.160
Windows wars.

20:12.160 --> 20:16.640
Yeah, but people are still going to write about them and use M dollar sign and stuff

20:16.640 --> 20:17.640
like that, aren't they?

20:17.640 --> 20:19.080
It's never going to get away from that.

20:19.080 --> 20:21.080
Embrace Linux Dagwish!

20:21.080 --> 20:22.080
Yeah.

20:22.080 --> 20:28.120
All right, so Google have announced yet another messaging service and they've shut down, well

20:28.120 --> 20:33.440
not shut down, but they're pausing investment in yet another product.

20:33.440 --> 20:36.960
So Allo was something that they released a year or two ago.

20:36.960 --> 20:41.960
It was this cool new chat application and they've decided that yeah, they don't really

20:41.960 --> 20:43.360
want to spend any more money on that.

20:43.360 --> 20:47.720
It's only got 50 million users compared to the how many billion using Facebook Messenger

20:47.720 --> 20:48.720
and WhatsApp.

20:48.720 --> 20:53.180
So it's been a colossal failure as usual.

20:53.180 --> 20:57.760
But the difference this time is that it's not just going to be this standalone app that

20:57.760 --> 20:59.160
they have complete control over.

20:59.160 --> 21:04.360
They're going to work with the carriers to implement something that is much closer to

21:04.360 --> 21:08.820
what you have in the iOS world with iMessage.

21:08.820 --> 21:13.040
The only thing that was more obvious than Canonical's failure to gain traction in the

21:13.040 --> 21:18.040
mobile market was Google's launch of Allo was just everyone knew it was going to fail

21:18.040 --> 21:20.200
before it even went out the door.

21:20.200 --> 21:23.320
Before it even got around to some of these devices, we knew this was going to fail.

21:23.320 --> 21:24.720
This is not a big surprise.

21:24.720 --> 21:30.440
The issue that I have with is this total focus on RCS because what it feels like, as you

21:30.440 --> 21:33.040
just alluded to, is iOS envy.

21:33.040 --> 21:37.120
And whenever Google gets trapped in iOS envy, they don't do good.

21:37.120 --> 21:38.760
RCS sounds cute.

21:38.760 --> 21:41.520
The idea is iMessage for everyone.

21:41.520 --> 21:46.120
We can send you rich text messages about your flight status, and you don't have to have

21:46.120 --> 21:48.000
any particular application.

21:48.000 --> 21:53.780
The only problem is this little itsy bitsy thing that comes up from time to time called

21:53.780 --> 21:55.000
the carriers.

21:55.000 --> 21:57.760
RCS is completely controlled by the carriers.

21:57.760 --> 22:01.200
We will go back to SMS hell times 10.

22:01.200 --> 22:07.040
And this is also a great way to control, track, and monitor users because it all flows through

22:07.040 --> 22:08.040
the carriers.

22:08.040 --> 22:11.680
There's no end-to-end encryption, my friends, because the carriers have to be able to intercept

22:11.680 --> 22:12.680
that.

22:12.680 --> 22:15.140
And of course, they're happy to take a government search warrant as well.

22:15.140 --> 22:19.000
And you never know how the carriers will implement any of this because if MMS and SMS are to

22:19.000 --> 22:21.440
teach us anything, it's horrible hacks.

22:21.440 --> 22:25.520
And if you've ever worked in a data center where there is a system that is bringing SMS

22:25.520 --> 22:29.840
messages from one carrier to another carrier, you know exactly what I'm talking about.

22:29.840 --> 22:31.400
You know how bad this is.

22:31.400 --> 22:33.420
And the carriers cannot be trusted with this.

22:33.420 --> 22:35.720
They have never even fixed the existing systems.

22:35.720 --> 22:41.240
And the idea that because Google has iMessage envy, they're willing to subject their users

22:41.240 --> 22:45.720
to yet another round of messaging hell, I think tells us everything we need to know

22:45.720 --> 22:48.720
about Google's capability to deliver on this product.

22:48.720 --> 22:52.600
This is clearly a problem they're not capable of solving in a way that is user-friendly.

22:52.600 --> 22:56.260
RCS on its face seems like a good idea.

22:56.260 --> 23:02.600
But the issue comes down to every single carrier in the entire world has to get the implementation

23:02.600 --> 23:03.600
right.

23:03.600 --> 23:09.560
And you have to hope that these carriers in some countries won't arbitrarily block when

23:09.560 --> 23:13.300
the Russian government or the Iranian government comes knocking and says this person is no

23:13.300 --> 23:14.860
longer allowed to communicate.

23:14.860 --> 23:17.340
Because carriers, they never do that kind of thing.

23:17.340 --> 23:22.120
I think what really kind of has me riled up about this is they had this problem solved

23:22.120 --> 23:23.320
with Google Talk.

23:23.320 --> 23:28.040
They had this problem solved before any other messaging application was successful.

23:28.040 --> 23:33.580
Before Telegram, before Viber, before WhatsApp, before iMessage, there was Google Talk.

23:33.580 --> 23:38.880
And it was based on XMPP, which, by the way, works great on mobile now.

23:38.880 --> 23:40.960
They could have integrated that into everything.

23:40.960 --> 23:43.540
It was already integrated into Gmail.

23:43.540 --> 23:45.140
They could have integrated into Google Docs.

23:45.140 --> 23:47.920
They could have put Google Talk everywhere.

23:47.920 --> 23:48.920
And they could have owned it.

23:48.920 --> 23:49.920
It was great.

23:49.920 --> 23:50.920
I was on it.

23:50.920 --> 23:52.040
A lot of people were on it.

23:52.040 --> 23:54.440
They blew it because they couldn't control it.

23:54.440 --> 23:58.440
And since then, they have subjected their user base to different arbitrary messaging

23:58.440 --> 24:01.560
platforms almost every other Android release.

24:01.560 --> 24:06.200
And now, they're going to subject us to more carrier whims just like we have with the Android

24:06.200 --> 24:07.200
releases themselves.

24:07.200 --> 24:08.200
Well, exactly.

24:08.200 --> 24:14.040
Who in their right mind would embrace this at this point, once it becomes a standard

24:14.040 --> 24:17.960
or once it becomes more common on Android devices?

24:17.960 --> 24:21.880
You'd be a fool, like you would have been a fool to embrace Allo and get all your friends

24:21.880 --> 24:22.880
chatting on that.

24:22.880 --> 24:27.580
I mean, the bottom line is that Google have consistently failed with messaging.

24:27.580 --> 24:31.320
And they've consistently shown that when they are failing with a product, they will just

24:31.320 --> 24:33.840
can it in an instant almost.

24:33.840 --> 24:36.280
Google Reader is the one that everyone always talks about.

24:36.280 --> 24:40.900
But believe me, there have been so many more that have affected me personally.

24:40.900 --> 24:44.640
And it just comes down to fool me once, shame on you and all that.

24:44.640 --> 24:52.220
You cannot expect to invest too much in any new Google product or service.

24:52.220 --> 24:56.860
And they should have, well, maybe, as you say, stuck with Google Talk.

24:56.860 --> 24:58.520
Or maybe they should just give up.

24:58.520 --> 25:02.520
And I mean, this kind of is them giving up, isn't it, because it's them giving up on having

25:02.520 --> 25:06.240
their own standalone application that they're completely in control of.

25:06.240 --> 25:12.600
And they are transferring this control over to the carriers and want to work with them.

25:12.600 --> 25:17.480
But ultimately, this is just them throwing in the towel, it looks like.

25:17.480 --> 25:21.640
I know some people listening are going to get upset that I'm sort of crapping on RCS

25:21.640 --> 25:22.640
a bit.

25:22.640 --> 25:27.480
And I agree, in an ideal setup where it gets implemented well and it gets wide adoption

25:27.480 --> 25:34.400
on iPhone and Sailfish OS and Ubuntu Touch, then, OK, RCS is something I'm willing to

25:34.400 --> 25:35.400
talk about.

25:35.400 --> 25:39.260
But in the meantime, I'm starting to think this is something the platform vendors like

25:39.260 --> 25:44.800
Google and Apple and the carriers just shouldn't be involved in and let somebody else run the

25:44.800 --> 25:45.800
messaging.

25:45.800 --> 25:49.320
And it could be cross-platform, like Telegram, like WhatsApp, like everything that has a

25:49.320 --> 25:51.060
large user base.

25:51.060 --> 25:54.480
Maybe we'll see adoption in the iPhone for RCS.

25:54.480 --> 25:58.840
Everything tells me it's going to be slow coming, though, because iMessage already solves

25:58.840 --> 26:02.280
this problem for Apple's users, and that tends to be all they need.

26:02.280 --> 26:05.640
And if you look at the situation for Android users, it's poor.

26:05.640 --> 26:11.340
Oftentimes the default SMS app has been perverted in some way by the manufacturer, sometimes

26:11.340 --> 26:12.900
completely replaced.

26:12.900 --> 26:16.840
You go into the Play Store, you start looking for alternatives, you come across Google Voice,

26:16.840 --> 26:18.920
that sends you down a rabbit hole that's hell.

26:18.920 --> 26:22.540
You end up trying to text with people that doesn't support MMS, so you go back to another

26:22.540 --> 26:24.280
text messaging application.

26:24.280 --> 26:28.560
You find Hangouts, except for Hangouts is dropping SMS support, so then you go to Allo,

26:28.560 --> 26:30.580
and now Allo's being ended.

26:30.580 --> 26:34.940
So it's a really bad situation for Google's users, and it's shameful that they haven't

26:34.940 --> 26:36.040
solved this already.

26:36.040 --> 26:41.080
And they had it completely solved, in my opinion, with Google Talk, but I digress.

26:41.080 --> 26:43.680
It's really just a sad state of affairs.

26:43.680 --> 26:45.760
Maybe we'll see RCS adoption, but I'm doubtful.

26:45.760 --> 26:47.280
Well, you never know.

26:47.280 --> 26:50.680
Well, a quick catch-up then about GNOME Shell and this memory leak.

26:50.680 --> 26:56.160
It has now been fixed, and with the imminent release of Ubuntu 18.04, Will Cook has put

26:56.160 --> 27:00.300
a shout-out for people to get testing these fixes.

27:00.300 --> 27:05.080
And there's even talk that it might get backported into the previous version of GNOME as well.

27:05.080 --> 27:11.760
So it seems that the big fuss that was brought up has actually worked, and this has been

27:11.760 --> 27:12.760
fixed.

27:12.760 --> 27:15.040
So maybe you can switch back to it on your OBS machine, eh?

27:15.040 --> 27:18.760
I am definitely excited to give it a go, and I do hope they backport it.

27:18.760 --> 27:22.360
I guess a lot of people would say, eh, memory leak isn't fair, although that's what all

27:22.360 --> 27:23.680
the headlines are.

27:23.680 --> 27:26.800
But it's more like a misalignment between memory systems.

27:26.800 --> 27:31.480
There is a fantastic post that I will have in the show notes, linuxactionnews.com slash

27:31.480 --> 27:32.480
50.

27:32.480 --> 27:34.360
I think it'll be the last link that breaks it down.

27:34.360 --> 27:38.280
If you want to read the whole thing, it's fascinating to see all these different camps

27:38.280 --> 27:39.660
come together.

27:39.660 --> 27:42.540
So the author of the post I have linked is from Endless.

27:42.540 --> 27:47.120
Of course, there was also some really great input from a developer at Red Hat and from

27:47.120 --> 27:52.260
a developer at Canonical as well as a bunch of community members that contributed to solving

27:52.260 --> 27:53.880
what everybody just said was a memory leak.

27:53.880 --> 27:57.640
And it kind of looked like one, because you could trigger it very easily.

27:57.640 --> 28:01.520
If you just hit the super key and got the GNOME overview and you just kept hitting that

28:01.520 --> 28:07.880
sucker, you would actually cause your memory usage to continually climb, which looks like

28:07.880 --> 28:11.360
a classic memory leak, and that's why it's been termed that everywhere.

28:11.360 --> 28:14.920
But that's not actually what's going on.

28:14.920 --> 28:19.000
As you probably know, GNOME 3 is based heavily on JavaScript and the extensions are based

28:19.000 --> 28:20.200
on JavaScript.

28:20.200 --> 28:24.360
And traditionally, JavaScript objects track who they own in memory.

28:24.360 --> 28:28.600
So when the garbage collector to clean up the memory is launched, it checks that and

28:28.600 --> 28:31.760
it finds all the dependent objects, cleans them up.

28:31.760 --> 28:32.880
Easy peasy.

28:32.880 --> 28:34.720
But here's the problem.

28:34.720 --> 28:37.120
That doesn't work for C objects.

28:37.120 --> 28:39.360
C objects don't track who owns them.

28:39.360 --> 28:43.480
Instead, they only track how many owners they have.

28:43.480 --> 28:47.480
That's the traditional reference counting mechanism, and it works fine in C land because

28:47.480 --> 28:49.680
C is not garbage collected.

28:49.680 --> 28:54.680
To the garbage collector, however, the C objects look all disjointed, disconnected, like they

28:54.680 --> 28:57.680
have no dependencies, like they all are on their own little island.

28:57.680 --> 29:01.500
So it doesn't go clean them all up because it doesn't know the order of operation.

29:01.500 --> 29:07.300
It just goes, destroys the root one, and would leave all of these other objects in memory.

29:07.300 --> 29:11.720
So while it wasn't necessarily a memory leak, things weren't getting cleaned up properly.

29:11.720 --> 29:15.800
And there's different ways to address this, like you can schedule a garbage cleanup, and

29:15.800 --> 29:18.760
you can do different approaches to take care of this.

29:18.760 --> 29:23.580
But the biggest offender to the memory leak was really these objects piling up to be garbage

29:23.580 --> 29:28.400
collected, and then these child objects that would get completely ignored by the garbage

29:28.400 --> 29:29.400
collector.

29:29.400 --> 29:32.680
So more of a misbehavior than it is a leak.

29:32.680 --> 29:36.600
And now what they've done is they've queued garbage collection every time an object is

29:36.600 --> 29:38.400
marked for destruction.

29:38.400 --> 29:43.760
What that means is they've scheduled garbage collection to go in as part of the main loop

29:43.760 --> 29:45.040
whenever it's idle.

29:45.040 --> 29:47.320
So there's an idle callback that happens.

29:47.320 --> 29:49.640
And when that idles, that means there's nothing really going on.

29:49.640 --> 29:51.440
The main thread's not doing anything.

29:51.440 --> 29:53.340
So hey, anybody have some idle work for me?

29:53.340 --> 29:54.400
It checks in.

29:54.400 --> 29:58.900
When that happens, the garbage collector will be executed, and it will go through and do

29:58.900 --> 30:02.240
a whole bunch of scheduled cleanup and take care of that stuff.

30:02.240 --> 30:03.640
So it should stay on top of it.

30:03.640 --> 30:05.620
Now the early results look good.

30:05.620 --> 30:09.560
It seems like this is working, and it's keeping memory usage down.

30:09.560 --> 30:11.680
There could be some performance overhead.

30:11.680 --> 30:14.280
There could be some secondary results from this.

30:14.280 --> 30:18.160
So a lot of different projects have been calling for testing this week, especially, as Joe

30:18.160 --> 30:23.440
just mentioned, 1804 is just around the corner, which is really a showcase for Gnome.

30:23.440 --> 30:28.000
But it's great just to see folks from Red Hat contributing, of course, Canonicals, Daniel

30:28.000 --> 30:29.560
Van Vought, I think.

30:29.560 --> 30:31.000
I can't remember his last name.

30:31.000 --> 30:34.340
He was also helping test some of the deep issues in the mutter.

30:34.340 --> 30:36.520
He's continuing to work there as well.

30:36.520 --> 30:41.440
It's just a really great sort of cross-project collaboration that came together.

30:41.440 --> 30:45.160
Some people provided great stats and memory usage information.

30:45.160 --> 30:46.640
Other people provided code.

30:46.640 --> 30:49.800
Lots of people provided additional information on the bug reports.

30:49.800 --> 30:53.920
It took a few weeks, but they really got somewhere that shows some considerable progress.

30:53.920 --> 30:57.980
And they've made other improvements that should actually make Gnome Shell smoother, unrelated

30:57.980 --> 30:59.600
to this memory misbehavior.

30:59.600 --> 31:03.220
Yeah, it's great to see so many different people and organizations coming together to

31:03.220 --> 31:04.220
fix this.

31:04.220 --> 31:06.560
But it does need to be tested.

31:06.560 --> 31:12.120
And so if you are a Gnome user, especially if you're running the Ubuntu 1804 dailies,

31:12.120 --> 31:16.740
then you can go out and get the devs and get these fixes installed and get it tested and

31:16.740 --> 31:18.000
report any problems that you have.

31:18.000 --> 31:22.120
Yeah, and of course, we'll be covering the 1804 release as well as all of the news next

31:22.120 --> 31:26.160
week and a brief report from my adventures at Linux Fest Northwest.

31:26.160 --> 31:30.960
So go to linuxactionnews.com slash subscribe for all the ways to get new episodes every

31:30.960 --> 31:31.960
single week.

31:31.960 --> 31:35.400
And go to linuxactionnews.com slash contact to get in touch with us.

31:35.400 --> 31:39.160
And you can support the entire network, our future projects, our current projects and

31:39.160 --> 31:42.160
more at patreon.com slash jupitersignal.

31:42.160 --> 31:45.940
We'll be back next Monday with our weekly take on the latest Linux and open source news.

31:45.940 --> 31:47.580
I'm at Chris LAS.

31:47.580 --> 31:49.040
I'm at Joe Rissington.

31:49.040 --> 31:51.680
Thank you for joining us and we'll see you next week.

31:51.680 --> 32:08.000
Until then, have a great day, and we'll see you later.


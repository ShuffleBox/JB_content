WEBVTT

00:00.000 --> 00:16.480
Hello, and welcome to Linux Action News, our weekly take on Linux and the open-source world.

00:16.480 --> 00:20.920
This is episode 95, recorded on March 3rd, 2019. I'm Chris.

00:20.920 --> 00:21.920
And I'm Tom.

00:21.920 --> 00:26.240
Hello, Joe. Good to be connected with you. Well, y'all think in the room this week it's

00:26.240 --> 00:30.040
Mobile World Congress week, but I think we've done a pretty good job of sifting through

00:30.040 --> 00:34.960
some of the non-obvious stories. I don't see a single foldable screen story or crazy battery

00:34.960 --> 00:38.560
phone story in here. It's more of our speed, isn't it, Joe?

00:38.560 --> 00:41.880
Yes, it is. And let's start with the release of Lineage OS 16.0.

00:41.880 --> 00:49.840
Yeah, goodbye to Lineage 14.1 and hello Lineage 16.0, which is based on Android 9, which is

00:49.840 --> 00:52.440
Android Pie, and I think that came out in August.

00:52.440 --> 00:58.040
Yeah, development seems to be speeding up a bit. They've laid the groundwork with 15.1

00:58.040 --> 01:02.240
to make these releases more timely and more in keeping with the release schedule of the

01:02.240 --> 01:08.200
Android upstream. You kind of mentioned the end of 14.1. That makes me sad, so I don't

01:08.200 --> 01:11.320
know, we'll talk about that in a bit maybe, but let's talk about the positive side of

01:11.320 --> 01:20.300
it first. I flashed this on a OnePlus One, and it's great. It's stable, fast, just works

01:20.300 --> 01:22.520
exactly how you'd want Lineage OS to work.

01:22.520 --> 01:26.720
Oh, interesting. Well, the initial devices supported isn't a ton. I mean, it's growing

01:26.720 --> 01:30.240
now, but I guess that makes two devices on this list I see that you have.

01:30.240 --> 01:35.920
Yeah, I've also got the OnePlus 3T, which is my daily driver phone, my main phone. And

01:35.920 --> 01:41.660
although I could have upgraded it, I don't want to take the risk yet. I need to set aside

01:41.660 --> 01:47.840
a good day where I can do it because if something goes wrong, then I'm just without a phone

01:47.840 --> 01:52.760
and that would just be a nightmare scenario for me. So thankfully, having another device

01:52.760 --> 01:56.440
on the list, the OnePlus One, means that I can try it out on that. And it has really

01:56.440 --> 02:01.040
reminded me that, apart from the fact that my battery was basically dead, and then in

02:01.040 --> 02:05.000
trying to do it, I managed to snap off the Wi-Fi antenna, making the phone pretty much

02:05.000 --> 02:10.160
useless, it is actually a great phone. And with Lineage on it, you can get a completely

02:10.160 --> 02:16.000
up-to-date phone that has got all the security updates, runs like a dream, and you can pick

02:16.000 --> 02:17.960
one of these up so cheap now.

02:17.960 --> 02:22.360
It is a nice reminder that Android is actually an open-source project. You guys out there

02:22.360 --> 02:27.120
that aren't in the Google Denialist Club, like Joe, might not remember, but Lineage

02:27.120 --> 02:32.920
OS is the successor of Cyanogenmod, which ended in late 2016. Now, XDA reports that

02:32.920 --> 02:42.440
Lineage OS, as of 2018, had almost 1.8 million active installs. That's pretty great. I tease,

02:42.440 --> 02:47.320
I feel like people who install these ROMs are a bit... they're like that dog that's

02:47.320 --> 02:50.520
sitting in a room that's on fire saying, this is fine, while they're out there buying these

02:50.520 --> 02:55.840
products. I sort of feel like you're that guy. But at the same time, if I had a device

02:55.840 --> 03:00.320
like this, or if I needed something that was an Android-based app, but wasn't comfortable

03:00.320 --> 03:06.020
with Google's version of Android, I can see the appeal. But in 2019, it seems like it's

03:06.020 --> 03:07.960
getting to be a harder and harder sell to end users.

03:07.960 --> 03:11.600
Yeah, I can see that. And it's certainly not for everyone running custom ROMs on their

03:11.600 --> 03:16.400
own. But it is for me, I like the customization. That's why I love Android, because you can

03:16.400 --> 03:21.800
customize it. And for all the things that iOS does well, customization isn't one of

03:21.800 --> 03:26.320
them. And that's among the many reasons that I don't use it. But of course, Lineage OS

03:26.320 --> 03:31.360
is not the only custom ROM out there. But it is the biggest one. As you said, a huge

03:31.360 --> 03:38.160
install base. It's almost mainstream, as close to mainstream as you can get with custom ROMs.

03:38.160 --> 03:44.160
And so them ending development of 14.1 is quite sad to me. Because although yes, there

03:44.160 --> 03:49.440
will be other custom ROMs for devices that have now been effectively abandoned, Lineage

03:49.440 --> 03:56.320
is just the mainstream. And my go to because it just works really well. And I know that

03:56.320 --> 04:01.800
I can trust it. So now there's tons of old phones like my wife's Nexus 5, which are not

04:01.800 --> 04:06.920
going to get security updates anymore, unless I go for an unofficial version, or a different

04:06.920 --> 04:11.720
ROM, which I could do and I probably will do. But it's just sad to me that I've now

04:11.720 --> 04:17.500
got several devices which are not supported anymore officially by Lineage. And so it's

04:17.500 --> 04:18.500
bittersweet this.

04:18.500 --> 04:22.600
I suppose it was a bit inevitable. But I do think every time we talk about Lineage, you

04:22.600 --> 04:28.000
kind of start to change my mind and make me want to try it out. Okay, I'm coming around

04:28.000 --> 04:29.000
to your way of seeing it.

04:29.000 --> 04:32.560
Yeah, well, you've got devices. Have you got a 6P that you could flash it on maybe?

04:32.560 --> 04:37.280
Oh, yeah, for sure. Yeah, I've got a Pixel 3 and a 6P. Those are my most modern. And

04:37.280 --> 04:42.840
I've got like an old Nexus 5 or 5x. I think it's just the 5 banging around in a drawer

04:42.840 --> 04:43.840
somewhere.

04:43.840 --> 04:47.200
Yeah, I mean, you can flash the Google Apps on it and get a very similar experience. Or

04:47.200 --> 04:52.120
you can go the other way and just leave it without. And from what I've heard, the battery

04:52.120 --> 04:56.180
life is absolutely amazing. If you don't flash the Google Apps, you don't get stuff like

04:56.180 --> 04:59.720
play services, which are just running in the background draining your battery.

04:59.720 --> 05:03.640
Yeah, you don't get a lot of functionality in apps, but I did do that experiment and

05:03.640 --> 05:08.960
confirm. I think I added like two days to my battery life at least. But if I'm trying

05:08.960 --> 05:15.320
to avoid Google or I want to get more value out of my phone, honestly, if I wasn't looking

05:15.320 --> 05:20.080
at an iPhone these days, I'd seriously be tempted by one of these KaiOS phones. And

05:20.080 --> 05:23.080
that's one of our other mobile stories that we have this week that I didn't see a lot

05:23.080 --> 05:26.920
of coverage on, so I'm glad you found this one. The KaiOS folks are reporting they now

05:26.920 --> 05:32.200
have 85 million feature phones shipped running their Linux-based OS.

05:32.200 --> 05:38.540
Yeah, this is a continuation of Firefox OS, of course, which is long dead, but does live

05:38.540 --> 05:45.280
on in this form. And it's not designed to be running on smartphones, but then it's kind

05:45.280 --> 05:52.120
of bridging the gap between the real dumb phones, the kind of candy bar phones and smartphones.

05:52.120 --> 05:56.780
It's trying to sit within that niche, which makes it absolutely ideal for a lot of developing

05:56.780 --> 06:03.320
markets. So India is one of the big markets for it. But all being well, one of these may

06:03.320 --> 06:06.840
well be landing on my doorstep this coming week.

06:06.840 --> 06:07.840
Oh, you ordered one?

06:07.840 --> 06:09.880
Yeah, the Nokia Banana phone.

06:09.880 --> 06:10.880
How much was it?

06:10.880 --> 06:13.400
I paid 30 quid for it, I think.

06:13.400 --> 06:18.620
That's the thing about these phones is they range from about 20-something US dollars to

06:18.620 --> 06:24.940
about 30 to 40-something US dollars. And that includes things with LTE and whatnot. Like,

06:24.940 --> 06:31.800
it's not horrible. They are really focused with KaiOS on the non-touch feature phone

06:31.800 --> 06:38.080
segment. So like Joe said, it's a lot like phones that I initially had before smartphones

06:38.080 --> 06:43.480
were a thing, like some of my favorite Nokia phones and my Sony Ericsson phone. It looks

06:43.480 --> 06:48.220
a lot like those. In fact, the nostalgia factor is very high. I looked up some of these phones

06:48.220 --> 06:53.760
to see the pricing and honestly kind of want one because I could see getting some basic

06:53.760 --> 06:58.120
functionality. I'm still reachable by my family, but I don't have Twitter, I don't have Telegram,

06:58.120 --> 07:03.720
I don't have iMessage or WhatsApp or whatever it might be. It's just a simple phone. But

07:03.720 --> 07:07.780
that's not been very true for a while. In fact, months ago, we reported on Google doing

07:07.780 --> 07:12.340
a deal to land some of their services on there. WhatsApp has an app and I wouldn't be surprised

07:12.340 --> 07:16.120
if we don't see Telegram and a bunch of other things landing on these quote unquote feature

07:16.120 --> 07:21.560
phones because according to the KaiOS folks, consumers in these markets, which is predominantly

07:21.560 --> 07:27.880
North Africa, the Middle East and Asia, want something that's less expensive than a smartphone,

07:27.880 --> 07:30.880
but they want it loaded with almost all the same features as a smartphone.

07:30.880 --> 07:35.500
Yeah, including a voice assistant, which seems like a very strange thing to have on a low

07:35.500 --> 07:40.600
end feature phone to me. It means that all the processing is going to have to be in the

07:40.600 --> 07:45.320
cloud. It's almost just a dumb terminal at that point, isn't it? You can't expect it

07:45.320 --> 07:52.840
to do any offline processing, which means potentially high data usage and stuff a lot.

07:52.840 --> 07:58.480
I suppose it'll be optimized. But still, it just seems like a strange fit for me. Smartphones

07:58.480 --> 08:02.560
it makes a lot more sense. But these kind of bridge phones, I don't know, really.

08:02.560 --> 08:06.040
Yeah, and they're all HTML5 apps, too. So they're not going to be that great. But that's

08:06.040 --> 08:10.220
what consumers want, at least according to David Bang. He's the vice president of marketing

08:10.220 --> 08:15.960
and business development for KaiOS in North America. He also mentions, by the way, that

08:15.960 --> 08:21.800
these are getting traction in North America. They've sold 500,000 units to AT&T, Sprint

08:21.800 --> 08:27.440
and T-Mobile, which is not bad. And the other app that's landing on this thing, which think

08:27.440 --> 08:35.520
about this, is YouTube. All over the world now, even on $20 phones, YouTube will be available.

08:35.520 --> 08:40.000
YouTube is so locked in as our video platform forever. I just can't see something like

08:40.000 --> 08:44.120
PeerTube or any other open source competitor coming along and ever knocking it off its

08:44.120 --> 08:49.800
throne, especially with the reach of Google, who can write $20 million checks to KaiOS

08:49.800 --> 08:51.120
and have them include the YouTube app.

08:51.120 --> 08:55.520
I don't know. This comments thing might take them down, but probably not.

08:55.520 --> 08:59.320
Could you imagine leaving a comment on a feature phone that doesn't have a keyboard, so you'd

08:59.320 --> 09:02.080
have to type it out using that old T9 recognition?

09:02.080 --> 09:06.680
Well, I'm looking forward to trying out WhatsApp with the T9 thing. I don't know if it'll be

09:06.680 --> 09:09.520
like riding a bike. Will it just come straight back to me?

09:09.520 --> 09:13.080
Maybe. Maybe you'll find it's faster, actually. Who knows? I think there's some people that

09:13.080 --> 09:14.080
think that.

09:14.080 --> 09:17.960
I think a lot of people think that until they actually try it and then they realize, no,

09:17.960 --> 09:22.560
actually a proper QWERTY keyboard, even on screen, is going to be faster than T9. But

09:22.560 --> 09:27.280
I was pretty good at it back in the day. I'll have to report back once I've got my hands

09:27.280 --> 09:28.280
on this thing.

09:28.280 --> 09:33.080
Yeah, I will be interested to know what you think about it. I wouldn't be that surprised

09:33.080 --> 09:36.600
if you switched to it as your main phone. I could see you doing that, Joe.

09:36.600 --> 09:40.520
I could not see me doing that. I could see myself selling it very shortly after trying

09:40.520 --> 09:42.000
it out, but we'll see.

09:42.000 --> 09:47.960
Yeah, I think so. Well, because you want to be on Android, right? I mean, Android's going

09:47.960 --> 09:50.920
to do away with passwords, Joe, for a billion users.

09:50.920 --> 09:57.080
Yeah, that's the promise. Now that Android is FIDO2 certified, FIDO standing for Fast

09:57.080 --> 10:03.320
Identity Online, and the promise is that with things like a fingerprint reader or possibly

10:03.320 --> 10:08.960
a hardware dongle like a YubiKey, you'll be able to have completely passwordless logins

10:08.960 --> 10:11.200
to a lot of websites in the browser.

10:11.200 --> 10:15.160
I bet there's a lot of people skeptical of something like this. So this is the FIDO Alliance.

10:15.160 --> 10:23.520
It's a consortium of PayPal, Google, Microsoft, Intel, Visa, RSA. Yubico is in there. A whole

10:23.520 --> 10:29.160
bunch of companies are in there. All of the major banks are in there, too. And their core

10:29.160 --> 10:36.040
mission is to develop a set of standards around authentication for apps and web applications

10:36.040 --> 10:42.320
that doesn't require the credentials to be stored on the services systems. They point

10:42.320 --> 10:46.040
to a data point that was collected by Verizon Security. Yeah, the Verizon company. They

10:46.040 --> 10:51.660
have a security arm. They say that 81% of data breaches in 2016 were caused by stolen

10:51.660 --> 10:57.580
or weak password credentials. 81% of data breaches in 2016, they say. And the issue

10:57.580 --> 11:02.640
seems to have just gotten worse over the years. That's just when they did their study. So

11:02.640 --> 11:08.000
with these standards, the idea is the end user can use whatever verification mechanism

11:08.000 --> 11:12.600
they have, like Joseph, maybe it's your fingerprint on your mobile device or a biometric device

11:12.600 --> 11:18.680
that's attached to your computer or a YubiKey. It does that locally. It verifies it and then

11:18.680 --> 11:23.600
sends a hash off to the remote service, logs you in. They never store your credentials,

11:23.600 --> 11:27.400
which seems very appealing. And they have various demos on YouTube where you can see

11:27.400 --> 11:32.120
this happen. And you mentioned a billion devices. The reason that it's so many is that it's

11:32.120 --> 11:37.640
going to be supported on Android 7 or later. And you're not going to have to get a software

11:37.640 --> 11:42.480
update for this. It's going to be delivered via the Google Play Services updates, which

11:42.480 --> 11:45.840
is the argument that Google would make for running that proprietary stuff on top of the

11:45.840 --> 11:52.080
open source base. And I suppose it's a reasonable one, isn't it? That if they can deliver major

11:52.080 --> 11:57.640
features like this to people who are never going to get an update otherwise, maybe you

11:57.640 --> 11:59.120
can kind of see their point of view.

11:59.120 --> 12:03.040
Yeah, I mean, that's what the Google Play Services and all of that came around. So that

12:03.040 --> 12:08.000
way they could have a base that app vendors could rely upon that could be portable between

12:08.000 --> 12:14.200
versions of Android. There's reason why they've baked everything in that from location to

12:14.200 --> 12:20.520
payment processing and now authentication. Fido Alliance seems to be getting a lot of

12:20.520 --> 12:25.880
support. It's a little fuzzy on how far like Safari and the iOS devices are going to go

12:25.880 --> 12:32.720
with their support. But besides Apple, adoption by Firefox and Chrome is in. It's solid. Microsoft's

12:32.720 --> 12:37.320
on board. You can log into Azure right now with Fido Auth. So it's getting more and more

12:37.320 --> 12:44.600
industry adoption. You can find some videos on YouTube from FOSDAM 2018 called Breaking

12:44.600 --> 12:49.080
Fido, which has a great overview of its security architecture.

12:49.080 --> 12:54.200
The thing is, though, I asked a web dev who does a lot of mobile stuff whether he was

12:54.200 --> 12:59.800
going to be implementing this for clients and he'd never heard of it. So it's not a

12:59.800 --> 13:04.480
good sign to me that we're going to get widespread adoption quickly. I mean, that's only a sample

13:04.480 --> 13:09.480
size of one. So obviously take it with a pinch of salt. But I don't think that it's widely

13:09.480 --> 13:14.240
known about really, even within the industry. I think it's going to take months or even

13:14.240 --> 13:17.520
years really before it's just a standard thing.

13:17.520 --> 13:22.240
Yeah, absolutely. Although it does start with the platform adding support so that Google

13:22.240 --> 13:27.320
Play API or your web browser or whatever the platform is, they have to bake it in there

13:27.320 --> 13:31.400
so then developers can take advantage of it. And that's the step we're at right now is

13:31.400 --> 13:33.480
they're baking it at the platform level still.

13:33.480 --> 13:38.240
Yeah, I just wish that the Google Play services stuff was open source. I don't think it's

13:38.240 --> 13:42.480
ever going to happen. But imagine if it did. That would be so awesome for the platform

13:42.480 --> 13:46.920
to be completely open source. But I don't know, maybe I'm dreaming again.

13:46.920 --> 13:51.520
Maybe Joe, although people one day would have told you a totally open source CPU architecture

13:51.520 --> 13:54.080
was impossible. And we know that's not true.

13:54.080 --> 13:57.400
Yeah, RISC-V is back in the news this week with a few different stories actually. The

13:57.400 --> 14:02.000
first one being that support has been added to the grub bootloader for it.

14:02.000 --> 14:05.760
Yeah, it's just in the last few Git commits as we record this episode, RISC-V support

14:05.760 --> 14:12.400
has been merged and it ended up just being about a mere 400 new lines of code. Not too

14:12.400 --> 14:13.400
bad.

14:13.400 --> 14:18.680
It's a pretty big step towards making RISC-V a mainstream platform running GNU slash Linux.

14:18.680 --> 14:24.080
So yeah, it's very good to see. But another one is that RISC-V support has been added

14:24.080 --> 14:27.240
to the free RTOS kernel by Amazon.

14:27.240 --> 14:30.160
Well, you know, this story actually made me think you're onto something, Joe, with all

14:30.160 --> 14:35.580
this RISC-V stuff, because if Amazon's willing to throw in like this, you might be onto something.

14:35.580 --> 14:42.120
After that Linus article, I was starting to think maybe we were dreaming with this, but

14:42.120 --> 14:46.420
they're contributing in several significant ways to free RTOS, which is a popular operating

14:46.420 --> 14:51.800
system designed for little itty bitty, small, simple application processors, like little

14:51.800 --> 14:55.740
microcontrollers that are involved with something, maybe like opening a valve or it could be

14:55.740 --> 15:00.200
all kinds of things. Maybe they even connect to a board that syncs to a system over Bluetooth,

15:00.200 --> 15:06.240
low energy or Wi-Fi or even a serial connection. It varies a lot.

15:06.240 --> 15:14.200
But at first, I couldn't really see the connection. AWS, Amazon and these tiny little microprocessors

15:14.200 --> 15:17.920
in built in embedded systems. Like, what was the connection?

15:17.920 --> 15:22.600
Well, these little IoT devices on the edge have to report back to a server somewhere

15:22.600 --> 15:24.080
and we're better than AWS, eh?

15:24.080 --> 15:28.320
Yeah, I just always thought maybe that was a myth. Like, why would you take something

15:28.320 --> 15:33.520
that is perfectly secure and connect it to the internet? That just seems like a bad idea.

15:33.520 --> 15:39.440
But Amazon clearly sees demand here and on the free RTOS website, they have a, I guess

15:39.440 --> 15:43.180
they call it an Amazon FAQ, we'll have a link in the show notes, and they write here that

15:43.180 --> 15:48.280
device manufacturers are connecting their MCU based devices to the cloud to innovate

15:48.280 --> 15:53.160
both their products and their business models. However, it takes time to build the security

15:53.160 --> 15:58.880
and connectivity components necessary for this connectivity into the device's software.

15:58.880 --> 16:05.480
A significant portion of these connected MCU devices are already running on a free RTOS

16:05.480 --> 16:13.240
kernel. So Amazon figured to speed up adoption of AWS services with these devices, they'd

16:13.240 --> 16:18.320
provide the free RTOS project with the resources necessary to extend their offering, fully

16:18.320 --> 16:22.760
integrate security and connectivity libraries and ensure those libraries are developed and

16:22.760 --> 16:28.160
maintained in the long term, which is an improvement for the entire project, not just on Amazon

16:28.160 --> 16:32.780
services or for Amazon's customers, but for everybody using free RTOS. It's sort of best

16:32.780 --> 16:34.520
case for an open source project.

16:34.520 --> 16:42.920
And this just makes so much sense for RISC-V to be deployed in these really low power devices,

16:42.920 --> 16:48.520
rather than the dream of a free software running laptop with RISC-V at the heart of it. That's

16:48.520 --> 16:56.220
so far off at this point. We need to get the adoption first in these kind of edge devices.

16:56.220 --> 16:59.480
And then maybe they'll develop to the point where we can do some serious computing on

16:59.480 --> 17:03.360
them. And I don't know, maybe it just means they're going to be kind of put into this

17:03.360 --> 17:08.640
nation stay there. But then you could argue that happened with ARM first that was embedded

17:08.640 --> 17:15.280
systems. And now we're starting to get servers and starting to get laptops running. So I'm

17:15.280 --> 17:17.240
going to try and look on the bright side here, I think.

17:17.240 --> 17:21.040
I think it has a good shot. I think that is a there's a good shot of that happening. And

17:21.040 --> 17:27.160
the secret sauce here for RISC-V is that it is open source. So there's more potential

17:27.160 --> 17:32.440
for more different types of devices to get built, where they don't have to go to ARM

17:32.440 --> 17:38.280
and spend an arm and a leg to license.

17:38.280 --> 17:43.240
Well the other side of RISC-V being an open instruction set architecture is that you can

17:43.240 --> 17:47.640
build on top of that by adding proprietary bits. And that's what we've seen from Greenwaves

17:47.640 --> 17:54.840
who are using RISC-V to create AI capable chips, which is good that it is kind of driving

17:54.840 --> 17:59.880
more adoption of RISC-V. But it's showing that other side of it that it's not just this

17:59.880 --> 18:06.060
free software utopia. There are strong commercial reasons for this. It means that people can

18:06.060 --> 18:13.240
take that instruction set architecture and make chips much more affordably than using

18:13.240 --> 18:14.240
something like ARM.

18:14.240 --> 18:17.800
Right. It's part of the puzzle piece. It's not a full puzzle. The other piece is like

18:17.800 --> 18:23.560
in the case of this Greenwave company, they're what's known as a fabless chip maker, which

18:23.560 --> 18:27.920
means that they design chip architectures and then it builds them by outsourcing to

18:27.920 --> 18:34.160
a hardware manufacturer. And then Greenwave builds on top of that their proprietary application

18:34.160 --> 18:39.360
layer and their special sauce. But it means that they get at that a lot faster than if

18:39.360 --> 18:43.660
they had to build a microprocessor from the ground up or license something from ARM and

18:43.660 --> 18:50.080
have that assembled. So it's part of a puzzle. It's maybe a bit akin to how Linux is on Android

18:50.080 --> 18:54.560
handsets, but what the end user interfaces with isn't open source.

18:54.560 --> 18:58.880
Yeah, that is a reasonable analogy, but I suppose that's enough mobile and embedded

18:58.880 --> 19:02.280
stuff. Let's talk about some good old fashioned desktop GNU slash Linux.

19:02.280 --> 19:07.360
Yeah, as Linux users were warned this week about the dangers of Thunderbolt with the

19:07.360 --> 19:13.120
thunderclap vulnerability. I imagine it has like some sort of echo effect and like a thundering

19:13.120 --> 19:15.200
in the background and it's pretty scary.

19:15.200 --> 19:19.800
Yeah, I don't really understand why this is news. There's only a few details of it really

19:19.800 --> 19:25.240
that make it news because we've known for a long time that there's an inherent vulnerability

19:25.240 --> 19:31.440
in Thunderbolt. Anyone with physical access to your device can basically take it over.

19:31.440 --> 19:36.600
The reason that Thunderbolt is so fast is because it has direct access to the hardware.

19:36.600 --> 19:42.680
Yeah, it's on the PCI Express bus. It is the same level of vulnerability as if somebody

19:42.680 --> 19:49.060
opened up a PC case and installed a PC card into the PCI bus. So that's kind of what makes

19:49.060 --> 19:54.440
Thunderbolt great, but that's also what makes it a little dangerous and Linux actually has

19:54.440 --> 19:55.540
protections for that.

19:55.540 --> 19:58.980
But I'll tell you, I did some digging. I figured out why this is news because how they did

19:58.980 --> 20:04.240
it is super cool and I think that's part of what's getting it spread around. So some researchers

20:04.240 --> 20:10.240
presented a new set of vulnerabilities with Thunderbolt and a new kind of unique way to

20:10.240 --> 20:16.440
exploit these issues where the authors built a fake network card and then performed various

20:16.440 --> 20:20.720
direct memory attacks. And here's how they built this network card. It's so cool. They

20:20.720 --> 20:28.820
write, we extracted a software model of an Intel E1000 from a QMU full system emulator.

20:28.820 --> 20:34.960
We then ran it on an FPGA board. And then they have more details on their GitHub. So

20:34.960 --> 20:46.640
they took this model of an Intel E1000 from QMU and then emulated it on an FPGA with a

20:46.640 --> 20:51.440
Thunderbolt port. And then we're able to connect it to a Thunderbolt port on a machine. And

20:51.440 --> 20:57.000
the system thought it was talking to a network card. So it granted it access to the PCI bus.

20:57.000 --> 21:02.480
It's not really surprising. This is how it works. And that's why Linux has Bolt. Bolt

21:02.480 --> 21:07.360
is a security mechanism for Thunderbolt where you can allow devices access or not.

21:07.360 --> 21:11.600
Yeah. And let's not forget that what they made here actually does function as a network

21:11.600 --> 21:16.060
card. And that's kind of the point that they're making. If you go to a conference and plug

21:16.060 --> 21:22.440
a projector into your USB-C port that is Thunderbolt, then it may still work as a projector, but

21:22.440 --> 21:24.640
it could also be doing loads of nefarious stuff.

21:24.640 --> 21:29.780
Yeah. I think anytime you're plugging anything into your machine, even if it's USB, you need

21:29.780 --> 21:34.040
to be careful. So there's a primary defense against these DMA attacks for Thunderbolt

21:34.040 --> 21:38.280
3 and there are three different security levels. If they're enabled and they're turned on by

21:38.280 --> 21:43.320
default in the BIOS on most systems, it gives the software the ability on your computer

21:43.320 --> 21:50.920
to decide on a per device level to allow any PCIe tunnels or not. While not protecting

21:50.920 --> 21:55.780
you from all of the attacks, this is like the most common physical attacks that we keep

21:55.780 --> 21:58.240
talking about where somebody walks up and plugs in.

21:58.240 --> 22:02.200
And I think this is where some of the confusion is coming in and maybe some of the newsworthiness

22:02.200 --> 22:08.920
is the paper, maybe just as a result of like the review process or whatever, states that

22:08.920 --> 22:14.080
the situation for Linux is that patches for approval of hot plug devices have been produced

22:14.080 --> 22:19.480
by Intel and distributions are beginning to implement user interfaces. But that's actually

22:19.480 --> 22:24.200
not true. The user interface is baked into GNOME now. Plasma is getting one. There's

22:24.200 --> 22:29.560
also the Bolt D command line that exists already. And kernel level support landed in kernel

22:29.560 --> 22:37.940
4.13. So that's RHEL 7.6, for example, already has this. And that's an enterprise grade distro.

22:37.940 --> 22:43.160
So the paper kind of misstates that just simply because I think of the review process timeline.

22:43.160 --> 22:48.480
And that also caused some news sites to misreport that Linux was actually vulnerable to this.

22:48.480 --> 22:50.560
It's vulnerable, but it has the mitigations.

22:50.560 --> 22:54.720
Well, jokes on everyone else. I've got the ultimate mitigation. My laptop doesn't have

22:54.720 --> 22:55.720
Thunderbolt.

22:55.720 --> 22:56.720
Very savvy, Joe.

22:56.720 --> 23:03.320
Yeah, I deliberately did that. It's not because I don't need external graphics or anything.

23:03.320 --> 23:07.840
And USB-C is fast enough for storage for a laptop, I think. And my desktop as well doesn't

23:07.840 --> 23:11.120
have Thunderbolt. I don't really understand why desktops would have Thunderbolt when they've

23:11.120 --> 23:17.040
got PCIe slots. But I suppose maybe you want multiple devices or whatever.

23:17.040 --> 23:23.480
There are some really fast external storage arrays that are like all MV&E disks in a tower

23:23.480 --> 23:26.880
that come back over Thunderbolt. And it's mind blowing fast.

23:26.880 --> 23:30.720
Yeah, you can have multiple displays and stuff like that. So I can see there are definitely

23:30.720 --> 23:36.360
advantages there. But again, with this physical access thing as well, that's really what we're

23:36.360 --> 23:40.720
talking about here. You have to have physical access to the device to be able to do anything

23:40.720 --> 23:44.760
nefarious. And isn't that the first rule of computing? If you've got physical access,

23:44.760 --> 23:46.640
then you can do whatever you want with it.

23:46.640 --> 23:51.280
Oh, yeah. Yeah, for sure. If I get to somebody's computer, I'm way more likely to go after

23:51.280 --> 23:54.360
single user mode than I am with Thunderbolt.

23:54.360 --> 24:00.360
Exactly. But I think it's more about hidden uses, isn't it? Like projectors and chargers.

24:00.360 --> 24:04.520
And that's one of the big bits of advice is don't charge your laptop via the Thunderbolt

24:04.520 --> 24:09.200
port if it's a charge you don't trust. Just use one of the non-Thunderbolt ports, which

24:09.200 --> 24:13.640
most laptops do, don't they? They have kind of just a USB-C port.

24:13.640 --> 24:18.800
Yeah, not MacBooks. MacBooks, I think, are all USB-C Thunderbolt 3, except for maybe

24:18.800 --> 24:22.440
like one of the models. But you're right, like my ThinkPad has a different port for

24:22.440 --> 24:30.180
charging and a different port for Thunderbolt. But I wonder if the next phase of this attack,

24:30.180 --> 24:35.160
the one that I think would be legitimately newsworthy, would be if they could compromise

24:35.160 --> 24:39.800
the firmware of a common dongle, something that you do see like in the corporate work

24:39.800 --> 24:44.840
environment or at a presenter's booth. Some of these dongles, like some of Apple's dongles

24:44.840 --> 24:50.820
that do video out over USB-C, actually are running a mini OS on them doing video decoding

24:50.820 --> 24:56.280
on chip inside the dongle. Inside the dongle, there's a mini computer in there. So if you

24:56.280 --> 25:01.040
could compromise something like that, which would be a trusted device and deliver some

25:01.040 --> 25:06.880
kind of payload or even just read memory and dump it to a chip, that I think would be a

25:06.880 --> 25:07.880
real news story.

25:07.880 --> 25:10.200
Yeah, I could definitely see that happening.

25:10.200 --> 25:15.680
Well something else that we saw coming was the end of the Korora project, a beloved re-spin

25:15.680 --> 25:16.920
of Fedora Desktop.

25:16.920 --> 25:22.520
Yeah, beloved by me as well. Now Fedora, don't get me wrong, is a great distro, but Korora

25:22.520 --> 25:28.080
just built on top of that and just made it so easy to do so many things and just made

25:28.080 --> 25:34.280
it a more polished, better experience. And so 10 months ago when they said that it was

25:34.280 --> 25:38.940
looking like there weren't going to be any updates in the near future, I was pretty sad

25:38.940 --> 25:45.280
about that. And then this week they've tweeted to say that's it. Their website's now redirecting

25:45.280 --> 25:50.320
to getfedora.org. And so that's it. Rest in peace.

25:50.320 --> 25:56.520
Yeah, I agree with listener xMetal. He wrote Korora was always that, oh, that's how I set

25:56.520 --> 26:01.600
up Fedora Distro. And I often would install it, look around and go, okay, next time I

26:01.600 --> 26:06.480
load Fedora, I'm going to do a little bit like this. Plus, also for those of us that

26:06.480 --> 26:12.320
love to KDE spin, this was a great way to go. So they made it a good 13 years. And Fedora

26:12.320 --> 26:19.800
of today is really different than it was 13 years ago. I'm running it right now on a Thinkpad

26:19.800 --> 26:23.200
and I'm running Telegram, I'm running Slack, I've got Chrome on there. I mean, I've got

26:23.200 --> 26:29.520
all of the negative in the Freedom Dimension apps. And it was pretty simple to get going.

26:29.520 --> 26:33.020
But on top of that, I've got just a ton of new apps that I've installed from Gnome Software

26:33.020 --> 26:37.020
because Gnome Software is actually getting pretty usable. And I have a new firmware update

26:37.020 --> 26:41.720
that I just installed on my machine. It's feeling like a first class desktop experience

26:41.720 --> 26:47.480
now. And the availability of software is just checkboxes away. And maybe one repo ad in

26:47.480 --> 26:52.320
your set. It's a totally different user experience now. And Gnome is in a totally different state

26:52.320 --> 26:56.800
than it was 13 years ago. So it's maybe time.

26:56.800 --> 27:01.640
Yeah, I was gonna say that as well that Fedora has come a long way. And I don't know, has

27:01.640 --> 27:06.500
it maybe taken influence from Korora? Or maybe it's just gone that way anyway, but it does

27:06.500 --> 27:13.200
seem a lot more user friendly now to add codecs and get the proprietary stuff. They're sort

27:13.200 --> 27:18.280
of less locked down about that stuff now. And so maybe Korora was becoming less relevant

27:18.280 --> 27:23.480
anyway. So although it will be missed, it's maybe not going to be as missed as it could

27:23.480 --> 27:26.840
have been had this happened, say five years ago.

27:26.840 --> 27:30.700
As someone who was kind of a skeptic for a while, and I'm now following Fedora with quite

27:30.700 --> 27:35.320
a bit of interest, I have a server installation and now a desktop installation. I like the

27:35.320 --> 27:38.520
direction they're going. I don't know, a little birdie tells me we'll probably be hearing

27:38.520 --> 27:41.320
more about Fedora on future Choose Linux episodes too.

27:41.320 --> 27:45.480
Yeah, it won the vote for Jason's next community distro challenge. So it looks like I'll be

27:45.480 --> 27:50.880
installing it. I think he'll be doing a second vote for which spin of Fedora, which desktop.

27:50.880 --> 27:53.880
And I'm hoping that Gnome doesn't win. Come on, Xfce for the win.

27:53.880 --> 27:54.880
Oh, geez.

27:54.880 --> 27:59.920
No, it looks like I'll be checking out Gnome very soon.

27:59.920 --> 28:04.400
Well, in the meantime, this show comes out every single Monday. Go to linuxactionnews.com

28:04.400 --> 28:07.560
slash subscribe for all the ways to get new episodes.

28:07.560 --> 28:11.040
And go to linuxactionnews.com slash contact for ways to get in touch.

28:11.040 --> 28:15.400
And if you're going to scale this coming weekend, I'll be there and we're having a meetup, meetup.com

28:15.400 --> 28:20.680
slash Jupiter broadcasting. For those details, we're having a dinner, Elle's having a talk,

28:20.680 --> 28:24.760
there's a lot going on at scale this year. We'd love to say hi. Meetup.com slash Jupiter

28:24.760 --> 28:29.480
broadcasting for that and a bunch of other events we've got going on.

28:29.480 --> 28:33.400
We'll be back next Monday with our weekly take on the latest Linux and open source news.

28:33.400 --> 28:35.200
I'm at Chris LAS.

28:35.200 --> 28:36.880
I'm at Joe Ressington.

28:36.880 --> 28:39.360
Thank you for joining us. And I'll see you at scale.

28:39.360 --> 28:57.360
I'll see you later.


WEBVTT

00:00.000 --> 00:09.040
Hello, and welcome to Linux Action News, episode 170, recorded on January 3, 2021.

00:09.040 --> 00:10.040
I'm Chris.

00:10.040 --> 00:11.040
I'm Wes.

00:11.040 --> 00:12.100
Hello, Wes.

00:12.100 --> 00:14.520
And let's look back at the news.

00:14.520 --> 00:18.560
2020 really felt like one long month.

00:18.560 --> 00:22.080
So we've broken things out mostly by topic rather than chronologically.

00:22.080 --> 00:26.720
Let me tell you, there were some major open source developments last year.

00:26.720 --> 00:27.720
Yeah.

00:27.720 --> 00:31.280
But we're going to have lots of links and we'll lean heavily on some great reporting

00:31.280 --> 00:33.680
by Michael Arbel over at Ferronix.

00:33.680 --> 00:40.040
So be sure to check out our interview with him if you missed that in episode 166.

00:40.040 --> 00:44.080
Let's start things off where else but at the kernel of it all.

00:44.080 --> 00:52.680
The Linux kernel entered 2020 at 27.8 million lines of code, but actually with fewer developers

00:52.680 --> 00:54.480
than in 2019.

00:54.480 --> 01:00.180
Interestingly enough, later in the year, October 11th, we learned that the AMD Radeon graphics

01:00.180 --> 01:05.880
driver makes up roughly 10.5% of those 27.8 million lines of code.

01:05.880 --> 01:09.520
Turns out graphics drivers take a lot of lines of code.

01:09.520 --> 01:12.720
They sure do, as do file systems.

01:12.720 --> 01:16.960
And we got some good news for the exFAT file system in 2020.

01:16.960 --> 01:23.000
Now previously in the 5.4 kernel, we had a preliminary exFAT driver based on a several

01:23.000 --> 01:25.440
year old snapshot from Samsung.

01:25.440 --> 01:31.920
But after Microsoft made the exFAT specification public and encouraged support for Linux, Samsung

01:31.920 --> 01:36.600
worked to upstream their much improved version that they've been developing internally and

01:36.600 --> 01:38.800
shipping on their devices.

01:38.800 --> 01:42.180
That drivers in much better shape and it's going to be continued to be maintained by

01:42.180 --> 01:44.360
Samsung engineers going forward.

01:44.360 --> 01:47.680
We got that in kernel 5.7.

01:47.680 --> 01:51.160
There was an interesting trend that developed over the year that I don't know if we really

01:51.160 --> 01:57.680
saw it coming, but you could say there was a robust conversation around the kernel's

01:57.680 --> 02:00.080
scheduler in 2020.

02:00.080 --> 02:05.980
And it literally kicked off on day one, January 1st, a Stadia developer kind of complained

02:05.980 --> 02:10.760
that one of the adoption problems they were having was really because Linux's kernel wasn't

02:10.760 --> 02:16.520
good enough and that it could do some improvements and perhaps some new developers and new code

02:16.520 --> 02:20.640
in there, which as you can imagine, the kernel team, well, they had thoughts about that.

02:20.640 --> 02:21.640
Oh yes.

02:21.640 --> 02:27.520
In a mailing list discussion a few days later, Linus himself chimed in and wrote, the whole

02:27.520 --> 02:32.680
post seems to be just wrong and is measuring something completely different than what the

02:32.680 --> 02:35.820
author thinks and claims it is measuring.

02:35.820 --> 02:40.960
First up, spinlocks can only be used if you actually know you're not being scheduled while

02:40.960 --> 02:41.960
using them.

02:41.960 --> 02:45.680
It basically reads the time before releasing the lock, then it reads it after acquiring

02:45.680 --> 02:51.300
the lock again and claims that the time difference is the time when no lock was held, which is

02:51.300 --> 02:55.240
just inane and pointless and completely wrong.

02:55.240 --> 02:56.240
That's pure garbage.

02:56.240 --> 03:02.620
Oh, a classic Linus take down, basically putting the whole conversation kind of in its place.

03:02.620 --> 03:07.680
There was some development around other scheduler options though throughout 2020, but while

03:07.680 --> 03:12.640
we're talking about kernel code contributions, well, you might be wondering what Oracle was

03:12.640 --> 03:18.200
up to this year and their major contribution may surprise you, unless you're an existing

03:18.200 --> 03:20.000
unbreakable Linux user.

03:20.000 --> 03:25.260
They submitted a pretty large patch set, which is actually a reduced focused version of what

03:25.260 --> 03:29.800
ships in Oracle's unbreakable Linux called Ktask.

03:29.800 --> 03:35.480
And it is a way for the kernel to do in kernel multi-threading for CPU intensive tasks.

03:35.480 --> 03:41.280
It's a framework that's never made it into mainline Linux, but Oracle sure would love

03:41.280 --> 03:45.360
you to use it and they have shipped it in their Linux and a newer iteration of the patch

03:45.360 --> 03:49.900
series that's more streamlined has been submitted upstream this year.

03:49.900 --> 03:53.840
But as far as we could tell when doing research before the show, it doesn't seem to have actually

03:53.840 --> 03:55.640
been merged into the kernel.

03:55.640 --> 03:57.880
Hey, maybe in 2021.

03:57.880 --> 04:02.280
Michael Arbol notes that there were a few items we were expecting in 2020 that didn't

04:02.280 --> 04:06.100
land and so we'll likely see them in 2021.

04:06.100 --> 04:11.200
That's preempt RT, which has been talked about for a long time, but the conversation at this

04:11.200 --> 04:15.960
last year's Linux Plumbers conference was really about landing it very soon.

04:15.960 --> 04:18.340
BcacheFS, we've talked about that recently on the show.

04:18.340 --> 04:20.760
We expect to see that in 2021, at least I hope.

04:20.760 --> 04:21.760
Yeah, you hope.

04:21.760 --> 04:23.920
Yeah, specifically, I hope.

04:23.920 --> 04:29.040
And you do too, but now maybe not quite as much since I made it a prediction.

04:29.040 --> 04:34.240
But one that would be really great for a lot of people out there is a new NTFS driver.

04:34.240 --> 04:39.000
The one that's been developed by Paragon, who've been making NTFS drivers forever.

04:39.000 --> 04:46.520
It could land as well, almost made it, but officially Intel Multi-GPU support, which

04:46.520 --> 04:52.840
could have some pretty epic implications for virtualization and all other kinds of tasks.

04:52.840 --> 05:01.880
And Wes, I know, lastly, you are really excited to see that Ryzer 5, Ryzer 5, Ryzer FS5 may

05:01.880 --> 05:02.880
land.

05:02.880 --> 05:08.200
Moving on up the stack, SystemD also had a pretty big 2020.

05:08.200 --> 05:16.760
Started off at 1.5 million lines of code spanning over 48,000 commits from almost 2,000 different

05:16.760 --> 05:18.180
authors.

05:18.180 --> 05:27.040
Just in 2020 alone, there was 5,424 commits, which was up compared to 5,085 in 2019.

05:27.040 --> 05:33.580
That added 300,000 lines of code and took away another 1,000, which hey, that's a lot

05:33.580 --> 05:35.260
of work.

05:35.260 --> 05:40.800
Some of that work included SystemD HomeD, which we've been quite interested in because

05:40.800 --> 05:46.120
it makes it easier to support things like migratable home directories, more self-containment

05:46.120 --> 05:51.720
within those home directories, better passwords and encryption handling, and a whole bunch

05:51.720 --> 05:55.960
of other modern Linux home directory features.

05:55.960 --> 06:00.360
Some of the design objectives are things like support for Lux encryption built right in,

06:00.360 --> 06:05.280
mounting home directories off a CIF server, say, you may be using user space encryption

06:05.280 --> 06:11.680
like FSCrypt, interfacing with butter FS sub volumes, and of course, because you gotta

06:11.680 --> 06:15.120
have JSON, JSON formatted user records.

06:15.120 --> 06:16.120
Right.

06:16.120 --> 06:21.600
And as far as other big features in SystemD go this year outside of HomeD, there was OOMD,

06:21.600 --> 06:27.280
which is an out of memory daemon that was originally developed at Facebook, and then

06:27.280 --> 06:30.640
was modified for the use cases that SystemD would require.

06:30.640 --> 06:33.480
So it is now functional on desktops as well.

06:33.480 --> 06:40.520
The SystemD OOMD daemon, it pulls SystemD for OOMD enabled C groups.

06:40.520 --> 06:44.720
It monitors them and then kills them based on memory pressure, which is a metric in your

06:44.720 --> 06:47.360
Linux system, or swap usage.

06:47.360 --> 06:52.040
And just an interesting note, Leonard Pottering of Red Hat continues leading SystemD development

06:52.040 --> 06:56.700
after all this time and being responsible for just over a quarter of all patches to

06:56.700 --> 06:57.700
SystemD's Git.

06:57.700 --> 07:02.340
And of course, there were a whole bunch of other changes we don't have time to touch

07:02.340 --> 07:03.720
on today.

07:03.720 --> 07:07.680
But I'm wondering if any of those stood out to you, and maybe if you've got any hopes

07:07.680 --> 07:10.160
for what happens to SystemD in 2021.

07:10.160 --> 07:12.600
Yeah, of course.

07:12.600 --> 07:17.320
You know, I look at it, and I think from a high level outside perspective, it seems like

07:17.320 --> 07:22.320
things are pretty healthy over at SystemD land, the project is getting things done.

07:22.320 --> 07:27.780
You saw ideas land early in the year, then you saw a test code in the middle of the year,

07:27.780 --> 07:31.800
and then here we are at the end of the year, and we see major features actually shipping

07:31.800 --> 07:33.840
in a released version.

07:33.840 --> 07:35.600
They executed really well this year.

07:35.600 --> 07:41.200
I think the one thing that could, well, use some improvement, some refinement is probably

07:41.200 --> 07:46.720
their communication channel between SystemD and the kernel team.

07:46.720 --> 07:48.040
That got a little rough this year.

07:48.040 --> 07:53.640
Yeah, I mean, really, there's been a few spats over the years and 2020 was no different,

07:53.640 --> 07:59.800
especially with a recent issue over a breaking change in SystemD around UdevBind events and

07:59.800 --> 08:02.040
just whose fault that was.

08:02.040 --> 08:20.840
If you want more information, check out Linux Action News 163.

08:20.840 --> 08:39.640
You can

08:39.640 --> 08:55.800
even start a Datadog trial right now by going to datadog.com slash Linux Action News.

08:55.800 --> 08:58.220
You support the show and start your free trial.

08:58.220 --> 09:03.360
You create one dashboard and you'll get a free Datadog t-shirt who doesn't love swag.

09:03.360 --> 09:06.280
That's datadog.com slash Linux Action News.

09:06.280 --> 09:09.480
See what power you get when you put it all in one place.

09:09.480 --> 09:13.720
Go over there and start your free trial and get that free t-shirt after you create a dashboard

09:13.720 --> 09:18.860
at datadog.com slash Linux Action News.

09:18.860 --> 09:25.360
From Intel in 2020, we saw some new Linux features, timely hardware support, and a whole

09:25.360 --> 09:26.360
lot more.

09:26.360 --> 09:29.520
However, it wasn't all great.

09:29.520 --> 09:34.680
Early in the year, we saw the Linux community react to an unfortunate graphics driver flaw

09:34.680 --> 09:39.760
that could have allowed an unauthenticated user to potentially enable information disclosure

09:39.760 --> 09:42.280
if they had local access.

09:42.280 --> 09:47.280
And actually, this was severe enough that Red Hat recommended entirely disabling the

09:47.280 --> 09:49.440
Intel Linux graphics driver.

09:49.440 --> 09:54.400
That of course has some downsides like losing out on hardware acceleration entirely, but

09:54.400 --> 09:58.460
you also lose out on kernel mode setting, which generally means you'll be running at

09:58.460 --> 10:01.480
a very low resolution.

10:01.480 --> 10:06.360
To make matters worse, a little while later in February, a KVM virtualization bug was

10:06.360 --> 10:08.960
discovered on Intel processors.

10:08.960 --> 10:16.640
And thankfully, it was not another hardware vulnerability, but CVE-2020-2732 stemmed from

10:16.640 --> 10:23.040
some unfinished code within the Intel VMX code support in the Linux kernel, and that

10:23.040 --> 10:24.040
was embarrassing.

10:24.040 --> 10:25.960
That is kind of embarrassing.

10:25.960 --> 10:29.840
But they made up for it a little bit, at least in my eyes, in the later half of the year.

10:29.840 --> 10:36.320
For the entire year, we saw the code be committed for Tiger Lake graphics, which is also known

10:36.320 --> 10:38.760
as Intel Z graphics or Xe graphics.

10:38.760 --> 10:42.840
And we actually saw that land in distributions at the end of 2020.

10:42.840 --> 10:45.080
And man, does it really seem to impress.

10:45.080 --> 10:48.600
I have a rig in for testing right now, and I've been blown away.

10:48.600 --> 10:53.840
I've been getting blown away by the graphics performance of one of these ZE laptops.

10:53.840 --> 10:55.480
And I think they nailed this.

10:55.480 --> 11:01.280
And not only did we get great graphics with a baked-in driver, but we also got GPU accelerated

11:01.280 --> 11:03.520
AV1 video decoding.

11:03.520 --> 11:09.480
I know, I know, codecs are boring, but AV1 is an awesome new open codec.

11:09.480 --> 11:13.680
And things like GPU acceleration are exactly what you need to see it adopted.

11:13.680 --> 11:15.920
So hey, great job, Intel.

11:15.920 --> 11:19.080
From the perspective of Linux users, AMD had a really great year.

11:19.080 --> 11:23.160
They really delivered on their Ryzen 5000, Zen 3 desktop processors.

11:23.160 --> 11:28.680
This was great, and maybe an even more important milestone was the Radeon RX 6000 Big Navi

11:28.680 --> 11:35.880
graphics cards landing on day one with open source support for those new GPUs.

11:35.880 --> 11:37.600
That's never really happened before.

11:37.600 --> 11:42.280
And benchmarks have shown that those cards are delivering the best GPU performance for

11:42.280 --> 11:45.480
an open source driver to date.

11:45.480 --> 11:51.120
Also a feather in the cap of AMD Linux users was when Linus Torvalds announced he was switching

11:51.120 --> 11:56.960
after 15 years of using Intel systems to an AMD Ryzen Threadripper.

11:56.960 --> 12:01.940
He wrote, in fact, the biggest excitement for me this week was just that I upgraded

12:01.940 --> 12:03.740
my main machine.

12:03.740 --> 12:07.440
And for the first time in 15 years, my desktop isn't Intel based.

12:07.440 --> 12:15.960
No, no, I didn't switch to ARM yet, but I'm now rocking an AMD Threadripper 3970X.

12:15.960 --> 12:20.760
My all mod config test builds are now three times faster than they used to be.

12:20.760 --> 12:25.380
As always, Red Hat was in the news all year long, but they particularly made news towards

12:25.380 --> 12:30.360
the end of the year when they announced that CentOS would be refocusing on CentOS Stream.

12:30.360 --> 12:35.200
On December 8th, Red Hat announced it was refocusing the project and refactoring the

12:35.200 --> 12:40.200
support window to just December 31st of this year.

12:40.200 --> 12:42.000
A surprising change.

12:42.000 --> 12:47.360
This change is still not really sitting well with many of the traditional CentOS users.

12:47.360 --> 12:51.240
So Red Hat is still expressing optimism for this CentOS Stream change and they say, we

12:51.240 --> 12:55.480
think it will work for around 95% of current workloads and they'll be rolling out some

12:55.480 --> 13:00.840
new yet to be announced options for helping fill in the gap between CentOS and RHEL.

13:00.840 --> 13:05.960
Given the complicated community reactions for several weeks after the announcement,

13:05.960 --> 13:11.880
Red Hat and the CentOS team tried to clarify the logic behind the change.

13:11.880 --> 13:17.000
In that vein, on December 19th, Karsten Wade, who has been one of the original CentOS board

13:17.000 --> 13:23.040
members, longtime Fedora contributor, and a senior community architect for Red Hat,

13:23.040 --> 13:26.920
penned a CentOS blog post that continued to plead their case.

13:26.920 --> 13:30.280
It basically lays out the case from an open source perspective that the move is great

13:30.280 --> 13:35.320
for Red Hat Enterprise Linux since it's no longer going to be developed behind a firewall,

13:35.320 --> 13:40.560
but will now have an open source upstream, which is CentOS Stream, that anyone can see

13:40.560 --> 13:42.280
as it's being developed.

13:42.280 --> 13:47.440
Ultimately, Red Hat has now established a CentOS questions email address where they're

13:47.440 --> 13:52.360
seeking feedback, good or bad, about these planned changes.

13:52.360 --> 13:57.680
And no doubt about it, one of the stories of 2021 will be distributions coming online

13:57.680 --> 14:03.240
trying to fill this gap that traditional CentOS has left, but I maintain, I think a lot of

14:03.240 --> 14:07.440
people when they look at CentOS Stream and they look at the universal base image that

14:07.440 --> 14:11.560
is essentially RHEL, I think you could put those two things together and you'll probably

14:11.560 --> 14:14.960
be all right.

14:14.960 --> 14:16.460
Linode.com slash Lion.

14:16.460 --> 14:21.040
You go there to get a $100 60-day credit towards your new account.

14:21.040 --> 14:25.280
Linode is the largest independent cloud out there and they're our cloud provider.

14:25.280 --> 14:28.840
When I started a couple of years ago, I needed something that was just different and I had

14:28.840 --> 14:30.640
heard of Linode and wanted to try it.

14:30.640 --> 14:35.640
But then now, two years later, I was getting ready to launch JB 3.0 and I needed something

14:35.640 --> 14:41.320
that would break the bank, but also would have a professional high quality experience

14:41.320 --> 14:42.320
for my audience.

14:42.320 --> 14:46.280
And it was obvious to deploy on Linode and I didn't have a $100 credit, so I was taking

14:46.280 --> 14:51.800
advantage of like their $5 a month rig at first and I scaled that up as I needed that.

14:51.800 --> 14:56.360
And then I've rolled in services like object storage now to hold some of our more static

14:56.360 --> 14:59.840
assets also perfect for something like a static website.

14:59.840 --> 15:04.120
If you want a really quick portfolio or personal website, maybe you should look at what you

15:04.120 --> 15:09.480
can do with object storage and a simple website on Linode, but get started by going to Linode.com

15:09.480 --> 15:10.720
slash LAN.

15:10.720 --> 15:15.280
It gives you the $100 60 day credit and it supports the show.

15:15.280 --> 15:16.480
They're my cloud hosting provider.

15:16.480 --> 15:17.920
We build everything on Linode.

15:17.920 --> 15:21.960
So that's why when I say I know you can deploy like a company chat server that can handle

15:21.960 --> 15:26.720
hundreds of connections simultaneously or more, I can tell you with confidence.

15:26.720 --> 15:28.720
Yeah, Linode is going to be able to do that.

15:28.720 --> 15:33.640
If you need something for next cloud up in the cloud, Linode can handle that as well.

15:33.640 --> 15:39.160
We've integrated our next cloud with their object storage system, which is slick and

15:39.160 --> 15:42.820
with 11 data centers worldwide, you're going to find just the right spot to deploy for

15:42.820 --> 15:46.920
you or maybe your clients, in my case, my audience.

15:46.920 --> 15:49.480
So check them out Linode.com slash LAN.

15:49.480 --> 15:50.480
See why I love them.

15:50.480 --> 15:55.680
See how fast they are with their native SSDs, 40 gigabit connections and their awesome cloud

15:55.680 --> 15:56.780
dashboard.

15:56.780 --> 16:00.760
And with their costs 30 to 50 percent lower than major providers, you're going to get

16:00.760 --> 16:01.760
a lot of mileage.

16:01.760 --> 16:06.320
And at the end of the day, you're also investing in a company that's part of the Linux community.

16:06.320 --> 16:09.020
They've been here since the very beginning of cloud computing.

16:09.020 --> 16:10.820
They helped to find what it means.

16:10.820 --> 16:16.120
And now they're one of the remaining independent champions, Linode.com slash LAN.

16:16.120 --> 16:21.900
Go check them out and tell them we sent you Linode.com slash LAN.

16:21.900 --> 16:27.560
Over 2020, Microsoft made some interesting strides from giving their blessing to Samsung

16:27.560 --> 16:32.800
upstreaming their improved ex-fat driver to contributing more and more code to Mesa in

16:32.800 --> 16:38.300
order to leverage OpenGL and OpenCL code in various Windows components.

16:38.300 --> 16:44.520
And on March 14th, they announced that WSL2 would be reaching general availability, promoting

16:44.520 --> 16:50.240
it to officially be a part of Windows 10 powered by Hyper-V and giving access to the Linux

16:50.240 --> 16:53.240
command line right from Windows.

16:53.240 --> 16:58.440
On May 14th, Microsoft's president, Brad Smith, acknowledged that Microsoft was previously

16:58.440 --> 17:01.160
wrong on open source.

17:01.160 --> 17:05.440
While Microsoft executives in the past years had called open source a cancer and other

17:05.440 --> 17:09.340
types of FUD, the current president of Microsoft, Brad Smith, acknowledged that they were wrong

17:09.340 --> 17:10.760
in those past remarks.

17:10.760 --> 17:15.120
Quote, Microsoft was on the wrong side of history when open source exploded at the beginning

17:15.120 --> 17:16.260
of the century.

17:16.260 --> 17:18.440
And I can say that about me personally.

17:18.440 --> 17:23.440
The good news is that if life is long enough, you can learn that you need to change.

17:23.440 --> 17:27.840
Today, Microsoft is the single largest contributor to open source projects in the world when

17:27.840 --> 17:29.180
it comes to business.

17:29.180 --> 17:34.680
We look at GitHub, we see it as the home for open source development, and we see our responsibility

17:34.680 --> 17:39.360
as its steward to make it secure and a productive home for developers.

17:39.360 --> 17:41.960
Okay, Brad Smith, okay.

17:41.960 --> 17:44.040
It came on strong.

17:44.040 --> 17:46.800
Well, at least they're learning.

17:46.800 --> 17:51.080
Something else they've been learning about in 2020 though has been Wayland because on

17:51.080 --> 17:59.880
May 20th at Build 2020, Microsoft demoed GPU acceleration and GUI app support in WSL2 using

17:59.880 --> 18:06.240
their own Wayland compositor with a glorified RDP setup for showing the applications running

18:06.240 --> 18:09.480
on Linux but right there on your Windows desktop.

18:09.480 --> 18:12.120
Yep, we cover that here on this podcast.

18:12.120 --> 18:17.880
And also you can't really talk about the year of Microsoft and Linux without mentioning

18:17.880 --> 18:25.120
that on September 22nd, they announced edge was coming out for Linux and then about a

18:25.120 --> 18:32.240
month later, they made good and released Microsoft edge, the web browser on Linux.

18:32.240 --> 18:34.680
And it's not that bad.

18:34.680 --> 18:40.920
KDE had a very eventful year where it saw its Wayland support come together quite nicely.

18:40.920 --> 18:45.280
So much so in fact that it's usable on a day to day basis.

18:45.280 --> 18:49.600
But really, I think we have to say that plasma's big milestone for the year was the release

18:49.600 --> 18:51.440
of their latest LTS.

18:51.440 --> 18:59.520
KDE Plasma 5.18 brought much better integration with GTK and GNOME applications, a new opt-in

18:59.520 --> 19:05.400
system and user feedback feature, and a hell of a lot of polishing all around the Plasma

19:05.400 --> 19:06.400
desktop.

19:06.400 --> 19:11.340
We could easily dedicate an entire episode to this but I wanted to give a special shout

19:11.340 --> 19:15.760
out to one of the great native text editors on desktop Linux, Kate.

19:15.760 --> 19:21.240
It turned 20 years old this year and still getting new cool features added to it.

19:21.240 --> 19:26.160
It's actually what I used this morning to do a lot of the notes for this week's episode

19:26.160 --> 19:28.600
when I had a web outage.

19:28.600 --> 19:33.200
Just use a good old local native text editor and I was very thankful for its markdown support.

19:33.200 --> 19:34.240
There's a lot to talk about though.

19:34.240 --> 19:38.160
So you can just kind of scratch a little bit more of the surface if you check out our interview

19:38.160 --> 19:44.080
with Nick Graham, that's Linux Unplugged episode 385, linuxunplugged.com slash 385.

19:44.080 --> 19:48.840
He and I discussed some of the improved UI features and other aspects that landed in

19:48.840 --> 19:49.840
Plasma this year.

19:49.840 --> 19:56.720
Turning into that other desktop environment, GNOME saw many improvements in 2020, including

19:56.720 --> 20:00.520
a number of significant performance optimizations.

20:00.520 --> 20:05.460
And while GNOME on Wayland has been solid for quite some time, there's been some further

20:05.460 --> 20:07.840
enhancements over there as well.

20:07.840 --> 20:13.000
It was interesting watching all of this go down in GNOME OS, which we got a little more

20:13.000 --> 20:17.480
information about around July 22nd at Guadic 2020.

20:17.480 --> 20:24.160
One of the talks there was focused on running GNOME OS on real hardware, which traditionally

20:24.160 --> 20:27.260
GNOME OS has been a virtual machine image for testing.

20:27.260 --> 20:31.620
With work done though recently by Codethink and other GNOME developers, it's becoming

20:31.620 --> 20:36.680
possible to run GNOME OS on bare metal hardware.

20:36.680 --> 20:41.480
And thanks to the likes of Flack Pack and OS Tree, it's becoming more and more like

20:41.480 --> 20:46.080
just a regular old Linux distribution in terms of package availability.

20:46.080 --> 20:49.640
Who knows, in 2021, you may hear us reviewing GNOME OS.

20:49.640 --> 20:51.640
I don't think so.

20:51.640 --> 20:57.400
2020 also saw the official announcement of GNOME Circle, which is aimed at lowering the

20:57.400 --> 21:02.720
barrier for allowing new applications and libraries to become part of the GNOME project.

21:02.720 --> 21:07.340
So hey, there's maybe there'll be some new parts of GNOME to enjoy in 2021.

21:07.340 --> 21:11.680
There was also the big announcement about GTK4 on December 16th.

21:11.680 --> 21:13.880
It was officially released.

21:13.880 --> 21:18.520
It features many new widgets and reworking to existing elements and integrated media

21:18.520 --> 21:24.360
playback support and also excitingly GPU acceleration with a Vulkan render and better Mac OS support.

21:24.360 --> 21:29.680
So GTK4 is now considered stable for applications to begin supporting it.

21:29.680 --> 21:36.200
GTK3 will continue to be maintained for the foreseeable future, while GTK2 is no longer

21:36.200 --> 21:40.680
going to be supported beyond one more point release.

21:40.680 --> 21:46.440
And it goes without saying that all of this amazing work was done during a year like no

21:46.440 --> 21:47.440
other.

21:47.440 --> 21:49.920
And we really just touched on the highlights.

21:49.920 --> 21:54.440
If you want the details, head over to linuxactionnews.com slash subscribe for all the ways to get this

21:54.440 --> 21:56.180
show every week.

21:56.180 --> 22:00.840
And linuxactionnews.com slash contact for ways to get in touch.

22:00.840 --> 22:05.260
But don't worry, we'll be back next Monday with our weekly take on the latest Linux and

22:05.260 --> 22:06.760
open source news.

22:06.760 --> 22:22.760
Thanks for joining us and we will see you next week.


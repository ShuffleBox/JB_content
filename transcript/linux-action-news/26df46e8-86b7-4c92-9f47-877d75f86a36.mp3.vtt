WEBVTT

00:00.000 --> 00:09.160
Hello, and welcome to Linux Action News, episode 253, recorded on August 10th, 2022.

00:09.160 --> 00:10.160
I'm Chris.

00:10.160 --> 00:11.160
And I'm Wes.

00:11.160 --> 00:12.160
Hello, Wes.

00:12.160 --> 00:14.000
Let's do the news.

00:14.000 --> 00:19.240
We start this week with a question we know is on the minds of all of you out there.

00:19.240 --> 00:23.840
What's the latest with Microsoft's Linux distribution?

00:23.840 --> 00:28.760
It was just over a year ago that the world was shocked to learn Microsoft had been working

00:28.760 --> 00:31.080
on CBL Mariner.

00:31.080 --> 00:36.400
And not only have they been issuing steady updates, but they've also been extending its

00:36.400 --> 00:38.240
capabilities.

00:38.240 --> 00:44.600
And Microsoft has been issuing one or sometimes even more updates per month.

00:44.600 --> 00:50.520
And this week, it marked the release of CBL Mariner 2.0, the July 2022 update too.

00:50.520 --> 00:53.880
So I take that to mean they had two updates in one month.

00:53.880 --> 00:58.160
And it seems that the release itself, well, there's a lot in there.

00:58.160 --> 01:02.440
But one of the things that caught our attention is more and more packages are being added

01:02.440 --> 01:09.340
that make the distribution at least somewhat practical to run on bare metal now.

01:09.340 --> 01:14.480
Now we should note that this all still appears to be very use case specific.

01:14.480 --> 01:19.240
So no, don't expect a desktop spin anytime soon.

01:19.240 --> 01:24.080
They've also added some other useful packages though, like FIO and SysBench for performance

01:24.080 --> 01:31.800
testing, KubeVert, libXF, kernel tools, and a bunch of other ones I definitely do use.

01:31.800 --> 01:37.000
This newest revision to CBL Mariner 2.0 also adds a few more packages to its subset of

01:37.000 --> 01:44.080
Fedora RPMs, network configuration support for unattended ISO installs, that's handy.

01:44.080 --> 01:50.680
And it brings Linux 5.15 LTS to the mix among a bunch of other fixes and improvements.

01:50.680 --> 01:55.220
Any adventurist among you out there can actually go find an ISO link from the GitHub Readme

01:55.220 --> 01:58.120
page which we will have in the notes.

01:58.120 --> 02:01.520
But I can't help wonder, how far does this go?

02:01.520 --> 02:06.640
It starts to get bare metal support over time, starts to get more and more package support,

02:06.640 --> 02:10.160
more and more scripting for unattended installations.

02:10.160 --> 02:11.160
How far does this go?

02:11.160 --> 02:15.320
And I think the second question that I feel in all of this is, and I'd love to hear the

02:15.320 --> 02:16.320
audience's input on this.

02:16.320 --> 02:20.220
So dear listener, how do you think the Linux community is going to process this information

02:20.220 --> 02:24.960
about CBL Mariner and process the information around its continued growth as they push it

02:24.960 --> 02:25.960
forward?

02:25.960 --> 02:29.800
Go to linuxactionnews.com slash contact to let me know or send a boost into the show

02:29.800 --> 02:36.080
with a new podcast app.

02:36.080 --> 02:41.240
Security issues around the free software supply chain have become a popular topic of discussion

02:41.240 --> 02:42.640
lately.

02:42.640 --> 02:48.400
At the core of the concern is how we verify the many different free libraries and components

02:48.400 --> 02:51.360
that modern application stacks depend on.

02:51.360 --> 02:56.200
The Microsoft-owned GitHub announced on Monday that it plans to support code signing for

02:56.200 --> 03:00.740
npm software packages using the code signing platform Sigstore.

03:00.740 --> 03:04.720
That tool grew out of a collaboration with multiple tech companies to make it much easier

03:04.720 --> 03:09.960
for open source maintainers to verify that the source code they create is the same code

03:09.960 --> 03:16.400
that ends up in the software packages actually being downloaded and used by end users worldwide.

03:16.400 --> 03:21.100
Those multiple tech companies include the likes of the Linux Foundation, Google, Red

03:21.100 --> 03:24.680
Hat, Purdue University, and Chain Guard.

03:24.680 --> 03:30.120
There's also been some significant adoption of Sigstore by the likes of Kubernetes, and

03:30.120 --> 03:35.300
there's even an official tool for signing Python packages using Sigstore these days.

03:35.300 --> 03:40.520
Of course, with any tool like this that requires additional work, Sigstore relies on being

03:40.520 --> 03:46.920
free and easy to use to spur adoption and to get people to actually use it.

03:46.920 --> 03:52.360
GitHub says it's starting with a proposal on how Sigstore will be implemented for npm,

03:52.360 --> 03:57.100
and then also having an open comment period to get feedback from the community on exactly

03:57.100 --> 04:00.120
how the tool will be deployed.

04:00.120 --> 04:06.340
And on the topic of GitHub, also on Monday, the source code for an open source Ethereum

04:06.340 --> 04:12.400
privacy mixer called Tornado Cache was completely removed from GitHub, prompting outcry from

04:12.400 --> 04:15.640
privacy and free speech advocates alike.

04:15.640 --> 04:20.880
This all happened after the US Treasury Department added the Tornado Cache website and a long

04:20.880 --> 04:26.940
list of Ethereum addresses to its specially designated nationals list, banning American

04:26.940 --> 04:32.160
citizens from using the tool or transacting with those addresses.

04:32.160 --> 04:36.680
If you're not familiar, Tornado Cache is an app that lets users make private transactions

04:36.680 --> 04:38.800
on the Ethereum network.

04:38.800 --> 04:43.800
It does this by pooling together Ethereum deposited by many different users and mixing

04:43.800 --> 04:47.960
them together so those transactions are obscured.

04:47.960 --> 04:51.820
Within hours of the announcement by the Treasury Department, reports started to emerge that

04:51.820 --> 04:56.880
GitHub had taken action, shutting down both the Tornado Cache project page, but also the

04:56.880 --> 04:59.260
developer's entire GitHub account.

04:59.260 --> 05:04.820
The developer then took to Twitter, asking, is it now illegal to write open source code?

05:04.820 --> 05:10.940
For their part, GitHub says they had no choice but to act, though that response certainly

05:10.940 --> 05:16.700
has provoked a general outcry from several industry leaders, who cited the 1996 federal

05:16.700 --> 05:23.640
court case Bernstein v. U.S., which established source code as speech, protected by the First

05:23.640 --> 05:24.780
Amendment.

05:24.780 --> 05:29.300
And Matthew Green, a cryptography professor at Johns Hopkins University, said, quote,

05:29.300 --> 05:34.620
30 years of hard legal work to establish First Amendment protections around software distribution,

05:34.620 --> 05:38.020
blown up in a day by GitHub and Microsoft.

05:38.020 --> 05:44.220
In response to clarification on the situation, a GitHub spokesperson said, quote, trade laws

05:44.220 --> 05:50.180
require GitHub to restrict users and customers identified as specially designated nationals

05:50.180 --> 05:52.940
or other denied or blocked parties.

05:52.940 --> 05:57.260
Or that may be using GitHub on behalf of blocked parties.

05:57.260 --> 06:01.100
It's an understandable tough position for Microsoft and GitHub.

06:01.100 --> 06:06.780
Notable though, the U.S. Treasury sanctions on Tornado Cache do not name the Tornado Cache

06:06.780 --> 06:09.900
developer or anyone involved with the project.

06:09.900 --> 06:16.540
In fact, the only identifying information in there is Tornado Cache, the project, the

06:16.540 --> 06:18.260
name, and some Ethereum addresses.

06:18.260 --> 06:21.540
There is no individuals listed at all.

06:21.540 --> 06:24.100
A tricky situation to be sure.

06:24.100 --> 06:28.980
We're just glad there are still viable self-hosting alternatives that are out there.

06:28.980 --> 06:35.100
But sticking with GitHub for one last story, many of us became aware of a privacy policy

06:35.100 --> 06:38.460
reversal after a staffer tweeted about the issue.

06:38.460 --> 06:43.660
Yeah, on December 17th, GitHub published a blog post promising not to use non-essential

06:43.660 --> 06:46.340
cookies out of concern for user privacy.

06:46.340 --> 06:51.300
But a week ago, that blog post got an update with an asterisk signifying that the privacy

06:51.300 --> 06:53.100
policy had changed.

06:53.100 --> 06:57.780
It seems that for GitHub enterprise marketing subdomains, non-essential cookies are back

06:57.780 --> 07:02.380
on the menu with the reason being just quite simply, quote, better reach and to improve

07:02.380 --> 07:05.520
the web experience for enterprise users.

07:05.520 --> 07:10.620
If you're not comfortable with that change, well, there is a 30-day comment period.

07:10.620 --> 07:19.900
You can find it at linuxactionnews.com slash 253.

07:19.900 --> 07:23.660
Well after all of that, we kind of feel like covering something like good news from the

07:23.660 --> 07:26.180
decentralization file on the show.

07:26.180 --> 07:31.180
And that's IPFS, the Interplanetary File System, which is a protocol for peer-to-peer decentralized

07:31.180 --> 07:36.740
file sharing, has now been baked into FFmpeg starting with version 5.1.

07:36.740 --> 07:41.140
And it appears the effort is not stopping with FFmpeg.

07:41.140 --> 07:46.380
That IPFS support actually landed in FFmpeg back in July.

07:46.380 --> 07:52.040
But Mark Geiser, an OpenGrant participant turned Protocol Labs contractor recently blogged

07:52.040 --> 07:57.620
about the FFmpeg IPFS implementation, sharing some more juicy details that we could really

07:57.620 --> 07:59.940
sink our teeth into.

07:59.940 --> 08:06.420
The utility of having a fully decentralized file protocol built right into FFmpeg, that

08:06.420 --> 08:08.500
just seems pretty obvious to me.

08:08.500 --> 08:13.780
And it seems like the inspiration for the idea actually came from a failed drive in

08:13.780 --> 08:14.980
Mark's home server.

08:14.980 --> 08:19.600
He wrote in the blog post, quote, after days of debugging, I just couldn't resolve the

08:19.600 --> 08:22.540
issue which sparked a simple idea.

08:22.540 --> 08:27.540
I already use IPFS, why can't I use that to play my media?

08:27.540 --> 08:33.340
Good idea Mark, in multiple ways, because by building that support into FFmpeg, not

08:33.340 --> 08:39.380
only does anyone using FFmpeg directly benefit, but so do a huge amount of downstream projects

08:39.380 --> 08:43.620
that also make use of FFmpeg.

08:43.620 --> 08:46.620
But oh no, Mark did not stop there.

08:46.620 --> 08:51.980
He's also begun adding support to VLC, MPV, and Kodi.

08:51.980 --> 08:57.340
That MPV support in particular, looks like it could be finished up by the next release.

08:57.340 --> 09:01.940
For details on how to play around with this new support in FFmpeg, and the grants that

09:01.940 --> 09:05.460
are making all of this possible, well you should check out Mark's full post, we will

09:05.460 --> 09:11.940
have a link to that as well.

09:11.940 --> 09:20.740
Ubuntu 22.04.1 LTS was scheduled for release earlier this week, but that's been pushed

09:20.740 --> 09:27.220
back by an additional week, after a bug was found that led to Snaps like Firefox failing

09:27.220 --> 09:28.220
to launch.

09:28.220 --> 09:36.060
Now, if you've already upgraded to Ubuntu 22.04.1 via apt upgrades, don't worry, this

09:36.060 --> 09:40.220
bug actually only affects new OEM installs.

09:40.220 --> 09:45.500
As for the bug itself, well that was found in the final hours before release.

09:45.500 --> 09:50.760
Thankfully though, as we record right now, the fix has been completed and it's on track

09:50.760 --> 10:12.540
for that new release window.

10:12.540 --> 10:21.940
That's Linode, right there, with real humans that are available to help you 365 days a

10:21.940 --> 10:22.940
year.

10:22.940 --> 10:26.300
Linode is how we run everything we've built in the last few years in the cloud, and like

10:26.300 --> 10:30.260
us, Linode loves Linux, and that stuff matters to me.

10:30.260 --> 10:35.500
As a business owner, I want to patronize other businesses that support the Linux ecosystem,

10:35.500 --> 10:36.500
and Linode does.

10:36.500 --> 10:40.780
They provide support for projects, they invest in open source, and they also invest in the

10:40.780 --> 10:41.780
community.

10:41.780 --> 10:44.740
Linode is sending us down to California in September to meet up with a whole bunch of

10:44.740 --> 10:50.220
you and get to take a tour of JPL, and Linode doesn't do that because they're going to make

10:50.220 --> 10:54.860
a ton of money on it, although hopefully they'll get some of you to sign up as a show of support,

10:54.860 --> 10:58.860
but they do it as an investment in the community because they're long-term thinkers.

10:58.860 --> 11:02.500
I mean, they've been doing this for nearly 19 years, so they've really figured out how

11:02.500 --> 11:06.960
to do this right, and because they are Linux enthusiasts themselves, they get that connection

11:06.960 --> 11:10.060
to the community like no other provider does.

11:10.060 --> 11:15.180
And of course, it doesn't hurt that they're 30 to 50% cheaper than the hyperscalers that

11:15.180 --> 11:19.700
want to lock into their esoteric crazy platforms with their own unique languages and names

11:19.700 --> 11:23.580
for everything where they forked a bunch of projects and call them something completely

11:23.580 --> 11:24.580
different now.

11:24.580 --> 11:25.580
You know what I'm talking about.

11:25.580 --> 11:27.420
That's not Linode's game.

11:27.420 --> 11:32.020
Linode's game is simple, affordable, accessible cloud hosting.

11:32.020 --> 11:35.380
Their game is the best place to run applications on Linux.

11:35.380 --> 11:38.380
They've recently rolled out MVME storage, AMD EPYC processors.

11:38.380 --> 11:43.380
They are their own ISP, and with 11 data centers around the world, you'll find something close

11:43.380 --> 11:45.900
to you that's nice and fast.

11:45.900 --> 11:46.900
It's so nice.

11:46.900 --> 11:51.300
It really is, because honestly, I wouldn't want to host my stuff anywhere else.

11:51.300 --> 11:54.820
I'm really happy to say that we are proud Linode users, and I think you're going to

11:54.820 --> 11:55.820
love it too.

11:55.820 --> 11:59.060
And you know, they just recently updated their Kali Linux support, so they added Kali Linux

11:59.060 --> 12:02.560
support, and then a new version of Kali came out, and they've already updated the version

12:02.560 --> 12:04.560
of Kali that they now let you run.

12:04.560 --> 12:08.620
It's pretty convenient, and it's a great way to remotely audit your network.

12:08.620 --> 12:13.340
So go try Linode, learn something, support the show, maybe deploy something.

12:13.340 --> 12:15.620
Try it for yourself, try it for your business.

12:15.620 --> 12:17.980
Just go to linode.com slash lan.

12:17.980 --> 12:23.940
One more time, that's linode.com slash lan for that 60 days, $100 credit on your new

12:23.940 --> 12:24.940
account.

12:24.940 --> 12:31.260
Linode.com slash L-A-N.

12:31.260 --> 12:32.660
And a big thank you to Kaliide.

12:32.660 --> 12:34.780
Kaliide.com slash lan.

12:34.780 --> 12:39.780
Kaliide is an endpoint security solution that uses the most powerful, untapped resource

12:39.780 --> 12:41.260
in IT.

12:41.260 --> 12:42.260
And users.

12:42.260 --> 12:44.900
And when you're trying to achieve security goals, maybe it's for yourself or a third

12:44.900 --> 12:50.460
party audit, maybe it's just for the boss, the wisdom of yesterday was to treat every

12:50.460 --> 12:55.040
device like it's Fort Knox, with old school device management tools and MDMs that force

12:55.040 --> 13:00.860
disruptive agents onto employees' devices, slow down performance, and gunk them up.

13:00.860 --> 13:03.200
I never wanted that stuff on my machine.

13:03.200 --> 13:08.340
It really turns IT admins and end users into enemies.

13:08.340 --> 13:13.460
And not to mention those tools often create their own security problems.

13:13.460 --> 13:15.980
So it was time for something different.

13:15.980 --> 13:18.260
And that's why it's great to introduce you to Kaliide.

13:18.260 --> 13:19.780
They do things better.

13:19.780 --> 13:26.220
Instead of forcing changes on users, Kaliide sends them security recommendations via Slack.

13:26.220 --> 13:30.820
And Kaliide will automatically notify your team when the device becomes insecure.

13:30.820 --> 13:34.780
And it'll give that person step-by-step instructions on how to solve the problem.

13:34.780 --> 13:40.140
And by reaching out to employees via a friendly Slack DM, and then educating them about policies,

13:40.140 --> 13:46.000
well, Kaliide helps you build a culture in which everyone contributes to security.

13:46.000 --> 13:50.300
Because everyone understands how and why to do it.

13:50.300 --> 13:55.620
And for IT admins, Kaliide provides a single dashboard that lets you monitor the security

13:55.620 --> 13:57.060
of your entire fleet.

13:57.060 --> 14:00.580
Maybe they're on a Mac, maybe they're on Windows, and even when they're on Linux.

14:00.580 --> 14:05.460
You can see at a glance which employees have their disks encrypted, their OS up to date,

14:05.460 --> 14:09.300
and a password manager installed, making it easy to prove compliance with your auditors,

14:09.300 --> 14:11.160
your customers, and leadership.

14:11.160 --> 14:12.160
So that's Kaliide.

14:12.160 --> 14:16.700
User-centered, cross-platform, endpoint security for teams that Slack.

14:16.700 --> 14:19.660
You can meet your compliance goals by putting users first.

14:19.660 --> 14:23.620
Visit Kaliide.com slash LAN to find out how.

14:23.620 --> 14:26.700
If you follow that link, go there, they'll hook you up with a goody bag, including a

14:26.700 --> 14:29.820
free t-shirt just for activating a free trial.

14:29.820 --> 14:31.580
You know I love that free swag.

14:31.580 --> 14:43.980
So go get it, it's Kaliide.com slash LAN, that's K-O-L-I-D-E dot com slash L-A-N.

14:43.980 --> 14:48.860
You'd be forgiven for thinking you missed the announcement this week of the next Linux

14:48.860 --> 14:54.220
kernel officially getting the 6.0 major version number.

14:54.220 --> 14:59.020
After all, there seems to even be some confusion about that on the Linux kernel mailing list

14:59.020 --> 15:00.740
right now.

15:00.740 --> 15:06.100
You might just say that excitement is building for this next release, but we don't actually

15:06.100 --> 15:07.100
know yet.

15:07.100 --> 15:08.580
There's no official announcement.

15:08.580 --> 15:13.700
Probably only Linus really knows if we're going to get 6.0 or 5.20 for the next kernel

15:13.700 --> 15:14.700
release.

15:14.700 --> 15:19.720
Historically, Linus has bumped the major number around the dot 19 release, but he sometimes

15:19.720 --> 15:22.020
does it for the dot 20 release.

15:22.020 --> 15:26.220
For example, Linux 4.0 came after Linux 3.19.

15:26.220 --> 15:31.060
But just to send us a little bit of a curveball or keep things inconsistent, we did see Linux

15:31.060 --> 15:34.740
4.20 before we got Linux 5.

15:34.740 --> 15:36.300
So you never really know.

15:36.300 --> 15:37.300
Why does it matter?

15:37.300 --> 15:43.500
Well, simply put, Linux is probably the most important operating system in the world.

15:43.500 --> 15:49.100
And at least I think there's something remarkable about how unremarkable a major decision like

15:49.100 --> 15:50.740
this is being made.

15:50.740 --> 15:54.020
I think to the outside observer, it probably seems a little haphazard.

15:54.020 --> 15:56.860
Yeah, I can understand that position.

15:56.860 --> 16:01.980
I mean, version numbers mean different things to different people, different projects, and

16:01.980 --> 16:06.780
maybe whether something is considered a library or an application or in this case, an operating

16:06.780 --> 16:07.780
system.

16:07.780 --> 16:10.220
Don't know quite where that falls.

16:10.220 --> 16:15.700
But I think you should read this and take some hints from both Linus's policies around

16:15.700 --> 16:19.480
not making breaking changes, at least for user space.

16:19.480 --> 16:23.620
And then also as you say it, the sort of haphazard nature.

16:23.620 --> 16:27.740
A Linux kernel version, it just doesn't really mean much.

16:27.740 --> 16:31.500
I've started to think of them kind of like the arbitrary release numbers that seem to

16:31.500 --> 16:35.020
be popular with browsers these days.

16:35.020 --> 16:36.660
I totally see that comparison.

16:36.660 --> 16:41.760
I agree for all of the minor releases, and I think most people don't even think about

16:41.760 --> 16:45.240
what version of the kernel they have on their distribution.

16:45.240 --> 16:50.500
The version that the distribution ships with is probably very rarely a deciding factor

16:50.500 --> 16:52.060
on what distro they're going to use.

16:52.060 --> 16:55.860
I mean, it is for me, but I doubt for most people, I don't think it's something users

16:55.860 --> 16:57.420
care about much.

16:57.420 --> 17:03.520
However, 6.0, right, those big point releases, that's going to get coverage.

17:03.520 --> 17:04.780
That's going to get attention.

17:04.780 --> 17:07.020
That's going to get buzz.

17:07.020 --> 17:12.500
And you know, I think strategically, it might be a good idea to do it because there is a

17:12.500 --> 17:17.220
lot of great features in this release that probably should get some attention.

17:17.220 --> 17:18.500
I mean, just super quick.

17:18.500 --> 17:23.220
Some of my personal favorites, again, we're going to see real time kernel support possibly

17:23.220 --> 17:24.220
land.

17:24.220 --> 17:29.300
One of my favorite file systems, XFS, is getting improvements from multi-core CPU systems,

17:29.300 --> 17:31.020
which is like all my systems.

17:31.020 --> 17:36.220
ButterFS, my other favorite file system, it's getting version two of stream support, major

17:36.220 --> 17:39.300
new features in IOU ring, which people are excited about.

17:39.300 --> 17:44.420
And finally, the Raspberry Pi 4 GPU kernel driver is landing.

17:44.420 --> 17:45.900
Love all of that.

17:45.900 --> 17:52.260
Yeah, I like those too, but that's just scratching the surface with whatever this new kernel

17:52.260 --> 17:53.260
is going to get called.

17:53.260 --> 17:56.820
I mean, we've mentioned that Rust support is expected to land.

17:56.820 --> 18:02.540
There are also a ton of improvements and new hardware support for both AMD and Intel, and

18:02.540 --> 18:06.620
even some good news for Clevo hardware users out there.

18:06.620 --> 18:11.780
Enterprise users will also benefit from some plumbing being done for Compute Express Link,

18:11.780 --> 18:15.860
and there are some changes that should greatly improve NFS.

18:15.860 --> 18:20.300
I just can't see them not trying to get some attention on this release, and I think people

18:20.300 --> 18:23.820
listening will say, oh, Linus doesn't care about that stuff.

18:23.820 --> 18:24.820
Wrong you are, I say.

18:24.820 --> 18:28.380
I've observed this man for a long time, and I think he does think about this stuff a little

18:28.380 --> 18:29.380
bit.

18:29.380 --> 18:36.020
They have pride in the Linux kernel, and they have pride in their work, and they like to

18:36.020 --> 18:40.460
go after narratives about the kernel getting too old or slow or too big.

18:40.460 --> 18:44.220
That's all part of this, and either way, we're just super happy to see this continue to get

18:44.220 --> 18:45.220
work done.

18:45.220 --> 18:49.340
I mean, there's so many things landing in this next release that we could dedicate a

18:49.340 --> 18:51.940
week's worth of shows to it.

18:51.940 --> 18:55.860
Even our favorite feature, the new Samba server that's built into the kernel, even that is

18:55.860 --> 18:58.060
going to see some improvements.

18:58.060 --> 19:01.220
Long live KSMBD, I say.

19:01.220 --> 19:02.740
How dare you.

19:02.740 --> 19:06.860
As for when we might actually get our hands on that new kernel, well, there is a process

19:06.860 --> 19:08.180
to follow.

19:08.180 --> 19:12.220
The merge window, which is the time during which contributors can send in requests for

19:12.220 --> 19:16.060
their new code to be integrated, that's currently open.

19:16.060 --> 19:20.660
Once that closes will come a period of testing and integration work marked by a series of

19:20.660 --> 19:21.660
release candidates.

19:21.660 --> 19:27.060
Then, if all that goes well, we'll finally get to find out what new version we're working

19:27.060 --> 19:28.060
with.

19:28.060 --> 19:30.100
And either way, we'll be happy.

19:30.100 --> 19:34.540
I went back just kind of historically to the archives in preparation for this segment,

19:34.540 --> 19:39.700
and I read all of the release announcements between major version bumps, you know, 3.19

19:39.700 --> 19:45.580
to 4, 4 to 5, and just read all of them and really is a capture.

19:45.580 --> 19:49.580
It's like a time capsule of what's going on in the community at that time.

19:49.580 --> 19:53.340
And some releases, you could tell things were kind of stressful.

19:53.340 --> 19:57.740
And in fact, one of them, Greg even writes in there in part four line, it's just everybody

19:57.740 --> 20:03.220
take a week off after this release, go have a week off, walk away from the computer.

20:03.220 --> 20:04.260
That's not the sense.

20:04.260 --> 20:06.140
I get with this release.

20:06.140 --> 20:08.940
There's a lot of new stuff in here and a lot of excitement.

20:08.940 --> 20:13.600
And the Colonel really seems to be firing on all cylinders this release cycle.

20:13.600 --> 20:19.900
And every single day, Wes and I are seeing a new story, a new announcement about something

20:19.900 --> 20:23.620
landing in the Colonel about some work being done about some improvement.

20:23.620 --> 20:30.460
There is just a level of development, I think, looking back at those archives that we didn't

20:30.460 --> 20:32.220
know where we'd be at back then.

20:32.220 --> 20:33.740
We weren't sure if it would be able to continue.

20:33.740 --> 20:37.500
There was a lot of talk if the development was sustainable in the Colonel.

20:37.500 --> 20:38.500
And here we are.

20:38.500 --> 20:40.380
And it's firing all cylinders are doing great.

20:40.380 --> 20:44.740
We'll have a link to some good resources in the show notes for all of that stuff, including

20:44.740 --> 20:48.420
a really good write up about the new user space block driver that's going to work with

20:48.420 --> 20:51.880
IOU ring over on lwn.net.

20:51.880 --> 20:54.660
So if you're into that stuff, that's definitely worth a read.

20:54.660 --> 20:57.700
But either way, we're going to follow the development and all this stuff pretty closely

20:57.700 --> 21:01.540
and we'll report back to you what ships, when it ships, what you need to know about.

21:01.540 --> 21:06.220
So to find out what's going to happen to your Linux install before it happens, go subscribe

21:06.220 --> 21:10.780
to the show over at LinuxActionNews.com slash subscribe for all the ways to get those new

21:10.780 --> 21:16.700
episodes and LinuxActionNews.com slash contact for ways to get in touch.

21:16.700 --> 21:19.060
Would you like to get an ad free version of this show?

21:19.060 --> 21:24.380
You can support this show and the entire network by becoming a member over at Jupiter.party.

21:24.380 --> 21:28.860
Whichever version you choose will be back next week with our take on the latest Linux

21:28.860 --> 21:30.860
and open source news.

21:30.860 --> 21:31.920
Thanks for joining us.

21:31.920 --> 22:01.820
And that's all the news for this week.


WEBVTT

00:00.000 --> 00:09.440
Hello, and welcome to Linux Action News, episode 173 recorded on January 24th, 2021.

00:09.440 --> 00:10.440
I'm Chris.

00:10.440 --> 00:11.440
And I'm Wes.

00:11.440 --> 00:12.440
Hello, Wes.

00:12.440 --> 00:13.440
Let's do the news.

00:13.440 --> 00:17.320
It's a new year, and with it come new Red Hat Enterprise Linux programs.

00:17.320 --> 00:23.080
If you recall, last year, on December 8th, Red Hat announced a major shift in how CentOS

00:23.080 --> 00:27.520
is delivered, from trailing rail development to leading it.

00:27.520 --> 00:32.080
Not yet public, but in the works at the time, was an expansion to their developer program

00:32.080 --> 00:38.360
that makes current versions of Red Hat Enterprise Linux free to use in production on up to 16

00:38.360 --> 00:39.360
hosts.

00:39.360 --> 00:43.820
Yeah, this week, Red Hat announced they are expanding their existing developer program

00:43.820 --> 00:48.560
so that individual developer subscriptions for RHEL can be used in production for up

00:48.560 --> 00:49.840
to 16 systems.

00:49.840 --> 00:54.760
You will need to sign in to the RHEL account system, and you will have to download it from

00:54.760 --> 00:58.520
there and, of course, have your system plugged into that to receive updates.

00:58.520 --> 01:02.840
But Red Hat promises this isn't a sales program, and they say that no sales representative

01:02.840 --> 01:04.500
will follow up.

01:04.500 --> 01:10.040
An option will exist, though, within the subscription to easily upgrade to full support, but that's

01:10.040 --> 01:12.040
all up to you.

01:12.040 --> 01:15.080
It seems kind of odd that they're wrapping this up into their developer program.

01:15.080 --> 01:21.240
I don't really know of other vendors that wrap developer accounts into production licenses.

01:21.240 --> 01:27.520
I think just that alone might cause large-scale, serious companies to kind of look at this

01:27.520 --> 01:30.680
and stay away, maybe stay a little skeptical.

01:30.680 --> 01:35.040
And the elephant in the room here that everybody thought of when they read this, which seemed

01:35.040 --> 01:39.960
obvious on its face, is that they should have announced this when they announced the change

01:39.960 --> 01:43.120
to how they're producing CentOS.

01:43.120 --> 01:48.680
Leading that story with RHEL going free to more people and expanding how you can get

01:48.680 --> 01:53.720
access to RHEL would have obviously softened the blow about the change to CentOS's support

01:53.720 --> 01:57.080
cycle and switching focus to Stream.

01:57.080 --> 02:01.360
Instead, this ends up feeling reactionary and really too little too late.

02:01.360 --> 02:06.860
And what's worse is we know, based on Red Hat's phrasing, but also to multiple people

02:06.860 --> 02:12.080
we've talked inside Red Hat to, we know that these plans to make RHEL available to more

02:12.080 --> 02:17.760
people for free were in the works before the CentOS changes were made public.

02:17.760 --> 02:21.760
But now in the shadow of what feels like just having the deal changed on us, they're announcing

02:21.760 --> 02:25.660
a new deal and it leads one to suspect that the deal could just change again.

02:25.660 --> 02:30.560
It feels like you're on borrowed time, a fact which they kind of addressed with some statements,

02:30.560 --> 02:33.800
but not really simply saying, we're going to try to keep it as long as possible.

02:33.800 --> 02:36.320
We're making it sustainable.

02:36.320 --> 02:42.040
It feels like they're asking us to trust them again after they've just broken the trust.

02:42.040 --> 02:45.040
And it really doesn't seem like 16 hosts is enough.

02:45.040 --> 02:49.160
Yeah, I'm not quite sure what environments this makes sense for.

02:49.160 --> 02:54.560
I mean, I can imagine some small businesses maybe, but in that case, I'm not sure what

02:54.560 --> 02:56.320
exact benefit they're getting using RHEL.

02:56.320 --> 03:00.480
I mean, RHEL's not bad and it can work quite nicely, but the old version of CentOS could,

03:00.480 --> 03:05.280
Stream probably could, or Rocky Linux could, or even Ubuntu LTS.

03:05.280 --> 03:08.680
Because let's be honest, so you and I before the show, I was talking about an old client

03:08.680 --> 03:09.680
of mine.

03:09.680 --> 03:13.920
It's a doctor with three nurses and an occasional doctor that comes in and works out of the

03:13.920 --> 03:15.120
other office.

03:15.120 --> 03:17.740
They need one server.

03:17.740 --> 03:22.200
And the Ubuntu support model is perfect for them because they can deploy Ubuntu LTS, which

03:22.200 --> 03:25.860
is the industry standard for long-term support versions of Ubuntu.

03:25.860 --> 03:30.160
And if there is a day in which they needed support, it sort of has this on-demand support

03:30.160 --> 03:34.140
structure where you can go from no contract to contract.

03:34.140 --> 03:37.480
And that appeals to them because they can defer, defer, defer until the day they need

03:37.480 --> 03:38.480
it.

03:38.480 --> 03:41.420
With RHEL, you're going to have to kind of maintain a relationship.

03:41.420 --> 03:42.640
You're going to need to sign in.

03:42.640 --> 03:45.840
You're going to need to keep the system plugged into the RHEL dashboard.

03:45.840 --> 03:49.680
You're going to have to make sure that when they discontinue support for this version,

03:49.680 --> 03:53.400
you upgrade because there'll be no extended support for developers.

03:53.400 --> 03:56.760
And you're also going to have to be willing to consider yourself a developer to even get

03:56.760 --> 03:59.720
access to this for this one small business.

03:59.720 --> 04:01.920
You have to pretend like you're a developer now.

04:01.920 --> 04:04.160
Yeah, that's kind of the weird part.

04:04.160 --> 04:05.840
I mean, it certainly makes sense in general.

04:05.840 --> 04:06.840
I like the program.

04:06.840 --> 04:10.860
I like also that they're including, if you are paying for RHEL, you now get more developer

04:10.860 --> 04:13.840
licenses on top of that for free.

04:13.840 --> 04:16.440
But these are all things that made more sense in the reverse order.

04:16.440 --> 04:22.700
You just can't unsee that once you're aware of it because in some sense, the whole latest

04:22.700 --> 04:27.360
CentOS development feels that way where CentOS Stream, yeah, makes sense.

04:27.360 --> 04:31.080
We should have a place where RHEL is developed, having more access for developers, people

04:31.080 --> 04:34.340
who want to learn RHEL, who want to start playing it, set up a nice home ladder or maybe

04:34.340 --> 04:38.360
a small business where the admin admins a lot of RHEL and it just makes sense for them

04:38.360 --> 04:39.520
to do so.

04:39.520 --> 04:41.360
That's all great.

04:41.360 --> 04:44.640
But if CentOS had just remained, if it had never been acquired, it's almost like we've

04:44.640 --> 04:50.880
had to go through all of this drama and just confusion to get back to a slightly improved

04:50.880 --> 04:52.120
version of what we had before.

04:52.120 --> 04:53.120
Yeah.

04:53.120 --> 04:57.080
I mean, at least these CentOS alternatives are truly community ran.

04:57.080 --> 05:01.640
So I think over time as they produce and as long as they produce consistently, they'll

05:01.640 --> 05:06.280
gain a level of trust that maybe a corporation just can't get anymore.

05:06.280 --> 05:13.040
But I think what they're missing here is this developer program is missing out on a huge

05:13.040 --> 05:19.240
use case for CentOS and that's large volume deployments where the infrastructure is not

05:19.240 --> 05:23.220
the primary revenue generator, but a tool to generate revenue.

05:23.220 --> 05:27.180
Think of a web host, a VPS at scale.

05:27.180 --> 05:32.200
When you look at the web stats, which are available to us, 19% of web servers currently

05:32.200 --> 05:35.060
run CentOS.

05:35.060 --> 05:36.060
Think about that for a second.

05:36.060 --> 05:38.360
It's only second to Ubuntu.

05:38.360 --> 05:43.560
If Red Hat has no solution for these large deployment customers that put them in the

05:43.560 --> 05:47.680
sales funnel, well, Rocky Linux or someone else will.

05:47.680 --> 05:51.500
That's the key thing here is CentOS, instead of being used as a sales funnel strategy to

05:51.500 --> 05:58.960
move people into RHEL or other Red Hat products, or here's a crazy idea, sell one-off support

05:58.960 --> 06:01.000
packages for CentOS like Ubuntu does.

06:01.000 --> 06:02.520
I know wild, right?

06:02.520 --> 06:05.780
Instead of doing something like that that would have funneled customers into the Red

06:05.780 --> 06:11.080
Hat sales department, what they're doing now is they're just not addressing a large portion

06:11.080 --> 06:12.760
of the CentOS user base.

06:12.760 --> 06:16.660
When you look at how many web servers run CentOS, it's clear that there's a lot of large

06:16.660 --> 06:21.240
scale deployments and they're going to look at the 16 host limitation and say, all right,

06:21.240 --> 06:22.760
well, we're not even going to consider that.

06:22.760 --> 06:28.320
I can't help but think to an old employer of mine who all the application VMs were running

06:28.320 --> 06:33.080
Ubuntu, but the actual virtualization hosts were all on CentOS.

06:33.080 --> 06:36.200
That might be a place where Stream doesn't fit or they might not have been comfortable

06:36.200 --> 06:39.920
with that, but it was also an environment where the business was not... They were never

06:39.920 --> 06:40.920
going to pay for RHEL.

06:40.920 --> 06:45.000
You were never going to convince people upstairs that that was worth it.

06:45.000 --> 06:46.000
I don't know what they've done.

06:46.000 --> 06:50.920
I've not spoken to them, but I've got to imagine it's Ubuntu LTS now.

06:50.920 --> 06:53.000
Well, I mean, yeah.

06:53.000 --> 06:59.200
If you want something that is still supported for five years that doesn't... They're never

06:59.200 --> 07:04.500
also going to get away from that rolling concept, even though it's just as rolling probably

07:04.500 --> 07:06.120
as Ubuntu LTS is.

07:06.120 --> 07:09.640
Yeah, it has minor updates inside a major release update.

07:09.640 --> 07:12.440
If we consider that rolling all of a sudden, then we've just changed the definition of

07:12.440 --> 07:19.240
rolling, but that branding will not ever be removed from CentOS Stream.

07:19.240 --> 07:26.080
Rocky Linux will come in with its, quote unquote, bug for bug compatibility as this built from

07:26.080 --> 07:33.160
RHEL source RPMs alternative that's maintained by a nonprofit backed community.

07:33.160 --> 07:38.100
It is so perfectly addressing the need that CentOS filled, and oh, by the way, they're

07:38.100 --> 07:45.240
working on a tool to convert CentOS installs to Rocky Linux.

07:45.240 --> 07:50.720
It seems clear to me that Rocky will fill that position just fine for a lot of people,

07:50.720 --> 07:52.920
or something like Rocky, like the Cloud Linux solution.

07:52.920 --> 07:53.920
Yeah, absolutely.

07:53.920 --> 07:56.480
And you know what, Wes?

07:56.480 --> 07:59.040
Maybe that's just fine.

07:59.040 --> 08:02.460
People have their community backed enterprise distribution that they can use at scale and

08:02.460 --> 08:08.920
that they trust, and RHEL's development, like you were saying, moves out into the open.

08:08.920 --> 08:14.740
And what seems clear to me is those involved with CentOS's development felt some sort of

08:14.740 --> 08:16.320
change needed to happen.

08:16.320 --> 08:21.200
There's always been some kind of inherent conflict of interest between RHEL sales and

08:21.200 --> 08:22.200
CentOS.

08:22.200 --> 08:26.320
You know, why are you selling this super expensive thing over here and essentially giving it

08:26.320 --> 08:28.600
away over here?

08:28.600 --> 08:30.320
It obviously wasn't sustainable.

08:30.320 --> 08:34.700
And when you weigh the contributions that Red Hat has made to the Linux community, calling

08:34.700 --> 08:36.780
it invaluable isn't doing it justice.

08:36.780 --> 08:39.960
It's been fundamental to the success of Linux in so many ways.

08:39.960 --> 08:42.720
What Red Hat has done has been fundamental.

08:42.720 --> 08:47.200
So if this change is what they felt needed to happen to make that contribution level

08:47.200 --> 08:52.360
sustainable and resolve that conflict of interest, put CentOS in a way that's sustainable in

08:52.360 --> 08:58.720
their development chart, you know, when they look at it now, they have CentOS leading RHEL

08:58.720 --> 09:01.120
and Fedora at the base of all of it.

09:01.120 --> 09:07.000
So if you're a fan of Fedora, if you're a fan of CentOS, this essentially enshrines

09:07.000 --> 09:10.880
them in the development process of Red Hat Enterprise Linux and brings the development

09:10.880 --> 09:14.720
of Red Hat Enterprise Linux out into the open and makes the whole kit and caboodle, the

09:14.720 --> 09:19.000
whole package dependent on Fedora's future development.

09:19.000 --> 09:23.800
So in a lot of ways, it does a lot of good things and the community is stepping up to

09:23.800 --> 09:29.700
offer a solution and I feel confident that the Cloud Linux solution and Rocky Linux will

09:29.700 --> 09:34.080
be shipping well before the end of life date for standard CentOS.

09:34.080 --> 09:38.280
We have until the end of this year and these projects are on track and I suspect Stream

09:38.280 --> 09:42.640
will remain a great distribution for a lot of people and then Rocky and others will fill

09:42.640 --> 09:43.640
that gap.

09:43.640 --> 09:46.920
The only loser we're really going to have in all of this besides the sysadmins who have

09:46.920 --> 09:50.880
to burn their time worrying about this is the Red Hat sales department because they're

09:50.880 --> 09:56.080
going to lose a huge part of their sales funnel, but at the same time, they've at least resolved

09:56.080 --> 09:57.320
this internal conflict.

09:57.320 --> 10:01.040
Yeah, I think you're right to say that there is a conflict there.

10:01.040 --> 10:05.880
Clearly, there were two minds within Red Hat that wasn't sitting comfortably.

10:05.880 --> 10:09.120
So if this is what it took to get to a new steady state for a while, I think you're right

10:09.120 --> 10:11.140
to point out that Red Hat's doing a lot of great stuff.

10:11.140 --> 10:12.800
That investment is not going anywhere.

10:12.800 --> 10:16.320
Neither are the source tarballs that they continue to publish that fuel the efforts

10:16.320 --> 10:17.540
of things like Rocky Linux.

10:17.540 --> 10:22.200
So if we've just got a new structure, a new organization, in some ways, maybe we'll look

10:22.200 --> 10:26.320
back on this as just the nature and sort of the power of open source development.

10:26.320 --> 10:32.720
Yeah, and maybe even, this is a little bold, but maybe even a necessary change.

10:32.720 --> 10:38.860
From the server to the desktop, in a development status update for Ubuntu 21.04, the team has

10:38.860 --> 10:45.200
revealed that they'll be skipping the next GNOME release and sticking instead with 3.38.

10:45.200 --> 10:47.280
What's old is new again, Wes.

10:47.280 --> 10:49.160
I'm having a bit of deja vu here.

10:49.160 --> 10:55.120
When Ubuntu announced it was switching back to GNOME from Unity in April of 2017, we pondered

10:55.120 --> 10:57.640
how long it would take until this might happen.

10:57.640 --> 11:02.040
And as we thought then, just like it kind of looks like now, it would take a confluence

11:02.040 --> 11:07.040
of perfectly reasonable reasons, which is exactly what's happened here.

11:07.040 --> 11:11.560
The Ubuntu team has reasoned that the new shell might not be fully ready in the next

11:11.560 --> 11:12.560
release.

11:12.560 --> 11:16.080
It's a big undertaking, probably going to take some time to work that out.

11:16.080 --> 11:21.360
They are unsure what the impact will be on their custom desktop and extensions.

11:21.360 --> 11:25.640
They can't guarantee what that experience will be like, and because we're already well

11:25.640 --> 11:29.240
into the development cycle, it's a moving target.

11:29.240 --> 11:33.240
And they suspect there's likely going to be some design questions they have to resolve,

11:33.240 --> 11:38.480
and what they consider non-trivial code changes to make things work with GNOME 40.

11:38.480 --> 11:43.160
And of course that other big-ticket item, GTK4.

11:43.160 --> 11:48.100
As Ubuntu desktop developer Sebastien Bachur pointed out, Debian will have it packaged

11:48.100 --> 11:55.600
in time, at least it seems, but the team feels GTK4 stability is just unknown right now.

11:55.600 --> 12:00.480
And the team suspects it will take a couple of GNOME release cycles to fully transition.

12:00.480 --> 12:04.000
Yeah, and that's just the reality right now.

12:04.000 --> 12:09.140
They are for themselves mid-release cycle on the Ubuntu release.

12:09.140 --> 12:16.240
So it's a big load, and they have the time now to just smooth that out over the next

12:16.240 --> 12:18.080
couple of Ubuntu releases.

12:18.080 --> 12:21.520
Instead of eating it all now and then having things potentially change on them, they can

12:21.520 --> 12:26.160
release, let another development cycle of GNOME land, and they can work it into a future

12:26.160 --> 12:29.480
Ubuntu, and they still have time before the LTS lands.

12:29.480 --> 12:34.880
Yeah, you know, it does make me think this is sensible, because Ubuntu is, you know,

12:34.880 --> 12:36.240
it's more than just the GNOME desktop.

12:36.240 --> 12:37.440
It's the Ubuntu desktop.

12:37.440 --> 12:42.160
They've got their own feel, they've all got their own fit and finish there, and it's primarily,

12:42.160 --> 12:45.000
you know, used by a lot of folks as a workstation to get work done.

12:45.000 --> 12:49.200
You don't really want that changing and breaking all the time, so it makes sense to be careful

12:49.200 --> 12:53.240
if we're going to have anything close to what you get on like the Apple side of the house.

12:53.240 --> 12:57.160
It's nice to see some thought going in and not just, well, they updated, should we?

12:57.160 --> 13:01.420
I joked about deja vu though, and I have to say, it kind of reminds me of the bad old

13:01.420 --> 13:07.240
days where Ubuntu would be shipping an older version of GTK or GNOME, and it would make

13:07.240 --> 13:11.720
life a little bit more frustrating for those of us that wanted to install and use the latest

13:11.720 --> 13:13.200
stuff.

13:13.200 --> 13:17.680
And it kind of reminded me of a time where it felt like Ubuntu on the desktop was behind

13:17.680 --> 13:18.680
a little bit.

13:18.680 --> 13:22.560
You know, I can't help but reconnect with some of those old feelings, even though the

13:22.560 --> 13:24.520
situation is totally different.

13:24.520 --> 13:29.600
Like, this is a pretty big design change, and if anything, distributions like Ubuntu

13:29.600 --> 13:35.320
and a few others are kind of there to insulate their users, and they absorb some of that

13:35.320 --> 13:38.360
upstream and smooth it out before it hits their users.

13:38.360 --> 13:43.560
It's exactly the role they should be playing, and yet I can't help but feel this slight

13:43.560 --> 13:44.560
tinge of disappointment.

13:44.560 --> 13:50.760
Yeah, I think maybe you should have always expected or not gotten unused to this, I guess

13:50.760 --> 13:51.760
I'm saying.

13:51.760 --> 13:54.760
I have memories of the same, and it was kind of like, yeah, all right, this isn't exciting,

13:54.760 --> 13:58.240
especially when you are like us and are sort of clued in and are following updates and

13:58.240 --> 14:02.000
all the exciting developments happening and improvements in these desktops.

14:02.000 --> 14:05.640
But hey, that's what you have Arch for, or really, that's what you have Fedora for.

14:05.640 --> 14:10.040
Yeah, and if anything, this just makes it in a way more fun to try the different distributions,

14:10.040 --> 14:13.040
because for a bit here, they'll be more differentiated than ever.

14:13.040 --> 14:18.880
You do wonder how this impacts the downstream Ubuntu derivatives that don't necessarily

14:18.880 --> 14:24.280
have the same opinion or perhaps ship their own desktop environment and would like GTK4,

14:24.280 --> 14:29.800
but my gut tells me probably most of the downstream derivatives are kind of grateful for a little

14:29.800 --> 14:35.080
bit of stability for a bit before the transition to GTK4, because if everybody can get up to

14:35.080 --> 14:39.440
the most current GTK, if they can use this release cycle to get current on a lot of things,

14:39.440 --> 14:42.560
it'll make the transition to 4 easier.

14:42.560 --> 14:47.060
And so I have to think this gives the derivatives a little bit of a chance to take a breath

14:47.060 --> 14:49.800
of air and get some work done.

14:49.800 --> 14:53.880
But I acknowledge that it's essentially a choice being made out of their control.

14:53.880 --> 14:54.880
It's kind of like the deal.

14:54.880 --> 14:59.600
Like if you're going to ride on Ubuntu's coattails, this is sometimes the deal you get.

14:59.600 --> 15:02.340
And it does sound like there'll be Debian packages available.

15:02.340 --> 15:08.200
So perhaps there's a route of escape there for distros that really want the latest GNOME.

15:08.200 --> 15:13.320
It also makes me think maybe you just need the GNOME version of Neon.

15:13.320 --> 15:15.320
You mean GNOME OS, Wes?

15:15.320 --> 15:18.320
I think I do.

15:18.320 --> 15:19.920
linode.com slash LAN.

15:19.920 --> 15:23.200
Go there to get a $100 60-day credit and support the show.

15:23.200 --> 15:26.220
A big thank you to Linode for supporting this here program.

15:26.220 --> 15:27.840
They're our cloud hosting provider.

15:27.840 --> 15:31.840
I chose Linode about two years ago, and I've been using them every day since, and I've

15:31.840 --> 15:33.080
just really expanded on that.

15:33.080 --> 15:37.560
I've grown to trust them and deploy all of our backend services on Linode.

15:37.560 --> 15:40.280
And with that $100 credit, you can really get started.

15:40.280 --> 15:44.000
I mean, they have systems that are as cheap as $5 a month, but why not play around in

15:44.000 --> 15:46.460
their configurator and really build yourself something neat?

15:46.460 --> 15:50.840
Deploy a game server in seconds with a lot of the settings pre-configured in the deployments

15:50.840 --> 15:52.120
just right there in the screen.

15:52.120 --> 15:54.560
You set the options you want and hit go.

15:54.560 --> 15:57.500
And what I really love about Linode is their passion for Linux.

15:57.500 --> 16:00.360
That's what got them into this game back in 2003.

16:00.360 --> 16:04.720
They've been doing this basically since cloud computing was a thing.

16:04.720 --> 16:09.180
They started three years before AWS, and yet they're still crushing them on the price.

16:09.180 --> 16:12.840
And unlike some of the entry-level hosting services that lock you into their platform,

16:12.840 --> 16:17.160
Linode gives you full backend access to customize and control your servers to fit your need.

16:17.160 --> 16:20.820
And that has come in handy for me several times.

16:20.820 --> 16:21.820
Love it.

16:21.820 --> 16:26.200
So go to linode.com slash land, get that $100 60-day credit, and see what I've been talking

16:26.200 --> 16:27.200
about.

16:27.200 --> 16:30.120
They're independently owned, and they're founded on a love for Linux, and that has influenced

16:30.120 --> 16:32.040
so many of their decisions over the years.

16:32.040 --> 16:36.040
And now they're dedicated to offering the best way to virtualize anything you need for

16:36.040 --> 16:37.880
a cloud computer.

16:37.880 --> 16:41.340
Maybe it's a website, a personal site, or maybe it's the backend infrastructure for

16:41.340 --> 16:42.480
your business.

16:42.480 --> 16:45.200
That $100 credit will give you an idea of what it's capable of.

16:45.200 --> 16:49.520
Go over their documentation and try out their fantastic human-powered support.

16:49.520 --> 16:54.040
You can do a lot with that $100 60-day credit, so go to linode.com slash land.

16:54.040 --> 16:58.300
That's linode.com slash land, and a big thank you to Linode for sponsoring Linux Action

16:58.300 --> 17:00.820
News.

17:00.820 --> 17:08.200
On a blog post titled Doubling Down on Open Part 2, posted January 14th, Elastic announced

17:08.200 --> 17:14.240
changes to the license for Elasticsearch and Kibana, changing from the Apache 2.0 license

17:14.240 --> 17:18.520
to the server-side public license and the Elastic license.

17:18.520 --> 17:24.320
If you're not familiar, Elasticsearch is a distributed, multi-tenant-capable, full-text

17:24.320 --> 17:30.800
search engine with a powerful HTTP-based REST API and the ability to ingest schema-free

17:30.800 --> 17:36.280
JSON documents, which, especially when paired with its sister project Kibana, an open-source

17:36.280 --> 17:41.920
data visualization dashboard, it provides a flexible data storage and analysis platform

17:41.920 --> 17:46.200
that has seen wide-scale deployment across a huge number of industries.

17:46.200 --> 17:50.360
And this is really what we're seeing here is a bigger meta-story that's been going on

17:50.360 --> 17:53.280
for a few years, and this show has been covering it.

17:53.280 --> 17:59.640
Open-source projects that become massively successful, they create, in some ways, industries,

17:59.640 --> 18:05.680
they have to start tweaking their license in reaction to AWS hoovering up their customers

18:05.680 --> 18:07.560
and monetizing their work.

18:07.560 --> 18:12.960
You know, it's an interesting sort of tack-on problem to the fact that AWS just dominates

18:12.960 --> 18:14.640
hosting these days, right?

18:14.640 --> 18:19.080
I've often sort of wondered, and we've taken advantage of some services, things like Nextcloud,

18:19.080 --> 18:24.280
maybe Hosted Matrix, or Home Assistant comes to mind in this case, where you just, you

18:24.280 --> 18:28.440
have an open-source project you love, you want to use it and leverage it, but you don't

18:28.440 --> 18:33.160
want to manage the server side, so you're happy to pay someone to do that for you.

18:33.160 --> 18:38.880
But in the AWS case, well, they're already the default, so when they also offer everything,

18:38.880 --> 18:43.520
of course that's where businesses are going to go, and that just means it's harder if

18:43.520 --> 18:46.120
you're going to try to sell it on your own on the side.

18:46.120 --> 18:50.840
Yeah, if you're an all-in AWS organization and you need to deploy something like Elastic

18:50.840 --> 18:54.560
Search, it's just a no-brainer to go with the one that AWS offers.

18:54.560 --> 18:58.280
I mean, you don't have to go set up a whole separate relationship and sign contracts and

18:58.280 --> 19:01.240
I mean, maybe you don't have to do all of those things, but it's a whole separate thing

19:01.240 --> 19:03.960
when you've already got an Oedipus account.

19:03.960 --> 19:07.560
Everyone in the organization is familiar, and you just click another button.

19:07.560 --> 19:12.480
And this week, AWS announced they're forking Elastic Search.

19:12.480 --> 19:16.440
AWS says Elastic Search is no longer open-source software.

19:16.440 --> 19:21.500
As they put it, they are now, quote, stepping up to provide a truly open-source Elastic

19:21.500 --> 19:23.120
Search alternative.

19:23.120 --> 19:28.000
And Amazon also let us know that they're always prepared for open-source projects to get angry

19:28.000 --> 19:29.000
with them.

19:29.000 --> 19:34.160
Adding in their post, when AWS decides to offer a service based on an open-source project,

19:34.160 --> 19:39.600
we ensure that we are equipped and prepared to maintain it ourselves if necessary.

19:39.600 --> 19:44.080
Their forks of Elastic Search and Kibana will be based on the latest Apache version two

19:44.080 --> 19:49.840
licensed code bases, version 7.10, and they plan to publish new GitHub repositories in

19:49.840 --> 19:52.400
the next few weeks.

19:52.400 --> 19:56.840
The AWS team also pushed back on being the villain in this story.

19:56.840 --> 20:00.180
Quote, Elastic knows what they're doing is fishy.

20:00.180 --> 20:02.440
The community has told them this.

20:02.440 --> 20:06.520
It's also why they felt the need to write an additional blustery blog on top of their

20:06.520 --> 20:15.480
initial license change blog to try to explain their actions as AWS made us do it.

20:15.480 --> 20:16.960
Most folks aren't fooled.

20:16.960 --> 20:19.000
We didn't make them do anything.

20:19.000 --> 20:23.400
They believe that restricting their license will lock others out of offering managed Elastic

20:23.400 --> 20:28.080
Search services, which will let Elastic build a bigger business.

20:28.080 --> 20:32.080
Elastic has a right to change their license, but they should also step up and own their

20:32.080 --> 20:33.160
decision.

20:33.160 --> 20:38.320
It's interesting how much the step up language is being used here and how bluntly AWS is

20:38.320 --> 20:41.680
just coming at this as this has evolved over the years where they've kind of been caught

20:41.680 --> 20:42.740
off guard.

20:42.740 --> 20:46.600
Now they're just coming out with all guns blazing, essentially saying we're prepared

20:46.600 --> 20:49.320
for open-source projects to flake on us.

20:49.320 --> 20:52.320
We're stepping up to provide something that's truly free.

20:52.320 --> 20:59.880
And they try to play like this underdog who is compensating for cranky open-source projects.

20:59.880 --> 21:02.040
And I'm just, I don't buy that image.

21:02.040 --> 21:04.160
It seems so obviously self-motivated.

21:04.160 --> 21:06.680
Oh yes, absolutely.

21:06.680 --> 21:11.000
Now I will say Amazon has been doing better in the open-source community the last few

21:11.000 --> 21:12.000
years.

21:12.000 --> 21:14.440
You know, they have, I think in a real sense stepped up at least in some areas.

21:14.440 --> 21:18.360
Now that changes a lot depending on which area we're talking about.

21:18.360 --> 21:21.660
And there's some spicy language and feelings on both sides here.

21:21.660 --> 21:25.320
And I can certainly sympathize with Elastic, the folks who have done a lot of stuff out

21:25.320 --> 21:29.960
in the open-source world, tried to build at least open-source based or open-core for a

21:29.960 --> 21:35.760
while type of product, which generally the community tends to like and found themselves

21:35.760 --> 21:39.880
struggling to make a sustainable business because of the elephant in the room of everyone's

21:39.880 --> 21:42.300
just running it on Amazon.

21:42.300 --> 21:48.200
But at the same time, it's hard to argue that this license change, I mean, the OSI isn't

21:48.200 --> 21:50.000
fond of this license, right?

21:50.000 --> 21:56.120
So there is a sense that the community, rightly so, feels you're changing the essence of what

21:56.120 --> 21:57.120
this is.

21:57.120 --> 21:58.800
The deal has been changed a little bit.

21:58.800 --> 22:01.640
That is where Amazon is 100% right.

22:01.640 --> 22:06.160
And from their perspective, they are just now executing on what they're legally allowed

22:06.160 --> 22:08.520
to do with anything that's Apache licensed.

22:08.520 --> 22:13.460
And in this post, they cite the many several occasions where they submitted code upstream.

22:13.460 --> 22:15.160
So it's not like they weren't contributing here.

22:15.160 --> 22:17.880
They were actually contributing upstream to the project.

22:17.880 --> 22:22.360
And I guess that'd be my comment to kind of underscore what you said is we have seen AWS

22:22.360 --> 22:28.000
do more of that investing in engineers and investing essentially in the output of code

22:28.000 --> 22:29.740
that goes back upstream to these projects.

22:29.740 --> 22:35.200
And I feel like as this story, this meta story has evolved over the last few years, that's

22:35.200 --> 22:38.640
an area where Amazon has actually quote unquote stepped up.

22:38.640 --> 22:44.000
It is interesting to consider some of these new anti-AWS based licenses because at least

22:44.000 --> 22:48.120
for the stuff we're doing at JB or personal use, it wouldn't necessarily affect me.

22:48.120 --> 22:51.960
I'm not worried about being sued by Elastic over it and we're not selling a managed service

22:51.960 --> 22:56.720
or anything like it of the essential parts of Elasticsearch.

22:56.720 --> 23:01.280
But there's a new license with new verbiage and not a bunch of court cases to let you

23:01.280 --> 23:03.120
know how that's going to be interpreted.

23:03.120 --> 23:06.840
So I can certainly see why this would create a lot of uncertainty for other businesses

23:06.840 --> 23:09.400
who are selling some kind of service.

23:09.400 --> 23:16.080
Maybe it's not just a new face on Elasticsearch or Cubana, but it's heavily used.

23:16.080 --> 23:17.080
How integral is that?

23:17.080 --> 23:19.180
Where do you draw the line?

23:19.180 --> 23:22.840
Elastic has published some additional blog posts and updates to FAQ pages and the like

23:22.840 --> 23:25.800
to try to clarify that because it's clearly upsetting some people.

23:25.800 --> 23:31.060
But if you had an open source, a quote unquote proper open source version, wouldn't you just

23:31.060 --> 23:33.400
use that?

23:33.400 --> 23:39.980
Xencrypt, who now provides TLS certificates to more than 235 million websites, has announced

23:39.980 --> 23:42.080
a successful database upgrade.

23:42.080 --> 23:47.200
And as you might expect at their scale, a database upgrade is anything but trivial.

23:47.200 --> 23:52.900
Their certificate authority software, Boulder, uses MySQL style schemas and queries to manage

23:52.900 --> 23:57.680
subscriber accounts and the entire certificate issuance process.

23:57.680 --> 24:03.440
It's designed to work with a single MySQL or MariaDB or Percona database at the backend.

24:03.440 --> 24:07.600
They currently use MariaDB with the InaboutDB database engine.

24:07.600 --> 24:12.360
To hear them say it, running a certificate authority against a single database is done

24:12.360 --> 24:14.120
just to minimize complexity.

24:14.120 --> 24:18.280
Keep things simple, only a few places where it can go wrong because, well, you really

24:18.280 --> 24:20.120
don't want to get this process wrong.

24:20.120 --> 24:22.960
Yeah, it keeps, as they put it, the maintenance burden low.

24:22.960 --> 24:29.080
But obviously one consequence of this design is that their database machines need to be

24:29.080 --> 24:30.080
pretty powerful.

24:30.080 --> 24:33.960
I mean, they acknowledge that eventually they may need to shard or break up the single database

24:33.960 --> 24:35.400
into multiple databases.

24:35.400 --> 24:40.280
But so far, they claim hardware advances have allowed them to just avoid doing that.

24:40.280 --> 24:46.680
Their old hardware before the upgrade was a dual socket Xeon E5 2650 box with a total

24:46.680 --> 24:55.680
of 48 threads and a terabyte of RAM and 24 3.8 terabyte Samsung SATA SSDs.

24:55.680 --> 24:56.680
Now they have some new stuff.

24:56.680 --> 24:57.680
Oh, yeah.

24:57.680 --> 25:06.640
The new hardware is based on two AMD EPYC 7542s with a total of 64 cores, 128 threads,

25:06.640 --> 25:14.440
and now two terabytes of RAM with 24 6.4 terabyte Intel NVMe SSDs along for the ride.

25:14.440 --> 25:15.840
Yeah, now that's a big deal.

25:15.840 --> 25:21.320
See, going with those EPYC CPUs provides a hundred and twenty eight PCI lanes, which

25:21.320 --> 25:27.560
enables them to put in 24 NVMe drives in one single machine.

25:27.560 --> 25:32.760
If you want to geek out more on these server performance charts and details, it's really

25:32.760 --> 25:36.240
worth visiting their post, which we'll have linked in the show notes.

25:36.240 --> 25:40.080
They clearly show a big performance improvement for Let's Encrypt with Headroom for Growth,

25:40.080 --> 25:41.400
which is great.

25:41.400 --> 25:46.600
And they also talk a bit about their adoption of OpenCFS and how they optimized it for NVMe

25:46.600 --> 25:47.600
drives.

25:47.600 --> 25:51.440
All of it is fascinating.

25:51.440 --> 25:55.120
Datadog.com slash Linux Action News.

25:55.120 --> 25:57.360
Datadog is end-to-end application monitoring.

25:57.360 --> 25:59.720
They're the unified monitoring and analytics platform.

25:59.720 --> 26:03.760
I mean, really for complete visibility into the performance of your applications, you

26:03.760 --> 26:08.020
need telemetry data, traces, metrics, and logs that describe the activity across your

26:08.020 --> 26:09.520
entire stack.

26:09.520 --> 26:13.640
But if you're using multiple monitoring tools, your data can end up in silos, making it difficult

26:13.640 --> 26:17.480
to troubleshoot issues that affect the user experience.

26:17.480 --> 26:21.900
Datadog lets you quickly analyze the performance of your Linux servers in real time with customizable

26:21.900 --> 26:26.240
dashboards that troubleshoot Linux issues in seconds with a unified view of your metrics,

26:26.240 --> 26:29.800
your traces, and your logs all in one place.

26:29.800 --> 26:33.600
And with the Datadog clipboard, you can streamline the performance, so check out investigation

26:33.600 --> 26:38.160
outages by capturing relevant views of your infrastructure and applications all in one

26:38.160 --> 26:39.160
place.

26:39.160 --> 26:40.960
In one shot time, get the big picture.

26:40.960 --> 26:45.440
And they have turnkey integrations for over 400 technologies to just get going.

26:45.440 --> 26:50.920
You can even use Datadog to monitor the key metrics of a Linux box right alongside proprietary

26:50.920 --> 26:54.160
and open source applications, the entire stack.

26:54.160 --> 26:59.720
So start your Datadog trial today by visiting datadog.com slash Linux Action News.

26:59.720 --> 27:04.140
You start your free trial, create one dashboard, and you can get a free Datadog t-shirt.

27:04.140 --> 27:06.840
So that's datadog.com slash Linux Action News.

27:06.840 --> 27:10.120
Create a dashboard, get some free swag, and unify your monitoring.

27:10.120 --> 27:14.760
A big thank you to Datadog for sponsoring this here episode of Linux Action News.

27:14.760 --> 27:22.360
And a big thank you to everybody for visiting datadog.com slash Linux Action News.

27:22.360 --> 27:27.800
Developers at ARM virtualization company Corellium have managed to get Ubuntu 2004

27:27.800 --> 27:31.240
up and running on the new Apple Silicon Mac Mini.

27:31.240 --> 27:36.480
This certainly got a lot of attention when the developers started tweeting pictures of

27:36.480 --> 27:42.160
the Raspberry Pi version of Ubuntu desktop running on an M1.

27:42.160 --> 27:44.920
The networking was made possible using a dongle.

27:44.920 --> 27:49.800
And as you might expect, the GPU work here, well, is minimal.

27:49.800 --> 27:51.600
It's essentially just a frame buffer.

27:51.600 --> 27:53.560
It's no acceleration.

27:53.560 --> 27:55.240
So that's still a sticking point.

27:55.240 --> 28:02.240
Corellium has worked on getting Linux working on the A14 chip that can be found in some

28:02.240 --> 28:03.760
iPads, I believe.

28:03.760 --> 28:08.960
So they had a bunch of code that was pretty much baked for the A14.

28:08.960 --> 28:13.760
So it wasn't a big transition to get it up and running on the M1.

28:13.760 --> 28:17.360
The only kind of negative thing about it is they've just kind of been sitting on this

28:17.360 --> 28:20.040
code for this entire time.

28:20.040 --> 28:24.280
And then they kind of have one developer who's now putting it up on GitHub.

28:24.280 --> 28:29.480
And it seems kind of like it's more of a product that they have that they're utilizing now

28:29.480 --> 28:31.120
to make a big splash.

28:31.120 --> 28:36.040
And I say that because in background, in a conversation I was having with Hector Martin,

28:36.040 --> 28:40.920
he had talked to me about how one of the ways they may strategically try to raise awareness

28:40.920 --> 28:44.480
for their project is by doing exactly what Corellium just did.

28:44.480 --> 28:48.120
He kind of even laid out that the way you go through it, the way you take the pictures

28:48.120 --> 28:52.800
up on Twitter and post them, like he had the whole thing as a way to raise awareness for

28:52.800 --> 28:53.800
the project.

28:53.800 --> 28:55.680
A marketing media strategy.

28:55.680 --> 28:58.640
And of course, we're talking about Asahi Linux project.

28:58.640 --> 29:03.760
He launched to try to do this, so there's a little bit of maybe some thunder being stolen

29:03.760 --> 29:04.760
here.

29:04.760 --> 29:06.840
It at least felt a little dicey on Twitter for a few moments.

29:06.840 --> 29:09.280
It's probably not going to help them raise funds.

29:09.280 --> 29:11.680
It's not going to get them any more patrons for a bit.

29:11.680 --> 29:15.560
I mean, not that it's going to steal from them, but what it kind of came across as is

29:15.560 --> 29:17.040
Corellium was like, hey, look at us.

29:17.040 --> 29:18.440
It actually even tweeted this.

29:18.440 --> 29:23.180
We had a free day, so we got it up and running on the M1.

29:23.180 --> 29:26.240
But they really haven't interfaced directly with the kernel community as far as we can

29:26.240 --> 29:27.460
tell yet.

29:27.460 --> 29:31.460
And we don't really know if they have any actual plan on following through with being

29:31.460 --> 29:36.120
a normal contributing member of the kernel community, or if this is just sort of a code

29:36.120 --> 29:37.120
dump.

29:37.120 --> 29:38.120
We'll see.

29:38.120 --> 29:41.380
I mean, at the moment, it's just one guy doing the work to take all of this upstream and

29:41.380 --> 29:42.600
try to clean it up.

29:42.600 --> 29:46.140
And at the end of the day, the Ashi Linux project can't really touch this unless it's

29:46.140 --> 29:47.600
legally safe.

29:47.600 --> 29:50.240
And so it's sort of like one of these situations where, okay, good job.

29:50.240 --> 29:51.240
You got it working.

29:51.240 --> 29:52.300
Now upstream it.

29:52.300 --> 29:54.680
And if it passes those tests, then we can really use it.

29:54.680 --> 29:58.580
In the meantime, this is actually a bit of a marketing stunt.

29:58.580 --> 30:04.680
Unless you want to get a Mac that has no graphics acceleration that requires dongles for basic

30:04.680 --> 30:05.680
functionality.

30:05.680 --> 30:07.180
I mean, that's kind of what a Mac is already.

30:07.180 --> 30:12.320
But really, who buys a really expensive M1 Mac to have very poor functionality?

30:12.320 --> 30:16.080
And I think what Corelium is doing is they're kind of capitalizing on people not understanding

30:16.080 --> 30:20.760
the nuances of what it takes to get this system up and running to get attention for their

30:20.760 --> 30:21.760
commercial products.

30:21.760 --> 30:24.640
Yeah, it is hard to downplay that aspect.

30:24.640 --> 30:31.400
I think Hector Martin and Asahi Linux had been trying to take things definitely slower,

30:31.400 --> 30:35.180
step by step, trying to do things right, making sure things could be upstream.

30:35.180 --> 30:39.240
But also, I think have done a surprisingly good job of setting expectations from the

30:39.240 --> 30:40.240
beginning.

30:40.240 --> 30:44.080
Whereas you're right, these kinds of announcements, flashy announcements for Corelium, despite

30:44.080 --> 30:47.680
some impressive work, I mean, their blog post about how they did it and some of the technical

30:47.680 --> 30:52.480
details is definitely interesting and it's some hard and impressive work.

30:52.480 --> 30:55.600
But yeah, no one's going to, this is not usable by any stretch of the means.

30:55.600 --> 30:58.960
You've got a proof of concept working and that's what you should have said.

30:58.960 --> 31:02.600
Yeah, and they say they're aiming to upstream as much of the work as possible.

31:02.600 --> 31:04.320
That's going to be what matters long term.

31:04.320 --> 31:08.080
You know, I have seen a few mailing lists posts go by, it does look like there's some

31:08.080 --> 31:09.080
healthy discussions.

31:09.080 --> 31:11.780
I haven't seen, you know, nothing's been merged, of course, far too early for that.

31:11.780 --> 31:15.240
But I see Hector Martin's name in there providing some good feedback to you.

31:15.240 --> 31:20.520
So hopefully the end result here is that patches fly, conversation happens and eventually good

31:20.520 --> 31:21.680
code gets merged.

31:21.680 --> 31:25.720
On the GPU front, it is worth mentioning that the developer we've covered in the past who's

31:25.720 --> 31:31.160
working with the Yashii Linux project has put another update on their blog and it appears

31:31.160 --> 31:33.080
that progress is happening.

31:33.080 --> 31:37.240
They've actually been able to draw a triangle using the GPU on the screen.

31:37.240 --> 31:42.720
Well, while that is a minor in the grand scheme of things, it's a very important first step.

31:42.720 --> 31:45.680
They're drawing triangles now on the M1 GPU.

31:45.680 --> 31:49.000
And the debate continues if this time is a good investment or not.

31:49.000 --> 31:52.720
But I kind of feel like that's a side debate because it's clearly happening regardless.

31:52.720 --> 31:54.200
Yeah, I'm not these people's manager.

31:54.200 --> 31:55.840
I don't get to tell them how to spend their time.

31:55.840 --> 31:58.920
So all I can do is sit here and wait and hope.

31:58.920 --> 32:04.160
Well talking about ARM devices, the Raspberry Pi Foundation has a real tiny announcement.

32:04.160 --> 32:05.280
It's a Pico.

32:05.280 --> 32:09.060
It's a little Raspberry Pi Pico board for four dollars.

32:09.060 --> 32:15.080
It has a custom dual core ARM processor running at a hundred and thirty three megahertz, two

32:15.080 --> 32:20.820
hundred and sixty four kilobytes of RAM and twenty six GPIO ports, which include three

32:20.820 --> 32:24.800
analog inputs, a micro USB port and a temperature sensor.

32:24.800 --> 32:27.860
It doesn't come with Wi-Fi or Bluetooth, though.

32:27.860 --> 32:32.560
But I mean, again, it's four dollars if you want to run something on that shiny new Raspberry

32:32.560 --> 32:33.560
Pi Pico.

32:33.560 --> 32:35.400
It's actually quite easy.

32:35.400 --> 32:39.640
You plug your device in your computer using the micro USB port, then you boot up the Pi

32:39.640 --> 32:44.700
Pico while holding down a button and the device will just appear on your computer as an external

32:44.700 --> 32:48.560
drive, copy over your programs and away you go.

32:48.560 --> 32:52.820
Now something I noticed that is really pretty neat is that in addition to C, you can use

32:52.820 --> 32:55.280
Micro Python as your development language.

32:55.280 --> 32:58.440
It's a Python inspired language for microcontrollers.

32:58.440 --> 33:02.560
And I don't know about you, Chris, but my C++ is a little rusty.

33:02.560 --> 33:07.320
And as I know you love to see, Wes, they have tons of good documentation, a data sheet and

33:07.320 --> 33:08.320
a lot more.

33:08.320 --> 33:13.860
We'll have links in the show notes at LinuxActionNews.com slash 173.

33:13.860 --> 33:17.160
And while you're over there, check out the subscribe page for all the ways to get new

33:17.160 --> 33:18.160
episodes.

33:18.160 --> 33:21.240
And of course, the contact page for ways to get in touch.

33:21.240 --> 33:27.240
And pro tip, check out Linux Unplug 390 for an in the trenches discussion of Elasticsearch.

33:27.240 --> 33:31.840
As for us, though, we'll be back next Monday with our weekly take on the latest Linux and

33:31.840 --> 33:33.240
open source news.

33:33.240 --> 34:02.840
Thanks for joining us and we will see you next week.


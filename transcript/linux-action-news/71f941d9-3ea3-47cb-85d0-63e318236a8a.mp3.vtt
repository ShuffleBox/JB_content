WEBVTT

00:00.000 --> 00:08.960
Hello, and welcome to Linux Action News, episode 135, recorded on December 8th, 2019. I'm

00:08.960 --> 00:09.960
Chris.

00:09.960 --> 00:10.960
And I'm Joe.

00:10.960 --> 00:16.400
Hello, Joe. Good to be connected with you. And we start this week with Ubuntu going pro,

00:16.400 --> 00:19.040
at least on Amazon Web Services.

00:19.040 --> 00:24.600
This is really a rolling up of existing services that Canonical offers with the convenience

00:24.600 --> 00:29.440
of being able to pay for them through AWS, just adding it to that bill rather than having

00:29.440 --> 00:31.520
to deal with a separate organization.

00:31.520 --> 00:38.040
Right. It makes compliance as simple as selecting and running an image on Amazon. Because these

00:38.040 --> 00:43.480
images have 10 years of package updates, they have kernel live patch enabled, and they've

00:43.480 --> 00:47.560
been specifically tuned to be compliant for use in environments under compliance regimes

00:47.560 --> 00:53.400
such as HIPAA, or the ISO standard, PCI and many others. So compliance is baked into these

00:53.400 --> 00:59.620
images. And the patch coverage for Ubuntu's infrastructure applications like MongoDB, or

00:59.620 --> 01:03.460
some of the things that are in universe, even the universe repository, which typically is

01:03.460 --> 01:07.400
not covered, we'll see security patches directly from Canonical.

01:07.400 --> 01:11.880
Yeah, that's kind of the big new thing here. Because although a lot of those packages did

01:11.880 --> 01:18.000
get support, and security updates, now they're guaranteeing that. But also what's new is

01:18.000 --> 01:19.000
a rolling kernel.

01:19.000 --> 01:25.280
A rolling kernel, you say, Joe? They're transitioning the images to a rolling kernel, the existing

01:25.280 --> 01:31.360
ones. They write on their blog, applying this model directly to 1804 today, the Linux AWS

01:31.360 --> 01:38.480
kernel is a 4.15 based kernel. When we start to roll, they will move to the five kernel

01:38.480 --> 01:44.320
series from their 1904 interim release. So they're branching from there. And they say

01:44.320 --> 01:48.880
it is available for preview. And there's also a way to just nope out of this if you want.

01:48.880 --> 01:53.200
They write on the blog, they feel like they've tested this and they have LTS level stability

01:53.200 --> 01:59.640
with this rolling model. And so new IO scheduling, some hypervisor changes, networking changes,

01:59.640 --> 02:05.000
all of that container tweaks, all of that's going to be landing now on an ongoing basis,

02:05.000 --> 02:08.960
but in a tested way. And of course, I don't know about you, Joe, but I have a sense that

02:08.960 --> 02:13.760
Canonical is really making sure this works because they don't want to upset this demographic.

02:13.760 --> 02:17.680
Well, yeah, but if you're already using the hardware enablement stack, then you've got

02:17.680 --> 02:23.680
a 5.0 kernel. So this is definitely well tested. I'm talking to you with a 5.0 kernel on an

02:23.680 --> 02:25.480
1804 system right now.

02:25.480 --> 02:29.440
And it seems that Canonical has tested this at other cloud providers before they're moving

02:29.440 --> 02:34.880
it to AWS. But let's talk about for a moment the money aspect of all of this. This could

02:34.880 --> 02:39.920
be a big revenue generator for Canonical, keeping in mind that Amazon's likely to take

02:39.920 --> 02:46.640
a decent size cut. You're looking at somewhere around 23 cents an hour up to 33 cents or

02:46.640 --> 02:53.600
more depending on your rig for these pro images. That's per hour, but it's low enough. Your

02:53.600 --> 02:58.700
large financial institutions and your medical institutions and everything in between would

02:58.700 --> 03:05.220
happily pay 33 cents an hour on infrastructure systems to not have to rebuild that infrastructure

03:05.220 --> 03:13.200
for 10 years. And to get pre-checked compliance means that when they get audited, they can

03:13.200 --> 03:18.160
point to the steps they're taking to follow compliance requirements. It's this weird thing

03:18.160 --> 03:22.860
in compliance where part of being compliant is documenting that you are using services

03:22.860 --> 03:27.160
and infrastructure that are compliant. And so by these very images outline that part

03:27.160 --> 03:32.040
of their features are compliance with HIPAA and ISO and PCI, et cetera, et cetera. The

03:32.040 --> 03:37.080
companies can now include this in their documentation of compliance. It feeds the auditing monster

03:37.080 --> 03:39.400
and that alone is worth 33 cents an hour.

03:39.400 --> 03:43.240
I love the smell of an IPO in the morning.

03:43.240 --> 03:49.200
This is a really clever idea. And it would be interesting to see where these pro images

03:49.200 --> 03:55.760
go from here. Will they make a Ubuntu pro available for on-premises installations or

03:55.760 --> 04:01.080
for container installations or VMs on other providers? I mean, this pro thing could take

04:01.080 --> 04:03.400
off. It could be more than just AWS.

04:03.400 --> 04:08.200
They could go that way, yeah. It really feels like them leveling up, doesn't it? It feels

04:08.200 --> 04:13.920
like them becoming really serious. And we've seen this over the last year or so, just all

04:13.920 --> 04:19.600
of the little things they've done, starting with the 10 years of support. And now step

04:19.600 --> 04:25.560
by step, they're getting into a position where they are a serious enterprise player that

04:25.560 --> 04:30.560
is ready for an IPO. I don't want to spoil my predictions, but I'm getting it in now.

04:30.560 --> 04:33.000
I'm predicting an IPO in 2020.

04:33.000 --> 04:37.600
Are you carving that one out so that way I don't steal it? Amazing. That is incredible.

04:37.600 --> 04:44.760
I'm not sure that's allowed. There's something about this approach that feels uniquely Ubuntu,

04:44.760 --> 04:49.560
and that's really clever. And it's this low key, no big deal. Hey, you just want to use

04:49.560 --> 04:53.040
our stuff? That's fine. Hey, you want to build your entire infrastructure and your business

04:53.040 --> 04:57.780
around Ubuntu at the core? Hey, that's fine. Oh, yeah. Oh, yeah. We can provide support

04:57.780 --> 05:00.840
for that. Yeah. Oh, would you like to get a support contract? Yeah, absolutely. Would

05:00.840 --> 05:06.200
you like to turn on these pro images? It's just 33 cents more an hour. Go ahead. And

05:06.200 --> 05:10.580
it's this perfect spot that Ubuntu has lived in for a long time that made it the ideal

05:10.580 --> 05:16.220
candidate for laptops and VPS and containers. And I think it's what led to it just exploding

05:16.220 --> 05:22.080
in the cloud was you didn't have to use something that was completely different from the enterprise

05:22.080 --> 05:28.680
version or use a clone of it and kind of just support it yourself. You could use the actual

05:28.680 --> 05:33.140
Ubuntu, the actual long term release, and then you could upgrade your support options

05:33.140 --> 05:38.540
when you need it. And they're taking that to this approach on AWS, which is a massive

05:38.540 --> 05:42.520
marketplace where people are running systems that are critical to their business with this

05:42.520 --> 05:47.680
low key approach that serve them so well so far in the cloud. I think they nailed it.

05:47.680 --> 05:52.440
And I'd love to see what they would do if they took it to infrastructure. Because honestly,

05:52.440 --> 05:57.380
I could see businesses wanting to run something like this on their on premises, Ubuntu servers,

05:57.380 --> 06:01.400
you can get all these things individually, but wrapping it all up in one thing that you

06:01.400 --> 06:04.200
just turn on is that's the magic bullet.

06:04.200 --> 06:09.040
And you have to imagine that the systems architects and the CTOs who are approving this stuff

06:09.040 --> 06:14.960
have probably been using Ubuntu for 10 years or more on their home server and VPS is as

06:14.960 --> 06:19.680
they progressed in their career, because it was so accessible. It's just that whole give

06:19.680 --> 06:23.280
it away for free to get them hooked and then start charging the model.

06:23.280 --> 06:27.940
Yeah. And probably a lot of them are using different parts of this pro offering already

06:27.940 --> 06:32.480
if they're using Ubuntu in the enterprise, a lot of them could be already taking advantage

06:32.480 --> 06:36.600
of live patch, or some of these other features. So when they see it all bundled up, they already

06:36.600 --> 06:42.040
know what they're getting, and they are already consumers of it. And this just is all in one

06:42.040 --> 06:47.600
ready to go just charge a bit more per hour package. And there's no contract, if you no

06:47.600 --> 06:51.840
longer want it, you just turn it off, and it's done. And I think that kind of jump in

06:51.840 --> 06:57.880
jump out kind of approach is also really appealing. No big sales contract, no, you know, supporting

06:57.880 --> 07:02.240
it a 10 year payment thing. It's just you turn it on when you want it, you turn it off,

07:02.240 --> 07:08.160
and those services come and go. And it's pretty clever. And it's, it's very modern. Much like

07:08.160 --> 07:12.720
their approach to the Windows subsystem for Linux, it might make some people uncomfortable,

07:12.720 --> 07:16.280
but this new technology, they seem to be all in on Joe.

07:16.280 --> 07:20.600
The first clear sign of this was when they hired Hayden Barnes, who we've had on Linux

07:20.600 --> 07:26.040
Unplugged before. He does the penguin distro. They hired him to be part of the desktop team.

07:26.040 --> 07:30.520
And now they've got a job posting for another Ubuntu desktop software engineer, who is going

07:30.520 --> 07:36.480
to specifically focus on the WSL stuff. They want to own WSL, it seems.

07:36.480 --> 07:41.160
Well, they were the first distro to officially support WSL. So they did get an early start.

07:41.160 --> 07:46.680
And they write in their post, quote, we think WSL is a fantastic way for Windows user to

07:46.680 --> 07:51.320
experience Ubuntu on their desktop, easing their development process and allowing for

07:51.320 --> 07:57.800
local development and testing on Windows before deploying to Ubuntu in the cloud, end quote.

07:57.800 --> 08:00.800
IE, they see this as a clear play for developers.

08:00.800 --> 08:04.800
Yeah, use Ubuntu for your development work on your Windows workstation, and then deploy

08:04.800 --> 08:08.200
your applications to AWS with Ubuntu Pro.

08:08.200 --> 08:12.960
There's a cold practicality to this, because the reality is, this is what's going to be

08:12.960 --> 08:17.160
happening. You have so many enterprises out there with Windows on the desktop that are

08:17.160 --> 08:21.180
in a scenario where they have it managed with group policy and active directory and inventory

08:21.180 --> 08:26.120
management and patch management, all going back, by the way, to that compliance stuff.

08:26.120 --> 08:30.360
And they also now have to develop for their cloud systems, which are running Linux.

08:30.360 --> 08:33.640
So what are they going to do? Well, they're going to probably do in VMs, or they're going

08:33.640 --> 08:38.480
to SSH in all the time. And then along comes the subsystem for Linux. Well, one way Ubuntu

08:38.480 --> 08:44.160
keeps that lead in the cloud is by recognizing this opportunity early and jumping on it before

08:44.160 --> 08:45.880
somebody else does.

08:45.880 --> 08:50.800
Based on my semi casual conversations with various canonical employees, I suspect they

08:50.800 --> 08:57.320
see Windows 10's Windows subsystem for Linux as just yet another platform that Ubuntu can

08:57.320 --> 09:04.480
run on, just like other VMs and containers or bare metal boxes, or Amazon instances.

09:04.480 --> 09:10.840
It's yet another platform for the Ubuntu system. And it's not really about the fact that it's

09:10.840 --> 09:16.440
running on Windows, it's just where the developers are going to be. It's a recognition of a market

09:16.440 --> 09:17.440
fact.

09:17.440 --> 09:23.560
It's clearly part of a multi year strategy from Canonical that thus far seems to be working

09:23.560 --> 09:25.320
pretty well to me.

09:25.320 --> 09:30.520
Well speaking of multi year strategies that seem to be successful, Amazon is executing

09:30.520 --> 09:36.600
on their multi year strategy to troll me with the name of their ARM processors by going

09:36.600 --> 09:41.920
all the way to 64 cores and making them insanely fast. Seems like a lot of work just to get

09:41.920 --> 09:43.400
me upset over the name Graviton.

09:43.400 --> 09:46.560
Why are you upset over the name Graviton?

09:46.560 --> 09:52.720
Because it's like a Star Trek thing. I'll put a link in the show notes. It's like all

09:52.720 --> 09:58.360
of throughout Star Trek. It's Graviton waves and Graviton beams and Graviton particles.

09:58.360 --> 10:02.220
It's so funny that Amazon is, I mean there must be some Star Trek fan in there, but these

10:02.220 --> 10:08.820
things are legitimately incredible. And this might be a bigger deal than anything Apple's

10:08.820 --> 10:12.440
done with the CPUs and the iPhone. As much respect as I have for their work.

10:12.440 --> 10:17.840
Yeah, this is the second generation of this Graviton system on a chip. The first one was

10:17.840 --> 10:23.760
kind of an experiment, whereas this time they're serious. This is seven nanometer with 30 billion

10:23.760 --> 10:29.400
transistors and they're claiming that it's going to outperform x86 in terms of price

10:29.400 --> 10:30.600
to performance.

10:30.600 --> 10:34.480
So that's really key. And that's kind of why I said this could be a bigger deal than what

10:34.480 --> 10:39.160
Apple has done with all respect because what they have pulled off with the A series of

10:39.160 --> 10:45.960
CPUs is truly tremendous. But what Amazon is doing here is astronomical improvements

10:45.960 --> 10:53.840
that will be in production under load 24-7 in enterprise environments like that. That

10:53.840 --> 10:58.000
is a really big deal. So here's some other stats that are just nuts about these things.

10:58.000 --> 11:04.140
Each core has a megabyte of cache, 64 cores in total supporting two terabytes of bandwidth,

11:04.140 --> 11:11.320
as well as an additional 32 megabyte level three cache per core, seven times faster than

11:11.320 --> 11:12.840
their previous instances.

11:12.840 --> 11:19.560
But the real numbers are impressive when you're looking at a comparative Amazon instance, say

11:19.560 --> 11:26.920
something that's based around the Xeon Platinum 8175 processor, which clocks up to 2.5 gigahertz.

11:26.920 --> 11:36.480
This thing in many jobs, HTTPS load balancing, x264 encoding, the spec CPU benchmark, mem

11:36.480 --> 11:43.160
cache tests, it is substantially faster, like in the 40 to 50% range faster. Amazon describes

11:43.160 --> 11:49.800
that these new 6G instances are able to offer 40% higher performance than the existing x86

11:49.800 --> 11:53.640
fifth generation platforms, which consumers would have traditionally been buying.

11:53.640 --> 12:00.200
Now, could you build a faster x86 system? Yes. But when you're buying into the AWS infrastructure

12:00.200 --> 12:07.240
and you're looking at price and cost to hourly run, 40% difference is a huge thing in that

12:07.240 --> 12:13.280
ecosystem. It means a drastic cost savings for the company and for any customer that

12:13.280 --> 12:20.280
switches to these instances. This is a watershed moment for ARM in production. And to be honest,

12:20.280 --> 12:24.040
64 cores is what it took to get it there. Like I think we all expected to really make

12:24.040 --> 12:28.160
ARM competitive, you're gonna have to up that core count, and they've done it. They are

12:28.160 --> 12:32.760
custom building this stuff. I think it's incredible. It also creeps me out.

12:32.760 --> 12:35.760
Why does it creep you out? Well, because now you've got Apple building

12:35.760 --> 12:39.560
their own custom silicon, you've got Google building their own custom silicon, you've

12:39.560 --> 12:45.840
got Amazon building their own, etc, etc. All of these near trillion dollar tech giant companies

12:45.840 --> 12:50.920
all have their own custom CPUs, which are not necessarily compatible with each other.

12:50.920 --> 12:54.720
Well, that's true. But Amazon are still using Intel and AMD.

12:54.720 --> 13:00.980
Yeah, I mean, x86 still remains the bastion of a quote unquote, open platform, not open

13:00.980 --> 13:07.720
in terms of open source and liberties and blobs. But open in the sense that x86 is an

13:07.720 --> 13:14.400
architecture that your code would write on on a DigitalOcean box or an Amazon x86 instance

13:14.400 --> 13:19.820
or an Azure x86 instance or an x86 box in your closet could all run that code. We are

13:19.820 --> 13:25.500
now moving into a world where the largest, most influential tech companies are creating

13:25.500 --> 13:31.600
their own CPUs for their own custom jobs. If we go down the world of ARM, and we start

13:31.600 --> 13:36.480
replacing all x86 laptops and desktops, you know, just as ARM becomes more and more competitive,

13:36.480 --> 13:41.500
which kind of just seems to be the way people want things to go, I worry that we will enter

13:41.500 --> 13:46.540
into a world where it's so fragmented compared to what we are used to today. It just seems

13:46.540 --> 13:51.840
like not a great direction, like not a lesson learned kind of situation.

13:51.840 --> 13:55.920
Well, I think you're right in terms of the images and operating systems that are going

13:55.920 --> 14:02.600
to have to be bespoke to run on each platform. But I think the applications will be just

14:02.600 --> 14:07.360
ARM 64, right? So you're not going to have huge incompatibility for the users.

14:07.360 --> 14:12.040
No, it's going to be probably fine on the cloud providers. They'll just work all that

14:12.040 --> 14:15.760
out. It'll be an implementation detail. You won't even have to worry if it's some sort

14:15.760 --> 14:22.080
of custom built Azure CPU that is super great at doing your specific task, because you'll

14:22.080 --> 14:27.680
just write to their API. And that's the end of the day. That's all that matters. But I

14:27.680 --> 14:33.040
wonder about the market that isn't part of the big cloud. One of the one of like the

14:33.040 --> 14:37.680
small providers or somebody who just wants to build their own instances, or how will

14:37.680 --> 14:41.440
open source projects deal with this? Like, are they going to make versions for all these

14:41.440 --> 14:47.320
different ARM CPUs? Because undoubtedly, these Amazon A6 instances are going to be big. This

14:47.320 --> 14:52.980
is a huge hit. You get faster system for less cost. All right. So the open source world's

14:52.980 --> 14:56.320
going to have to deal with this. I mean, I don't know. Maybe I'm wrong.

14:56.320 --> 15:00.840
Well, companies like Red Hat and Canonical will have no problem dealing with it. But

15:00.840 --> 15:05.120
maybe you're right, the smaller distros are going to lose out here. I hadn't thought about

15:05.120 --> 15:09.360
that. I thought about the positives of it for a change. And that is that it is going

15:09.360 --> 15:16.200
to force Intel and AMD to innovate faster and better to compete.

15:16.200 --> 15:22.120
I hope they can. I hope they can. I feel a lot of momentum moving towards ARM. You know,

15:22.120 --> 15:27.220
like people are waiting for ARM MacBooks, people are waiting for ARM laptops to take

15:27.220 --> 15:32.720
over the world. People are going to System76 and saying, build us an ARM laptop. And I'm

15:32.720 --> 15:38.720
sitting here going, maybe we could just make x86 better. Can we all just get on AMD's platform

15:38.720 --> 15:44.400
for a while and just ride that? Because I love the idea that if I download an ISO that's

15:44.400 --> 15:49.760
AMD 64, it's going to run on any of my CPUs. Maybe I'll have weird Wi Fi driver issues

15:49.760 --> 15:55.680
here or there. But the frickin CPU and motherboard, at least that works. Maybe we won't get there.

15:55.680 --> 15:59.840
Maybe it won't matter. But looking at this, I think you're seeing remarkable, remarkable

15:59.840 --> 16:06.160
accomplishments both from Apple, Amazon, Google, and Microsoft. But you're not seeing it really

16:06.160 --> 16:09.480
benefit anybody else. Like it's not, you're not seeing products out in the world except

16:09.480 --> 16:10.480
for their own products.

16:10.480 --> 16:16.440
There's been quite a lot going on in the world of Mozilla this week. Firstly, they've released

16:16.440 --> 16:21.680
Firefox 71, which doesn't have a huge number of new features. It's got one pretty good

16:21.680 --> 16:27.240
one for Windows users. But unfortunately, we don't get that. It's criminal. It's criminal.

16:27.240 --> 16:31.760
71 Joe, I remember when version one came out. I remember when the better it took forever

16:31.760 --> 16:36.560
to just get to conversion one. Well, yeah, picture in picture video comes to Firefox

16:36.560 --> 16:41.000
for Windows users. Now, picture in picture video sounds like one of those features. That's

16:41.000 --> 16:45.200
a cute little toy you'd never use. And that's because you're completely wrong. It is the

16:45.200 --> 16:52.520
best. I am now a firm, firm user, a firm, firm user, Joe, like, like not even like a

16:52.520 --> 16:57.200
soft user, but like a firm user of picture in picture mode. It's so great. You know,

16:57.200 --> 17:00.600
some YouTubers rambling on, you just pop it up in a picture in picture mode and go about

17:00.600 --> 17:06.000
your day. It just goes into the corner. God, I love it so much. It's one of the actual

17:06.000 --> 17:10.760
reasons why one, one of a handful of reasons I've quit using Firefox again, which I totally

17:10.760 --> 17:14.560
blame on you. But it is what kept me off Firefox.

17:14.560 --> 17:17.720
You can do it with extensions and stuff, but it would be nice if we had it natively.

17:17.720 --> 17:21.240
You can do with extensions. Not quite as nice though, Joe. It's not as nice.

17:21.240 --> 17:26.880
Yeah, they've also improved lock wise, the integrated password manager, and it's just

17:26.880 --> 17:30.740
kind of a few little improvements here and there. And this is really because they're

17:30.740 --> 17:35.160
moving to a much shorter release cadence. So I think we're going to have fewer features

17:35.160 --> 17:36.680
per release going forward.

17:36.680 --> 17:41.960
We'll put a link in the notes. It kind of shows Firefox 71 Linux performance isn't looking

17:41.960 --> 17:47.600
all that great. Of course, compared up now to Brave and Vivaldi, it really isn't doing

17:47.600 --> 17:55.160
very well. He benchmarks Chrome 78, Michael Arbel does, against Firefox 71. And on Linux,

17:55.160 --> 18:03.380
Chrome 78 kind of dominates all the benchmarks, except for like two or three by my count.

18:03.380 --> 18:08.760
So it's not looking super great for performance on Linux. But the story has improved overall

18:08.760 --> 18:14.160
in the aggregate. And the overall feature set of Firefox has improved without a massive

18:14.160 --> 18:19.180
slowdown. So that's kind of a net win too. And new services are starting to roll out

18:19.180 --> 18:20.360
in beta now as well.

18:20.360 --> 18:24.960
Yeah, you can finally start using Firefox Private Network, which is their VPN service

18:24.960 --> 18:30.560
that we've been waiting for. And it's $4.99 per month, but only in the US. So I wasn't

18:30.560 --> 18:35.400
able to try this out, unfortunately. It's unfortunately only available for Windows 10

18:35.400 --> 18:42.480
at this stage as well. And it is cheaper than private internet access, which is about $7

18:42.480 --> 18:47.160
or $8 a month, I think. So I think realistically, once it's generally available, it's probably

18:47.160 --> 18:49.760
going to go up to somewhere around that kind of cost.

18:49.760 --> 18:54.680
Right. And then there's the browser extension, which is free and available to those in the

18:54.680 --> 18:58.760
US that just want to protect just their browser traffic. If you want to try this out, you'll

18:58.760 --> 19:03.400
have to use a link in the show notes to join the waiting list. Because as the queue grows,

19:03.400 --> 19:05.720
they're putting a list up. And then when they get to that list, they're opening it back

19:05.720 --> 19:07.060
up again right now.

19:07.060 --> 19:11.200
It's worth mentioning with the free extension that it's only the browser traffic. And you

19:11.200 --> 19:14.080
only get 12 one hour passes per month.

19:14.080 --> 19:17.880
Yes, that's the thing that's a little different. I'm glad you mentioned that is the 12 hour

19:17.880 --> 19:24.080
passes per month. The browser only being protected. I think there's like a handful of VPN services

19:24.080 --> 19:30.280
that do that now. It's not my preferred way to go. But I bet you that covers a lot of

19:30.280 --> 19:35.840
use cases for a lot of people, webmail, banking, social, a lot of people just do it all in

19:35.840 --> 19:41.080
the browser. So it's a really easy low hanging fruit, but it's not a complete solution.

19:41.080 --> 19:46.080
But at $4.99 per month, that's the same price as spending up your own DigitalOcean droplet

19:46.080 --> 19:52.520
and running a WireGuard instance. I suppose it's a lot easier to just sign up for Firefox's

19:52.520 --> 19:53.520
one.

19:53.520 --> 19:59.080
Yeah, that's just it. If that suggestion sounds like a ridiculous proposition, then you're

19:59.080 --> 20:03.960
probably a decent customer for this browser extension. If you're like myself, I've already

20:03.960 --> 20:08.100
got a VPN set up. I've already solved this problem. So I'm not the right target audience

20:08.100 --> 20:13.560
for this. However, I think this is a net positive for Firefox users. Might as well get something

20:13.560 --> 20:18.400
that is Mozilla branded. So you know, if you're already using Mozilla Firefox, you hear about

20:18.400 --> 20:23.360
VPNs, most users, they don't even really fully understand what it is. You can tell them it's

20:23.360 --> 20:27.840
a tunnel through the internet. Oh, okay. But if they even stop for half a second, well,

20:27.840 --> 20:31.480
what the hell does that mean? What does a tunnel through the internet mean? What is

20:31.480 --> 20:37.380
that, right? So they need something that is safe, that's brand recognizable, and can be

20:37.380 --> 20:43.640
built right in and just turned on and turned off. So pretty likely, this is going to scratch

20:43.640 --> 20:47.160
that itch for a lot of end users. I don't think you and I are it though.

20:47.160 --> 20:52.040
I think that's a nice idea. But isn't the reality that everyone else is using Chrome

20:52.040 --> 20:55.560
and it's only really people who care about open source are still using Firefox?

20:55.560 --> 21:00.060
I think their strategy here is to change that narrative. That narrative needs to go away

21:00.060 --> 21:04.360
and the new narrative needs to be yeah, Firefox, Chrome's great. Isn't the only people like

21:04.360 --> 21:08.000
Firefox are people that are like really worried about their privacy? So if they could shift

21:08.000 --> 21:12.360
that to just people that are worried about their privacy, that's a huge market. And that's

21:12.360 --> 21:17.160
something people are going to be railing on Google, Apple, Microsoft, other tech people,

21:17.160 --> 21:22.600
companies, whatever are going to be railing on Google on hitting on that point. And so

21:22.600 --> 21:28.120
Mozilla gets to just sit back and enjoy the fruits of everyone else's labor while positioning

21:28.120 --> 21:35.160
Firefox as this privacy conscious, web defending browser, and just sit back and wait for people

21:35.160 --> 21:39.120
to look for an alternative. I think that's got to be the strategy here. So that's why

21:39.120 --> 21:45.200
things like lockwise and Firefox protect that they really kind of get these things entrenched

21:45.200 --> 21:48.720
in your mind as the brand is trying to really take care of you.

21:48.720 --> 21:53.800
Yeah, which is probably why when a security researcher pointed out that Avast and AVG

21:53.800 --> 21:59.600
extensions were effectively acting as spyware, they removed them from the Firefox store.

21:59.600 --> 22:04.960
Yeah, that was a big deal. I think Opera did the same. So when these extensions were installed,

22:04.960 --> 22:10.280
they would track the URL and title of every page you visit, how you got to that page,

22:10.280 --> 22:15.000
along with per user identifiable details about your operating system and browser version

22:15.000 --> 22:22.480
plus other metadata. And it would transmit all of that info back to Avast back end servers.

22:22.480 --> 22:25.880
The researcher Joe mentioned had been blogging about this for a little bit finally raised

22:25.880 --> 22:30.800
attention about this and really made a great case with visual screenshots why it was just

22:30.800 --> 22:35.880
way more information than Avast needed. Avast did respond and say that they had to collect

22:35.880 --> 22:41.960
all this data to detect dodgy and fraudulent websites to protect the users. But it's pretty

22:41.960 --> 22:47.200
easy to argue that they went way too far and dipped into the spyware category.

22:47.200 --> 22:50.640
It's interesting to note that if you have them already installed, though, they're going

22:50.640 --> 22:54.040
to continue to work. They're not going to be disabled automatically.

22:54.040 --> 22:59.640
Right. And what concerns me about this is as more people have moved to Linux, they have

22:59.640 --> 23:07.520
brought with them this concern about viruses and malware. I think every week I see a question

23:07.520 --> 23:11.200
come in asking what antivirus people should install on Linux. They're not even asking

23:11.200 --> 23:18.360
if they should. They want to know which antivirus to install. And I could see a portion of those

23:18.360 --> 23:23.440
users going out installing extensions like this. I really wonder if people looking for

23:23.440 --> 23:27.960
antivirus solutions isn't just the natural result of being trained from day one of using

23:27.960 --> 23:32.440
a desktop computer on Windows that you need to be careful and you need to use antivirus.

23:32.440 --> 23:36.640
And so they've just associated that paradigm with desktop computing. So these kinds of

23:36.640 --> 23:40.080
scams end up looping in more people than you'd expect.

23:40.080 --> 23:44.760
So hopefully people will become aware of this and disable those extensions themselves, but

23:44.760 --> 23:50.520
probably not everyone. But one last story from Mozilla is their release of DeepSpeech

23:50.520 --> 23:57.760
0.6. This is their speech recognition system, which has become incredibly fast to the point

23:57.760 --> 24:02.760
where it can run on a single core of a Raspberry Pi 4, which I imagine piqued your interest.

24:02.760 --> 24:09.720
Yeah, it did. Reading through this, it's astonishing how far this has come. Remarkable. When they

24:09.720 --> 24:14.200
launched Common Voice and also DeepSpeech, I thought to myself, well, this will be a

24:14.200 --> 24:21.440
10 year project. It'll be cute when they finally get to where Nuance and Google are today.

24:21.440 --> 24:27.840
Why was I wrong? Their new streaming decoder has seen remarkable performance improvements,

24:27.840 --> 24:33.920
consistently lower latency and memory utilization. It's to the point where a Raspberry Pi single

24:33.920 --> 24:41.120
core can do it, or on an efficient, fast desktop system, it can do it in faster than real time,

24:41.120 --> 24:46.240
which is incredible. They've gotten this thing 73% faster in that regard. They also swapped

24:46.240 --> 24:51.160
out some of the TensorFlow stuff for TensorFlow Lite components, and they brought the sizes

24:51.160 --> 24:57.800
way, way down from like 98 megabytes to 3 megabytes. And their entire model size for

24:57.800 --> 25:07.240
the English language went from 188 megabytes to 47 megabytes. It now uses 22 times less

25:07.240 --> 25:15.780
memory and starts up over 500 times faster. And they've added support for.NET and Windows

25:15.780 --> 25:23.600
along with Python, JavaScript and C bindings..6 is the release I was expecting five years

25:23.600 --> 25:24.600
from now.

25:24.600 --> 25:29.560
It is very impressive. But can you imagine if this had been in this state when Mycroft

25:29.560 --> 25:34.720
first came around, it could have potentially actually succeeded. The possibilities of on

25:34.720 --> 25:39.800
premises implementations of this technology are really mind boggling when you think about

25:39.800 --> 25:44.720
how enterprises could use this to have their own private system or somebody like myself,

25:44.720 --> 25:50.760
who just simply wants fully offline speech recognition with my automation systems. No

25:50.760 --> 25:56.480
internet connectivity required, full voice transcription understanding of what I'm saying.

25:56.480 --> 26:01.880
There's some projects that are getting really close, but nobody's gotten this close yet.

26:01.880 --> 26:06.800
And I could see things like Home Assistant integrating deep speech and other components

26:06.800 --> 26:13.960
of common voice and bringing complete private voice control to automations in workplaces

26:13.960 --> 26:21.240
and in home. Not to mention all of the accessibility benefits this could bring, how things like

26:21.240 --> 26:24.940
LibreOffice could take advantage of this for transcription. They have an example of a medical

26:24.940 --> 26:30.960
professional who's working with a system that has been tuned for health lingo and he's dictating

26:30.960 --> 26:37.240
into LibreOffice his medical notes and it recognizes the words and just does the transcription

26:37.240 --> 26:38.240
for him.

26:38.240 --> 26:43.240
This is a huge market for Dragon, naturally speaking. They have products that are particularly

26:43.240 --> 26:47.120
designed around the medical industry and this could be something that LibreOffice just does

26:47.120 --> 26:48.120
one day.

26:48.120 --> 26:54.240
It feels like a serious step closer to project offline, off-grid, whatever your dream is.

26:54.240 --> 26:59.440
Project off-grid, Joe. Don't mess up the branding. Geez. It really is though. You're right. Yeah.

26:59.440 --> 27:03.320
That's my goal. That's something I've been documenting in our self-hosted podcast is

27:03.320 --> 27:09.240
I want a completely offline system, like an internet in a box in my RV and I don't have

27:09.240 --> 27:12.800
any kind of speech recognition that works without internet connectivity. And I just

27:12.800 --> 27:16.040
thought, well, years from now, years from now, I'll have something.

27:16.040 --> 27:19.760
Wouldn't it be good if it was all open source as well, like this is?

27:19.760 --> 27:24.600
That's really neat. This could be a great contribution. I mean, faster than real time.

27:24.600 --> 27:29.200
That's mind blowing. And you can still contribute to Common Voice if you want to help them build

27:29.200 --> 27:33.640
their modeling. That's the other really cool thing about this is they didn't have to listen

27:33.640 --> 27:38.860
to hundreds of thousands of Google voice recordings. They didn't have to listen to years worth

27:38.860 --> 27:46.040
of YouTube, all of your voice chats, all of the commands you speak into a smart speaker.

27:46.040 --> 27:50.520
They were able to get this working using open source technology and people voluntarily contributing

27:50.520 --> 27:55.960
to Common Voice and buying data sets that are freely available and open or at least

27:55.960 --> 28:00.120
available. And I think that's also really important to recognize because while some

28:00.120 --> 28:05.040
others in the industry may be further ahead, they've done that through surveillance where

28:05.040 --> 28:08.080
Mozilla has not here. And I think that's a huge accomplishment as well.

28:08.080 --> 28:12.480
Yeah, I remember at the time I contributed my voice and also did some of the verification

28:12.480 --> 28:17.200
of people who had done theirs. And it only took me a few minutes. But if hundreds of

28:17.200 --> 28:20.400
thousands of people do that, then this is the result of it.

28:20.400 --> 28:24.880
Yep, I did the same. And I think people should consider just going to Project Common Voice

28:24.880 --> 28:29.320
and and going through the process only takes a few minutes. If you have a decent mic, you

28:29.320 --> 28:30.800
could probably do it pretty quick.

28:30.800 --> 28:35.120
And even if you don't, that's one thing that they were keen to have is people just on phone

28:35.120 --> 28:39.000
mics and laptop mics with background noise, because that's what you need to train the

28:39.000 --> 28:40.000
algorithms.

28:40.000 --> 28:43.800
Yep, you got to cover all the edge cases. And they're thinking about that. So deep speech

28:43.800 --> 28:48.880
has really come a long way. And it's great to see version 0.6. Put that on the list of

28:48.880 --> 28:53.440
one of my favorite projects this year that just went from zero to hero in like no time

28:53.440 --> 28:57.640
and in such a complex thing to machine learning is real, Joe.

28:57.640 --> 29:01.760
Yeah, it's good to see them spending some of their money on something that's going to

29:01.760 --> 29:02.760
benefit so many people.

29:02.760 --> 29:06.640
Yeah, really, it's one of those projects that maybe Mozilla is best suited for. Well, whatever

29:06.640 --> 29:10.680
happens, we'll let you know next time there's a big development. Just go to linuxactionnews.com

29:10.680 --> 29:12.880
slash subscribe for all the ways to get new episodes.

29:12.880 --> 29:17.360
And you can go to linuxactionnews.com slash contact for ways to get in touch with us.

29:17.360 --> 29:21.440
We'll be back next week with our weekly take on the latest Linux and open source news.

29:21.440 --> 29:23.440
I'm at Chris LAS.

29:23.440 --> 29:25.080
I'm at Joe Rissington.

29:25.080 --> 29:27.880
Thank you for joining us. And we will see you next week.

29:27.880 --> 29:46.200
Take care, bye-bye.


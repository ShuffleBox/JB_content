Hello and welcome to Linux Action News, episode 204, recorded on August 28th, 2021.
I'm Chris.
And I'm Wes.
Hello, Wes from Albuquerque, New Mexico.
Let's do the news.
We start this week with the Linux kernel.
With releases becoming more and more anticipated in recent years, 5.14 has seen a considerable
amount of attention, in part because much of the focus this time around has been on
security and performance improvements.
Yeah, you're right about that, Wes, there does seem to be more hype building with each
release.
And the kernel team has been pretty good about releasing every nine to 10 weeks.
But I feel like 5.14 is getting a little extra attention for a good reason because this release
cycle features that new core scheduling functionality that's been in the works for the past few
years by multiple vendors with the aim of securing symmetric multithreaded systems and
help mitigate processor level vulnerabilities like Spectre and Meltdown.
Now just to put this in perspective, this feature alone, and there's a bunch in 5.14,
but this feature alone, the core scheduling functionality, is enough that it caught the
attention of Sean Michael Kerner over at TechCrunch who wrote up a rather lengthy article for
their general tech audience about a new Linux kernel release.
Unexpected indeed, but I can understand it.
This one feature alone is kind of a big deal.
That thousand foot view is that the new functionality of core scheduling is trying to limit things
so that an untrusted task can't run on the same CPU core as a trusted task.
And that kind of thing is rather important if you're a large public cloud who wants to
keep hyperthreading enabled so you can sell all those virtual CPUs.
Another area of security innovation in Linux 5.14 is a feature that's been in development
for over a year and a half and that should help protect system memory in a far better
way than before.
Now you may already know that attacks against Linux, and other operating systems, often
target memory as a primary attack surface to exploit.
But with this new kernel, there's now a new capability known as MemFD Secret, which will
enable an application running on a Linux system to create a memory range that is inaccessible
to anyone else, I mean, we mean anyone here, including the kernel.
And finally, after what seems like years, Dell's hardware privacy laptop features, which
I think is like some setting for the screen or something, is finally in there after what
seems like a decade of them developing it.
So if you have one of those Dell laptops or you're thinking about one now, you're going
to have mainline kernel support for that as well.
There's just a ton of stuff in this one.
We'll have a link with all of the details in the show notes, of course.
Now we just have to wait back and see when this ships in a Linux distro near us.
Fedora and OpenSUSE have said they're already making plans.
The notable and loved QEMU project had a new release this week.
QEMU, if you don't know, is an open source machine emulator and virtualizer.
X86 and 6.1 landed and it sees a lot of new and improved work for emulated device support.
But what we love to see is specific work was put into PowerPC, including extending the
number of CPU cores and RISC-V.
And of course, like every great release, there is new features for X86 that landed.
So don't worry, X86 is still getting tons of support and they got to clean up, you know.
Every release, they got to do some cleanup.
This time, they got rid of some old CPU targets like the Moxie CPU.
Never heard of it.
Sorry.
Sorry for you Moxie users.
And Unicore32, which when I first read, I thought was Unicorn32 and I actually felt
bad.
But then I saw it was just Unicore32.
That sounds lame.
So of course, they removed support for that.
And as always, every release sees some bug fixes.
One of my favorite recent projects has another great update.
CompWire 0.3.34 is out and maintains compatibility with the previous 0.3.x releases.
I think the notable highlights for this release has got to include Bluetooth battery status
support for headset profiles, including support for Apple extensions.
Good news for you AirPod users, you can now get battery status info on your Linux desktop.
They've also added fast stream codec support amongst a whole bunch of other new features
and bug fixes.
And just a general note of perhaps some things to come in the not too distant future, CodeWeavers,
the longtime supporters and developers of wine have another job opening for a quote,
general wine developer, who will obviously work on Proton and wine.
And we wanted to mention this because when CodeWeavers makes a hire like this, well,
the community tends to see big results upstream.
Yeah, no kidding.
I mean, Valve hired CodeWeavers to build the wine compatibility layer into the Steam client
for Linux, which is what we now call Proton, and that has had a huge effect on Linux gaming.
And really, this is how the hard work in free software often gets done.
Now if you think this might be a job for you, you'll need strong C skills, familiarity with
developing on Linux, and of course, zero exposure to that evil Microsoft code base.
If that sounds right, consider applying.
CodeWeavers says the position can be done remotely, or if you'd like, join them in their
Minnesota office.
We recently talked about Microsoft, Google and others partnering up with the Linux Foundation
to bring eBPF, the new and very exciting Linux kernel technology to other platforms.
So this week, the first eBPF Summit kicked off.
All right.
So there is no better way but to start off eBPF Summit and with fantastic news.
Last week, we announced the formation of the eBPF Foundation.
Facebook, Google, iSurveillance, Microsoft and Netflix, we've all come together as founding
members to create the eBPF Foundation.
It is part of the Linux Foundation and will enable even better collaboration between the
various eBPF projects and also ensure eBPF itself can grow and expand to additional platforms.
An example of this is the expansion to the Windows kernel, which we'll hear more about
in one of the talks later on.
Commercial interest in eBPF, often just called BPF, seems extremely high.
Corporations and open source projects from across the entire spectrum of the industry
attended this summit, from the Rust community to giant corporations like Apple.
They're all in.
Before we do that, however, I'd like to discuss why the Linux kernel team at Apple loves BPF.
There are inherent risks with running kernel modules that run third party code in the Linux
kernel.
Kernel modules have full access to all kernel data structures and kernel functions.
BPF programs, on the other hand, are limited to the BPF virtual machine, BPF helper functions,
and are verified by the in-kernel BPF verifier.
This makes them easier to audit and greatly reduces the impact of bugs and vulnerabilities.
We also love that BPF programs reduce our usage of heavy, out-of-tree kernel bypass
frameworks, large modules, and modules that are running third party code that we have
to audit.
We also love that we can reduce these modules into small BPF programs that are dedicated
to a certain type of processing, such as XP programs for packet processing, probes and
trace points for event tracing, and socket filters for filtering network traffic.
Watching a lot of the introductions of these talks, the excitement around the technology
is palatable.
I mean, you can just like, it's almost, if we had smell-o-vision, you could smell the
excitement coming off of them.
The presenters are just totally stoked about what they can do with BPF and the troubles
it's going to save them.
However, I can't help but watch this and feel like what we are seeing here is institutionalized
harvesting of innovation in Linux and open source.
Because other, you know, other projects have done BPF before too, but it seems like industrialized
harvesting of innovation that is then funneled through the Linux Foundation and their paying
partners into commercial products.
And I worry that this is being done now at a scale that is beyond anything the original
vision of free software ever considered.
Yeah, I'm kind of of two minds on this.
On one side, it seems like this is the natural course of, if eBPF shows itself to be a very
useful technology in a whole range of domains, it makes sense that if it's open source and
people can use it or learn from it or take it as an example, of course they're going
to do that.
But what kind of rubs me the wrong way is we don't get to do this in the Linux community
from, say, the Windows kernel.
They've got some neat ideas there too, but we don't get to take from their basket.
You might've just nailed it.
What was bothering me about this?
Because I recognize and I totally appreciate, you know, it's free software and if they comply
with the license, they can do what they want with it.
That's the name of the game, that's the deal, et cetera, et cetera.
But you're right, there's an unbalanced unfairness to it.
And there's also sort of this legitimacy that the Linux Foundation gives to the process
by being such a generous donor to the Linux Foundation.
You know, they get these perks that we don't really talk about very often.
But it seems like honestly, if just eBPF came over to the Windows kernel and that was it,
and Microsoft does give a talk on that, that we'll have linked in the show notes.
If that was it, that would be worth the thousands of dollars of membership they've paid.
Just that one set of features alone added to their operating system make any penny,
any dime they've ever spent with the Linux Foundation totally valuable and worth it.
And I just see this as kind of like an industrialized farming of free software innovations.
And I worry that if we're constantly robbing Peter to pay Paul, eventually the open source
ecosystem that's generating all these innovations will suffer.
And it just doesn't seem sustainable.
And I know it's not as bad as a picture as I'm painting, but there's something about
watching this happen with eBPF where we've watched this project from birth to now this
stage that is rubbing me the wrong way.
And I think you got pretty close to nailing what it is.
First containers, now eBPF, something tells me this won't be the last innovative Linux
kernel feature that jumps ship.
Linode.com slash LAN.
Go there to get $100 in 60 day credit on a new account and you go there to support the
show.
This show is made possible by you taking advantage of our sponsors offered.
Linode is one that we enthusiastically endorse because we use it.
We've been using Linode for two and a half years and really just about everything we've
built has just gone right on Linode and that's because they got the mix right.
Good performance, 11 data centers around the world, a straightforward dashboard, a powerful
DNS manager, and you know, of course, like some really fast systems to choose from.
They have dedicated CPU systems with AMD epic processors, crazy fast native SSDs, 40 gigabit
connections coming into them hypervisors.
I mean, it's fast.
And then we also use their S3 object storage a whole bunch for all kinds of different applications.
I had a chance to work side by side with some from the Linode team and I realized not that
I was totally eye spying their screens or anything, but I totally noticed that they
were using next cloud on Linode and they I asked them about it and they said yes, they
are also using their S3 compatible object storage.
That is such a killer combo and I can say that it works next cloud on Linode using their
object storage as the back end storage mechanism for next cloud.
It's fireman.
We've been using it for just over a year now and it's rocking and we use it every day in
production.
We're transferring files around.
Man, have we been using the crap out of it on this road trip.
So they've just got so many great features and so many great arrangements of software
and hardware.
You can do one click deployments in their marketplace and get an entire setup going
in just a few minutes.
And if you just need something like a five dollar a month rig because maybe you just
want to do like an SSH jump post and a sync thing box.
I use a five dollar machine for that.
It's great.
Honestly, their pricing is just fantastic, 30 to 50 percent cheaper than other major
cloud providers.
There's really a lot to check out and you'll see that Linode's community support runs deep
when you go over there and you check out their social media.
So I just like you to go take it all in.
Go take advantage of that one hundred dollars, 60 day credit on your new account and you
support the show.
You keep Linux action news going.
So you go to linode.com slash LAN, get one hundred dollars and 60 day credit and support
the show.
That's linode.com slash LAN.
Linux dot ting dot com.
If you're sick of overpaying for cell service and who wouldn't be, go see how much you could
save and then take twenty five bucks off of that and you support this year's show.
Linux dot ting dot com.
Here's the deal.
Ting is an MVNO or a mobile virtual network operator and I have been a customer since
2013.
So I know to my core what that means is I get the same networks as the nation's coast
to coast big networks.
I get all access to that, but I pay Ting's rates.
I pay Ting's prices because Ting's not the company that's digging the holes and putting
the towers in.
They are a mobile virtual network operator.
You get the same coast to coast coverage as you would, but you just pay less for it.
That's why I've stuck with them and they've been flexible with my various usage patterns
when I'm on the road from time to time or when I'm at home and when I'm at home my Ting
bills are so ridiculously low.
I love that about Ting.
I have to say they have more plans now too than when I first signed up.
Like they have plans now that just meet everybody's needs.
I think their new set 12 plan is a real winner.
You get 12 gigabytes of data with unlimited talk and text for 35 bucks a month and you
can put other lines on there for just super low rates.
Ting really has this figured out.
A good family plan is hard to find and you can go find one that will address your family's
need with their flex plans.
That's a huge deal because you get access to the big nationwide carriers including 5G
at Ting's rates.
So if you use two gigs or 20 gigs or maybe a lot more there's going to be a Ting plan
that will work for you and it's really simple to switch to Ting.
Pretty much any phone is going to work because they do support so many networks.
So get started by going to linux.ting.com.
Check out your current phone.
They've got a really easy web page you put in your information for your phone and it
checks the compatibility.
You're pretty much done in minutes.
They'll send you a SIM card once that arrives you pop that in you do a couple more things
online and you're good to go because of course they've got a great dashboard to manage all
of it.
That's how we roll around here.
Cutting your phone bill has never been easier with Ting's new plans.
So go check them out at linux.ting.com.
It's the next generation of Ting mobile and you can get 25 bucks off that at linux.ting.com.
Alyssa Rosenweig has been working on reverse engineering the Apple M1 GPU since January
has now posted a screenshot of quote gnome shell on the Apple M1 bare metal.
A terminal in that screenshot shows that it's running a pre-release of the 514 kernel, Debian
Linux and GNOME 3.38.4.
No sadly not GNOME 40.
She went on to note that no it's not GPU accelerated but honestly it's usable.
Not great but usable on a near mainline kernel and if missing most drivers is this snappy
when everything else is done Asahi Linux will run like a dream.
They seem to be getting excited over at Ashi Linux like I think they're feeling the momentum
build and she further explained that the kernel that they used included patches for the pin
control subsystem PCIe and the work in progress display driver that gets display USB and Ethernet
all up and going.
Those drivers are at least there if not complete yet.
She described it as a nice milestone on the way to building a complete DCP driver.
Now this DCP is a co-processor for the GPU in Apple Silicon Macs and obviously getting
full GPU acceleration on these M1 Macs is critical to a nice polished usable Linux desktop
and the team seems to be making good progress really with the trickiest bit for future Linux
M1 users possibly being matching compatible firmware.
Earlier this month the project lead Hector Martin said that Linux would only support
specific firmware versions since the DCP interface is not stable and changes with every Mac OS
version.
If you were on the internet this week it was hard to miss the celebration of Linux's 30th
birthday.
Fitting really since the internet is powered by Linux.
Although commonly accepted that Linux's birthday is August 25th there is some dispute.
The first news group post is from August 25th with headers and all that to confirm the date.
But there is also a 0.01 release that was never released publicly only in private to
a few people who had already shown interest.
Unfortunately none of those emails survive.
But you can still find the September 17th date in the tar file of that release.
In a post celebrating the anniversary Red Hat said that quote the reason that Linux
has been arguably the most successful operating system of all time is due to the fact that
its license allowed copying, improvement, distribution and required sharing of changes.
In a throwback quote from Linus he also noted the importance of the license saying I actually
originally released Linux with complete sources under a non GPL copyright that was actually
much more restrictive than the GPL.
It required that all sources always be available and it also didn't allow any money to be exchanged
for Linux at all.
He went on to say I changed the copyright to the GPL within roughly half a year.
It quickly became evident that my original copyright was so restrictive that it prohibited
some entirely valid uses.
Making Linux GPL was definitely the best thing I ever did.
Hmm interesting and it was it was also a good read over the register that had an interview
with Greg KH to note the 30th anniversary and Greg has such a pragmatic view of everything
he's still very much head down working kind of answers but there was a specific exchange
in there that we will link to that caught our attention.
The register asked do the Linux maintainers see any other technology projects in a competitive
light e.g. Google's fuchsia effort if not why not and if so how does that inform decisions.
Greg answered with I would love some real competition in operating system kernels.
We lost some good feedback loops when we'd work with the BSD kernel developers in the
past but unfortunately most of them went to work for Apple and disappeared.
Some of the ideas in fuchsia look interesting and I've talked with the developers there
about some of them maybe our eventual future future won't be so disastrous after all maybe
a little competitive kick in the butt is exactly what the kernel needs not that it's not doing
great the competition always seems to make things better either way a lot's going to
happen and there's a lot to keep track of and we do it every single week so go to Linux
action news dot com slash subscribe for all the ways to get new episodes and Linux action
news dot com slash contact for ways to get in touch.
And don't miss my short appearance on the Linode YouTube channel.
They caught up with me while I was in Denver and that video is now up on their YouTube
channel and I remain on the road.
You can see my journey live at colony tracker dot live.
As for us we'll be back next Monday with our weekly take on the latest Linux and open source
news.
Thanks for joining us and that's all the news for this week.

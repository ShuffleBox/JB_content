1
00:00:00,000 --> 00:00:10,180
Hello and welcome to Linux Action News, episode 259, recorded on September 21st, 2022. I'm

2
00:00:10,180 --> 00:00:11,180
Chris.

3
00:00:11,180 --> 00:00:12,180
And I'm Wes.

4
00:00:12,180 --> 00:00:16,620
Hello, Wes from Southern Oregon. Let's do the news.

5
00:00:16,620 --> 00:00:24,860
We start this week with some great news for GNOME users. Version 43 has been released.

6
00:00:24,860 --> 00:00:30,000
Something at this point typical, but always great to see improvements include work on

7
00:00:30,000 --> 00:00:39,040
Wayland, plus more apps making the migration from GTK 3 to GTK 4. But GNOME 43 also has

8
00:00:39,040 --> 00:00:43,240
some new privacy settings, including a screen that provides information about the security

9
00:00:43,240 --> 00:00:47,880
of your physical hardware, its configuration, and the firmware.

10
00:00:47,880 --> 00:00:53,440
Yeah, we've covered some of that work that made that possible a few weeks back in Linux

11
00:00:53,440 --> 00:00:57,920
Action News, and it's an area I think we'll see some significant future development as

12
00:00:57,920 --> 00:01:01,880
well. So it's definitely worth keeping an eye on as different hardware vendors get on

13
00:01:01,880 --> 00:01:07,280
board and the GNOME team works further on the UI. I think the biggest user facing feature

14
00:01:07,280 --> 00:01:11,640
has got to be that new quick settings menu. The new design will undoubtedly work well

15
00:01:11,640 --> 00:01:18,580
on mobile devices if those exist for GNOME and should be easy to use by most new users.

16
00:01:18,580 --> 00:01:24,720
And Wes, you mentioned that steady march towards GTK 4. Yeah, well, I mean, that really was

17
00:01:24,720 --> 00:01:29,160
a big focus this cycle. Here's just kind of an example of some of the apps that got migrated

18
00:01:29,160 --> 00:01:37,440
to GTK 4 this cycle. Files, Maps, Logs, Builder, Console, and the initial setup wizard, amongst

19
00:01:37,440 --> 00:01:38,440
others.

20
00:01:38,440 --> 00:01:43,520
It wasn't just users scoring some updates this time around, though. No, developers also

21
00:01:43,520 --> 00:01:49,800
get a lot out of 4.3, including a huge builder update, a range of enhancements to developer

22
00:01:49,800 --> 00:01:56,240
libraries, including GTK, GLib, LibEdueta, and a whole lot more. In light of all these

23
00:01:56,240 --> 00:02:01,160
updates, well, the GNOME project has put together a special page to cover the updates developers

24
00:02:01,160 --> 00:02:10,480
in particular need to know. We'll have a link to that in the notes.

25
00:02:10,480 --> 00:02:15,920
GNOME 76 has launched a significant redesign to their Thaleo desktop this week. This update

26
00:02:15,920 --> 00:02:20,480
includes an overhaul of the internals, of course, but also the most significant chassis

27
00:02:20,480 --> 00:02:25,800
design change since the original launch of the Thaleo four years ago. The biggest change

28
00:02:25,800 --> 00:02:31,760
appearance wise for the Colorado built Linux desktop? Well, it's the removal of its famous

29
00:02:31,760 --> 00:02:38,360
wood veneer, replaced now by a sleek user replaceable accent panel. True, and that could

30
00:02:38,360 --> 00:02:43,720
be a wood panel or it could be a custom design. We have a fully loaded unit in the studio,

31
00:02:43,720 --> 00:02:47,600
and we've had it for a few weeks running a series of tests and different workloads on

32
00:02:47,600 --> 00:02:52,800
it to get an idea of what this kind of system is capable of. We have a ton of data and notes

33
00:02:52,800 --> 00:02:57,620
that we'll share in an upcoming Koda Radio and Linux Unplugged episode.

34
00:02:57,620 --> 00:03:01,760
In the meantime, though, you can check out the lineup for yourself and get more details

35
00:03:01,760 --> 00:03:08,280
over at System76.com. And hey, while you're at it, check out our buddy Michael Dominic's

36
00:03:08,280 --> 00:03:15,840
review that just went live over on his blog.

37
00:03:15,840 --> 00:03:20,720
Rust in the Linux kernel dominated the local headlines again this week. And well, that's

38
00:03:20,720 --> 00:03:27,440
because at the 2022 Linux kernel maintainer summit, Miguel Ojeda updated the attendees

39
00:03:27,440 --> 00:03:32,720
on when we could expect to actually see Rust land in the Linux kernel.

40
00:03:32,720 --> 00:03:38,840
And it seems the answer to that question is soon, soon indeed. Linus Torvalds spoke up

41
00:03:38,840 --> 00:03:44,640
at the beginning of the session to say that he plans to accept Rust patches for the 6.1

42
00:03:44,640 --> 00:03:49,640
kernel, which should be released sometime mid December, at least unless Linus hears

43
00:03:49,640 --> 00:03:51,360
some strong objections.

44
00:03:51,360 --> 00:03:55,760
It's funny because everyone was expecting the 6.0 kernel to be the big release, but

45
00:03:55,760 --> 00:04:01,280
it's kind of looking like it's really going to be 6.1 that is the real barn burner kernel

46
00:04:01,280 --> 00:04:07,000
release. And maybe just kind of a bit awkwardly, the subject of older kernel developers who

47
00:04:07,000 --> 00:04:14,440
don't want to learn Rust and what to do about them came up once again. And Linus repeated

48
00:04:14,440 --> 00:04:19,080
that for now, maintainers would be able to say they don't want to deal with Rust and

49
00:04:19,080 --> 00:04:24,800
not have to. But others suggested that like it or not, they might at least need to learn

50
00:04:24,800 --> 00:04:30,680
how to do some Rust traces to debug problems when they come up after they touch their projects.

51
00:04:30,680 --> 00:04:35,160
But it seems the reality is, and Linus underscored this himself, all of this is going to take

52
00:04:35,160 --> 00:04:39,280
years. People will have time to adapt.

53
00:04:39,280 --> 00:04:44,440
As for when Rust will become mandatory for the kernel to build, Linus's answer to that

54
00:04:44,440 --> 00:04:50,520
one was quote, when the hardware he has requires it.

55
00:04:50,520 --> 00:04:55,880
I guess that's fair. He said that that would kind of indicate that Rust has been a success

56
00:04:55,880 --> 00:05:01,120
for kernel development. And you know what, that might just happen sooner than later.

57
00:05:01,120 --> 00:05:06,320
There's already talk of Asahi Linux using Rust for their new GPU driver. And efforts

58
00:05:06,320 --> 00:05:12,800
are currently underway to port Intel's E1000 Linux network driver over to Rust. So sure,

59
00:05:12,800 --> 00:05:18,480
it will take some time. But don't worry, Linus wants everyone to be reassured. And he joked

60
00:05:18,480 --> 00:05:25,960
that Rust wasn't so bad because quote, it's not Pearl.

61
00:05:25,960 --> 00:05:32,960
A few days ago, Canonical announced a new partnership with Asus IoT to certify Ubuntu

62
00:05:32,960 --> 00:05:35,840
Linux for their devices.

63
00:05:35,840 --> 00:05:40,600
Now that sounds like a pretty good partnership. And like that name suggests, this is Asus's

64
00:05:40,600 --> 00:05:46,600
division focused on Internet of Things hardware. And the hardware will be certified for Ubuntu

65
00:05:46,600 --> 00:05:54,640
2004 LTS. That's the previous Ubuntu LTS, as the current one is 2204.

66
00:05:54,640 --> 00:06:00,240
Using the previous major release, well, seems to be pretty standard in the IoT space at

67
00:06:00,240 --> 00:06:06,080
this point. Often, that's because development lead times at hardware partners aren't always

68
00:06:06,080 --> 00:06:07,800
as fast as we might like.

69
00:06:07,800 --> 00:06:13,400
Yeah, that seems kind of fair. It does take a lot of time and a lot of work to create

70
00:06:13,400 --> 00:06:18,360
hardware, it just moves slower. So we know the first device, it's going to be the Asus

71
00:06:18,360 --> 00:06:27,440
PE100A, which they call an intelligent edge computer. It's powered by an NXP iMX8M SoC.

72
00:06:27,440 --> 00:06:33,640
It's got four gigs of RAM and 16 gigabytes of eMMC storage. Well, that should be just

73
00:06:33,640 --> 00:06:39,560
enough for that Firefox snap.

74
00:06:39,560 --> 00:06:47,520
After six months of development, Java 19 is here. Now, technically, Java 19 doesn't actually

75
00:06:47,520 --> 00:06:52,940
ship any major new features. That's because everything that is arriving is either still

76
00:06:52,940 --> 00:06:58,620
a preview or an incubator. But let's ignore those technicalities for the moment because

77
00:06:58,620 --> 00:07:03,400
there's a lot of fascinating work that deserves to be talked about. That includes some fancy

78
00:07:03,400 --> 00:07:07,640
pattern matching that's been added, as well as a method for more efficient and convenient

79
00:07:07,640 --> 00:07:15,000
access to non Java libraries. But above those hidden away in the list are what I think are

80
00:07:15,000 --> 00:07:17,520
two real gems.

81
00:07:17,520 --> 00:07:23,000
First of all, of course, the JDK has been ported to Linux on RISC-V. So I think we all

82
00:07:23,000 --> 00:07:27,840
know a huge feature of the JVM is that well, minus the architecture specific system API

83
00:07:27,840 --> 00:07:34,640
concerns, you get a write once run anywhere platform. And now with 19, they've extended

84
00:07:34,640 --> 00:07:37,320
that to the RISC-V world.

85
00:07:37,320 --> 00:07:43,960
The second item, well, it might just be ushering in a new world of concurrency for JVM based

86
00:07:43,960 --> 00:07:50,560
languages. And that's the introduction of virtual threads, which are lightweight threads

87
00:07:50,560 --> 00:07:56,280
that hopefully will dramatically reduce the effort of writing, maintaining and crucially

88
00:07:56,280 --> 00:08:02,640
observing high throughput concurrent applications. Now just a little background context before

89
00:08:02,640 --> 00:08:08,360
virtual threads were added, each thread in a Java app was mapped directly to a regular

90
00:08:08,360 --> 00:08:13,720
operating system thread. Now, this usually isn't a problem. JVM doesn't necessarily need

91
00:08:13,720 --> 00:08:18,160
to be concerned with things like direct scheduling and managing context switching and different

92
00:08:18,160 --> 00:08:24,120
threads on different cores. But if you have a really high throughput application, an application

93
00:08:24,120 --> 00:08:28,820
with a lot of complicated IO that maybe depends on other systems that can take a variable

94
00:08:28,820 --> 00:08:34,680
time to respond to you, well, in that case, you can end up blocking the underlying OS

95
00:08:34,680 --> 00:08:39,100
thread. And that can really hurt the scalability of your application. Over the years, there's

96
00:08:39,100 --> 00:08:43,440
been a few different techniques that have evolved to handle this, all of them implementing

97
00:08:43,440 --> 00:08:49,680
some kind of asynchronous programming abstraction. And yeah, there are some libraries and frameworks

98
00:08:49,680 --> 00:08:55,560
to do that on Java already. But they come with some downsides, especially around observability.

99
00:08:55,560 --> 00:09:00,600
There's also some languages that have taken the approach of just sort of directly labeling

100
00:09:00,600 --> 00:09:06,640
a new segment of the world as async. That's the style adopted by Python and JavaScript.

101
00:09:06,640 --> 00:09:11,860
This can work quite well, but does sometimes leave the developer living in two worlds at

102
00:09:11,860 --> 00:09:15,560
once where you've got the code implemented in a synchronous style. And you've got this

103
00:09:15,560 --> 00:09:20,340
other code over here that's implemented in the asynchronous style. Virtual threads are

104
00:09:20,340 --> 00:09:26,360
taking the approach already used by languages like Golang and Erlang or Elixir. In this

105
00:09:26,360 --> 00:09:31,920
case, the underlying virtual machine, the JVM, it handles figuring out if you're calling

106
00:09:31,920 --> 00:09:36,700
a function that's going to block on some IO. And it can figure out that should be made

107
00:09:36,700 --> 00:09:43,080
async all on its own. That means for an application developers, they can just go back to writing

108
00:09:43,080 --> 00:09:49,680
code that looks just like synchronous code. But under the hood, the JVM makes it scale.

109
00:09:49,680 --> 00:09:54,120
Now, virtual threads are still in preview. This is early days. It'll probably take a

110
00:09:54,120 --> 00:09:59,800
while for a lot of underlying frameworks and libraries to get updated to take full advantage.

111
00:09:59,800 --> 00:10:04,320
But this is a new approach to concurrency for Java. And there's a real hope here that

112
00:10:04,320 --> 00:10:09,900
this should make writing high performance applications a lot simpler, both on the engineering

113
00:10:09,900 --> 00:10:14,440
side up front, and when you have to debug it in production later. I think we could all

114
00:10:14,440 --> 00:10:20,480
use a little improvement there.

115
00:10:20,480 --> 00:10:24,840
Linode.com slash LAN go there to get $100 in 60 day credit on a new account. And it's

116
00:10:24,840 --> 00:10:30,320
a great way to support the show. Linode is fast, reliable cloud hosting developers trust

117
00:10:30,320 --> 00:10:34,840
Linode and Linux geeks love it. That's really how we've built and run everything that we

118
00:10:34,840 --> 00:10:39,480
deploy in the cloud for the last couple of years. Linode is even a huge part of the infrastructure

119
00:10:39,480 --> 00:10:43,360
that we use when I go on the road. And of course, Linode makes it possible for us to

120
00:10:43,360 --> 00:10:49,620
go on the road. I first discovered Linode at a Texas Linux fest. They were like, one

121
00:10:49,620 --> 00:10:53,880
of the few vendors that took this really early event serious and made it possible with both

122
00:10:53,880 --> 00:10:57,960
their support, and just, you know, throwing bodies at it and being there. And I thought,

123
00:10:57,960 --> 00:11:01,840
you know, they're not getting a lot from this, but they are investing in the community. I

124
00:11:01,840 --> 00:11:04,760
thought that's, that's worth checking out. I put them on the back of my mind next time

125
00:11:04,760 --> 00:11:08,780
I'm building something, I'm going to try them out. And sure enough, I did just that. I tried

126
00:11:08,780 --> 00:11:12,860
out Linode for myself for my own personal stuff that I was building, and I loved it.

127
00:11:12,860 --> 00:11:17,200
And when Jupiter Broadcasting went independent, Linode was one of the first names I called

128
00:11:17,200 --> 00:11:22,240
because I was such a happy customer. And now, you know what, it's been over three years.

129
00:11:22,240 --> 00:11:26,520
Wow, wow, that's incredible. And Linode has been a big part of that story. Linode has

130
00:11:26,520 --> 00:11:31,000
been a big part of the story of us going independent. And really the infrastructure we've built

131
00:11:31,000 --> 00:11:36,400
that has really been competitive is thanks to Linode. And they're 30 to 50% cheaper than

132
00:11:36,400 --> 00:11:40,140
the big hyperscalers that want to lock you into their crazy platforms, where they got

133
00:11:40,140 --> 00:11:45,800
weird names for everything. And Linode has the best performance. This is shown over and

134
00:11:45,800 --> 00:11:50,840
over again by third party reports, you can find them online, I've done some testing myself.

135
00:11:50,840 --> 00:11:55,360
And they have 11 data centers for you to choose from, with great features like object storage,

136
00:11:55,360 --> 00:12:01,080
cloud firewall, and VLAN support that lets you span a private network across multiple

137
00:12:01,080 --> 00:12:05,800
regions with Linode, some powerful stuff there. And of course, if you ever need help with

138
00:12:05,800 --> 00:12:10,880
support, if you ever need to do any data recovery, they have clear, easy to understand backups.

139
00:12:10,880 --> 00:12:14,720
And your infrastructure management tools are going to work great with Linode just as we

140
00:12:14,720 --> 00:12:19,160
do it already. So go build something, go learn something and try it for yourself. And it's

141
00:12:19,160 --> 00:12:23,340
a great way to support the show while you're getting 100 bucks at lino.com slash land go

142
00:12:23,340 --> 00:12:28,320
get that 60 day credit, kick the tires for yourself and support the show. It's lino.com

143
00:12:28,320 --> 00:12:37,960
slash LAN collide.com slash LAN collide is endpoint security that just uses the most

144
00:12:37,960 --> 00:12:43,080
powerful untapped resource in it, the end user, when you're trying to achieve security

145
00:12:43,080 --> 00:12:47,000
goals, whether it's for yourself or a third party audit, maybe it's new leadership, I

146
00:12:47,000 --> 00:12:52,080
have been there. The conventional wisdom is to treat every device like Fort Knox, you

147
00:12:52,080 --> 00:12:57,560
know what I'm talking about. Old school device management tools like MDMs that force disruptive,

148
00:12:57,560 --> 00:13:02,480
playful agents onto employees devices that slows down performance and treats privacy

149
00:13:02,480 --> 00:13:08,960
as an afterthought. And let's be honest, sometimes introduces their own security vulnerabilities.

150
00:13:08,960 --> 00:13:12,680
That's the way things have always been done. And it turns it admins and end users into

151
00:13:12,680 --> 00:13:19,120
enemies that creates this weird energy. It's not good. And often, it'll result in sort

152
00:13:19,120 --> 00:13:23,580
of like the shadow it projects where somebody who knows just enough to be dangerous will

153
00:13:23,580 --> 00:13:27,540
help everybody get set up on Dropbox or something like that. And then you walk in one day, and

154
00:13:27,540 --> 00:13:33,560
discover your users are all violating your policy. collide does things differently. Instead

155
00:13:33,560 --> 00:13:38,880
of forcing changes on users collide sends them security recommendations via slack collide

156
00:13:38,880 --> 00:13:43,120
will automatically notify your team when their devices are insecure, and then give them a

157
00:13:43,120 --> 00:13:48,360
step by step instruction on how to solve the problem. And by reaching out to employees

158
00:13:48,360 --> 00:13:53,200
via friendly slack dm and educating them about company policies, collide can help you build

159
00:13:53,200 --> 00:13:58,880
a culture in which everyone contributes to security, because everyone understands how

160
00:13:58,880 --> 00:14:03,200
and why to do it. And for it admins, collide provides a single dashboard that lets you

161
00:14:03,200 --> 00:14:08,040
monitor the security of your entire fleet. Maybe they're on a Mac, maybe they're on Windows,

162
00:14:08,040 --> 00:14:12,040
or maybe they're on Linux. Yep, you can manage it all and see at a glance which employees

163
00:14:12,040 --> 00:14:16,840
have their disk encrypted their OS up to date, a password manager installed, and it just

164
00:14:16,840 --> 00:14:21,440
makes it easy to prove compliance to yourself, your auditors leadership customers, whoever

165
00:14:21,440 --> 00:14:27,600
it be. So that's collide user centered cross platform and security for teams that slack,

166
00:14:27,600 --> 00:14:31,920
you can meet your compliance goals by putting users first. So visit collide.com slash LAN

167
00:14:31,920 --> 00:14:36,720
to find out how. And if you follow that link, and you sign up, even for just the you know,

168
00:14:36,720 --> 00:14:41,280
the old free activated trial there, they're going to give you a goodie bag that includes

169
00:14:41,280 --> 00:14:44,960
a free t shirt. So you don't even have to bump into us on the meetup to get some free

170
00:14:44,960 --> 00:14:55,720
swag. You just go to collide.com slash LAN. That's k o l i d e.com slash LAN.

171
00:14:55,720 --> 00:15:01,600
Just as we are sitting down to record today, framework, the famously user upgradable laptop

172
00:15:01,600 --> 00:15:10,000
manufacturer, they've announced the new framework laptop, Chromebook Edition. And as you might

173
00:15:10,000 --> 00:15:17,240
suspect, this is the framework team's spin on a fully blessed Google Chromebook. The

174
00:15:17,240 --> 00:15:21,480
framework Chromebook will get up to eight years of Chrome OS updates. You can download

175
00:15:21,480 --> 00:15:27,360
Android apps from Google Play, access Linux apps with Christine, and even use Steam on

176
00:15:27,360 --> 00:15:28,840
Chrome OS Alpha.

177
00:15:28,840 --> 00:15:35,280
Yeah, and in terms of specs, you're going to find a 12th Gen Intel i5 1240 p processor,

178
00:15:35,280 --> 00:15:40,680
with four physical cores, eight virtual CPU cores, and the capability of a 30 watt sustained

179
00:15:40,680 --> 00:15:45,880
performance load. And like other Chrome OS devices, it includes the Titan C security

180
00:15:45,880 --> 00:15:50,760
chip that's responsible for verified boot. It seems there's also the open source embedded

181
00:15:50,760 --> 00:15:55,720
controller and firmware with core boot that we've come to expect from framework.

182
00:15:55,720 --> 00:15:59,560
Something you don't see on many Chromebooks, though this system will support those framework

183
00:15:59,560 --> 00:16:07,560
modules. So users can add USB CA, HDMI, DisplayPort, or even Ethernet.

184
00:16:07,560 --> 00:16:10,760
There's no doubt this thing's going to be like the ultimate Chromebook. It's got that

185
00:16:10,760 --> 00:16:17,620
nice high resolution screen too. But the cost, it just seems like it's a bit too high for

186
00:16:17,620 --> 00:16:23,660
a Chromebook. It starts at 1000 US greenbacks. And that's before you've done any upgrades,

187
00:16:23,660 --> 00:16:27,880
or you've added any of those fancy modules. And I gotta say the early feedback in their

188
00:16:27,880 --> 00:16:32,820
community form, it's a bit mixed on that price point.

189
00:16:32,820 --> 00:16:38,040
It also appears that the existing framework laptops, well, they can't be reflashed to

190
00:16:38,040 --> 00:16:44,320
support Chrome OS. And that Titan security chip, well, it's only available on the motherboard

191
00:16:44,320 --> 00:16:47,320
that ships in the framework Chromebook.

192
00:16:47,320 --> 00:16:52,120
Yeah, okay. All right. That's a bit unfortunate. And that's the least it seems to be the way

193
00:16:52,120 --> 00:16:57,240
it is right now. And the Chromebook motherboard, you just can't go buy it on its own. Like

194
00:16:57,240 --> 00:17:02,360
you can all of the other framework laptop motherboards. So you couldn't just assemble

195
00:17:02,360 --> 00:17:07,360
it or maybe even do some kind of swap. If you have an existing framework and you wanted

196
00:17:07,360 --> 00:17:12,100
to turn it into a Chromebook, that option is just not available to you, even though

197
00:17:12,100 --> 00:17:14,360
you might have expected it from this company.

198
00:17:14,360 --> 00:17:20,360
Yeah, it all makes it seem that maybe framework is saying they're trying to enter a new market

199
00:17:20,360 --> 00:17:25,480
with this one. That might make sense. I mean, we just covered that Google is killing their

200
00:17:25,480 --> 00:17:30,760
Pixelbook. Maybe there is a hole in this market that framework is aiming to fill.

201
00:17:30,760 --> 00:17:35,640
Yeah, I could see that. And it does seem that Google engineers worked very closely with

202
00:17:35,640 --> 00:17:39,280
framework to get this thing certified to make sure it meets all of the requirements that

203
00:17:39,280 --> 00:17:44,200
every Chromebook meets. So I could see the logic in that. Instead of it, instead of doing

204
00:17:44,200 --> 00:17:49,760
their own hardware, Google decides to partner with a few hardware experts and build Pixelbook

205
00:17:49,760 --> 00:17:57,280
like devices. However, I don't know if framework is the one that I would have picked. Because

206
00:17:57,280 --> 00:18:02,720
this to me seems a lot more like a Google product than a framework product. It just

207
00:18:02,720 --> 00:18:07,080
sort of seems like on day one, they just had to jump through all these hoops to make this

208
00:18:07,080 --> 00:18:12,120
a Google blessed device. And so the result is as a customer, I'm kind of disappointed

209
00:18:12,120 --> 00:18:15,140
that you can't just swap out the motherboard like you can with all the other framework

210
00:18:15,140 --> 00:18:21,100
stuff or you can't just get this bios or those types of things. And also it just seems a

211
00:18:21,100 --> 00:18:27,080
bit odd and kind of frustrating that framework can manage to sell laptops pre loaded with

212
00:18:27,080 --> 00:18:33,640
Windows one of the trickiest operating systems in the world. And now Chrome OS, but they

213
00:18:33,640 --> 00:18:39,160
still struggle to ship a laptop pre installed with Linux. What's that about? And I just

214
00:18:39,160 --> 00:18:43,820
can't shake the feeling like this is just not the future direction any of us expected

215
00:18:43,820 --> 00:18:51,240
framework to go. Google and Chromebooks don't really strike me as an ally to the right to

216
00:18:51,240 --> 00:18:57,920
repair. It feels akin to selling self assembled cigarettes to kids, and then celebrating

217
00:18:57,920 --> 00:19:02,400
the fact that well, the kids can take the cigarettes apart and learn how they work.

218
00:19:02,400 --> 00:19:07,560
Well, great. Okay. But you're still selling them something that is toxic and going to

219
00:19:07,560 --> 00:19:13,280
get them hooked on something we don't want them hooked on. I don't know. Like I said,

220
00:19:13,280 --> 00:19:18,480
it's early days. Maybe these details get worked out as framework. Here's customer feedback.

221
00:19:18,480 --> 00:19:23,440
I don't know. I guess sometimes you just have to learn things the hard way. And maybe this

222
00:19:23,440 --> 00:19:28,680
is one of those moments. Hardware is hard. And I think if you were to look at the upshot

223
00:19:28,680 --> 00:19:37,240
on this, at least now there is a somewhat very kind of customizable laptop that you

224
00:19:37,240 --> 00:19:41,700
can run Chrome OS on and you're going to get eight years of support. That's not so bad

225
00:19:41,700 --> 00:19:45,400
at all. So there's that. We'll keep an eye on this, kind of see where this goes, see

226
00:19:45,400 --> 00:19:49,320
if it develops into something a little more appealing. And we'll let you know about that

227
00:19:49,320 --> 00:19:55,440
and everything else going on in the world of Linux from the road or not. Check out linuxactionnews.com

228
00:19:55,440 --> 00:20:01,040
slash subscribe for all the ways to get new episodes and linuxactionnews.com slash contact

229
00:20:01,040 --> 00:20:05,840
for ways to keep in touch. Our West Coast meetups are happening right now. I'm on the

230
00:20:05,840 --> 00:20:10,240
road to come see you. So join meetup.com slash Jupiter broadcasting for one of our events

231
00:20:10,240 --> 00:20:14,680
and let us know you're going to be there. If you can't make a meetup, just meet us back

232
00:20:14,680 --> 00:20:20,480
here next week for our take on the latest Linux and open source news. Thanks for joining

233
00:20:20,480 --> 00:20:40,840
us. That's all the news for this week.

